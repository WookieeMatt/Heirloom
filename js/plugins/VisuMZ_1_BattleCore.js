//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.69;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.69] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.69: August 18, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.03.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0x4b2772=_0x25c5;(function(_0x553757,_0x1b0789){const _0x94e5b3=_0x25c5,_0x245907=_0x553757();while(!![]){try{const _0x889ec9=-parseInt(_0x94e5b3(0x856))/0x1*(-parseInt(_0x94e5b3(0x842))/0x2)+-parseInt(_0x94e5b3(0x2f6))/0x3+parseInt(_0x94e5b3(0x688))/0x4+-parseInt(_0x94e5b3(0x8fc))/0x5+parseInt(_0x94e5b3(0x5e5))/0x6*(parseInt(_0x94e5b3(0x4cb))/0x7)+-parseInt(_0x94e5b3(0x375))/0x8+parseInt(_0x94e5b3(0x20a))/0x9;if(_0x889ec9===_0x1b0789)break;else _0x245907['push'](_0x245907['shift']());}catch(_0x3d0842){_0x245907['push'](_0x245907['shift']());}}}(_0x4df9,0xd97c0));var label=_0x4b2772(0x67d),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x4b2772(0xb8c)](function(_0xbe757f){const _0x5f287f=_0x4b2772;return _0xbe757f['status']&&_0xbe757f[_0x5f287f(0x380)][_0x5f287f(0x41a)]('['+label+']');})[0x0];function _0x25c5(_0x2b4129,_0x34c748){const _0x4df95c=_0x4df9();return _0x25c5=function(_0x25c544,_0x38e054){_0x25c544=_0x25c544-0x1d2;let _0x202fef=_0x4df95c[_0x25c544];return _0x202fef;},_0x25c5(_0x2b4129,_0x34c748);}VisuMZ[label][_0x4b2772(0x869)]=VisuMZ[label][_0x4b2772(0x869)]||{},VisuMZ[_0x4b2772(0x72d)]=function(_0x4b2a0b,_0x219d69){const _0x453393=_0x4b2772;for(const _0x31dee5 in _0x219d69){if(_0x453393(0x6af)!==_0x453393(0x6af)){_0x377da9[_0x453393(0x67d)]['Game_Battler_performActionStart'][_0x453393(0xb2b)](this,_0x26b305);if(!_0x147239[_0x453393(0x968)]()){const _0x2346a8=this[_0x453393(0x947)]();_0x2346a8&&_0x2346a8[_0x453393(0x400)]();}this[_0x453393(0x28d)](![]);}else{if(_0x31dee5[_0x453393(0x93d)](/(.*):(.*)/i)){const _0x2b3b30=String(RegExp['$1']),_0x2223d1=String(RegExp['$2'])[_0x453393(0x5fd)]()['trim']();let _0x5cd401,_0x520fd1,_0x420cd5;switch(_0x2223d1){case _0x453393(0xbb9):_0x5cd401=_0x219d69[_0x31dee5]!==''?Number(_0x219d69[_0x31dee5]):0x0;break;case'ARRAYNUM':_0x520fd1=_0x219d69[_0x31dee5]!==''?JSON['parse'](_0x219d69[_0x31dee5]):[],_0x5cd401=_0x520fd1[_0x453393(0x8b4)](_0x5dd57d=>Number(_0x5dd57d));break;case'EVAL':_0x5cd401=_0x219d69[_0x31dee5]!==''?eval(_0x219d69[_0x31dee5]):null;break;case _0x453393(0x517):_0x520fd1=_0x219d69[_0x31dee5]!==''?JSON[_0x453393(0x498)](_0x219d69[_0x31dee5]):[],_0x5cd401=_0x520fd1[_0x453393(0x8b4)](_0x17f8e9=>eval(_0x17f8e9));break;case _0x453393(0x8b1):_0x5cd401=_0x219d69[_0x31dee5]!==''?JSON[_0x453393(0x498)](_0x219d69[_0x31dee5]):'';break;case _0x453393(0x2f8):_0x520fd1=_0x219d69[_0x31dee5]!==''?JSON[_0x453393(0x498)](_0x219d69[_0x31dee5]):[],_0x5cd401=_0x520fd1['map'](_0x1ef678=>JSON[_0x453393(0x498)](_0x1ef678));break;case _0x453393(0x9ab):_0x5cd401=_0x219d69[_0x31dee5]!==''?new Function(JSON['parse'](_0x219d69[_0x31dee5])):new Function('return\x200');break;case _0x453393(0x7ec):_0x520fd1=_0x219d69[_0x31dee5]!==''?JSON['parse'](_0x219d69[_0x31dee5]):[],_0x5cd401=_0x520fd1[_0x453393(0x8b4)](_0xb43460=>new Function(JSON['parse'](_0xb43460)));break;case'STR':_0x5cd401=_0x219d69[_0x31dee5]!==''?String(_0x219d69[_0x31dee5]):'';break;case _0x453393(0x326):_0x520fd1=_0x219d69[_0x31dee5]!==''?JSON[_0x453393(0x498)](_0x219d69[_0x31dee5]):[],_0x5cd401=_0x520fd1[_0x453393(0x8b4)](_0x5e7f4d=>String(_0x5e7f4d));break;case _0x453393(0xcd5):_0x420cd5=_0x219d69[_0x31dee5]!==''?JSON[_0x453393(0x498)](_0x219d69[_0x31dee5]):{},_0x4b2a0b[_0x2b3b30]={},VisuMZ[_0x453393(0x72d)](_0x4b2a0b[_0x2b3b30],_0x420cd5);continue;case'ARRAYSTRUCT':_0x520fd1=_0x219d69[_0x31dee5]!==''?JSON['parse'](_0x219d69[_0x31dee5]):[],_0x5cd401=_0x520fd1[_0x453393(0x8b4)](_0x4e0098=>VisuMZ['ConvertParams']({},JSON[_0x453393(0x498)](_0x4e0098)));break;default:continue;}_0x4b2a0b[_0x2b3b30]=_0x5cd401;}}}return _0x4b2a0b;},(_0x1ad802=>{const _0x349381=_0x4b2772,_0x2339ce=_0x1ad802[_0x349381(0x8fe)];for(const _0x25f8a8 of dependencies){if(!Imported[_0x25f8a8]){alert('%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.'[_0x349381(0x934)](_0x2339ce,_0x25f8a8)),SceneManager[_0x349381(0xaf9)]();break;}}const _0x409e32=_0x1ad802[_0x349381(0x380)];if(_0x409e32['match'](/\[Version[ ](.*?)\]/i)){const _0x3b9217=Number(RegExp['$1']);if(_0x3b9217!==VisuMZ[label][_0x349381(0x3f6)]){if(_0x349381(0xcab)==='EUfhe')alert(_0x349381(0xb37)[_0x349381(0x934)](_0x2339ce,_0x3b9217)),SceneManager[_0x349381(0xaf9)]();else for(const _0x5816d0 of _0x4d62ac){for(const _0x1be05c of _0x1186d1){const _0x8faf67=_0x3c73e2[0x0][_0x349381(0x934)](_0x1be05c[0x0],_0x5816d0[0x0]),_0x4f4983=_0x2cdcb6[0x1]['format'](_0x1be05c[0x1],_0x5816d0[0x1])[_0x349381(0x75a)](),_0x580bd9=new _0x5b92ad(_0x4c1826[_0x349381(0x934)](_0x4f4983),'i');_0xc1fdb[_0x8faf67]=_0x580bd9;}}}}if(_0x409e32[_0x349381(0x93d)](/\[Tier[ ](\d+)\]/i)){if('QTlrH'!=='QTlrH'){_0x2e2e8e(_0x349381(0x5bb)),_0x4f0958[_0x349381(0xaf9)]();return;}else{const _0x3bc432=Number(RegExp['$1']);_0x3bc432<tier?(alert(_0x349381(0x3ac)[_0x349381(0x934)](_0x2339ce,_0x3bc432,tier)),SceneManager['exit']()):tier=Math['max'](_0x3bc432,tier);}}VisuMZ[_0x349381(0x72d)](VisuMZ[label][_0x349381(0x869)],_0x1ad802[_0x349381(0x98d)]);})(pluginData),VisuMZ[_0x4b2772(0xb0b)]=function(_0x20ad3c){const _0x9985e5=_0x4b2772;let _0x34d4de=[];for(const _0x4f72f1 of _0x20ad3c){_0x34d4de=_0x34d4de[_0x9985e5(0xbf3)](VisuMZ[_0x9985e5(0x932)](_0x4f72f1));}return _0x34d4de['filter'](_0x3ca1ac=>_0x3ca1ac);},VisuMZ[_0x4b2772(0x932)]=function(_0x266b3a){const _0x2af0b3=_0x4b2772,_0xdd2894=BattleManager['allBattleMembers']()['filter'](_0x158f08=>_0x158f08&&_0x158f08[_0x2af0b3(0x845)]()),_0x2988ed=BattleManager[_0x2af0b3(0x4f1)],_0x3c95d3=BattleManager['_target'],_0x1f585f=BattleManager[_0x2af0b3(0x5dc)]?BattleManager[_0x2af0b3(0x5dc)][_0x2af0b3(0x36a)](0x0):_0xdd2894;_0x266b3a=_0x266b3a[_0x2af0b3(0xa42)]()['trim']();if(_0x266b3a===_0x2af0b3(0x626))return[_0x2988ed];else{if(_0x266b3a===_0x2af0b3(0x5d4)){if('HuEaW'!=='BIfVJ')return[_0x3c95d3];else _0x312e11['motionIdle']=_0x10c910(_0x26c8eb['$1'])[_0x2af0b3(0xa42)]()['trim']();}else{if(_0x266b3a===_0x2af0b3(0xc31)){if(_0x3c95d3){const _0xf0f9f5=_0x1f585f[_0x2af0b3(0xae6)](_0x3c95d3);return _0xf0f9f5>=0x0?[_0x1f585f[_0xf0f9f5-0x1]||_0x3c95d3]:[_0x3c95d3];}}else{if(_0x266b3a==='text\x20target'){if('QzWEH'!==_0x2af0b3(0x1ff)){if(_0x3c95d3){const _0x3ead8c=_0x1f585f[_0x2af0b3(0xae6)](_0x3c95d3);return _0x3ead8c>=0x0?[_0x1f585f[_0x3ead8c+0x1]||_0x3c95d3]:[_0x3c95d3];}}else _0x3379e5=_0x43be0b[_0x2af0b3(0xbf3)](_0x414f90[_0x2af0b3(0x932)](_0x538f89));}else{if(_0x266b3a===_0x2af0b3(0x212))return'brErk'!==_0x2af0b3(0x6a1)?this[_0x2af0b3(0xa5c)]()[_0x2af0b3(0x8fe)]!=='':_0x1f585f;else{if(_0x266b3a===_0x2af0b3(0xa8f)){if(_0x2af0b3(0xc9e)!==_0x2af0b3(0x47d))return[_0x2988ed][_0x2af0b3(0xbf3)](_0x1f585f);else{if(this[_0x2af0b3(0x63a)]!==_0x3b28cd)return![];if(!_0x295567[_0x2af0b3(0x885)]())return![];return _0x1e2f8a[_0x2af0b3(0x67d)]['Settings'][_0x2af0b3(0x335)][_0x2af0b3(0x946)];}}else{if(_0x266b3a==='not\x20focus')return _0xdd2894['filter'](_0x5bcde5=>_0x5bcde5!==_0x2988ed&&!_0x1f585f['includes'](_0x5bcde5)&&_0x5bcde5[_0x2af0b3(0x5c4)]());}}}}}}if(_0x2988ed){if(_0x266b3a===_0x2af0b3(0x525)){if(_0x2af0b3(0x2c3)!==_0x2af0b3(0x8e9))return _0x2988ed[_0x2af0b3(0x8a6)]()[_0x2af0b3(0x668)]();else{if(_0x550a16[_0x2af0b3(0x6d7)]())return;if(!_0x9d4574)return;if(!_0x2eaaf0['canMove']())return;_0x581545[_0x2af0b3(0x67d)][_0x2af0b3(0x93e)][_0x2af0b3(0xb2b)](this);}}else{if(_0x266b3a===_0x2af0b3(0x79f)){if(_0x2af0b3(0xbde)!=='FbpRR'){const _0x4a118e=_0x3b0341(_0x30fbec['$1']);_0x4a118e<_0x19a8cc?(_0xdef8d2('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'[_0x2af0b3(0x934)](_0x4838e3,_0x4a118e,_0x1cbd51)),_0x41c494['exit']()):_0x4b57f7=_0x522aad[_0x2af0b3(0x20e)](_0x4a118e,_0x40e93f);}else return _0x2988ed[_0x2af0b3(0x8a6)]()['aliveMembers']()[_0x2af0b3(0xb8c)](_0x34c55a=>_0x34c55a!==_0x2988ed);}else{if(_0x266b3a===_0x2af0b3(0x47e))return _0x2988ed[_0x2af0b3(0x8a6)]()[_0x2af0b3(0x668)]()[_0x2af0b3(0xb8c)](_0x3c0ecd=>_0x3c0ecd!==_0x3c95d3);else{if(_0x266b3a===_0x2af0b3(0x83d))return _0x2af0b3(0x8fd)===_0x2af0b3(0x1f8)?_0x3cdc5b[_0x2af0b3(0x207)]:_0x2988ed[_0x2af0b3(0x8a6)]()[_0x2af0b3(0xc8c)]();else{if(_0x266b3a[_0x2af0b3(0x93d)](/FRIEND INDEX (\d+)/i)){const _0xb49073=Number(RegExp['$1']);return[_0x2988ed[_0x2af0b3(0x8a6)]()[_0x2af0b3(0x644)]()[_0xb49073]];}}}}}if(_0x266b3a===_0x2af0b3(0x3a6))return _0x2988ed[_0x2af0b3(0xbfe)]()[_0x2af0b3(0x668)]();else{if(_0x266b3a==='alive\x20opponents\x20not\x20target')return _0x2988ed[_0x2af0b3(0xbfe)]()['aliveMembers']()[_0x2af0b3(0xb8c)](_0x384dde=>_0x384dde!==_0x3c95d3);else{if(_0x266b3a===_0x2af0b3(0x703))return _0x2988ed[_0x2af0b3(0xbfe)]()[_0x2af0b3(0xc8c)]();else{if(_0x266b3a[_0x2af0b3(0x93d)](/OPPONENT INDEX (\d+)/i)){if(_0x2af0b3(0x1d6)===_0x2af0b3(0x1d6)){const _0x2872af=Number(RegExp['$1']);return[_0x2988ed[_0x2af0b3(0xbfe)]()[_0x2af0b3(0x644)]()[_0x2872af]];}else this[_0x2af0b3(0x6ec)](_0x2332ed);}}}}}if(_0x266b3a===_0x2af0b3(0x81c)){if(_0x2af0b3(0xa81)===_0x2af0b3(0xa81))return $gameParty[_0x2af0b3(0x668)]();else{const _0x50e782=_0x3bd183[_0x2af0b3(0x632)][_0x2af0b3(0x36a)]['call'](arguments,0x1),_0x3ddb15={'name':_0x3eb3b7,'params':_0x50e782},_0x441a8c=this['_methods']['map'](_0x4d93dd=>_0x4d93dd[_0x2af0b3(0x8fe)])['indexOf'](_0x2af0b3(0xbe8));_0x441a8c>=0x0?this[_0x2af0b3(0x413)]['splice'](_0x441a8c,0x0,_0x3ddb15):this['_methods'][_0x2af0b3(0x21f)](_0x3ddb15);}}else{if(_0x266b3a==='alive\x20actors\x20not\x20user')return $gameParty[_0x2af0b3(0x668)]()[_0x2af0b3(0xb8c)](_0x5356a1=>_0x5356a1!==_0x2988ed);else{if(_0x266b3a===_0x2af0b3(0xb5f)){if(_0x2af0b3(0x9b2)!==_0x2af0b3(0x9ee))return $gameParty['aliveMembers']()['filter'](_0x334bf4=>_0x334bf4!==_0x3c95d3);else this[_0x2af0b3(0xc92)]['removeChild'](_0x2051bc);}else{if(_0x266b3a===_0x2af0b3(0x427))return $gameParty['deadMembers']();else{if(_0x266b3a['match'](/ACTOR INDEX (\d+)/i)){const _0x1ce8d8=Number(RegExp['$1']);return[$gameParty[_0x2af0b3(0x644)]()[_0x1ce8d8]];}else{if(_0x266b3a['match'](/ACTOR ID (\d+)/i)){const _0x2097b5=Number(RegExp['$1']);return[$gameActors['actor'](_0x2097b5)];}}}}}}if(_0x266b3a===_0x2af0b3(0xb33))return $gameTroop[_0x2af0b3(0x668)]();else{if(_0x266b3a===_0x2af0b3(0x5ba))return _0x2af0b3(0xa8d)==='bhoMV'?$gameTroop[_0x2af0b3(0x668)]()[_0x2af0b3(0xb8c)](_0x1b25b4=>_0x1b25b4!==_0x2988ed):_0x34d124[_0x2af0b3(0x632)][_0x2af0b3(0x6ea)]['call'](this);else{if(_0x266b3a==='alive\x20enemies\x20not\x20target')return $gameTroop[_0x2af0b3(0x668)]()[_0x2af0b3(0xb8c)](_0x10898b=>_0x10898b!==_0x3c95d3);else{if(_0x266b3a===_0x2af0b3(0x617))return $gameTroop[_0x2af0b3(0xc8c)]();else{if(_0x266b3a[_0x2af0b3(0x93d)](/ENEMY INDEX (\d+)/i)){const _0xabbb03=Number(RegExp['$1']);return[$gameTroop[_0x2af0b3(0x644)]()[_0xabbb03]];}else{if(_0x266b3a[_0x2af0b3(0x93d)](/ENEMY ID (\d+)/i)){if(_0x2af0b3(0x87e)==='XpxsE'){if(!this['_linkedSprite'])return;this['_battler']!==this['_linkedSprite'][_0x2af0b3(0x57d)]&&this[_0x2af0b3(0xc74)](this['_linkedSprite']['_battler']);}else{const _0x466886=Number(RegExp['$1']);return $gameTroop[_0x2af0b3(0x668)]()[_0x2af0b3(0xb8c)](_0x56fc2b=>_0x56fc2b[_0x2af0b3(0xc83)]()===_0x466886);}}}}}}}if(_0x266b3a===_0x2af0b3(0xc2a)){if(_0x2af0b3(0xada)!==_0x2af0b3(0x30e))return _0xdd2894['filter'](_0x161914=>_0x161914['isAlive']());else{const _0xb232b2=this['itemLineRect'](_0x19b009),_0x57ff6a=this[_0x2af0b3(0x5c2)](_0x261e70)[_0x2af0b3(0x67b)];return _0x57ff6a<=_0xb232b2[_0x2af0b3(0x67b)]?_0x2af0b3(0x639):_0x2af0b3(0xa4a);}}else{if(_0x266b3a==='alive\x20battlers\x20not\x20user')return _0xdd2894[_0x2af0b3(0xb8c)](_0x4f2f96=>_0x4f2f96['isAlive']()&&_0x4f2f96!==_0x2988ed);else{if(_0x266b3a===_0x2af0b3(0x4da))return _0xdd2894[_0x2af0b3(0xb8c)](_0x3cb61d=>_0x3cb61d[_0x2af0b3(0x8ca)]()&&_0x3cb61d!==_0x3c95d3);else{if(_0x266b3a===_0x2af0b3(0x631))return _0xdd2894['filter'](_0x358026=>_0x358026[_0x2af0b3(0x3ef)]());}}}return[];},PluginManager['registerCommand'](pluginData[_0x4b2772(0x8fe)],'ActSeq_Set_SetupAction',_0x2be2f5=>{const _0x3fd403=_0x4b2772;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3fd403(0x72d)](_0x2be2f5,_0x2be2f5);const _0x174a79=$gameTemp['getLastPluginCommandInterpreter'](),_0x483cfa=BattleManager[_0x3fd403(0x463)],_0x499108=BattleManager['_subject'],_0x54b14f=BattleManager[_0x3fd403(0x5dc)]?BattleManager['_allTargets'][_0x3fd403(0x36a)](0x0):[],_0x33b104=BattleManager[_0x3fd403(0x6c0)];if(!_0x174a79||!_0x483cfa||!_0x499108)return;if(!_0x483cfa[_0x3fd403(0x30a)]())return;if(_0x2be2f5['DisplayAction'])_0x33b104[_0x3fd403(0x657)](_0x499108,_0x483cfa[_0x3fd403(0x30a)]());if(_0x2be2f5[_0x3fd403(0xa18)]){if(_0x3fd403(0xbdd)==='YbGPq')return _0x217e23[_0x3fd403(0x745)](this),_0x85fa4b[_0x3fd403(0x67d)]['Game_Interpreter_PluginCommand'][_0x3fd403(0xb2b)](this,_0x367c34);else _0x33b104[_0x3fd403(0x21f)](_0x3fd403(0x81a),_0x499108,_0x54b14f,!![]);}if(_0x2be2f5['ActionStart'])_0x33b104[_0x3fd403(0x21f)](_0x3fd403(0x850),_0x499108,_0x483cfa);if(_0x2be2f5['WaitForMovement'])_0x33b104[_0x3fd403(0x21f)](_0x3fd403(0x643));if(_0x2be2f5[_0x3fd403(0x9df)])_0x33b104[_0x3fd403(0x21f)](_0x3fd403(0xbb1),_0x499108,_0x483cfa);if(_0x2be2f5[_0x3fd403(0x85a)])_0x33b104[_0x3fd403(0x21f)](_0x3fd403(0x5de));_0x174a79[_0x3fd403(0xc6d)]('battlelog');}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x2a8),_0x3df1dc=>{const _0x2bfb46=_0x4b2772;if(!SceneManager[_0x2bfb46(0x885)]())return;VisuMZ[_0x2bfb46(0x72d)](_0x3df1dc,_0x3df1dc);const _0x115b01=$gameTemp[_0x2bfb46(0x2ba)](),_0x25c3fd=BattleManager[_0x2bfb46(0x463)],_0xb5a113=BattleManager['_subject'],_0x5d9f5c=BattleManager[_0x2bfb46(0x5dc)]?BattleManager[_0x2bfb46(0x5dc)]['slice'](0x0):[],_0x492653=BattleManager['_logWindow'],_0x362fd7=_0x3df1dc[_0x2bfb46(0xa5f)]??![];if(!_0x115b01||!_0x25c3fd||!_0xb5a113)return;if(!_0x25c3fd[_0x2bfb46(0x30a)]())return;let _0x29753c=_0x362fd7?_0x492653['getDualWieldTimes'](_0xb5a113):0x1;for(let _0x6a797f=0x0;_0x6a797f<_0x29753c;_0x6a797f++){_0x362fd7&&_0xb5a113[_0x2bfb46(0x92d)]()&&(_0x2bfb46(0x3a9)!==_0x2bfb46(0x3a9)?this[_0x2bfb46(0x4e0)]=![]:_0x492653['push']('setActiveWeaponSet',_0xb5a113,_0x6a797f));if(_0x3df1dc['PerformAction'])_0x492653['push'](_0x2bfb46(0xb19),_0xb5a113,_0x25c3fd);if(_0x3df1dc[_0x2bfb46(0x1e2)]>0x0)_0x492653[_0x2bfb46(0x21f)]('waitCount',_0x3df1dc['WaitCount']);if(_0x3df1dc[_0x2bfb46(0xbc2)])_0x492653[_0x2bfb46(0x21f)](_0x2bfb46(0x857),_0xb5a113,_0x5d9f5c,_0x25c3fd[_0x2bfb46(0x30a)]()['animationId']);if(_0x3df1dc[_0x2bfb46(0x85a)])_0x492653[_0x2bfb46(0x21f)](_0x2bfb46(0x5de));for(const _0x5353e8 of _0x5d9f5c){if(!_0x5353e8)continue;if(_0x3df1dc[_0x2bfb46(0x770)])_0x492653[_0x2bfb46(0x21f)](_0x2bfb46(0x6bf),_0xb5a113,_0x5353e8);}}if(_0x362fd7&&_0xb5a113['isActor']()){if(_0x2bfb46(0xa41)!==_0x2bfb46(0xa41))return _0x5df764[_0x2bfb46(0x67d)][_0x2bfb46(0x869)][_0x2bfb46(0x681)][_0x2bfb46(0x9c1)]['call'](this,_0x25150d,_0x3e6319);else _0x492653[_0x2bfb46(0x21f)](_0x2bfb46(0x556),_0xb5a113);}if(_0x3df1dc[_0x2bfb46(0xa18)])_0x492653[_0x2bfb46(0x21f)](_0x2bfb46(0x81a),_0xb5a113,_0x5d9f5c,![]);_0x115b01['setWaitMode'](_0x2bfb46(0x371));}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],'ActSeq_Set_TargetActionSet',_0x40bcef=>{const _0x1ee6f9=_0x4b2772;if(!SceneManager[_0x1ee6f9(0x885)]())return;VisuMZ[_0x1ee6f9(0x72d)](_0x40bcef,_0x40bcef);const _0x129c7d=$gameTemp['getLastPluginCommandInterpreter'](),_0x2e9fab=BattleManager[_0x1ee6f9(0x463)],_0x462d5c=BattleManager['_subject'],_0x15f0e1=BattleManager[_0x1ee6f9(0x5dc)]?BattleManager[_0x1ee6f9(0x5dc)][_0x1ee6f9(0x36a)](0x0):[],_0x56ce96=BattleManager[_0x1ee6f9(0x6c0)],_0x549c27=_0x40bcef['DualWield']??![];if(!_0x129c7d||!_0x2e9fab||!_0x462d5c)return;if(!_0x2e9fab[_0x1ee6f9(0x30a)]())return;let _0x3dc8e8=_0x549c27?_0x56ce96[_0x1ee6f9(0xbfc)](_0x462d5c):0x1;for(let _0x4cb705=0x0;_0x4cb705<_0x3dc8e8;_0x4cb705++){if(_0x1ee6f9(0x5b6)!=='zwRyi')for(const _0x1dd942 of _0x15f0e1){if(!_0x1dd942)continue;_0x549c27&&_0x462d5c[_0x1ee6f9(0x92d)]()&&_0x56ce96[_0x1ee6f9(0x21f)]('setActiveWeaponSet',_0x462d5c,_0x4cb705);if(_0x40bcef['PerformAction'])_0x56ce96[_0x1ee6f9(0x21f)](_0x1ee6f9(0xb19),_0x462d5c,_0x2e9fab);if(_0x40bcef['WaitCount1']>0x0)_0x56ce96[_0x1ee6f9(0x21f)](_0x1ee6f9(0x59c),_0x40bcef['WaitCount1']);if(_0x40bcef[_0x1ee6f9(0xbc2)])_0x56ce96[_0x1ee6f9(0x21f)]('showAnimation',_0x462d5c,[_0x1dd942],_0x2e9fab[_0x1ee6f9(0x30a)]()[_0x1ee6f9(0x519)]);if(_0x40bcef[_0x1ee6f9(0xa93)]>0x0)_0x56ce96[_0x1ee6f9(0x21f)](_0x1ee6f9(0x59c),_0x40bcef['WaitCount2']);if(_0x40bcef[_0x1ee6f9(0x770)])_0x56ce96[_0x1ee6f9(0x21f)](_0x1ee6f9(0x6bf),_0x462d5c,_0x1dd942);}else return!![];}_0x549c27&&_0x462d5c[_0x1ee6f9(0x92d)]()&&_0x56ce96[_0x1ee6f9(0x21f)]('clearActiveWeaponSet',_0x462d5c);if(_0x40bcef[_0x1ee6f9(0xa18)])_0x56ce96[_0x1ee6f9(0x21f)](_0x1ee6f9(0x81a),_0x462d5c,_0x15f0e1,![]);_0x129c7d[_0x1ee6f9(0xc6d)](_0x1ee6f9(0x371));}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x8fb),_0x5a228b=>{const _0x1f58c7=_0x4b2772;if(!SceneManager[_0x1f58c7(0x885)]())return;VisuMZ[_0x1f58c7(0x72d)](_0x5a228b,_0x5a228b);const _0x1fcb5a=$gameTemp[_0x1f58c7(0x2ba)](),_0x3a2de1=BattleManager[_0x1f58c7(0x463)],_0x346b2e=BattleManager[_0x1f58c7(0x4f1)],_0x314e61=BattleManager[_0x1f58c7(0x5dc)]?BattleManager['_allTargets'][_0x1f58c7(0x36a)](0x0):[],_0x37a546=BattleManager[_0x1f58c7(0x6c0)];if(!_0x1fcb5a||!_0x3a2de1||!_0x346b2e)return;if(!_0x3a2de1[_0x1f58c7(0x30a)]())return;if(_0x5a228b[_0x1f58c7(0xa18)])_0x37a546['push'](_0x1f58c7(0x81a),_0x346b2e,_0x314e61,![]);if(_0x5a228b['WaitForNewLine'])_0x37a546['push'](_0x1f58c7(0x661));if(_0x5a228b[_0x1f58c7(0x247)])_0x37a546['push'](_0x1f58c7(0x2d0));if(_0x5a228b[_0x1f58c7(0x366)])_0x37a546[_0x1f58c7(0x21f)](_0x1f58c7(0x4d6));if(_0x5a228b[_0x1f58c7(0xc0a)])_0x37a546[_0x1f58c7(0x21f)](_0x1f58c7(0x595),_0x346b2e);if(_0x5a228b[_0x1f58c7(0x676)])_0x37a546[_0x1f58c7(0x21f)]('waitForMovement');_0x1fcb5a[_0x1f58c7(0xc6d)](_0x1f58c7(0x371));}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x5c1),_0x12ef63=>{const _0x30f9ed=_0x4b2772;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x30f9ed(0x39b)])return;VisuMZ['ConvertParams'](_0x12ef63,_0x12ef63);const _0x2fd9e5=$gameTemp[_0x30f9ed(0x2ba)](),_0x451810=_0x12ef63['WaitForAngle'];if(!_0x2fd9e5)return;$gameScreen[_0x30f9ed(0x4b8)](_0x12ef63['Angle'],_0x12ef63['Duration'],_0x12ef63[_0x30f9ed(0x278)]);if(_0x451810)_0x2fd9e5[_0x30f9ed(0xc6d)](_0x30f9ed(0xb03));}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x4b3),_0x567497=>{const _0x559a6a=_0x4b2772;if(!SceneManager[_0x559a6a(0x885)]())return;if(!Imported[_0x559a6a(0x39b)])return;VisuMZ[_0x559a6a(0x72d)](_0x567497,_0x567497);const _0x1799e0=$gameTemp[_0x559a6a(0x2ba)](),_0x5325a2=_0x567497[_0x559a6a(0x709)];if(!_0x1799e0)return;$gameScreen[_0x559a6a(0x4b8)](0x0,_0x567497['Duration'],_0x567497[_0x559a6a(0x278)]);if(_0x5325a2)_0x1799e0['setWaitMode'](_0x559a6a(0xb03));}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0xaa3),_0x595b88=>{const _0x4ea05e=_0x4b2772;if(!SceneManager[_0x4ea05e(0x885)]())return;if(!Imported[_0x4ea05e(0x39b)])return;const _0x275098=$gameTemp[_0x4ea05e(0x2ba)]();if(!_0x275098)return;_0x275098[_0x4ea05e(0xc6d)]('battleAngle');}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x6cb),_0x3cec98=>{const _0x4f8ef8=_0x4b2772;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4f8ef8(0x72d)](_0x3cec98,_0x3cec98);const _0x25c7ca=$gameTemp[_0x4f8ef8(0x2ba)](),_0x2a8fbf=BattleManager[_0x4f8ef8(0x463)],_0x5b2d7a=BattleManager[_0x4f8ef8(0x4f1)],_0x584b8f=VisuMZ[_0x4f8ef8(0xb0b)](_0x3cec98[_0x4f8ef8(0xa4f)]),_0x294473=_0x3cec98[_0x4f8ef8(0x655)],_0x32b1ae=BattleManager[_0x4f8ef8(0x6c0)];if(!_0x25c7ca||!_0x2a8fbf||!_0x5b2d7a)return;if(!_0x2a8fbf[_0x4f8ef8(0x30a)]())return;let _0x841df9=_0x2a8fbf[_0x4f8ef8(0x30a)]()[_0x4f8ef8(0x519)];if(_0x841df9<0x0)_0x841df9=_0x5b2d7a['attackAnimationId1']();$gameTemp[_0x4f8ef8(0x6f3)](_0x584b8f,_0x841df9,_0x294473);if(_0x3cec98[_0x4f8ef8(0x85a)]){if(_0x4f8ef8(0x4e9)===_0x4f8ef8(0x4e9))_0x25c7ca[_0x4f8ef8(0xc6d)](_0x4f8ef8(0x98a));else{if(!this[_0x4f8ef8(0x5db)]())return![];return _0x5b53c9['BattleCore']['Game_BattlerBase_canAttack'][_0x4f8ef8(0xb2b)](this);}}}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],'ActSeq_Animation_AttackAnimation',_0x81c45d=>{const _0x45f4b7=_0x4b2772;if(!SceneManager[_0x45f4b7(0x885)]())return;VisuMZ[_0x45f4b7(0x72d)](_0x81c45d,_0x81c45d);const _0xad4fe9=$gameTemp[_0x45f4b7(0x2ba)](),_0x2e99fc=BattleManager[_0x45f4b7(0x4f1)],_0x12ddf9=VisuMZ[_0x45f4b7(0xb0b)](_0x81c45d[_0x45f4b7(0xa4f)]),_0x564141=_0x81c45d[_0x45f4b7(0x655)],_0x489d6a=BattleManager[_0x45f4b7(0x6c0)];if(!_0xad4fe9||!_0x2e99fc)return;const _0x510ddc=_0x2e99fc[_0x45f4b7(0x90c)]();$gameTemp[_0x45f4b7(0x6f3)](_0x12ddf9,_0x510ddc,_0x564141),_0x81c45d[_0x45f4b7(0x85a)]&&(_0x45f4b7(0x723)!==_0x45f4b7(0x723)?(_0x56db07+=_0x4444ac,_0x4e3c31+=_0x5f3d47):_0xad4fe9['setWaitMode']('battleAnimation'));}),PluginManager['registerCommand'](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x90d),_0x1a969f=>{const _0x283e1d=_0x4b2772;if(!SceneManager[_0x283e1d(0x885)]())return;VisuMZ[_0x283e1d(0x72d)](_0x1a969f,_0x1a969f);const _0x505a09=_0x4f206a[_0x283e1d(0xc01)](_0x1a969f[_0x283e1d(0x6c5)]);if(_0x505a09<=0x0)return;const _0x6b3be=$gameTemp['getLastPluginCommandInterpreter'](),_0x4f206a=BattleManager[_0x283e1d(0x4f1)],_0x238eab=VisuMZ[_0x283e1d(0xb0b)](_0x1a969f[_0x283e1d(0xa4f)]),_0x25a8b7=_0x1a969f[_0x283e1d(0x655)],_0x4db459=BattleManager[_0x283e1d(0x6c0)];if(!_0x6b3be||!_0x4f206a)return;$gameTemp[_0x283e1d(0x6f3)](_0x238eab,_0x505a09,_0x25a8b7);if(_0x1a969f[_0x283e1d(0x85a)]){if(_0x283e1d(0x711)===_0x283e1d(0xae8)){this[_0x283e1d(0x21f)](_0x283e1d(0xb65),_0x51260c,_0x4690bf);if(!_0x273eb3[_0x283e1d(0x67d)]['Settings'][_0x283e1d(0xa7a)][_0x283e1d(0x69c)])return;const _0x154e0d=_0x3ad832[_0x283e1d(0x8fe)](),_0x5e277d=_0x20881b[_0x283e1d(0x2e3)]['format'](_0x154e0d,_0x5c8f9d['name']());this[_0x283e1d(0x21f)]('addText',_0x5e277d);}else _0x6b3be[_0x283e1d(0xc6d)](_0x283e1d(0x98a));}}),PluginManager['registerCommand'](pluginData[_0x4b2772(0x8fe)],'ActSeq_Animation_CastAnimation',_0x488d48=>{const _0x937b53=_0x4b2772;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x937b53(0x72d)](_0x488d48,_0x488d48);const _0x4fceba=$gameTemp[_0x937b53(0x2ba)](),_0x2e0499=BattleManager[_0x937b53(0x463)],_0x172183=_0x488d48[_0x937b53(0x655)],_0xf463d1=VisuMZ['CreateActionSequenceTargets'](_0x488d48['Targets']);if(!_0x4fceba||!_0x2e0499)return;if(!_0x2e0499[_0x937b53(0x30a)]())return;for(const _0x2d82ea of _0xf463d1){if(_0x937b53(0x63c)!==_0x937b53(0x63c)){const _0x36fe0c=_0x55dbcb[_0x148c4e];if(!_0x36fe0c)return;const _0x40a614=new _0x444cfe();this[_0x937b53(0xa90)](_0x40a614),_0x40a614[_0x937b53(0x669)](_0x232ec2);}else{if(!_0x2d82ea)continue;_0x2d82ea[_0x937b53(0xbb1)](_0x2e0499,_0x172183);}}if(_0x488d48[_0x937b53(0x85a)])_0x4fceba['setWaitMode'](_0x937b53(0x98a));}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],'ActSeq_Animation_ChangeBattlePortrait',_0x382b06=>{const _0x35169b=_0x4b2772;VisuMZ[_0x35169b(0x72d)](_0x382b06,_0x382b06);const _0x373575=$gameTemp[_0x35169b(0x2ba)](),_0x4446ab=VisuMZ[_0x35169b(0xb0b)](_0x382b06[_0x35169b(0xa4f)]),_0x3bdfc6=_0x382b06['Filename'];if(!_0x3bdfc6)return;for(const _0x5878fa of _0x4446ab){if(_0x35169b(0x548)!==_0x35169b(0x3dd)){if(!_0x5878fa)continue;if(!_0x5878fa['isActor']())continue;_0x5878fa[_0x35169b(0x7eb)](_0x3bdfc6);}else _0xc25e6d[_0x35169b(0x28a)]+='<CUSTOM\x20ACTION\x20SEQUENCE>';}}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x940),_0x59e1b9=>{const _0x32b3f9=_0x4b2772;if(!SceneManager[_0x32b3f9(0x21e)])return;if(!SceneManager[_0x32b3f9(0x21e)][_0x32b3f9(0x34a)])return;if(!Imported['VisuMZ_0_CoreEngine'])return;VisuMZ[_0x32b3f9(0x72d)](_0x59e1b9,_0x59e1b9);const _0x18f4e4=$gameTemp[_0x32b3f9(0x2ba)](),_0x5aa3fd=Math[_0x32b3f9(0x4ed)](_0x59e1b9[_0x32b3f9(0xc65)]),_0x8925e3=Math[_0x32b3f9(0x4ed)](_0x59e1b9[_0x32b3f9(0x621)]);$gameTemp[_0x32b3f9(0x206)](_0x5aa3fd,_0x8925e3,_0x59e1b9[_0x32b3f9(0x882)],_0x59e1b9[_0x32b3f9(0x655)],_0x59e1b9[_0x32b3f9(0xc40)]),_0x59e1b9['WaitComplete']&&_0x18f4e4&&(SceneManager[_0x32b3f9(0x21e)]['_spriteset']['updatePointAnimations'](),_0x18f4e4[_0x32b3f9(0xc6d)](_0x32b3f9(0x98a)));}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x276),_0x4ccb38=>{const _0x3c97d7=_0x4b2772;if(!SceneManager[_0x3c97d7(0x885)]())return;VisuMZ[_0x3c97d7(0x72d)](_0x4ccb38,_0x4ccb38);const _0x14f0b5=$gameTemp[_0x3c97d7(0x2ba)](),_0x4c2f5b=VisuMZ[_0x3c97d7(0xb0b)](_0x4ccb38[_0x3c97d7(0xa4f)]),_0x3cd2c2=_0x4ccb38[_0x3c97d7(0x882)],_0x1b8c3d=_0x4ccb38[_0x3c97d7(0x655)];if(!_0x14f0b5)return;$gameTemp[_0x3c97d7(0x6f3)](_0x4c2f5b,_0x3cd2c2,_0x1b8c3d);if(_0x4ccb38['WaitForAnimation'])_0x14f0b5['setWaitMode'](_0x3c97d7(0x98a));}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],_0x4b2772(0x779),_0x48e7ad=>{const _0x5f1e88=_0x4b2772;if(!SceneManager[_0x5f1e88(0x885)]())return;const _0x522f61=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x522f61)return;_0x522f61['setWaitMode'](_0x5f1e88(0x98a));}),PluginManager['registerCommand'](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x293),_0x51c2b7=>{const _0x18717=_0x4b2772;if(!SceneManager[_0x18717(0x885)]())return;VisuMZ[_0x18717(0x72d)](_0x51c2b7,_0x51c2b7);const _0x3bb827=BattleManager[_0x18717(0x6c0)],_0x444beb=_0x51c2b7[_0x18717(0x474)]&&Imported[_0x18717(0x54d)];_0x3bb827[_0x18717(0x60b)](_0x51c2b7[_0x18717(0x61b)]),_0x444beb&&Imported['VisuMZ_4_CombatLog']&&$gameSystem[_0x18717(0x4a8)](_0x51c2b7[_0x18717(0x61b)]||'',_0x51c2b7[_0x18717(0xc9b)]||0x0);}),PluginManager['registerCommand'](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x20f),_0x4b9bef=>{const _0x362925=_0x4b2772;if(!SceneManager[_0x362925(0x885)]())return;const _0x9d9e0e=BattleManager[_0x362925(0x6c0)];_0x9d9e0e['clear']();}),PluginManager['registerCommand'](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0xbd1),_0x2a9bc9=>{const _0x4734e9=_0x4b2772;if(!SceneManager[_0x4734e9(0x885)]())return;const _0x326d7e=$gameTemp[_0x4734e9(0x2ba)](),_0x146e7c=BattleManager[_0x4734e9(0x463)],_0x5b516d=BattleManager[_0x4734e9(0x4f1)],_0x4d0fa8=BattleManager[_0x4734e9(0x6c0)];if(!_0x326d7e||!_0x146e7c||!_0x5b516d)return;if(!_0x146e7c[_0x4734e9(0x30a)]())return;_0x4d0fa8[_0x4734e9(0x657)](_0x5b516d,_0x146e7c[_0x4734e9(0x30a)]()),_0x326d7e[_0x4734e9(0xc6d)](_0x4734e9(0x371));}),PluginManager['registerCommand'](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x8f3),_0xb56eda=>{const _0x3218e1=_0x4b2772;if(!SceneManager['isSceneBattle']())return;const _0x3d43a0=BattleManager['_logWindow'];_0x3d43a0[_0x3218e1(0x8e0)]();}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x823),_0x315892=>{const _0x1b721f=_0x4b2772;if(!SceneManager['isSceneBattle']())return;const _0x3a7f7e=BattleManager[_0x1b721f(0x6c0)];_0x3a7f7e[_0x1b721f(0x60d)]();}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],_0x4b2772(0x69e),_0x214ba7=>{const _0x3aa1f4=_0x4b2772;if(!SceneManager['isSceneBattle']())return;const _0xd64c48=BattleManager[_0x3aa1f4(0x6c0)];_0xd64c48[_0x3aa1f4(0xa58)]();}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],_0x4b2772(0x8c7),_0x4cd4aa=>{const _0x17c056=_0x4b2772;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x4cd4aa,_0x4cd4aa),SceneManager['_scene'][_0x17c056(0x420)](_0x4cd4aa[_0x17c056(0x832)]);}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],'ActSeq_BattleLog_WaitForBattleLog',_0x48c517=>{const _0x31e742=_0x4b2772;if(!SceneManager[_0x31e742(0x885)]())return;const _0x41e1f4=$gameTemp['getLastPluginCommandInterpreter']();_0x41e1f4[_0x31e742(0xc6d)](_0x31e742(0x371));}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],'ActSeq_BattleLog_WaitForNewLine',_0x53f135=>{const _0x1be0d9=_0x4b2772;if(!SceneManager[_0x1be0d9(0x885)]())return;const _0x2b93de=$gameTemp[_0x1be0d9(0x2ba)](),_0x5ab4ff=BattleManager[_0x1be0d9(0x6c0)];_0x5ab4ff[_0x1be0d9(0x661)](),_0x2b93de[_0x1be0d9(0xc6d)](_0x1be0d9(0x371));}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],_0x4b2772(0x8c9),_0x54e88c=>{const _0x1e1383=_0x4b2772;if(!SceneManager[_0x1e1383(0x885)]())return;if(!Imported[_0x1e1383(0x39b)])return;VisuMZ[_0x1e1383(0x72d)](_0x54e88c,_0x54e88c);const _0x3f3324=$gameScreen[_0x1e1383(0x877)]();_0x3f3324[_0x1e1383(0x52f)]=_0x54e88c[_0x1e1383(0x5c0)];}),PluginManager['registerCommand'](pluginData[_0x4b2772(0x8fe)],'ActSeq_Camera_FocusPoint',_0x32ade2=>{const _0x290657=_0x4b2772;if(!SceneManager[_0x290657(0x885)]())return;if(!Imported[_0x290657(0x39b)])return;VisuMZ['ConvertParams'](_0x32ade2,_0x32ade2);const _0x31af75=$gameTemp[_0x290657(0x2ba)](),_0x368c0a=_0x32ade2[_0x290657(0x7a4)];$gameScreen[_0x290657(0x46c)](_0x32ade2['FocusX'],_0x32ade2['FocusY'],_0x32ade2[_0x290657(0x8ec)],_0x32ade2[_0x290657(0x278)]);if(_0x368c0a)_0x31af75[_0x290657(0xc6d)](_0x290657(0x8ba));}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x91d),_0xf6f7bb=>{const _0x580449=_0x4b2772;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x580449(0x39b)])return;VisuMZ[_0x580449(0x72d)](_0xf6f7bb,_0xf6f7bb);const _0xf26d94=$gameTemp['getLastPluginCommandInterpreter'](),_0x4616a0=VisuMZ[_0x580449(0xb0b)](_0xf6f7bb[_0x580449(0xa4f)]),_0x28fdc8=_0xf6f7bb['WaitForCamera'];$gameScreen[_0x580449(0xa87)](_0x4616a0,_0xf6f7bb['Duration'],_0xf6f7bb[_0x580449(0x278)]);if(_0x28fdc8)_0xf26d94['setWaitMode'](_0x580449(0x8ba));}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],'ActSeq_Camera_Offset',_0x3156d7=>{const _0x519655=_0x4b2772;if(!SceneManager[_0x519655(0x885)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x519655(0x72d)](_0x3156d7,_0x3156d7);const _0x22f0e7=$gameTemp[_0x519655(0x2ba)](),_0x2839de=_0x3156d7[_0x519655(0x7a4)];$gameScreen['setBattleCameraOffset'](_0x3156d7['OffsetX'],_0x3156d7[_0x519655(0xbed)],_0x3156d7['Duration'],_0x3156d7[_0x519655(0x278)]);if(_0x2839de)_0x22f0e7[_0x519655(0xc6d)](_0x519655(0x8ba));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Camera_Reset',_0x46e1d5=>{const _0x4c5a4e=_0x4b2772;if(!SceneManager[_0x4c5a4e(0x885)]())return;if(!Imported[_0x4c5a4e(0x39b)])return;VisuMZ[_0x4c5a4e(0x72d)](_0x46e1d5,_0x46e1d5);const _0x4ee80b=$gameTemp[_0x4c5a4e(0x2ba)](),_0xac1283=_0x46e1d5[_0x4c5a4e(0x4ca)],_0x5ae19e=_0x46e1d5[_0x4c5a4e(0xbb4)],_0x260a6d=_0x46e1d5[_0x4c5a4e(0x7a4)];if(_0xac1283){const _0x5660ed=Math['round'](Graphics[_0x4c5a4e(0x67b)]/0x2),_0x4541eb=Math[_0x4c5a4e(0x4ed)](Graphics[_0x4c5a4e(0x4c3)]/0x2);$gameScreen['setBattleCameraPoint'](_0x5660ed,_0x4541eb,_0x46e1d5[_0x4c5a4e(0x8ec)],_0x46e1d5['EasingType']);}if(_0x5ae19e){if(_0x4c5a4e(0x654)===_0x4c5a4e(0x75f)){const _0x13c39f=_0x6cfdf[_0x4c5a4e(0x30a)]();this[_0x4c5a4e(0xbaa)](_0x287cf6,_0x3edf72,_0x140d53),this['createEffectActionSet'](_0x505fed,_0x1e4aad,_0x312bb9),this[_0x4c5a4e(0xcc4)](_0x28ce56,_0xb3d382,_0xf9bf1b);}else $gameScreen[_0x4c5a4e(0x7e9)](0x0,0x0,_0x46e1d5[_0x4c5a4e(0x8ec)],_0x46e1d5[_0x4c5a4e(0x278)]);}if(_0x260a6d)_0x4ee80b[_0x4c5a4e(0xc6d)]('battleCamera');}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],_0x4b2772(0x348),_0x2d7e8a=>{const _0x324cb9=_0x4b2772;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x324cb9(0x39b)])return;const _0x547dd8=$gameTemp[_0x324cb9(0x2ba)]();if(!_0x547dd8)return;_0x547dd8[_0x324cb9(0xc6d)](_0x324cb9(0x8ba));}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x537),_0x57b5f3=>{const _0x186787=_0x4b2772;if(!SceneManager[_0x186787(0x885)]())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ[_0x186787(0x72d)](_0x57b5f3,_0x57b5f3);const _0x309ee2=VisuMZ[_0x186787(0xb0b)](_0x57b5f3[_0x186787(0xa4f)]),_0xc1886c=_0x57b5f3[_0x186787(0x692)][_0x186787(0xa42)]()['trim']();for(const _0xe8a8b0 of _0x309ee2){if(!_0xe8a8b0)continue;_0xe8a8b0[_0x186787(0xba1)](_0xc1886c);}}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],_0x4b2772(0xadf),_0x4374fe=>{const _0x581e91=_0x4b2772;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ[_0x581e91(0x72d)](_0x4374fe,_0x4374fe);const _0x1481a7=VisuMZ[_0x581e91(0xb0b)](_0x4374fe[_0x581e91(0xa4f)]),_0x12992f=_0x4374fe['TimeScale'];for(const _0x48dbee of _0x1481a7){if(_0x581e91(0x376)===_0x581e91(0x48c))_0x3715de[_0x581e91(0x39d)]();else{if(!_0x48dbee)continue;_0x48dbee[_0x581e91(0x7e6)]()[_0x581e91(0x641)]=_0x12992f;}}}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x34e),_0x119b36=>{const _0x2424f4=_0x4b2772;if(!SceneManager[_0x2424f4(0x885)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ[_0x2424f4(0x72d)](_0x119b36,_0x119b36);const _0x363872=BattleManager[_0x2424f4(0x463)],_0x12c309=_0x119b36[_0x2424f4(0xcda)];if(!_0x363872)return;_0x363872['_battleCoreAddedElements']=_0x12c309;}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],'ActSeq_Element_Clear',_0x50600f=>{const _0xbc4e7e=_0x4b2772;if(!SceneManager[_0xbc4e7e(0x885)]())return;if(!Imported[_0xbc4e7e(0x795)])return;const _0x3174a3=BattleManager[_0xbc4e7e(0x463)];if(!_0x3174a3)return;_0x3174a3[_0xbc4e7e(0xb39)]();}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x6d8),_0x2b9d28=>{const _0x5b74f6=_0x4b2772;if(!SceneManager[_0x5b74f6(0x885)]())return;if(!Imported[_0x5b74f6(0x795)])return;VisuMZ[_0x5b74f6(0x72d)](_0x2b9d28,_0x2b9d28);const _0x60a669=BattleManager[_0x5b74f6(0x463)],_0x5c0769=_0x2b9d28[_0x5b74f6(0xcda)];if(!_0x60a669)return;_0x60a669[_0x5b74f6(0x58a)]=_0x5c0769;}),PluginManager['registerCommand'](pluginData[_0x4b2772(0x8fe)],'ActSeq_Element_NullElements',_0x5655c3=>{const _0x264bb2=_0x4b2772;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x4e2524=BattleManager[_0x264bb2(0x463)];if(!_0x4e2524)return;_0x4e2524[_0x264bb2(0x6ce)]=!![];}),PluginManager['registerCommand'](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0xb7c),_0x5d7b98=>{const _0x412a27=_0x4b2772;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x412a27(0x885)]())return;VisuMZ[_0x412a27(0x72d)](_0x5d7b98,_0x5d7b98);const _0x3721ec=VisuMZ[_0x412a27(0xb0b)](_0x5d7b98[_0x412a27(0xa4f)]);for(const _0x1a465d of _0x3721ec){if(_0x412a27(0x888)==='YrpRk'){if(!_0x1a465d)continue;_0x1a465d[_0x412a27(0x736)]('noise'),_0x1a465d[_0x412a27(0x736)]('glitch'),_0x1a465d[_0x412a27(0x736)]('tv'),_0x1a465d[_0x412a27(0xc43)]();}else _0x399ab9[_0x412a27(0x67d)][_0x412a27(0x2d1)]&&_0x5ad819[_0x412a27(0x67d)][_0x412a27(0x2d1)]['call'](this,_0x3939ad),_0x6dc671[_0x412a27(0x67d)][_0x412a27(0x953)](_0x3f03fa);}$gamePlayer[_0x412a27(0xa58)]();}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Horror_GlitchCreate',_0x3105cb=>{const _0x30cbf4=_0x4b2772;if(!Imported[_0x30cbf4(0xb9c)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x3105cb,_0x3105cb);const _0x1e0d51=VisuMZ['CreateActionSequenceTargets'](_0x3105cb['Targets']),_0x1acb7d='glitch';_0x3105cb[_0x30cbf4(0xc12)]=Math[_0x30cbf4(0x75d)](_0x3105cb[_0x30cbf4(0x5e4)]/0x2),_0x3105cb[_0x30cbf4(0x596)]=_0x3105cb[_0x30cbf4(0x5e4)],_0x3105cb[_0x30cbf4(0x645)]=!![];for(const _0x4384ad of _0x1e0d51){if(!_0x4384ad)continue;_0x4384ad['setHorrorEffectSettings'](_0x1acb7d,_0x3105cb);}$gamePlayer[_0x30cbf4(0xa58)]();}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x640),_0x13ad4b=>{const _0x23ef8=_0x4b2772;if(!Imported[_0x23ef8(0xb9c)])return;if(!SceneManager[_0x23ef8(0x885)]())return;VisuMZ[_0x23ef8(0x72d)](_0x13ad4b,_0x13ad4b);const _0x17a09c=VisuMZ[_0x23ef8(0xb0b)](_0x13ad4b[_0x23ef8(0xa4f)]);for(const _0x2949b5 of _0x17a09c){if(_0x23ef8(0x2e1)===_0x23ef8(0x2e1)){if(!_0x2949b5)continue;_0x2949b5['removeHorrorEffect'](_0x23ef8(0x494));}else{if(!_0x16714f[_0x23ef8(0x67d)][_0x23ef8(0x869)]['BattleLayout']['ShowFacesListStyle'])return;const _0x33d12e=this[_0x23ef8(0xa05)](_0x2ee9fc),_0x5b6d1e=this[_0x23ef8(0x9b4)](_0x3b147a);_0x5b6d1e['width']=_0xd288db[_0x23ef8(0x810)],_0x5b6d1e[_0x23ef8(0x4c3)]-=0x2,this[_0x23ef8(0xb1e)](_0x33d12e,_0x5b6d1e['x']+0x1,_0x5b6d1e['y']+0x1,_0x5b6d1e[_0x23ef8(0x67b)],_0x5b6d1e[_0x23ef8(0x4c3)]);}}$gamePlayer[_0x23ef8(0xa58)]();}),PluginManager['registerCommand'](pluginData['name'],_0x4b2772(0xbab),_0x4525f9=>{const _0x2050a6=_0x4b2772;if(!Imported[_0x2050a6(0xb9c)])return;if(!SceneManager[_0x2050a6(0x885)]())return;VisuMZ[_0x2050a6(0x72d)](_0x4525f9,_0x4525f9);const _0x27f160=VisuMZ[_0x2050a6(0xb0b)](_0x4525f9[_0x2050a6(0xa4f)]),_0x48c10a=_0x2050a6(0x87b);for(const _0x252e9f of _0x27f160){if(!_0x252e9f)continue;_0x252e9f[_0x2050a6(0x377)](_0x48c10a,_0x4525f9);}$gamePlayer[_0x2050a6(0xa58)]();}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x2eb),_0xad1c67=>{const _0xd70ec2=_0x4b2772;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0xd70ec2(0x885)]())return;VisuMZ['ConvertParams'](_0xad1c67,_0xad1c67);const _0x15b911=VisuMZ[_0xd70ec2(0xb0b)](_0xad1c67[_0xd70ec2(0xa4f)]);for(const _0x47bc7c of _0x15b911){if(_0xd70ec2(0xbd5)===_0xd70ec2(0xbd5)){if(!_0x47bc7c)continue;_0x47bc7c[_0xd70ec2(0x736)](_0xd70ec2(0x87b));}else this[_0xd70ec2(0x2d8)](0x1);}$gamePlayer['refresh']();}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x299),_0x533d19=>{const _0x14ef1d=_0x4b2772;if(!Imported[_0x14ef1d(0xb9c)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x14ef1d(0x72d)](_0x533d19,_0x533d19);const _0x366819=VisuMZ[_0x14ef1d(0xb0b)](_0x533d19[_0x14ef1d(0xa4f)]),_0x34a85a='tv';for(const _0x509fcf of _0x366819){if(!_0x509fcf)continue;_0x509fcf[_0x14ef1d(0x377)](_0x34a85a,_0x533d19);}$gamePlayer[_0x14ef1d(0xa58)]();}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Horror_TVRemove',_0x2aadf3=>{const _0x5882ac=_0x4b2772;if(!Imported[_0x5882ac(0xb9c)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5882ac(0x72d)](_0x2aadf3,_0x2aadf3);const _0x145289=VisuMZ['CreateActionSequenceTargets'](_0x2aadf3[_0x5882ac(0xa4f)]);for(const _0x19e36a of _0x145289){if(!_0x19e36a)continue;_0x19e36a[_0x5882ac(0x736)]('tv');}$gamePlayer[_0x5882ac(0xa58)]();}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],'ActSeq_Impact_BlueRedInvert',_0x2445c9=>{const _0x5e3b03=_0x4b2772;if(!Imported[_0x5e3b03(0x6ed)])return;const _0x3c20d1=SceneManager[_0x5e3b03(0x21e)][_0x5e3b03(0x34a)];if(!_0x3c20d1)return;if(VisuMZ['ActSeqImpact']['version']<=1.04){if(_0x5e3b03(0x61c)!==_0x5e3b03(0x61c))_0x1ada01[_0x5e3b03(0x67d)][_0x5e3b03(0xa7b)]['call'](this),this[_0x5e3b03(0x37c)]();else{alert(_0x5e3b03(0x5bb)),SceneManager[_0x5e3b03(0xaf9)]();return;}}VisuMZ['ConvertParams'](_0x2445c9,_0x2445c9);const _0x36319b=_0x2445c9[_0x5e3b03(0x7ae)];_0x3c20d1[_0x5e3b03(0xac9)](_0x36319b);}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0xa21),_0x39921e=>{const _0x3b6714=_0x4b2772;if(!SceneManager[_0x3b6714(0x885)]())return;if(!Imported[_0x3b6714(0x6ed)])return;const _0x2acf99=SceneManager[_0x3b6714(0x21e)][_0x3b6714(0x34a)];if(!_0x2acf99)return;VisuMZ[_0x3b6714(0x72d)](_0x39921e,_0x39921e);const _0x24023c=_0x39921e['Intensity']||0x1,_0x5c71fe=_0x39921e[_0x3b6714(0x8ec)]||0x1,_0x2b1cf1=_0x39921e[_0x3b6714(0x278)]||_0x3b6714(0x97b);_0x2acf99['setupRgbSplitImpactFilter'](_0x24023c,_0x5c71fe,_0x2b1cf1);}),PluginManager['registerCommand'](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x6d0),_0x4d243e=>{const _0x4092ca=_0x4b2772;if(!Imported[_0x4092ca(0x6ed)])return;const _0x478ec1=SceneManager['_scene'][_0x4092ca(0x34a)];if(!_0x478ec1)return;if(VisuMZ[_0x4092ca(0xce7)][_0x4092ca(0x3f6)]<=1.04){if('FQBKA'!==_0x4092ca(0xca9)){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x4092ca(0xaf9)]();return;}else return _0x3dfa06=_0x33ec6f['round'](_0x217c49*1.2),_0x563d60[_0x4092ca(0x67d)][_0x4092ca(0xc63)][_0x4092ca(0xb2b)](this,_0x6fa10d,_0x2fe42c);}VisuMZ['ConvertParams'](_0x4d243e,_0x4d243e);const _0x88ff51=_0x4d243e[_0x4092ca(0x7ae)];_0x478ec1[_0x4092ca(0x7b6)](_0x88ff51);}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],'ActSeq_Impact_MotionBlurScreen',_0x3d0713=>{const _0x28a005=_0x4b2772;if(!SceneManager[_0x28a005(0x885)]())return;if(!Imported[_0x28a005(0x6ed)])return;const _0x16eeda=SceneManager['_scene']['_spriteset'];if(!_0x16eeda)return;VisuMZ['ConvertParams'](_0x3d0713,_0x3d0713);const _0x5149ef=Number(_0x3d0713[_0x28a005(0x9d0)])||0x0,_0x5c030d=Number(_0x3d0713['Rate']),_0x13d314=_0x3d0713[_0x28a005(0x8ec)]||0x1,_0x4cf120=_0x3d0713[_0x28a005(0x278)]||_0x28a005(0x97b);_0x16eeda[_0x28a005(0x5ec)](_0x5149ef,_0x5c030d,_0x13d314,_0x4cf120);}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],'ActSeq_Impact_MotionBlurTarget',_0x3b4a40=>{const _0x1497b8=_0x4b2772;if(!SceneManager[_0x1497b8(0x885)]())return;if(!Imported[_0x1497b8(0x6ed)])return;const _0x21fb63=SceneManager[_0x1497b8(0x21e)][_0x1497b8(0x34a)];if(!_0x21fb63)return;VisuMZ[_0x1497b8(0x72d)](_0x3b4a40,_0x3b4a40);const _0x69c0da=Number(_0x3b4a40[_0x1497b8(0x9d0)])||0x0,_0xf22f6e=Number(_0x3b4a40[_0x1497b8(0x2ae)]),_0x11839b=_0x3b4a40['Duration']||0x1,_0x198512=_0x3b4a40['EasingType']||'Linear',_0x501298=VisuMZ['CreateActionSequenceTargets'](_0x3b4a40[_0x1497b8(0xa4f)]);for(const _0x8664c5 of _0x501298){if(!_0x8664c5)continue;if(!_0x8664c5[_0x1497b8(0x947)]())continue;_0x8664c5['battler']()[_0x1497b8(0x5ec)](_0x69c0da,_0xf22f6e,_0x11839b,_0x198512);}}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],_0x4b2772(0x609),_0xec5d30=>{const _0x3da2cd=_0x4b2772;if(!SceneManager[_0x3da2cd(0x885)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ[_0x3da2cd(0x72d)](_0xec5d30,_0xec5d30);const _0x244333={'delay':_0xec5d30[_0x3da2cd(0x702)],'duration':_0xec5d30['duration'],'hue':_0xec5d30[_0x3da2cd(0x5f0)],'opacityStart':_0xec5d30[_0x3da2cd(0x23a)],'tone':_0xec5d30[_0x3da2cd(0x20d)],'visible':!![]},_0x38b1d6=VisuMZ[_0x3da2cd(0xb0b)](_0xec5d30[_0x3da2cd(0xa4f)]);for(const _0x56cde7 of _0x38b1d6){if('tMMpA'!=='tMMpA')this[_0x3da2cd(0x464)]();else{if(!_0x56cde7)continue;_0x56cde7[_0x3da2cd(0x307)](_0x244333);}}}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x361),_0x554aa2=>{const _0x1f5415=_0x4b2772;if(!SceneManager[_0x1f5415(0x885)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ[_0x1f5415(0x72d)](_0x554aa2,_0x554aa2);const _0x3f7ad1=VisuMZ[_0x1f5415(0xb0b)](_0x554aa2[_0x1f5415(0xa4f)]);for(const _0x3e8828 of _0x3f7ad1){if(_0x1f5415(0x414)===_0x1f5415(0x414)){if(!_0x3e8828)continue;_0x3e8828['clearBattlerMotionTrailData']();}else this[_0x1f5415(0x290)]=_0x5e7c8e,this[_0x1f5415(0x524)]&&(this['_targetAngle']=0x0,this[_0x1f5415(0x290)]=0x0);}}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x5ee),_0xf9d6b2=>{const _0x3637be=_0x4b2772;if(!Imported[_0x3637be(0x6ed)])return;const _0x53f743=SceneManager[_0x3637be(0x21e)][_0x3637be(0x34a)];if(!_0x53f743)return;if(VisuMZ[_0x3637be(0xce7)][_0x3637be(0x3f6)]<=1.04){if(_0x3637be(0x45e)===_0x3637be(0x45e)){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x3637be(0xaf9)]();return;}else{_0x2d817b['BattleCore'][_0x3637be(0x27b)][_0x3637be(0xb2b)](this,_0x161107,_0x24b7ef);if(!_0x69fa60[_0x3637be(0x909)]())return;for(const _0x2941d3 of this[_0x3637be(0x28e)]()[_0x3637be(0x6e3)]()){if(_0x2941d3===_0x5959b0[_0x3637be(0x7c4)]()){let _0x147e03=_0x4dc25b[_0x3637be(0x753)];_0x147e03*=_0x131c56[_0x3637be(0x651)](_0x2941d3),_0x147e03*=this['subject']()[_0x3637be(0x5ab)](_0x2941d3),_0x147e03*=this['lukEffectRate'](_0x3ebc81),_0x167973['random']()<_0x147e03&&(_0x10a1a1[_0x3637be(0xac0)]=!![],this['makeSuccess'](_0x933aa1));}}}}VisuMZ[_0x3637be(0x72d)](_0xf9d6b2,_0xf9d6b2);const _0x1edd76=_0xf9d6b2['Enable'];_0x53f743[_0x3637be(0x4e3)](_0x1edd76);}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],'ActSeq_Impact_Oversaturate',_0x1a65f1=>{const _0x2d11d3=_0x4b2772;if(!Imported[_0x2d11d3(0x6ed)])return;const _0x17202a=SceneManager[_0x2d11d3(0x21e)][_0x2d11d3(0x34a)];if(!_0x17202a)return;if(VisuMZ[_0x2d11d3(0xce7)][_0x2d11d3(0x3f6)]<=1.04){alert(_0x2d11d3(0x5bb)),SceneManager['exit']();return;}VisuMZ[_0x2d11d3(0x72d)](_0x1a65f1,_0x1a65f1);const _0x2ef632=_0x1a65f1[_0x2d11d3(0x7ae)];_0x17202a[_0x2d11d3(0x776)](_0x2ef632);}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x9e0),_0x480b8d=>{const _0x4b0cd1=_0x4b2772;if(!Imported[_0x4b0cd1(0x6ed)])return;const _0x4bd9a3=SceneManager[_0x4b0cd1(0x21e)]['_spriteset'];if(!_0x4bd9a3)return;VisuMZ[_0x4b0cd1(0x72d)](_0x480b8d,_0x480b8d);const _0x4727a1=_0x480b8d['X']||0x0,_0x4d0cfa=_0x480b8d['Y']||0x0,_0x3ee56d=_0x480b8d['Amp']||0x0,_0x2f0d65=_0x480b8d['Wave']||0x0,_0x134b7f=_0x480b8d[_0x4b0cd1(0x8ec)]||0x1;_0x4bd9a3[_0x4b0cd1(0x9c9)](_0x4727a1,_0x4d0cfa,_0x3ee56d,_0x2f0d65,_0x134b7f);}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],'ActSeq_Impact_ShockwaveEachTargets',_0x374de1=>{const _0x1e8e64=_0x4b2772;if(!SceneManager[_0x1e8e64(0x885)]())return;if(!Imported[_0x1e8e64(0x6ed)])return;const _0x22c8c2=SceneManager[_0x1e8e64(0x21e)][_0x1e8e64(0x34a)];if(!_0x22c8c2)return;VisuMZ['ConvertParams'](_0x374de1,_0x374de1);const _0x53c521=VisuMZ[_0x1e8e64(0xb0b)](_0x374de1['Targets']),_0x306a0d=_0x374de1[_0x1e8e64(0x2b9)],_0x49add4=_0x374de1[_0x1e8e64(0x6d6)]||0x0,_0x5af780=_0x374de1['OffsetY']||0x0,_0x25cd32=_0x374de1[_0x1e8e64(0xcdf)]||0x0,_0x3628bb=_0x374de1[_0x1e8e64(0x45c)]||0x0,_0xee8e63=_0x374de1['Duration']||0x1;for(const _0x583595 of _0x53c521){if(!_0x583595)continue;if(!_0x583595[_0x1e8e64(0x947)]())continue;const _0x2c8ac5=_0x583595['battler']();let _0x331f4d=_0x2c8ac5[_0x1e8e64(0xc20)],_0x4c575c=_0x2c8ac5[_0x1e8e64(0xaba)];_0x331f4d+=(Graphics[_0x1e8e64(0x67b)]-Graphics[_0x1e8e64(0xcd9)])/0x2,_0x4c575c+=(Graphics[_0x1e8e64(0x4c3)]-Graphics[_0x1e8e64(0x218)])/0x2;if(_0x306a0d[_0x1e8e64(0x93d)](/front/i))_0x331f4d+=(_0x583595['isEnemy']()?0x1:-0x1)*_0x2c8ac5[_0x1e8e64(0xac8)]()/0x2;else _0x306a0d[_0x1e8e64(0x93d)](/back/i)&&(_0x331f4d+=(_0x583595[_0x1e8e64(0x9d4)]()?-0x1:0x1)*_0x2c8ac5['mainSpriteWidth']()/0x2);if(_0x306a0d[_0x1e8e64(0x93d)](/head/i)){if('lMFqP'===_0x1e8e64(0x445)){if(!_0x263b73[_0x1e8e64(0x885)]())return;_0x372baa['ConvertParams'](_0x40dcc8,_0x4a19ef);const _0x343db2=_0x52e2cd[_0x1e8e64(0x865)];_0x1e9742['_scene'][_0x1e8e64(0x217)](_0x343db2);}else _0x4c575c-=_0x2c8ac5[_0x1e8e64(0x5f3)]();}else _0x306a0d[_0x1e8e64(0x93d)](/center/i)&&(_0x4c575c-=_0x2c8ac5[_0x1e8e64(0x5f3)]()/0x2);_0x331f4d+=_0x49add4,_0x4c575c+=_0x5af780,_0x22c8c2[_0x1e8e64(0x9c9)](_0x331f4d,_0x4c575c,_0x25cd32,_0x3628bb,_0xee8e63);}}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x96c),_0x3d2f48=>{const _0x40ab12=_0x4b2772;if(!SceneManager[_0x40ab12(0x885)]())return;if(!Imported[_0x40ab12(0x6ed)])return;const _0x4c2688=SceneManager[_0x40ab12(0x21e)][_0x40ab12(0x34a)];if(!_0x4c2688)return;VisuMZ[_0x40ab12(0x72d)](_0x3d2f48,_0x3d2f48);const _0x159259=VisuMZ[_0x40ab12(0xb0b)](_0x3d2f48['Targets']),_0xf7fd5c=_0x3d2f48['TargetLocation'],_0x2e9633=_0x3d2f48[_0x40ab12(0x6d6)]||0x0,_0x8742b6=_0x3d2f48['OffsetY']||0x0,_0x4dcf66=_0x3d2f48[_0x40ab12(0xcdf)]||0x0,_0x5cd063=_0x3d2f48['Wave']||0x0,_0x2597b2=_0x3d2f48[_0x40ab12(0x8ec)]||0x1,_0x409135=Math[_0x40ab12(0x7fa)](..._0x159259[_0x40ab12(0x8b4)](_0x11915f=>_0x11915f['battler']()[_0x40ab12(0xc20)]-_0x11915f[_0x40ab12(0x947)]()[_0x40ab12(0xac8)]()/0x2)),_0x218f14=Math[_0x40ab12(0x20e)](..._0x159259['map'](_0x4f9518=>_0x4f9518[_0x40ab12(0x947)]()[_0x40ab12(0xc20)]+_0x4f9518[_0x40ab12(0x947)]()[_0x40ab12(0xac8)]()/0x2)),_0x2dbcbe=Math[_0x40ab12(0x7fa)](..._0x159259[_0x40ab12(0x8b4)](_0x10bcd1=>_0x10bcd1[_0x40ab12(0x947)]()['_baseY']-_0x10bcd1[_0x40ab12(0x947)]()[_0x40ab12(0x5f3)]())),_0xe3c772=Math[_0x40ab12(0x20e)](..._0x159259[_0x40ab12(0x8b4)](_0x1a5d30=>_0x1a5d30[_0x40ab12(0x947)]()[_0x40ab12(0xaba)])),_0xe4563=_0x159259['filter'](_0x1e8d62=>_0x1e8d62[_0x40ab12(0x92d)]())[_0x40ab12(0x1e9)],_0x525a78=_0x159259[_0x40ab12(0xb8c)](_0x498598=>_0x498598['isEnemy']())[_0x40ab12(0x1e9)];let _0x2de55f=0x0,_0x504321=0x0;if(_0xf7fd5c[_0x40ab12(0x93d)](/front/i))_0x40ab12(0x712)===_0x40ab12(0xb71)?(_0x2d196a=_0x499474(_0x8f4895['$1']),_0x2ae4f4=_0xc00ed9(_0x21f794['$2'])):_0x2de55f=_0xe4563>=_0x525a78?_0x409135:_0x218f14;else{if(_0xf7fd5c[_0x40ab12(0x93d)](/middle/i)){if(_0x40ab12(0xc6e)!==_0x40ab12(0xc6e)){if(_0x1bce84['isTpb']()&&this[_0x40ab12(0x4f5)]===_0x40ab12(0x4ae))return this[_0x40ab12(0xa8e)]()?this[_0x40ab12(0x7f8)]()&&this['currentAction']()['item']()&&!this['currentAction']()[_0x40ab12(0x72c)]():this[_0x40ab12(0x7f8)]()&&this[_0x40ab12(0x7f8)]()['item']()&&!this[_0x40ab12(0x7f8)]()[_0x40ab12(0x99f)]();return![];}else _0x2de55f=(_0x409135+_0x218f14)/0x2,melee=-0x1;}else _0xf7fd5c[_0x40ab12(0x93d)](/back/i)&&(_0x2de55f=_0xe4563>=_0x525a78?_0x218f14:_0x409135);}if(_0xf7fd5c[_0x40ab12(0x93d)](/head/i))_0x504321=_0x2dbcbe;else{if(_0xf7fd5c[_0x40ab12(0x93d)](/center/i))_0x504321=(_0x2dbcbe+_0xe3c772)/0x2;else _0xf7fd5c[_0x40ab12(0x93d)](/base/i)&&(_0x40ab12(0x945)===_0x40ab12(0x945)?_0x504321=_0xe3c772:this[_0x40ab12(0xa34)]());}_0x2de55f+=(Graphics[_0x40ab12(0x67b)]-Graphics[_0x40ab12(0xcd9)])/0x2,_0x504321+=(Graphics['height']-Graphics[_0x40ab12(0x218)])/0x2,_0x2de55f+=_0x2e9633,_0x504321+=_0x8742b6,_0x4c2688[_0x40ab12(0x9c9)](_0x2de55f,_0x504321,_0x4dcf66,_0x5cd063,_0x2597b2);}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],'ActSeq_Impact_TimeScale',_0x38dc2a=>{const _0x482b54=_0x4b2772;if(!Imported[_0x482b54(0x6ed)])return;const _0x434313=SceneManager[_0x482b54(0x21e)][_0x482b54(0x34a)];if(!_0x434313)return;if(VisuMZ['ActSeqImpact'][_0x482b54(0x3f6)]<=1.04){alert(_0x482b54(0x5bb)),SceneManager[_0x482b54(0xaf9)]();return;}VisuMZ[_0x482b54(0x72d)](_0x38dc2a,_0x38dc2a);const _0x2294aa=$gameTemp[_0x482b54(0x2ba)](),_0x4d72e4=Math['max'](0.01,_0x38dc2a['Scale']);$gameTemp[_0x482b54(0xb5b)](_0x4d72e4,_0x2294aa);}),PluginManager['registerCommand'](pluginData['name'],_0x4b2772(0x7db),_0x3e4a75=>{const _0xdbdf=_0x4b2772;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x362c77=SceneManager[_0xdbdf(0x21e)]['_spriteset'];if(!_0x362c77)return;if(VisuMZ[_0xdbdf(0xce7)]['version']<=1.04){if(_0xdbdf(0x740)!==_0xdbdf(0x740))_0x59ff58=_0x53ef35[_0xdbdf(0x805)](_0x362713[_0xdbdf(0xa20)]()*(_0x19d9db+0x1)),_0x9188a=_0x2a7c91[_0x42e074],_0x2e151c[_0x31df39]=_0x5b22c6[_0x23979b],_0x246040[_0xe1e997]=_0x48bf6;else{alert(_0xdbdf(0x5bb)),SceneManager[_0xdbdf(0xaf9)]();return;}}VisuMZ[_0xdbdf(0x72d)](_0x3e4a75,_0x3e4a75);const _0x566057=$gameTemp[_0xdbdf(0x2ba)](),_0x110cdd=_0x3e4a75['ms']||0x1;VisuMZ[_0xdbdf(0xce7)]['freezeTime'](_0x110cdd,_0x566057);}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],'ActSeq_Impact_ZoomBlurPoint',_0x50f1ab=>{const _0x3aae96=_0x4b2772;if(!Imported[_0x3aae96(0x6ed)])return;const _0x57d87c=SceneManager[_0x3aae96(0x21e)]['_spriteset'];if(!_0x57d87c)return;VisuMZ[_0x3aae96(0x72d)](_0x50f1ab,_0x50f1ab);const _0xbfbf8c=_0x50f1ab['X']||0x0,_0x41cb22=_0x50f1ab['Y']||0x0,_0x1a84a5=_0x50f1ab[_0x3aae96(0xc69)]||0x0,_0x143d97=_0x50f1ab[_0x3aae96(0x93f)]||0x0,_0x5ef708=_0x50f1ab[_0x3aae96(0x8ec)]||0x1,_0x319339=_0x50f1ab[_0x3aae96(0x278)]||_0x3aae96(0x97b);_0x57d87c[_0x3aae96(0x8f8)](_0x1a84a5,_0xbfbf8c,_0x41cb22,_0x143d97,_0x5ef708,_0x319339);}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0xbbb),_0x38eb79=>{const _0xfd0fc8=_0x4b2772;if(!Imported[_0xfd0fc8(0x6ed)])return;const _0x590fe1=SceneManager[_0xfd0fc8(0x21e)][_0xfd0fc8(0x34a)];if(!_0x590fe1)return;VisuMZ[_0xfd0fc8(0x72d)](_0x38eb79,_0x38eb79);const _0x129f71=VisuMZ[_0xfd0fc8(0xb0b)](_0x38eb79[_0xfd0fc8(0xa4f)]),_0x13c224=_0x38eb79[_0xfd0fc8(0x2b9)],_0x4719fc=_0x38eb79['OffsetX']||0x0,_0x196625=_0x38eb79[_0xfd0fc8(0xbed)]||0x0,_0x77eadf=_0x38eb79[_0xfd0fc8(0xc69)]||0x0,_0x4856ae=_0x38eb79[_0xfd0fc8(0x93f)]||0x0,_0x3f022f=_0x38eb79[_0xfd0fc8(0x8ec)]||0x1,_0x316b04=_0x38eb79['EasingType']||'Linear',_0x2beea2=Math[_0xfd0fc8(0x7fa)](..._0x129f71['map'](_0x48dea8=>_0x48dea8[_0xfd0fc8(0x947)]()['_baseX']-_0x48dea8[_0xfd0fc8(0x947)]()[_0xfd0fc8(0xac8)]()/0x2)),_0x1d3acd=Math[_0xfd0fc8(0x20e)](..._0x129f71[_0xfd0fc8(0x8b4)](_0x2e3f0b=>_0x2e3f0b[_0xfd0fc8(0x947)]()[_0xfd0fc8(0xc20)]+_0x2e3f0b[_0xfd0fc8(0x947)]()[_0xfd0fc8(0xac8)]()/0x2)),_0x522800=Math['min'](..._0x129f71[_0xfd0fc8(0x8b4)](_0x3dfde0=>_0x3dfde0[_0xfd0fc8(0x947)]()['_baseY']-_0x3dfde0[_0xfd0fc8(0x947)]()['mainSpriteHeight']())),_0x5159b4=Math[_0xfd0fc8(0x20e)](..._0x129f71[_0xfd0fc8(0x8b4)](_0x4b8173=>_0x4b8173[_0xfd0fc8(0x947)]()[_0xfd0fc8(0xaba)])),_0x1180c3=_0x129f71[_0xfd0fc8(0xb8c)](_0x57f297=>_0x57f297[_0xfd0fc8(0x92d)]())[_0xfd0fc8(0x1e9)],_0x36a806=_0x129f71[_0xfd0fc8(0xb8c)](_0x52de54=>_0x52de54[_0xfd0fc8(0x9d4)]())[_0xfd0fc8(0x1e9)];let _0x3a98a8=0x0,_0x35452c=0x0;if(_0x13c224[_0xfd0fc8(0x93d)](/front/i)){if('omfeF'!==_0xfd0fc8(0xb45))return _0x38ef60[_0xfd0fc8(0x57c)]['call'](this);else _0x3a98a8=_0x1180c3>=_0x36a806?_0x2beea2:_0x1d3acd;}else{if(_0x13c224[_0xfd0fc8(0x93d)](/middle/i)){if(_0xfd0fc8(0x720)==='ynhOv')_0x3a98a8=(_0x2beea2+_0x1d3acd)/0x2,melee=-0x1;else return _0x1cdf28['spriteId']-_0x4abf1f['spriteId'];}else _0x13c224[_0xfd0fc8(0x93d)](/back/i)&&(_0xfd0fc8(0x836)===_0xfd0fc8(0x30b)?this[_0xfd0fc8(0xbd3)]()?_0xd35357['prototype'][_0xfd0fc8(0x8da)][_0xfd0fc8(0xb2b)](this):this[_0xfd0fc8(0x5e8)]=0x8:_0x3a98a8=_0x1180c3>=_0x36a806?_0x1d3acd:_0x2beea2);}if(_0x13c224[_0xfd0fc8(0x93d)](/head/i)){if(_0xfd0fc8(0x6cd)!==_0xfd0fc8(0x4dc))_0x35452c=_0x522800;else return[_0x2dd078];}else{if(_0x13c224['match'](/center/i))_0xfd0fc8(0x78e)===_0xfd0fc8(0x809)?_0x3cdaf6[_0xfd0fc8(0x67d)][_0xfd0fc8(0x869)][_0xfd0fc8(0x74a)]['NameAttachStateIcon']&&(this['_stateIconSprite']=new _0x11ceb6(),this['addChild'](this[_0xfd0fc8(0x876)])):_0x35452c=(_0x522800+_0x5159b4)/0x2;else{if(_0x13c224['match'](/base/i)){if(_0xfd0fc8(0x854)!==_0xfd0fc8(0x944))_0x35452c=_0x5159b4;else return this[_0xfd0fc8(0x6be)]();}}}_0x3a98a8+=(Graphics[_0xfd0fc8(0x67b)]-Graphics[_0xfd0fc8(0xcd9)])/0x2,_0x35452c+=(Graphics['height']-Graphics[_0xfd0fc8(0x218)])/0x2,_0x3a98a8+=_0x4719fc,_0x35452c+=_0x196625,_0x590fe1['setupZoomBlurImpactFilter'](_0x77eadf,_0x3a98a8,_0x35452c,_0x4856ae,_0x3f022f,_0x316b04);}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x97a),_0x4d595a=>{const _0xa2f9c2=_0x4b2772;if(!Imported[_0xa2f9c2(0x6ed)])return;const _0x85ff05=SceneManager[_0xa2f9c2(0x21e)]['_spriteset'];if(!_0x85ff05)return;if(VisuMZ['ActSeqImpact']['version']<=1.05){if(_0xa2f9c2(0xb31)==='iFNXm')this[_0xa2f9c2(0x7ca)]()?_0x4cd35a[_0xa2f9c2(0x67d)][_0xa2f9c2(0x646)][_0xa2f9c2(0xb2b)](this):(this[_0xa2f9c2(0x671)]=!this[_0xa2f9c2(0x3c8)]['isHidden'](),!this[_0xa2f9c2(0x671)]&&(this[_0xa2f9c2(0xacf)]=0x0));else{alert(_0xa2f9c2(0x5bb)),SceneManager['exit']();return;}}VisuMZ[_0xa2f9c2(0x72d)](_0x4d595a,_0x4d595a);const _0x57f294=VisuMZ['CreateActionSequenceTargets'](_0x4d595a[_0xa2f9c2(0xa4f)]),_0x3dcc05={'filename':_0x4d595a[_0xa2f9c2(0x476)],'horzCells':_0x4d595a[_0xa2f9c2(0x96a)]||0x1,'vertCells':_0x4d595a[_0xa2f9c2(0x1ee)]||0x1,'frameDelay':_0x4d595a[_0xa2f9c2(0x32c)]||0x1,'smooth':_0x4d595a[_0xa2f9c2(0x267)]||![],'anchorX':_0x4d595a[_0xa2f9c2(0x8d4)]||0x0,'anchorY':_0x4d595a[_0xa2f9c2(0xbf1)]||0x0,'offsetX':_0x4d595a[_0xa2f9c2(0x689)]||0x0,'offsetY':_0x4d595a[_0xa2f9c2(0x570)]||0x0};for(const _0xd65f36 of _0x57f294){if(!_0xd65f36)continue;if(!_0xd65f36[_0xa2f9c2(0x947)]())continue;_0xd65f36['battler']()[_0xa2f9c2(0xc34)](_0x3dcc05);}const _0x33f8af=$gameTemp['getLastPluginCommandInterpreter']();if(_0x33f8af){if(_0xa2f9c2(0x93c)!=='WVGtL'){const _0x209d61=this['item']()['scope'];if(_0x209d61['match'](/RANDOM/i))return![];if(_0x209d61[_0xa2f9c2(0x93d)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x209d61[_0xa2f9c2(0x93d)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return _0x3c9761[_0xa2f9c2(0x67d)][_0xa2f9c2(0x9aa)][_0xa2f9c2(0xb2b)](this);}else _0x33f8af['setWaitMode'](_0xa2f9c2(0x73d));}}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0xa80),_0x4ca451=>{const _0x466554=_0x4b2772;if(!Imported[_0x466554(0x6ed)])return;const _0x29086b=SceneManager[_0x466554(0x21e)][_0x466554(0x34a)];if(!_0x29086b)return;if(VisuMZ[_0x466554(0xce7)]['version']<=1.05){if(_0x466554(0x8a0)===_0x466554(0x8a0)){alert(_0x466554(0x5bb)),SceneManager[_0x466554(0xaf9)]();return;}else{if(this[_0x466554(0x63a)]===_0x3e0f65)return;this['updateGrow'](),this[_0x466554(0xaea)]();}}VisuMZ[_0x466554(0x72d)](_0x4ca451,_0x4ca451);const _0x4d172a=VisuMZ[_0x466554(0xb0b)](_0x4ca451[_0x466554(0xa4f)]);for(const _0x49768c of _0x4d172a){if(_0x466554(0x875)===_0x466554(0x875)){if(!_0x49768c)continue;if(!_0x49768c[_0x466554(0x947)]())continue;_0x49768c[_0x466554(0x947)]()[_0x466554(0x662)]();}else{const _0x3fe231=this[_0x466554(0xab6)]();if(_0x3fe231&&this[_0x466554(0xacf)]<0xff)this['opacity']+=0x10;else!_0x3fe231&&this[_0x466554(0xacf)]>0x0&&(this[_0x466554(0xacf)]-=0x10);}}}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],'ActSeq_Inject_AnimationPauseResume',_0xadc86d=>{const _0x421ee3=_0x4b2772;if(!Imported[_0x421ee3(0x6ed)])return;const _0x52d5ae=SceneManager[_0x421ee3(0x21e)][_0x421ee3(0x34a)];if(!_0x52d5ae)return;if(VisuMZ[_0x421ee3(0xce7)]['version']<=1.05){alert(_0x421ee3(0x5bb)),SceneManager[_0x421ee3(0xaf9)]();return;}VisuMZ[_0x421ee3(0x72d)](_0xadc86d,_0xadc86d);const _0x4ce9e5=VisuMZ[_0x421ee3(0xb0b)](_0xadc86d['Targets']),_0x9fe8f3=_0xadc86d[_0x421ee3(0x3b9)];for(const _0x3966e4 of _0x4ce9e5){if(!_0x3966e4)continue;if(!_0x3966e4[_0x421ee3(0x947)]())continue;_0x3966e4[_0x421ee3(0x947)]()[_0x421ee3(0x482)](_0x9fe8f3);}}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x77d),_0x5ef8aa=>{const _0x1eccfd=_0x4b2772;if(!SceneManager[_0x1eccfd(0x885)]())return;const _0x96bf2d=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x96bf2d)return;_0x96bf2d[_0x1eccfd(0xc6d)](_0x1eccfd(0xa2a));}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0xb58),_0x50fa52=>{const _0x1ef19e=_0x4b2772;if(!SceneManager[_0x1ef19e(0x885)]())return;VisuMZ[_0x1ef19e(0x72d)](_0x50fa52,_0x50fa52);const _0x5eebda=$gameTemp[_0x1ef19e(0x2ba)](),_0x12beec=BattleManager[_0x1ef19e(0x463)],_0x4158bf=BattleManager[_0x1ef19e(0x4f1)],_0x4a9386=BattleManager[_0x1ef19e(0x6c0)];if(!_0x5eebda||!_0x12beec||!_0x4158bf)return;if(!_0x12beec[_0x1ef19e(0x30a)]())return;const _0x4874b2=VisuMZ[_0x1ef19e(0xb0b)](_0x50fa52[_0x1ef19e(0xa4f)]);for(const _0x230680 of _0x4874b2){if(!_0x230680)continue;_0x4a9386[_0x1ef19e(0x21f)](_0x1ef19e(0x6bf),_0x4158bf,_0x230680);}_0x5eebda['setWaitMode'](_0x1ef19e(0x371));}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],'ActSeq_Mechanics_AddBuffDebuff',_0x26b4de=>{const _0x3f3e6d=_0x4b2772;if(!SceneManager[_0x3f3e6d(0x885)]())return;VisuMZ[_0x3f3e6d(0x72d)](_0x26b4de,_0x26b4de);const _0x4ec675=[_0x3f3e6d(0x43f),'MAXMP','ATK',_0x3f3e6d(0x54c),_0x3f3e6d(0xae7),_0x3f3e6d(0xc97),_0x3f3e6d(0xbf7),_0x3f3e6d(0x981)],_0x47e1cf=_0x26b4de[_0x3f3e6d(0x5b1)],_0xf0317=_0x26b4de['Debuffs'],_0xc1d778=_0x26b4de[_0x3f3e6d(0xc70)],_0x4c13d3=VisuMZ[_0x3f3e6d(0xb0b)](_0x26b4de[_0x3f3e6d(0xa4f)]);for(const _0x25a817 of _0x4c13d3){if(!_0x25a817)continue;for(const _0x4bcec9 of _0x47e1cf){const _0x5a87bc=_0x4ec675[_0x3f3e6d(0xae6)](_0x4bcec9[_0x3f3e6d(0x5fd)]()[_0x3f3e6d(0x75a)]());_0x5a87bc>=0x0&&_0x5a87bc<=0x7&&_0x25a817[_0x3f3e6d(0x3e1)](_0x5a87bc,_0xc1d778);}for(const _0x3efe31 of _0xf0317){const _0x2e9003=_0x4ec675[_0x3f3e6d(0xae6)](_0x3efe31[_0x3f3e6d(0x5fd)]()[_0x3f3e6d(0x75a)]());_0x2e9003>=0x0&&_0x2e9003<=0x7&&_0x25a817[_0x3f3e6d(0x8d9)](_0x2e9003,_0xc1d778);}}}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],'ActSeq_Mechanics_AddState',_0x106bcf=>{const _0x2ec9c2=_0x4b2772;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2ec9c2(0x72d)](_0x106bcf,_0x106bcf);const _0x2000b9=_0x106bcf['States'],_0x5a61c7=VisuMZ['CreateActionSequenceTargets'](_0x106bcf[_0x2ec9c2(0xa4f)]);for(const _0x1d95d3 of _0x5a61c7){if(_0x2ec9c2(0x52e)!==_0x2ec9c2(0x52e))this[_0x2ec9c2(0x889)]();else{if(!_0x1d95d3)continue;for(const _0x55b18c of _0x2000b9){if(_0x2ec9c2(0x88c)!=='AHVEH'){const _0x59a2a1=_0x16c555['BattleCore']['Settings'][_0x2ec9c2(0x681)];this[_0x2ec9c2(0xad3)]=_0x59a2a1['CriticalColor'][_0x2ec9c2(0x36a)](0x0),this[_0x2ec9c2(0x755)]=_0x59a2a1['CriticalDuration'];}else _0x1d95d3[_0x2ec9c2(0x8cf)](_0x55b18c);}}}}),PluginManager['registerCommand'](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x6a8),_0x20582e=>{const _0x5cf21d=_0x4b2772;if(!SceneManager[_0x5cf21d(0x885)]())return;VisuMZ[_0x5cf21d(0x72d)](_0x20582e,_0x20582e);const _0x5e1201=BattleManager[_0x5cf21d(0x463)],_0x5a831a={'arPenRate':_0x20582e[_0x5cf21d(0x301)],'arPenFlat':_0x20582e[_0x5cf21d(0x300)],'arRedRate':_0x20582e[_0x5cf21d(0x749)],'arRedFlat':_0x20582e[_0x5cf21d(0xab3)]};_0x5e1201[_0x5cf21d(0x95f)]=_0x5a831a;}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x4ee),_0x17a24b=>{const _0x4ddba0=_0x4b2772;if(!SceneManager[_0x4ddba0(0x885)]())return;if(!Imported['VisuMZ_3_WeaknessDisplay'])return;VisuMZ['ConvertParams'](_0x17a24b,_0x17a24b);const _0x1d8276=VisuMZ[_0x4ddba0(0xb0b)](_0x17a24b['Targets']),_0x6b478=_0x17a24b[_0x4ddba0(0x977)]||0x1;for(const _0x4d700f of _0x1d8276){if('UVMNe'===_0x4ddba0(0x220)){_0x3a1bea=_0x250db3[_0x4ddba0(0x67d)]['JS'][_0x155789][_0x4ddba0(0xb2b)](this,this[_0x4ddba0(0x28e)](),_0x1a7550,_0x2ea34f,_0x413f46);if(_0x2749e9)_0x5be719=_0x29548a;}else{if(!_0x4d700f)continue;if(!_0x4d700f[_0x4ddba0(0x9d4)]())continue;_0x4d700f['revealNewWeaknesses'](_0x6b478);}}}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],_0x4b2772(0xa5b),_0x3aa18e=>{const _0x4d1cda=_0x4b2772;if(!SceneManager[_0x4d1cda(0x885)]())return;if(!Imported[_0x4d1cda(0x1ea)])return;if(!BattleManager[_0x4d1cda(0x438)]())return;VisuMZ[_0x4d1cda(0x72d)](_0x3aa18e,_0x3aa18e);const _0x58678e=VisuMZ[_0x4d1cda(0xb0b)](_0x3aa18e['Targets']),_0x351bab=_0x3aa18e[_0x4d1cda(0xcf1)],_0x49f7ac=_0x3aa18e[_0x4d1cda(0xcf1)],_0x54d1bd=_0x3aa18e[_0x4d1cda(0x789)];for(const _0x276ed1 of _0x58678e){if(!_0x276ed1)continue;if(_0x276ed1[_0x4d1cda(0x540)]())_0x276ed1['changeAtbChargeTime'](_0x351bab);else{if(_0x276ed1[_0x4d1cda(0x825)]()){if('Wgrto'!==_0x4d1cda(0x6fd)){if(!this[_0x4d1cda(0x57d)])return 0x0;if(this[_0x4d1cda(0x94d)])return this[_0x4d1cda(0x94d)];const _0x34ea26=this[_0x4d1cda(0x8fe)]();return this[_0x4d1cda(0x917)](),this[_0x4d1cda(0x94d)]=this[_0x4d1cda(0x6de)][_0x4d1cda(0xb49)](_0x34ea26)||0x1,this[_0x4d1cda(0x94d)];}else{_0x276ed1[_0x4d1cda(0x82b)](_0x49f7ac);if(_0x54d1bd)_0x276ed1['atbInterrupt']();}}}}}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],'ActSeq_Mechanics_BoostPointsChange',_0x53ab4d=>{const _0xcd3e23=_0x4b2772;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_BoostAction'])return;VisuMZ['ConvertParams'](_0x53ab4d,_0x53ab4d);const _0x33220f=VisuMZ['CreateActionSequenceTargets'](_0x53ab4d[_0xcd3e23(0xa4f)]),_0x23775f=_0x53ab4d[_0xcd3e23(0x75c)];for(const _0x2a2662 of _0x33220f){if(_0xcd3e23(0xbc0)!=='EFzky'){if(!_0x2a2662)continue;_0x2a2662[_0xcd3e23(0x870)](_0x23775f);}else{if(this[_0xcd3e23(0x4fe)]<=0x0)return;const _0x19291b=this['_jumpWholeDuration']-this[_0xcd3e23(0x4fe)],_0x184d44=this['_jumpWholeDuration']/0x2,_0x7035d6=this[_0xcd3e23(0x1d2)],_0x1b3ac3=-_0x7035d6/_0x2d40a4[_0xcd3e23(0xa75)](_0x184d44,0x2);this['_jumpHeight']=_0x1b3ac3*_0x5b7626[_0xcd3e23(0xa75)](_0x19291b-_0x184d44,0x2)+_0x7035d6,this[_0xcd3e23(0x4fe)]--;if(this[_0xcd3e23(0x4fe)]<=0x0)return this['onJumpEnd']();}}}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],'ActSeq_Mechanics_BoostPointsStoreData',_0x1f151f=>{const _0x505785=_0x4b2772;if(!SceneManager[_0x505785(0x885)]())return;if(!Imported[_0x505785(0xbbd)])return;if(!BattleManager[_0x505785(0x4f1)])return;VisuMZ[_0x505785(0x72d)](_0x1f151f,_0x1f151f);const _0x1f4c5a=_0x1f151f[_0x505785(0xa30)];$gameVariables[_0x505785(0xab8)](_0x1f4c5a,BattleManager[_0x505785(0x4f1)][_0x505785(0x98b)]());}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x9c8),_0x4c9ec8=>{const _0x514d1e=_0x4b2772;if(!SceneManager[_0x514d1e(0x885)]())return;if(!Imported[_0x514d1e(0x77a)])return;VisuMZ[_0x514d1e(0x72d)](_0x4c9ec8,_0x4c9ec8);const _0x1c28a9=VisuMZ[_0x514d1e(0xb0b)](_0x4c9ec8[_0x514d1e(0xa4f)]),_0x3b9d63=_0x4c9ec8[_0x514d1e(0x40f)];for(const _0x59be94 of _0x1c28a9){if(!_0x59be94)continue;if(_0x59be94[_0x514d1e(0x6ff)]())continue;if(!_0x59be94[_0x514d1e(0xb10)]())continue;_0x59be94[_0x514d1e(0x8f7)](_0x3b9d63);}}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],_0x4b2772(0xbbf),_0x1032cf=>{const _0x8b8b27=_0x4b2772;if(!SceneManager[_0x8b8b27(0x885)]())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ[_0x8b8b27(0x72d)](_0x1032cf,_0x1032cf);const _0x30e0a2=VisuMZ[_0x8b8b27(0xb0b)](_0x1032cf['Targets']);for(const _0x551682 of _0x30e0a2){if(!_0x551682)continue;if(_0x551682['isBreakStunned']())continue;if(!_0x551682[_0x8b8b27(0xb10)]())continue;_0x551682['resetBreakShield']();}}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],_0x4b2772(0x796),_0x52a7f9=>{const _0x47a547=_0x4b2772;if(!SceneManager[_0x47a547(0x885)]())return;if(!Imported[_0x47a547(0x227)])return;if(!BattleManager[_0x47a547(0xccd)]())return;VisuMZ[_0x47a547(0x72d)](_0x52a7f9,_0x52a7f9);const _0x4f82cb=VisuMZ[_0x47a547(0xb0b)](_0x52a7f9[_0x47a547(0xa4f)]),_0x45f50f=_0x52a7f9[_0x47a547(0x2c1)];for(const _0x4b9fd1 of _0x4f82cb){if(!_0x4b9fd1)continue;_0x4b9fd1[_0x47a547(0x3d1)](_0x45f50f);}}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0xad2),_0x35b7bd=>{const _0x168892=_0x4b2772;if(!SceneManager[_0x168892(0x885)]())return;VisuMZ[_0x168892(0x72d)](_0x35b7bd,_0x35b7bd);const _0x535934=$gameTemp[_0x168892(0x2ba)](),_0x33e057=BattleManager[_0x168892(0x463)],_0x6d8612=BattleManager[_0x168892(0x4f1)];if(!_0x535934||!_0x33e057||!_0x6d8612)return;if(!_0x33e057[_0x168892(0x30a)]())return;const _0x58bdad=VisuMZ['CreateActionSequenceTargets'](_0x35b7bd[_0x168892(0xa4f)]);for(const _0x5bbcf4 of _0x58bdad){if(!_0x5bbcf4)continue;if(_0x35b7bd['ForceDeath']){if(_0x168892(0x91c)!==_0x168892(0xc28))_0x5bbcf4[_0x168892(0x33e)](),_0x5bbcf4['addState'](_0x5bbcf4[_0x168892(0x7c4)]());else{if(!_0x1def6c[_0x168892(0x67d)][_0x168892(0x869)][_0x168892(0x74a)][_0x168892(0x781)])return;this[_0x168892(0x3ff)]=new _0x467c2e(),this[_0x168892(0x3ff)]['x']=this[_0x168892(0x204)]['x'],this[_0x168892(0x3ff)]['y']=this[_0x168892(0x204)]['y'];const _0x560d03=this[_0x168892(0x4b1)][_0x168892(0xae6)](this['_windowLayer']);this[_0x168892(0x230)](this['_enemyNameContainer'],_0x560d03);for(let _0x2c41db=0x0;_0x2c41db<0x8;_0x2c41db++){const _0x21ec48=new _0x16b827(_0x2c41db);this[_0x168892(0x3ff)]['addChild'](_0x21ec48);}}}_0x5bbcf4[_0x168892(0x393)]()&&(_0x168892(0x2a4)!==_0x168892(0x558)?_0x5bbcf4[_0x168892(0x310)]():_0x55b228[_0x168892(0xb6d)](_0x248c41));}_0x535934['setWaitMode'](_0x168892(0xba0));}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x88a),_0x4021a8=>{const _0xf2ac7d=_0x4b2772;if(!SceneManager[_0xf2ac7d(0x885)]())return;if(!Imported[_0xf2ac7d(0xadb)])return;if(!BattleManager['isCTB']())return;VisuMZ[_0xf2ac7d(0x72d)](_0x4021a8,_0x4021a8);const _0x3cfc0b=VisuMZ[_0xf2ac7d(0xb0b)](_0x4021a8['Targets']),_0x510b7=_0x4021a8[_0xf2ac7d(0x527)];for(const _0x5e265d of _0x3cfc0b){if('ETPlb'===_0xf2ac7d(0x8b0)){_0x14353a[_0xf2ac7d(0x2d5)]&&this[_0xf2ac7d(0x4f8)]()&&this['repositionEnemiesByResolution']();const _0x533e14=_0x49d7c2[_0xf2ac7d(0x644)](),_0x1318f2=[];for(const _0x37cbdc of _0x533e14){_0x1318f2['push'](new _0x5c575f(_0x37cbdc));}_0x1318f2[_0xf2ac7d(0xad4)](this[_0xf2ac7d(0x778)][_0xf2ac7d(0x624)](this));for(const _0x2433f9 of _0x1318f2){this[_0xf2ac7d(0x3f0)][_0xf2ac7d(0x340)](_0x2433f9);}this[_0xf2ac7d(0x800)]=_0x1318f2;}else{if(!_0x5e265d)continue;_0x5e265d[_0xf2ac7d(0x672)](_0x510b7);}}}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x5d5),_0x30f8dd=>{const _0x586e3f=_0x4b2772;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x586e3f(0xadb)])return;if(!BattleManager[_0x586e3f(0xce3)]())return;VisuMZ['ConvertParams'](_0x30f8dd,_0x30f8dd);const _0x4d3f98=VisuMZ[_0x586e3f(0xb0b)](_0x30f8dd[_0x586e3f(0xa4f)]),_0x8a1589=_0x30f8dd[_0x586e3f(0xcf1)],_0x9a0464=_0x30f8dd['ChargeRate'];for(const _0xc2bee of _0x4d3f98){if(_0x586e3f(0x4d4)===_0x586e3f(0x86a))return this[_0x586e3f(0x82f)]();else{if(!_0xc2bee)continue;if(_0xc2bee[_0x586e3f(0x4f5)]===_0x586e3f(0x457))_0xc2bee[_0x586e3f(0x317)](_0x8a1589);else _0xc2bee['_tpbState']===_0x586e3f(0x4ae)&&(_0x586e3f(0x62e)!==_0x586e3f(0x62e)?(this[_0x586e3f(0x222)](_0x147528),this[_0x586e3f(0x29e)]()):_0xc2bee[_0x586e3f(0x22b)](_0x9a0464));}}}),PluginManager['registerCommand'](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x2de),_0x408f6c=>{const _0xb61928=_0x4b2772;if(!SceneManager[_0xb61928(0x885)]())return;VisuMZ['ConvertParams'](_0x408f6c,_0x408f6c);const _0x3e86d1=BattleManager['_action'];if(!_0x3e86d1)return;let _0x2a97ed=_0x408f6c['Formula'];_0x3e86d1[_0xb61928(0x936)](_0x2a97ed);}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x26a),_0x3cce4a=>{const _0x2c3927=_0x4b2772;if(!SceneManager[_0x2c3927(0x885)]())return;VisuMZ[_0x2c3927(0x72d)](_0x3cce4a,_0x3cce4a);const _0x5d0ee3=VisuMZ['CreateActionSequenceTargets'](_0x3cce4a['Targets']);for(const _0x354529 of _0x5d0ee3){if(!_0x354529)continue;if(_0x354529['shouldPopupDamage']())_0x354529[_0x2c3927(0x25b)]();}}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],_0x4b2772(0x42a),_0x2a7602=>{const _0x43983d=_0x4b2772;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x2a7602,_0x2a7602);const _0x56917c=$gameTemp['getLastPluginCommandInterpreter'](),_0x5b14a4=BattleManager[_0x43983d(0x4f1)],_0xbde90d=_0x2a7602['JumpToLabel'];if(!_0x56917c)return;if(!_0x5b14a4)return;_0x5b14a4&&_0x5b14a4['isDead']()&&_0xbde90d[_0x43983d(0x5fd)]()['trim']()!=='UNTITLED'&&_0x56917c['command119']([_0xbde90d]);}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x3fb),_0x316d3f=>{const _0x21a0ce=_0x4b2772;if(!SceneManager[_0x21a0ce(0x885)]())return;VisuMZ[_0x21a0ce(0x72d)](_0x316d3f,_0x316d3f);const _0x5c8b4f=VisuMZ[_0x21a0ce(0xb0b)](_0x316d3f['Targets']);for(const _0x3f51d7 of _0x5c8b4f){if(!_0x3f51d7)continue;if(!_0x3f51d7['isEnemy']())continue;_0x3f51d7[_0x21a0ce(0x725)]();}}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x76d),_0x3b4df9=>{const _0x1502f7=_0x4b2772;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1502f7(0x491)])return;if(!BattleManager['isETB']())return;VisuMZ[_0x1502f7(0x72d)](_0x3b4df9,_0x3b4df9);const _0x1e7090=_0x3b4df9[_0x1502f7(0x9f0)];BattleManager[_0x1502f7(0x4f1)]&&BattleManager[_0x1502f7(0x4f1)][_0x1502f7(0x8a6)]()['gainCurrentActionsETB'](_0x1e7090);}),PluginManager['registerCommand'](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x68c),_0x17c7bc=>{const _0x5479b6=_0x4b2772;if(!SceneManager[_0x5479b6(0x885)]())return;if(!Imported[_0x5479b6(0x6ef)])return;if(!BattleManager[_0x5479b6(0xa52)]())return;VisuMZ['ConvertParams'](_0x17c7bc,_0x17c7bc);const _0x177e5c=_0x17c7bc['ActionCount'];BattleManager['_subject']&&BattleManager[_0x5479b6(0x4f1)][_0x5479b6(0x8a6)]()[_0x5479b6(0x6c1)](_0x177e5c);}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x659),_0x20a086=>{const _0x3db472=_0x4b2772;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x20a086,_0x20a086);const _0x26e73f=VisuMZ['CreateActionSequenceTargets'](_0x20a086[_0x3db472(0xa4f)]),_0x310210=_0x20a086[_0x3db472(0xa5e)],_0x3346d4=_0x20a086[_0x3db472(0x9d8)],_0x395d42=_0x20a086[_0x3db472(0x7a5)],_0x3cd1d2=_0x20a086[_0x3db472(0x232)],_0x1ea0d0=_0x20a086[_0x3db472(0xa8b)],_0x21b93e=_0x20a086[_0x3db472(0x2ce)],_0xc35e4c=_0x20a086['ShowPopup'];for(const _0x5a153a of _0x26e73f){if('ijjFg'!==_0x3db472(0x3fd))_0x4c79f4[_0x3db472(0x632)]['performDamage']['call'](this),this[_0x3db472(0xbe5)]()&&this[_0x3db472(0x3e7)]()&&this[_0x3db472(0x66d)]('damage'),_0x23d2cf['playEnemyDamage']();else{if(!_0x5a153a)continue;const _0x792bd1=_0x5a153a['isAlive'](),_0x5923ab=Math['round'](_0x310210*_0x5a153a[_0x3db472(0xb43)]+_0x3346d4),_0x248cf8=Math['round'](_0x395d42*_0x5a153a[_0x3db472(0xb91)]+_0x3cd1d2),_0x8d3496=Math['round'](_0x1ea0d0*_0x5a153a[_0x3db472(0x6bc)]()+_0x21b93e);if(_0x5923ab!==0x0)_0x5a153a[_0x3db472(0xc1e)](_0x5923ab);if(_0x248cf8!==0x0)_0x5a153a[_0x3db472(0x270)](_0x248cf8);if(_0x8d3496!==0x0)_0x5a153a[_0x3db472(0x226)](_0x8d3496);if(_0xc35e4c)_0x5a153a[_0x3db472(0x25b)]();if(_0x792bd1&&_0x5a153a[_0x3db472(0x3ef)]()){if(_0x3db472(0x8b2)===_0x3db472(0x8b2))_0x5a153a[_0x3db472(0x310)]();else{if(this[_0x3db472(0x2a6)]())this[_0x3db472(0xb68)]('PreStartTurnJS');_0x18d539[_0x3db472(0x67d)][_0x3db472(0xa85)][_0x3db472(0xb2b)](this);if(this[_0x3db472(0x2a6)]())this['processBattleCoreJS'](_0x3db472(0xb29));}}}}}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0xb3d),_0xaf943f=>{const _0x217c91=_0x4b2772;if(!SceneManager[_0x217c91(0x885)]())return;VisuMZ['ConvertParams'](_0xaf943f,_0xaf943f);const _0x639790=VisuMZ[_0x217c91(0xb0b)](_0xaf943f[_0x217c91(0xa4f)]);for(const _0x5c2245 of _0x639790){if(!_0x5c2245)continue;_0x5c2245[_0x217c91(0xaa4)](_0xaf943f[_0x217c91(0x518)]);}}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0xbd4),_0x5bd0f9=>{const _0x1c8e20=_0x4b2772;if(!SceneManager[_0x1c8e20(0x885)]())return;VisuMZ['ConvertParams'](_0x5bd0f9,_0x5bd0f9);const _0x5a9bd1=BattleManager[_0x1c8e20(0x463)],_0xf9559b={'criticalHitRate':_0x5bd0f9['CriticalHitRate'],'criticalHitFlat':_0x5bd0f9['CriticalHitFlat'],'criticalDmgRate':_0x5bd0f9[_0x1c8e20(0x91a)],'criticalDmgFlat':_0x5bd0f9[_0x1c8e20(0x58e)],'damageRate':_0x5bd0f9[_0x1c8e20(0x257)],'damageFlat':_0x5bd0f9['DamageFlat'],'hitRate':_0x5bd0f9[_0x1c8e20(0x897)],'hitFlat':_0x5bd0f9[_0x1c8e20(0x52c)]};_0x5a9bd1[_0x1c8e20(0xb6a)]=_0xf9559b;}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x862),_0x31b454=>{const _0x3afd82=_0x4b2772;if(!SceneManager[_0x3afd82(0x885)]())return;VisuMZ[_0x3afd82(0x72d)](_0x31b454,_0x31b454);const _0x5c238e=_0x31b454[_0x3afd82(0x865)];SceneManager[_0x3afd82(0x21e)]['playOnceParallelInterpreter'](_0x5c238e);}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x88d),_0x7de03e=>{const _0x117cf6=_0x4b2772;if(!SceneManager[_0x117cf6(0x885)]())return;if(!Imported[_0x117cf6(0xca1)])return;if(!BattleManager[_0x117cf6(0xbb3)]())return;VisuMZ[_0x117cf6(0x72d)](_0x7de03e,_0x7de03e);const _0x232ed9=VisuMZ[_0x117cf6(0xb0b)](_0x7de03e['Targets']);for(const _0x4e4da3 of _0x232ed9){if(!_0x4e4da3)continue;let _0x4f49f4=_0x7de03e[_0x117cf6(0x4e5)],_0x3cb0e4=_0x7de03e[_0x117cf6(0x44c)],_0x4268f1=_0x7de03e[_0x117cf6(0xc85)];if(BattleManager['_actionBattlers'][_0x117cf6(0x41a)](_0x4e4da3)){if('ekPhI'!==_0x117cf6(0x611))_0x4f49f4+=_0x4268f1;else{const _0x293ac5=_0x540ae4(_0x5528af['$1'])[_0x117cf6(0x5fd)]()[_0x117cf6(0x75a)]();return _0x293ac5;}}else{if(_0x117cf6(0x282)==='ohQoN'){if(this[_0x117cf6(0x3e7)]())this['_svBattlerSprite'][_0x117cf6(0x2ab)](_0x1a3203);}else _0x3cb0e4+=_0x4268f1;}BattleManager['turnOrderChangeOTB'](_0x4e4da3,-_0x4f49f4,![]),BattleManager['turnOrderChangeOTB'](_0x4e4da3,-_0x3cb0e4,!![]);}}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],_0x4b2772(0x3f7),_0xd8d2b=>{const _0x24f835=_0x4b2772;if(!SceneManager[_0x24f835(0x885)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager['isPTB']())return;VisuMZ[_0x24f835(0x72d)](_0xd8d2b,_0xd8d2b);const _0x226718=BattleManager['_subject'][_0x24f835(0x8a6)](),_0x4ce0cc=_0xd8d2b[_0x24f835(0x629)],_0xc39a93=_0xd8d2b[_0x24f835(0x1e7)]||_0x24f835(0xb0a),_0x102c08=_0xd8d2b[_0x24f835(0x2c4)]||_0x24f835(0xb0a),_0xe666c7=_0xd8d2b['alterCost']||0x0,_0x55ef84=_0xd8d2b[_0x24f835(0x677)]||0x0;if(_0x226718[_0x24f835(0x942)]()||_0x4ce0cc){if('HtRwo'!==_0x24f835(0x7fc))return this[_0x24f835(0x4eb)]||this[_0x24f835(0x2e5)]||this;else{if(_0x4ce0cc){if(_0x24f835(0x8d3)!==_0x24f835(0x8d3)){const _0x328839=this[_0x24f835(0xc39)],_0x13e5f5=_0xfa000a[_0x24f835(0xc56)](),_0x155839=_0x374da9['x']+_0x4c57cb[_0x24f835(0x805)](_0x4d2009['width']/0x2)+_0x13e5f5;_0x328839['x']=_0x328839['width']/-0x2+_0x155839,_0x328839['y']=_0x356764[_0x24f835(0x805)](_0x46543a[_0x24f835(0x4c3)]/0x2);}else _0x226718[_0x24f835(0x7b0)]=_0x226718[_0x24f835(0x7b0)]||{},_0x226718[_0x24f835(0x7b0)]['priority']=0x0;}_0x226718[_0x24f835(0xafc)](_0xc39a93,_0x102c08,_0xe666c7,_0x55ef84);}}}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x583),_0x279b14=>{const _0x5d7e40=_0x4b2772;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5d7e40(0x53d)])return;if(!BattleManager[_0x5d7e40(0x902)]())return;VisuMZ[_0x5d7e40(0x72d)](_0x279b14,_0x279b14);const _0x17eacd=BattleManager['_subject'][_0x5d7e40(0x8a6)]();let _0x2e2da6=Math[_0x5d7e40(0x20e)](_0x279b14[_0x5d7e40(0xa6d)],0x0),_0x58c98d=_0x17eacd['getFullActionsPTB'](),_0x49617d=_0x17eacd[_0x5d7e40(0xc04)]();while(_0x2e2da6--){if(_0x58c98d<=0x0&&_0x49617d<=0x0){if('dwYBu'===_0x5d7e40(0x3a7)){const _0x3e110d=_0x45b430[_0x5d7e40(0x93a)];_0xaee8e9[_0x5d7e40(0x9fd)][_0x3e110d]=new _0x4c4261(_0x5500aa);}else break;}else _0x58c98d>0x0?(_0x58c98d--,_0x49617d++):_0x49617d--;}_0x17eacd[_0x5d7e40(0x4ac)](_0x58c98d),_0x17eacd[_0x5d7e40(0xc33)](_0x49617d);}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],'ActSeq_Mechanics_PtbFullHalfAction',_0x50619d=>{const _0x36c96c=_0x4b2772;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x36c96c(0x902)]())return;VisuMZ[_0x36c96c(0x72d)](_0x50619d,_0x50619d);const _0x5f2cfc=BattleManager['_subject'][_0x36c96c(0x8a6)]();let _0x19728f=_0x50619d[_0x36c96c(0x40e)],_0x1cf501=_0x50619d[_0x36c96c(0x2c8)];_0x5f2cfc[_0x36c96c(0xaf1)](_0x19728f),_0x5f2cfc['gainHalfActionsPTB'](_0x1cf501);}),PluginManager['registerCommand'](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x9a4),_0x5759c8=>{const _0x384b23=_0x4b2772;if(!SceneManager[_0x384b23(0x885)]())return;VisuMZ[_0x384b23(0x72d)](_0x5759c8,_0x5759c8);const _0x1d6324=['MAXHP',_0x384b23(0x952),_0x384b23(0x25f),_0x384b23(0x54c),'MAT',_0x384b23(0xc97),_0x384b23(0xbf7),_0x384b23(0x981)],_0x4b3943=_0x5759c8['Buffs'],_0x5c179c=_0x5759c8[_0x384b23(0x509)],_0xcd5d43=VisuMZ[_0x384b23(0xb0b)](_0x5759c8['Targets']);for(const _0x5482b6 of _0xcd5d43){if(!_0x5482b6)continue;for(const _0x3a59e6 of _0x4b3943){if(_0x384b23(0x7e2)===_0x384b23(0x7e2)){const _0x5592cf=_0x1d6324[_0x384b23(0xae6)](_0x3a59e6['toUpperCase']()[_0x384b23(0x75a)]());_0x5592cf>=0x0&&_0x5592cf<=0x7&&_0x5482b6[_0x384b23(0xcbc)](_0x5592cf)&&_0x5482b6[_0x384b23(0x766)](_0x5592cf);}else _0x7326a8[_0x384b23(0x67d)][_0x384b23(0xc71)]['call'](this),this['isDTB']()&&this[_0x384b23(0xaeb)]()&&!this[_0x384b23(0x8c4)]&&_0x5e7813[_0x384b23(0xba6)]()&&this['selectNextCommand']();}for(const _0x393c58 of _0x5c179c){const _0x639265=_0x1d6324[_0x384b23(0xae6)](_0x393c58['toUpperCase']()[_0x384b23(0x75a)]());_0x639265>=0x0&&_0x639265<=0x7&&_0x5482b6[_0x384b23(0xa49)](_0x639265)&&_0x5482b6[_0x384b23(0x766)](_0x639265);}}}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],_0x4b2772(0xa7c),_0x47b88f=>{const _0x1937f1=_0x4b2772;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x47b88f,_0x47b88f);const _0x5131a6=_0x47b88f['States'],_0x475ea0=VisuMZ['CreateActionSequenceTargets'](_0x47b88f[_0x1937f1(0xa4f)]);for(const _0x259052 of _0x475ea0){if(!_0x259052)continue;for(const _0x5dd23a of _0x5131a6){_0x1937f1(0x8a2)!==_0x1937f1(0x8a2)?(_0x32dcf9[_0x1937f1(0x67d)][_0x1937f1(0xa12)]['call'](this),this[_0x1937f1(0x7fd)]()):_0x259052[_0x1937f1(0x3ce)](_0x5dd23a);}}}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],'ActSeq_Mechanics_StbExploit',_0x19ccff=>{const _0x27aac0=_0x4b2772;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x27aac0(0xa14)]())return;VisuMZ['ConvertParams'](_0x19ccff,_0x19ccff);const _0x2c0214=_0x19ccff[_0x27aac0(0x966)],_0x353620=VisuMZ[_0x27aac0(0xb0b)](_0x19ccff['Targets']),_0x1f9d03=_0x19ccff['ForceExploited'],_0x1667f1=_0x19ccff[_0x27aac0(0x587)],_0x45569a=_0x19ccff[_0x27aac0(0x9b6)],_0x1b6f75=BattleManager[_0x27aac0(0x463)];if(_0x2c0214)for(const _0x22579e of _0x353620){if(!_0x22579e)continue;if(_0x22579e===user)continue;if(_0x1f9d03)_0x22579e['setSTBExploited'](![]);_0x22579e['becomeSTBExploited'](BattleManager[_0x27aac0(0x4f1)],_0x1b6f75);}if(_0x1667f1&&BattleManager['_subject']){if(_0x27aac0(0x8f2)!==_0x27aac0(0x8f2)){if(!_0x1dc535[_0x27aac0(0x885)]())return;const _0x4351bd=_0x575010[_0x27aac0(0x2ba)]();if(!_0x4351bd)return;_0x4351bd[_0x27aac0(0xc6d)](_0x27aac0(0x785));}else{if(_0x45569a)BattleManager[_0x27aac0(0x4f1)]['setSTBExploited'](![]);const _0x28bf68=_0x353620[0x0];BattleManager[_0x27aac0(0xbba)](_0x28bf68,_0x1b6f75);}}}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x277),_0x5927ef=>{const _0x5debc8=_0x4b2772;if(!SceneManager[_0x5debc8(0x885)]())return;if(!Imported[_0x5debc8(0x409)])return;if(!BattleManager[_0x5debc8(0xa14)]())return;VisuMZ[_0x5debc8(0x72d)](_0x5927ef,_0x5927ef);const _0x37ab01=_0x5927ef[_0x5debc8(0x36b)];BattleManager[_0x5debc8(0x4f1)]&&(_0x5debc8(0x2f1)!==_0x5debc8(0x2f1)?this['_battleLayoutStyle']=_0x5debc8(0x523):BattleManager['_subject'][_0x5debc8(0x7f2)](_0x37ab01));}),PluginManager['registerCommand'](pluginData[_0x4b2772(0x8fe)],'ActSeq_Mechanics_StbRemoveExcessActions',_0x1186ae=>{const _0x26673f=_0x4b2772;if(!SceneManager[_0x26673f(0x885)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x26673f(0xa14)]())return;VisuMZ[_0x26673f(0x72d)](_0x1186ae,_0x1186ae);let _0x4bdc0f=_0x1186ae[_0x26673f(0x36b)];if(BattleManager[_0x26673f(0x4f1)]){BattleManager['_subject']['_actions']=BattleManager[_0x26673f(0x4f1)]['_actions']||[];while(_0x4bdc0f--){if(BattleManager[_0x26673f(0x4f1)]['_actions']['length']<=0x0)break;BattleManager[_0x26673f(0x4f1)]['_actions'][_0x26673f(0x44e)]();}}}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],'ActSeq_Mechanics_SwapWeapon',_0x4da032=>{const _0x3361a8=_0x4b2772;if(!SceneManager[_0x3361a8(0x885)]())return;if(!Imported['VisuMZ_2_WeaponSwapSystem'])return;VisuMZ[_0x3361a8(0x72d)](_0x4da032,_0x4da032);const _0xdfbd99=VisuMZ[_0x3361a8(0xb0b)](_0x4da032[_0x3361a8(0xa4f)]),_0x139e34=_0x4da032[_0x3361a8(0x956)];for(const _0x832d0d of _0xdfbd99){if(!_0x832d0d)continue;if(!_0x832d0d[_0x3361a8(0x92d)]())continue;_0x832d0d[_0x3361a8(0x441)](_0x139e34);}}),PluginManager['registerCommand'](pluginData['name'],_0x4b2772(0x35e),_0x30de06=>{const _0x306d5f=_0x4b2772;if(!SceneManager[_0x306d5f(0x885)]())return;VisuMZ[_0x306d5f(0x72d)](_0x30de06,_0x30de06);const _0x1253a6=VisuMZ[_0x306d5f(0xb0b)](_0x30de06[_0x306d5f(0xa4f)]),_0xb02d2e=_0x30de06[_0x306d5f(0x61b)],_0x27e0d2={'textColor':ColorManager[_0x306d5f(0x5f9)](_0x30de06[_0x306d5f(0x79d)]),'flashColor':_0x30de06[_0x306d5f(0x6d3)],'flashDuration':_0x30de06[_0x306d5f(0xbf5)]};for(const _0x284292 of _0x1253a6){if(!_0x284292)continue;_0x284292[_0x306d5f(0x82d)](_0xb02d2e,_0x27e0d2);}}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],_0x4b2772(0x35b),_0x288cce=>{const _0x3ea368=_0x4b2772;if(!SceneManager[_0x3ea368(0x885)]())return;VisuMZ[_0x3ea368(0x72d)](_0x288cce,_0x288cce);const _0x509376=VisuMZ[_0x3ea368(0xb0b)](_0x288cce['Targets']);let _0x18f778=$gameVariables[_0x3ea368(0x791)](_0x288cce[_0x3ea368(0x3d0)]);Imported['VisuMZ_0_CoreEngine']&&_0x288cce[_0x3ea368(0xbd6)]&&(_0x18f778=VisuMZ[_0x3ea368(0xa26)](_0x18f778));const _0x43dcea=String(_0x18f778),_0x5808c1={'textColor':ColorManager[_0x3ea368(0x5f9)](_0x288cce['TextColor']),'flashColor':_0x288cce['FlashColor'],'flashDuration':_0x288cce[_0x3ea368(0xbf5)]};for(const _0x4e2fee of _0x509376){if(_0x3ea368(0x92f)==='aYtXW')this[_0x3ea368(0x947)]()&&this[_0x3ea368(0x947)]()[_0x3ea368(0xaee)]();else{if(!_0x4e2fee)continue;_0x4e2fee[_0x3ea368(0x82d)](_0x43dcea,_0x5808c1);}}}),PluginManager['registerCommand'](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x802),_0x321980=>{const _0x29b658=_0x4b2772;if(!SceneManager[_0x29b658(0x885)]())return;const _0xf9fa28=$gameTemp[_0x29b658(0x2ba)]();if(!_0xf9fa28)return;_0xf9fa28[_0x29b658(0xc6d)]('battleEffect');}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],'ActSeq_Motion_ClearFreezeFrame',_0x2a9302=>{const _0x1e5c58=_0x4b2772;if(!SceneManager[_0x1e5c58(0x885)]())return;VisuMZ['ConvertParams'](_0x2a9302,_0x2a9302);const _0x2b7582=VisuMZ['CreateActionSequenceTargets'](_0x2a9302[_0x1e5c58(0xa4f)]);for(const _0x4b2edd of _0x2b7582){if(!_0x4b2edd)continue;_0x4b2edd[_0x1e5c58(0x714)]();}}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],_0x4b2772(0xb4a),_0x5cad23=>{const _0x2dd11f=_0x4b2772;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2dd11f(0x72d)](_0x5cad23,_0x5cad23);const _0xe7838a=VisuMZ[_0x2dd11f(0xb0b)](_0x5cad23[_0x2dd11f(0xa4f)]),_0x1114d=_0x5cad23['MotionType'][_0x2dd11f(0xa42)]()[_0x2dd11f(0x75a)]();let _0x411bb5=_0x5cad23[_0x2dd11f(0x4b7)];const _0x4202bb=_0x5cad23['Frame'];!['attack',_0x2dd11f(0xcdc),_0x2dd11f(0x46f),'missile'][_0x2dd11f(0x41a)](_0x1114d)&&(_0x411bb5=![]);for(const _0x5be501 of _0xe7838a){if(!_0x5be501)continue;_0x5be501[_0x2dd11f(0xa67)](_0x1114d,_0x411bb5,_0x4202bb);}}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x6fc),_0x5e95c2=>{const _0x3cb642=_0x4b2772;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3cb642(0x72d)](_0x5e95c2,_0x5e95c2);const _0x261f41=VisuMZ[_0x3cb642(0xb0b)](_0x5e95c2[_0x3cb642(0xa4f)]),_0x2f9a2a=_0x5e95c2[_0x3cb642(0x6eb)][_0x3cb642(0xa42)]()[_0x3cb642(0x75a)](),_0x1634f2=_0x5e95c2['ShowWeapon'];for(const _0x33d387 of _0x261f41){if(!_0x33d387)continue;if(_0x2f9a2a['match'](/ATTACK[ ](\d+)/i))_0x33d387[_0x3cb642(0xa07)](Number(RegExp['$1']));else{if(_0x2f9a2a===_0x3cb642(0x2fa)){if(_0x3cb642(0x743)!=='acpal')_0x33d387[_0x3cb642(0x425)]();else{if(_0x10a351['_spriteset'][_0x3cb642(0x261)]())return!![];this[_0x3cb642(0x63b)]='';}}else _0x33d387[_0x3cb642(0x66d)](_0x2f9a2a);}if(!_0x1634f2){if(_0x3cb642(0xc77)!=='gXLRL')return this['textColor'](_0x23d612(_0x351a66));else _0x33d387[_0x3cb642(0x58b)](0x0);}else{if(_0x1634f2&&[_0x3cb642(0xcdc),_0x3cb642(0x46f),'missle']['includes'](_0x2f9a2a)){}}}}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x5fe),_0x4a9037=>{const _0x42ea31=_0x4b2772;if(!SceneManager[_0x42ea31(0x885)]())return;VisuMZ[_0x42ea31(0x72d)](_0x4a9037,_0x4a9037);const _0x41c280=BattleManager['_action'];if(!_0x41c280)return;if(!_0x41c280[_0x42ea31(0x30a)]())return;const _0x3a1b39=VisuMZ[_0x42ea31(0xb0b)](_0x4a9037[_0x42ea31(0xa4f)]);for(const _0x438027 of _0x3a1b39){if(!_0x438027)continue;_0x438027[_0x42ea31(0xb19)](_0x41c280);}}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x915),_0x28231f=>{const _0x4d079e=_0x4b2772;if(!SceneManager[_0x4d079e(0x885)]())return;VisuMZ[_0x4d079e(0x72d)](_0x28231f,_0x28231f);const _0x167ad2=VisuMZ[_0x4d079e(0xb0b)](_0x28231f['Targets']);for(const _0x2b3bcf of _0x167ad2){if(_0x4d079e(0x670)!=='tfksU'){if(!_0x2b3bcf)continue;if(!_0x2b3bcf['battler']())continue;_0x2b3bcf['battler']()[_0x4d079e(0xaee)]();}else{const _0x1f4e4='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20'[_0x4d079e(0x934)](_0x1e1794);_0x58d94d[_0x4d079e(0x67d)]['JS'][_0x972642]=new _0x2d36fe(_0x1f4e4);}}}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x9bc),_0x52de44=>{const _0x544556=_0x4b2772;if(!SceneManager[_0x544556(0x885)]())return;VisuMZ[_0x544556(0x72d)](_0x52de44,_0x52de44);const _0x20b5a2=$gameTemp['getLastPluginCommandInterpreter'](),_0x2c7a3e=_0x52de44[_0x544556(0x545)]*Sprite_Battler[_0x544556(0x86d)];_0x20b5a2['wait'](_0x2c7a3e);}),PluginManager['registerCommand'](pluginData[_0x4b2772(0x8fe)],'ActSeq_Movement_BattleStep',_0x46898c=>{const _0x3be7b2=_0x4b2772;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3be7b2(0x72d)](_0x46898c,_0x46898c);const _0x524df6=$gameTemp[_0x3be7b2(0x2ba)](),_0x59bb64=BattleManager[_0x3be7b2(0x463)];if(!_0x524df6||!_0x59bb64)return;if(!_0x59bb64[_0x3be7b2(0x30a)]())return;const _0x59af1a=VisuMZ['CreateActionSequenceTargets'](_0x46898c[_0x3be7b2(0xa4f)]);for(const _0x5d07ff of _0x59af1a){if(_0x3be7b2(0x48b)!==_0x3be7b2(0x48b)){const _0x558699=this[_0x3be7b2(0x323)]();this[_0x3be7b2(0x214)]=new _0x74ebd(_0x558699),this[_0x3be7b2(0x214)][_0x3be7b2(0x6f7)](),this[_0x3be7b2(0x340)](this[_0x3be7b2(0x214)]);}else{if(!_0x5d07ff)continue;_0x5d07ff[_0x3be7b2(0x850)](_0x59bb64);}}if(_0x46898c['WaitForMovement'])_0x524df6[_0x3be7b2(0xc6d)]('battleMove');}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x4a7),_0x1522cb=>{const _0x438ea6=_0x4b2772;if(!SceneManager[_0x438ea6(0x885)]())return;if(!$gameSystem[_0x438ea6(0x7d1)]())return;VisuMZ[_0x438ea6(0x72d)](_0x1522cb,_0x1522cb);const _0x55b878=$gameTemp[_0x438ea6(0x2ba)](),_0x4cd8b9=VisuMZ[_0x438ea6(0xb0b)](_0x1522cb[_0x438ea6(0xa4f)]),_0x1b8cc1=_0x1522cb[_0x438ea6(0x2a1)],_0xdf2f76=_0x1522cb[_0x438ea6(0x541)],_0x2afe2e=_0x1522cb['DistanceY'],_0x9bb0a8=_0x1522cb[_0x438ea6(0x8ec)],_0x20d3ab=_0x1522cb[_0x438ea6(0xa3f)],_0x3df605=_0x1522cb[_0x438ea6(0x278)],_0x57bab8=_0x1522cb[_0x438ea6(0x6eb)],_0x1c1e09=_0x1522cb[_0x438ea6(0x676)];if(!_0x55b878)return;for(const _0x4e956b of _0x4cd8b9){if(!_0x4e956b)continue;let _0x31df91=_0xdf2f76,_0x2135e4=_0x2afe2e;if(_0x1b8cc1[_0x438ea6(0x93d)](/horz/i))_0x31df91*=_0x4e956b[_0x438ea6(0x92d)]()?-0x1:0x1;if(_0x1b8cc1[_0x438ea6(0x93d)](/vert/i))_0x2135e4*=_0x4e956b[_0x438ea6(0x92d)]()?-0x1:0x1;_0x4e956b[_0x438ea6(0x7bd)](_0x31df91,_0x2135e4,_0x9bb0a8,_0x20d3ab,_0x3df605),_0x4e956b['requestMotion'](_0x57bab8);}if(_0x1c1e09)_0x55b878[_0x438ea6(0xc6d)](_0x438ea6(0x4bc));}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x604),_0x2d361d=>{const _0x42dabf=_0x4b2772;if(!SceneManager[_0x42dabf(0x885)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x42dabf(0x72d)](_0x2d361d,_0x2d361d);const _0x5da66e=$gameTemp['getLastPluginCommandInterpreter'](),_0x2c18c2=VisuMZ['CreateActionSequenceTargets'](_0x2d361d[_0x42dabf(0xa4f)]),_0x2416ee=_0x2d361d[_0x42dabf(0x37f)],_0x57c8e7=_0x2d361d[_0x42dabf(0x55f)],_0x52fede=_0x2d361d[_0x42dabf(0x6d6)],_0x1e1dab=_0x2d361d['OffsetY'],_0x408bfd=_0x2d361d[_0x42dabf(0x8ec)],_0x2d12d6=_0x2d361d['FaceDirection'],_0xe16785=_0x2d361d[_0x42dabf(0x278)],_0x1d5ce6=_0x2d361d[_0x42dabf(0x6eb)],_0xe4cd58=_0x2d361d[_0x42dabf(0x676)];if(!_0x5da66e)return;for(const _0x2ce5cd of _0x2c18c2){if(!_0x2ce5cd)continue;let _0x405d88=_0x2ce5cd[_0x42dabf(0x947)]()[_0x42dabf(0xc20)],_0x4e78cf=_0x2ce5cd['battler']()[_0x42dabf(0xaba)];if(_0x2416ee[_0x42dabf(0x93d)](/home/i))'TDdVD'==='whmVQ'?(_0x1f3369[_0x42dabf(0x67d)][_0x42dabf(0x205)]['call'](this),this[_0x42dabf(0x95f)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x42dabf(0xb6a)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this['_customDamageFormula']=_0x42dabf(0x523)):(_0x405d88=_0x2ce5cd[_0x42dabf(0x947)]()[_0x42dabf(0x879)],_0x4e78cf=_0x2ce5cd[_0x42dabf(0x947)]()['_homeY']);else{if(_0x2416ee[_0x42dabf(0x93d)](/center/i))_0x42dabf(0x2a7)==='LspAd'?(_0x530c55[_0x42dabf(0x67d)][_0x42dabf(0x461)]['call'](this),this[_0x42dabf(0x1fd)](),this['createEnemyNames']()):(_0x405d88=Graphics[_0x42dabf(0xcd9)]/0x2,_0x4e78cf=Graphics[_0x42dabf(0x218)]/0x2);else _0x2416ee[_0x42dabf(0x93d)](/point (\d+), (\d+)/i)&&(_0x405d88=Number(RegExp['$1']),_0x4e78cf=Number(RegExp['$2']));}if(_0x57c8e7[_0x42dabf(0x93d)](/none/i))_0x42dabf(0x758)!==_0x42dabf(0x758)?this[_0x42dabf(0xb0d)](...arguments):(_0x405d88+=_0x52fede,_0x4e78cf+=_0x1e1dab);else{if(_0x57c8e7[_0x42dabf(0x93d)](/horz/i)&&_0x57c8e7['match'](/vert/i))_0x405d88+=_0x2ce5cd[_0x42dabf(0x92d)]()?-_0x52fede:_0x52fede,_0x4e78cf+=_0x2ce5cd[_0x42dabf(0x92d)]()?-_0x1e1dab:_0x1e1dab;else{if(_0x57c8e7['match'](/horz/i))_0x405d88+=_0x2ce5cd[_0x42dabf(0x92d)]()?-_0x52fede:_0x52fede,_0x4e78cf+=_0x1e1dab;else _0x57c8e7[_0x42dabf(0x93d)](/vert/i)&&(_0x405d88+=_0x52fede,_0x4e78cf+=_0x2ce5cd[_0x42dabf(0x92d)]()?-_0x1e1dab:_0x1e1dab);}}_0x2ce5cd['moveBattlerHomeToPoint'](_0x405d88,_0x4e78cf,_0x408bfd,_0x2d12d6,_0xe16785,-0x1),_0x2ce5cd[_0x42dabf(0x66d)](_0x1d5ce6);}if(_0xe4cd58)_0x5da66e[_0x42dabf(0xc6d)](_0x42dabf(0x4bc));}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0xa3a),_0xfb317e=>{const _0xb355bc=_0x4b2772;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0xb355bc(0x7d1)]())return;VisuMZ[_0xb355bc(0x72d)](_0xfb317e,_0xfb317e);const _0x4749c6=$gameTemp[_0xb355bc(0x2ba)](),_0x5c0f6e=VisuMZ['CreateActionSequenceTargets'](_0xfb317e[_0xb355bc(0xc9f)]),_0x451b96=VisuMZ[_0xb355bc(0xb0b)](_0xfb317e[_0xb355bc(0xa83)]),_0x5d4424=_0xfb317e[_0xb355bc(0x2b9)];let _0x3ba09d=_0xfb317e['MeleeDistance'];const _0x57fec7=_0xfb317e['OffsetAdjust'],_0x33b5b0=_0xfb317e[_0xb355bc(0x6d6)],_0x16778a=_0xfb317e['OffsetY'],_0x312c8e=_0xfb317e[_0xb355bc(0x8ec)],_0x4d88dc=_0xfb317e[_0xb355bc(0xa3f)],_0x34d3d6=_0xfb317e['EasingType'],_0x2ea1e1=_0xfb317e[_0xb355bc(0x6eb)],_0x50850c=_0xfb317e[_0xb355bc(0x676)],_0x2b2b99=Math[_0xb355bc(0x7fa)](..._0x451b96['map'](_0x45e2a5=>_0x45e2a5[_0xb355bc(0x947)]()[_0xb355bc(0xc20)]-_0x45e2a5[_0xb355bc(0x947)]()[_0xb355bc(0xac8)]()/0x2)),_0x207301=Math['max'](..._0x451b96[_0xb355bc(0x8b4)](_0x1a8550=>_0x1a8550[_0xb355bc(0x947)]()['_baseX']+_0x1a8550[_0xb355bc(0x947)]()['mainSpriteWidth']()/0x2)),_0xdee681=Math[_0xb355bc(0x7fa)](..._0x451b96[_0xb355bc(0x8b4)](_0x1d14ee=>_0x1d14ee['battler']()[_0xb355bc(0xaba)]-_0x1d14ee[_0xb355bc(0x947)]()[_0xb355bc(0x5f3)]())),_0x5c9585=Math[_0xb355bc(0x20e)](..._0x451b96[_0xb355bc(0x8b4)](_0x5877b3=>_0x5877b3[_0xb355bc(0x947)]()[_0xb355bc(0xaba)])),_0x3bb841=_0x451b96['filter'](_0x4d3421=>_0x4d3421[_0xb355bc(0x92d)]())[_0xb355bc(0x1e9)],_0x957eaf=_0x451b96[_0xb355bc(0xb8c)](_0x595d2f=>_0x595d2f[_0xb355bc(0x9d4)]())[_0xb355bc(0x1e9)];let _0x3d06da=0x0,_0x2bfce7=0x0;if(_0x5d4424['match'](/front/i))_0x3d06da=_0x3bb841>=_0x957eaf?_0x2b2b99:_0x207301;else{if(_0x5d4424['match'](/middle/i))_0x3d06da=(_0x2b2b99+_0x207301)/0x2,_0x3ba09d=-0x1;else _0x5d4424['match'](/back/i)&&(_0xb355bc(0x5a3)==='ewQHn'?this[_0xb355bc(0x4ba)]('walk'):_0x3d06da=_0x3bb841>=_0x957eaf?_0x207301:_0x2b2b99);}if(_0x5d4424[_0xb355bc(0x93d)](/head/i))_0x2bfce7=_0xdee681;else{if(_0x5d4424[_0xb355bc(0x93d)](/center/i)){if(_0xb355bc(0x9dd)!==_0xb355bc(0xc7d))_0x2bfce7=(_0xdee681+_0x5c9585)/0x2;else{if(this[_0xb355bc(0x9fd)][_0xb355bc(0xb67)](_0x56b890=>_0x56b890['item']()&&_0x56b890[_0xb355bc(0x72c)]()))return!![];}}else _0x5d4424[_0xb355bc(0x93d)](/base/i)&&(_0x2bfce7=_0x5c9585);}if(!_0x4749c6)return;for(const _0x2ccba3 of _0x5c0f6e){if(!_0x2ccba3)continue;let _0x4490e5=_0x3d06da,_0x4ba3ec=_0x2bfce7;if(_0x57fec7[_0xb355bc(0x93d)](/none/i))_0x4490e5+=_0x33b5b0,_0x4ba3ec+=_0x16778a;else{if(_0x57fec7[_0xb355bc(0x93d)](/horz/i)&&_0x57fec7['match'](/vert/i))_0xb355bc(0x9de)===_0xb355bc(0x298)?_0x7211c=_0x277b13[_0xb355bc(0xa26)](_0x25cf74):(_0x4490e5+=_0x2ccba3[_0xb355bc(0x92d)]()?-_0x33b5b0:_0x33b5b0,_0x4ba3ec+=_0x2ccba3[_0xb355bc(0x92d)]()?-_0x16778a:_0x16778a);else{if(_0x57fec7['match'](/horz/i))_0x4490e5+=_0x2ccba3[_0xb355bc(0x92d)]()?-_0x33b5b0:_0x33b5b0,_0x4ba3ec+=_0x16778a;else _0x57fec7['match'](/vert/i)&&(_0x4490e5+=_0x33b5b0,_0x4ba3ec+=_0x2ccba3[_0xb355bc(0x92d)]()?-_0x16778a:_0x16778a);}}_0x2ccba3['moveBattlerHomeToPoint'](_0x4490e5,_0x4ba3ec,_0x312c8e,_0x4d88dc,_0x34d3d6,_0x3ba09d),_0x2ccba3[_0xb355bc(0x66d)](_0x2ea1e1);}if(_0x50850c)_0x4749c6['setWaitMode']('battleMove');}),PluginManager['registerCommand'](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x9db),_0x46004d=>{const _0x406be8=_0x4b2772;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x406be8(0x7d1)]())return;VisuMZ[_0x406be8(0x72d)](_0x46004d,_0x46004d);const _0x30d8b6=VisuMZ[_0x406be8(0xb0b)](_0x46004d[_0x406be8(0xa4f)]);let _0x536e5b=_0x46004d[_0x406be8(0x45b)]['match'](/back/i);for(const _0x151423 of _0x30d8b6){if(!_0x151423)continue;if(_0x46004d['Direction']['match'](/rand/i))_0x536e5b=Math[_0x406be8(0x619)](0x2);_0x151423[_0x406be8(0x28d)](!!_0x536e5b);}}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x8d8),_0x20b68=>{const _0x4d4288=_0x4b2772;if(!SceneManager[_0x4d4288(0x885)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x4d4288(0x72d)](_0x20b68,_0x20b68);const _0x12eb8a=VisuMZ[_0x4d4288(0xb0b)](_0x20b68[_0x4d4288(0xa4f)]);let _0x3907a8=_0x20b68[_0x4d4288(0x4f7)];const _0x4af989=_0x20b68['FaceAway'];for(const _0x5835a9 of _0x12eb8a){if('BalgT'==='BalgT'){if(!_0x5835a9)continue;let _0xfcd6f3=_0x5835a9['battler']()['_baseX'],_0x47b02b=_0x5835a9[_0x4d4288(0x947)]()[_0x4d4288(0xaba)];if(_0x3907a8['match'](/home/i))_0xfcd6f3=_0x5835a9[_0x4d4288(0x947)]()[_0x4d4288(0x879)],_0x47b02b=_0x5835a9['battler']()[_0x4d4288(0x919)];else{if(_0x3907a8[_0x4d4288(0x93d)](/center/i)){if(_0x4d4288(0x928)==='ShPKf')_0xfcd6f3=Graphics['boxWidth']/0x2,_0x47b02b=Graphics[_0x4d4288(0x218)]/0x2;else{const _0x24e78a=_0x4d4288(0x573);let _0x44b512=_0x4135f7['iconIndex'],_0x4d7d04=_0x1ea594[_0x4d4288(0x8fe)];const _0x1f7a4e=_0x1ca858[_0x4d4288(0x28a)];return _0x1f7a4e[_0x4d4288(0x93d)](/<DISPLAY ICON: (\d+)>/i)&&(_0x44b512=_0xe9a7b8(_0x4dbaa2['$1'])),_0x1f7a4e[_0x4d4288(0x93d)](/<DISPLAY TEXT: (.*)>/i)&&(_0x4d7d04=_0x5a3f22(_0x241cbc['$1'])),_0x24e78a[_0x4d4288(0x934)](_0x44b512,_0x4d7d04);}}else _0x3907a8[_0x4d4288(0x93d)](/point (\d+), (\d+)/i)&&(_0xfcd6f3=Number(RegExp['$1']),_0x47b02b=Number(RegExp['$2']));}_0x5835a9['setBattlerFacePoint'](Math[_0x4d4288(0x4ed)](_0xfcd6f3),Math[_0x4d4288(0x4ed)](_0x47b02b),!!_0x4af989);}else{if(!this[_0x4d4288(0x40c)]&&this[_0x4d4288(0x28e)]()['isConfused']())return![];if(this['isCustomBattleScope']())return!![];return typeof this['item']()[_0x4d4288(0x55e)]==='string';}}}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x992),_0x28714d=>{const _0xf17eae=_0x4b2772;if(!SceneManager[_0xf17eae(0x885)]())return;if(!$gameSystem[_0xf17eae(0x7d1)]())return;VisuMZ[_0xf17eae(0x72d)](_0x28714d,_0x28714d);const _0x11e64c=VisuMZ[_0xf17eae(0xb0b)](_0x28714d['Targets1']),_0x453a56=VisuMZ[_0xf17eae(0xb0b)](_0x28714d[_0xf17eae(0xa83)]),_0x5bfc33=_0x453a56[_0xf17eae(0x8b4)](_0x3018fe=>_0x3018fe&&_0x3018fe['battler']()?_0x3018fe[_0xf17eae(0x947)]()[_0xf17eae(0xc20)]:0x0)/(_0x453a56[_0xf17eae(0x1e9)]||0x1),_0x4b0f63=_0x453a56[_0xf17eae(0x8b4)](_0x332494=>_0x332494&&_0x332494[_0xf17eae(0x947)]()?_0x332494['battler']()['_baseY']:0x0)/(_0x453a56['length']||0x1),_0x17ee71=_0x28714d[_0xf17eae(0x57b)];for(const _0x238cf1 of _0x11e64c){if(!_0x238cf1)continue;_0x238cf1[_0xf17eae(0xa09)](Math[_0xf17eae(0x4ed)](_0x5bfc33),Math[_0xf17eae(0x4ed)](_0x4b0f63),!!_0x17ee71);}}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],_0x4b2772(0x5ce),_0x123350=>{const _0x979bf2=_0x4b2772;if(!SceneManager[_0x979bf2(0x885)]())return;VisuMZ['ConvertParams'](_0x123350,_0x123350);const _0xf539a=$gameTemp[_0x979bf2(0x2ba)](),_0x20e06b=VisuMZ[_0x979bf2(0xb0b)](_0x123350[_0x979bf2(0xa4f)]),_0x5157ad=_0x123350[_0x979bf2(0x8e7)],_0x2a6778=_0x123350['Duration'],_0x58bbb2=_0x123350[_0x979bf2(0x278)],_0x59cbb0=_0x123350['WaitForFloat'];if(!_0xf539a)return;for(const _0x41c930 of _0x20e06b){if(_0x979bf2(0x83c)===_0x979bf2(0x83c)){if(!_0x41c930)continue;_0x41c930[_0x979bf2(0x4aa)](_0x5157ad,_0x2a6778,_0x58bbb2);}else _0x302098['requestAnimation']([this],_0x2775fe,!!_0x276a9e);}if(_0x59cbb0)_0xf539a[_0x979bf2(0xc6d)](_0x979bf2(0x9f1));}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],'ActSeq_Movement_HomeReset',_0x1c3b6f=>{const _0x100fa2=_0x4b2772;if(!SceneManager[_0x100fa2(0x885)]())return;VisuMZ[_0x100fa2(0x72d)](_0x1c3b6f,_0x1c3b6f);const _0x1e9ea1=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x1e9ea1)return;const _0x1a5ecf=VisuMZ[_0x100fa2(0xb0b)](_0x1c3b6f[_0x100fa2(0xa4f)]);for(const _0x5da359 of _0x1a5ecf){if(_0x100fa2(0x747)!=='OVtTY')this[_0x100fa2(0x6e0)](),this[_0x100fa2(0xbf8)]();else{if(!_0x5da359)continue;_0x5da359[_0x100fa2(0x7d7)]();}}if(BattleManager[_0x100fa2(0x4f1)]){if(_0x100fa2(0x649)===_0x100fa2(0x86c)){const _0x22c6f4=_0x47e931['$1']['split'](',')[_0x100fa2(0x8b4)](_0x4984dc=>_0x4394f2(_0x4984dc));this['checkExtendTroopCompatibility'](),this[_0x100fa2(0x9e7)](_0x22c6f4);}else BattleManager['_subject'][_0x100fa2(0x595)]();}if(_0x1c3b6f[_0x100fa2(0x676)])_0x1e9ea1[_0x100fa2(0xc6d)](_0x100fa2(0x4bc));}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],'ActSeq_Movement_Jump',_0x3c7fe7=>{const _0x2d7cae=_0x4b2772;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x3c7fe7,_0x3c7fe7);const _0x36efcc=$gameTemp['getLastPluginCommandInterpreter'](),_0x296c02=VisuMZ[_0x2d7cae(0xb0b)](_0x3c7fe7['Targets']),_0x26e676=_0x3c7fe7[_0x2d7cae(0x8e7)],_0x28ed0c=_0x3c7fe7[_0x2d7cae(0x8ec)],_0x385ed5=_0x3c7fe7['WaitForJump'];if(!_0x36efcc)return;for(const _0x129773 of _0x296c02){if(_0x2d7cae(0x989)===_0x2d7cae(0x80b))_0x153524=['thrust','swing',_0x2d7cae(0xcb5)][_0x4486e3['type']]||_0x2d7cae(0x46f);else{if(!_0x129773)continue;_0x129773[_0x2d7cae(0x7cd)](_0x26e676,_0x28ed0c);}}if(_0x385ed5)_0x36efcc['setWaitMode']('battleJump');}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x6f6),_0xdb4d04=>{const _0x301c83=_0x4b2772;if(!SceneManager[_0x301c83(0x885)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x301c83(0x72d)](_0xdb4d04,_0xdb4d04);const _0x31a881=$gameTemp[_0x301c83(0x2ba)](),_0x35da40=VisuMZ[_0x301c83(0xb0b)](_0xdb4d04['Targets']),_0x1a4406=_0xdb4d04[_0x301c83(0x2a1)],_0x169fe0=_0xdb4d04[_0x301c83(0x541)],_0x32beba=_0xdb4d04['DistanceY'],_0xfa689=_0xdb4d04['Duration'],_0x5eef15=_0xdb4d04[_0x301c83(0xa3f)],_0x3afec4=_0xdb4d04[_0x301c83(0x278)],_0x30c2fa=_0xdb4d04[_0x301c83(0x6eb)],_0x550b98=_0xdb4d04[_0x301c83(0x676)];if(!_0x31a881)return;for(const _0xabd44e of _0x35da40){if(_0x301c83(0xc21)==='gPcpe')_0x2e5722[_0x301c83(0x402)]([_0x445e50]);else{if(!_0xabd44e)continue;let _0x4f8ab5=_0x169fe0,_0xc40ace=_0x32beba;if(_0x1a4406['match'](/horz/i))_0x4f8ab5*=_0xabd44e[_0x301c83(0x92d)]()?-0x1:0x1;if(_0x1a4406[_0x301c83(0x93d)](/vert/i))_0xc40ace*=_0xabd44e[_0x301c83(0x92d)]()?-0x1:0x1;_0xabd44e[_0x301c83(0x434)](_0x4f8ab5,_0xc40ace,_0xfa689,_0x5eef15,_0x3afec4),_0xabd44e[_0x301c83(0x66d)](_0x30c2fa);}}if(_0x550b98)_0x31a881[_0x301c83(0xc6d)](_0x301c83(0x4bc));}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],'ActSeq_Movement_MoveToPoint',_0x31455e=>{const _0xa82485=_0x4b2772;if(!SceneManager[_0xa82485(0x885)]())return;if(!$gameSystem[_0xa82485(0x7d1)]())return;VisuMZ[_0xa82485(0x72d)](_0x31455e,_0x31455e);const _0x5b0fbd=$gameTemp[_0xa82485(0x2ba)](),_0x360379=VisuMZ[_0xa82485(0xb0b)](_0x31455e[_0xa82485(0xa4f)]),_0x5afa27=_0x31455e[_0xa82485(0x37f)],_0x3f9692=_0x31455e[_0xa82485(0x55f)],_0x50282d=_0x31455e[_0xa82485(0x6d6)],_0x41640f=_0x31455e[_0xa82485(0xbed)],_0x122a88=_0x31455e['Duration'],_0x384624=_0x31455e['FaceDirection'],_0x188a7a=_0x31455e[_0xa82485(0x278)],_0x8e9665=_0x31455e[_0xa82485(0x6eb)],_0x30f282=_0x31455e[_0xa82485(0x676)];if(!_0x5b0fbd)return;for(const _0x295cd2 of _0x360379){if(!_0x295cd2)continue;let _0x32f119=_0x295cd2[_0xa82485(0x947)]()[_0xa82485(0xc20)],_0x10192b=_0x295cd2[_0xa82485(0x947)]()[_0xa82485(0xaba)];if(_0x5afa27[_0xa82485(0x93d)](/home/i))_0x32f119=_0x295cd2[_0xa82485(0x947)]()['_homeX'],_0x10192b=_0x295cd2[_0xa82485(0x947)]()['_homeY'];else{if(_0x5afa27[_0xa82485(0x93d)](/center/i))_0x32f119=Graphics['boxWidth']/0x2,_0x10192b=Graphics[_0xa82485(0x218)]/0x2;else _0x5afa27[_0xa82485(0x93d)](/point (\d+), (\d+)/i)&&(_0x32f119=Number(RegExp['$1']),_0x10192b=Number(RegExp['$2']));}if(_0x3f9692[_0xa82485(0x93d)](/none/i))_0xa82485(0x2d2)!=='QCOHh'?(_0x32f119+=_0x50282d,_0x10192b+=_0x41640f):_0xc8c15c['Actor'][_0xa82485(0xc81)]=![];else{if(_0x3f9692[_0xa82485(0x93d)](/horz/i)&&_0x3f9692['match'](/vert/i))_0x32f119+=_0x295cd2[_0xa82485(0x92d)]()?-_0x50282d:_0x50282d,_0x10192b+=_0x295cd2[_0xa82485(0x92d)]()?-_0x41640f:_0x41640f;else{if(_0x3f9692[_0xa82485(0x93d)](/horz/i))_0x32f119+=_0x295cd2[_0xa82485(0x92d)]()?-_0x50282d:_0x50282d,_0x10192b+=_0x41640f;else _0x3f9692['match'](/vert/i)&&(_0xa82485(0xce8)===_0xa82485(0x1db)?this[_0xa82485(0x6b3)](_0x54bb9f):(_0x32f119+=_0x50282d,_0x10192b+=_0x295cd2[_0xa82485(0x92d)]()?-_0x41640f:_0x41640f));}}_0x295cd2[_0xa82485(0x63e)](_0x32f119,_0x10192b,_0x122a88,_0x384624,_0x188a7a,-0x1),_0x295cd2[_0xa82485(0x66d)](_0x8e9665);}if(_0x30f282)_0x5b0fbd[_0xa82485(0xc6d)](_0xa82485(0x4bc));}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0xb1b),_0x11bfca=>{const _0x950b8=_0x4b2772;if(!SceneManager[_0x950b8(0x885)]())return;if(!$gameSystem[_0x950b8(0x7d1)]())return;VisuMZ[_0x950b8(0x72d)](_0x11bfca,_0x11bfca);const _0x1f25e6=$gameTemp[_0x950b8(0x2ba)](),_0x2201c5=VisuMZ[_0x950b8(0xb0b)](_0x11bfca['Targets1']),_0x168fb8=VisuMZ[_0x950b8(0xb0b)](_0x11bfca[_0x950b8(0xa83)]),_0x373101=_0x11bfca[_0x950b8(0x2b9)];let _0x224d8a=_0x11bfca[_0x950b8(0xcae)];const _0x541098=_0x11bfca[_0x950b8(0x55f)],_0x246ca9=_0x11bfca[_0x950b8(0x6d6)],_0x4d9f5e=_0x11bfca[_0x950b8(0xbed)],_0x4185d0=_0x11bfca[_0x950b8(0x8ec)],_0x325066=_0x11bfca[_0x950b8(0xa3f)],_0x54d808=_0x11bfca['EasingType'],_0x4f0b23=_0x11bfca[_0x950b8(0x6eb)],_0x423284=_0x11bfca[_0x950b8(0x676)],_0xa06cfa=Math[_0x950b8(0x7fa)](..._0x168fb8[_0x950b8(0x8b4)](_0x37c2ac=>_0x37c2ac[_0x950b8(0x947)]()[_0x950b8(0xc20)]-_0x37c2ac[_0x950b8(0x947)]()[_0x950b8(0xac8)]()/0x2)),_0x130abf=Math[_0x950b8(0x20e)](..._0x168fb8['map'](_0x35b72d=>_0x35b72d[_0x950b8(0x947)]()[_0x950b8(0xc20)]+_0x35b72d[_0x950b8(0x947)]()[_0x950b8(0xac8)]()/0x2)),_0x42cf8d=Math[_0x950b8(0x7fa)](..._0x168fb8[_0x950b8(0x8b4)](_0x4dbd36=>_0x4dbd36[_0x950b8(0x947)]()[_0x950b8(0xaba)]-_0x4dbd36[_0x950b8(0x947)]()[_0x950b8(0x5f3)]())),_0x523ed2=Math[_0x950b8(0x20e)](..._0x168fb8[_0x950b8(0x8b4)](_0x52537f=>_0x52537f[_0x950b8(0x947)]()[_0x950b8(0xaba)])),_0x597cb=_0x168fb8['filter'](_0x349aa0=>_0x349aa0[_0x950b8(0x92d)]())[_0x950b8(0x1e9)],_0x35f78d=_0x168fb8[_0x950b8(0xb8c)](_0xe585ff=>_0xe585ff['isEnemy']())['length'];let _0x254209=0x0,_0xd9bedf=0x0;if(_0x373101[_0x950b8(0x93d)](/front/i))_0x254209=_0x597cb>=_0x35f78d?_0xa06cfa:_0x130abf;else{if(_0x373101[_0x950b8(0x93d)](/middle/i))_0x254209=(_0xa06cfa+_0x130abf)/0x2,_0x224d8a=-0x1;else _0x373101[_0x950b8(0x93d)](/back/i)&&(_0x254209=_0x597cb>=_0x35f78d?_0x130abf:_0xa06cfa);}if(_0x373101['match'](/head/i))_0xd9bedf=_0x42cf8d;else{if(_0x373101[_0x950b8(0x93d)](/center/i))_0x950b8(0xbca)===_0x950b8(0x48e)?this[_0x950b8(0xacf)]-=0x10:_0xd9bedf=(_0x42cf8d+_0x523ed2)/0x2;else _0x373101[_0x950b8(0x93d)](/base/i)&&(_0xd9bedf=_0x523ed2);}if(!_0x1f25e6)return;for(const _0xb6fef7 of _0x2201c5){if(!_0xb6fef7)continue;let _0x3766f9=_0x254209,_0x4973fb=_0xd9bedf;if(_0x541098['match'](/none/i)){if(_0x950b8(0x7ab)!==_0x950b8(0x7ab)){const _0x1bfb67=this[_0x950b8(0x30a)]()[_0x950b8(0x55e)];return _0x1bfb67[_0x950b8(0x93d)](/(?:RAND|RANDOM)/i);}else _0x3766f9+=_0x246ca9,_0x4973fb+=_0x4d9f5e;}else{if(_0x541098['match'](/horz/i)&&_0x541098[_0x950b8(0x93d)](/vert/i))_0x3766f9+=_0xb6fef7['isActor']()?-_0x246ca9:_0x246ca9,_0x4973fb+=_0xb6fef7['isActor']()?-_0x4d9f5e:_0x4d9f5e;else{if(_0x541098[_0x950b8(0x93d)](/horz/i))_0x950b8(0xc6c)===_0x950b8(0x41f)?this['setWaitMode'](_0x950b8(0xa33)):(_0x3766f9+=_0xb6fef7[_0x950b8(0x92d)]()?-_0x246ca9:_0x246ca9,_0x4973fb+=_0x4d9f5e);else _0x541098[_0x950b8(0x93d)](/vert/i)&&(_0x3766f9+=_0x246ca9,_0x4973fb+=_0xb6fef7[_0x950b8(0x92d)]()?-_0x4d9f5e:_0x4d9f5e);}}_0xb6fef7[_0x950b8(0x63e)](_0x3766f9,_0x4973fb,_0x4185d0,_0x325066,_0x54d808,_0x224d8a),_0xb6fef7[_0x950b8(0x66d)](_0x4f0b23);}if(_0x423284)_0x1f25e6[_0x950b8(0xc6d)](_0x950b8(0x4bc));}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],'ActSeq_Movement_Opacity',_0x17ffff=>{const _0x5baedc=_0x4b2772;if(!SceneManager[_0x5baedc(0x885)]())return;VisuMZ[_0x5baedc(0x72d)](_0x17ffff,_0x17ffff);const _0x2fd94b=$gameTemp['getLastPluginCommandInterpreter'](),_0x205db7=VisuMZ['CreateActionSequenceTargets'](_0x17ffff['Targets']),_0xe8d756=_0x17ffff[_0x5baedc(0x998)],_0x4810b2=_0x17ffff[_0x5baedc(0x8ec)],_0x263888=_0x17ffff[_0x5baedc(0x278)],_0x18bd42=_0x17ffff[_0x5baedc(0x896)];if(!_0x2fd94b)return;for(const _0x80a391 of _0x205db7){if(!_0x80a391)continue;_0x80a391[_0x5baedc(0x50e)](_0xe8d756,_0x4810b2,_0x263888);}if(_0x18bd42)_0x2fd94b[_0x5baedc(0xc6d)](_0x5baedc(0xc51));}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],'ActSeq_Movement_Scale',_0x4896ec=>{const _0x45c4ff=_0x4b2772;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x45c4ff(0x72d)](_0x4896ec,_0x4896ec);const _0x19db1f=$gameTemp[_0x45c4ff(0x2ba)](),_0x14f9af=VisuMZ[_0x45c4ff(0xb0b)](_0x4896ec[_0x45c4ff(0xa4f)]),_0xd1187e=_0x4896ec[_0x45c4ff(0x7d3)],_0x56725f=_0x4896ec[_0x45c4ff(0xb96)],_0x258de2=_0x4896ec[_0x45c4ff(0x8ec)],_0x123c2c=_0x4896ec[_0x45c4ff(0x278)],_0x390bc1=_0x4896ec['WaitForScale'];if(!_0x19db1f)return;for(const _0x1cbcd9 of _0x14f9af){if(!_0x1cbcd9)continue;_0x1cbcd9[_0x45c4ff(0x634)](_0xd1187e,_0x56725f,_0x258de2,_0x123c2c);}if(_0x390bc1)_0x19db1f[_0x45c4ff(0xc6d)](_0x45c4ff(0x3c9));}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x544),_0x21dc37=>{const _0x363497=_0x4b2772;if(!SceneManager[_0x363497(0x885)]())return;VisuMZ[_0x363497(0x72d)](_0x21dc37,_0x21dc37);const _0xeece6d=$gameTemp[_0x363497(0x2ba)](),_0x4703fb=VisuMZ[_0x363497(0xb0b)](_0x21dc37['Targets']),_0x42e862=_0x21dc37[_0x363497(0x6fe)],_0x1d5502=_0x21dc37['SkewY'],_0x49314e=_0x21dc37['Duration'],_0x335a06=_0x21dc37[_0x363497(0x278)],_0xed0cf9=_0x21dc37[_0x363497(0x2ff)];if(!_0xeece6d)return;for(const _0x17d8ee of _0x4703fb){if(!_0x17d8ee)continue;_0x17d8ee['skewBattler'](_0x42e862,_0x1d5502,_0x49314e,_0x335a06);}if(_0xed0cf9)_0xeece6d['setWaitMode']('battleSpriteSkew');}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x60c),_0x5ef721=>{const _0x23851f=_0x4b2772;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x5ef721,_0x5ef721);const _0x500a59=$gameTemp[_0x23851f(0x2ba)](),_0x407711=VisuMZ[_0x23851f(0xb0b)](_0x5ef721[_0x23851f(0xa4f)]),_0x43dece=_0x5ef721[_0x23851f(0x9d0)],_0x592385=_0x5ef721[_0x23851f(0x8ec)],_0x652fcf=_0x5ef721[_0x23851f(0x278)],_0x5778f2=_0x5ef721[_0x23851f(0x8ff)],_0x2efe00=_0x5ef721[_0x23851f(0x74b)];if(!_0x500a59)return;for(const _0x217704 of _0x407711){if('bbibk'!==_0x23851f(0x2b6)){if(!_0x217704)continue;_0x217704[_0x23851f(0x3c7)](_0x43dece,_0x592385,_0x652fcf,_0x5778f2);}else{if(!_0x4c3cb0['BattleCore'][_0x23851f(0x869)]['BattleLog'][_0x23851f(0x708)])return;_0x2912ea[_0x23851f(0x67d)][_0x23851f(0x6a4)][_0x23851f(0xb2b)](this,_0xd3f148);}}if(_0x2efe00)_0x500a59[_0x23851f(0xc6d)](_0x23851f(0x785));}),PluginManager['registerCommand'](pluginData['name'],_0x4b2772(0x28f),_0x1172d0=>{const _0x345772=_0x4b2772;if(!SceneManager['isSceneBattle']())return;const _0x1d4a06=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x1d4a06)return;_0x1d4a06[_0x345772(0xc6d)]('battleFloat');}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x79a),_0xdf741b=>{const _0x70f349=_0x4b2772;if(!SceneManager[_0x70f349(0x885)]())return;const _0x497378=$gameTemp[_0x70f349(0x2ba)]();if(!_0x497378)return;_0x497378['setWaitMode'](_0x70f349(0x2c0));}),PluginManager['registerCommand'](pluginData['name'],_0x4b2772(0x264),_0x497ee5=>{const _0x506ccd=_0x4b2772;if(!SceneManager['isSceneBattle']())return;const _0x5e0e0=$gameTemp[_0x506ccd(0x2ba)]();if(!_0x5e0e0)return;_0x5e0e0['setWaitMode'](_0x506ccd(0x4bc));}),PluginManager['registerCommand'](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x34c),_0x106d3f=>{const _0x13fa38=_0x4b2772;if(!SceneManager[_0x13fa38(0x885)]())return;const _0x31ea35=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x31ea35)return;_0x31ea35[_0x13fa38(0xc6d)]('battleOpacity');}),PluginManager['registerCommand'](pluginData['name'],_0x4b2772(0x55d),_0x3c503f=>{const _0x4d602c=_0x4b2772;if(!SceneManager[_0x4d602c(0x885)]())return;const _0x294a57=$gameTemp[_0x4d602c(0x2ba)]();if(!_0x294a57)return;_0x294a57['setWaitMode']('battleGrow');}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],'ActSeq_Movement_WaitForSkew',_0x1f8f2f=>{const _0x2e3aa7=_0x4b2772;if(!SceneManager[_0x2e3aa7(0x885)]())return;const _0x459843=$gameTemp[_0x2e3aa7(0x2ba)]();if(!_0x459843)return;_0x459843[_0x2e3aa7(0xc6d)]('battleSpriteSkew');}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],'ActSeq_Movement_WaitForSpin',_0x18033b=>{const _0x230a50=_0x4b2772;if(!SceneManager[_0x230a50(0x885)]())return;const _0x277a28=$gameTemp[_0x230a50(0x2ba)]();if(!_0x277a28)return;_0x277a28[_0x230a50(0xc6d)](_0x230a50(0x785));}),PluginManager[_0x4b2772(0xbf6)](pluginData['name'],_0x4b2772(0x495),_0x31d9e1=>{const _0x545e9e=_0x4b2772;if(!SceneManager[_0x545e9e(0x885)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x545e9e(0x72d)](_0x31d9e1,_0x31d9e1);const _0x40555f=$gameTemp[_0x545e9e(0x2ba)](),_0x106254=_0x31d9e1['WaitForProjectile'];if(!_0x40555f)return;const _0x3a22e3=BattleManager[_0x545e9e(0x34a)];if(!_0x3a22e3)return;_0x3a22e3[_0x545e9e(0xc1b)](_0x31d9e1);if(_0x106254)_0x40555f[_0x545e9e(0xc6d)](_0x545e9e(0x265));}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x412),_0xb6497c=>{const _0x16d49f=_0x4b2772;if(!SceneManager[_0x16d49f(0x885)]())return;if(!Imported[_0x16d49f(0xc0d)])return;VisuMZ[_0x16d49f(0x72d)](_0xb6497c,_0xb6497c);const _0x414376=$gameTemp[_0x16d49f(0x2ba)](),_0x2ea1b3=_0xb6497c[_0x16d49f(0x520)];if(!_0x414376)return;const _0x397585=BattleManager[_0x16d49f(0x34a)];if(!_0x397585)return;_0x397585[_0x16d49f(0xc1b)](_0xb6497c);if(_0x2ea1b3)_0x414376[_0x16d49f(0xc6d)](_0x16d49f(0x265));}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],'ActSeq_Projectile_Picture',_0x66dc3f=>{const _0x50c211=_0x4b2772;if(!SceneManager[_0x50c211(0x885)]())return;if(!Imported[_0x50c211(0xc0d)])return;VisuMZ[_0x50c211(0x72d)](_0x66dc3f,_0x66dc3f);const _0x3df0c4=$gameTemp['getLastPluginCommandInterpreter'](),_0x4bb1c4=_0x66dc3f[_0x50c211(0x520)];if(!_0x3df0c4)return;const _0x5735b0=BattleManager[_0x50c211(0x34a)];if(!_0x5735b0)return;_0x5735b0[_0x50c211(0xc1b)](_0x66dc3f);if(_0x4bb1c4)_0x3df0c4['setWaitMode'](_0x50c211(0x265));}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0xcba),_0x32b488=>{const _0x4bf9c8=_0x4b2772;if(!SceneManager[_0x4bf9c8(0x885)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x4bf9c8(0x72d)](_0x32b488,_0x32b488);const _0x598249=$gameTemp[_0x4bf9c8(0x2ba)](),_0x50d5cd=_0x32b488['WaitForSkew'];if(!_0x598249)return;$gameScreen['setBattleSkew'](_0x32b488[_0x4bf9c8(0x6fe)],_0x32b488['SkewY'],_0x32b488[_0x4bf9c8(0x8ec)],_0x32b488[_0x4bf9c8(0x278)]);if(_0x50d5cd)_0x598249['setWaitMode'](_0x4bf9c8(0xb8e));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Skew_Reset',_0xacf773=>{const _0x321b6b=_0x4b2772;if(!SceneManager[_0x321b6b(0x885)]())return;if(!Imported[_0x321b6b(0x39b)])return;VisuMZ[_0x321b6b(0x72d)](_0xacf773,_0xacf773);const _0xe74d43=$gameTemp[_0x321b6b(0x2ba)](),_0x8c1684=_0xacf773[_0x321b6b(0x2ff)];if(!_0xe74d43)return;$gameScreen[_0x321b6b(0xb11)](0x0,0x0,_0xacf773[_0x321b6b(0x8ec)],_0xacf773[_0x321b6b(0x278)]);if(_0x8c1684)_0xe74d43[_0x321b6b(0xc6d)](_0x321b6b(0xb8e));}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x7aa),_0x1d828c=>{const _0x430c55=_0x4b2772;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x430c55(0x39b)])return;const _0x105b51=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x105b51)return;_0x105b51[_0x430c55(0xc6d)](_0x430c55(0xb8e));}),PluginManager['registerCommand'](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x2ef),_0x2d6e4a=>{const _0x3ba857=_0x4b2772;if(!SceneManager[_0x3ba857(0x885)]())return;VisuMZ[_0x3ba857(0x72d)](_0x2d6e4a,_0x2d6e4a);const _0x5e29e9=$gameTemp['getLastPluginCommandInterpreter'](),_0x1aad45=_0x2d6e4a['Index'],_0x4b1c0d=_0x2d6e4a['JumpToLabel'];if(!_0x5e29e9)return;BattleManager[_0x3ba857(0xaa6)]=_0x1aad45,BattleManager[_0x3ba857(0x607)]=BattleManager[_0x3ba857(0x5dc)]?BattleManager[_0x3ba857(0x5dc)][BattleManager[_0x3ba857(0xaa6)]]||null:null,BattleManager[_0x3ba857(0x607)]&&_0x4b1c0d[_0x3ba857(0x5fd)]()['trim']()!==_0x3ba857(0xa2e)&&('FtgCM'===_0x3ba857(0x6f1)?_0x5e29e9['command119']([_0x4b1c0d]):(_0x53a293*=_0x502034[_0x3ba857(0x651)](_0x4c8abe[_0x3ba857(0x328)]),_0x5ede23*=this['lukEffectRate'](_0x1b8a47)));}),PluginManager['registerCommand'](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0xaaa),_0x4a45a8=>{const _0x4cb2ad=_0x4b2772;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4cb2ad(0x72d)](_0x4a45a8,_0x4a45a8);const _0x588a39=$gameTemp['getLastPluginCommandInterpreter'](),_0x14f458=_0x4a45a8['JumpToLabel'];if(!_0x588a39)return;BattleManager[_0x4cb2ad(0xaa6)]++,BattleManager[_0x4cb2ad(0x607)]=BattleManager[_0x4cb2ad(0x5dc)][BattleManager['_targetIndex']]||null;if(BattleManager[_0x4cb2ad(0x607)]&&_0x14f458[_0x4cb2ad(0x5fd)]()[_0x4cb2ad(0x75a)]()!==_0x4cb2ad(0xa2e)){if(_0x4cb2ad(0x4f6)!==_0x4cb2ad(0xbfd))_0x588a39[_0x4cb2ad(0x402)]([_0x14f458]);else{const _0x31d187=_0x51cd11(_0x458f2a['$1'])['split'](/[\r\n]+/)[_0x4cb2ad(0x9cc)](''),_0x332aad=_0x9b1b3b['processRandomizedData'](_0x31d187);_0x4b7b02['wtypeId']=_0x37b4e7['getWtypeIdWithName'](_0x332aad);}}}),PluginManager['registerCommand'](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0xafe),_0x4cd912=>{const _0x56a831=_0x4b2772;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x4cd912,_0x4cd912);const _0x19bef7=$gameTemp['getLastPluginCommandInterpreter'](),_0x3e0a59=_0x4cd912['JumpToLabel'];if(!_0x19bef7)return;BattleManager[_0x56a831(0xaa6)]--,BattleManager[_0x56a831(0x607)]=BattleManager['_allTargets'][BattleManager['_targetIndex']]||null,BattleManager[_0x56a831(0x607)]&&_0x3e0a59[_0x56a831(0x5fd)]()[_0x56a831(0x75a)]()!==_0x56a831(0xa2e)&&_0x19bef7[_0x56a831(0x402)]([_0x3e0a59]);}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x385),_0x209c57=>{const _0xf44c15=_0x4b2772;if(!SceneManager[_0xf44c15(0x885)]())return;VisuMZ['ConvertParams'](_0x209c57,_0x209c57);const _0x19ca18=$gameTemp['getLastPluginCommandInterpreter'](),_0x121707=_0x209c57[_0xf44c15(0x827)],_0x26fa9a=_0x209c57[_0xf44c15(0x38b)];if(!_0x19ca18)return;const _0xb4dc8b=BattleManager[_0xf44c15(0xaa6)];for(;;){BattleManager[_0xf44c15(0xaa6)]=Math[_0xf44c15(0x619)](BattleManager['_allTargets'][_0xf44c15(0x1e9)]);if(!_0x121707)break;if(BattleManager['_targetIndex']!==_0xb4dc8b)break;if(BattleManager[_0xf44c15(0x5dc)][_0xf44c15(0x1e9)]<=0x1){BattleManager['_targetIndex']=0x0;break;}}BattleManager['_target']=BattleManager[_0xf44c15(0x5dc)][BattleManager[_0xf44c15(0xaa6)]]||null,BattleManager['_target']&&_0x26fa9a['toUpperCase']()['trim']()!=='UNTITLED'&&_0x19ca18[_0xf44c15(0x402)]([_0x26fa9a]);}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x628),_0x561585=>{const _0x562bc3=_0x4b2772;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x562bc3(0x72d)](_0x561585,_0x561585);const _0x3c335f=VisuMZ[_0x562bc3(0xb0b)](_0x561585[_0x562bc3(0xa4f)]);for(const _0x41d2ab of _0x3c335f){if(!_0x41d2ab)continue;if(!_0x41d2ab[_0x562bc3(0x92d)]())continue;_0x41d2ab['clearActiveWeaponSlot']();}}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],'ActSeq_Weapon_NextActiveWeapon',_0x2c2f1e=>{const _0x3dbf8f=_0x4b2772;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x2c2f1e,_0x2c2f1e);const _0x3e1695=$gameTemp[_0x3dbf8f(0x2ba)]();let _0x3655d=![];const _0x2525e3=_0x2c2f1e[_0x3dbf8f(0x38b)],_0x593585=VisuMZ[_0x3dbf8f(0xb0b)](_0x2c2f1e[_0x3dbf8f(0xa4f)]);for(const _0x31dc1e of _0x593585){if(_0x3dbf8f(0x483)===_0x3dbf8f(0x483)){if(!_0x31dc1e)continue;if(!_0x31dc1e['isActor']())continue;_0x31dc1e[_0x3dbf8f(0xa27)](),_0x31dc1e[_0x3dbf8f(0xce5)]()[_0x3dbf8f(0x1e9)]>0x0?_0x3655d=!![]:_0x3dbf8f(0x9dc)!==_0x3dbf8f(0x9dc)?(_0x4836eb[_0x3dbf8f(0x67d)][_0x3dbf8f(0x485)][_0x3dbf8f(0xb2b)](this,_0xf7d827),this[_0x3dbf8f(0x9d4)]()&&_0x354fc6===this['deathStateId']()&&this[_0x3dbf8f(0x8ca)]()&&(this['_visualHpGauge_JustDied']=![]),!this['_tempActor']&&!this['_tempBattler']&&_0x39c39f[_0x3dbf8f(0x885)]()&&this[_0x3dbf8f(0x249)]()):_0x31dc1e[_0x3dbf8f(0x39d)]();}else{const _0xc818b6=_0x5368a6[_0x3dbf8f(0xa05)]();if(_0xc818b6&&_0xc818b6[_0x3dbf8f(0x947)])_0xc818b6[_0x3dbf8f(0x947)]()['stepBack']();_0x57fae3[_0x3dbf8f(0x67d)][_0x3dbf8f(0x9eb)][_0x3dbf8f(0xb2b)](this);}}_0x3655d&&_0x2525e3['toUpperCase']()[_0x3dbf8f(0x75a)]()!==_0x3dbf8f(0xa2e)&&_0x3e1695[_0x3dbf8f(0x402)]([_0x2525e3]);}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],'ActSeq_Weapon_SetActiveWeapon',_0x33b487=>{const _0x220fda=_0x4b2772;if(!SceneManager[_0x220fda(0x885)]())return;VisuMZ[_0x220fda(0x72d)](_0x33b487,_0x33b487);let _0x4dc126=_0x33b487[_0x220fda(0x7b4)];_0x4dc126--,_0x4dc126=Math[_0x220fda(0x20e)](_0x4dc126,0x0);const _0x101204=VisuMZ[_0x220fda(0xb0b)](_0x33b487[_0x220fda(0xa4f)]);for(const _0x51ade4 of _0x101204){if(_0x220fda(0xce2)==='NkYJe'){const _0x1a68a4=this[_0x220fda(0x947)]();_0x1a68a4&&(_0x1a68a4['forceMotion'](_0x486cd4),[_0x220fda(0x46f),_0x220fda(0xcdc),_0x220fda(0xcb5)]['includes'](_0x58275a)&&this[_0x220fda(0x3a5)]());}else{if(!_0x51ade4)continue;if(!_0x51ade4[_0x220fda(0x92d)]())continue;_0x51ade4[_0x220fda(0x8a8)](_0x4dc126);}}}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0x84d),_0x4a2720=>{const _0x349c19=_0x4b2772;if(!SceneManager[_0x349c19(0x885)]())return;if(!Imported[_0x349c19(0x39b)])return;VisuMZ[_0x349c19(0x72d)](_0x4a2720,_0x4a2720);const _0x4670f6=$gameTemp[_0x349c19(0x2ba)](),_0x11ab64=_0x4a2720[_0x349c19(0xca2)];if(!_0x4670f6)return;$gameScreen[_0x349c19(0x458)](_0x4a2720['Scale'],_0x4a2720[_0x349c19(0x8ec)],_0x4a2720[_0x349c19(0x278)]);if(_0x11ab64)_0x4670f6[_0x349c19(0xc6d)]('battleZoom');}),PluginManager[_0x4b2772(0xbf6)](pluginData[_0x4b2772(0x8fe)],_0x4b2772(0xa28),_0x349412=>{const _0x258219=_0x4b2772;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x258219(0x39b)])return;VisuMZ[_0x258219(0x72d)](_0x349412,_0x349412);const _0x50b357=$gameTemp[_0x258219(0x2ba)](),_0x270ad4=_0x349412['WaitForZoom'];if(!_0x50b357)return;$gameScreen[_0x258219(0x458)](0x1,_0x349412[_0x258219(0x8ec)],_0x349412[_0x258219(0x278)]);if(_0x270ad4)_0x50b357[_0x258219(0xc6d)](_0x258219(0x7c5));}),PluginManager['registerCommand'](pluginData['name'],_0x4b2772(0xa77),_0x4c0ef3=>{const _0x164d2a=_0x4b2772;if(!SceneManager[_0x164d2a(0x885)]())return;if(!Imported[_0x164d2a(0x39b)])return;const _0x998eab=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x998eab)return;_0x998eab[_0x164d2a(0xc6d)](_0x164d2a(0x7c5));}),VisuMZ['BattleCore'][_0x4b2772(0x3b6)]=Scene_Boot['prototype'][_0x4b2772(0xc53)],Scene_Boot['prototype'][_0x4b2772(0xc53)]=function(){const _0x14a839=_0x4b2772;this[_0x14a839(0x2da)](),this['process_VisuMZ_BattleCore_PluginParams'](),this['process_VisuMZ_BattleCore_DamageStyles'](),this[_0x14a839(0x904)](),VisuMZ[_0x14a839(0x67d)][_0x14a839(0x3b6)][_0x14a839(0xb2b)](this),this['process_VisuMZ_BattleCore_Notetags'](),this[_0x14a839(0x5b4)](),this[_0x14a839(0x1e5)](),this[_0x14a839(0x5b0)]();},Scene_Boot[_0x4b2772(0x632)]['process_VisuMZ_BattleCore_Notetags']=function(){const _0x27e899=_0x4b2772;if(VisuMZ['ParseAllNotetags'])return;this[_0x27e899(0x93b)](),this[_0x27e899(0x96d)](),this[_0x27e899(0x502)]();},Scene_Boot[_0x4b2772(0x632)][_0x4b2772(0x2da)]=function(){const _0x5a24a8=_0x4b2772,_0x4a5871=$dataSystem[_0x5a24a8(0xaa0)][_0x5a24a8(0x1e9)];for(let _0x4dc121=0x0;_0x4dc121<_0x4a5871;_0x4dc121++){const _0x4b5899=$dataSystem[_0x5a24a8(0x41b)][_0x4dc121];if(_0x4b5899)continue;$dataSystem['attackMotions'][_0x4dc121]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot[_0x4b2772(0x632)][_0x4b2772(0x695)]=function(){const _0x12ba77=_0x4b2772,_0x53c3ae=VisuMZ[_0x12ba77(0x67d)][_0x12ba77(0x869)];_0x53c3ae['Damage'][_0x12ba77(0xca3)]===undefined&&(_0x53c3ae[_0x12ba77(0x681)][_0x12ba77(0xca3)]=_0x12ba77(0x530));_0x53c3ae[_0x12ba77(0xb6b)][_0x12ba77(0xc81)]===undefined&&(_0x53c3ae['Actor']['SmoothImage']=![]);if(_0x53c3ae[_0x12ba77(0x74a)][_0x12ba77(0xc81)]===undefined){if(_0x12ba77(0x9d3)!==_0x12ba77(0x9d3)){if(this[_0x12ba77(0xce1)]===_0x1d7da4)this[_0x12ba77(0xc27)]();return this[_0x12ba77(0xce1)];}else _0x53c3ae[_0x12ba77(0x74a)][_0x12ba77(0xc81)]=!![];}_0x53c3ae['Actor']['PrioritySortActive']===undefined&&(_0x53c3ae[_0x12ba77(0xb6b)]['PrioritySortActive']=![]);if(_0x53c3ae[_0x12ba77(0xb6b)][_0x12ba77(0xa2f)]===undefined){if(_0x12ba77(0x2bd)===_0x12ba77(0x26f)){if(!_0x411317[_0x12ba77(0x885)]())return;if(!_0x376ac8['VisuMZ_3_ActSeqCamera'])return;_0x1bdfb6['ConvertParams'](_0x8e0f1c,_0x4d3180);const _0x18f70f=_0xf1ed39[_0x12ba77(0x2ba)](),_0x37c20e=_0xedb3ab['ResetFocus'],_0x8a8d54=_0x426692['ResetOffset'],_0x135a16=_0x4bea44['WaitForCamera'];if(_0x37c20e){const _0x15d0b9=_0x284ce8[_0x12ba77(0x4ed)](_0x265142['width']/0x2),_0x5ccfd7=_0x466381[_0x12ba77(0x4ed)](_0x5be851[_0x12ba77(0x4c3)]/0x2);_0x4d78fe['setBattleCameraPoint'](_0x15d0b9,_0x5ccfd7,_0x162355[_0x12ba77(0x8ec)],_0x1ceacf[_0x12ba77(0x278)]);}_0x8a8d54&&_0x2789fa[_0x12ba77(0x7e9)](0x0,0x0,_0x435ad8[_0x12ba77(0x8ec)],_0x45f1b3[_0x12ba77(0x278)]);if(_0x135a16)_0x18f70f[_0x12ba77(0xc6d)](_0x12ba77(0x8ba));}else _0x53c3ae[_0x12ba77(0xb6b)][_0x12ba77(0xa2f)]=!![];}},VisuMZ[_0x4b2772(0xce4)]={},Scene_Boot[_0x4b2772(0x632)]['process_VisuMZ_BattleCore_DamageStyles']=function(){const _0x250a97=_0x4b2772;for(const _0x1020ef of VisuMZ['BattleCore'][_0x250a97(0x869)][_0x250a97(0x681)][_0x250a97(0xc88)]){if(!_0x1020ef)continue;const _0x55df6a=_0x1020ef[_0x250a97(0x734)][_0x250a97(0x5fd)]()[_0x250a97(0x75a)]();VisuMZ['DamageStyles'][_0x55df6a]=_0x1020ef;}},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x5d1)]={},Scene_Boot[_0x4b2772(0x632)][_0x4b2772(0x904)]=function(){const _0xe62a78=_0x4b2772,_0x5de3e2=VisuMZ[_0xe62a78(0x67d)]['RegExp'],_0x410a86=_0xe62a78(0x893),_0x2790a9=[[_0xe62a78(0xab1),_0xe62a78(0x6a2)],['Post',_0xe62a78(0x600)]],_0x110ba8=[[_0xe62a78(0x3e8),_0xe62a78(0x4d1)],[_0xe62a78(0x744),_0xe62a78(0xa1c)]],_0x518e3f=[['',''],['AsUser',_0xe62a78(0x7c1)],[_0xe62a78(0x8e1),_0xe62a78(0xced)]];for(const _0x5b8e85 of _0x110ba8){if('vYGuO'===_0xe62a78(0x1d8)){const _0xe87e04=this[_0xe62a78(0xa05)](_0x169431)[_0xe62a78(0x947)]();if(!_0xe87e04)return;const _0x4aa140=this[_0xe62a78(0x421)](),_0xa00cea=this['itemRect'](_0x49d6e8);let _0x59be8c=_0x5c6f75[_0xe62a78(0x4ed)](_0xa00cea['x']+_0xa00cea[_0xe62a78(0x67b)]/0x2)+this['padding'];[_0xe62a78(0xc64)][_0xe62a78(0x41a)](_0x4aa140)&&(_0x59be8c=_0xa00cea['width']/_0x467fb3[_0xe62a78(0x949)]()['length'],_0x59be8c*=_0x593b4b,_0x59be8c+=_0xa00cea[_0xe62a78(0x67b)]/_0x54c363['battleMembers']()['length']/0x2);let _0x5f483a=_0x50e30d[_0xe62a78(0x4ed)](this[_0xe62a78(0x576)](_0x22c02e,_0xe87e04,_0xa00cea));_0xe87e04['setHome'](_0x59be8c,_0x5f483a),this[_0xe62a78(0x230)](_0xe87e04,0x1),_0xe87e04['show'](),this[_0xe62a78(0x269)](),this['updateAttachmentSprites']();}else for(const _0x43c12f of _0x518e3f){if('KjWpn'!==_0xe62a78(0x2b1))for(const _0xa9139a of _0x2790a9){const _0x5999c3=_0x5b8e85[0x0][_0xe62a78(0x934)](_0xa9139a[0x0],_0x43c12f[0x0]),_0x19a89f=_0x5b8e85[0x1][_0xe62a78(0x934)](_0xa9139a[0x1],_0x43c12f[0x1])[_0xe62a78(0x75a)](),_0x2e2676=new RegExp(_0x410a86[_0xe62a78(0x934)](_0x19a89f),'i');_0x5de3e2[_0x5999c3]=_0x2e2676;}else{_0x11485a[_0xe62a78(0x67d)]['Scene_Battle_updateBattleProcess'][_0xe62a78(0xb2b)](this);if(this[_0xe62a78(0xb85)]&&!_0x23f2e7[_0xe62a78(0x4f1)])this[_0xe62a78(0x3bb)]();}}}const _0x454ce6=[[_0xe62a78(0x5dd),_0xe62a78(0x9ad)],[_0xe62a78(0x27c),_0xe62a78(0x855)]];for(const _0x174a69 of _0x454ce6){for(const _0x7bc99b of _0x2790a9){const _0x2107bc=_0x174a69[0x0][_0xe62a78(0x934)](_0x7bc99b[0x0]),_0x20a204=_0x174a69[0x1][_0xe62a78(0x934)](_0x7bc99b[0x1]),_0x3781ff=new RegExp(_0x410a86[_0xe62a78(0x934)](_0x20a204),'i');_0x5de3e2[_0x2107bc]=_0x3781ff;}}const _0x125aa2=[[_0xe62a78(0x887),_0xe62a78(0x9ba)],[_0xe62a78(0x586),'JS\x20%1END\x20BATTLE'],['BattleVictoryJS',_0xe62a78(0x1d5)],[_0xe62a78(0xcf3),_0xe62a78(0xc09)],[_0xe62a78(0xa99),_0xe62a78(0xb79)],['EscapeFailureJS','JS\x20ESCAPE\x20FAILURE'],[_0xe62a78(0x89b),_0xe62a78(0xbf4)],[_0xe62a78(0x788),_0xe62a78(0x1e8)],[_0xe62a78(0x7c2),'JS\x20%1REGENERATE']];for(const _0xafc2ad of _0x125aa2){if(_0xe62a78(0x280)===_0xe62a78(0x2a9)){const _0xf2c61=this[_0xe62a78(0x321)][_0xe62a78(0xae6)](this[_0xe62a78(0x616)]);this[_0xe62a78(0xae2)](_0xf2c61);}else for(const _0x482112 of _0x2790a9){if(_0xe62a78(0xa2c)===_0xe62a78(0xccb))this[_0xe62a78(0x207)]='xp';else{const _0x25ace2=_0xafc2ad[0x0][_0xe62a78(0x934)](_0x482112[0x0]),_0x36722d=_0xafc2ad[0x1][_0xe62a78(0x934)](_0x482112[0x1]),_0x2cc2dd=new RegExp(_0x410a86['format'](_0x36722d),'i');_0x5de3e2[_0x25ace2]=_0x2cc2dd;}}}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_Action_Notetags']=function(){const _0x3763f0=_0x4b2772,_0x5ed1dc=$dataSkills[_0x3763f0(0xbf3)]($dataItems);for(const _0x4d6bf6 of _0x5ed1dc){if(!_0x4d6bf6)continue;VisuMZ[_0x3763f0(0x67d)][_0x3763f0(0x9ef)](_0x4d6bf6);}},Scene_Boot[_0x4b2772(0x632)][_0x4b2772(0x96d)]=function(){const _0x15d000=_0x4b2772,_0x1b0570=$dataActors[_0x15d000(0xbf3)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x16d174 of _0x1b0570){if('ivXvK'===_0x15d000(0xb73)){return _0x22b3b2[_0x15d000(0x632)][_0x15d000(0x8e5)][_0x15d000(0xb2b)](this);;}else{if(!_0x16d174)continue;VisuMZ[_0x15d000(0x67d)]['Parse_Notetags_TraitObjects'](_0x16d174);}}},Scene_Boot[_0x4b2772(0x632)][_0x4b2772(0x5b4)]=function(){const _0x3a163b=_0x4b2772,_0x2ed064=VisuMZ[_0x3a163b(0x67d)][_0x3a163b(0x869)][_0x3a163b(0x7f4)][_0x3a163b(0x2dd)],_0x2683f3=[];for(const _0x19813c of _0x2ed064){const _0x9965db=$dataTroops[_0x19813c];if(_0x9965db)_0x2683f3[_0x3a163b(0x21f)](JsonEx[_0x3a163b(0x23c)](_0x9965db));}for(const _0x1f22e8 of $dataTroops){if(!_0x1f22e8)continue;for(const _0x41702e of _0x2683f3){if('yWLZY'==='yWLZY'){if(_0x41702e['id']===_0x1f22e8['id'])continue;_0x1f22e8[_0x3a163b(0x53f)]=_0x1f22e8[_0x3a163b(0x53f)][_0x3a163b(0xbf3)](_0x41702e[_0x3a163b(0x53f)]);}else this['_svBattlerSprite'][_0x3a163b(0x37d)][_0x3a163b(0x8eb)]['x']=-0x1/(this[_0x3a163b(0x8eb)]['x']||0.001),this[_0x3a163b(0x3eb)][_0x3a163b(0x37d)][_0x3a163b(0x8eb)]['y']=0x1/(this[_0x3a163b(0x8eb)]['y']||0.001);}}},Scene_Boot['prototype'][_0x4b2772(0x1e5)]=function(){const _0x3f04d2=_0x4b2772,_0x5e5e9c=VisuMZ['BattleCore'][_0x3f04d2(0x869)][_0x3f04d2(0x7f4)];if(_0x5e5e9c['BattleStartEvent']>0x0&&$dataCommonEvents[_0x5e5e9c[_0x3f04d2(0x3ec)]]){const _0x517a51=$dataCommonEvents[_0x5e5e9c['BattleStartEvent']],_0x21ccf7=_0x517a51[_0x3f04d2(0xc64)]['length']-0x2,_0x4036d2=_0x517a51[_0x3f04d2(0xc64)][_0x21ccf7];if(_0x4036d2&&_0x4036d2['code']!==0xe6){const _0x133799={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0xe521c6=_0x517a51[_0x3f04d2(0xc64)][_0x3f04d2(0x7c8)]();_0x517a51[_0x3f04d2(0xc64)][_0x3f04d2(0x4cf)](_0x133799),_0x517a51[_0x3f04d2(0xc64)][_0x3f04d2(0x4cf)](_0xe521c6);}}},Scene_Boot[_0x4b2772(0x632)][_0x4b2772(0x5b0)]=function(){const _0x348531=_0x4b2772;VisuMZ[_0x348531(0x67d)][_0x348531(0x687)](),VisuMZ['BattleCore']['BindCommonEventKeysForGroup']($dataSkills),VisuMZ['BattleCore']['BindCommonEventKeysForGroup']($dataItems);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x687)]=function(){const _0x4ac108=_0x4b2772;VisuMZ['BattleCore'][_0x4ac108(0x969)]={};for(const _0x5a65fd of $dataCommonEvents){if(_0x4ac108(0x680)===_0x4ac108(0x680)){if(!_0x5a65fd)continue;if(_0x5a65fd[_0x4ac108(0x8fe)]['match'](/\[(.*)\]/i)){let _0x4a7fc3=String(RegExp['$1'])['replace'](/,/g,'')[_0x4ac108(0x5fd)]()[_0x4ac108(0x75a)]();VisuMZ[_0x4ac108(0x67d)][_0x4ac108(0x969)][_0x4a7fc3]=_0x5a65fd['id'];}}else return _0x49899e[_0x4ac108(0x67d)]['Settings'][_0x4ac108(0x8b9)][_0x4ac108(0x6e7)];}},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xc8d)]=function(_0x237e63){const _0x48eda6=_0x4b2772;for(const _0xe623b1 of _0x237e63){if(_0x48eda6(0x775)===_0x48eda6(0x775)){if(!_0xe623b1)continue;VisuMZ[_0x48eda6(0x67d)]['BindCommonEventKeysForObj'](_0xe623b1);}else{if(!_0x3f2618[_0x48eda6(0x21e)])return null;if(!_0x196ff7['_scene'][_0x48eda6(0xab0)])return null;if(!_0x13b7c3[_0x48eda6(0x21e)]['_statusWindow'][_0x48eda6(0x56a)])return null;return _0x3a604f[_0x48eda6(0x21e)][_0x48eda6(0xab0)][_0x48eda6(0x56a)];}}},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x64c)]=function(_0xc27d4b){const _0x373f0a=_0x4b2772;if(!_0xc27d4b)return;if(!_0xc27d4b['effects'])return;VisuMZ[_0x373f0a(0x67d)][_0x373f0a(0x969)]=VisuMZ[_0x373f0a(0x67d)][_0x373f0a(0x969)]||{};const _0x416419=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x8dd3c8=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x1a0ceb=[];const _0x29ca79=_0xc27d4b[_0x373f0a(0x28a)][_0x373f0a(0x93d)](_0x416419);if(_0x29ca79){for(const _0x188aa3 of _0x29ca79){if(_0x373f0a(0x77c)!==_0x373f0a(0x77c))_0x586390[_0x373f0a(0x67d)][_0x373f0a(0xc08)]['call'](this),this[_0x373f0a(0x7fd)]();else{_0x188aa3[_0x373f0a(0x93d)](_0x416419);const _0x3aab96=String(RegExp['$1'])[_0x373f0a(0xc24)](',')['map'](_0x557727=>String(_0x557727)['toUpperCase']()[_0x373f0a(0x75a)]());_0x1a0ceb=_0x1a0ceb['concat'](_0x3aab96);}}!_0xc27d4b[_0x373f0a(0x28a)][_0x373f0a(0x93d)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0xc27d4b[_0x373f0a(0x28a)]+=_0x373f0a(0x309));;}if(_0xc27d4b['note'][_0x373f0a(0x93d)](_0x8dd3c8)){const _0x29acd0=String(RegExp['$1'])[_0x373f0a(0xc24)](/[\r\n]+/)[_0x373f0a(0x8b4)](_0x2c690b=>String(_0x2c690b)[_0x373f0a(0x5fd)]()['trim']());_0x1a0ceb=_0x1a0ceb[_0x373f0a(0xbf3)](_0x29acd0);if(!_0xc27d4b[_0x373f0a(0x28a)][_0x373f0a(0x93d)](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x373f0a(0x5c6)!==_0x373f0a(0x5c6)){if(this['_dimmerSprite']){const _0x466abd=this[_0x373f0a(0x95b)][_0x373f0a(0x6de)],_0x1f653d=this[_0x373f0a(0x67b)]-0x8,_0x3c18a9=this[_0x373f0a(0x4c3)],_0x52c61f=this[_0x373f0a(0x5e8)],_0xfc393=_0x8c152a[_0x373f0a(0x4c7)](),_0x212a24=_0x1966f3[_0x373f0a(0x837)]();this[_0x373f0a(0x95b)]['x']=0x4,_0x466abd['resize'](_0x1f653d,_0x3c18a9),_0x466abd[_0x373f0a(0x2cf)](0x0,0x0,_0x1f653d,_0x52c61f,_0x212a24,_0xfc393,!![]),_0x466abd[_0x373f0a(0x239)](0x0,_0x52c61f,_0x1f653d,_0x3c18a9-_0x52c61f*0x2,_0xfc393),_0x466abd[_0x373f0a(0x2cf)](0x0,_0x3c18a9-_0x52c61f,_0x1f653d,_0x52c61f,_0xfc393,_0x212a24,!![]),this[_0x373f0a(0x95b)][_0x373f0a(0x90f)](0x0,0x0,_0x1f653d,_0x3c18a9);}}else _0xc27d4b[_0x373f0a(0x28a)]+='<CUSTOM\x20ACTION\x20SEQUENCE>';};}for(const _0x5efe07 of _0x1a0ceb){if(VisuMZ[_0x373f0a(0x67d)][_0x373f0a(0x969)][_0x5efe07]){const _0x1c0343=VisuMZ['BattleCore'][_0x373f0a(0x969)][_0x5efe07],_0x46e8a2={'code':0x2c,'dataId':_0x1c0343,'value1':0x1,'value2':0x0};_0xc27d4b[_0x373f0a(0x490)]['push'](_0x46e8a2);}}},Scene_Boot[_0x4b2772(0x632)][_0x4b2772(0x502)]=function(){const _0x18a658=_0x4b2772,_0x3f7f02=$dataSkills[_0x18a658(0xbf3)]($dataItems);for(const _0x559a00 of _0x3f7f02){if(_0x18a658(0x7cf)===_0x18a658(0xa8a))_0xba81b[_0x18a658(0x67d)][_0x18a658(0x682)]['call'](this),this[_0x18a658(0x306)]();else{if(!_0x559a00)continue;VisuMZ['BattleCore'][_0x18a658(0x90e)](_0x559a00);}}},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x47b)]=VisuMZ['ParseActorNotetags'],VisuMZ[_0x4b2772(0x47b)]=function(_0x3da689){const _0x40c211=_0x4b2772;if(VisuMZ[_0x40c211(0x67d)]['ParseActorNotetags']){if(_0x40c211(0x7a8)===_0x40c211(0x881)){if(!_0xeb2d8e['_scene'])return;if(!_0xfa5a02[_0x40c211(0x21e)][_0x40c211(0x34a)])return;if(!_0x5889a8[_0x40c211(0x2d5)])return;_0x4ad7fb[_0x40c211(0x72d)](_0x3cbbe9,_0x395570);const _0x398139=_0x31e781[_0x40c211(0x2ba)](),_0x586541=_0x290480['round'](_0x4caffd['pointX']),_0x20c148=_0x533f13[_0x40c211(0x4ed)](_0x450719[_0x40c211(0x621)]);_0x5b891b[_0x40c211(0x206)](_0x586541,_0x20c148,_0x2b6dcc[_0x40c211(0x882)],_0x13e14f[_0x40c211(0x655)],_0x5759fb[_0x40c211(0xc40)]),_0x23865a['WaitComplete']&&_0x398139&&(_0x13422e[_0x40c211(0x21e)]['_spriteset'][_0x40c211(0xa0f)](),_0x398139[_0x40c211(0xc6d)](_0x40c211(0x98a)));}else VisuMZ[_0x40c211(0x67d)][_0x40c211(0x47b)][_0x40c211(0xb2b)](this,_0x3da689);}VisuMZ['BattleCore'][_0x40c211(0x953)](_0x3da689);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xcbb)]=VisuMZ[_0x4b2772(0xcbb)],VisuMZ['ParseClassNotetags']=function(_0x23d434){const _0x2b0bfc=_0x4b2772;VisuMZ[_0x2b0bfc(0x67d)]['ParseClassNotetags']&&VisuMZ[_0x2b0bfc(0x67d)][_0x2b0bfc(0xcbb)][_0x2b0bfc(0xb2b)](this,_0x23d434),VisuMZ[_0x2b0bfc(0x67d)][_0x2b0bfc(0x953)](_0x23d434);},VisuMZ['BattleCore'][_0x4b2772(0x3c1)]=VisuMZ[_0x4b2772(0x3c1)],VisuMZ[_0x4b2772(0x3c1)]=function(_0x3f3abe){const _0x2b02d9=_0x4b2772;VisuMZ[_0x2b02d9(0x67d)][_0x2b02d9(0x3c1)]&&VisuMZ[_0x2b02d9(0x67d)]['ParseSkillNotetags'][_0x2b02d9(0xb2b)](this,_0x3f3abe),VisuMZ[_0x2b02d9(0x67d)][_0x2b02d9(0x9ef)](_0x3f3abe),VisuMZ[_0x2b02d9(0x67d)][_0x2b02d9(0x90e)](_0x3f3abe);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x6ad)]=VisuMZ[_0x4b2772(0x6ad)],VisuMZ[_0x4b2772(0x6ad)]=function(_0x2625a1){const _0x3bdb52=_0x4b2772;VisuMZ[_0x3bdb52(0x67d)]['ParseItemNotetags']&&VisuMZ[_0x3bdb52(0x67d)][_0x3bdb52(0x6ad)][_0x3bdb52(0xb2b)](this,_0x2625a1),VisuMZ[_0x3bdb52(0x67d)][_0x3bdb52(0x9ef)](_0x2625a1),VisuMZ[_0x3bdb52(0x67d)][_0x3bdb52(0x90e)](_0x2625a1);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x9ea)]=VisuMZ['ParseWeaponNotetags'],VisuMZ[_0x4b2772(0x9ea)]=function(_0x4cdb50){const _0x48a9c9=_0x4b2772;if(VisuMZ['BattleCore'][_0x48a9c9(0x9ea)]){if(_0x48a9c9(0x883)===_0x48a9c9(0x883))VisuMZ[_0x48a9c9(0x67d)][_0x48a9c9(0x9ea)]['call'](this,_0x4cdb50);else{if(!_0x1fff8d['isSceneBattle']())return;const _0x26876a=_0xe2231b[_0x48a9c9(0x6c0)];_0x26876a[_0x48a9c9(0x8e0)]();}}VisuMZ[_0x48a9c9(0x67d)]['Parse_Notetags_TraitObjects'](_0x4cdb50);},VisuMZ[_0x4b2772(0x67d)]['ParseArmorNotetags']=VisuMZ['ParseArmorNotetags'],VisuMZ[_0x4b2772(0x2d1)]=function(_0x440987){const _0x45e68b=_0x4b2772;VisuMZ['BattleCore'][_0x45e68b(0x2d1)]&&VisuMZ[_0x45e68b(0x67d)][_0x45e68b(0x2d1)][_0x45e68b(0xb2b)](this,_0x440987),VisuMZ[_0x45e68b(0x67d)][_0x45e68b(0x953)](_0x440987);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x2b5)]=VisuMZ[_0x4b2772(0x2b5)],VisuMZ['ParseEnemyNotetags']=function(_0x369856){const _0x21516d=_0x4b2772;VisuMZ[_0x21516d(0x67d)]['ParseEnemyNotetags']&&VisuMZ[_0x21516d(0x67d)][_0x21516d(0x2b5)][_0x21516d(0xb2b)](this,_0x369856),VisuMZ[_0x21516d(0x67d)][_0x21516d(0x953)](_0x369856);},VisuMZ['BattleCore'][_0x4b2772(0x364)]=VisuMZ[_0x4b2772(0x364)],VisuMZ[_0x4b2772(0x364)]=function(_0x4104d3){const _0x420831=_0x4b2772;VisuMZ['BattleCore'][_0x420831(0x364)]&&(_0x420831(0x1fb)===_0x420831(0x1fb)?VisuMZ['BattleCore']['ParseStateNotetags']['call'](this,_0x4104d3):this[_0x420831(0x3eb)][_0x420831(0xaee)]()),VisuMZ[_0x420831(0x67d)][_0x420831(0x953)](_0x4104d3);},VisuMZ['BattleCore'][_0x4b2772(0x9ef)]=function(_0x5710a8){const _0x522cbd=_0x4b2772,_0xa0a9ee=[_0x522cbd(0x601),_0x522cbd(0x4b4),_0x522cbd(0x6f8),_0x522cbd(0x430),_0x522cbd(0xb93),_0x522cbd(0xa0b),_0x522cbd(0xce0),_0x522cbd(0xa1a)];for(const _0x1d03d9 of _0xa0a9ee){if(_0x522cbd(0x55c)!=='KPzvN'){const _0x44b502=_0x5d8ec4[_0x522cbd(0x498)]('['+_0x586cf7['$1'][_0x522cbd(0x93d)](/\d+/g)+']');for(const _0x3448fc of _0x44b502){if(!_0x550a5c[_0x522cbd(0x791)](_0x3448fc))return![];}return!![];}else VisuMZ[_0x522cbd(0x67d)][_0x522cbd(0xa5d)](_0x5710a8,_0x1d03d9);}const _0x1c1b75=_0x5710a8[_0x522cbd(0x28a)];_0x1c1b75[_0x522cbd(0x93d)](/<ALWAYS CRITICAL/i)&&(_0x5710a8[_0x522cbd(0x33f)]['critical']=!![]),_0x1c1b75['match'](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x5710a8[_0x522cbd(0x3b2)]=Math[_0x522cbd(0x20e)](0x1,Number(RegExp['$1']))),_0x1c1b75[_0x522cbd(0x93d)](/<TARGET:[ ](.*)>/i)&&(_0x5710a8[_0x522cbd(0x55e)]=String(RegExp['$1'])[_0x522cbd(0x5fd)]()[_0x522cbd(0x75a)]());},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x953)]=function(_0x5e0a2c){const _0x2b8a82=_0x4b2772,_0x44820f=[_0x2b8a82(0x254),_0x2b8a82(0x70d),_0x2b8a82(0xb74),_0x2b8a82(0x439),_0x2b8a82(0x864),'PostApplyAsTargetJS','PreDamageAsTargetJS',_0x2b8a82(0xac5),_0x2b8a82(0xb93),_0x2b8a82(0xa0b),_0x2b8a82(0xce0),_0x2b8a82(0xa1a),_0x2b8a82(0xbbc),_0x2b8a82(0xaa2),'PreEndBattleJS',_0x2b8a82(0x6b4),_0x2b8a82(0x84f),_0x2b8a82(0xcf3),_0x2b8a82(0xa99),'EscapeFailureJS','PreStartTurnJS',_0x2b8a82(0xb29),'PreEndTurnJS',_0x2b8a82(0x6ba),_0x2b8a82(0x38c),_0x2b8a82(0xc6b)];for(const _0x24f50b of _0x44820f){if('Aayyc'!==_0x2b8a82(0x41d)){const _0x41d805=_0x3f049e['x']+_0x3191e1[_0x2b8a82(0x805)]((_0x556315[_0x2b8a82(0x67b)]-_0x3e45d3)/0x2);this['drawTextEx'](_0x52f256,_0x41d805,_0x58e8f2['y'],_0x1d1551);}else VisuMZ[_0x2b8a82(0x67d)][_0x2b8a82(0xa5d)](_0x5e0a2c,_0x24f50b);}},VisuMZ['BattleCore'][_0x4b2772(0x90e)]=function(_0x347726){const _0x52bcc1=_0x4b2772,_0x17c340=_0x347726[_0x52bcc1(0x28a)];if(_0x17c340[_0x52bcc1(0x93d)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x43f36e=String(RegExp['$1']),_0x329081=VisuMZ[_0x52bcc1(0x67d)][_0x52bcc1(0x623)](_0x347726,_0x52bcc1(0xa4f));VisuMZ[_0x52bcc1(0x67d)][_0x52bcc1(0x4c6)](_0x43f36e,_0x329081);}if(_0x17c340[_0x52bcc1(0x93d)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x234f19=String(RegExp['$1']),_0x49cb7d=VisuMZ[_0x52bcc1(0x67d)]['createKeyJS'](_0x347726,_0x52bcc1(0x9b9));VisuMZ[_0x52bcc1(0x67d)][_0x52bcc1(0x2bf)](_0x234f19,_0x49cb7d);}},VisuMZ['BattleCore']['JS']={},VisuMZ[_0x4b2772(0x67d)]['createJS']=function(_0x3d8d05,_0x56db77){const _0x30e3d0=_0x4b2772,_0x3fed39=_0x3d8d05[_0x30e3d0(0x28a)];if(_0x3fed39[_0x30e3d0(0x93d)](VisuMZ[_0x30e3d0(0x67d)][_0x30e3d0(0x5d1)][_0x56db77])){if(_0x30e3d0(0xa0a)!=='cgMdq'){const _0x1df52b=RegExp['$1'],_0x5ec855=_0x30e3d0(0x72a)[_0x30e3d0(0x934)](_0x1df52b),_0x4e72e4=VisuMZ[_0x30e3d0(0x67d)][_0x30e3d0(0x623)](_0x3d8d05,_0x56db77);VisuMZ[_0x30e3d0(0x67d)]['JS'][_0x4e72e4]=new Function(_0x5ec855);}else this[_0x30e3d0(0x3bb)]();}},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x623)]=function(_0x5c6ecf,_0x26ec40){const _0x34a7fe=_0x4b2772;if(VisuMZ[_0x34a7fe(0x623)])return VisuMZ[_0x34a7fe(0x623)](_0x5c6ecf,_0x26ec40);let _0x4e6776='';if($dataActors[_0x34a7fe(0x41a)](_0x5c6ecf))_0x4e6776=_0x34a7fe(0x52b)[_0x34a7fe(0x934)](_0x5c6ecf['id'],_0x26ec40);if($dataClasses[_0x34a7fe(0x41a)](_0x5c6ecf))_0x4e6776=_0x34a7fe(0x584)[_0x34a7fe(0x934)](_0x5c6ecf['id'],_0x26ec40);if($dataSkills[_0x34a7fe(0x41a)](_0x5c6ecf))_0x4e6776=_0x34a7fe(0x794)[_0x34a7fe(0x934)](_0x5c6ecf['id'],_0x26ec40);if($dataItems['includes'](_0x5c6ecf))_0x4e6776=_0x34a7fe(0x76f)[_0x34a7fe(0x934)](_0x5c6ecf['id'],_0x26ec40);if($dataWeapons[_0x34a7fe(0x41a)](_0x5c6ecf))_0x4e6776=_0x34a7fe(0xb72)[_0x34a7fe(0x934)](_0x5c6ecf['id'],_0x26ec40);if($dataArmors[_0x34a7fe(0x41a)](_0x5c6ecf))_0x4e6776=_0x34a7fe(0xc25)[_0x34a7fe(0x934)](_0x5c6ecf['id'],_0x26ec40);if($dataEnemies[_0x34a7fe(0x41a)](_0x5c6ecf))_0x4e6776='Enemy-%1-%2'['format'](_0x5c6ecf['id'],_0x26ec40);if($dataStates['includes'](_0x5c6ecf))_0x4e6776=_0x34a7fe(0x6df)[_0x34a7fe(0x934)](_0x5c6ecf['id'],_0x26ec40);return _0x4e6776;},VisuMZ['BattleCore'][_0x4b2772(0x4c6)]=function(_0x1e1eb3,_0x5d9ccd){const _0x3ef7fc=_0x4b2772,_0x106803='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20'[_0x3ef7fc(0x934)](_0x1e1eb3);VisuMZ[_0x3ef7fc(0x67d)]['JS'][_0x5d9ccd]=new Function(_0x106803);},VisuMZ['BattleCore'][_0x4b2772(0x2bf)]=function(_0x192d8c,_0x59b1ac){const _0x486957=_0x4b2772,_0x223e13=_0x486957(0x9e6)['format'](_0x192d8c);VisuMZ['BattleCore']['JS'][_0x59b1ac]=new Function(_0x223e13);},TextManager[_0x4b2772(0x481)]=VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x869)][_0x4b2772(0x8b9)][_0x4b2772(0x780)],TextManager[_0x4b2772(0x597)]=VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x869)][_0x4b2772(0x985)][_0x4b2772(0xca7)],TextManager[_0x4b2772(0x750)]=VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x869)][_0x4b2772(0x985)]['StyleName'],TextManager[_0x4b2772(0x42f)]=VisuMZ[_0x4b2772(0x67d)]['Settings'][_0x4b2772(0x28c)][_0x4b2772(0x734)],ColorManager[_0x4b2772(0x5f9)]=function(_0x335da2){const _0x798f8d=_0x4b2772;return _0x335da2=String(_0x335da2),_0x335da2[_0x798f8d(0x93d)](/#(.*)/i)?_0x798f8d(0x59b)[_0x798f8d(0x934)](String(RegExp['$1'])):'SLCqu'!==_0x798f8d(0x81f)?_0x42a589[_0x798f8d(0x67d)]['Settings'][_0x798f8d(0x74a)]['Shadow']:this[_0x798f8d(0x8ad)](Number(_0x335da2));},DataManager['getDamageStyle']=function(_0x1a6f29){const _0x53afa=_0x4b2772;if(_0x1a6f29[_0x53afa(0x28a)][_0x53afa(0x93d)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x119c60=String(RegExp['$1'])[_0x53afa(0x5fd)]()[_0x53afa(0x75a)]();if(_0x119c60===_0x53afa(0xcb7))return _0x53afa(0xcb7);if(VisuMZ[_0x53afa(0xce4)][_0x119c60])return _0x119c60;}const _0x26116e=VisuMZ['BattleCore']['Settings'][_0x53afa(0x681)][_0x53afa(0x314)]['toUpperCase']()[_0x53afa(0x75a)]();if(VisuMZ[_0x53afa(0xce4)][_0x26116e])return _0x26116e;return _0x53afa(0xcb7);},DataManager['getStypeIdWithName']=function(_0x505837){const _0x1228bb=_0x4b2772;_0x505837=_0x505837['toUpperCase']()[_0x1228bb(0x75a)](),this[_0x1228bb(0xa86)]=this[_0x1228bb(0xa86)]||{};if(this[_0x1228bb(0xa86)][_0x505837])return this[_0x1228bb(0xa86)][_0x505837];for(let _0x3c660b=0x1;_0x3c660b<0x64;_0x3c660b++){if(!$dataSystem['skillTypes'][_0x3c660b])continue;let _0x35a121=$dataSystem[_0x1228bb(0x99d)][_0x3c660b][_0x1228bb(0x5fd)]()[_0x1228bb(0x75a)]();_0x35a121=_0x35a121[_0x1228bb(0x970)](/\x1I\[(\d+)\]/gi,''),_0x35a121=_0x35a121[_0x1228bb(0x970)](/\\I\[(\d+)\]/gi,''),this[_0x1228bb(0xa86)][_0x35a121]=_0x3c660b;}return this[_0x1228bb(0xa86)][_0x505837]||0x0;},DataManager['getSkillIdWithName']=function(_0x5ab077){const _0x2c782b=_0x4b2772;_0x5ab077=_0x5ab077[_0x2c782b(0x5fd)]()[_0x2c782b(0x75a)](),this[_0x2c782b(0xc72)]=this['_skillIDs']||{};if(this['_skillIDs'][_0x5ab077])return this[_0x2c782b(0xc72)][_0x5ab077];for(const _0x2c9923 of $dataSkills){if(!_0x2c9923)continue;this[_0x2c782b(0xc72)][_0x2c9923[_0x2c782b(0x8fe)]['toUpperCase']()[_0x2c782b(0x75a)]()]=_0x2c9923['id'];}return this[_0x2c782b(0xc72)][_0x5ab077]||0x0;},DataManager[_0x4b2772(0x760)]=function(_0x5bd1a6){const _0xd533b4=_0x4b2772;_0x5bd1a6=_0x5bd1a6[_0xd533b4(0x5fd)]()['trim'](),this[_0xd533b4(0x535)]=this['_enemyIDs']||{};if(this[_0xd533b4(0x535)][_0x5bd1a6])return this[_0xd533b4(0x535)][_0x5bd1a6];for(const _0x431975 of $dataEnemies){if(!_0x431975)continue;this[_0xd533b4(0x535)][_0x431975[_0xd533b4(0x8fe)][_0xd533b4(0x5fd)]()[_0xd533b4(0x75a)]()]=_0x431975['id'];}return this[_0xd533b4(0x535)][_0x5bd1a6]||0x0;},DataManager[_0x4b2772(0x933)]=function(_0x4f0c4e){const _0x814dc7=_0x4b2772;_0x4f0c4e=_0x4f0c4e[_0x814dc7(0x5fd)]()[_0x814dc7(0x75a)](),this[_0x814dc7(0x81b)]=this[_0x814dc7(0x81b)]||{};if(this[_0x814dc7(0x81b)][_0x4f0c4e])return this[_0x814dc7(0x81b)][_0x4f0c4e];for(let _0x231872=0x1;_0x231872<0x64;_0x231872++){if(_0x814dc7(0x2d9)!==_0x814dc7(0x2d9))_0x2c9267[_0x814dc7(0x74a)][_0x814dc7(0xc81)]=!![];else{if(!$dataSystem[_0x814dc7(0xaa0)][_0x231872])continue;let _0x3a5afb=$dataSystem[_0x814dc7(0xaa0)][_0x231872][_0x814dc7(0x5fd)]()[_0x814dc7(0x75a)]();_0x3a5afb=_0x3a5afb[_0x814dc7(0x970)](/\x1I\[(\d+)\]/gi,''),_0x3a5afb=_0x3a5afb[_0x814dc7(0x970)](/\\I\[(\d+)\]/gi,''),this[_0x814dc7(0x81b)][_0x3a5afb]=_0x231872;}}return this['_wtypeIDs'][_0x814dc7(0xa01)]=0x0,this[_0x814dc7(0x81b)][_0x4f0c4e]||0x0;},DataManager[_0x4b2772(0xc59)]=function(_0x35e6ff){const _0x486ff2=_0x4b2772,_0x590361='\x5cI[%1]%2';let _0x1c379c=_0x35e6ff[_0x486ff2(0x4d3)],_0x3eb23e=_0x35e6ff[_0x486ff2(0x8fe)];const _0x3d514c=_0x35e6ff[_0x486ff2(0x28a)];return _0x3d514c[_0x486ff2(0x93d)](/<DISPLAY ICON: (\d+)>/i)&&(_0x1c379c=Number(RegExp['$1'])),_0x3d514c[_0x486ff2(0x93d)](/<DISPLAY TEXT: (.*)>/i)&&(_0x486ff2(0x1f2)!=='BzGDa'?_0x3eb23e=String(RegExp['$1']):this[_0x486ff2(0x63b)]=''),_0x590361[_0x486ff2(0x934)](_0x1c379c,_0x3eb23e);},DataManager[_0x4b2772(0xc55)]=function(_0x445244){const _0x15507c=_0x4b2772;if(_0x445244[_0x15507c(0x28a)][_0x15507c(0x93d)](/<COMMAND TEXT: (.*)>/i)){if(_0x15507c(0x389)===_0x15507c(0x389))return String(RegExp['$1']);else _0x19b398[_0x15507c(0x632)][_0x15507c(0xbf2)][_0x15507c(0xb2b)](this),this['_enemy']=null,this[_0x15507c(0x671)]=![],this[_0x15507c(0x62a)]='',this[_0x15507c(0x50b)]=0x0,this[_0x15507c(0x80d)]=null,this[_0x15507c(0x66c)]=0x0,this[_0x15507c(0x751)]=0x0,this[_0x15507c(0xaf2)](),this[_0x15507c(0xad6)]();}else return _0x445244[_0x15507c(0x8fe)];},DataManager['battleCommandIcon']=function(_0x54fa30){const _0x279fe5=_0x4b2772;return _0x54fa30[_0x279fe5(0x28a)]['match'](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x54fa30[_0x279fe5(0x4d3)];},DataManager[_0x4b2772(0xb9f)]=function(_0x57ef4b){const _0x1a2cb3=_0x4b2772,_0x2950bd=$dataEnemies[_0x57ef4b];if(_0x2950bd){if(_0x2950bd[_0x1a2cb3(0x28a)][_0x1a2cb3(0x93d)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){if(_0x1a2cb3(0x76e)!=='pRjNg'){const _0x3bb79f={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x132961=_0x184ff7[_0x1a2cb3(0xc64)]['pop']();_0xdfb759[_0x1a2cb3(0xc64)][_0x1a2cb3(0x4cf)](_0x3bb79f),_0x599c91['list'][_0x1a2cb3(0x4cf)](_0x132961);}else{const _0x4b871a=String(RegExp['$1'])[_0x1a2cb3(0xc24)](/[\r\n]+/)[_0x1a2cb3(0x9cc)](''),_0x49acd5=this[_0x1a2cb3(0x339)](_0x4b871a);_0x57ef4b=this[_0x1a2cb3(0x760)](_0x49acd5)||_0x57ef4b,_0x57ef4b=DataManager[_0x1a2cb3(0xb9f)](_0x57ef4b);}}}return _0x57ef4b;},DataManager[_0x4b2772(0x339)]=function(_0x299d3f){const _0x52af56=_0x4b2772;let _0x1cabec=0x0;const _0x5788e0={};for(const _0x1b5989 of _0x299d3f){if(_0x52af56(0x5e2)===_0x52af56(0x1da)){const _0x983873=_0x5010de['BattleCore'][_0x52af56(0x869)][_0x52af56(0x335)],_0x5b3830=_0x3ba52d[_0x52af56(0x632)][_0x52af56(0x2a3)](),_0x105c95=_0x34b2e9['boxWidth']-(_0x983873[_0x52af56(0x219)]||0xc0),_0x57205f=this[_0x52af56(0x874)]()+_0x5b3830,_0xc4529a=this[_0x52af56(0x8e5)]()?0x0:_0x587277[_0x52af56(0xcd9)]-_0x105c95,_0x2d4e5a=_0x12914e['boxHeight']-_0x57205f+_0x5b3830;return new _0x7da444(_0xc4529a,_0x2d4e5a,_0x105c95,_0x57205f);}else{if(_0x1b5989['match'](/(.*):[ ](\d+)/i)){const _0x58aecc=String(RegExp['$1'])[_0x52af56(0x75a)](),_0x4500e5=Number(RegExp['$2']);_0x5788e0[_0x58aecc]=_0x4500e5,_0x1cabec+=_0x4500e5;}else{if(_0x1b5989[_0x52af56(0x93d)](/(.*):[ ](\d+\.?\d+)/i)){const _0xc83866=String(RegExp['$1'])[_0x52af56(0x75a)](),_0x5eb655=Number(RegExp['$2']);_0x5788e0[_0xc83866]=_0x5eb655,_0x1cabec+=_0x5eb655;}else _0x1b5989!==''&&(_0x5788e0[_0x1b5989]=0x1,_0x1cabec++);}}}if(_0x1cabec<=0x0)return'';let _0x14a4de=Math[_0x52af56(0xa20)]()*_0x1cabec;for(const _0x1fbf72 in _0x5788e0){if(_0x52af56(0x1ed)!==_0x52af56(0xc30)){_0x14a4de-=_0x5788e0[_0x1fbf72];if(_0x14a4de<=0x0)return _0x1fbf72;}else _0x33818e['BattleCore'][_0x52af56(0x986)]['call'](this),this[_0x52af56(0x577)]&&(this[_0x52af56(0x577)]=_0x430c58,_0x1b2c78[_0x52af56(0x21e)][_0x52af56(0x2ed)]());}return'';},DataManager[_0x4b2772(0x53b)]=function(_0x42587f){const _0xf34bfc=_0x4b2772;if(!_0x42587f)return![];if(!VisuMZ[_0xf34bfc(0x67d)]['Settings'][_0xf34bfc(0xcb4)][_0xf34bfc(0x500)])return![];if(_0x42587f[_0xf34bfc(0x28a)][_0xf34bfc(0x93d)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x42587f['note'][_0xf34bfc(0x93d)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x51a812 of _0x42587f[_0xf34bfc(0x490)]){if(!_0x51a812)continue;if(_0x51a812[_0xf34bfc(0x51d)]===Game_Action[_0xf34bfc(0x423)])return!![];}return![];},DataManager[_0x4b2772(0x3a3)]=function(_0x12084a){const _0x23f595=_0x4b2772,_0x5c2f5a=$dataTroops[_0x12084a];if(!_0x5c2f5a)return'';let _0x46e4ab='';_0x46e4ab+=_0x5c2f5a[_0x23f595(0x8fe)];for(const _0x332b24 of _0x5c2f5a['pages']){if(_0x23f595(0x9c0)===_0x23f595(0x9c0))for(const _0x3b3a8d of _0x332b24['list']){[0x6c,0x198][_0x23f595(0x41a)](_0x3b3a8d[_0x23f595(0x51d)])&&(_0x23f595(0x673)===_0x23f595(0x673)?(_0x46e4ab+='\x0a',_0x46e4ab+=_0x3b3a8d['parameters'][0x0]):(this['push'](_0x23f595(0x60d)),this[_0x23f595(0x7a0)](_0x32a542),this['displayChangedBuffs'](_0x160770),this[_0x23f595(0x21f)](_0x23f595(0x661))));}else _0x3aabe3[_0x23f595(0x8d4)]=_0x1d4160(_0x55600a['$1']),_0x1b2c3a[_0x23f595(0xbf1)]=_0xdae767(_0x35786c['$2']);}return _0x46e4ab;},ConfigManager['autoBattleAtStart']=ConfigManager['autoBattleAtStart']??![],ConfigManager['autoBattleUseSkills']=ConfigManager[_0x4b2772(0xc4e)]??![],ConfigManager[_0x4b2772(0x42f)]=ConfigManager[_0x4b2772(0x42f)]??!![],VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x694)]=ConfigManager[_0x4b2772(0xce6)],ConfigManager[_0x4b2772(0xce6)]=function(){const _0x3bc64b=_0x4b2772,_0x63edfc=VisuMZ['BattleCore'][_0x3bc64b(0x694)][_0x3bc64b(0xb2b)](this);return _0x63edfc[_0x3bc64b(0xa65)]=this[_0x3bc64b(0xa65)],_0x63edfc[_0x3bc64b(0xc4e)]=this['autoBattleUseSkills'],_0x63edfc[_0x3bc64b(0x42f)]=this[_0x3bc64b(0x42f)],_0x63edfc;},VisuMZ['BattleCore'][_0x4b2772(0x2bb)]=ConfigManager[_0x4b2772(0x824)],ConfigManager[_0x4b2772(0x824)]=function(_0x561e15){const _0x1383fc=_0x4b2772;VisuMZ['BattleCore']['ConfigManager_applyData']['call'](this,_0x561e15);'autoBattleAtStart'in _0x561e15?this['autoBattleAtStart']=_0x561e15[_0x1383fc(0xa65)]:'Rszjm'==='pFGNR'?(_0xc14b41[_0x1383fc(0xba3)]=!![],_0xb34b3b['makeActions'](),this[_0x1383fc(0x341)](),_0x3bb76d[_0x1383fc(0x797)]()&&(_0x8ecfb[_0x1383fc(0xa06)]=![])):this[_0x1383fc(0xa65)]=![];if(_0x1383fc(0xc4e)in _0x561e15){if('FlRTs'!==_0x1383fc(0xa9f))this['autoBattleUseSkills']=_0x561e15[_0x1383fc(0xc4e)];else return this[_0x1383fc(0x4eb)]||this[_0x1383fc(0x2e5)]||this;}else{if(_0x1383fc(0x7d4)===_0x1383fc(0x7d4))this['autoBattleUseSkills']=![];else{const _0x4985ee=_0x373e53[_0x1383fc(0x498)]('['+_0x591ad1['$1']['match'](/\d+/g)+']');for(const _0x1042a7 of _0x4985ee){if(_0x1e21db['value'](_0x1042a7))return![];}return!![];}}_0x1383fc(0x42f)in _0x561e15?this[_0x1383fc(0x42f)]=_0x561e15[_0x1383fc(0x42f)]:this[_0x1383fc(0x42f)]=!![];},VisuMZ[_0x4b2772(0x67d)]['BattleManager_initMembers']=BattleManager[_0x4b2772(0xbf2)],BattleManager[_0x4b2772(0xbf2)]=function(){const _0x54b28e=_0x4b2772;VisuMZ['BattleCore'][_0x54b28e(0xb76)][_0x54b28e(0xb2b)](this),this[_0x54b28e(0x892)]=[];},BattleManager[_0x4b2772(0x2f4)]=function(){const _0x17ba40=_0x4b2772;if(!SceneManager[_0x17ba40(0x885)]())return;const _0x10ab41=SceneManager[_0x17ba40(0x21e)][_0x17ba40(0xab0)];if(_0x10ab41)_0x10ab41['requestRefresh']();},BattleManager[_0x4b2772(0x6ab)]=function(){const _0x28560e=_0x4b2772;if(BattleManager['isTpb']())return _0x28560e(0x894);return _0x28560e(0xb05);},BattleManager[_0x4b2772(0x4e8)]=function(_0x495681){const _0x7356ad=_0x4b2772;return _0x495681=_0x495681[_0x7356ad(0x5fd)]()[_0x7356ad(0x75a)](),this[_0x7356ad(0x6ab)]()===_0x495681;},BattleManager[_0x4b2772(0x394)]=function(){const _0x1d6bc8=_0x4b2772;return this['isBattleSys'](_0x1d6bc8(0xb05));},BattleManager[_0x4b2772(0x2a6)]=function(){const _0x3fef3d=_0x4b2772;return this[_0x3fef3d(0x394)]();},BattleManager[_0x4b2772(0x319)]=function(){const _0x415122=_0x4b2772;return!this[_0x415122(0x2a6)]();},BattleManager[_0x4b2772(0x3e9)]=function(){const _0x16e718=_0x4b2772;return!this[_0x16e718(0x2a6)]()&&!this[_0x16e718(0x319)]();},BattleManager[_0x4b2772(0xb68)]=function(_0x3a14b6){const _0x4f8d09=_0x4b2772;$gameParty[_0x4f8d09(0xb68)](_0x3a14b6),$gameTroop['processBattleCoreJS'](_0x3a14b6);},VisuMZ['BattleCore']['BattleManager_startBattle']=BattleManager[_0x4b2772(0xc02)],BattleManager[_0x4b2772(0xc02)]=function(){const _0x3078c8=_0x4b2772;this['_endBattle']=![],this[_0x3078c8(0xba3)]=ConfigManager[_0x3078c8(0xa65)],this[_0x3078c8(0xb68)](_0x3078c8(0xbbc)),VisuMZ[_0x3078c8(0x67d)][_0x3078c8(0x5fc)][_0x3078c8(0xb2b)](this),this[_0x3078c8(0xb68)](_0x3078c8(0xaa2));},BattleManager[_0x4b2772(0x3bf)]=function(_0x23452d){const _0x1c41fa=_0x4b2772,_0x77652b=VisuMZ[_0x1c41fa(0x67d)][_0x1c41fa(0x869)][_0x1c41fa(0x7f4)];_0x23452d!=='EscapeFail'&&_0x77652b[_0x1c41fa(0xb44)]&&VisuMZ[_0x1c41fa(0x67d)]['CheckMapBattleEventValid'](_0x77652b[_0x1c41fa(0xb44)])&&('udcqo'==='udcqo'?$gameTemp['reserveCommonEvent'](_0x77652b[_0x1c41fa(0xb44)]):this[_0x1c41fa(0x290)]=this[_0x1c41fa(0xa94)](this[_0x1c41fa(0x290)],this['_targetAngle'],_0x49370d,_0x3d5049,_0x5befe2));const _0x357b0d=_0x1c41fa(0xc84)['format'](_0x23452d);_0x77652b[_0x357b0d]&&VisuMZ['BattleCore'][_0x1c41fa(0x25d)](_0x77652b[_0x357b0d])&&$gameTemp['reserveCommonEvent'](_0x77652b[_0x357b0d]);},VisuMZ['BattleCore'][_0x4b2772(0x297)]=BattleManager[_0x4b2772(0x3d7)],BattleManager['checkBattleEnd']=function(){const _0x5c013f=_0x4b2772;if(this[_0x5c013f(0x1ec)]==='turn'){if($gameTemp['isCommonEventReserved']())return![];}return VisuMZ[_0x5c013f(0x67d)][_0x5c013f(0x297)][_0x5c013f(0xb2b)](this);},VisuMZ['BattleCore'][_0x4b2772(0x3e3)]=BattleManager[_0x4b2772(0x4e4)],BattleManager[_0x4b2772(0x4e4)]=function(){const _0x2e8390=_0x4b2772;this[_0x2e8390(0xb68)](_0x2e8390(0x84f)),VisuMZ['BattleCore'][_0x2e8390(0x3e3)][_0x2e8390(0xb2b)](this),this[_0x2e8390(0x3bf)](_0x2e8390(0xbe7));},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x911)]=BattleManager['processDefeat'],BattleManager['processDefeat']=function(){const _0x4e6f39=_0x4b2772;this[_0x4e6f39(0xb68)](_0x4e6f39(0xcf3)),VisuMZ[_0x4e6f39(0x67d)]['BattleManager_processDefeat']['call'](this),this[_0x4e6f39(0x3bf)](_0x4e6f39(0xa03));},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x6d1)]=BattleManager['endBattle'],BattleManager['endBattle']=function(_0x118142){const _0x256453=_0x4b2772;this[_0x256453(0x72e)]=!![],this[_0x256453(0xba3)]=![],this['processBattleCoreJS'](_0x256453(0x27f)),VisuMZ[_0x256453(0x67d)]['BattleManager_endBattle'][_0x256453(0xb2b)](this,_0x118142),this['processBattleCoreJS'](_0x256453(0x6b4));},VisuMZ[_0x4b2772(0x67d)]['BattleManager_startTurn']=BattleManager[_0x4b2772(0x76b)],BattleManager[_0x4b2772(0x76b)]=function(){const _0x58accc=_0x4b2772;if(this[_0x58accc(0x2a6)]())this[_0x58accc(0xb68)]('PreStartTurnJS');VisuMZ[_0x58accc(0x67d)]['BattleManager_startTurn']['call'](this);if(this['isTurnBased']())this[_0x58accc(0xb68)](_0x58accc(0xb29));},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x70b)]=BattleManager[_0x4b2772(0x87f)],BattleManager[_0x4b2772(0x87f)]=function(){const _0x211d78=_0x4b2772,_0x39b0a5=this[_0x211d78(0x4f1)][_0x211d78(0x7f8)](),_0x35c1e8=this[_0x211d78(0x4f1)];_0x39b0a5&&_0x39b0a5[_0x211d78(0x28e)]()===_0x35c1e8&&(_0x211d78(0x392)!=='KspIt'?_0x39b0a5['actionBattleCoreJS'](_0x211d78(0xb93)):(this[_0x211d78(0x4eb)][_0x211d78(0xcd4)]['x']=this[_0x211d78(0x4a1)],this['_distortionSprite'][_0x211d78(0xcd4)]['y']=this[_0x211d78(0xad5)]));VisuMZ['BattleCore']['BattleManager_startAction'][_0x211d78(0xb2b)](this);if(_0x39b0a5&&_0x39b0a5[_0x211d78(0x28e)]()===_0x35c1e8){if('cYPLg'===_0x211d78(0x46a))_0x39b0a5[_0x211d78(0x648)]('PostStartActionJS');else{if(!_0x3a9049['isSceneBattle']())return;_0x2d4510[_0x211d78(0x72d)](_0x4fba40,_0x3311ce);const _0x33113c=_0x39ddf4[_0x211d78(0x2ba)](),_0x1c75c6=_0x18afde[_0x211d78(0x963)],_0xa00851=_0x4e5fbe['JumpToLabel'];if(!_0x33113c)return;_0x2b2f22['_targetIndex']=_0x1c75c6,_0x5c02c9[_0x211d78(0x607)]=_0x1657e6['_allTargets']?_0x5239d7[_0x211d78(0x5dc)][_0x18c7c4[_0x211d78(0xaa6)]]||null:null,_0x19920e[_0x211d78(0x607)]&&_0xa00851[_0x211d78(0x5fd)]()[_0x211d78(0x75a)]()!==_0x211d78(0xa2e)&&_0x33113c[_0x211d78(0x402)]([_0xa00851]);}}},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x7e1)]=BattleManager[_0x4b2772(0x2ca)],BattleManager[_0x4b2772(0x2ca)]=function(){const _0x197c3e=_0x4b2772,_0x57f1c8=this[_0x197c3e(0x463)],_0x57af49=this[_0x197c3e(0x4f1)];_0x57f1c8&&_0x57f1c8!==this[_0x197c3e(0x2fd)]&&_0x57f1c8[_0x197c3e(0x28e)]()===_0x57af49&&_0x57f1c8[_0x197c3e(0x648)](_0x197c3e(0xce0));if(this['_subject'])VisuMZ[_0x197c3e(0x67d)][_0x197c3e(0x7e1)][_0x197c3e(0xb2b)](this);else{if(_0x197c3e(0x28b)!==_0x197c3e(0xcdb))this['_phase']=_0x197c3e(0x974);else{const _0x2fcb2f=_0x4c3298[_0x197c3e(0x498)]('['+_0x307792['$1']['match'](/\d+/g)+']');for(const _0xf8d90c of _0x2fcb2f){if(_0x478d56['value'](_0xf8d90c))return!![];}return![];}}_0x57f1c8&&_0x57f1c8!==this[_0x197c3e(0x2fd)]&&_0x57f1c8['subject']()===_0x57af49&&_0x57f1c8[_0x197c3e(0x648)](_0x197c3e(0xa1a)),this[_0x197c3e(0x2b3)](this[_0x197c3e(0x36e)]()),this[_0x197c3e(0x2fd)]=this[_0x197c3e(0x463)];},BattleManager[_0x4b2772(0x2b3)]=function(_0x12e700){const _0x4067c1=_0x4b2772;for(const _0x18e4a4 of _0x12e700){if(!_0x18e4a4)continue;if(!_0x18e4a4['battler']())continue;_0x18e4a4[_0x4067c1(0x947)]()['refreshMotion']();}},BattleManager['updateAction']=function(){const _0x962b6e=_0x4b2772;!this[_0x962b6e(0x6c0)][_0x962b6e(0x38f)]()&&this[_0x962b6e(0x2ca)]();},Game_Battler['prototype']['onAllActionsEnd']=function(){const _0x325e38=_0x4b2772;this[_0x325e38(0x6d2)]();if(Imported[_0x325e38(0x2c6)]){const _0x262b84=VisuMZ['SkillsStatesCore'][_0x325e38(0x869)][_0x325e38(0x637)];if(_0x262b84&&_0x262b84['ActionEndUpdate']===![]){if(_0x325e38(0x564)==='bSjME')this['removeStatesAuto'](0x1);else return _0x370ddf(_0xde5da['$1']);}}else'wTGeA'==='wTGeA'?this['removeStatesAuto'](0x1):_0x45ce80=_0x3fc5c2>=_0x3fda18?_0x1d186c:_0x59567a;this[_0x325e38(0x59a)]();},BattleManager[_0x4b2772(0x9e8)]=function(){const _0x118563=_0x4b2772;this[_0x118563(0x57a)]=VisuMZ[_0x118563(0x67d)][_0x118563(0x869)]['Mechanics'][_0x118563(0xb1a)][_0x118563(0xb2b)](this);},VisuMZ['BattleCore'][_0x4b2772(0x480)]=BattleManager[_0x4b2772(0x6c6)],BattleManager[_0x4b2772(0x6c6)]=function(){const _0x3f1454=_0x4b2772;this[_0x3f1454(0xb68)](_0x3f1454(0xa99)),BattleManager[_0x3f1454(0x34a)][_0x3f1454(0x50f)](),VisuMZ[_0x3f1454(0x67d)][_0x3f1454(0x480)][_0x3f1454(0xb2b)](this),this[_0x3f1454(0x3bf)](_0x3f1454(0x54b));},VisuMZ['BattleCore'][_0x4b2772(0x4b9)]=BattleManager[_0x4b2772(0x620)],BattleManager[_0x4b2772(0x620)]=function(){const _0x11ad0c=_0x4b2772;this[_0x11ad0c(0xb68)]('EscapeFailureJS');const _0xe9e5a8=this['_escapeRatio'];VisuMZ[_0x11ad0c(0x67d)][_0x11ad0c(0x4b9)][_0x11ad0c(0xb2b)](this),this[_0x11ad0c(0x57a)]=_0xe9e5a8+VisuMZ[_0x11ad0c(0x67d)][_0x11ad0c(0x869)][_0x11ad0c(0x7f4)][_0x11ad0c(0xbc5)]['call'](this),this[_0x11ad0c(0x3bf)]('EscapeFail');},BattleManager['displayStartMessages']=function(){const _0x3b0520=_0x4b2772;let _0x4fe702=![];if(this[_0x3b0520(0x73e)]())for(const _0x4e8a77 of $gameTroop[_0x3b0520(0xb27)]()){this[_0x3b0520(0x6c0)][_0x3b0520(0x21f)](_0x3b0520(0x60b),TextManager[_0x3b0520(0xaf0)]['format'](_0x4e8a77)),this['_logWindow'][_0x3b0520(0x21f)](_0x3b0520(0x5c5)),_0x4fe702=!![];}if(this[_0x3b0520(0x21a)]){if(_0x3b0520(0x89d)!=='eKfll'){const _0x5d5d9e=_0x5bac2d[_0x3b0520(0x619)](0x2)===0x0?this[_0x3b0520(0xbfe)]():this[_0x3b0520(0x8a6)]();_0x1789a4['push'](_0x5d5d9e[_0x3b0520(0x941)]());}else this[_0x3b0520(0x6c0)][_0x3b0520(0x21f)](_0x3b0520(0x60b),TextManager[_0x3b0520(0x7e4)][_0x3b0520(0x934)]($gameParty[_0x3b0520(0x8fe)]())),this['_logWindow'][_0x3b0520(0x21f)](_0x3b0520(0x5c5));}else this['_surprise']&&(this['_logWindow'][_0x3b0520(0x21f)](_0x3b0520(0x60b),TextManager['surprise']['format']($gameParty[_0x3b0520(0x8fe)]())),this[_0x3b0520(0x6c0)][_0x3b0520(0x21f)](_0x3b0520(0x5c5)));if(_0x4fe702){if('yvnJm'!==_0x3b0520(0x7b7))this[_0x3b0520(0x6c0)]['push'](_0x3b0520(0x5c5)),this[_0x3b0520(0x6c0)][_0x3b0520(0x21f)](_0x3b0520(0x4d6));else{this[_0x3b0520(0x6de)][_0x3b0520(0x4d6)]();const _0x3aee1c=this[_0x3b0520(0x698)]();!_0x7f5fc7(_0x3aee1c)&&this['drawGauge']();}}if(this[_0x3b0520(0x797)]()&&this[_0x3b0520(0xaeb)]()){if('pjNdV'!==_0x3b0520(0xc3e))this['_tpbNeedsPartyCommand']=![];else return _0x72a1c7[_0x3b0520(0x67d)][_0x3b0520(0x869)][_0x3b0520(0xa7a)]['MaxLines'];}},BattleManager['isDisplayEmergedEnemies']=function(){const _0x4ce8e0=_0x4b2772;if(BattleManager[_0x4ce8e0(0xba3)])return![];return VisuMZ['BattleCore']['Settings'][_0x4ce8e0(0x74a)][_0x4ce8e0(0xa1b)];},VisuMZ['BattleCore'][_0x4b2772(0xc71)]=BattleManager['startInput'],BattleManager[_0x4b2772(0x927)]=function(){const _0x34c420=_0x4b2772;VisuMZ[_0x34c420(0x67d)][_0x34c420(0xc71)][_0x34c420(0xb2b)](this),this[_0x34c420(0x394)]()&&this[_0x34c420(0xaeb)]()&&!this[_0x34c420(0x8c4)]&&$gameParty[_0x34c420(0xba6)]()&&this[_0x34c420(0x341)]();},BattleManager['isSkipPartyCommandWindow']=function(){const _0x11917d=_0x4b2772;return VisuMZ['BattleCore']['Settings'][_0x11917d(0x8b9)][_0x11917d(0x22e)];},BattleManager[_0x4b2772(0x416)]=function(){const _0x4c59f2=_0x4b2772;this['isPartyTpbInputtable']()&&('VOwVR'!=='VOwVR'?_0xce6f72[_0x4c59f2(0x557)]():this[_0x4c59f2(0x341)]());},VisuMZ['BattleCore']['Scene_Battle_startActorCommandSelection']=Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0xbf8)],Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0xbf8)]=function(){const _0x16f938=_0x4b2772;VisuMZ[_0x16f938(0x67d)][_0x16f938(0xcdd)][_0x16f938(0xb2b)](this),BattleManager[_0x16f938(0x797)]()&&BattleManager['_tpbNeedsPartyCommand']&&(_0x16f938(0x3e0)===_0x16f938(0x3e0)?(BattleManager[_0x16f938(0x426)]=![],this[_0x16f938(0x411)]()):(this[_0x16f938(0xb68)]('BattleDefeatJS'),_0x1c8e9f[_0x16f938(0x67d)]['BattleManager_processDefeat'][_0x16f938(0xb2b)](this),this[_0x16f938(0x3bf)](_0x16f938(0xa03))));},BattleManager[_0x4b2772(0x907)]=function(_0x147fd9,_0xbd65db){const _0x442374=_0x4b2772;this[_0x442374(0x463)]['_reflectionTarget']=_0xbd65db,this[_0x442374(0x6c0)]['displayReflection'](_0xbd65db),this[_0x442374(0x6c0)][_0x442374(0x24d)](_0x147fd9,this[_0x442374(0x463)]),this[_0x442374(0x463)][_0x442374(0x792)](_0x147fd9),this[_0x442374(0x6c0)][_0x442374(0x916)](_0x147fd9,_0x147fd9);},VisuMZ['BattleCore'][_0x4b2772(0x80f)]=BattleManager[_0x4b2772(0x5da)],BattleManager[_0x4b2772(0x5da)]=function(){const _0x30c05f=_0x4b2772;VisuMZ[_0x30c05f(0x67d)][_0x30c05f(0x80f)][_0x30c05f(0xb2b)](this),this[_0x30c05f(0x36c)]=this[_0x30c05f(0x36c)]['filter'](_0x7a0833=>_0x7a0833&&_0x7a0833[_0x30c05f(0x845)]());},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x828)]=BattleManager[_0x4b2772(0x48a)],BattleManager[_0x4b2772(0x48a)]=function(_0x17d457){const _0x390e16=_0x4b2772;if(this['_phase']==='custom')this[_0x390e16(0x5cc)]();else{if(this[_0x390e16(0x1ec)]==='forceAction')this[_0x390e16(0x271)]();else{if(_0x390e16(0x1fa)===_0x390e16(0x31e)){if(this[_0x390e16(0x79c)]()['note'][_0x390e16(0x93d)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];}else VisuMZ['BattleCore'][_0x390e16(0x828)][_0x390e16(0xb2b)](this,_0x17d457);}}},BattleManager[_0x4b2772(0x566)]=function(){const _0x2d5812=_0x4b2772;this[_0x2d5812(0x5dc)]=this[_0x2d5812(0x961)][_0x2d5812(0x36a)](0x0),this[_0x2d5812(0xaa6)]=0x0,this[_0x2d5812(0x607)]=this[_0x2d5812(0x5dc)][0x0]||null,this[_0x2d5812(0x1ec)]=_0x2d5812(0x8e3);},BattleManager[_0x4b2772(0x5cc)]=function(){const _0x40754d=_0x4b2772;!this[_0x40754d(0xc96)]()&&!this[_0x40754d(0x6c0)][_0x40754d(0x38f)]()&&(this['_phase']=_0x40754d(0x352));},BattleManager[_0x4b2772(0x5a2)]=function(_0x1c014d){const _0x402cc0=_0x4b2772;this[_0x402cc0(0x36c)][_0x402cc0(0x9cc)](_0x1c014d);if(_0x1c014d===this['_subject'])return;const _0x56369e=JsonEx['makeDeepCopy'](_0x1c014d[_0x402cc0(0x7f8)]());this[_0x402cc0(0x892)]['push']([_0x1c014d,_0x56369e]);},BattleManager[_0x4b2772(0x2f3)]=function(){},BattleManager[_0x4b2772(0x686)]=function(){const _0x34e49c=_0x4b2772;if(this[_0x34e49c(0x797)]())'wauOE'!==_0x34e49c(0xbe6)?this[_0x34e49c(0x21f)]('addText',this['makeHpDamageText'](_0x208686)):this[_0x34e49c(0x1ec)]=_0x34e49c(0x974);else{if(this[_0x34e49c(0x892)][_0x34e49c(0x1e9)]>0x0)this[_0x34e49c(0x1ec)]='turn';else{if(_0x34e49c(0x7b1)!==_0x34e49c(0x8a9))this[_0x34e49c(0x927)]();else{if(!_0x56d13e[_0x34e49c(0x885)]())return;_0x4e6cd3[_0x34e49c(0x72d)](_0x21bb48,_0x37d263);const _0xc29ee4=_0x505f39[_0x34e49c(0x2ba)](),_0x38ecab=_0x48b775[_0x34e49c(0x4f1)],_0x4e8219=_0x43f7c5[_0x34e49c(0x38b)];if(!_0xc29ee4)return;if(!_0x38ecab)return;_0x38ecab&&_0x38ecab['isDead']()&&_0x4e8219['toUpperCase']()[_0x34e49c(0x75a)]()!==_0x34e49c(0xa2e)&&_0xc29ee4[_0x34e49c(0x402)]([_0x4e8219]);}}}},BattleManager[_0x4b2772(0xad7)]=function(){const _0x501e46=_0x4b2772,_0xc4d18b=this[_0x501e46(0x4f1)];_0xc4d18b&&this[_0x501e46(0x797)]()&&_0xc4d18b[_0x501e46(0x201)](_0x501e46(0x2e9));for(;;){if(_0x501e46(0x27d)===_0x501e46(0x27d)){const _0x5722a8=this[_0x501e46(0x7a9)]();if(!_0x5722a8)return null;if(_0x5722a8[_0x501e46(0x884)]()&&_0x5722a8[_0x501e46(0x8ca)]())return _0x5722a8;}else _0x292037(_0x3ffd27[_0x501e46(0x934)]('CTB')),_0x1d29c6['exit']();}},BattleManager['getNextSubjectFromPool']=function(){const _0x574791=_0x4b2772;if(this[_0x574791(0x892)][_0x574791(0x1e9)]>0x0){if(_0x574791(0xb8f)===_0x574791(0xb8f)){const _0x128fc=this[_0x574791(0x892)][_0x574791(0x44e)](),_0xb08be=_0x128fc[0x0];return _0xb08be[_0x574791(0x9fd)]=_0xb08be[_0x574791(0x9fd)]||[],_0xb08be[_0x574791(0x9fd)][0x0]=_0x128fc[0x1],_0xb08be;}else{const _0xb05e02=_0x7cd54e(_0x3e515e['$1'])[_0x574791(0xc24)](/[\r\n]+/)[_0x574791(0x9cc)]('');_0xadd8de['motionIdle']=_0x173aa5[_0x574791(0x339)](_0xb05e02);}}else return this[_0x574791(0x36c)][_0x574791(0x44e)]();},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x706)]=Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x5a2)],Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x5a2)]=function(_0x47b3c5,_0x745a3c){const _0x3c10c2=_0x4b2772;VisuMZ[_0x3c10c2(0x67d)]['Game_Battler_forceAction']['call'](this,_0x47b3c5,_0x745a3c),this[_0x3c10c2(0x9fd)][this[_0x3c10c2(0x9fd)][_0x3c10c2(0x1e9)]-0x1][_0x3c10c2(0x79e)]=!![];},Game_Interpreter[_0x4b2772(0x632)][_0x4b2772(0x840)]=function(_0x5993c8){const _0xbf62e9=_0x4b2772;return this[_0xbf62e9(0x32e)](_0x5993c8[0x0],_0x5993c8[0x1],_0x55305e=>{const _0x58ff8d=_0xbf62e9;!_0x55305e[_0x58ff8d(0x393)]()&&(_0x58ff8d(0xa32)!==_0x58ff8d(0xcd7)?(_0x55305e[_0x58ff8d(0x5a2)](_0x5993c8[0x2],_0x5993c8[0x3]),BattleManager['forceAction'](_0x55305e)):(this[_0x58ff8d(0xba7)](),this[_0x58ff8d(0xa91)](),this['createAnimationContainer'](),this[_0x58ff8d(0xaca)](),this[_0x58ff8d(0x3b7)]()));}),!![];},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x7d6)]=Game_Battler['prototype'][_0x4b2772(0xbd9)],Game_Battler['prototype'][_0x4b2772(0xbd9)]=function(){const _0xb28054=_0x4b2772;VisuMZ[_0xb28054(0x67d)][_0xb28054(0x7d6)][_0xb28054(0xb2b)](this),this['_actions']['length']<=0x0&&(this[_0xb28054(0x6c4)]=Number[_0xb28054(0x4f4)]);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xa51)]=BattleManager[_0x4b2772(0x341)],BattleManager[_0x4b2772(0x341)]=function(){const _0x459797=_0x4b2772;this['isTpb']()?this['selectNextCommandTpb']():_0x459797(0x6e1)!=='wHJov'?VisuMZ[_0x459797(0x67d)][_0x459797(0xa51)][_0x459797(0xb2b)](this):this[_0x459797(0x207)]='portrait';},BattleManager[_0x4b2772(0x37b)]=function(){const _0x458247=_0x4b2772;if(this[_0x458247(0x203)]){if(_0x458247(0x433)!==_0x458247(0x503)){if(this['_currentActor']['selectNextCommand']()){if(_0x458247(0xc66)!==_0x458247(0xc66)){_0x140c40[_0x458247(0x790)](_0x4f371a);let _0x31d281=this['getHardDamageCap']();return _0x15f0b2['clamp'](-_0x31d281,_0x31d281);}else return;}this[_0x458247(0x2c9)](),this[_0x458247(0xa5a)](),!this['_subject']&&!this[_0x458247(0x203)]&&SceneManager['_scene'][_0x458247(0xbae)]();}else return _0x24225c;}else{if(!this[_0x458247(0x4f1)]){if(_0x458247(0x94c)==='hFdAn')this['selectNextActor']();else{const _0xd58cc1=_0x1e1928(_0x1adb9d['$1'])[_0x458247(0xc24)](/[\r\n]+/)[_0x458247(0x8b4)](_0x347c79=>_0x5cfa1f(_0x347c79)[_0x458247(0x5fd)]()[_0x458247(0x75a)]());_0x4ae700=_0x3df7de[_0x458247(0xbf3)](_0xd58cc1);!_0x3f72ec[_0x458247(0x28a)][_0x458247(0x93d)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x26e544['note']+=_0x458247(0x309));;}}}},BattleManager[_0x4b2772(0xa5a)]=function(){const _0x253aea=_0x4b2772;if(!this['isPartyTpbInputtable']()||this['needsActorInputCancel']()){if(this['_tpbSceneChangeCacheActor']){if(!$gameParty[_0x253aea(0x949)]()[_0x253aea(0x41a)](this[_0x253aea(0x24b)])){if(_0x253aea(0x9e2)===_0x253aea(0x9e2))this[_0x253aea(0x24b)]=null;else return _0x43cb0c[_0x253aea(0xbfe)]()[_0x253aea(0xc8c)]();}}if(!this['_tpbSceneChangeCacheActor']){if(_0x253aea(0xbe4)===_0x253aea(0xc22)){const _0x2c4fc4=this[_0x253aea(0x5d7)](),_0x152958=_0x3deb7e[_0x253aea(0x67d)][_0x253aea(0x869)][_0x253aea(0x8b9)][_0x253aea(0x7bc)],_0x34f5e4=_0x2c4fc4===_0x253aea(0x245)?_0x33e9b1[_0x253aea(0x481)]:_0x253aea(0x573)[_0x253aea(0x934)](_0x152958,_0x514bed[_0x253aea(0x481)]),_0x14ad46=this[_0x253aea(0xa92)]();this[_0x253aea(0x891)](_0x34f5e4,'autoBattle',_0x14ad46);}else this[_0x253aea(0x2fc)](),this[_0x253aea(0x203)]=null,this[_0x253aea(0xa06)]=![];}else this['revertTpbCachedActor']();}},BattleManager['revertTpbCachedActor']=function(){const _0xc8c432=_0x4b2772;!$gameParty[_0xc8c432(0x949)]()[_0xc8c432(0x41a)](this[_0xc8c432(0x24b)])&&(this[_0xc8c432(0x24b)]=null),this[_0xc8c432(0x24b)]?(this[_0xc8c432(0x203)]=this[_0xc8c432(0x24b)],this[_0xc8c432(0x203)][_0xc8c432(0x4f5)]=_0xc8c432(0x900),this[_0xc8c432(0xa06)]=!![],this[_0xc8c432(0x24b)]=null):_0xc8c432(0x9f3)!==_0xc8c432(0x9f3)?(_0x27baa0[_0xc8c432(0xcd4)]['x']=(_0x4876a8[_0xc8c432(0xcd4)]['x']*(_0x4f045b-0x1)+this[_0xc8c432(0x4a1)])/_0x2e4db3,_0x1b999d['skew']['y']=(_0x2f78e0[_0xc8c432(0xcd4)]['y']*(_0x4a121f-0x1)+this[_0xc8c432(0xad5)])/_0x2ab0e2):(this['cancelActorInput'](),this[_0xc8c432(0x203)]=null,this[_0xc8c432(0xa06)]=![]);},VisuMZ['BattleCore'][_0x4b2772(0x31d)]=BattleManager[_0x4b2772(0xbc1)],BattleManager['isTpbMainPhase']=function(){const _0x50c7fb=_0x4b2772;return this[_0x50c7fb(0x1ec)]===_0x50c7fb(0x8e3)?this[_0x50c7fb(0x82f)]():_0x50c7fb(0x98c)!=='LlzNz'?_0x2ca9dd[_0x50c7fb(0x41b)][0x0]:VisuMZ[_0x50c7fb(0x67d)][_0x50c7fb(0x31d)][_0x50c7fb(0xb2b)](this);},BattleManager[_0x4b2772(0x82f)]=function(){const _0x5e02dc=_0x4b2772;return this[_0x5e02dc(0x6c7)]();},VisuMZ[_0x4b2772(0x67d)]['BattleManager_cancelActorInput']=BattleManager[_0x4b2772(0x2fc)],BattleManager['cancelActorInput']=function(){const _0x155b3d=_0x4b2772;this['isTpb']()&&this[_0x155b3d(0x1ec)]===_0x155b3d(0x5f8)&&(this[_0x155b3d(0x203)]=null),VisuMZ[_0x155b3d(0x67d)][_0x155b3d(0x642)][_0x155b3d(0xb2b)](this);},VisuMZ[_0x4b2772(0x67d)]['BattleManager_inputtingAction']=BattleManager[_0x4b2772(0x31a)],BattleManager[_0x4b2772(0x31a)]=function(){const _0x5ca2ca=_0x4b2772,_0x361b7d=this[_0x5ca2ca(0x203)];if(_0x361b7d&&!_0x361b7d['inputtingAction']()){const _0x4d9fa1=_0x361b7d[_0x5ca2ca(0x93a)];_0x361b7d[_0x5ca2ca(0x9fd)][_0x4d9fa1]=new Game_Action(_0x361b7d);}return VisuMZ['BattleCore'][_0x5ca2ca(0x7f9)][_0x5ca2ca(0xb2b)](this);},VisuMZ[_0x4b2772(0x67d)]['BattleManager_checkSubstitute']=BattleManager['checkSubstitute'],BattleManager[_0x4b2772(0x449)]=function(_0x4ded4a){const _0x204e9e=_0x4b2772;if(this['_action']['isForFriend']())return![];return VisuMZ[_0x204e9e(0x67d)][_0x204e9e(0xc68)]['call'](this,_0x4ded4a);},SceneManager[_0x4b2772(0x885)]=function(){const _0x1e4d9b=_0x4b2772;return this[_0x1e4d9b(0x21e)]&&this['_scene'][_0x1e4d9b(0x63a)]===Scene_Battle;},SceneManager[_0x4b2772(0x96e)]=function(){const _0x1cd3ce=_0x4b2772;return Spriteset_Battle[_0x1cd3ce(0x632)][_0x1cd3ce(0x886)]();},SceneManager[_0x4b2772(0x6d7)]=function(){const _0x2d38f7=_0x4b2772;if(SceneManager[_0x2d38f7(0xc8b)](Scene_Options))return!![];return![];},SceneManager[_0x4b2772(0x3d3)]=function(){if(SceneManager['isNextScene'](Scene_Options))return!![];return![];},SceneManager['checkSceneBattleTransitionable']=function(_0x3ab37b){const _0x57aab5=_0x4b2772;if(!SceneManager[_0x57aab5(0x885)]())return!![];const _0x4734ff=['Scene_Options',_0x57aab5(0x59f)];return _0x4734ff[_0x57aab5(0x41a)](_0x3ab37b[_0x57aab5(0x8fe)]);},VisuMZ['BattleCore'][_0x4b2772(0x68a)]=SceneManager[_0x4b2772(0x21f)],SceneManager[_0x4b2772(0x21f)]=function(_0x56c0a0){const _0x5189c5=_0x4b2772;if(!SceneManager['checkSceneBattleTransitionable'](_0x56c0a0)){if(_0x5189c5(0x675)==='RSrvM'){this[_0x5189c5(0x36c)]['remove'](_0x418827);if(_0x34dae7===this[_0x5189c5(0x4f1)])return;const _0x3d2e99=_0x30063f[_0x5189c5(0x23c)](_0x2aada5[_0x5189c5(0x7f8)]());this['_forcedBattlers']['push']([_0x23c7b2,_0x3d2e99]);}else return this[_0x5189c5(0xb97)](_0x56c0a0);}VisuMZ['BattleCore'][_0x5189c5(0x68a)][_0x5189c5(0xb2b)](this,_0x56c0a0);},SceneManager[_0x4b2772(0xb97)]=function(_0x4436a2){const _0x46a2ee=_0x4b2772;if(!$gameTemp[_0x46a2ee(0x344)]())return;if(this[_0x46a2ee(0x7c3)])return;this['_displayBattleCoreTransitionErrorMsg']=!![];let _0x34e108='';_0x34e108+=_0x46a2ee(0x444),_0x34e108+=_0x46a2ee(0xbdf)[_0x46a2ee(0x934)](_0x4436a2[_0x46a2ee(0x8fe)]),alert(_0x34e108);},VisuMZ['BattleCore'][_0x4b2772(0xb0e)]=Game_Temp[_0x4b2772(0x632)][_0x4b2772(0x6f3)],Game_Temp[_0x4b2772(0x632)][_0x4b2772(0x6f3)]=function(_0x1a9a96,_0x5f553d,_0x2b4122){const _0x575482=_0x4b2772;_0x1a9a96=_0x1a9a96[_0x575482(0xb8c)]((_0x26042e,_0x38c1e6,_0x559fb9)=>_0x559fb9[_0x575482(0xae6)](_0x26042e)===_0x38c1e6),SceneManager[_0x575482(0x885)]()&&SceneManager[_0x575482(0x96e)]()&&(_0x2b4122=!_0x2b4122),VisuMZ['BattleCore']['Game_Temp_requestAnimation'][_0x575482(0xb2b)](this,_0x1a9a96,_0x5f553d,_0x2b4122),SceneManager[_0x575482(0x885)]()&&BattleManager[_0x575482(0x34a)][_0x575482(0x719)]();},Game_Temp[_0x4b2772(0x632)][_0x4b2772(0x745)]=function(_0x1d2aad){const _0x176ea9=_0x4b2772;this[_0x176ea9(0x64a)]=_0x1d2aad;},Game_Temp[_0x4b2772(0x632)]['getLastPluginCommandInterpreter']=function(){return this['_lastPluginCommandInterpreter'];},Game_Temp['prototype'][_0x4b2772(0x4a9)]=function(){const _0x21bd95=_0x4b2772;this[_0x21bd95(0x207)]=undefined;},Game_Temp[_0x4b2772(0x632)]['applyForcedGameTroopSettingsBattleCore']=function(_0x4727f2){const _0x3bfc97=_0x4b2772;$gameMap&&$dataMap&&$dataMap['note']&&(_0x3bfc97(0x36f)===_0x3bfc97(0x36f)?this[_0x3bfc97(0x9a3)]($dataMap[_0x3bfc97(0x28a)]):(_0x5bd68f=_0x5cc49d['filter']((_0x575078,_0x53ab60,_0x50219b)=>_0x50219b[_0x3bfc97(0xae6)](_0x575078)===_0x53ab60),_0x58998a[_0x3bfc97(0x885)]()&&_0x372a6b[_0x3bfc97(0x96e)]()&&(_0x450f49=!_0x50874a),_0x131e6b['BattleCore'][_0x3bfc97(0xb0e)][_0x3bfc97(0xb2b)](this,_0x593a94,_0x36e943,_0x10c0f9),_0xbc31e1[_0x3bfc97(0x885)]()&&_0x358032['_spriteset'][_0x3bfc97(0x719)]()));const _0x21ca2d=$dataTroops[_0x4727f2];if(_0x21ca2d){let _0x222e3d=DataManager[_0x3bfc97(0x3a3)](_0x21ca2d['id']);this[_0x3bfc97(0x9a3)](_0x222e3d);}},Game_Temp[_0x4b2772(0x632)][_0x4b2772(0x9a3)]=function(_0x585ea8){const _0x4d4c05=_0x4b2772;if(!_0x585ea8)return;if(_0x585ea8['match'](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*)>/i)){const _0x5849fd=String(RegExp['$1']);if(_0x5849fd[_0x4d4c05(0x93d)](/DEFAULT/i))_0x4d4c05(0x5eb)!==_0x4d4c05(0x5eb)?(_0x295939=this['_back1Sprite']['battleback1Name'](),_0x156768=this['_back2Sprite'][_0x4d4c05(0xb7e)]()):this[_0x4d4c05(0x207)]=_0x4d4c05(0x523);else{if(_0x5849fd[_0x4d4c05(0x93d)](/LIST/i))this[_0x4d4c05(0x207)]=_0x4d4c05(0xc64);else{if(_0x5849fd[_0x4d4c05(0x93d)](/XP/i))this[_0x4d4c05(0x207)]='xp';else{if(_0x5849fd['match'](/PORTRAIT/i))this[_0x4d4c05(0x207)]='portrait';else{if(_0x5849fd[_0x4d4c05(0x93d)](/BORDER/i)){if(_0x4d4c05(0xcd6)!==_0x4d4c05(0x3fc))this[_0x4d4c05(0x207)]='border';else return this[_0x4d4c05(0x67b)]*this[_0x4d4c05(0x830)]();}else{if(_0x5849fd['match'](/(?:SIDEVIEW UI|SIDEVIEW)/i)){if(_0x4d4c05(0xcaf)!==_0x4d4c05(0xcaf))_0x38d2ee[_0x4d4c05(0x67d)]['Game_System_initialize'][_0x4d4c05(0xb2b)](this),this[_0x4d4c05(0x92e)]();else{if(Imported['VisuMZ_3_SideviewBattleUI'])this[_0x4d4c05(0x207)]='sideview_ui';else{if(_0x4d4c05(0xabe)!==_0x4d4c05(0xabe)){if(!this[_0x4d4c05(0x57d)])return;if(!this[_0x4d4c05(0x6cf)])return;const _0x64983=_0x2a4801[_0x4d4c05(0x67d)][_0x4d4c05(0x869)]['HpGauge'],_0x204af8=this[_0x4d4c05(0x6cf)];_0x204af8[_0x4d4c05(0x30d)]=this[_0x4d4c05(0x7e0)]();const _0x3f2ce1=_0x64983[_0x4d4c05(0x6d6)],_0x1f39b9=_0x64983[_0x4d4c05(0xbed)];_0x204af8['x']=_0x3f2ce1,_0x204af8['x']+=this['_battler']['battleUIOffsetX'](),_0x204af8['y']=-this[_0x4d4c05(0x4c3)]+_0x1f39b9,_0x204af8['y']+=this[_0x4d4c05(0x57d)]['battleUIOffsetY'](),_0x435c82[_0x4d4c05(0x40b)]&&_0x1c14d4[_0x4d4c05(0x21e)][_0x4d4c05(0x34a)]&&(_0x204af8['x']+=this['x'],_0x204af8['y']+=this['y']);}else this[_0x4d4c05(0x207)]=_0x4d4c05(0x523);}}}}}}}}}},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x9d5)]=Game_System[_0x4b2772(0x632)][_0x4b2772(0xb0d)],Game_System['prototype'][_0x4b2772(0xb0d)]=function(){const _0x4bbf61=_0x4b2772;VisuMZ[_0x4bbf61(0x67d)][_0x4bbf61(0x9d5)]['call'](this),this['initBattleCore']();},Game_System[_0x4b2772(0x632)][_0x4b2772(0x92e)]=function(){const _0x4998a0=_0x4b2772;this[_0x4998a0(0x26d)]=this[_0x4998a0(0x26d)]||[];},Game_System[_0x4b2772(0x632)][_0x4b2772(0x41e)]=function(){const _0x321282=_0x4b2772;if(this[_0x321282(0x26d)]===undefined)this[_0x321282(0x92e)]();return this[_0x321282(0x26d)];},Game_System[_0x4b2772(0x632)]['registerDefeatedEnemy']=function(_0x2b34c8){const _0x9de7f0=_0x4b2772;if(this[_0x9de7f0(0x26d)]===undefined)this[_0x9de7f0(0x92e)]();if(!_0x2b34c8)return;if(this[_0x9de7f0(0x26d)][_0x9de7f0(0x41a)](_0x2b34c8))return;this[_0x9de7f0(0x26d)][_0x9de7f0(0x21f)](_0x2b34c8),this[_0x9de7f0(0x26d)][_0x9de7f0(0xad4)]((_0xe39aeb,_0x24b097)=>_0xe39aeb-_0x24b097);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x930)]=Game_BattlerBase[_0x4b2772(0x632)][_0x4b2772(0x56e)],Game_BattlerBase[_0x4b2772(0x632)][_0x4b2772(0x56e)]=function(_0x8e3412){const _0x1db6d3=_0x4b2772,_0x57d844=this[_0x1db6d3(0x8ca)](),_0x5a05b4=this[_0x1db6d3(0xaf6)]();VisuMZ[_0x1db6d3(0x67d)][_0x1db6d3(0x930)]['call'](this,_0x8e3412),this[_0x1db6d3(0x9d4)]()&&_0x57d844&&this[_0x1db6d3(0x3ef)]()&&(this[_0x1db6d3(0x4e0)]=!this[_0x1db6d3(0x9f7)](),$gameSystem[_0x1db6d3(0xa13)](this[_0x1db6d3(0xc83)]())),SceneManager[_0x1db6d3(0x885)]()&&_0x5a05b4!==this['stateMotionIndex']()&&(this[_0x1db6d3(0x947)]()&&this[_0x1db6d3(0x947)]()[_0x1db6d3(0xaee)]());},Game_Enemy[_0x4b2772(0x632)][_0x4b2772(0x9f7)]=function(){const _0xb4eb44=_0x4b2772;return $gameSystem[_0xb4eb44(0x41e)]()['includes'](this['_enemyId']);},VisuMZ[_0x4b2772(0x67d)]['Game_BattlerBase_eraseState']=Game_BattlerBase[_0x4b2772(0x632)]['eraseState'],Game_BattlerBase[_0x4b2772(0x632)][_0x4b2772(0x3b5)]=function(_0x4a44c0){const _0x4e0b38=_0x4b2772;VisuMZ['BattleCore']['Game_BattlerBase_eraseState'][_0x4e0b38(0xb2b)](this,_0x4a44c0),this[_0x4e0b38(0x9d4)]()&&_0x4a44c0===this['deathStateId']()&&this['isAlive']()&&(_0x4e0b38(0xaa1)!==_0x4e0b38(0xaa1)?(this['_mainSprite']=new _0x2aa69e(),this[_0x4e0b38(0x2e5)][_0x4e0b38(0xa79)]['x']=0.5,this[_0x4e0b38(0x2e5)][_0x4e0b38(0xa79)]['y']=0x1,this['addChild'](this[_0x4e0b38(0x2e5)]),this[_0x4e0b38(0x65a)]()):this[_0x4e0b38(0x4e0)]=![]),!this[_0x4e0b38(0x841)]&&!this[_0x4e0b38(0x2aa)]&&SceneManager[_0x4e0b38(0x885)]()&&(_0x4e0b38(0x3ab)!=='hSWMx'?this[_0x4e0b38(0x249)]():(this[_0x4e0b38(0x285)]()?(this['_statusWindow']['show'](),this[_0x4e0b38(0x552)][_0x4e0b38(0x6f7)](),this[_0x4e0b38(0x718)][_0x4e0b38(0x849)]()):_0x147d68[_0x4e0b38(0x67d)][_0x4e0b38(0x56d)][_0x4e0b38(0xb2b)](this),this[_0x4e0b38(0xadc)]()));},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x205)]=Game_Action[_0x4b2772(0x632)][_0x4b2772(0x4d6)],Game_Action['prototype'][_0x4b2772(0x4d6)]=function(){const _0xf822b0=_0x4b2772;VisuMZ[_0xf822b0(0x67d)][_0xf822b0(0x205)]['call'](this),this[_0xf822b0(0x95f)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0xf822b0(0xb6a)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this['_customDamageFormula']=_0xf822b0(0x523);},Game_Action['prototype'][_0x4b2772(0x346)]=function(_0x226a2f,_0x366b4e){const _0x5ed045=_0x4b2772;return VisuMZ[_0x5ed045(0x67d)][_0x5ed045(0x869)][_0x5ed045(0x681)]['OverallFormulaJS']['call'](this,_0x226a2f,_0x366b4e);},Game_Action['prototype'][_0x4b2772(0x6b1)]=function(_0x2aac1d,_0x37ad52){const _0xb676e9=_0x4b2772;return VisuMZ[_0xb676e9(0x67d)][_0xb676e9(0x869)][_0xb676e9(0x681)][_0xb676e9(0x9af)][_0xb676e9(0xb2b)](this,_0x2aac1d,_0x37ad52);},Game_Action['prototype'][_0x4b2772(0x489)]=function(_0x4e04ab,_0x35bf82){const _0x4e7074=_0x4b2772;return VisuMZ[_0x4e7074(0x67d)]['Settings'][_0x4e7074(0x681)]['GuardFormulaJS'][_0x4e7074(0xb2b)](this,_0x4e04ab,_0x35bf82);},VisuMZ['BattleCore'][_0x4b2772(0xb82)]=Game_Action[_0x4b2772(0x632)][_0x4b2772(0x1fc)],Game_Action[_0x4b2772(0x632)][_0x4b2772(0x1fc)]=function(_0xf196c8){const _0x3302cd=_0x4b2772,_0x1d7f6e=this[_0x3302cd(0x30a)]()[_0x3302cd(0x28a)];if(_0x1d7f6e[_0x3302cd(0x93d)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x1d7f6e[_0x3302cd(0x93d)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return _0x3302cd(0xb0c)!==_0x3302cd(0xb0c)?_0x788664['prototype'][_0x3302cd(0x2f7)][_0x3302cd(0xb2b)](this):Number(RegExp['$1'])/0x64;else{if(_0x3302cd(0x8c2)!=='EnBfV')_0x1aa032[_0x3302cd(0x3d3)]()?_0x1758a8[_0x3302cd(0x632)][_0x3302cd(0x464)]['call'](this):_0x5dfb70[_0x3302cd(0x67d)][_0x3302cd(0x536)][_0x3302cd(0xb2b)](this),this[_0x3302cd(0x306)]();else{let _0x4a1333=VisuMZ['BattleCore'][_0x3302cd(0xb82)][_0x3302cd(0xb2b)](this,_0xf196c8);return _0x4a1333=this[_0x3302cd(0xb6a)][_0x3302cd(0x91f)]*_0x4a1333+this[_0x3302cd(0xb6a)][_0x3302cd(0xca8)],_0x4a1333;}}}},Game_Action[_0x4b2772(0x632)][_0x4b2772(0x325)]=function(_0x5bfb2a){const _0x5825d4=_0x4b2772;if(!this[_0x5825d4(0x30a)]()[_0x5825d4(0x33f)][_0x5825d4(0x357)])return 0x0;let _0x4b4772=VisuMZ['BattleCore']['Settings'][_0x5825d4(0x681)][_0x5825d4(0x763)]['call'](this,_0x5bfb2a);return _0x4b4772=this[_0x5825d4(0xb6a)][_0x5825d4(0xabc)]*_0x4b4772+this['_multipliers']['criticalHitFlat'],_0x4b4772;},Game_Action[_0x4b2772(0x632)][_0x4b2772(0x465)]=function(_0x5613cc){const _0x3fb68a=_0x4b2772;return _0x5613cc=VisuMZ[_0x3fb68a(0x67d)][_0x3fb68a(0x869)][_0x3fb68a(0x681)][_0x3fb68a(0x987)][_0x3fb68a(0xb2b)](this,_0x5613cc),_0x5613cc=this['_multipliers'][_0x3fb68a(0x3a2)]*_0x5613cc+this[_0x3fb68a(0xb6a)][_0x3fb68a(0xc79)],_0x5613cc;},VisuMZ['BattleCore'][_0x4b2772(0xa15)]=Game_Action[_0x4b2772(0x632)][_0x4b2772(0x7ef)],Game_Action[_0x4b2772(0x632)][_0x4b2772(0x7ef)]=function(_0x257489){const _0x3fa729=_0x4b2772;if(this[_0x3fa729(0xcbe)]!=='default'){if(_0x3fa729(0x51b)!==_0x3fa729(0x528))return this[_0x3fa729(0x454)](_0x257489);else{let _0x386a9b=_0x4743e9[_0x3fa729(0x3a3)](_0x315d05['id']);this[_0x3fa729(0x9a3)](_0x386a9b);}}else{if(DataManager[_0x3fa729(0x87d)](this[_0x3fa729(0x30a)]())===_0x3fa729(0xcb7))return VisuMZ['BattleCore'][_0x3fa729(0xa15)][_0x3fa729(0xb2b)](this,_0x257489);else{if('rDyyE'!==_0x3fa729(0x3a4))_0x37a296+=_0x57caef,_0x2e35e8+=_0x2c8ad2;else return this['evalDamageFormulaBattleCore'](_0x257489);}}},Game_Action['prototype']['setCustomDamageFormula']=function(_0x4da911){const _0x26e1e7=_0x4b2772;this[_0x26e1e7(0xcbe)]=_0x4da911;},Game_Action[_0x4b2772(0x632)][_0x4b2772(0x454)]=function(_0x488ec1){const _0x51dbf6=_0x4b2772,_0x12238f=this['item'](),_0x443680=_0x12238f['damage'][_0x51dbf6(0x787)];_0x12238f[_0x51dbf6(0x33f)][_0x51dbf6(0x787)]=this[_0x51dbf6(0xcbe)];let _0x176881=VisuMZ['BattleCore'][_0x51dbf6(0xa15)]['call'](this,_0x488ec1);return _0x12238f[_0x51dbf6(0x33f)][_0x51dbf6(0x787)]=_0x443680,_0x176881;},Game_Action[_0x4b2772(0x632)][_0x4b2772(0x526)]=function(){const _0x5141c8=_0x4b2772;if(this['item']()[_0x5141c8(0x28a)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x192330=String(RegExp['$1'])[_0x5141c8(0x5fd)]()[_0x5141c8(0x75a)]();return _0x192330;}return _0x5141c8(0xcb7);},Game_Action['prototype'][_0x4b2772(0xb5d)]=function(_0x23c128){const _0x39505d=_0x4b2772,_0x206951=DataManager['getDamageStyle'](this[_0x39505d(0x30a)]()),_0x22d589=VisuMZ[_0x39505d(0xce4)][_0x206951];try{if(_0x39505d(0x4dd)!==_0x39505d(0x4dd))_0x2131a1[_0x39505d(0x425)]();else return _0x22d589['Formula'][_0x39505d(0xb2b)](this,_0x23c128);}catch(_0x5e7800){if('TTwAb'===_0x39505d(0x591))this[_0x39505d(0xacf)]=this[_0x39505d(0x82e)];else{if($gameTemp[_0x39505d(0x344)]())console[_0x39505d(0x790)](_0x5e7800);return VisuMZ[_0x39505d(0x67d)][_0x39505d(0xa15)][_0x39505d(0xb2b)](this);}}},Game_Action[_0x4b2772(0x632)]['applyArmorModifiers']=function(_0x137d84,_0x41ea1e){const _0x561cbf=_0x4b2772;if(this[_0x561cbf(0xbb6)]())return _0x41ea1e;const _0x276155=this[_0x561cbf(0x28e)](),_0xfff1e7=_0x137d84;let _0x514c46=[],_0x2b8838=[];_0x514c46[_0x561cbf(0x21f)](this[_0x561cbf(0x95f)]['arPenFlat'],this[_0x561cbf(0x95f)][_0x561cbf(0x2e0)]),_0x2b8838[_0x561cbf(0x21f)](this['_armorPenetration'][_0x561cbf(0x777)],this['_armorPenetration'][_0x561cbf(0x2e2)]);const _0xfe2812=this[_0x561cbf(0x8c3)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x4ea98b=this[_0x561cbf(0x8c3)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x42b238=this[_0x561cbf(0x8c3)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x4f5423=this[_0x561cbf(0x8c3)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;_0x514c46=_0x514c46['concat'](_0xfff1e7[_0x561cbf(0x3cc)]()[_0x561cbf(0x8b4)](_0x3a9c11=>_0x3a9c11&&_0x3a9c11['note']['match'](_0xfe2812)?Number(RegExp['$1']):0x0)),_0x2b8838=_0x2b8838['concat'](_0xfff1e7[_0x561cbf(0x3cc)]()[_0x561cbf(0x8b4)](_0x484da3=>_0x484da3&&_0x484da3[_0x561cbf(0x28a)][_0x561cbf(0x93d)](_0x4ea98b)?Number(RegExp['$1'])/0x64:0x0)),_0x514c46=_0x514c46['concat'](_0x276155[_0x561cbf(0x3cc)]()[_0x561cbf(0x8b4)](_0x55a03a=>_0x55a03a&&_0x55a03a[_0x561cbf(0x28a)][_0x561cbf(0x93d)](_0x42b238)?Number(RegExp['$1']):0x0)),_0x2b8838=_0x2b8838[_0x561cbf(0xbf3)](_0x276155[_0x561cbf(0x3cc)]()[_0x561cbf(0x8b4)](_0x5b8654=>_0x5b8654&&_0x5b8654[_0x561cbf(0x28a)]['match'](_0x4f5423)?Number(RegExp['$1'])/0x64:0x0));if(this[_0x561cbf(0x30a)]()[_0x561cbf(0x28a)]['match'](_0x42b238)){if('XfWzh'===_0x561cbf(0x94a))_0x514c46[_0x561cbf(0x21f)](Number(RegExp['$1']));else{const _0x1a4677=_0x21bc00(_0x21e57e['$1']);return[_0x38118f[_0x561cbf(0x8a6)]()['members']()[_0x1a4677]];}}this[_0x561cbf(0x30a)]()[_0x561cbf(0x28a)][_0x561cbf(0x93d)](_0x4f5423)&&_0x2b8838[_0x561cbf(0x21f)](Number(RegExp['$1']));_0x41ea1e=_0x514c46['reduce']((_0x46e830,_0x82c5bc)=>_0x46e830-_0x82c5bc,_0x41ea1e);if(_0x41ea1e>0x0){if(_0x561cbf(0x647)==='lxkon'){const _0x58b12c=_0x454d8c[_0x561cbf(0x67d)][_0x561cbf(0x869)][_0x561cbf(0x335)];if(_0x58b12c[_0x561cbf(0x599)]){const _0x6616ea=new _0x3007cb();_0x6616ea[_0x561cbf(0x6de)]=_0x5c85a6[_0x561cbf(0x256)](_0x58b12c[_0x561cbf(0x599)]),_0x6616ea['x']=_0x58b12c[_0x561cbf(0x5ac)]||0x0,_0x6616ea['y']=_0x58b12c[_0x561cbf(0x68d)]||0x0,this['addChildToBack'](_0x6616ea),this[_0x561cbf(0x4be)]=_0x6616ea;}if(_0x58b12c['StatusWindowAttachmentFront']){const _0x22b7f5=new _0x28983f();_0x22b7f5['bitmap']=_0x2bae1d[_0x561cbf(0x256)](_0x58b12c[_0x561cbf(0x1dd)]),_0x22b7f5['x']=_0x58b12c[_0x561cbf(0x3cf)]||0x0,_0x22b7f5['y']=_0x58b12c[_0x561cbf(0x7c0)]||0x0,this[_0x561cbf(0x340)](_0x22b7f5),this[_0x561cbf(0x7ad)]=_0x22b7f5;}}else _0x41ea1e=_0x2b8838[_0x561cbf(0x7b8)]((_0x33820e,_0x34df16)=>_0x33820e*(0x1-_0x34df16),_0x41ea1e);}return _0x41ea1e;},VisuMZ[_0x4b2772(0x67d)]['Game_Action_executeDamage']=Game_Action[_0x4b2772(0x632)][_0x4b2772(0x462)],Game_Action[_0x4b2772(0x632)][_0x4b2772(0x462)]=function(_0x3c4d20,_0x57f221){const _0x489f1c=_0x4b2772;_0x57f221=_0x57f221*this[_0x489f1c(0xb6a)][_0x489f1c(0x66b)],_0x57f221+=this[_0x489f1c(0xb6a)]['damageFlat']*(_0x57f221>=0x0?0x1:-0x1),_0x57f221=this[_0x489f1c(0xb5c)](_0x489f1c(0xaef),_0x3c4d20,_0x57f221,![]),_0x57f221=this[_0x489f1c(0xc6a)](_0x57f221),_0x57f221=Math['round'](_0x57f221),this[_0x489f1c(0x3c6)]=_0x57f221,this[_0x489f1c(0xc89)]=this[_0x489f1c(0xc89)]||0x0,this[_0x489f1c(0xc89)]+=_0x57f221,VisuMZ[_0x489f1c(0x67d)][_0x489f1c(0xbb0)][_0x489f1c(0xb2b)](this,_0x3c4d20,_0x57f221),this[_0x489f1c(0xb5c)](_0x489f1c(0x268),_0x3c4d20,_0x57f221,!![]);},Game_Action[_0x4b2772(0x632)][_0x4b2772(0xc6a)]=function(_0x1d7971){const _0x1c6f87=_0x4b2772;if(this[_0x1c6f87(0x716)]())return _0x1d7971;return _0x1d7971=this[_0x1c6f87(0xcc3)](_0x1d7971),_0x1d7971=this[_0x1c6f87(0x9e5)](_0x1d7971),_0x1d7971;},Game_Action[_0x4b2772(0x632)][_0x4b2772(0x716)]=function(){const _0x11b721=_0x4b2772,_0x246f3a=/<BYPASS DAMAGE CAP>/i;if(this[_0x11b721(0x30a)]()[_0x11b721(0x28a)][_0x11b721(0x93d)](_0x246f3a))return!![];if(this[_0x11b721(0x28e)]()[_0x11b721(0x3cc)]()['some'](_0x368e23=>_0x368e23&&_0x368e23[_0x11b721(0x28a)][_0x11b721(0x93d)](_0x246f3a)))return!![];return!VisuMZ[_0x11b721(0x67d)]['Settings'][_0x11b721(0x681)][_0x11b721(0x50d)];},Game_Action[_0x4b2772(0x632)]['applySoftDamageCap']=function(_0x3e404e){const _0x4760d7=_0x4b2772;if(!VisuMZ[_0x4760d7(0x67d)][_0x4760d7(0x869)][_0x4760d7(0x681)][_0x4760d7(0xc5c)])return _0x3e404e;const _0x2336d5=/<BYPASS SOFT DAMAGE CAP>/i;if(this['item']()[_0x4760d7(0x28a)][_0x4760d7(0x93d)](_0x2336d5))return _0x3e404e;if(this[_0x4760d7(0x28e)]()['traitObjects']()[_0x4760d7(0xb67)](_0x10fa12=>_0x10fa12&&_0x10fa12[_0x4760d7(0x28a)]['match'](_0x2336d5)))return _0x3e404e;const _0x36af8a=_0x3e404e<0x0?-0x1:0x1;_0x3e404e=Math[_0x4760d7(0x9e3)](_0x3e404e);let _0xfab58c=this[_0x4760d7(0x28e)]()['softDamageCapRate']();this['item']()[_0x4760d7(0x28a)][_0x4760d7(0x93d)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x4760d7(0xc4f)==='XyYlk'?_0xfab58c+=Number(RegExp['$1'])/0x64:_0x425af5['command119']([_0x45c0d5]));_0xfab58c=_0xfab58c[_0x4760d7(0xac4)](0.01,0x1);const _0x365044=this[_0x4760d7(0x5ad)](),_0x1e9fb0=_0xfab58c*_0x365044;if(_0x3e404e>_0x1e9fb0&&_0x365044>_0x1e9fb0){if(_0x4760d7(0xcb1)!=='incRE')this[_0x4760d7(0x9c6)]();else{_0x3e404e-=_0x1e9fb0;const _0x567bde=VisuMZ['BattleCore']['Settings'][_0x4760d7(0x681)][_0x4760d7(0xc32)],_0x178647=Math[_0x4760d7(0x20e)](0x1-_0x3e404e/((_0x365044-_0x1e9fb0)*_0x567bde+_0x3e404e),0.01);_0x3e404e*=_0x178647,_0x3e404e+=_0x1e9fb0;}}return _0x3e404e*_0x36af8a;},Game_Action[_0x4b2772(0x632)][_0x4b2772(0x5ad)]=function(){const _0x582a52=_0x4b2772;if(this[_0x582a52(0x30a)]()['note'][_0x582a52(0x93d)](/<DAMAGE CAP:[ ](\d+)>/i)){if('oLLKt'===_0x582a52(0x772))this[_0x582a52(0xb4e)]();else return Number(RegExp['$1']);}else return this[_0x582a52(0x28e)]()['hardDamageCap']();},Game_Action[_0x4b2772(0x632)][_0x4b2772(0x9e5)]=function(_0x318a7){const _0x1b149e=_0x4b2772;console[_0x1b149e(0x790)](_0x318a7);let _0x7b2797=this[_0x1b149e(0x5ad)]();return _0x318a7[_0x1b149e(0xac4)](-_0x7b2797,_0x7b2797);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x455)]=Game_Action['prototype'][_0x4b2772(0x792)],Game_Action[_0x4b2772(0x632)][_0x4b2772(0x792)]=function(_0x43884f){const _0x29bf39=_0x4b2772;this[_0x29bf39(0xb5c)]('PreApply%1JS',_0x43884f,0x0,!![]),VisuMZ[_0x29bf39(0x67d)][_0x29bf39(0x455)][_0x29bf39(0xb2b)](this,_0x43884f),this['applyBattleCoreJS'](_0x29bf39(0x3f4),_0x43884f,this['_executedValue']||0x0,!![]),this[_0x29bf39(0x284)](_0x43884f);},Game_Action['prototype'][_0x4b2772(0xb5c)]=function(_0x39efdc,_0x11d31d,_0x2b2cd3,_0x5d681b){const _0x3b6f3a=_0x4b2772;if(this[_0x3b6f3a(0x2aa)]||this[_0x3b6f3a(0x841)])return;_0x2b2cd3=_0x2b2cd3||0x0;const _0x1a5907=_0x2b2cd3,_0x1bd934=VisuMZ[_0x3b6f3a(0x67d)][_0x3b6f3a(0x869)][_0x3b6f3a(0x7f4)],_0x38cf2f=_0x39efdc['format']('');if(_0x1bd934[_0x38cf2f]){if(_0x3b6f3a(0x2f5)===_0x3b6f3a(0x2f5)){_0x2b2cd3=_0x1bd934[_0x38cf2f][_0x3b6f3a(0xb2b)](this,_0x2b2cd3,_0x11d31d);if(_0x5d681b)_0x2b2cd3=_0x1a5907;}else{const _0x458cb9=this[_0x3b6f3a(0x92d)]()?this['actor']():this['enemy']();if(_0x458cb9){const _0x415ba2=_0x458cb9['note'];if(_0x415ba2[_0x3b6f3a(0x93d)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return _0x50f598(_0x57d4e9['$1'])*0.01;else{if(_0x415ba2[_0x3b6f3a(0x93d)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return _0xb1fb19(_0x275b7e['$1'])||0x0;}}return 0x1;}}let _0x1f229a=VisuMZ[_0x3b6f3a(0x67d)]['createKeyJS'](this[_0x3b6f3a(0x30a)](),_0x39efdc[_0x3b6f3a(0x934)](''));if(VisuMZ[_0x3b6f3a(0x67d)]['JS'][_0x1f229a]){_0x2b2cd3=VisuMZ[_0x3b6f3a(0x67d)]['JS'][_0x1f229a]['call'](this,this[_0x3b6f3a(0x28e)](),_0x11d31d,this[_0x3b6f3a(0x30a)](),_0x2b2cd3);if(_0x5d681b)_0x2b2cd3=_0x1a5907;}for(const _0x1c134d of this[_0x3b6f3a(0x28e)]()[_0x3b6f3a(0x3cc)]()){if(!_0x1c134d)continue;_0x1f229a=VisuMZ['BattleCore']['createKeyJS'](_0x1c134d,_0x39efdc['format']('AsUser'));if(VisuMZ[_0x3b6f3a(0x67d)]['JS'][_0x1f229a]){if(_0x3b6f3a(0x25c)===_0x3b6f3a(0x4a3))_0x1bc672[_0x3a5265][_0x3b6f3a(0xb2b)](this,_0x5ea8f0);else{_0x2b2cd3=VisuMZ[_0x3b6f3a(0x67d)]['JS'][_0x1f229a]['call'](this,this['subject'](),_0x11d31d,_0x1c134d,_0x2b2cd3);if(_0x5d681b)_0x2b2cd3=_0x1a5907;}}}for(const _0x5500b7 of _0x11d31d[_0x3b6f3a(0x3cc)]()){if(!_0x5500b7)continue;_0x1f229a=VisuMZ[_0x3b6f3a(0x67d)][_0x3b6f3a(0x623)](_0x5500b7,_0x39efdc[_0x3b6f3a(0x934)]('AsTarget'));if(VisuMZ['BattleCore']['JS'][_0x1f229a]){_0x2b2cd3=VisuMZ['BattleCore']['JS'][_0x1f229a]['call'](this,this[_0x3b6f3a(0x28e)](),_0x11d31d,_0x5500b7,_0x2b2cd3);if(_0x5d681b)_0x2b2cd3=_0x1a5907;}}return _0x2b2cd3;},Game_Action[_0x4b2772(0x632)][_0x4b2772(0x648)]=function(_0x3d646d){const _0x4ee82=_0x4b2772,_0x216a4f=this[_0x4ee82(0xc89)]||0x0,_0x1715f6=VisuMZ['BattleCore'][_0x4ee82(0x869)][_0x4ee82(0x7f4)],_0x2c50c2=_0x3d646d[_0x4ee82(0x934)]('');_0x1715f6[_0x2c50c2]&&_0x1715f6[_0x2c50c2][_0x4ee82(0xb2b)](this,_0x216a4f);let _0x58ca52=VisuMZ[_0x4ee82(0x67d)]['createKeyJS'](this[_0x4ee82(0x30a)](),_0x3d646d);VisuMZ[_0x4ee82(0x67d)]['JS'][_0x58ca52]&&VisuMZ[_0x4ee82(0x67d)]['JS'][_0x58ca52][_0x4ee82(0xb2b)](this,this[_0x4ee82(0x28e)](),this[_0x4ee82(0x28e)](),this[_0x4ee82(0x30a)](),_0x216a4f);for(const _0x12d7d1 of this[_0x4ee82(0x28e)]()['traitObjects']()){if(_0x4ee82(0x8e8)!==_0x4ee82(0x4db)){if(!_0x12d7d1)continue;_0x58ca52=VisuMZ[_0x4ee82(0x67d)]['createKeyJS'](_0x12d7d1,_0x3d646d),VisuMZ[_0x4ee82(0x67d)]['JS'][_0x58ca52]&&VisuMZ[_0x4ee82(0x67d)]['JS'][_0x58ca52][_0x4ee82(0xb2b)](this,this[_0x4ee82(0x28e)](),this[_0x4ee82(0x28e)](),_0x12d7d1,_0x216a4f);}else _0x492319=_0x27b186[_0x4ee82(0x67b)]/_0x293f93[_0x4ee82(0x949)]()[_0x4ee82(0x1e9)],_0x1d0feb*=_0x177619,_0x46bef0+=_0x5aed06[_0x4ee82(0x67b)]/_0x4cc457[_0x4ee82(0x949)]()[_0x4ee82(0x1e9)]/0x2;}},Game_Action[_0x4b2772(0x632)]['speed']=function(){const _0x22ebef=_0x4b2772;return VisuMZ[_0x22ebef(0x67d)][_0x22ebef(0x869)][_0x22ebef(0x7f4)][_0x22ebef(0x44a)]['call'](this);},Game_Action[_0x4b2772(0x632)][_0x4b2772(0xab5)]=function(){const _0x7e19d7=_0x4b2772;return VisuMZ[_0x7e19d7(0x67d)][_0x7e19d7(0x869)][_0x7e19d7(0x7f4)]['AllowRandomSpeed'];},Game_Action[_0x4b2772(0x632)]['isCustomBattleScope']=function(){const _0xfa27d6=_0x4b2772;return this[_0xfa27d6(0x30a)]()['note'][_0xfa27d6(0x93d)](/<JS TARGETS>/i);},Game_Action['prototype'][_0x4b2772(0xb2a)]=function(){const _0x5c5e7a=_0x4b2772;if(!this[_0x5c5e7a(0x40c)]&&this['subject']()['isConfused']())return![];if(this[_0x5c5e7a(0x6aa)]())return!![];return typeof this[_0x5c5e7a(0x30a)]()[_0x5c5e7a(0x55e)]===_0x5c5e7a(0x37e);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xb56)]=Game_Action[_0x4b2772(0x632)]['isForOpponent'],Game_Action['prototype'][_0x4b2772(0x431)]=function(){const _0x35eb61=_0x4b2772;return this[_0x35eb61(0xb2a)]()&&!this[_0x35eb61(0x6aa)]()?this[_0x35eb61(0xb94)]():'Eydwq'===_0x35eb61(0x460)?VisuMZ[_0x35eb61(0x67d)][_0x35eb61(0xb56)][_0x35eb61(0xb2b)](this):(_0x291fe9=_0x1a914a[_0x35eb61(0x67d)][_0x35eb61(0x869)][_0x35eb61(0x681)][_0x35eb61(0x987)][_0x35eb61(0xb2b)](this,_0x3d5f6e),_0x3fbcaa=this['_multipliers'][_0x35eb61(0x3a2)]*_0x5cf648+this[_0x35eb61(0xb6a)][_0x35eb61(0xc79)],_0x39c7a5);},Game_Action[_0x4b2772(0x632)][_0x4b2772(0xb94)]=function(){const _0x2f6124=_0x4b2772,_0x2cc2a3=this['item']()[_0x2f6124(0x55e)];return _0x2cc2a3[_0x2f6124(0x93d)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x4b2772(0x67d)]['Game_Action_isForFriend']=Game_Action[_0x4b2772(0x632)][_0x4b2772(0x32b)],Game_Action[_0x4b2772(0x632)]['isForFriend']=function(){const _0x6e2066=_0x4b2772;if(this[_0x6e2066(0xb2a)]()&&!this[_0x6e2066(0x6aa)]()){if(_0x6e2066(0xa3c)==='HiVQn')return this['isForFriendBattleCore']();else{if(this[_0x6e2066(0x63a)]['name']===_0x6e2066(0xb77))return;if(this[_0x6e2066(0xb70)]<=0x0)return;const _0x2db569=this[_0x6e2066(0xb70)],_0x2ccb05=this[_0x6e2066(0x29b)],_0xd30ad=this[_0x6e2066(0x283)];_0x423148[_0x6e2066(0x2d5)]?this[_0x6e2066(0xacf)]=this['applyEasing'](this['opacity'],this[_0x6e2066(0x82e)],_0x2db569,_0x2ccb05,_0xd30ad):this[_0x6e2066(0xacf)]=(this[_0x6e2066(0xacf)]*(_0x2db569-0x1)+this[_0x6e2066(0x82e)])/_0x2db569;this[_0x6e2066(0xb70)]--;if(this['_opacityDuration']<=0x0)this[_0x6e2066(0x244)]();}}else{if(_0x6e2066(0x674)!==_0x6e2066(0x4c4))return VisuMZ['BattleCore'][_0x6e2066(0x80c)][_0x6e2066(0xb2b)](this);else _0x508120=_0x18aa70[_0x6e2066(0xa26)](_0x3f38e7);}},Game_Action[_0x4b2772(0x632)][_0x4b2772(0x572)]=function(){const _0x370cc1=_0x4b2772,_0x55eea3=this[_0x370cc1(0x30a)]()['scope'];return _0x55eea3[_0x370cc1(0x93d)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x62f)]=Game_Action[_0x4b2772(0x632)][_0x4b2772(0x679)],Game_Action[_0x4b2772(0x632)][_0x4b2772(0x679)]=function(){const _0x3b168b=_0x4b2772;if(this[_0x3b168b(0xb2a)]()&&!this[_0x3b168b(0x6aa)]())return this['isForRandomBattleCore']();else{if(_0x3b168b(0x467)!=='ofVEY')return VisuMZ[_0x3b168b(0x67d)][_0x3b168b(0x62f)][_0x3b168b(0xb2b)](this);else{const _0xc40520=this[_0x3b168b(0x92d)]()?this[_0x3b168b(0xa05)]():this['enemy']();if(_0xc40520){const _0x1ca83e=_0xc40520['note'];if(_0x1ca83e[_0x3b168b(0x93d)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return _0x46a034(_0xf6e349['$1'])*0.01;else{if(_0x1ca83e[_0x3b168b(0x93d)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return _0x1a89b1(_0x5be2fc['$1'])||0x0;}}return 0x1;}}},Game_Action[_0x4b2772(0x632)][_0x4b2772(0xb47)]=function(){const _0x59049d=_0x4b2772,_0x511bd4=this[_0x59049d(0x30a)]()[_0x59049d(0x55e)];return _0x511bd4[_0x59049d(0x93d)](/(?:RAND|RANDOM)/i);},VisuMZ['BattleCore'][_0x4b2772(0x9aa)]=Game_Action['prototype'][_0x4b2772(0xc5f)],Game_Action[_0x4b2772(0x632)][_0x4b2772(0xc5f)]=function(){const _0x12b063=_0x4b2772;if(this[_0x12b063(0xb2a)]()&&!this[_0x12b063(0x6aa)]()){if(_0x12b063(0x5c8)!==_0x12b063(0x5c8))this[_0x12b063(0x475)][_0x12b063(0xc94)]=!![];else return this[_0x12b063(0x812)]();}else{if(_0x12b063(0x73c)!==_0x12b063(0x73c))this[_0x12b063(0x475)][_0x12b063(0xc94)]=_0x4fc2d7[_0x12b063(0x632)][_0x12b063(0x322)][_0x12b063(0xb2b)](this);else return VisuMZ[_0x12b063(0x67d)][_0x12b063(0x9aa)][_0x12b063(0xb2b)](this);}},Game_Action['prototype'][_0x4b2772(0x812)]=function(){const _0x4dae50=_0x4b2772,_0x7645dc=this[_0x4dae50(0x30a)]()['scope'];if(_0x7645dc['match'](/RANDOM/i))return![];if(_0x7645dc[_0x4dae50(0x93d)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x7645dc[_0x4dae50(0x93d)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ[_0x4dae50(0x67d)][_0x4dae50(0x9aa)]['call'](this);},VisuMZ['BattleCore']['Game_Action_makeTargets']=Game_Action[_0x4b2772(0x632)]['makeTargets'],Game_Action[_0x4b2772(0x632)][_0x4b2772(0x826)]=function(){const _0x36bf30=_0x4b2772;let _0x1a6439=[];if(this[_0x36bf30(0xb2a)]()){if('CExVl'==='CExVl')_0x1a6439=this[_0x36bf30(0x2c7)]();else{if(!_0x5b39a1[_0x36bf30(0x344)]())return;if(this[_0x36bf30(0x7c3)])return;this['_displayBattleCoreTransitionErrorMsg']=!![];let _0x399b76='';_0x399b76+=_0x36bf30(0x444),_0x399b76+=_0x36bf30(0xbdf)[_0x36bf30(0x934)](_0xa1d1f6[_0x36bf30(0x8fe)]),_0x38e3b8(_0x399b76);}}else _0x1a6439=VisuMZ['BattleCore'][_0x36bf30(0x405)][_0x36bf30(0xb2b)](this);return _0x1a6439=this[_0x36bf30(0x42e)](_0x1a6439),_0x1a6439;},Game_Action[_0x4b2772(0x632)][_0x4b2772(0x2c7)]=function(){const _0x2e20fe=_0x4b2772;let _0x23d34e=[];const _0x367c1d=String(this['item']()[_0x2e20fe(0x55e)]),_0x1f0a5c=VisuMZ[_0x2e20fe(0x67d)][_0x2e20fe(0x623)](this[_0x2e20fe(0x30a)](),'Targets');if(VisuMZ[_0x2e20fe(0x67d)]['JS'][_0x1f0a5c]){_0x23d34e=VisuMZ[_0x2e20fe(0x67d)]['Game_Action_makeTargets'][_0x2e20fe(0xb2b)](this);const _0x39430f=VisuMZ[_0x2e20fe(0x67d)][_0x2e20fe(0x623)](this['item'](),_0x2e20fe(0xa4f));return _0x23d34e=VisuMZ[_0x2e20fe(0x67d)]['JS'][_0x39430f][_0x2e20fe(0xb2b)](this,this[_0x2e20fe(0x28e)](),_0x23d34e),this['repeatTargets'](_0x23d34e);}if(_0x367c1d['match'](/(\d+) RANDOM ANY/i)){let _0x3d67a2=Number(RegExp['$1']);while(_0x3d67a2--){const _0x575856=Math[_0x2e20fe(0x619)](0x2)===0x0?this['opponentsUnit']():this[_0x2e20fe(0x8a6)]();_0x23d34e[_0x2e20fe(0x21f)](_0x575856[_0x2e20fe(0x941)]());}return this[_0x2e20fe(0x807)](_0x23d34e);}if(_0x367c1d[_0x2e20fe(0x93d)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){if(_0x2e20fe(0x8ab)==='yBOLM')this[_0x2e20fe(0x37d)][_0x2e20fe(0x8eb)]['x']=0x1/(this[_0x2e20fe(0x8eb)]['x']||0.001),this[_0x2e20fe(0x37d)][_0x2e20fe(0x8eb)]['y']=0x1/(this['scale']['y']||0.001);else{let _0x1b007e=Number(RegExp['$1']);while(_0x1b007e--){if(_0x2e20fe(0x959)===_0x2e20fe(0x959))_0x23d34e[_0x2e20fe(0x21f)](this['opponentsUnit']()['trueRandomTarget']());else return _0x2a14d5['aliveMembers']()[_0x2e20fe(0xb8c)](_0x20ea91=>_0x20ea91!==_0x2b62b4);}return this[_0x2e20fe(0x807)](_0x23d34e);}}if(_0x367c1d[_0x2e20fe(0x93d)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){if(_0x2e20fe(0x60e)==='SaiGd')return!![];else{let _0x519985=Number(RegExp['$1']);while(_0x519985--){if(_0x2e20fe(0x347)===_0x2e20fe(0x347))_0x23d34e['push'](this[_0x2e20fe(0x8a6)]()[_0x2e20fe(0x941)]());else{let _0x4f3108=_0x121b97(_0x3462ce['$1']);while(_0x4f3108--){_0x5d393e[_0x2e20fe(0x21f)](this[_0x2e20fe(0x8a6)]()[_0x2e20fe(0x941)]());}return this[_0x2e20fe(0x807)](_0x4dd8ab);}}return this[_0x2e20fe(0x807)](_0x23d34e);}}if(_0x367c1d[_0x2e20fe(0x93d)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i)){if(_0x2e20fe(0x34b)===_0x2e20fe(0x34b))return _0x23d34e[_0x2e20fe(0x21f)](...this[_0x2e20fe(0x8a6)]()[_0x2e20fe(0x668)]()[_0x2e20fe(0xb8c)](_0x304ab8=>_0x304ab8!==this[_0x2e20fe(0x28e)]())),this['repeatTargets'](_0x23d34e);else this[_0x2e20fe(0xa1f)](this[_0x2e20fe(0x4be)]);}return VisuMZ[_0x2e20fe(0x67d)]['Game_Action_makeTargets'][_0x2e20fe(0xb2b)](this);},Game_Action['prototype'][_0x4b2772(0x456)]=function(_0x22a2b4){const _0xc02a96=_0x4b2772,_0x4e2758=[];for(let _0x4584af=0x0;_0x4584af<this['numTargets']();_0x4584af++){_0x4e2758[_0xc02a96(0x21f)](_0x22a2b4[_0xc02a96(0x941)]());}return _0x4e2758;},Game_Action[_0x4b2772(0x632)]['applyTargetFilters']=function(_0x58c82c){const _0x4d1c82=_0x4b2772;if(!this[_0x4d1c82(0x30a)]())return _0x58c82c;const _0xe8d8e9=this[_0x4d1c82(0x30a)]()['note'];return _0xe8d8e9['match'](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0x58c82c[_0x4d1c82(0x9cc)](this[_0x4d1c82(0x28e)]()),_0x58c82c;},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x27b)]=Game_Action[_0x4b2772(0x632)][_0x4b2772(0x345)],Game_Action[_0x4b2772(0x632)][_0x4b2772(0x345)]=function(_0x12a19d,_0x3db3ce){const _0x2eaa2c=_0x4b2772;VisuMZ['BattleCore'][_0x2eaa2c(0x27b)][_0x2eaa2c(0xb2b)](this,_0x12a19d,_0x3db3ce);if(!_0x12a19d[_0x2eaa2c(0x909)]())return;for(const _0x1ba04a of this[_0x2eaa2c(0x28e)]()['attackStates']()){if(_0x1ba04a===_0x12a19d[_0x2eaa2c(0x7c4)]()){let _0xd0b341=_0x3db3ce[_0x2eaa2c(0x753)];_0xd0b341*=_0x12a19d[_0x2eaa2c(0x651)](_0x1ba04a),_0xd0b341*=this[_0x2eaa2c(0x28e)]()['attackStatesRate'](_0x1ba04a),_0xd0b341*=this[_0x2eaa2c(0xad1)](_0x12a19d),Math['random']()<_0xd0b341&&(_0x12a19d[_0x2eaa2c(0xac0)]=!![],this[_0x2eaa2c(0xc44)](_0x12a19d));}}},VisuMZ['BattleCore'][_0x4b2772(0xa08)]=Game_Action['prototype'][_0x4b2772(0x871)],Game_Action[_0x4b2772(0x632)][_0x4b2772(0x871)]=function(_0x6afe0e,_0x11de4c){const _0x4381c4=_0x4b2772;VisuMZ['BattleCore'][_0x4381c4(0xa08)][_0x4381c4(0xb2b)](this,_0x6afe0e,_0x11de4c);if(!_0x6afe0e[_0x4381c4(0x909)]())return;if(_0x11de4c[_0x4381c4(0x328)]!==_0x6afe0e['deathStateId']())return;let _0x2ee6d2=_0x11de4c[_0x4381c4(0x753)];!this[_0x4381c4(0xbb6)]()&&(_0x2ee6d2*=_0x6afe0e['stateRate'](_0x11de4c[_0x4381c4(0x328)]),_0x2ee6d2*=this['lukEffectRate'](_0x6afe0e));if(Math['random']()<_0x2ee6d2){if(_0x4381c4(0x43a)===_0x4381c4(0x43a))_0x6afe0e[_0x4381c4(0xac0)]=!![],this[_0x4381c4(0xc44)](_0x6afe0e);else return this['partyCommandWindowRect']();}},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xc58)]=Game_Action[_0x4b2772(0x632)][_0x4b2772(0x6f5)],Game_Action[_0x4b2772(0x632)][_0x4b2772(0x6f5)]=function(){const _0x370204=_0x4b2772;VisuMZ[_0x370204(0x67d)][_0x370204(0xc58)][_0x370204(0xb2b)](this),this[_0x370204(0x499)](),this['resetResultSwitches']();},Game_Action[_0x4b2772(0x632)][_0x4b2772(0x499)]=function(){const _0x317d09=_0x4b2772;if(!SceneManager[_0x317d09(0x885)]())return;const _0xd31670=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x577d46=this[_0x317d09(0x30a)]()[_0x317d09(0x28a)][_0x317d09(0x93d)](_0xd31670);if(_0x577d46)for(const _0x4038fb of _0x577d46){if(_0x317d09(0x211)===_0x317d09(0x211)){if(!_0x4038fb)continue;_0x4038fb['match'](_0xd31670);const _0xe801e=String(RegExp['$1'])[_0x317d09(0xc24)](',')[_0x317d09(0x8b4)](_0x45b789=>String(_0x45b789)[_0x317d09(0x75a)]()),_0x44edac=_0xe801e[_0x317d09(0x8b4)](_0x412bfa=>DataManager[_0x317d09(0x91e)](_0x412bfa));for(const _0x1f46af of _0x44edac){const _0x7c9dec=$dataCommonEvents[_0x1f46af];if(_0x7c9dec){if(_0x317d09(0x2a5)!==_0x317d09(0x3f5))$gameTemp[_0x317d09(0xb6d)](_0x1f46af);else{let _0x56fc67=_0x30aba9[_0x317d09(0x23c)](_0x4432fb['BattleCore'][_0x317d09(0xcaa)]['call'](this));return _0x222eeb[_0x317d09(0x67d)][_0x317d09(0xc90)](_0x56fc67);}}}}else{const _0x22bb4e=_0x3689f9[_0x317d09(0x632)][_0x317d09(0xcc6)]()*0x2+0x4;let _0x5911e4=_0x468884[_0x317d09(0xcd9)]-_0x22bb4e;_0x22be29['VisuMZ_0_CoreEngine']&&_0x5d5570[_0x317d09(0xb40)]()&&(_0x5911e4+=_0x22bb4e);const _0x389e18=this[_0x317d09(0x90a)](),_0x5ada9e=_0x3c03bf[_0x317d09(0x218)]-_0x389e18-this[_0x317d09(0x765)]()[_0x317d09(0x4c3)]+_0x2183a8['prototype']['extraHeight'](),_0x188402=0x0;return new _0x21e86c(_0x188402,_0x389e18,_0x5911e4,_0x5ada9e);}}},DataManager[_0x4b2772(0x91e)]=function(_0x35c5e9){const _0x5b46ba=_0x4b2772;_0x35c5e9=_0x35c5e9['toUpperCase']()[_0x5b46ba(0x75a)](),this[_0x5b46ba(0xc52)]=this[_0x5b46ba(0xc52)]||{};if(this[_0x5b46ba(0xc52)][_0x35c5e9])return this[_0x5b46ba(0xc52)][_0x35c5e9];for(const _0x197518 of $dataCommonEvents){if(_0x5b46ba(0x8af)==='fmEvH'){if(!_0x197518)continue;let _0x12c74a=_0x197518['name'];_0x12c74a=_0x12c74a['replace'](/\x1I\[(\d+)\]/gi,''),_0x12c74a=_0x12c74a[_0x5b46ba(0x970)](/\\I\[(\d+)\]/gi,''),this[_0x5b46ba(0xc52)][_0x12c74a[_0x5b46ba(0x5fd)]()[_0x5b46ba(0x75a)]()]=_0x197518['id'];}else{const _0x109969=this[_0x5b46ba(0x77e)][_0x5b46ba(0x6de)];this[_0x5b46ba(0x77e)]['setFrame'](0x0,0x0,_0x109969[_0x5b46ba(0x67b)],_0x109969[_0x5b46ba(0x4c3)]);}}return this[_0x5b46ba(0xc52)][_0x35c5e9]||0x0;},Game_Action['prototype'][_0x4b2772(0x761)]=function(){const _0x526331=_0x4b2772;if(!SceneManager[_0x526331(0x885)]())return;const _0x756266=VisuMZ[_0x526331(0x67d)]['Settings']['Mechanics'];_0x756266['SwitchCritical']&&$gameSwitches['setValue'](_0x756266['SwitchCritical'],![]);if(_0x756266[_0x526331(0x71b)]){if(_0x526331(0x505)!=='xGlQp')$gameSwitches[_0x526331(0xab8)](_0x756266['SwitchMissEvade'],![]);else{const _0x1c4398=this['weapons'](),_0x33d9dc=_0x1c4398[0x0]?_0x1c4398[0x0][_0x526331(0x67a)]:0x0,_0x541a26=_0x41f9c0[_0x526331(0x41b)][_0x33d9dc];_0x541a26&&this[_0x526331(0x58b)](_0x541a26[_0x526331(0xbd0)]);}}_0x756266[_0x526331(0x35d)]&&(_0x526331(0xbb8)===_0x526331(0x288)?(_0x134ef2[_0x526331(0x67d)][_0x526331(0x7e3)][_0x526331(0xb2b)](this),this['updateOnceParallelInterpreters']()):$gameVariables[_0x526331(0xab8)](_0x756266[_0x526331(0x35d)],0x0));if(_0x756266['VariableHeal']){if('KkiXv'===_0x526331(0xb8a))return _0x3daea1[_0x526331(0x67d)]['Settings'][_0x526331(0x8b9)][_0x526331(0x22e)];else $gameVariables['setValue'](_0x756266[_0x526331(0xbf9)],0x0);}},Game_Action[_0x4b2772(0x632)][_0x4b2772(0x284)]=function(_0x318cce){const _0xdd48c3=_0x4b2772;if(!SceneManager['isSceneBattle']())return;if(!_0x318cce)return;const _0x4791b9=_0x318cce[_0xdd48c3(0x4b5)](),_0x37b43c=VisuMZ[_0xdd48c3(0x67d)]['Settings'][_0xdd48c3(0x7f4)];_0x37b43c['SwitchCritical']&&_0x4791b9[_0xdd48c3(0x357)]&&$gameSwitches[_0xdd48c3(0xab8)](_0x37b43c['SwitchCritical'],!![]);_0x37b43c[_0xdd48c3(0x71b)]&&(_0x4791b9[_0xdd48c3(0xa36)]||_0x4791b9[_0xdd48c3(0x771)])&&$gameSwitches[_0xdd48c3(0xab8)](_0x37b43c[_0xdd48c3(0x71b)],!![]);if(_0x37b43c[_0xdd48c3(0x35d)]){let _0x45b8af=$gameVariables['value'](_0x37b43c['VariableDmg']);_0x4791b9[_0xdd48c3(0x2d7)]>0x0&&(_0x45b8af+=Math['abs'](_0x4791b9[_0xdd48c3(0x2d7)])),$gameVariables[_0xdd48c3(0xab8)](_0x37b43c[_0xdd48c3(0x35d)],_0x45b8af);}if(_0x37b43c[_0xdd48c3(0xbf9)]){if(_0xdd48c3(0xa00)===_0xdd48c3(0x43e))this['isTpb']()&&this[_0xdd48c3(0x1ec)]==='battleEnd'&&(this[_0xdd48c3(0x203)]=null),_0x20c4b8['BattleCore'][_0xdd48c3(0x642)][_0xdd48c3(0xb2b)](this);else{let _0x24d59e=$gameVariables['value'](_0x37b43c['VariableHeal']);_0x4791b9[_0xdd48c3(0x2d7)]<0x0&&(_0xdd48c3(0xbaf)===_0xdd48c3(0xbaf)?_0x24d59e+=Math[_0xdd48c3(0x9e3)](_0x4791b9[_0xdd48c3(0x2d7)]):this[_0xdd48c3(0xc54)]()?this['updateStaticSvBattlerFrames']():(this[_0xdd48c3(0x360)](),_0x5b9908[_0xdd48c3(0x67d)][_0xdd48c3(0x667)][_0xdd48c3(0xb2b)](this))),$gameVariables[_0xdd48c3(0xab8)](_0x37b43c[_0xdd48c3(0xbf9)],_0x24d59e);}}},VisuMZ[_0x4b2772(0x67d)]['Game_BattlerBase_initMembers']=Game_BattlerBase['prototype'][_0x4b2772(0xbf2)],Game_BattlerBase['prototype']['initMembers']=function(){const _0x2f8cec=_0x4b2772;VisuMZ[_0x2f8cec(0x67d)][_0x2f8cec(0x252)][_0x2f8cec(0xb2b)](this),this[_0x2f8cec(0xc80)]();},Game_BattlerBase[_0x4b2772(0x632)][_0x4b2772(0xc80)]=function(){const _0x69da1=_0x4b2772;this[_0x69da1(0x2bc)]=![];},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xcad)]=Game_BattlerBase[_0x4b2772(0x632)][_0x4b2772(0xa58)],Game_BattlerBase[_0x4b2772(0x632)][_0x4b2772(0xa58)]=function(){const _0x21cdfe=_0x4b2772;this[_0x21cdfe(0x475)]={},VisuMZ[_0x21cdfe(0x67d)][_0x21cdfe(0xcad)]['call'](this);},Game_BattlerBase['prototype']['checkCacheKey']=function(_0xc97741){const _0x37ba07=_0x4b2772;return this[_0x37ba07(0x475)]=this[_0x37ba07(0x475)]||{},this[_0x37ba07(0x475)][_0xc97741]!==undefined;},Game_BattlerBase['prototype'][_0x4b2772(0xb01)]=function(){const _0x57daa7=_0x4b2772;if(this[_0x57daa7(0x475)][_0x57daa7(0xb01)]!==undefined)return this[_0x57daa7(0x475)][_0x57daa7(0xb01)];const _0x596f8a=/<DAMAGE CAP:[ ](\d+)>/i,_0x3e9adf=this[_0x57daa7(0x3cc)]()[_0x57daa7(0x8b4)](_0x10228c=>_0x10228c&&_0x10228c[_0x57daa7(0x28a)][_0x57daa7(0x93d)](_0x596f8a)?Number(RegExp['$1']):0x0);let _0x3e878d=_0x3e9adf[_0x57daa7(0x1e9)]>0x0?Math[_0x57daa7(0x20e)](..._0x3e9adf):0x0;if(_0x3e878d<=0x0)_0x3e878d=VisuMZ[_0x57daa7(0x67d)][_0x57daa7(0x869)]['Damage']['DefaultHardCap'];return this[_0x57daa7(0x475)][_0x57daa7(0xb01)]=_0x3e878d,this[_0x57daa7(0x475)][_0x57daa7(0xb01)];},Game_BattlerBase[_0x4b2772(0x632)]['softDamageCapRate']=function(){const _0x3e7424=_0x4b2772;if(this['_cache'][_0x3e7424(0x1e4)]!==undefined)return this[_0x3e7424(0x475)][_0x3e7424(0x1e4)];let _0x2dd97c=VisuMZ[_0x3e7424(0x67d)][_0x3e7424(0x869)]['Damage'][_0x3e7424(0x699)];const _0x4f3c9f=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x2548a0=this[_0x3e7424(0x3cc)]()['map'](_0x18b338=>_0x18b338&&_0x18b338[_0x3e7424(0x28a)][_0x3e7424(0x93d)](_0x4f3c9f)?Number(RegExp['$1'])/0x64:0x0);return _0x2dd97c=_0x2548a0[_0x3e7424(0x7b8)]((_0x4e9394,_0x3cb450)=>_0x4e9394+_0x3cb450,_0x2dd97c),this[_0x3e7424(0x475)][_0x3e7424(0x1e4)]=_0x2dd97c,this[_0x3e7424(0x475)][_0x3e7424(0x1e4)][_0x3e7424(0xac4)](0.01,0x1);},VisuMZ[_0x4b2772(0x67d)]['Game_BattlerBase_die']=Game_BattlerBase['prototype'][_0x4b2772(0xc18)],Game_BattlerBase['prototype'][_0x4b2772(0xc18)]=function(){const _0x592362=_0x4b2772;VisuMZ['BattleCore']['Game_BattlerBase_die'][_0x592362(0xb2b)](this),SceneManager[_0x592362(0x885)]()&&this[_0x592362(0x66d)]('dead');},Game_BattlerBase['prototype'][_0x4b2772(0x947)]=function(){const _0x4c55e1=_0x4b2772;if(!SceneManager[_0x4c55e1(0x885)]())return null;if(!SceneManager['_scene'][_0x4c55e1(0x34a)])return null;return SceneManager['_scene']['_spriteset'][_0x4c55e1(0xa4b)](this);},Game_BattlerBase[_0x4b2772(0x632)][_0x4b2772(0x435)]=function(){const _0x453b8f=_0x4b2772;return VisuMZ['BattleCore'][_0x453b8f(0x869)][_0x453b8f(0xb6b)][_0x453b8f(0x404)];},Game_BattlerBase[_0x4b2772(0x632)][_0x4b2772(0x89f)]=function(){const _0x400f0a=_0x4b2772;return VisuMZ[_0x400f0a(0x67d)][_0x400f0a(0x869)]['Actor']['AnchorY'];},Game_BattlerBase[_0x4b2772(0x632)][_0x4b2772(0x322)]=function(){const _0x3d1ab5=_0x4b2772;if(this['isActor']&&this['isActor']()){if('orvyp'!==_0x3d1ab5(0x754))return VisuMZ['BattleCore'][_0x3d1ab5(0x869)][_0x3d1ab5(0xb6b)][_0x3d1ab5(0xa0d)];else this['_distortionSprite'][_0x3d1ab5(0x340)](this['_dragonbonesSpriteContainer']);}else{if(_0x3d1ab5(0xb06)===_0x3d1ab5(0xb06))return VisuMZ[_0x3d1ab5(0x67d)][_0x3d1ab5(0x869)][_0x3d1ab5(0x74a)][_0x3d1ab5(0xa0d)];else _0x2bf5db[_0x3d1ab5(0x632)][_0x3d1ab5(0xb50)][_0x3d1ab5(0xb2b)](this,_0x2c0bc8,_0x118279,_0x22a168,_0x55e442);}},Game_BattlerBase[_0x4b2772(0x632)][_0x4b2772(0x240)]=function(){return!![];},Game_BattlerBase['prototype'][_0x4b2772(0x45f)]=function(){return 0x0;},Game_BattlerBase[_0x4b2772(0x632)][_0x4b2772(0x7ba)]=function(){return 0x0;},Game_BattlerBase[_0x4b2772(0x632)][_0x4b2772(0x683)]=function(_0x3e76d8){const _0x6c1060=_0x4b2772;if(!_0x3e76d8)return 0x0;let _0x1c3e19=0x0;const _0x51e26f=_0x3e76d8[_0x6c1060(0x28a)];_0x51e26f['match'](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x1c3e19+=Number(RegExp['$1']));if(_0x51e26f[_0x6c1060(0x93d)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if('LIMac'!==_0x6c1060(0xb55))_0x1c3e19+=Number(RegExp['$1']);else{const _0x4ab3c4=0xa,_0x3ef7bb=0x12c*_0x4ab3c4,_0x4c0793=0x1e*_0x4ab3c4;this[_0x6c1060(0x615)](_0x3ef7bb,0x0,_0x4c0793);}}return _0x1c3e19;},Game_BattlerBase[_0x4b2772(0x632)]['createBattleUIOffsetY']=function(_0x3d904d){const _0x423df6=_0x4b2772;if(!_0x3d904d)return 0x0;let _0x4b42ca=0x0;const _0x1b2288=_0x3d904d[_0x423df6(0x28a)];_0x1b2288[_0x423df6(0x93d)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x4b42ca+=Number(RegExp['$1']));if(_0x1b2288[_0x423df6(0x93d)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x423df6(0xa39)!==_0x423df6(0xcca))_0x4b42ca+=Number(RegExp['$2']);else{const _0x29da51=_0x537481[_0x562967];if(!_0x29da51)return![];if(_0x29da51[_0x423df6(0xc64)][_0x423df6(0x1e9)]<=0x1)return![];return!![];}}return _0x4b42ca;},VisuMZ['BattleCore'][_0x4b2772(0x258)]=Game_BattlerBase[_0x4b2772(0x632)][_0x4b2772(0x82a)],Game_BattlerBase['prototype'][_0x4b2772(0x82a)]=function(_0xe35cd7){const _0x3aa954=_0x4b2772;if(_0xe35cd7===this[_0x3aa954(0x7c4)]()&&this[_0x3aa954(0x909)]())return!![];return VisuMZ['BattleCore'][_0x3aa954(0x258)][_0x3aa954(0xb2b)](this,_0xe35cd7);},Game_BattlerBase['prototype'][_0x4b2772(0x909)]=function(){return this['_immortal'];},Game_BattlerBase[_0x4b2772(0x632)]['setImmortal']=function(_0x560804){const _0x546f9e=_0x4b2772;_0x560804?this[_0x546f9e(0x889)]():_0x546f9e(0x510)===_0x546f9e(0x746)?(_0x47bb34[_0x546f9e(0x67d)][_0x546f9e(0x58d)][_0x546f9e(0xb2b)](this),this[_0x546f9e(0x831)]()):this[_0x546f9e(0x33e)]();},Game_BattlerBase[_0x4b2772(0x632)][_0x4b2772(0x889)]=function(){const _0x52d502=_0x4b2772;if(this['isDead']())return;this[_0x52d502(0x2bc)]=!![],this[_0x52d502(0xac0)]=![];},Game_BattlerBase[_0x4b2772(0x632)][_0x4b2772(0x33e)]=function(){const _0x80b9c9=_0x4b2772,_0x4a5540=this[_0x80b9c9(0x8ca)]();this[_0x80b9c9(0x2bc)]=![],_0x4a5540&&this[_0x80b9c9(0xac0)]&&this[_0x80b9c9(0xc18)](),this[_0x80b9c9(0xac0)]=![],this[_0x80b9c9(0xa58)](),this[_0x80b9c9(0x3ef)]()&&_0x4a5540&&(_0x80b9c9(0xa78)!==_0x80b9c9(0xa78)?(_0x161091[_0x80b9c9(0x67d)][_0x80b9c9(0x51f)]['call'](this),this['y']=_0x1df176[_0x80b9c9(0x4c3)]*0xa):(this[_0x80b9c9(0x310)](),this[_0x80b9c9(0x249)]()));},VisuMZ[_0x4b2772(0x67d)]['Game_Action_numRepeats']=Game_Action[_0x4b2772(0x632)]['numRepeats'],Game_Action[_0x4b2772(0x632)][_0x4b2772(0x56c)]=function(){const _0x3bc45d=_0x4b2772;if(this[_0x3bc45d(0x30a)]()){if(_0x3bc45d(0x6ca)!==_0x3bc45d(0x6ca))this['onDisabledPartyCommandSelection']();else return VisuMZ[_0x3bc45d(0x67d)][_0x3bc45d(0x6b7)][_0x3bc45d(0xb2b)](this);}else{if(_0x3bc45d(0x424)===_0x3bc45d(0x424))return 0x0;else{const _0x2573d4=_0x45d5fa[_0x414350[_0x3bc45d(0x3ec)]],_0x758c9=_0x2573d4[_0x3bc45d(0xc64)][_0x3bc45d(0x1e9)]-0x2,_0x584c7a=_0x2573d4[_0x3bc45d(0xc64)][_0x758c9];if(_0x584c7a&&_0x584c7a['code']!==0xe6){const _0x5c1466={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x159eb2=_0x2573d4['list'][_0x3bc45d(0x7c8)]();_0x2573d4['list']['unshift'](_0x5c1466),_0x2573d4[_0x3bc45d(0xc64)][_0x3bc45d(0x4cf)](_0x159eb2);}}}},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xc9a)]=Game_Action[_0x4b2772(0x632)][_0x4b2772(0x8b8)],Game_Action[_0x4b2772(0x632)][_0x4b2772(0x8b8)]=function(){const _0x169754=_0x4b2772;if(this[_0x169754(0x28e)]()&&this['subject']()[_0x169754(0x7e5)]()){if(_0x169754(0xc10)!==_0x169754(0xc10)){if(this['hasSvBattler']()){if(this[_0x169754(0x87a)]()>=0x1)return!![];return this['svBattlerData']()[_0x169754(0xa23)];}else return!![];}else VisuMZ[_0x169754(0x67d)][_0x169754(0xc9a)][_0x169754(0xb2b)](this);}else this[_0x169754(0x4d6)]();},VisuMZ[_0x4b2772(0x67d)]['Game_BattlerBase_canAttack']=Game_BattlerBase['prototype'][_0x4b2772(0x7e5)],Game_BattlerBase[_0x4b2772(0x632)][_0x4b2772(0x7e5)]=function(){const _0x1f60d1=_0x4b2772;if(!this[_0x1f60d1(0x5db)]())return![];return VisuMZ['BattleCore'][_0x1f60d1(0xc4d)][_0x1f60d1(0xb2b)](this);},Game_BattlerBase['prototype']['canAttackBattleCore']=function(){const _0x4beeb0=_0x4b2772;for(const _0x4b59ad of this['traitObjects']()){if(!_0x4b59ad)continue;if(_0x4b59ad['note'][_0x4beeb0(0x93d)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x5df)]=Game_Action[_0x4b2772(0x632)][_0x4b2772(0x78a)],Game_Action[_0x4b2772(0x632)][_0x4b2772(0x78a)]=function(){const _0x520ba7=_0x4b2772;this[_0x520ba7(0x28e)]()['canGuard']()&&(_0x520ba7(0x373)!==_0x520ba7(0x373)?_0x5b154e[_0x520ba7(0x784)]([this],_0x3ebea8):VisuMZ['BattleCore'][_0x520ba7(0x5df)][_0x520ba7(0xb2b)](this));},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x320)]=Game_BattlerBase['prototype'][_0x4b2772(0x6bb)],Game_BattlerBase[_0x4b2772(0x632)]['canGuard']=function(){const _0x17bd0b=_0x4b2772;if(!this[_0x17bd0b(0x549)]())return![];return VisuMZ['BattleCore'][_0x17bd0b(0x320)]['call'](this);},Game_BattlerBase[_0x4b2772(0x632)][_0x4b2772(0x549)]=function(){const _0x191ed6=_0x4b2772;for(const _0x13dffd of this[_0x191ed6(0x3cc)]()){if(!_0x13dffd)continue;if(_0x13dffd[_0x191ed6(0x28a)]['match'](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase['prototype'][_0x4b2772(0x1d4)]=function(){const _0x46a6dc=_0x4b2772;for(const _0x56dec1 of this[_0x46a6dc(0x3cc)]()){if(!_0x56dec1)continue;if(_0x56dec1[_0x46a6dc(0x28a)][_0x46a6dc(0x93d)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},Game_Battler['prototype'][_0x4b2772(0xab5)]=function(){const _0x5cd133=_0x4b2772;return VisuMZ['BattleCore'][_0x5cd133(0x869)][_0x5cd133(0x7f4)][_0x5cd133(0xb7b)];},VisuMZ['BattleCore']['Game_Battler_regenerateAll']=Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x1f4)],Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x1f4)]=function(){const _0x2d79de=_0x4b2772;if(SceneManager[_0x2d79de(0x885)]()){if(BattleManager[_0x2d79de(0x797)]()){if(_0x2d79de(0x33d)!=='XULDB'){if(this[_0x2d79de(0x59d)]()<=0x0)return;}else _0x1614e2[_0x2d79de(0x4a9)](),_0x552192['applyForcedGameTroopSettingsBattleCore'](_0xf837f5),_0xb4d58[_0x2d79de(0x67d)]['Game_Troop_setup'][_0x2d79de(0xb2b)](this,_0x18633e),this[_0x2d79de(0x4e6)]();}else{if($gameTroop[_0x2d79de(0x59d)]()<=0x0)return;}}if(SceneManager['isSceneBattle']()&&BattleManager['isTpb']()&&this['_lastRegenFrameCount']===Graphics[_0x2d79de(0xa3e)])return;this[_0x2d79de(0xa55)]=Graphics[_0x2d79de(0xa3e)],SceneManager[_0x2d79de(0x885)]()&&this[_0x2d79de(0xb68)]('PreRegenerateJS'),VisuMZ['BattleCore'][_0x2d79de(0x40a)][_0x2d79de(0xb2b)](this),SceneManager[_0x2d79de(0x885)]()&&(_0x2d79de(0x65c)!==_0x2d79de(0x65c)?_0x4f5cf8=_0x9eeb43['x']+_0x1e0f92[_0x2d79de(0x810)]+0x8:(this['regenerateAllBattleCore'](),this[_0x2d79de(0xb68)](_0x2d79de(0xc6b))));},Game_Battler[_0x4b2772(0x632)]['regenerateAllBattleCore']=function(){const _0x3e045b=_0x4b2772;if(SceneManager[_0x3e045b(0x885)]())for(const _0x183f3d of this[_0x3e045b(0x3cc)]()){if(!_0x183f3d)continue;this['onRegeneratePlayStateAnimation'](_0x183f3d);}},Game_Battler[_0x4b2772(0x632)][_0x4b2772(0xbe1)]=function(_0x20bbc3){const _0x12be2a=_0x4b2772;if(!Imported[_0x12be2a(0x2d5)])return;if(!SceneManager[_0x12be2a(0x885)]())return;if(this[_0x12be2a(0x3ef)]())return;if(this[_0x12be2a(0xaab)]())return;if(_0x20bbc3[_0x12be2a(0x28a)]['match'](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x2c9e35=Number(RegExp['$1']);$gameTemp['requestFauxAnimation']([this],_0x2c9e35,![],![]);}},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x8a1)]=Game_Battler['prototype']['startTpbTurn'],Game_Battler[_0x4b2772(0x632)][_0x4b2772(0xbb2)]=function(){const _0x4de165=_0x4b2772;this[_0x4de165(0xb68)]('PreStartTurnJS'),VisuMZ[_0x4de165(0x67d)][_0x4de165(0x8a1)][_0x4de165(0xb2b)](this),this[_0x4de165(0xb68)](_0x4de165(0xb29));},VisuMZ[_0x4b2772(0x67d)]['Game_Battler_onTurnEnd']=Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x967)],Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x967)]=function(){const _0x242ab8=_0x4b2772;this[_0x242ab8(0xb68)](_0x242ab8(0x559)),VisuMZ[_0x242ab8(0x67d)][_0x242ab8(0x922)][_0x242ab8(0xb2b)](this),this['processBattleCoreJS'](_0x242ab8(0x6ba));},Game_Battler[_0x4b2772(0x632)][_0x4b2772(0xb68)]=function(_0x16b386){const _0x4e9a9b=_0x4b2772;if(this[_0x4e9a9b(0x2aa)]||this['_tempActor'])return;const _0x1ec508=VisuMZ[_0x4e9a9b(0x67d)][_0x4e9a9b(0x869)]['Mechanics'];if(_0x1ec508[_0x16b386])_0x1ec508[_0x16b386][_0x4e9a9b(0xb2b)](this);for(const _0x52e90b of this[_0x4e9a9b(0x3cc)]()){if(!_0x52e90b)continue;key=VisuMZ[_0x4e9a9b(0x67d)][_0x4e9a9b(0x623)](_0x52e90b,_0x16b386),VisuMZ[_0x4e9a9b(0x67d)]['JS'][key]&&(_0x4e9a9b(0x378)===_0x4e9a9b(0x378)?VisuMZ[_0x4e9a9b(0x67d)]['JS'][key][_0x4e9a9b(0xb2b)](this,this,this,_0x52e90b,0x0):_0x59231d[_0x4e9a9b(0x67a)]=_0x46b9fb[_0x4e9a9b(0x933)](_0x54e9d6['$1']));}},Game_Battler[_0x4b2772(0x632)][_0x4b2772(0xa8e)]=function(){const _0x248572=_0x4b2772;return VisuMZ[_0x248572(0x67d)]['Settings']['Actor'][_0x248572(0x3d8)]||![];},Game_Battler[_0x4b2772(0x632)][_0x4b2772(0xc9c)]=function(){const _0x8ea393=_0x4b2772;if(this[_0x8ea393(0x983)]()){if(this['chantStyle']()){if(this['_actions'][_0x8ea393(0xb67)](_0x27cd97=>_0x27cd97[_0x8ea393(0x30a)]()&&_0x27cd97[_0x8ea393(0x72c)]()))return!![];}else{if('IYSNc'===_0x8ea393(0xc8a))return this['displayBattleCoreTransitionErrorMsg'](_0x186d33);else{if(this[_0x8ea393(0x9fd)][_0x8ea393(0xb67)](_0x89f280=>_0x89f280[_0x8ea393(0x30a)]()&&_0x89f280[_0x8ea393(0x99f)]())){if('gZkeQ'===_0x8ea393(0x7f1))return!![];else _0x52e369=this[_0x8ea393(0x57d)][_0x8ea393(0x9ce)]??_0x5b905f,_0x154aa0=this[_0x8ea393(0x57d)][_0x8ea393(0xcc8)]??_0xe38733;}}}}if(BattleManager['isTpb']()&&this[_0x8ea393(0x4f5)]===_0x8ea393(0x4ae))return this['chantStyle']()?this[_0x8ea393(0x7f8)]()&&this[_0x8ea393(0x7f8)]()[_0x8ea393(0x30a)]()&&this[_0x8ea393(0x7f8)]()[_0x8ea393(0x72c)]():this[_0x8ea393(0x7f8)]()&&this['currentAction']()[_0x8ea393(0x30a)]()&&this[_0x8ea393(0x7f8)]()[_0x8ea393(0x99f)]();return![];},Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x726)]=function(){const _0x2de85b=_0x4b2772;if(BattleManager[_0x2de85b(0x797)]()&&this[_0x2de85b(0x4f5)]===_0x2de85b(0x4ae)){if('cWoRP'!==_0x2de85b(0x521))_0x150213['VisuMZ_3_SideviewBattleUI']?this['_forcedBattleLayout']=_0x2de85b(0x867):this[_0x2de85b(0x207)]=_0x2de85b(0x523);else{if(this[_0x2de85b(0xa8e)]()){if('ApkCj'!==_0x2de85b(0xa47)){const _0x336a1c=this[_0x2de85b(0x421)]();(_0x336a1c===_0x2de85b(0x8d1)||this[_0x2de85b(0x925)]())&&(this[_0x2de85b(0x9c5)][_0x2de85b(0x38d)](),this[_0x2de85b(0x9c5)][_0x2de85b(0xccf)]&&this[_0x2de85b(0x9c5)]['show'](),this[_0x2de85b(0xcb6)][_0x2de85b(0x38d)](),this[_0x2de85b(0xcb6)][_0x2de85b(0xccf)]&&this[_0x2de85b(0xcb6)][_0x2de85b(0x6cc)]());}else return this[_0x2de85b(0x7f8)]()&&this[_0x2de85b(0x7f8)]()[_0x2de85b(0x30a)]()&&!this['currentAction']()[_0x2de85b(0x72c)]();}else return this[_0x2de85b(0x7f8)]()&&this['currentAction']()[_0x2de85b(0x30a)]()&&!this[_0x2de85b(0x7f8)]()[_0x2de85b(0x99f)]();}}return![];},VisuMZ[_0x4b2772(0x67d)]['Game_Battler_clearDamagePopup']=Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x398)],Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x398)]=function(){const _0x585401=_0x4b2772;VisuMZ[_0x585401(0x67d)][_0x585401(0x406)]['call'](this),this['_damagePopupArray']=[];},Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x396)]=function(){const _0x4b2d93=_0x4b2772;if(!this['_damagePopupArray'])this[_0x4b2d93(0x398)]();return this[_0x4b2d93(0x68f)][_0x4b2d93(0x1e9)]>0x0;},Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x25b)]=function(){const _0x86e7ea=_0x4b2772;if(!SceneManager['isSceneBattle']())return;if(!this[_0x86e7ea(0x68f)])this[_0x86e7ea(0x398)]();this[_0x86e7ea(0x567)]();const _0x491e58=this[_0x86e7ea(0x947)]();if(_0x491e58)_0x491e58[_0x86e7ea(0xaf7)]();},Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x567)]=function(){const _0x51478a=_0x4b2772,_0x22d93a=this['result']();if(_0x22d93a[_0x51478a(0xa36)]||_0x22d93a['evaded']){const _0x222e0e=JsonEx[_0x51478a(0x23c)](_0x22d93a);_0x222e0e[_0x51478a(0x64e)]=![],_0x222e0e[_0x51478a(0x9ec)]=0x0,this[_0x51478a(0x68f)]['push'](_0x222e0e);}if(_0x22d93a[_0x51478a(0x64e)]){if('fBsoU'!==_0x51478a(0x847))this[_0x51478a(0x340)](this[_0x51478a(0x962)]);else{const _0x3d00ac=JsonEx['makeDeepCopy'](_0x22d93a);_0x3d00ac[_0x51478a(0xa36)]=![],_0x3d00ac[_0x51478a(0x771)]=![],_0x3d00ac[_0x51478a(0x9ec)]=0x0,this['_damagePopupArray'][_0x51478a(0x21f)](_0x3d00ac);}}if(_0x22d93a['mpDamage']!==0x0){const _0x4e2e1c=JsonEx[_0x51478a(0x23c)](_0x22d93a);_0x4e2e1c[_0x51478a(0xa36)]=![],_0x4e2e1c['evaded']=![],_0x4e2e1c[_0x51478a(0x64e)]=![],this[_0x51478a(0x68f)]['push'](_0x4e2e1c);}},Game_Battler['prototype'][_0x4b2772(0x472)]=function(){const _0x4d64ae=_0x4b2772;if(!this[_0x4d64ae(0x68f)])this[_0x4d64ae(0x398)]();if(VisuMZ[_0x4d64ae(0x67d)][_0x4d64ae(0x869)]['Damage']['NewPopupBottom']){if(_0x4d64ae(0x6db)===_0x4d64ae(0x908)){const _0x1ea742=_0x1fd85f[_0x4d64ae(0xae6)](_0x12034f);return _0x1ea742>=0x0?[_0x20055d[_0x1ea742+0x1]||_0x3f59f7]:[_0x12715d];}else return this[_0x4d64ae(0x68f)][_0x4d64ae(0x44e)]();}else return this[_0x4d64ae(0x68f)][_0x4d64ae(0x7c8)]();},Game_Battler[_0x4b2772(0x632)]['setupTextPopup']=function(_0x37db0b,_0x105c32){const _0x283491=_0x4b2772;if(!SceneManager['isSceneBattle']())return;if(!this[_0x283491(0x947)]())return;if(_0x37db0b['length']<=0x0)return;_0x105c32=_0x105c32||{},_0x105c32['textColor']=_0x105c32[_0x283491(0x8ad)]||_0x283491(0x614),_0x105c32[_0x283491(0x349)]=_0x105c32[_0x283491(0x349)]||[0x0,0x0,0x0,0x0],_0x105c32[_0x283491(0x356)]=_0x105c32[_0x283491(0x356)]||0x0,this[_0x283491(0x947)]()[_0x283491(0x82d)](_0x37db0b,_0x105c32);},Game_Battler['prototype'][_0x4b2772(0x2db)]=function(_0x14d154,_0x1d2247,_0x29b90d){const _0x24df24=_0x4b2772;if(!SceneManager[_0x24df24(0x885)]())return;if(!this[_0x24df24(0x947)]())return;if(_0x1d2247[_0x24df24(0x1e9)]<=0x0)return;_0x29b90d=_0x29b90d||{},_0x29b90d[_0x24df24(0x8ad)]=_0x29b90d['textColor']||_0x24df24(0x614),_0x29b90d[_0x24df24(0x349)]=_0x29b90d['flashColor']||[0x0,0x0,0x0,0x0],_0x29b90d[_0x24df24(0x356)]=_0x29b90d[_0x24df24(0x356)]||0x0,this['battler']()['setupIconTextPopup'](_0x14d154,_0x1d2247,_0x29b90d);},Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x5c4)]=function(){const _0x3346d6=_0x4b2772;if(this[_0x3346d6(0xaab)]())return![];if(this[_0x3346d6(0x8ca)]()&&this[_0x3346d6(0x845)]())return!![];if(this[_0x3346d6(0x9d4)]()&&this[_0x3346d6(0x3e7)]()){if(_0x3346d6(0xb8b)===_0x3346d6(0x8c0)){const _0x3e1a57=_0x37a3fe[_0x3346d6(0x2c6)]?_0x1851c4['SkillsStatesCore'][_0x3346d6(0x869)]['Skills']:_0x3251c7[_0x3346d6(0x67d)][_0x3346d6(0x869)][_0x3346d6(0xc03)],_0x45e623=_0x3e5fd5[_0x3346d6(0x550)][_0x3346d6(0x41a)](_0x587b56),_0x1f871d=_0x45e623?_0x3e1a57[_0x3346d6(0x94f)]:_0x3e1a57[_0x3346d6(0xc2f)];_0x5c00f2='\x5cI[%1]%2'[_0x3346d6(0x934)](_0x1f871d,_0x43e9ca);}else{if(this[_0x3346d6(0x3ef)]()&&this[_0x3346d6(0x7ca)]())return![];}}else{if(this[_0x3346d6(0x3ef)]())return![];}return!![];},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xaae)]=Game_Battler['prototype'][_0x4b2772(0xb6c)],Game_Battler['prototype'][_0x4b2772(0xb6c)]=function(){const _0x29c7a3=_0x4b2772;VisuMZ[_0x29c7a3(0x67d)][_0x29c7a3(0xaae)][_0x29c7a3(0xb2b)](this),this[_0x29c7a3(0x714)]();},Game_Battler['prototype'][_0x4b2772(0x88f)]=function(){return!![];},Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x46d)]=function(){return![];},VisuMZ[_0x4b2772(0x67d)]['Game_Battler_onBattleStart']=Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x9d1)],Game_Battler['prototype'][_0x4b2772(0x9d1)]=function(_0x5905bd){const _0x4c5c04=_0x4b2772;VisuMZ[_0x4c5c04(0x67d)]['Game_Battler_onBattleStart'][_0x4c5c04(0xb2b)](this,_0x5905bd),this[_0x4c5c04(0x496)](_0x5905bd),this[_0x4c5c04(0x398)]();},Game_Battler['prototype'][_0x4b2772(0x496)]=function(_0x2cc798){this['setBattlerFlip'](![]),this['_forcedHomeX']=undefined,this['_forcedHomeY']=undefined;},VisuMZ[_0x4b2772(0x67d)]['Game_Battler_onBattleEnd']=Game_Battler[_0x4b2772(0x632)][_0x4b2772(0xa74)],Game_Battler[_0x4b2772(0x632)][_0x4b2772(0xa74)]=function(){const _0x4dde3c=_0x4b2772;VisuMZ[_0x4dde3c(0x67d)][_0x4dde3c(0xac3)][_0x4dde3c(0xb2b)](this),this['onBattleEndBattleCore']();},Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x522)]=function(){const _0x212ef6=_0x4b2772;this[_0x212ef6(0x9ce)]=undefined,this[_0x212ef6(0xcc8)]=undefined;},VisuMZ[_0x4b2772(0x67d)]['Game_Battler_performActionStart']=Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x850)],Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x850)]=function(_0xf3831){const _0x39e812=_0x4b2772;VisuMZ[_0x39e812(0x67d)][_0x39e812(0xb3c)]['call'](this,_0xf3831);if(!_0xf3831['isGuard']()){if(_0x39e812(0xcd1)===_0x39e812(0xcd1)){const _0x43b52e=this['battler']();_0x43b52e&&_0x43b52e[_0x39e812(0x400)]();}else _0x467916['motionIdle']=_0x397403(_0x37af79['$1'])[_0x39e812(0xa42)]()[_0x39e812(0x75a)]();}this['setBattlerFlip'](![]);},Game_Battler['prototype'][_0x4b2772(0x7d7)]=function(){const _0x273862=_0x4b2772,_0x2da953=this[_0x273862(0x452)];this[_0x273862(0x452)]=![];if(BattleManager[_0x273862(0x6c7)]()&&this[_0x273862(0xb2d)]()){const _0x646b2b=this[_0x273862(0x947)]();if(_0x646b2b&&_0x2da953)_0x646b2b[_0x273862(0x400)]();return;}const _0x5339b0=this[_0x273862(0x947)]();if(_0x5339b0)_0x5339b0[_0x273862(0x653)]();this[_0x273862(0x28d)](![]),this[_0x273862(0x249)]();},Game_Battler[_0x4b2772(0x632)]['performActionMotions']=function(_0x335da0){const _0x291f5a=_0x4b2772;if(_0x335da0[_0x291f5a(0x7da)]())this[_0x291f5a(0x425)]();else{if(_0x335da0['isGuard']())_0x291f5a(0x822)!=='rQdNG'?this[_0x291f5a(0xb21)]()?this[_0x291f5a(0x241)]():this[_0x291f5a(0xc38)]():this['requestMotion'](_0x291f5a(0x895));else{if(_0x335da0[_0x291f5a(0x72c)]())this[_0x291f5a(0x66d)](_0x291f5a(0x4d9));else{if(_0x335da0['isSkill']())[0x1,0x2,0x5,0x6]['includes'](_0x335da0[_0x291f5a(0x30a)]()[_0x291f5a(0x33f)][_0x291f5a(0x9b1)])?this[_0x291f5a(0x425)]():this[_0x291f5a(0x66d)]('skill');else _0x335da0[_0x291f5a(0x58f)]()&&('DVqDF'==='DVqDF'?this[_0x291f5a(0x66d)]('item'):this[_0x291f5a(0x797)]()?this[_0x291f5a(0x37b)]():_0x1c94c5[_0x291f5a(0x67d)]['BattleManager_selectNextCommand'][_0x291f5a(0xb2b)](this));}}}},Game_Battler[_0x4b2772(0x632)][_0x4b2772(0xc49)]=function(){const _0x15811b=_0x4b2772;return $dataSystem[_0x15811b(0x41b)][0x0];},Game_Battler[_0x4b2772(0x632)][_0x4b2772(0xc41)]=function(){const _0x405450=_0x4b2772,_0x2d865b=this[_0x405450(0xc49)]();return _0x2d865b?_0x2d865b[_0x405450(0xbd0)]:0x0;},Game_Battler[_0x4b2772(0x632)][_0x4b2772(0xb65)]=function(_0x4531a3){const _0xdfff2f=_0x4b2772;if(!$gameSystem[_0xdfff2f(0x7d1)]())return;const _0x2b7593=this[_0xdfff2f(0x947)](),_0x356a70=_0x4531a3[_0xdfff2f(0x947)]();if(!_0x2b7593||!_0x356a70)return;const _0x2bacab=_0x356a70[_0xdfff2f(0xc20)],_0x1c71d4=_0x356a70[_0xdfff2f(0xaba)];this['moveBattlerToPoint'](_0x2bacab,_0x1c71d4,0x0,![],_0xdfff2f(0x97b),-0x1),_0x2b7593[_0xdfff2f(0x979)]();const _0x4c54b4=VisuMZ['BattleCore'][_0xdfff2f(0x869)][_0xdfff2f(0xcb4)];let _0x2e2bf8=(_0x356a70[_0xdfff2f(0x67b)]+_0x2b7593[_0xdfff2f(0x67b)])/0x2;_0x2e2bf8*=this[_0xdfff2f(0x92d)]()?0x1:-0x1;let _0x3afa5e=_0x4c54b4[_0xdfff2f(0x57f)]*(this[_0xdfff2f(0x92d)]()?0x1:-0x1);_0x4531a3[_0xdfff2f(0x434)](_0x2e2bf8,_0x3afa5e,0x0,![],_0xdfff2f(0x97b)),_0x356a70[_0xdfff2f(0x979)]();},Game_Battler['prototype'][_0x4b2772(0x66d)]=function(_0xa01c33){const _0x586f45=_0x4b2772;if(SceneManager[_0x586f45(0x885)]()){if(_0x586f45(0x22f)!==_0x586f45(0x22f)){const _0x5ba54a=new _0x2c4a50();_0x5ba54a[_0x586f45(0x6de)]=_0x35a7ef[_0x586f45(0x256)](_0x53be2c['StatusWindowAttachmentBack']),_0x5ba54a['x']=_0x5afb39[_0x586f45(0x5ac)]||0x0,_0x5ba54a['y']=_0x220fe0[_0x586f45(0x68d)]||0x0,this[_0x586f45(0xa1f)](_0x5ba54a),this[_0x586f45(0x4be)]=_0x5ba54a;}else{const _0x4b3d66=this['battler']();_0x4b3d66&&(_0x4b3d66[_0x586f45(0x918)](_0xa01c33),[_0x586f45(0x46f),_0x586f45(0xcdc),_0x586f45(0xcb5)][_0x586f45(0x41a)](_0xa01c33)&&this[_0x586f45(0x3a5)]());}}this[_0x586f45(0x714)]();},Game_Battler[_0x4b2772(0x632)]['performWeaponAnimation']=function(){},Game_Battler[_0x4b2772(0x632)]['startWeaponAnimation']=function(_0x54da5d){const _0xbfb628=_0x4b2772;if(SceneManager['isSceneBattle']()){if(_0xbfb628(0x813)!==_0xbfb628(0x813))this[_0xbfb628(0x426)]=![];else{const _0x50b292=this[_0xbfb628(0x947)]();if(_0x50b292)_0x50b292['forceWeaponAnimation'](_0x54da5d);}}},Game_Battler['prototype'][_0x4b2772(0x964)]=function(){const _0x45c325=_0x4b2772;if(SceneManager[_0x45c325(0x885)]()){const _0x3558b5=this['getAttackWeaponAnimationId']();this[_0x45c325(0x58b)](_0x3558b5);}},Game_Battler[_0x4b2772(0x632)]['performCastAnimation']=function(_0x41a4e8,_0x4d310d){const _0x2f2443=_0x4b2772;if(!_0x41a4e8)return;if(!_0x41a4e8[_0x2f2443(0x30a)]())return;if(_0x41a4e8[_0x2f2443(0x7da)]())return;if(_0x41a4e8['isGuard']())return;if(_0x41a4e8['isItem']())return;let _0x24c364=0x0;const _0xc43c76=VisuMZ[_0x2f2443(0x67d)][_0x2f2443(0x869)]['ActionSequence'],_0xa37c1c=_0x41a4e8[_0x2f2443(0x30a)]()['note'];if(_0xa37c1c[_0x2f2443(0x93d)](/<CAST ANIMATION: (\d+)>/i))_0x24c364=Number(RegExp['$1']);else{if(_0xa37c1c[_0x2f2443(0x93d)](/<NO CAST ANIMATION>/i)){if(_0x2f2443(0xa61)==='hHmsR')return;else _0x5a320b[_0x2f2443(0x67d)][_0x2f2443(0x935)][_0x2f2443(0xb2b)](this),!this[_0x2f2443(0x57d)]&&this[_0x2f2443(0x6cf)]&&(this['_hpGaugeSprite'][_0x2f2443(0x30d)]=![]);}else{if(_0x41a4e8[_0x2f2443(0xbb6)]())_0x2f2443(0x9f5)!==_0x2f2443(0x33c)?_0x24c364=_0xc43c76['CastCertain']:(_0xa28192+=_0x5145a4[_0x2f2443(0x92d)]()?-_0x9b4f4:_0x4e6272,_0x357b38+=_0xcf4766[_0x2f2443(0x92d)]()?-_0x4856e9:_0x23042c);else{if(_0x41a4e8['isPhysical']())_0x2f2443(0x700)==='mkaIK'?_0x24c364=_0xc43c76[_0x2f2443(0x8d2)]:(this[_0x2f2443(0xa57)]=_0x38e71f||0x0,this[_0x2f2443(0x475)]={});else _0x41a4e8['isMagical']()&&(_0x24c364=_0xc43c76[_0x2f2443(0x286)]);}}}_0x24c364>0x0&&$gameTemp['requestAnimation']([this],_0x24c364,!!_0x4d310d);},Game_Battler['prototype'][_0x4b2772(0x21b)]=function(){const _0x2320ca=_0x4b2772;SoundManager[_0x2320ca(0xa66)]();let _0xe2997f=VisuMZ[_0x2320ca(0x67d)][_0x2320ca(0x869)][_0x2320ca(0xcb4)]['ReflectAnimation'];_0xe2997f>0x0&&(Imported[_0x2320ca(0x2d5)]?$gameTemp[_0x2320ca(0x784)]([this],_0xe2997f):$gameTemp[_0x2320ca(0x6f3)]([this],_0xe2997f));},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x7dd)]=Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x3d4)],Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x3d4)]=function(){const _0x22152f=_0x4b2772;VisuMZ[_0x22152f(0x67d)]['Game_Battler_performDamage'][_0x22152f(0xb2b)](this),this[_0x22152f(0x225)]();},VisuMZ['BattleCore']['Game_Battler_performMiss']=Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x569)],Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x569)]=function(){const _0x1b3c85=_0x4b2772;VisuMZ[_0x1b3c85(0x67d)][_0x1b3c85(0x23e)][_0x1b3c85(0xb2b)](this),this[_0x1b3c85(0x225)]();},VisuMZ[_0x4b2772(0x67d)]['Game_Battler_performEvasion']=Game_Battler[_0x4b2772(0x632)][_0x4b2772(0xaaf)],Game_Battler[_0x4b2772(0x632)][_0x4b2772(0xaaf)]=function(){const _0x55a04a=_0x4b2772;VisuMZ['BattleCore'][_0x55a04a(0x73f)][_0x55a04a(0xb2b)](this),this['performFlinch']();},Game_Battler['prototype']['performFlinch']=function(){const _0x613ac7=_0x4b2772;if(!$gameSystem['isSideView']())return;if(this[_0x613ac7(0x452)])return;this['_flinched']=!![];const _0x13f26b=this[_0x613ac7(0x947)]();if(_0x13f26b)_0x13f26b[_0x613ac7(0x49e)]();},Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x249)]=function(){const _0x42b3e4=_0x4b2772;if(this[_0x42b3e4(0x3ef)]()&&this[_0x42b3e4(0x369)]!==_0x42b3e4(0xa59)){this[_0x42b3e4(0x66d)](_0x42b3e4(0xa59));return;}if(this[_0x42b3e4(0x3ef)]()&&this[_0x42b3e4(0x369)]===_0x42b3e4(0xa59))return;if(!!this['_freezeMotionData'])return;if(this[_0x42b3e4(0x9d4)]()){if(!this[_0x42b3e4(0x70e)]()&&this!==BattleManager[_0x42b3e4(0x4f1)]){if(this[_0x42b3e4(0x947)]())this[_0x42b3e4(0x947)]()['refreshMotion']();}this[_0x42b3e4(0x714)]();return;}if(this['_motionType']===_0x42b3e4(0x39f))return;if(this[_0x42b3e4(0x369)]===_0x42b3e4(0x725)&&!BattleManager[_0x42b3e4(0xb2d)]())return;if(this[_0x42b3e4(0x369)]==='guard'&&!BattleManager[_0x42b3e4(0xb2d)]())return;this[_0x42b3e4(0xb6c)]();if(this['battler']()&&BattleManager[_0x42b3e4(0xb2d)]()){if(_0x42b3e4(0xc5b)===_0x42b3e4(0x338))return;else{this['battler']()[_0x42b3e4(0xaee)](),this[_0x42b3e4(0x714)]();return;}}},Game_Enemy[_0x4b2772(0x632)][_0x4b2772(0x70e)]=function(){const _0x4779b4=_0x4b2772;if(!this[_0x4779b4(0x3e7)]())return![];const _0x45386a=this[_0x4779b4(0x947)]();if(!_0x45386a)return![];const _0x137da4=_0x45386a[_0x4779b4(0x3eb)];if(!_0x137da4)return![];const _0x3c5667=_0x137da4[_0x4779b4(0x4e2)];return _0x3c5667&&!_0x3c5667[_0x4779b4(0xc2c)];},Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x6a9)]=function(){const _0x5c89ef=_0x4b2772;return this[_0x5c89ef(0x3be)];},Game_Battler['prototype']['setBattlerFlip']=function(_0x57f7d9){const _0x46a30d=_0x4b2772;if(!$gameSystem[_0x46a30d(0x7d1)]())return;this[_0x46a30d(0x3be)]=_0x57f7d9;const _0x3690be=this[_0x46a30d(0x947)]();if(_0x3690be)_0x3690be[_0x46a30d(0xb1c)]();},Game_Battler[_0x4b2772(0x632)][_0x4b2772(0xa09)]=function(_0x365507,_0x17fe3e,_0x94ccf){const _0x41c7da=_0x4b2772;if(!$gameSystem[_0x41c7da(0x7d1)]())return;const _0x1a5131=this[_0x41c7da(0x947)]();if(!_0x1a5131)return;if(_0x365507===_0x1a5131[_0x41c7da(0xc20)])return;let _0x3ef82c=![];if(this['isActor']()){if('jVuuI'!=='Vbwmi'){if(_0x365507>_0x1a5131[_0x41c7da(0xc20)])_0x3ef82c=!![];if(_0x365507<_0x1a5131['_baseX'])_0x3ef82c=![];}else this['requestMotion'](_0x41c7da(0xa59));}else{if(this[_0x41c7da(0x9d4)]()){if(_0x365507>_0x1a5131['_baseX'])_0x3ef82c=![];if(_0x365507<_0x1a5131[_0x41c7da(0xc20)])_0x3ef82c=!![];}};this['setBattlerFlip'](_0x94ccf?!_0x3ef82c:_0x3ef82c),_0x1a5131[_0x41c7da(0xb1c)]();},Game_Battler[_0x4b2772(0x632)]['moveBattlerDistance']=function(_0x2334db,_0x4ae59d,_0x1ec57e,_0x2f4fe5,_0x367450){const _0x2dec5e=_0x4b2772;if(!$gameSystem['isSideView']())return;const _0x470818=this[_0x2dec5e(0x947)]();if(!_0x470818)return;if(_0x2f4fe5)this[_0x2dec5e(0xa09)](_0x2334db+_0x470818[_0x2dec5e(0xc20)],_0x4ae59d+_0x470818[_0x2dec5e(0xaba)],![]);_0x2334db+=_0x470818[_0x2dec5e(0xc20)]-_0x470818['_homeX'],_0x4ae59d+=_0x470818[_0x2dec5e(0xaba)]-_0x470818[_0x2dec5e(0x919)],_0x470818[_0x2dec5e(0x615)](_0x2334db,_0x4ae59d,_0x1ec57e);if(Imported[_0x2dec5e(0x2d5)])_0x470818[_0x2dec5e(0x473)](_0x367450||_0x2dec5e(0x97b));},Game_Battler['prototype'][_0x4b2772(0x63e)]=function(_0x2e861a,_0x19fc9b,_0x244045,_0x5d640d,_0x7a7825,_0x40aeb5){const _0x15ecd9=_0x4b2772;if(!$gameSystem[_0x15ecd9(0x7d1)]())return;const _0x2dc76e=this[_0x15ecd9(0x947)]();if(!_0x2dc76e)return;if(_0x2e861a===Infinity||_0x19fc9b===Infinity)return;if(isNaN(_0x2e861a)||isNaN(_0x19fc9b))return;_0x40aeb5=_0x40aeb5||0x0;if(_0x40aeb5>0x0){if('UFHff'!==_0x15ecd9(0xb87))_0x500b9a['x']+=this['x'],_0x257c60['y']+=this['y'];else{if(_0x2dc76e[_0x15ecd9(0xc20)]>_0x2e861a)_0x2e861a+=_0x2dc76e[_0x15ecd9(0x67b)]/0x2+_0x40aeb5;if(_0x2dc76e[_0x15ecd9(0xc20)]<_0x2e861a)_0x2e861a-=_0x2dc76e[_0x15ecd9(0x67b)]/0x2+_0x40aeb5;}}if(_0x5d640d)this['setBattlerFacePoint'](_0x2e861a,_0x19fc9b,![]);_0x2e861a-=_0x2dc76e[_0x15ecd9(0x879)],_0x19fc9b-=_0x2dc76e[_0x15ecd9(0x919)],_0x2dc76e[_0x15ecd9(0x615)](_0x2e861a,_0x19fc9b,_0x244045);if(Imported['VisuMZ_0_CoreEngine'])_0x2dc76e['setMoveEasingType'](_0x7a7825||_0x15ecd9(0x97b));},Game_Battler['prototype'][_0x4b2772(0x7bd)]=function(_0x19dd28,_0x51d750,_0x3b61f6,_0x2a16bd,_0x563b71){const _0x5db8b8=_0x4b2772;if(!$gameSystem[_0x5db8b8(0x7d1)]())return;const _0x2990b3=this[_0x5db8b8(0x947)]();if(!_0x2990b3)return;if(_0x2a16bd)this[_0x5db8b8(0xa09)](_0x19dd28+_0x2990b3[_0x5db8b8(0xc20)],_0x51d750+_0x2990b3[_0x5db8b8(0xaba)],![]);_0x19dd28+=_0x2990b3[_0x5db8b8(0x879)],_0x51d750+=_0x2990b3[_0x5db8b8(0x919)],_0x2990b3[_0x5db8b8(0x350)](_0x19dd28,_0x51d750,_0x3b61f6,_0x563b71),this[_0x5db8b8(0x9ce)]=_0x19dd28,this[_0x5db8b8(0xcc8)]=_0x51d750;},Game_Battler[_0x4b2772(0x632)]['moveBattlerHomeToPoint']=function(_0x4af7fb,_0x2d682e,_0x4ae631,_0x5b18b1,_0x5154a7,_0x3c4376){const _0x4b513a=_0x4b2772;if(!$gameSystem[_0x4b513a(0x7d1)]())return;const _0x336618=this['battler']();if(!_0x336618)return;_0x3c4376=_0x3c4376||0x0;if(_0x3c4376>0x0){if('MYOHL'===_0x4b513a(0xa88))this[_0x4b513a(0xc92)]=new _0x375a83(),_0x1e2c48[_0x4b513a(0x40b)]?this[_0x4b513a(0x340)](this[_0x4b513a(0xc92)]):this['_battleField'][_0x4b513a(0x340)](this[_0x4b513a(0xc92)]);else{if(_0x336618[_0x4b513a(0xc20)]>_0x4af7fb)_0x4af7fb+=_0x336618[_0x4b513a(0x67b)]/0x2+_0x3c4376;if(_0x336618[_0x4b513a(0xc20)]<_0x4af7fb)_0x4af7fb-=_0x336618[_0x4b513a(0x67b)]/0x2+_0x3c4376;}}if(_0x5b18b1)this['setBattlerFacePoint'](_0x4af7fb,_0x2d682e,![]);_0x336618[_0x4b513a(0x350)](_0x4af7fb,_0x2d682e,_0x4ae631,_0x5154a7),this['_forcedHomeX']=_0x4af7fb,this[_0x4b513a(0xcc8)]=_0x2d682e;},Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x4aa)]=function(_0xa76f02,_0x34e19e,_0x146bed){const _0x2ad6ee=_0x4b2772;if(!$gameSystem[_0x2ad6ee(0x7d1)]())return;const _0x3d60c3=this[_0x2ad6ee(0x947)]();if(!_0x3d60c3)return;_0x3d60c3['startFloat'](_0xa76f02,_0x34e19e,_0x146bed);},Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x7cd)]=function(_0x466d92,_0x2970a7){const _0x3c3e79=_0x4b2772;if(!$gameSystem[_0x3c3e79(0x7d1)]())return;const _0x56bb94=this[_0x3c3e79(0x947)]();if(!_0x56bb94)return;_0x56bb94[_0x3c3e79(0x42b)](_0x466d92,_0x2970a7);},Game_Battler['prototype'][_0x4b2772(0x3c7)]=function(_0x68bc8d,_0x1bac87,_0x26113d,_0x5a6fb1){const _0x38a962=_0x4b2772;if(!$gameSystem[_0x38a962(0x7d1)]())return;const _0x3679ed=this[_0x38a962(0x947)]();if(!_0x3679ed)return;_0x3679ed[_0x38a962(0xcc2)](_0x68bc8d,_0x1bac87,_0x26113d,_0x5a6fb1);},Game_Battler[_0x4b2772(0x632)]['skewBattler']=function(_0x5736e5,_0x2c0711,_0xcb9f2f,_0x457e52){const _0x2b75ae=_0x4b2772;if(!$gameSystem[_0x2b75ae(0x7d1)]())return;const _0x3342b1=this[_0x2b75ae(0x947)]();if(!_0x3342b1)return;this['isActor']()&&(_0x5736e5*=-0x1,_0x2c0711*=-0x1),_0x3342b1[_0x2b75ae(0x89c)](_0x5736e5,_0x2c0711,_0xcb9f2f,_0x457e52);},Game_Battler[_0x4b2772(0x632)]['growBattler']=function(_0x4e89c0,_0x12ac26,_0xafab6b,_0x440757){if(!$gameSystem['isSideView']())return;const _0x837cd0=this['battler']();if(!_0x837cd0)return;_0x837cd0['startGrow'](_0x4e89c0,_0x12ac26,_0xafab6b,_0x440757);},Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x50e)]=function(_0x16428f,_0x3ab94f,_0x202730){const _0x2bdc7f=_0x4b2772;if(!$gameSystem[_0x2bdc7f(0x7d1)]())return;const _0x477641=this[_0x2bdc7f(0x947)]();if(!_0x477641)return;_0x477641[_0x2bdc7f(0x5c7)](_0x16428f,_0x3ab94f,_0x202730);},Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x714)]=function(){const _0x1407e9=_0x4b2772,_0x3ab096=!!this[_0x1407e9(0x685)];this[_0x1407e9(0x685)]=undefined;if(_0x3ab096){if(_0x1407e9(0x363)===_0x1407e9(0x363))this['requestMotionRefresh'](),this['clearFreezeMotionForWeapons']();else for(const _0x212fd6 of _0x52cf70){const _0x544777=_0x4ae591[0x0][_0x1407e9(0x934)](_0x212fd6[0x0]),_0x2ca26d=_0x339f18[0x1][_0x1407e9(0x934)](_0x212fd6[0x1]),_0x45d396=new _0x3711db(_0x3f16fb[_0x1407e9(0x934)](_0x2ca26d),'i');_0x464ac1[_0x544777]=_0x45d396;}}},Game_Battler['prototype'][_0x4b2772(0x382)]=function(){const _0x3070eb=_0x4b2772;if(!SceneManager[_0x3070eb(0x885)]())return;const _0x56a952=this[_0x3070eb(0x947)]();if(!_0x56a952)return;let _0x22cf64=this[_0x3070eb(0x92d)]()?_0x56a952[_0x3070eb(0x9b0)]:_0x56a952[_0x3070eb(0x3eb)]['_weaponSprite'];if(_0x22cf64){if(_0x3070eb(0xa04)===_0x3070eb(0xafb)){if(!this['_battler'])return![];if(this['_battler']['isActor']())return!![];if(this[_0x3070eb(0x57d)]['isHidden']())return![];if(this['opacity']<=0x0)return![];const _0x5d5f2e=this[_0x3070eb(0x57d)][_0x3070eb(0x79c)]()[_0x3070eb(0x28a)];if(_0x5d5f2e[_0x3070eb(0x93d)](/<SHOW HP GAUGE>/i))return!![];if(_0x5d5f2e[_0x3070eb(0x93d)](/<HIDE HP GAUGE>/i))return![];const _0x4e00ef=_0x5c6aba[_0x3070eb(0x67d)][_0x3070eb(0x869)][_0x3070eb(0x28c)];if(_0x4e00ef[_0x3070eb(0x9bd)]){if(_0x4e00ef[_0x3070eb(0x6a7)]&&_0xdc2003[_0x3070eb(0x7ea)]())return!![];if(this[_0x3070eb(0x57d)]['_visualHpGauge_JustDied'])return![];return this[_0x3070eb(0x57d)]['hasBeenDefeatedBefore']();}return!![];}else _0x22cf64['setup'](0x0);}},Game_Battler[_0x4b2772(0x632)][_0x4b2772(0xa67)]=function(_0x326868,_0x5959c7,_0x23e811){const _0x1c2589=_0x4b2772;if(this[_0x1c2589(0x9d4)]()&&!this[_0x1c2589(0x3e7)]())return;let _0x481db0=0x0,_0x6d2601=0x0;_0x326868[_0x1c2589(0x93d)](/ATTACK[ ](\d+)/i)&&(_0x6d2601=Number(RegExp['$1']),_0x6d2601--);if(this['isActor']()){const _0x5cd650=this[_0x1c2589(0xce5)]();_0x481db0=_0x5cd650[_0x6d2601]?_0x5cd650[_0x6d2601][_0x1c2589(0x67a)]:0x0;}else this[_0x1c2589(0x9d4)]()&&(_0x481db0=this[_0x1c2589(0xa5c)]()[_0x1c2589(0x67a)]||0x0);const _0x433a51=$dataSystem[_0x1c2589(0x41b)][_0x481db0];if(_0x326868[_0x1c2589(0x93d)](/attack/i)){if(_0x1c2589(0x801)===_0x1c2589(0x801))_0x326868=[_0x1c2589(0xcdc),_0x1c2589(0x46f),_0x1c2589(0xcb5)][_0x433a51['type']]||_0x1c2589(0x46f);else return _0x4d791d(_0x2ccac9['$1'])/0x64;}this[_0x1c2589(0x685)]={'motionType':_0x326868,'weaponImageId':_0x5959c7?_0x433a51[_0x1c2589(0xbd0)]:0x0,'pattern':_0x23e811};},Game_Battler['prototype'][_0x4b2772(0xacc)]=function(_0x2f7f98){const _0x67320e=_0x4b2772;if(!_0x2f7f98)return![];return _0x2f7f98['friendsUnit']()===this[_0x67320e(0x8a6)]();},Game_Battler[_0x4b2772(0x632)][_0x4b2772(0xbb5)]=function(_0x20368c){const _0x8c3dc8=_0x4b2772;if(!_0x20368c)return![];return _0x20368c['opponentsUnit']()===this[_0x8c3dc8(0x8a6)]();},Game_Battler[_0x4b2772(0x632)][_0x4b2772(0xc54)]=function(){return![];},Game_Actor[_0x4b2772(0x632)][_0x4b2772(0xc54)]=function(){const _0x3df25b=_0x4b2772;return this['battlerName']()[_0x3df25b(0x93d)](/\$/i);},Game_Enemy[_0x4b2772(0x632)][_0x4b2772(0xc54)]=function(){const _0x112bd8=_0x4b2772;return this[_0x112bd8(0x3e7)]()&&this[_0x112bd8(0xa84)]()['match'](/\$/i);},VisuMZ[_0x4b2772(0x67d)]['Game_Actor_setup']=Game_Actor['prototype'][_0x4b2772(0xc74)],Game_Actor['prototype'][_0x4b2772(0xc74)]=function(_0x47b133){const _0x47c14a=_0x4b2772;VisuMZ[_0x47c14a(0x67d)][_0x47c14a(0x6a3)][_0x47c14a(0xb2b)](this,_0x47b133),this['initBattlePortrait']();},Game_Actor[_0x4b2772(0x632)]['initBattlePortrait']=function(){const _0xdc45dd=_0x4b2772;this[_0xdc45dd(0xce1)]='';if(this[_0xdc45dd(0xa05)]()&&this[_0xdc45dd(0xa05)]()[_0xdc45dd(0x28a)][_0xdc45dd(0x93d)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)){if(_0xdc45dd(0xc2e)!=='lbBwz')this[_0xdc45dd(0xce1)]=String(RegExp['$1']);else return'#%1'[_0xdc45dd(0x934)](_0x19a067(_0x465a98['$1']));}},Game_Actor['prototype'][_0x4b2772(0xab4)]=function(){const _0xdd557c=_0x4b2772;if(this[_0xdd557c(0xa97)]()!=='')return this[_0xdd557c(0xa97)]();else{if(Imported['VisuMZ_1_MainMenuCore']&&this[_0xdd557c(0xba5)]()!=='')return _0xdd557c(0x395)===_0xdd557c(0xc87)?_0x56277b['weapons']()['length']||0x1:this[_0xdd557c(0xba5)]();}return'';},Game_Actor[_0x4b2772(0x632)][_0x4b2772(0xa97)]=function(){const _0x3c40bf=_0x4b2772;if(this['_battlePortrait']===undefined)this[_0x3c40bf(0xc27)]();return this[_0x3c40bf(0xce1)];},Game_Actor['prototype'][_0x4b2772(0x7eb)]=function(_0x555537){const _0x782b63=_0x4b2772;if(this[_0x782b63(0xce1)]===undefined)this[_0x782b63(0xc27)]();this[_0x782b63(0xce1)]=_0x555537;if(SceneManager[_0x782b63(0x885)]()&&$gameParty[_0x782b63(0x949)]()[_0x782b63(0x41a)](this)){const _0x1f1177=SceneManager[_0x782b63(0x21e)][_0x782b63(0xab0)];if(_0x1f1177)_0x1f1177[_0x782b63(0x999)](this);}},Game_Actor[_0x4b2772(0x632)][_0x4b2772(0xbe5)]=function(){return!![];},Game_Actor[_0x4b2772(0x632)][_0x4b2772(0xae3)]=function(){const _0x469d19=_0x4b2772;if(!this[_0x469d19(0x71f)]()&&BattleManager['_autoBattle'])return!![];return Game_Battler['prototype'][_0x469d19(0xae3)]['call'](this);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xa45)]=Game_Actor[_0x4b2772(0x632)][_0x4b2772(0x272)],Game_Actor[_0x4b2772(0x632)]['makeActionList']=function(){const _0x3617d8=_0x4b2772;if(BattleManager[_0x3617d8(0xba3)]&&!ConfigManager['autoBattleUseSkills'])return this[_0x3617d8(0x63d)]();else{return VisuMZ[_0x3617d8(0x67d)][_0x3617d8(0xa45)][_0x3617d8(0xb2b)](this);;}},Game_Actor[_0x4b2772(0x632)]['makeActionListAutoAttack']=function(){const _0x119508=_0x4b2772,_0x44ce41=[],_0x459ddd=new Game_Action(this);return _0x459ddd['setAttack'](),_0x44ce41[_0x119508(0x21f)](_0x459ddd),_0x44ce41;},Game_Actor[_0x4b2772(0x632)]['battleCommands']=function(){const _0x413c0d=_0x4b2772;if(this['currentClass']()['note']['match'](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)){if('VvObt'!=='VvObt'){let _0x1c25bb=_0x24303a(_0x376079['$1']);while(_0x1c25bb--){const _0x563c1e=_0x46e94c[_0x413c0d(0x619)](0x2)===0x0?this[_0x413c0d(0xbfe)]():this['friendsUnit']();_0x3e7dd0[_0x413c0d(0x21f)](_0x563c1e[_0x413c0d(0x941)]());}return this[_0x413c0d(0x807)](_0xf84be9);}else return String(RegExp['$1'])[_0x413c0d(0xc24)](/[\r\n]+/);}else{if('waNJP'!=='waNJP'){const _0xe5621c=_0x1c395f(_0x59dfa2['$1']);_0x421b3f[_0x413c0d(0x784)]([this],_0xe5621c,![],![]);}else return VisuMZ[_0x413c0d(0x67d)][_0x413c0d(0x869)]['ActorCmd']['BattleCmdList'];}},Game_Actor['prototype'][_0x4b2772(0x435)]=function(){const _0x3ffb97=_0x4b2772;if(this['_cache']['svAnchorX']!==undefined)return this[_0x3ffb97(0x475)][_0x3ffb97(0xb02)];if(this[_0x3ffb97(0xa05)]()['note']['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)){if(_0x3ffb97(0xbfa)!==_0x3ffb97(0xc60))this['_cache'][_0x3ffb97(0xb02)]=eval(RegExp['$1']),this[_0x3ffb97(0x475)][_0x3ffb97(0x899)]=eval(RegExp['$2']);else{const _0x4685a0=_0x3daf1a['BattleCore'][_0x3ffb97(0x869)][_0x3ffb97(0xa7a)],_0x34495a=_0x398abd[_0x3ffb97(0x4b5)]();if(_0x4685a0['ShowAddedBuff'])this[_0x3ffb97(0x25e)](_0x3b5c2f,_0x34495a[_0x3ffb97(0xbee)],_0x43b4c3[_0x3ffb97(0x1ef)]);if(_0x4685a0[_0x3ffb97(0x76c)])this[_0x3ffb97(0x25e)](_0x310488,_0x34495a[_0x3ffb97(0x562)],_0x450d17[_0x3ffb97(0x9fb)]);if(_0x4685a0[_0x3ffb97(0x2a0)])this[_0x3ffb97(0x25e)](_0x1a721d,_0x34495a[_0x3ffb97(0xbef)],_0x2ee68d[_0x3ffb97(0x958)]);}}else this[_0x3ffb97(0x475)][_0x3ffb97(0xb02)]=Game_Battler['prototype'][_0x3ffb97(0x435)][_0x3ffb97(0xb2b)](this);return this[_0x3ffb97(0x475)]['svAnchorX'];},Game_Actor[_0x4b2772(0x632)][_0x4b2772(0x89f)]=function(){const _0x4f993d=_0x4b2772;if(this[_0x4f993d(0x475)][_0x4f993d(0x899)]!==undefined)return this['_cache']['svAnchorY'];if(this[_0x4f993d(0xa05)]()[_0x4f993d(0x28a)]['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)){if(_0x4f993d(0x5c9)!==_0x4f993d(0x5c9)){const _0x195e46=_0x2406e2[_0x4f993d(0x4b5)](),_0x46f27a=_0x195e46['addedStateObjects']();for(const _0x2d49e9 of _0x46f27a){const _0xdbe05d=_0x5ad93d[_0x4f993d(0x92d)]()?_0x2d49e9[_0x4f993d(0xabd)]:_0x2d49e9['message2'];_0xdbe05d&&_0x226408[_0x4f993d(0x67d)][_0x4f993d(0x869)][_0x4f993d(0xa7a)][_0x4f993d(0x262)]&&(this['push'](_0x4f993d(0x6e9)),this[_0x4f993d(0x21f)](_0x4f993d(0x8e0)),this['push'](_0x4f993d(0x60d)),this['push'](_0x4f993d(0x60b),_0xdbe05d[_0x4f993d(0x934)](_0x11b37d[_0x4f993d(0x8fe)]())),this['push'](_0x4f993d(0x5c5))),_0x2d49e9['id']===_0x5a1c6[_0x4f993d(0x7c4)]()&&this['push']('performCollapse',_0x71b0a);}}else this[_0x4f993d(0x475)][_0x4f993d(0xb02)]=eval(RegExp['$1']),this[_0x4f993d(0x475)][_0x4f993d(0x899)]=eval(RegExp['$2']);}else this[_0x4f993d(0x475)][_0x4f993d(0x899)]=Game_Battler[_0x4f993d(0x632)][_0x4f993d(0x89f)][_0x4f993d(0xb2b)](this);return this['_cache']['svAnchorY'];},Game_Actor[_0x4b2772(0x632)][_0x4b2772(0x322)]=function(){const _0x5bbcd3=_0x4b2772;if(this['_cache'][_0x5bbcd3(0xc94)]!==undefined)return this[_0x5bbcd3(0x475)][_0x5bbcd3(0xc94)];if(this['actor']()[_0x5bbcd3(0x28a)][_0x5bbcd3(0x93d)](/<SIDEVIEW SHOW SHADOW>/i))'WFaQd'===_0x5bbcd3(0x22c)?(_0x34d266['BattleCore'][_0x5bbcd3(0x73f)][_0x5bbcd3(0xb2b)](this),this[_0x5bbcd3(0x225)]()):this[_0x5bbcd3(0x475)]['svShadow']=!![];else this[_0x5bbcd3(0xa05)]()[_0x5bbcd3(0x28a)][_0x5bbcd3(0x93d)](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x5bbcd3(0x475)][_0x5bbcd3(0xc94)]=![]:this[_0x5bbcd3(0x475)]['svShadow']=Game_Battler['prototype']['svBattlerShadowVisible'][_0x5bbcd3(0xb2b)](this);return this[_0x5bbcd3(0x475)][_0x5bbcd3(0xc94)];},Game_Actor[_0x4b2772(0x632)][_0x4b2772(0x240)]=function(){const _0x13127e=_0x4b2772;return VisuMZ[_0x13127e(0x67d)][_0x13127e(0x869)]['Actor'][_0x13127e(0xc81)];},Game_Actor['prototype']['performWeaponAnimation']=function(){const _0x137b4d=_0x4b2772,_0x3a1b52=this[_0x137b4d(0xce5)](),_0x1897e9=_0x3a1b52[0x0]?_0x3a1b52[0x0]['wtypeId']:0x0,_0x11ca7a=$dataSystem[_0x137b4d(0x41b)][_0x1897e9];_0x11ca7a&&(_0x137b4d(0x74e)===_0x137b4d(0xceb)?(_0x33eae5[_0x137b4d(0x67d)][_0x137b4d(0xcb0)][_0x137b4d(0xb2b)](this),_0x5a96ce[_0x137b4d(0x487)]()):this['startWeaponAnimation'](_0x11ca7a[_0x137b4d(0xbd0)]));},Game_Actor[_0x4b2772(0x632)][_0x4b2772(0xb19)]=function(_0xd390f){const _0xce8653=_0x4b2772;Game_Battler[_0xce8653(0x632)][_0xce8653(0xb19)][_0xce8653(0xb2b)](this,_0xd390f),this[_0xce8653(0x8f4)](_0xd390f);},Game_Actor[_0x4b2772(0x632)][_0x4b2772(0xc49)]=function(){const _0x18d0f0=_0x4b2772,_0x7a5f50=this[_0x18d0f0(0xce5)](),_0x15a215=_0x7a5f50[0x0]?_0x7a5f50[0x0][_0x18d0f0(0x67a)]:0x0;return $dataSystem[_0x18d0f0(0x41b)][_0x15a215];},Game_Actor[_0x4b2772(0x632)][_0x4b2772(0xc01)]=function(_0x25e546){const _0x38ee12=_0x4b2772;_0x25e546=_0x25e546||0x1,_0x25e546--;const _0x51e20b=this[_0x38ee12(0xce5)]();return _0x51e20b[_0x25e546]?_0x51e20b[_0x25e546][_0x38ee12(0x519)]:0x0;},Game_Actor[_0x4b2772(0x632)]['getAttackMotionSlot']=function(_0x5d529c){const _0x236387=_0x4b2772;_0x5d529c=_0x5d529c||0x1,_0x5d529c--;const _0x5ccb31=this[_0x236387(0xce5)](),_0xfabcf5=_0x5ccb31[_0x5d529c]?_0x5ccb31[_0x5d529c][_0x236387(0x67a)]:0x0;return $dataSystem['attackMotions'][_0xfabcf5];},Game_Actor['prototype'][_0x4b2772(0xa07)]=function(_0x38b981){const _0x316b64=_0x4b2772;_0x38b981=_0x38b981||0x1,_0x38b981--;const _0x4966b5=this[_0x316b64(0xce5)](),_0xfd229c=_0x4966b5[_0x38b981]?_0x4966b5[_0x38b981][_0x316b64(0x67a)]:0x0,_0x21c25e=$dataSystem[_0x316b64(0x41b)][_0xfd229c];if(_0x21c25e){if(_0x21c25e[_0x316b64(0x9b1)]===0x0){if(_0x316b64(0x859)==='dUebO')this['requestMotion'](_0x316b64(0xcdc));else{if(!_0x2148c5[_0x316b64(0x885)]())return;_0x6af4b4[_0x316b64(0x72d)](_0x450e96,_0xce2fc9);const _0x1f98e0=_0x6faf9['getLastPluginCommandInterpreter'](),_0x38b85a=_0x250691[_0x316b64(0xb0b)](_0x55cf37[_0x316b64(0xa4f)]),_0x4955a0=_0x66de6e[_0x316b64(0x882)],_0x48eb07=_0x26aeb4[_0x316b64(0x655)];if(!_0x1f98e0)return;_0x3bedde[_0x316b64(0x6f3)](_0x38b85a,_0x4955a0,_0x48eb07);if(_0x149f7d[_0x316b64(0x85a)])_0x1f98e0['setWaitMode'](_0x316b64(0x98a));}}else{if(_0x21c25e[_0x316b64(0x9b1)]===0x1)this[_0x316b64(0x66d)](_0x316b64(0x46f));else _0x21c25e[_0x316b64(0x9b1)]===0x2&&this[_0x316b64(0x66d)]('missile');}this['startWeaponAnimation'](_0x21c25e['weaponImageId']);}},Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x8a8)]=function(_0x272118){const _0x5e2aef=_0x4b2772;this[_0x5e2aef(0xa57)]=_0x272118||0x0,this[_0x5e2aef(0x475)]={};},Game_Battler[_0x4b2772(0x632)][_0x4b2772(0xa27)]=function(){const _0x3d03b9=_0x4b2772;this[_0x3d03b9(0xa57)]=this['_activeWeaponSlot']||0x0,this[_0x3d03b9(0xa57)]++,this[_0x3d03b9(0x475)]={};},Game_Battler[_0x4b2772(0x632)][_0x4b2772(0x39d)]=function(){const _0x341174=_0x4b2772;this[_0x341174(0xa57)]=undefined,this['_cache']={};},VisuMZ[_0x4b2772(0x67d)]['Game_Actor_equips']=Game_Actor[_0x4b2772(0x632)][_0x4b2772(0xac7)],Game_Actor['prototype'][_0x4b2772(0xac7)]=function(){const _0x1fdaba=_0x4b2772;let _0x38c206=VisuMZ['BattleCore'][_0x1fdaba(0x4bf)]['call'](this);if(this[_0x1fdaba(0x7b9)])return _0x38c206;if(this[_0x1fdaba(0xa57)]!==undefined){this[_0x1fdaba(0x7b9)]=!![];const _0x3a0487=this[_0x1fdaba(0xc62)]();for(let _0x3e9095=0x0;_0x3e9095<_0x3a0487[_0x1fdaba(0x1e9)];_0x3e9095++){_0x1fdaba(0x5f5)!==_0x1fdaba(0x5f5)?this[_0x1fdaba(0xb0d)](...arguments):_0x3a0487[_0x3e9095]===0x1&&this[_0x1fdaba(0xa57)]!==_0x3e9095&&(_0x38c206[_0x3e9095]=null);}this[_0x1fdaba(0x7b9)]=undefined;}return _0x38c206;},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0xbfc)]=function(_0x57fea8){const _0x12d1e8=_0x4b2772;if(_0x57fea8['isActor']()){if(_0x12d1e8(0x92c)===_0x12d1e8(0xc73))_0x1c4b06['revertTpbCachedActor']();else return _0x57fea8[_0x12d1e8(0xce5)]()[_0x12d1e8(0x1e9)]||0x1;}else{if(_0x12d1e8(0x64d)!==_0x12d1e8(0x223))return 0x1;else _0x42b9d9[_0x12d1e8(0x67d)][_0x12d1e8(0xb5e)][_0x12d1e8(0xb2b)](this,_0x1e7691),this[_0x12d1e8(0x9da)]();}},Window_BattleLog[_0x4b2772(0x632)]['setActiveWeaponSet']=function(_0x41b22c,_0xf510f9){const _0x1bb115=_0x4b2772;_0x41b22c&&_0x41b22c[_0x1bb115(0x92d)]()&&(_0x1bb115(0xacd)==='WDfSb'?(this[_0x1bb115(0x2fc)](),this[_0x1bb115(0x203)]=null,this[_0x1bb115(0xa06)]=![]):_0x41b22c[_0x1bb115(0x8a8)](_0xf510f9)),this[_0x1bb115(0x9da)]();},Window_BattleLog['prototype'][_0x4b2772(0x556)]=function(_0x475cff){const _0x18cdae=_0x4b2772;_0x475cff&&_0x475cff['isActor']()&&_0x475cff[_0x18cdae(0x39d)](),this[_0x18cdae(0x9da)]();},Game_Actor[_0x4b2772(0x632)]['battleUIOffsetX']=function(){const _0x517533=_0x4b2772;let _0x5d1796='battleUIOffsetX';if(this[_0x517533(0x7c9)](_0x5d1796))return this['_cache'][_0x5d1796];return this[_0x517533(0x475)][_0x5d1796]=this['createBattleUIOffsetX'](this['actor']()),this[_0x517533(0x475)][_0x5d1796];},Game_Actor[_0x4b2772(0x632)][_0x4b2772(0x7ba)]=function(){const _0x1dad6c=_0x4b2772;let _0x378ea4=_0x1dad6c(0x7ba);if(this[_0x1dad6c(0x7c9)](_0x378ea4))return this[_0x1dad6c(0x475)][_0x378ea4];return this[_0x1dad6c(0x475)][_0x378ea4]=this[_0x1dad6c(0xaa8)](this[_0x1dad6c(0xa05)]()),this[_0x1dad6c(0x475)][_0x378ea4];},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x42d)]=Game_Enemy[_0x4b2772(0x632)]['setup'],Game_Enemy['prototype'][_0x4b2772(0xc74)]=function(_0x51d842,_0x1fd71a,_0x3941a8){const _0x3ebbc4=_0x4b2772;_0x51d842=DataManager['swapEnemyIDs'](_0x51d842),VisuMZ[_0x3ebbc4(0x67d)][_0x3ebbc4(0x42d)][_0x3ebbc4(0xb2b)](this,_0x51d842,_0x1fd71a,_0x3941a8),Imported[_0x3ebbc4(0x795)]&&this[_0x3ebbc4(0xa34)](),this[_0x3ebbc4(0x3ae)](),this['setupBattleCoreData'](),Imported[_0x3ebbc4(0x795)]&&this['recoverAll']();},Game_Enemy[_0x4b2772(0x632)][_0x4b2772(0x3ae)]=function(){const _0x53f285=_0x4b2772,_0xcd356d=VisuMZ['BattleCore'][_0x53f285(0x869)]['Enemy'];this[_0x53f285(0x4fc)]=_0xcd356d[_0x53f285(0x2a2)],this[_0x53f285(0xb95)]={};},Game_Enemy[_0x4b2772(0x632)][_0x4b2772(0x665)]=function(){const _0x246df3=_0x4b2772,_0x340624=VisuMZ[_0x246df3(0x67d)][_0x246df3(0x869)][_0x246df3(0x74a)],_0x5f2cf3=this['enemy']()['note'];this[_0x246df3(0xb95)]={'name':'','wtypeId':_0x340624['WtypeId'],'collapse':_0x340624['AllowCollapse'],'motionIdle':_0x340624[_0x246df3(0x429)],'width':_0x340624['Width']||0x40,'height':_0x340624[_0x246df3(0x8e7)]||0x40,'anchorX':_0x340624['AnchorX']||0x0,'anchorY':_0x340624[_0x246df3(0x950)]||0x0,'shadow':_0x340624[_0x246df3(0xa0d)]};_0x5f2cf3[_0x246df3(0x93d)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x246df3(0x4fc)]=Number(RegExp['$1']));const _0x1d4076=this['_svBattlerData'];if(_0x5f2cf3[_0x246df3(0x93d)](/<SIDEVIEW BATTLER: (.*)>/i))'MDXBI'!==_0x246df3(0xbec)?_0x1d4076[_0x246df3(0x8fe)]=String(RegExp['$1']):this[_0x246df3(0x475)][_0x246df3(0x899)]=_0x5286c8[_0x246df3(0x632)][_0x246df3(0x89f)][_0x246df3(0xb2b)](this);else{if(_0x5f2cf3[_0x246df3(0x93d)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x3bb105=String(RegExp['$1'])[_0x246df3(0xc24)](/[\r\n]+/)[_0x246df3(0x9cc)]('');_0x1d4076[_0x246df3(0x8fe)]=DataManager['processRandomizedData'](_0x3bb105);}}_0x5f2cf3[_0x246df3(0x93d)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x1d4076['anchorX']=eval(RegExp['$1']),_0x1d4076['anchorY']=eval(RegExp['$2']));if(_0x5f2cf3[_0x246df3(0x93d)](/<SIDEVIEW COLLAPSE>/i)){if(_0x246df3(0x479)!=='hPTIW'){const _0x38ac1a=_0x4a5301[_0x246df3(0x23c)](_0x49a675);_0x38ac1a[_0x246df3(0xa36)]=![],_0x38ac1a[_0x246df3(0x771)]=![],_0x38ac1a[_0x246df3(0x9ec)]=0x0,this['_damagePopupArray'][_0x246df3(0x21f)](_0x38ac1a);}else _0x1d4076[_0x246df3(0xa23)]=!![];}else _0x5f2cf3[_0x246df3(0x93d)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x1d4076[_0x246df3(0xa23)]=![]);if(_0x5f2cf3[_0x246df3(0x93d)](/<SIDEVIEW SHOW SHADOW>/i))_0x246df3(0x408)!==_0x246df3(0x6dd)?_0x1d4076[_0x246df3(0x96b)]=!![]:_0x35e185[_0x246df3(0x67d)][_0x246df3(0xc9a)][_0x246df3(0xb2b)](this);else _0x5f2cf3['match'](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x1d4076[_0x246df3(0x96b)]=![]);if(_0x5f2cf3[_0x246df3(0x93d)](/<SIDEVIEW IDLE MOTION: (.*)>/i)){if(_0x246df3(0x315)===_0x246df3(0xb18)){const _0x46e256=_0xed6ab6['round'](_0x2d8e5d['boxWidth']/0x3),_0x7a9bee=_0x4411cb[_0x246df3(0x4ed)](_0x4222aa[_0x246df3(0xcd9)]/_0x4b11cc[_0x246df3(0x949)]()['length']),_0x2d620b=_0x476de8[_0x246df3(0x7fa)](_0x46e256,_0x7a9bee),_0x1f2861=this['fittingHeight'](_0x419da3['BattleCore'][_0x246df3(0x869)][_0x246df3(0x335)][_0x246df3(0x79b)]),_0x1d15a3=_0x188326[_0x246df3(0x4ed)](_0x7a9bee*_0x592a58['index']())+_0x2814a4[_0x246df3(0x4ed)]((_0x7a9bee-_0x2d620b)/0x2),_0x5f4c4f=_0x2855b3[_0x246df3(0x4ed)](_0x3f1091[_0x246df3(0x21e)][_0x246df3(0xab0)]['y']-_0x1f2861);this[_0x246df3(0x9b5)](_0x1d15a3,_0x5f4c4f,_0x2d620b,_0x1f2861),this[_0x246df3(0x5d6)](),this['setBackgroundType'](0x1);}else _0x1d4076[_0x246df3(0x8e2)]=String(RegExp['$1'])[_0x246df3(0xa42)]()[_0x246df3(0x75a)]();}else{if(_0x5f2cf3['match'](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x4fd2c1=String(RegExp['$1'])[_0x246df3(0xc24)](/[\r\n]+/)[_0x246df3(0x9cc)]('');_0x1d4076[_0x246df3(0x8e2)]=DataManager[_0x246df3(0x339)](_0x4fd2c1);}}_0x5f2cf3[_0x246df3(0x93d)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x1d4076[_0x246df3(0x67b)]=Number(RegExp['$1']),_0x1d4076['height']=Number(RegExp['$2']));if(_0x5f2cf3['match'](/<SIDEVIEW WEAPON: (.*)>/i))_0x1d4076[_0x246df3(0x67a)]=DataManager[_0x246df3(0x933)](RegExp['$1']);else{if(_0x5f2cf3[_0x246df3(0x93d)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){if(_0x246df3(0xcc9)!==_0x246df3(0x353)){const _0xb39225=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x246df3(0x9cc)](''),_0x5e7c77=DataManager[_0x246df3(0x339)](_0xb39225);_0x1d4076['wtypeId']=DataManager['getWtypeIdWithName'](_0x5e7c77);}else _0x26189b['prototype']['performAction'][_0x246df3(0xb2b)](this,_0x185850),this[_0x246df3(0x8f4)](_0xdccd00);}}if(Imported[_0x246df3(0x795)]){const _0xe6dac9=this[_0x246df3(0x374)]();for(const _0x457ad1 of _0xe6dac9){if('WbVJX'===_0x246df3(0x1de)){const _0x5099d7=this[_0x246df3(0x8ee)][_0x246df3(0x99d)](),_0x48c2de=_0x5099d7['filter'](_0x41d2fe=>_0x4a027a[_0x246df3(0xa17)](_0x5d0c5f)['includes'](_0x41d2fe));return _0x48c2de[_0x246df3(0x1e9)]<=0x0;}else{const _0x4d580b=this['traitSet'](_0x457ad1)[_0x246df3(0x734)][_0x246df3(0x5fd)]()[_0x246df3(0x75a)](),_0x53783f=_0x457ad1[_0x246df3(0x5fd)]()[_0x246df3(0x75a)]();if(_0x5f2cf3['match'](VisuMZ['ElementStatusCore']['RegExp'][_0x246df3(0x5ae)[_0x246df3(0x934)](_0x53783f,_0x4d580b)]))'DQMKH'===_0x246df3(0x997)?_0x1d4076[_0x246df3(0x8fe)]=String(RegExp['$1']):(_0x30cf21[_0x246df3(0x632)][_0x246df3(0x281)]['call'](this),this[_0x246df3(0x7fe)]());else{if(_0x5f2cf3['match'](VisuMZ[_0x246df3(0x26e)][_0x246df3(0x5d1)][_0x246df3(0xb51)[_0x246df3(0x934)](_0x53783f,_0x4d580b)])){if(_0x246df3(0xb54)==='CTtEC'){this[_0x246df3(0xbc3)]=new _0x303e5c();for(let _0x664546=0x0;_0x664546<0x9;_0x664546++){this[_0x246df3(0xbc3)][_0x246df3(0x340)](new _0x213440());}this[_0x246df3(0x342)][_0x246df3(0x340)](this[_0x246df3(0xbc3)]);}else{const _0x4e88ba=String(RegExp['$1'])[_0x246df3(0xc24)](/[\r\n]+/)[_0x246df3(0x9cc)]('');_0x1d4076[_0x246df3(0x8fe)]=DataManager[_0x246df3(0x339)](_0x4e88ba);}}}if(_0x5f2cf3[_0x246df3(0x93d)](VisuMZ[_0x246df3(0x26e)][_0x246df3(0x5d1)][_0x246df3(0x913)[_0x246df3(0x934)](_0x53783f,_0x4d580b)])){if('WRHiB'===_0x246df3(0x5bf)){let _0x5c0cca='battleUIOffsetX';if(this[_0x246df3(0x7c9)](_0x5c0cca))return this[_0x246df3(0x475)][_0x5c0cca];return this[_0x246df3(0x475)][_0x5c0cca]=this['createBattleUIOffsetX'](this[_0x246df3(0xa05)]()),this[_0x246df3(0x475)][_0x5c0cca];}else _0x1d4076[_0x246df3(0x67a)]=DataManager[_0x246df3(0x933)](RegExp['$1']);}else{if(_0x5f2cf3[_0x246df3(0x93d)](VisuMZ['ElementStatusCore'][_0x246df3(0x5d1)][_0x246df3(0x450)[_0x246df3(0x934)](_0x53783f,_0x4d580b)])){const _0xbbc4f4=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x246df3(0x9cc)](''),_0x314c20=DataManager[_0x246df3(0x339)](_0xbbc4f4);_0x1d4076[_0x246df3(0x67a)]=DataManager[_0x246df3(0x933)](_0x314c20);}}if(_0x5f2cf3[_0x246df3(0x93d)](VisuMZ['ElementStatusCore'][_0x246df3(0x5d1)][_0x246df3(0x5f4)[_0x246df3(0x934)](_0x53783f,_0x4d580b)]))_0x1d4076[_0x246df3(0x8e2)]=String(RegExp['$1'])[_0x246df3(0xa42)]()[_0x246df3(0x75a)]();else{if(_0x5f2cf3[_0x246df3(0x93d)](VisuMZ[_0x246df3(0x26e)][_0x246df3(0x5d1)][_0x246df3(0x7ce)['format'](_0x53783f,_0x4d580b)])){const _0x43a579=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x246df3(0x9cc)]('');_0x1d4076[_0x246df3(0x8e2)]=DataManager['processRandomizedData'](_0x43a579);}}}}}},Game_Enemy[_0x4b2772(0x632)][_0x4b2772(0x90c)]=function(){const _0x4579c4=_0x4b2772;return this[_0x4579c4(0x4fc)]||0x0;},Game_Enemy[_0x4b2772(0x632)][_0x4b2772(0x251)]=function(){const _0x3c22d8=_0x4b2772;return this[_0x3c22d8(0x90c)]();},Game_Enemy[_0x4b2772(0x632)][_0x4b2772(0xc01)]=function(_0x1a6f18){return this['attackAnimationId1']();},Game_Enemy['prototype'][_0x4b2772(0x88f)]=function(){const _0x210cc3=_0x4b2772;if(this[_0x210cc3(0x79c)]()[_0x210cc3(0x28a)][_0x210cc3(0x93d)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x210cc3(0x632)]['canBattlerMove'][_0x210cc3(0xb2b)](this);},Game_Enemy[_0x4b2772(0x632)][_0x4b2772(0x46d)]=function(){const _0x586aa9=_0x4b2772;if(this['enemy']()[_0x586aa9(0x28a)][_0x586aa9(0x93d)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x4b2772(0x632)][_0x4b2772(0xb57)]=function(){const _0x571bed=_0x4b2772,_0x48b8e6=[];for(const _0xb351 of this[_0x571bed(0x79c)]()['actions']){const _0x228767=$dataSkills[_0xb351[_0x571bed(0xb15)]];if(_0x228767&&!_0x48b8e6[_0x571bed(0x41a)](_0x228767))_0x48b8e6['push'](_0x228767);}return _0x48b8e6;},Game_Enemy[_0x4b2772(0x632)][_0x4b2772(0x45f)]=function(){const _0x3452f9=_0x4b2772;let _0xcd1f0c='battleUIOffsetX';if(this[_0x3452f9(0x7c9)](_0xcd1f0c))return this[_0x3452f9(0x475)][_0xcd1f0c];return this[_0x3452f9(0x475)][_0xcd1f0c]=this[_0x3452f9(0x683)](this[_0x3452f9(0x79c)]()),this[_0x3452f9(0x475)][_0xcd1f0c];},Game_Enemy[_0x4b2772(0x632)][_0x4b2772(0x7ba)]=function(){const _0x42c985=_0x4b2772;let _0xc61e4f=_0x42c985(0x7ba);if(this[_0x42c985(0x7c9)](_0xc61e4f))return this[_0x42c985(0x475)][_0xc61e4f];return this['_cache'][_0xc61e4f]=this[_0x42c985(0xaa8)](this[_0x42c985(0x79c)]()),this[_0x42c985(0x475)][_0xc61e4f];},Game_Enemy[_0x4b2772(0x632)][_0x4b2772(0xa5c)]=function(){const _0x18d075=_0x4b2772;if(this[_0x18d075(0xb95)]!==undefined)return this[_0x18d075(0xb95)];return this[_0x18d075(0x665)](),this[_0x18d075(0xb95)];},Game_Enemy[_0x4b2772(0x632)][_0x4b2772(0x3e7)]=function(){const _0x4db98b=_0x4b2772;return this[_0x4db98b(0xa5c)]()[_0x4db98b(0x8fe)]!=='';},Game_Enemy[_0x4b2772(0x632)]['svBattlerName']=function(){const _0x8e8394=_0x4b2772;return this[_0x8e8394(0xa5c)]()[_0x8e8394(0x8fe)];},Game_Enemy[_0x4b2772(0x632)][_0x4b2772(0x240)]=function(){const _0x4e57e3=_0x4b2772;if(this['hasSvBattler']()){if(_0x4e57e3(0xcbf)!=='Ftzlc')return VisuMZ[_0x4e57e3(0x67d)]['Settings'][_0x4e57e3(0xb6b)][_0x4e57e3(0xc81)];else this[_0x4e57e3(0x1f0)]=!![];}else return VisuMZ[_0x4e57e3(0x67d)][_0x4e57e3(0x869)][_0x4e57e3(0x74a)]['SmoothImage'];},Game_Enemy[_0x4b2772(0x632)]['performAction']=function(_0x4488cd){const _0x4541ed=_0x4b2772;Game_Battler[_0x4541ed(0x632)][_0x4541ed(0xb19)][_0x4541ed(0xb2b)](this,_0x4488cd);if(this[_0x4541ed(0x3e7)]())this[_0x4541ed(0x8f4)](_0x4488cd);},Game_Enemy[_0x4b2772(0x632)][_0x4b2772(0x425)]=function(){const _0x211b6b=_0x4b2772,_0x2eccf5=this[_0x211b6b(0xa5c)]()['wtypeId']||0x0,_0x41f734=$dataSystem[_0x211b6b(0x41b)][_0x2eccf5];if(_0x41f734){if('roqYQ'===_0x211b6b(0x853))_0x3dc3af[_0x211b6b(0xab8)](_0x123988[_0x211b6b(0x4ff)],!![]);else{if(_0x41f734[_0x211b6b(0x9b1)]===0x0){if(_0x211b6b(0xcef)!==_0x211b6b(0xcef)){if(!_0x594816['isSceneBattle']())return;if(!_0x456322['VisuMZ_3_ActSeqCamera'])return;const _0x33f8ae=_0x5018ec['getLastPluginCommandInterpreter']();if(!_0x33f8ae)return;_0x33f8ae[_0x211b6b(0xc6d)](_0x211b6b(0xb03));}else this[_0x211b6b(0x66d)](_0x211b6b(0xcdc));}else{if(_0x41f734[_0x211b6b(0x9b1)]===0x1){if(_0x211b6b(0x8bc)!==_0x211b6b(0x990))this[_0x211b6b(0x66d)](_0x211b6b(0x46f));else return _0x25b955[_0x211b6b(0x668)]()[_0x211b6b(0xb8c)](_0x990d4f=>_0x990d4f!==_0x530f8c);}else _0x41f734[_0x211b6b(0x9b1)]===0x2&&this['requestMotion'](_0x211b6b(0xcb5));}}}},Game_Enemy[_0x4b2772(0x632)]['performWeaponAnimation']=function(){const _0x141d61=_0x4b2772,_0x14fc31=this['svBattlerData']()[_0x141d61(0x67a)]||0x0,_0x472c3c=$dataSystem[_0x141d61(0x41b)][_0x14fc31];_0x472c3c&&(_0x141d61(0x9ca)===_0x141d61(0x9ca)?this['startWeaponAnimation'](_0x472c3c[_0x141d61(0xbd0)]):this[_0x141d61(0x207)]=_0x141d61(0x8d1));},Game_Enemy[_0x4b2772(0x632)][_0x4b2772(0xc49)]=function(){const _0x62e407=_0x4b2772,_0x534024=this['svBattlerData']()[_0x62e407(0x67a)]||0x0;return $dataSystem[_0x62e407(0x41b)][_0x534024];},Game_Enemy[_0x4b2772(0x632)]['getAttackMotionSlot']=function(_0x22c6d1){const _0x6e70f5=_0x4b2772;return this[_0x6e70f5(0xc49)]();},Game_Enemy[_0x4b2772(0x632)][_0x4b2772(0x3d4)]=function(){const _0x3d046b=_0x4b2772;Game_Battler['prototype'][_0x3d046b(0x3d4)][_0x3d046b(0xb2b)](this),this[_0x3d046b(0xbe5)]()&&this[_0x3d046b(0x3e7)]()&&(_0x3d046b(0x581)!==_0x3d046b(0x274)?this[_0x3d046b(0x66d)](_0x3d046b(0x33f)):(_0x3f3392[_0x3d046b(0xac0)]=!![],this[_0x3d046b(0xc44)](_0x481355))),SoundManager[_0x3d046b(0x5a8)]();},Game_Enemy[_0x4b2772(0x632)]['performEvasion']=function(){const _0x52d055=_0x4b2772;Game_Battler['prototype'][_0x52d055(0xaaf)][_0x52d055(0xb2b)](this),this[_0x52d055(0x66d)](_0x52d055(0xa4d));},Game_Enemy[_0x4b2772(0x632)][_0x4b2772(0x2d3)]=function(){const _0x1dffcf=_0x4b2772;Game_Battler['prototype'][_0x1dffcf(0x2d3)]['call'](this),this[_0x1dffcf(0x66d)](_0x1dffcf(0xa4d));},Game_Enemy['prototype']['performCounter']=function(){const _0x192964=_0x4b2772;Game_Battler[_0x192964(0x632)][_0x192964(0xbd7)][_0x192964(0xb2b)](this),this[_0x192964(0x425)]();},Game_Enemy['prototype']['allowCollapse']=function(){const _0x5e3bc3=_0x4b2772;if(this[_0x5e3bc3(0x3e7)]()){if(this['collapseType']()>=0x1)return!![];return this['svBattlerData']()[_0x5e3bc3(0xa23)];}else return!![];},Game_Enemy[_0x4b2772(0x632)]['svBattlerAnchorX']=function(){return this['svBattlerData']()['anchorX'];},Game_Enemy[_0x4b2772(0x632)][_0x4b2772(0x89f)]=function(){const _0x585041=_0x4b2772;return this[_0x585041(0xa5c)]()[_0x585041(0xbf1)];},Game_Enemy[_0x4b2772(0x632)][_0x4b2772(0x322)]=function(){const _0x3366ac=_0x4b2772;return this['svBattlerData']()[_0x3366ac(0x96b)];},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x6f9)]=Game_Enemy[_0x4b2772(0x632)][_0x4b2772(0x2ad)],Game_Enemy[_0x4b2772(0x632)]['transform']=function(_0x54a269){const _0x14e0eb=_0x4b2772;VisuMZ[_0x14e0eb(0x67d)][_0x14e0eb(0x6f9)][_0x14e0eb(0xb2b)](this,_0x54a269),this['clearBattleCoreData'](),this[_0x14e0eb(0x665)]();const _0x323736=this[_0x14e0eb(0x947)]();if(_0x323736)_0x323736[_0x14e0eb(0xb6e)](this);},Game_Unit[_0x4b2772(0x632)][_0x4b2772(0xb68)]=function(_0x2362b3){const _0x379802=_0x4b2772;for(const _0x95e0e9 of this[_0x379802(0x644)]()){if(_0x95e0e9)_0x95e0e9[_0x379802(0xb68)](_0x2362b3);}},Game_Unit[_0x4b2772(0x632)][_0x4b2772(0x941)]=function(){const _0x57f381=_0x4b2772,_0x1a6aa9=this[_0x57f381(0x668)]();return _0x1a6aa9[Math[_0x57f381(0x619)](_0x1a6aa9[_0x57f381(0x1e9)])];},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x594)]=Game_Party[_0x4b2772(0x632)][_0x4b2772(0xb7d)],Game_Party['prototype'][_0x4b2772(0xb7d)]=function(_0x531b3d){const _0x5e878c=_0x4b2772;VisuMZ[_0x5e878c(0x67d)]['Game_Party_addActor'][_0x5e878c(0xb2b)](this,_0x531b3d),BattleManager[_0x5e878c(0x2f4)]();},VisuMZ[_0x4b2772(0x67d)]['Game_Party_removeActor']=Game_Party[_0x4b2772(0x632)][_0x4b2772(0x367)],Game_Party['prototype'][_0x4b2772(0x367)]=function(_0x8a53eb){const _0x30e583=_0x4b2772;VisuMZ['BattleCore'][_0x30e583(0xacb)][_0x30e583(0xb2b)](this,_0x8a53eb),BattleManager[_0x30e583(0x2f4)]();},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xa9d)]=Game_Troop['prototype'][_0x4b2772(0xc74)],Game_Troop['prototype'][_0x4b2772(0xc74)]=function(_0x573b62){const _0x264eed=_0x4b2772;$gameTemp[_0x264eed(0x4a9)](),$gameTemp[_0x264eed(0x5ff)](_0x573b62),VisuMZ[_0x264eed(0x67d)][_0x264eed(0xa9d)][_0x264eed(0xb2b)](this,_0x573b62),this['extendTroopMembers']();},VisuMZ[_0x4b2772(0x67d)]['Game_Troop_expTotal']=Game_Troop[_0x4b2772(0x632)][_0x4b2772(0x53a)],Game_Troop[_0x4b2772(0x632)][_0x4b2772(0x53a)]=function(){const _0x4ce822=_0x4b2772;let _0x1681ff=VisuMZ['BattleCore'][_0x4ce822(0x50c)]['call'](this);if(this['expRate']){if(_0x4ce822(0x701)===_0x4ce822(0x8ed)){if(!this['_linkedSprite'])return;this[_0x4ce822(0x9a7)]=this[_0x4ce822(0x9a7)]||_0x573d78['prototype']['lineHeight'](),this['x']=_0x3f2671['round'](this['_linkedSprite'][_0x4ce822(0xc20)]),this['y']=_0x14432b[_0x4ce822(0x4ed)](this[_0x4ce822(0xc23)][_0x4ce822(0xaba)]-this[_0x4ce822(0x9a7)]*0.5);const _0x44a563=_0x2c6802[_0x4ce822(0x67d)][_0x4ce822(0x869)]['Enemy'];this['x']+=_0x2298f0[_0x4ce822(0x4ed)](_0x44a563[_0x4ce822(0x697)]||0x0),this['y']+=_0x4d7a4a[_0x4ce822(0x4ed)](_0x44a563['NameOffsetY']||0x0);}else _0x1681ff*=this[_0x4ce822(0x63f)]();}return Math[_0x4ce822(0x75d)](_0x1681ff);},Game_Troop[_0x4b2772(0x632)][_0x4b2772(0x63f)]=function(){return 0x1;},Game_Troop['prototype'][_0x4b2772(0x4e6)]=function(){const _0x3a554e=_0x4b2772,_0x158fdf=this[_0x3a554e(0x9d9)]()[_0x3a554e(0x8fe)]||'';if(_0x158fdf[_0x3a554e(0x93d)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){if(_0x3a554e(0x71c)!==_0x3a554e(0xaf3)){const _0x49a05b=RegExp['$1'][_0x3a554e(0xc24)](',')['map'](_0x3ee1c4=>Number(_0x3ee1c4));this[_0x3a554e(0x603)](),this[_0x3a554e(0x9e7)](_0x49a05b);}else{_0x5ecb7a[_0x3a554e(0xa66)]();let _0x2e2662=_0x57c7f4[_0x3a554e(0x67d)]['Settings'][_0x3a554e(0xcb4)]['ReflectAnimation'];_0x2e2662>0x0&&(_0x446e67[_0x3a554e(0x2d5)]?_0x1ec27b[_0x3a554e(0x784)]([this],_0x2e2662):_0x2078c3[_0x3a554e(0x6f3)]([this],_0x2e2662));}}},Game_Troop[_0x4b2772(0x632)][_0x4b2772(0x603)]=function(){const _0x34e37d=_0x4b2772;let _0x5014b9=_0x34e37d(0x678)+'\x0a';_0x5014b9+='version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.';Imported[_0x34e37d(0x227)]&&(VisuMZ['BattleSystemBTB'][_0x34e37d(0x3f6)]<1.11&&(alert(_0x5014b9[_0x34e37d(0x934)](_0x34e37d(0x68e))),SceneManager[_0x34e37d(0xaf9)]()));if(Imported[_0x34e37d(0xadb)]){if(_0x34e37d(0xaa9)==='XXdhE')_0x339210+=(_0x123e3a[_0x34e37d(0x67b)]-_0x50b08b)/0x2;else{if(VisuMZ['BattleSystemCTB'][_0x34e37d(0x3f6)]<1.19){if(_0x34e37d(0x6fa)!==_0x34e37d(0xa9e))alert(_0x5014b9[_0x34e37d(0x934)](_0x34e37d(0x605))),SceneManager[_0x34e37d(0xaf9)]();else{if(!_0x519048[_0x34e37d(0x885)]())return;if(!_0x574cf9[_0x34e37d(0x795)])return;const _0xe0b865=_0x42c9af[_0x34e37d(0x463)];if(!_0xe0b865)return;_0xe0b865[_0x34e37d(0x6ce)]=!![];}}}}Imported[_0x34e37d(0x409)]&&(VisuMZ['BattleSystemSTB']['version']<1.15&&(alert(_0x5014b9[_0x34e37d(0x934)]('STB')),SceneManager[_0x34e37d(0xaf9)]()));},Game_Troop[_0x4b2772(0x632)][_0x4b2772(0x9e7)]=function(_0x36b3dc){const _0x588d95=_0x4b2772;this[_0x588d95(0xbd8)]={};for(const _0x49648e of this[_0x588d95(0x644)]()){if(!_0x49648e)continue;_0x49648e['setLetter']('');}for(const _0x2cfc31 of _0x36b3dc){const _0xf3f2cf=$dataTroops[_0x2cfc31];if(_0xf3f2cf)this[_0x588d95(0x415)](_0xf3f2cf);}this['makeUniqueNames']();},Game_Troop['prototype'][_0x4b2772(0x415)]=function(_0x49db2d){const _0x1748e3=_0x4b2772;for(const _0x3d4694 of _0x49db2d[_0x1748e3(0x644)]){if($dataEnemies[_0x3d4694['enemyId']]){if(_0x1748e3(0x8fa)!=='fbISG')!_0x1c25c5[_0x1748e3(0x949)]()[_0x1748e3(0x41a)](this[_0x1748e3(0x24b)])&&(this['_tpbSceneChangeCacheActor']=null);else{const _0x940cb1=_0x3d4694[_0x1748e3(0xc83)],_0x2e613b=_0x3d4694['x'],_0x54599b=_0x3d4694['y'],_0xe01cbf=new Game_Enemy(_0x940cb1,_0x2e613b,_0x54599b);_0x3d4694['hidden']&&_0xe01cbf['hide'](),this[_0x1748e3(0x321)][_0x1748e3(0x21f)](_0xe01cbf);}}}},VisuMZ['BattleCore'][_0x4b2772(0x7bb)]=Game_Map['prototype']['setupBattleback'],Game_Map[_0x4b2772(0x632)][_0x4b2772(0x9d2)]=function(){const _0x3ed49f=_0x4b2772;VisuMZ[_0x3ed49f(0x67d)][_0x3ed49f(0x7bb)]['call'](this),this[_0x3ed49f(0x5fa)]();},Game_Map['prototype'][_0x4b2772(0x5fa)]=function(){const _0x542a3a=_0x4b2772;this[_0x542a3a(0xb28)]={},this[_0x542a3a(0xae4)]={};if(!$dataMap)return;const _0x180803=$dataMap['note'];if(!_0x180803)return;const _0x15bb04=_0x180803[_0x542a3a(0x93d)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x15bb04)for(const _0x3ec279 of _0x15bb04){if(_0x542a3a(0x3f3)!==_0x542a3a(0x80a)){_0x3ec279[_0x542a3a(0x93d)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x3ecce8=Number(RegExp['$1']),_0x40e6f3=Number(RegExp['$2']),_0x38862b=_0x40e6f3===0x1?this[_0x542a3a(0xb28)]:this[_0x542a3a(0xae4)],_0x91bc53=String(RegExp['$3']);_0x38862b[_0x3ecce8]=_0x91bc53;}else return _0x2272eb['BattleCore'][_0x542a3a(0x869)][_0x542a3a(0x7f4)]['AllowRandomSpeed'];}},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xa44)]=Game_Map[_0x4b2772(0x632)]['battleback1Name'],Game_Map[_0x4b2772(0x632)][_0x4b2772(0x4af)]=function(){const _0x11f50d=_0x4b2772;if(!BattleManager[_0x11f50d(0x7ea)]()){if(_0x11f50d(0xc7e)!=='FfBqE')_0x3a137e+=_0x5bc8b0[_0x11f50d(0x92d)]()?-_0x31bc4b:_0x36816c,_0xc3a0d9+=_0x5cc182;else{const _0x1da0db=$gamePlayer[_0x11f50d(0xa37)]($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this[_0x11f50d(0xb28)][_0x1da0db])return this[_0x11f50d(0xb28)][_0x1da0db];}}return VisuMZ[_0x11f50d(0x67d)]['Game_Map_battleback1Name'][_0x11f50d(0xb2b)](this);},VisuMZ['BattleCore'][_0x4b2772(0xa8c)]=Game_Map['prototype'][_0x4b2772(0xb7e)],Game_Map['prototype']['battleback2Name']=function(){const _0xcd2a3b=_0x4b2772;if(!BattleManager[_0xcd2a3b(0x7ea)]()){if('MpMjI'!==_0xcd2a3b(0xcc1))this[_0xcd2a3b(0xb68)](_0xcd2a3b(0x84f)),_0x3ea74d[_0xcd2a3b(0x67d)][_0xcd2a3b(0x3e3)]['call'](this),this[_0xcd2a3b(0x3bf)]('Victory');else{const _0x2d0849=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this[_0xcd2a3b(0xb28)]&&this['_regionBattleback2'][_0x2d0849])return this[_0xcd2a3b(0xae4)][_0x2d0849];}}return VisuMZ[_0xcd2a3b(0x67d)][_0xcd2a3b(0xa8c)][_0xcd2a3b(0xb2b)](this);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xcaa)]=Game_Map['prototype'][_0x4b2772(0x2dc)],Game_Map[_0x4b2772(0x632)]['encounterList']=function(){const _0x50cf43=_0x4b2772;let _0x3e3b62=JsonEx[_0x50cf43(0x23c)](VisuMZ['BattleCore']['Game_Map_encounterList']['call'](this));return VisuMZ[_0x50cf43(0x67d)][_0x50cf43(0xc90)](_0x3e3b62);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xc90)]=function(_0xe76d1e){const _0x3a731b=_0x4b2772;var _0x5eb249,_0x33217a,_0x1cc6d7;for(_0x1cc6d7=_0xe76d1e[_0x3a731b(0x1e9)]-0x1;_0x1cc6d7>0x0;_0x1cc6d7--){_0x5eb249=Math[_0x3a731b(0x805)](Math['random']()*(_0x1cc6d7+0x1)),_0x33217a=_0xe76d1e[_0x1cc6d7],_0xe76d1e[_0x1cc6d7]=_0xe76d1e[_0x5eb249],_0xe76d1e[_0x5eb249]=_0x33217a;}return _0xe76d1e;},VisuMZ['BattleCore'][_0x4b2772(0x358)]=Game_Interpreter[_0x4b2772(0x632)]['command357'],Game_Interpreter['prototype'][_0x4b2772(0xc98)]=function(_0xa9a1ef){const _0x35fe69=_0x4b2772;return $gameTemp[_0x35fe69(0x745)](this),VisuMZ[_0x35fe69(0x67d)][_0x35fe69(0x358)][_0x35fe69(0xb2b)](this,_0xa9a1ef);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x208)]=Game_Interpreter[_0x4b2772(0x632)][_0x4b2772(0x58c)],Game_Interpreter['prototype'][_0x4b2772(0x58c)]=function(){const _0x2060a2=_0x4b2772;if(SceneManager[_0x2060a2(0x885)]())switch(this[_0x2060a2(0x63b)]){case _0x2060a2(0xb03):if(Imported[_0x2060a2(0x39b)]){if('DVTJl'===_0x2060a2(0x6fb))return _0x240f4b[_0x2060a2(0x2d5)]?_0x187a85[_0x2060a2(0x2e4)]['Settings']['QoL']['DigitGroupingDamageSprites']:![];else{if($gameScreen['battleCameraData']()['angleDuration']>0x0)return!![];this[_0x2060a2(0x63b)]='';}}break;case _0x2060a2(0x98a):if(BattleManager[_0x2060a2(0x34a)][_0x2060a2(0xb62)]())return!![];this['_waitMode']='';break;case _0x2060a2(0x8ba):if(Imported[_0x2060a2(0x39b)]){if(_0x2060a2(0x858)!==_0x2060a2(0x5d2)){if($gameScreen[_0x2060a2(0x877)]()[_0x2060a2(0xc82)]>0x0)return!![];if($gameScreen[_0x2060a2(0x877)]()[_0x2060a2(0x982)]>0x0)return!![];this[_0x2060a2(0x63b)]='';}else{const _0xb1a972=_0x2aee89[_0x2060a2(0x75d)](_0x2ff3da[_0x2060a2(0x67b)]/0x3),_0x287f6e=_0x591af3[_0x2060a2(0x4ed)]((_0x49f3fe[_0x2060a2(0xcd9)]-_0xb1a972)/0x2),_0x2be31d=this[_0x2060a2(0xc14)](),_0x7b6dc0=_0x2be31d['y'],_0x1b10c9=_0x2be31d[_0x2060a2(0x4c3)];return new _0x45c440(_0x287f6e,_0x7b6dc0,_0xb1a972,_0x1b10c9);}}break;case _0x2060a2(0xba0):if(BattleManager['_spriteset'][_0x2060a2(0x492)]())return!![];this['_waitMode']='';break;case _0x2060a2(0x9f1):if(BattleManager['_spriteset'][_0x2060a2(0x3e2)]())return!![];this[_0x2060a2(0x63b)]='';break;case _0x2060a2(0x2c0):if(BattleManager[_0x2060a2(0x34a)][_0x2060a2(0xaa7)]())return!![];this['_waitMode']='';break;case _0x2060a2(0x371):if(BattleManager['_logWindow']['isBusy']())return!![];this[_0x2060a2(0x63b)]='';break;case _0x2060a2(0x4bc):if(BattleManager[_0x2060a2(0x34a)][_0x2060a2(0x401)]())return!![];this[_0x2060a2(0x63b)]='';break;case'battleOpacity':if(BattleManager[_0x2060a2(0x34a)]['isAnyoneChangingOpacity']())return!![];this['_waitMode']='';break;case _0x2060a2(0x3c9):if(BattleManager[_0x2060a2(0x34a)][_0x2060a2(0x848)]())return!![];this['_waitMode']='';break;case _0x2060a2(0x8bb):if(BattleManager[_0x2060a2(0x34a)][_0x2060a2(0x8dd)]())return!![];this[_0x2060a2(0x63b)]='';break;case'battleProjectiles':if(Imported[_0x2060a2(0xc0d)]){if(BattleManager['_spriteset']['isAnyProjectilePresent']())return!![];this[_0x2060a2(0x63b)]='';}break;case _0x2060a2(0xb8e):if(Imported[_0x2060a2(0x39b)]){if($gameScreen['battleCameraData']()['skewDuration']>0x0)return!![];this[_0x2060a2(0x63b)]='';}break;case'battleSpin':if(BattleManager['_spriteset'][_0x2060a2(0x7be)]())return!![];this['_waitMode']='';break;case'battleZoom':if(Imported[_0x2060a2(0x39b)]){if(_0x2060a2(0x4d2)!=='cEbHU'){if($gameScreen[_0x2060a2(0x877)]()[_0x2060a2(0x4cc)]>0x0)return!![];this[_0x2060a2(0x63b)]='';}else return _0x16fb62[_0x2060a2(0x632)][_0x2060a2(0x5ea)]['call'](this);}break;case'battleInjectPrep':if(Imported['VisuMZ_3_ActSeqImpact']){if(BattleManager[_0x2060a2(0x34a)]['isAnyoneInjectAniPrepping']){if(_0x2060a2(0xc3a)===_0x2060a2(0xa02)){const _0x385fb5=_0x38e511(_0x540e04['$1']);return[_0xed3466[_0x2060a2(0xbfe)]()[_0x2060a2(0x644)]()[_0x385fb5]];}else{if(BattleManager[_0x2060a2(0x34a)][_0x2060a2(0x846)]())return!![];this[_0x2060a2(0x63b)]=_0x2060a2(0xa2a);}}else this['_waitMode']='';break;}break;case _0x2060a2(0xa2a):if(Imported[_0x2060a2(0x6ed)]){if(_0x2060a2(0x2be)===_0x2060a2(0x2d6))_0x383dde['BattleCore'][_0x2060a2(0x5ca)][_0x2060a2(0xb2b)](this),_0x1e5ffe[_0x2060a2(0xbc4)]&&(this[_0x2060a2(0x65d)]=!![],_0x3319b1[_0x2060a2(0xbc4)]=_0x272361);else{if(BattleManager[_0x2060a2(0x34a)][_0x2060a2(0x54a)]())return!![];this['_waitMode']='';}}break;}return VisuMZ[_0x2060a2(0x67d)][_0x2060a2(0x208)][_0x2060a2(0xb2b)](this);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x868)]=Game_Interpreter[_0x4b2772(0x632)][_0x4b2772(0x202)],Game_Interpreter[_0x4b2772(0x632)][_0x4b2772(0x202)]=function(_0x2bf3ad){const _0x41e307=_0x4b2772;return!$gameParty['inBattle']()?'VMZLG'!==_0x41e307(0x74f)?_0x2f6c98[_0x41e307(0x668)]():this[_0x41e307(0x808)](_0x2bf3ad):VisuMZ[_0x41e307(0x67d)][_0x41e307(0x868)][_0x41e307(0xb2b)](this,_0x2bf3ad);},Game_Interpreter[_0x4b2772(0x632)][_0x4b2772(0xbdc)]=function(_0x3dd3ad){const _0x2fda63=_0x4b2772;return VisuMZ[_0x2fda63(0x67d)][_0x2fda63(0x868)][_0x2fda63(0xb2b)](this,_0x3dd3ad),BattleManager[_0x2fda63(0xa43)](_0xaef008=>{const _0x168b8c=_0x2fda63;this[_0x168b8c(0xa9c)][this[_0x168b8c(0x31b)]]=_0xaef008;}),!![];},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x25d)]=function(_0x8751d6){const _0x2db68f=_0x4b2772,_0x4d31dd=$dataCommonEvents[_0x8751d6];if(!_0x4d31dd)return![];if(_0x4d31dd[_0x2db68f(0xc64)]['length']<=0x1)return![];return!![];},Game_Interpreter['prototype'][_0x4b2772(0x808)]=function(_0x29c453){const _0x17ddc7=_0x4b2772,_0x5782d3=VisuMZ[_0x17ddc7(0x67d)][_0x17ddc7(0x869)][_0x17ddc7(0x7f4)],_0x35b0c0=_0x5782d3[_0x17ddc7(0x3ec)],_0x308f3b=$dataCommonEvents[_0x35b0c0];if(_0x308f3b&&VisuMZ[_0x17ddc7(0x67d)]['CheckMapBattleEventValid'](_0x35b0c0)){const _0xd08e7e=this[_0x17ddc7(0xcf0)]()?this['_eventId']:0x0,_0x2b3b1b=_0x308f3b[_0x17ddc7(0xc64)];this[_0x17ddc7(0x727)](_0x2b3b1b,_0xd08e7e),this['_list']=JsonEx[_0x17ddc7(0x23c)](this[_0x17ddc7(0xa2b)]);const _0x3ad081={'code':0xbc3,'indent':this['_indent'],'parameters':JsonEx['makeDeepCopy'](_0x29c453)};return this[_0x17ddc7(0xa2b)]['splice'](this[_0x17ddc7(0x23b)]+0x1,0x0,_0x3ad081),!![];}else return VisuMZ['BattleCore']['Game_Interpreter_command301'][_0x17ddc7(0xb2b)](this,_0x29c453);},VisuMZ[_0x4b2772(0x67d)]['BattleManager_onEncounter']=BattleManager[_0x4b2772(0x8f1)],BattleManager[_0x4b2772(0x8f1)]=function(){const _0x1f664e=_0x4b2772;VisuMZ[_0x1f664e(0x67d)][_0x1f664e(0xc3b)]['call'](this),this[_0x1f664e(0xa10)]();},BattleManager[_0x4b2772(0xa10)]=function(){const _0x19f02a=_0x4b2772,_0x510c3c=VisuMZ[_0x19f02a(0x67d)][_0x19f02a(0x869)][_0x19f02a(0x7f4)],_0x3c0d4d=_0x510c3c[_0x19f02a(0x3ec)];_0x3c0d4d&&VisuMZ[_0x19f02a(0x67d)]['CheckMapBattleEventValid'](_0x3c0d4d)&&(_0x19f02a(0xc3f)!==_0x19f02a(0xc3f)?this['opacity']=0x0:(this[_0x19f02a(0xcd2)]=!![],$gameTemp[_0x19f02a(0xb6d)](_0x510c3c[_0x19f02a(0x3ec)]),$gameMap['updateInterpreter'](),$gameMap[_0x19f02a(0xbf0)][_0x19f02a(0x577)]=!![]));if(_0x510c3c[_0x19f02a(0xccc)]>0x0){if('NftXo'===_0x19f02a(0x468)){const _0x3e72ae=this['battler']();_0x3e72ae&&_0x3e72ae[_0x19f02a(0x400)]();}else this[_0x19f02a(0x74c)]=!![];}},VisuMZ[_0x4b2772(0x67d)]['Scene_Map_updateCallMenu']=Scene_Map[_0x4b2772(0x632)][_0x4b2772(0xa68)],Scene_Map[_0x4b2772(0x632)][_0x4b2772(0xa68)]=function(){const _0x4ede0e=_0x4b2772;if(BattleManager[_0x4ede0e(0xcd2)])return;VisuMZ[_0x4ede0e(0x67d)][_0x4ede0e(0x1eb)]['call'](this);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xc37)]=Scene_Map[_0x4b2772(0x632)][_0x4b2772(0x663)],Scene_Map[_0x4b2772(0x632)][_0x4b2772(0x663)]=function(){const _0x31949a=_0x4b2772;BattleManager['_battleCoreBattleStartEvent']?this[_0x31949a(0x799)]():_0x31949a(0x563)==='tqFXZ'?this['x']=_0x33599e['boxWidth']-this[_0x31949a(0x79c)]()[_0x31949a(0x947)]()[_0x31949a(0xc20)]:VisuMZ[_0x31949a(0x67d)]['Scene_Map_launchBattle'][_0x31949a(0xb2b)](this);},Scene_Map[_0x4b2772(0x632)][_0x4b2772(0x799)]=function(){const _0x1474a4=_0x4b2772;this[_0x1474a4(0x65d)]=!![];},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xb92)]=SceneManager[_0x4b2772(0x748)],SceneManager[_0x4b2772(0x748)]=function(){const _0x7c3ec1=_0x4b2772;if(BattleManager['_battleCoreBattleStartEvent'])return![];return VisuMZ[_0x7c3ec1(0x67d)][_0x7c3ec1(0xb92)][_0x7c3ec1(0xb2b)](this);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x986)]=Game_Interpreter[_0x4b2772(0x632)][_0x4b2772(0x464)],Game_Interpreter[_0x4b2772(0x632)]['terminate']=function(){const _0x2c1010=_0x4b2772;VisuMZ['BattleCore'][_0x2c1010(0x986)][_0x2c1010(0xb2b)](this),this['_preBattleCommonEvent']&&(this[_0x2c1010(0x577)]=undefined,SceneManager['_scene'][_0x2c1010(0x2ed)]());},Scene_Map[_0x4b2772(0x632)][_0x4b2772(0x2ed)]=function(){const _0xaec38c=_0x4b2772;BattleManager[_0xaec38c(0xcd2)]=undefined,BattleManager['_battleCoreBattleResumeAfter']=!![],this[_0xaec38c(0xabb)]();},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x5ca)]=Scene_Map['prototype'][_0x4b2772(0xb0d)],Scene_Map[_0x4b2772(0x632)][_0x4b2772(0xb0d)]=function(){const _0x43d12b=_0x4b2772;VisuMZ[_0x43d12b(0x67d)][_0x43d12b(0x5ca)][_0x43d12b(0xb2b)](this),BattleManager[_0x43d12b(0xbc4)]&&(this[_0x43d12b(0x65d)]=!![],BattleManager[_0x43d12b(0xbc4)]=undefined);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x324)]=Scene_Map[_0x4b2772(0x632)][_0x4b2772(0xb0d)],Scene_Map['prototype'][_0x4b2772(0xb0d)]=function(){const _0x2b42f5=_0x4b2772;VisuMZ[_0x2b42f5(0x67d)]['Scene_Map_initialize'][_0x2b42f5(0xb2b)](this),$gameTemp[_0x2b42f5(0x4a9)]();},VisuMZ['BattleCore'][_0x4b2772(0x585)]=Scene_ItemBase[_0x4b2772(0x632)][_0x4b2772(0x263)],Scene_ItemBase[_0x4b2772(0x632)][_0x4b2772(0x263)]=function(){const _0x130e3a=_0x4b2772;VisuMZ['BattleCore'][_0x130e3a(0x585)][_0x130e3a(0xb2b)](this);if(this[_0x130e3a(0x30a)]()[_0x130e3a(0x28a)][_0x130e3a(0x93d)](/<BYPASS AUTO ACTION SEQUENCE>/i)){if(_0x130e3a(0xb35)===_0x130e3a(0x5b5)){const _0x55e4b0=_0x3569e0[_0x130e3a(0x97e)]['Settings'][_0x130e3a(0x637)];_0x55e4b0&&_0x55e4b0[_0x130e3a(0x6a6)]===![]&&this[_0x130e3a(0x2d8)](0x1);}else return;}this[_0x130e3a(0x30a)]()[_0x130e3a(0x28a)][_0x130e3a(0x93d)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x130e3a(0xbea)]=[]),DataManager[_0x130e3a(0x53b)](this['item']())&&($gameTemp[_0x130e3a(0xbea)]=[]);},VisuMZ[_0x4b2772(0x67d)]['Scene_Options_maxCommands']=Scene_Options[_0x4b2772(0x632)][_0x4b2772(0x7fb)],Scene_Options[_0x4b2772(0x632)][_0x4b2772(0x7fb)]=function(){const _0xa0560a=_0x4b2772;let _0x2c154f=VisuMZ[_0xa0560a(0x67d)][_0xa0560a(0x937)][_0xa0560a(0xb2b)](this);const _0x43d89d=VisuMZ['BattleCore'][_0xa0560a(0x869)];if(_0x43d89d['AutoBattle'][_0xa0560a(0x839)]&&_0x43d89d[_0xa0560a(0x985)]['AdjustRect'])_0x2c154f+=0x2;if(_0x43d89d['HpGauge'][_0xa0560a(0x839)]&&_0x43d89d[_0xa0560a(0x28c)][_0xa0560a(0x5a5)])_0x2c154f+=0x1;return _0x2c154f;},VisuMZ['BattleCore']['Scene_Battle_initialize']=Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0xb0d)],Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0xb0d)]=function(){const _0x450c66=_0x4b2772;VisuMZ[_0x450c66(0x67d)][_0x450c66(0x682)][_0x450c66(0xb2b)](this),this[_0x450c66(0x306)]();},VisuMZ['BattleCore'][_0x4b2772(0xcb0)]=Scene_Battle['prototype'][_0x4b2772(0xb1d)],Scene_Battle['prototype']['start']=function(){const _0x3562c2=_0x4b2772;if(SceneManager['isPreviousSceneBattleTransitionable']()){Scene_Message[_0x3562c2(0x632)]['start'][_0x3562c2(0xb2b)](this);this[_0x3562c2(0x34a)]&&this['_spriteset'][_0x3562c2(0x49d)]();if(BattleManager[_0x3562c2(0x24b)]){if(_0x3562c2(0x4d8)===_0x3562c2(0x33b)){const _0x5bbefe=_0x3218cf(_0x157ea2['$1'])[_0x3562c2(0xc24)](/[\r\n]+/)['remove']('');_0x2004c3['motionIdle']=_0x4fed3e[_0x3562c2(0x339)](_0x5bbefe);}else BattleManager['revertTpbCachedActor']();}}else VisuMZ[_0x3562c2(0x67d)][_0x3562c2(0xcb0)][_0x3562c2(0xb2b)](this),$gameTroop['onBattleStartOnceParallels']();},VisuMZ['BattleCore'][_0x4b2772(0x501)]=Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0xabb)],Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0xabb)]=function(){const _0x5ca496=_0x4b2772;SceneManager[_0x5ca496(0x3d3)]()?Scene_Message[_0x5ca496(0x632)][_0x5ca496(0xabb)][_0x5ca496(0xb2b)](this):VisuMZ[_0x5ca496(0x67d)][_0x5ca496(0x501)][_0x5ca496(0xb2b)](this);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x536)]=Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x464)],Scene_Battle['prototype'][_0x4b2772(0x464)]=function(){const _0x2134e2=_0x4b2772;SceneManager[_0x2134e2(0x3d3)]()?Scene_Message[_0x2134e2(0x632)][_0x2134e2(0x464)][_0x2134e2(0xb2b)](this):VisuMZ['BattleCore'][_0x2134e2(0x536)][_0x2134e2(0xb2b)](this),this[_0x2134e2(0x306)]();},Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x8e5)]=function(){const _0x4fa030=_0x4b2772;if(ConfigManager[_0x4fa030(0x5ed)]&&ConfigManager[_0x4fa030(0x512)]!==undefined)return _0x4fa030(0xca4)===_0x4fa030(0xca4)?ConfigManager[_0x4fa030(0x512)]:_0x458893[_0x4fa030(0x67d)][_0x4fa030(0x869)]['Enemy'][_0x4fa030(0x664)];else{if(this[_0x4fa030(0x421)]()==='border')return![];else{return Scene_Message[_0x4fa030(0x632)]['isRightInputMode'][_0x4fa030(0xb2b)](this);;}}},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xc47)]=Scene_Battle['prototype'][_0x4b2772(0x2ac)],Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x2ac)]=function(){const _0x102b4e=_0x4b2772;this[_0x102b4e(0xc67)](),VisuMZ[_0x102b4e(0x67d)][_0x102b4e(0xc47)][_0x102b4e(0xb2b)](this),this[_0x102b4e(0x4e1)]();},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x8a4)]=Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x1e0)],Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x1e0)]=function(){const _0x27f865=_0x4b2772;VisuMZ['BattleCore'][_0x27f865(0x8a4)][_0x27f865(0xb2b)](this);if(this[_0x27f865(0x421)]()==='border'){if(_0x27f865(0x23d)===_0x27f865(0x45d)){const _0x54a0ea=this[_0x27f865(0xc39)];_0x54a0ea[_0x27f865(0x2fb)]['clear']();const _0x46dd38=this['commandStyleCheck'](this[_0x27f865(0x89a)]());if(_0x46dd38===_0x27f865(0xa4a)&&this['maxItems']()>0x0){const _0x29400a=this['itemLineRect'](this[_0x27f865(0x89a)]());let _0x21bd54=this[_0x27f865(0x515)](this[_0x27f865(0x89a)]());_0x21bd54=_0x21bd54[_0x27f865(0x970)](/\\I\[(\d+)\]/gi,''),_0x54a0ea['resetFontSettings'](),this[_0x27f865(0x529)](_0x21bd54,_0x29400a),this[_0x27f865(0xc4c)](_0x21bd54,_0x29400a),this[_0x27f865(0x7d0)](_0x21bd54,_0x29400a);}}else this[_0x27f865(0x9c6)]();}},Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x420)]=function(_0x68fff3){const _0x3a9022=_0x4b2772;_0x68fff3?(this[_0x3a9022(0x204)]['x']=(Graphics['width']-Graphics[_0x3a9022(0xcd9)])/0x2,this[_0x3a9022(0x204)]['y']=(Graphics[_0x3a9022(0x4c3)]-Graphics[_0x3a9022(0x218)])/0x2):(this[_0x3a9022(0x204)]['x']=Graphics[_0x3a9022(0x67b)]*0xa,this[_0x3a9022(0x204)]['y']=Graphics[_0x3a9022(0x4c3)]*0xa);},VisuMZ['BattleCore'][_0x4b2772(0xb4d)]=Scene_Battle[_0x4b2772(0x632)]['selectNextCommand'],Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x341)]=function(){const _0x3f5d87=_0x4b2772,_0x4edb2a=BattleManager['actor']();VisuMZ[_0x3f5d87(0x67d)][_0x3f5d87(0xb4d)][_0x3f5d87(0xb2b)](this);if(_0x4edb2a){if(_0x4edb2a===BattleManager[_0x3f5d87(0xa05)]())return;if(_0x4edb2a===BattleManager[_0x3f5d87(0x4f1)])return;if(_0x4edb2a[_0x3f5d87(0x947)]())_0x4edb2a['battler']()[_0x3f5d87(0x653)]();}},VisuMZ['BattleCore'][_0x4b2772(0x9eb)]=Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x4c1)],Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x4c1)]=function(){const _0xcb10b4=_0x4b2772,_0x27b0b=BattleManager[_0xcb10b4(0xa05)]();if(_0x27b0b&&_0x27b0b[_0xcb10b4(0x947)])_0x27b0b[_0xcb10b4(0x947)]()[_0xcb10b4(0x653)]();VisuMZ[_0xcb10b4(0x67d)][_0xcb10b4(0x9eb)][_0xcb10b4(0xb2b)](this);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xab9)]=Scene_Battle['prototype'][_0x4b2772(0x8d5)],Scene_Battle[_0x4b2772(0x632)]['logWindowRect']=function(){const _0x1c5ec4=_0x4b2772;if(VisuMZ[_0x1c5ec4(0x67d)]['Settings'][_0x1c5ec4(0xa7a)]['BattleLogRectJS'])return VisuMZ[_0x1c5ec4(0x67d)][_0x1c5ec4(0x869)][_0x1c5ec4(0xa7a)][_0x1c5ec4(0x27a)][_0x1c5ec4(0xb2b)](this);return VisuMZ['BattleCore'][_0x1c5ec4(0xab9)][_0x1c5ec4(0xb2b)](this);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x3f8)]=Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x733)],Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x733)]=function(){const _0x32f41c=_0x4b2772;VisuMZ['BattleCore'][_0x32f41c(0x3f8)]['call'](this),this[_0x32f41c(0xa6f)]();},Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0xa6f)]=function(){const _0x542056=_0x4b2772,_0x9d126e=this['_partyCommandWindow'];_0x9d126e[_0x542056(0x469)]('autoBattle',this[_0x542056(0x693)][_0x542056(0x624)](this)),_0x9d126e[_0x542056(0x469)](_0x542056(0x592),this[_0x542056(0x9fc)]['bind'](this));const _0x5a4c6d=this[_0x542056(0x421)]();switch(_0x5a4c6d){case'xp':case _0x542056(0xca0):return this[_0x542056(0x5a9)][_0x542056(0x86b)](0x1);break;}},Scene_Battle[_0x4b2772(0x632)]['commandAutoBattle']=function(){const _0x14f78a=_0x4b2772;BattleManager[_0x14f78a(0xba3)]=!![],$gameParty['makeActions'](),this[_0x14f78a(0x341)](),BattleManager[_0x14f78a(0x797)]()&&(_0x14f78a(0x705)===_0x14f78a(0x705)?BattleManager[_0x14f78a(0xa06)]=![]:_0x7fd97[_0x14f78a(0x67d)][_0x14f78a(0x2b5)]['call'](this,_0x11f352));},Scene_Battle[_0x4b2772(0x632)]['commandOptions']=function(){const _0x1efbbb=_0x4b2772;this['isQueueOptionsMenu']()?(this[_0x1efbbb(0xb85)]=!![],this['_logWindow'][_0x1efbbb(0x21f)](_0x1efbbb(0x60b),VisuMZ[_0x1efbbb(0x67d)][_0x1efbbb(0x869)][_0x1efbbb(0x8b9)][_0x1efbbb(0xbc7)])):this[_0x1efbbb(0x3bb)]();},Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x2c2)]=function(){const _0x5afb40=_0x4b2772;return BattleManager[_0x5afb40(0x6c7)]();},Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x3bb)]=function(){const _0x168ea5=_0x4b2772;this['_callSceneOptions']=![],this['_spriteset'][_0x168ea5(0x49d)](),this[_0x168ea5(0x204)][_0x168ea5(0x30d)]=![];if(BattleManager[_0x168ea5(0x7ea)]())($dataSystem['battleback1Name']||$dataSystem[_0x168ea5(0xb7e)])&&SceneManager['snapForBackground']();else($gameMap[_0x168ea5(0x4af)]()||$gameMap['battleback2Name']())&&SceneManager['snapForBackground']();SceneManager[_0x168ea5(0x21f)](Scene_Options),BattleManager[_0x168ea5(0x797)]()&&(BattleManager['_tpbSceneChangeCacheActor']=BattleManager[_0x168ea5(0xa05)]());},VisuMZ[_0x4b2772(0x67d)]['Scene_Battle_updateBattleProcess']=Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0xbae)],Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0xbae)]=function(){const _0x32e2da=_0x4b2772;VisuMZ[_0x32e2da(0x67d)][_0x32e2da(0xaad)][_0x32e2da(0xb2b)](this);if(this[_0x32e2da(0xb85)]&&!BattleManager[_0x32e2da(0x4f1)])this[_0x32e2da(0x3bb)]();},VisuMZ[_0x4b2772(0x67d)]['Scene_Battle_update']=Scene_Battle[_0x4b2772(0x632)]['update'],Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x49d)]=function(){const _0x5b2882=_0x4b2772;VisuMZ[_0x5b2882(0x67d)][_0x5b2882(0x7e3)][_0x5b2882(0xb2b)](this),this['updateOnceParallelInterpreters']();},Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x4e1)]=function(){const _0x3d6489=_0x4b2772,_0x1d957e=this[_0x3d6489(0x323)]();this[_0x3d6489(0x214)]=new Window_AutoBattleCancel(_0x1d957e),this[_0x3d6489(0x214)][_0x3d6489(0x6f7)](),this['addChild'](this[_0x3d6489(0x214)]);},Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x323)]=function(){const _0x2652ba=_0x4b2772;return VisuMZ['BattleCore'][_0x2652ba(0x869)][_0x2652ba(0x985)][_0x2652ba(0x3ed)]['call'](this);},Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x306)]=function(){const _0x17744a=_0x4b2772;this[_0x17744a(0xb34)]=[];},Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0xc5d)]=function(){const _0x156b61=_0x4b2772;if(!this[_0x156b61(0xb34)])return;for(const _0x5aa0c6 of this[_0x156b61(0xb34)]){if(_0x156b61(0x6d4)===_0x156b61(0x4f9)){const _0x45127a=_0x156b61(0x99a)[_0x156b61(0x934)](_0x476afa);_0x38d3f6[_0x156b61(0x67d)]['JS'][_0x320daf]=new _0x1d2e02(_0x45127a);}else _0x5aa0c6&&(_0x156b61(0x484)===_0x156b61(0xb83)?(_0x56a51c=(_0x3acd28+_0x11ef37)/0x2,_0x47b7aa=-0x1):_0x5aa0c6[_0x156b61(0x49d)]());}},Scene_Battle[_0x4b2772(0x632)]['playOnceParallelInterpreter']=function(_0x2cd751){const _0x21f78f=$dataCommonEvents[_0x2cd751];if(!_0x21f78f)return;const _0x360f06=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0x360f06),_0x360f06['setCommonEvent'](_0x2cd751);},Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0xa90)]=function(_0x4924a6){const _0x524b51=_0x4b2772;this['_onceParallelInterpreters']=this[_0x524b51(0xb34)]||[],this['_onceParallelInterpreters']['push'](_0x4924a6);},Scene_Battle['prototype'][_0x4b2772(0xba9)]=function(_0x4cc662){const _0xc0e7df=_0x4b2772;this['_onceParallelInterpreters']=this[_0xc0e7df(0xb34)]||[],this[_0xc0e7df(0xb34)]['remove'](_0x4cc662);},Game_Troop[_0x4b2772(0x632)]['onBattleStartOnceParallels']=function(){const _0xcade1d=_0x4b2772;for(const _0x4baadc of this[_0xcade1d(0x9d9)]()[_0xcade1d(0x53f)]){if(!this[_0xcade1d(0x332)](_0x4baadc))continue;SceneManager[_0xcade1d(0x21e)][_0xcade1d(0x3ad)](_0x4baadc);}},Game_Troop[_0x4b2772(0x632)]['doesPageHaveOnceParallelStart']=function(_0x100fb6){const _0xd932b7=_0x4b2772;if(!_0x100fb6)return;for(const _0x40a8d8 of _0x100fb6[_0xd932b7(0xc64)]){if([0x6c,0x198][_0xd932b7(0x41a)](_0x40a8d8[_0xd932b7(0x51d)])){const _0x5416b0=_0x40a8d8[_0xd932b7(0x98d)][0x0];if(_0x5416b0[_0xd932b7(0x93d)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x3ad)]=function(_0x354df9){const _0x301483=_0x4b2772;if(!_0x354df9)return;const _0x33e357=new Game_BattleOnceParallelInterpreter();this[_0x301483(0xa90)](_0x33e357),_0x33e357[_0x301483(0x554)](_0x354df9);};function Game_BattleOnceParallelInterpreter(){const _0x5437a4=_0x4b2772;this[_0x5437a4(0xb0d)](...arguments);}Game_BattleOnceParallelInterpreter[_0x4b2772(0x632)]=Object[_0x4b2772(0x861)](Game_Interpreter['prototype']),Game_BattleOnceParallelInterpreter[_0x4b2772(0x632)]['constructor']=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter['prototype'][_0x4b2772(0x669)]=function(_0x4d8dea){const _0x2ce179=_0x4b2772,_0xc3ff8f=$dataCommonEvents[_0x4d8dea];if(_0xc3ff8f){if(_0x2ce179(0x29d)!==_0x2ce179(0x99b))this[_0x2ce179(0xc74)](_0xc3ff8f[_0x2ce179(0xc64)],0x0);else{if(!_0xce6b5f[_0x2ce179(0x885)]())return;const _0x751fcf=_0x4c96cb[_0x2ce179(0x2ba)]();if(!_0x751fcf)return;_0x751fcf[_0x2ce179(0xc6d)](_0x2ce179(0x9f1));}}else this[_0x2ce179(0x464)]();},Game_BattleOnceParallelInterpreter[_0x4b2772(0x632)]['terminate']=function(){const _0xe2ab54=_0x4b2772;if(!SceneManager[_0xe2ab54(0x885)]())return;SceneManager[_0xe2ab54(0x21e)]['removeOnceParallelInterpreter'](this),Game_Interpreter[_0xe2ab54(0x632)][_0xe2ab54(0x464)][_0xe2ab54(0xb2b)](this);},Game_BattleOnceParallelInterpreter[_0x4b2772(0x632)]['setTroopPage']=function(_0x3b4115){const _0x41da4d=_0x4b2772;_0x3b4115?_0x41da4d(0x656)!==_0x41da4d(0x656)?(_0x53e7a8[_0x41da4d(0x67d)]['Window_BattleLog_performReflection']['call'](this,_0x4ac9c2),this[_0x41da4d(0x9da)]()):this['setup'](_0x3b4115[_0x41da4d(0xc64)],0x0):_0x41da4d(0x2b8)!==_0x41da4d(0x2b8)?_0x78800e[_0x41da4d(0x3b2)]=_0x1cfcd4['max'](0x1,_0x3a003b(_0x4fce91['$1'])):this[_0x41da4d(0x464)]();},Scene_Battle[_0x4b2772(0x632)]['isPartyCommandWindowDisabled']=function(){const _0x199d9f=_0x4b2772;return VisuMZ[_0x199d9f(0x67d)][_0x199d9f(0x869)]['PartyCmd']['DisablePartyCmd'];},VisuMZ[_0x4b2772(0x67d)]['Scene_Battle_startPartyCommandSelection']=Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x863)],Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x863)]=function(){const _0x137b88=_0x4b2772;this['isPartyCommandWindowDisabled']()?this[_0x137b88(0x85d)]():_0x137b88(0x973)==='IpGxP'?_0xb11522=_0xf9f012[_0x137b88(0x3b0)]:VisuMZ['BattleCore'][_0x137b88(0xbe2)]['call'](this);},Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x85d)]=function(){const _0x2eca44=_0x4b2772;if(BattleManager[_0x2eca44(0x394)]())this[_0x2eca44(0x341)]();else BattleManager[_0x2eca44(0x797)]()&&VisuMZ[_0x2eca44(0x67d)]['Scene_Battle_startPartyCommandSelection'][_0x2eca44(0xb2b)](this);},VisuMZ[_0x4b2772(0x67d)]['Scene_Battle_commandFight']=Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x92a)],Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x92a)]=function(){const _0x1156be=_0x4b2772;if(BattleManager[_0x1156be(0x797)]()){if(_0x1156be(0x2b7)===_0x1156be(0x4a5))return this[_0x1156be(0x303)]()[_0x1156be(0xb67)](_0x318ec6=>_0x318ec6[_0x1156be(0x3f1)]());else this[_0x1156be(0x6e0)](),this[_0x1156be(0xbf8)]();}else _0x1156be(0x912)!==_0x1156be(0xc8f)?VisuMZ[_0x1156be(0x67d)][_0x1156be(0x738)]['call'](this):(this[_0x1156be(0x568)]+=_0x57a34d[_0x1156be(0x9a5)](),this[_0x1156be(0x32d)]['y']+=_0x2fe317[_0x1156be(0x70c)]());},Scene_Battle['prototype'][_0x4b2772(0x6e0)]=function(){const _0xbeae76=_0x4b2772;if(!VisuMZ[_0xbeae76(0x67d)][_0xbeae76(0x72b)])return;if(Imported[_0xbeae76(0xadb)]&&BattleManager[_0xbeae76(0xce3)]())return;const _0x1db49d=$gameParty[_0xbeae76(0x668)]()[_0xbeae76(0xb8c)](_0x18eb98=>_0x18eb98[_0xbeae76(0x3c0)]()&&_0x18eb98[_0xbeae76(0xba6)]());BattleManager['_currentActor']=_0x1db49d[0x0]||null,BattleManager[_0xbeae76(0x203)]&&BattleManager[_0xbeae76(0x203)][_0xbeae76(0x201)](_0xbeae76(0xa3d));},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xc45)]=Scene_Battle['prototype'][_0x4b2772(0x715)],Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x715)]=function(){const _0x1027c7=_0x4b2772;VisuMZ['BattleCore'][_0x1027c7(0xc45)][_0x1027c7(0xb2b)](this),this[_0x1027c7(0x4ec)]();},Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x4ec)]=function(){const _0x62099c=_0x4b2772,_0x569990=this[_0x62099c(0x718)];_0x569990[_0x62099c(0x469)]('escape',this[_0x62099c(0x49a)][_0x62099c(0x624)](this)),_0x569990[_0x62099c(0x469)](_0x62099c(0x481),this['actorCommandAutoBattle'][_0x62099c(0x624)](this)),_0x569990[_0x62099c(0x469)](_0x62099c(0xa7d),this['actorCommandSingleSkill'][_0x62099c(0x624)](this)),BattleManager[_0x62099c(0x797)]()&&(this['isPartyCommandWindowDisabled']()?'iEuRE'==='BCFQe'?_0x5061cb[_0x62099c(0x90f)](0x0,0x0,_0x3f6754[_0x62099c(0x6de)][_0x62099c(0x67b)],this[_0x62099c(0x6de)][_0x62099c(0x4c3)]):delete _0x569990[_0x62099c(0x8b5)][_0x62099c(0x7f5)]:_0x569990[_0x62099c(0x469)](_0x62099c(0x7f5),this[_0x62099c(0x411)][_0x62099c(0x624)](this)));},Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x49a)]=function(){const _0x587ba0=_0x4b2772;this[_0x587ba0(0x713)]();},Scene_Battle['prototype'][_0x4b2772(0x507)]=function(){const _0x98ce6=_0x4b2772;BattleManager[_0x98ce6(0xa05)]()['makeAutoBattleActions'](),BattleManager[_0x98ce6(0x2c9)](),BattleManager[_0x98ce6(0x451)](),this[_0x98ce6(0x793)]();},Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x759)]=function(){const _0x21d80c=_0x4b2772,_0x23da65=BattleManager[_0x21d80c(0x31a)]();_0x23da65['setSkill'](this['_actorCommandWindow']['currentExt']()),this[_0x21d80c(0x613)]();},Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x411)]=function(){const _0x198931=_0x4b2772;if(this[_0x198931(0xb21)]()){if(_0x198931(0x6e4)!==_0x198931(0x6e4))return _0x2e3940['BattleCore'][_0x198931(0x24c)][_0x198931(0xb2b)](this,_0x49fcb1);else this[_0x198931(0x241)]();}else{if(_0x198931(0x6b2)!==_0x198931(0x6b2)){const _0x18bf62=_0x21ae59[_0x198931(0x67d)][_0x198931(0x869)][_0x198931(0x985)],_0x26b6df=this[_0x198931(0x384)]('autoBattleUseSkills');return _0x26b6df?_0x18bf62[_0x198931(0x92b)]:_0x18bf62['StyleOFF'];}else this[_0x198931(0xc38)]();}},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x72b)]=![],Scene_Battle['prototype']['tpbActorSwitchConditionsMet']=function(){const _0xc5c523=_0x4b2772;if(Imported[_0xc5c523(0xadb)]&&BattleManager[_0xc5c523(0xce3)]()){if(_0xc5c523(0x7b3)===_0xc5c523(0xa64)){let _0x533ccd=_0x352160(_0x3a7096['$1'])[_0xc5c523(0x970)](/,/g,'')[_0xc5c523(0x5fd)]()[_0xc5c523(0x75a)]();_0x42e028[_0xc5c523(0x67d)][_0xc5c523(0x969)][_0x533ccd]=_0x4d32c9['id'];}else return![];}else{if(!VisuMZ[_0xc5c523(0x67d)][_0xc5c523(0x72b)])return![];const _0x292f83=$gameParty[_0xc5c523(0x668)]()[_0xc5c523(0xb8c)](_0x51b287=>_0x51b287[_0xc5c523(0x3c0)]()&&_0x51b287[_0xc5c523(0xba6)]());return _0x292f83[_0xc5c523(0x1e9)]>0x0&&BattleManager[_0xc5c523(0xa05)]()!==_0x292f83[_0x292f83[_0xc5c523(0x1e9)]-0x1];}},Scene_Battle[_0x4b2772(0x632)]['performTpbActiveCheckSwitch']=function(){const _0x5b2670=_0x4b2772,_0x233701=BattleManager[_0x5b2670(0xa05)](),_0x604a8d=_0x233701['battler']();if(_0x604a8d)_0x604a8d['stepBack']();const _0xa8268f=$gameParty[_0x5b2670(0x668)]()[_0x5b2670(0xb8c)](_0x422572=>_0x422572[_0x5b2670(0x3c0)]()&&_0x422572[_0x5b2670(0xba6)]()),_0x24b6b5=_0xa8268f[_0x5b2670(0xae6)](_0x233701),_0x192d7b=_0xa8268f[_0x24b6b5+0x1];BattleManager[_0x5b2670(0x203)]=_0x192d7b||null;if(_0x192d7b)_0x192d7b['setActionState'](_0x5b2670(0xa3d));_0x233701['setActionState'](_0x5b2670(0x2e9)),this['changeInputWindow']();},Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0xc38)]=function(){const _0x573ee7=_0x4b2772;this[_0x573ee7(0x5a9)]['setup'](),this[_0x573ee7(0x718)][_0x573ee7(0x3f2)]();if(!VisuMZ[_0x573ee7(0x67d)]['TpbActiveChangeEnabled'])return;if(Imported[_0x573ee7(0xadb)]&&BattleManager['isCTB']())return;if(BattleManager[_0x573ee7(0x203)]){BattleManager[_0x573ee7(0x203)][_0x573ee7(0x201)](_0x573ee7(0x2e9));const _0x469a3b=BattleManager[_0x573ee7(0x203)][_0x573ee7(0x947)]();if(_0x469a3b)_0x469a3b[_0x573ee7(0x653)]();}BattleManager[_0x573ee7(0x203)]=null;},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xa7b)]=Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x31c)],Scene_Battle[_0x4b2772(0x632)]['createHelpWindow']=function(){const _0x8fb7ef=_0x4b2772;VisuMZ[_0x8fb7ef(0x67d)][_0x8fb7ef(0xa7b)][_0x8fb7ef(0xb2b)](this),this['createHelpWindowBattleCore']();},Scene_Battle[_0x4b2772(0x632)]['createHelpWindowBattleCore']=function(){const _0x2e7853=_0x4b2772;this[_0x2e7853(0x718)][_0x2e7853(0x34d)](this[_0x2e7853(0x3f9)]),this[_0x2e7853(0x5a9)][_0x2e7853(0x34d)](this[_0x2e7853(0x3f9)]);},Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x421)]=function(){const _0x5af516=_0x4b2772;if($gameTemp['_forcedBattleLayout']!==undefined)return _0x5af516(0xad9)===_0x5af516(0x6d9)?_0x3938e0[_0x5af516(0x67d)][_0x5af516(0x80c)][_0x5af516(0xb2b)](this):$gameTemp[_0x5af516(0x207)];if(this[_0x5af516(0xb26)])return this[_0x5af516(0xb26)];this['_battleLayoutStyle']=VisuMZ[_0x5af516(0x67d)][_0x5af516(0x869)][_0x5af516(0x335)][_0x5af516(0xcb8)]['toLowerCase']()[_0x5af516(0x75a)]();if(this[_0x5af516(0xb26)]===_0x5af516(0x867)&&!Imported[_0x5af516(0x65f)]){if(_0x5af516(0x6b9)!==_0x5af516(0x6b9)){if(this[_0x5af516(0x475)][_0x5af516(0xb02)]!==_0x5a8ae7)return this[_0x5af516(0x475)]['svAnchorX'];return this[_0x5af516(0xa05)]()[_0x5af516(0x28a)][_0x5af516(0x93d)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x5af516(0x475)][_0x5af516(0xb02)]=_0x52085b(_0x4c595a['$1']),this['_cache'][_0x5af516(0x899)]=_0x59d3cd(_0x156505['$2'])):this[_0x5af516(0x475)]['svAnchorX']=_0x964c70[_0x5af516(0x632)][_0x5af516(0x435)][_0x5af516(0xb2b)](this),this[_0x5af516(0x475)][_0x5af516(0xb02)];}else this['_battleLayoutStyle']='default';}return this[_0x5af516(0xb26)];},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xc00)]=Scene_Battle['prototype'][_0x4b2772(0x874)],Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x874)]=function(){const _0xfbe9a3=_0x4b2772,_0x3bf111=this['battleLayoutStyle']();switch(_0x3bf111){case _0xfbe9a3(0xc64):return this[_0xfbe9a3(0x8b7)](Math[_0xfbe9a3(0x20e)](0x1,$gameParty[_0xfbe9a3(0x71e)]()),!![]);break;default:return VisuMZ['BattleCore'][_0xfbe9a3(0xc00)][_0xfbe9a3(0xb2b)](this);break;}},VisuMZ['BattleCore'][_0x4b2772(0x2c5)]=Scene_Battle['prototype']['helpWindowRect'],Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x60a)]=function(){const _0x230e88=_0x4b2772,_0x2c4a62=this['battleLayoutStyle']();switch(_0x2c4a62){case'border':return this[_0x230e88(0x418)]();break;case'default':case _0x230e88(0xc64):case'xp':case _0x230e88(0xca0):default:return VisuMZ[_0x230e88(0x67d)][_0x230e88(0x2c5)][_0x230e88(0xb2b)](this);break;}},Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x765)]=function(){const _0x44f733=_0x4b2772,_0x3c459e=this[_0x44f733(0x421)]();switch(_0x3c459e){case'xp':case'portrait':return this[_0x44f733(0x4c9)]();break;case _0x44f733(0x8d1):return this[_0x44f733(0x2b0)]();break;case _0x44f733(0x523):case _0x44f733(0xc64):default:return this[_0x44f733(0xb38)]();break;}},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x4bd)]=Scene_Battle[_0x4b2772(0x632)]['partyCommandWindowRect'],Scene_Battle['prototype'][_0x4b2772(0x8c8)]=function(){const _0x2fb194=_0x4b2772,_0x2fc3ca=this['battleLayoutStyle']();switch(_0x2fc3ca){case'xp':case _0x2fb194(0xca0):return this[_0x2fb194(0x5f7)]();break;case _0x2fb194(0x8d1):return this[_0x2fb194(0xc14)]();case'default':case _0x2fb194(0xc64):default:return this[_0x2fb194(0x5b9)]();break;}},Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x5b9)]=function(){const _0x460638=_0x4b2772,_0xb09433=VisuMZ[_0x460638(0x67d)][_0x460638(0x869)][_0x460638(0x335)],_0x1fd947=_0xb09433[_0x460638(0x219)]||0xc0,_0x5d3423=this[_0x460638(0x874)](),_0x59f874=this['isRightInputMode']()?Graphics[_0x460638(0xcd9)]-_0x1fd947:0x0,_0x44850b=Graphics[_0x460638(0x218)]-_0x5d3423;return new Rectangle(_0x59f874,_0x44850b,_0x1fd947,_0x5d3423);},Scene_Battle[_0x4b2772(0x632)]['actorCommandWindowRect']=function(){return this['partyCommandWindowRect']();},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x546)]=Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x910)],Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x910)]=function(){const _0x4ac0c9=_0x4b2772,_0x6f3d75=this['battleLayoutStyle']();switch(_0x6f3d75){case'xp':case _0x4ac0c9(0xca0):case _0x4ac0c9(0x8d1):break;case _0x4ac0c9(0x523):case _0x4ac0c9(0xc64):default:VisuMZ[_0x4ac0c9(0x67d)][_0x4ac0c9(0x546)][_0x4ac0c9(0xb2b)](this);break;}},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x7d9)]=Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x3ba)],Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x3ba)]=function(){const _0x1402bb=_0x4b2772;VisuMZ[_0x1402bb(0x67d)]['Scene_Battle_startActorSelection'][_0x1402bb(0xb2b)](this),this['makeTargetSelectionMoreVisible']();},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xa1d)]=Scene_Battle['prototype'][_0x4b2772(0xa40)],Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0xa40)]=function(){const _0x355bd2=_0x4b2772;VisuMZ['BattleCore']['Scene_Battle_startEnemySelection'][_0x355bd2(0xb2b)](this),this[_0x355bd2(0xa24)][_0x355bd2(0xcec)](),this[_0x355bd2(0x8d7)]();},Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x8d7)]=function(){const _0x22904f=_0x4b2772,_0x171bee=this[_0x22904f(0x421)]();['xp',_0x22904f(0xca0),_0x22904f(0x8d1)][_0x22904f(0x41a)](_0x171bee)&&this[_0x22904f(0x718)][_0x22904f(0x3f2)](),(_0x171bee==='border'||this[_0x22904f(0x925)]())&&(_0x22904f(0xb3e)!==_0x22904f(0xbeb)?(this['_skillWindow']['close'](),this[_0x22904f(0xcb6)][_0x22904f(0x3f2)]()):_0x125988[_0x22904f(0x852)][_0x22904f(0x3f6)]<1.15&&(_0x35e4e0(_0x35eff8['format'](_0x22904f(0x253))),_0x2acdbf['exit']()));},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xc08)]=Scene_Battle[_0x4b2772(0x632)]['onActorOk'],Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x8e6)]=function(){const _0x13f0f1=_0x4b2772;VisuMZ[_0x13f0f1(0x67d)][_0x13f0f1(0xc08)][_0x13f0f1(0xb2b)](this),this[_0x13f0f1(0x7fd)]();},Scene_Battle['prototype']['isNonSubmenuCancel']=function(){const _0x104bcb=_0x4b2772;return[_0x104bcb(0x2fa),_0x104bcb(0x895),_0x104bcb(0xa7d)][_0x104bcb(0x41a)](this[_0x104bcb(0x718)][_0x104bcb(0x866)]());},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x56d)]=Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x44d)],Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x44d)]=function(){const _0x487a93=_0x4b2772;if(this[_0x487a93(0x285)]()){if(_0x487a93(0xc35)===_0x487a93(0xb4b)){if(!_0x163194[_0x487a93(0x885)]())return!![];const _0x473ffe=[_0x487a93(0x372),_0x487a93(0x59f)];return _0x473ffe[_0x487a93(0x41a)](_0x58472c[_0x487a93(0x8fe)]);}else this['_statusWindow'][_0x487a93(0x6cc)](),this[_0x487a93(0x552)]['hide'](),this[_0x487a93(0x718)][_0x487a93(0x849)]();}else{if(_0x487a93(0x8d0)===_0x487a93(0x8d0))VisuMZ[_0x487a93(0x67d)][_0x487a93(0x56d)][_0x487a93(0xb2b)](this);else{const _0x3ea636=_0x424bfa['battler']();this[_0x487a93(0x21f)](_0x487a93(0x633),[_0x11f97e],_0x647eed,_0x2dfd7b),this['push'](_0x487a93(0x6c3),_0x53717f,_0x3ea636['_homeX'],_0x3ea636[_0x487a93(0x919)],_0xef516e,![],'Linear'),this['push'](_0x487a93(0x66d),[_0x50ea36],_0x487a93(0xa4d)),this['push']('waitForMovement'),this['push'](_0x487a93(0x66d),[_0x5292a8],_0x487a93(0x5cf));}}this[_0x487a93(0xadc)]();},VisuMZ[_0x4b2772(0x67d)]['Scene_Battle_onEnemyOk']=Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x582)],Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x582)]=function(){const _0x56a713=_0x4b2772;VisuMZ['BattleCore'][_0x56a713(0xa12)][_0x56a713(0xb2b)](this),this[_0x56a713(0x7fd)]();},VisuMZ[_0x4b2772(0x67d)]['Scene_Battle_onEnemyCancel']=Scene_Battle['prototype'][_0x4b2772(0x329)],Scene_Battle[_0x4b2772(0x632)]['onEnemyCancel']=function(){const _0x35bdfb=_0x4b2772;if(this[_0x35bdfb(0x285)]()){if(_0x35bdfb(0x9bf)===_0x35bdfb(0xc9d)){if(!_0x165aaa['_scene'][_0x35bdfb(0x962)])return;_0x536257[_0x35bdfb(0x21e)]['_uiContainer'][_0x35bdfb(0x340)](_0x4286d3);}else this['_statusWindow'][_0x35bdfb(0x6cc)](),this[_0x35bdfb(0xa24)]['hide'](),this['_actorCommandWindow'][_0x35bdfb(0x849)]();}else _0x35bdfb(0x8bf)!=='AUioV'?VisuMZ[_0x35bdfb(0x67d)]['Scene_Battle_onEnemyCancel']['call'](this):this[_0x35bdfb(0x2e5)][_0x35bdfb(0x6de)]['smooth']!==this[_0x35bdfb(0x57d)][_0x35bdfb(0x240)]()&&(this[_0x35bdfb(0x2e5)]['bitmap']['smooth']=this['_battler'][_0x35bdfb(0x240)]());this[_0x35bdfb(0xadc)]();},Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x7fd)]=function(){const _0x5b71a9=_0x4b2772,_0x2668a2=this[_0x5b71a9(0x421)]();(_0x2668a2==='border'||this[_0x5b71a9(0x925)]())&&(_0x5b71a9(0x40d)===_0x5b71a9(0x4a6)?this[_0x5b71a9(0xacf)]=0x0:(this[_0x5b71a9(0x9c5)]['open'](),this[_0x5b71a9(0x9c5)][_0x5b71a9(0xccf)]&&(_0x5b71a9(0xcee)===_0x5b71a9(0xcee)?this[_0x5b71a9(0x9c5)][_0x5b71a9(0x6cc)]():this[_0x5b71a9(0x290)]=(this[_0x5b71a9(0x290)]*(_0x5b510d-0x1)+this[_0x5b71a9(0xabf)])/_0x31d0e3),this['_itemWindow'][_0x5b71a9(0x38d)](),this[_0x5b71a9(0xcb6)]['active']&&this['_itemWindow'][_0x5b71a9(0x6cc)]()));},Scene_Battle[_0x4b2772(0x632)]['cancelTargetSelectionVisibility']=function(){const _0x33d867=_0x4b2772,_0x43392c=this[_0x33d867(0x421)]();['xp',_0x33d867(0xca0),'border'][_0x33d867(0x41a)](_0x43392c)&&(_0x33d867(0xa46)!=='PlUeq'?this['_actorCommandWindow'][_0x33d867(0x38d)]():_0x49b79b[_0x33d867(0x310)]()),this[_0x33d867(0x7fd)]();},Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0xb38)]=function(){const _0x4afd69=_0x4b2772,_0x4dba67=VisuMZ['BattleCore']['Settings'][_0x4afd69(0x335)],_0x12d600=Window_BattleStatus['prototype'][_0x4afd69(0x2a3)](),_0x5c0669=Graphics[_0x4afd69(0xcd9)]-(_0x4dba67[_0x4afd69(0x219)]||0xc0),_0x191575=this[_0x4afd69(0x874)]()+_0x12d600,_0x2a3b1e=this[_0x4afd69(0x8e5)]()?0x0:Graphics[_0x4afd69(0xcd9)]-_0x5c0669,_0x37f20f=Graphics[_0x4afd69(0x218)]-_0x191575+_0x12d600;return new Rectangle(_0x2a3b1e,_0x37f20f,_0x5c0669,_0x191575);},Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x4c9)]=function(){const _0x2a9e96=_0x4b2772,_0xa94339=Window_BattleStatus[_0x2a9e96(0x632)][_0x2a9e96(0x2a3)](),_0x39c1d8=Graphics[_0x2a9e96(0xcd9)],_0x1aefd1=this[_0x2a9e96(0x874)]()+_0xa94339,_0x4f72bf=0x0,_0x4f46b6=Graphics[_0x2a9e96(0x218)]-_0x1aefd1+_0xa94339;return new Rectangle(_0x4f72bf,_0x4f46b6,_0x39c1d8,_0x1aefd1);},Scene_Battle[_0x4b2772(0x632)]['partyCommandWindowRectXPStyle']=function(){const _0x3a5194=_0x4b2772,_0x8c3853=Graphics[_0x3a5194(0xcd9)]/0x2,_0x106073=this[_0x3a5194(0x8b7)](VisuMZ[_0x3a5194(0x67d)][_0x3a5194(0x869)]['BattleLayout'][_0x3a5194(0x79b)],!![]),_0x5192ae=Math[_0x3a5194(0x4ed)]((Graphics[_0x3a5194(0xcd9)]-_0x8c3853)/0x2),_0x4d989c=Graphics['boxHeight']-_0x106073-this[_0x3a5194(0x4c9)]()[_0x3a5194(0x4c3)];return new Rectangle(_0x5192ae,_0x4d989c,_0x8c3853,_0x106073);},Scene_Battle['prototype'][_0x4b2772(0x418)]=function(){const _0x2b5539=_0x4b2772,_0x1bfdaf=Graphics[_0x2b5539(0x67b)],_0x3b50dd=Math[_0x2b5539(0x4ed)]((Graphics[_0x2b5539(0xcd9)]-_0x1bfdaf)/0x2),_0x2a9697=this[_0x2b5539(0x436)](),_0x34e35a=(Graphics[_0x2b5539(0x4c3)]-Graphics[_0x2b5539(0x218)])/-0x2;return new Rectangle(_0x3b50dd,_0x34e35a,_0x1bfdaf,_0x2a9697);},Scene_Battle[_0x4b2772(0x632)]['statusWindowRectBorderStyle']=function(){const _0x230ee9=_0x4b2772,_0x3ff0ea=Graphics[_0x230ee9(0x67b)],_0x3065d8=Math[_0x230ee9(0x4ed)]((Graphics[_0x230ee9(0xcd9)]-_0x3ff0ea)/0x2),_0xa1708b=this[_0x230ee9(0x8b7)](0x4,!![]),_0x371456=Graphics['boxHeight']-_0xa1708b+(Graphics[_0x230ee9(0x4c3)]-Graphics[_0x230ee9(0x218)])/0x2;return new Rectangle(_0x3065d8,_0x371456,_0x3ff0ea,_0xa1708b);},Scene_Battle['prototype'][_0x4b2772(0xc14)]=function(){const _0x157bf5=_0x4b2772,_0x27582f=Math[_0x157bf5(0x805)](Graphics[_0x157bf5(0x67b)]/0x3),_0x2c801c=this['isRightInputMode']()?(Graphics['width']+Graphics['boxWidth'])/0x2-_0x27582f:(Graphics[_0x157bf5(0x67b)]-Graphics[_0x157bf5(0xcd9)])/-0x2,_0x1a1361=this[_0x157bf5(0x418)](),_0x485dc3=_0x1a1361['y']+_0x1a1361[_0x157bf5(0x4c3)],_0x52f4d5=this[_0x157bf5(0x2b0)](),_0x3fdaa4=_0x52f4d5['y']-_0x485dc3;return new Rectangle(_0x2c801c,_0x485dc3,_0x27582f,_0x3fdaa4);},Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x752)]=function(){const _0x25b278=_0x4b2772,_0x1e8593=Math[_0x25b278(0x75d)](Graphics['width']/0x3),_0x4d902d=Math['round']((Graphics['boxWidth']-_0x1e8593)/0x2),_0x13e907=this[_0x25b278(0xc14)](),_0x52ba3e=_0x13e907['y'],_0x1162d4=_0x13e907[_0x25b278(0x4c3)];return new Rectangle(_0x4d902d,_0x52ba3e,_0x1e8593,_0x1162d4);},Scene_Battle[_0x4b2772(0x632)]['repositionCancelButtonBorderStyle']=function(){const _0x15d7c6=_0x4b2772;this[_0x15d7c6(0x8f6)]['y']=this['_helpWindow']['y']+this['_helpWindow'][_0x15d7c6(0x4c3)];if(this[_0x15d7c6(0x8e5)]())this[_0x15d7c6(0x421)]()===_0x15d7c6(0x8d1)?this[_0x15d7c6(0x8f6)]['x']=0x8:_0x15d7c6(0x493)===_0x15d7c6(0xade)?_0x202c82=_0x2558ae>=_0x5ca49b?_0x47c9b6:_0x353e58:this[_0x15d7c6(0x8f6)]['x']=-this[_0x15d7c6(0x8f6)][_0x15d7c6(0x67b)]-0x4;else{if(_0x15d7c6(0x906)===_0x15d7c6(0x36d)){_0x119025[_0x15d7c6(0x67d)][_0x15d7c6(0x6f9)][_0x15d7c6(0xb2b)](this,_0x27b267),this['clearBattleCoreData'](),this[_0x15d7c6(0x665)]();const _0x81e7ef=this[_0x15d7c6(0x947)]();if(_0x81e7ef)_0x81e7ef[_0x15d7c6(0xb6e)](this);}else this[_0x15d7c6(0x8f6)]['x']=Graphics[_0x15d7c6(0x67b)]-(Graphics[_0x15d7c6(0x67b)]-Graphics[_0x15d7c6(0xcd9)])/0x2-this['_cancelButton']['width']-0x4;}},VisuMZ['BattleCore'][_0x4b2772(0x88b)]=Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x6d5)],Scene_Battle['prototype']['skillWindowRect']=function(){const _0x3d5b71=_0x4b2772;if(this[_0x3d5b71(0x421)]()==='border')return this[_0x3d5b71(0x752)]();else{if(this['isSkillItemWindowsMiddle']()){if(_0x3d5b71(0x8dc)==='htTMG')this[_0x3d5b71(0x475)]['svAnchorX']=_0xc92b62(_0x2c93cd['$1']),this['_cache'][_0x3d5b71(0x899)]=_0x16916e(_0x4a7f10['$2']);else return this[_0x3d5b71(0x9f9)]();}else return'MBDen'===_0x3d5b71(0xb99)?VisuMZ[_0x3d5b71(0x67d)][_0x3d5b71(0x88b)][_0x3d5b71(0xb2b)](this):this['isBattleCoreTargetScope']()&&!this[_0x3d5b71(0x6aa)]()?this[_0x3d5b71(0x572)]():_0x3c46bc['BattleCore'][_0x3d5b71(0x80c)][_0x3d5b71(0xb2b)](this);}},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x91b)]=Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x732)],Scene_Battle[_0x4b2772(0x632)]['itemWindowRect']=function(){const _0x3acbb3=_0x4b2772;if(this[_0x3acbb3(0x421)]()===_0x3acbb3(0x8d1))return this[_0x3acbb3(0x752)]();else{if(this['isSkillItemWindowsMiddle']()){if(_0x3acbb3(0x51e)===_0x3acbb3(0x209)){let _0x19975e=_0x546d7d(_0x2a3a73['$1']);while(_0x19975e--){_0x3ccb90['push'](this[_0x3acbb3(0xbfe)]()[_0x3acbb3(0x941)]());}return this[_0x3acbb3(0x807)](_0x53193e);}else return this['skillItemWindowRectMiddle']();}else return VisuMZ[_0x3acbb3(0x67d)]['Scene_Battle_itemWindowRect'][_0x3acbb3(0xb2b)](this);}},Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0x925)]=function(){const _0xf49fff=_0x4b2772;return VisuMZ[_0xf49fff(0x67d)][_0xf49fff(0x869)][_0xf49fff(0x335)][_0xf49fff(0x9ff)];},Scene_Battle[_0x4b2772(0x632)]['skillItemWindowRectMiddle']=function(){const _0x2294c6=_0x4b2772,_0x4c8f42=Sprite_Button['prototype'][_0x2294c6(0xcc6)]()*0x2+0x4;let _0x110c41=Graphics[_0x2294c6(0xcd9)]-_0x4c8f42;Imported[_0x2294c6(0x2d5)]&&SceneManager[_0x2294c6(0xb40)]()&&(_0x2294c6(0x61e)==='nkTAb'?_0x110c41+=_0x4c8f42:this[_0x2294c6(0x66d)](_0x2294c6(0xcdc)));const _0x277254=this[_0x2294c6(0x90a)](),_0x202609=Graphics['boxHeight']-_0x277254-this[_0x2294c6(0x765)]()[_0x2294c6(0x4c3)]+Window_BattleStatus[_0x2294c6(0x632)][_0x2294c6(0x2a3)](),_0x419d94=0x0;return new Rectangle(_0x419d94,_0x277254,_0x110c41,_0x202609);},Scene_Battle[_0x4b2772(0x632)][_0x4b2772(0xc67)]=function(){const _0xb0cb17=_0x4b2772;if(!VisuMZ[_0xb0cb17(0x67d)][_0xb0cb17(0x869)]['Enemy'][_0xb0cb17(0x781)])return;this['_enemyNameContainer']=new Sprite(),this['_enemyNameContainer']['x']=this[_0xb0cb17(0x204)]['x'],this[_0xb0cb17(0x3ff)]['y']=this['_windowLayer']['y'];const _0x19ba7e=this[_0xb0cb17(0x4b1)][_0xb0cb17(0xae6)](this[_0xb0cb17(0x204)]);this[_0xb0cb17(0x230)](this['_enemyNameContainer'],_0x19ba7e);for(let _0x53c1e4=0x0;_0x53c1e4<0x8;_0x53c1e4++){const _0x891912=new Window_EnemyName(_0x53c1e4);this[_0xb0cb17(0x3ff)]['addChild'](_0x891912);}},Sprite_Battler[_0x4b2772(0x86d)]=VisuMZ[_0x4b2772(0x67d)]['Settings'][_0x4b2772(0xb6b)][_0x4b2772(0x818)],VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x3c4)]=Sprite_Battler[_0x4b2772(0x632)]['initMembers'],Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0xbf2)]=function(){const _0xc859f6=_0x4b2772;VisuMZ['BattleCore'][_0xc859f6(0x3c4)]['call'](this),this[_0xc859f6(0xc80)]();if(this[_0xc859f6(0x63a)]===Sprite_Enemy)this['createShadowSprite']();this['createDistortionSprite']();},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0xc80)]=function(){const _0x29bffc=_0x4b2772;this['_baseX']=0x0,this['_baseY']=0x0,this['_floatHeight']=0x0,this[_0x29bffc(0xc42)]=0x0,this[_0x29bffc(0xb1f)]=0x0,this['_floatWholeDuration']=0x0,this[_0x29bffc(0xc7f)]=_0x29bffc(0x97b),this[_0x29bffc(0x399)]=0x0,this[_0x29bffc(0x1d2)]=0x0,this[_0x29bffc(0x4fe)]=0x0,this[_0x29bffc(0x690)]=0x0,this[_0x29bffc(0x82e)]=0xff,this[_0x29bffc(0xb70)]=0x0,this[_0x29bffc(0x29b)]=0x0,this[_0x29bffc(0x283)]=_0x29bffc(0x97b),this[_0x29bffc(0x290)]=0x0,this[_0x29bffc(0xabf)]=0x0,this[_0x29bffc(0xa72)]=0x0,this[_0x29bffc(0xc48)]=0x0,this[_0x29bffc(0x69a)]='Linear',this[_0x29bffc(0x524)]=!![],this[_0x29bffc(0x88e)]=0x0,this[_0x29bffc(0xafa)]=0x0,this[_0x29bffc(0x4a1)]=0x0,this[_0x29bffc(0xad5)]=0x0,this[_0x29bffc(0xbb7)]=0x0,this[_0x29bffc(0xa96)]=0x0,this['_skewEasing']=_0x29bffc(0x97b),this['_growX']=0x1,this[_0x29bffc(0x4ce)]=0x1,this['_targetGrowX']=0x1,this[_0x29bffc(0x292)]=0x1,this[_0x29bffc(0x5bc)]=0x0,this[_0x29bffc(0x97c)]=0x0,this['_growEasing']=_0x29bffc(0x97b),this[_0x29bffc(0x8df)]=0x1,this[_0x29bffc(0x354)]=0x0,this[_0x29bffc(0x387)]=0x0,this[_0x29bffc(0xaf5)]=0x0,this[_0x29bffc(0x9e4)]=0x0,this['_homeEasing']=_0x29bffc(0x97b);},Sprite_Battler['prototype']['createShadowSprite']=function(){const _0x2c9c04=_0x4b2772;this[_0x2c9c04(0x77e)]=new Sprite(),this[_0x2c9c04(0x77e)][_0x2c9c04(0x6de)]=ImageManager[_0x2c9c04(0x256)](_0x2c9c04(0x3cd)),this[_0x2c9c04(0x77e)][_0x2c9c04(0x6de)][_0x2c9c04(0x267)]=VisuMZ[_0x2c9c04(0x67d)][_0x2c9c04(0x869)][_0x2c9c04(0xb6b)][_0x2c9c04(0xc81)],this[_0x2c9c04(0x77e)][_0x2c9c04(0xa79)]['x']=0.5,this[_0x2c9c04(0x77e)][_0x2c9c04(0xa79)]['y']=0.5,this[_0x2c9c04(0x77e)]['y']=-0x2,this[_0x2c9c04(0x77e)][_0x2c9c04(0x30d)]=![],this['addChild'](this[_0x2c9c04(0x77e)]);},Sprite_Battler['prototype']['createDistortionSprite']=function(){const _0x188201=_0x4b2772;this[_0x188201(0x4eb)]=new Sprite(),this['_distortionSprite'][_0x188201(0xa79)]['x']=0.5,this[_0x188201(0x4eb)][_0x188201(0xa79)]['y']=0.5,this['addChild'](this['_distortionSprite']);},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x65a)]=function(){const _0x4aa244=_0x4b2772;if(!this[_0x4aa244(0x4eb)])return;if(this[_0x4aa244(0x77e)]){const _0x1e2ee6=this['getChildIndex'](this[_0x4aa244(0x4eb)]);this[_0x4aa244(0x230)](this[_0x4aa244(0x77e)],_0x1e2ee6),this[_0x4aa244(0xa60)]();}this[_0x4aa244(0x3eb)]&&this['_distortionSprite'][_0x4aa244(0x340)](this[_0x4aa244(0x3eb)]),this[_0x4aa244(0x9b0)]&&(_0x4aa244(0x7a7)!=='thNaG'?this[_0x4aa244(0x4eb)]['addChild'](this['_weaponSprite']):(_0x42e5e8[_0x4aa244(0x63e)](_0xa0e083,_0x5d52f9,_0x17df3f,_0x263d33,_0x460776,-0x1),this[_0x4aa244(0x9da)]())),this[_0x4aa244(0x2e5)]&&this[_0x4aa244(0x4eb)][_0x4aa244(0x340)](this[_0x4aa244(0x2e5)]),this[_0x4aa244(0x635)]&&(_0x4aa244(0x1fe)===_0x4aa244(0x273)?this[_0x4aa244(0x2e5)][_0x4aa244(0x6de)][_0x4aa244(0x267)]!==this['_battler'][_0x4aa244(0x240)]()&&(this[_0x4aa244(0x2e5)]['bitmap']['smooth']=this['_battler'][_0x4aa244(0x240)]()):this[_0x4aa244(0x4eb)]['addChild'](this['_injectAnimationSprite'])),this['_dragonbonesSpriteContainer']&&this[_0x4aa244(0x4eb)][_0x4aa244(0x340)](this[_0x4aa244(0x234)]);},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0xa60)]=function(){const _0xf09693=_0x4b2772;if(!this['_shadowSprite'])return;if(this[_0xf09693(0x57d)]&&this[_0xf09693(0x57d)][_0xf09693(0x322)]()){if('ypwQd'===_0xf09693(0x5f6)){const _0x27560c=_0x4689d3['BattleCore'][_0xf09693(0x869)][_0xf09693(0x7f4)],_0x45eeae=_0x27560c[_0xf09693(0x3ec)];_0x45eeae&&_0x50f43e['BattleCore'][_0xf09693(0x25d)](_0x45eeae)&&(this[_0xf09693(0xcd2)]=!![],_0x51cf7b[_0xf09693(0xb6d)](_0x27560c[_0xf09693(0x3ec)]),_0x29b9b8[_0xf09693(0x417)](),_0x135ccd[_0xf09693(0xbf0)][_0xf09693(0x577)]=!![]),_0x27560c['DefeatEvent']>0x0&&(this[_0xf09693(0x74c)]=!![]);}else{const _0x591c90=this[_0xf09693(0x77e)][_0xf09693(0x6de)];this['_shadowSprite'][_0xf09693(0x90f)](0x0,0x0,_0x591c90['width'],_0x591c90[_0xf09693(0x4c3)]);}}else this['_shadowSprite'][_0xf09693(0x90f)](0x0,0x0,0x0,0x0);},Sprite_Battler['prototype'][_0x4b2772(0x4b0)]=function(){const _0x414b47=_0x4b2772;if(SceneManager[_0x414b47(0x885)]()){if(_0x414b47(0xb17)===_0x414b47(0x296))this[_0x414b47(0x4e0)]=!this[_0x414b47(0x9f7)](),_0x235fe0['registerDefeatedEnemy'](this['enemyId']());else return SceneManager['_scene'][_0x414b47(0x34a)][_0x414b47(0xb75)];}else return this[_0x414b47(0xc17)];},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x82d)]=function(_0x19e663,_0xf231cc){const _0x257321=_0x4b2772;if(!this[_0x257321(0x57d)]['isSpriteVisible']())return;const _0x27268a=VisuMZ[_0x257321(0x67d)][_0x257321(0x869)][_0x257321(0x681)],_0x4984ce=new Sprite_Damage();_0x4984ce[_0x257321(0xb69)]=_0x27268a[_0x257321(0x78d)],this[_0x257321(0x4f0)](_0x4984ce),_0x4984ce[_0x257321(0x82d)](_0x19e663,_0xf231cc),this[_0x257321(0xc1c)](_0x4984ce);},Sprite_Battler[_0x4b2772(0x632)]['setupIconTextPopup']=function(_0x598a69,_0x236c76,_0x58f6ec){const _0x24a44e=_0x4b2772;if(!this[_0x24a44e(0x57d)][_0x24a44e(0xbe5)]())return;const _0x53a093=VisuMZ[_0x24a44e(0x67d)][_0x24a44e(0x869)]['Damage'],_0x232cde=new Sprite_Damage();_0x232cde[_0x24a44e(0xb69)]=_0x53a093[_0x24a44e(0x78d)],this[_0x24a44e(0x4f0)](_0x232cde),_0x232cde[_0x24a44e(0x2db)](_0x598a69,_0x236c76,_0x58f6ec),this[_0x24a44e(0xc1c)](_0x232cde);},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0xaf7)]=function(){const _0x5f2bb0=_0x4b2772;if(!this['_battler'][_0x5f2bb0(0x396)]())return;while(this[_0x5f2bb0(0x57d)][_0x5f2bb0(0x396)]()){this['_battler']['isSpriteVisible']()&&this['createDamageSprite']();}this['_battler'][_0x5f2bb0(0x398)](),this['_battler'][_0x5f2bb0(0x6d2)]();},Sprite_Battler['prototype'][_0x4b2772(0x3da)]=function(){const _0x2e1424=_0x4b2772,_0x466930=VisuMZ[_0x2e1424(0x67d)][_0x2e1424(0x869)][_0x2e1424(0x681)],_0x2e86e7=new Sprite_Damage();_0x2e86e7[_0x2e1424(0xb69)]=_0x466930['PopupDuration'],this[_0x2e1424(0x4f0)](_0x2e86e7),_0x2e86e7[_0x2e1424(0xc74)](this[_0x2e1424(0x57d)]),_0x2e86e7[_0x2e1424(0x291)](this['_battler']),this[_0x2e1424(0xc1c)](_0x2e86e7);},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0xc1c)]=function(_0x9f95a1){const _0x119c41=_0x4b2772;this[_0x119c41(0xba4)][_0x119c41(0x21f)](_0x9f95a1);if(this['isShownOnBattlePortrait']()){const _0x371754=SceneManager[_0x119c41(0x21e)][_0x119c41(0xab0)];if(_0x371754)_0x371754[_0x119c41(0xc1c)](_0x9f95a1,this[_0x119c41(0x57d)]);}else{if(_0x119c41(0x83a)!==_0x119c41(0xa98)){this['damageContainer']()[_0x119c41(0x340)](_0x9f95a1);if(SceneManager[_0x119c41(0x96e)]())_0x9f95a1[_0x119c41(0x8eb)]['x']=-0x1;}else{const _0x3e13c3=_0x2bca3c[_0x119c41(0xa29)](_0x3fe4ab[_0x119c41(0xab4)]());_0x3e13c3[_0x119c41(0xbdb)](this[_0x119c41(0xc3c)][_0x119c41(0x624)](this,_0x3e13c3));}}},Sprite_Battler['prototype'][_0x4b2772(0x7f3)]=function(){const _0x2f72e8=_0x4b2772;return!$gameSystem[_0x2f72e8(0x7d1)]()&&this[_0x2f72e8(0x57d)]&&this[_0x2f72e8(0x57d)][_0x2f72e8(0x92d)]();},Sprite_Battler['prototype'][_0x4b2772(0x4f0)]=function(_0x3980f1){const _0x2380c3=_0x4b2772;this[_0x2380c3(0xb3a)](_0x3980f1,!![]);const _0x4dc8a2=VisuMZ[_0x2380c3(0x67d)][_0x2380c3(0x869)][_0x2380c3(0x681)],_0x32fa40=SceneManager[_0x2380c3(0x96e)]()?-0x1:0x1;if(_0x4dc8a2['NewPopupBottom'])for(const _0x24e8cd of this[_0x2380c3(0xba4)]){'nRfSD'===_0x2380c3(0xcf2)?this['showHelpWindow']():(_0x24e8cd['x']+=_0x4dc8a2[_0x2380c3(0xbac)]*_0x32fa40,_0x24e8cd['y']+=_0x4dc8a2['PopupShiftY']);}else{if(_0x2380c3(0x731)!==_0x2380c3(0x731)){_0x37ee48(_0x2380c3(0x5bb)),_0x320c1e[_0x2380c3(0xaf9)]();return;}else{const _0x1dd9f0=this[_0x2380c3(0xba4)][this[_0x2380c3(0xba4)]['length']-0x1];_0x1dd9f0&&(_0x3980f1['x']=_0x1dd9f0['x']+_0x4dc8a2['PopupShiftX']*_0x32fa40,_0x3980f1['y']=_0x1dd9f0['y']+_0x4dc8a2[_0x2380c3(0xb2e)]);}}},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0xb3a)]=function(_0x2237e7,_0x380818){const _0x34b0e3=_0x4b2772,_0x1ea3c2=SceneManager[_0x34b0e3(0x96e)]()?-0x1:0x1;let _0x215520=this[_0x34b0e3(0xc20)];_0x215520+=this[_0x34b0e3(0xa0e)]();let _0x4e7f39=this['_baseY'];const _0x1b1b1c=this[_0x34b0e3(0x4eb)]['scale']['y'];_0x4e7f39+=this[_0x34b0e3(0xb12)]();const _0x360e2a=SceneManager[_0x34b0e3(0x21e)][_0x34b0e3(0xab0)];if(_0x360e2a&&this[_0x34b0e3(0xc17)]===_0x360e2a){_0x215520+=_0x360e2a['x']-this[_0x34b0e3(0x2f7)]();const _0x24fb0f=_0x360e2a[_0x34b0e3(0xae9)]()*0x3/0x4;_0x4e7f39=_0x360e2a['y']+_0x24fb0f,_0x4e7f39=Math[_0x34b0e3(0x7fa)](_0x4e7f39,_0x360e2a['y']+this['y']-this['height']+_0x24fb0f);}_0x2237e7['x']=Math[_0x34b0e3(0x4ed)](_0x215520+this['damageOffsetX']()*_0x1ea3c2),_0x2237e7['y']=Math['round'](_0x4e7f39+this[_0x34b0e3(0x6ea)]());},VisuMZ[_0x4b2772(0x67d)]['Sprite_Battler_damageOffsetX']=Sprite_Battler['prototype']['damageOffsetX'],Sprite_Battler[_0x4b2772(0x632)]['damageOffsetX']=function(){const _0x27ae6e=_0x4b2772;let _0x32e26c=VisuMZ[_0x27ae6e(0x67d)][_0x27ae6e(0x1f1)][_0x27ae6e(0xb2b)](this),_0x19aa28=VisuMZ['BattleCore'][_0x27ae6e(0x869)][_0x27ae6e(0x681)]['PopupOffsetX']||0x0;return Math[_0x27ae6e(0x4ed)](_0x32e26c+_0x19aa28);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xa48)]=Sprite_Battler['prototype']['damageOffsetY'],Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x6ea)]=function(){const _0x5e2f09=_0x4b2772;let _0x10fc1f=VisuMZ['BattleCore']['Sprite_Battler_damageOffsetY'][_0x5e2f09(0xb2b)](this);switch(VisuMZ[_0x5e2f09(0x67d)]['Settings']['Damage'][_0x5e2f09(0xca3)]){case _0x5e2f09(0x955):_0x10fc1f-=this[_0x5e2f09(0x4c3)]*this[_0x5e2f09(0x8eb)]['y'];break;case _0x5e2f09(0x355):_0x10fc1f-=this[_0x5e2f09(0x4c3)]*this[_0x5e2f09(0x8eb)]['y']*0.5;break;}let _0x481232=VisuMZ['BattleCore']['Settings'][_0x5e2f09(0x681)]['PopupOffsetY']||0x0;return Math[_0x5e2f09(0x4ed)](_0x10fc1f+_0x481232);},Sprite_Actor[_0x4b2772(0x632)][_0x4b2772(0x2f7)]=function(){const _0x1ef242=_0x4b2772;return Sprite_Battler['prototype'][_0x1ef242(0x2f7)][_0x1ef242(0xb2b)](this);},Sprite_Actor[_0x4b2772(0x632)][_0x4b2772(0x6ea)]=function(){const _0x5c9a71=_0x4b2772;return Sprite_Battler[_0x5c9a71(0x632)][_0x5c9a71(0x6ea)][_0x5c9a71(0xb2b)](this);},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0xc1d)]=function(_0x265f4a){const _0xadfa0a=_0x4b2772;if(this['isShownOnBattlePortrait']())SceneManager['_scene']['_statusWindow'][_0xadfa0a(0xc99)](_0x265f4a);else{if(_0xadfa0a(0x5e6)!=='qridR')this[_0xadfa0a(0x4b0)]()[_0xadfa0a(0x29f)](_0x265f4a),this['_damages'][_0xadfa0a(0x9cc)](_0x265f4a),_0x265f4a[_0xadfa0a(0xb08)]();else return this[_0xadfa0a(0x63d)]();}},VisuMZ['BattleCore']['Sprite_Battler_setHome']=Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0xbcc)],Sprite_Battler['prototype'][_0x4b2772(0xbcc)]=function(_0x1a1efd,_0x512cb4){const _0x847303=_0x4b2772,_0x32eee4=VisuMZ[_0x847303(0x67d)]['Settings'];if(this['constructor']===Sprite_Actor)_0x1a1efd+=_0x32eee4[_0x847303(0xb6b)][_0x847303(0x6d6)]||0x0,_0x512cb4+=_0x32eee4[_0x847303(0xb6b)][_0x847303(0xbed)]||0x0;else this[_0x847303(0x63a)]===Sprite_Enemy&&(_0x1a1efd+=_0x32eee4[_0x847303(0x74a)][_0x847303(0x6d6)]||0x0,_0x512cb4+=_0x32eee4['Enemy']['OffsetY']||0x0);this[_0x847303(0x57d)]&&(_0x1a1efd=this[_0x847303(0x57d)][_0x847303(0x9ce)]??_0x1a1efd,_0x512cb4=this[_0x847303(0x57d)][_0x847303(0xcc8)]??_0x512cb4),VisuMZ[_0x847303(0x67d)][_0x847303(0x4df)][_0x847303(0xb2b)](this,_0x1a1efd,_0x512cb4),this[_0x847303(0x354)]=this[_0x847303(0x879)],this[_0x847303(0x387)]=this['_homeY'],this[_0x847303(0xaf5)]=0x0,this[_0x847303(0x9e4)]=0x0,this[_0x847303(0x359)]=_0x847303(0x97b);},VisuMZ['BattleCore'][_0x4b2772(0x935)]=Sprite_Battler['prototype'][_0x4b2772(0x49d)],Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x49d)]=function(){const _0x57ade9=_0x4b2772;VisuMZ[_0x57ade9(0x67d)][_0x57ade9(0x935)][_0x57ade9(0xb2b)](this),!this['_battler']&&this[_0x57ade9(0x6cf)]&&(this[_0x57ade9(0x6cf)][_0x57ade9(0x30d)]=![]);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xb9b)]=Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x200)],Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x200)]=function(){const _0x563385=_0x4b2772;this[_0x563385(0x8cc)](),this[_0x563385(0x638)](),this[_0x563385(0x920)](),this[_0x563385(0xb1c)](),VisuMZ['BattleCore'][_0x563385(0xb9b)][_0x563385(0xb2b)](this),this[_0x563385(0x471)]();if(this[_0x563385(0x63a)]===Sprite_Enemy)this[_0x563385(0x35c)]();},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x55a)]=Sprite_Battler[_0x4b2772(0x632)]['updatePosition'],Sprite_Battler['prototype'][_0x4b2772(0x979)]=function(){const _0x5cbeba=_0x4b2772;this['updateHomeMove'](),VisuMZ[_0x5cbeba(0x67d)][_0x5cbeba(0x55a)]['call'](this),this[_0x5cbeba(0x768)](),this['updateOpacity']();},Sprite_Battler[_0x4b2772(0x632)]['startHomeMove']=function(_0x54323a,_0x51cdf1,_0x4d80a1,_0x4df53e){const _0x4b4d75=_0x4b2772;if(this['_targetHomeX']!==_0x54323a||this[_0x4b4d75(0x387)]!==_0x51cdf1){this[_0x4b4d75(0x354)]=_0x54323a,this[_0x4b4d75(0x387)]=_0x51cdf1,this[_0x4b4d75(0xaf5)]=_0x4d80a1,this[_0x4b4d75(0x9e4)]=_0x4d80a1,this['_homeEasing']=_0x4df53e;if(_0x4d80a1<=0x0){if(_0x4b4d75(0x77f)===_0x4b4d75(0x77f))this[_0x4b4d75(0x542)]();else return this['svBattlerData']()[_0x4b4d75(0x96b)];}}},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x903)]=function(){const _0x135224=_0x4b2772;if(this['_homeDuration']<=0x0)return;const _0x4ad3e8=this[_0x135224(0xaf5)],_0x159f5d=this[_0x135224(0x9e4)],_0x56b0ef=this['_homeEasing'];Imported[_0x135224(0x2d5)]?'MWwbQ'===_0x135224(0x4d7)?_0x3572af[_0x135224(0xb6d)](_0x52db17[_0x135224(0xb44)]):(this[_0x135224(0x879)]=this['applyEasing'](this[_0x135224(0x879)],this['_targetHomeX'],_0x4ad3e8,_0x159f5d,_0x56b0ef),this[_0x135224(0x919)]=this['applyEasing'](this[_0x135224(0x919)],this[_0x135224(0x387)],_0x4ad3e8,_0x159f5d,_0x56b0ef)):(this[_0x135224(0x879)]=(this[_0x135224(0x879)]*(_0x4ad3e8-0x1)+this[_0x135224(0x354)])/_0x4ad3e8,this['_homeY']=(this[_0x135224(0x919)]*(_0x4ad3e8-0x1)+this['_targetHomeY'])/_0x4ad3e8);this[_0x135224(0xaf5)]--;if(this[_0x135224(0xaf5)]<=0x0)this[_0x135224(0x542)]();},Sprite_Battler[_0x4b2772(0x632)]['onHomeMoveEnd']=function(){const _0x3de5b5=_0x4b2772;this['_homeX']=this[_0x3de5b5(0x354)],this['_homeY']=this[_0x3de5b5(0x387)];},Sprite_Battler['prototype'][_0x4b2772(0x768)]=function(){const _0x5c2b37=_0x4b2772;this[_0x5c2b37(0xc20)]=this['x'],this['_baseY']=this['y'],this[_0x5c2b37(0x9b7)](),this[_0x5c2b37(0xb46)](),this['x']+=this['extraPositionX'](),this['y']+=this['extraPositionY'](),this['y']+=this[_0x5c2b37(0x574)](),this['x']=Math['floor'](this['x']),this['y']=Math[_0x5c2b37(0x805)](this['y']);},Sprite_Battler[_0x4b2772(0x632)]['extraPositionX']=function(){let _0x1a1adc=0x0;return _0x1a1adc;},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0xb12)]=function(){const _0x4f3347=_0x4b2772;let _0x49a3d0=0x0;if(this[_0x4f3347(0x57d)]&&!this[_0x4f3347(0x57d)]['isBattlerGrounded']()){if(_0x4f3347(0x22d)===_0x4f3347(0x22d))_0x49a3d0-=this[_0x4f3347(0x618)],_0x49a3d0-=this[_0x4f3347(0x399)];else{if(!this[_0x4f3347(0x57d)])return;this[_0x4f3347(0x21d)]=this[_0x4f3347(0x57d)]['battlerShadowScaleX'](),this['_shadowScaleY']=this['_battler'][_0x4f3347(0x7ee)]();}}return _0x49a3d0;},Sprite_Battler['prototype'][_0x4b2772(0x574)]=function(){const _0x340a79=_0x4b2772;let _0xab386f=0x0;if(this[_0x340a79(0x4eb)]&&this['constructor']!==Sprite_SvEnemy){if(_0x340a79(0x6b0)==='jxdGx'){const _0x104aab=this[_0x340a79(0x4eb)][_0x340a79(0x8eb)]['y'];_0xab386f-=(_0x104aab-0x1)*this[_0x340a79(0x4c3)];}else this[_0x340a79(0x962)]=new _0x570f82(),_0x59b2bf[_0x340a79(0x40b)]?this[_0x340a79(0x340)](this[_0x340a79(0x962)]):this[_0x340a79(0xaec)][_0x340a79(0x340)](this[_0x340a79(0x962)]),_0x57ee48['_scene'][_0x340a79(0x962)]=this[_0x340a79(0x962)];}return _0xab386f;},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0xb1c)]=function(){const _0x10d7fa=_0x4b2772,_0x5da339=this['_battler']&&this[_0x10d7fa(0x57d)][_0x10d7fa(0x6a9)]();this[_0x10d7fa(0x8df)]=(_0x5da339?-0x1:0x1)*Math[_0x10d7fa(0x9e3)](this['scale']['x']);},Sprite_Battler[_0x4b2772(0x632)]['startFloat']=function(_0x24cce7,_0x304682,_0x56b922){const _0x5ba007=_0x4b2772;if(!this[_0x5ba007(0x742)]())return;if(this[_0x5ba007(0xc42)]===_0x24cce7)return;this[_0x5ba007(0xc42)]=_0x24cce7,this[_0x5ba007(0xb1f)]=_0x304682,this[_0x5ba007(0x90b)]=_0x304682,this[_0x5ba007(0xc7f)]=_0x56b922||_0x5ba007(0x97b);if(_0x304682<=0x0)this[_0x5ba007(0x618)]=_0x24cce7;},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x9b7)]=function(){const _0x4d7dba=_0x4b2772;if(this[_0x4d7dba(0xb1f)]<=0x0)return;const _0x16093c=this['_floatDuration'],_0x125c73=this[_0x4d7dba(0x90b)],_0x423f6e=this[_0x4d7dba(0xc7f)];if(Imported[_0x4d7dba(0x2d5)])this['_floatHeight']=this['applyEasing'](this[_0x4d7dba(0x618)],this['_targetFloatHeight'],_0x16093c,_0x125c73,_0x423f6e);else{if(_0x4d7dba(0x9ed)!==_0x4d7dba(0x7d5))this['_floatHeight']=(this[_0x4d7dba(0x618)]*(_0x16093c-0x1)+this[_0x4d7dba(0xc42)])/_0x16093c;else{if(!_0x41fd75[_0x4d7dba(0x885)]())return;const _0x170790=_0x204383[_0x4d7dba(0x2ba)]();if(!_0x170790)return;_0x170790[_0x4d7dba(0xc6d)](_0x4d7dba(0x98a));}}this['_floatDuration']--;if(this[_0x4d7dba(0xb1f)]<=0x0)this[_0x4d7dba(0x381)]();},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x381)]=function(){const _0x552233=_0x4b2772;this[_0x552233(0x618)]=this[_0x552233(0xc42)];},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x3f1)]=function(){return this['_floatDuration']>0x0;},Sprite_Battler['prototype'][_0x4b2772(0x42b)]=function(_0x224421,_0x2e8ef5){const _0x1157e4=_0x4b2772;if(!this[_0x1157e4(0x742)]())return;if(_0x2e8ef5<=0x0)return;this[_0x1157e4(0x1d2)]=_0x224421,this['_jumpDuration']=_0x2e8ef5,this[_0x1157e4(0x690)]=_0x2e8ef5;},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0xb46)]=function(){const _0x1c0ebe=_0x4b2772;if(this[_0x1c0ebe(0x4fe)]<=0x0)return;const _0x22578b=this[_0x1c0ebe(0x690)]-this[_0x1c0ebe(0x4fe)],_0x4b75a2=this['_jumpWholeDuration']/0x2,_0x30499b=this[_0x1c0ebe(0x1d2)],_0x1755d9=-_0x30499b/Math[_0x1c0ebe(0xa75)](_0x4b75a2,0x2);this[_0x1c0ebe(0x399)]=_0x1755d9*Math[_0x1c0ebe(0xa75)](_0x22578b-_0x4b75a2,0x2)+_0x30499b,this['_jumpDuration']--;if(this[_0x1c0ebe(0x4fe)]<=0x0)return this['onJumpEnd']();},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x988)]=function(){const _0x127d96=_0x4b2772;this[_0x127d96(0x399)]=0x0;},Sprite_Battler[_0x4b2772(0x632)]['isJumping']=function(){const _0x39b0dc=_0x4b2772;return this[_0x39b0dc(0x4fe)]>0x0;},Sprite_Battler['prototype']['startOpacity']=function(_0x3a1020,_0x4877c1,_0x2096e6){const _0xc810b6=_0x4b2772;if(this[_0xc810b6(0x82e)]===_0x3a1020)return;this[_0xc810b6(0x82e)]=_0x3a1020,this[_0xc810b6(0xb70)]=_0x4877c1,this[_0xc810b6(0x29b)]=_0x4877c1,this[_0xc810b6(0x283)]=_0x2096e6||'Linear';if(_0x4877c1<=0x0)this['opacity']=_0x3a1020;},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x351)]=function(){const _0x42fe70=_0x4b2772;if(this[_0x42fe70(0x63a)][_0x42fe70(0x8fe)]===_0x42fe70(0xb77))return;if(this[_0x42fe70(0xb70)]<=0x0)return;const _0x39551f=this[_0x42fe70(0xb70)],_0x2e4a33=this['_opacityWholeDuration'],_0x19b910=this[_0x42fe70(0x283)];if(Imported[_0x42fe70(0x2d5)]){if(_0x42fe70(0x74d)!==_0x42fe70(0x6b5))this[_0x42fe70(0xacf)]=this[_0x42fe70(0xa94)](this[_0x42fe70(0xacf)],this['_targetOpacity'],_0x39551f,_0x2e4a33,_0x19b910);else{if(_0xbfa052[_0x42fe70(0xc20)]>_0x26b4a7)_0x21316f+=_0x16b049[_0x42fe70(0x67b)]/0x2+_0x111aac;if(_0x32ed32[_0x42fe70(0xc20)]<_0x29dee8)_0x3e5078-=_0x5089a3[_0x42fe70(0x67b)]/0x2+_0x10b897;}}else this[_0x42fe70(0xacf)]=(this['opacity']*(_0x39551f-0x1)+this['_targetOpacity'])/_0x39551f;this[_0x42fe70(0xb70)]--;if(this['_opacityDuration']<=0x0)this[_0x42fe70(0x244)]();},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x244)]=function(){const _0x41c59e=_0x4b2772;this[_0x41c59e(0xacf)]=this[_0x41c59e(0x82e)];},Sprite_Battler['prototype'][_0x4b2772(0x85b)]=function(){const _0x44e2a9=_0x4b2772;return this[_0x44e2a9(0xb70)]>0x0;},Sprite_Battler[_0x4b2772(0x632)]['updateShadow']=function(){const _0x167492=_0x4b2772;this[_0x167492(0x77e)]['visible']=this[_0x167492(0x57d)][_0x167492(0x3e7)](),this['updateShadowPosition']();},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0xc16)]=function(){const _0x259e7d=_0x4b2772;if(!this['_shadowSprite'])return;this[_0x259e7d(0x77e)]['y']=this[_0x259e7d(0xaba)]-this['y']-0x2;},Sprite_Battler[_0x4b2772(0x632)]['updateShadowScale']=function(){const _0x2e6ced=_0x4b2772;if(!this[_0x2e6ced(0x57d)])return;this[_0x2e6ced(0x21d)]=this[_0x2e6ced(0x57d)][_0x2e6ced(0x7d2)](),this[_0x2e6ced(0xb84)]=this[_0x2e6ced(0x57d)][_0x2e6ced(0x7ee)]();},Game_BattlerBase['prototype'][_0x4b2772(0x7d2)]=function(){const _0x13aa24=_0x4b2772,_0x2311ae=this['isActor']()?this[_0x13aa24(0xa05)]():this[_0x13aa24(0x79c)]();if(_0x2311ae){const _0x2f24bb=_0x2311ae[_0x13aa24(0x28a)];if(_0x2f24bb[_0x13aa24(0x93d)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x2f24bb[_0x13aa24(0x93d)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x4b2772(0x632)][_0x4b2772(0x7ee)]=function(){const _0x29b60f=_0x4b2772,_0x214f7c=this['isActor']()?this[_0x29b60f(0xa05)]():this[_0x29b60f(0x79c)]();if(_0x214f7c){const _0x4cbeaf=_0x214f7c[_0x29b60f(0x28a)];if(_0x4cbeaf['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x4cbeaf[_0x29b60f(0x93d)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i)){if(_0x29b60f(0x331)===_0x29b60f(0x331))return Number(RegExp['$1'])||0x0;else this[_0x29b60f(0x20c)]();}}}return 0x1;},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x8cc)]=function(){const _0x5d28f3=_0x4b2772;if(this['constructor']===Sprite_SvEnemy)return;this[_0x5d28f3(0x984)](),this['finalizeScale']();},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0xaea)]=function(){const _0xac484d=_0x4b2772,_0x3479f7=this[_0xac484d(0x4eb)];_0x3479f7&&(_0x3479f7[_0xac484d(0x8eb)]['x']=this['mainSpriteScaleX'](),_0x3479f7['scale']['y']=this[_0xac484d(0x724)]());},Sprite_Battler['prototype'][_0x4b2772(0x830)]=function(){const _0x59d28a=_0x4b2772;let _0x116961=0x1;return _0x116961*=this[_0x59d28a(0x8df)],_0x116961*=this[_0x59d28a(0x98f)],_0x116961;},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x724)]=function(){const _0x2bac86=_0x4b2772;return 0x1*this[_0x2bac86(0x4ce)];},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0xac8)]=function(){const _0x4ad255=_0x4b2772;return this[_0x4ad255(0x67b)]*this[_0x4ad255(0x830)]();},Sprite_Battler['prototype']['mainSpriteHeight']=function(){const _0x3124e6=_0x4b2772;return this['height']*this[_0x3124e6(0x724)]();},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x44b)]=function(_0x5be459,_0x4f1b31,_0x47bcce,_0x45ecb2){const _0x4d5c8a=_0x4b2772;if(!this[_0x4d5c8a(0x742)]())return;if(!this[_0x4d5c8a(0x4eb)])return;if(this[_0x4d5c8a(0x56f)]===_0x5be459&&this[_0x4d5c8a(0x292)]===_0x4f1b31)return;this[_0x4d5c8a(0x56f)]=_0x5be459,this[_0x4d5c8a(0x292)]=_0x4f1b31,this[_0x4d5c8a(0x5bc)]=_0x47bcce,this['_growWholeDuration']=_0x47bcce,this['_growEasing']=_0x45ecb2||_0x4d5c8a(0x97b),_0x47bcce<=0x0&&(this['_growX']=this['_targetGrowX'],this[_0x4d5c8a(0x4ce)]=this[_0x4d5c8a(0x292)]);},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x984)]=function(){const _0x13bfd2=_0x4b2772;if(this[_0x13bfd2(0x5bc)]<=0x0)return;if(!this[_0x13bfd2(0x4eb)])return;const _0x156945=this['_growDuration'],_0x6c903b=this[_0x13bfd2(0x97c)],_0x7cd376=this[_0x13bfd2(0x5d8)];Imported[_0x13bfd2(0x2d5)]?(this[_0x13bfd2(0x98f)]=this[_0x13bfd2(0xa94)](this[_0x13bfd2(0x98f)],this[_0x13bfd2(0x56f)],_0x156945,_0x6c903b,_0x7cd376),this[_0x13bfd2(0x4ce)]=this[_0x13bfd2(0xa94)](this[_0x13bfd2(0x4ce)],this[_0x13bfd2(0x292)],_0x156945,_0x6c903b,_0x7cd376)):_0x13bfd2(0x8be)!==_0x13bfd2(0xc50)?(this[_0x13bfd2(0x98f)]=(this[_0x13bfd2(0x98f)]*(_0x156945-0x1)+this[_0x13bfd2(0x56f)])/_0x156945,this[_0x13bfd2(0x4ce)]=(this[_0x13bfd2(0x4ce)]*(_0x156945-0x1)+this['_targetGrowY'])/_0x156945):_0x1f49fd+=_0x3998a8;this['_growDuration']--;if(this[_0x13bfd2(0x5bc)]<=0x0)this[_0x13bfd2(0x960)]();},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x960)]=function(){const _0x2614d7=_0x4b2772;this['_growX']=this['_targetGrowX'],this[_0x2614d7(0x4ce)]=this['_targetGrowY'];},Sprite_Battler[_0x4b2772(0x632)]['isGrowing']=function(){const _0x3332fd=_0x4b2772;return this[_0x3332fd(0x5bc)]>0x0;},Sprite_Battler['prototype'][_0x4b2772(0x89c)]=function(_0x97fac7,_0x51c6f7,_0x2867fc,_0x68fc83){const _0x305cbf=_0x4b2772;if(!this[_0x305cbf(0x742)]())return;if(!this[_0x305cbf(0x4eb)])return;if(this[_0x305cbf(0x4a1)]===_0x97fac7&&this['_targetSkewY']===_0x51c6f7)return;this[_0x305cbf(0x4a1)]=_0x97fac7,this[_0x305cbf(0xad5)]=_0x51c6f7,this[_0x305cbf(0xbb7)]=_0x2867fc,this[_0x305cbf(0xa96)]=_0x2867fc,this[_0x305cbf(0x9a8)]=_0x68fc83||_0x305cbf(0x97b),_0x2867fc<=0x0&&(this[_0x305cbf(0x4eb)][_0x305cbf(0xcd4)]['x']=this[_0x305cbf(0x4a1)],this[_0x305cbf(0x4eb)][_0x305cbf(0xcd4)]['y']=this['_targetSkewY']);},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x638)]=function(){const _0x449292=_0x4b2772;if(this['_skewDuration']<=0x0)return;if(!this['_distortionSprite'])return;const _0x50bfa1=this[_0x449292(0xbb7)],_0x2b9418=this[_0x449292(0xa96)],_0x575792=this[_0x449292(0x9a8)],_0x51fa13=this['_distortionSprite'];if(Imported[_0x449292(0x2d5)]){if(_0x449292(0xb3b)===_0x449292(0xb3b))_0x51fa13[_0x449292(0xcd4)]['x']=this['applyEasing'](_0x51fa13[_0x449292(0xcd4)]['x'],this[_0x449292(0x4a1)],_0x50bfa1,_0x2b9418,_0x575792),_0x51fa13[_0x449292(0xcd4)]['y']=this[_0x449292(0xa94)](_0x51fa13[_0x449292(0xcd4)]['y'],this[_0x449292(0xad5)],_0x50bfa1,_0x2b9418,_0x575792);else return _0xf6e164[_0x449292(0x21e)][_0x449292(0x34a)][_0x449292(0x901)](_0x2606e0[0x0],_0x215509[0x1]),!![];}else{if('WOdhb'!==_0x449292(0x3b1))_0x51fa13[_0x449292(0xcd4)]['x']=(_0x51fa13[_0x449292(0xcd4)]['x']*(_0x50bfa1-0x1)+this[_0x449292(0x4a1)])/_0x50bfa1,_0x51fa13['skew']['y']=(_0x51fa13[_0x449292(0xcd4)]['y']*(_0x50bfa1-0x1)+this['_targetSkewY'])/_0x50bfa1;else return _0x230d6c[_0x449292(0x67d)][_0x449292(0x869)][_0x449292(0x74a)][_0x449292(0x843)];}this[_0x449292(0xbb7)]--;if(this[_0x449292(0xbb7)]<=0x0)this[_0x449292(0xaf8)]();},Sprite_Battler[_0x4b2772(0x632)]['onSkewEnd']=function(){const _0x74613d=_0x4b2772;this[_0x74613d(0x4eb)]['skew']['x']=this[_0x74613d(0x4a1)],this[_0x74613d(0x4eb)][_0x74613d(0xcd4)]['y']=this[_0x74613d(0xad5)];},Sprite_Battler['prototype']['isSkewing']=function(){const _0x49de11=_0x4b2772;return this[_0x49de11(0xbb7)]>0x0;},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0xcc2)]=function(_0x4c7b95,_0x341ed8,_0x2854fc,_0x186965){const _0x5abafe=_0x4b2772;if(!this['canMove']())return;if(!this[_0x5abafe(0x4eb)])return;if(this[_0x5abafe(0xabf)]===_0x4c7b95)return;this[_0x5abafe(0xabf)]=_0x4c7b95,this[_0x5abafe(0xa72)]=_0x341ed8,this['_angleWholeDuration']=_0x341ed8,this[_0x5abafe(0x69a)]=_0x2854fc||_0x5abafe(0x97b),this[_0x5abafe(0x524)]=_0x186965,this['_angleRevertOnFinish']===undefined&&('QThll'===_0x5abafe(0xafd)?(this['_actorCommandWindow']['setHelpWindow'](this['_helpWindow']),this['_partyCommandWindow'][_0x5abafe(0x34d)](this[_0x5abafe(0x3f9)])):this[_0x5abafe(0x524)]=!![]),_0x341ed8<=0x0&&(_0x5abafe(0xb00)!==_0x5abafe(0x767)?(this['_currentAngle']=_0x4c7b95,this[_0x5abafe(0x524)]&&(this['_targetAngle']=0x0,this['_currentAngle']=0x0)):(this[_0x5abafe(0x4b0)]()[_0x5abafe(0x29f)](_0x2fb8bb),this['_damages'][_0x5abafe(0x9cc)](_0xac8d13),_0x3006d4['destroy']()));},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x920)]=function(){const _0x24ff1f=_0x4b2772;this[_0x24ff1f(0x511)](),this['applyAngleChange']();},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x511)]=function(){const _0x5ad127=_0x4b2772;if(this[_0x5ad127(0xa72)]<=0x0)return;const _0x314ec6=this[_0x5ad127(0xa72)],_0x3de81f=this[_0x5ad127(0xc48)],_0x1ed858=this[_0x5ad127(0x69a)];if(Imported['VisuMZ_0_CoreEngine']){if(_0x5ad127(0x954)!==_0x5ad127(0x954)){if(_0x1761ee['note'][_0x5ad127(0x93d)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x10b3fc=_0x41b32c(_0x537b62['$1'])[_0x5ad127(0xc24)](/[\r\n]+/)[_0x5ad127(0x9cc)](''),_0x50fdaa=this[_0x5ad127(0x339)](_0x10b3fc);_0x335780=this[_0x5ad127(0x760)](_0x50fdaa)||_0x5ba584,_0x180922=_0x3ebb36[_0x5ad127(0xb9f)](_0x46cf6c);}}else this['_currentAngle']=this['applyEasing'](this[_0x5ad127(0x290)],this[_0x5ad127(0xabf)],_0x314ec6,_0x3de81f,_0x1ed858);}else this[_0x5ad127(0x290)]=(this[_0x5ad127(0x290)]*(_0x314ec6-0x1)+this[_0x5ad127(0xabf)])/_0x314ec6;this[_0x5ad127(0xa72)]--;if(this['_angleDuration']<=0x0)this[_0x5ad127(0x383)]();},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x383)]=function(){const _0x568661=_0x4b2772;this[_0x568661(0x290)]=this[_0x568661(0xabf)];if(this['_angleRevertOnFinish']){if(_0x568661(0x658)===_0x568661(0x658))this[_0x568661(0xabf)]=0x0,this['_currentAngle']=0x0;else{if(!_0x3a114b[_0x568661(0x6ed)])return;const _0x3bcf77=_0x48b60e[_0x568661(0x21e)][_0x568661(0x34a)];if(!_0x3bcf77)return;if(_0x210b12[_0x568661(0xce7)][_0x568661(0x3f6)]<=1.04){_0x1384e7(_0x568661(0x5bb)),_0x36b020[_0x568661(0xaf9)]();return;}_0x500e58[_0x568661(0x72d)](_0x466af4,_0x4a67c7);const _0x1aa77a=_0x27a3c0['Enable'];_0x3bcf77[_0x568661(0x776)](_0x1aa77a);}}},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x255)]=function(){const _0x31cb4c=_0x4b2772;return this[_0x31cb4c(0xa72)]>0x0;},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x8c6)]=function(){const _0x47ea1e=_0x4b2772;if(!this['_distortionSprite'])return;const _0x496638=this[_0x47ea1e(0x290)],_0x1fa121=this[_0x47ea1e(0x8eb)]['x'],_0x4b0580=this['_battler'][_0x47ea1e(0x92d)]()?-0x1:0x1;this[_0x47ea1e(0x4eb)]['angle']=_0x496638*_0x1fa121*_0x4b0580;const _0x51bad1=this['_distortionSprite'][_0x47ea1e(0x8eb)]['y'];this[_0x47ea1e(0x4eb)]['y']=this[_0x47ea1e(0x4c3)]*-0.5*(0x2-_0x51bad1),this['_distortionSprite']['y']=Math['ceil'](this['_distortionSprite']['y']);const _0x2dafd8=[this[_0x47ea1e(0x2e5)],this[_0x47ea1e(0x3eb)],this[_0x47ea1e(0x234)]];for(const _0x2545be of _0x2dafd8){if(!_0x2545be)continue;_0x2545be['y']=this[_0x47ea1e(0x4c3)]*0.5;}this[_0x47ea1e(0x77e)]&&(this['_shadowScaleX']=this[_0x47ea1e(0x21d)]??0x1,this[_0x47ea1e(0xb84)]=this['_shadowScaleY']??0x1,this[_0x47ea1e(0x77e)][_0x47ea1e(0x8eb)]['x']=this['_distortionSprite'][_0x47ea1e(0x8eb)]['x']*this[_0x47ea1e(0x21d)],this[_0x47ea1e(0x77e)][_0x47ea1e(0x8eb)]['y']=this['_distortionSprite'][_0x47ea1e(0x8eb)]['y']*this[_0x47ea1e(0xb84)]);},VisuMZ['BattleCore']['Sprite_Actor_createStateSprite']=Sprite_Actor['prototype']['createStateSprite'],Sprite_Actor[_0x4b2772(0x632)][_0x4b2772(0x923)]=function(){const _0x336ede=_0x4b2772;VisuMZ[_0x336ede(0x67d)][_0x336ede(0x589)][_0x336ede(0xb2b)](this);if(VisuMZ[_0x336ede(0x67d)][_0x336ede(0x869)][_0x336ede(0x28c)][_0x336ede(0x872)]){if(_0x336ede(0x312)===_0x336ede(0xcea)){const _0x3c4ce0=_0x53ae3[_0x336ede(0x67d)][_0x336ede(0x869)][_0x336ede(0xc13)];if(_0x3c4ce0&&_0x3c4ce0[_0x336ede(0x71a)])return _0x3c4ce0[_0x336ede(0x71a)][_0x336ede(0xb2b)](this);this[_0x336ede(0x67b)]=_0x5c9d83['width'],this[_0x336ede(0x4c3)]=_0x57cfef[_0x336ede(0x4c3)];const _0x5f147f=_0x2b615b[_0x336ede(0x7fa)](0x1,this['width']/this[_0x336ede(0x6de)]['width']),_0x39b80c=_0x2ee999[_0x336ede(0x7fa)](0x1,this['height']/this['bitmap'][_0x336ede(0x4c3)]),_0x208b2a=_0x29f7aa[_0x336ede(0x20e)](_0x5f147f,_0x39b80c);this[_0x336ede(0x8eb)]['x']=_0x208b2a,this['scale']['y']=_0x208b2a,this['x']=(_0x194d2c[_0x336ede(0x67b)]-this[_0x336ede(0x67b)])/0x2,this['y']=_0x3416e5[_0x336ede(0x4c3)]-this[_0x336ede(0x4c3)];}else this['createHpGaugeSprite']();}},VisuMZ[_0x4b2772(0x67d)]['Sprite_Enemy_createStateIconSprite']=Sprite_Enemy[_0x4b2772(0x632)][_0x4b2772(0xad6)],Sprite_Enemy[_0x4b2772(0x632)]['createStateIconSprite']=function(){const _0xef2369=_0x4b2772;VisuMZ[_0xef2369(0x67d)]['Settings'][_0xef2369(0x28c)][_0xef2369(0x773)]&&this[_0xef2369(0xbad)](),VisuMZ[_0xef2369(0x67d)][_0xef2369(0x739)][_0xef2369(0xb2b)](this);},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0xbad)]=function(){const _0x5e9285=_0x4b2772;if(!ConfigManager[_0x5e9285(0x42f)])return;if(this[_0x5e9285(0x63a)]===Sprite_SvEnemy)return;const _0x37e198=VisuMZ[_0x5e9285(0x67d)]['Settings'][_0x5e9285(0x28c)],_0x1247c9=new Sprite_HpGauge();_0x1247c9[_0x5e9285(0xa79)]['x']=_0x37e198['AnchorX'],_0x1247c9[_0x5e9285(0xa79)]['y']=_0x37e198[_0x5e9285(0x950)],_0x1247c9[_0x5e9285(0x8eb)]['x']=_0x1247c9[_0x5e9285(0x8eb)]['y']=_0x37e198[_0x5e9285(0xae1)],this[_0x5e9285(0x6cf)]=_0x1247c9,this[_0x5e9285(0x340)](this[_0x5e9285(0x6cf)]);if(Spriteset_Battle[_0x5e9285(0x40b)]){if('Iyhyh'===_0x5e9285(0xb9d)){if(!_0x508eb6[_0x5e9285(0x885)]())return;const _0x31040b=_0x461e58[_0x5e9285(0x2ba)]();if(!_0x31040b)return;_0x31040b['setWaitMode'](_0x5e9285(0x2c0));}else BattleManager[_0x5e9285(0x5fb)](this[_0x5e9285(0x6cf)]);}},VisuMZ[_0x4b2772(0x67d)]['Sprite_Battler_setBattler']=Sprite_Battler['prototype']['setBattler'],Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0xb6e)]=function(_0x155356){const _0x1ce19d=_0x4b2772,_0x4f5aac=this[_0x1ce19d(0x57d)];VisuMZ['BattleCore']['Sprite_Battler_setBattler'][_0x1ce19d(0xb2b)](this,_0x155356),this[_0x1ce19d(0x236)](_0x155356);if(_0x4f5aac!==_0x155356)this[_0x1ce19d(0x764)]();},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x236)]=function(_0x2b0a74){const _0x387075=_0x4b2772;if(!_0x2b0a74)return;if(!this[_0x387075(0x6cf)])return;if(_0x2b0a74[_0x387075(0x92d)]()){}else{if(_0x2b0a74[_0x387075(0x9d4)]()){if(this['constructor']===Sprite_SvEnemy&&!_0x2b0a74[_0x387075(0x3e7)]())return;}}this[_0x387075(0x6cf)][_0x387075(0xc74)](_0x2b0a74,'hp');},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0xc54)]=function(){const _0x5ac1e8=_0x4b2772;return this[_0x5ac1e8(0x57d)]&&this[_0x5ac1e8(0x57d)]['hasStaticSvBattler']();},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x4b2)]=function(){const _0x554ee8=_0x4b2772,_0x5e3a1c=this[_0x554ee8(0x2e5)]['bitmap'];if(!_0x5e3a1c)return;const _0x241670=_0x5e3a1c['width'];let _0x375c9e=_0x5e3a1c[_0x554ee8(0x4c3)];if(this['_battler'][_0x554ee8(0x3ef)]()){if(this[_0x554ee8(0x608)])_0x375c9e=Math['max'](0x0,this[_0x554ee8(0x608)][_0x554ee8(0x4c3)]-0x4);}this[_0x554ee8(0x2e5)][_0x554ee8(0x90f)](0x0,0x0,_0x241670,_0x375c9e),this[_0x554ee8(0x90f)](0x0,0x0,_0x241670,_0x375c9e);},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x471)]=function(){const _0x5bda71=_0x4b2772;if(!this['_battler'])return;if(!this[_0x5bda71(0x6cf)])return;const _0x46cdd1=VisuMZ[_0x5bda71(0x67d)][_0x5bda71(0x869)][_0x5bda71(0x28c)],_0x1c21f0=this[_0x5bda71(0x6cf)];_0x1c21f0[_0x5bda71(0x30d)]=this[_0x5bda71(0x7e0)]();const _0x37d1ff=_0x46cdd1[_0x5bda71(0x6d6)],_0x27c78e=_0x46cdd1[_0x5bda71(0xbed)];_0x1c21f0['x']=_0x37d1ff,_0x1c21f0['x']+=this[_0x5bda71(0x57d)]['battleUIOffsetX'](),_0x1c21f0['y']=-this[_0x5bda71(0x4c3)]+_0x27c78e,_0x1c21f0['y']+=this[_0x5bda71(0x57d)][_0x5bda71(0x7ba)](),Spriteset_Battle['ANTI_TINT_UI']&&SceneManager[_0x5bda71(0x21e)][_0x5bda71(0x34a)]&&(_0x1c21f0['x']+=this['x'],_0x1c21f0['y']+=this['y']);},Sprite_Battler['prototype']['isVisualHpGaugeDisplayed']=function(){const _0x36e55e=_0x4b2772;if(!this[_0x36e55e(0x57d)])return![];if(this['_battler'][_0x36e55e(0x92d)]())return!![];if(this[_0x36e55e(0x57d)][_0x36e55e(0xaab)]())return![];if(this['opacity']<=0x0)return![];const _0x187bea=this[_0x36e55e(0x57d)][_0x36e55e(0x79c)]()[_0x36e55e(0x28a)];if(_0x187bea[_0x36e55e(0x93d)](/<SHOW HP GAUGE>/i))return!![];if(_0x187bea['match'](/<HIDE HP GAUGE>/i))return![];const _0x199425=VisuMZ[_0x36e55e(0x67d)][_0x36e55e(0x869)][_0x36e55e(0x28c)];if(_0x199425[_0x36e55e(0x9bd)]){if(_0x199425[_0x36e55e(0x6a7)]&&BattleManager[_0x36e55e(0x7ea)]())return!![];if(this['_battler']['_visualHpGauge_JustDied'])return![];return this[_0x36e55e(0x57d)][_0x36e55e(0x9f7)]();}return!![];},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xc26)]=Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x5ea)],Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x5ea)]=function(){const _0x4b46fb=_0x4b2772;if(!this[_0x4b46fb(0x57d)])return![];if(this[_0x4b46fb(0xaf5)]>0x0)return!![];return VisuMZ[_0x4b46fb(0x67d)][_0x4b46fb(0xc26)][_0x4b46fb(0xb2b)](this);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x803)]=Sprite_Battler['prototype']['startMove'],Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x615)]=function(_0x2f27ea,_0x155466,_0x4397c4){const _0x42ef87=_0x4b2772;this[_0x42ef87(0x742)]()&&VisuMZ[_0x42ef87(0x67d)][_0x42ef87(0x803)][_0x42ef87(0xb2b)](this,_0x2f27ea,_0x155466,_0x4397c4);},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x742)]=function(){const _0x3f0e4a=_0x4b2772;if(this[_0x3f0e4a(0x57d)]&&this[_0x3f0e4a(0x57d)]['isDead']())return![];if(this['_battler']&&!this['_battler'][_0x3f0e4a(0x88f)]())return![];return $gameSystem[_0x3f0e4a(0x7d1)]();},Sprite_Battler[_0x4b2772(0x632)]['stepForward']=function(){},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x653)]=function(){const _0x32fd09=_0x4b2772;this[_0x32fd09(0x615)](0x0,0x0,0xc);},Sprite_Battler['prototype'][_0x4b2772(0x943)]=function(){},Sprite_Battler[_0x4b2772(0x632)][_0x4b2772(0x49e)]=function(){const _0x5d452c=_0x4b2772,_0xcc64d2=VisuMZ[_0x5d452c(0x67d)][_0x5d452c(0x869)][_0x5d452c(0xb6b)],_0x5b3b8f=this[_0x5d452c(0x57d)]&&this[_0x5d452c(0x57d)][_0x5d452c(0x92d)]()?0x1:-0x1,_0x461361=this[_0x5d452c(0xc20)]-this[_0x5d452c(0x879)]+_0x5b3b8f*_0xcc64d2['FlinchDistanceX'],_0x4b9e68=this['_baseY']-this[_0x5d452c(0x919)]+_0x5b3b8f*_0xcc64d2[_0x5d452c(0x2cb)],_0xfde254=_0xcc64d2[_0x5d452c(0x926)];this[_0x5d452c(0x615)](_0x461361,_0x4b9e68,_0xfde254);},VisuMZ['BattleCore'][_0x4b2772(0x798)]=Sprite_Actor[_0x4b2772(0x632)]['initMembers'],Sprite_Actor[_0x4b2772(0x632)][_0x4b2772(0xbf2)]=function(){const _0x1adac0=_0x4b2772;VisuMZ[_0x1adac0(0x67d)][_0x1adac0(0x798)][_0x1adac0(0xb2b)](this),this[_0x1adac0(0x65a)]();},Sprite_Actor[_0x4b2772(0x632)]['mainSprite']=function(){const _0x59e39e=_0x4b2772;return this[_0x59e39e(0x4eb)]||this[_0x59e39e(0x2e5)]||this;},VisuMZ['BattleCore'][_0x4b2772(0x93e)]=Sprite_Actor[_0x4b2772(0x632)]['moveToStartPosition'],Sprite_Actor[_0x4b2772(0x632)]['moveToStartPosition']=function(){},Sprite_Actor[_0x4b2772(0x632)]['moveToStartPositionBattleCore']=function(_0xc59587){const _0x283e27=_0x4b2772;if(SceneManager[_0x283e27(0x6d7)]())return;if(!_0xc59587)return;if(!_0xc59587[_0x283e27(0x742)]())return;VisuMZ[_0x283e27(0x67d)][_0x283e27(0x93e)]['call'](this);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x9a0)]=Sprite_Actor[_0x4b2772(0x632)]['setActorHome'],Sprite_Actor['prototype'][_0x4b2772(0x5f2)]=function(_0x1a9bf3){const _0x24aff3=_0x4b2772;if(VisuMZ[_0x24aff3(0x67d)][_0x24aff3(0x869)][_0x24aff3(0xb6b)][_0x24aff3(0x334)])VisuMZ[_0x24aff3(0x67d)]['Settings'][_0x24aff3(0xb6b)][_0x24aff3(0x334)][_0x24aff3(0xb2b)](this,_0x1a9bf3);else{if('NLTMq'===_0x24aff3(0x914))VisuMZ[_0x24aff3(0x67d)][_0x24aff3(0x9a0)][_0x24aff3(0xb2b)](this,_0x1a9bf3);else return _0x40502c[_0x24aff3(0x41e)]()[_0x24aff3(0x41a)](this[_0x24aff3(0xcc5)]);}},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x7cc)]=Sprite_Actor['prototype'][_0x4b2772(0xb6e)],Sprite_Actor[_0x4b2772(0x632)]['setBattler']=function(_0x5b59c6){const _0x47180a=_0x4b2772;VisuMZ[_0x47180a(0x67d)][_0x47180a(0x7cc)]['call'](this,_0x5b59c6),this[_0x47180a(0x8f0)](_0x5b59c6);},Sprite_Actor[_0x4b2772(0x632)][_0x4b2772(0x8f0)]=function(_0x15c8f3){const _0x56a7a0=_0x4b2772;if(!_0x15c8f3)return;if(!this[_0x56a7a0(0x2e5)])return;this['_mainSprite'][_0x56a7a0(0xa79)]['x']=this[_0x56a7a0(0x8ee)][_0x56a7a0(0x435)](),this['_mainSprite'][_0x56a7a0(0xa79)]['y']=this[_0x56a7a0(0x8ee)][_0x56a7a0(0x89f)](),this[_0x56a7a0(0xa60)]();},VisuMZ[_0x4b2772(0x67d)]['Sprite_Actor_update']=Sprite_Actor[_0x4b2772(0x632)][_0x4b2772(0x49d)],Sprite_Actor[_0x4b2772(0x632)]['update']=function(){const _0x545bcd=_0x4b2772;VisuMZ['BattleCore'][_0x545bcd(0xcce)][_0x545bcd(0xb2b)](this),this[_0x545bcd(0x8ee)]&&(this[_0x545bcd(0x72f)](),this[_0x545bcd(0x4c2)]());},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x2cd)]=Sprite_Actor[_0x4b2772(0x632)][_0x4b2772(0x880)],Sprite_Actor[_0x4b2772(0x632)][_0x4b2772(0x880)]=function(){const _0x22b3ad=_0x4b2772;VisuMZ[_0x22b3ad(0x67d)][_0x22b3ad(0x2cd)]['call'](this);if(this[_0x22b3ad(0x2e5)]&&this[_0x22b3ad(0x2e5)][_0x22b3ad(0x6de)]&&this[_0x22b3ad(0x57d)]){if(_0x22b3ad(0x717)===_0x22b3ad(0x717))this[_0x22b3ad(0x2e5)][_0x22b3ad(0x6de)][_0x22b3ad(0x267)]!==this[_0x22b3ad(0x57d)][_0x22b3ad(0x240)]()&&(_0x22b3ad(0x437)===_0x22b3ad(0x35f)?this['push'](_0x22b3ad(0x60b),_0x22b3ad(0x48f)[_0x22b3ad(0x934)](_0x25085d[_0x22b3ad(0xc59)](_0x2853c8))):this['_mainSprite']['bitmap'][_0x22b3ad(0x267)]=this[_0x22b3ad(0x57d)][_0x22b3ad(0x240)]());else{_0x450173[_0x22b3ad(0x67d)][_0x22b3ad(0x308)][_0x22b3ad(0xb2b)](this);if(this[_0x22b3ad(0x66a)][_0x22b3ad(0x84b)]===0x3){if(this['x']===0x0)this['x']=_0x50b66d['round'](_0x2377ae[_0x22b3ad(0x67b)]/0x2);if(this['y']===0x0)this['y']=_0x5a1985[_0x22b3ad(0x4ed)](_0x34e5a2[_0x22b3ad(0x4c3)]/0x2);}else{if(this[_0x22b3ad(0x560)])return;const _0x23d1fd=(_0x5a1357['VisuMZ_0_CoreEngine']?_0x320282[_0x22b3ad(0x2e4)][_0x22b3ad(0x869)]['UI'][_0x22b3ad(0x2f2)]:0x4)*0x2,_0x187540=(_0x53b48b[_0x22b3ad(0x67b)]-(_0x5172de['boxWidth']+_0x23d1fd))/0x2;if(_0x187540!==0x0)this['x']+=_0x187540;}}}},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xb42)]=Sprite_Actor[_0x4b2772(0x632)][_0x4b2772(0x35c)],Sprite_Actor[_0x4b2772(0x632)][_0x4b2772(0x35c)]=function(){const _0x1c023f=_0x4b2772;VisuMZ[_0x1c023f(0x67d)][_0x1c023f(0xb42)]['call'](this),this['updateShadowBattleCore']();},Sprite_Actor['prototype']['updateShadowBattleCore']=function(){const _0x3e0be5=_0x4b2772;if(!this['_mainSprite'])return;if(!this[_0x3e0be5(0x77e)])return;this[_0x3e0be5(0xa60)](),this[_0x3e0be5(0xc16)]();},Sprite_Actor[_0x4b2772(0x632)][_0x4b2772(0x72f)]=function(){const _0x237025=_0x4b2772;this[_0x237025(0x37d)][_0x237025(0x8eb)]['x']=0x1/(this[_0x237025(0x8eb)]['x']||0.001),this['_stateSprite'][_0x237025(0x8eb)]['y']=0x1/(this[_0x237025(0x8eb)]['y']||0.001);},Sprite_Actor[_0x4b2772(0x632)][_0x4b2772(0x4c2)]=function(){const _0x245fc2=_0x4b2772;if(!$gameSystem[_0x245fc2(0x7d1)]()&&this[_0x245fc2(0x63a)]===Sprite_Actor){if(_0x245fc2(0x9a9)===_0x245fc2(0x9a9)){const _0x2fee76=Scene_Battle['prototype'][_0x245fc2(0x421)]();['default','list',_0x245fc2(0xca0),_0x245fc2(0x8d1)][_0x245fc2(0x41a)](_0x2fee76)&&(this[_0x245fc2(0xacf)]=0x0);}else this[_0x245fc2(0x4bb)](_0x483c3a,_0x218ecd,_0x2250ab);}},Sprite_Actor[_0x4b2772(0x632)]['refreshMotion']=function(){const _0x37b794=_0x4b2772,_0x2ce556=this[_0x37b794(0x8ee)];if(_0x2ce556){const _0x18c4f2=_0x2ce556[_0x37b794(0xaf6)]();if(_0x2ce556['isInputting']()||_0x2ce556[_0x37b794(0x390)]())this[_0x37b794(0x4ba)](_0x37b794(0x5cf));else{if(_0x18c4f2===0x3){if(_0x37b794(0x7ed)===_0x37b794(0x86f)){const _0x3a108e=this[_0x37b794(0x515)](_0x175b19);if(_0x3a108e[_0x37b794(0x93d)](/\\I\[(\d+)\]/i)){const _0x4229b0=this[_0x37b794(0x216)](_0x5d60fd),_0x1a303b=this['textSizeEx'](_0x3a108e)[_0x37b794(0x67b)];return _0x1a303b<=_0x4229b0[_0x37b794(0x67b)]?'iconText':_0x37b794(0xa4a);}}else this[_0x37b794(0x4ba)](_0x37b794(0xa59));}else{if(_0x18c4f2===0x2)this[_0x37b794(0x4ba)]('sleep');else{if(this[_0x37b794(0x313)]){if(_0x37b794(0x422)!==_0x37b794(0x4b6))this[_0x37b794(0x4ba)]('escape');else{if(!_0x1f4ffa)return![];return _0x7530a7[_0x37b794(0xbfe)]()===this[_0x37b794(0x8a6)]();}}else{if(_0x2ce556[_0x37b794(0x726)]())this[_0x37b794(0x4ba)](_0x37b794(0x5c5));else{if(_0x2ce556['isChanting']())this[_0x37b794(0x4ba)](_0x37b794(0x5a1));else{if(_0x2ce556[_0x37b794(0x968)]()||_0x2ce556['isGuardWaiting']())this[_0x37b794(0x4ba)](_0x37b794(0x895));else{if(_0x18c4f2===0x1)this[_0x37b794(0x4ba)]('abnormal');else{if(_0x2ce556[_0x37b794(0xb9e)]())this['startMotion'](_0x37b794(0x2ee));else{if(_0x2ce556[_0x37b794(0x30f)]()){if(_0x37b794(0xa82)===_0x37b794(0xa82))this['startMotion'](_0x37b794(0x5cf));else{const _0xa8c455=_0x3f8c0a[_0x37b794(0x21e)]['_statusWindow'];if(_0xa8c455)_0xa8c455['refreshActorPortrait'](this);}}else _0x2ce556[_0x37b794(0x7f8)]()?this[_0x37b794(0x4ba)](_0x37b794(0x5c5)):this[_0x37b794(0x4ba)](_0x37b794(0x5cf));}}}}}}}}}}},Sprite_Actor[_0x4b2772(0x632)][_0x4b2772(0x943)]=function(){const _0x4e0716=_0x4b2772,_0xd004ee=0xa,_0x2ce443=0x12c*_0xd004ee,_0x333909=0x1e*_0xd004ee;this[_0x4e0716(0x615)](_0x2ce443,0x0,_0x333909);},Sprite_Actor['prototype']['onMoveEnd']=function(){const _0x519504=_0x4b2772;Sprite_Battler['prototype'][_0x519504(0x67c)]['call'](this);},Sprite_Actor[_0x4b2772(0x632)][_0x4b2772(0x3df)]=function(){const _0x2cc5b4=_0x4b2772;return Sprite_Battler[_0x2cc5b4(0x86d)];},Sprite_Weapon[_0x4b2772(0x632)]['animationWait']=function(){const _0x33629e=_0x4b2772;return Sprite_Battler[_0x33629e(0x86d)];},Sprite_Actor[_0x4b2772(0x632)][_0x4b2772(0x976)]=function(){},Sprite_Actor[_0x4b2772(0x632)][_0x4b2772(0x625)]=function(){},Sprite_Actor['prototype'][_0x4b2772(0x210)]=function(){const _0x2aa16d=_0x4b2772;if(this[_0x2aa16d(0x4e2)]&&++this[_0x2aa16d(0xcc0)]>=this[_0x2aa16d(0x3df)]()){if(this[_0x2aa16d(0x4e2)][_0x2aa16d(0xc2c)])'wQXei'===_0x2aa16d(0x730)?this['_cache']['svShadow']=![]:this[_0x2aa16d(0x78c)]=(this[_0x2aa16d(0x78c)]+0x1)%0x4;else{if(this[_0x2aa16d(0x78c)]<0x2){if(_0x2aa16d(0xcd3)===_0x2aa16d(0xcd3))this[_0x2aa16d(0x78c)]++;else{if(_0x6fe7e1['isDTB']())this['selectNextCommand']();else _0x3fd59c[_0x2aa16d(0x797)]()&&_0x4a8996['BattleCore'][_0x2aa16d(0xbe2)][_0x2aa16d(0xb2b)](this);}}else this[_0x2aa16d(0xaee)]();}this[_0x2aa16d(0xcc0)]=0x0;}},Sprite_Actor[_0x4b2772(0x632)][_0x4b2772(0x918)]=function(_0x516e18){const _0x21795b=_0x4b2772;if(_0x516e18===_0x21795b(0x39f))this['_checkOn']=!![];if(this[_0x21795b(0x57d)]&&this[_0x21795b(0x57d)][_0x21795b(0x3ef)]()){this[_0x21795b(0x4e2)]=Sprite_Actor[_0x21795b(0xb13)][_0x21795b(0xa59)];return;}const _0x437261=Sprite_Actor[_0x21795b(0xb13)][_0x516e18];this[_0x21795b(0x4e2)]=_0x437261,this['_motionCount']=0x0,this['_pattern']=0x0;},Sprite_Actor[_0x4b2772(0x632)][_0x4b2772(0x2ab)]=function(_0x138e2d){const _0x396b47=_0x4b2772;if(this['hasStaticSvBattler']())return;this[_0x396b47(0x32a)](),this['_weaponSprite'][_0x396b47(0xc74)](_0x138e2d),this[_0x396b47(0x8ee)][_0x396b47(0x835)]();},Sprite_Actor[_0x4b2772(0x632)][_0x4b2772(0x32a)]=function(){const _0xbf678e=_0x4b2772;let _0x1f3504=-0x10,_0x5c8fd0=this[_0xbf678e(0x4c3)]*0.5;const _0x9517ef=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x560082=this[_0xbf678e(0x57d)][_0xbf678e(0x3cc)]()[_0xbf678e(0x8b4)](_0x10b184=>_0x10b184&&_0x10b184[_0xbf678e(0x28a)][_0xbf678e(0x93d)](_0x9517ef)?Number(RegExp['$1']):0x0),_0x589bde=this[_0xbf678e(0x57d)][_0xbf678e(0x3cc)]()[_0xbf678e(0x8b4)](_0x5758ef=>_0x5758ef&&_0x5758ef[_0xbf678e(0x28a)][_0xbf678e(0x93d)](_0x9517ef)?Number(RegExp['$2']):0x0);_0x1f3504=_0x560082[_0xbf678e(0x7b8)]((_0x484c32,_0x87db58)=>_0x484c32+_0x87db58,_0x1f3504),_0x5c8fd0=_0x589bde[_0xbf678e(0x7b8)]((_0x25e1f9,_0x11a3e4)=>_0x25e1f9+_0x11a3e4,_0x5c8fd0),this[_0xbf678e(0x9b0)]['x']=_0x1f3504,this['_weaponSprite']['y']=_0x5c8fd0,this[_0xbf678e(0x9b0)][_0xbf678e(0x49d)]();},Sprite_Weapon[_0x4b2772(0x632)]['setup']=function(_0x5cd913){const _0x596c10=_0x4b2772;this[_0x596c10(0x477)]=_0x5cd913,this['_animationCount']=-0x1,this[_0x596c10(0x78c)]=0x0,this[_0x596c10(0x9be)](),this[_0x596c10(0x42c)]();},Sprite_Actor['prototype'][_0x4b2772(0x7e8)]=function(){},Sprite_Actor[_0x4b2772(0x632)][_0x4b2772(0x400)]=function(){const _0x142da2=_0x4b2772,_0x4ac7da=VisuMZ['BattleCore'][_0x142da2(0x869)][_0x142da2(0xcb4)],_0x176181=_0x4ac7da[_0x142da2(0x993)],_0x8513a9=_0x4ac7da['StepDistanceY'],_0x2a2647=_0x4ac7da[_0x142da2(0x5a6)];this['startMove'](-_0x176181,-_0x8513a9,_0x2a2647);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x667)]=Sprite_Actor['prototype']['updateFrame'],Sprite_Actor[_0x4b2772(0x632)][_0x4b2772(0x42c)]=function(){const _0x4701aa=_0x4b2772;if(this[_0x4701aa(0xc54)]())this[_0x4701aa(0x4b2)]();else{if(_0x4701aa(0x579)==='lRqGr')this[_0x4701aa(0x360)](),VisuMZ[_0x4701aa(0x67d)]['Sprite_Actor_updateFrame'][_0x4701aa(0xb2b)](this);else{if(!_0x56a0f2[_0x4701aa(0x7d1)]())return![];return![];}}},Sprite_Actor['prototype']['applyFreezeMotionFrames']=function(){const _0x378ef7=_0x4b2772;if(this[_0x378ef7(0x57d)]&&this[_0x378ef7(0x57d)][_0x378ef7(0x685)]){if(_0x378ef7(0x61a)!==_0x378ef7(0x76a)){const _0x1eeab5=this[_0x378ef7(0x57d)][_0x378ef7(0x685)];this[_0x378ef7(0x4e2)]=Sprite_Actor['MOTIONS'][_0x1eeab5[_0x378ef7(0xace)]],this[_0x378ef7(0x78c)]=_0x1eeab5[_0x378ef7(0x48d)];const _0x5d6d23=this[_0x378ef7(0x9b0)];_0x5d6d23[_0x378ef7(0xc3d)](_0x1eeab5[_0x378ef7(0xbd0)],_0x1eeab5['pattern']),this[_0x378ef7(0x32a)]();}else _0x38d4ac*=this[_0x378ef7(0x63f)]();}},Sprite_Weapon[_0x4b2772(0x632)]['freezeFrame']=function(_0x4a3812,_0x3ab929){const _0x28c38b=_0x4b2772;this[_0x28c38b(0x477)]=_0x4a3812,this[_0x28c38b(0x67f)]=-Infinity,this[_0x28c38b(0x78c)]=_0x3ab929,this[_0x28c38b(0x9be)](),this[_0x28c38b(0x42c)]();},Sprite_Enemy[_0x4b2772(0x632)]['initMembers']=function(){const _0x3ce27b=_0x4b2772;Sprite_Battler[_0x3ce27b(0x632)][_0x3ce27b(0xbf2)][_0x3ce27b(0xb2b)](this),this[_0x3ce27b(0x3c8)]=null,this[_0x3ce27b(0x671)]=![],this[_0x3ce27b(0x62a)]='',this[_0x3ce27b(0x50b)]=0x0,this[_0x3ce27b(0x80d)]=null,this[_0x3ce27b(0x66c)]=0x0,this[_0x3ce27b(0x751)]=0x0,this['createMainSprite'](),this[_0x3ce27b(0xad6)]();},VisuMZ['BattleCore']['Sprite_Enemy_update']=Sprite_Enemy['prototype'][_0x4b2772(0x49d)],Sprite_Enemy['prototype'][_0x4b2772(0x49d)]=function(){const _0x44dc91=_0x4b2772;VisuMZ[_0x44dc91(0x67d)][_0x44dc91(0x229)]['call'](this),this[_0x44dc91(0xa60)]();},Sprite_Enemy['prototype'][_0x4b2772(0xaf2)]=function(){const _0x56a148=_0x4b2772;this['_mainSprite']=new Sprite(),this[_0x56a148(0x2e5)]['anchor']['x']=0.5,this[_0x56a148(0x2e5)][_0x56a148(0xa79)]['y']=0x1,this[_0x56a148(0x340)](this[_0x56a148(0x2e5)]),this['attachSpritesToDistortionSprite']();},Sprite_Enemy['prototype'][_0x4b2772(0xc7b)]=function(){const _0x5d9c20=_0x4b2772;return this[_0x5d9c20(0x4eb)]||this[_0x5d9c20(0x2e5)]||this;},Sprite_Enemy['prototype'][_0x4b2772(0x9be)]=function(_0x55f82e){const _0x21510e=_0x4b2772;this[_0x21510e(0x6de)]=new Bitmap(0x1,0x1);if(this[_0x21510e(0x3e7)]()){const _0x21537f=this['_enemy']['svBattlerData']();this[_0x21510e(0x6de)]=new Bitmap(_0x21537f['width'],_0x21537f['height']),this[_0x21510e(0x2e5)][_0x21510e(0x6de)]=new Bitmap(0x1,0x1);}else $gameSystem[_0x21510e(0x7d1)]()?(this[_0x21510e(0x2e5)][_0x21510e(0x6de)]=ImageManager[_0x21510e(0x453)](_0x55f82e),this['_mainSprite']['bitmap']['addLoadListener'](this[_0x21510e(0x83b)][_0x21510e(0x624)](this))):_0x21510e(0x7d8)===_0x21510e(0x7d8)?(this[_0x21510e(0x2e5)]['bitmap']=ImageManager[_0x21510e(0x2f0)](_0x55f82e),this[_0x21510e(0x2e5)][_0x21510e(0x6de)][_0x21510e(0xbdb)](this[_0x21510e(0x83b)][_0x21510e(0x624)](this))):(this[_0x21510e(0x98f)]=this[_0x21510e(0xa94)](this[_0x21510e(0x98f)],this[_0x21510e(0x56f)],_0x8dbcec,_0x42660c,_0x56875b),this[_0x21510e(0x4ce)]=this[_0x21510e(0xa94)](this[_0x21510e(0x4ce)],this[_0x21510e(0x292)],_0x17a8ff,_0x4a787f,_0x21a36d));},Sprite_Enemy[_0x4b2772(0x632)][_0x4b2772(0x83b)]=function(){const _0x1165a6=_0x4b2772,_0x5a6bf2=this[_0x1165a6(0x2e5)][_0x1165a6(0x6de)];_0x5a6bf2&&(this['bitmap']=new Bitmap(_0x5a6bf2[_0x1165a6(0x67b)],_0x5a6bf2[_0x1165a6(0x4c3)]));},VisuMZ['BattleCore'][_0x4b2772(0x4c5)]=Sprite_Enemy[_0x4b2772(0x632)][_0x4b2772(0x215)],Sprite_Enemy['prototype'][_0x4b2772(0x215)]=function(_0x2468f5){const _0x1f7587=_0x4b2772;this[_0x1f7587(0x2e5)]&&this['_mainSprite'][_0x1f7587(0x215)](_0x2468f5);},VisuMZ['BattleCore'][_0x4b2772(0x646)]=Sprite_Enemy[_0x4b2772(0x632)]['initVisibility'],Sprite_Enemy[_0x4b2772(0x632)][_0x4b2772(0x9d6)]=function(){const _0x2dfbda=_0x4b2772;this['allowCollapse']()?VisuMZ['BattleCore'][_0x2dfbda(0x646)][_0x2dfbda(0xb2b)](this):(this[_0x2dfbda(0x671)]=!this[_0x2dfbda(0x3c8)][_0x2dfbda(0xaab)](),!this[_0x2dfbda(0x671)]&&('pIYwH'!==_0x2dfbda(0xa6e)?this[_0x2dfbda(0xacf)]=0x0:(_0x31710e[_0x2dfbda(0x67d)]['Game_Battler_forceAction'][_0x2dfbda(0xb2b)](this,_0x4b8369,_0xa4b294),this[_0x2dfbda(0x9fd)][this['_actions'][_0x2dfbda(0x1e9)]-0x1]['_forceAction']=!![])));},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x407)]=Sprite_Enemy['prototype']['updateCollapse'],Sprite_Enemy[_0x4b2772(0x632)][_0x4b2772(0xb4c)]=function(){const _0x55527e=_0x4b2772;if(this[_0x55527e(0x7ca)]())VisuMZ[_0x55527e(0x67d)][_0x55527e(0x407)][_0x55527e(0xb2b)](this);},Sprite_Enemy[_0x4b2772(0x632)][_0x4b2772(0x42c)]=function(){const _0x5ce980=_0x4b2772;Sprite_Battler[_0x5ce980(0x632)][_0x5ce980(0x42c)][_0x5ce980(0xb2b)](this);const _0x13021e=this['mainSprite']()||this;if(!_0x13021e)return;!_0x13021e['bitmap']&&(_0x13021e['bitmap']=new Bitmap(this[_0x5ce980(0x67b)],this[_0x5ce980(0x4c3)]));if(this['_effectType']===_0x5ce980(0x710))this[_0x5ce980(0x2e5)]['setFrame'](0x0,0x0,this[_0x5ce980(0x2e5)]['width'],this[_0x5ce980(0x66c)]);else{if(_0x5ce980(0x8cb)!==_0x5ce980(0x8cb)){const _0x51619c=this[_0x5ce980(0x6c9)](_0x51b420);if(_0x51619c===_0x5ce980(0x639))this[_0x5ce980(0xcde)](_0x1aaa1b);else _0x51619c===_0x5ce980(0xa4a)?this[_0x5ce980(0x6ec)](_0x5f1419):_0x1af7ad[_0x5ce980(0x632)][_0x5ce980(0x1dc)]['call'](this,_0x7a4e8);}else _0x13021e['setFrame'](0x0,0x0,_0x13021e[_0x5ce980(0x6de)][_0x5ce980(0x67b)],this[_0x5ce980(0x6de)][_0x5ce980(0x4c3)]);}},VisuMZ['BattleCore'][_0x4b2772(0x844)]=Sprite_Enemy[_0x4b2772(0x632)]['updateBossCollapse'],Sprite_Enemy[_0x4b2772(0x632)]['updateBossCollapse']=function(){const _0x228f07=_0x4b2772;if(this[_0x228f07(0x7ca)]())VisuMZ[_0x228f07(0x67d)]['Sprite_Enemy_updateBossCollapse'][_0x228f07(0xb2b)](this);},Sprite_Enemy['prototype']['isMoving']=function(){const _0x5b1614=_0x4b2772;return Sprite_Battler[_0x5b1614(0x632)][_0x5b1614(0x5ea)]['call'](this);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x804)]=Sprite_Enemy[_0x4b2772(0x632)]['updateStateSprite'],Sprite_Enemy['prototype'][_0x4b2772(0x72f)]=function(){const _0x18745b=_0x4b2772;VisuMZ[_0x18745b(0x67d)][_0x18745b(0x804)][_0x18745b(0xb2b)](this),this[_0x18745b(0xa2d)]();},Sprite_Enemy['prototype']['updateStateSpriteBattleCore']=function(){const _0x3637a7=_0x4b2772,_0x2ff4bc=VisuMZ[_0x3637a7(0x67d)]['Settings'][_0x3637a7(0x74a)];if(_0x2ff4bc[_0x3637a7(0x7c7)]&&!_0x2ff4bc['NameLegacy']){if(_0x3637a7(0x3e6)===_0x3637a7(0x965)){const _0x3970d1=_0x36c769(_0x31cf63['$1'])[_0x3637a7(0xc24)](/[\r\n]+/)[_0x3637a7(0x9cc)](''),_0x3a69c9=this[_0x3637a7(0x339)](_0x3970d1);_0xef1161=this[_0x3637a7(0x760)](_0x3a69c9)||_0x4c7422,_0x204b36=_0x493ee2[_0x3637a7(0xb9f)](_0x4915e9);}else{this[_0x3637a7(0x876)][_0x3637a7(0xacf)]=0x0;return;}}this[_0x3637a7(0x876)]['x']=0x0,this[_0x3637a7(0x876)]['x']+=this[_0x3637a7(0x57d)][_0x3637a7(0x45f)](),this['_stateIconSprite']['y']=-this[_0x3637a7(0x6de)]['height']-this[_0x3637a7(0x876)][_0x3637a7(0x4c3)]-0x4,this['_stateIconSprite']['y']+=this[_0x3637a7(0x57d)]['battleUIOffsetY'](),this['_stateIconSprite']['scale']['x']=0x1/(this[_0x3637a7(0x8eb)]['x']||0.001),this[_0x3637a7(0x876)][_0x3637a7(0x8eb)]['y']=0x1/(this['scale']['y']||0.001),this['hasSvBattler']()&&(_0x3637a7(0x3d9)!=='iDDDb'?(_0x21cff4=(_0x14d303+_0x53c346)/0x2,_0x39ec8d=-0x1):(this[_0x3637a7(0x3eb)][_0x3637a7(0x37d)][_0x3637a7(0x8eb)]['x']=-0x1/(this[_0x3637a7(0x8eb)]['x']||0.001),this[_0x3637a7(0x3eb)][_0x3637a7(0x37d)][_0x3637a7(0x8eb)]['y']=0x1/(this[_0x3637a7(0x8eb)]['y']||0.001)));},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xb89)]=Sprite_Enemy[_0x4b2772(0x632)]['setBattler'],Sprite_Enemy[_0x4b2772(0x632)]['setBattler']=function(_0x5a7bb5){const _0x31a141=_0x4b2772;VisuMZ[_0x31a141(0x67d)][_0x31a141(0xb89)][_0x31a141(0xb2b)](this,_0x5a7bb5),this['setSvBattlerSprite'](_0x5a7bb5);},Sprite_Enemy[_0x4b2772(0x632)][_0x4b2772(0xb86)]=function(_0x596be2){const _0x2d23b7=_0x4b2772;!this[_0x2d23b7(0x3eb)]&&(this[_0x2d23b7(0x3eb)]=new Sprite_SvEnemy(_0x596be2),this['attachSpritesToDistortionSprite']()),this['_svBattlerSprite']['setBattler'](_0x596be2);},Sprite_Enemy['prototype']['hasSvBattler']=function(){const _0xe3e8ff=_0x4b2772;return this[_0xe3e8ff(0x3c8)]&&this['_enemy'][_0xe3e8ff(0x3e7)]();},Sprite_Enemy[_0x4b2772(0x632)][_0x4b2772(0x7ca)]=function(){const _0x24f657=_0x4b2772;if(this['hasSvBattler']()){if(_0x24f657(0x57e)!=='UQUDE')this['_methods'][_0x24f657(0x21f)](_0x2e2ea1);else return this[_0x24f657(0x3c8)][_0x24f657(0x7ca)]();}else{if(_0x24f657(0x593)===_0x24f657(0x593))return!![];else _0x5281f4[_0x24f657(0xac0)]=!![],this[_0x24f657(0xc44)](_0x1c4eef);}},Sprite_Enemy[_0x4b2772(0x632)]['refreshMotion']=function(){const _0xfca607=_0x4b2772;this[_0xfca607(0x3e7)]()&&(_0xfca607(0x531)===_0xfca607(0xb88)?(_0x16ba17['width']=_0x38073a(_0x3f3850['$1']),_0x959c3e[_0xfca607(0x4c3)]=_0x17a2b9(_0x6c2d12['$2'])):this[_0xfca607(0x3eb)]['refreshMotion']());},Sprite_Enemy['prototype'][_0x4b2772(0x918)]=function(_0xe78b50){const _0x615664=_0x4b2772;if(this['hasSvBattler']())this[_0x615664(0x3eb)][_0x615664(0x918)](_0xe78b50);},Sprite_Enemy[_0x4b2772(0x632)][_0x4b2772(0x2ab)]=function(_0x704c1e){if(this['hasSvBattler']())this['_svBattlerSprite']['forceWeaponAnimation'](_0x704c1e);},Sprite_Enemy[_0x4b2772(0x632)]['stepForward']=function(){const _0x33e5a9=_0x4b2772,_0x1d42c6=VisuMZ['BattleCore']['Settings'][_0x33e5a9(0xcb4)],_0xc7b3d9=_0x1d42c6[_0x33e5a9(0x993)],_0x566ac3=_0x1d42c6[_0x33e5a9(0x57f)],_0x58959f=_0x1d42c6['StepDuration'];this[_0x33e5a9(0x615)](_0xc7b3d9,_0x566ac3,_0x58959f);};function Sprite_SvEnemy(){const _0x35eaf5=_0x4b2772;this[_0x35eaf5(0xb0d)](...arguments);}Sprite_SvEnemy[_0x4b2772(0x632)]=Object['create'](Sprite_Actor['prototype']),Sprite_SvEnemy[_0x4b2772(0x632)][_0x4b2772(0x63a)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x4b2772(0x632)]['initialize']=function(_0xc62974){const _0x24c97e=_0x4b2772;Sprite_Actor[_0x24c97e(0x632)]['initialize'][_0x24c97e(0xb2b)](this,_0xc62974),this[_0x24c97e(0x8eb)]['x']=-0x1,this[_0x24c97e(0x37d)]['scale']['x']=-0x1;},Sprite_SvEnemy[_0x4b2772(0x632)][_0x4b2772(0x2e6)]=function(){},Sprite_SvEnemy[_0x4b2772(0x632)][_0x4b2772(0xa1e)]=function(){},Sprite_SvEnemy[_0x4b2772(0x632)][_0x4b2772(0x5f2)]=function(_0x4b52d9){},Sprite_SvEnemy[_0x4b2772(0x632)][_0x4b2772(0x35c)]=function(){},Sprite_SvEnemy[_0x4b2772(0x632)][_0x4b2772(0xc16)]=function(){},Sprite_SvEnemy[_0x4b2772(0x632)]['updateStateSprite']=function(){const _0x3fc321=_0x4b2772;this[_0x3fc321(0x37d)][_0x3fc321(0x30d)]=![];},Sprite_SvEnemy[_0x4b2772(0x632)][_0x4b2772(0x880)]=function(){const _0x4ad19b=_0x4b2772;Sprite_Battler[_0x4ad19b(0x632)][_0x4ad19b(0x880)][_0x4ad19b(0xb2b)](this);const _0x647118=this[_0x4ad19b(0x8ee)][_0x4ad19b(0xa84)]();this[_0x4ad19b(0x62a)]!==_0x647118&&(this[_0x4ad19b(0x62a)]=_0x647118,this[_0x4ad19b(0x2e5)][_0x4ad19b(0x6de)]=ImageManager['loadSvActor'](_0x647118)),this[_0x4ad19b(0x2e5)]&&this[_0x4ad19b(0x2e5)][_0x4ad19b(0x6de)]&&this[_0x4ad19b(0x57d)]&&(this[_0x4ad19b(0x2e5)]['bitmap'][_0x4ad19b(0x267)]!==this[_0x4ad19b(0x57d)][_0x4ad19b(0x240)]()&&(this[_0x4ad19b(0x2e5)][_0x4ad19b(0x6de)][_0x4ad19b(0x267)]=this[_0x4ad19b(0x57d)]['battlerSmoothImage']()));},Sprite_SvEnemy[_0x4b2772(0x632)][_0x4b2772(0x943)]=function(){},Sprite_SvEnemy[_0x4b2772(0x632)][_0x4b2772(0x615)]=function(_0x251924,_0x1a14b7,_0xd6dfe6){const _0x5c7816=_0x4b2772;if(this['parent'])this[_0x5c7816(0xc17)][_0x5c7816(0x615)](_0x251924,_0x1a14b7,_0xd6dfe6);},Sprite_SvEnemy['prototype'][_0x4b2772(0xaee)]=function(){const _0x44dac5=_0x4b2772,_0x54916b=this[_0x44dac5(0x8ee)];if(_0x54916b){if(_0x44dac5(0x905)!=='pVVAe'){const _0x2889bc=_0x54916b['stateMotionIndex']();if(_0x54916b['isInputting']()||_0x54916b['isActing']()){if(_0x44dac5(0x7a6)===_0x44dac5(0x368))return this['_lastPluginCommandInterpreter'];else this[_0x44dac5(0x4ba)]('walk');}else{if(_0x2889bc===0x3){if('Necwb'!==_0x44dac5(0x2ea))return this['_attackAnimationId']||0x0;else this[_0x44dac5(0x4ba)](_0x44dac5(0xa59));}else{if(_0x2889bc===0x2)_0x44dac5(0x5d3)==='DQFeu'?_0x542842=_0x2e5751[_0x44dac5(0x20e)](_0xc1a9dd,_0x3caaed):this[_0x44dac5(0x4ba)](_0x44dac5(0x504));else{if(_0x54916b[_0x44dac5(0xc9c)]()){if('ezKjl'!=='ezKjl')return _0x2939d5['isSceneBattle']()?_0x37fcea[_0x44dac5(0x21e)][_0x44dac5(0x34a)]['_damageContainer']:this[_0x44dac5(0xc17)];else this[_0x44dac5(0x4ba)]('chant');}else{if(_0x54916b[_0x44dac5(0x968)]()||_0x54916b['isGuardWaiting']())_0x44dac5(0x2b2)===_0x44dac5(0x337)?!_0x403687[_0x44dac5(0x393)]()&&(_0x42bc87[_0x44dac5(0x5a2)](_0x25b505[0x2],_0x572580[0x3]),_0x5ae007[_0x44dac5(0x5a2)](_0x563abd)):this[_0x44dac5(0x4ba)](_0x44dac5(0x895));else{if(_0x2889bc===0x1)_0x44dac5(0x31f)!==_0x44dac5(0x31f)?(_0x7e524b+=_0x4fc6ce,_0x4fbcdf+=_0x3e87f1[_0x44dac5(0x92d)]()?-_0x244050:_0x1ad1ae):this[_0x44dac5(0x4ba)]('abnormal');else{if(_0x54916b[_0x44dac5(0xb9e)]()){if('rEFJn'===_0x44dac5(0x7f6)){if(this['x']===0x0)this['x']=_0x261cdb[_0x44dac5(0x4ed)](_0x1135e2[_0x44dac5(0x67b)]/0x2);if(this['y']===0x0)this['y']=_0x8de1e6[_0x44dac5(0x4ed)](_0x15e019[_0x44dac5(0x4c3)]/0x2);}else this[_0x44dac5(0x4ba)](_0x44dac5(0x2ee));}else _0x54916b[_0x44dac5(0x30f)]()?this[_0x44dac5(0x4ba)](_0x44dac5(0x5cf)):this['startMotion'](_0x54916b[_0x44dac5(0xa5c)]()[_0x44dac5(0x8e2)]||_0x44dac5(0x5cf));}}}}}}}else{if(!_0x1fcd9b[_0x44dac5(0x632)][_0x44dac5(0x666)][_0x44dac5(0xb2b)](this,_0x22d6da))return!![];if(!_0x2ba62b[_0x44dac5(0x632)][_0x44dac5(0xa53)][_0x44dac5(0xb2b)](this,_0x2b9d2c))return!![];if(!_0x29be79[_0x44dac5(0x632)][_0x44dac5(0x9c7)]['call'](this,_0x2919f8))return!![];}}},Sprite_SvEnemy[_0x4b2772(0x632)][_0x4b2772(0x9d7)]=function(){const _0x596364=_0x4b2772;return this[_0x596364(0xc17)]?this[_0x596364(0xc17)][_0x596364(0xa3b)]===0x0&&this['parent'][_0x596364(0xaed)]===0x0:!![];},Sprite_SvEnemy[_0x4b2772(0x632)]['updateFlip']=function(){},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x89e)]=Sprite_Animation[_0x4b2772(0x632)][_0x4b2772(0x96f)],Sprite_Animation['prototype'][_0x4b2772(0x96f)]=function(_0x59edee){const _0x435bf6=_0x4b2772;if(_0x59edee[_0x435bf6(0x4eb)])return this['targetDistortionSpritePosition'](_0x59edee);else{if(_0x435bf6(0x735)!==_0x435bf6(0x735)){if(!_0x64503d[_0x435bf6(0x7d1)]())return;const _0x481b27=this['battler']();if(!_0x481b27)return;_0x481b27[_0x435bf6(0x42b)](_0x1a2587,_0x18c74a);}else return VisuMZ[_0x435bf6(0x67d)][_0x435bf6(0x89e)][_0x435bf6(0xb2b)](this,_0x59edee);}},Sprite_Animation[_0x4b2772(0x632)][_0x4b2772(0xb66)]=function(_0x5697bd){const _0xf43813=_0x4b2772;let _0x9452c1=_0x5697bd['x'],_0x376aec=_0x5697bd['y'],_0x3799a2=_0x5697bd['height'],_0x341752=_0x5697bd[_0xf43813(0x4eb)]['scale']['y'];_0x5697bd['x']=_0x5697bd[_0xf43813(0xc20)]+_0x5697bd[_0xf43813(0xa0e)](),_0x5697bd['y']=_0x5697bd[_0xf43813(0xaba)]+_0x5697bd[_0xf43813(0xb12)](),_0x5697bd[_0xf43813(0x4c3)]*=_0x341752;let _0x4cc9e4=VisuMZ[_0xf43813(0x67d)][_0xf43813(0x89e)]['call'](this,_0x5697bd);return _0x5697bd['x']=_0x9452c1,_0x5697bd['y']=_0x376aec,_0x5697bd[_0xf43813(0x4c3)]=_0x3799a2,_0x4cc9e4;},VisuMZ[_0x4b2772(0x67d)]['Sprite_AnimationMV_updatePosition']=Sprite_AnimationMV['prototype'][_0x4b2772(0x979)],Sprite_AnimationMV[_0x4b2772(0x632)]['updatePosition']=function(){const _0x36cd34=_0x4b2772;VisuMZ[_0x36cd34(0x67d)][_0x36cd34(0x308)][_0x36cd34(0xb2b)](this);if(this[_0x36cd34(0x66a)][_0x36cd34(0x84b)]===0x3){if(this['x']===0x0)this['x']=Math[_0x36cd34(0x4ed)](Graphics[_0x36cd34(0x67b)]/0x2);if(this['y']===0x0)this['y']=Math['round'](Graphics[_0x36cd34(0x4c3)]/0x2);}else{if(this[_0x36cd34(0x560)])return;const _0x4b7d28=(Imported[_0x36cd34(0x2d5)]?VisuMZ['CoreEngine'][_0x36cd34(0x869)]['UI'][_0x36cd34(0x2f2)]:0x4)*0x2,_0x4b2889=(Graphics[_0x36cd34(0x67b)]-(Graphics[_0x36cd34(0xcd9)]+_0x4b7d28))/0x2;if(_0x4b2889!==0x0)this['x']+=_0x4b2889;}},Sprite_Damage[_0x4b2772(0x632)][_0x4b2772(0x291)]=function(_0x2f1447){const _0x32a386=_0x4b2772,_0x2c639f=_0x2f1447[_0x32a386(0x472)]()||_0x2f1447[_0x32a386(0x4b5)]();if(_0x2c639f[_0x32a386(0xa36)]||_0x2c639f[_0x32a386(0x771)])this[_0x32a386(0x722)]=0x0,this[_0x32a386(0xa25)]();else{if(_0x2c639f['hpAffected'])this['_colorType']=_0x2c639f[_0x32a386(0x2d7)]>=0x0?0x0:0x1,this[_0x32a386(0xc46)](_0x2c639f['hpDamage']);else _0x2f1447[_0x32a386(0x8ca)]()&&_0x2c639f[_0x32a386(0x9ec)]!==0x0&&(this[_0x32a386(0x722)]=_0x2c639f[_0x32a386(0x9ec)]>=0x0?0x2:0x3,this[_0x32a386(0xc46)](_0x2c639f['mpDamage']));}_0x2c639f[_0x32a386(0x357)]&&this[_0x32a386(0xc61)]();},Sprite_Damage['prototype']['setup']=function(_0x4369d6){},Sprite_Damage[_0x4b2772(0x632)][_0x4b2772(0xc46)]=function(_0xac5725){const _0x323c0e=_0x4b2772;let _0x254bd6=this[_0x323c0e(0x432)](_0xac5725);const _0x155a13=this[_0x323c0e(0xb0f)](),_0x13bb11=Math['floor'](_0x155a13*0.75);for(let _0x45887e=0x0;_0x45887e<_0x254bd6['length'];_0x45887e++){const _0x32a5de=this[_0x323c0e(0x55b)](_0x13bb11,_0x155a13);_0x32a5de['bitmap'][_0x323c0e(0x86e)](_0x254bd6[_0x45887e],0x0,0x0,_0x13bb11,_0x155a13,_0x323c0e(0x355)),_0x32a5de['x']=(_0x45887e-(_0x254bd6['length']-0x1)/0x2)*_0x13bb11,_0x32a5de['dy']=-_0x45887e;}},Sprite_Damage[_0x4b2772(0x632)][_0x4b2772(0x432)]=function(_0x2bcdac){const _0x38ce4f=_0x4b2772;let _0x349c92=Math[_0x38ce4f(0x9e3)](_0x2bcdac)['toString']();this[_0x38ce4f(0x4a2)]()&&(_0x349c92=VisuMZ[_0x38ce4f(0xa26)](_0x349c92));const _0x35fedc=VisuMZ['BattleCore']['Settings']['Damage'];let _0x5dde6f='',_0x271b32='';switch(this['_colorType']){case 0x0:_0x5dde6f=_0x35fedc[_0x38ce4f(0x95a)]||'-%1',_0x271b32=TextManager['hp'];if(_0x2bcdac===0x0)_0x5dde6f='%1';break;case 0x1:_0x5dde6f=_0x35fedc['hpHealingFmt']||_0x38ce4f(0x35a),_0x271b32=TextManager['hp'];break;case 0x2:_0x5dde6f=_0x35fedc['mpDamageFmt']||_0x38ce4f(0x8e4),_0x271b32=TextManager['mp'];break;case 0x3:_0x5dde6f=_0x35fedc['mpHealingFmt']||_0x38ce4f(0xca6),_0x271b32=TextManager['mp'];break;}return _0x5dde6f[_0x38ce4f(0x934)](_0x349c92,_0x271b32)[_0x38ce4f(0x75a)]();},Sprite_Damage[_0x4b2772(0x632)][_0x4b2772(0x4a2)]=function(){const _0x3a0014=_0x4b2772;if(Imported[_0x3a0014(0x2d5)])return VisuMZ[_0x3a0014(0x2e4)][_0x3a0014(0x869)][_0x3a0014(0x833)][_0x3a0014(0x9c4)];else{if(_0x3a0014(0x99c)===_0x3a0014(0xcac))_0x40999b=_0x4e29b3(_0x235d25['$1']);else return![];}},Sprite_Damage[_0x4b2772(0x632)]['setupCriticalEffect']=function(){const _0x9363df=_0x4b2772,_0x32a909=VisuMZ[_0x9363df(0x67d)]['Settings'][_0x9363df(0x681)];this[_0x9363df(0xad3)]=_0x32a909[_0x9363df(0x95e)][_0x9363df(0x36a)](0x0),this[_0x9363df(0x755)]=_0x32a909['CriticalDuration'];},Sprite_Damage[_0x4b2772(0x632)][_0x4b2772(0x82d)]=function(_0xbaf6ae,_0x27fc8c){const _0x5bdd6a=_0x4b2772;this[_0x5bdd6a(0xad3)]=_0x27fc8c[_0x5bdd6a(0x349)]||[0x0,0x0,0x0,0x0],this[_0x5bdd6a(0xad3)]=JsonEx[_0x5bdd6a(0x23c)](this['_flashColor']),this[_0x5bdd6a(0x755)]=_0x27fc8c[_0x5bdd6a(0x356)]||0x0;const _0x36942a=this[_0x5bdd6a(0xb0f)](),_0x41c529=Math[_0x5bdd6a(0x805)](_0x36942a*0x1e),_0xa4211d=this['createChildSprite'](_0x41c529,_0x36942a);_0xa4211d[_0x5bdd6a(0x6de)][_0x5bdd6a(0x8ad)]=ColorManager['getColor'](_0x27fc8c[_0x5bdd6a(0x8ad)]),_0xa4211d['bitmap']['drawText'](_0xbaf6ae,0x0,0x0,_0x41c529,_0x36942a,'center'),_0xa4211d['dy']=0x0;},Sprite_Damage['prototype'][_0x4b2772(0x2db)]=function(_0x31d1c9,_0x4ecf2a,_0x435c5b){const _0x5ad5a3=_0x4b2772,_0x26638e=Math['max'](this[_0x5ad5a3(0xb0f)](),ImageManager['iconHeight']),_0x170c1d=Math[_0x5ad5a3(0x805)](_0x26638e*0x1e),_0x17d3f4=this[_0x5ad5a3(0x55b)](_0x170c1d,_0x26638e),_0x235597=ImageManager[_0x5ad5a3(0xa63)]/0x2,_0x54b94d=_0x17d3f4[_0x5ad5a3(0x6de)][_0x5ad5a3(0xb49)](_0x4ecf2a+'\x20');_0x17d3f4[_0x5ad5a3(0x6de)][_0x5ad5a3(0x8ad)]=ColorManager['getColor'](_0x435c5b[_0x5ad5a3(0x8ad)]),_0x17d3f4[_0x5ad5a3(0x6de)][_0x5ad5a3(0x86e)](_0x4ecf2a,_0x235597,0x0,_0x170c1d-_0x235597,_0x26638e,_0x5ad5a3(0x355));const _0x335876=Math[_0x5ad5a3(0x4ed)]((_0x26638e-ImageManager[_0x5ad5a3(0x65e)])/0x2),_0x3e2d5d=_0x170c1d/0x2-ImageManager[_0x5ad5a3(0xa63)]-_0x54b94d/0x2+_0x235597/0x2,_0x5e20c2=ImageManager['loadSystem']('IconSet'),_0x17d75f=ImageManager[_0x5ad5a3(0xa63)],_0x418902=ImageManager['iconHeight'],_0x5c5c1d=_0x31d1c9%0x10*_0x17d75f,_0x1790f9=Math[_0x5ad5a3(0x805)](_0x31d1c9/0x10)*_0x418902;_0x17d3f4['bitmap'][_0x5ad5a3(0x8ef)](_0x5e20c2,_0x5c5c1d,_0x1790f9,_0x17d75f,_0x418902,_0x3e2d5d,_0x335876),this[_0x5ad5a3(0xad3)]=_0x435c5b[_0x5ad5a3(0x349)]||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx[_0x5ad5a3(0x23c)](this[_0x5ad5a3(0xad3)]),this[_0x5ad5a3(0x755)]=_0x435c5b['flashDuration']||0x0,_0x17d3f4['dy']=0x0;},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xc63)]=Sprite_Damage[_0x4b2772(0x632)][_0x4b2772(0x55b)],Sprite_Damage[_0x4b2772(0x632)]['createChildSprite']=function(_0x150f8c,_0x5c0650){const _0xe94ada=_0x4b2772;return _0x5c0650=Math[_0xe94ada(0x4ed)](_0x5c0650*1.2),VisuMZ[_0xe94ada(0x67d)][_0xe94ada(0xc63)][_0xe94ada(0xb2b)](this,_0x150f8c,_0x5c0650);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x29a)]=Sprite_StateIcon[_0x4b2772(0x632)][_0x4b2772(0x42c)],Sprite_StateIcon['prototype']['updateFrame']=function(){const _0x499f4c=_0x4b2772;VisuMZ['BattleCore']['Sprite_StateIcon_updateFrame'][_0x499f4c(0xb2b)](this),this[_0x499f4c(0xacf)]=this['_iconIndex']>0x0?0xff:0x0;},VisuMZ['BattleCore'][_0x4b2772(0x54e)]=Sprite_Weapon[_0x4b2772(0x632)]['loadBitmap'],Sprite_Weapon[_0x4b2772(0x632)][_0x4b2772(0x9be)]=function(){const _0x4ac083=_0x4b2772;VisuMZ[_0x4ac083(0x67d)][_0x4ac083(0x54e)][_0x4ac083(0xb2b)](this),this['bitmap']&&(this[_0x4ac083(0x6de)][_0x4ac083(0x267)]=VisuMZ[_0x4ac083(0x67d)][_0x4ac083(0x869)][_0x4ac083(0xb6b)][_0x4ac083(0xc81)]);};function Sprite_HpGauge(){const _0x34fb13=_0x4b2772;this[_0x34fb13(0xb0d)](...arguments);}Sprite_HpGauge[_0x4b2772(0x632)]=Object[_0x4b2772(0x861)](Sprite_Gauge[_0x4b2772(0x632)]),Sprite_HpGauge[_0x4b2772(0x632)]['constructor']=Sprite_HpGauge,Sprite_HpGauge[_0x4b2772(0x632)][_0x4b2772(0xb0d)]=function(){const _0x5e83b1=_0x4b2772;Sprite_Gauge[_0x5e83b1(0x632)][_0x5e83b1(0xb0d)][_0x5e83b1(0xb2b)](this);},Sprite_HpGauge[_0x4b2772(0x632)][_0x4b2772(0xa69)]=function(){return 0x0;},Sprite_HpGauge['prototype'][_0x4b2772(0x71d)]=function(){const _0x3c5685=_0x4b2772;this[_0x3c5685(0x6de)][_0x3c5685(0x4d6)]();const _0x3c8243=this[_0x3c5685(0x698)]();!isNaN(_0x3c8243)&&(_0x3c5685(0xbe3)!==_0x3c5685(0xbe3)?this[_0x3c5685(0x718)][_0x3c5685(0x38d)]():this[_0x3c5685(0x786)]());};function Sprite_EnemyName(){const _0x37a6b=_0x4b2772;this[_0x37a6b(0xb0d)](...arguments);}Sprite_EnemyName[_0x4b2772(0x632)]=Object[_0x4b2772(0x861)](Sprite_Name[_0x4b2772(0x632)]),Sprite_EnemyName[_0x4b2772(0x632)][_0x4b2772(0x63a)]=Sprite_EnemyName,Sprite_EnemyName['prototype'][_0x4b2772(0xb0d)]=function(){const _0x46b5d0=_0x4b2772;Sprite_Name['prototype'][_0x46b5d0(0xb0d)][_0x46b5d0(0xb2b)](this),this[_0x46b5d0(0x316)]();},Sprite_EnemyName[_0x4b2772(0x632)][_0x4b2772(0xbf2)]=function(){const _0x43de7b=_0x4b2772;Sprite_Name[_0x43de7b(0x632)][_0x43de7b(0xbf2)][_0x43de7b(0xb2b)](this),this[_0x43de7b(0xacf)]=0x0,this[_0x43de7b(0xc23)]=null,this[_0x43de7b(0xa79)]['x']=0.5,this[_0x43de7b(0xa79)]['y']=0x0;},Sprite_EnemyName[_0x4b2772(0x632)][_0x4b2772(0x316)]=function(){const _0x3947fa=_0x4b2772;VisuMZ[_0x3947fa(0x67d)][_0x3947fa(0x869)]['Enemy']['NameAttachStateIcon']&&(this['_stateIconSprite']=new Sprite_StateIcon(),this[_0x3947fa(0x340)](this[_0x3947fa(0x876)]));},Sprite_EnemyName[_0x4b2772(0x632)][_0x4b2772(0x3ee)]=function(){const _0x10812d=_0x4b2772;return Graphics[_0x10812d(0xcd9)];},Sprite_EnemyName[_0x4b2772(0x632)][_0x4b2772(0x81e)]=function(){const _0x130e84=_0x4b2772;return this['_lineHeight']=this[_0x130e84(0x9a7)]||Window_Base[_0x130e84(0x632)][_0x130e84(0xae9)]()||0x24,this[_0x130e84(0x9a7)]*0x4;},Sprite_EnemyName[_0x4b2772(0x632)][_0x4b2772(0xb0f)]=function(){const _0xffddf5=_0x4b2772;return VisuMZ[_0xffddf5(0x67d)][_0xffddf5(0x869)][_0xffddf5(0x74a)]['NameFontSize']||$gameSystem['mainFontSize']();},Sprite_EnemyName[_0x4b2772(0x632)]['linkSprite']=function(_0x15b788){const _0x1e5b26=_0x4b2772;this[_0x1e5b26(0xc23)]=_0x15b788;},Sprite_EnemyName['prototype'][_0x4b2772(0x49d)]=function(){const _0x57332f=_0x4b2772;Sprite_Name[_0x57332f(0x632)][_0x57332f(0x49d)][_0x57332f(0xb2b)](this),this[_0x57332f(0x289)](),this[_0x57332f(0x979)](),this[_0x57332f(0x5ef)](),this[_0x57332f(0x351)]();},Sprite_EnemyName[_0x4b2772(0x632)][_0x4b2772(0x71d)]=function(){const _0x182d70=_0x4b2772;this[_0x182d70(0x94d)]=undefined;const _0x5224a0=this[_0x182d70(0x8fe)](),_0x22615d=this[_0x182d70(0x3ee)](),_0xdfea5e=Window_Base[_0x182d70(0x632)][_0x182d70(0xae9)]();this[_0x182d70(0x917)](),this[_0x182d70(0x6de)][_0x182d70(0x4d6)](),this[_0x182d70(0x6de)]['drawText'](_0x5224a0,0x0,0x0,_0x22615d,_0xdfea5e,'center');},Sprite_EnemyName[_0x4b2772(0x632)][_0x4b2772(0x289)]=function(){const _0x521e44=_0x4b2772;if(!this[_0x521e44(0xc23)])return;this[_0x521e44(0x57d)]!==this[_0x521e44(0xc23)][_0x521e44(0x57d)]&&(_0x521e44(0x49c)===_0x521e44(0x49c)?this[_0x521e44(0xc74)](this[_0x521e44(0xc23)]['_battler']):this['_defeatedEnemies']=this[_0x521e44(0x26d)]||[]);},Sprite_EnemyName[_0x4b2772(0x632)]['updatePosition']=function(){const _0xb5fcff=_0x4b2772;if(!this[_0xb5fcff(0xc23)])return;this[_0xb5fcff(0x9a7)]=this[_0xb5fcff(0x9a7)]||Window_Base[_0xb5fcff(0x632)][_0xb5fcff(0xae9)](),this['x']=Math[_0xb5fcff(0x4ed)](this[_0xb5fcff(0xc23)][_0xb5fcff(0xc20)]),this['y']=Math[_0xb5fcff(0x4ed)](this[_0xb5fcff(0xc23)]['_baseY']-this['_lineHeight']*0.5);const _0x469c79=VisuMZ[_0xb5fcff(0x67d)][_0xb5fcff(0x869)][_0xb5fcff(0x74a)];this['x']+=Math[_0xb5fcff(0x4ed)](_0x469c79[_0xb5fcff(0x697)]||0x0),this['y']+=Math[_0xb5fcff(0x4ed)](_0x469c79[_0xb5fcff(0x446)]||0x0);},Sprite_EnemyName[_0x4b2772(0x632)][_0x4b2772(0x5ef)]=function(){const _0x4ca176=_0x4b2772;this[_0x4ca176(0x2d4)]();},Sprite_EnemyName[_0x4b2772(0x632)][_0x4b2772(0x2d4)]=function(){const _0x45adb3=_0x4b2772;if(!this['_stateIconSprite'])return;this[_0x45adb3(0x57d)]!==this[_0x45adb3(0x876)]['_battler']&&(_0x45adb3(0x95d)==='jIFMR'?this[_0x45adb3(0x876)][_0x45adb3(0xc74)](this['_battler']):(this[_0x45adb3(0x671)]=!this[_0x45adb3(0x3c8)][_0x45adb3(0xaab)](),!this['_appeared']&&(this[_0x45adb3(0xacf)]=0x0)));const _0x26fd2b=this['textWidth']();this[_0x45adb3(0x9a7)]=this[_0x45adb3(0x9a7)]||Window_Base['prototype']['lineHeight'](),this['_stateIconSprite']['x']=Math[_0x45adb3(0x4ed)]((_0x26fd2b+ImageManager[_0x45adb3(0xa63)])/0x2)+0x8,this[_0x45adb3(0x876)]['y']=this[_0x45adb3(0x9a7)]/0x2;const _0x3e5be7=VisuMZ[_0x45adb3(0x67d)]['Settings']['Enemy'];this['_stateIconSprite']['x']+=_0x3e5be7[_0x45adb3(0x3e4)]||0x0,this[_0x45adb3(0x876)]['y']+=_0x3e5be7[_0x45adb3(0x23f)]||0x0;},Sprite_EnemyName[_0x4b2772(0x632)][_0x4b2772(0x351)]=function(){const _0x35e14=_0x4b2772,_0x505035=this['visibilityState']();if(_0x505035&&this['opacity']<0xff)'NSbfe'!==_0x35e14(0x9cd)?this[_0x35e14(0xacf)]+=0x10:this[_0x35e14(0x4ba)](_0x35e14(0x971));else!_0x505035&&this[_0x35e14(0xacf)]>0x0&&(_0x35e14(0x304)!==_0x35e14(0x304)?(this[_0x35e14(0x5af)](),this[_0x35e14(0x26c)]()):this[_0x35e14(0xacf)]-=0x10);},Sprite_EnemyName[_0x4b2772(0x632)][_0x4b2772(0xab6)]=function(){const _0x31ef1c=_0x4b2772;if(this[_0x31ef1c(0x39c)]())return![];else{if(!this[_0x31ef1c(0x57d)])return![];else{if(this[_0x31ef1c(0x57d)][_0x31ef1c(0x3ef)]())return![];else{if(!this['_battler'][_0x31ef1c(0x845)]())return![];else{if(this[_0x31ef1c(0xb53)]())return!![];else{if(this[_0x31ef1c(0x60f)]())return!![];else{if(this[_0x31ef1c(0x821)]()){if(_0x31ef1c(0xc6f)===_0x31ef1c(0x5be)){const _0x32950c=_0x3d01ac[_0x31ef1c(0x96e)]()?-0x1:0x1;let _0x4c013d=this[_0x31ef1c(0xc20)];_0x4c013d+=this[_0x31ef1c(0xa0e)]();let _0x36778b=this[_0x31ef1c(0xaba)];const _0x34b8d0=this['_distortionSprite'][_0x31ef1c(0x8eb)]['y'];_0x36778b+=this[_0x31ef1c(0xb12)]();const _0x11a54c=_0x49bcac[_0x31ef1c(0x21e)][_0x31ef1c(0xab0)];if(_0x11a54c&&this[_0x31ef1c(0xc17)]===_0x11a54c){_0x4c013d+=_0x11a54c['x']-this[_0x31ef1c(0x2f7)]();const _0x445cab=_0x11a54c['lineHeight']()*0x3/0x4;_0x36778b=_0x11a54c['y']+_0x445cab,_0x36778b=_0x43d4aa[_0x31ef1c(0x7fa)](_0x36778b,_0x11a54c['y']+this['y']-this['height']+_0x445cab);}_0x1128da['x']=_0x1d5c95[_0x31ef1c(0x4ed)](_0x4c013d+this[_0x31ef1c(0x2f7)]()*_0x32950c),_0x540147['y']=_0xc5ef3a[_0x31ef1c(0x4ed)](_0x36778b+this[_0x31ef1c(0x6ea)]());}else return!![];}else{if(this[_0x31ef1c(0xacf)]>0x0){if(_0x31ef1c(0x8c1)===_0x31ef1c(0x4fb)){if(!_0x4714c2[_0x31ef1c(0x8c3)]())return![];if(!_0x4a2304[_0x31ef1c(0xa11)]())return![];if(!_0x36b0fb[_0x31ef1c(0x431)]())return![];return _0x3a86a4[_0x31ef1c(0x67d)][_0x31ef1c(0x869)][_0x31ef1c(0xcb4)][_0x31ef1c(0x972)];}else return![];}}}}}}}}},Sprite_EnemyName[_0x4b2772(0x632)][_0x4b2772(0x39c)]=function(){const _0x2eb28b=_0x4b2772;return VisuMZ[_0x2eb28b(0x67d)][_0x2eb28b(0x869)]['Enemy']['NameAlwaysHidden'];},Sprite_EnemyName[_0x4b2772(0x632)][_0x4b2772(0xb53)]=function(){return![];},Sprite_EnemyName[_0x4b2772(0x632)][_0x4b2772(0x60f)]=function(){const _0x3b470f=_0x4b2772;return VisuMZ[_0x3b470f(0x67d)]['Settings'][_0x3b470f(0x74a)][_0x3b470f(0x664)];},Sprite_EnemyName[_0x4b2772(0x632)]['isIncludedInEnemyWindow']=function(){const _0x544ce6=_0x4b2772;if(VisuMZ['BattleCore'][_0x544ce6(0x869)][_0x544ce6(0x74a)]['NameAlwaysSelectOnly'])return this['_battler']['isSelected']();else{if(_0x544ce6(0x21c)!==_0x544ce6(0x21c))_0x5e1df9[_0x544ce6(0x28a)]+=_0x544ce6(0x309);else return SceneManager[_0x544ce6(0x21e)][_0x544ce6(0xa24)]&&SceneManager['_scene'][_0x544ce6(0xa24)]['active']&&SceneManager[_0x544ce6(0x21e)]['_enemyWindow'][_0x544ce6(0x321)][_0x544ce6(0x41a)](this[_0x544ce6(0x57d)]);}},Sprite_EnemyName[_0x4b2772(0x632)][_0x4b2772(0x7a2)]=function(){const _0x3500b8=_0x4b2772;if(!this[_0x3500b8(0x57d)])return 0x0;if(this[_0x3500b8(0x94d)])return this[_0x3500b8(0x94d)];const _0x167485=this['name']();return this['setupFont'](),this[_0x3500b8(0x94d)]=this['bitmap']['measureTextWidth'](_0x167485)||0x1,this[_0x3500b8(0x94d)];},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xa6b)]=Sprite_Battleback[_0x4b2772(0x632)][_0x4b2772(0x242)],Sprite_Battleback[_0x4b2772(0x632)][_0x4b2772(0x242)]=function(){const _0x576e6e=_0x4b2772,_0x184cc2=VisuMZ[_0x576e6e(0x67d)][_0x576e6e(0x869)][_0x576e6e(0xc13)];if(!_0x184cc2){if(_0x576e6e(0x533)===_0x576e6e(0x53c))_0x5823b5[_0x576e6e(0x67d)][_0x576e6e(0x364)][_0x576e6e(0xb2b)](this,_0x2d2ec7);else return VisuMZ[_0x576e6e(0x67d)][_0x576e6e(0xa6b)][_0x576e6e(0xb2b)](this);}const _0x3dc932=String(_0x184cc2[_0x576e6e(0x811)])||'MZ';switch(_0x3dc932){case'MZ':VisuMZ['BattleCore'][_0x576e6e(0xa6b)]['call'](this);break;case _0x576e6e(0xa19):this['adjustPosition_1for1']();break;case _0x576e6e(0x590):this[_0x576e6e(0x741)]();break;case _0x576e6e(0x279):this['adjustPosition_ScaleDown']();break;case'ScaleUp':this['adjustPosition_ScaleUp']();break;}},Sprite_Battleback[_0x4b2772(0x632)][_0x4b2772(0x97d)]=function(){const _0x95eb6=_0x4b2772,_0x58bab4=VisuMZ['BattleCore'][_0x95eb6(0x869)][_0x95eb6(0xc13)];if(_0x58bab4&&_0x58bab4[_0x95eb6(0xc36)])return _0x58bab4['jsOneForOne'][_0x95eb6(0xb2b)](this);this[_0x95eb6(0x67b)]=Graphics['width'],this[_0x95eb6(0x4c3)]=Graphics[_0x95eb6(0x4c3)];const _0x236a81=0x1;this[_0x95eb6(0x8eb)]['x']=_0x236a81,this['scale']['y']=_0x236a81,this['x']=0x0,this['y']=0x0;},Sprite_Battleback['prototype'][_0x4b2772(0x741)]=function(){const _0x57b203=_0x4b2772,_0x592251=VisuMZ[_0x57b203(0x67d)][_0x57b203(0x869)]['BattlebackScale'];if(_0x592251&&_0x592251['jsScaleToFit']){if(_0x57b203(0xc0e)!==_0x57b203(0xa0c))return _0x592251['jsScaleToFit']['call'](this);else{if(this[_0x57b203(0x892)][_0x57b203(0x1e9)]>0x0){const _0x42284c=this['_forcedBattlers'][_0x57b203(0x44e)](),_0x5be582=_0x42284c[0x0];return _0x5be582[_0x57b203(0x9fd)]=_0x5be582[_0x57b203(0x9fd)]||[],_0x5be582['_actions'][0x0]=_0x42284c[0x1],_0x5be582;}else return this['_actionBattlers']['shift']();}}this[_0x57b203(0x67b)]=Graphics[_0x57b203(0x67b)],this['height']=Graphics[_0x57b203(0x4c3)];const _0xea1be7=this['width']/this[_0x57b203(0x6de)][_0x57b203(0x67b)],_0x4fa4c4=this[_0x57b203(0x4c3)]/this[_0x57b203(0x6de)][_0x57b203(0x4c3)],_0x10a264=Math[_0x57b203(0x20e)](_0xea1be7,_0x4fa4c4);this[_0x57b203(0x8eb)]['x']=_0x10a264,this[_0x57b203(0x8eb)]['y']=_0x10a264,this['x']=(Graphics['width']-this[_0x57b203(0x67b)])/0x2,this['y']=Graphics[_0x57b203(0x4c3)]-this[_0x57b203(0x4c3)];},Sprite_Battleback[_0x4b2772(0x632)][_0x4b2772(0x391)]=function(){const _0xf60bec=_0x4b2772,_0x3e52bc=VisuMZ[_0xf60bec(0x67d)][_0xf60bec(0x869)][_0xf60bec(0xc13)];if(_0x3e52bc&&_0x3e52bc[_0xf60bec(0x71a)]){if('TBjQf'===_0xf60bec(0xa62))return _0x3e52bc[_0xf60bec(0x71a)]['call'](this);else{const _0x3b19c4=this[_0xf60bec(0x3c8)][_0xf60bec(0xa5c)]();this['bitmap']=new _0xabe762(_0x3b19c4[_0xf60bec(0x67b)],_0x3b19c4['height']),this[_0xf60bec(0x2e5)]['bitmap']=new _0x513d41(0x1,0x1);}}this[_0xf60bec(0x67b)]=Graphics[_0xf60bec(0x67b)],this[_0xf60bec(0x4c3)]=Graphics[_0xf60bec(0x4c3)];const _0x12d9c5=Math[_0xf60bec(0x7fa)](0x1,this[_0xf60bec(0x67b)]/this[_0xf60bec(0x6de)]['width']),_0x380ce3=Math[_0xf60bec(0x7fa)](0x1,this[_0xf60bec(0x4c3)]/this[_0xf60bec(0x6de)][_0xf60bec(0x4c3)]),_0x4947ee=Math[_0xf60bec(0x20e)](_0x12d9c5,_0x380ce3);this[_0xf60bec(0x8eb)]['x']=_0x4947ee,this[_0xf60bec(0x8eb)]['y']=_0x4947ee,this['x']=(Graphics[_0xf60bec(0x67b)]-this['width'])/0x2,this['y']=Graphics[_0xf60bec(0x4c3)]-this['height'];},Sprite_Battleback[_0x4b2772(0x632)][_0x4b2772(0x6bd)]=function(){const _0xfd02fe=_0x4b2772,_0x1e33b9=VisuMZ[_0xfd02fe(0x67d)][_0xfd02fe(0x869)][_0xfd02fe(0xc13)];if(_0x1e33b9&&_0x1e33b9[_0xfd02fe(0xae5)])return _0x1e33b9[_0xfd02fe(0xae5)][_0xfd02fe(0xb2b)](this);this[_0xfd02fe(0x67b)]=Graphics[_0xfd02fe(0x67b)],this[_0xfd02fe(0x4c3)]=Graphics[_0xfd02fe(0x4c3)];const _0x268824=Math[_0xfd02fe(0x20e)](0x1,this[_0xfd02fe(0x67b)]/this[_0xfd02fe(0x6de)]['width']),_0x142c8d=Math[_0xfd02fe(0x20e)](0x1,this[_0xfd02fe(0x4c3)]/this[_0xfd02fe(0x6de)][_0xfd02fe(0x4c3)]),_0x3d9d60=Math['max'](_0x268824,_0x142c8d);this[_0xfd02fe(0x8eb)]['x']=_0x3d9d60,this[_0xfd02fe(0x8eb)]['y']=_0x3d9d60,this['x']=(Graphics[_0xfd02fe(0x67b)]-this[_0xfd02fe(0x67b)])/0x2,this['y']=Graphics['height']-this[_0xfd02fe(0x4c3)];},Spriteset_Battle[_0x4b2772(0x40b)]=VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x869)][_0x4b2772(0x335)][_0x4b2772(0x8a3)]??!![],Spriteset_Battle[_0x4b2772(0x632)][_0x4b2772(0x886)]=function(){if(!$gameSystem['isSideView']())return![];return![];},Spriteset_Battle[_0x4b2772(0x632)][_0x4b2772(0x99e)]=function(){return 0x0;},Spriteset_Battle[_0x4b2772(0x632)][_0x4b2772(0x379)]=function(){return 0x0;},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x461)]=Spriteset_Battle['prototype'][_0x4b2772(0x851)],Spriteset_Battle[_0x4b2772(0x632)][_0x4b2772(0x851)]=function(){const _0x366157=_0x4b2772;VisuMZ['BattleCore'][_0x366157(0x461)][_0x366157(0xb2b)](this),this[_0x366157(0x1fd)](),this[_0x366157(0x7b5)]();},VisuMZ['BattleCore']['Spriteset_Battle_update']=Spriteset_Battle['prototype']['update'],Spriteset_Battle['prototype']['update']=function(){const _0x43ab8b=_0x4b2772;VisuMZ['BattleCore'][_0x43ab8b(0x224)][_0x43ab8b(0xb2b)](this),this[_0x43ab8b(0x9b3)](),this[_0x43ab8b(0x51c)]();},Spriteset_Battle[_0x4b2772(0x632)]['createWeather']=function(){const _0x396c4f=_0x4b2772;this[_0x396c4f(0x8a7)]=new Weather(),this[_0x396c4f(0xaec)][_0x396c4f(0x340)](this[_0x396c4f(0x8a7)]);},Spriteset_Battle[_0x4b2772(0x632)][_0x4b2772(0x51c)]=function(){const _0x22d358=_0x4b2772;this[_0x22d358(0x8a7)]['type']=$gameScreen[_0x22d358(0x1d3)](),this[_0x22d358(0x8a7)][_0x22d358(0x9f2)]=$gameScreen[_0x22d358(0x488)]();},Game_Interpreter[_0x4b2772(0x632)]['command236']=function(_0x57b805){const _0x2f2f98=_0x4b2772;$gameScreen[_0x2f2f98(0x8ae)](_0x57b805[0x0],_0x57b805[0x1],_0x57b805[0x2]);if(_0x57b805[0x3])this[_0x2f2f98(0x5c5)](_0x57b805[0x2]);return!![];},VisuMZ[_0x4b2772(0x67d)]['Game_Interpreter_command283']=Game_Interpreter[_0x4b2772(0x632)][_0x4b2772(0x769)],Game_Interpreter[_0x4b2772(0x632)][_0x4b2772(0x769)]=function(_0x17f3ca){const _0x3ea48a=_0x4b2772;return SceneManager[_0x3ea48a(0x885)]()?(SceneManager[_0x3ea48a(0x21e)]['_spriteset']['changeBattlebacks'](_0x17f3ca[0x0],_0x17f3ca[0x1]),!![]):VisuMZ[_0x3ea48a(0x67d)][_0x3ea48a(0x24c)][_0x3ea48a(0xb2b)](this,_0x17f3ca);},Spriteset_Battle[_0x4b2772(0x632)][_0x4b2772(0xc0c)]=function(_0x37584b,_0x2e5b59){const _0x33c44f=_0x4b2772;_0x37584b[_0x33c44f(0x6de)]=_0x2e5b59;},Spriteset_Battle[_0x4b2772(0x632)][_0x4b2772(0x901)]=function(_0x14e869,_0x156821){const _0x38c02=_0x4b2772;_0x14e869=_0x14e869||'',_0x156821=_0x156821||'';_0x14e869===''&&_0x156821===''&&(_0x14e869=this[_0x38c02(0x440)][_0x38c02(0x4af)](),_0x156821=this['_back2Sprite'][_0x38c02(0xb7e)]());const _0x18150a=ImageManager[_0x38c02(0xb4f)](_0x14e869),_0x7a1f7b=ImageManager['loadBattleback2'](_0x156821);_0x18150a[_0x38c02(0xbdb)](this[_0x38c02(0x684)]['bind'](this,this[_0x38c02(0x440)],this['_back2Sprite'],_0x18150a,_0x7a1f7b));},Spriteset_Battle['prototype'][_0x4b2772(0x684)]=function(_0x5188b2,_0x44ee39,_0xb87cca,_0x3abec1){const _0x4cd66b=_0x4b2772;_0x3abec1[_0x4cd66b(0xbdb)](this[_0x4cd66b(0x814)][_0x4cd66b(0x624)](this,_0x5188b2,_0x44ee39,_0xb87cca,_0x3abec1));},Spriteset_Battle[_0x4b2772(0x632)][_0x4b2772(0x814)]=function(_0x23e959,_0x25570f,_0x40a423,_0x3935f1){const _0x3888b7=_0x4b2772;_0x23e959[_0x3888b7(0x6de)]=_0x40a423,_0x25570f[_0x3888b7(0x6de)]=_0x3935f1,_0x23e959[_0x3888b7(0x242)](),_0x25570f[_0x3888b7(0x242)]();},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x534)]=Spriteset_Battle[_0x4b2772(0x632)]['createBattleField'],Spriteset_Battle[_0x4b2772(0x632)][_0x4b2772(0xb04)]=function(){const _0xcbb257=_0x4b2772;VisuMZ[_0xcbb257(0x67d)][_0xcbb257(0x534)][_0xcbb257(0xb2b)](this),this[_0xcbb257(0xc7a)]();},Spriteset_Battle[_0x4b2772(0x632)][_0x4b2772(0xc7a)]=function(){const _0xc183f0=_0x4b2772;this[_0xc183f0(0xba7)](),this[_0xc183f0(0xa91)](),this[_0xc183f0(0x5e3)](),this[_0xc183f0(0xaca)](),this[_0xc183f0(0x3b7)]();},Spriteset_Battle[_0x4b2772(0x632)][_0x4b2772(0xba7)]=function(){const _0xfcc868=_0x4b2772;this[_0xfcc868(0x3f0)]=new Sprite(),this['_battleField']['addChild'](this['_battlerContainer']);},Spriteset_Battle[_0x4b2772(0x632)]['createAnimationContainer']=function(){const _0x498b4d=_0x4b2772;this[_0x498b4d(0xc92)]=new Sprite(),Spriteset_Battle[_0x498b4d(0x40b)]?this[_0x498b4d(0x340)](this[_0x498b4d(0xc92)]):this[_0x498b4d(0xaec)][_0x498b4d(0x340)](this[_0x498b4d(0xc92)]);},Spriteset_Battle[_0x4b2772(0x632)][_0x4b2772(0xaca)]=function(){const _0x43d567=_0x4b2772;this[_0x43d567(0xb75)]=new Sprite(),this[_0x43d567(0xb75)]['x']=this[_0x43d567(0xaec)]['x'],this[_0x43d567(0xb75)]['y']=this['_battleField']['y'],this[_0x43d567(0x340)](this[_0x43d567(0xb75)]);},Spriteset_Battle[_0x4b2772(0x632)][_0x4b2772(0x3b7)]=function(){const _0x416475=_0x4b2772;if(!this[_0x416475(0x886)]())return;this[_0x416475(0x3f0)]['scale']['x']=-0x1,this[_0x416475(0x3f0)]['x']=this['_battleField'][_0x416475(0x67b)],this[_0x416475(0x962)][_0x416475(0x8eb)]['x']=-0x1,this[_0x416475(0x962)]['x']=this[_0x416475(0xaec)][_0x416475(0x67b)],this[_0x416475(0xc92)][_0x416475(0x8eb)]['x']=-0x1,this['_animationContainer']['x']=this[_0x416475(0xaec)][_0x416475(0x67b)],this[_0x416475(0xb75)][_0x416475(0x8eb)]['x']=-0x1,this[_0x416475(0xb75)]['x']=this[_0x416475(0xaec)]['x']+this[_0x416475(0xaec)]['width'];},Spriteset_Battle[_0x4b2772(0x632)]['createEnemies']=function(){const _0x57885d=_0x4b2772;Imported[_0x57885d(0x2d5)]&&this['coreEngineRepositionEnemies']()&&(_0x57885d(0x921)===_0x57885d(0xb61)?_0x15ed79[_0x57885d(0x402)]([_0x34b243]):this[_0x57885d(0x66e)]());const _0xba9ed6=$gameTroop['members'](),_0x113169=[];for(const _0x26ea1c of _0xba9ed6){if(_0x57885d(0x3ca)===_0x57885d(0x610))return _0x55a9ed[_0x57885d(0x67d)][_0x57885d(0x869)]['PartyCmd'][_0x57885d(0x275)];else _0x113169[_0x57885d(0x21f)](new Sprite_Enemy(_0x26ea1c));}_0x113169[_0x57885d(0xad4)](this[_0x57885d(0x778)][_0x57885d(0x624)](this));for(const _0x4c74fc of _0x113169){this[_0x57885d(0x3f0)][_0x57885d(0x340)](_0x4c74fc);}this[_0x57885d(0x800)]=_0x113169;},Spriteset_Battle[_0x4b2772(0x632)][_0x4b2772(0x1e6)]=function(){const _0x1b45da=_0x4b2772;this[_0x1b45da(0x47a)]=[];for(let _0x3154f3=0x0;_0x3154f3<$gameParty[_0x1b45da(0x71e)]();_0x3154f3++){const _0x326943=$gameParty[_0x1b45da(0x949)]()[_0x3154f3],_0x2641fe=new Sprite_Actor();_0x2641fe[_0x1b45da(0xcc7)](_0x326943),_0x2641fe[_0x1b45da(0xb6e)](_0x326943),_0x2641fe[_0x1b45da(0x49d)](),this['_actorSprites'][_0x1b45da(0x21f)](_0x2641fe),this[_0x1b45da(0x3f0)][_0x1b45da(0x340)](_0x2641fe);}},Spriteset_Battle[_0x4b2772(0x632)][_0x4b2772(0x6f0)]=function(_0x5d4fec,_0x2121d6,_0x5aeda5,_0x16e08b){const _0x56f776=_0x4b2772,_0xebf4a2=this[_0x56f776(0x84a)](_0x2121d6),_0x46f2e5=new(_0xebf4a2?Sprite_AnimationMV:Sprite_Animation)(),_0x41faeb=this['makeTargetSprites'](_0x5d4fec);if(this[_0x56f776(0x83f)](_0x5d4fec[0x0])){if('uBBUq'===_0x56f776(0x45a)){if(_0x2bfd49[_0x56f776(0x791)](_0x3bd2b1))return!![];}else _0x5aeda5=!_0x5aeda5;}_0x46f2e5[_0x56f776(0x30c)]=_0x5d4fec,_0x46f2e5[_0x56f776(0xc74)](_0x41faeb,_0x2121d6,_0x5aeda5,_0x16e08b),this[_0x56f776(0x7a1)](_0x46f2e5);},Spriteset_Battle[_0x4b2772(0x632)]['addAnimationSpriteToContainer']=function(_0x566375){const _0x4b6af6=_0x4b2772;this[_0x4b6af6(0xc4a)](_0x566375)?(this['battleStatusWindowAnimationContainer']()['addChild'](_0x566375),_0x566375[_0x4b6af6(0x560)]=!![]):this[_0x4b6af6(0xc92)][_0x4b6af6(0x340)](_0x566375),this[_0x4b6af6(0x3dc)][_0x4b6af6(0x21f)](_0x566375);},Spriteset_Battle[_0x4b2772(0x632)][_0x4b2772(0xc4a)]=function(_0x3f35b9){const _0x33317b=_0x4b2772;if(!_0x3f35b9)return![];if(!_0x3f35b9[_0x33317b(0x66a)])return![];if(!_0x3f35b9[_0x33317b(0x30c)][0x0])return![];if(_0x3f35b9[_0x33317b(0x30c)][0x0][_0x33317b(0x92d)]&&!_0x3f35b9[_0x33317b(0x30c)][0x0][_0x33317b(0x92d)]())return![];if($gameSystem[_0x33317b(0x7d1)]())return![];if(!this['battleStatusWindowAnimationContainer']())return![];if(_0x3f35b9[_0x33317b(0x63a)]===Sprite_Animation){if(_0x3f35b9['_animation'][_0x33317b(0x6a5)]!==0x0)return![];}else{if(_0x3f35b9[_0x33317b(0x63a)]===Sprite_AnimationMV){if(_0x33317b(0x829)!==_0x33317b(0x39a)){if(_0x3f35b9['_animation'][_0x33317b(0x84b)]===0x3)return![];}else{const _0x4dcd61=new _0x5d91cb(0x0,0x0,_0x2721f7[_0x33317b(0x67b)],_0x586d92[_0x33317b(0x4c3)]);this['_commandNameWindow']=new _0x52dbc2(_0x4dcd61),this[_0x33317b(0xc39)]['opacity']=0x0,this['addChild'](this[_0x33317b(0xc39)]),this[_0x33317b(0xc2d)]();}}}return!![];const _0xe526cc=Window_BattleStatus['prototype']['battleLayoutStyle']();return['xp',_0x33317b(0xca0)]['contains'](_0xe526cc);},Spriteset_Battle[_0x4b2772(0x632)]['battleStatusWindowAnimationContainer']=function(){const _0x4fffaa=_0x4b2772;if(!SceneManager[_0x4fffaa(0x21e)])return null;if(!SceneManager[_0x4fffaa(0x21e)][_0x4fffaa(0xab0)])return null;if(!SceneManager[_0x4fffaa(0x21e)][_0x4fffaa(0xab0)][_0x4fffaa(0x56a)])return null;return SceneManager['_scene'][_0x4fffaa(0xab0)][_0x4fffaa(0x56a)];},Spriteset_Battle[_0x4b2772(0x632)][_0x4b2772(0xa31)]=function(_0xedea6c){const _0x234a24=_0x4b2772;this['removeAnimationFromContainer'](_0xedea6c);for(const _0xda888f of _0xedea6c[_0x234a24(0x30c)]){if(_0xda888f[_0x234a24(0x994)]){if(_0x234a24(0x995)===_0x234a24(0x995))_0xda888f[_0x234a24(0x994)]();else{if(this[_0x234a24(0x30a)]()[_0x234a24(0x28a)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x31e529=_0x3df2e4(_0x545f7b['$1'])[_0x234a24(0x5fd)]()[_0x234a24(0x75a)]();return _0x31e529;}return'MANUAL';}}}_0xedea6c['destroy']();},Spriteset_Battle['prototype'][_0x4b2772(0xb25)]=function(_0x3ca57a){const _0x447ef9=_0x4b2772;this[_0x447ef9(0x3dc)]['remove'](_0x3ca57a),this[_0x447ef9(0xc4a)](_0x3ca57a)?this['battleStatusWindowAnimationContainer']()[_0x447ef9(0x29f)](_0x3ca57a):this[_0x447ef9(0xc92)]['removeChild'](_0x3ca57a);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x58d)]=Spriteset_Battle[_0x4b2772(0x632)][_0x4b2772(0x259)],Spriteset_Battle[_0x4b2772(0x632)]['updateActors']=function(){const _0x153338=_0x4b2772;VisuMZ[_0x153338(0x67d)][_0x153338(0x58d)][_0x153338(0xb2b)](this),this[_0x153338(0x831)]();},Spriteset_Battle[_0x4b2772(0x632)][_0x4b2772(0x831)]=function(){const _0x2a879f=_0x4b2772;this[_0x2a879f(0x3f0)]['children'][_0x2a879f(0xad4)](this[_0x2a879f(0x9fa)][_0x2a879f(0x624)](this)),this[_0x2a879f(0x8f5)]();},Spriteset_Battle[_0x4b2772(0x632)][_0x4b2772(0x9fa)]=function(_0x4b5e02,_0x277430){const _0x1c1b1e=_0x4b2772;if(VisuMZ[_0x1c1b1e(0x67d)][_0x1c1b1e(0x869)]['Actor'][_0x1c1b1e(0xa2f)]){if(_0x4b5e02['_battler']&&_0x277430[_0x1c1b1e(0x57d)]){if(_0x1c1b1e(0xb59)===_0x1c1b1e(0xb59)){if(_0x4b5e02['_battler']['isActor']()&&_0x277430[_0x1c1b1e(0x57d)]['isEnemy']())return'YfGja'!==_0x1c1b1e(0x32f)?_0xa48acc['BattleCore'][_0x1c1b1e(0x869)][_0x1c1b1e(0x681)][_0x1c1b1e(0x7cb)][_0x1c1b1e(0xb2b)](this,_0x4c876d,_0x3d33ab):0x1;else{if(_0x277430[_0x1c1b1e(0x57d)]['isActor']()&&_0x4b5e02[_0x1c1b1e(0x57d)][_0x1c1b1e(0x9d4)]()){if(_0x1c1b1e(0x3cb)!==_0x1c1b1e(0xb64))return-0x1;else _0x78fdc4[_0x1c1b1e(0x3ce)](_0x18b105);}}}else _0x22111f[_0x1c1b1e(0xa05)]()[_0x1c1b1e(0x1df)](),_0x4f8e5d['finishActorInput'](),_0x47781b[_0x1c1b1e(0x451)](),this[_0x1c1b1e(0x793)]();}}if(_0x4b5e02[_0x1c1b1e(0xaba)]!==_0x277430[_0x1c1b1e(0xaba)]){if(_0x1c1b1e(0x362)===_0x1c1b1e(0x362))return _0x4b5e02[_0x1c1b1e(0xaba)]-_0x277430[_0x1c1b1e(0xaba)];else{const _0xcf50f2=_0x3d0f8b[this[_0x1c1b1e(0x8ee)]['guardSkillId']()];if(!_0xcf50f2)return;if(!this['canAddSkillCommand'](_0xcf50f2))return;const _0x56a7a7=this[_0x1c1b1e(0x5d7)](),_0x17bf15=_0x4ca8fd[_0x1c1b1e(0xc55)](_0xcf50f2),_0x3794b1=_0x4a0267['battleCommandIcon'](_0xcf50f2),_0x4e7139=_0x56a7a7==='text'?_0x17bf15:'\x5cI[%1]%2'[_0x1c1b1e(0x934)](_0x3794b1,_0x17bf15);this[_0x1c1b1e(0x891)](_0x4e7139,'guard',this['_actor']['canGuard']());}}else{if(_0x1c1b1e(0xb23)!==_0x1c1b1e(0xb23))this[_0x1c1b1e(0x5b7)](_0x3b4f1d);else return _0x277430[_0x1c1b1e(0x838)]-_0x4b5e02[_0x1c1b1e(0x838)];}},Spriteset_Battle['prototype'][_0x4b2772(0x8f5)]=function(){const _0x376c0c=_0x4b2772;if(!VisuMZ[_0x376c0c(0x67d)]['Settings']['Actor'][_0x376c0c(0xa70)])return;const _0x265f7e=BattleManager[_0x376c0c(0x4f1)];if(_0x265f7e){if(_0x265f7e[_0x376c0c(0x92d)]()&&!$gameSystem['isSideView']())return;const _0x5f2c99=_0x265f7e[_0x376c0c(0x947)]();if(_0x5f2c99&&_0x265f7e['isActor']())this['_battlerContainer'][_0x376c0c(0x340)](_0x5f2c99);}},Spriteset_Battle[_0x4b2772(0x632)][_0x4b2772(0x50f)]=function(){const _0x583b71=_0x4b2772;for(const _0x28adca of $gameParty[_0x583b71(0x668)]()){if(!_0x28adca)continue;if(!_0x28adca[_0x583b71(0x947)]())continue;_0x28adca[_0x583b71(0x947)]()[_0x583b71(0x313)]=!![],_0x28adca['battler']()['retreat']();}},Spriteset_Battle['prototype'][_0x4b2772(0xa91)]=function(){const _0x501ce4=_0x4b2772;this[_0x501ce4(0x962)]=new Sprite(),Spriteset_Battle[_0x501ce4(0x40b)]?this[_0x501ce4(0x340)](this[_0x501ce4(0x962)]):this['_battleField'][_0x501ce4(0x340)](this[_0x501ce4(0x962)]),SceneManager[_0x501ce4(0x21e)][_0x501ce4(0x962)]=this[_0x501ce4(0x962)];},Spriteset_Battle[_0x4b2772(0x632)][_0x4b2772(0x7b5)]=function(){const _0x54e188=_0x4b2772;if(VisuMZ['BattleCore'][_0x54e188(0x869)][_0x54e188(0x74a)]['NameLegacy'])return;this[_0x54e188(0x3ff)]=new Sprite(),BattleManager['addChildToUiContainer'](this[_0x54e188(0x3ff)]);for(const _0x34a9ed of this[_0x54e188(0x800)]){const _0x21609b=new Sprite_EnemyName();this[_0x54e188(0x3ff)][_0x54e188(0x340)](_0x21609b),_0x21609b[_0x54e188(0xb9a)](_0x34a9ed);}},Spriteset_Battle[_0x4b2772(0x632)][_0x4b2772(0x9b3)]=function(){const _0xde88b6=_0x4b2772;if(!this[_0xde88b6(0xb75)])return;if(!this[_0xde88b6(0x962)])return;const _0x20912c=Spriteset_Battle[_0xde88b6(0x40b)]?this[_0xde88b6(0xb75)]['x']:0x0,_0x3f2159=Spriteset_Battle[_0xde88b6(0x40b)]?this[_0xde88b6(0xb75)]['y']:0x0,_0x506887=Imported[_0xde88b6(0x39b)]?this[_0xde88b6(0xaec)]['x']:0x0,_0x1096d8=Imported[_0xde88b6(0x39b)]?this['_battleField']['y']:0x0;this[_0xde88b6(0x962)]['x']=_0x20912c+_0x506887,this['_uiContainer']['y']=_0x3f2159+_0x1096d8;},BattleManager[_0x4b2772(0x5fb)]=function(_0x7f20a4){const _0x57cfa2=_0x4b2772;if(!SceneManager['_scene'][_0x57cfa2(0x962)])return;SceneManager[_0x57cfa2(0x21e)][_0x57cfa2(0x962)][_0x57cfa2(0x340)](_0x7f20a4);},Spriteset_Battle['prototype']['isBusy']=function(){return![];},Spriteset_Battle[_0x4b2772(0x632)][_0x4b2772(0x3e2)]=function(){const _0x141035=_0x4b2772;return this['battlerSprites']()[_0x141035(0xb67)](_0x43f5f0=>_0x43f5f0[_0x141035(0x3f1)]());},Spriteset_Battle[_0x4b2772(0x632)][_0x4b2772(0xaa7)]=function(){const _0x4affd4=_0x4b2772;return this[_0x4affd4(0x303)]()[_0x4affd4(0xb67)](_0x2a6a9d=>_0x2a6a9d[_0x4affd4(0x41c)]());},Spriteset_Battle[_0x4b2772(0x632)]['isAnyoneGrowing']=function(){const _0x3ffac1=_0x4b2772;return this[_0x3ffac1(0x303)]()['some'](_0x3c2c14=>_0x3c2c14[_0x3ffac1(0x27e)]());},Spriteset_Battle['prototype'][_0x4b2772(0x8dd)]=function(){const _0x2e8e79=_0x4b2772;return this[_0x2e8e79(0x303)]()[_0x2e8e79(0xb67)](_0x201266=>_0x201266[_0x2e8e79(0xac1)]());},Spriteset_Battle[_0x4b2772(0x632)][_0x4b2772(0x7be)]=function(){const _0x44a77f=_0x4b2772;return this['battlerSprites']()[_0x44a77f(0xb67)](_0x542b5d=>_0x542b5d[_0x44a77f(0x255)]());},Spriteset_Battle[_0x4b2772(0x632)]['isAnyoneChangingOpacity']=function(){const _0x44b71e=_0x4b2772;return this[_0x44b71e(0x303)]()[_0x44b71e(0xb67)](_0x2f9f8e=>_0x2f9f8e[_0x44b71e(0x85b)]());},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x9b8)]=Window_ItemList[_0x4b2772(0x632)][_0x4b2772(0x6ee)],Window_ItemList['prototype'][_0x4b2772(0x6ee)]=function(){const _0x5f610f=_0x4b2772;return SceneManager[_0x5f610f(0x885)]()?SceneManager[_0x5f610f(0x21e)][_0x5f610f(0x421)]()===_0x5f610f(0x8d1)?VisuMZ[_0x5f610f(0x67d)]['Settings'][_0x5f610f(0x335)][_0x5f610f(0xc93)]:VisuMZ[_0x5f610f(0x67d)][_0x5f610f(0x869)][_0x5f610f(0x335)][_0x5f610f(0xa7e)]:VisuMZ[_0x5f610f(0x67d)]['Window_ItemList_maxCols'][_0x5f610f(0xb2b)](this);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x4f2)]=Window_SkillList[_0x4b2772(0x632)]['maxCols'],Window_SkillList[_0x4b2772(0x632)][_0x4b2772(0x6ee)]=function(){const _0x1ec353=_0x4b2772;if(SceneManager[_0x1ec353(0x885)]()){if(_0x1ec353(0x9e1)===_0x1ec353(0x9e1))return SceneManager['_scene']['battleLayoutStyle']()==='border'?VisuMZ['BattleCore'][_0x1ec353(0x869)]['BattleLayout'][_0x1ec353(0xc93)]:VisuMZ[_0x1ec353(0x67d)]['Settings']['BattleLayout'][_0x1ec353(0xa7e)];else{const _0x539ad0=this[_0x1ec353(0x8ee)][_0x1ec353(0x99d)]();for(const _0x3035e3 of _0x539ad0){this['addSkillTypeCommand'](_0x3035e3);}}}else return VisuMZ[_0x1ec353(0x67d)][_0x1ec353(0x4f2)][_0x1ec353(0xb2b)](this);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x7dc)]=Window_Options[_0x4b2772(0x632)][_0x4b2772(0x538)],Window_Options[_0x4b2772(0x632)][_0x4b2772(0x538)]=function(){const _0x3abc84=_0x4b2772;VisuMZ[_0x3abc84(0x67d)][_0x3abc84(0x7dc)][_0x3abc84(0xb2b)](this),this[_0x3abc84(0x2e7)](),this[_0x3abc84(0xb90)]();},Window_Options['prototype'][_0x4b2772(0x2e7)]=function(){const _0x4cc1d1=_0x4b2772;VisuMZ[_0x4cc1d1(0x67d)][_0x4cc1d1(0x869)]['AutoBattle']['AddOption']&&(_0x4cc1d1(0x3b3)===_0x4cc1d1(0x3b3)?(this[_0x4cc1d1(0x5af)](),this[_0x4cc1d1(0x26c)]()):this[_0x4cc1d1(0x1f0)]=!![]);},Window_Options[_0x4b2772(0x632)][_0x4b2772(0xb90)]=function(){const _0x3aff5c=_0x4b2772;if(!VisuMZ[_0x3aff5c(0x67d)][_0x3aff5c(0x869)]['HpGauge'][_0x3aff5c(0x24e)])return;const _0x5aba34=TextManager[_0x3aff5c(0x42f)],_0x1103df=_0x3aff5c(0x42f);this[_0x3aff5c(0x891)](_0x5aba34,_0x1103df);},Window_Options[_0x4b2772(0x632)]['addBattleCoreAutoBattleStartupCommand']=function(){const _0x5b9240=_0x4b2772,_0x322653=TextManager[_0x5b9240(0x597)],_0x3a1b12=_0x5b9240(0xa65);this[_0x5b9240(0x891)](_0x322653,_0x3a1b12);},Window_Options[_0x4b2772(0x632)][_0x4b2772(0x26c)]=function(){const _0x4dedb2=_0x4b2772,_0x989929=TextManager['autoBattleStyle'],_0x4b033c=_0x4dedb2(0xc4e);this[_0x4dedb2(0x891)](_0x989929,_0x4b033c);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x4d0)]=Window_Options[_0x4b2772(0x632)][_0x4b2772(0x9c3)],Window_Options['prototype'][_0x4b2772(0x9c3)]=function(_0x4686b5){const _0x9ed9b2=_0x4b2772,_0x400044=this['commandSymbol'](_0x4686b5);return _0x400044===_0x9ed9b2(0xc4e)?this[_0x9ed9b2(0x6be)]():VisuMZ[_0x9ed9b2(0x67d)][_0x9ed9b2(0x4d0)]['call'](this,_0x4686b5);},Window_Options[_0x4b2772(0x632)]['statusTextAutoBattleStyle']=function(){const _0x241cbd=_0x4b2772,_0x37f608=VisuMZ[_0x241cbd(0x67d)][_0x241cbd(0x869)][_0x241cbd(0x985)],_0x58aeca=this[_0x241cbd(0x384)](_0x241cbd(0xc4e));return _0x58aeca?_0x37f608[_0x241cbd(0x92b)]:_0x37f608[_0x241cbd(0x336)];},Window_ShopStatus[_0x4b2772(0x632)][_0x4b2772(0xa56)]=function(){const _0x20c0ad=_0x4b2772,_0x2ee04f=DataManager[_0x20c0ad(0x87d)](this[_0x20c0ad(0x85e)]),_0x505cb4=VisuMZ[_0x20c0ad(0xce4)][_0x2ee04f];if(!_0x505cb4)return this[_0x20c0ad(0x54f)]();const _0x4613cb=_0x20c0ad(0x898)['format'](this[_0x20c0ad(0x85e)][_0x20c0ad(0x33f)]['type']),_0x3065f9=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x20c0ad(0x85e)][_0x20c0ad(0x33f)][_0x20c0ad(0x9b1)]];return _0x505cb4[_0x4613cb]['format'](_0x3065f9);},Window_ShopStatus['prototype']['getItemDamageAmountTextBattleCore']=function(){const _0x25e267=_0x4b2772,_0xc89617=DataManager[_0x25e267(0x87d)](this[_0x25e267(0x85e)]),_0x55848b=VisuMZ[_0x25e267(0xce4)][_0xc89617];if(!_0x55848b)return this[_0x25e267(0x75b)]();return _0x55848b[_0x25e267(0x3bd)][_0x25e267(0xb2b)](this);},VisuMZ['BattleCore'][_0x4b2772(0x565)]=Window_PartyCommand[_0x4b2772(0x632)]['initialize'],Window_PartyCommand[_0x4b2772(0x632)][_0x4b2772(0xb0d)]=function(_0x1a8d86){const _0x3c5f8a=_0x4b2772;VisuMZ[_0x3c5f8a(0x67d)][_0x3c5f8a(0x565)]['call'](this,_0x1a8d86),this[_0x3c5f8a(0x4ad)](_0x1a8d86);},Window_PartyCommand[_0x4b2772(0x632)]['createCommandNameWindow']=function(_0x4f0444){const _0x346440=_0x4b2772,_0x5dc288=new Rectangle(0x0,0x0,_0x4f0444['width'],_0x4f0444[_0x346440(0x4c3)]);this[_0x346440(0xc39)]=new Window_Base(_0x5dc288),this[_0x346440(0xc39)][_0x346440(0xacf)]=0x0,this['addChild'](this['_commandNameWindow']),this[_0x346440(0xc2d)]();},Window_PartyCommand[_0x4b2772(0x632)][_0x4b2772(0x820)]=function(){const _0x17676b=_0x4b2772;Window_Command['prototype']['callUpdateHelp'][_0x17676b(0xb2b)](this);if(this['_commandNameWindow'])this['updateCommandNameWindow']();},Window_PartyCommand['prototype'][_0x4b2772(0xc2d)]=function(){const _0x234ae8=_0x4b2772,_0x208d19=this[_0x234ae8(0xc39)];_0x208d19[_0x234ae8(0x2fb)][_0x234ae8(0x4d6)]();const _0x32dab4=this['commandStyleCheck'](this[_0x234ae8(0x89a)]());if(_0x32dab4===_0x234ae8(0xa4a)&&this['maxItems']()>0x0){const _0x5e420a=this[_0x234ae8(0x216)](this['index']());let _0x15735b=this[_0x234ae8(0x515)](this[_0x234ae8(0x89a)]());_0x15735b=_0x15735b['replace'](/\\I\[(\d+)\]/gi,''),_0x208d19[_0x234ae8(0x73b)](),this[_0x234ae8(0x529)](_0x15735b,_0x5e420a),this[_0x234ae8(0xc4c)](_0x15735b,_0x5e420a),this[_0x234ae8(0x7d0)](_0x15735b,_0x5e420a);}},Window_PartyCommand[_0x4b2772(0x632)][_0x4b2772(0x529)]=function(_0x24a682,_0x262996){},Window_PartyCommand[_0x4b2772(0x632)][_0x4b2772(0xc4c)]=function(_0x9b50bf,_0x2523a2){const _0x417342=_0x4b2772,_0x55f834=this[_0x417342(0xc39)];_0x55f834[_0x417342(0x86e)](_0x9b50bf,0x0,_0x2523a2['y'],_0x55f834['innerWidth'],'center');},Window_PartyCommand['prototype'][_0x4b2772(0x7d0)]=function(_0x1b34f3,_0xb240e5){const _0x46d621=_0x4b2772,_0x4c697f=this[_0x46d621(0xc39)],_0x6f04f9=$gameSystem[_0x46d621(0xc56)](),_0x167a2b=_0xb240e5['x']+Math[_0x46d621(0x805)](_0xb240e5[_0x46d621(0x67b)]/0x2)+_0x6f04f9;_0x4c697f['x']=_0x4c697f['width']/-0x2+_0x167a2b,_0x4c697f['y']=Math[_0x46d621(0x805)](_0xb240e5[_0x46d621(0x4c3)]/0x2);},Window_PartyCommand['prototype'][_0x4b2772(0x37a)]=function(){const _0x4b5f19=_0x4b2772;this[_0x4b5f19(0x4ab)](),this[_0x4b5f19(0xaff)](),this[_0x4b5f19(0x233)](),this['addOptionsCommand'](),this[_0x4b5f19(0x7ac)]();},Window_PartyCommand['prototype'][_0x4b2772(0x4ab)]=function(){const _0x3d6334=_0x4b2772,_0x53de7b=this[_0x3d6334(0x5d7)](),_0x5901d9=VisuMZ['BattleCore'][_0x3d6334(0x869)]['PartyCmd'][_0x3d6334(0xa71)],_0x4bd18a=_0x53de7b===_0x3d6334(0x245)?TextManager[_0x3d6334(0xadd)]:_0x3d6334(0x573)[_0x3d6334(0x934)](_0x5901d9,TextManager[_0x3d6334(0xadd)]),_0x3a9aa9=this[_0x3d6334(0x64b)]();this[_0x3d6334(0x891)](_0x4bd18a,_0x3d6334(0xadd),_0x3a9aa9);},Window_PartyCommand['prototype'][_0x4b2772(0x64b)]=function(){return!![];},Window_PartyCommand[_0x4b2772(0x632)][_0x4b2772(0xaff)]=function(){const _0x4c09b7=_0x4b2772;if(!this[_0x4c09b7(0x94b)]())return;const _0x5dcc62=this[_0x4c09b7(0x5d7)](),_0x4a9132=VisuMZ[_0x4c09b7(0x67d)][_0x4c09b7(0x869)]['PartyCmd'][_0x4c09b7(0x7bc)],_0x364565=_0x5dcc62===_0x4c09b7(0x245)?TextManager[_0x4c09b7(0x481)]:_0x4c09b7(0x573)[_0x4c09b7(0x934)](_0x4a9132,TextManager[_0x4c09b7(0x481)]),_0x5edc14=this[_0x4c09b7(0xa92)]();this[_0x4c09b7(0x891)](_0x364565,_0x4c09b7(0x481),_0x5edc14);},Window_PartyCommand['prototype']['isAutoBattleCommandAdded']=function(){const _0x4cd074=_0x4b2772;return VisuMZ['BattleCore'][_0x4cd074(0x869)][_0x4cd074(0x8b9)]['CommandAddAutoBattle'];},Window_PartyCommand[_0x4b2772(0x632)][_0x4b2772(0xa92)]=function(){return!![];},Window_PartyCommand['prototype']['addCustomCommands']=function(){},Window_PartyCommand[_0x4b2772(0x632)][_0x4b2772(0xc0b)]=function(){const _0xeea2a2=_0x4b2772;if(!this[_0xeea2a2(0x64f)]())return;const _0x347c8f=this['commandStyle'](),_0x2e58e7=VisuMZ[_0xeea2a2(0x67d)][_0xeea2a2(0x869)]['PartyCmd'][_0xeea2a2(0xab7)],_0x39c6bb=_0x347c8f===_0xeea2a2(0x245)?TextManager[_0xeea2a2(0x592)]:'\x5cI[%1]%2'[_0xeea2a2(0x934)](_0x2e58e7,TextManager[_0xeea2a2(0x592)]),_0x145a47=this['isOptionsCommandEnabled']();this[_0xeea2a2(0x891)](_0x39c6bb,_0xeea2a2(0x592),_0x145a47);},Window_PartyCommand[_0x4b2772(0x632)][_0x4b2772(0x64f)]=function(){const _0x18a9e5=_0x4b2772;return VisuMZ['BattleCore']['Settings'][_0x18a9e5(0x8b9)][_0x18a9e5(0xb41)];},Window_PartyCommand[_0x4b2772(0x632)][_0x4b2772(0x774)]=function(){return!![];},Window_PartyCommand[_0x4b2772(0x632)][_0x4b2772(0x7ac)]=function(){const _0xec8a6c=_0x4b2772,_0x33a5db=this[_0xec8a6c(0x5d7)](),_0xadb930=VisuMZ[_0xec8a6c(0x67d)][_0xec8a6c(0x869)][_0xec8a6c(0x8b9)]['CmdIconEscape'],_0x3d81e0=_0x33a5db===_0xec8a6c(0x245)?TextManager[_0xec8a6c(0x725)]:_0xec8a6c(0x573)[_0xec8a6c(0x934)](_0xadb930,TextManager['escape']),_0x5e2d48=this['isEscapeCommandEnabled']();this[_0xec8a6c(0x891)](_0x3d81e0,_0xec8a6c(0x725),_0x5e2d48);},Window_PartyCommand[_0x4b2772(0x632)][_0x4b2772(0x94e)]=function(){const _0x2d62db=_0x4b2772;return BattleManager[_0x2d62db(0x386)]();},Window_PartyCommand[_0x4b2772(0x632)]['itemTextAlign']=function(){const _0x1d85d8=_0x4b2772;return VisuMZ[_0x1d85d8(0x67d)][_0x1d85d8(0x869)][_0x1d85d8(0x8b9)][_0x1d85d8(0x6e7)];},Window_PartyCommand[_0x4b2772(0x632)][_0x4b2772(0x1dc)]=function(_0x36cced){const _0x1d62a3=_0x4b2772,_0x5c61d8=this['commandStyleCheck'](_0x36cced);if(_0x5c61d8===_0x1d62a3(0x639))_0x1d62a3(0x652)===_0x1d62a3(0x547)?_0x17298c['BattleCore'][_0x1d62a3(0xa51)][_0x1d62a3(0xb2b)](this):this[_0x1d62a3(0xcde)](_0x36cced);else _0x5c61d8==='icon'?this['drawItemStyleIcon'](_0x36cced):Window_Command[_0x1d62a3(0x632)][_0x1d62a3(0x1dc)][_0x1d62a3(0xb2b)](this,_0x36cced);},Window_PartyCommand[_0x4b2772(0x632)][_0x4b2772(0x5d7)]=function(){const _0x2c2be5=_0x4b2772;return VisuMZ[_0x2c2be5(0x67d)][_0x2c2be5(0x869)]['PartyCmd'][_0x2c2be5(0xc91)];},Window_PartyCommand[_0x4b2772(0x632)][_0x4b2772(0x6c9)]=function(_0x21552b){const _0x257e36=_0x4b2772;if(_0x21552b<0x0)return _0x257e36(0x245);const _0x4612b5=this[_0x257e36(0x5d7)]();if(_0x4612b5!==_0x257e36(0x1e1))return _0x4612b5;else{if(this[_0x257e36(0x6ac)]()>0x0){const _0x2b00f1=this[_0x257e36(0x515)](_0x21552b);if(_0x2b00f1[_0x257e36(0x93d)](/\\I\[(\d+)\]/i)){const _0x161f13=this[_0x257e36(0x216)](_0x21552b),_0x30b39c=this[_0x257e36(0x5c2)](_0x2b00f1)['width'];if(_0x30b39c<=_0x161f13[_0x257e36(0x67b)]){if(_0x257e36(0x602)!=='SQeoe'){if(this['isCertainHit']())return _0xe5b2b7;const _0x4b986b=this[_0x257e36(0x28e)](),_0x1415cd=_0x544f1d;let _0x57c13a=[],_0x23ef1f=[];_0x57c13a[_0x257e36(0x21f)](this[_0x257e36(0x95f)][_0x257e36(0xb30)],this['_armorPenetration'][_0x257e36(0x2e0)]),_0x23ef1f[_0x257e36(0x21f)](this[_0x257e36(0x95f)][_0x257e36(0x777)],this['_armorPenetration'][_0x257e36(0x2e2)]);const _0x2756b1=this[_0x257e36(0x8c3)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x581e8f=this[_0x257e36(0x8c3)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x302d48=this[_0x257e36(0x8c3)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x48fd95=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x57c13a=_0x57c13a[_0x257e36(0xbf3)](_0x1415cd['traitObjects']()[_0x257e36(0x8b4)](_0x382ef0=>_0x382ef0&&_0x382ef0[_0x257e36(0x28a)][_0x257e36(0x93d)](_0x2756b1)?_0x2d982a(_0x5989ef['$1']):0x0)),_0x23ef1f=_0x23ef1f[_0x257e36(0xbf3)](_0x1415cd[_0x257e36(0x3cc)]()[_0x257e36(0x8b4)](_0x4498d2=>_0x4498d2&&_0x4498d2[_0x257e36(0x28a)][_0x257e36(0x93d)](_0x581e8f)?_0xc24052(_0x21812b['$1'])/0x64:0x0)),_0x57c13a=_0x57c13a[_0x257e36(0xbf3)](_0x4b986b[_0x257e36(0x3cc)]()[_0x257e36(0x8b4)](_0x4b5819=>_0x4b5819&&_0x4b5819[_0x257e36(0x28a)][_0x257e36(0x93d)](_0x302d48)?_0xed521f(_0x4b7061['$1']):0x0)),_0x23ef1f=_0x23ef1f[_0x257e36(0xbf3)](_0x4b986b[_0x257e36(0x3cc)]()['map'](_0x270a72=>_0x270a72&&_0x270a72[_0x257e36(0x28a)][_0x257e36(0x93d)](_0x48fd95)?_0x480002(_0x323ff8['$1'])/0x64:0x0)),this[_0x257e36(0x30a)]()[_0x257e36(0x28a)][_0x257e36(0x93d)](_0x302d48)&&_0x57c13a[_0x257e36(0x21f)](_0x4cddc6(_0x222c70['$1'])),this[_0x257e36(0x30a)]()[_0x257e36(0x28a)]['match'](_0x48fd95)&&_0x23ef1f['push'](_0x210007(_0x268aed['$1'])),_0x19babb=_0x57c13a[_0x257e36(0x7b8)]((_0x42f39d,_0x2ab967)=>_0x42f39d-_0x2ab967,_0x3a21bc),_0x397421>0x0&&(_0x4e52c6=_0x23ef1f[_0x257e36(0x7b8)]((_0x36ad80,_0x13cef0)=>_0x36ad80*(0x1-_0x13cef0),_0x4be599)),_0x37d796;}else return _0x257e36(0x639);}else return _0x257e36(0xa4a);}}}return _0x257e36(0x245);},Window_PartyCommand[_0x4b2772(0x632)]['drawItemStyleIconText']=function(_0xca24f6){const _0x598b23=_0x4b2772,_0x3fcb1f=this[_0x598b23(0x216)](_0xca24f6),_0x335b31=this[_0x598b23(0x515)](_0xca24f6),_0x108ddb=this[_0x598b23(0x5c2)](_0x335b31)[_0x598b23(0x67b)];this[_0x598b23(0xbcf)](this[_0x598b23(0xb78)](_0xca24f6));const _0x2b4016=this[_0x598b23(0x7f0)]();if(_0x2b4016===_0x598b23(0x98e))this[_0x598b23(0x3c3)](_0x335b31,_0x3fcb1f['x']+_0x3fcb1f[_0x598b23(0x67b)]-_0x108ddb,_0x3fcb1f['y'],_0x108ddb);else{if(_0x2b4016===_0x598b23(0x355)){const _0x4f1dc5=_0x3fcb1f['x']+Math['floor']((_0x3fcb1f[_0x598b23(0x67b)]-_0x108ddb)/0x2);this[_0x598b23(0x3c3)](_0x335b31,_0x4f1dc5,_0x3fcb1f['y'],_0x108ddb);}else this[_0x598b23(0x3c3)](_0x335b31,_0x3fcb1f['x'],_0x3fcb1f['y'],_0x108ddb);}},Window_PartyCommand['prototype'][_0x4b2772(0x6ec)]=function(_0x4dbff2){const _0xdea809=_0x4b2772;this[_0xdea809(0x515)](_0x4dbff2)['match'](/\\I\[(\d+)\]/i);const _0x36982a=Number(RegExp['$1'])||0x0,_0x400e98=this['itemLineRect'](_0x4dbff2),_0x43a59d=_0x400e98['x']+Math[_0xdea809(0x805)]((_0x400e98[_0xdea809(0x67b)]-ImageManager['iconWidth'])/0x2),_0x2eb20d=_0x400e98['y']+(_0x400e98['height']-ImageManager[_0xdea809(0x65e)])/0x2;this[_0xdea809(0xbce)](_0x36982a,_0x43a59d,_0x2eb20d);},Window_PartyCommand[_0x4b2772(0x632)][_0x4b2772(0x6f7)]=function(){},Window_PartyCommand[_0x4b2772(0x632)][_0x4b2772(0x849)]=function(){const _0x4523f2=_0x4b2772;Window_Command['prototype'][_0x4523f2(0x849)][_0x4523f2(0xb2b)](this);const _0x3832f8=this[_0x4523f2(0x421)]();_0x3832f8===_0x4523f2(0x8d1)&&(_0x4523f2(0xb8d)==='MCdkb'?this['onHomeMoveEnd']():this[_0x4523f2(0x29e)]());},Window_PartyCommand[_0x4b2772(0x632)][_0x4b2772(0x421)]=function(){const _0x17e670=_0x4b2772;if(this[_0x17e670(0xb26)])return this['_battleLayoutStyle'];return this[_0x17e670(0xb26)]=SceneManager[_0x17e670(0x21e)][_0x17e670(0x421)](),this['_battleLayoutStyle'];},Window_PartyCommand['prototype'][_0x4b2772(0x2cc)]=function(){const _0x8d283=_0x4b2772,_0x38d4de=VisuMZ['BattleCore'][_0x8d283(0x869)][_0x8d283(0x8b9)],_0x559df1=this[_0x8d283(0x866)]();switch(_0x559df1){case _0x8d283(0xadd):this['_helpWindow'][_0x8d283(0x95c)](_0x38d4de[_0x8d283(0xc29)]);break;case'autoBattle':this[_0x8d283(0x3f9)]['setText'](_0x38d4de['HelpAutoBattle']);break;case _0x8d283(0x592):this[_0x8d283(0x3f9)][_0x8d283(0x95c)](_0x38d4de['HelpOptions']);break;case _0x8d283(0x725):this['_helpWindow'][_0x8d283(0x95c)](_0x38d4de[_0x8d283(0xac6)]);break;default:this[_0x8d283(0x3f9)][_0x8d283(0x95c)]('');break;}},VisuMZ[_0x4b2772(0x67d)]['Window_ActorCommand_initialize']=Window_ActorCommand[_0x4b2772(0x632)][_0x4b2772(0xb0d)],Window_ActorCommand['prototype'][_0x4b2772(0xb0d)]=function(_0x5dd872){const _0x5ea828=_0x4b2772;VisuMZ[_0x5ea828(0x67d)][_0x5ea828(0x729)][_0x5ea828(0xb2b)](this,_0x5dd872),this[_0x5ea828(0x4ad)](_0x5dd872);},Window_ActorCommand[_0x4b2772(0x632)][_0x4b2772(0x4ad)]=function(_0x4c693d){const _0x267e46=_0x4b2772,_0x3a3684=new Rectangle(0x0,0x0,_0x4c693d['width'],_0x4c693d[_0x267e46(0x4c3)]);this[_0x267e46(0xc39)]=new Window_Base(_0x3a3684),this[_0x267e46(0xc39)][_0x267e46(0xacf)]=0x0,this[_0x267e46(0x340)](this['_commandNameWindow']),this[_0x267e46(0xc2d)]();},Window_ActorCommand[_0x4b2772(0x632)][_0x4b2772(0x820)]=function(){const _0x133053=_0x4b2772;Window_Command[_0x133053(0x632)][_0x133053(0x820)]['call'](this);if(this['_commandNameWindow'])this[_0x133053(0xc2d)]();},Window_ActorCommand[_0x4b2772(0x632)][_0x4b2772(0xc2d)]=function(){const _0x49f674=_0x4b2772,_0x5d8e67=this['_commandNameWindow'];_0x5d8e67[_0x49f674(0x2fb)][_0x49f674(0x4d6)]();const _0x48b77e=this[_0x49f674(0x6c9)](this[_0x49f674(0x89a)]());if(_0x48b77e===_0x49f674(0xa4a)&&this[_0x49f674(0x6ac)]()>0x0){const _0x1273f0=this[_0x49f674(0x216)](this[_0x49f674(0x89a)]());let _0x281ef6=this[_0x49f674(0x515)](this[_0x49f674(0x89a)]());_0x281ef6=_0x281ef6[_0x49f674(0x970)](/\\I\[(\d+)\]/gi,''),_0x5d8e67['resetFontSettings'](),this[_0x49f674(0x529)](_0x281ef6,_0x1273f0),this['commandNameWindowDrawText'](_0x281ef6,_0x1273f0),this[_0x49f674(0x7d0)](_0x281ef6,_0x1273f0);}},Window_ActorCommand[_0x4b2772(0x632)][_0x4b2772(0x529)]=function(_0x35ee55,_0x503857){},Window_ActorCommand[_0x4b2772(0x632)]['commandNameWindowDrawText']=function(_0x36f07f,_0x151c84){const _0x12213c=_0x4b2772,_0x2068b8=this[_0x12213c(0xc39)];_0x2068b8[_0x12213c(0x86e)](_0x36f07f,0x0,_0x151c84['y'],_0x2068b8[_0x12213c(0xb52)],_0x12213c(0x355));},Window_ActorCommand[_0x4b2772(0x632)][_0x4b2772(0x7d0)]=function(_0x4bddd1,_0x128ee2){const _0x2d861a=_0x4b2772,_0x24550b=this[_0x2d861a(0xc39)],_0x168148=$gameSystem[_0x2d861a(0xc56)](),_0x393a8f=_0x128ee2['x']+Math[_0x2d861a(0x805)](_0x128ee2[_0x2d861a(0x67b)]/0x2)+_0x168148;_0x24550b['x']=_0x24550b[_0x2d861a(0x67b)]/-0x2+_0x393a8f,_0x24550b['y']=Math['floor'](_0x128ee2[_0x2d861a(0x4c3)]/0x2);},Window_ActorCommand['prototype'][_0x4b2772(0x37a)]=function(){const _0x3516a5=_0x4b2772;if(!this[_0x3516a5(0x8ee)])return;const _0x1a0a2a=this[_0x3516a5(0x8ee)][_0x3516a5(0x287)]();for(const _0x4f47a4 of _0x1a0a2a){_0x3516a5(0x4d5)===_0x3516a5(0x4d5)?this[_0x3516a5(0x7e7)](_0x4f47a4['toUpperCase']()[_0x3516a5(0x75a)]()):_0x246745+=_0x3f1152;}},Window_ActorCommand[_0x4b2772(0x632)][_0x4b2772(0x7e7)]=function(_0x335213){const _0x22fb9d=_0x4b2772;_0x335213==='ATTACK'&&this[_0x22fb9d(0x43d)]();['STYPES',_0x22fb9d(0x333)][_0x22fb9d(0x41a)](_0x335213)&&this[_0x22fb9d(0xc86)]();_0x335213==='GUARD'&&(_0x22fb9d(0x7a3)!==_0x22fb9d(0x7a3)?this['placeGauge'](_0x1c3499,'tp',_0x28089d+(_0x36bda3['TpGaugeOffsetX']||0x0),_0x1845f1+this[_0x22fb9d(0x5e9)]()*0x2+(_0x278345[_0x22fb9d(0x49f)]||0x0)):this[_0x22fb9d(0xb36)]());if(_0x335213===_0x22fb9d(0x819)){if(_0x22fb9d(0x580)!==_0x22fb9d(0x580)){const _0x29e57b=new _0x442d60(_0x1224af);this[_0x22fb9d(0x3ff)][_0x22fb9d(0x340)](_0x29e57b);}else this['addItemCommand']();}if(_0x335213==='ESCAPE'){if(_0x22fb9d(0xc07)===_0x22fb9d(0xc07))this['addEscapeCommand']();else{if(this[_0x22fb9d(0x203)][_0x22fb9d(0x341)]())return;this['finishActorInput'](),this[_0x22fb9d(0xa5a)](),!this[_0x22fb9d(0x4f1)]&&!this[_0x22fb9d(0x203)]&&_0x269ea2[_0x22fb9d(0x21e)]['updateBattleProcess']();}}_0x335213===_0x22fb9d(0x228)&&this[_0x22fb9d(0xaff)]();if(_0x335213[_0x22fb9d(0x93d)](/STYPE: (\d+)/i)){const _0x5b41a6=Number(RegExp['$1']);this[_0x22fb9d(0x6b3)](_0x5b41a6);}else{if(_0x335213[_0x22fb9d(0x93d)](/STYPE: (.*)/i)){const _0x45ba26=DataManager[_0x22fb9d(0x311)](RegExp['$1']);this[_0x22fb9d(0x6b3)](_0x45ba26);}}_0x335213==='ALL\x20SKILLS'&&this[_0x22fb9d(0xb16)]();if(_0x335213[_0x22fb9d(0x93d)](/SKILL: (\d+)/i)){if(_0x22fb9d(0x478)!==_0x22fb9d(0x478))_0x209742=_0x15e0dc;else{const _0x56ca30=Number(RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x56ca30]);}}else{if(_0x335213[_0x22fb9d(0x93d)](/SKILL: (.*)/i)){if(_0x22fb9d(0xb09)===_0x22fb9d(0x929))this[_0x22fb9d(0x6c0)][_0x22fb9d(0x21f)](_0x22fb9d(0x60b),_0xfb500b[_0x22fb9d(0xaf0)]['format'](_0x479020)),this[_0x22fb9d(0x6c0)][_0x22fb9d(0x21f)](_0x22fb9d(0x5c5)),_0x2d3079=!![];else{const _0x28700f=DataManager[_0x22fb9d(0x365)](RegExp['$1']);this[_0x22fb9d(0x4ef)]($dataSkills[_0x28700f]);}}}if(_0x335213==='PARTY'&&Imported[_0x22fb9d(0x370)]){if(_0x22fb9d(0x5b2)!==_0x22fb9d(0x6c2))this[_0x22fb9d(0x8c5)]();else return _0x44eca1(_0x636524['$1']);}if(['COMBATLOG',_0x22fb9d(0x622)][_0x22fb9d(0x41a)](_0x335213)&&Imported[_0x22fb9d(0x54d)]){if(_0x22fb9d(0x294)===_0x22fb9d(0x294))this[_0x22fb9d(0x85c)]();else{const _0x328a74=this[_0x22fb9d(0xc39)],_0x18d5db=_0xbbfc82[_0x22fb9d(0xc56)](),_0x394ac2=_0x3a2787['x']+_0x3ab655[_0x22fb9d(0x805)](_0x247d94[_0x22fb9d(0x67b)]/0x2)+_0x18d5db;_0x328a74['x']=_0x328a74[_0x22fb9d(0x67b)]/-0x2+_0x394ac2,_0x328a74['y']=_0x20f965['floor'](_0x173337[_0x22fb9d(0x4c3)]/0x2);}}_0x335213===_0x22fb9d(0x9e9)&&Imported['VisuMZ_2_WeaponSwapSystem']&&(_0x22fb9d(0xa9b)!==_0x22fb9d(0xa9b)?(this[_0x22fb9d(0xc20)]=this['x'],this[_0x22fb9d(0xaba)]=this['y'],this[_0x22fb9d(0x9b7)](),this[_0x22fb9d(0xb46)](),this['x']+=this['extraPositionX'](),this['y']+=this['extraPositionY'](),this['y']+=this[_0x22fb9d(0x574)](),this['x']=_0x598f18[_0x22fb9d(0x805)](this['x']),this['y']=_0x5ba1a8['floor'](this['y'])):this[_0x22fb9d(0xc57)](!![]));},Window_ActorCommand[_0x4b2772(0x632)][_0x4b2772(0x43d)]=function(){const _0x24a442=_0x4b2772,_0x17d171=$dataSkills[this[_0x24a442(0x8ee)]['attackSkillId']()];if(!_0x17d171)return;if(!this[_0x24a442(0xa38)](_0x17d171))return;const _0x498522=this[_0x24a442(0x5d7)](),_0x285b34=DataManager[_0x24a442(0xc55)](_0x17d171),_0x5975ee=DataManager[_0x24a442(0x388)](_0x17d171),_0x2f122c=_0x498522===_0x24a442(0x245)?_0x285b34:'\x5cI[%1]%2'[_0x24a442(0x934)](_0x5975ee,_0x285b34);this[_0x24a442(0x891)](_0x2f122c,'attack',this[_0x24a442(0x8ee)][_0x24a442(0x7e5)]());},Window_ActorCommand['prototype']['addGuardCommand']=function(){const _0x59df87=_0x4b2772,_0x35b1de=$dataSkills[this[_0x59df87(0x8ee)]['guardSkillId']()];if(!_0x35b1de)return;if(!this['canAddSkillCommand'](_0x35b1de))return;const _0x305ad4=this[_0x59df87(0x5d7)](),_0x3baee1=DataManager[_0x59df87(0xc55)](_0x35b1de),_0x17c744=DataManager[_0x59df87(0x388)](_0x35b1de),_0x43681c=_0x305ad4==='text'?_0x3baee1:_0x59df87(0x573)[_0x59df87(0x934)](_0x17c744,_0x3baee1);this[_0x59df87(0x891)](_0x43681c,_0x59df87(0x895),this['_actor'][_0x59df87(0x6bb)]());},Window_ActorCommand[_0x4b2772(0x632)][_0x4b2772(0x3c2)]=function(){const _0x2c9e98=_0x4b2772,_0x536b5d=this['commandStyle'](),_0x2223cb=VisuMZ['BattleCore'][_0x2c9e98(0x869)][_0x2c9e98(0xc03)][_0x2c9e98(0x6c8)],_0xc8a19=_0x536b5d===_0x2c9e98(0x245)?TextManager[_0x2c9e98(0x30a)]:_0x2c9e98(0x573)[_0x2c9e98(0x934)](_0x2223cb,TextManager['item']),_0x3902ad=this[_0x2c9e98(0x9c2)]();this[_0x2c9e98(0x891)](_0xc8a19,'item',_0x3902ad);},Window_ActorCommand[_0x4b2772(0x632)][_0x4b2772(0x9c2)]=function(){const _0x36e271=_0x4b2772;return this[_0x36e271(0x8ee)]&&this['_actor'][_0x36e271(0x1d4)]();},Window_ActorCommand[_0x4b2772(0x632)][_0x4b2772(0xc86)]=function(){const _0x288e8d=_0x4b2772,_0x130e9c=this[_0x288e8d(0x8ee)]['skillTypes']();for(const _0x40cf08 of _0x130e9c){if('FCVPQ'!=='zvqvp')this[_0x288e8d(0x6b3)](_0x40cf08);else{if(this[_0x288e8d(0xbb7)]<=0x0)return;if(!this[_0x288e8d(0x4eb)])return;const _0x5edac4=this[_0x288e8d(0xbb7)],_0x584609=this[_0x288e8d(0xa96)],_0x4fe552=this[_0x288e8d(0x9a8)],_0x5923e6=this[_0x288e8d(0x4eb)];_0x595ca5[_0x288e8d(0x2d5)]?(_0x5923e6[_0x288e8d(0xcd4)]['x']=this[_0x288e8d(0xa94)](_0x5923e6['skew']['x'],this['_targetSkewX'],_0x5edac4,_0x584609,_0x4fe552),_0x5923e6[_0x288e8d(0xcd4)]['y']=this[_0x288e8d(0xa94)](_0x5923e6[_0x288e8d(0xcd4)]['y'],this[_0x288e8d(0xad5)],_0x5edac4,_0x584609,_0x4fe552)):(_0x5923e6[_0x288e8d(0xcd4)]['x']=(_0x5923e6[_0x288e8d(0xcd4)]['x']*(_0x5edac4-0x1)+this['_targetSkewX'])/_0x5edac4,_0x5923e6[_0x288e8d(0xcd4)]['y']=(_0x5923e6['skew']['y']*(_0x5edac4-0x1)+this[_0x288e8d(0xad5)])/_0x5edac4);this[_0x288e8d(0xbb7)]--;if(this[_0x288e8d(0xbb7)]<=0x0)this['onSkewEnd']();}}},Window_ActorCommand[_0x4b2772(0x632)][_0x4b2772(0x6b3)]=function(_0x2d1d2c){const _0xef5b91=_0x4b2772;let _0x451af5=$dataSystem[_0xef5b91(0x99d)][_0x2d1d2c];if(!_0x451af5)return;let _0x3b208b=_0x451af5;const _0x53c79f=this[_0xef5b91(0x5d7)]();if(_0x53c79f===_0xef5b91(0x245)){if('qFVTS'!==_0xef5b91(0x50a)){if(!_0x2af485[_0xef5b91(0x885)]())return;if(!_0x2a891a[_0xef5b91(0x795)])return;_0x56bac0[_0xef5b91(0x72d)](_0x215b38,_0x82f2f6);const _0x16c295=_0x2f93b8['_action'],_0x53c3c7=_0x4e10ed[_0xef5b91(0xcda)];if(!_0x16c295)return;_0x16c295[_0xef5b91(0x58a)]=_0x53c3c7;}else _0x3b208b=_0x3b208b['replace'](/\x1I\[(\d+)\]/gi,''),_0x3b208b=_0x3b208b['replace'](/\\I\[(\d+)\]/gi,'');}else{if(!_0x451af5['match'](/\\I\[(\d+)\]/i)){if(_0xef5b91(0xae0)==='SdFxZ'){const _0x4e9d54=Imported['VisuMZ_1_SkillsStatesCore']?VisuMZ[_0xef5b91(0x97e)]['Settings']['Skills']:VisuMZ[_0xef5b91(0x67d)][_0xef5b91(0x869)][_0xef5b91(0xc03)],_0x59f5ad=$dataSystem[_0xef5b91(0x550)]['includes'](_0x2d1d2c),_0x321e5f=_0x59f5ad?_0x4e9d54[_0xef5b91(0x94f)]:_0x4e9d54['IconStypeNorm'];_0x3b208b='\x5cI[%1]%2'[_0xef5b91(0x934)](_0x321e5f,_0x451af5);}else this[_0xef5b91(0xb98)][_0xef5b91(0x21f)](_0x5da14e),this[_0xef5b91(0xa58)](),this['callNextMethod']();}}this[_0xef5b91(0x891)](_0x3b208b,_0xef5b91(0x6b8),!![],_0x2d1d2c);},Window_ActorCommand[_0x4b2772(0x632)][_0x4b2772(0xb16)]=function(){const _0x48cb88=_0x4b2772,_0x3d89f7=this[_0x48cb88(0x8ee)][_0x48cb88(0x99d)](),_0x2d66bf=this[_0x48cb88(0x8ee)]['skills']();for(const _0x2f4e03 of _0x2d66bf){if(!_0x2f4e03)continue;if(Imported['VisuMZ_1_SkillsStatesCore']){if(this[_0x48cb88(0x957)](_0x2f4e03))continue;if(this[_0x48cb88(0x5aa)](_0x2f4e03))continue;}else{if(!_0x3d89f7[_0x48cb88(0x41a)](_0x2f4e03[_0x48cb88(0x9fe)])){if(_0x48cb88(0x82c)!==_0x48cb88(0x82c))_0x18c64c[_0x48cb88(0x4f1)]['performActionEnd']();else continue;}}this['addSingleSkillCommand'](_0x2f4e03);}},Window_ActorCommand['prototype'][_0x4b2772(0x957)]=function(_0x38f4ae){const _0x5ce3a5=_0x4b2772,_0x44e730=this[_0x5ce3a5(0x8ee)][_0x5ce3a5(0x99d)](),_0x521c26=_0x44e730[_0x5ce3a5(0xb8c)](_0x5ca7e2=>DataManager[_0x5ce3a5(0xa17)](_0x38f4ae)[_0x5ce3a5(0x41a)](_0x5ca7e2));return _0x521c26[_0x5ce3a5(0x1e9)]<=0x0;},Window_ActorCommand[_0x4b2772(0x632)][_0x4b2772(0x5aa)]=function(_0x2ecf5a){const _0x522124=_0x4b2772;if(Imported[_0x522124(0x2c6)]){if(_0x522124(0x980)!==_0x522124(0x980)){_0x15b1b7[_0x522124(0x67d)][_0x522124(0x3c4)][_0x522124(0xb2b)](this),this[_0x522124(0xc80)]();if(this[_0x522124(0x63a)]===_0x18326b)this[_0x522124(0x2e6)]();this[_0x522124(0x575)]();}else{if(VisuMZ['SkillsStatesCore']['version']>=1.24){if(this['_actor']){if(_0x522124(0xad0)!=='xXeLC')_0x3a33f4['addLoadListener'](this[_0x522124(0x814)][_0x522124(0x624)](this,_0x587a61,_0x432cde,_0x7dc335,_0x32bf96));else{if(!VisuMZ[_0x522124(0x97e)][_0x522124(0x975)](this[_0x522124(0x8ee)],_0x2ecf5a))return!![];if(!VisuMZ['SkillsStatesCore'][_0x522124(0x532)](this['_actor'],_0x2ecf5a))return!![];if(!VisuMZ['SkillsStatesCore'][_0x522124(0x4f3)](this[_0x522124(0x8ee)],_0x2ecf5a))return!![];}}}else{if(_0x522124(0x6e6)===_0x522124(0x84e)){const _0x10a1f1=_0x2a0713[_0x522124(0x632)][_0x522124(0x421)]();[_0x522124(0x523),_0x522124(0xc64),'portrait',_0x522124(0x8d1)][_0x522124(0x41a)](_0x10a1f1)&&(this[_0x522124(0xacf)]=0x0);}else{if(!Window_SkillList[_0x522124(0x632)][_0x522124(0x666)]['call'](this,_0x2ecf5a))return!![];if(!Window_SkillList[_0x522124(0x632)]['checkShowHideSwitchNotetags'][_0x522124(0xb2b)](this,_0x2ecf5a))return!![];if(!Window_SkillList[_0x522124(0x632)][_0x522124(0x9c7)][_0x522124(0xb2b)](this,_0x2ecf5a))return!![];}}}}return![];},Window_ActorCommand[_0x4b2772(0x632)]['addSingleSkillCommand']=function(_0x4d086d){const _0x3bbe3d=_0x4b2772;if(!_0x4d086d)return;if(!this[_0x3bbe3d(0xa38)](_0x4d086d))return;const _0x478dae=this[_0x3bbe3d(0x5d7)](),_0x53e974=DataManager[_0x3bbe3d(0xc55)](_0x4d086d),_0x5c1078=DataManager[_0x3bbe3d(0x388)](_0x4d086d),_0x5326b4=_0x478dae===_0x3bbe3d(0x245)?_0x53e974:_0x3bbe3d(0x573)[_0x3bbe3d(0x934)](_0x5c1078,_0x53e974),_0x82582e=this[_0x3bbe3d(0x8ee)][_0x3bbe3d(0xa95)](_0x4d086d);this[_0x3bbe3d(0x891)](_0x5326b4,_0x3bbe3d(0xa7d),_0x82582e,_0x4d086d['id']);},Window_ActorCommand[_0x4b2772(0x632)][_0x4b2772(0xa38)]=function(_0x5a88f4){const _0x5affab=_0x4b2772,_0x2f39b=_0x5a88f4[_0x5affab(0x28a)];if(_0x2f39b['match'](/<COMMAND REQUIRE LEARN>/i)){if(_0x5affab(0x8b6)!==_0x5affab(0x8b6)){const _0x3f10be=this[_0x5affab(0x57d)]&&this[_0x5affab(0x57d)][_0x5affab(0x6a9)]();this['_flipScaleX']=(_0x3f10be?-0x1:0x1)*_0x5f3dd7[_0x5affab(0x9e3)](this[_0x5affab(0x8eb)]['x']);}else{if(!this[_0x5affab(0x8ee)]['isLearnedSkill'](_0x5a88f4['id']))return![];}}if(_0x2f39b[_0x5affab(0x93d)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x5affab(0x8ee)][_0x5affab(0x447)](_0x5a88f4['id']))return![];}const _0x1d61fb=VisuMZ[_0x5affab(0x67d)][_0x5affab(0x623)](_0x5a88f4,_0x5affab(0x9b9));if(VisuMZ['BattleCore']['JS'][_0x1d61fb]){if(!VisuMZ[_0x5affab(0x67d)]['JS'][_0x1d61fb]['call'](this,this['_actor'],_0x5a88f4))return![];}return VisuMZ[_0x5affab(0x67d)]['CheckSkillCommandShowSwitches'](_0x5a88f4);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xc11)]=function(_0x50d756){const _0x23e578=_0x4b2772,_0x41b049=_0x50d756[_0x23e578(0x28a)];if(_0x41b049[_0x23e578(0x93d)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x23e578(0x7af)!==_0x23e578(0x7af))return _0x273711[_0x23e578(0x668)]()['filter'](_0x4bc397=>_0x4bc397!==_0x47f99b);else{const _0x2d686f=JSON[_0x23e578(0x498)]('['+RegExp['$1'][_0x23e578(0x93d)](/\d+/g)+']');for(const _0x12268d of _0x2d686f){if('ygdYR'!==_0x23e578(0x1f6)){if(!$gameSwitches[_0x23e578(0x791)](_0x12268d))return![];}else this[_0x23e578(0xc18)]();}return!![];}}if(_0x41b049[_0x23e578(0x93d)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x23e578(0x8b3)==='xnTdy')_0xcd91b3['BattleCore'][_0x23e578(0x501)][_0x23e578(0xb2b)](this);else{const _0x4bf1e0=JSON['parse']('['+RegExp['$1'][_0x23e578(0x93d)](/\d+/g)+']');for(const _0x153871 of _0x4bf1e0){if(!$gameSwitches[_0x23e578(0x791)](_0x153871))return![];}return!![];}}if(_0x41b049['match'](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x23e578(0x66f)===_0x23e578(0x7b2)){this[_0x23e578(0x2fb)][_0x23e578(0x4d6)]();const _0x5e715f=_0x113bd6[_0x23e578(0x67d)]['Settings'][_0x23e578(0x985)]['AutoBattleMsg'],_0x40c6ee=_0x5e715f[_0x23e578(0x934)](this[_0x23e578(0x69b)](),this[_0x23e578(0x85f)]()),_0xded727=this[_0x23e578(0x5c2)](_0x40c6ee)[_0x23e578(0x67b)],_0x1f927f=_0x4c0f22[_0x23e578(0x805)]((this['innerWidth']-_0xded727)/0x2);this[_0x23e578(0x3c3)](_0x40c6ee,_0x1f927f,0x0,_0xded727);}else{const _0x1edfb0=JSON[_0x23e578(0x498)]('['+RegExp['$1'][_0x23e578(0x93d)](/\d+/g)+']');for(const _0x1e8a4e of _0x1edfb0){if($gameSwitches['value'](_0x1e8a4e))return!![];}return![];}}if(_0x41b049['match'](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x4a1085=JSON[_0x23e578(0x498)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0xaeb8c of _0x4a1085){if(_0x23e578(0x9ae)===_0x23e578(0x9ae)){if(!$gameSwitches[_0x23e578(0x791)](_0xaeb8c))return!![];}else _0x1bf649[_0x23e578(0x67d)][_0x23e578(0x646)]['call'](this);}return![];}if(_0x41b049[_0x23e578(0x93d)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x22fc6b=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x2cb3af of _0x22fc6b){if(!$gameSwitches[_0x23e578(0x791)](_0x2cb3af))return!![];}return![];}if(_0x41b049[_0x23e578(0x93d)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x23e578(0xa35)!==_0x23e578(0xa35)){let _0x2b890f=_0x23e578(0x45f);if(this[_0x23e578(0x7c9)](_0x2b890f))return this[_0x23e578(0x475)][_0x2b890f];return this[_0x23e578(0x475)][_0x2b890f]=this['createBattleUIOffsetX'](this[_0x23e578(0x79c)]()),this[_0x23e578(0x475)][_0x2b890f];}else{const _0x366211=JSON[_0x23e578(0x498)]('['+RegExp['$1'][_0x23e578(0x93d)](/\d+/g)+']');for(const _0x38b110 of _0x366211){if($gameSwitches[_0x23e578(0x791)](_0x38b110))return![];}return!![];}}return!![];},Window_ActorCommand['prototype'][_0x4b2772(0x7ac)]=function(){const _0x2ef76d=_0x4b2772,_0x4cf62c=this['commandStyle'](),_0x1c3a4d=VisuMZ[_0x2ef76d(0x67d)][_0x2ef76d(0x869)][_0x2ef76d(0x8b9)][_0x2ef76d(0xc15)],_0x484b94=_0x4cf62c==='text'?TextManager[_0x2ef76d(0x725)]:'\x5cI[%1]%2'[_0x2ef76d(0x934)](_0x1c3a4d,TextManager[_0x2ef76d(0x725)]),_0x4e65f1=this[_0x2ef76d(0x94e)]();this[_0x2ef76d(0x891)](_0x484b94,_0x2ef76d(0x725),_0x4e65f1);},Window_ActorCommand[_0x4b2772(0x632)][_0x4b2772(0x94e)]=function(){const _0x13367d=_0x4b2772;return BattleManager[_0x13367d(0x386)]();},Window_ActorCommand[_0x4b2772(0x632)][_0x4b2772(0xaff)]=function(){const _0x167c9a=_0x4b2772,_0x12f429=this['commandStyle'](),_0x27e19d=VisuMZ[_0x167c9a(0x67d)][_0x167c9a(0x869)][_0x167c9a(0x8b9)][_0x167c9a(0x7bc)],_0xd5eee=_0x12f429===_0x167c9a(0x245)?TextManager[_0x167c9a(0x481)]:_0x167c9a(0x573)['format'](_0x27e19d,TextManager[_0x167c9a(0x481)]),_0x4eb607=this[_0x167c9a(0xa92)]();this[_0x167c9a(0x891)](_0xd5eee,_0x167c9a(0x481),_0x4eb607);},Window_ActorCommand[_0x4b2772(0x632)][_0x4b2772(0xa92)]=function(){return!![];},Window_ActorCommand['prototype'][_0x4b2772(0x7f0)]=function(){const _0x1f5cd1=_0x4b2772;return VisuMZ['BattleCore']['Settings'][_0x1f5cd1(0xc03)]['CmdTextAlign'];},Window_ActorCommand['prototype'][_0x4b2772(0x1dc)]=function(_0x5daee1){const _0x56ba20=_0x4b2772,_0x2ab869=this[_0x56ba20(0x6c9)](_0x5daee1);if(_0x2ab869===_0x56ba20(0x639))this[_0x56ba20(0xcde)](_0x5daee1);else{if(_0x2ab869===_0x56ba20(0xa4a)){if(_0x56ba20(0x22a)===_0x56ba20(0x588)){const _0x598e2f=_0x4b0470[_0x56ba20(0x750)],_0x1ed0f4=_0x56ba20(0xc4e);this[_0x56ba20(0x891)](_0x598e2f,_0x1ed0f4);}else this[_0x56ba20(0x6ec)](_0x5daee1);}else{if('cgWWt'!==_0x56ba20(0xbe9))return _0x15cd15['isSceneBattle']()?(_0x312b95[_0x56ba20(0x21e)]['_spriteset']['changeBattlebacks'](_0x566338[0x0],_0x2b3dd9[0x1]),!![]):_0x1affb2[_0x56ba20(0x67d)][_0x56ba20(0x24c)][_0x56ba20(0xb2b)](this,_0x2dfb88);else Window_Command['prototype'][_0x56ba20(0x1dc)][_0x56ba20(0xb2b)](this,_0x5daee1);}}this[_0x56ba20(0x757)](_0x5daee1);},Window_ActorCommand[_0x4b2772(0x632)]['commandStyle']=function(){const _0x28e28e=_0x4b2772;return VisuMZ['BattleCore'][_0x28e28e(0x869)][_0x28e28e(0xc03)][_0x28e28e(0xc91)];},Window_ActorCommand[_0x4b2772(0x632)][_0x4b2772(0x6c9)]=function(_0x2730b4){const _0x4c7b8e=_0x4b2772;if(_0x2730b4<0x0)return'text';const _0x431b78=this[_0x4c7b8e(0x5d7)]();if(_0x431b78!=='auto')return _0x431b78;else{if(this[_0x4c7b8e(0x6ac)]()>0x0){const _0x51e48a=this[_0x4c7b8e(0x515)](_0x2730b4);if(_0x51e48a[_0x4c7b8e(0x93d)](/\\I\[(\d+)\]/i)){const _0x4a6419=this[_0x4c7b8e(0x216)](_0x2730b4),_0x9dae74=this[_0x4c7b8e(0x5c2)](_0x51e48a)[_0x4c7b8e(0x67b)];return _0x9dae74<=_0x4a6419[_0x4c7b8e(0x67b)]?_0x4c7b8e(0x639):'icon';}}}return _0x4c7b8e(0x245);},Window_ActorCommand[_0x4b2772(0x632)][_0x4b2772(0xcde)]=function(_0x35a776){const _0x40c18b=_0x4b2772,_0x530ddf=this[_0x40c18b(0x216)](_0x35a776),_0x1c25ef=this[_0x40c18b(0x515)](_0x35a776),_0x69cd15=this['textSizeEx'](_0x1c25ef)[_0x40c18b(0x67b)];this[_0x40c18b(0xbcf)](this[_0x40c18b(0xb78)](_0x35a776));const _0x560278=this[_0x40c18b(0x7f0)]();if(_0x560278==='right')this['drawTextEx'](_0x1c25ef,_0x530ddf['x']+_0x530ddf[_0x40c18b(0x67b)]-_0x69cd15,_0x530ddf['y'],_0x69cd15);else{if(_0x560278===_0x40c18b(0x355)){const _0x2864f0=_0x530ddf['x']+Math[_0x40c18b(0x805)]((_0x530ddf['width']-_0x69cd15)/0x2);this[_0x40c18b(0x3c3)](_0x1c25ef,_0x2864f0,_0x530ddf['y'],_0x69cd15);}else this['drawTextEx'](_0x1c25ef,_0x530ddf['x'],_0x530ddf['y'],_0x69cd15);}},Window_ActorCommand[_0x4b2772(0x632)][_0x4b2772(0x6ec)]=function(_0xe175fd){const _0x397794=_0x4b2772;this['commandName'](_0xe175fd)[_0x397794(0x93d)](/\\I\[(\d+)\]/i);const _0xb5d8a9=Number(RegExp['$1'])||0x0,_0x367352=this[_0x397794(0x216)](_0xe175fd),_0x48915a=_0x367352['x']+Math[_0x397794(0x805)]((_0x367352[_0x397794(0x67b)]-ImageManager['iconWidth'])/0x2),_0x400add=_0x367352['y']+(_0x367352['height']-ImageManager[_0x397794(0x65e)])/0x2;this[_0x397794(0xbce)](_0xb5d8a9,_0x48915a,_0x400add);},Window_ActorCommand['prototype'][_0x4b2772(0x757)]=function(_0xca9eeb){const _0x5a96e5=_0x4b2772;if(!(VisuMZ['BattleCore'][_0x5a96e5(0x869)][_0x5a96e5(0xc03)][_0x5a96e5(0x250)]??!![]))return;const _0x539bc8=this[_0x5a96e5(0x84c)](_0xca9eeb);if(![_0x5a96e5(0x2fa),_0x5a96e5(0x895),'singleSkill'][_0x5a96e5(0x41a)](_0x539bc8))return;const _0x1422c8=this[_0x5a96e5(0x216)](_0xca9eeb);let _0x91057d=null;if(_0x539bc8===_0x5a96e5(0x2fa)){if(_0x5a96e5(0x237)!==_0x5a96e5(0x237))return this[_0x5a96e5(0xc17)]?this['parent'][_0x5a96e5(0xa3b)]===0x0&&this[_0x5a96e5(0xc17)][_0x5a96e5(0xaed)]===0x0:!![];else _0x91057d=$dataSkills[this[_0x5a96e5(0x8ee)][_0x5a96e5(0x3c5)]()];}else _0x539bc8===_0x5a96e5(0x895)?_0x5a96e5(0x5cd)===_0x5a96e5(0x5cd)?_0x91057d=$dataSkills[this[_0x5a96e5(0x8ee)][_0x5a96e5(0x260)]()]:_0x2be53e['prototype'][_0x5a96e5(0x8da)][_0x5a96e5(0xb2b)](this):_0x91057d=$dataSkills[this['_list'][_0xca9eeb][_0x5a96e5(0x243)]];this['drawSkillCost'](this[_0x5a96e5(0x8ee)],_0x91057d,_0x1422c8['x'],_0x1422c8['y'],_0x1422c8[_0x5a96e5(0x67b)]);},Window_ActorCommand[_0x4b2772(0x632)][_0x4b2772(0xb50)]=function(_0x8f6235,_0x16e809,_0x33ad94,_0x5596a2,_0x532dbf){const _0x1c4256=_0x4b2772;if(!_0x16e809)return;if(Imported[_0x1c4256(0x2c6)])_0x1c4256(0xad8)===_0x1c4256(0x978)?_0x1cb407[_0x1c4256(0xab8)](_0x417285[_0x1c4256(0x71b)],![]):Window_Command['prototype'][_0x1c4256(0xb50)][_0x1c4256(0xb2b)](this,_0x8f6235,_0x16e809,_0x33ad94,_0x5596a2,_0x532dbf);else{if(_0x1c4256(0x7de)===_0x1c4256(0x78f)){if(!_0x214e15['isSceneBattle']())return;if(!_0x1ed92e[_0x1c4256(0x39b)])return;_0x37b744['ConvertParams'](_0x26dfdf,_0x184810);const _0x3a483a=_0x34132a['getLastPluginCommandInterpreter'](),_0x1d95bc=_0x3e7604[_0x1c4256(0x709)];if(!_0x3a483a)return;_0x3001f9[_0x1c4256(0x4b8)](_0x4a1c11['Angle'],_0x1772c0[_0x1c4256(0x8ec)],_0x2f17a6[_0x1c4256(0x278)]);if(_0x1d95bc)_0x3a483a[_0x1c4256(0xc6d)](_0x1c4256(0xb03));}else Window_SkillList[_0x1c4256(0x632)]['drawSkillCost'][_0x1c4256(0xb2b)](this,_0x16e809,_0x33ad94,_0x5596a2,_0x532dbf);}},Window_ActorCommand[_0x4b2772(0x632)][_0x4b2772(0x6f7)]=function(){},Window_ActorCommand[_0x4b2772(0x632)]['activate']=function(){const _0x458362=_0x4b2772;Window_Command[_0x458362(0x632)][_0x458362(0x849)][_0x458362(0xb2b)](this);const _0x5090e6=this[_0x458362(0x421)]();if(_0x5090e6===_0x458362(0x8d1)){if(_0x458362(0x4de)==='PNStY')this[_0x458362(0x29e)]();else return!![];}},Window_ActorCommand[_0x4b2772(0x632)]['battleLayoutStyle']=function(){const _0x452fd2=_0x4b2772;if(this[_0x452fd2(0xb26)])return this['_battleLayoutStyle'];return this[_0x452fd2(0xb26)]=SceneManager[_0x452fd2(0x21e)][_0x452fd2(0x421)](),this[_0x452fd2(0xb26)];},VisuMZ[_0x4b2772(0x67d)]['Window_ActorCommand_setup']=Window_ActorCommand[_0x4b2772(0x632)][_0x4b2772(0xc74)],Window_ActorCommand[_0x4b2772(0x632)]['setup']=function(_0x573e7f){const _0xae0333=_0x4b2772,_0x767124=this[_0xae0333(0x421)]();if(_0x573e7f&&['xp',_0xae0333(0xca0)][_0xae0333(0x41a)](_0x767124))this['resizeWindowXPStyle'](_0x573e7f);else{if(_0x573e7f&&[_0xae0333(0x8d1)][_0xae0333(0x41a)](_0x767124)){if(_0xae0333(0x3b4)==='ussuA')this[_0xae0333(0x222)](_0x573e7f),this['showHelpWindow']();else{if(_0x879681[_0xae0333(0x69d)]())return![];}}}VisuMZ[_0xae0333(0x67d)][_0xae0333(0x553)][_0xae0333(0xb2b)](this,_0x573e7f);if(_0x573e7f&&$gameTroop[_0xae0333(0x668)]()[_0xae0333(0x1e9)]>0x0&&_0x573e7f[_0xae0333(0x947)]()){if(_0xae0333(0xa6a)!==_0xae0333(0x704))_0x573e7f[_0xae0333(0x947)]()[_0xae0333(0x400)]();else{if(this['_targetOpacity']===_0x27efe1)return;this['_targetOpacity']=_0x411416,this[_0xae0333(0xb70)]=_0x3d34df,this[_0xae0333(0x29b)]=_0x4901a3,this[_0xae0333(0x283)]=_0x3fd658||_0xae0333(0x97b);if(_0x6aa4af<=0x0)this[_0xae0333(0xacf)]=_0xcc7661;}}},Window_ActorCommand[_0x4b2772(0x632)][_0x4b2772(0x5b7)]=function(_0x5f4884){const _0x1f5370=_0x4b2772,_0x1eb3b7=Math[_0x1f5370(0x4ed)](Graphics[_0x1f5370(0xcd9)]/0x3),_0x55a80d=Math['round'](Graphics[_0x1f5370(0xcd9)]/$gameParty[_0x1f5370(0x949)]()['length']),_0x2a26a4=Math[_0x1f5370(0x7fa)](_0x1eb3b7,_0x55a80d),_0x317ae3=this[_0x1f5370(0x939)](VisuMZ[_0x1f5370(0x67d)][_0x1f5370(0x869)][_0x1f5370(0x335)][_0x1f5370(0x79b)]),_0x294a02=Math[_0x1f5370(0x4ed)](_0x55a80d*_0x5f4884[_0x1f5370(0x89a)]())+Math[_0x1f5370(0x4ed)]((_0x55a80d-_0x2a26a4)/0x2),_0x99e5a2=Math[_0x1f5370(0x4ed)](SceneManager[_0x1f5370(0x21e)][_0x1f5370(0xab0)]['y']-_0x317ae3);this[_0x1f5370(0x9b5)](_0x294a02,_0x99e5a2,_0x2a26a4,_0x317ae3),this[_0x1f5370(0x5d6)](),this[_0x1f5370(0x86b)](0x1);},Window_ActorCommand[_0x4b2772(0x632)]['resizeWindowBorderStyle']=function(_0x151968){const _0x1e0fc2=_0x4b2772,_0x5d5eca=SceneManager[_0x1e0fc2(0x21e)]['partyCommandWindowRectBorderStyle']();this[_0x1e0fc2(0x9b5)](_0x5d5eca['x'],_0x5d5eca['y'],_0x5d5eca[_0x1e0fc2(0x67b)],_0x5d5eca[_0x1e0fc2(0x4c3)]),this['createContents'](),this[_0x1e0fc2(0x86b)](0x0);},Window_ActorCommand[_0x4b2772(0x632)][_0x4b2772(0x70f)]=function(){const _0x34cc7e=_0x4b2772;if(this[_0x34cc7e(0x95b)]){const _0x51a16d=this[_0x34cc7e(0x95b)]['bitmap'],_0x470c4e=this[_0x34cc7e(0x67b)]-0x8,_0x5ce7d8=this['height'],_0x5a7776=this['padding'],_0x5b8eb7=ColorManager[_0x34cc7e(0x4c7)](),_0x441ea6=ColorManager[_0x34cc7e(0x837)]();this['_dimmerSprite']['x']=0x4,_0x51a16d[_0x34cc7e(0x5a0)](_0x470c4e,_0x5ce7d8),_0x51a16d[_0x34cc7e(0x2cf)](0x0,0x0,_0x470c4e,_0x5a7776,_0x441ea6,_0x5b8eb7,!![]),_0x51a16d[_0x34cc7e(0x239)](0x0,_0x5a7776,_0x470c4e,_0x5ce7d8-_0x5a7776*0x2,_0x5b8eb7),_0x51a16d[_0x34cc7e(0x2cf)](0x0,_0x5ce7d8-_0x5a7776,_0x470c4e,_0x5a7776,_0x5b8eb7,_0x441ea6,!![]),this['_dimmerSprite'][_0x34cc7e(0x90f)](0x0,0x0,_0x470c4e,_0x5ce7d8);}},Window_ActorCommand[_0x4b2772(0x632)][_0x4b2772(0x2cc)]=function(){const _0x31489c=_0x4b2772;if(!this[_0x31489c(0x8ee)])return;const _0x81b99d=VisuMZ['BattleCore']['Settings'][_0x31489c(0xc03)],_0x2fd0cc=this['currentSymbol']();switch(_0x2fd0cc){case _0x31489c(0x2fa):this[_0x31489c(0x6e5)]($dataSkills[this[_0x31489c(0x8ee)][_0x31489c(0x3c5)]()]);break;case'guard':this['setHelpWindowItem']($dataSkills[this['_actor'][_0x31489c(0x260)]()]);break;case _0x31489c(0x6b8):const _0x340f8a=_0x81b99d[_0x31489c(0x3ea)],_0x5cfd3a=_0x340f8a[_0x31489c(0x934)]($dataSystem[_0x31489c(0x99d)][this[_0x31489c(0x931)]()]);this[_0x31489c(0x3f9)][_0x31489c(0x95c)](_0x5cfd3a);break;case _0x31489c(0xa7d):this[_0x31489c(0x6e5)]($dataSkills[this[_0x31489c(0x931)]()]);break;case _0x31489c(0x30a):this[_0x31489c(0x3f9)][_0x31489c(0x95c)](_0x81b99d[_0x31489c(0x221)]);break;case _0x31489c(0x725):this['_helpWindow']['setText'](_0x81b99d[_0x31489c(0xac6)]);break;case _0x31489c(0x481):this[_0x31489c(0x3f9)][_0x31489c(0x95c)](_0x81b99d[_0x31489c(0xb20)]);break;default:this[_0x31489c(0x3f9)][_0x31489c(0x95c)]('');break;}},VisuMZ['BattleCore'][_0x4b2772(0x636)]=Window_BattleStatus[_0x4b2772(0x632)][_0x4b2772(0xb0d)],Window_BattleStatus[_0x4b2772(0x632)][_0x4b2772(0xb0d)]=function(_0x25a6aa){const _0x2e67cc=_0x4b2772;VisuMZ[_0x2e67cc(0x67d)][_0x2e67cc(0x636)][_0x2e67cc(0xb2b)](this,_0x25a6aa),this[_0x2e67cc(0x92e)](),this[_0x2e67cc(0x5b8)]();},Window_BattleStatus[_0x4b2772(0x632)]['battleLayoutStyle']=function(){const _0x7968a6=_0x4b2772;if(this[_0x7968a6(0xb26)])return this[_0x7968a6(0xb26)];return this[_0x7968a6(0xb26)]=SceneManager[_0x7968a6(0x21e)][_0x7968a6(0x421)](),this['_battleLayoutStyle'];},Window_BattleStatus[_0x4b2772(0x632)]['initBattleCore']=function(){const _0xa7979a=_0x4b2772;this[_0xa7979a(0xba8)]=this[_0xa7979a(0xbd3)]();const _0x926888=VisuMZ['BattleCore'][_0xa7979a(0x869)][_0xa7979a(0x335)];_0x926888['StatusWindowSkinHide']&&(_0xa7979a(0x46b)!==_0xa7979a(0x459)?this['opacity']=0x0:(_0x4633c1('%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.'[_0xa7979a(0x934)](_0x218c9f,_0x2438a3)),_0x4add44[_0xa7979a(0xaf9)]()));},Window_BattleStatus['prototype'][_0x4b2772(0xbd3)]=function(){const _0x22078e=_0x4b2772,_0x10e3a3=VisuMZ[_0x22078e(0x67d)][_0x22078e(0x869)][_0x22078e(0x335)];if(_0x10e3a3['StatusWindowSkinFilename'])return!![];const _0x27d45b=this[_0x22078e(0x421)]();switch(_0x27d45b){case _0x22078e(0xc64):case _0x22078e(0x8d1):return!![];break;case _0x22078e(0x523):case'xp':case'portrait':default:return![];break;}},Window_BattleStatus[_0x4b2772(0x632)][_0x4b2772(0x2a3)]=function(){const _0x98d3ae=_0x4b2772;return this[_0x98d3ae(0xbd3)]()?0x0:0xa;},Window_BattleStatus[_0x4b2772(0x632)][_0x4b2772(0x6ee)]=function(){const _0x37b551=_0x4b2772,_0x2d03ed=this[_0x37b551(0x421)]();switch(_0x2d03ed){case'list':return 0x1;break;case'xp':case'portrait':return $gameParty['battleMembers']()[_0x37b551(0x1e9)];break;case'default':default:return $gameParty[_0x37b551(0x71e)]();break;}},Window_BattleStatus[_0x4b2772(0x632)][_0x4b2772(0xb63)]=function(){const _0x4ee738=_0x4b2772,_0x5018af=this[_0x4ee738(0x421)]();switch(_0x5018af){case'list':return Window_StatusBase[_0x4ee738(0x632)]['itemHeight'][_0x4ee738(0xb2b)](this);break;case'default':case'xp':case _0x4ee738(0xca0):default:return this[_0x4ee738(0xa16)];break;}},Window_BattleStatus['prototype']['rowSpacing']=function(){const _0xbb2184=_0x4b2772,_0x97b2b0=this[_0xbb2184(0x421)]();switch(_0x97b2b0){case _0xbb2184(0xc64):return Window_StatusBase[_0xbb2184(0x632)][_0xbb2184(0xc7c)][_0xbb2184(0xb2b)](this);break;case'default':case'xp':case'portrait':default:return 0x0;break;}},Window_BattleStatus['prototype'][_0x4b2772(0x8da)]=function(){const _0x725d85=_0x4b2772;if(this[_0x725d85(0xbd3)]()){if(_0x725d85(0x9f4)!=='lMHLA')return _0x4e4b2a[_0x725d85(0x67d)][_0x725d85(0x869)][_0x725d85(0xb6b)][_0x725d85(0x404)];else Window_StatusBase['prototype'][_0x725d85(0x8da)][_0x725d85(0xb2b)](this);}else{if(_0x725d85(0x419)!==_0x725d85(0x419)){if(_0x51b3c3['uiMenuStyle']&&_0x112f49[_0x725d85(0x512)]!==_0x5d17d3)return _0x4fa9be['uiInputPosition'];else{if(this[_0x725d85(0x421)]()===_0x725d85(0x8d1))return![];else{return _0x36b4ff[_0x725d85(0x632)]['isRightInputMode'][_0x725d85(0xb2b)](this);;}}}else this[_0x725d85(0x5e8)]=0x8;}},Window_BattleStatus[_0x4b2772(0x632)]['loadWindowskin']=function(){const _0x50a254=_0x4b2772,_0x1dc23a=VisuMZ[_0x50a254(0x67d)][_0x50a254(0x869)]['BattleLayout'];_0x1dc23a[_0x50a254(0x8ac)]?this[_0x50a254(0x513)]=ImageManager[_0x50a254(0x256)](_0x1dc23a[_0x50a254(0x8ac)]):Window_StatusBase['prototype'][_0x50a254(0x816)][_0x50a254(0xb2b)](this);},Window_BattleStatus[_0x4b2772(0x632)][_0x4b2772(0x3fa)]=function(_0x2fa292){const _0x44d1fd=_0x4b2772,_0x33e91f=VisuMZ['BattleCore'][_0x44d1fd(0x869)]['BattleLayout'];if(_0x33e91f[_0x44d1fd(0x991)])return;Window_StatusBase['prototype'][_0x44d1fd(0x3fa)][_0x44d1fd(0xb2b)](this,_0x2fa292);},Window_BattleStatus[_0x4b2772(0x632)][_0x4b2772(0x948)]=function(){const _0x2a3788=_0x4b2772;this[_0x2a3788(0x1f0)]=!![];},Window_BattleStatus['prototype'][_0x4b2772(0x49d)]=function(){const _0x2a60b5=_0x4b2772;Window_StatusBase[_0x2a60b5(0x632)][_0x2a60b5(0x49d)][_0x2a60b5(0xb2b)](this),this[_0x2a60b5(0xb81)](),this[_0x2a60b5(0x327)]();if(this[_0x2a60b5(0x421)]()===_0x2a60b5(0x8d1))this['updateBorderStyle']();},Window_BattleStatus['prototype'][_0x4b2772(0xb81)]=function(){const _0x548eb5=_0x4b2772;if($gameTemp[_0x548eb5(0x951)]())this[_0x548eb5(0x3a8)](),this['_requestRefresh']=![],$gameTemp[_0x548eb5(0x3d2)]();else this['_requestRefresh']&&(this['_requestRefresh']=![],this[_0x548eb5(0xa58)](),this[_0x548eb5(0xb7f)]());},Window_BattleStatus[_0x4b2772(0x632)][_0x4b2772(0x6cc)]=function(){const _0x25f4c7=_0x4b2772;Window_StatusBase['prototype'][_0x25f4c7(0x6cc)][_0x25f4c7(0xb2b)](this);if(!$gameSystem['isSideView']())this[_0x25f4c7(0xa58)]();},Window_BattleStatus['prototype'][_0x4b2772(0x6f7)]=function(){const _0x537698=_0x4b2772;if(this[_0x537698(0x63a)]===Window_BattleStatus)return;Window_StatusBase[_0x537698(0x632)][_0x537698(0x6f7)]['call'](this);},Window_BattleStatus[_0x4b2772(0x632)][_0x4b2772(0x52d)]=function(_0x4bc569){const _0x3b8556=_0x4b2772,_0x5a3bf4=this['battleLayoutStyle']();switch(_0x5a3bf4){case'xp':case _0x3b8556(0xca0):break;case _0x3b8556(0x523):case _0x3b8556(0xc64):case _0x3b8556(0x8d1):default:return Window_StatusBase['prototype'][_0x3b8556(0x52d)][_0x3b8556(0xb2b)](this,_0x4bc569);break;}},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x34f)]=Window_BattleStatus['prototype'][_0x4b2772(0x3e5)],Window_BattleStatus[_0x4b2772(0x632)]['drawItemImage']=function(_0x5678ed){const _0x4183e0=_0x4b2772,_0x2a9945=this['battleLayoutStyle']();switch(_0x2a9945){case _0x4183e0(0xc64):this[_0x4183e0(0x8ce)](_0x5678ed);break;case'xp':this['drawItemImageXPStyle'](_0x5678ed);break;case _0x4183e0(0xca0):this['drawItemImagePortraitStyle'](_0x5678ed);break;case _0x4183e0(0x523):case _0x4183e0(0x8d1):default:VisuMZ[_0x4183e0(0x67d)][_0x4183e0(0x34f)]['call'](this,_0x5678ed);break;}},Window_BattleStatus[_0x4b2772(0x632)][_0x4b2772(0x1d7)]=function(_0x3db40d){const _0x19cdee=_0x4b2772,_0x4f5820=this[_0x19cdee(0x421)]();if(!$gameSystem['isSideView']())this['centerFrontViewSprite'](_0x3db40d);switch(_0x4f5820){case'list':this[_0x19cdee(0x8d6)](_0x3db40d);break;case'xp':case _0x19cdee(0xca0):case _0x19cdee(0x523):case _0x19cdee(0x8d1):default:this[_0x19cdee(0x83e)](_0x3db40d);break;}},Window_BattleStatus['prototype'][_0x4b2772(0x782)]=function(){const _0x387523=_0x4b2772,_0x2a52a0=this[_0x387523(0x421)]();if(['xp'][_0x387523(0x41a)](_0x2a52a0)&&!$gameSystem[_0x387523(0x7d1)]()){if('ndKoV'===_0x387523(0x69f))this[_0x387523(0x24b)]=null;else{this['setCursorRect'](0x0,0x0,0x0,0x0);return;}}Window_StatusBase[_0x387523(0x632)][_0x387523(0x782)][_0x387523(0xb2b)](this);},Window_BattleStatus[_0x4b2772(0x632)]['centerFrontViewSprite']=function(_0xa05a0e){const _0x56cba1=_0x4b2772,_0x49fb27=this['actor'](_0xa05a0e)['battler']();if(!_0x49fb27)return;const _0x53e701=this[_0x56cba1(0x421)](),_0x3fec65=this[_0x56cba1(0x9b4)](_0xa05a0e);let _0x115995=Math[_0x56cba1(0x4ed)](_0x3fec65['x']+_0x3fec65[_0x56cba1(0x67b)]/0x2)+this[_0x56cba1(0x5e8)];['list'][_0x56cba1(0x41a)](_0x53e701)&&(_0x56cba1(0x756)===_0x56cba1(0x756)?(_0x115995=_0x3fec65[_0x56cba1(0x67b)]/$gameParty[_0x56cba1(0x949)]()[_0x56cba1(0x1e9)],_0x115995*=_0xa05a0e,_0x115995+=_0x3fec65[_0x56cba1(0x67b)]/$gameParty[_0x56cba1(0x949)]()[_0x56cba1(0x1e9)]/0x2):_0x59d9af['BattleCore'][_0x56cba1(0x9a0)]['call'](this,_0x2c66b1));let _0x2c619b=Math[_0x56cba1(0x4ed)](this[_0x56cba1(0x576)](_0xa05a0e,_0x49fb27,_0x3fec65));_0x49fb27[_0x56cba1(0xbcc)](_0x115995,_0x2c619b),this[_0x56cba1(0x230)](_0x49fb27,0x1),_0x49fb27[_0x56cba1(0x6cc)](),this[_0x56cba1(0x269)](),this[_0x56cba1(0xb7f)]();},Window_BattleStatus[_0x4b2772(0x632)][_0x4b2772(0x576)]=function(_0x6970be,_0x5287ba,_0x52aeec){const _0x1b9dcb=_0x4b2772,_0x4001a4=VisuMZ[_0x1b9dcb(0x67d)][_0x1b9dcb(0x869)]['BattleLayout'],_0x59d2af=this[_0x1b9dcb(0x421)]();if(_0x59d2af==='xp'){const _0x5ada47=_0x4001a4[_0x1b9dcb(0x3a1)];switch(_0x5ada47[_0x1b9dcb(0xa42)]()[_0x1b9dcb(0x75a)]()){case _0x1b9dcb(0x1f3):return _0x52aeec[_0x1b9dcb(0x4c3)]-_0x5287ba[_0x1b9dcb(0x77e)][_0x1b9dcb(0x4c3)]/0x4;break;case _0x1b9dcb(0x355):const _0x5267d5=_0x4001a4[_0x1b9dcb(0xc1a)];return(_0x52aeec[_0x1b9dcb(0x4c3)]+(_0x5287ba[_0x1b9dcb(0x4c3)]||_0x5267d5))/0x2;break;case _0x1b9dcb(0x2e8):return 0x0;case _0x1b9dcb(0x8fe):default:return this['nameY'](_0x52aeec);break;}}else{if(_0x59d2af==='portrait'){}}return _0x5287ba[_0x1b9dcb(0x4c3)];},Sprite_Name[_0x4b2772(0x632)][_0x4b2772(0x81e)]=function(){return 0x24;},Sprite_Name['prototype']['redraw']=function(){const _0x32228f=_0x4b2772,_0x2b2fb3=this[_0x32228f(0x8fe)](),_0x448d0d=this[_0x32228f(0x3ee)](),_0x52c7b0=this['bitmapHeight']();this[_0x32228f(0x917)](),this[_0x32228f(0x6de)][_0x32228f(0x4d6)](),this[_0x32228f(0x6de)][_0x32228f(0xb32)](_0x2b2fb3,0x0,0x0,_0x448d0d,_0x52c7b0,_0x32228f(0x238));},Bitmap[_0x4b2772(0x632)][_0x4b2772(0xb32)]=function(_0x69ba7d,_0x18fb0d,_0x272e58,_0x12262a,_0x422d54,_0x28e45e){const _0x1287dc=_0x4b2772,_0x2c56c0=this['context'],_0x470741=_0x2c56c0[_0x1287dc(0x6e8)];_0x12262a=_0x12262a||0xffffffff;let _0x681d2f=_0x18fb0d,_0x3d17c9=Math[_0x1287dc(0x4ed)](_0x272e58+0x18/0x2+this[_0x1287dc(0xb0f)]*0.35);_0x28e45e===_0x1287dc(0x355)&&(_0x681d2f+=_0x12262a/0x2),_0x28e45e===_0x1287dc(0x98e)&&(_0x681d2f+=_0x12262a),_0x2c56c0[_0x1287dc(0x508)](),_0x2c56c0[_0x1287dc(0xb24)]=this[_0x1287dc(0x24f)](),_0x2c56c0[_0x1287dc(0x47f)]=_0x28e45e,_0x2c56c0[_0x1287dc(0xb2f)]='alphabetic',_0x2c56c0[_0x1287dc(0x6e8)]=0x1,this[_0x1287dc(0xb2c)](_0x69ba7d,_0x681d2f,_0x3d17c9,_0x12262a),_0x2c56c0[_0x1287dc(0x6e8)]=_0x470741,this['_drawTextBody'](_0x69ba7d,_0x681d2f,_0x3d17c9,_0x12262a),_0x2c56c0['restore'](),this[_0x1287dc(0xc75)][_0x1287dc(0x49d)]();},Window_BattleStatus[_0x4b2772(0x632)][_0x4b2772(0x24a)]=function(_0x6b0b04){const _0x45512f=_0x4b2772;return this[_0x45512f(0xa54)](_0x6b0b04)-this[_0x45512f(0x5e9)]();},Window_BattleStatus[_0x4b2772(0x632)]['drawItemImageListStyle']=function(_0x4df468){const _0x407bca=_0x4b2772;if(!VisuMZ[_0x407bca(0x67d)][_0x407bca(0x869)][_0x407bca(0x335)][_0x407bca(0x5b3)])return;const _0x476766=this[_0x407bca(0xa05)](_0x4df468),_0x52d068=this[_0x407bca(0x9b4)](_0x4df468);_0x52d068[_0x407bca(0x67b)]=ImageManager[_0x407bca(0x810)],_0x52d068['height']-=0x2,this['drawActorFace'](_0x476766,_0x52d068['x']+0x1,_0x52d068['y']+0x1,_0x52d068[_0x407bca(0x67b)],_0x52d068['height']);},Window_BattleStatus[_0x4b2772(0x632)][_0x4b2772(0x8d6)]=function(_0x20bd83){const _0xdfd890=_0x4b2772,_0x273f14=VisuMZ[_0xdfd890(0x67d)]['Settings'][_0xdfd890(0x335)],_0x2693b8=$dataSystem[_0xdfd890(0xb48)]?0x4:0x3,_0x3173bf=_0x2693b8*0x80+(_0x2693b8-0x1)*0x8+0x4,_0xeed139=this[_0xdfd890(0xa05)](_0x20bd83),_0x5794d6=this[_0xdfd890(0x9b4)](_0x20bd83);let _0x4a8234=_0x5794d6['x']+this[_0xdfd890(0x5e8)];_0x273f14['ShowFacesListStyle']?_0x4a8234=_0x5794d6['x']+ImageManager['faceWidth']+0x8:_0x4a8234+=ImageManager[_0xdfd890(0xa63)];const _0x198d1a=Math[_0xdfd890(0x4ed)](Math[_0xdfd890(0x7fa)](_0x5794d6['x']+_0x5794d6['width']-_0x3173bf,_0x4a8234)),_0x47ad5b=Math[_0xdfd890(0x4ed)](_0x5794d6['y']+(_0x5794d6['height']-Sprite_Name[_0xdfd890(0x632)]['bitmapHeight']())/0x2),_0x417f70=Math['round'](_0x198d1a-ImageManager[_0xdfd890(0xa63)]/0x2-0x4),_0x2e9a56=Math['round'](_0x5794d6['y']+(_0x5794d6[_0xdfd890(0x4c3)]-ImageManager[_0xdfd890(0x65e)])/0x2+ImageManager[_0xdfd890(0x65e)]/0x2);let _0x33d334=_0x198d1a+0x88;const _0x14d329=_0x47ad5b;this[_0xdfd890(0x514)](_0xeed139,_0x198d1a-0x4+(_0x273f14[_0xdfd890(0x410)]||0x0),_0x47ad5b+(_0x273f14[_0xdfd890(0x4c8)]||0x0)),this[_0xdfd890(0x7ff)](_0xeed139,_0x198d1a+(_0x273f14['NameOffsetX']||0x0),_0x47ad5b+(_0x273f14[_0xdfd890(0x446)]||0x0)),this['placeStateIcon'](_0xeed139,_0x417f70+(_0x273f14[_0xdfd890(0x44f)]||0x0),_0x2e9a56+(_0x273f14['StateIconOffsetY']||0x0)),this[_0xdfd890(0x2ec)](_0xeed139,'hp',_0x33d334+0x88*0x0+(_0x273f14[_0xdfd890(0x97f)]||0x0),_0x14d329+(_0x273f14['HpGaugeOffsetY']||0x0)),this[_0xdfd890(0x2ec)](_0xeed139,'mp',_0x33d334+0x88*0x1+(_0x273f14[_0xdfd890(0x4ea)]||0x0),_0x14d329+(_0x273f14[_0xdfd890(0x2fe)]||0x0));if($dataSystem['optDisplayTp']){if(_0xdfd890(0x470)!=='FJLHo'){if(!_0x14de5a[_0xdfd890(0x7d1)]())return;const _0x5a45dc=this[_0xdfd890(0x947)]();if(!_0x5a45dc)return;if(_0x394a8f)this[_0xdfd890(0xa09)](_0x15c83c+_0x5a45dc[_0xdfd890(0xc20)],_0x5e2bd8+_0x5a45dc['_baseY'],![]);_0x2e4c1f+=_0x5a45dc[_0xdfd890(0xc20)]-_0x5a45dc[_0xdfd890(0x879)],_0x25b270+=_0x5a45dc[_0xdfd890(0xaba)]-_0x5a45dc[_0xdfd890(0x919)],_0x5a45dc[_0xdfd890(0x615)](_0x3d48ac,_0x51c4d2,_0x3c2141);if(_0x3b74a3['VisuMZ_0_CoreEngine'])_0x5a45dc[_0xdfd890(0x473)](_0x32d0ba||_0xdfd890(0x97b));}else this[_0xdfd890(0x2ec)](_0xeed139,'tp',_0x33d334+0x88*0x2+(_0x273f14[_0xdfd890(0x302)]||0x0),_0x14d329+(_0x273f14['TpGaugeOffsetY']||0x0));}},Window_BattleStatus['prototype'][_0x4b2772(0x51a)]=function(_0x3434f0){const _0x14d938=_0x4b2772;if(!$gameSystem[_0x14d938(0x7d1)]())return;VisuMZ[_0x14d938(0x67d)][_0x14d938(0x34f)][_0x14d938(0xb2b)](this,_0x3434f0);},Window_BattleStatus[_0x4b2772(0x632)][_0x4b2772(0x83e)]=function(_0x3c0e78){const _0x281aaa=_0x4b2772,_0x3a347f=VisuMZ[_0x281aaa(0x67d)][_0x281aaa(0x869)][_0x281aaa(0x335)],_0x5e79ff=this[_0x281aaa(0xa05)](_0x3c0e78),_0xeee68c=this['itemRect'](_0x3c0e78),_0x4eae38=Math[_0x281aaa(0x4ed)](_0xeee68c['x']+(_0xeee68c[_0x281aaa(0x67b)]-0x80)/0x2),_0x510e5a=this['nameY'](_0xeee68c);let _0xd9e344=_0x4eae38-ImageManager['iconWidth']/0x2-0x4,_0x3539b1=_0x510e5a+ImageManager[_0x281aaa(0x65e)]/0x2;_0xd9e344-ImageManager[_0x281aaa(0xa63)]/0x2<_0xeee68c['x']&&(_0xd9e344=_0x4eae38+ImageManager[_0x281aaa(0xa63)]/0x2-0x4,_0x3539b1=_0x510e5a-ImageManager[_0x281aaa(0x65e)]/0x2);const _0x269438=_0x4eae38,_0x55a012=this[_0x281aaa(0xa54)](_0xeee68c);this[_0x281aaa(0x514)](_0x5e79ff,_0x4eae38+(_0x3a347f[_0x281aaa(0x410)]||0x0),_0x510e5a+(_0x3a347f['TpbGaugeOffsetY']||0x0)),this[_0x281aaa(0x7ff)](_0x5e79ff,_0x4eae38+(_0x3a347f[_0x281aaa(0x697)]||0x0),_0x510e5a+(_0x3a347f[_0x281aaa(0x446)]||0x0)),this[_0x281aaa(0xb14)](_0x5e79ff,_0xd9e344+(_0x3a347f[_0x281aaa(0x44f)]||0x0),_0x3539b1+(_0x3a347f[_0x281aaa(0x9cb)]||0x0)),this[_0x281aaa(0x2ec)](_0x5e79ff,'hp',_0x269438+(_0x3a347f[_0x281aaa(0x97f)]||0x0),_0x55a012+(_0x3a347f['HpGaugeOffsetY']||0x0)),this[_0x281aaa(0x2ec)](_0x5e79ff,'mp',_0x269438+(_0x3a347f[_0x281aaa(0x4ea)]||0x0),_0x55a012+this[_0x281aaa(0x5e9)]()+(_0x3a347f[_0x281aaa(0x2fe)]||0x0));if($dataSystem[_0x281aaa(0xb48)]){if('DzEtc'===_0x281aaa(0x6f2))return _0x49f839=_0x21b80d[_0x281aaa(0x5fd)]()['trim'](),this[_0x281aaa(0x6ab)]()===_0x1abd57;else this[_0x281aaa(0x2ec)](_0x5e79ff,'tp',_0x269438+(_0x3a347f[_0x281aaa(0x302)]||0x0),_0x55a012+this[_0x281aaa(0x5e9)]()*0x2+(_0x3a347f[_0x281aaa(0x49f)]||0x0));}},Window_BattleStatus[_0x4b2772(0x632)][_0x4b2772(0x330)]=function(_0x279d46){const _0x22a5fd=_0x4b2772;if(!VisuMZ[_0x22a5fd(0x67d)][_0x22a5fd(0x869)][_0x22a5fd(0x335)]['ShowPortraits'])return![];if(_0x279d46[_0x22a5fd(0xa97)]())return!![];return Imported[_0x22a5fd(0xaac)]&&_0x279d46[_0x22a5fd(0xba5)]();},Game_Actor[_0x4b2772(0x632)][_0x4b2772(0x9a5)]=function(){const _0x2f170d=_0x4b2772;if(this[_0x2f170d(0xa05)]()[_0x2f170d(0x28a)][_0x2f170d(0x93d)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i)){if(_0x2f170d(0x62c)!==_0x2f170d(0x5c3))return Number(RegExp['$1']);else{if(!_0x112f71[_0x2f170d(0x885)]())return;if(!_0x4b3a12['VisuMZ_3_ActSeqProjectiles'])return;_0x6a20cf[_0x2f170d(0x72d)](_0x36a45b,_0x538a04);const _0x193aed=_0x50fcb3[_0x2f170d(0x2ba)](),_0x5540b3=_0x553077[_0x2f170d(0x520)];if(!_0x193aed)return;const _0xc062b8=_0x50891e[_0x2f170d(0x34a)];if(!_0xc062b8)return;_0xc062b8['createActionSequenceProjectile'](_0xc10c72);if(_0x5540b3)_0x193aed['setWaitMode']('battleProjectiles');}}else{if(this[_0x2f170d(0xa05)]()[_0x2f170d(0x28a)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x4b2772(0x632)]['getBattlePortraitOffsetY']=function(){const _0x3997d3=_0x4b2772;if(this[_0x3997d3(0xa05)]()[_0x3997d3(0x28a)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i)){if('aRphN'!=='aRphN')this[_0x3997d3(0x67e)]()?this['onDisabledPartyCommandSelection']():_0x1d9732[_0x3997d3(0x67d)]['Scene_Battle_startPartyCommandSelection'][_0x3997d3(0xb2b)](this);else return Number(RegExp['$1']);}else{if(this['actor']()[_0x3997d3(0x28a)][_0x3997d3(0x93d)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if('zCLCa'===_0x3997d3(0x70a))return Number(RegExp['$2']);else _0x13b3d1+=_0x356a95[_0x3997d3(0x92d)]()?-_0x4d3167:_0x43f68c,_0x12089e+=_0x1a4208;}}return 0x0;},Window_BattleStatus['prototype'][_0x4b2772(0xcb9)]=function(_0x250611){const _0x43807b=_0x4b2772,_0x4680c7=this[_0x43807b(0xa05)](_0x250611);if(this[_0x43807b(0x330)](_0x4680c7)){if(_0x43807b(0x47c)===_0x43807b(0x4cd)){_0x474159-=_0x520a85;const _0x324d7b=_0x40a158[_0x43807b(0x67d)][_0x43807b(0x869)]['Damage'][_0x43807b(0xc32)],_0x3dcfd3=_0x30be23[_0x43807b(0x20e)](0x1-_0x38af26/((_0x519c10-_0x4199a3)*_0x324d7b+_0x3854f7),0.01);_0x16c4ad*=_0x3dcfd3,_0x102301+=_0x295c4d;}else{const _0xfbeaa='actor%1-portrait'[_0x43807b(0x934)](_0x4680c7['actorId']()),_0x20ae50=this['createInnerPortrait'](_0xfbeaa,Sprite),_0x272d2e=_0x4680c7['getBattlePortraitFilename']();_0x272d2e!==''?_0x20ae50[_0x43807b(0x6de)]=ImageManager[_0x43807b(0xa29)](_0x272d2e):_0x43807b(0x1f5)!=='nQlsQ'?_0x20ae50[_0x43807b(0x6de)]=ImageManager[_0x43807b(0x6b6)]:(_0x3ad270[_0x43807b(0x67d)][_0x43807b(0x687)](),_0x40978b[_0x43807b(0x67d)]['BindCommonEventKeysForGroup'](_0x461f41),_0x99876e['BattleCore'][_0x43807b(0xc8d)](_0x228ebe));const _0x34591c=this[_0x43807b(0x9b4)](_0x250611);_0x20ae50[_0x43807b(0xa79)]['x']=0.5,_0x20ae50['anchor']['y']=0x1;let _0x1d5c5a=Math[_0x43807b(0x4ed)](_0x34591c['x']+_0x34591c['width']/0x2)+this[_0x43807b(0x5e8)];_0x1d5c5a+=_0x4680c7[_0x43807b(0x9a5)]();let _0x20dec7=Math[_0x43807b(0x4ed)](this[_0x43807b(0x4c3)]);_0x20dec7+=_0x4680c7['getBattlePortraitOffsetY'](),_0x20ae50[_0x43807b(0x9b5)](_0x1d5c5a,_0x20dec7);const _0x48dd30=VisuMZ[_0x43807b(0x67d)][_0x43807b(0x869)]['BattleLayout'][_0x43807b(0xa22)];_0x20ae50[_0x43807b(0x8eb)]['x']=_0x48dd30,_0x20ae50['scale']['y']=_0x48dd30,_0x20ae50['show']();}}else{const _0x332679=this[_0x43807b(0xab2)](_0x250611);this[_0x43807b(0xb1e)](_0x4680c7,_0x332679['x'],_0x332679['y'],_0x332679['width'],_0x332679[_0x43807b(0x4c3)]);}},Window_BattleStatus['prototype'][_0x4b2772(0x81d)]=function(_0x40c16a,_0x5bdac6){const _0x4b7282=_0x4b2772,_0x3c52e9=this[_0x4b7282(0x62d)];if(_0x3c52e9[_0x40c16a]){if(_0x4b7282(0x75e)===_0x4b7282(0x75e))return _0x3c52e9[_0x40c16a];else{if(this[_0x4b7282(0x57d)]&&this[_0x4b7282(0x57d)][_0x4b7282(0x3ef)]())return![];if(this[_0x4b7282(0x57d)]&&!this[_0x4b7282(0x57d)]['canBattlerMove']())return![];return _0x32feea[_0x4b7282(0x7d1)]();}}else{if(_0x4b7282(0x62b)===_0x4b7282(0x39e)){if(_0x31b3fb[_0x4b7282(0x97e)]['version']>=1.24){if(this['_actor']){if(!_0x272902[_0x4b7282(0x97e)][_0x4b7282(0x975)](this['_actor'],_0xab60f5))return!![];if(!_0x3a8caa['SkillsStatesCore'][_0x4b7282(0x532)](this[_0x4b7282(0x8ee)],_0x573518))return!![];if(!_0x35a4d3[_0x4b7282(0x97e)][_0x4b7282(0x4f3)](this['_actor'],_0xb45bf9))return!![];}}else{if(!_0x1cd88c[_0x4b7282(0x632)]['checkShowHideBattleNotetags'][_0x4b7282(0xb2b)](this,_0x5e94b2))return!![];if(!_0x1f5969[_0x4b7282(0x632)]['checkShowHideSwitchNotetags'][_0x4b7282(0xb2b)](this,_0x3899d6))return!![];if(!_0x4044c0[_0x4b7282(0x632)][_0x4b7282(0x9c7)][_0x4b7282(0xb2b)](this,_0x5bc102))return!![];}}else{const _0x476123=new _0x5bdac6();return _0x3c52e9[_0x40c16a]=_0x476123,this[_0x4b7282(0xa1f)](_0x476123),this[_0x4b7282(0xa1f)](this[_0x4b7282(0x342)]),_0x476123;}}},Window_BattleStatus['prototype'][_0x4b2772(0x555)]=function(){const _0x4a0b6a=_0x4b2772;this[_0x4a0b6a(0xbbe)](),this['_createEffectsContainer'](),Window_StatusBase['prototype'][_0x4a0b6a(0x555)][_0x4a0b6a(0xb2b)](this),this['_createDamageContainer']();},Window_BattleStatus[_0x4b2772(0x632)][_0x4b2772(0xbbe)]=function(){const _0x478a85=_0x4b2772;this[_0x478a85(0x342)]=new Sprite(),this[_0x478a85(0x342)][_0x478a85(0xbfb)]=[new PIXI[(_0x478a85(0xbfb))]['AlphaFilter']()],this[_0x478a85(0x342)][_0x478a85(0xbc6)]=new Rectangle(),this[_0x478a85(0x342)][_0x478a85(0x9b5)](this[_0x478a85(0x4fd)],this[_0x478a85(0x4fd)]),this[_0x478a85(0x340)](this[_0x478a85(0x342)]);},Window_BattleStatus[_0x4b2772(0x632)]['_createEffectsContainer']=function(){const _0x96ae92=_0x4b2772;this[_0x96ae92(0x56a)]=new Sprite(),this['addChild'](this[_0x96ae92(0x56a)]);},Window_BattleStatus['prototype'][_0x4b2772(0x269)]=function(){const _0x1318be=_0x4b2772;if(this[_0x1318be(0x56a)]){if(_0x1318be(0xbcd)!==_0x1318be(0xbcd))return _0x289c45[_0x1318be(0x21e)][_0x1318be(0xa24)]&&_0x522f9e[_0x1318be(0x21e)][_0x1318be(0xa24)][_0x1318be(0xccf)]&&_0x30b358[_0x1318be(0x21e)][_0x1318be(0xa24)][_0x1318be(0x321)][_0x1318be(0x41a)](this[_0x1318be(0x57d)]);else this[_0x1318be(0x340)](this[_0x1318be(0x56a)]);}},Window_BattleStatus[_0x4b2772(0x632)]['_createDamageContainer']=function(){const _0x23798d=_0x4b2772;this[_0x23798d(0xb75)]=new Sprite(),this['addChild'](this[_0x23798d(0xb75)]);},Window_BattleStatus[_0x4b2772(0x632)][_0x4b2772(0x1f7)]=function(){const _0x4ca2dd=_0x4b2772;this['_cursorSprite']=new Sprite();for(let _0x5a7173=0x0;_0x5a7173<0x9;_0x5a7173++){this[_0x4ca2dd(0xbc3)][_0x4ca2dd(0x340)](new Sprite());}this[_0x4ca2dd(0x342)]['addChild'](this['_cursorSprite']);},Window_BattleStatus[_0x4b2772(0x632)]['_updateClientArea']=function(){const _0x7ca52d=_0x4b2772;Window_StatusBase[_0x7ca52d(0x632)][_0x7ca52d(0x281)][_0x7ca52d(0xb2b)](this),this['_updateCursorArea']();},Window_BattleStatus[_0x4b2772(0x632)]['_updateCursorArea']=function(){const _0x1e8f0b=_0x4b2772,_0x27c365=this[_0x1e8f0b(0x4fd)];this[_0x1e8f0b(0x342)]['move'](_0x27c365,_0x27c365),this[_0x1e8f0b(0x342)]['x']=_0x27c365-this[_0x1e8f0b(0x938)]['x'],this[_0x1e8f0b(0x342)]['y']=_0x27c365-this[_0x1e8f0b(0x938)]['y'];if(this[_0x1e8f0b(0xb52)]>0x0&&this['innerHeight']>0x0){if(_0x1e8f0b(0xc0f)!=='OAjMq'){const _0x2e8fe3=_0x3624d0['BattleCore'][_0x1e8f0b(0x869)][_0x1e8f0b(0xcb4)],_0x8bd6d4=_0x2e8fe3[_0x1e8f0b(0x993)],_0x4f310c=_0x2e8fe3[_0x1e8f0b(0x57f)],_0x18eeea=_0x2e8fe3[_0x1e8f0b(0x5a6)];this[_0x1e8f0b(0x615)](_0x8bd6d4,_0x4f310c,_0x18eeea);}else this['_cursorArea'][_0x1e8f0b(0x30d)]=this[_0x1e8f0b(0x53e)]();}else{if('rNvlw'!==_0x1e8f0b(0x2df))this[_0x1e8f0b(0x342)][_0x1e8f0b(0x30d)]=![];else return!![];}},Window_BattleStatus[_0x4b2772(0x632)][_0x4b2772(0x65b)]=function(){const _0x1496ce=_0x4b2772;Window_StatusBase[_0x1496ce(0x632)]['_updateFilterArea'][_0x1496ce(0xb2b)](this),this[_0x1496ce(0xb07)]();},Window_BattleStatus['prototype'][_0x4b2772(0xb07)]=function(){const _0x17e7d5=_0x4b2772,_0x227cae=this[_0x17e7d5(0x342)]['worldTransform'][_0x17e7d5(0x792)](new Point(0x0,0x0)),_0x10234b=this[_0x17e7d5(0x342)][_0x17e7d5(0xbc6)];_0x10234b['x']=_0x227cae['x']+this['origin']['x'],_0x10234b['y']=_0x227cae['y']+this['origin']['y'],_0x10234b[_0x17e7d5(0x67b)]=this[_0x17e7d5(0xb52)],_0x10234b[_0x17e7d5(0x4c3)]=this[_0x17e7d5(0xa16)];},Window_BattleStatus[_0x4b2772(0x632)]['refreshActorPortrait']=function(_0x1a4601){const _0x4395f9=_0x4b2772;if(this[_0x4395f9(0x421)]()!==_0x4395f9(0xca0))return;this[_0x4395f9(0xcb9)](_0x1a4601[_0x4395f9(0x89a)]());},Window_BattleStatus['prototype']['addDamageSprite']=function(_0x4a4492,_0x19144a){const _0xa59108=_0x4b2772;if(!this['_damageContainer'])return;if(!_0x4a4492)return;if(!_0x19144a)return;const _0x171136=this['itemRect'](_0x19144a[_0xa59108(0x89a)]());_0x171136['x']+=_0x171136[_0xa59108(0x67b)]/0x2+this[_0xa59108(0x5e8)],_0x4a4492['x']=_0x171136['x'],_0x4a4492['y']=_0x171136['y'],this[_0xa59108(0xb75)][_0xa59108(0x340)](_0x4a4492);},Window_BattleStatus[_0x4b2772(0x632)][_0x4b2772(0xc99)]=function(_0x5f07de){const _0x3a8a24=_0x4b2772;if(!this[_0x3a8a24(0xb75)])return;if(!_0x5f07de)return;this[_0x3a8a24(0xb75)]['removeChild'](_0x5f07de);},Window_BattleStatus[_0x4b2772(0x632)][_0x4b2772(0x6f4)]=function(){const _0x21d48d=_0x4b2772;if(!this[_0x21d48d(0x38a)]())return;if(!this['_borderPortraitSprite'])this[_0x21d48d(0xbcb)]();this[_0x21d48d(0x26b)](),this['updateBorderSprite']();},Window_BattleStatus[_0x4b2772(0x632)][_0x4b2772(0x38a)]=function(){const _0x4d81f4=_0x4b2772;if(this['constructor']!==Window_BattleStatus)return![];if(!SceneManager[_0x4d81f4(0x885)]())return![];return VisuMZ[_0x4d81f4(0x67d)][_0x4d81f4(0x869)]['BattleLayout'][_0x4d81f4(0x946)];},Window_BattleStatus[_0x4b2772(0x632)][_0x4b2772(0xbcb)]=function(){const _0x24c65d=_0x4b2772;this[_0x24c65d(0x32d)]=new Sprite();const _0x53e66a=SceneManager[_0x24c65d(0x21e)],_0x2a77fb=_0x53e66a[_0x24c65d(0x4b1)][_0x24c65d(0xae6)](_0x53e66a[_0x24c65d(0x204)]);_0x53e66a[_0x24c65d(0x230)](this[_0x24c65d(0x32d)],_0x2a77fb),this[_0x24c65d(0x32d)]['anchor']['x']=0.5,this['_borderPortraitSprite']['anchor']['y']=0x1;const _0x3fd80f=VisuMZ[_0x24c65d(0x67d)][_0x24c65d(0x869)][_0x24c65d(0x335)][_0x24c65d(0x25a)];this[_0x24c65d(0x32d)][_0x24c65d(0x8eb)]['x']=_0x3fd80f,this[_0x24c65d(0x32d)][_0x24c65d(0x8eb)]['y']=_0x3fd80f,this[_0x24c65d(0x32d)]['y']=this['y']+this['height'],this['_borderPortraitDuration']=0x0;},Window_BattleStatus[_0x4b2772(0x632)][_0x4b2772(0x26b)]=function(){const _0x4fdf4b=_0x4b2772;this[_0x4fdf4b(0x32d)]['visible']=BattleManager[_0x4fdf4b(0xb2d)]();const _0x4c4b04=BattleManager[_0x4fdf4b(0xa05)]();if(_0x4c4b04===this[_0x4fdf4b(0x32d)][_0x4fdf4b(0xa05)])return;this['_borderPortraitSprite'][_0x4fdf4b(0xa05)]=_0x4c4b04||this['_borderPortraitSprite'][_0x4fdf4b(0xa05)];if(!_0x4c4b04)return;else{if(_0x4c4b04[_0x4fdf4b(0xab4)]()===''){if(_0x4fdf4b(0xbc8)===_0x4fdf4b(0xbc8)){this[_0x4fdf4b(0x32d)][_0x4fdf4b(0x6de)]=ImageManager[_0x4fdf4b(0x6b6)];return;}else{const _0x6453cf=_0x3be1ce[_0x4fdf4b(0xcd9)]/0x2,_0x5d7ddf=this[_0x4fdf4b(0x8b7)](_0x351634[_0x4fdf4b(0x67d)]['Settings'][_0x4fdf4b(0x335)][_0x4fdf4b(0x79b)],!![]),_0x336b97=_0x567b64[_0x4fdf4b(0x4ed)]((_0x3ec068[_0x4fdf4b(0xcd9)]-_0x6453cf)/0x2),_0x303a69=_0x571a2b['boxHeight']-_0x5d7ddf-this[_0x4fdf4b(0x4c9)]()[_0x4fdf4b(0x4c3)];return new _0x4fba8a(_0x336b97,_0x303a69,_0x6453cf,_0x5d7ddf);}}else{const _0x2a9388=ImageManager[_0x4fdf4b(0xa29)](_0x4c4b04[_0x4fdf4b(0xab4)]());_0x2a9388['addLoadListener'](this[_0x4fdf4b(0xc3c)]['bind'](this,_0x2a9388));}}},Window_BattleStatus[_0x4b2772(0x632)][_0x4b2772(0xc3c)]=function(_0x5edb59){const _0x2fccd7=_0x4b2772;this[_0x2fccd7(0x996)]=0x14,this[_0x2fccd7(0x32d)][_0x2fccd7(0x6de)]=_0x5edb59;SceneManager[_0x2fccd7(0x21e)][_0x2fccd7(0x8e5)]()?(this[_0x2fccd7(0x32d)]['x']=0x0,this['_borderPortraitTargetX']=Math['ceil'](_0x5edb59[_0x2fccd7(0x67b)]/0x2)):_0x2fccd7(0x20b)!==_0x2fccd7(0x20b)?this[_0x2fccd7(0xc6d)](_0x2fccd7(0x598)):(this[_0x2fccd7(0x32d)]['x']=this['width'],this[_0x2fccd7(0x568)]=this[_0x2fccd7(0x67b)]*0x3/0x4);this[_0x2fccd7(0x32d)]['opacity']=0x0,this[_0x2fccd7(0x32d)]['y']=this['y']+this['height'];const _0x1dcbe4=BattleManager[_0x2fccd7(0xa05)]();_0x1dcbe4&&(this[_0x2fccd7(0x568)]+=_0x1dcbe4[_0x2fccd7(0x9a5)](),this['_borderPortraitSprite']['y']+=_0x1dcbe4[_0x2fccd7(0x70c)]());},Window_BattleStatus[_0x4b2772(0x632)][_0x4b2772(0x815)]=function(){const _0x455162=_0x4b2772;if(this[_0x455162(0x996)]>0x0){const _0x9cece4=this[_0x455162(0x996)],_0x53401e=this[_0x455162(0x32d)];_0x53401e['x']=(_0x53401e['x']*(_0x9cece4-0x1)+this[_0x455162(0x568)])/_0x9cece4,_0x53401e[_0x455162(0xacf)]=(_0x53401e[_0x455162(0xacf)]*(_0x9cece4-0x1)+0xff)/_0x9cece4,this[_0x455162(0x996)]--;}},Window_BattleStatus['prototype']['updateEffectContainers']=function(){const _0x26b55c=_0x4b2772;return;this[_0x26b55c(0x56a)]&&(this['_effectsContainer']['x']=this['x'],this[_0x26b55c(0x56a)]['y']=this['y']),this[_0x26b55c(0xb75)]&&(this[_0x26b55c(0xb75)]['x']=this['x'],this['_damageContainer']['y']=this['y']);},Window_BattleStatus[_0x4b2772(0x632)][_0x4b2772(0x5b8)]=function(){const _0x4d1783=_0x4b2772,_0x14c758=VisuMZ[_0x4d1783(0x67d)][_0x4d1783(0x869)][_0x4d1783(0x335)];if(_0x14c758[_0x4d1783(0x599)]){const _0x23534a=new Sprite();_0x23534a[_0x4d1783(0x6de)]=ImageManager[_0x4d1783(0x256)](_0x14c758[_0x4d1783(0x599)]),_0x23534a['x']=_0x14c758[_0x4d1783(0x5ac)]||0x0,_0x23534a['y']=_0x14c758[_0x4d1783(0x68d)]||0x0,this[_0x4d1783(0xa1f)](_0x23534a),this[_0x4d1783(0x4be)]=_0x23534a;}if(_0x14c758['StatusWindowAttachmentFront']){if('JshIw'!==_0x4d1783(0x516)){const _0x113256=new Sprite();_0x113256[_0x4d1783(0x6de)]=ImageManager[_0x4d1783(0x256)](_0x14c758[_0x4d1783(0x1dd)]),_0x113256['x']=_0x14c758[_0x4d1783(0x3cf)]||0x0,_0x113256['y']=_0x14c758[_0x4d1783(0x7c0)]||0x0,this[_0x4d1783(0x340)](_0x113256),this[_0x4d1783(0x7ad)]=_0x113256;}else{const _0x18284d=this[_0x4d1783(0xc39)];_0x18284d[_0x4d1783(0x86e)](_0x3de838,0x0,_0x40362a['y'],_0x18284d[_0x4d1783(0xb52)],_0x4d1783(0x355));}}},Window_BattleStatus[_0x4b2772(0x632)][_0x4b2772(0xb7f)]=function(){const _0xfa28f5=_0x4b2772;this['_frontAttachmentSprite']&&this['addChild'](this[_0xfa28f5(0x7ad)]),this[_0xfa28f5(0x4be)]&&this['addChildToBack'](this['_backAttachmentSprite']);},Window_BattleActor['prototype']['isOkEnabled']=function(){const _0x3f137d=_0x4b2772;return Window_BattleStatus[_0x3f137d(0x632)]['isOkEnabled'][_0x3f137d(0xb2b)](this)&&this['isActionSelectionValid']();},Window_BattleActor[_0x4b2772(0x632)]['isActionSelectionValid']=function(){const _0x4de1fa=_0x4b2772,_0x212d87=BattleManager[_0x4de1fa(0x31a)](),_0x4a98ac=this['actor'](this[_0x4de1fa(0x89a)]());if(!_0x212d87)return!![];if(!_0x212d87[_0x4de1fa(0x30a)]())return!![];const _0x3acbb0=_0x212d87[_0x4de1fa(0x30a)]()[_0x4de1fa(0x28a)];if(_0x3acbb0['match'](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x4a98ac===BattleManager['actor']())return![];}return!![];},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xa9a)]=Window_BattleEnemy[_0x4b2772(0x632)][_0x4b2772(0xb0d)],Window_BattleEnemy[_0x4b2772(0x632)][_0x4b2772(0xb0d)]=function(_0x4a2762){const _0x243db5=_0x4b2772;this['_lastEnemy']=null,VisuMZ[_0x243db5(0x67d)]['Window_BattleEnemy_initialize'][_0x243db5(0xb2b)](this,_0x4a2762);},Window_BattleEnemy[_0x4b2772(0x632)][_0x4b2772(0x6ee)]=function(){const _0x24b8e0=_0x4b2772;return this[_0x24b8e0(0x6ac)]();},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x51f)]=Window_BattleEnemy[_0x4b2772(0x632)][_0x4b2772(0x6cc)],Window_BattleEnemy['prototype']['show']=function(){const _0x30aa79=_0x4b2772;VisuMZ[_0x30aa79(0x67d)][_0x30aa79(0x51f)][_0x30aa79(0xb2b)](this),this['y']=Graphics[_0x30aa79(0x4c3)]*0xa;},Window_BattleEnemy[_0x4b2772(0x632)][_0x4b2772(0x49b)]=function(){const _0xb72dc0=_0x4b2772;return $gameTroop['aliveMembers']()[_0xb72dc0(0x36a)](0x0);},Window_BattleEnemy[_0x4b2772(0x632)]['refresh']=function(){const _0x3e581d=_0x4b2772;this[_0x3e581d(0x321)]=this['validTargets'](),this[_0x3e581d(0xa4e)](),Window_Selectable[_0x3e581d(0x632)]['refresh'][_0x3e581d(0xb2b)](this);},Window_BattleEnemy[_0x4b2772(0x632)][_0x4b2772(0xa4e)]=function(){const _0xb7f1e2=_0x4b2772;this['_enemies'][_0xb7f1e2(0xad4)]((_0x3a30c7,_0x151a8e)=>{const _0x2fdae7=_0xb7f1e2;if(_0x2fdae7(0x2af)===_0x2fdae7(0x2af)){if(_0x3a30c7[_0x2fdae7(0x947)]()[_0x2fdae7(0xc20)]===_0x151a8e[_0x2fdae7(0x947)]()[_0x2fdae7(0xc20)])return _0x3a30c7[_0x2fdae7(0x947)]()['_baseY']-_0x151a8e['battler']()['_baseY'];else{if(_0x2fdae7(0x246)!==_0x2fdae7(0x543))return _0x3a30c7['battler']()[_0x2fdae7(0xc20)]-_0x151a8e['battler']()[_0x2fdae7(0xc20)];else{const _0x2c187d=_0x41d0ea['actor']();_0x44b70b[_0x2fdae7(0x67d)][_0x2fdae7(0xb4d)]['call'](this);if(_0x2c187d){if(_0x2c187d===_0x4f4180[_0x2fdae7(0xa05)]())return;if(_0x2c187d===_0x4f938e['_subject'])return;if(_0x2c187d['battler']())_0x2c187d[_0x2fdae7(0x947)]()[_0x2fdae7(0x653)]();}}}}else{if(!_0x920304['isSceneBattle']())return;if(!_0x5af1af[_0x2fdae7(0x39b)])return;_0x1bd659[_0x2fdae7(0x72d)](_0x261530,_0x459620);const _0x2b2d9a=_0x256c70[_0x2fdae7(0x2ba)](),_0x1fc7ea=_0x6d2559[_0x2fdae7(0x2ff)];if(!_0x2b2d9a)return;_0x3ec7cc[_0x2fdae7(0xb11)](0x0,0x0,_0x4bba43[_0x2fdae7(0x8ec)],_0x14790[_0x2fdae7(0x278)]);if(_0x1fc7ea)_0x2b2d9a[_0x2fdae7(0xc6d)]('battleSkew');}}),SceneManager[_0xb7f1e2(0x96e)]()&&this[_0xb7f1e2(0x321)][_0xb7f1e2(0x8de)]();},Window_BattleEnemy['prototype'][_0x4b2772(0xcec)]=function(){const _0x3e3b24=_0x4b2772,_0x5d50c3=VisuMZ[_0x3e3b24(0x67d)][_0x3e3b24(0x869)][_0x3e3b24(0x74a)];_0x5d50c3[_0x3e3b24(0x627)]?this[_0x3e3b24(0x29c)]():this[_0x3e3b24(0x20c)]();},Window_BattleEnemy[_0x4b2772(0x632)][_0x4b2772(0x29c)]=function(){const _0x4c6a6e=_0x4b2772;if(this[_0x4c6a6e(0x616)]&&this['_enemies'][_0x4c6a6e(0x41a)](this['_lastEnemy'])){if(_0x4c6a6e(0xcd8)===_0x4c6a6e(0x691))this[_0x4c6a6e(0xaec)][_0x4c6a6e(0x340)](this[_0x4c6a6e(0x962)]);else{const _0x1dee5d=this[_0x4c6a6e(0x321)][_0x4c6a6e(0xae6)](this[_0x4c6a6e(0x616)]);this[_0x4c6a6e(0xae2)](_0x1dee5d);}}else _0x4c6a6e(0xb5a)!==_0x4c6a6e(0x8cd)?this[_0x4c6a6e(0x20c)]():this['_currentActor']=null;},Window_BattleEnemy[_0x4b2772(0x632)][_0x4b2772(0x20c)]=function(){const _0x2c6423=_0x4b2772,_0x422b7a=VisuMZ[_0x2c6423(0x67d)][_0x2c6423(0x869)][_0x2c6423(0x74a)];let _0x2b941e=![];$gameSystem[_0x2c6423(0x7d1)]()?_0x2b941e=_0x422b7a[_0x2c6423(0x3b0)]:_0x2b941e=_0x422b7a[_0x2c6423(0x3b8)],this[_0x2c6423(0xae2)](_0x2b941e?this[_0x2c6423(0x6ac)]()-0x1:0x0);},Window_BattleEnemy[_0x4b2772(0x632)][_0x4b2772(0xcb2)]=function(){const _0x2a1cd5=_0x4b2772;Window_Selectable[_0x2a1cd5(0x632)][_0x2a1cd5(0xcb2)]['call'](this),this['_lastEnemy']=this[_0x2a1cd5(0x79c)]();},Window_BattleItem[_0x4b2772(0x632)][_0x4b2772(0x41a)]=function(_0x5f57f9){const _0x31a3d7=_0x4b2772;if(!_0x5f57f9)return![];return _0x5f57f9[_0x31a3d7(0x9bb)]===0x0||_0x5f57f9['occasion']===0x1;};function Window_AutoBattleCancel(){const _0x9c5a8=_0x4b2772;this[_0x9c5a8(0xb0d)](...arguments);}Window_AutoBattleCancel[_0x4b2772(0x632)]=Object[_0x4b2772(0x861)](Window_Base[_0x4b2772(0x632)]),Window_AutoBattleCancel['prototype'][_0x4b2772(0x63a)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x4b2772(0x632)][_0x4b2772(0xb0d)]=function(_0x376442){const _0x24a8b7=_0x4b2772;Window_Base[_0x24a8b7(0x632)]['initialize'][_0x24a8b7(0xb2b)](this,_0x376442),this[_0x24a8b7(0x86b)](this[_0x24a8b7(0x9a2)]()),this[_0x24a8b7(0xa58)]();},Window_AutoBattleCancel[_0x4b2772(0x632)][_0x4b2772(0x9a2)]=function(){const _0x15cfe3=_0x4b2772;return VisuMZ['BattleCore'][_0x15cfe3(0x869)]['AutoBattle'][_0x15cfe3(0x3af)];},Window_AutoBattleCancel[_0x4b2772(0x632)][_0x4b2772(0xa58)]=function(){const _0x13ae5d=_0x4b2772;this[_0x13ae5d(0x2fb)][_0x13ae5d(0x4d6)]();const _0x12404f=VisuMZ[_0x13ae5d(0x67d)][_0x13ae5d(0x869)]['AutoBattle']['AutoBattleMsg'],_0x1c41d2=_0x12404f['format'](this[_0x13ae5d(0x69b)](),this[_0x13ae5d(0x85f)]()),_0x49bfb5=this[_0x13ae5d(0x5c2)](_0x1c41d2)[_0x13ae5d(0x67b)],_0x44a9c4=Math[_0x13ae5d(0x805)]((this[_0x13ae5d(0xb52)]-_0x49bfb5)/0x2);this[_0x13ae5d(0x3c3)](_0x1c41d2,_0x44a9c4,0x0,_0x49bfb5);},Window_AutoBattleCancel[_0x4b2772(0x632)][_0x4b2772(0x69b)]=function(){const _0x4906ab=_0x4b2772;return Imported['VisuMZ_0_CoreEngine']?TextManager[_0x4906ab(0x235)]('ok'):VisuMZ[_0x4906ab(0x67d)][_0x4906ab(0x869)][_0x4906ab(0x985)][_0x4906ab(0x295)];},Window_AutoBattleCancel[_0x4b2772(0x632)]['cancelButtonText']=function(){const _0x18ead2=_0x4b2772;if(Imported[_0x18ead2(0x2d5)]){if('oOhlA'!==_0x18ead2(0x860))this[_0x18ead2(0x421)]()==='border'?this[_0x18ead2(0x8f6)]['x']=0x8:this[_0x18ead2(0x8f6)]['x']=-this[_0x18ead2(0x8f6)][_0x18ead2(0x67b)]-0x4;else return TextManager[_0x18ead2(0x235)](_0x18ead2(0x7f5));}else return VisuMZ['BattleCore'][_0x18ead2(0x869)][_0x18ead2(0x985)][_0x18ead2(0x551)];},Window_AutoBattleCancel[_0x4b2772(0x632)][_0x4b2772(0x49d)]=function(){const _0x2d7083=_0x4b2772;Window_Base[_0x2d7083(0x632)][_0x2d7083(0x49d)][_0x2d7083(0xb2b)](this),this[_0x2d7083(0x6da)](),this[_0x2d7083(0xbda)]();},Window_AutoBattleCancel[_0x4b2772(0x632)][_0x4b2772(0x6da)]=function(){const _0x4a5ff9=_0x4b2772;this[_0x4a5ff9(0x30d)]=BattleManager[_0x4a5ff9(0xba3)];},Window_AutoBattleCancel['prototype'][_0x4b2772(0xbda)]=function(){const _0x26ba63=_0x4b2772;if(!BattleManager[_0x26ba63(0xba3)])return;(Input[_0x26ba63(0xa89)]('ok')||Input[_0x26ba63(0xa89)]('cancel')||TouchInput[_0x26ba63(0x707)]()||TouchInput[_0x26ba63(0x630)]())&&(_0x26ba63(0xb6f)!==_0x26ba63(0xb6f)?(_0x4c4e6a[_0x26ba63(0x67d)][_0x26ba63(0x7df)][_0x26ba63(0xb2b)](this,_0x5274f4),this[_0x26ba63(0x9da)]()):(SoundManager[_0x26ba63(0xcbd)](),BattleManager[_0x26ba63(0xba3)]=![],Input['clear'](),TouchInput[_0x26ba63(0x4d6)]()));};function _0x4df9(){const _0x19806d=['XSvRe','Weapon-%1-%2','mBWMv','PreDamageAsUserJS','_damageContainer','BattleManager_initMembers','Sprite_SvEnemy','isCommandEnabled','JS\x20ESCAPE\x20SUCCESS','rBOKf','AllowRandomSpeed','ActSeq_Horror_Clear','addActor','battleback2Name','updateAttachmentSprites','MaxLines','updateRefresh','Game_Action_itemHit','LxlnV','_shadowScaleY','_callSceneOptions','setSvBattlerSprite','UFHff','EsFRt','Sprite_Enemy_setBattler','Abueg','NBYmA','filter','MJKCO','battleSkew','hchMa','addShowHpGaugeCommand','mmp','SceneManager_isSceneChanging','PreStartActionJS','isForOpponentBattleCore','_svBattlerData','ScaleY','displayBattleCoreTransitionErrorMsg','_lines','MBDen','linkSprite','Sprite_Battler_updateMain','VisuMZ_2_HorrorEffects','rNNoC','isDying','swapEnemyIDs','battleEffect','requestDragonbonesAnimation','displayAddedStates','_autoBattle','_damages','getMenuImage','canInput','createBattleFieldContainer','frameVisible','removeOnceParallelInterpreter','setupActionSet','ActSeq_Horror_NoiseCreate','PopupShiftX','createHpGaugeSprite','updateBattleProcess','nyhqd','Game_Action_executeDamage','performCastAnimation','startTpbTurn','isOTB','ResetOffset','isOpponent','isCertainHit','_skewDuration','paZDW','NUM','performSTBExploiter','ActSeq_Impact_ZoomBlurTargetCenter','PreStartBattleJS','VisuMZ_3_BoostAction','_createCursorArea','ActSeq_Mechanics_BreakShieldReset','lrCbB','isTpbMainPhase','ActionAnimation','_cursorSprite','_battleCoreBattleResumeAfter','CalcEscapeRaiseJS','filterArea','ActiveTpbOptionsMessage','AgqJD','message2','GPpQP','createBorderStylePortraitSprite','setHome','IfjHn','drawIcon','changePaintOpacity','weaponImageId','ActSeq_BattleLog_DisplayAction','displayItemMessage','isFrameVisible','ActSeq_Mechanics_Multipliers','FjpWS','DigitGrouping','performCounter','_namesCount','makeSpeed','updateCancel','addLoadListener','command3011','wISom','FbpRR','\x20to\x20%1\x20midbattle.','displaySubstitute','onRegeneratePlayStateAnimation','Scene_Battle_startPartyCommandSelection','ePsEY','KpnEn','isSpriteVisible','wauOE','Victory','actionSplicePoint','cgWWt','_commonEventQueue','FxtrM','QWJEJ','OffsetY','addedBuffs','removedBuffs','_interpreter','anchorY','initMembers','concat','JS\x20%1START\x20TURN','FlashDuration','registerCommand','AGI','startActorCommandSelection','VariableHeal','IbUXW','filters','getDualWieldTimes','HIFaU','opponentsUnit','JpxZA','Scene_Battle_windowAreaHeight','attackAnimationIdSlot','startBattle','ActorCmd','getHalfActionsPTB','Window_BattleLog_displayEvasion','inBattle','nQrWH','Scene_Battle_onActorOk','JS\x20BATTLE\x20DEFEAT','ActionEnd','addOptionsCommand','updateBattlebackBitmap','VisuMZ_3_ActSeqProjectiles','OEzdP','OAjMq','VuQov','CheckSkillCommandShowSwitches','sliceMin','BattlebackScale','partyCommandWindowRectBorderStyle','CmdIconEscape','updateShadowPosition','parent','die','KmgTJ','XPActorDefaultHeight','createActionSequenceProjectile','addDamageSprite','destroyDamageSprite','gainHp','contentsOpacity','_baseX','eusJo','DLclD','_linkedSprite','split','Armor-%1-%2','Sprite_Battler_isMoving','initBattlePortrait','FfTPM','HelpFight','alive\x20battlers','performMoveToTargets','loop','updateCommandNameWindow','WdfLU','IconStypeNorm','cSrZq','prev\x20target','DefaultSoftScaler','setHalfActionsPTB','startInjectAnimation','LLgUK','jsOneForOne','Scene_Map_launchBattle','processActorCommandCancelTPB','_commandNameWindow','drDyF','BattleManager_onEncounter','processBorderActor','freezeFrame','zxuMO','ODUHf','Mute','getAttackWeaponAnimationId','_targetFloatHeight','clearHorrorEffects','makeSuccess','Scene_Battle_createActorCommandWindow','createDigits','Scene_Battle_createAllWindows','_angleWholeDuration','getAttackMotion','isAnimationShownOnBattlePortrait','StartTurnMsg','commandNameWindowDrawText','Game_BattlerBase_canAttack','autoBattleUseSkills','XyYlk','qcJMG','battleOpacity','_commonEventIDs','onDatabaseLoaded','hasStaticSvBattler','battleCommandName','windowPadding','addWeaponSwapCommand','Game_Action_applyGlobal','battleDisplayText','WcRUh','LcxEA','EnableSoftCap','updateOnceParallelInterpreters','displayReflection','needsSelection','zTFZF','setupCriticalEffect','equipSlots','Sprite_Damage_createChildSprite','list','pointX','WamsQ','createEnemyNameContainer','BattleManager_checkSubstitute','Strength','applyDamageCaps','PostRegenerateJS','rnjZs','setWaitMode','bQqks','XjYRQ','Turns','BattleManager_startInput','_skillIDs','EYtfu','setup','_baseTexture','param','gXLRL','_waitCount','criticalDmgFlat','createBattleFieldBattleCore','mainSprite','rowSpacing','xGNaA','FfBqE','_floatEasing','initMembersBattleCore','SmoothImage','cameraDuration','enemyId','%1Event','FollowTurn','addSkillCommands','seJaW','DamageStyleList','_totalValue','ELwDF','isPreviousScene','deadMembers','BindCommonEventKeysForGroup','displayHpDamage','SRDrm','ShuffleArray','CmdStyle','_animationContainer','SkillItemBorderCols','svShadow','ActionSkillMsg1','updateEventMain','MDF','command357','removeDamageSprite','Game_Action_setAttack','CombatLogIcon','isChanting','HkaCd','QpiFu','Targets1','portrait','VisuMZ_2_BattleSystemOTB','WaitForZoom','PopupPosition','YQYxK','urwbg','+%1\x20MP','StartName','hitFlat','FHNRC','Game_Map_encounterList','EUfhe','APiKG','Game_BattlerBase_refresh','MeleeDistance','baQxe','Scene_Battle_start','incRE','callOkHandler','Window_BattleLog_displayMpDamage','ActionSequence','missile','_itemWindow','MANUAL','Style','drawItemImagePortraitStyle','ActSeq_ChangeSkew','ParseClassNotetags','isBuffAffected','playCancel','_customDamageFormula','LRztl','_motionCount','MpMjI','startSpin','applySoftDamageCap','finishActionSet','_enemyId','blockWidth','moveToStartPositionBattleCore','_forcedHomeY','AvSZE','cyTWL','qBdmV','DefeatEvent','isBTB','Sprite_Actor_update','active','isCustomActionSequence','HEPZW','_battleCoreBattleStartEvent','uCOTY','skew','STRUCT','uZxpZ','FWUVh','CLaoL','boxWidth','Elements','qmFMX','thrust','Scene_Battle_startActorCommandSelection','drawItemStyleIconText','Amp','PreEndActionJS','_battlePortrait','WCMWJ','isCTB','DamageStyles','weapons','makeData','ActSeqImpact','WYXJp','lineRect','MnOIx','FxgoZ','autoSelect','AS\x20TARGET','hQcsL','sKPJo','isOnCurrentMap','ChargeRate','RDRvV','BattleDefeatJS','_jumpMaxHeight','weatherType','canUseItemCommand','JS\x20BATTLE\x20VICTORY','wCDgh','drawItemStatus','qnpCR','displayCritical','UYdAd','ncJeH','drawItem','StatusWindowAttachmentFront','SyMkT','makeAutoBattleActions','createCancelButton','auto','WaitCount','ActionSkillMsg2','softDamageCap','process_VisuMZ_BattleCore_PreBattleCommonEvent','createActors','alterChange','JS\x20%1END\x20TURN','length','VisuMZ_2_BattleSystemATB','Scene_Map_updateCallMenu','_phase','wrvBG','vertCells','buffAdd','_requestRefresh','Sprite_Battler_damageOffsetX','XmZcv','bottom','regenerateAll','kSHxc','fmOUd','_createCursorSprite','stiGp','Window_BattleLog_displayCurrentState','Uujyg','ukVzf','itemHit','createWeather','dYDBw','LywKo','updateMain','setActionState','command301','_currentActor','_windowLayer','Game_Action_clear','requestPointAnimation','_forcedBattleLayout','Game_Interpreter_updateWaitMode','YJfgo','24243039riVrGb','JeVVH','autoSelectPriority','tone','max','ActSeq_BattleLog_Clear','updateMotionCount','wMkgw','all\x20targets','drain','_autoBattleWindow','setHue','itemLineRect','playOnceParallelInterpreter','boxHeight','CommandWidth','_preemptive','performReflection','meLVa','_shadowScaleX','_scene','push','McBEh','HelpItem','resizeWindowBorderStyle','wSiuL','Spriteset_Battle_update','performFlinch','gainTp','VisuMZ_2_BattleSystemBTB','AUTO\x20BATTLE','Sprite_Enemy_update','XKjue','changeCtbCastTime','GlVWA','vENCT','SkipPartyCmd','psswv','addChildAt','ShowAddedBuff','MP_Flat','addCustomCommands','_dragonbonesSpriteContainer','getInputButtonString','setupHpGaugeSprite','anshR','left','fillRect','opacityStart','_index','makeDeepCopy','ekHZp','Game_Battler_performMiss','AttachStateOffsetY','battlerSmoothImage','performTpbActiveCheckSwitch','adjustPosition','ext','onOpacityEnd','text','tVEep','WaitForEffect','front\x20base','requestMotionRefresh','nameY','_tpbSceneChangeCacheActor','Game_Interpreter_command283','displayReflectionPlayBack','AddHpGaugeOption','_makeFontNameText','ShowCosts','attackAnimationId2','Game_BattlerBase_initMembers','STB','PreApplyAsUserJS','isSpinning','loadSystem','DamageRate','Game_BattlerBase_isStateResist','updateActors','PortraitScaleBorderStyle','startDamagePopup','EUsMU','CheckMapBattleEventValid','displayBuffs','ATK','guardSkillId','isAnyProjectilePresent','ShowAddedState','applyItem','ActSeq_Movement_WaitForMovement','battleProjectiles','isAnyoneChangingOpacity','smooth','PostDamage%1JS','updateEffectsContainer','ActSeq_Mechanics_DamagePopup','prepareBorderActor','addBattleCoreAutoBattleStyleCommand','_defeatedEnemies','ElementStatusCore','KBJIb','gainMp','updateForceAction','makeActionList','exJcs','yzzAz','CommandAddAutoBattle','ActSeq_Animation_ShowAnimation','ActSeq_Mechanics_StbExtraAction','EasingType','ScaleDown','BattleLogRectJS','Game_Action_itemEffectAddAttackState','%1EndActionJS','WGFNM','isGrowing','PreEndBattleJS','bChba','_updateClientArea','mJfFR','_opacityEasing','applyResultSwitches','isNonSubmenuCancel','CastMagical','battleCommands','BuITQ','updateLink','note','tskwf','HpGauge','setBattlerFlip','subject','ActSeq_Movement_WaitForFloat','_currentAngle','setupBattleCore','_targetGrowY','ActSeq_BattleLog_AddText','fLkhw','AutoBattleOK','kmusD','BattleManager_checkBattleEnd','HFYBD','ActSeq_Horror_TVCreate','Sprite_StateIcon_updateFrame','_opacityWholeDuration','autoSelectLastSelected','YdfcK','showHelpWindow','removeChild','ShowRemovedBuff','DistanceAdjust','AttackAnimation','extraHeight','HPLPY','qSkFO','isTurnBased','WzOQf','ActSeq_Set_WholeActionSet','TgVCc','_tempBattler','forceWeaponAnimation','createAllWindows','transform','Rate','TtBOl','statusWindowRectBorderStyle','DbkcN','lvTkZ','refreshBattlerMotions','Window_BattleLog_clear','ParseEnemyNotetags','JGvBr','nMbXn','uXkcA','TargetLocation','getLastPluginCommandInterpreter','ConfigManager_applyData','_immortal','ttmtJ','JNIbZ','createCommandVisibleJS','battleJump','BravePoints','isQueueOptionsMenu','IcHPM','alterType','Scene_Battle_helpWindowRect','VisuMZ_1_SkillsStatesCore','makeTargetsBattleCore','HalfActions','finishActorInput','endAction','FlinchDistanceY','updateHelp','Sprite_Actor_updateBitmap','TP_Flat','gradientFillRect','waitForEffect','ParseArmorNotetags','Azzcj','performMagicEvasion','updateStateIconSprite','VisuMZ_0_CoreEngine','Qhwuo','hpDamage','removeStatesAuto','emcgk','process_VisuMZ_BattleCore_Failsafes','setupIconTextPopup','encounterList','BaseTroopIDs','ActSeq_Mechanics_CustomDmgFormula','sHfpG','arRedFlat','xTItT','arRedRate','substitute','CoreEngine','_mainSprite','createShadowSprite','addAutoBattleCommands','top','undecided','Necwb','ActSeq_Horror_NoiseRemove','placeGauge','battleCoreResumeLaunchBattle','dying','ActSeq_Target_CurrentIndex','loadEnemy','Atslg','BoxMargin','processForcedAction','refreshStatusWindow','yrOxe','2908137aLiwxc','damageOffsetX','ARRAYJSON','displayFailure','attack','contents','cancelActorInput','_lastAction','MpGaugeOffsetY','WaitForSkew','ArPenFlat','ArPenRate','TpGaugeOffsetX','battlerSprites','SPwQb','processRefresh','clearOnceParallelInterpreters','setBattlerMotionTrailData','Sprite_AnimationMV_updatePosition','<CUSTOM\x20ACTION\x20SEQUENCE>','item','tkshy','targetObjects','visible','VxCeF','isUndecided','performCollapse','getStypeIdWithName','vhhgv','forceEscapeSprite','DefaultDamageStyle','TJgnO','createAttachedSprites','changeCtbChargeTime','pUmgi','isTickBased','inputtingAction','_indent','createHelpWindow','BattleManager_isTpbMainPhase','wuZkP','VqnXW','Game_BattlerBase_canGuard','_enemies','svBattlerShadowVisible','autoBattleWindowRect','Scene_Map_initialize','itemCri','ARRAYSTR','updateEffectContainers','dataId','onEnemyCancel','adjustWeaponSpriteOffset','isForFriend','frameDelay','_borderPortraitSprite','iterateBattler','YfGja','showPortraits','DBDUI','doesPageHaveOnceParallelStart','SKILLS','HomePosJS','BattleLayout','StyleOFF','SWGrh','JUklH','processRandomizedData','IwMAa','rfAXe','TszhU','NhjZa','removeImmortal','damage','addChild','selectNextCommand','_cursorArea','Window_BattleLog_performCounter','isPlaytest','itemEffectAddAttackState','makeDamageValue','ugRAB','ActSeq_Camera_WaitForCamera','flashColor','_spriteset','qjqMB','ActSeq_Movement_WaitForOpacity','setHelpWindow','ActSeq_Element_AddElements','Window_BattleStatus_drawItemImage','startHomeMove','updateOpacity','action','dqNSk','_targetHomeX','center','flashDuration','critical','Game_Interpreter_PluginCommand','_homeEasing','+%1','ActSeq_Mechanics_VariablePopup','updateShadow','VariableDmg','ActSeq_Mechanics_TextPopup','UBRvb','applyFreezeMotionFrames','ActSeq_Impact_MotionTrailRemove','MikQw','VITIA','ParseStateNotetags','getSkillIdWithName','ClearBattleLog','removeActor','hnoRU','_motionType','slice','Actions','_actionBattlers','Pmolj','allBattleMembers','SZYAU','VisuMZ_2_PartySystem','battlelog','Scene_Options','JscMt','getTraitSetKeys','8766360sFARGa','UKpgg','setHorrorEffectSettings','aNhwF','animationNextDelay','makeCommandList','selectNextCommandTpb','createHelpWindowBattleCore','_stateSprite','string','Destination','description','onFloatEnd','clearFreezeMotionForWeapons','onAngleEnd','getConfigValue','ActSeq_Target_RandTarget','canEscape','_targetHomeY','battleCommandIcon','TUBRp','isBorderStylePortraitShown','JumpToLabel','PreRegenerateJS','open','Window_BattleLog_performMagicEvasion','isBusy','isActing','adjustPosition_ScaleDown','CQOou','isDeathStateAffected','isDTB','lgrMK','isDamagePopupRequested','waitForFloat','clearDamagePopup','_jumpHeight','FMfwy','VisuMZ_3_ActSeqCamera','isAlwaysHidden','clearActiveWeaponSlot','ZAhRc','victory','Yixup','XPSpriteYLocation','criticalDmgRate','createTroopNote','rDyyE','performWeaponAnimation','alive\x20opponents','krCmy','preparePartyRefresh','ilXtk','GjNDN','xErKD','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','playOnceParallelTroopPage','clearBattleCoreData','AutoBattleBgType','SideviewSelect','ZKLeF','repeats','qSgCS','ussuA','eraseState','Scene_Boot_onDatabaseLoaded','adjustFlippedBattlefield','FrontViewSelect','pause','startActorSelection','callOptions','zxiNT','DamageDisplay','_isBattlerFlipped','processPostBattleCommonEvents','isTpbCharged','ParseSkillNotetags','addItemCommand','drawTextEx','Sprite_Battler_initMembers','attackSkillId','_executedValue','spinBattler','_enemy','battleGrow','oZcBr','GRrpR','traitObjects','Shadow2','removeState','StatusWindowAttachmentFrontOffsetX','Variable','gainBravePoints','clearBattleRefreshRequest','isNextSceneBattleTransitionable','performDamage','Window_BattleLog_performActionStart','physical','checkBattleEnd','ChantStyle','iDDDb','createDamageSprite','OVpCC','_animationSprites','XngTf','Window_BattleLog_refresh','motionSpeed','WSeTS','addBuff','isAnyoneFloating','BattleManager_processVictory','AttachStateOffsetX','drawItemImage','lOtoZ','hasSvBattler','%1Apply%2JS','isTeamBased','HelpSkillType','_svBattlerSprite','BattleStartEvent','AutoBattleRect','bitmapWidth','isDead','_battlerContainer','isFloating','close','RaCph','PostApply%1JS','ACjcM','version','ActSeq_Mechanics_PtbAlterCost','Scene_Battle_createPartyCommandWindow','_helpWindow','drawItemBackground','ActSeq_Mechanics_EnemyEscape','ZaejK','ijjFg','waitForJump','_enemyNameContainer','stepForward','isAnyoneMoving','command119','_text','AnchorX','Game_Action_makeTargets','Game_Battler_clearDamagePopup','Sprite_Enemy_updateCollapse','HQgnO','VisuMZ_2_BattleSystemSTB','Game_Battler_regenerateAll','ANTI_TINT_UI','_forcing','KkceI','FullActions','BreakShields','TpbGaugeOffsetX','actorCommandCancelTPB','ActSeq_Projectile_Icon','_methods','DJKKC','addExtendedTroopMembers','checkTpbInputOpen','updateInterpreter','helpWindowRectBorderStyle','OmuSm','includes','attackMotions','isJumping','Aayyc','getDefeatedEnemies','WMUBJ','setVisibleUI','battleLayoutStyle','KeTQY','EFFECT_COMMON_EVENT','joAYQ','performAttack','_tpbNeedsPartyCommand','dead\x20actors','XpmGD','MotionIdle','ActSeq_Mechanics_DeathBreak','startJump','updateFrame','Game_Enemy_setup','applyTargetFilters','visualHpGauge','PostDamageJS','isForOpponent','createString','XTZvi','moveBattlerDistance','svBattlerAnchorX','helpAreaHeight','HsNTO','isATB','PostDamageAsUserJS','EpYty','ReflectPlayback','splice','addAttackCommand','wyfLs','MAXHP','_back1Sprite','switchToWeaponType','popupDamage','NLZqO','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','GhzSw','NameOffsetY','hasSkill','displayTpDamage','checkSubstitute','CalcActionSpeedJS','startGrow','NextTurn','onActorCancel','shift','StateIconOffsetX','SvWeaponMass-%1-%2','selectNextActor','_flinched','loadSvEnemy','customDamageFormula','Game_Action_apply','randomTargets','charging','setBattleZoom','toIgY','jgGgz','Direction','Wave','CeiwJ','zaoyb','battleUIOffsetX','Eydwq','Spriteset_Battle_createLowerLayer','executeDamage','_action','terminate','applyCritical','QQStZ','cutGo','IAvau','setHandler','cYPLg','NodmG','setBattleCameraPoint','isBattlerGrounded','displayEvasion','swing','FJLHo','updateHpGaugePosition','getNextDamagePopup','setMoveEasingType','CopyCombatLog','_cache','Filename','_weaponImageId','cnqvJ','hPTIW','_actorSprites','ParseActorNotetags','kUwOj','ZTilM','alive\x20friends\x20not\x20target','textAlign','BattleManager_onEscapeSuccess','autoBattle','pauseInjectAnimation','gEriQ','ByZOR','Game_BattlerBase_eraseState','isMeleeSingleTargetAction','onBattleStartOnceParallels','weatherPower','applyGuard','updatePhase','jSKYa','KyNcM','pattern','HwjUq','<CENTER>%1','effects','VisuMZ_2_BattleSystemETB','isEffecting','mGPrV','glitch','ActSeq_Projectile_Animation','onBattleStartBattleCore','Wxisw','parse','applyGlobalCommonEventNotetags','actorCommandEscape','validTargets','XEvSb','update','stepFlinch','TpGaugeOffsetY','join','_targetSkewX','useDigitGrouping','VqpmF','Window_BattleLog_performAction','aQgwN','QBoYd','ActSeq_Movement_HomeMoveBy','addTextToCombatLog','clearForcedGameTroopSettingsBattleCore','floatBattler','addFightCommand','setFullActionsPTB','createCommandNameWindow','casting','battleback1Name','damageContainer','children','updateStaticSvBattlerFrames','ActSeq_Angle_Reset','PostApplyJS','result','qRzNs','ShowWeapon','setBattleAngle','BattleManager_onEscapeFailure','startMotion','autoMeleeMultiTargetActionSet','battleMove','Scene_Battle_partyCommandWindowRect','_backAttachmentSprite','Game_Actor_equips','vBXaf','selectPreviousCommand','updateStyleOpacity','height','TyDIH','Sprite_Enemy_setHue','createTargetsJS','dimColor1','TpbGaugeOffsetY','statusWindowRectXPStyle','ResetFocus','5824EMHaMq','zoomDuration','ACywf','_growY','unshift','Window_Options_statusText','JS\x20%1APPLY\x20%2','ydoez','iconIndex','amNrp','OBNtW','clear','zSdfk','spxbr','spell','alive\x20battlers\x20not\x20target','zCLRj','uXRDX','UpUJC','PNStY','Sprite_Battler_setHome','_visualHpGauge_JustDied','createAutoBattleWindow','_motion','setupNegativeImpactFilter','processVictory','CurrentTurn','extendTroopMembers','addMeleeReturnActionSet','isBattleSys','SiwBl','MpGaugeOffsetX','_distortionSprite','createActorCommandWindowBattleCore','round','ActSeq_Mechanics_AnalyzeWeakness','addSingleSkillCommand','sortDamageSprites','_subject','Window_SkillList_maxCols','CheckVisibleSkillNotetags','MIN_SAFE_INTEGER','_tpbState','lMYJE','Point','coreEngineRepositionEnemies','bFbtk','Window_BattleLog_performCollapse','IgVii','_attackAnimationId','_padding','_jumpDuration','SwitchCritical','AutoNotetag','Scene_Battle_stop','process_VisuMZ_BattleCore_jsFunctions','lnWUv','sleep','FZqPf','isStatusAffected','actorCommandAutoBattle','save','Debuffs','qFVTS','_battlerHue','Game_Troop_expTotal','EnableDamageCap','changeBattlerOpacity','processEscape','IJfQg','updateAngleCalculations','uiInputPosition','windowskin','placeTimeGauge','commandName','DxXjV','ARRAYEVAL','Immortal','animationId','drawItemImageXPStyle','ftxnA','updateWeather','code','qZnyi','Window_BattleEnemy_show','WaitForProjectile','cWoRP','onBattleEndBattleCore','default','_angleRevertOnFinish','alive\x20friends','damageStyle','ChangeOrderBy','JIKQb','commandNameWindowDrawBackground','Window_BattleLog_performRecovery','Actor-%1-%2','HitFlat','drawBackgroundRect','sOSdb','cameraClamp','base','yjmaI','CheckVisibleSwitchNotetags','HosLh','Spriteset_Battle_createBattleField','_enemyIDs','Scene_Battle_terminate','ActSeq_DB_DragonbonesMotionAni','addGeneralOptions','LPrYZ','expTotal','checkAutoCustomActionSequenceNotetagEffect','yvLRu','VisuMZ_2_BattleSystemPTB','isOpen','pages','isAtbChargingState','DistanceX','onHomeMoveEnd','SvJAC','ActSeq_Movement_Skew','MotionFrameWait','Scene_Battle_updateStatusWindowPosition','UFOuz','TEwlP','canGuardBattleCore','isAnyoneInjectAnimating','EscapeSuccess','DEF','VisuMZ_4_CombatLog','Sprite_Weapon_loadBitmap','getItemDamageAmountLabelOriginal','magicSkills','AutoBattleCancel','_actorWindow','Window_ActorCommand_setup','setTroopPage','_createClientArea','clearActiveWeaponSet','snapForBackground','JIibJ','PreEndTurnJS','Sprite_Battler_updatePosition','createChildSprite','KPzvN','ActSeq_Movement_WaitForScale','scope','OffsetAdjust','battleStatusSprite','LNAxA','addedDebuffs','AoCAP','bSjME','Window_PartyCommand_initialize','prepareCustomActionSequence','createSeparateDamagePopups','_borderPortraitTargetX','performMiss','_effectsContainer','ShowHpDmg','numRepeats','Scene_Battle_onActorCancel','addNewState','_targetGrowX','offsetY','drawLineText','isForFriendBattleCore','\x5cI[%1]%2','extraPositionScaledY','createDistortionSprite','frontviewSpriteY','_preBattleCommonEvent','StartTurnShow','lRqGr','_escapeRatio','FaceAway','jsScaleToFit','_battler','UQUDE','StepDistanceY','xsUhC','EHDst','onEnemyOk','ActSeq_Mechanics_PtbConvert','Class-%1-%2','Scene_ItemBase_applyItem','%1EndBattleJS','Exploiter','Ekqwg','Sprite_Actor_createStateSprite','_battleCoreForcedElements','startWeaponAnimation','updateWaitMode','Spriteset_Battle_updateActors','CriticalDmgFlat','isItem','ScaleToFit','QCshy','options','fHvWx','Game_Party_addActor','performActionEnd','sliceMax','autoBattleStart','jump','StatusWindowAttachmentBack','removeBuffsAuto','#%1','waitCount','turnCount','displayMiss','Scene_Party','resize','chant','forceAction','DAvDI','clone','AdjustRect','StepDuration','Window_BattleLog_displayMiss','playEnemyDamage','_partyCommandWindow','isHiddenSkill','attackStatesRate','StatusWindowAttachmentBackOffsetX','getHardDamageCap','SvBattlerSolo-%1-%2','addBattleCoreAutoBattleStartupCommand','process_VisuMZ_BattleCore_CommonEventKeys','Buffs','mMXKt','ShowFacesListStyle','process_VisuMZ_BattleCore_BaseTroops','BFpLK','Ttzpe','resizeWindowXPStyle','createAttachmentSprites','partyCommandWindowRectDefaultStyle','alive\x20enemies\x20not\x20user','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','_growDuration','KDQnd','DTyXa','Pbrfd','Setting','ActSeq_ChangeAngle','textSizeEx','BhoJX','notFocusValid','wait','oZThU','startOpacity','EqOCj','TDxWR','Scene_Map_initializeAfter','Window_BattleLog_performMiss','updateCustomActionSequence','XfgHN','ActSeq_Movement_Float','walk','Window_BattleLog_performSubstitute','RegExp','MMXpy','LiFyK','current\x20target','ActSeq_Mechanics_CtbSpeed','createContents','commandStyle','_growEasing','ZICUG','makeActionOrders','canAttackBattleCore','_allTargets','%1StartActionJS','waitForAnimation','Game_Action_setGuard','fnordRemovedStates','Window_BattleLog_displayFailure','vARFN','createAnimationContainer','slices','5352KxVxpr','PnKbg','ShowMissEvasion','padding','gaugeLineHeight','isMoving','UdgMj','setupMotionBlurImpactFilter','uiMenuStyle','ActSeq_Impact_Negative','updateAttachedSprites','hue','ShowCurrentState','setActorHome','mainSpriteHeight','SvMotionIdleSolo-%1-%2','MmHCQ','gNmBU','partyCommandWindowRectXPStyle','battleEnd','getColor','setupBattlebackBattleCore','addChildToUiContainer','BattleManager_startBattle','toUpperCase','ActSeq_Motion_PerformAction','applyForcedGameTroopSettingsBattleCore','POST-','PreApplyJS','SQeoe','checkExtendTroopCompatibility','ActSeq_Movement_HomeMoveToPoint','CTB','gMGeo','_target','_frame','ActSeq_Impact_MotionTrailCreate','helpWindowRect','addText','ActSeq_Movement_Spin','pushBaseLine','reCCG','isAlwaysVisible','jAFEz','alECD','effect','onSelectAction','#ffffff','startMove','_lastEnemy','dead\x20enemies','_floatHeight','randomInt','SMggb','Text','IEhgm','isFastForward','nkTAb','performRecovery','onEscapeFailure','pointY','COMBAT\x20LOG','createKeyJS','bind','setupWeaponAnimation','user','LastSelected','ActSeq_Weapon_ClearActiveWeapon','Override','_battlerName','GPksC','smjVb','_additionalSprites','dpNcp','Game_Action_isForRandom','isCancelled','dead\x20battlers','prototype','performJump','growBattler','_injectAnimationSprite','Window_BattleStatus_initialize','States','updateSkew','iconText','constructor','_waitMode','SLMOr','makeActionListAutoAttack','moveBattlerToPoint','expRate','ActSeq_Horror_GlitchRemove','timeScale','BattleManager_cancelActorInput','waitForMovement','members','refreshRequest','Sprite_Enemy_initVisibility','XtCvW','actionBattleCoreJS','wVnoU','_lastPluginCommandInterpreter','isFightCommandEnabled','BindCommonEventKeysForObj','hxSGr','hpAffected','isOptionsCommandAdded','displayAffectedStatus','stateRate','FLBsK','stepBack','JIYGd','Mirror','KWcYz','displayAction','maRfd','ActSeq_Mechanics_HpMpTp','attachSpritesToDistortionSprite','_updateFilterArea','orTvu','_active','iconHeight','VisuMZ_3_SideviewBattleUI','displayCounter','waitForNewLine','stopInjectAnimation','launchBattle','NameAlwaysVisible','setupBattleCoreData','checkShowHideBattleNotetags','Sprite_Actor_updateFrame','aliveMembers','setCommonEvent','_animation','damageRate','_effectDuration','requestMotion','repositionEnemiesByResolution','SLgBs','rGENC','_appeared','changeTurnOrderByCTB','Jeqyy','mSsuQ','YugOy','WaitForMovement','alterPriority','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','isForRandom','wtypeId','width','onMoveEnd','BattleCore','isPartyCommandWindowDisabled','_animationCount','iOtyY','Damage','Scene_Battle_initialize','createBattleUIOffsetX','updateBattlebackBitmap1','_freezeMotionData','updateStart','CreateCommonEventKeys','1369332WIzveH','offsetX','SceneManager_push','float','ActSeq_Mechanics_FtbAction','StatusWindowAttachmentBackOffsetY','BTB','_damagePopupArray','_jumpWholeDuration','NugAQ','MotionAni','commandAutoBattle','ConfigManager_makeData','process_VisuMZ_BattleCore_PluginParams','_baseLineStack','NameOffsetX','currentValue','DefaultSoftCap','_angleEasing','okButtonText','ShowSubstitute','isCommonEventReserved','ActSeq_BattleLog_Refresh','teeGQ','EnKMs','brErk','PRE-','Game_Actor_setup','Window_BattleLog_displayTpDamage','displayType','ActionEndUpdate','BTestBypass','ActSeq_Mechanics_ArmorPenetration','isBattlerFlipped','isCustomBattleScope','battleSys','maxItems','ParseItemNotetags','qVSAE','UGxqq','jxdGx','applyVariance','SQAki','addSkillTypeCommand','PostEndBattleJS','eWYxi','_emptyBitmap','Game_Action_numRepeats','skill','UjQdQ','PostEndTurnJS','canGuard','maxTp','adjustPosition_ScaleUp','statusTextAutoBattleStyle','actionEffect','_logWindow','gainCurrentActionsFTB','KXYYR','performMoveToPoint','_speed','Slot','onEscapeSuccess','isActiveTpb','CmdIconItem','commandStyleCheck','lhjTx','ActSeq_Animation_ActionAnimation','show','rrqBQ','_battleCoreNoElement','_hpGaugeSprite','ActSeq_Impact_Desaturate','BattleManager_endBattle','clearResult','FlashColor','ysdGu','skillWindowRect','OffsetX','isPreviousSceneBattleTransitionable','ActSeq_Element_ForceElements','CUShP','updateVisibility','EjjPY','displayRemovedStates','FzKTq','bitmap','State-%1-%2','tpbCommandFight','IBJZI','Window_BattleLog_pushBaseLine','attackStates','PnqqZ','setHelpWindowItem','TUfwE','CmdTextAlign','globalAlpha','fnordAddedStates','damageOffsetY','MotionType','drawItemStyleIcon','VisuMZ_3_ActSeqImpact','maxCols','VisuMZ_2_BattleSystemFTB','createAnimationSprite','FtgCM','TBkWM','requestAnimation','updateBorderStyle','applyGlobal','ActSeq_Movement_MoveBy','hide','PreDamageJS','Game_Enemy_transform','gParo','sYxeG','ActSeq_Motion_MotionType','Wgrto','SkewX','isBreakStunned','mkaIK','QNPdv','delay','dead\x20opponents','DhCln','qVJSq','Game_Battler_forceAction','isClicked','ShowTpDmg','WaitForAngle','zCLCa','BattleManager_startAction','getBattlePortraitOffsetY','PostApplyAsUserJS','isDuringNonLoopingMotion','refreshDimmerBitmap','bossCollapse','VzbzF','mJrLb','commandEscape','clearFreezeMotion','createActorCommandWindow','isBypassDamageCap','xqItj','_actorCommandWindow','processAnimationRequests','jsScaleDown','SwitchMissEvade','SvHNR','redraw','maxBattleMembers','isConfused','ynhOv','BackColor','_colorType','EBrVo','mainSpriteScaleY','escape','isCharging','setupChild','Window_BattleLog_popupDamage','Window_ActorCommand_initialize','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','TpbActiveChangeEnabled','isMagical','ConvertParams','_endBattle','updateStateSprite','kgiUv','SWInD','itemWindowRect','createPartyCommandWindow','Name','AGSCE','removeHorrorEffect','eYQUZ','Scene_Battle_commandFight','Sprite_Enemy_createStateIconSprite','addedStateObjects','resetFontSettings','BhBtc','battleInjectPrep','isDisplayEmergedEnemies','Game_Battler_performEvasion','PQlPE','adjustPosition_ScaleToFit','canMove','BtsQr','%1Damage%2JS','setLastPluginCommandInterpreter','NCAwG','OVtTY','isSceneChanging','ArRedRate','Enemy','WaitForSpin','_canLose','YSrPQ','GxloN','VMZLG','autoBattleStyle','_shake','skillItemWindowRectBorderStyle','value1','rLlrQ','_flashDuration','JPyOg','drawSingleSkillCost','oaFTn','actorCommandSingleSkill','trim','getItemDamageAmountTextOriginal','BoostPoints','ceil','ZrsdE','qeRQv','getEnemyIdWithName','resetResultSwitches','displayCurrentState','CriticalHitRateJS','updateShadowScale','statusWindowRect','removeBuff','wtinF','updatePositionBattleCore','command283','dymut','startTurn','ShowAddedDebuff','ActSeq_Mechanics_EtbAction','pRjNg','Item-%1-%2','ActionEffect','evaded','BgLiZ','ShowEnemyGauge','isOptionsCommandEnabled','zoiNi','setupOversaturateImpactFilter','arPenRate','compareEnemySprite','ActSeq_Animation_WaitForAnimation','VisuMZ_4_BreakShields','pXLDS','nlnAi','ActSeq_Inject_WaitForInjectAni','_shadowSprite','rNdfm','CmdTextAutoBattle','NameLegacy','refreshCursor','messageSpeed','requestFauxAnimation','battleSpin','drawGauge','formula','%1EndTurnJS','Interrupt','setGuard','displayChangedBuffs','_pattern','PopupDuration','WSqza','SPBfH','log','value','apply','changeInputWindow','Skill-%1-%2','VisuMZ_1_ElementStatusCore','ActSeq_Mechanics_BtbGain','isTpb','Sprite_Actor_initMembers','battleCorePreBattleCommonEvent','ActSeq_Movement_WaitForJump','XPActorCommandLines','enemy','TextColor','_forceAction','alive\x20friends\x20not\x20user','displayChangedStates','addAnimationSpriteToContainer','textWidth','rMENU','WaitForCamera','MP_Rate','hzHRv','Lxers','PreDQ','getNextSubjectFromPool','ActSeq_Skew_WaitForSkew','CVptZ','addEscapeCommand','_frontAttachmentSprite','Enable','dwKDf','_ptbActionCost','DVDFO','XqyQQ','AtmMu','SlotID','createEnemyNames','setupDesaturateImpactFilter','uwEch','reduce','_tempEquipCheck','battleUIOffsetY','Game_Map_setupBattleback','CmdIconAutoBattle','moveBattlerHomeDistance','isAnyoneSpinning','_enemyID','StatusWindowAttachmentFrontOffsetY','AS\x20USER','%1RegenerateJS','_displayBattleCoreTransitionErrorMsg','deathStateId','battleZoom','MessageWait','NameAttachStateIcon','pop','checkCacheKey','allowCollapse','OverallFormulaJS','Sprite_Actor_setBattler','jumpBattler','SvMotionIdleMass-%1-%2','ALxXy','commandNameWindowCenter','isSideView','battlerShadowScaleX','ScaleX','DvNYo','bgIDB','Game_Battler_makeSpeed','performActionEndMembers','uZEYk','Scene_Battle_startActorSelection','isAttack','ActSeq_Impact_TimeStop','Window_Options_addGeneralOptions','Game_Battler_performDamage','VLkUG','Window_BattleLog_performEvasion','isVisualHpGaugeDisplayed','BattleManager_endAction','FYJvs','Scene_Battle_update','preemptive','canAttack','dragonbonesData','makeBattleCommand','updateTargetPosition','setBattleCameraOffset','isBattleTest','setBattlePortrait','ARRAYFUNC','VeJRu','battlerShadowScaleY','evalDamageFormula','itemTextAlign','gZkeQ','stbGainInstant','isShownOnBattlePortrait','Mechanics','cancel','quSyy','sJkoK','currentAction','BattleManager_inputtingAction','min','maxCommands','HtRwo','okTargetSelectionVisibility','_updateCursorArea','placeActorName','_enemySprites','SErrt','ActSeq_Mechanics_WaitForEffect','Sprite_Battler_startMove','Sprite_Enemy_updateStateSprite','floor','QEaog','repeatTargets','command301_PreBattleEvent','IwsAl','iYJQZ','qfwAh','Game_Action_isForFriend','_effectType','displayMpDamage','BattleManager_makeActionOrders','faceWidth','DefaultStyle','needsSelectionBattleCore','fkEfg','updateBattlebackBitmap2','updateBorderSprite','loadWindowskin','Window_BattleLog_update','MotionSpeed','ITEM','applyImmortal','_wtypeIDs','alive\x20actors','createInnerPortrait','bitmapHeight','SLCqu','callUpdateHelp','isIncludedInEnemyWindow','rQdNG','ActSeq_BattleLog_PushBaseLine','applyData','isAtbCastingState','makeTargets','ForceRandom','BattleManager_updatePhase','dNTjv','isStateResist','changeAtbCastTime','pSmzA','setupTextPopup','_targetOpacity','battleCoreTpbMainPhase','mainSpriteScaleX','updateBattlerContainer','ShowHide','QoL','GiuzA','clearWeaponAnimation','wPWhS','dimColor2','spriteId','AddOption','PwEqh','createEmptyBitmap','xcrPW','dead\x20friends','drawItemStatusXPStyle','animationShouldMirror','command339','_tempActor','22AMKNJr','NameAlwaysHidden','Sprite_Enemy_updateBossCollapse','isAppeared','isAnyoneInjectAniPrepping','fBsoU','isAnyoneGrowing','activate','isMVAnimation','position','commandSymbol','ActSeq_Zoom_Scale','cqFEG','BattleVictoryJS','performActionStart','createLowerLayer','BattleSystemSTB','BXCbL','oVCDF','JS\x20%1END\x20ACTION','37741eoqDbz','showAnimation','MVbFG','dUebO','WaitForAnimation','isChangingOpacity','addCombatLogCommand','onDisabledPartyCommandSelection','_item','cancelButtonText','oOhlA','create','ActSeq_Mechanics_OnceParallel','startPartyCommandSelection','PreApplyAsTargetJS','CommonEventID','currentSymbol','sideview_ui','Game_Interpreter_command301','Settings','RreVI','setBackgroundType','bPEoH','_motionSpeed','drawText','nANDP','gainStoredBoostPoints','itemEffectAddNormalState','ShowActorGauge','ShowRemovedState','windowAreaHeight','YfyLu','_stateIconSprite','battleCameraData','EsfyJ','_homeX','collapseType','noise','drawEnemyName','getDamageStyle','obnkz','startAction','updateBitmap','AjKmA','AnimationID','doKOj','isBattleMember','isSceneBattle','isFlipped','%1StartBattleJS','YrpRk','addImmortal','ActSeq_Mechanics_CtbOrder','Scene_Battle_skillWindowRect','AHVEH','ActSeq_Mechanics_OtbOrder','_skewX','canBattlerMove','isSkill','addCommand','_forcedBattlers','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','TPB','guard','WaitForOpacity','HitRate','DamageType%1','svAnchorY','index','%1StartTurnJS','startSkew','eKfll','Sprite_Animation_targetSpritePosition','svBattlerAnchorY','nKGMk','Game_Battler_startTpbTurn','iPKZF','AntiTintUiElements','Scene_Battle_createCancelButton','autoMeleeSingleTargetActionSet','friendsUnit','_weather','setActiveWeaponSlot','PdGbY','Window_BattleLog_popBaseLine','KxYVI','StatusWindowSkinFilename','textColor','changeWeather','fmEvH','khaHg','JSON','JOArU','nzgLf','map','_handlers','dVwGj','calcWindowHeight','setAttack','PartyCmd','battleCamera','battleSpriteSkew','jtAVh','targetActionSet','rtOgm','nsLyL','eRVGE','avime','EnBfV','isPhysical','_surprise','addPartyCommand','applyAngleChange','ActSeq_BattleLog_UI','partyCommandWindowRect','ActSeq_Camera_Clamp','isAlive','lPFDO','updateScale','zSGLi','drawItemImageListStyle','addState','KTFmR','border','CastPhysical','EGidO','anchorX','logWindowRect','drawItemStatusListStyle','makeTargetSelectionMoreVisible','ActSeq_Movement_FacePoint','addDebuff','updatePadding','ShowReflect','DFkhP','isAnyoneSkewing','reverse','_flipScaleX','popBaseLine','AsTarget','motionIdle','custom','-%1\x20MP','isRightInputMode','onActorOk','Height','UalEn','AqzVM','cLUfQ','scale','Duration','MtBCu','_actor','blt','setBattlerBattleCore','onEncounter','xsaEk','ActSeq_BattleLog_PopBaseLine','performActionMotions','putActiveBattlerOnTop','_cancelButton','alterBreakShield','setupZoomBlurImpactFilter','NameFontSize','fbISG','ActSeq_Set_FinishAction','6186545mgcoPF','baXFl','name','RevertAngle','charged','changeBattlebacks','isPTB','updateHomeMove','process_VisuMZ_BattleCore_CreateRegExp','uYWVo','wzLSR','invokeMagicReflection','VRIfH','isImmortal','helpAreaBottom','_floatWholeDuration','attackAnimationId1','ActSeq_Animation_AttackAnimation2','Parse_Notetags_Targets','setFrame','updateStatusWindowPosition','BattleManager_processDefeat','TbfZn','SvWeaponSolo-%1-%2','NLTMq','ActSeq_Motion_RefreshMotion','displayActionResults','setupFont','forceMotion','_homeY','CriticalDmgRate','Scene_Battle_itemWindowRect','tsbXK','ActSeq_Camera_FocusTarget','getCommonEventIdWithName','hitRate','updateSpin','JSfzh','Game_Battler_onTurnEnd','createStateSprite','lHLrn','isSkillItemWindowsMiddle','FlinchDuration','startInput','ShPKf','ovTNn','commandFight','StyleON','OhoiL','isActor','initBattleCore','mGoth','Game_BattlerBase_addNewState','currentExt','ConvertActionSequenceTarget','getWtypeIdWithName','format','Sprite_Battler_update','setCustomDamageFormula','Scene_Options_maxCommands','origin','fittingHeight','_actionInputIndex','process_VisuMZ_BattleCore_Action_Notetags','WVGtL','match','Sprite_Actor_moveToStartPosition','Radius','ActSeq_Animation_PlayAtCoordinate','trueRandomTarget','canAlterActionCostPTB','retreat','Pmxue','JyqmU','ShowPortraitsBorderStyle','battler','requestRefresh','battleMembers','XfWzh','isAutoBattleCommandAdded','hFdAn','_cacheTextWidth','isEscapeCommandEnabled','IconStypeMagic','AnchorY','isBattleRefreshRequested','MAXMP','Parse_Notetags_TraitObjects','jPeUV','head','WeaponTypeID','noSimilarSTypes','buffRemove','cdlSC','hpDamageFmt','_dimmerSprite','setText','jIFMR','CriticalColor','_armorPenetration','onGrowEnd','_targets','_uiContainer','Index','startAttackWeaponAnimation','ZDtVd','Exploited','onTurnEnd','isGuard','_commonEventKey','horzCells','shadow','ActSeq_Impact_ShockwaveCenterTargets','process_VisuMZ_BattleCore_TraitObject_Notetags','isBattleFlipped','targetSpritePosition','replace','abnormal','AutoMeleeAoE','aKUtl','turn','CheckVisibleBattleNotetags','setupMotion','Reveal','hltoc','updatePosition','ActSeq_Inject_AnimationStart','Linear','_growWholeDuration','adjustPosition_1for1','SkillsStatesCore','HpGaugeOffsetX','lmoqt','LUK','cameraOffsetDuration','isWaiting','updateGrow','AutoBattle','Game_Interpreter_terminate','CriticalHitMultiplier','onJumpEnd','xLlTP','battleAnimation','toUseBoostPoints','LlzNz','parameters','right','_growX','LYzRr','StatusWindowSelectableBackHide','ActSeq_Movement_FaceTarget','StepDistanceX','endAnimation','TqdQR','_borderPortraitDuration','DQMKH','Opacity','refreshActorPortrait','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','zFeep','mfmyV','skillTypes','animationBaseDelay','isMagicSkill','Sprite_Actor_setActorHome','Window_BattleLog_performReflection','bgType','parseForcedGameTroopSettingsBattleCore','ActSeq_Mechanics_RemoveBuffDebuff','getBattlePortraitOffsetX','waitForOpacity','_lineHeight','_skewEasing','IQiVb','Game_Action_needsSelection','FUNC','Window_BattleLog_displayActionResults','JS\x20%1START\x20ACTION','qDMAB','VarianceFormulaJS','_weaponSprite','type','RBgWh','updateUiContainerPosition','itemRect','move','ForceExploiter','updateFloat','Window_ItemList_maxCols','CommandVisible','JS\x20%1START\x20BATTLE','occasion','ActSeq_Motion_WaitMotionFrame','RequiresDefeat','loadBitmap','zuSYB','fGfWZ','GuardFormulaJS','isItemCommandEnabled','statusText','DigitGroupingDamageSprites','_skillWindow','repositionCancelButtonBorderStyle','checkShowHideSkillNotetags','ActSeq_Mechanics_BreakShieldChange','setupShockwaveImpactFilter','BgDLQ','StateIconOffsetY','remove','TYAwf','_forcedHomeX','wholeActionSet','Angle','onBattleStart','setupBattleback','yrbVS','isEnemy','Game_System_initialize','initVisibility','inHomePosition','HP_Flat','troop','callNextMethod','ActSeq_Movement_FaceDirection','WzzVc','sYAIH','ACime','CastAnimation','ActSeq_Impact_ShockwavePoint','ftgya','fDyCd','abs','_homeWholeDuration','applyHardDamageCap','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','processExtendTroopMembers','makeEscapeRatio','WEAPON\x20SWAP','ParseWeaponNotetags','Scene_Battle_selectPreviousCommand','mpDamage','wMOwh','WOlGJ','Parse_Notetags_Action','ActionCount','battleFloat','power','lunAF','lMHLA','jTqTi','ShowCritical','hasBeenDefeatedBefore','xvhLr','skillItemWindowRectMiddle','compareBattlerSprites','debuffAdd','commandOptions','_actions','stypeId','SkillItemMiddleLayout','GJotx','BARE\x20HANDS','buRCv','Defeat','hMuzs','actor','_inputting','performAttackSlot','Game_Action_itemEffectAddNormalState','setBattlerFacePoint','yfzgF','PostStartActionJS','lYivc','Shadow','extraPositionX','updatePointAnimations','onEncounterBattleCore','isForAll','Scene_Battle_onEnemyOk','registerDefeatedEnemy','isSTB','Game_Action_evalDamageFormula','innerHeight','getSkillTypes','ApplyImmortal','1:1','PostEndActionJS','EmergeText','JS\x20%1DAMAGE\x20%2','Scene_Battle_startEnemySelection','moveToStartPosition','addChildToBack','random','ActSeq_Impact_ColorBreak','PortraitScale','collapse','_enemyWindow','createMiss','GroupDigits','nextActiveWeaponSlot','ActSeq_Zoom_Reset','loadPicture','battleInjectAni','_list','qspCM','updateStateSpriteBattleCore','UNTITLED','PrioritySortActors','VariableID','removeAnimation','VAwzn','animation','initElementStatusCore','DyMZo','missed','regionId','canAddSkillCommand','cSpVf','ActSeq_Movement_HomeMoveToTarget','_offsetX','HiVQn','inputting','frameCount','FaceDirection','startEnemySelection','PbBsO','toLowerCase','setEventCallback','Game_Map_battleback1Name','Game_Actor_makeActionList','NbBwM','ApkCj','Sprite_Battler_damageOffsetY','isDebuffAffected','icon','findTargetSprite','isMeleeMultiTargetAction','evade','sortEnemies','Targets','showEnemyAttackAnimation','BattleManager_selectNextCommand','isFTB','checkShowHideSwitchNotetags','basicGaugesY','_lastRegenFrameCount','getItemDamageAmountLabelBattleCore','_activeWeaponSlot','refresh','dead','checkTpbInputClose','ActSeq_Mechanics_AtbGauge','svBattlerData','createJS','HP_Rate','DualWield','updateShadowVisibility','hHmsR','TBjQf','iconWidth','HHZBT','autoBattleAtStart','playReflection','freezeMotion','updateCallMenu','gaugeX','wPVVa','Sprite_Battleback_adjustPosition','message4','ConvertCount','mWqQo','createPartyCommandWindowBattleCore','PrioritySortActive','CmdIconFight','_angleDuration','magicReflection','onBattleEnd','pow','Window_BattleLog_displayCritical','ActSeq_Zoom_WaitForZoom','lvLLM','anchor','BattleLog','Scene_Battle_createHelpWindow','ActSeq_Mechanics_RemoveState','singleSkill','SkillItemStandardCols','StartTurnWait','ActSeq_Inject_AnimationEnd','uCYwi','BURvT','Targets2','svBattlerName','BattleManager_startTurn','_stypeIDs','setBattleCameraTargets','dFTeg','isTriggered','baonJ','TP_Rate','Game_Map_battleback2Name','bhoMV','chantStyle','focus','addOnceParallelInterpreter','createUIContainer','isAutoBattleCommandEnabled','WaitCount2','applyEasing','canUse','_skewWholeDuration','getBattlePortrait','PDaSV','EscapeSuccessJS','Window_BattleEnemy_initialize','IaMok','_branch','Game_Troop_setup','rvalo','pDKNX','weaponTypes','zXrmI','PostStartBattleJS','ActSeq_Angle_WaitForAngle','setImmortal','vvGOQ','_targetIndex','isAnyoneJumping','createBattleUIOffsetY','WTXDR','ActSeq_Target_NextTarget','isHidden','VisuMZ_1_MainMenuCore','Scene_Battle_updateBattleProcess','Game_Battler_clearMotion','performEvasion','_statusWindow','Pre','faceRect','ArRedFlat','getBattlePortraitFilename','allowRandomSpeed','visibilityState','CmdIconOptions','setValue','Scene_Battle_logWindowRect','_baseY','stop','criticalHitRate','message1','gmKOq','_targetAngle','_deathStateApplied','isSkewing','maxLines','Game_Battler_onBattleEnd','clamp','PostDamageAsTargetJS','HelpEscape','equips','mainSpriteWidth','setupBlueRedInvertImpactFilter','createDamageContainer','Game_Party_removeActor','isFriendly','ClPaj','motionType','opacity','xXeLC','lukEffectRate','ActSeq_Mechanics_Collapse','_flashColor','sort','_targetSkewY','createStateIconSprite','getNextSubject','qGTZv','wIDSY','pGBUb','VisuMZ_2_BattleSystemCTB','cancelTargetSelectionVisibility','fight','cyylq','ActSeq_DB_DragonbonesTimeScale','SdFxZ','Scale','forceSelect','isAutoBattle','_regionBattleback2','jsScaleUp','indexOf','MAT','GuWID','lineHeight','finalizeScale','isSkipPartyCommandWindow','_battleField','_offsetY','refreshMotion','PreDamage%1JS','emerge','gainFullActionsPTB','createMainSprite','dCtpP','usePremadeActionSequence','_homeDuration','stateMotionIndex','setupDamagePopup','onSkewEnd','exit','_skewY','jCnDO','alterActionCostPTB','OZdZA','ActSeq_Target_PrevTarget','addAutoBattleCommand','gSPfU','hardDamageCap','svAnchorX','battleAngle','createBattleField','DTB','qZBmG','_updateCursorFilterArea','destroy','EoUPv','unchanged','CreateActionSequenceTargets','CvTmj','initialize','Game_Temp_requestAnimation','fontSize','isAffectedByBreakShield','setBattleSkew','extraPositionY','MOTIONS','placeStateIcon','skillId','addSingleSkillCommands','Xnyud','YJSqq','performAction','CalcEscapeRatioJS','ActSeq_Movement_MoveToTarget','updateFlip','start','drawActorFace','_floatDuration','HelpAutoBattle','tpbActorSwitchConditionsMet','clearRect','SMSwM','font','removeAnimationFromContainer','_battleLayoutStyle','enemyNames','_regionBattleback1','PostStartTurnJS','isBattleCoreTargetScope','call','_drawTextOutline','isInputting','PopupShiftY','textBaseline','arPenFlat','dnkyk','drawTextTopAligned','alive\x20enemies','_onceParallelInterpreters','OabVw','addGuardCommand','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','statusWindowRectDefaultStyle','clearElementChanges','alignBattleCoreDamageSprite','yAkuu','Game_Battler_performActionStart','ActSeq_Mechanics_Immortal','mwYvx','ShowFailure','isSideButtonLayout','CommandAddOptions','Sprite_Actor_updateShadow','mhp','BattleEndEvent','omfeF','updateJump','isForRandomBattleCore','optDisplayTp','measureTextWidth','ActSeq_Motion_FreezeMotionFrame','QxzpG','updateCollapse','Scene_Battle_selectNextCommand','recoverAll','loadBattleback1','drawSkillCost','SvBattlerMass-%1-%2','innerWidth','compatibilityVisible','Voeix','IbUmf','Game_Action_isForOpponent','skills','ActSeq_Mechanics_ActionEffect','WvPjM','MFRPs','setBattleImpactTimeScale','applyBattleCoreJS','evalDamageFormulaBattleCore','Window_BattleLog_performDamage','alive\x20actors\x20not\x20target','ActionItemMsg','gyzWJ','isAnimationPlaying','itemHeight','cXNMQ','performSubstitute','targetDistortionSpritePosition','some','processBattleCoreJS','_duration','_multipliers','Actor','clearMotion','reserveCommonEvent','setBattler','NOMHA','_opacityDuration'];_0x4df9=function(){return _0x19806d;};return _0x4df9();}function Window_EnemyName(){this['initialize'](...arguments);}Window_EnemyName['prototype']=Object['create'](Window_StatusBase[_0x4b2772(0x632)]),Window_EnemyName[_0x4b2772(0x632)][_0x4b2772(0x63a)]=Window_EnemyName,Window_EnemyName['prototype'][_0x4b2772(0xb0d)]=function(_0x43fe39){const _0x9b314b=_0x4b2772;this[_0x9b314b(0x7bf)]=_0x43fe39,this[_0x9b314b(0x403)]='';const _0x4a925c=new Rectangle(0x0,0x0,Graphics['boxWidth'],this[_0x9b314b(0xae9)]()*0x4);Window_StatusBase[_0x9b314b(0x632)][_0x9b314b(0xb0d)][_0x9b314b(0xb2b)](this,_0x4a925c),this['setBackgroundType'](0x2),this[_0x9b314b(0xc1f)]=0x0;},Window_EnemyName[_0x4b2772(0x632)][_0x4b2772(0x8da)]=function(){const _0x3277f7=_0x4b2772;this[_0x3277f7(0x5e8)]=0x0;},Window_EnemyName[_0x4b2772(0x632)]['enemy']=function(){const _0x17060b=_0x4b2772;return $gameTroop['members']()[this[_0x17060b(0x7bf)]];},Window_EnemyName[_0x4b2772(0x632)][_0x4b2772(0x49d)]=function(){const _0x3b8129=_0x4b2772;Window_StatusBase['prototype'][_0x3b8129(0x49d)][_0x3b8129(0xb2b)](this),this['enemy']()&&this['enemy']()['name']()!==this[_0x3b8129(0x403)]&&(_0x3b8129(0x806)!==_0x3b8129(0x806)?_0x154a86+=_0x4475e5(_0x5ccbc8['$1']):(this[_0x3b8129(0x403)]=this[_0x3b8129(0x79c)]()['name'](),this[_0x3b8129(0xa58)]())),this[_0x3b8129(0x351)](),this[_0x3b8129(0x979)]();},Window_EnemyName[_0x4b2772(0x632)][_0x4b2772(0x351)]=function(){const _0x1c8510=_0x4b2772;if(!this[_0x1c8510(0x79c)]()){if(this['contentsOpacity']>0x0)this[_0x1c8510(0xc1f)]-=0x10;}else{if(this['enemy']()[_0x1c8510(0x3ef)]()){if(this[_0x1c8510(0xc1f)]>0x0)this[_0x1c8510(0xc1f)]-=0x10;}else{if(SceneManager[_0x1c8510(0x21e)][_0x1c8510(0xa24)]&&SceneManager[_0x1c8510(0x21e)][_0x1c8510(0xa24)][_0x1c8510(0xccf)]&&SceneManager[_0x1c8510(0x21e)][_0x1c8510(0xa24)][_0x1c8510(0x321)][_0x1c8510(0x41a)](this['enemy']())){if(_0x1c8510(0x924)===_0x1c8510(0x924)){if(this[_0x1c8510(0xc1f)]<0xff)this['contentsOpacity']+=0x10;}else this['_targetAngle']=0x0,this[_0x1c8510(0x290)]=0x0;}else{if(this[_0x1c8510(0xc1f)]>0x0){if(_0x1c8510(0x539)===_0x1c8510(0x561)){const _0xfcf49=_0x5c9888[_0x1c8510(0x28a)];if(_0xfcf49[_0x1c8510(0x93d)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x2be7c3=_0x54d2c8(_0x4a2dad['$1']),_0x197948=_0x240c55[_0x1c8510(0x67d)][_0x1c8510(0x623)](_0x279b97,_0x1c8510(0xa4f));_0x5d5a20[_0x1c8510(0x67d)][_0x1c8510(0x4c6)](_0x2be7c3,_0x197948);}if(_0xfcf49[_0x1c8510(0x93d)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x50aea5=_0x174807(_0x22764d['$1']),_0x3808f7=_0x110177[_0x1c8510(0x67d)]['createKeyJS'](_0xa5dba7,_0x1c8510(0x9b9));_0xd4c2f5['BattleCore'][_0x1c8510(0x2bf)](_0x50aea5,_0x3808f7);}}else this[_0x1c8510(0xc1f)]-=0x10;}}}}},Window_EnemyName[_0x4b2772(0x632)]['updatePosition']=function(){const _0x140a7d=_0x4b2772;if(!this[_0x140a7d(0x79c)]())return;SceneManager[_0x140a7d(0x96e)]()?this['x']=Graphics[_0x140a7d(0xcd9)]-this[_0x140a7d(0x79c)]()['battler']()[_0x140a7d(0xc20)]:this['x']=this[_0x140a7d(0x79c)]()[_0x140a7d(0x947)]()['_baseX'];this['x']-=Math[_0x140a7d(0x4ed)](this['width']/0x2),this['y']=this['enemy']()[_0x140a7d(0x947)]()['_baseY']-Math[_0x140a7d(0x4ed)](this['lineHeight']()*1.5);const _0x555c86=VisuMZ[_0x140a7d(0x67d)][_0x140a7d(0x869)][_0x140a7d(0x74a)];this['x']+=_0x555c86[_0x140a7d(0x697)]||0x0,this['y']+=_0x555c86[_0x140a7d(0x446)]||0x0;},Window_EnemyName[_0x4b2772(0x632)][_0x4b2772(0x73b)]=function(){const _0x33422f=_0x4b2772;Window_Base[_0x33422f(0x632)]['resetFontSettings'][_0x33422f(0xb2b)](this),this['contents']['fontSize']=VisuMZ[_0x33422f(0x67d)][_0x33422f(0x869)][_0x33422f(0x74a)][_0x33422f(0x8f9)];},Window_EnemyName['prototype'][_0x4b2772(0xa58)]=function(){const _0x3b0703=_0x4b2772;Window_StatusBase[_0x3b0703(0x632)][_0x3b0703(0xa58)][_0x3b0703(0xb2b)](this),this[_0x3b0703(0x2fb)][_0x3b0703(0x4d6)]();if(!this[_0x3b0703(0x79c)]())return;this[_0x3b0703(0x87c)]();},Window_EnemyName['prototype'][_0x4b2772(0x87c)]=function(){const _0xa066f8=_0x4b2772;this[_0xa066f8(0x403)]=this[_0xa066f8(0x79c)]()[_0xa066f8(0x8fe)]();const _0x45a70d=this[_0xa066f8(0x5c2)](this['_text'])['width'],_0x3b0ea1=Math[_0xa066f8(0x4ed)]((this[_0xa066f8(0xb52)]-_0x45a70d)/0x2);this[_0xa066f8(0x3c3)](this['_text'],_0x3b0ea1,0x0,_0x45a70d+0x8);},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0xac2)]=function(){const _0x3c5d3f=_0x4b2772;return VisuMZ[_0x3c5d3f(0x67d)]['Settings'][_0x3c5d3f(0xa7a)][_0x3c5d3f(0xb80)];},Window_BattleLog['prototype'][_0x4b2772(0x783)]=function(){const _0x3d1ba0=_0x4b2772;return VisuMZ[_0x3d1ba0(0x67d)]['Settings']['BattleLog'][_0x3d1ba0(0x7c6)];},Window_BattleLog[_0x4b2772(0x632)]['backColor']=function(){const _0x4311c1=_0x4b2772;return VisuMZ[_0x4311c1(0x67d)][_0x4311c1(0x869)][_0x4311c1(0xa7a)][_0x4311c1(0x721)];},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x61d)]=function(){return![];},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x6bf)]=function(_0x388424,_0x3c09e2){const _0x11f0f4=_0x4b2772;this[_0x11f0f4(0x4cf)](_0x11f0f4(0xbe8)),BattleManager['invokeAction'](_0x388424,_0x3c09e2),this[_0x11f0f4(0x9da)]();},Window_BattleLog['prototype'][_0x4b2772(0xbe8)]=function(){this['callNextMethod']();},Window_BattleLog['prototype'][_0x4b2772(0x21f)]=function(_0x79c9c){const _0xd46b22=_0x4b2772,_0x253d03=Array[_0xd46b22(0x632)][_0xd46b22(0x36a)][_0xd46b22(0xb2b)](arguments,0x1),_0x4c8aa2={'name':_0x79c9c,'params':_0x253d03},_0x1ba402=this[_0xd46b22(0x413)]['map'](_0x4b9761=>_0x4b9761[_0xd46b22(0x8fe)])[_0xd46b22(0xae6)]('actionSplicePoint');if(_0x1ba402>=0x0)this[_0xd46b22(0x413)][_0xd46b22(0x43c)](_0x1ba402,0x0,_0x4c8aa2);else{if(_0xd46b22(0x428)!=='XpmGD')return!![];else this[_0xd46b22(0x413)][_0xd46b22(0x21f)](_0x4c8aa2);}},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x4cf)]=function(_0x1fde51){const _0x1f3025=_0x4b2772,_0xf1a277=Array[_0x1f3025(0x632)]['slice']['call'](arguments,0x1);this['_methods'][_0x1f3025(0x4cf)]({'name':_0x1fde51,'params':_0xf1a277});},Window_BattleLog[_0x4b2772(0x632)]['logActionList']=function(){const _0x44014e=_0x4b2772;if(!$gameTemp[_0x44014e(0x344)]())return;console[_0x44014e(0x790)](this[_0x44014e(0x413)][_0x44014e(0x8b4)](_0x398a7a=>_0x398a7a[_0x44014e(0x8fe)])[_0x44014e(0x4a0)]('\x0a'));},VisuMZ['BattleCore'][_0x4b2772(0x3de)]=Window_BattleLog['prototype'][_0x4b2772(0xa58)],Window_BattleLog['prototype'][_0x4b2772(0xa58)]=function(){this['_requestRefresh']=!![];},VisuMZ[_0x4b2772(0x67d)]['Window_BattleLog_update']=Window_BattleLog['prototype'][_0x4b2772(0x49d)],Window_BattleLog[_0x4b2772(0x632)]['update']=function(){const _0x1c8aef=_0x4b2772;VisuMZ['BattleCore'][_0x1c8aef(0x817)][_0x1c8aef(0xb2b)](this);if(this[_0x1c8aef(0x1f0)])this[_0x1c8aef(0x305)]();},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x305)]=function(){const _0x441e47=_0x4b2772;this[_0x441e47(0x1f0)]=![],VisuMZ[_0x441e47(0x67d)][_0x441e47(0x3de)][_0x441e47(0xb2b)](this);},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x571)]=function(_0x3f8e75){const _0x3d48e2=_0x4b2772;let _0x597792=VisuMZ[_0x3d48e2(0x67d)]['Settings'][_0x3d48e2(0xa7a)]['TextAlign'][_0x3d48e2(0xa42)]()[_0x3d48e2(0x75a)](),_0x4d2614=this['_lines'][_0x3f8e75];if(_0x4d2614['match'](/<LEFT>/i)){if('YgQFr'!==_0x3d48e2(0x606))_0x597792=_0x3d48e2(0x238);else{if(this['_actor']){if(!_0x4031f3[_0x3d48e2(0x97e)][_0x3d48e2(0x975)](this[_0x3d48e2(0x8ee)],_0xa02a3e))return!![];if(!_0x913039[_0x3d48e2(0x97e)][_0x3d48e2(0x532)](this[_0x3d48e2(0x8ee)],_0x15969e))return!![];if(!_0xfbbded[_0x3d48e2(0x97e)][_0x3d48e2(0x4f3)](this['_actor'],_0x5d1901))return!![];}}}else{if(_0x4d2614[_0x3d48e2(0x93d)](/<CENTER>/i))_0x597792=_0x3d48e2(0x355);else{if(_0x4d2614[_0x3d48e2(0x93d)](/<RIGHT>/i)){if(_0x3d48e2(0x8ea)!==_0x3d48e2(0x8ea))return _0x3cc1c1['BattleCore'][_0x3d48e2(0x869)][_0x3d48e2(0x985)][_0x3d48e2(0x295)];else _0x597792=_0x3d48e2(0x98e);}}}_0x4d2614=_0x4d2614[_0x3d48e2(0x970)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x4d2614=_0x4d2614[_0x3d48e2(0x970)](/\\I\[0\]/gi,'');const _0x28ecda=this[_0x3d48e2(0xce9)](_0x3f8e75);this[_0x3d48e2(0x2fb)][_0x3d48e2(0xb22)](_0x28ecda['x'],_0x28ecda['y'],_0x28ecda['width'],_0x28ecda[_0x3d48e2(0x4c3)]);const _0x316f33=this[_0x3d48e2(0x5c2)](_0x4d2614)[_0x3d48e2(0x67b)];let _0x2f48e3=_0x28ecda['x'];if(_0x597792==='center')_0x2f48e3+=(_0x28ecda[_0x3d48e2(0x67b)]-_0x316f33)/0x2;else{if(_0x597792==='right'){if(_0x3d48e2(0xc19)!==_0x3d48e2(0xc19))return 0x0;else _0x2f48e3+=_0x28ecda[_0x3d48e2(0x67b)]-_0x316f33;}}this[_0x3d48e2(0x3c3)](_0x4d2614,_0x2f48e3,_0x28ecda['y'],_0x316f33+0x8);},Window_BattleLog[_0x4b2772(0x632)]['addText']=function(_0x2177b0){const _0x180707=_0x4b2772;this[_0x180707(0xb98)][_0x180707(0x21f)](_0x2177b0),this[_0x180707(0xa58)](),this['callNextMethod']();},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x58c)]=function(){const _0x92d85c=_0x4b2772;let _0x1126e8=![];switch(this[_0x92d85c(0x63b)]){case _0x92d85c(0x612):_0x1126e8=this['_spriteset']['isEffecting']();break;case'movement':_0x1126e8=this[_0x92d85c(0x34a)]['isAnyoneMoving']();break;case _0x92d85c(0xa33):_0x1126e8=this[_0x92d85c(0x34a)][_0x92d85c(0xb62)]();break;case _0x92d85c(0x68b):_0x1126e8=this['_spriteset']['isAnyoneFloating']();break;case'jump':_0x1126e8=this[_0x92d85c(0x34a)][_0x92d85c(0xaa7)]();break;case _0x92d85c(0xacf):_0x1126e8=this[_0x92d85c(0x34a)][_0x92d85c(0x266)]();break;}return!_0x1126e8&&(this['_waitMode']=''),_0x1126e8;},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x5de)]=function(){const _0x5c889a=_0x4b2772;this['setWaitMode'](_0x5c889a(0xa33));},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x397)]=function(){const _0x4928bc=_0x4b2772;this[_0x4928bc(0xc6d)](_0x4928bc(0x68b));},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x3fe)]=function(){const _0x2c830b=_0x4b2772;this[_0x2c830b(0xc6d)](_0x2c830b(0x598));},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x9a6)]=function(){this['setWaitMode']('opacity');},Window_BattleLog[_0x4b2772(0x632)]['startTurn']=function(){const _0x384b7f=_0x4b2772,_0x57793a=VisuMZ[_0x384b7f(0x67d)][_0x384b7f(0x869)][_0x384b7f(0xa7a)];if(!_0x57793a[_0x384b7f(0x578)])return;this['push'](_0x384b7f(0x60b),_0x57793a[_0x384b7f(0xc4b)][_0x384b7f(0x934)]($gameTroop[_0x384b7f(0x59d)]())),this[_0x384b7f(0x21f)](_0x384b7f(0x59c),_0x57793a[_0x384b7f(0xa7f)]),this[_0x384b7f(0x21f)](_0x384b7f(0x4d6));},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x87f)]=function(_0xa444c7,_0x332eb2,_0x4ed522){const _0x3dbdb4=_0x4b2772;if(this[_0x3dbdb4(0xcd0)](_0x332eb2)){if(_0x3dbdb4(0xbff)==='qKAtN')return _0x2173e7[_0x3dbdb4(0x67d)][_0x3dbdb4(0x91b)][_0x3dbdb4(0xb2b)](this);else BattleManager[_0x3dbdb4(0x566)]();}else this[_0x3dbdb4(0xaf4)](_0xa444c7,_0x332eb2,_0x4ed522);},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0xcd0)]=function(_0xf6a02f){const _0x13f249=_0x4b2772;if(!SceneManager[_0x13f249(0x885)]())return![];if(!_0xf6a02f)return![];if(!_0xf6a02f['item']())return![];if(_0xf6a02f['item']()[_0x13f249(0x28a)][_0x13f249(0x93d)](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x13f249(0x33a)===_0x13f249(0x5bd)){let _0x24f9d6=0x0;return this[_0x13f249(0x57d)]&&!this[_0x13f249(0x57d)][_0x13f249(0x46d)]()&&(_0x24f9d6-=this[_0x13f249(0x618)],_0x24f9d6-=this['_jumpHeight']),_0x24f9d6;}else return!![];}if(DataManager['checkAutoCustomActionSequenceNotetagEffect'](_0xf6a02f[_0x13f249(0x30a)]())){if(_0x13f249(0xb7a)===_0x13f249(0xb7a))return!![];else _0x432123[_0x13f249(0x566)]();}return![];},Window_BattleLog['prototype'][_0x4b2772(0xaf4)]=function(_0x20ee7d,_0x2c4858,_0x6aabbb){const _0x961e58=_0x4b2772,_0x2599ba=_0x2c4858[_0x961e58(0x30a)]();this['setupActionSet'](_0x20ee7d,_0x2c4858,_0x6aabbb),this['createEffectActionSet'](_0x20ee7d,_0x2c4858,_0x6aabbb),this[_0x961e58(0xcc4)](_0x20ee7d,_0x2c4858,_0x6aabbb);},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x657)]=function(_0x5cf218,_0x101928){const _0x492b26=_0x4b2772,_0x642a93=VisuMZ[_0x492b26(0x67d)][_0x492b26(0x869)]['BattleLog'];if(_0x642a93['ActionCenteredName']){if('RpOIM'!==_0x492b26(0x7f7))this[_0x492b26(0x21f)]('addText',_0x492b26(0x48f)[_0x492b26(0x934)](DataManager['battleDisplayText'](_0x101928)));else return!_0x5d39da[_0x492b26(0xc06)]()?this[_0x492b26(0x808)](_0x2fee80):_0x5a1cc7[_0x492b26(0x67d)][_0x492b26(0x868)]['call'](this,_0x3cacb4);}if(DataManager[_0x492b26(0x890)](_0x101928)){if(_0x642a93[_0x492b26(0xc95)])this[_0x492b26(0xbd2)](_0x101928[_0x492b26(0xabd)],_0x5cf218,_0x101928);if(_0x642a93[_0x492b26(0x1e3)])this[_0x492b26(0xbd2)](_0x101928[_0x492b26(0xbc9)],_0x5cf218,_0x101928);}else{if(_0x642a93[_0x492b26(0xb60)])this[_0x492b26(0xbd2)](TextManager['useItem'],_0x5cf218,_0x101928);}},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0xbaa)]=function(_0x3be617,_0x23c6a2,_0x43cf3b){const _0x3104c4=_0x4b2772,_0x243684=_0x23c6a2[_0x3104c4(0x30a)]();this[_0x3104c4(0x657)](_0x3be617,_0x243684),this[_0x3104c4(0x21f)]('applyImmortal',_0x3be617,_0x43cf3b,!![]),this['push'](_0x3104c4(0x850),_0x3be617,_0x23c6a2),this['push'](_0x3104c4(0x643)),this[_0x3104c4(0x21f)](_0x3104c4(0xbb1),_0x3be617,_0x23c6a2),this['push']('waitForAnimation');},Window_BattleLog[_0x4b2772(0x632)]['createEffectActionSet']=function(_0xdfb0cd,_0x52d1c6,_0x4082c4){const _0x3e2aee=_0x4b2772;if(this['isMeleeSingleTargetAction'](_0x52d1c6))this[_0x3e2aee(0x8a5)](_0xdfb0cd,_0x52d1c6,_0x4082c4);else{if(this[_0x3e2aee(0xa4c)](_0x52d1c6))this[_0x3e2aee(0x4bb)](_0xdfb0cd,_0x52d1c6,_0x4082c4);else{if(_0x52d1c6[_0x3e2aee(0x679)]()){if(_0x3e2aee(0x9f8)!==_0x3e2aee(0x9f8))return this['height']*this[_0x3e2aee(0x724)]();else this[_0x3e2aee(0x8bd)](_0xdfb0cd,_0x52d1c6,_0x4082c4);}else'KQKwU'!==_0x3e2aee(0x3db)?this['wholeActionSet'](_0xdfb0cd,_0x52d1c6,_0x4082c4):(_0x27508a[_0x3e2aee(0x6de)]=_0x1a770a,_0x2ceebb[_0x3e2aee(0x6de)]=_0x337e43,_0x53f4ce[_0x3e2aee(0x242)](),_0x3181a5['adjustPosition']());}}},Window_BattleLog['prototype'][_0x4b2772(0x4e7)]=function(_0xd50601,_0x22efc7,_0x564729,_0x46161a){const _0x59ae06=_0x4b2772;if(_0x22efc7){const _0x58111d=_0xd50601[_0x59ae06(0x947)]();this[_0x59ae06(0x21f)]('performJump',[_0xd50601],_0x564729,_0x46161a),this[_0x59ae06(0x21f)](_0x59ae06(0x6c3),_0xd50601,_0x58111d['_homeX'],_0x58111d[_0x59ae06(0x919)],_0x46161a,![],_0x59ae06(0x97b)),this['push'](_0x59ae06(0x66d),[_0xd50601],'evade'),this[_0x59ae06(0x21f)]('waitForMovement'),this[_0x59ae06(0x21f)](_0x59ae06(0x66d),[_0xd50601],_0x59ae06(0x5cf));}},Window_BattleLog['prototype'][_0x4b2772(0x486)]=function(_0x11179b){const _0x5c02ce=_0x4b2772;if(!_0x11179b[_0x5c02ce(0x8c3)]())return![];if(!_0x11179b['isForOne']())return![];if(!_0x11179b['isForOpponent']())return![];return VisuMZ['BattleCore'][_0x5c02ce(0x869)]['ActionSequence']['AutoMeleeSolo'];},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x8a5)]=function(_0x5efe28,_0xc09dd3,_0x1514f0){const _0x591e4a=_0x4b2772,_0x5e8883=_0x5efe28['getAttackMotion']()[_0x591e4a(0x9b1)]<0x2,_0x32da1d=0x14,_0x3ce750=0x30;_0x5e8883&&(this[_0x591e4a(0x21f)](_0x591e4a(0x633),[_0x5efe28],_0x3ce750,_0x32da1d),this['push']('performMoveToTargets',_0x5efe28,_0x1514f0,_0x591e4a(0x248),_0x32da1d,!![],_0x591e4a(0x97b),!![]),this[_0x591e4a(0x21f)](_0x591e4a(0x66d),[_0x5efe28],'walk'),this[_0x591e4a(0x21f)](_0x591e4a(0x643)));let _0x3821a5=_0xc09dd3['isAttack']()?this[_0x591e4a(0xbfc)](_0x5efe28):0x1;for(let _0x743925=0x0;_0x743925<_0x3821a5;_0x743925++){if(_0xc09dd3[_0x591e4a(0x7da)]()&&_0x5efe28['isActor']()){if(_0x591e4a(0x737)===_0x591e4a(0x6a0)){if(_0x160211[_0x591e4a(0x67d)][_0x591e4a(0x869)][_0x591e4a(0xa7a)][_0x591e4a(0x27a)])return _0x25caf9[_0x591e4a(0x67d)][_0x591e4a(0x869)][_0x591e4a(0xa7a)]['BattleLogRectJS'][_0x591e4a(0xb2b)](this);return _0x4dd58a[_0x591e4a(0x67d)][_0x591e4a(0xab9)][_0x591e4a(0xb2b)](this);}else this['push']('setActiveWeaponSet',_0x5efe28,_0x743925);}_0xc09dd3[_0x591e4a(0x30a)]()[_0x591e4a(0x519)]<0x0?_0x591e4a(0x878)===_0x591e4a(0x878)?this[_0x591e4a(0x8bd)](_0x5efe28,_0xc09dd3,_0x1514f0):this[_0x591e4a(0x4ba)](_0x591e4a(0x5c5)):this['wholeActionSet'](_0x5efe28,_0xc09dd3,_0x1514f0);}_0xc09dd3[_0x591e4a(0x7da)]()&&_0x5efe28[_0x591e4a(0x92d)]()&&this[_0x591e4a(0x21f)](_0x591e4a(0x556),_0x5efe28),this[_0x591e4a(0x21f)]('applyImmortal',_0x5efe28,_0x1514f0,![]),this['addMeleeReturnActionSet'](_0x5efe28,_0x5e8883,_0x3ce750,_0x32da1d);},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0xa4c)]=function(_0xc6810){const _0x223153=_0x4b2772;if(!_0xc6810[_0x223153(0x8c3)]())return![];if(!_0xc6810[_0x223153(0xa11)]())return![];if(!_0xc6810[_0x223153(0x431)]())return![];return VisuMZ['BattleCore'][_0x223153(0x869)][_0x223153(0xcb4)]['AutoMeleeAoE'];},Window_BattleLog[_0x4b2772(0x632)]['autoMeleeMultiTargetActionSet']=function(_0x205d5f,_0xb1b867,_0x4884e5){const _0x2e506d=_0x4b2772,_0x21d4b5=_0x205d5f[_0x2e506d(0xc49)]()[_0x2e506d(0x9b1)]<0x2,_0x48fcd6=0x14,_0x50b176=0x30;if(_0x21d4b5){if(_0x2e506d(0x466)!==_0x2e506d(0x443))this[_0x2e506d(0x21f)](_0x2e506d(0x633),[_0x205d5f],_0x50b176,_0x48fcd6),this[_0x2e506d(0x21f)]('performMoveToTargets',_0x205d5f,_0x4884e5,'front\x20center',_0x48fcd6,!![],'Linear',!![]),this['push'](_0x2e506d(0x66d),[_0x205d5f],_0x2e506d(0x5cf)),this[_0x2e506d(0x21f)](_0x2e506d(0x643));else{const _0x2eee49=new _0x200c25();return _0x4c1347[_0x45dcb5]=_0x2eee49,this[_0x2e506d(0xa1f)](_0x2eee49),this['addChildToBack'](this[_0x2e506d(0x342)]),_0x2eee49;}}let _0x38f00b=_0xb1b867[_0x2e506d(0x7da)]()?this[_0x2e506d(0xbfc)](_0x205d5f):0x1;for(let _0x252617=0x0;_0x252617<_0x38f00b;_0x252617++){if(_0xb1b867[_0x2e506d(0x7da)]()&&_0x205d5f[_0x2e506d(0x92d)]()){if('oZrGH'===_0x2e506d(0x497)){if(this[_0x2e506d(0xaab)]())return![];if(this['isAlive']()&&this[_0x2e506d(0x845)]())return!![];if(this['isEnemy']()&&this[_0x2e506d(0x3e7)]()){if(this[_0x2e506d(0x3ef)]()&&this[_0x2e506d(0x7ca)]())return![];}else{if(this[_0x2e506d(0x3ef)]())return![];}return!![];}else this[_0x2e506d(0x21f)]('setActiveWeaponSet',_0x205d5f,_0x252617);}this[_0x2e506d(0x9cf)](_0x205d5f,_0xb1b867,_0x4884e5);}_0xb1b867[_0x2e506d(0x7da)]()&&_0x205d5f[_0x2e506d(0x92d)]()&&this[_0x2e506d(0x21f)](_0x2e506d(0x556),_0x205d5f),this[_0x2e506d(0x21f)](_0x2e506d(0x81a),_0x205d5f,_0x4884e5,![]),this[_0x2e506d(0x4e7)](_0x205d5f,_0x21d4b5,_0x50b176,_0x48fcd6);},Window_BattleLog[_0x4b2772(0x632)]['targetActionSet']=function(_0x35a344,_0x559ef4,_0xab84a1){const _0x2ee7f7=_0x4b2772,_0x3ba5c3=_0x559ef4['item']();for(const _0x117576 of _0xab84a1){if(!_0x117576)continue;this[_0x2ee7f7(0x21f)](_0x2ee7f7(0xb19),_0x35a344,_0x559ef4),this[_0x2ee7f7(0x21f)](_0x2ee7f7(0x59c),Sprite_Battler[_0x2ee7f7(0x86d)]),this[_0x2ee7f7(0x21f)](_0x2ee7f7(0x857),_0x35a344,[_0x117576],_0x3ba5c3[_0x2ee7f7(0x519)]),this[_0x2ee7f7(0x21f)](_0x2ee7f7(0x59c),0x18),this[_0x2ee7f7(0x21f)](_0x2ee7f7(0x6bf),_0x35a344,_0x117576);}},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x9cf)]=function(_0x410d56,_0x4f1f7c,_0x34765d){const _0x417a34=_0x4b2772,_0x2c8646=_0x4f1f7c[_0x417a34(0x30a)]();this['push'](_0x417a34(0xb19),_0x410d56,_0x4f1f7c),this[_0x417a34(0x21f)](_0x417a34(0x59c),Sprite_Battler['_motionSpeed']),this['push']('showAnimation',_0x410d56,_0x34765d[_0x417a34(0x5a4)](),_0x2c8646[_0x417a34(0x519)]),this['push'](_0x417a34(0x5de));for(const _0x116771 of _0x34765d){if(!_0x116771)continue;this[_0x417a34(0x21f)](_0x417a34(0x6bf),_0x410d56,_0x116771);}},Window_BattleLog['prototype'][_0x4b2772(0xcc4)]=function(_0x591db3,_0x5756b8,_0x47e0c7){const _0x203390=_0x4b2772,_0x17e23b=_0x5756b8[_0x203390(0x30a)]();this[_0x203390(0x21f)](_0x203390(0x81a),_0x591db3,_0x47e0c7,![]),this['push'](_0x203390(0x661)),this[_0x203390(0x21f)](_0x203390(0x2d0)),this[_0x203390(0x21f)](_0x203390(0x4d6)),this['push']('performActionEnd',_0x591db3),this[_0x203390(0x21f)](_0x203390(0x643));},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x2ca)]=function(_0x5cc4fa){},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x1f9)]=Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x762)],Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x762)]=function(_0x47a617){const _0x5096e3=_0x4b2772;if(!VisuMZ[_0x5096e3(0x67d)][_0x5096e3(0x869)]['BattleLog'][_0x5096e3(0x5f1)])return;VisuMZ[_0x5096e3(0x67d)][_0x5096e3(0x1f9)][_0x5096e3(0xb2b)](this,_0x47a617);},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x660)]=function(_0x40e012){const _0x3b1edf=_0x4b2772;this[_0x3b1edf(0x21f)]('performCounter',_0x40e012);VisuMZ['BattleCore'][_0x3b1edf(0x869)]['ActionSequence']['CounterPlayback']&&(_0x3b1edf(0x4c0)!==_0x3b1edf(0x3aa)?this[_0x3b1edf(0x21f)](_0x3b1edf(0x857),_0x40e012,[BattleManager[_0x3b1edf(0x4f1)]],-0x1):(this[_0x3b1edf(0x879)]=(this[_0x3b1edf(0x879)]*(_0xf53d9d-0x1)+this[_0x3b1edf(0x354)])/_0x45df78,this['_homeY']=(this['_homeY']*(_0x3d97f7-0x1)+this['_targetHomeY'])/_0x418a38));if(!VisuMZ[_0x3b1edf(0x67d)]['Settings']['BattleLog']['ShowCounter'])return;this[_0x3b1edf(0x21f)](_0x3b1edf(0x60b),TextManager['counterAttack'][_0x3b1edf(0x934)](_0x40e012[_0x3b1edf(0x8fe)]()));},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0xc5e)]=function(_0x15f145){const _0x78242=_0x4b2772;this[_0x78242(0x21f)](_0x78242(0x21b),_0x15f145);if(!VisuMZ[_0x78242(0x67d)][_0x78242(0x869)][_0x78242(0xa7a)][_0x78242(0x8db)])return;this[_0x78242(0x21f)]('addText',TextManager[_0x78242(0xa73)]['format'](_0x15f145[_0x78242(0x8fe)]()));},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x24d)]=function(_0x2f0413,_0x5d4a78){const _0x37b014=_0x4b2772;if(VisuMZ[_0x37b014(0x67d)]['Settings'][_0x37b014(0xcb4)][_0x37b014(0x43b)]){if(_0x37b014(0xc5a)==='YtiFi')return _0x7feaf1;else{const _0x39059a=_0x5d4a78[_0x37b014(0x30a)]();this[_0x37b014(0x21f)](_0x37b014(0x857),_0x2f0413,[_0x2f0413],_0x39059a[_0x37b014(0x519)]);}}},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0xbe0)]=function(_0x17efd5,_0x52c715){const _0x1b7cd6=_0x4b2772;this['push']('performSubstitute',_0x17efd5,_0x52c715);if(!VisuMZ[_0x1b7cd6(0x67d)][_0x1b7cd6(0x869)][_0x1b7cd6(0xa7a)][_0x1b7cd6(0x69c)])return;const _0x3dfd10=_0x17efd5[_0x1b7cd6(0x8fe)](),_0x55ab9c=TextManager[_0x1b7cd6(0x2e3)]['format'](_0x3dfd10,_0x52c715['name']());this[_0x1b7cd6(0x21f)](_0x1b7cd6(0x60b),_0x55ab9c);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x9ac)]=Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x916)],Window_BattleLog[_0x4b2772(0x632)]['displayActionResults']=function(_0x3d5998,_0x560114){const _0x5ec8bd=_0x4b2772;VisuMZ['BattleCore'][_0x5ec8bd(0x9ac)][_0x5ec8bd(0xb2b)](this,_0x3d5998,_0x560114);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x5e1)]=Window_BattleLog[_0x4b2772(0x632)]['displayFailure'],Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x2f9)]=function(_0x8dd88d){const _0x151c4e=_0x4b2772;if(!VisuMZ[_0x151c4e(0x67d)][_0x151c4e(0x869)][_0x151c4e(0xa7a)][_0x151c4e(0xb3f)])return;VisuMZ[_0x151c4e(0x67d)][_0x151c4e(0x5e1)][_0x151c4e(0xb2b)](this,_0x8dd88d);},VisuMZ['BattleCore'][_0x4b2772(0xa76)]=Window_BattleLog[_0x4b2772(0x632)]['displayCritical'],Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x1d9)]=function(_0x1d0fac){const _0xab03ff=_0x4b2772;if(!VisuMZ[_0xab03ff(0x67d)][_0xab03ff(0x869)][_0xab03ff(0xa7a)][_0xab03ff(0x9f6)])return;VisuMZ['BattleCore'][_0xab03ff(0xa76)][_0xab03ff(0xb2b)](this,_0x1d0fac);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x5a7)]=Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x59e)],Window_BattleLog[_0x4b2772(0x632)]['displayMiss']=function(_0x1ecad5){const _0x3d9e4b=_0x4b2772;!VisuMZ['BattleCore'][_0x3d9e4b(0x869)][_0x3d9e4b(0xa7a)][_0x3d9e4b(0x5e7)]?this[_0x3d9e4b(0x21f)]('performMiss',_0x1ecad5):VisuMZ[_0x3d9e4b(0x67d)]['Window_BattleLog_displayMiss'][_0x3d9e4b(0xb2b)](this,_0x1ecad5);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xc05)]=Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x46e)],Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x46e)]=function(_0x4f8271){const _0x2f7631=_0x4b2772;!VisuMZ[_0x2f7631(0x67d)][_0x2f7631(0x869)][_0x2f7631(0xa7a)][_0x2f7631(0x5e7)]?'eIxCi'===_0x2f7631(0xaa5)?(_0x452353[_0x2f7631(0x67d)][_0x2f7631(0x7dc)]['call'](this),this[_0x2f7631(0x2e7)](),this[_0x2f7631(0xb90)]()):_0x4f8271[_0x2f7631(0x4b5)]()[_0x2f7631(0x3d6)]?this[_0x2f7631(0x21f)](_0x2f7631(0xaaf),_0x4f8271):this[_0x2f7631(0x21f)](_0x2f7631(0x2d3),_0x4f8271):VisuMZ[_0x2f7631(0x67d)][_0x2f7631(0xc05)][_0x2f7631(0xb2b)](this,_0x4f8271);},Window_BattleLog['prototype'][_0x4b2772(0xc8e)]=function(_0x25985e){const _0x321345=_0x4b2772;if(_0x25985e[_0x321345(0x4b5)]()[_0x321345(0x64e)]){_0x25985e[_0x321345(0x4b5)]()['hpDamage']>0x0&&!_0x25985e['result']()[_0x321345(0x213)]&&this['push']('performDamage',_0x25985e);if(_0x25985e[_0x321345(0x4b5)]()[_0x321345(0x2d7)]<0x0){if(_0x321345(0x6ae)===_0x321345(0x77b)){const _0x135406=_0x3cbc84[_0x321345(0x23c)](_0x49138c);_0x135406[_0x321345(0xa36)]=![],_0x135406[_0x321345(0x771)]=![],_0x135406[_0x321345(0x64e)]=![],this[_0x321345(0x68f)]['push'](_0x135406);}else this[_0x321345(0x21f)](_0x321345(0x61f),_0x25985e);}VisuMZ[_0x321345(0x67d)]['Settings']['BattleLog'][_0x321345(0x56b)]&&this[_0x321345(0x21f)]('addText',this['makeHpDamageText'](_0x25985e));}},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xcb3)]=Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x80e)],Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x80e)]=function(_0x3abbd2){const _0x3a0079=_0x4b2772;if(!VisuMZ[_0x3a0079(0x67d)][_0x3a0079(0x869)][_0x3a0079(0xa7a)]['ShowMpDmg'])return;VisuMZ[_0x3a0079(0x67d)][_0x3a0079(0xcb3)][_0x3a0079(0xb2b)](this,_0x3abbd2);},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x6a4)]=Window_BattleLog['prototype'][_0x4b2772(0x448)],Window_BattleLog[_0x4b2772(0x632)]['displayTpDamage']=function(_0x1ed748){const _0x5aced7=_0x4b2772;if(!VisuMZ[_0x5aced7(0x67d)][_0x5aced7(0x869)][_0x5aced7(0xa7a)][_0x5aced7(0x708)])return;VisuMZ[_0x5aced7(0x67d)][_0x5aced7(0x6a4)][_0x5aced7(0xb2b)](this,_0x1ed748);},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x650)]=function(_0x11ef8b){const _0x3e4bfc=_0x4b2772;_0x11ef8b[_0x3e4bfc(0x4b5)]()[_0x3e4bfc(0x506)]()&&(this['push'](_0x3e4bfc(0x60d)),this['displayChangedStates'](_0x11ef8b),this['displayChangedBuffs'](_0x11ef8b),this[_0x3e4bfc(0x21f)](_0x3e4bfc(0x661)));},Window_BattleLog['prototype'][_0x4b2772(0xba2)]=function(_0x16be2){const _0x2fa6f5=_0x4b2772,_0x37a860=_0x16be2[_0x2fa6f5(0x4b5)](),_0x506017=_0x37a860[_0x2fa6f5(0x73a)]();for(const _0x5824e3 of _0x506017){const _0x456542=_0x16be2['isActor']()?_0x5824e3[_0x2fa6f5(0xabd)]:_0x5824e3[_0x2fa6f5(0xbc9)];_0x456542&&VisuMZ[_0x2fa6f5(0x67d)][_0x2fa6f5(0x869)][_0x2fa6f5(0xa7a)]['ShowAddedState']&&(this[_0x2fa6f5(0x21f)](_0x2fa6f5(0x6e9)),this[_0x2fa6f5(0x21f)](_0x2fa6f5(0x8e0)),this['push']('pushBaseLine'),this[_0x2fa6f5(0x21f)](_0x2fa6f5(0x60b),_0x456542['format'](_0x16be2[_0x2fa6f5(0x8fe)]())),this['push']('wait'));if(_0x5824e3['id']===_0x16be2['deathStateId']()){if('wZpwq'===_0x2fa6f5(0xca5)){const _0x4e7f36=_0x4c2914['BattleCore']['Settings'][_0x2fa6f5(0xcb4)],_0x36a2a9=_0x4e7f36[_0x2fa6f5(0x993)],_0x246c7f=_0x4e7f36[_0x2fa6f5(0x57f)],_0x297c6a=_0x4e7f36[_0x2fa6f5(0x5a6)];this['startMove'](-_0x36a2a9,-_0x246c7f,_0x297c6a);}else this[_0x2fa6f5(0x21f)]('performCollapse',_0x16be2);}}},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x6e9)]=function(){},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x6dc)]=function(_0x197368){const _0x3d5466=_0x4b2772;if(!VisuMZ[_0x3d5466(0x67d)][_0x3d5466(0x869)][_0x3d5466(0xa7a)][_0x3d5466(0x873)])return;const _0x1048c2=_0x197368[_0x3d5466(0x4b5)](),_0x2c1b9f=_0x1048c2['removedStateObjects']();for(const _0x51eb11 of _0x2c1b9f){_0x51eb11[_0x3d5466(0xa6c)]&&(this['push'](_0x3d5466(0x5e0)),this['push']('popBaseLine'),this['push'](_0x3d5466(0x60d)),this[_0x3d5466(0x21f)]('addText',_0x51eb11[_0x3d5466(0xa6c)][_0x3d5466(0x934)](_0x197368['name']())),this[_0x3d5466(0x21f)](_0x3d5466(0x5c5)));}},Window_BattleLog[_0x4b2772(0x632)]['fnordRemovedStates']=function(){},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x78b)]=function(_0x218215){const _0x4fb7ee=_0x4b2772,_0x4a41f6=VisuMZ[_0x4fb7ee(0x67d)][_0x4fb7ee(0x869)][_0x4fb7ee(0xa7a)],_0xd63bea=_0x218215['result']();if(_0x4a41f6[_0x4fb7ee(0x231)])this['displayBuffs'](_0x218215,_0xd63bea[_0x4fb7ee(0xbee)],TextManager[_0x4fb7ee(0x1ef)]);if(_0x4a41f6[_0x4fb7ee(0x76c)])this[_0x4fb7ee(0x25e)](_0x218215,_0xd63bea[_0x4fb7ee(0x562)],TextManager[_0x4fb7ee(0x9fb)]);if(_0x4a41f6['ShowRemovedBuff'])this[_0x4fb7ee(0x25e)](_0x218215,_0xd63bea['removedBuffs'],TextManager[_0x4fb7ee(0x958)]);},Window_BattleLog['prototype'][_0x4b2772(0x25e)]=function(_0x122e3a,_0x3641fb,_0x53cad4){const _0x4060ef=_0x4b2772;for(const _0x261c55 of _0x3641fb){if('YfCqB'!=='wfqst'){const _0x4510f6=_0x53cad4[_0x4060ef(0x934)](_0x122e3a[_0x4060ef(0x8fe)](),TextManager[_0x4060ef(0xc76)](_0x261c55));this[_0x4060ef(0x21f)](_0x4060ef(0x8e0)),this['push'](_0x4060ef(0x60d)),this[_0x4060ef(0x21f)]('addText',_0x4510f6),this['push'](_0x4060ef(0x5c5));}else{let _0x52a5da=_0x577d18[_0x4060ef(0x67d)]['Game_Troop_expTotal'][_0x4060ef(0xb2b)](this);return this[_0x4060ef(0x63f)]&&(_0x52a5da*=this[_0x4060ef(0x63f)]()),_0x2d4a6e['ceil'](_0x52a5da);}}},VisuMZ[_0x4b2772(0x67d)]['Window_BattleLog_clear']=Window_BattleLog[_0x4b2772(0x632)]['clear'],Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x4d6)]=function(){const _0x50e4f8=_0x4b2772;VisuMZ[_0x50e4f8(0x67d)][_0x50e4f8(0x2b4)][_0x50e4f8(0xb2b)](this),this[_0x50e4f8(0x9da)]();},VisuMZ['BattleCore'][_0x4b2772(0x6e2)]=Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x60d)],Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x60d)]=function(){const _0x49a6c4=_0x4b2772;VisuMZ['BattleCore'][_0x49a6c4(0x6e2)]['call'](this),this['callNextMethod']();},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x8aa)]=Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x8e0)],Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x8e0)]=function(){const _0x8f852=_0x4b2772;VisuMZ[_0x8f852(0x67d)][_0x8f852(0x8aa)][_0x8f852(0xb2b)](this),this[_0x8f852(0x305)](),this['callNextMethod']();},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x728)]=Window_BattleLog['prototype'][_0x4b2772(0x442)],Window_BattleLog['prototype']['popupDamage']=function(_0x4eea8e){const _0x1d3b5e=_0x4b2772;VisuMZ['BattleCore']['Window_BattleLog_popupDamage']['call'](this,_0x4eea8e),this[_0x1d3b5e(0x9da)]();},Window_BattleLog['prototype'][_0x4b2772(0x661)]=function(){const _0x4b4fc4=_0x4b2772;let _0xabc9b9=0x0;this[_0x4b4fc4(0x696)]['length']>0x0&&(_0xabc9b9=this[_0x4b4fc4(0x696)][this['_baseLineStack'][_0x4b4fc4(0x1e9)]-0x1]);if(this[_0x4b4fc4(0xb98)][_0x4b4fc4(0x1e9)]>_0xabc9b9)this[_0x4b4fc4(0x5c5)]();else{if(_0x4b4fc4(0x834)==='hdzHE'){const _0x567ab5=_0x870a21[_0x4b4fc4(0x30a)]();this[_0x4b4fc4(0x657)](_0x5e95f9,_0x567ab5),this[_0x4b4fc4(0x21f)](_0x4b4fc4(0x81a),_0x18048f,_0x4481b5,!![]),this[_0x4b4fc4(0x21f)](_0x4b4fc4(0x850),_0x4f6c2f,_0x297d4b),this[_0x4b4fc4(0x21f)](_0x4b4fc4(0x643)),this[_0x4b4fc4(0x21f)](_0x4b4fc4(0xbb1),_0x44c310,_0x4d6930),this['push'](_0x4b4fc4(0x5de));}else this['callNextMethod']();}},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x3d5)]=Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x850)],Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x850)]=function(_0x4d475c,_0x1c4c8f){const _0xbf345f=_0x4b2772;VisuMZ['BattleCore'][_0xbf345f(0x3d5)][_0xbf345f(0xb2b)](this,_0x4d475c,_0x1c4c8f),this[_0xbf345f(0x9da)]();},VisuMZ[_0x4b2772(0x67d)]['Window_BattleLog_performAction']=Window_BattleLog['prototype']['performAction'],Window_BattleLog[_0x4b2772(0x632)]['performAction']=function(_0x2eb387,_0x40223d){const _0x29c67a=_0x4b2772;VisuMZ[_0x29c67a(0x67d)][_0x29c67a(0x4a4)]['call'](this,_0x2eb387,_0x40223d),this[_0x29c67a(0x9da)]();},VisuMZ[_0x4b2772(0x67d)]['Window_BattleLog_performActionEnd']=Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x595)],Window_BattleLog['prototype'][_0x4b2772(0x595)]=function(_0xf11340){const _0x1ef48b=_0x4b2772;VisuMZ[_0x1ef48b(0x67d)]['Window_BattleLog_performActionEnd'][_0x1ef48b(0xb2b)](this,_0xf11340);for(const _0x3323bd of BattleManager[_0x1ef48b(0x36e)]()){if(!_0x3323bd)continue;if(_0x3323bd['isDead']())continue;_0x3323bd['performActionEndMembers']();}this['callNextMethod']();},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0xb5e)]=Window_BattleLog['prototype'][_0x4b2772(0x3d4)],Window_BattleLog['prototype'][_0x4b2772(0x3d4)]=function(_0x2c3f41){const _0x234a4a=_0x4b2772;VisuMZ['BattleCore'][_0x234a4a(0xb5e)]['call'](this,_0x2c3f41),this[_0x234a4a(0x9da)]();},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x5cb)]=Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x569)],Window_BattleLog[_0x4b2772(0x632)]['performMiss']=function(_0x19f0a5){const _0x519e8c=_0x4b2772;VisuMZ['BattleCore'][_0x519e8c(0x5cb)][_0x519e8c(0xb2b)](this,_0x19f0a5),this[_0x519e8c(0x9da)]();},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x52a)]=Window_BattleLog[_0x4b2772(0x632)]['performRecovery'],Window_BattleLog[_0x4b2772(0x632)]['performRecovery']=function(_0x11f196){const _0x473f98=_0x4b2772;VisuMZ[_0x473f98(0x67d)]['Window_BattleLog_performRecovery'][_0x473f98(0xb2b)](this,_0x11f196),this[_0x473f98(0x9da)]();},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x7df)]=Window_BattleLog['prototype']['performEvasion'],Window_BattleLog[_0x4b2772(0x632)]['performEvasion']=function(_0x49eed6){const _0x54db6a=_0x4b2772;VisuMZ[_0x54db6a(0x67d)][_0x54db6a(0x7df)][_0x54db6a(0xb2b)](this,_0x49eed6),this[_0x54db6a(0x9da)]();},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x38e)]=Window_BattleLog['prototype'][_0x4b2772(0x2d3)],Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x2d3)]=function(_0x1c1153){const _0x298b78=_0x4b2772;VisuMZ[_0x298b78(0x67d)]['Window_BattleLog_performMagicEvasion'][_0x298b78(0xb2b)](this,_0x1c1153),this['callNextMethod']();},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x343)]=Window_BattleLog['prototype'][_0x4b2772(0xbd7)],Window_BattleLog['prototype'][_0x4b2772(0xbd7)]=function(_0x474683){const _0x155dcc=_0x4b2772;VisuMZ[_0x155dcc(0x67d)]['Window_BattleLog_performCounter']['call'](this,_0x474683),this[_0x155dcc(0x9da)]();},VisuMZ[_0x4b2772(0x67d)][_0x4b2772(0x9a1)]=Window_BattleLog['prototype'][_0x4b2772(0x21b)],Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x21b)]=function(_0x575d09){const _0xfc2960=_0x4b2772;VisuMZ[_0xfc2960(0x67d)][_0xfc2960(0x9a1)]['call'](this,_0x575d09),this[_0xfc2960(0x9da)]();},VisuMZ['BattleCore']['Window_BattleLog_performSubstitute']=Window_BattleLog['prototype']['performSubstitute'],Window_BattleLog['prototype'][_0x4b2772(0xb65)]=function(_0x2b3c2a,_0x25964f){const _0x522347=_0x4b2772;VisuMZ[_0x522347(0x67d)][_0x522347(0x5d0)][_0x522347(0xb2b)](this,_0x2b3c2a,_0x25964f),this[_0x522347(0x9da)]();},VisuMZ[_0x4b2772(0x67d)]['Window_BattleLog_performCollapse']=Window_BattleLog['prototype'][_0x4b2772(0x310)],Window_BattleLog['prototype']['performCollapse']=function(_0x1cf241){const _0x1b9c55=_0x4b2772;VisuMZ[_0x1b9c55(0x67d)][_0x1b9c55(0x4fa)]['call'](this,_0x1cf241),this['callNextMethod']();},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0xbb1)]=function(_0x12285b,_0x322401){const _0x6f79e4=_0x4b2772;_0x12285b[_0x6f79e4(0xbb1)](_0x322401),this[_0x6f79e4(0x9da)]();},Window_BattleLog['prototype'][_0x4b2772(0xa50)]=function(_0x2a68ff,_0x34e1a3){const _0x13c141=_0x2a68ff['attackAnimationId1']();_0x13c141<=0x0?SoundManager['playEnemyAttack']():this['showNormalAnimation'](_0x34e1a3,_0x13c141);},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x81a)]=function(_0x2db78c,_0x455e85,_0x5b8169){const _0x582d68=_0x4b2772,_0x5bd145=[_0x2db78c]['concat'](_0x455e85);for(const _0x4e8ad3 of _0x5bd145){if(_0x582d68(0x3bc)!==_0x582d68(0x3bc))_0x50517b=_0x36172[_0x582d68(0x7b8)]((_0x5c18b2,_0x3a8aa3)=>_0x5c18b2*(0x1-_0x3a8aa3),_0x4264b2);else{if(!_0x4e8ad3)continue;_0x4e8ad3['setImmortal'](_0x5b8169);}}this[_0x582d68(0x9da)]();},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x59c)]=function(_0x1b42c4){const _0x23b954=_0x4b2772;this[_0x23b954(0xc78)]=_0x1b42c4;},Window_BattleLog['prototype'][_0x4b2772(0x66d)]=function(_0x4d29ca,_0x84c2a3){const _0x454b2d=_0x4b2772;for(const _0x315729 of _0x4d29ca){if(!_0x315729)continue;_0x315729[_0x454b2d(0x66d)](_0x84c2a3);}this[_0x454b2d(0x9da)]();},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0x6c3)]=function(_0x58d56c,_0x1359e1,_0x335ec0,_0x223a24,_0x396106,_0x3fca9b){_0x58d56c['moveBattlerToPoint'](_0x1359e1,_0x335ec0,_0x223a24,_0x396106,_0x3fca9b,-0x1),this['callNextMethod']();},Window_BattleLog[_0x4b2772(0x632)][_0x4b2772(0xc2b)]=function(_0xa7a0d4,_0x173ebb,_0x299211,_0x209a05,_0x56b5e7,_0x263d53,_0xce914d){const _0x1a0db4=_0x4b2772,_0x476b60=Math[_0x1a0db4(0x7fa)](..._0x173ebb[_0x1a0db4(0x8b4)](_0x24ed8f=>_0x24ed8f[_0x1a0db4(0x947)]()['_baseX']-_0x24ed8f[_0x1a0db4(0x947)]()[_0x1a0db4(0xac8)]()/0x2)),_0x45d9d1=Math[_0x1a0db4(0x20e)](..._0x173ebb[_0x1a0db4(0x8b4)](_0x3ba397=>_0x3ba397[_0x1a0db4(0x947)]()['_baseX']+_0x3ba397[_0x1a0db4(0x947)]()[_0x1a0db4(0xac8)]()/0x2)),_0x345615=Math['min'](..._0x173ebb[_0x1a0db4(0x8b4)](_0x393087=>_0x393087[_0x1a0db4(0x947)]()[_0x1a0db4(0xaba)]-_0x393087[_0x1a0db4(0x947)]()['mainSpriteHeight']())),_0x394729=Math['max'](..._0x173ebb['map'](_0x198d93=>_0x198d93['battler']()[_0x1a0db4(0xaba)])),_0x5de4b3=_0x173ebb[_0x1a0db4(0xb8c)](_0x54d76d=>_0x54d76d['isActor']())['length'],_0x2ca1f4=_0x173ebb[_0x1a0db4(0xb8c)](_0x2887e5=>_0x2887e5[_0x1a0db4(0x9d4)]())[_0x1a0db4(0x1e9)];let _0x4f8e69=0x0,_0x25257b=0x0;if(_0x299211[_0x1a0db4(0x93d)](/front/i)){if('tIcnM'!==_0x1a0db4(0x3a0))_0x4f8e69=_0x5de4b3>=_0x2ca1f4?_0x476b60:_0x45d9d1;else for(const _0x2af2f2 of _0x122237[_0x1a0db4(0xb27)]()){this[_0x1a0db4(0x6c0)]['push'](_0x1a0db4(0x60b),_0x2e8794['emerge'][_0x1a0db4(0x934)](_0x2af2f2)),this[_0x1a0db4(0x6c0)][_0x1a0db4(0x21f)](_0x1a0db4(0x5c5)),_0x3701ab=!![];}}else{if(_0x299211[_0x1a0db4(0x93d)](/middle/i))_0x4f8e69=(_0x476b60+_0x45d9d1)/0x2,_0xce914d=-0x1;else _0x299211['match'](/back/i)&&(_0x4f8e69=_0x5de4b3>=_0x2ca1f4?_0x45d9d1:_0x476b60);}if(_0x299211['match'](/head/i))_0x25257b=_0x345615;else{if(_0x299211[_0x1a0db4(0x93d)](/center/i))_0x1a0db4(0x5d9)!==_0x1a0db4(0x318)?_0x25257b=(_0x345615+_0x394729)/0x2:(this[_0x1a0db4(0x8a7)]=new _0x52c6c9(),this[_0x1a0db4(0xaec)][_0x1a0db4(0x340)](this[_0x1a0db4(0x8a7)]));else _0x299211[_0x1a0db4(0x93d)](/base/i)&&(_0x25257b=_0x394729);}_0xa7a0d4[_0x1a0db4(0x63e)](_0x4f8e69,_0x25257b,_0x209a05,_0x56b5e7,_0x263d53,_0xce914d),this[_0x1a0db4(0x9da)]();},Window_BattleLog[_0x4b2772(0x632)]['performJump']=function(_0x147f84,_0xb59343,_0x195937){for(const _0x2a04eb of _0x147f84){if(!_0x2a04eb)continue;_0x2a04eb['jumpBattler'](_0xb59343,_0x195937);}this['callNextMethod']();};