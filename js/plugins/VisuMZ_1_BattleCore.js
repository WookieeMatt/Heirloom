//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.70;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.70] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.70b: October 20, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * 
 * Version 1.70: October 6, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0x4b7b09=_0x5164;(function(_0x331aa9,_0x5924c0){const _0x5ccd0e=_0x5164,_0x4b7edd=_0x331aa9();while(!![]){try{const _0x29ccfb=-parseInt(_0x5ccd0e(0x762))/0x1*(parseInt(_0x5ccd0e(0xac9))/0x2)+-parseInt(_0x5ccd0e(0xa32))/0x3+parseInt(_0x5ccd0e(0xa63))/0x4+parseInt(_0x5ccd0e(0x549))/0x5*(-parseInt(_0x5ccd0e(0x255))/0x6)+-parseInt(_0x5ccd0e(0x482))/0x7*(parseInt(_0x5ccd0e(0xb50))/0x8)+parseInt(_0x5ccd0e(0x90))/0x9+parseInt(_0x5ccd0e(0x8a4))/0xa*(parseInt(_0x5ccd0e(0xb6b))/0xb);if(_0x29ccfb===_0x5924c0)break;else _0x4b7edd['push'](_0x4b7edd['shift']());}catch(_0x341a19){_0x4b7edd['push'](_0x4b7edd['shift']());}}}(_0x5e6d,0x28084));var label=_0x4b7b09(0x6ce),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x4b7b09(0x451)](function(_0x319649){const _0x49d28d=_0x4b7b09;return _0x319649[_0x49d28d(0xa23)]&&_0x319649['description']['includes']('['+label+']');})[0x0];function _0x5164(_0x53cb85,_0x4ebc63){const _0x5e6db0=_0x5e6d();return _0x5164=function(_0x51642e,_0x405a7f){_0x51642e=_0x51642e-0x66;let _0x512f59=_0x5e6db0[_0x51642e];return _0x512f59;},_0x5164(_0x53cb85,_0x4ebc63);}VisuMZ[label][_0x4b7b09(0xb41)]=VisuMZ[label][_0x4b7b09(0xb41)]||{},VisuMZ['ConvertParams']=function(_0x3090ac,_0x37fcea){const _0x5b67e5=_0x4b7b09;for(const _0x3098c9 in _0x37fcea){if(_0x3098c9[_0x5b67e5(0x2c1)](/(.*):(.*)/i)){const _0x25bb1d=String(RegExp['$1']),_0x165dbc=String(RegExp['$2'])['toUpperCase']()[_0x5b67e5(0x612)]();let _0x48731b,_0xefc0e5,_0x2e7664;switch(_0x165dbc){case _0x5b67e5(0x782):_0x48731b=_0x37fcea[_0x3098c9]!==''?Number(_0x37fcea[_0x3098c9]):0x0;break;case _0x5b67e5(0x7ee):_0xefc0e5=_0x37fcea[_0x3098c9]!==''?JSON[_0x5b67e5(0x753)](_0x37fcea[_0x3098c9]):[],_0x48731b=_0xefc0e5[_0x5b67e5(0x78)](_0x46d9bc=>Number(_0x46d9bc));break;case _0x5b67e5(0xb23):_0x48731b=_0x37fcea[_0x3098c9]!==''?eval(_0x37fcea[_0x3098c9]):null;break;case _0x5b67e5(0x502):_0xefc0e5=_0x37fcea[_0x3098c9]!==''?JSON['parse'](_0x37fcea[_0x3098c9]):[],_0x48731b=_0xefc0e5[_0x5b67e5(0x78)](_0x31163a=>eval(_0x31163a));break;case _0x5b67e5(0x722):_0x48731b=_0x37fcea[_0x3098c9]!==''?JSON[_0x5b67e5(0x753)](_0x37fcea[_0x3098c9]):'';break;case _0x5b67e5(0x189):_0xefc0e5=_0x37fcea[_0x3098c9]!==''?JSON['parse'](_0x37fcea[_0x3098c9]):[],_0x48731b=_0xefc0e5[_0x5b67e5(0x78)](_0x471ec5=>JSON['parse'](_0x471ec5));break;case'FUNC':_0x48731b=_0x37fcea[_0x3098c9]!==''?new Function(JSON[_0x5b67e5(0x753)](_0x37fcea[_0x3098c9])):new Function('return\x200');break;case _0x5b67e5(0xa4a):_0xefc0e5=_0x37fcea[_0x3098c9]!==''?JSON['parse'](_0x37fcea[_0x3098c9]):[],_0x48731b=_0xefc0e5[_0x5b67e5(0x78)](_0x40e521=>new Function(JSON[_0x5b67e5(0x753)](_0x40e521)));break;case _0x5b67e5(0x4bc):_0x48731b=_0x37fcea[_0x3098c9]!==''?String(_0x37fcea[_0x3098c9]):'';break;case'ARRAYSTR':_0xefc0e5=_0x37fcea[_0x3098c9]!==''?JSON[_0x5b67e5(0x753)](_0x37fcea[_0x3098c9]):[],_0x48731b=_0xefc0e5[_0x5b67e5(0x78)](_0x179725=>String(_0x179725));break;case _0x5b67e5(0x8e0):_0x2e7664=_0x37fcea[_0x3098c9]!==''?JSON['parse'](_0x37fcea[_0x3098c9]):{},_0x3090ac[_0x25bb1d]={},VisuMZ['ConvertParams'](_0x3090ac[_0x25bb1d],_0x2e7664);continue;case'ARRAYSTRUCT':_0xefc0e5=_0x37fcea[_0x3098c9]!==''?JSON[_0x5b67e5(0x753)](_0x37fcea[_0x3098c9]):[],_0x48731b=_0xefc0e5[_0x5b67e5(0x78)](_0x245464=>VisuMZ[_0x5b67e5(0x92)]({},JSON['parse'](_0x245464)));break;default:continue;}_0x3090ac[_0x25bb1d]=_0x48731b;}}return _0x3090ac;},(_0x206768=>{const _0x113943=_0x4b7b09,_0x18259e=_0x206768[_0x113943(0x639)];for(const _0x22daed of dependencies){if(!Imported[_0x22daed]){alert(_0x113943(0x616)[_0x113943(0xace)](_0x18259e,_0x22daed)),SceneManager[_0x113943(0x9df)]();break;}}const _0x339f4b=_0x206768[_0x113943(0x9c9)];if(_0x339f4b[_0x113943(0x2c1)](/\[Version[ ](.*?)\]/i)){if(_0x113943(0x33d)===_0x113943(0x57d))this[_0x113943(0xe0)]()&&this[_0x113943(0xe0)]()[_0x113943(0x7ac)]();else{const _0x22412e=Number(RegExp['$1']);_0x22412e!==VisuMZ[label][_0x113943(0x2bf)]&&(alert(_0x113943(0xc0)[_0x113943(0xace)](_0x18259e,_0x22412e)),SceneManager[_0x113943(0x9df)]());}}if(_0x339f4b[_0x113943(0x2c1)](/\[Tier[ ](\d+)\]/i)){if('UiKeV'===_0x113943(0x87b)){const _0x2a655c=_0x478d2d(_0x85df64['$1'])[_0x113943(0x2c5)]()['trim']();if(_0x2a655c==='MANUAL')return _0x113943(0x217);if(_0x1440f4[_0x113943(0xed)][_0x2a655c])return _0x2a655c;}else{const _0x10e442=Number(RegExp['$1']);_0x10e442<tier?(alert('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'[_0x113943(0xace)](_0x18259e,_0x10e442,tier)),SceneManager[_0x113943(0x9df)]()):_0x113943(0x5e1)!==_0x113943(0x5c6)?tier=Math[_0x113943(0x90d)](_0x10e442,tier):(_0x28cfc[_0x113943(0x6ce)]['ParseClassNotetags']&&_0x183cac[_0x113943(0x6ce)][_0x113943(0x1ad)][_0x113943(0x4ad)](this,_0x104aa9),_0x49849b[_0x113943(0x6ce)][_0x113943(0xa53)](_0x4b3ff7));}}VisuMZ['ConvertParams'](VisuMZ[label][_0x113943(0xb41)],_0x206768['parameters']);})(pluginData),VisuMZ[_0x4b7b09(0x759)]=function(_0x158951){const _0x21ee1c=_0x4b7b09;let _0x9de246=[];for(const _0x14888a of _0x158951){if(_0x21ee1c(0x338)!==_0x21ee1c(0x9ec))_0x9de246=_0x9de246[_0x21ee1c(0xa28)](VisuMZ['ConvertActionSequenceTarget'](_0x14888a));else{_0x31b633=_0x324df8[_0x21ee1c(0x6ce)]['JS'][_0x472006][_0x21ee1c(0x4ad)](this,this['subject'](),_0x4db3e5,this['item'](),_0x40e75a);if(_0x4bd200)_0x2cdfc0=_0x51386f;}}return _0x9de246[_0x21ee1c(0x451)](_0x3def63=>_0x3def63);},VisuMZ[_0x4b7b09(0xb61)]=function(_0x5ca951){const _0xeb8903=_0x4b7b09,_0x4b772d=BattleManager[_0xeb8903(0xa87)]()['filter'](_0x30293d=>_0x30293d&&_0x30293d[_0xeb8903(0x990)]()),_0x3bbbf6=BattleManager[_0xeb8903(0xb2)],_0x4f8942=BattleManager[_0xeb8903(0x28f)],_0x2398c1=BattleManager['_allTargets']?BattleManager[_0xeb8903(0x634)]['slice'](0x0):_0x4b772d;_0x5ca951=_0x5ca951[_0xeb8903(0x79d)]()[_0xeb8903(0x612)]();if(_0x5ca951===_0xeb8903(0x5cf))return[_0x3bbbf6];else{if(_0x5ca951===_0xeb8903(0xa22))return[_0x4f8942];else{if(_0x5ca951==='prev\x20target'){if(_0xeb8903(0x30c)===_0xeb8903(0x465))this[_0xeb8903(0x7c8)]['x']=0x0,this['_borderPortraitTargetX']=_0x1cdfb2[_0xeb8903(0x83c)](_0x20927f['width']/0x2);else{if(_0x4f8942){if('aTQTu'!==_0xeb8903(0x445))!this[_0xeb8903(0x480)]&&(this[_0xeb8903(0x480)]=new _0x394d51(_0x1ed6ca),this['attachSpritesToDistortionSprite']()),this['_svBattlerSprite']['setBattler'](_0x24213a);else{const _0x2ba768=_0x2398c1['indexOf'](_0x4f8942);return _0x2ba768>=0x0?[_0x2398c1[_0x2ba768-0x1]||_0x4f8942]:[_0x4f8942];}}}}else{if(_0x5ca951===_0xeb8903(0x6a6)){if(_0xeb8903(0x87e)===_0xeb8903(0x87e)){if(_0x4f8942){if(_0xeb8903(0xb2b)==='zWYYV'){if(!this[_0xeb8903(0x4f9)]())return;_0x53f5c3[_0xeb8903(0x597)]()?this['x']=_0x1e406d[_0xeb8903(0x979)]-this[_0xeb8903(0x4f9)]()['battler']()[_0xeb8903(0x226)]:this['x']=this['enemy']()[_0xeb8903(0xe0)]()['_baseX'];this['x']-=_0x5629a7[_0xeb8903(0x2ca)](this[_0xeb8903(0x839)]/0x2),this['y']=this[_0xeb8903(0x4f9)]()[_0xeb8903(0xe0)]()[_0xeb8903(0x518)]-_0x71a7d4[_0xeb8903(0x2ca)](this[_0xeb8903(0xad8)]()*1.5);const _0x5b1b50=_0x2981ff[_0xeb8903(0x6ce)]['Settings']['Enemy'];this['x']+=_0x5b1b50[_0xeb8903(0x2ec)]||0x0,this['y']+=_0x5b1b50[_0xeb8903(0x62f)]||0x0;}else{const _0x4a204d=_0x2398c1[_0xeb8903(0x853)](_0x4f8942);return _0x4a204d>=0x0?[_0x2398c1[_0x4a204d+0x1]||_0x4f8942]:[_0x4f8942];}}}else _0x17fae2[_0xeb8903(0x6ce)]['Window_BattleLog_performCollapse'][_0xeb8903(0x4ad)](this,_0x4ffd6e),this[_0xeb8903(0x9bd)]();}else{if(_0x5ca951===_0xeb8903(0x6e2))return _0x2398c1;else{if(_0x5ca951==='focus')return[_0x3bbbf6]['concat'](_0x2398c1);else{if(_0x5ca951===_0xeb8903(0x2ae)){if(_0xeb8903(0x51d)!==_0xeb8903(0x6e4))return _0x4b772d['filter'](_0x44f969=>_0x44f969!==_0x3bbbf6&&!_0x2398c1[_0xeb8903(0x382)](_0x44f969)&&_0x44f969[_0xeb8903(0x866)]());else{_0x28c4b8[_0xeb8903(0x4d2)]['activate'][_0xeb8903(0x4ad)](this);const _0x5c38fc=this[_0xeb8903(0x1f7)]();_0x5c38fc==='border'&&this[_0xeb8903(0x25a)]();}}}}}}}}if(_0x3bbbf6){if(_0x5ca951===_0xeb8903(0x163))return _0xeb8903(0xfd)!=='TsjzF'?this[_0xeb8903(0x335)]()&&this[_0xeb8903(0x335)]()[_0xeb8903(0x6e3)]()&&this[_0xeb8903(0x335)]()[_0xeb8903(0x43b)]():_0x3bbbf6[_0xeb8903(0xafd)]()['aliveMembers']();else{if(_0x5ca951==='alive\x20friends\x20not\x20user')return _0x3bbbf6[_0xeb8903(0xafd)]()['aliveMembers']()[_0xeb8903(0x451)](_0x5edb7f=>_0x5edb7f!==_0x3bbbf6);else{if(_0x5ca951===_0xeb8903(0x71c)){if(_0xeb8903(0x889)!==_0xeb8903(0x889))this['removeStatesAuto'](0x1);else return _0x3bbbf6['friendsUnit']()[_0xeb8903(0x9d0)]()[_0xeb8903(0x451)](_0x2b0fa0=>_0x2b0fa0!==_0x4f8942);}else{if(_0x5ca951===_0xeb8903(0x876)){if('whyia'!==_0xeb8903(0x68f)){const _0x421ea8=this[_0xeb8903(0x222)];this[_0xeb8903(0x48a)]['move'](_0x421ea8,_0x421ea8),this[_0xeb8903(0x48a)]['x']=_0x421ea8-this['origin']['x'],this[_0xeb8903(0x48a)]['y']=_0x421ea8-this[_0xeb8903(0x3fa)]['y'],this[_0xeb8903(0xa01)]>0x0&&this[_0xeb8903(0x472)]>0x0?this[_0xeb8903(0x48a)][_0xeb8903(0xe2)]=this['isOpen']():this[_0xeb8903(0x48a)]['visible']=![];}else return _0x3bbbf6[_0xeb8903(0xafd)]()['deadMembers']();}else{if(_0x5ca951[_0xeb8903(0x2c1)](/FRIEND INDEX (\d+)/i)){const _0x120c9e=Number(RegExp['$1']);return[_0x3bbbf6['friendsUnit']()[_0xeb8903(0x878)]()[_0x120c9e]];}}}}}if(_0x5ca951===_0xeb8903(0x7c6)){if('QyPeW'!==_0xeb8903(0x104))this['_forcedBattleLayout']=_0xeb8903(0x577);else return _0x3bbbf6[_0xeb8903(0x436)]()[_0xeb8903(0x9d0)]();}else{if(_0x5ca951===_0xeb8903(0x7e9))return _0x3bbbf6[_0xeb8903(0x436)]()['aliveMembers']()[_0xeb8903(0x451)](_0x1d78cf=>_0x1d78cf!==_0x4f8942);else{if(_0x5ca951===_0xeb8903(0x559))return _0x3bbbf6['opponentsUnit']()[_0xeb8903(0x118)]();else{if(_0x5ca951['match'](/OPPONENT INDEX (\d+)/i)){const _0x238068=Number(RegExp['$1']);return[_0x3bbbf6[_0xeb8903(0x436)]()['members']()[_0x238068]];}}}}}if(_0x5ca951===_0xeb8903(0x534))return _0xeb8903(0x61c)==='OkoUZ'?_0x546747[_0xeb8903(0x4ce)][_0xeb8903(0x4ad)](this,_0x2238a4):$gameParty[_0xeb8903(0x9d0)]();else{if(_0x5ca951===_0xeb8903(0x7a1)){if(_0xeb8903(0xbc)===_0xeb8903(0xbc))return $gameParty['aliveMembers']()[_0xeb8903(0x451)](_0x39bdf4=>_0x39bdf4!==_0x3bbbf6);else{if(!this['canAttackBattleCore']())return![];return _0xffeaf3[_0xeb8903(0x6ce)]['Game_BattlerBase_canAttack'][_0xeb8903(0x4ad)](this);}}else{if(_0x5ca951==='alive\x20actors\x20not\x20target')return $gameParty[_0xeb8903(0x9d0)]()[_0xeb8903(0x451)](_0x47571e=>_0x47571e!==_0x4f8942);else{if(_0x5ca951==='dead\x20actors')return $gameParty[_0xeb8903(0x118)]();else{if(_0x5ca951[_0xeb8903(0x2c1)](/ACTOR INDEX (\d+)/i)){if('nCWvn'!==_0xeb8903(0x6a4)){const _0x8a8f1e=Number(RegExp['$1']);return[$gameParty[_0xeb8903(0x878)]()[_0x8a8f1e]];}else return!![];}else{if(_0x5ca951['match'](/ACTOR ID (\d+)/i)){if(_0xeb8903(0x937)===_0xeb8903(0x937)){const _0x26a488=Number(RegExp['$1']);return[$gameActors['actor'](_0x26a488)];}else _0x4b95f4[_0xeb8903(0x6ce)][_0xeb8903(0x22f)][_0xeb8903(0x4ad)](this),this[_0xeb8903(0x313)]=[];}}}}}}if(_0x5ca951===_0xeb8903(0x423))return $gameTroop[_0xeb8903(0x9d0)]();else{if(_0x5ca951===_0xeb8903(0x6d4))return _0xeb8903(0x1eb)===_0xeb8903(0x1eb)?$gameTroop[_0xeb8903(0x9d0)]()[_0xeb8903(0x451)](_0x5432ec=>_0x5432ec!==_0x3bbbf6):0x0;else{if(_0x5ca951===_0xeb8903(0x726))return $gameTroop['aliveMembers']()[_0xeb8903(0x451)](_0x4fc404=>_0x4fc404!==_0x4f8942);else{if(_0x5ca951===_0xeb8903(0x511)){if(_0xeb8903(0x254)!==_0xeb8903(0x239))return $gameTroop[_0xeb8903(0x118)]();else _0x5ee3bc['addDebuff'](_0x4e9df0,_0x226f4d);}else{if(_0x5ca951[_0xeb8903(0x2c1)](/ENEMY INDEX (\d+)/i)){const _0x309a91=Number(RegExp['$1']);return[$gameTroop[_0xeb8903(0x878)]()[_0x309a91]];}else{if(_0x5ca951['match'](/ENEMY ID (\d+)/i)){if(_0xeb8903(0x317)!==_0xeb8903(0x799)){const _0x49c7c3=Number(RegExp['$1']);return $gameTroop[_0xeb8903(0x9d0)]()[_0xeb8903(0x451)](_0x15d2f2=>_0x15d2f2['enemyId']()===_0x49c7c3);}else{if(_0x12d236[_0xeb8903(0x18e)]()){const _0x4a0609=this[_0xeb8903(0xe0)]();if(_0x4a0609)_0x4a0609['forceWeaponAnimation'](_0x598419);}}}}}}}}if(_0x5ca951===_0xeb8903(0x85f)){if(_0xeb8903(0x371)!==_0xeb8903(0x371))_0x3a2f09=(_0x3be0cc+_0xb43073)/0x2;else return _0x4b772d[_0xeb8903(0x451)](_0x4099c8=>_0x4099c8[_0xeb8903(0x23d)]());}else{if(_0x5ca951===_0xeb8903(0x59f)){if(_0xeb8903(0x34f)===_0xeb8903(0xb16))this[_0xeb8903(0x9aa)]=null;else return _0x4b772d[_0xeb8903(0x451)](_0x3f9b95=>_0x3f9b95[_0xeb8903(0x23d)]()&&_0x3f9b95!==_0x3bbbf6);}else{if(_0x5ca951===_0xeb8903(0x66a))return _0x4b772d['filter'](_0x218793=>_0x218793['isAlive']()&&_0x218793!==_0x4f8942);else{if(_0x5ca951==='dead\x20battlers'){if('deCeG'!==_0xeb8903(0x992))_0x200b7f[_0xeb8903(0x12f)]();else return _0x4b772d[_0xeb8903(0x451)](_0x453e4d=>_0x453e4d[_0xeb8903(0x44c)]());}}}}return[];},PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0xa16),_0x51d737=>{const _0x45822d=_0x4b7b09;if(!SceneManager[_0x45822d(0x18e)]())return;VisuMZ[_0x45822d(0x92)](_0x51d737,_0x51d737);const _0x10dfec=$gameTemp['getLastPluginCommandInterpreter'](),_0x49edc3=BattleManager['_action'],_0x3aa561=BattleManager[_0x45822d(0xb2)],_0x214d05=BattleManager[_0x45822d(0x634)]?BattleManager[_0x45822d(0x634)][_0x45822d(0x8ea)](0x0):[],_0x2572b5=BattleManager[_0x45822d(0xa2d)];if(!_0x10dfec||!_0x49edc3||!_0x3aa561)return;if(!_0x49edc3[_0x45822d(0x6e3)]())return;if(_0x51d737[_0x45822d(0x5ba)])_0x2572b5[_0x45822d(0x7ec)](_0x3aa561,_0x49edc3[_0x45822d(0x6e3)]());_0x51d737[_0x45822d(0x5bf)]&&(_0x45822d(0x11a)==='Fcmty'?(this[_0x45822d(0x410)](_0x45822d(0xaf9)),this[_0x45822d(0x51a)](_0xb93f9d),this[_0x45822d(0x496)](_0x237918),this[_0x45822d(0x410)](_0x45822d(0x485))):_0x2572b5[_0x45822d(0x410)]('applyImmortal',_0x3aa561,_0x214d05,!![]));if(_0x51d737['ActionStart'])_0x2572b5[_0x45822d(0x410)](_0x45822d(0x82e),_0x3aa561,_0x49edc3);if(_0x51d737[_0x45822d(0x67d)])_0x2572b5[_0x45822d(0x410)](_0x45822d(0xd1));if(_0x51d737[_0x45822d(0x1ca)])_0x2572b5[_0x45822d(0x410)]('performCastAnimation',_0x3aa561,_0x49edc3);if(_0x51d737[_0x45822d(0x8a8)])_0x2572b5[_0x45822d(0x410)](_0x45822d(0x6cd));_0x10dfec['setWaitMode'](_0x45822d(0x698));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x27b),_0x29499c=>{const _0x3a4055=_0x4b7b09;if(!SceneManager[_0x3a4055(0x18e)]())return;VisuMZ[_0x3a4055(0x92)](_0x29499c,_0x29499c);const _0x2ac9dc=$gameTemp['getLastPluginCommandInterpreter'](),_0x4b7a2d=BattleManager[_0x3a4055(0x290)],_0xc2bbfe=BattleManager['_subject'],_0x194a2f=BattleManager[_0x3a4055(0x634)]?BattleManager[_0x3a4055(0x634)][_0x3a4055(0x8ea)](0x0):[],_0x205eca=BattleManager[_0x3a4055(0xa2d)],_0x1a45d6=_0x29499c[_0x3a4055(0x9c8)]??![];if(!_0x2ac9dc||!_0x4b7a2d||!_0xc2bbfe)return;if(!_0x4b7a2d['item']())return;let _0x1f1cc7=_0x1a45d6?_0x205eca[_0x3a4055(0x3d9)](_0xc2bbfe):0x1;for(let _0x58f2ed=0x0;_0x58f2ed<_0x1f1cc7;_0x58f2ed++){if(_0x1a45d6&&_0xc2bbfe['isActor']()){if(_0x3a4055(0x935)!==_0x3a4055(0x128))_0x205eca[_0x3a4055(0x410)](_0x3a4055(0x4fe),_0xc2bbfe,_0x58f2ed);else{if(!this[_0x3a4055(0x78a)]())return![];return _0x14f9d4['BattleCore']['Game_BattlerBase_canGuard'][_0x3a4055(0x4ad)](this);}}if(_0x29499c['PerformAction'])_0x205eca[_0x3a4055(0x410)](_0x3a4055(0x552),_0xc2bbfe,_0x4b7a2d);if(_0x29499c[_0x3a4055(0x4fa)]>0x0)_0x205eca[_0x3a4055(0x410)]('waitCount',_0x29499c[_0x3a4055(0x4fa)]);if(_0x29499c['ActionAnimation'])_0x205eca[_0x3a4055(0x410)](_0x3a4055(0x49e),_0xc2bbfe,_0x194a2f,_0x4b7a2d[_0x3a4055(0x6e3)]()[_0x3a4055(0x22d)]);if(_0x29499c[_0x3a4055(0x8a8)])_0x205eca[_0x3a4055(0x410)](_0x3a4055(0x6cd));for(const _0x3a1043 of _0x194a2f){if(!_0x3a1043)continue;if(_0x29499c[_0x3a4055(0x8cb)])_0x205eca['push'](_0x3a4055(0x994),_0xc2bbfe,_0x3a1043);}}if(_0x1a45d6&&_0xc2bbfe[_0x3a4055(0xb0c)]()){if(_0x3a4055(0x49a)!==_0x3a4055(0x5de))_0x205eca[_0x3a4055(0x410)](_0x3a4055(0x35e),_0xc2bbfe);else{if(!_0xc5466c[_0x3a4055(0x18e)]())return;if(!_0x5437a7[_0x3a4055(0x83a)])return;_0x337212[_0x3a4055(0x92)](_0xb66917,_0x2d67ac);const _0x6fe287=_0x3bee1d[_0x3a4055(0x290)],_0x2fc27d=_0x37c217[_0x3a4055(0x6d8)];if(!_0x6fe287)return;_0x6fe287[_0x3a4055(0x8af)]=_0x2fc27d;}}if(_0x29499c[_0x3a4055(0x5bf)])_0x205eca['push'](_0x3a4055(0x74),_0xc2bbfe,_0x194a2f,![]);_0x2ac9dc[_0x3a4055(0x63e)]('battlelog');}),PluginManager['registerCommand'](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x65b),_0x35e184=>{const _0x4a6e72=_0x4b7b09;if(!SceneManager[_0x4a6e72(0x18e)]())return;VisuMZ['ConvertParams'](_0x35e184,_0x35e184);const _0x5941de=$gameTemp[_0x4a6e72(0x1cb)](),_0x502028=BattleManager['_action'],_0x2191e7=BattleManager[_0x4a6e72(0xb2)],_0x268736=BattleManager['_allTargets']?BattleManager[_0x4a6e72(0x634)]['slice'](0x0):[],_0x48c8b7=BattleManager[_0x4a6e72(0xa2d)],_0xd2146d=_0x35e184['DualWield']??![];if(!_0x5941de||!_0x502028||!_0x2191e7)return;if(!_0x502028['item']())return;let _0x5442d2=_0xd2146d?_0x48c8b7[_0x4a6e72(0x3d9)](_0x2191e7):0x1;for(let _0x1b069f=0x0;_0x1b069f<_0x5442d2;_0x1b069f++){for(const _0x14700b of _0x268736){if(_0x4a6e72(0x1d3)!==_0x4a6e72(0x1d3))_0x21fa8e[_0x4a6e72(0x680)]=_0x539f83,_0x25a5c1[_0x4a6e72(0x680)]=_0x1b8e8e,_0x46d1eb[_0x4a6e72(0x91a)](),_0x4db8a1['adjustPosition']();else{if(!_0x14700b)continue;if(_0xd2146d&&_0x2191e7['isActor']()){if('jraBd'==='aroDK')return _0x1234fd[_0x4a6e72(0x9d0)]();else _0x48c8b7[_0x4a6e72(0x410)](_0x4a6e72(0x4fe),_0x2191e7,_0x1b069f);}if(_0x35e184[_0x4a6e72(0x117)])_0x48c8b7[_0x4a6e72(0x410)](_0x4a6e72(0x552),_0x2191e7,_0x502028);if(_0x35e184[_0x4a6e72(0xca)]>0x0)_0x48c8b7[_0x4a6e72(0x410)]('waitCount',_0x35e184[_0x4a6e72(0xca)]);if(_0x35e184[_0x4a6e72(0x788)])_0x48c8b7['push']('showAnimation',_0x2191e7,[_0x14700b],_0x502028[_0x4a6e72(0x6e3)]()[_0x4a6e72(0x22d)]);if(_0x35e184[_0x4a6e72(0x54a)]>0x0)_0x48c8b7[_0x4a6e72(0x410)](_0x4a6e72(0x800),_0x35e184[_0x4a6e72(0x54a)]);if(_0x35e184[_0x4a6e72(0x8cb)])_0x48c8b7['push'](_0x4a6e72(0x994),_0x2191e7,_0x14700b);}}}_0xd2146d&&_0x2191e7['isActor']()&&_0x48c8b7[_0x4a6e72(0x410)](_0x4a6e72(0x35e),_0x2191e7);if(_0x35e184[_0x4a6e72(0x5bf)])_0x48c8b7[_0x4a6e72(0x410)](_0x4a6e72(0x74),_0x2191e7,_0x268736,![]);_0x5941de[_0x4a6e72(0x63e)]('battlelog');}),PluginManager['registerCommand'](pluginData[_0x4b7b09(0x639)],'ActSeq_Set_FinishAction',_0x2789f7=>{const _0xf5d6dc=_0x4b7b09;if(!SceneManager[_0xf5d6dc(0x18e)]())return;VisuMZ[_0xf5d6dc(0x92)](_0x2789f7,_0x2789f7);const _0x5cc8cb=$gameTemp[_0xf5d6dc(0x1cb)](),_0x1c7db0=BattleManager[_0xf5d6dc(0x290)],_0x2f91f7=BattleManager[_0xf5d6dc(0xb2)],_0x3814fa=BattleManager[_0xf5d6dc(0x634)]?BattleManager['_allTargets'][_0xf5d6dc(0x8ea)](0x0):[],_0x35ed6b=BattleManager[_0xf5d6dc(0xa2d)];if(!_0x5cc8cb||!_0x1c7db0||!_0x2f91f7)return;if(!_0x1c7db0[_0xf5d6dc(0x6e3)]())return;if(_0x2789f7['ApplyImmortal'])_0x35ed6b[_0xf5d6dc(0x410)]('applyImmortal',_0x2f91f7,_0x3814fa,![]);if(_0x2789f7[_0xf5d6dc(0x7b7)])_0x35ed6b[_0xf5d6dc(0x410)](_0xf5d6dc(0x485));if(_0x2789f7[_0xf5d6dc(0xcb)])_0x35ed6b[_0xf5d6dc(0x410)](_0xf5d6dc(0xa82));if(_0x2789f7['ClearBattleLog'])_0x35ed6b[_0xf5d6dc(0x410)]('clear');if(_0x2789f7['ActionEnd'])_0x35ed6b['push']('performActionEnd',_0x2f91f7);if(_0x2789f7['WaitForMovement'])_0x35ed6b[_0xf5d6dc(0x410)](_0xf5d6dc(0xd1));_0x5cc8cb[_0xf5d6dc(0x63e)]('battlelog');}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],_0x4b7b09(0x39d),_0x258dec=>{const _0x31e747=_0x4b7b09;if(!SceneManager[_0x31e747(0x18e)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ['ConvertParams'](_0x258dec,_0x258dec);const _0x3025ab=$gameTemp['getLastPluginCommandInterpreter'](),_0x23bcc7=_0x258dec[_0x31e747(0x377)];if(!_0x3025ab)return;$gameScreen['setBattleAngle'](_0x258dec[_0x31e747(0x6c6)],_0x258dec['Duration'],_0x258dec[_0x31e747(0x6cb)]);if(_0x23bcc7)_0x3025ab[_0x31e747(0x63e)](_0x31e747(0x78c));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],'ActSeq_Angle_Reset',_0x59ff26=>{const _0x415ca0=_0x4b7b09;if(!SceneManager[_0x415ca0(0x18e)]())return;if(!Imported[_0x415ca0(0x522)])return;VisuMZ[_0x415ca0(0x92)](_0x59ff26,_0x59ff26);const _0x329833=$gameTemp[_0x415ca0(0x1cb)](),_0x4fa607=_0x59ff26[_0x415ca0(0x377)];if(!_0x329833)return;$gameScreen[_0x415ca0(0x678)](0x0,_0x59ff26[_0x415ca0(0xad)],_0x59ff26['EasingType']);if(_0x4fa607)_0x329833['setWaitMode']('battleAngle');}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],_0x4b7b09(0x238),_0x1ba213=>{const _0x532e2b=_0x4b7b09;if(!SceneManager[_0x532e2b(0x18e)]())return;if(!Imported[_0x532e2b(0x522)])return;const _0x418a53=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x418a53)return;_0x418a53[_0x532e2b(0x63e)]('battleAngle');}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],'ActSeq_Animation_ActionAnimation',_0x205f71=>{const _0x4afb9e=_0x4b7b09;if(!SceneManager[_0x4afb9e(0x18e)]())return;VisuMZ['ConvertParams'](_0x205f71,_0x205f71);const _0x257d17=$gameTemp[_0x4afb9e(0x1cb)](),_0x271dc0=BattleManager['_action'],_0x175874=BattleManager[_0x4afb9e(0xb2)],_0x5412d4=VisuMZ['CreateActionSequenceTargets'](_0x205f71['Targets']),_0xeb454c=_0x205f71['Mirror'],_0x270a34=BattleManager['_logWindow'];if(!_0x257d17||!_0x271dc0||!_0x175874)return;if(!_0x271dc0['item']())return;let _0x477cb1=_0x271dc0[_0x4afb9e(0x6e3)]()[_0x4afb9e(0x22d)];if(_0x477cb1<0x0)_0x477cb1=_0x175874[_0x4afb9e(0x33c)]();$gameTemp[_0x4afb9e(0x7bb)](_0x5412d4,_0x477cb1,_0xeb454c),_0x205f71[_0x4afb9e(0x8a8)]&&_0x257d17[_0x4afb9e(0x63e)](_0x4afb9e(0x270));}),PluginManager['registerCommand'](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x3d3),_0x5ee3d2=>{const _0x427211=_0x4b7b09;if(!SceneManager[_0x427211(0x18e)]())return;VisuMZ['ConvertParams'](_0x5ee3d2,_0x5ee3d2);const _0x30be5a=$gameTemp['getLastPluginCommandInterpreter'](),_0x5762e5=BattleManager['_subject'],_0x397c07=VisuMZ[_0x427211(0x759)](_0x5ee3d2[_0x427211(0x94e)]),_0x5499c1=_0x5ee3d2[_0x427211(0x811)],_0x13dee0=BattleManager[_0x427211(0xa2d)];if(!_0x30be5a||!_0x5762e5)return;const _0x24dc1f=_0x5762e5[_0x427211(0x33c)]();$gameTemp[_0x427211(0x7bb)](_0x397c07,_0x24dc1f,_0x5499c1),_0x5ee3d2[_0x427211(0x8a8)]&&_0x30be5a[_0x427211(0x63e)]('battleAnimation');}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],'ActSeq_Animation_AttackAnimation2',_0x1ac770=>{const _0x4203db=_0x4b7b09;if(!SceneManager[_0x4203db(0x18e)]())return;VisuMZ[_0x4203db(0x92)](_0x1ac770,_0x1ac770);const _0x2b3533=_0x1a9ad5['attackAnimationIdSlot'](_0x1ac770[_0x4203db(0x779)]);if(_0x2b3533<=0x0)return;const _0x3dec2b=$gameTemp[_0x4203db(0x1cb)](),_0x1a9ad5=BattleManager[_0x4203db(0xb2)],_0x3ffa9e=VisuMZ[_0x4203db(0x759)](_0x1ac770[_0x4203db(0x94e)]),_0x39ac22=_0x1ac770['Mirror'],_0x33db2d=BattleManager['_logWindow'];if(!_0x3dec2b||!_0x1a9ad5)return;$gameTemp[_0x4203db(0x7bb)](_0x3ffa9e,_0x2b3533,_0x39ac22);if(_0x1ac770[_0x4203db(0x8a8)]){if(_0x4203db(0x7b0)!==_0x4203db(0x7b0))return _0x2d32ca[_0x4203db(0x5ae)]['battleLayoutStyle']()===_0x4203db(0xad5)?_0x3bfb5e[_0x4203db(0x6ce)]['Settings'][_0x4203db(0x8e4)][_0x4203db(0x4d9)]:_0x242f5b[_0x4203db(0x6ce)][_0x4203db(0xb41)][_0x4203db(0x8e4)][_0x4203db(0x470)];else _0x3dec2b[_0x4203db(0x63e)](_0x4203db(0x270));}}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],'ActSeq_Animation_CastAnimation',_0x1d05d2=>{const _0x3cd28f=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3cd28f(0x92)](_0x1d05d2,_0x1d05d2);const _0x34c140=$gameTemp[_0x3cd28f(0x1cb)](),_0x4f9806=BattleManager[_0x3cd28f(0x290)],_0x237d94=_0x1d05d2['Mirror'],_0x1d1100=VisuMZ['CreateActionSequenceTargets'](_0x1d05d2['Targets']);if(!_0x34c140||!_0x4f9806)return;if(!_0x4f9806[_0x3cd28f(0x6e3)]())return;for(const _0x484ac0 of _0x1d1100){if(!_0x484ac0)continue;_0x484ac0['performCastAnimation'](_0x4f9806,_0x237d94);}if(_0x1d05d2[_0x3cd28f(0x8a8)])_0x34c140[_0x3cd28f(0x63e)](_0x3cd28f(0x270));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x56d),_0x4e3851=>{const _0x1e5b8b=_0x4b7b09;VisuMZ[_0x1e5b8b(0x92)](_0x4e3851,_0x4e3851);const _0x435d5f=$gameTemp['getLastPluginCommandInterpreter'](),_0x481129=VisuMZ['CreateActionSequenceTargets'](_0x4e3851[_0x1e5b8b(0x94e)]),_0x398d3c=_0x4e3851[_0x1e5b8b(0x683)];if(!_0x398d3c)return;for(const _0x2eec20 of _0x481129){if(!_0x2eec20)continue;if(!_0x2eec20[_0x1e5b8b(0xb0c)]())continue;_0x2eec20[_0x1e5b8b(0x22c)](_0x398d3c);}}),PluginManager['registerCommand'](pluginData[_0x4b7b09(0x639)],'ActSeq_Animation_PlayAtCoordinate',_0x4365a0=>{const _0x33f957=_0x4b7b09;if(!SceneManager['_scene'])return;if(!SceneManager['_scene'][_0x33f957(0xa5b)])return;if(!Imported[_0x33f957(0x490)])return;VisuMZ[_0x33f957(0x92)](_0x4365a0,_0x4365a0);const _0x709723=$gameTemp['getLastPluginCommandInterpreter'](),_0x304495=Math['round'](_0x4365a0[_0x33f957(0x66d)]),_0x5c2e7f=Math[_0x33f957(0x2ca)](_0x4365a0[_0x33f957(0x919)]);$gameTemp[_0x33f957(0xa24)](_0x304495,_0x5c2e7f,_0x4365a0[_0x33f957(0x212)],_0x4365a0['Mirror'],_0x4365a0['Mute']),_0x4365a0[_0x33f957(0x9d3)]&&_0x709723&&(SceneManager['_scene'][_0x33f957(0xa5b)][_0x33f957(0x8b3)](),_0x709723[_0x33f957(0x63e)](_0x33f957(0x270)));}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],_0x4b7b09(0x6a1),_0x3cd29b=>{const _0x4fcd88=_0x4b7b09;if(!SceneManager[_0x4fcd88(0x18e)]())return;VisuMZ[_0x4fcd88(0x92)](_0x3cd29b,_0x3cd29b);const _0x30ecf1=$gameTemp[_0x4fcd88(0x1cb)](),_0x42e346=VisuMZ[_0x4fcd88(0x759)](_0x3cd29b[_0x4fcd88(0x94e)]),_0x4a8d0b=_0x3cd29b['AnimationID'],_0x2af4db=_0x3cd29b[_0x4fcd88(0x811)];if(!_0x30ecf1)return;$gameTemp[_0x4fcd88(0x7bb)](_0x42e346,_0x4a8d0b,_0x2af4db);if(_0x3cd29b[_0x4fcd88(0x8a8)])_0x30ecf1[_0x4fcd88(0x63e)](_0x4fcd88(0x270));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],'ActSeq_Animation_WaitForAnimation',_0x1b65e6=>{const _0x118680=_0x4b7b09;if(!SceneManager[_0x118680(0x18e)]())return;const _0x409fe2=$gameTemp[_0x118680(0x1cb)]();if(!_0x409fe2)return;_0x409fe2[_0x118680(0x63e)](_0x118680(0x270));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],'ActSeq_BattleLog_AddText',_0x48667f=>{const _0x2adb95=_0x4b7b09;if(!SceneManager[_0x2adb95(0x18e)]())return;VisuMZ[_0x2adb95(0x92)](_0x48667f,_0x48667f);const _0x26c8a1=BattleManager[_0x2adb95(0xa2d)],_0x1c69b8=_0x48667f[_0x2adb95(0x178)]&&Imported[_0x2adb95(0xa3a)];_0x26c8a1[_0x2adb95(0x8a9)](_0x48667f[_0x2adb95(0xae7)]),_0x1c69b8&&Imported[_0x2adb95(0xa3a)]&&(_0x2adb95(0x4e1)===_0x2adb95(0x151)?this[_0x2adb95(0x6d0)]():$gameSystem[_0x2adb95(0xa6a)](_0x48667f['Text']||'',_0x48667f['CombatLogIcon']||0x0));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0xb04),_0x4ade21=>{const _0x32a78c=_0x4b7b09;if(!SceneManager[_0x32a78c(0x18e)]())return;const _0x1e20c3=BattleManager[_0x32a78c(0xa2d)];_0x1e20c3[_0x32a78c(0x945)]();}),PluginManager['registerCommand'](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x4c1),_0x4286ac=>{const _0x41d384=_0x4b7b09;if(!SceneManager[_0x41d384(0x18e)]())return;const _0xcb2177=$gameTemp[_0x41d384(0x1cb)](),_0x2603d7=BattleManager[_0x41d384(0x290)],_0x2f9b71=BattleManager['_subject'],_0x5e604e=BattleManager['_logWindow'];if(!_0xcb2177||!_0x2603d7||!_0x2f9b71)return;if(!_0x2603d7[_0x41d384(0x6e3)]())return;_0x5e604e['displayAction'](_0x2f9b71,_0x2603d7[_0x41d384(0x6e3)]()),_0xcb2177[_0x41d384(0x63e)](_0x41d384(0x698));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],'ActSeq_BattleLog_PopBaseLine',_0x321df4=>{const _0x2861a6=_0x4b7b09;if(!SceneManager[_0x2861a6(0x18e)]())return;const _0x35dfe9=BattleManager[_0x2861a6(0xa2d)];_0x35dfe9['popBaseLine']();}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x34b),_0x3b2e7f=>{const _0x15b62b=_0x4b7b09;if(!SceneManager[_0x15b62b(0x18e)]())return;const _0x163873=BattleManager['_logWindow'];_0x163873['pushBaseLine']();}),PluginManager['registerCommand'](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x7a6),_0x5c3b63=>{const _0x5c18ed=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;const _0x208616=BattleManager[_0x5c18ed(0xa2d)];_0x208616[_0x5c18ed(0x75a)]();}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],'ActSeq_BattleLog_UI',_0x42ec24=>{const _0x4fd241=_0x4b7b09;if(!SceneManager[_0x4fd241(0x18e)]())return;VisuMZ[_0x4fd241(0x92)](_0x42ec24,_0x42ec24),SceneManager['_scene'][_0x4fd241(0x368)](_0x42ec24[_0x4fd241(0x50b)]);}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x49f),_0x57406d=>{const _0x3ce6aa=_0x4b7b09;if(!SceneManager[_0x3ce6aa(0x18e)]())return;const _0x3af94d=$gameTemp['getLastPluginCommandInterpreter']();_0x3af94d['setWaitMode'](_0x3ce6aa(0x698));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x3a5),_0x3d6abc=>{const _0x5c8a05=_0x4b7b09;if(!SceneManager[_0x5c8a05(0x18e)]())return;const _0x159d1f=$gameTemp[_0x5c8a05(0x1cb)](),_0x1587a9=BattleManager[_0x5c8a05(0xa2d)];_0x1587a9['waitForNewLine'](),_0x159d1f[_0x5c8a05(0x63e)](_0x5c8a05(0x698));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Camera_Clamp',_0xf92b56=>{const _0x31c990=_0x4b7b09;if(!SceneManager[_0x31c990(0x18e)]())return;if(!Imported[_0x31c990(0x522)])return;VisuMZ[_0x31c990(0x92)](_0xf92b56,_0xf92b56);const _0x1d44f4=$gameScreen['battleCameraData']();_0x1d44f4[_0x31c990(0x95e)]=_0xf92b56['Setting'];}),PluginManager['registerCommand'](pluginData[_0x4b7b09(0x639)],'ActSeq_Camera_FocusPoint',_0x235479=>{const _0x236368=_0x4b7b09;if(!SceneManager[_0x236368(0x18e)]())return;if(!Imported[_0x236368(0x522)])return;VisuMZ[_0x236368(0x92)](_0x235479,_0x235479);const _0x24d7ee=$gameTemp[_0x236368(0x1cb)](),_0x21764b=_0x235479['WaitForCamera'];$gameScreen['setBattleCameraPoint'](_0x235479['FocusX'],_0x235479[_0x236368(0xf2)],_0x235479['Duration'],_0x235479[_0x236368(0x6cb)]);if(_0x21764b)_0x24d7ee[_0x236368(0x63e)](_0x236368(0x834));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0xb3),_0x267649=>{const _0x2db469=_0x4b7b09;if(!SceneManager[_0x2db469(0x18e)]())return;if(!Imported[_0x2db469(0x522)])return;VisuMZ[_0x2db469(0x92)](_0x267649,_0x267649);const _0x579bd2=$gameTemp['getLastPluginCommandInterpreter'](),_0x293a2f=VisuMZ[_0x2db469(0x759)](_0x267649[_0x2db469(0x94e)]),_0xfbc60f=_0x267649['WaitForCamera'];$gameScreen[_0x2db469(0x309)](_0x293a2f,_0x267649['Duration'],_0x267649[_0x2db469(0x6cb)]);if(_0xfbc60f)_0x579bd2[_0x2db469(0x63e)](_0x2db469(0x834));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0xae3),_0x9bebae=>{const _0x3301f3=_0x4b7b09;if(!SceneManager[_0x3301f3(0x18e)]())return;if(!Imported[_0x3301f3(0x522)])return;VisuMZ['ConvertParams'](_0x9bebae,_0x9bebae);const _0x3e7bb1=$gameTemp[_0x3301f3(0x1cb)](),_0x3f9c18=_0x9bebae[_0x3301f3(0x142)];$gameScreen[_0x3301f3(0x71)](_0x9bebae['OffsetX'],_0x9bebae[_0x3301f3(0xaee)],_0x9bebae[_0x3301f3(0xad)],_0x9bebae['EasingType']);if(_0x3f9c18)_0x3e7bb1[_0x3301f3(0x63e)](_0x3301f3(0x834));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x705),_0x42e10f=>{const _0x1fba69=_0x4b7b09;if(!SceneManager[_0x1fba69(0x18e)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x1fba69(0x92)](_0x42e10f,_0x42e10f);const _0x3741cc=$gameTemp[_0x1fba69(0x1cb)](),_0x28a2ca=_0x42e10f['ResetFocus'],_0x387f85=_0x42e10f[_0x1fba69(0x526)],_0x1c72dc=_0x42e10f[_0x1fba69(0x142)];if(_0x28a2ca){const _0x28eef9=Math[_0x1fba69(0x2ca)](Graphics[_0x1fba69(0x839)]/0x2),_0x4dcc15=Math[_0x1fba69(0x2ca)](Graphics[_0x1fba69(0xb65)]/0x2);$gameScreen[_0x1fba69(0x1e0)](_0x28eef9,_0x4dcc15,_0x42e10f[_0x1fba69(0xad)],_0x42e10f[_0x1fba69(0x6cb)]);}_0x387f85&&$gameScreen[_0x1fba69(0x71)](0x0,0x0,_0x42e10f[_0x1fba69(0xad)],_0x42e10f[_0x1fba69(0x6cb)]);if(_0x1c72dc)_0x3741cc[_0x1fba69(0x63e)](_0x1fba69(0x834));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Camera_WaitForCamera',_0xd945b6=>{const _0x5e3b7a=_0x4b7b09;if(!SceneManager[_0x5e3b7a(0x18e)]())return;if(!Imported[_0x5e3b7a(0x522)])return;const _0x2e72c1=$gameTemp[_0x5e3b7a(0x1cb)]();if(!_0x2e72c1)return;_0x2e72c1[_0x5e3b7a(0x63e)]('battleCamera');}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x934),_0x5da544=>{const _0x1aeeb9=_0x4b7b09;if(!SceneManager[_0x1aeeb9(0x18e)]())return;if(!Imported[_0x1aeeb9(0xad2)])return;VisuMZ[_0x1aeeb9(0x92)](_0x5da544,_0x5da544);const _0x3b9080=VisuMZ[_0x1aeeb9(0x759)](_0x5da544[_0x1aeeb9(0x94e)]),_0x43d7c3=_0x5da544['MotionAni'][_0x1aeeb9(0x79d)]()[_0x1aeeb9(0x612)]();for(const _0x3e5fd7 of _0x3b9080){if(!_0x3e5fd7)continue;_0x3e5fd7[_0x1aeeb9(0xb62)](_0x43d7c3);}}),PluginManager['registerCommand'](pluginData['name'],_0x4b7b09(0x3d6),_0x4b6dd8=>{const _0x86299d=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ[_0x86299d(0x92)](_0x4b6dd8,_0x4b6dd8);const _0x323457=VisuMZ[_0x86299d(0x759)](_0x4b6dd8[_0x86299d(0x94e)]),_0x225a12=_0x4b6dd8['TimeScale'];for(const _0x5489a9 of _0x323457){if(_0x86299d(0x8bc)!==_0x86299d(0x8bc)){const _0x4d1dd1=_0x2157eb(_0x521fd1['$1']);return[_0xa22b92[_0x86299d(0x724)](_0x4d1dd1)];}else{if(!_0x5489a9)continue;_0x5489a9[_0x86299d(0xa34)]()['timeScale']=_0x225a12;}}}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0xb7b),_0x4f8caf=>{const _0x4b4002=_0x4b7b09;if(!SceneManager[_0x4b4002(0x18e)]())return;if(!Imported[_0x4b4002(0x83a)])return;VisuMZ[_0x4b4002(0x92)](_0x4f8caf,_0x4f8caf);const _0x189101=BattleManager[_0x4b4002(0x290)],_0x52d35f=_0x4f8caf[_0x4b4002(0x6d8)];if(!_0x189101)return;_0x189101[_0x4b4002(0x443)]=_0x52d35f;}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x6bf),_0x4d8062=>{const _0x38a130=_0x4b7b09;if(!SceneManager[_0x38a130(0x18e)]())return;if(!Imported[_0x38a130(0x83a)])return;const _0x40f53b=BattleManager[_0x38a130(0x290)];if(!_0x40f53b)return;_0x40f53b[_0x38a130(0xaac)]();}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],'ActSeq_Element_ForceElements',_0x716395=>{const _0x36ded9=_0x4b7b09;if(!SceneManager[_0x36ded9(0x18e)]())return;if(!Imported[_0x36ded9(0x83a)])return;VisuMZ[_0x36ded9(0x92)](_0x716395,_0x716395);const _0x31d78b=BattleManager[_0x36ded9(0x290)],_0x26dae7=_0x716395[_0x36ded9(0x6d8)];if(!_0x31d78b)return;_0x31d78b[_0x36ded9(0x8af)]=_0x26dae7;}),PluginManager['registerCommand'](pluginData['name'],_0x4b7b09(0xafe),_0xa8be91=>{const _0x57d9b9=_0x4b7b09;if(!SceneManager[_0x57d9b9(0x18e)]())return;if(!Imported[_0x57d9b9(0x83a)])return;const _0x18c8ff=BattleManager[_0x57d9b9(0x290)];if(!_0x18c8ff)return;_0x18c8ff[_0x57d9b9(0x3ab)]=!![];}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Horror_Clear',_0x520846=>{const _0x4e80e8=_0x4b7b09;if(!Imported[_0x4e80e8(0x832)])return;if(!SceneManager[_0x4e80e8(0x18e)]())return;VisuMZ[_0x4e80e8(0x92)](_0x520846,_0x520846);const _0x131c4a=VisuMZ[_0x4e80e8(0x759)](_0x520846[_0x4e80e8(0x94e)]);for(const _0x3d92f5 of _0x131c4a){if(!_0x3d92f5)continue;_0x3d92f5[_0x4e80e8(0x57c)](_0x4e80e8(0x17d)),_0x3d92f5['removeHorrorEffect']('glitch'),_0x3d92f5[_0x4e80e8(0x57c)]('tv'),_0x3d92f5[_0x4e80e8(0xb6f)]();}$gamePlayer['refresh']();}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],'ActSeq_Horror_GlitchCreate',_0x8fd354=>{const _0x4286dc=_0x4b7b09;if(!Imported[_0x4286dc(0x832)])return;if(!SceneManager[_0x4286dc(0x18e)]())return;VisuMZ[_0x4286dc(0x92)](_0x8fd354,_0x8fd354);const _0x1780ec=VisuMZ['CreateActionSequenceTargets'](_0x8fd354[_0x4286dc(0x94e)]),_0x335035='glitch';_0x8fd354[_0x4286dc(0x672)]=Math[_0x4286dc(0x83c)](_0x8fd354[_0x4286dc(0xa14)]/0x2),_0x8fd354[_0x4286dc(0xa3e)]=_0x8fd354[_0x4286dc(0xa14)],_0x8fd354[_0x4286dc(0x365)]=!![];for(const _0x269155 of _0x1780ec){if(_0x4286dc(0x8f8)!==_0x4286dc(0x8f8))return _0x186a68=_0x22f282(_0x31b657),_0x23aed9['match'](/#(.*)/i)?_0x4286dc(0x5cc)[_0x4286dc(0xace)](_0x547823(_0x370d92['$1'])):this[_0x4286dc(0x590)](_0x1774f5(_0x292836));else{if(!_0x269155)continue;_0x269155[_0x4286dc(0xc4)](_0x335035,_0x8fd354);}}$gamePlayer[_0x4286dc(0x75a)]();}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],_0x4b7b09(0x719),_0xe211ac=>{const _0x34473e=_0x4b7b09;if(!Imported[_0x34473e(0x832)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x34473e(0x92)](_0xe211ac,_0xe211ac);const _0x2ca6e9=VisuMZ[_0x34473e(0x759)](_0xe211ac[_0x34473e(0x94e)]);for(const _0x147360 of _0x2ca6e9){if(_0x34473e(0x638)===_0x34473e(0x6fc)){const _0x4b07cd=_0x290079[_0x34473e(0x6ce)][_0x34473e(0xb41)][_0x34473e(0xeb)];_0x4732f8!==_0x34473e(0x6b0)&&_0x4b07cd[_0x34473e(0x8a3)]&&_0x4dc135[_0x34473e(0x6ce)][_0x34473e(0x1b2)](_0x4b07cd[_0x34473e(0x8a3)])&&_0x317411['reserveCommonEvent'](_0x4b07cd[_0x34473e(0x8a3)]);const _0x23bd8b='%1Event'[_0x34473e(0xace)](_0x68c45e);_0x4b07cd[_0x23bd8b]&&_0x50035a[_0x34473e(0x6ce)][_0x34473e(0x1b2)](_0x4b07cd[_0x23bd8b])&&_0x49307a[_0x34473e(0x84f)](_0x4b07cd[_0x23bd8b]);}else{if(!_0x147360)continue;_0x147360[_0x34473e(0x57c)](_0x34473e(0x1d9));}}$gamePlayer[_0x34473e(0x75a)]();}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x7ba),_0x4a5503=>{const _0x304f27=_0x4b7b09;if(!Imported[_0x304f27(0x832)])return;if(!SceneManager[_0x304f27(0x18e)]())return;VisuMZ[_0x304f27(0x92)](_0x4a5503,_0x4a5503);const _0x501bb1=VisuMZ[_0x304f27(0x759)](_0x4a5503['Targets']),_0x24ba9c=_0x304f27(0x17d);for(const _0x154203 of _0x501bb1){if(!_0x154203)continue;_0x154203['setHorrorEffectSettings'](_0x24ba9c,_0x4a5503);}$gamePlayer[_0x304f27(0x75a)]();}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x6f),_0x29fc7a=>{const _0x2bbd18=_0x4b7b09;if(!Imported[_0x2bbd18(0x832)])return;if(!SceneManager[_0x2bbd18(0x18e)]())return;VisuMZ[_0x2bbd18(0x92)](_0x29fc7a,_0x29fc7a);const _0x1d7d71=VisuMZ[_0x2bbd18(0x759)](_0x29fc7a[_0x2bbd18(0x94e)]);for(const _0x391c3e of _0x1d7d71){if(_0x2bbd18(0x744)!=='LeCGr'){if(!_0x391c3e)continue;_0x391c3e[_0x2bbd18(0x57c)](_0x2bbd18(0x17d));}else this[_0x2bbd18(0x795)](_0x3caa93);}$gamePlayer[_0x2bbd18(0x75a)]();}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],'ActSeq_Horror_TVCreate',_0x86d021=>{const _0x436e3d=_0x4b7b09;if(!Imported[_0x436e3d(0x832)])return;if(!SceneManager[_0x436e3d(0x18e)]())return;VisuMZ[_0x436e3d(0x92)](_0x86d021,_0x86d021);const _0x3e644c=VisuMZ[_0x436e3d(0x759)](_0x86d021['Targets']),_0x148091='tv';for(const _0x87aa16 of _0x3e644c){if(!_0x87aa16)continue;_0x87aa16[_0x436e3d(0xc4)](_0x148091,_0x86d021);}$gamePlayer[_0x436e3d(0x75a)]();}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],_0x4b7b09(0xad1),_0x41c310=>{const _0xf8e9a=_0x4b7b09;if(!Imported[_0xf8e9a(0x832)])return;if(!SceneManager[_0xf8e9a(0x18e)]())return;VisuMZ[_0xf8e9a(0x92)](_0x41c310,_0x41c310);const _0x3bf3f5=VisuMZ[_0xf8e9a(0x759)](_0x41c310['Targets']);for(const _0x3a6bff of _0x3bf3f5){if(!_0x3a6bff)continue;_0x3a6bff[_0xf8e9a(0x57c)]('tv');}$gamePlayer['refresh']();}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],_0x4b7b09(0x61f),_0x4ab4c5=>{const _0x2e4486=_0x4b7b09;if(!Imported[_0x2e4486(0x5a4)])return;const _0x4a9bc8=SceneManager[_0x2e4486(0x5ae)][_0x2e4486(0xa5b)];if(!_0x4a9bc8)return;if(VisuMZ[_0x2e4486(0x57b)][_0x2e4486(0x2bf)]<=1.04){alert(_0x2e4486(0x6d1)),SceneManager[_0x2e4486(0x9df)]();return;}VisuMZ[_0x2e4486(0x92)](_0x4ab4c5,_0x4ab4c5);const _0x4f412f=_0x4ab4c5[_0x2e4486(0x471)];_0x4a9bc8[_0x2e4486(0x2fd)](_0x4f412f);}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x424),_0xc343f=>{const _0xce0242=_0x4b7b09;if(!SceneManager[_0xce0242(0x18e)]())return;if(!Imported[_0xce0242(0x5a4)])return;const _0x6368dd=SceneManager['_scene'][_0xce0242(0xa5b)];if(!_0x6368dd)return;VisuMZ[_0xce0242(0x92)](_0xc343f,_0xc343f);const _0x1e520d=_0xc343f[_0xce0242(0x15b)]||0x1,_0xc45d14=_0xc343f[_0xce0242(0xad)]||0x1,_0x1d7c83=_0xc343f['EasingType']||_0xce0242(0x5cb);_0x6368dd[_0xce0242(0x4f1)](_0x1e520d,_0xc45d14,_0x1d7c83);}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],_0x4b7b09(0xa2b),_0x1b4c17=>{const _0x3de1c7=_0x4b7b09;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x48e9ff=SceneManager[_0x3de1c7(0x5ae)][_0x3de1c7(0xa5b)];if(!_0x48e9ff)return;if(VisuMZ['ActSeqImpact'][_0x3de1c7(0x2bf)]<=1.04){alert(_0x3de1c7(0x6d1)),SceneManager[_0x3de1c7(0x9df)]();return;}VisuMZ[_0x3de1c7(0x92)](_0x1b4c17,_0x1b4c17);const _0x567072=_0x1b4c17['Enable'];_0x48e9ff[_0x3de1c7(0x6a0)](_0x567072);}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],_0x4b7b09(0x21e),_0x443863=>{const _0x96081f=_0x4b7b09;if(!SceneManager[_0x96081f(0x18e)]())return;if(!Imported[_0x96081f(0x5a4)])return;const _0x41407f=SceneManager[_0x96081f(0x5ae)]['_spriteset'];if(!_0x41407f)return;VisuMZ['ConvertParams'](_0x443863,_0x443863);const _0x2fa365=Number(_0x443863[_0x96081f(0x6c6)])||0x0,_0x16676a=Number(_0x443863['Rate']),_0x4102c6=_0x443863[_0x96081f(0xad)]||0x1,_0x8abadb=_0x443863['EasingType']||'Linear';_0x41407f[_0x96081f(0x167)](_0x2fa365,_0x16676a,_0x4102c6,_0x8abadb);}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x651),_0x5e5a87=>{const _0x243f7c=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x1e4d23=SceneManager[_0x243f7c(0x5ae)][_0x243f7c(0xa5b)];if(!_0x1e4d23)return;VisuMZ['ConvertParams'](_0x5e5a87,_0x5e5a87);const _0x163048=Number(_0x5e5a87[_0x243f7c(0x6c6)])||0x0,_0x26163b=Number(_0x5e5a87[_0x243f7c(0x3c7)]),_0x4cc185=_0x5e5a87['Duration']||0x1,_0x86a4fc=_0x5e5a87['EasingType']||'Linear',_0x19fecb=VisuMZ[_0x243f7c(0x759)](_0x5e5a87[_0x243f7c(0x94e)]);for(const _0x14bf34 of _0x19fecb){if(_0x243f7c(0x64e)!=='GlXin'){const _0x149ff9=_0xd0fa9a[_0x243f7c(0x4d2)][_0x243f7c(0x23c)](),_0x16b458=_0x1d61ae['boxWidth'],_0x15ae89=this['windowAreaHeight']()+_0x149ff9,_0x565830=0x0,_0x39cfbd=_0x9bb3f9[_0x243f7c(0x807)]-_0x15ae89+_0x149ff9;return new _0x2360c5(_0x565830,_0x39cfbd,_0x16b458,_0x15ae89);}else{if(!_0x14bf34)continue;if(!_0x14bf34[_0x243f7c(0xe0)]())continue;_0x14bf34[_0x243f7c(0xe0)]()[_0x243f7c(0x167)](_0x163048,_0x26163b,_0x4cc185,_0x86a4fc);}}}),PluginManager['registerCommand'](pluginData['name'],_0x4b7b09(0x133),_0x57c95a=>{const _0x5ca03b=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5ca03b(0x5a4)])return;VisuMZ[_0x5ca03b(0x92)](_0x57c95a,_0x57c95a);const _0x454f70={'delay':_0x57c95a[_0x5ca03b(0xbe)],'duration':_0x57c95a[_0x5ca03b(0xc9)],'hue':_0x57c95a[_0x5ca03b(0x623)],'opacityStart':_0x57c95a[_0x5ca03b(0x993)],'tone':_0x57c95a['tone'],'visible':!![]},_0x2451fb=VisuMZ[_0x5ca03b(0x759)](_0x57c95a[_0x5ca03b(0x94e)]);for(const _0x15f8c9 of _0x2451fb){if(_0x5ca03b(0x8d7)!==_0x5ca03b(0x3b4)){if(!_0x15f8c9)continue;_0x15f8c9['setBattlerMotionTrailData'](_0x454f70);}else{if(!_0x40b650[_0x5ca03b(0x18e)]())return;_0x31b5f6[_0x5ca03b(0x92)](_0x3f45ca,_0x3d81be);const _0x34293f=_0x31e5b7[_0x5ca03b(0x464)](_0x2a8939[_0x5ca03b(0x779)]);if(_0x34293f<=0x0)return;const _0x56e41a=_0x5c99fc['getLastPluginCommandInterpreter'](),_0x31e5b7=_0x596877[_0x5ca03b(0xb2)],_0x40e4f9=_0x161c5b[_0x5ca03b(0x759)](_0x1fc3f5[_0x5ca03b(0x94e)]),_0x4ae994=_0x50f772[_0x5ca03b(0x811)],_0x16b291=_0x26d1c1[_0x5ca03b(0xa2d)];if(!_0x56e41a||!_0x31e5b7)return;_0x3518ad[_0x5ca03b(0x7bb)](_0x40e4f9,_0x34293f,_0x4ae994),_0x36511a['WaitForAnimation']&&_0x56e41a[_0x5ca03b(0x63e)]('battleAnimation');}}}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],'ActSeq_Impact_MotionTrailRemove',_0x2185ff=>{const _0x1f40cc=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1f40cc(0x5a4)])return;VisuMZ[_0x1f40cc(0x92)](_0x2185ff,_0x2185ff);const _0x208428=VisuMZ[_0x1f40cc(0x759)](_0x2185ff['Targets']);for(const _0x30ab57 of _0x208428){if(!_0x30ab57)continue;_0x30ab57[_0x1f40cc(0x5e9)]();}}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x430),_0x2be6e3=>{const _0x255664=_0x4b7b09;if(!Imported[_0x255664(0x5a4)])return;const _0x30951d=SceneManager[_0x255664(0x5ae)][_0x255664(0xa5b)];if(!_0x30951d)return;if(VisuMZ['ActSeqImpact'][_0x255664(0x2bf)]<=1.04){if(_0x255664(0x55a)===_0x255664(0x55a)){alert(_0x255664(0x6d1)),SceneManager['exit']();return;}else{_0x2343b2['VisuMZ_0_CoreEngine']&&this[_0x255664(0x910)]()&&this[_0x255664(0x9ee)]();const _0x3d61dd=_0x3acbb5[_0x255664(0x878)](),_0x3c0816=[];for(const _0x4ecc7f of _0x3d61dd){_0x3c0816['push'](new _0x34a53e(_0x4ecc7f));}_0x3c0816[_0x255664(0x90e)](this['compareEnemySprite']['bind'](this));for(const _0x3adcad of _0x3c0816){this[_0x255664(0x1aa)]['addChild'](_0x3adcad);}this[_0x255664(0xa70)]=_0x3c0816;}}VisuMZ[_0x255664(0x92)](_0x2be6e3,_0x2be6e3);const _0x3d816d=_0x2be6e3[_0x255664(0x471)];_0x30951d['setupNegativeImpactFilter'](_0x3d816d);}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0xa4f),_0x165c3c=>{const _0x4b9be6=_0x4b7b09;if(!Imported[_0x4b9be6(0x5a4)])return;const _0x17dca1=SceneManager[_0x4b9be6(0x5ae)][_0x4b9be6(0xa5b)];if(!_0x17dca1)return;if(VisuMZ[_0x4b9be6(0x57b)]['version']<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ[_0x4b9be6(0x92)](_0x165c3c,_0x165c3c);const _0x43be13=_0x165c3c[_0x4b9be6(0x471)];_0x17dca1['setupOversaturateImpactFilter'](_0x43be13);}),PluginManager['registerCommand'](pluginData[_0x4b7b09(0x639)],'ActSeq_Impact_ShockwavePoint',_0x57b991=>{const _0x47889f=_0x4b7b09;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x1dc9be=SceneManager[_0x47889f(0x5ae)][_0x47889f(0xa5b)];if(!_0x1dc9be)return;VisuMZ[_0x47889f(0x92)](_0x57b991,_0x57b991);const _0x3abfa1=_0x57b991['X']||0x0,_0x17f88b=_0x57b991['Y']||0x0,_0x1354be=_0x57b991[_0x47889f(0x84d)]||0x0,_0x5303d2=_0x57b991['Wave']||0x0,_0x1a9ef3=_0x57b991[_0x47889f(0xad)]||0x1;_0x1dc9be[_0x47889f(0x13a)](_0x3abfa1,_0x17f88b,_0x1354be,_0x5303d2,_0x1a9ef3);}),PluginManager['registerCommand'](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x766),_0x5ed548=>{const _0x578e2c=_0x4b7b09;if(!SceneManager[_0x578e2c(0x18e)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x340b08=SceneManager[_0x578e2c(0x5ae)][_0x578e2c(0xa5b)];if(!_0x340b08)return;VisuMZ[_0x578e2c(0x92)](_0x5ed548,_0x5ed548);const _0x14b1db=VisuMZ['CreateActionSequenceTargets'](_0x5ed548[_0x578e2c(0x94e)]),_0x1ea6d9=_0x5ed548[_0x578e2c(0x2f5)],_0x548a88=_0x5ed548[_0x578e2c(0x883)]||0x0,_0x325a30=_0x5ed548['OffsetY']||0x0,_0x43de58=_0x5ed548[_0x578e2c(0x84d)]||0x0,_0x83c122=_0x5ed548[_0x578e2c(0x713)]||0x0,_0x6f9d05=_0x5ed548['Duration']||0x1;for(const _0x500119 of _0x14b1db){if(!_0x500119)continue;if(!_0x500119[_0x578e2c(0xe0)]())continue;const _0x202770=_0x500119[_0x578e2c(0xe0)]();let _0x19f5fc=_0x202770[_0x578e2c(0x226)],_0x52abb1=_0x202770[_0x578e2c(0x518)];_0x19f5fc+=(Graphics[_0x578e2c(0x839)]-Graphics[_0x578e2c(0x979)])/0x2,_0x52abb1+=(Graphics[_0x578e2c(0xb65)]-Graphics[_0x578e2c(0x807)])/0x2;if(_0x1ea6d9[_0x578e2c(0x2c1)](/front/i))_0x578e2c(0x180)===_0x578e2c(0x39c)?_0x1b1c35['setValue'](_0x308778['VariableDmg'],0x0):_0x19f5fc+=(_0x500119[_0x578e2c(0xfc)]()?0x1:-0x1)*_0x202770[_0x578e2c(0xa2)]()/0x2;else{if(_0x1ea6d9[_0x578e2c(0x2c1)](/back/i)){if(_0x578e2c(0x479)!==_0x578e2c(0x4aa))_0x19f5fc+=(_0x500119[_0x578e2c(0xfc)]()?-0x1:0x1)*_0x202770[_0x578e2c(0xa2)]()/0x2;else return _0x320baf[_0x578e2c(0x490)]?_0x1fb904[_0x578e2c(0x8be)]('ok'):_0x1d220b[_0x578e2c(0x6ce)][_0x578e2c(0xb41)][_0x578e2c(0x632)][_0x578e2c(0x5ef)];}}if(_0x1ea6d9[_0x578e2c(0x2c1)](/head/i))_0x52abb1-=_0x202770[_0x578e2c(0x22a)]();else _0x1ea6d9[_0x578e2c(0x2c1)](/center/i)&&(_0x578e2c(0xb35)!=='PmvCs'?_0x52abb1-=_0x202770['mainSpriteHeight']()/0x2:this[_0x578e2c(0x3d8)](_0x175c3b[_0x578e2c(0xa4d)]));_0x19f5fc+=_0x548a88,_0x52abb1+=_0x325a30,_0x340b08[_0x578e2c(0x13a)](_0x19f5fc,_0x52abb1,_0x43de58,_0x83c122,_0x6f9d05);}}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0xb22),_0x49cfac=>{const _0x9fbdbb=_0x4b7b09;if(!SceneManager[_0x9fbdbb(0x18e)]())return;if(!Imported[_0x9fbdbb(0x5a4)])return;const _0x4e948d=SceneManager[_0x9fbdbb(0x5ae)][_0x9fbdbb(0xa5b)];if(!_0x4e948d)return;VisuMZ[_0x9fbdbb(0x92)](_0x49cfac,_0x49cfac);const _0x296aaf=VisuMZ[_0x9fbdbb(0x759)](_0x49cfac['Targets']),_0x3357f2=_0x49cfac[_0x9fbdbb(0x2f5)],_0x378de3=_0x49cfac['OffsetX']||0x0,_0x254cd4=_0x49cfac[_0x9fbdbb(0xaee)]||0x0,_0x434187=_0x49cfac[_0x9fbdbb(0x84d)]||0x0,_0x5dda67=_0x49cfac[_0x9fbdbb(0x713)]||0x0,_0x3e95d2=_0x49cfac[_0x9fbdbb(0xad)]||0x1,_0x1f794d=Math[_0x9fbdbb(0x5e3)](..._0x296aaf[_0x9fbdbb(0x78)](_0x3ddaec=>_0x3ddaec[_0x9fbdbb(0xe0)]()[_0x9fbdbb(0x226)]-_0x3ddaec[_0x9fbdbb(0xe0)]()[_0x9fbdbb(0xa2)]()/0x2)),_0x1489a8=Math['max'](..._0x296aaf['map'](_0xe5b81e=>_0xe5b81e[_0x9fbdbb(0xe0)]()['_baseX']+_0xe5b81e[_0x9fbdbb(0xe0)]()[_0x9fbdbb(0xa2)]()/0x2)),_0x168663=Math['min'](..._0x296aaf[_0x9fbdbb(0x78)](_0x3506a8=>_0x3506a8[_0x9fbdbb(0xe0)]()[_0x9fbdbb(0x518)]-_0x3506a8[_0x9fbdbb(0xe0)]()[_0x9fbdbb(0x22a)]())),_0x5df93c=Math[_0x9fbdbb(0x90d)](..._0x296aaf['map'](_0x2b1cf2=>_0x2b1cf2[_0x9fbdbb(0xe0)]()[_0x9fbdbb(0x518)])),_0x4bed46=_0x296aaf[_0x9fbdbb(0x451)](_0x566287=>_0x566287['isActor']())[_0x9fbdbb(0x8db)],_0x21c94a=_0x296aaf[_0x9fbdbb(0x451)](_0x4eb4e7=>_0x4eb4e7[_0x9fbdbb(0xfc)]())[_0x9fbdbb(0x8db)];let _0x317bd9=0x0,_0x51ec6f=0x0;if(_0x3357f2['match'](/front/i))_0x317bd9=_0x4bed46>=_0x21c94a?_0x1f794d:_0x1489a8;else{if(_0x3357f2['match'](/middle/i)){if(_0x9fbdbb(0x9f7)!==_0x9fbdbb(0x9f7))return this[_0x9fbdbb(0x558)][_0x5bdd37];else _0x317bd9=(_0x1f794d+_0x1489a8)/0x2,melee=-0x1;}else _0x3357f2[_0x9fbdbb(0x2c1)](/back/i)&&(_0x317bd9=_0x4bed46>=_0x21c94a?_0x1489a8:_0x1f794d);}if(_0x3357f2['match'](/head/i))'DUfkp'!==_0x9fbdbb(0x376)?_0x51ec6f=_0x168663:(_0x28982b+=_0x25b1d1['isActor']()?-_0xad7998:_0x4fd30c,_0x3b6975+=_0x258266);else{if(_0x3357f2['match'](/center/i))_0x51ec6f=(_0x168663+_0x5df93c)/0x2;else _0x3357f2['match'](/base/i)&&(_0x51ec6f=_0x5df93c);}_0x317bd9+=(Graphics[_0x9fbdbb(0x839)]-Graphics['boxWidth'])/0x2,_0x51ec6f+=(Graphics['height']-Graphics[_0x9fbdbb(0x807)])/0x2,_0x317bd9+=_0x378de3,_0x51ec6f+=_0x254cd4,_0x4e948d[_0x9fbdbb(0x13a)](_0x317bd9,_0x51ec6f,_0x434187,_0x5dda67,_0x3e95d2);}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Impact_TimeScale',_0x29a72c=>{const _0x5a1244=_0x4b7b09;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x2e50c0=SceneManager['_scene']['_spriteset'];if(!_0x2e50c0)return;if(VisuMZ[_0x5a1244(0x57b)][_0x5a1244(0x2bf)]<=1.04){alert(_0x5a1244(0x6d1)),SceneManager[_0x5a1244(0x9df)]();return;}VisuMZ['ConvertParams'](_0x29a72c,_0x29a72c);const _0x378c48=$gameTemp[_0x5a1244(0x1cb)](),_0x49fbf9=Math[_0x5a1244(0x90d)](0.01,_0x29a72c[_0x5a1244(0x8e9)]);$gameTemp[_0x5a1244(0x652)](_0x49fbf9,_0x378c48);}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0xa76),_0x19d5ab=>{const _0x827fe5=_0x4b7b09;if(!Imported[_0x827fe5(0x5a4)])return;const _0x297f4c=SceneManager[_0x827fe5(0x5ae)][_0x827fe5(0xa5b)];if(!_0x297f4c)return;if(VisuMZ[_0x827fe5(0x57b)][_0x827fe5(0x2bf)]<=1.04){alert(_0x827fe5(0x6d1)),SceneManager[_0x827fe5(0x9df)]();return;}VisuMZ['ConvertParams'](_0x19d5ab,_0x19d5ab);const _0x4c0d09=$gameTemp[_0x827fe5(0x1cb)](),_0x32c090=_0x19d5ab['ms']||0x1;VisuMZ[_0x827fe5(0x57b)][_0x827fe5(0x865)](_0x32c090,_0x4c0d09);}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],_0x4b7b09(0x106),_0x40bcb5=>{const _0xf84782=_0x4b7b09;if(!Imported[_0xf84782(0x5a4)])return;const _0xf65721=SceneManager[_0xf84782(0x5ae)][_0xf84782(0xa5b)];if(!_0xf65721)return;VisuMZ[_0xf84782(0x92)](_0x40bcb5,_0x40bcb5);const _0x4a18a8=_0x40bcb5['X']||0x0,_0x49f309=_0x40bcb5['Y']||0x0,_0x595351=_0x40bcb5[_0xf84782(0x23b)]||0x0,_0x68521e=_0x40bcb5[_0xf84782(0x602)]||0x0,_0x1696e4=_0x40bcb5['Duration']||0x1,_0x26abc8=_0x40bcb5[_0xf84782(0x6cb)]||'Linear';_0xf65721[_0xf84782(0x3b0)](_0x595351,_0x4a18a8,_0x49f309,_0x68521e,_0x1696e4,_0x26abc8);}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],_0x4b7b09(0x77d),_0x2890a9=>{const _0x571dcc=_0x4b7b09;if(!Imported[_0x571dcc(0x5a4)])return;const _0x262d2e=SceneManager[_0x571dcc(0x5ae)][_0x571dcc(0xa5b)];if(!_0x262d2e)return;VisuMZ[_0x571dcc(0x92)](_0x2890a9,_0x2890a9);const _0xbcf189=VisuMZ[_0x571dcc(0x759)](_0x2890a9[_0x571dcc(0x94e)]),_0x48281f=_0x2890a9[_0x571dcc(0x2f5)],_0x3d2684=_0x2890a9[_0x571dcc(0x883)]||0x0,_0x38a799=_0x2890a9[_0x571dcc(0xaee)]||0x0,_0x3b0726=_0x2890a9['Strength']||0x0,_0x3e7302=_0x2890a9['Radius']||0x0,_0x1ccf54=_0x2890a9[_0x571dcc(0xad)]||0x1,_0x576847=_0x2890a9[_0x571dcc(0x6cb)]||_0x571dcc(0x5cb),_0x4ca28e=Math[_0x571dcc(0x5e3)](..._0xbcf189[_0x571dcc(0x78)](_0x26acec=>_0x26acec[_0x571dcc(0xe0)]()[_0x571dcc(0x226)]-_0x26acec[_0x571dcc(0xe0)]()[_0x571dcc(0xa2)]()/0x2)),_0x356501=Math['max'](..._0xbcf189[_0x571dcc(0x78)](_0x29b526=>_0x29b526[_0x571dcc(0xe0)]()['_baseX']+_0x29b526['battler']()[_0x571dcc(0xa2)]()/0x2)),_0x1bd206=Math['min'](..._0xbcf189[_0x571dcc(0x78)](_0x42071e=>_0x42071e[_0x571dcc(0xe0)]()['_baseY']-_0x42071e[_0x571dcc(0xe0)]()[_0x571dcc(0x22a)]())),_0x53a447=Math[_0x571dcc(0x90d)](..._0xbcf189[_0x571dcc(0x78)](_0x1e0076=>_0x1e0076[_0x571dcc(0xe0)]()[_0x571dcc(0x518)])),_0x1c8c5c=_0xbcf189[_0x571dcc(0x451)](_0x2ca68c=>_0x2ca68c['isActor']())[_0x571dcc(0x8db)],_0x17e0f0=_0xbcf189[_0x571dcc(0x451)](_0x1db1a3=>_0x1db1a3[_0x571dcc(0xfc)]())['length'];let _0x45c473=0x0,_0xd3a7a5=0x0;if(_0x48281f[_0x571dcc(0x2c1)](/front/i)){if(_0x571dcc(0x6f0)==='TeHoO')_0x45c473=_0x1c8c5c>=_0x17e0f0?_0x4ca28e:_0x356501;else return this[_0x571dcc(0x543)]()&&!this[_0x571dcc(0x204)]()?this[_0x571dcc(0x600)]():_0x463bfd['BattleCore'][_0x571dcc(0x7e7)]['call'](this);}else{if(_0x48281f[_0x571dcc(0x2c1)](/middle/i))_0x571dcc(0x46b)===_0x571dcc(0x46b)?(_0x45c473=(_0x4ca28e+_0x356501)/0x2,melee=-0x1):!this[_0x571dcc(0xa2d)][_0x571dcc(0xa27)]()&&this[_0x571dcc(0xb51)]();else{if(_0x48281f['match'](/back/i)){if(_0x571dcc(0xe6)===_0x571dcc(0xe6))_0x45c473=_0x1c8c5c>=_0x17e0f0?_0x356501:_0x4ca28e;else return _0x72a6e3(_0x29ee0e['$1']);}}}if(_0x48281f['match'](/head/i))_0xd3a7a5=_0x1bd206;else{if(_0x48281f[_0x571dcc(0x2c1)](/center/i)){if(_0x571dcc(0x39a)!=='xNfbI')_0xd3a7a5=(_0x1bd206+_0x53a447)/0x2;else{const _0x23df73=this['_mainSprite'][_0x571dcc(0x680)];_0x23df73&&(this[_0x571dcc(0x680)]=new _0x1c7a4c(_0x23df73[_0x571dcc(0x839)],_0x23df73[_0x571dcc(0xb65)]));}}else _0x48281f[_0x571dcc(0x2c1)](/base/i)&&(_0x571dcc(0x3ba)!=='RwwnZ'?_0xd3a7a5=_0x53a447:this['updateForceAction']());}_0x45c473+=(Graphics[_0x571dcc(0x839)]-Graphics['boxWidth'])/0x2,_0xd3a7a5+=(Graphics[_0x571dcc(0xb65)]-Graphics[_0x571dcc(0x807)])/0x2,_0x45c473+=_0x3d2684,_0xd3a7a5+=_0x38a799,_0x262d2e['setupZoomBlurImpactFilter'](_0x3b0726,_0x45c473,_0xd3a7a5,_0x3e7302,_0x1ccf54,_0x576847);}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],_0x4b7b09(0xa68),_0x205b10=>{const _0x10dbda=_0x4b7b09;if(!Imported[_0x10dbda(0x5a4)])return;const _0x2017b0=SceneManager['_scene'][_0x10dbda(0xa5b)];if(!_0x2017b0)return;if(VisuMZ[_0x10dbda(0x57b)][_0x10dbda(0x2bf)]<=1.05){if(_0x10dbda(0x7ef)!=='oShvK'){const _0x54d961=_0xb9b7ed[_0x10dbda(0x6e3)]();this[_0x10dbda(0x781)](_0x3dd19c,_0x3e2da1,_0x581aca),this['createEffectActionSet'](_0x5c28c5,_0x278232,_0x582aa9),this['finishActionSet'](_0x40cd22,_0x199da5,_0x467ac3);}else{alert(_0x10dbda(0x6d1)),SceneManager[_0x10dbda(0x9df)]();return;}}VisuMZ[_0x10dbda(0x92)](_0x205b10,_0x205b10);const _0x499e25=VisuMZ[_0x10dbda(0x759)](_0x205b10[_0x10dbda(0x94e)]),_0x186a1c={'filename':_0x205b10[_0x10dbda(0x683)],'horzCells':_0x205b10[_0x10dbda(0x587)]||0x1,'vertCells':_0x205b10[_0x10dbda(0x18d)]||0x1,'frameDelay':_0x205b10['frameDelay']||0x1,'smooth':_0x205b10[_0x10dbda(0x88)]||![],'anchorX':_0x205b10['anchorX']||0x0,'anchorY':_0x205b10[_0x10dbda(0x17b)]||0x0,'offsetX':_0x205b10[_0x10dbda(0x829)]||0x0,'offsetY':_0x205b10[_0x10dbda(0x9c4)]||0x0};for(const _0x49e74f of _0x499e25){if(!_0x49e74f)continue;if(!_0x49e74f[_0x10dbda(0xe0)]())continue;_0x49e74f['battler']()['startInjectAnimation'](_0x186a1c);}const _0x3d0e11=$gameTemp[_0x10dbda(0x1cb)]();_0x3d0e11&&_0x3d0e11['setWaitMode'](_0x10dbda(0x3da));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x6e7),_0x2085ea=>{const _0x2bdc1b=_0x4b7b09;if(!Imported[_0x2bdc1b(0x5a4)])return;const _0x466b9f=SceneManager[_0x2bdc1b(0x5ae)]['_spriteset'];if(!_0x466b9f)return;if(VisuMZ['ActSeqImpact']['version']<=1.05){if('UDJiG'!==_0x2bdc1b(0x909))_0x1fff03+=_0x17bf49(_0x279e1c['$2']);else{alert(_0x2bdc1b(0x6d1)),SceneManager[_0x2bdc1b(0x9df)]();return;}}VisuMZ[_0x2bdc1b(0x92)](_0x2085ea,_0x2085ea);const _0x390b3e=VisuMZ['CreateActionSequenceTargets'](_0x2085ea[_0x2bdc1b(0x94e)]);for(const _0x589600 of _0x390b3e){if(_0x2bdc1b(0xa30)===_0x2bdc1b(0x341)){if(!_0x32927b['VisuMZ_3_ActSeqImpact'])return;const _0x3b9d1b=_0x54a8ba[_0x2bdc1b(0x5ae)][_0x2bdc1b(0xa5b)];if(!_0x3b9d1b)return;if(_0x1ef49c[_0x2bdc1b(0x57b)]['version']<=1.04){_0x3e1e32('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),_0x347dbf[_0x2bdc1b(0x9df)]();return;}_0x194422[_0x2bdc1b(0x92)](_0x5ee960,_0x4ae61d);const _0x108243=_0x163316[_0x2bdc1b(0x1cb)](),_0xdfa819=_0x45ae60['ms']||0x1;_0x2e1ac9[_0x2bdc1b(0x57b)][_0x2bdc1b(0x865)](_0xdfa819,_0x108243);}else{if(!_0x589600)continue;if(!_0x589600[_0x2bdc1b(0xe0)]())continue;_0x589600[_0x2bdc1b(0xe0)]()['stopInjectAnimation']();}}}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x441),_0x2e5ac8=>{const _0x328cfe=_0x4b7b09;if(!Imported[_0x328cfe(0x5a4)])return;const _0x28a8c4=SceneManager['_scene'][_0x328cfe(0xa5b)];if(!_0x28a8c4)return;if(VisuMZ[_0x328cfe(0x57b)][_0x328cfe(0x2bf)]<=1.05){if('swuAt'===_0x328cfe(0x7c5))_0x38494f['command119']([_0x11b745]);else{alert(_0x328cfe(0x6d1)),SceneManager[_0x328cfe(0x9df)]();return;}}VisuMZ[_0x328cfe(0x92)](_0x2e5ac8,_0x2e5ac8);const _0x5862f9=VisuMZ['CreateActionSequenceTargets'](_0x2e5ac8[_0x328cfe(0x94e)]),_0x1a81e5=_0x2e5ac8[_0x328cfe(0x513)];for(const _0x4efed9 of _0x5862f9){if(!_0x4efed9)continue;if(!_0x4efed9[_0x328cfe(0xe0)]())continue;_0x4efed9[_0x328cfe(0xe0)]()['pauseInjectAnimation'](_0x1a81e5);}}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x3dc),_0x42ad12=>{const _0x139285=_0x4b7b09;if(!SceneManager[_0x139285(0x18e)]())return;const _0x87ecb=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x87ecb)return;_0x87ecb[_0x139285(0x63e)](_0x139285(0x7a2));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x8b2),_0x5ee47c=>{const _0x142678=_0x4b7b09;if(!SceneManager[_0x142678(0x18e)]())return;VisuMZ[_0x142678(0x92)](_0x5ee47c,_0x5ee47c);const _0xa9eefd=$gameTemp['getLastPluginCommandInterpreter'](),_0x3dfcdf=BattleManager[_0x142678(0x290)],_0x147e3c=BattleManager[_0x142678(0xb2)],_0x17b854=BattleManager[_0x142678(0xa2d)];if(!_0xa9eefd||!_0x3dfcdf||!_0x147e3c)return;if(!_0x3dfcdf[_0x142678(0x6e3)]())return;const _0x2d4506=VisuMZ[_0x142678(0x759)](_0x5ee47c['Targets']);for(const _0x2d7802 of _0x2d4506){if('hfjDP'!==_0x142678(0x5f0))_0x514526[_0x142678(0x6ce)][_0x142678(0x8c5)][_0x142678(0x4ad)](this,_0x555d84);else{if(!_0x2d7802)continue;_0x17b854[_0x142678(0x410)]('actionEffect',_0x147e3c,_0x2d7802);}}_0xa9eefd[_0x142678(0x63e)](_0x142678(0x698));}),PluginManager['registerCommand'](pluginData[_0x4b7b09(0x639)],'ActSeq_Mechanics_ActiveChainInputDisable',_0x510aac=>{const _0x31ce8e=_0x4b7b09;if(!SceneManager[_0x31ce8e(0x18e)]())return;if(!Imported[_0x31ce8e(0x91f)])return;$gameTemp['_performActionEnd']=!![];}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],'ActSeq_Mechanics_AddBuffDebuff',_0x398339=>{const _0x837357=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x837357(0x92)](_0x398339,_0x398339);const _0x37bb11=['MAXHP',_0x837357(0x34d),_0x837357(0x51c),'DEF',_0x837357(0x2e7),'MDF','AGI',_0x837357(0x454)],_0x1615a5=_0x398339[_0x837357(0x9d8)],_0x7a5e7e=_0x398339['Debuffs'],_0x5f24a0=_0x398339[_0x837357(0x871)],_0x36027d=VisuMZ['CreateActionSequenceTargets'](_0x398339[_0x837357(0x94e)]);for(const _0x30bb9d of _0x36027d){if(_0x837357(0xa39)!==_0x837357(0xa39)){const _0x422bf4=_0x5b12f0(_0x4e3cb3['$1'])[_0x837357(0x7c9)](/[\r\n]+/)[_0x837357(0x76b)](''),_0x100bf0=this['processRandomizedData'](_0x422bf4);_0x57607c=this[_0x837357(0x2e8)](_0x100bf0)||_0x1225d3,_0x3aa38b=_0x49efd7[_0x837357(0x348)](_0x2b252a);}else{if(!_0x30bb9d)continue;for(const _0x32e7f1 of _0x1615a5){const _0x4a94da=_0x37bb11['indexOf'](_0x32e7f1['toUpperCase']()[_0x837357(0x612)]());if(_0x4a94da>=0x0&&_0x4a94da<=0x7){if(_0x837357(0x192)===_0x837357(0x192))_0x30bb9d[_0x837357(0x697)](_0x4a94da,_0x5f24a0);else return![];}}for(const _0x3c9859 of _0x7a5e7e){const _0x346858=_0x37bb11['indexOf'](_0x3c9859[_0x837357(0x2c5)]()['trim']());if(_0x346858>=0x0&&_0x346858<=0x7){if(_0x837357(0xb83)===_0x837357(0xf0)){const _0x13c0c4=_0x1335d4['autoBattleStart'],_0x13362b=_0x837357(0x592);this[_0x837357(0x7d7)](_0x13c0c4,_0x13362b);}else _0x30bb9d[_0x837357(0x860)](_0x346858,_0x5f24a0);}}}}}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],'ActSeq_Mechanics_AddState',_0x344e78=>{const _0x3c187c=_0x4b7b09;if(!SceneManager[_0x3c187c(0x18e)]())return;VisuMZ[_0x3c187c(0x92)](_0x344e78,_0x344e78);const _0x2f8270=_0x344e78[_0x3c187c(0x898)],_0x2581ed=VisuMZ[_0x3c187c(0x759)](_0x344e78[_0x3c187c(0x94e)]);for(const _0x2d94e3 of _0x2581ed){if(!_0x2d94e3)continue;for(const _0x23ae72 of _0x2f8270){if(_0x3c187c(0x9b9)!==_0x3c187c(0x9b9)){this[_0x3c187c(0xa7e)]=0x14,this[_0x3c187c(0x7c8)][_0x3c187c(0x680)]=_0x25d35e;_0x612f3[_0x3c187c(0x5ae)][_0x3c187c(0x8e7)]()?(this['_borderPortraitSprite']['x']=0x0,this[_0x3c187c(0x259)]=_0x34c474[_0x3c187c(0x83c)](_0x40ea6a[_0x3c187c(0x839)]/0x2)):(this[_0x3c187c(0x7c8)]['x']=this['width'],this['_borderPortraitTargetX']=this['width']*0x3/0x4);this[_0x3c187c(0x7c8)]['opacity']=0x0,this[_0x3c187c(0x7c8)]['y']=this['y']+this[_0x3c187c(0xb65)];const _0x1882aa=_0x13bdc8[_0x3c187c(0x724)]();_0x1882aa&&(this[_0x3c187c(0x259)]+=_0x1882aa[_0x3c187c(0x218)](),this[_0x3c187c(0x7c8)]['y']+=_0x1882aa['getBattlePortraitOffsetY']());}else _0x2d94e3[_0x3c187c(0x9ba)](_0x23ae72);}}}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x8cc),_0x1d1269=>{const _0x17ade0=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x1d1269,_0x1d1269);const _0x899e85=BattleManager[_0x17ade0(0x290)],_0x451ffa={'arPenRate':_0x1d1269[_0x17ade0(0x49d)],'arPenFlat':_0x1d1269['ArPenFlat'],'arRedRate':_0x1d1269[_0x17ade0(0x7d9)],'arRedFlat':_0x1d1269[_0x17ade0(0x824)]};_0x899e85[_0x17ade0(0xa5)]=_0x451ffa;}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x30a),_0x40c7cf=>{const _0x3f5457=_0x4b7b09;if(!SceneManager[_0x3f5457(0x18e)]())return;if(!Imported['VisuMZ_3_WeaknessDisplay'])return;VisuMZ[_0x3f5457(0x92)](_0x40c7cf,_0x40c7cf);const _0x181e50=VisuMZ[_0x3f5457(0x759)](_0x40c7cf[_0x3f5457(0x94e)]),_0x4c8029=_0x40c7cf[_0x3f5457(0x86b)]||0x1;for(const _0x299aa0 of _0x181e50){if(_0x3f5457(0x692)==='AeXyp'){if(!_0x299aa0)continue;if(!_0x299aa0[_0x3f5457(0xfc)]())continue;_0x299aa0[_0x3f5457(0xe1)](_0x4c8029);}else _0x231381[_0x3f5457(0x6ce)][_0x3f5457(0x45b)]['call'](this,_0x2f1cfa);}}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],_0x4b7b09(0x86d),_0x53944d=>{const _0x498336=_0x4b7b09;if(!SceneManager[_0x498336(0x18e)]())return;if(!Imported[_0x498336(0xef)])return;if(!BattleManager[_0x498336(0xb05)]())return;VisuMZ[_0x498336(0x92)](_0x53944d,_0x53944d);const _0x2ab837=VisuMZ[_0x498336(0x759)](_0x53944d[_0x498336(0x94e)]),_0x189e51=_0x53944d[_0x498336(0x572)],_0x445096=_0x53944d[_0x498336(0x572)],_0x40b9c0=_0x53944d[_0x498336(0xd0)];for(const _0x34ebf0 of _0x2ab837){if(!_0x34ebf0)continue;if(_0x34ebf0[_0x498336(0x26b)]()){if(_0x498336(0x82b)!==_0x498336(0x82b)){if(!_0x4806aa[_0x498336(0x18e)]())return;const _0x3ac57a=_0x314f80[_0x498336(0x1cb)]();_0x3ac57a[_0x498336(0x63e)]('battlelog');}else _0x34ebf0[_0x498336(0xa7)](_0x189e51);}else{if(_0x34ebf0[_0x498336(0x998)]()){_0x34ebf0[_0x498336(0x16d)](_0x445096);if(_0x40b9c0)_0x34ebf0[_0x498336(0xb4b)]();}}}}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],'ActSeq_Mechanics_BoostPointsChange',_0x2cccf3=>{const _0x2f8788=_0x4b7b09;if(!SceneManager[_0x2f8788(0x18e)]())return;if(!Imported[_0x2f8788(0x8ab)])return;VisuMZ[_0x2f8788(0x92)](_0x2cccf3,_0x2cccf3);const _0x17e830=VisuMZ[_0x2f8788(0x759)](_0x2cccf3[_0x2f8788(0x94e)]),_0x109e7f=_0x2cccf3[_0x2f8788(0x260)];for(const _0x56e620 of _0x17e830){if(!_0x56e620)continue;_0x56e620[_0x2f8788(0x468)](_0x109e7f);}}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0xac8),_0x133055=>{const _0x32bc03=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x32bc03(0x8ab)])return;if(!BattleManager[_0x32bc03(0xb2)])return;VisuMZ[_0x32bc03(0x92)](_0x133055,_0x133055);const _0x4f10e4=_0x133055[_0x32bc03(0x326)];$gameVariables['setValue'](_0x4f10e4,BattleManager[_0x32bc03(0xb2)][_0x32bc03(0x60f)]());}),PluginManager['registerCommand'](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x532),_0xe7e10d=>{const _0x3a6857=_0x4b7b09;if(!SceneManager[_0x3a6857(0x18e)]())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ['ConvertParams'](_0xe7e10d,_0xe7e10d);const _0x1af75a=VisuMZ[_0x3a6857(0x759)](_0xe7e10d[_0x3a6857(0x94e)]),_0x26fc6f=_0xe7e10d[_0x3a6857(0x608)];for(const _0x30aaec of _0x1af75a){if(_0x3a6857(0xafb)!=='cdfgG')return _0x249e7a['BattleCore'][_0x3a6857(0xb41)]['BattleLayout'][_0x3a6857(0x470)];else{if(!_0x30aaec)continue;if(_0x30aaec[_0x3a6857(0x95)]())continue;if(!_0x30aaec[_0x3a6857(0x78e)]())continue;_0x30aaec[_0x3a6857(0x4dd)](_0x26fc6f);}}}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0xa99),_0x2f365c=>{const _0x5efa9f=_0x4b7b09;if(!SceneManager[_0x5efa9f(0x18e)]())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ[_0x5efa9f(0x92)](_0x2f365c,_0x2f365c);const _0x570ec8=VisuMZ[_0x5efa9f(0x759)](_0x2f365c[_0x5efa9f(0x94e)]);for(const _0x2f48a1 of _0x570ec8){if(!_0x2f48a1)continue;if(_0x2f48a1[_0x5efa9f(0x95)]())continue;if(!_0x2f48a1['isAffectedByBreakShield']())continue;_0x2f48a1[_0x5efa9f(0x284)]();}}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],_0x4b7b09(0x806),_0x38a22f=>{const _0x3407ea=_0x4b7b09;if(!SceneManager[_0x3407ea(0x18e)]())return;if(!Imported[_0x3407ea(0x763)])return;if(!BattleManager[_0x3407ea(0xa61)]())return;VisuMZ['ConvertParams'](_0x38a22f,_0x38a22f);const _0x51237b=VisuMZ[_0x3407ea(0x759)](_0x38a22f[_0x3407ea(0x94e)]),_0x318845=_0x38a22f[_0x3407ea(0xa91)];for(const _0x23f0a1 of _0x51237b){if(!_0x23f0a1)continue;_0x23f0a1[_0x3407ea(0x6e1)](_0x318845);}}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],'ActSeq_Mechanics_Collapse',_0xd17df4=>{const _0x4be091=_0x4b7b09;if(!SceneManager[_0x4be091(0x18e)]())return;VisuMZ[_0x4be091(0x92)](_0xd17df4,_0xd17df4);const _0x231b29=$gameTemp[_0x4be091(0x1cb)](),_0x591bdb=BattleManager['_action'],_0x44fe81=BattleManager[_0x4be091(0xb2)];if(!_0x231b29||!_0x591bdb||!_0x44fe81)return;if(!_0x591bdb[_0x4be091(0x6e3)]())return;const _0x5c0cfe=VisuMZ[_0x4be091(0x759)](_0xd17df4['Targets']);for(const _0x48299e of _0x5c0cfe){if(_0x4be091(0x754)===_0x4be091(0x754)){if(!_0x48299e)continue;_0xd17df4[_0x4be091(0x703)]&&(_0x48299e[_0x4be091(0x418)](),_0x48299e[_0x4be091(0x9ba)](_0x48299e[_0x4be091(0x7fa)]())),_0x48299e['isDeathStateAffected']()&&_0x48299e[_0x4be091(0x9af)]();}else _0x53a54e[_0x4be091(0x5dc)][_0x4be091(0x342)]=![];}_0x231b29[_0x4be091(0x63e)](_0x4be091(0xb4a));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x7c7),_0xa2eb5b=>{const _0x5e1ec9=_0x4b7b09;if(!SceneManager[_0x5e1ec9(0x18e)]())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;if(!BattleManager[_0x5e1ec9(0xae1)]())return;VisuMZ[_0x5e1ec9(0x92)](_0xa2eb5b,_0xa2eb5b);const _0x1a4f4d=VisuMZ[_0x5e1ec9(0x759)](_0xa2eb5b[_0x5e1ec9(0x94e)]),_0x347ccf=_0xa2eb5b[_0x5e1ec9(0xb10)];for(const _0x1c8017 of _0x1a4f4d){if('OPtAM'==='kEmsF')_0x4cf693['performAttack']();else{if(!_0x1c8017)continue;_0x1c8017['changeTurnOrderByCTB'](_0x347ccf);}}}),PluginManager['registerCommand'](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x841),_0x69428b=>{const _0x5343f8=_0x4b7b09;if(!SceneManager[_0x5343f8(0x18e)]())return;if(!Imported[_0x5343f8(0xa4)])return;if(!BattleManager[_0x5343f8(0xae1)]())return;VisuMZ[_0x5343f8(0x92)](_0x69428b,_0x69428b);const _0x1a8a00=VisuMZ[_0x5343f8(0x759)](_0x69428b[_0x5343f8(0x94e)]),_0xb003fc=_0x69428b[_0x5343f8(0x572)],_0x2834b5=_0x69428b[_0x5343f8(0x572)];for(const _0x5b985a of _0x1a8a00){if(_0x5343f8(0x955)!==_0x5343f8(0x955))_0x3f31af[_0x5343f8(0x6ce)][_0x5343f8(0x2ad)][_0x5343f8(0x4ad)](this),this[_0x5343f8(0x6f4)]();else{if(!_0x5b985a)continue;if(_0x5b985a[_0x5343f8(0x664)]===_0x5343f8(0x8bb))_0x5b985a[_0x5343f8(0x642)](_0xb003fc);else{if(_0x5b985a[_0x5343f8(0x664)]===_0x5343f8(0x605)){if(_0x5343f8(0xb9)!==_0x5343f8(0xb1d))_0x5b985a[_0x5343f8(0x951)](_0x2834b5);else return _0x14ebe9[_0x5343f8(0xafd)]()[_0x5343f8(0x9d0)]()[_0x5343f8(0x451)](_0x5d17cb=>_0x5d17cb!==_0xeabf99);}}}}}),PluginManager['registerCommand'](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x119),_0x592e91=>{const _0x56d7d6=_0x4b7b09;if(!SceneManager[_0x56d7d6(0x18e)]())return;VisuMZ[_0x56d7d6(0x92)](_0x592e91,_0x592e91);const _0x20f7f6=BattleManager[_0x56d7d6(0x290)];if(!_0x20f7f6)return;let _0x426936=_0x592e91[_0x56d7d6(0x4ce)];_0x20f7f6[_0x56d7d6(0x63a)](_0x426936);}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],_0x4b7b09(0x87),_0x2c6286=>{const _0x56447d=_0x4b7b09;if(!SceneManager[_0x56447d(0x18e)]())return;VisuMZ[_0x56447d(0x92)](_0x2c6286,_0x2c6286);const _0x56de39=VisuMZ[_0x56447d(0x759)](_0x2c6286['Targets']);for(const _0x1b48bb of _0x56de39){if(!_0x1b48bb)continue;if(_0x1b48bb[_0x56447d(0x173)]())_0x1b48bb[_0x56447d(0x20c)]();}}),PluginManager['registerCommand'](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x4b5),_0x1f2fff=>{const _0x17cd0d=_0x4b7b09;if(!SceneManager[_0x17cd0d(0x18e)]())return;VisuMZ[_0x17cd0d(0x92)](_0x1f2fff,_0x1f2fff);const _0x42933d=$gameTemp[_0x17cd0d(0x1cb)](),_0x101a37=BattleManager[_0x17cd0d(0xb2)],_0x4ace51=_0x1f2fff[_0x17cd0d(0x38f)];if(!_0x42933d)return;if(!_0x101a37)return;_0x101a37&&_0x101a37[_0x17cd0d(0x44c)]()&&_0x4ace51['toUpperCase']()[_0x17cd0d(0x612)]()!=='UNTITLED'&&(_0x17cd0d(0x5e0)!==_0x17cd0d(0x5e0)?this[_0x17cd0d(0x592)]=_0x394554[_0x17cd0d(0x592)]:_0x42933d[_0x17cd0d(0x5ca)]([_0x4ace51]));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x4e2),_0x114bfc=>{const _0x187721=_0x4b7b09;if(!SceneManager[_0x187721(0x18e)]())return;VisuMZ[_0x187721(0x92)](_0x114bfc,_0x114bfc);const _0x5f4e93=VisuMZ[_0x187721(0x759)](_0x114bfc[_0x187721(0x94e)]);for(const _0x4b9849 of _0x5f4e93){if(!_0x4b9849)continue;if(!_0x4b9849[_0x187721(0xfc)]())continue;_0x4b9849['escape']();}}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x3d7),_0xe4e7b6=>{const _0x3332ca=_0x4b7b09;if(!SceneManager[_0x3332ca(0x18e)]())return;if(!Imported[_0x3332ca(0x928)])return;if(!BattleManager['isETB']())return;VisuMZ[_0x3332ca(0x92)](_0xe4e7b6,_0xe4e7b6);const _0x30f0d1=_0xe4e7b6['ActionCount'];BattleManager[_0x3332ca(0xb2)]&&BattleManager['_subject'][_0x3332ca(0xafd)]()[_0x3332ca(0xa37)](_0x30f0d1);}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x5da),_0x491603=>{const _0x476be2=_0x4b7b09;if(!SceneManager[_0x476be2(0x18e)]())return;if(!Imported[_0x476be2(0x3a0)])return;if(!BattleManager[_0x476be2(0x874)]())return;VisuMZ[_0x476be2(0x92)](_0x491603,_0x491603);const _0x5b72a7=_0x491603[_0x476be2(0xb27)];BattleManager['_subject']&&BattleManager['_subject']['friendsUnit']()['gainCurrentActionsFTB'](_0x5b72a7);}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x52d),_0x795e0e=>{const _0x1685a2=_0x4b7b09;if(!SceneManager[_0x1685a2(0x18e)]())return;VisuMZ[_0x1685a2(0x92)](_0x795e0e,_0x795e0e);const _0x1c8b2f=VisuMZ[_0x1685a2(0x759)](_0x795e0e[_0x1685a2(0x94e)]),_0x2293b8=_0x795e0e[_0x1685a2(0xa3c)],_0x3b012f=_0x795e0e[_0x1685a2(0xbf)],_0x25afaa=_0x795e0e['MP_Rate'],_0x718ea4=_0x795e0e[_0x1685a2(0x4f5)],_0x4abb39=_0x795e0e['TP_Rate'],_0x5e65dd=_0x795e0e[_0x1685a2(0x34a)],_0x196c59=_0x795e0e[_0x1685a2(0xa56)];for(const _0x49eab4 of _0x1c8b2f){if(!_0x49eab4)continue;const _0x50e1fb=_0x49eab4[_0x1685a2(0x23d)](),_0x240b28=Math[_0x1685a2(0x2ca)](_0x2293b8*_0x49eab4[_0x1685a2(0x986)]+_0x3b012f),_0x2b4e98=Math[_0x1685a2(0x2ca)](_0x25afaa*_0x49eab4['mmp']+_0x718ea4),_0x1b9186=Math[_0x1685a2(0x2ca)](_0x4abb39*_0x49eab4['maxTp']()+_0x5e65dd);if(_0x240b28!==0x0)_0x49eab4[_0x1685a2(0x3fb)](_0x240b28);if(_0x2b4e98!==0x0)_0x49eab4[_0x1685a2(0x3c2)](_0x2b4e98);if(_0x1b9186!==0x0)_0x49eab4['gainTp'](_0x1b9186);if(_0x196c59)_0x49eab4[_0x1685a2(0x20c)]();_0x50e1fb&&_0x49eab4[_0x1685a2(0x44c)]()&&_0x49eab4['performCollapse']();}}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],'ActSeq_Mechanics_Immortal',_0x4e0628=>{const _0x5a1240=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5a1240(0x92)](_0x4e0628,_0x4e0628);const _0x149e47=VisuMZ[_0x5a1240(0x759)](_0x4e0628[_0x5a1240(0x94e)]);for(const _0x4527ae of _0x149e47){if(_0x5a1240(0x15d)!==_0x5a1240(0x355)){if(!_0x4527ae)continue;_0x4527ae[_0x5a1240(0xac5)](_0x4e0628['Immortal']);}else _0x45b50d[_0x5a1240(0x4d2)]['terminate']['call'](this);}}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],_0x4b7b09(0x5b1),_0x1c1654=>{const _0x54f06f=_0x4b7b09;if(!SceneManager[_0x54f06f(0x18e)]())return;VisuMZ[_0x54f06f(0x92)](_0x1c1654,_0x1c1654);const _0xaa8155=BattleManager[_0x54f06f(0x290)],_0x3f0ede={'criticalHitRate':_0x1c1654[_0x54f06f(0x8b5)],'criticalHitFlat':_0x1c1654[_0x54f06f(0x100)],'criticalDmgRate':_0x1c1654[_0x54f06f(0x5ed)],'criticalDmgFlat':_0x1c1654['CriticalDmgFlat'],'damageRate':_0x1c1654[_0x54f06f(0x98)],'damageFlat':_0x1c1654[_0x54f06f(0x952)],'hitRate':_0x1c1654['HitRate'],'hitFlat':_0x1c1654[_0x54f06f(0xab2)]};_0xaa8155[_0x54f06f(0x1fa)]=_0x3f0ede;}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x9c3),_0x49de8b=>{const _0x35fa64=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x35fa64(0x92)](_0x49de8b,_0x49de8b);const _0x53da9d=_0x49de8b[_0x35fa64(0x240)];SceneManager[_0x35fa64(0x5ae)][_0x35fa64(0x1e3)](_0x53da9d);}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x2d7),_0x48e8f9=>{const _0x179ddc=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemOTB'])return;if(!BattleManager[_0x179ddc(0x4a9)]())return;VisuMZ['ConvertParams'](_0x48e8f9,_0x48e8f9);const _0x45834a=VisuMZ[_0x179ddc(0x759)](_0x48e8f9[_0x179ddc(0x94e)]);for(const _0x45ffe1 of _0x45834a){if(!_0x45ffe1)continue;let _0x259291=_0x48e8f9[_0x179ddc(0x199)],_0x57fc08=_0x48e8f9[_0x179ddc(0x10d)],_0x2c24a9=_0x48e8f9['FollowTurn'];if(BattleManager[_0x179ddc(0x234)][_0x179ddc(0x382)](_0x45ffe1)){if(_0x179ddc(0x5e6)!==_0x179ddc(0x1b9))_0x259291+=_0x2c24a9;else{const _0x483062=_0x347178[_0x179ddc(0x853)](_0x38f7cf[_0x179ddc(0x2c5)]()['trim']());_0x483062>=0x0&&_0x483062<=0x7&&_0x158f70[_0x179ddc(0x860)](_0x483062,_0x21f84e);}}else _0x57fc08+=_0x2c24a9;BattleManager[_0x179ddc(0x9a2)](_0x45ffe1,-_0x259291,![]),BattleManager[_0x179ddc(0x9a2)](_0x45ffe1,-_0x57fc08,!![]);}}),PluginManager['registerCommand'](pluginData['name'],_0x4b7b09(0xaa),_0x75f300=>{const _0x101c21=_0x4b7b09;if(!SceneManager[_0x101c21(0x18e)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x101c21(0x848)]())return;VisuMZ[_0x101c21(0x92)](_0x75f300,_0x75f300);const _0xe305f=BattleManager[_0x101c21(0xb2)][_0x101c21(0xafd)](),_0x20729b=_0x75f300[_0x101c21(0x76f)],_0x19dc71=_0x75f300[_0x101c21(0x393)]||'unchanged',_0x37e2a3=_0x75f300[_0x101c21(0x13e)]||_0x101c21(0x2e1),_0xcc9b4=_0x75f300[_0x101c21(0x9b2)]||0x0,_0x3eff65=_0x75f300['alterPriority']||0x0;(_0xe305f[_0x101c21(0x1f8)]()||_0x20729b)&&(_0x20729b&&(_0xe305f['_ptbActionCost']=_0xe305f[_0x101c21(0xa83)]||{},_0xe305f[_0x101c21(0xa83)][_0x101c21(0x7f4)]=0x0),_0xe305f[_0x101c21(0x8cf)](_0x19dc71,_0x37e2a3,_0xcc9b4,_0x3eff65));}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],_0x4b7b09(0x2ed),_0x4d96fd=>{const _0x25fe5b=_0x4b7b09;if(!SceneManager[_0x25fe5b(0x18e)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x25fe5b(0x848)]())return;VisuMZ[_0x25fe5b(0x92)](_0x4d96fd,_0x4d96fd);const _0x3fffe3=BattleManager[_0x25fe5b(0xb2)][_0x25fe5b(0xafd)]();let _0x963015=Math['max'](_0x4d96fd[_0x25fe5b(0x81d)],0x0),_0xbdefbb=_0x3fffe3[_0x25fe5b(0x5d7)](),_0x14c7ed=_0x3fffe3[_0x25fe5b(0x311)]();while(_0x963015--){if(_0x25fe5b(0x8c2)===_0x25fe5b(0x8c2)){if(_0xbdefbb<=0x0&&_0x14c7ed<=0x0)break;else _0xbdefbb>0x0?(_0xbdefbb--,_0x14c7ed++):_0x14c7ed--;}else this[_0x25fe5b(0x723)](_0x5d0985,_0x1fc5c0,_0x72a356);}_0x3fffe3['setFullActionsPTB'](_0xbdefbb),_0x3fffe3[_0x25fe5b(0x568)](_0x14c7ed);}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x727),_0x354fdc=>{const _0x28bdfd=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager['isPTB']())return;VisuMZ[_0x28bdfd(0x92)](_0x354fdc,_0x354fdc);const _0x2c1f16=BattleManager[_0x28bdfd(0xb2)][_0x28bdfd(0xafd)]();let _0x41e0c6=_0x354fdc['FullActions'],_0x3d1d27=_0x354fdc['HalfActions'];_0x2c1f16[_0x28bdfd(0x69)](_0x41e0c6),_0x2c1f16[_0x28bdfd(0x94c)](_0x3d1d27);}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_RemoveBuffDebuff',_0x1636a8=>{const _0xb47b22=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xb47b22(0x92)](_0x1636a8,_0x1636a8);const _0x418b6a=['MAXHP','MAXMP','ATK',_0xb47b22(0x8fd),_0xb47b22(0x2e7),_0xb47b22(0xac2),_0xb47b22(0x7d1),_0xb47b22(0x454)],_0x1b95c3=_0x1636a8[_0xb47b22(0x9d8)],_0x24b602=_0x1636a8[_0xb47b22(0x524)],_0x3a19be=VisuMZ['CreateActionSequenceTargets'](_0x1636a8[_0xb47b22(0x94e)]);for(const _0x389f60 of _0x3a19be){if(!_0x389f60)continue;for(const _0x4473fb of _0x1b95c3){const _0x118b67=_0x418b6a[_0xb47b22(0x853)](_0x4473fb['toUpperCase']()[_0xb47b22(0x612)]());if(_0x118b67>=0x0&&_0x118b67<=0x7&&_0x389f60[_0xb47b22(0xa36)](_0x118b67)){if(_0xb47b22(0x9c2)!==_0xb47b22(0xae2))_0x389f60[_0xb47b22(0x8ae)](_0x118b67);else{const _0x2eae86=_0x3e0a92[_0xb47b22(0x6df)](),_0x1763af=this[_0xb47b22(0x724)](this[_0xb47b22(0x1b8)]());if(!_0x2eae86)return!![];if(!_0x2eae86['item']())return!![];const _0x2820fc=_0x2eae86['item']()[_0xb47b22(0xaf1)];if(_0x2820fc[_0xb47b22(0x2c1)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x1763af===_0x34a020[_0xb47b22(0x724)]())return![];}return!![];}}}for(const _0x5758f5 of _0x24b602){const _0x54fe55=_0x418b6a[_0xb47b22(0x853)](_0x5758f5['toUpperCase']()[_0xb47b22(0x612)]());_0x54fe55>=0x0&&_0x54fe55<=0x7&&_0x389f60[_0xb47b22(0x796)](_0x54fe55)&&('waKHz'!==_0xb47b22(0x5d2)?_0x389f60['removeBuff'](_0x54fe55):_0x3dd10e[_0xb47b22(0x7bb)]([this],_0x2dcff9,!!_0x4288a7));}}}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0xaaf),_0xcdd37e=>{const _0xe47768=_0x4b7b09;if(!SceneManager[_0xe47768(0x18e)]())return;VisuMZ[_0xe47768(0x92)](_0xcdd37e,_0xcdd37e);const _0x2522f4=_0xcdd37e[_0xe47768(0x898)],_0x286d42=VisuMZ['CreateActionSequenceTargets'](_0xcdd37e[_0xe47768(0x94e)]);for(const _0x3bf2b0 of _0x286d42){if(!_0x3bf2b0)continue;for(const _0x280743 of _0x2522f4){if('IQkYP'==='IQkYP')_0x3bf2b0['removeState'](_0x280743);else{const _0x35b731=this[_0xe47768(0x7c0)](),_0xc85378=_0x35b731[0x0]?_0x35b731[0x0][_0xe47768(0x162)]:0x0,_0x30d34a=_0x47585[_0xe47768(0x7d4)][_0xc85378];_0x30d34a&&this['startWeaponAnimation'](_0x30d34a['weaponImageId']);}}}}),PluginManager['registerCommand'](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x2bc),_0x32ee21=>{const _0x3e6015=_0x4b7b09;if(!SceneManager[_0x3e6015(0x18e)]())return;if(!Imported[_0x3e6015(0x619)])return;if(!BattleManager[_0x3e6015(0x4e3)]())return;VisuMZ[_0x3e6015(0x92)](_0x32ee21,_0x32ee21);const _0x583880=_0x32ee21[_0x3e6015(0x88b)],_0x3337ab=VisuMZ['CreateActionSequenceTargets'](_0x32ee21[_0x3e6015(0x94e)]),_0x254a4b=_0x32ee21['ForceExploited'],_0x1ba8bc=_0x32ee21[_0x3e6015(0x7a7)],_0x5605b3=_0x32ee21['ForceExploiter'],_0x1d92ab=BattleManager['_action'];if(_0x583880)for(const _0x390d52 of _0x3337ab){if(_0x3e6015(0x8b7)!==_0x3e6015(0x962)){if(!_0x390d52)continue;if(_0x390d52===user)continue;if(_0x254a4b)_0x390d52['setSTBExploited'](![]);_0x390d52['becomeSTBExploited'](BattleManager[_0x3e6015(0xb2)],_0x1d92ab);}else{const _0x48021a=this[_0x3e6015(0xa7e)],_0x34a2df=this[_0x3e6015(0x7c8)];_0x34a2df['x']=(_0x34a2df['x']*(_0x48021a-0x1)+this[_0x3e6015(0x259)])/_0x48021a,_0x34a2df[_0x3e6015(0x5a0)]=(_0x34a2df[_0x3e6015(0x5a0)]*(_0x48021a-0x1)+0xff)/_0x48021a,this[_0x3e6015(0xa7e)]--;}}if(_0x1ba8bc&&BattleManager[_0x3e6015(0xb2)]){if(_0x5605b3)BattleManager[_0x3e6015(0xb2)][_0x3e6015(0xaf6)](![]);const _0x344fbf=_0x3337ab[0x0];BattleManager['performSTBExploiter'](_0x344fbf,_0x1d92ab);}}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x6f9),_0x27039d=>{const _0x1f1a5c=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1f1a5c(0x619)])return;if(!BattleManager[_0x1f1a5c(0x4e3)]())return;VisuMZ[_0x1f1a5c(0x92)](_0x27039d,_0x27039d);const _0x736a70=_0x27039d[_0x1f1a5c(0xac0)];BattleManager[_0x1f1a5c(0xb2)]&&BattleManager[_0x1f1a5c(0xb2)][_0x1f1a5c(0x2a3)](_0x736a70);}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x27e),_0x3558e7=>{const _0x318c8a=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x318c8a(0x619)])return;if(!BattleManager[_0x318c8a(0x4e3)]())return;VisuMZ[_0x318c8a(0x92)](_0x3558e7,_0x3558e7);let _0x58bd24=_0x3558e7[_0x318c8a(0xac0)];if(BattleManager[_0x318c8a(0xb2)]){BattleManager[_0x318c8a(0xb2)][_0x318c8a(0x7c1)]=BattleManager[_0x318c8a(0xb2)][_0x318c8a(0x7c1)]||[];while(_0x58bd24--){if(_0x318c8a(0x663)===_0x318c8a(0x663)){if(BattleManager[_0x318c8a(0xb2)][_0x318c8a(0x7c1)]['length']<=0x0)break;BattleManager[_0x318c8a(0xb2)][_0x318c8a(0x7c1)]['shift']();}else return this[_0x318c8a(0x3f2)]();}}}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0xb68),_0x417770=>{const _0x1c26cb=_0x4b7b09;if(!SceneManager[_0x1c26cb(0x18e)]())return;if(!Imported[_0x1c26cb(0x3ad)])return;VisuMZ['ConvertParams'](_0x417770,_0x417770);const _0x17009a=VisuMZ[_0x1c26cb(0x759)](_0x417770['Targets']),_0x307cb6=_0x417770['WeaponTypeID'];for(const _0xcbdd9b of _0x17009a){if(!_0xcbdd9b)continue;if(!_0xcbdd9b[_0x1c26cb(0xb0c)]())continue;_0xcbdd9b['switchToWeaponType'](_0x307cb6);}}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x439),_0x18ff12=>{const _0x289dc7=_0x4b7b09;if(!SceneManager[_0x289dc7(0x18e)]())return;VisuMZ[_0x289dc7(0x92)](_0x18ff12,_0x18ff12);const _0x59f888=VisuMZ[_0x289dc7(0x759)](_0x18ff12[_0x289dc7(0x94e)]),_0x4f6c1c=_0x18ff12[_0x289dc7(0xae7)],_0x491be3={'textColor':ColorManager[_0x289dc7(0x71a)](_0x18ff12[_0x289dc7(0xba)]),'flashColor':_0x18ff12[_0x289dc7(0xa50)],'flashDuration':_0x18ff12[_0x289dc7(0x395)]};for(const _0x411272 of _0x59f888){if(_0x289dc7(0x2b3)===_0x289dc7(0xb48))_0x490bd0?this[_0x289dc7(0x97a)](_0x52448a[_0x289dc7(0x577)],0x0):this[_0x289dc7(0x4d1)]();else{if(!_0x411272)continue;_0x411272[_0x289dc7(0x21c)](_0x4f6c1c,_0x491be3);}}}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],'ActSeq_Mechanics_VariablePopup',_0x28ae9e=>{const _0x4c9859=_0x4b7b09;if(!SceneManager[_0x4c9859(0x18e)]())return;VisuMZ[_0x4c9859(0x92)](_0x28ae9e,_0x28ae9e);const _0x57257d=VisuMZ[_0x4c9859(0x759)](_0x28ae9e[_0x4c9859(0x94e)]);let _0x2a1fd5=$gameVariables[_0x4c9859(0x3bd)](_0x28ae9e[_0x4c9859(0x528)]);Imported[_0x4c9859(0x490)]&&_0x28ae9e[_0x4c9859(0xb87)]&&(_0x2a1fd5=VisuMZ[_0x4c9859(0x38d)](_0x2a1fd5));const _0x3ddd28=String(_0x2a1fd5),_0x10436f={'textColor':ColorManager[_0x4c9859(0x71a)](_0x28ae9e[_0x4c9859(0xba)]),'flashColor':_0x28ae9e['FlashColor'],'flashDuration':_0x28ae9e[_0x4c9859(0x395)]};for(const _0x424d65 of _0x57257d){if(_0x4c9859(0x8c9)===_0x4c9859(0x8c9)){if(!_0x424d65)continue;_0x424d65[_0x4c9859(0x21c)](_0x3ddd28,_0x10436f);}else return _0x4c9859(0x5bd);}}),PluginManager['registerCommand'](pluginData[_0x4b7b09(0x639)],'ActSeq_Mechanics_WaitForEffect',_0x84f65a=>{const _0x50a64c=_0x4b7b09;if(!SceneManager[_0x50a64c(0x18e)]())return;const _0x5476cf=$gameTemp[_0x50a64c(0x1cb)]();if(!_0x5476cf)return;_0x5476cf[_0x50a64c(0x63e)]('battleEffect');}),PluginManager['registerCommand'](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x93f),_0x586b62=>{const _0x5ad6e3=_0x4b7b09;if(!SceneManager[_0x5ad6e3(0x18e)]())return;VisuMZ['ConvertParams'](_0x586b62,_0x586b62);const _0x420742=VisuMZ[_0x5ad6e3(0x759)](_0x586b62[_0x5ad6e3(0x94e)]);for(const _0x52f964 of _0x420742){if(!_0x52f964)continue;_0x52f964[_0x5ad6e3(0xb7d)]();}}),PluginManager['registerCommand'](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x614),_0xb59640=>{const _0x3c9886=_0x4b7b09;if(!SceneManager[_0x3c9886(0x18e)]())return;VisuMZ[_0x3c9886(0x92)](_0xb59640,_0xb59640);const _0x50a277=VisuMZ[_0x3c9886(0x759)](_0xb59640[_0x3c9886(0x94e)]),_0x207472=_0xb59640[_0x3c9886(0x5a3)][_0x3c9886(0x79d)]()['trim']();let _0x4b6532=_0xb59640[_0x3c9886(0xb0e)];const _0x2456af=_0xb59640[_0x3c9886(0x2c3)];![_0x3c9886(0x8e),_0x3c9886(0xe7),_0x3c9886(0x81b),_0x3c9886(0xb06)]['includes'](_0x207472)&&(_0x4b6532=![]);for(const _0x3cfa41 of _0x50a277){if(_0x3c9886(0x8f1)!==_0x3c9886(0x8f1)){if(this[_0x3c9886(0x97)]())return;this[_0x3c9886(0x360)](),this[_0x3c9886(0x9da)][_0x3c9886(0x97a)](_0x22f433),this[_0x3c9886(0x7cb)][_0x3c9886(0xdf)]();}else{if(!_0x3cfa41)continue;_0x3cfa41[_0x3c9886(0x59b)](_0x207472,_0x4b6532,_0x2456af);}}}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],'ActSeq_Motion_MotionType',_0x2f7d6b=>{const _0x4f481d=_0x4b7b09;if(!SceneManager[_0x4f481d(0x18e)]())return;VisuMZ[_0x4f481d(0x92)](_0x2f7d6b,_0x2f7d6b);const _0x1f8367=VisuMZ[_0x4f481d(0x759)](_0x2f7d6b[_0x4f481d(0x94e)]),_0x2a03bc=_0x2f7d6b[_0x4f481d(0x5a3)][_0x4f481d(0x79d)]()[_0x4f481d(0x612)](),_0xe922cb=_0x2f7d6b[_0x4f481d(0xb0e)];for(const _0x5d48b4 of _0x1f8367){if(_0x4f481d(0x73f)!==_0x4f481d(0xadd)){if(!_0x5d48b4)continue;if(_0x2a03bc['match'](/ATTACK[ ](\d+)/i)){if(_0x4f481d(0x17a)!==_0x4f481d(0x17a)){const _0x58b0b6={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x2d5ca8=_0x23e1b6[_0x4f481d(0x577)][_0x4f481d(0x41a)]();_0x3cd4ed[_0x4f481d(0x577)][_0x4f481d(0x53b)](_0x58b0b6),_0x5d8890[_0x4f481d(0x577)]['unshift'](_0x2d5ca8);}else _0x5d48b4[_0x4f481d(0x97c)](Number(RegExp['$1']));}else _0x2a03bc===_0x4f481d(0x8e)?_0x5d48b4['performAttack']():_0x5d48b4['requestMotion'](_0x2a03bc);if(!_0xe922cb){if(_0x4f481d(0xb80)!==_0x4f481d(0xb80)){const _0x25333c=this[_0x4f481d(0xe0)]();_0x25333c&&_0x25333c[_0x4f481d(0x157)]();}else _0x5d48b4[_0x4f481d(0x3d8)](0x0);}else{if(_0xe922cb&&['thrust',_0x4f481d(0x81b),_0x4f481d(0x68c)][_0x4f481d(0x382)](_0x2a03bc)){}}}else this[_0x4f481d(0x7ac)]();}}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],_0x4b7b09(0x599),_0x40ee83=>{const _0x1bd395=_0x4b7b09;if(!SceneManager[_0x1bd395(0x18e)]())return;VisuMZ['ConvertParams'](_0x40ee83,_0x40ee83);const _0x368e90=BattleManager[_0x1bd395(0x290)];if(!_0x368e90)return;if(!_0x368e90[_0x1bd395(0x6e3)]())return;const _0x11ce09=VisuMZ['CreateActionSequenceTargets'](_0x40ee83[_0x1bd395(0x94e)]);for(const _0x3ad7eb of _0x11ce09){if(!_0x3ad7eb)continue;_0x3ad7eb[_0x1bd395(0x552)](_0x368e90);}}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],_0x4b7b09(0x219),_0x5df8a6=>{const _0x31b126=_0x4b7b09;if(!SceneManager[_0x31b126(0x18e)]())return;VisuMZ['ConvertParams'](_0x5df8a6,_0x5df8a6);const _0x3623e2=VisuMZ[_0x31b126(0x759)](_0x5df8a6[_0x31b126(0x94e)]);for(const _0x4787d4 of _0x3623e2){if('cEzmn'!==_0x31b126(0x8e6)){if(!_0x4787d4)continue;if(!_0x4787d4['battler']())continue;_0x4787d4[_0x31b126(0xe0)]()[_0x31b126(0x7ac)]();}else{const _0x5ca154=_0x252202['indexOf'](_0xbab903[_0x31b126(0x2c5)]()[_0x31b126(0x612)]());_0x5ca154>=0x0&&_0x5ca154<=0x7&&_0x57abef['isBuffAffected'](_0x5ca154)&&_0x2294c9[_0x31b126(0x8ae)](_0x5ca154);}}}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x10e),_0x17bbdc=>{const _0x1a6af9=_0x4b7b09;if(!SceneManager[_0x1a6af9(0x18e)]())return;VisuMZ[_0x1a6af9(0x92)](_0x17bbdc,_0x17bbdc);const _0x2cf578=$gameTemp[_0x1a6af9(0x1cb)](),_0x2812ae=_0x17bbdc[_0x1a6af9(0x66f)]*Sprite_Battler[_0x1a6af9(0x872)];_0x2cf578[_0x1a6af9(0x5b0)](_0x2812ae);}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],'ActSeq_Movement_BattleStep',_0xdc2b3d=>{const _0x1d32ba=_0x4b7b09;if(!SceneManager[_0x1d32ba(0x18e)]())return;VisuMZ[_0x1d32ba(0x92)](_0xdc2b3d,_0xdc2b3d);const _0x4a3218=$gameTemp[_0x1d32ba(0x1cb)](),_0xc4e5e4=BattleManager[_0x1d32ba(0x290)];if(!_0x4a3218||!_0xc4e5e4)return;if(!_0xc4e5e4[_0x1d32ba(0x6e3)]())return;const _0x5853a2=VisuMZ[_0x1d32ba(0x759)](_0xdc2b3d[_0x1d32ba(0x94e)]);for(const _0x554fbc of _0x5853a2){if(_0x1d32ba(0x7e6)!=='KAcCs'){if(!_0x554fbc)continue;_0x554fbc['performActionStart'](_0xc4e5e4);}else this[_0x1d32ba(0x3f5)]['addChild'](this['_animationContainer']);}if(_0xdc2b3d[_0x1d32ba(0x67d)])_0x4a3218[_0x1d32ba(0x63e)](_0x1d32ba(0x4d4));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x3ec),_0x1502f0=>{const _0x8f09c7=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x8f09c7(0x43d)]())return;VisuMZ['ConvertParams'](_0x1502f0,_0x1502f0);const _0x1ac683=$gameTemp[_0x8f09c7(0x1cb)](),_0x57ba1c=VisuMZ[_0x8f09c7(0x759)](_0x1502f0['Targets']),_0x46ec79=_0x1502f0[_0x8f09c7(0x823)],_0x1c45bf=_0x1502f0[_0x8f09c7(0x66e)],_0x355e48=_0x1502f0[_0x8f09c7(0x617)],_0x332c89=_0x1502f0[_0x8f09c7(0xad)],_0x2e4b50=_0x1502f0['FaceDirection'],_0x258d24=_0x1502f0[_0x8f09c7(0x6cb)],_0x37ffa3=_0x1502f0[_0x8f09c7(0x5a3)],_0x466f34=_0x1502f0['WaitForMovement'];if(!_0x1ac683)return;for(const _0x4c4204 of _0x57ba1c){if(_0x8f09c7(0x961)===_0x8f09c7(0x961)){if(!_0x4c4204)continue;let _0x5adf82=_0x1c45bf,_0x5364a5=_0x355e48;if(_0x46ec79[_0x8f09c7(0x2c1)](/horz/i))_0x5adf82*=_0x4c4204['isActor']()?-0x1:0x1;if(_0x46ec79[_0x8f09c7(0x2c1)](/vert/i))_0x5364a5*=_0x4c4204[_0x8f09c7(0xb0c)]()?-0x1:0x1;_0x4c4204[_0x8f09c7(0x1ed)](_0x5adf82,_0x5364a5,_0x332c89,_0x2e4b50,_0x258d24),_0x4c4204[_0x8f09c7(0x42f)](_0x37ffa3);}else this[_0x8f09c7(0xb37)]=(this[_0x8f09c7(0xb37)]*(_0x3db67c-0x1)+this[_0x8f09c7(0x646)])/_0x3204eb,this[_0x8f09c7(0x68a)]=(this[_0x8f09c7(0x68a)]*(_0x52b146-0x1)+this[_0x8f09c7(0x985)])/_0x5c070d;}if(_0x466f34)_0x1ac683['setWaitMode'](_0x8f09c7(0x4d4));}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],_0x4b7b09(0x517),_0x23dc0e=>{const _0xd2226c=_0x4b7b09;if(!SceneManager[_0xd2226c(0x18e)]())return;if(!$gameSystem[_0xd2226c(0x43d)]())return;VisuMZ[_0xd2226c(0x92)](_0x23dc0e,_0x23dc0e);const _0xa41450=$gameTemp['getLastPluginCommandInterpreter'](),_0x3d38c1=VisuMZ[_0xd2226c(0x759)](_0x23dc0e['Targets']),_0x13300d=_0x23dc0e['Destination'],_0x25397a=_0x23dc0e[_0xd2226c(0xad7)],_0x21c2f1=_0x23dc0e[_0xd2226c(0x883)],_0x1565d7=_0x23dc0e[_0xd2226c(0xaee)],_0x1fd2f3=_0x23dc0e['Duration'],_0x3eb8c1=_0x23dc0e['FaceDirection'],_0xc6725b=_0x23dc0e[_0xd2226c(0x6cb)],_0x20240d=_0x23dc0e[_0xd2226c(0x5a3)],_0x1b1dab=_0x23dc0e[_0xd2226c(0x67d)];if(!_0xa41450)return;for(const _0x19a085 of _0x3d38c1){if(!_0x19a085)continue;let _0xfaa5f5=_0x19a085[_0xd2226c(0xe0)]()[_0xd2226c(0x226)],_0xd88813=_0x19a085[_0xd2226c(0xe0)]()['_baseY'];if(_0x13300d[_0xd2226c(0x2c1)](/home/i)){if(_0xd2226c(0x2fc)!==_0xd2226c(0x2f7))_0xfaa5f5=_0x19a085[_0xd2226c(0xe0)]()[_0xd2226c(0x1e7)],_0xd88813=_0x19a085[_0xd2226c(0xe0)]()[_0xd2226c(0x14f)];else return this[_0xd2226c(0xa10)]&&this[_0xd2226c(0xa10)][_0xd2226c(0x6d2)]();}else{if(_0x13300d[_0xd2226c(0x2c1)](/center/i)){if(_0xd2226c(0x845)!==_0xd2226c(0x845))return this[_0xd2226c(0x223)]();else _0xfaa5f5=Graphics['boxWidth']/0x2,_0xd88813=Graphics[_0xd2226c(0x807)]/0x2;}else _0x13300d['match'](/point (\d+), (\d+)/i)&&(_0xfaa5f5=Number(RegExp['$1']),_0xd88813=Number(RegExp['$2']));}if(_0x25397a['match'](/none/i))_0xd2226c(0x8c1)===_0xd2226c(0x8c1)?(_0xfaa5f5+=_0x21c2f1,_0xd88813+=_0x1565d7):_0x2e1581[_0xd2226c(0x144)]('PostStartActionJS');else{if(_0x25397a['match'](/horz/i)&&_0x25397a[_0xd2226c(0x2c1)](/vert/i)){if(_0xd2226c(0x23f)===_0xd2226c(0x23f))_0xfaa5f5+=_0x19a085[_0xd2226c(0xb0c)]()?-_0x21c2f1:_0x21c2f1,_0xd88813+=_0x19a085['isActor']()?-_0x1565d7:_0x1565d7;else{if(this[_0xd2226c(0x19a)]()>=0x1)return!![];return this['svBattlerData']()[_0xd2226c(0x851)];}}else{if(_0x25397a[_0xd2226c(0x2c1)](/horz/i))_0xfaa5f5+=_0x19a085['isActor']()?-_0x21c2f1:_0x21c2f1,_0xd88813+=_0x1565d7;else _0x25397a[_0xd2226c(0x2c1)](/vert/i)&&(_0xfaa5f5+=_0x21c2f1,_0xd88813+=_0x19a085[_0xd2226c(0xb0c)]()?-_0x1565d7:_0x1565d7);}}_0x19a085[_0xd2226c(0xb39)](_0xfaa5f5,_0xd88813,_0x1fd2f3,_0x3eb8c1,_0xc6725b,-0x1),_0x19a085[_0xd2226c(0x42f)](_0x20240d);}if(_0x1b1dab)_0xa41450[_0xd2226c(0x63e)](_0xd2226c(0x4d4));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],'ActSeq_Movement_HomeMoveToTarget',_0x375c8f=>{const _0x1c906b=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x1c906b(0x92)](_0x375c8f,_0x375c8f);const _0x2bf648=$gameTemp[_0x1c906b(0x1cb)](),_0x211f78=VisuMZ[_0x1c906b(0x759)](_0x375c8f[_0x1c906b(0x139)]),_0x1fa204=VisuMZ[_0x1c906b(0x759)](_0x375c8f['Targets2']),_0x9e9695=_0x375c8f[_0x1c906b(0x2f5)];let _0x2385c6=_0x375c8f[_0x1c906b(0xd8)];const _0xa55302=_0x375c8f[_0x1c906b(0xad7)],_0x1903ed=_0x375c8f[_0x1c906b(0x883)],_0x4383a9=_0x375c8f[_0x1c906b(0xaee)],_0x10e840=_0x375c8f[_0x1c906b(0xad)],_0x463b35=_0x375c8f[_0x1c906b(0x6b8)],_0x130b3b=_0x375c8f[_0x1c906b(0x6cb)],_0x15befc=_0x375c8f['MotionType'],_0x1bd75d=_0x375c8f[_0x1c906b(0x67d)],_0x13fec4=Math[_0x1c906b(0x5e3)](..._0x1fa204[_0x1c906b(0x78)](_0x345f9e=>_0x345f9e['battler']()['_baseX']-_0x345f9e['battler']()[_0x1c906b(0xa2)]()/0x2)),_0x18128f=Math[_0x1c906b(0x90d)](..._0x1fa204[_0x1c906b(0x78)](_0x2f2d0a=>_0x2f2d0a[_0x1c906b(0xe0)]()[_0x1c906b(0x226)]+_0x2f2d0a[_0x1c906b(0xe0)]()[_0x1c906b(0xa2)]()/0x2)),_0x16bc9d=Math[_0x1c906b(0x5e3)](..._0x1fa204[_0x1c906b(0x78)](_0x251fb5=>_0x251fb5[_0x1c906b(0xe0)]()[_0x1c906b(0x518)]-_0x251fb5['battler']()['mainSpriteHeight']())),_0x401544=Math[_0x1c906b(0x90d)](..._0x1fa204[_0x1c906b(0x78)](_0x4accb0=>_0x4accb0['battler']()[_0x1c906b(0x518)])),_0xd2e2bb=_0x1fa204[_0x1c906b(0x451)](_0x3a4ae5=>_0x3a4ae5['isActor']())[_0x1c906b(0x8db)],_0x4c0e36=_0x1fa204[_0x1c906b(0x451)](_0x45ff14=>_0x45ff14[_0x1c906b(0xfc)]())[_0x1c906b(0x8db)];let _0x67c215=0x0,_0x45c42d=0x0;if(_0x9e9695[_0x1c906b(0x2c1)](/front/i))_0x67c215=_0xd2e2bb>=_0x4c0e36?_0x13fec4:_0x18128f;else{if(_0x9e9695[_0x1c906b(0x2c1)](/middle/i))_0x1c906b(0x74a)===_0x1c906b(0xa54)?(this[_0x1c906b(0x49c)]=!![],this[_0x1c906b(0xb33)]=![],this[_0x1c906b(0x2c2)](_0x1c906b(0x321)),_0x8a3c83['BattleCore']['BattleManager_endBattle'][_0x1c906b(0x4ad)](this,_0x3971f6),this[_0x1c906b(0x2c2)](_0x1c906b(0x126))):(_0x67c215=(_0x13fec4+_0x18128f)/0x2,_0x2385c6=-0x1);else _0x9e9695[_0x1c906b(0x2c1)](/back/i)&&(_0x67c215=_0xd2e2bb>=_0x4c0e36?_0x18128f:_0x13fec4);}if(_0x9e9695[_0x1c906b(0x2c1)](/head/i))_0x45c42d=_0x16bc9d;else{if(_0x9e9695[_0x1c906b(0x2c1)](/center/i))_0x45c42d=(_0x16bc9d+_0x401544)/0x2;else _0x9e9695[_0x1c906b(0x2c1)](/base/i)&&(_0x45c42d=_0x401544);}if(!_0x2bf648)return;for(const _0x2991c5 of _0x211f78){if(!_0x2991c5)continue;let _0x34049c=_0x67c215,_0x40140c=_0x45c42d;if(_0xa55302['match'](/none/i))_0x34049c+=_0x1903ed,_0x40140c+=_0x4383a9;else{if(_0xa55302[_0x1c906b(0x2c1)](/horz/i)&&_0xa55302[_0x1c906b(0x2c1)](/vert/i))_0x34049c+=_0x2991c5[_0x1c906b(0xb0c)]()?-_0x1903ed:_0x1903ed,_0x40140c+=_0x2991c5[_0x1c906b(0xb0c)]()?-_0x4383a9:_0x4383a9;else{if(_0xa55302[_0x1c906b(0x2c1)](/horz/i))_0x34049c+=_0x2991c5['isActor']()?-_0x1903ed:_0x1903ed,_0x40140c+=_0x4383a9;else _0xa55302['match'](/vert/i)&&(_0x34049c+=_0x1903ed,_0x40140c+=_0x2991c5['isActor']()?-_0x4383a9:_0x4383a9);}}_0x2991c5[_0x1c906b(0xb39)](_0x34049c,_0x40140c,_0x10e840,_0x463b35,_0x130b3b,_0x2385c6),_0x2991c5[_0x1c906b(0x42f)](_0x15befc);}if(_0x1bd75d)_0x2bf648[_0x1c906b(0x63e)](_0x1c906b(0x4d4));}),PluginManager['registerCommand'](pluginData['name'],_0x4b7b09(0x435),_0x2ef16e=>{const _0x1fd842=_0x4b7b09;if(!SceneManager[_0x1fd842(0x18e)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x1fd842(0x92)](_0x2ef16e,_0x2ef16e);const _0xd4f134=VisuMZ[_0x1fd842(0x759)](_0x2ef16e[_0x1fd842(0x94e)]);let _0x172a67=_0x2ef16e['Direction'][_0x1fd842(0x2c1)](/back/i);for(const _0x5e958c of _0xd4f134){if(!_0x5e958c)continue;if(_0x2ef16e[_0x1fd842(0x3fd)][_0x1fd842(0x2c1)](/rand/i))_0x172a67=Math['randomInt'](0x2);_0x5e958c['setBattlerFlip'](!!_0x172a67);}}),PluginManager['registerCommand'](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0xaf5),_0x1cbc9e=>{const _0x563d5d=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x563d5d(0x43d)]())return;VisuMZ[_0x563d5d(0x92)](_0x1cbc9e,_0x1cbc9e);const _0xd4538a=VisuMZ[_0x563d5d(0x759)](_0x1cbc9e[_0x563d5d(0x94e)]);let _0x49b19b=_0x1cbc9e[_0x563d5d(0x869)];const _0xd08e32=_0x1cbc9e[_0x563d5d(0x390)];for(const _0x399d6f of _0xd4538a){if(_0x563d5d(0x25f)===_0x563d5d(0x25f)){if(!_0x399d6f)continue;let _0x31da1d=_0x399d6f['battler']()[_0x563d5d(0x226)],_0x2822d5=_0x399d6f['battler']()[_0x563d5d(0x518)];if(_0x49b19b['match'](/home/i))_0x31da1d=_0x399d6f[_0x563d5d(0xe0)]()[_0x563d5d(0x1e7)],_0x2822d5=_0x399d6f[_0x563d5d(0xe0)]()['_homeY'];else{if(_0x49b19b[_0x563d5d(0x2c1)](/center/i))_0x31da1d=Graphics[_0x563d5d(0x979)]/0x2,_0x2822d5=Graphics[_0x563d5d(0x807)]/0x2;else _0x49b19b[_0x563d5d(0x2c1)](/point (\d+), (\d+)/i)&&(_0x31da1d=Number(RegExp['$1']),_0x2822d5=Number(RegExp['$2']));}_0x399d6f[_0x563d5d(0xaed)](Math[_0x563d5d(0x2ca)](_0x31da1d),Math[_0x563d5d(0x2ca)](_0x2822d5),!!_0xd08e32);}else _0x4020b0[_0x563d5d(0x136)](_0xef0050[_0x563d5d(0x384)],!![]);}}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x73),_0x4fe6d8=>{const _0x226aa8=_0x4b7b09;if(!SceneManager[_0x226aa8(0x18e)]())return;if(!$gameSystem[_0x226aa8(0x43d)]())return;VisuMZ['ConvertParams'](_0x4fe6d8,_0x4fe6d8);const _0x31de08=VisuMZ[_0x226aa8(0x759)](_0x4fe6d8[_0x226aa8(0x139)]),_0x10ca49=VisuMZ[_0x226aa8(0x759)](_0x4fe6d8[_0x226aa8(0xb30)]),_0x3dbd60=_0x10ca49[_0x226aa8(0x78)](_0x4673e7=>_0x4673e7&&_0x4673e7[_0x226aa8(0xe0)]()?_0x4673e7[_0x226aa8(0xe0)]()['_baseX']:0x0)/(_0x10ca49['length']||0x1),_0x1808f5=_0x10ca49[_0x226aa8(0x78)](_0x639277=>_0x639277&&_0x639277['battler']()?_0x639277[_0x226aa8(0xe0)]()[_0x226aa8(0x518)]:0x0)/(_0x10ca49['length']||0x1),_0x4d86c5=_0x4fe6d8[_0x226aa8(0x390)];for(const _0x4c6e3b of _0x31de08){if(_0x226aa8(0xb07)===_0x226aa8(0xb07)){if(!_0x4c6e3b)continue;_0x4c6e3b[_0x226aa8(0xaed)](Math[_0x226aa8(0x2ca)](_0x3dbd60),Math[_0x226aa8(0x2ca)](_0x1808f5),!!_0x4d86c5);}else this['startMove'](0x0,0x0,0xc);}}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],'ActSeq_Movement_Float',_0x583bb3=>{const _0x578e02=_0x4b7b09;if(!SceneManager[_0x578e02(0x18e)]())return;VisuMZ[_0x578e02(0x92)](_0x583bb3,_0x583bb3);const _0x58ee43=$gameTemp[_0x578e02(0x1cb)](),_0x28f3dc=VisuMZ[_0x578e02(0x759)](_0x583bb3['Targets']),_0x28d03d=_0x583bb3[_0x578e02(0x4ca)],_0x1a0ece=_0x583bb3[_0x578e02(0xad)],_0x3f4a9b=_0x583bb3[_0x578e02(0x6cb)],_0x38d81c=_0x583bb3[_0x578e02(0x285)];if(!_0x58ee43)return;for(const _0x5832d0 of _0x28f3dc){if(!_0x5832d0)continue;_0x5832d0[_0x578e02(0xadb)](_0x28d03d,_0x1a0ece,_0x3f4a9b);}if(_0x38d81c)_0x58ee43['setWaitMode'](_0x578e02(0x5bc));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],'ActSeq_Movement_HomeReset',_0x2b8a17=>{const _0x5b8f5a=_0x4b7b09;if(!SceneManager[_0x5b8f5a(0x18e)]())return;VisuMZ[_0x5b8f5a(0x92)](_0x2b8a17,_0x2b8a17);const _0x4660a7=$gameTemp[_0x5b8f5a(0x1cb)]();if(!_0x4660a7)return;const _0x1082e3=VisuMZ['CreateActionSequenceTargets'](_0x2b8a17[_0x5b8f5a(0x94e)]);for(const _0x164fee of _0x1082e3){if(!_0x164fee)continue;_0x164fee['performActionEndMembers']();}BattleManager[_0x5b8f5a(0xb2)]&&BattleManager[_0x5b8f5a(0xb2)][_0x5b8f5a(0x2d5)]();if(_0x2b8a17[_0x5b8f5a(0x67d)])_0x4660a7[_0x5b8f5a(0x63e)](_0x5b8f5a(0x4d4));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x3cb),_0x6049a7=>{const _0x135489=_0x4b7b09;if(!SceneManager[_0x135489(0x18e)]())return;VisuMZ[_0x135489(0x92)](_0x6049a7,_0x6049a7);const _0x28383d=$gameTemp[_0x135489(0x1cb)](),_0x323548=VisuMZ[_0x135489(0x759)](_0x6049a7[_0x135489(0x94e)]),_0xf94b12=_0x6049a7[_0x135489(0x4ca)],_0x900064=_0x6049a7[_0x135489(0xad)],_0x232d7f=_0x6049a7[_0x135489(0x15e)];if(!_0x28383d)return;for(const _0x29f917 of _0x323548){if(_0x135489(0x84b)==='OrxCH'){if(!_0x29f917)continue;_0x29f917['jumpBattler'](_0xf94b12,_0x900064);}else{if(this[_0x135489(0x6d2)]())this[_0x135489(0x480)][_0x135489(0x856)](_0x25769c);}}if(_0x232d7f)_0x28383d[_0x135489(0x63e)](_0x135489(0x4c6));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x5f1),_0x43120c=>{const _0x480ef2=_0x4b7b09;if(!SceneManager[_0x480ef2(0x18e)]())return;if(!$gameSystem[_0x480ef2(0x43d)]())return;VisuMZ[_0x480ef2(0x92)](_0x43120c,_0x43120c);const _0x4c5e26=$gameTemp['getLastPluginCommandInterpreter'](),_0x39f280=VisuMZ[_0x480ef2(0x759)](_0x43120c[_0x480ef2(0x94e)]),_0x2b7d83=_0x43120c[_0x480ef2(0x823)],_0x295b76=_0x43120c['DistanceX'],_0x663670=_0x43120c['DistanceY'],_0x1b1244=_0x43120c[_0x480ef2(0xad)],_0x5a29f9=_0x43120c[_0x480ef2(0x6b8)],_0x19b238=_0x43120c['EasingType'],_0x3f4359=_0x43120c['MotionType'],_0x43944e=_0x43120c[_0x480ef2(0x67d)];if(!_0x4c5e26)return;for(const _0x106d6d of _0x39f280){if('viqwD'!==_0x480ef2(0x346)){if(!_0x106d6d)continue;let _0x2379d4=_0x295b76,_0x1d0d4d=_0x663670;if(_0x2b7d83[_0x480ef2(0x2c1)](/horz/i))_0x2379d4*=_0x106d6d['isActor']()?-0x1:0x1;if(_0x2b7d83[_0x480ef2(0x2c1)](/vert/i))_0x1d0d4d*=_0x106d6d[_0x480ef2(0xb0c)]()?-0x1:0x1;_0x106d6d[_0x480ef2(0xa21)](_0x2379d4,_0x1d0d4d,_0x1b1244,_0x5a29f9,_0x19b238),_0x106d6d['requestMotion'](_0x3f4359);}else return _0x5985b7[_0x480ef2(0x6ce)][_0x480ef2(0x67f)]['call'](this);}if(_0x43944e)_0x4c5e26[_0x480ef2(0x63e)]('battleMove');}),PluginManager['registerCommand'](pluginData['name'],_0x4b7b09(0xb02),_0x4e6b2d=>{const _0x47a8d4=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x47a8d4(0x43d)]())return;VisuMZ[_0x47a8d4(0x92)](_0x4e6b2d,_0x4e6b2d);const _0x2d5627=$gameTemp[_0x47a8d4(0x1cb)](),_0x41952b=VisuMZ['CreateActionSequenceTargets'](_0x4e6b2d['Targets']),_0x64b726=_0x4e6b2d[_0x47a8d4(0x826)],_0x5d2923=_0x4e6b2d['OffsetAdjust'],_0x3bea9c=_0x4e6b2d['OffsetX'],_0x1c26e9=_0x4e6b2d['OffsetY'],_0x4da404=_0x4e6b2d[_0x47a8d4(0xad)],_0x223795=_0x4e6b2d[_0x47a8d4(0x6b8)],_0x397080=_0x4e6b2d[_0x47a8d4(0x6cb)],_0x17c399=_0x4e6b2d[_0x47a8d4(0x5a3)],_0x38563e=_0x4e6b2d[_0x47a8d4(0x67d)];if(!_0x2d5627)return;for(const _0x39893e of _0x41952b){if(_0x47a8d4(0x768)!==_0x47a8d4(0x3a3)){if(!_0x39893e)continue;let _0x52bff8=_0x39893e[_0x47a8d4(0xe0)]()[_0x47a8d4(0x226)],_0x156ae9=_0x39893e['battler']()[_0x47a8d4(0x518)];if(_0x64b726['match'](/home/i))'rUGfs'!=='rUGfs'?(_0x50508c+=_0x2ad5f8['Enemy'][_0x47a8d4(0x883)]||0x0,_0x7e762f+=_0x231ee5[_0x47a8d4(0x97d)][_0x47a8d4(0xaee)]||0x0):(_0x52bff8=_0x39893e[_0x47a8d4(0xe0)]()['_homeX'],_0x156ae9=_0x39893e[_0x47a8d4(0xe0)]()[_0x47a8d4(0x14f)]);else{if(_0x64b726[_0x47a8d4(0x2c1)](/center/i))_0x52bff8=Graphics[_0x47a8d4(0x979)]/0x2,_0x156ae9=Graphics[_0x47a8d4(0x807)]/0x2;else _0x64b726['match'](/point (\d+), (\d+)/i)&&(_0x52bff8=Number(RegExp['$1']),_0x156ae9=Number(RegExp['$2']));}if(_0x5d2923['match'](/none/i))_0x47a8d4(0xaec)===_0x47a8d4(0x1be)?_0x381c04[_0x47a8d4(0x5ca)]([_0x144138]):(_0x52bff8+=_0x3bea9c,_0x156ae9+=_0x1c26e9);else{if(_0x5d2923[_0x47a8d4(0x2c1)](/horz/i)&&_0x5d2923[_0x47a8d4(0x2c1)](/vert/i))_0x52bff8+=_0x39893e['isActor']()?-_0x3bea9c:_0x3bea9c,_0x156ae9+=_0x39893e[_0x47a8d4(0xb0c)]()?-_0x1c26e9:_0x1c26e9;else{if(_0x5d2923[_0x47a8d4(0x2c1)](/horz/i))_0x52bff8+=_0x39893e[_0x47a8d4(0xb0c)]()?-_0x3bea9c:_0x3bea9c,_0x156ae9+=_0x1c26e9;else _0x5d2923[_0x47a8d4(0x2c1)](/vert/i)&&(_0x47a8d4(0x201)!==_0x47a8d4(0x938)?(_0x52bff8+=_0x3bea9c,_0x156ae9+=_0x39893e[_0x47a8d4(0xb0c)]()?-_0x1c26e9:_0x1c26e9):(_0x2ae6d3=_0x5c214a[_0x47a8d4(0xe0)]()['_homeX'],_0x523636=_0x153181[_0x47a8d4(0xe0)]()[_0x47a8d4(0x14f)]));}}_0x39893e[_0x47a8d4(0x868)](_0x52bff8,_0x156ae9,_0x4da404,_0x223795,_0x397080,-0x1),_0x39893e['requestMotion'](_0x17c399);}else return _0x5b570d[_0x47a8d4(0x6ce)][_0x47a8d4(0x588)][_0x47a8d4(0x4ad)](this,_0x4b0d09);}if(_0x38563e)_0x2d5627[_0x47a8d4(0x63e)](_0x47a8d4(0x4d4));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x407),_0x51daa1=>{const _0x34e7fb=_0x4b7b09;if(!SceneManager[_0x34e7fb(0x18e)]())return;if(!$gameSystem[_0x34e7fb(0x43d)]())return;VisuMZ['ConvertParams'](_0x51daa1,_0x51daa1);const _0xe50453=$gameTemp[_0x34e7fb(0x1cb)](),_0x3a5716=VisuMZ[_0x34e7fb(0x759)](_0x51daa1['Targets1']),_0x15fdc6=VisuMZ[_0x34e7fb(0x759)](_0x51daa1['Targets2']),_0x189ff9=_0x51daa1[_0x34e7fb(0x2f5)];let _0x250cdb=_0x51daa1[_0x34e7fb(0xd8)];const _0x30bf15=_0x51daa1[_0x34e7fb(0xad7)],_0x1365f8=_0x51daa1['OffsetX'],_0x493aa5=_0x51daa1[_0x34e7fb(0xaee)],_0x2cabcd=_0x51daa1[_0x34e7fb(0xad)],_0x1046a6=_0x51daa1['FaceDirection'],_0xd8ce85=_0x51daa1[_0x34e7fb(0x6cb)],_0x5dc1f3=_0x51daa1[_0x34e7fb(0x5a3)],_0x3070bc=_0x51daa1['WaitForMovement'],_0xefc6fd=Math[_0x34e7fb(0x5e3)](..._0x15fdc6[_0x34e7fb(0x78)](_0xf72354=>_0xf72354[_0x34e7fb(0xe0)]()[_0x34e7fb(0x226)]-_0xf72354['battler']()[_0x34e7fb(0xa2)]()/0x2)),_0x5f004f=Math['max'](..._0x15fdc6[_0x34e7fb(0x78)](_0x1bb745=>_0x1bb745[_0x34e7fb(0xe0)]()['_baseX']+_0x1bb745[_0x34e7fb(0xe0)]()[_0x34e7fb(0xa2)]()/0x2)),_0x308ce1=Math[_0x34e7fb(0x5e3)](..._0x15fdc6['map'](_0x4a257e=>_0x4a257e[_0x34e7fb(0xe0)]()[_0x34e7fb(0x518)]-_0x4a257e['battler']()['mainSpriteHeight']())),_0x5069a1=Math[_0x34e7fb(0x90d)](..._0x15fdc6[_0x34e7fb(0x78)](_0x1f0015=>_0x1f0015[_0x34e7fb(0xe0)]()[_0x34e7fb(0x518)])),_0x513f97=_0x15fdc6[_0x34e7fb(0x451)](_0x14367b=>_0x14367b[_0x34e7fb(0xb0c)]())[_0x34e7fb(0x8db)],_0x43c345=_0x15fdc6[_0x34e7fb(0x451)](_0xd7aaab=>_0xd7aaab['isEnemy']())[_0x34e7fb(0x8db)];let _0x31e759=0x0,_0x552ea5=0x0;if(_0x189ff9[_0x34e7fb(0x2c1)](/front/i))_0x34e7fb(0x3e5)!==_0x34e7fb(0x98e)?_0x31e759=_0x513f97>=_0x43c345?_0xefc6fd:_0x5f004f:_0x3b0b7e[_0x34e7fb(0x410)](_0x34e7fb(0x4fe),_0x4fb4a0,_0x294915);else{if(_0x189ff9['match'](/middle/i))_0x31e759=(_0xefc6fd+_0x5f004f)/0x2,_0x250cdb=-0x1;else _0x189ff9[_0x34e7fb(0x2c1)](/back/i)&&(_0x31e759=_0x513f97>=_0x43c345?_0x5f004f:_0xefc6fd);}if(_0x189ff9[_0x34e7fb(0x2c1)](/head/i))_0x552ea5=_0x308ce1;else{if(_0x189ff9['match'](/center/i))_0x552ea5=(_0x308ce1+_0x5069a1)/0x2;else _0x189ff9[_0x34e7fb(0x2c1)](/base/i)&&(_0x552ea5=_0x5069a1);}if(!_0xe50453)return;for(const _0x558912 of _0x3a5716){if(_0x34e7fb(0x84c)===_0x34e7fb(0x11e)){_0xaa4198(_0x34e7fb(0x6d1)),_0x1d96c7['exit']();return;}else{if(!_0x558912)continue;let _0x73bc27=_0x31e759,_0x470132=_0x552ea5;if(_0x30bf15[_0x34e7fb(0x2c1)](/none/i))_0x73bc27+=_0x1365f8,_0x470132+=_0x493aa5;else{if(_0x30bf15[_0x34e7fb(0x2c1)](/horz/i)&&_0x30bf15[_0x34e7fb(0x2c1)](/vert/i))_0x34e7fb(0x7ae)===_0x34e7fb(0xa6e)?this['push']('clearActiveWeaponSet',_0x1e3bf1):(_0x73bc27+=_0x558912['isActor']()?-_0x1365f8:_0x1365f8,_0x470132+=_0x558912['isActor']()?-_0x493aa5:_0x493aa5);else{if(_0x30bf15[_0x34e7fb(0x2c1)](/horz/i))_0x73bc27+=_0x558912[_0x34e7fb(0xb0c)]()?-_0x1365f8:_0x1365f8,_0x470132+=_0x493aa5;else _0x30bf15[_0x34e7fb(0x2c1)](/vert/i)&&(_0x73bc27+=_0x1365f8,_0x470132+=_0x558912[_0x34e7fb(0xb0c)]()?-_0x493aa5:_0x493aa5);}}_0x558912[_0x34e7fb(0x868)](_0x73bc27,_0x470132,_0x2cabcd,_0x1046a6,_0xd8ce85,_0x250cdb),_0x558912['requestMotion'](_0x5dc1f3);}}if(_0x3070bc)_0xe50453['setWaitMode'](_0x34e7fb(0x4d4));}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],_0x4b7b09(0x2e3),_0x128e22=>{const _0x53bd39=_0x4b7b09;if(!SceneManager[_0x53bd39(0x18e)]())return;VisuMZ[_0x53bd39(0x92)](_0x128e22,_0x128e22);const _0x3a001b=$gameTemp[_0x53bd39(0x1cb)](),_0x217dc4=VisuMZ[_0x53bd39(0x759)](_0x128e22[_0x53bd39(0x94e)]),_0x5937fc=_0x128e22[_0x53bd39(0x4fb)],_0x1862b1=_0x128e22['Duration'],_0x39dba7=_0x128e22['EasingType'],_0x493b5b=_0x128e22[_0x53bd39(0x8f6)];if(!_0x3a001b)return;for(const _0x203249 of _0x217dc4){if(!_0x203249)continue;_0x203249['changeBattlerOpacity'](_0x5937fc,_0x1862b1,_0x39dba7);}if(_0x493b5b)_0x3a001b[_0x53bd39(0x63e)](_0x53bd39(0x3b8));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0xb12),_0x130f44=>{const _0x2eca69=_0x4b7b09;if(!SceneManager[_0x2eca69(0x18e)]())return;VisuMZ[_0x2eca69(0x92)](_0x130f44,_0x130f44);const _0x3614d5=$gameTemp[_0x2eca69(0x1cb)](),_0x121a9f=VisuMZ['CreateActionSequenceTargets'](_0x130f44[_0x2eca69(0x94e)]),_0x151745=_0x130f44[_0x2eca69(0x7a9)],_0x2201a3=_0x130f44[_0x2eca69(0x817)],_0x5800e6=_0x130f44[_0x2eca69(0xad)],_0x5c241d=_0x130f44['EasingType'],_0xfefd32=_0x130f44[_0x2eca69(0x1c5)];if(!_0x3614d5)return;for(const _0x1d7a9a of _0x121a9f){if(!_0x1d7a9a)continue;_0x1d7a9a['growBattler'](_0x151745,_0x2201a3,_0x5800e6,_0x5c241d);}if(_0xfefd32)_0x3614d5[_0x2eca69(0x63e)](_0x2eca69(0x751));}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],_0x4b7b09(0x3e2),_0x13d598=>{const _0x5d22b5=_0x4b7b09;if(!SceneManager[_0x5d22b5(0x18e)]())return;VisuMZ[_0x5d22b5(0x92)](_0x13d598,_0x13d598);const _0x3257f3=$gameTemp[_0x5d22b5(0x1cb)](),_0x1af028=VisuMZ[_0x5d22b5(0x759)](_0x13d598[_0x5d22b5(0x94e)]),_0x36414d=_0x13d598[_0x5d22b5(0x62e)],_0x414ef4=_0x13d598[_0x5d22b5(0x4fc)],_0x28286c=_0x13d598['Duration'],_0x9b3596=_0x13d598[_0x5d22b5(0x6cb)],_0x5b9b4f=_0x13d598[_0x5d22b5(0x7fe)];if(!_0x3257f3)return;for(const _0x2d2d64 of _0x1af028){if(!_0x2d2d64)continue;_0x2d2d64['skewBattler'](_0x36414d,_0x414ef4,_0x28286c,_0x9b3596);}if(_0x5b9b4f)_0x3257f3[_0x5d22b5(0x63e)]('battleSpriteSkew');}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],'ActSeq_Movement_Spin',_0x3872a4=>{const _0x28e0ba=_0x4b7b09;if(!SceneManager[_0x28e0ba(0x18e)]())return;VisuMZ[_0x28e0ba(0x92)](_0x3872a4,_0x3872a4);const _0x10c958=$gameTemp['getLastPluginCommandInterpreter'](),_0x1618d7=VisuMZ[_0x28e0ba(0x759)](_0x3872a4[_0x28e0ba(0x94e)]),_0x1a377f=_0x3872a4[_0x28e0ba(0x6c6)],_0x39b078=_0x3872a4['Duration'],_0x39f5bb=_0x3872a4['EasingType'],_0x1a8bb3=_0x3872a4['RevertAngle'],_0x379a2c=_0x3872a4[_0x28e0ba(0x310)];if(!_0x10c958)return;for(const _0x18c3ae of _0x1618d7){if(_0x28e0ba(0x6ff)===_0x28e0ba(0x6ff)){if(!_0x18c3ae)continue;_0x18c3ae['spinBattler'](_0x1a377f,_0x39b078,_0x39f5bb,_0x1a8bb3);}else this['isNonSubmenuCancel']()?(this[_0x28e0ba(0x406)]['show'](),this['_actorWindow']['hide'](),this[_0x28e0ba(0x9f4)][_0x28e0ba(0x421)]()):_0x1c5ec1[_0x28e0ba(0x6ce)][_0x28e0ba(0x769)][_0x28e0ba(0x4ad)](this),this['cancelTargetSelectionVisibility']();}if(_0x379a2c)_0x10c958[_0x28e0ba(0x63e)]('battleSpin');}),PluginManager['registerCommand'](pluginData['name'],_0x4b7b09(0x67e),_0x4f3468=>{const _0x4b235d=_0x4b7b09;if(!SceneManager[_0x4b235d(0x18e)]())return;const _0x5630a4=$gameTemp[_0x4b235d(0x1cb)]();if(!_0x5630a4)return;_0x5630a4[_0x4b235d(0x63e)]('battleFloat');}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],_0x4b7b09(0x29f),_0x31ce22=>{const _0x35b39c=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;const _0x113eb5=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x113eb5)return;_0x113eb5['setWaitMode'](_0x35b39c(0x4c6));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],'ActSeq_Movement_WaitForMovement',_0x3e32fc=>{const _0x36cb44=_0x4b7b09;if(!SceneManager[_0x36cb44(0x18e)]())return;const _0x212bc1=$gameTemp[_0x36cb44(0x1cb)]();if(!_0x212bc1)return;_0x212bc1[_0x36cb44(0x63e)](_0x36cb44(0x4d4));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x478),_0x16a093=>{const _0x1887d5=_0x4b7b09;if(!SceneManager[_0x1887d5(0x18e)]())return;const _0x2a0ee9=$gameTemp[_0x1887d5(0x1cb)]();if(!_0x2a0ee9)return;_0x2a0ee9[_0x1887d5(0x63e)]('battleOpacity');}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],'ActSeq_Movement_WaitForScale',_0x338562=>{const _0x5cfda8=_0x4b7b09;if(!SceneManager[_0x5cfda8(0x18e)]())return;const _0x106d36=$gameTemp[_0x5cfda8(0x1cb)]();if(!_0x106d36)return;_0x106d36[_0x5cfda8(0x63e)](_0x5cfda8(0x751));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x904),_0x5aa1e5=>{const _0x5ecc44=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;const _0x5cbfce=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x5cbfce)return;_0x5cbfce[_0x5ecc44(0x63e)](_0x5ecc44(0x281));}),PluginManager['registerCommand'](pluginData['name'],_0x4b7b09(0x53f),_0x2a6427=>{const _0x10e0dd=_0x4b7b09;if(!SceneManager[_0x10e0dd(0x18e)]())return;const _0x2330a6=$gameTemp[_0x10e0dd(0x1cb)]();if(!_0x2330a6)return;_0x2330a6[_0x10e0dd(0x63e)](_0x10e0dd(0x328));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x650),_0x4f1ae6=>{const _0x509ebe=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x509ebe(0x689)])return;VisuMZ[_0x509ebe(0x92)](_0x4f1ae6,_0x4f1ae6);const _0x37df67=$gameTemp[_0x509ebe(0x1cb)](),_0x87ef61=_0x4f1ae6[_0x509ebe(0x1a5)];if(!_0x37df67)return;const _0x2b045b=BattleManager[_0x509ebe(0xa5b)];if(!_0x2b045b)return;_0x2b045b[_0x509ebe(0x27c)](_0x4f1ae6);if(_0x87ef61)_0x37df67[_0x509ebe(0x63e)]('battleProjectiles');}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],_0x4b7b09(0x903),_0x2da914=>{const _0x48d231=_0x4b7b09;if(!SceneManager[_0x48d231(0x18e)]())return;if(!Imported[_0x48d231(0x689)])return;VisuMZ[_0x48d231(0x92)](_0x2da914,_0x2da914);const _0x5ef5f2=$gameTemp[_0x48d231(0x1cb)](),_0x912ae3=_0x2da914[_0x48d231(0x1a5)];if(!_0x5ef5f2)return;const _0x3d6288=BattleManager[_0x48d231(0xa5b)];if(!_0x3d6288)return;_0x3d6288[_0x48d231(0x27c)](_0x2da914);if(_0x912ae3)_0x5ef5f2[_0x48d231(0x63e)](_0x48d231(0x25d));}),PluginManager['registerCommand'](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x885),_0x5070ae=>{const _0x72ace=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x72ace(0x689)])return;VisuMZ[_0x72ace(0x92)](_0x5070ae,_0x5070ae);const _0x85a835=$gameTemp[_0x72ace(0x1cb)](),_0xbaecdf=_0x5070ae[_0x72ace(0x1a5)];if(!_0x85a835)return;const _0x35929d=BattleManager[_0x72ace(0xa5b)];if(!_0x35929d)return;_0x35929d['createActionSequenceProjectile'](_0x5070ae);if(_0xbaecdf)_0x85a835[_0x72ace(0x63e)](_0x72ace(0x25d));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],'ActSeq_ChangeSkew',_0x35b712=>{const _0x3a1f99=_0x4b7b09;if(!SceneManager[_0x3a1f99(0x18e)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x3a1f99(0x92)](_0x35b712,_0x35b712);const _0x35674e=$gameTemp[_0x3a1f99(0x1cb)](),_0x3e8205=_0x35b712[_0x3a1f99(0x7fe)];if(!_0x35674e)return;$gameScreen['setBattleSkew'](_0x35b712[_0x3a1f99(0x62e)],_0x35b712[_0x3a1f99(0x4fc)],_0x35b712['Duration'],_0x35b712[_0x3a1f99(0x6cb)]);if(_0x3e8205)_0x35674e['setWaitMode'](_0x3a1f99(0x959));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],'ActSeq_Skew_Reset',_0x397680=>{const _0x39740c=_0x4b7b09;if(!SceneManager[_0x39740c(0x18e)]())return;if(!Imported[_0x39740c(0x522)])return;VisuMZ[_0x39740c(0x92)](_0x397680,_0x397680);const _0x4daa41=$gameTemp[_0x39740c(0x1cb)](),_0xb199e0=_0x397680['WaitForSkew'];if(!_0x4daa41)return;$gameScreen[_0x39740c(0x9f2)](0x0,0x0,_0x397680['Duration'],_0x397680[_0x39740c(0x6cb)]);if(_0xb199e0)_0x4daa41[_0x39740c(0x63e)]('battleSkew');}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x9e6),_0xb52caf=>{const _0x3f7bfc=_0x4b7b09;if(!SceneManager[_0x3f7bfc(0x18e)]())return;if(!Imported[_0x3f7bfc(0x522)])return;const _0x3f5f1d=$gameTemp[_0x3f7bfc(0x1cb)]();if(!_0x3f5f1d)return;_0x3f5f1d['setWaitMode'](_0x3f7bfc(0x959));}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],_0x4b7b09(0x42e),_0x15bafe=>{const _0x286bf0=_0x4b7b09;if(!SceneManager[_0x286bf0(0x18e)]())return;VisuMZ['ConvertParams'](_0x15bafe,_0x15bafe);const _0x3855ae=$gameTemp[_0x286bf0(0x1cb)](),_0x84bbc=_0x15bafe['Index'],_0x1eb843=_0x15bafe[_0x286bf0(0x38f)];if(!_0x3855ae)return;BattleManager[_0x286bf0(0x233)]=_0x84bbc,BattleManager[_0x286bf0(0x28f)]=BattleManager[_0x286bf0(0x634)]?BattleManager['_allTargets'][BattleManager['_targetIndex']]||null:null,BattleManager[_0x286bf0(0x28f)]&&_0x1eb843[_0x286bf0(0x2c5)]()[_0x286bf0(0x612)]()!==_0x286bf0(0x320)&&_0x3855ae[_0x286bf0(0x5ca)]([_0x1eb843]);}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],'ActSeq_Target_NextTarget',_0x1e9c42=>{const _0x4b6cf8=_0x4b7b09;if(!SceneManager[_0x4b6cf8(0x18e)]())return;VisuMZ[_0x4b6cf8(0x92)](_0x1e9c42,_0x1e9c42);const _0xdf861=$gameTemp[_0x4b6cf8(0x1cb)](),_0xcb1cf1=_0x1e9c42[_0x4b6cf8(0x38f)];if(!_0xdf861)return;BattleManager['_targetIndex']++,BattleManager[_0x4b6cf8(0x28f)]=BattleManager[_0x4b6cf8(0x634)][BattleManager[_0x4b6cf8(0x233)]]||null;if(BattleManager['_target']&&_0xcb1cf1['toUpperCase']()[_0x4b6cf8(0x612)]()!==_0x4b6cf8(0x320)){if('xXzQl'!=='xXzQl'){let _0x4539ce=_0x5efdb9(_0x4f2627['$1']);while(_0x4539ce--){_0x299b28[_0x4b6cf8(0x410)](this[_0x4b6cf8(0xafd)]()[_0x4b6cf8(0x4d3)]());}return this['repeatTargets'](_0x3719e8);}else _0xdf861[_0x4b6cf8(0x5ca)]([_0xcb1cf1]);}}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x86c),_0x5402f4=>{const _0x534bab=_0x4b7b09;if(!SceneManager[_0x534bab(0x18e)]())return;VisuMZ[_0x534bab(0x92)](_0x5402f4,_0x5402f4);const _0x2fc9a7=$gameTemp['getLastPluginCommandInterpreter'](),_0x47db69=_0x5402f4[_0x534bab(0x38f)];if(!_0x2fc9a7)return;BattleManager['_targetIndex']--,BattleManager['_target']=BattleManager[_0x534bab(0x634)][BattleManager['_targetIndex']]||null,BattleManager[_0x534bab(0x28f)]&&_0x47db69[_0x534bab(0x2c5)]()[_0x534bab(0x612)]()!==_0x534bab(0x320)&&_0x2fc9a7[_0x534bab(0x5ca)]([_0x47db69]);}),PluginManager[_0x4b7b09(0x9d2)](pluginData['name'],_0x4b7b09(0x4f2),_0x22a6b4=>{const _0x39b056=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x39b056(0x92)](_0x22a6b4,_0x22a6b4);const _0x317155=$gameTemp[_0x39b056(0x1cb)](),_0x426c6c=_0x22a6b4[_0x39b056(0x890)],_0x1df57b=_0x22a6b4['JumpToLabel'];if(!_0x317155)return;const _0x3603d=BattleManager[_0x39b056(0x233)];for(;;){if(_0x39b056(0xa07)!==_0x39b056(0xa07)){if(!_0x551492[_0x39b056(0x18e)]())return;if(!_0x326c19['VisuMZ_3_ActSeqCamera'])return;_0x60c5b6[_0x39b056(0x92)](_0x138d5f,_0x3a745e);const _0x91daef=_0x5e6699[_0x39b056(0x1cb)](),_0x55af39=_0x4cc5ac['WaitForSkew'];if(!_0x91daef)return;_0x5ec279['setBattleSkew'](_0x251a8b[_0x39b056(0x62e)],_0x1a8666[_0x39b056(0x4fc)],_0x6291d2[_0x39b056(0xad)],_0x31259a[_0x39b056(0x6cb)]);if(_0x55af39)_0x91daef['setWaitMode'](_0x39b056(0x959));}else{BattleManager['_targetIndex']=Math['randomInt'](BattleManager[_0x39b056(0x634)][_0x39b056(0x8db)]);if(!_0x426c6c)break;if(BattleManager[_0x39b056(0x233)]!==_0x3603d)break;if(BattleManager[_0x39b056(0x634)]['length']<=0x1){BattleManager[_0x39b056(0x233)]=0x0;break;}}}BattleManager[_0x39b056(0x28f)]=BattleManager[_0x39b056(0x634)][BattleManager[_0x39b056(0x233)]]||null,BattleManager[_0x39b056(0x28f)]&&_0x1df57b[_0x39b056(0x2c5)]()[_0x39b056(0x612)]()!=='UNTITLED'&&(_0x39b056(0x83d)!==_0x39b056(0x83d)?_0x44f33f['prepareCustomActionSequence']():_0x317155[_0x39b056(0x5ca)]([_0x1df57b]));}),PluginManager['registerCommand'](pluginData['name'],_0x4b7b09(0x3a6),_0x86da53=>{const _0x32f8c4=_0x4b7b09;if(!SceneManager[_0x32f8c4(0x18e)]())return;VisuMZ[_0x32f8c4(0x92)](_0x86da53,_0x86da53);const _0xca0528=VisuMZ[_0x32f8c4(0x759)](_0x86da53['Targets']);for(const _0x3354d2 of _0xca0528){if(_0x32f8c4(0x9fc)==='hOiFk'){if(!_0x3354d2)continue;if(!_0x3354d2[_0x32f8c4(0xb0c)]())continue;_0x3354d2[_0x32f8c4(0xb28)]();}else{this[_0x32f8c4(0xa2c)]=[];for(let _0x366506=0x0;_0x366506<_0x3a57b8['maxBattleMembers']();_0x366506++){const _0x5812fd=_0x1e261e[_0x32f8c4(0x41f)]()[_0x366506],_0xc054a3=new _0x528133();_0xc054a3['moveToStartPositionBattleCore'](_0x5812fd),_0xc054a3['setBattler'](_0x5812fd),_0xc054a3['update'](),this[_0x32f8c4(0xa2c)][_0x32f8c4(0x410)](_0xc054a3),this[_0x32f8c4(0x1aa)][_0x32f8c4(0x420)](_0xc054a3);}}}}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],'ActSeq_Weapon_NextActiveWeapon',_0x57e578=>{const _0x2f6c9e=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x57e578,_0x57e578);const _0x64d3d9=$gameTemp['getLastPluginCommandInterpreter']();let _0x42e4f1=![];const _0x8a0d54=_0x57e578['JumpToLabel'],_0x5c5b30=VisuMZ[_0x2f6c9e(0x759)](_0x57e578[_0x2f6c9e(0x94e)]);for(const _0x38e845 of _0x5c5b30){if(!_0x38e845)continue;if(!_0x38e845['isActor']())continue;_0x38e845['nextActiveWeaponSlot']();if(_0x38e845['weapons']()['length']>0x0){if(_0x2f6c9e(0x635)!==_0x2f6c9e(0x707))_0x42e4f1=!![];else{const _0x3173af=_0x165863[_0x2f6c9e(0x6ce)][_0x2f6c9e(0xb41)][_0x2f6c9e(0x34c)];_0x3173af[_0x2f6c9e(0x257)]&&this[_0x2f6c9e(0x410)](_0x2f6c9e(0x8a9),_0x2f6c9e(0x64d)[_0x2f6c9e(0xace)](_0x43d697[_0x2f6c9e(0x1c1)](_0x40a420)));if(_0x23761a[_0x2f6c9e(0x620)](_0x40f6d5)){if(_0x3173af[_0x2f6c9e(0xb1c)])this[_0x2f6c9e(0x547)](_0x209694[_0x2f6c9e(0x84a)],_0x110aa4,_0x1ad7ce);if(_0x3173af['ActionSkillMsg2'])this[_0x2f6c9e(0x547)](_0x2f3167[_0x2f6c9e(0x493)],_0x1d8123,_0x1faf2f);}else{if(_0x3173af[_0x2f6c9e(0x18b)])this['displayItemMessage'](_0x4fe7b0[_0x2f6c9e(0x925)],_0xe96641,_0x36a9a9);}}}else _0x38e845['clearActiveWeaponSlot']();}if(_0x42e4f1&&_0x8a0d54[_0x2f6c9e(0x2c5)]()[_0x2f6c9e(0x612)]()!==_0x2f6c9e(0x320)){if('BgPqx'!=='BgPqx'){this[_0x2f6c9e(0x680)]=new _0x46ec95(0x1,0x1);if(this[_0x2f6c9e(0x6d2)]()){const _0x50c49f=this['_enemy'][_0x2f6c9e(0x822)]();this[_0x2f6c9e(0x680)]=new _0x404ac2(_0x50c49f[_0x2f6c9e(0x839)],_0x50c49f[_0x2f6c9e(0xb65)]),this[_0x2f6c9e(0x1b4)][_0x2f6c9e(0x680)]=new _0x42cb42(0x1,0x1);}else _0x1a4119[_0x2f6c9e(0x43d)]()?(this[_0x2f6c9e(0x1b4)]['bitmap']=_0x28cd72[_0x2f6c9e(0x95a)](_0x2676c6),this[_0x2f6c9e(0x1b4)][_0x2f6c9e(0x680)][_0x2f6c9e(0x4a8)](this[_0x2f6c9e(0xb21)]['bind'](this))):(this[_0x2f6c9e(0x1b4)][_0x2f6c9e(0x680)]=_0x540b34[_0x2f6c9e(0x2aa)](_0x5bdbf6),this[_0x2f6c9e(0x1b4)][_0x2f6c9e(0x680)][_0x2f6c9e(0x4a8)](this[_0x2f6c9e(0xb21)]['bind'](this)));}else _0x64d3d9[_0x2f6c9e(0x5ca)]([_0x8a0d54]);}}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],'ActSeq_Weapon_SetActiveWeapon',_0x3ed85c=>{const _0x407d24=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x407d24(0x92)](_0x3ed85c,_0x3ed85c);let _0x3ec3ca=_0x3ed85c[_0x407d24(0x6ca)];_0x3ec3ca--,_0x3ec3ca=Math[_0x407d24(0x90d)](_0x3ec3ca,0x0);const _0x30dd56=VisuMZ[_0x407d24(0x759)](_0x3ed85c[_0x407d24(0x94e)]);for(const _0xd974e8 of _0x30dd56){if(!_0xd974e8)continue;if(!_0xd974e8[_0x407d24(0xb0c)]())continue;_0xd974e8['setActiveWeaponSlot'](_0x3ec3ca);}}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x31c),_0x1af34c=>{const _0x28b2b1=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x28b2b1(0x522)])return;VisuMZ[_0x28b2b1(0x92)](_0x1af34c,_0x1af34c);const _0x1f2550=$gameTemp['getLastPluginCommandInterpreter'](),_0x17a9df=_0x1af34c[_0x28b2b1(0x685)];if(!_0x1f2550)return;$gameScreen['setBattleZoom'](_0x1af34c[_0x28b2b1(0x8e9)],_0x1af34c[_0x28b2b1(0xad)],_0x1af34c['EasingType']);if(_0x17a9df)_0x1f2550[_0x28b2b1(0x63e)](_0x28b2b1(0x863));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],_0x4b7b09(0x745),_0x1fb1f7=>{const _0x254a0b=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x254a0b(0x522)])return;VisuMZ[_0x254a0b(0x92)](_0x1fb1f7,_0x1fb1f7);const _0x5dc2f9=$gameTemp[_0x254a0b(0x1cb)](),_0x573378=_0x1fb1f7[_0x254a0b(0x685)];if(!_0x5dc2f9)return;$gameScreen[_0x254a0b(0xb56)](0x1,_0x1fb1f7[_0x254a0b(0xad)],_0x1fb1f7[_0x254a0b(0x6cb)]);if(_0x573378)_0x5dc2f9[_0x254a0b(0x63e)](_0x254a0b(0x863));}),PluginManager[_0x4b7b09(0x9d2)](pluginData[_0x4b7b09(0x639)],'ActSeq_Zoom_WaitForZoom',_0x279665=>{const _0x96791d=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x96791d(0x522)])return;const _0x4c9f98=$gameTemp[_0x96791d(0x1cb)]();if(!_0x4c9f98)return;_0x4c9f98[_0x96791d(0x63e)](_0x96791d(0x863));}),VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x456)]=Scene_Boot[_0x4b7b09(0x4d2)][_0x4b7b09(0x7e8)],Scene_Boot['prototype'][_0x4b7b09(0x7e8)]=function(){const _0x1457e4=_0x4b7b09;this['process_VisuMZ_BattleCore_Failsafes'](),this[_0x1457e4(0x88d)](),this['process_VisuMZ_BattleCore_DamageStyles'](),this['process_VisuMZ_BattleCore_CreateRegExp'](),VisuMZ[_0x1457e4(0x6ce)][_0x1457e4(0x456)][_0x1457e4(0x4ad)](this),this['process_VisuMZ_BattleCore_Notetags'](),this[_0x1457e4(0x914)](),this[_0x1457e4(0x266)](),this[_0x1457e4(0x261)]();},Scene_Boot[_0x4b7b09(0x4d2)][_0x4b7b09(0x5d8)]=function(){const _0x5de9ac=_0x4b7b09;if(VisuMZ['ParseAllNotetags'])return;this[_0x5de9ac(0x39f)](),this[_0x5de9ac(0x71e)](),this[_0x5de9ac(0x8d4)]();},Scene_Boot['prototype'][_0x4b7b09(0x4ab)]=function(){const _0x124d96=_0x4b7b09,_0x4b1c4a=$dataSystem[_0x124d96(0x565)][_0x124d96(0x8db)];for(let _0x442186=0x0;_0x442186<_0x4b1c4a;_0x442186++){const _0x398323=$dataSystem['attackMotions'][_0x442186];if(_0x398323)continue;$dataSystem[_0x124d96(0x7d4)][_0x442186]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot[_0x4b7b09(0x4d2)][_0x4b7b09(0x88d)]=function(){const _0x1d5174=_0x4b7b09,_0x3e9025=VisuMZ['BattleCore'][_0x1d5174(0xb41)];_0x3e9025[_0x1d5174(0xb75)][_0x1d5174(0x859)]===undefined&&(_0x3e9025['Damage'][_0x1d5174(0x859)]=_0x1d5174(0x48c));_0x3e9025['Actor'][_0x1d5174(0xb15)]===undefined&&(_0x3e9025[_0x1d5174(0x5dc)][_0x1d5174(0xb15)]=![]);_0x3e9025[_0x1d5174(0x97d)][_0x1d5174(0xb15)]===undefined&&(_0x3e9025['Enemy'][_0x1d5174(0xb15)]=!![]);_0x3e9025[_0x1d5174(0x5dc)][_0x1d5174(0x342)]===undefined&&(_0x3e9025[_0x1d5174(0x5dc)][_0x1d5174(0x342)]=![]);if(_0x3e9025[_0x1d5174(0x5dc)]['PrioritySortActors']===undefined){if(_0x1d5174(0x9f)===_0x1d5174(0x9f))_0x3e9025[_0x1d5174(0x5dc)][_0x1d5174(0x3c3)]=!![];else{_0x150267=_0x5496eb['BattleCore'][_0x1d5174(0x47e)][_0x1d5174(0x4ad)](this);const _0x282338=_0x357afa[_0x1d5174(0x6ce)][_0x1d5174(0x64c)](this[_0x1d5174(0x6e3)](),_0x1d5174(0x94e));return _0x49c06c=_0x3999a9[_0x1d5174(0x6ce)]['JS'][_0x282338][_0x1d5174(0x4ad)](this,this[_0x1d5174(0xb2a)](),_0x3190cd),this[_0x1d5174(0xb7e)](_0x3942d8);}}},VisuMZ['DamageStyles']={},Scene_Boot[_0x4b7b09(0x4d2)][_0x4b7b09(0x82)]=function(){const _0x2fa4fc=_0x4b7b09;for(const _0x4bffcb of VisuMZ['BattleCore']['Settings'][_0x2fa4fc(0xb75)]['DamageStyleList']){if(_0x2fa4fc(0x40b)!==_0x2fa4fc(0x40b))_0x5dc450[_0x2fa4fc(0x6ce)]['Settings'][_0x2fa4fc(0x5dc)]['HomePosJS']?_0x5741db['BattleCore'][_0x2fa4fc(0xb41)][_0x2fa4fc(0x5dc)][_0x2fa4fc(0x237)][_0x2fa4fc(0x4ad)](this,_0x5290ad):_0x35d8d7[_0x2fa4fc(0x6ce)]['Sprite_Actor_setActorHome'][_0x2fa4fc(0x4ad)](this,_0x40e01b);else{if(!_0x4bffcb)continue;const _0x109b9=_0x4bffcb[_0x2fa4fc(0x70f)][_0x2fa4fc(0x2c5)]()[_0x2fa4fc(0x612)]();VisuMZ[_0x2fa4fc(0xed)][_0x109b9]=_0x4bffcb;}}},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xa7b)]={},Scene_Boot[_0x4b7b09(0x4d2)]['process_VisuMZ_BattleCore_CreateRegExp']=function(){const _0x44d45a=_0x4b7b09,_0x3826dd=VisuMZ[_0x44d45a(0x6ce)]['RegExp'],_0x504798='<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>',_0xc0eddc=[[_0x44d45a(0xa18),_0x44d45a(0x351)],[_0x44d45a(0x29e),'POST-']],_0x5d8b49=[[_0x44d45a(0x352),_0x44d45a(0x8a2)],[_0x44d45a(0x1cc),_0x44d45a(0x6aa)]],_0x576709=[['',''],['AsUser',_0x44d45a(0x643)],['AsTarget','AS\x20TARGET']];for(const _0x2d7926 of _0x5d8b49){if(_0x44d45a(0x87d)===_0x44d45a(0x87d))for(const _0x570287 of _0x576709){if(_0x44d45a(0x246)===_0x44d45a(0x246))for(const _0x17fb82 of _0xc0eddc){if(_0x44d45a(0x52a)===_0x44d45a(0x1f9)){if(!_0x329a04[_0x44d45a(0x18e)]())return;_0x4c286b[_0x44d45a(0x92)](_0x5432ff,_0x224a61);const _0x2b5858=_0x16cf38[_0x44d45a(0x290)];if(!_0x2b5858)return;let _0x61279a=_0x28e4c0[_0x44d45a(0x4ce)];_0x2b5858['setCustomDamageFormula'](_0x61279a);}else{const _0x5353e2=_0x2d7926[0x0][_0x44d45a(0xace)](_0x17fb82[0x0],_0x570287[0x0]),_0x3a8e69=_0x2d7926[0x1]['format'](_0x17fb82[0x1],_0x570287[0x1])[_0x44d45a(0x612)](),_0x5485d2=new RegExp(_0x504798[_0x44d45a(0xace)](_0x3a8e69),'i');_0x3826dd[_0x5353e2]=_0x5485d2;}}else this[_0x44d45a(0x50f)]=_0x20b216(_0x5eb5a3['$1']);}else return this[_0x44d45a(0x7c3)]=this[_0x44d45a(0x7c3)]||_0x10dfce[_0x44d45a(0x4d2)]['lineHeight']()||0x24,this[_0x44d45a(0x7c3)]*0x4;}const _0x1b3d5d=[['%1StartActionJS',_0x44d45a(0x73e)],[_0x44d45a(0x879),_0x44d45a(0xb42)]];for(const _0x688be4 of _0x1b3d5d){for(const _0x3cf3b2 of _0xc0eddc){const _0x27cf8a=_0x688be4[0x0][_0x44d45a(0xace)](_0x3cf3b2[0x0]),_0x3ef48d=_0x688be4[0x1][_0x44d45a(0xace)](_0x3cf3b2[0x1]),_0x430a86=new RegExp(_0x504798[_0x44d45a(0xace)](_0x3ef48d),'i');_0x3826dd[_0x27cf8a]=_0x430a86;}}const _0x2e4b26=[[_0x44d45a(0x89),_0x44d45a(0x964)],[_0x44d45a(0x5f9),_0x44d45a(0x6d)],[_0x44d45a(0xa4e),_0x44d45a(0x65e)],[_0x44d45a(0x3f9),'JS\x20BATTLE\x20DEFEAT'],[_0x44d45a(0x216),_0x44d45a(0x47d)],[_0x44d45a(0x68),_0x44d45a(0x783)],[_0x44d45a(0x227),_0x44d45a(0x67b)],[_0x44d45a(0x95b),_0x44d45a(0x453)],[_0x44d45a(0xc6),'JS\x20%1REGENERATE']];for(const _0x17c939 of _0x2e4b26){for(const _0x1d721d of _0xc0eddc){const _0x329260=_0x17c939[0x0][_0x44d45a(0xace)](_0x1d721d[0x0]),_0x2f0a5f=_0x17c939[0x1]['format'](_0x1d721d[0x1]),_0x16101c=new RegExp(_0x504798['format'](_0x2f0a5f),'i');_0x3826dd[_0x329260]=_0x16101c;}}},Scene_Boot[_0x4b7b09(0x4d2)]['process_VisuMZ_BattleCore_Action_Notetags']=function(){const _0x4a5d82=_0x4b7b09,_0x32e0e9=$dataSkills[_0x4a5d82(0xa28)]($dataItems);for(const _0x237a54 of _0x32e0e9){if(!_0x237a54)continue;VisuMZ[_0x4a5d82(0x6ce)][_0x4a5d82(0xa59)](_0x237a54);}},Scene_Boot[_0x4b7b09(0x4d2)][_0x4b7b09(0x71e)]=function(){const _0x1c0989=_0x4b7b09,_0x1a6453=$dataActors[_0x1c0989(0xa28)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x5c6994 of _0x1a6453){if(!_0x5c6994)continue;VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x5c6994);}},Scene_Boot['prototype'][_0x4b7b09(0x914)]=function(){const _0xa6b058=_0x4b7b09,_0x301004=VisuMZ[_0xa6b058(0x6ce)][_0xa6b058(0xb41)][_0xa6b058(0xeb)]['BaseTroopIDs'],_0x41aba3=[];for(const _0x1c7eda of _0x301004){const _0x4ab41f=$dataTroops[_0x1c7eda];if(_0x4ab41f)_0x41aba3[_0xa6b058(0x410)](JsonEx[_0xa6b058(0x9fb)](_0x4ab41f));}for(const _0x3b4f33 of $dataTroops){if(!_0x3b4f33)continue;for(const _0x54aaa7 of _0x41aba3){if(_0xa6b058(0x3e4)===_0xa6b058(0x6e8))_0x45506d[_0xa6b058(0xb7c)]=!![];else{if(_0x54aaa7['id']===_0x3b4f33['id'])continue;_0x3b4f33[_0xa6b058(0x4d7)]=_0x3b4f33[_0xa6b058(0x4d7)]['concat'](_0x54aaa7[_0xa6b058(0x4d7)]);}}}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_PreBattleCommonEvent']=function(){const _0x41399a=_0x4b7b09,_0x55c0fc=VisuMZ[_0x41399a(0x6ce)][_0x41399a(0xb41)][_0x41399a(0xeb)];if(_0x55c0fc[_0x41399a(0x29a)]>0x0&&$dataCommonEvents[_0x55c0fc[_0x41399a(0x29a)]]){const _0x614d5d=$dataCommonEvents[_0x55c0fc[_0x41399a(0x29a)]],_0x26caf7=_0x614d5d[_0x41399a(0x577)][_0x41399a(0x8db)]-0x2,_0x55514b=_0x614d5d[_0x41399a(0x577)][_0x26caf7];if(_0x55514b&&_0x55514b[_0x41399a(0x936)]!==0xe6){if(_0x41399a(0x60e)===_0x41399a(0x5b2)){_0x2e5d95['BattleCore'][_0x41399a(0x11d)][_0x41399a(0x4ad)](this,_0x4a4e45,_0x4c43fa);if(!_0x1b99dd[_0x41399a(0x846)]())return;if(_0xf73410[_0x41399a(0x603)]!==_0x443367[_0x41399a(0x7fa)]())return;let _0x186a8f=_0x355f34[_0x41399a(0x702)];!this[_0x41399a(0xc8)]()&&(_0x186a8f*=_0x5b57e['stateRate'](_0x51fa19[_0x41399a(0x603)]),_0x186a8f*=this['lukEffectRate'](_0x5e0340)),_0x3fc19b[_0x41399a(0x7cd)]()<_0x186a8f&&(_0x2f66f6[_0x41399a(0x193)]=!![],this[_0x41399a(0x7ab)](_0x3fa863));}else{const _0x422b8a={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x3659bf=_0x614d5d['list']['pop']();_0x614d5d[_0x41399a(0x577)]['unshift'](_0x422b8a),_0x614d5d[_0x41399a(0x577)][_0x41399a(0x53b)](_0x3659bf);}}}},Scene_Boot[_0x4b7b09(0x4d2)][_0x4b7b09(0x261)]=function(){const _0x3a42fc=_0x4b7b09;VisuMZ[_0x3a42fc(0x6ce)][_0x3a42fc(0x804)](),VisuMZ[_0x3a42fc(0x6ce)]['BindCommonEventKeysForGroup']($dataSkills),VisuMZ[_0x3a42fc(0x6ce)]['BindCommonEventKeysForGroup']($dataItems);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x804)]=function(){const _0x44cec7=_0x4b7b09;VisuMZ[_0x44cec7(0x6ce)][_0x44cec7(0x740)]={};for(const _0x1fa9ee of $dataCommonEvents){if(!_0x1fa9ee)continue;if(_0x1fa9ee[_0x44cec7(0x639)][_0x44cec7(0x2c1)](/\[(.*)\]/i)){if(_0x44cec7(0x416)!=='EKjHP'){let _0x540148=String(RegExp['$1'])['replace'](/,/g,'')[_0x44cec7(0x2c5)]()['trim']();VisuMZ[_0x44cec7(0x6ce)]['_commonEventKey'][_0x540148]=_0x1fa9ee['id'];}else this[_0x44cec7(0x42f)](_0x44cec7(0x5c2));}}},VisuMZ['BattleCore'][_0x4b7b09(0x75d)]=function(_0x3f8dd9){const _0x161d47=_0x4b7b09;for(const _0xfe902f of _0x3f8dd9){if(_0x161d47(0x710)!==_0x161d47(0x41c)){if(!_0xfe902f)continue;VisuMZ[_0x161d47(0x6ce)][_0x161d47(0x99e)](_0xfe902f);}else{if(_0x45fdb3[_0x161d47(0x18e)]()){const _0x52cf92=this['getAttackWeaponAnimationId']();this[_0x161d47(0x3d8)](_0x52cf92);}}}},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x99e)]=function(_0x1a9b8a){const _0x4eeb45=_0x4b7b09;if(!_0x1a9b8a)return;if(!_0x1a9b8a[_0x4eeb45(0xab5)])return;VisuMZ[_0x4eeb45(0x6ce)][_0x4eeb45(0x740)]=VisuMZ[_0x4eeb45(0x6ce)][_0x4eeb45(0x740)]||{};const _0x12bf44=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x3e7649=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x5c4c6d=[];const _0x4fa265=_0x1a9b8a[_0x4eeb45(0xaf1)][_0x4eeb45(0x2c1)](_0x12bf44);if(_0x4fa265){if(_0x4eeb45(0x9d9)!==_0x4eeb45(0x5fc)){for(const _0x336ede of _0x4fa265){if('eCgAx'!==_0x4eeb45(0x130)){_0x336ede['match'](_0x12bf44);const _0x431413=String(RegExp['$1'])[_0x4eeb45(0x7c9)](',')[_0x4eeb45(0x78)](_0x212d0d=>String(_0x212d0d)[_0x4eeb45(0x2c5)]()[_0x4eeb45(0x612)]());_0x5c4c6d=_0x5c4c6d['concat'](_0x431413);}else{if(!_0x1a2887['isSceneBattle']())return;_0x37af5f[_0x4eeb45(0x92)](_0x345b12,_0x7e388a);const _0x5d6696=_0x5b70b5[_0x4eeb45(0x1cb)](),_0x2ab62f=_0x452f30['_action'],_0x17a1bc=_0x1984b6[_0x4eeb45(0xb2)],_0x272a11=_0x50ad02[_0x4eeb45(0x634)]?_0xabd901[_0x4eeb45(0x634)][_0x4eeb45(0x8ea)](0x0):[],_0x58124b=_0x4dabf9[_0x4eeb45(0xa2d)];if(!_0x5d6696||!_0x2ab62f||!_0x17a1bc)return;if(!_0x2ab62f[_0x4eeb45(0x6e3)]())return;if(_0x318d4f['DisplayAction'])_0x58124b[_0x4eeb45(0x7ec)](_0x17a1bc,_0x2ab62f['item']());_0x186ba7[_0x4eeb45(0x5bf)]&&_0x58124b['push'](_0x4eeb45(0x74),_0x17a1bc,_0x272a11,!![]);if(_0x104ee1[_0x4eeb45(0xa33)])_0x58124b['push']('performActionStart',_0x17a1bc,_0x2ab62f);if(_0x23d90e[_0x4eeb45(0x67d)])_0x58124b['push']('waitForMovement');if(_0x2eacc1[_0x4eeb45(0x1ca)])_0x58124b[_0x4eeb45(0x410)]('performCastAnimation',_0x17a1bc,_0x2ab62f);if(_0x1b3b11['WaitForAnimation'])_0x58124b['push']('waitForAnimation');_0x5d6696[_0x4eeb45(0x63e)]('battlelog');}}!_0x1a9b8a['note'][_0x4eeb45(0x2c1)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x4eeb45(0x9eb)!==_0x4eeb45(0x137)?_0x1a9b8a[_0x4eeb45(0xaf1)]+=_0x4eeb45(0x700):this[_0x4eeb45(0x48a)][_0x4eeb45(0xe2)]=this['isOpen']());;}else{const _0x4060c8=_0xf3ddd3[_0x4eeb45(0xd3)](_0x2e5fae['$1']);this[_0x4eeb45(0x6b9)](_0x3b0165[_0x4060c8]);}}if(_0x1a9b8a[_0x4eeb45(0xaf1)][_0x4eeb45(0x2c1)](_0x3e7649)){if(_0x4eeb45(0x373)===_0x4eeb45(0x373)){const _0x461da4=String(RegExp['$1'])[_0x4eeb45(0x7c9)](/[\r\n]+/)[_0x4eeb45(0x78)](_0x1c7387=>String(_0x1c7387)[_0x4eeb45(0x2c5)]()[_0x4eeb45(0x612)]());_0x5c4c6d=_0x5c4c6d[_0x4eeb45(0xa28)](_0x461da4);!_0x1a9b8a['note'][_0x4eeb45(0x2c1)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x1a9b8a[_0x4eeb45(0xaf1)]+=_0x4eeb45(0x700));;}else return _0x36b918(_0x2a5737['$1'])*0.01;}for(const _0x17486c of _0x5c4c6d){if(VisuMZ[_0x4eeb45(0x6ce)][_0x4eeb45(0x740)][_0x17486c]){if(_0x4eeb45(0xa7a)===_0x4eeb45(0x91d))this[_0x4eeb45(0x50a)]=_0x4eeb45(0xad5);else{const _0x656c74=VisuMZ['BattleCore'][_0x4eeb45(0x740)][_0x17486c],_0x4db8f3={'code':0x2c,'dataId':_0x656c74,'value1':0x1,'value2':0x0};_0x1a9b8a['effects'][_0x4eeb45(0x410)](_0x4db8f3);}}}},Scene_Boot[_0x4b7b09(0x4d2)][_0x4b7b09(0x8d4)]=function(){const _0xce6e99=_0x4b7b09,_0x525d43=$dataSkills[_0xce6e99(0xa28)]($dataItems);for(const _0x842a5c of _0x525d43){if(_0xce6e99(0x214)===_0xce6e99(0x214)){if(!_0x842a5c)continue;VisuMZ[_0xce6e99(0x6ce)]['Parse_Notetags_Targets'](_0x842a5c);}else this[_0xce6e99(0x1f7)]()===_0xce6e99(0xad5)?this['_cancelButton']['x']=0x8:this[_0xce6e99(0x9d6)]['x']=-this['_cancelButton']['width']-0x4;}},VisuMZ[_0x4b7b09(0x6ce)]['ParseActorNotetags']=VisuMZ[_0x4b7b09(0x9e0)],VisuMZ[_0x4b7b09(0x9e0)]=function(_0x57c6d7){const _0x34f5ac=_0x4b7b09;if(VisuMZ[_0x34f5ac(0x6ce)][_0x34f5ac(0x9e0)]){if(_0x34f5ac(0x7a)!==_0x34f5ac(0x743))VisuMZ[_0x34f5ac(0x6ce)][_0x34f5ac(0x9e0)][_0x34f5ac(0x4ad)](this,_0x57c6d7);else return 0x0;}VisuMZ[_0x34f5ac(0x6ce)][_0x34f5ac(0xa53)](_0x57c6d7);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x1ad)]=VisuMZ[_0x4b7b09(0x1ad)],VisuMZ[_0x4b7b09(0x1ad)]=function(_0x731d9d){const _0x4492bb=_0x4b7b09;VisuMZ[_0x4492bb(0x6ce)][_0x4492bb(0x1ad)]&&VisuMZ['BattleCore'][_0x4492bb(0x1ad)][_0x4492bb(0x4ad)](this,_0x731d9d),VisuMZ[_0x4492bb(0x6ce)][_0x4492bb(0xa53)](_0x731d9d);},VisuMZ['BattleCore'][_0x4b7b09(0x45b)]=VisuMZ[_0x4b7b09(0x45b)],VisuMZ[_0x4b7b09(0x45b)]=function(_0x543751){const _0x1e09e4=_0x4b7b09;if(VisuMZ[_0x1e09e4(0x6ce)][_0x1e09e4(0x45b)]){if(_0x1e09e4(0x974)===_0x1e09e4(0x974))VisuMZ['BattleCore'][_0x1e09e4(0x45b)][_0x1e09e4(0x4ad)](this,_0x543751);else return this[_0x1e09e4(0x50e)];}VisuMZ[_0x1e09e4(0x6ce)][_0x1e09e4(0xa59)](_0x543751),VisuMZ[_0x1e09e4(0x6ce)]['Parse_Notetags_Targets'](_0x543751);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xec)]=VisuMZ[_0x4b7b09(0xec)],VisuMZ['ParseItemNotetags']=function(_0x5b4f3d){const _0x5c05f6=_0x4b7b09;VisuMZ[_0x5c05f6(0x6ce)][_0x5c05f6(0xec)]&&(_0x5c05f6(0x54d)===_0x5c05f6(0x54d)?VisuMZ[_0x5c05f6(0x6ce)][_0x5c05f6(0xec)][_0x5c05f6(0x4ad)](this,_0x5b4f3d):this[_0x5c05f6(0x9d6)]['x']=-this[_0x5c05f6(0x9d6)]['width']-0x4),VisuMZ[_0x5c05f6(0x6ce)]['Parse_Notetags_Action'](_0x5b4f3d),VisuMZ['BattleCore'][_0x5c05f6(0x4ac)](_0x5b4f3d);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x8ed)]=VisuMZ[_0x4b7b09(0x8ed)],VisuMZ[_0x4b7b09(0x8ed)]=function(_0x1ca869){const _0x162fa7=_0x4b7b09;VisuMZ['BattleCore']['ParseWeaponNotetags']&&VisuMZ['BattleCore']['ParseWeaponNotetags']['call'](this,_0x1ca869),VisuMZ[_0x162fa7(0x6ce)]['Parse_Notetags_TraitObjects'](_0x1ca869);},VisuMZ[_0x4b7b09(0x6ce)]['ParseArmorNotetags']=VisuMZ[_0x4b7b09(0x80)],VisuMZ[_0x4b7b09(0x80)]=function(_0x227f74){const _0x4c2822=_0x4b7b09;if(VisuMZ[_0x4c2822(0x6ce)][_0x4c2822(0x80)]){if(_0x4c2822(0x8ff)!==_0x4c2822(0x30f))VisuMZ['BattleCore'][_0x4c2822(0x80)][_0x4c2822(0x4ad)](this,_0x227f74);else return!![];}VisuMZ[_0x4c2822(0x6ce)][_0x4c2822(0xa53)](_0x227f74);},VisuMZ['BattleCore'][_0x4b7b09(0x711)]=VisuMZ[_0x4b7b09(0x711)],VisuMZ['ParseEnemyNotetags']=function(_0xe79b14){const _0xfacec4=_0x4b7b09;VisuMZ[_0xfacec4(0x6ce)][_0xfacec4(0x711)]&&VisuMZ[_0xfacec4(0x6ce)][_0xfacec4(0x711)][_0xfacec4(0x4ad)](this,_0xe79b14),VisuMZ['BattleCore'][_0xfacec4(0xa53)](_0xe79b14);},VisuMZ[_0x4b7b09(0x6ce)]['ParseStateNotetags']=VisuMZ[_0x4b7b09(0xb31)],VisuMZ[_0x4b7b09(0xb31)]=function(_0x209cc1){const _0x164e73=_0x4b7b09;VisuMZ[_0x164e73(0x6ce)]['ParseStateNotetags']&&VisuMZ[_0x164e73(0x6ce)][_0x164e73(0xb31)][_0x164e73(0x4ad)](this,_0x209cc1),VisuMZ[_0x164e73(0x6ce)]['Parse_Notetags_TraitObjects'](_0x209cc1);},VisuMZ[_0x4b7b09(0x6ce)]['Parse_Notetags_Action']=function(_0x1c5bd5){const _0x90e935=_0x4b7b09,_0x118ea5=['PreApplyJS',_0x90e935(0x8ec),'PreDamageJS',_0x90e935(0x247),_0x90e935(0x911),'PostStartActionJS','PreEndActionJS',_0x90e935(0x9b1)];for(const _0x3394ee of _0x118ea5){if(_0x90e935(0x45f)!==_0x90e935(0x45f)){const _0x594f77=_0x4ede8b['prototype']['blockWidth']()*0x2+0x4;let _0x138b40=_0x5b24df[_0x90e935(0x979)]-_0x594f77;_0xa10673['VisuMZ_0_CoreEngine']&&_0x19569c[_0x90e935(0xb7)]()&&(_0x138b40+=_0x594f77);const _0x4853be=this['helpAreaBottom'](),_0x424b18=_0xddb319[_0x90e935(0x807)]-_0x4853be-this[_0x90e935(0xa5e)]()[_0x90e935(0xb65)]+_0x5ee942['prototype']['extraHeight'](),_0xb16adf=0x0;return new _0x452363(_0xb16adf,_0x4853be,_0x138b40,_0x424b18);}else VisuMZ[_0x90e935(0x6ce)][_0x90e935(0xb47)](_0x1c5bd5,_0x3394ee);}const _0x82c8d5=_0x1c5bd5[_0x90e935(0xaf1)];_0x82c8d5[_0x90e935(0x2c1)](/<ALWAYS CRITICAL/i)&&(_0x1c5bd5[_0x90e935(0x28b)][_0x90e935(0x931)]=!![]);_0x82c8d5[_0x90e935(0x2c1)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x90e935(0x9a8)!=='BKUun'?_0x1c5bd5[_0x90e935(0x235)]=Math['max'](0x1,Number(RegExp['$1'])):(this[_0x90e935(0x613)](_0x90e935(0x59e),_0x3f83bb,0x0,!![]),_0x33254d['BattleCore'][_0x90e935(0x8f3)][_0x90e935(0x4ad)](this,_0x1dd685),this[_0x90e935(0x613)]('PostApply%1JS',_0x4231b4,this[_0x90e935(0x202)]||0x0,!![]),this[_0x90e935(0x9f6)](_0x2f7e70)));if(_0x82c8d5[_0x90e935(0x2c1)](/<TARGET:[ ](.*)>/i)){if(_0x90e935(0xac4)!==_0x90e935(0x469))_0x1c5bd5['scope']=String(RegExp['$1'])[_0x90e935(0x2c5)]()['trim']();else{_0x21e89a(_0x90e935(0x6d1)),_0x31a7ac[_0x90e935(0x9df)]();return;}}},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xa53)]=function(_0x153dc4){const _0xe90304=_0x4b7b09,_0x8d67cb=[_0xe90304(0x9e5),_0xe90304(0x8d9),_0xe90304(0x495),_0xe90304(0x918),_0xe90304(0x14a),_0xe90304(0xf9),_0xe90304(0x413),'PostDamageAsTargetJS',_0xe90304(0x911),'PostStartActionJS',_0xe90304(0xc7),'PostEndActionJS',_0xe90304(0x5df),_0xe90304(0x6c),'PreEndBattleJS',_0xe90304(0x126),'BattleVictoryJS','BattleDefeatJS',_0xe90304(0x216),'EscapeFailureJS',_0xe90304(0xb2f),_0xe90304(0x4c4),_0xe90304(0x556),_0xe90304(0x7eb),_0xe90304(0x1a0),_0xe90304(0x398)];for(const _0x570d14 of _0x8d67cb){VisuMZ['BattleCore']['createJS'](_0x153dc4,_0x570d14);}},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x4ac)]=function(_0x3d18e1){const _0xdfda56=_0x4b7b09,_0x41e3f0=_0x3d18e1[_0xdfda56(0xaf1)];if(_0x41e3f0[_0xdfda56(0x2c1)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){if(_0xdfda56(0x272)===_0xdfda56(0x272)){const _0x393706=String(RegExp['$1']),_0xe713e7=VisuMZ[_0xdfda56(0x6ce)][_0xdfda56(0x64c)](_0x3d18e1,_0xdfda56(0x94e));VisuMZ[_0xdfda56(0x6ce)]['createTargetsJS'](_0x393706,_0xe713e7);}else{const _0x28bd39=new _0x2faedf();_0x28bd39[_0xdfda56(0x680)]=_0x433f6f[_0xdfda56(0x6e0)](_0x38b882[_0xdfda56(0x122)]),_0x28bd39['x']=_0x734563[_0xdfda56(0xb09)]||0x0,_0x28bd39['y']=_0x23d67e[_0xdfda56(0x95f)]||0x0,this[_0xdfda56(0x420)](_0x28bd39),this[_0xdfda56(0x25b)]=_0x28bd39;}}if(_0x41e3f0['match'](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x1ac7bf=String(RegExp['$1']),_0x1c6fa2=VisuMZ['BattleCore'][_0xdfda56(0x64c)](_0x3d18e1,_0xdfda56(0x1b7));VisuMZ[_0xdfda56(0x6ce)][_0xdfda56(0x252)](_0x1ac7bf,_0x1c6fa2);}},VisuMZ[_0x4b7b09(0x6ce)]['JS']={},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xb47)]=function(_0x196083,_0x144b24){const _0x3b75f2=_0x4b7b09,_0xffb8b4=_0x196083[_0x3b75f2(0xaf1)];if(_0xffb8b4[_0x3b75f2(0x2c1)](VisuMZ[_0x3b75f2(0x6ce)]['RegExp'][_0x144b24])){const _0x470168=RegExp['$1'],_0x34047e=_0x3b75f2(0x2b2)[_0x3b75f2(0xace)](_0x470168),_0x429143=VisuMZ[_0x3b75f2(0x6ce)][_0x3b75f2(0x64c)](_0x196083,_0x144b24);VisuMZ[_0x3b75f2(0x6ce)]['JS'][_0x429143]=new Function(_0x34047e);}},VisuMZ[_0x4b7b09(0x6ce)]['createKeyJS']=function(_0x7572af,_0x1af2d5){const _0x5bbd9e=_0x4b7b09;if(VisuMZ[_0x5bbd9e(0x64c)])return VisuMZ['createKeyJS'](_0x7572af,_0x1af2d5);let _0x596072='';if($dataActors[_0x5bbd9e(0x382)](_0x7572af))_0x596072=_0x5bbd9e(0x44a)[_0x5bbd9e(0xace)](_0x7572af['id'],_0x1af2d5);if($dataClasses[_0x5bbd9e(0x382)](_0x7572af))_0x596072=_0x5bbd9e(0x2a2)['format'](_0x7572af['id'],_0x1af2d5);if($dataSkills[_0x5bbd9e(0x382)](_0x7572af))_0x596072=_0x5bbd9e(0xb8a)['format'](_0x7572af['id'],_0x1af2d5);if($dataItems[_0x5bbd9e(0x382)](_0x7572af))_0x596072=_0x5bbd9e(0x5b3)[_0x5bbd9e(0xace)](_0x7572af['id'],_0x1af2d5);if($dataWeapons[_0x5bbd9e(0x382)](_0x7572af))_0x596072=_0x5bbd9e(0x31b)[_0x5bbd9e(0xace)](_0x7572af['id'],_0x1af2d5);if($dataArmors['includes'](_0x7572af))_0x596072='Armor-%1-%2'[_0x5bbd9e(0xace)](_0x7572af['id'],_0x1af2d5);if($dataEnemies['includes'](_0x7572af))_0x596072=_0x5bbd9e(0x26d)[_0x5bbd9e(0xace)](_0x7572af['id'],_0x1af2d5);if($dataStates[_0x5bbd9e(0x382)](_0x7572af))_0x596072=_0x5bbd9e(0x8d5)[_0x5bbd9e(0xace)](_0x7572af['id'],_0x1af2d5);return _0x596072;},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x197)]=function(_0x3751a6,_0x17550f){const _0xd30c4a=_0x4b7b09,_0x3087fe='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20'[_0xd30c4a(0xace)](_0x3751a6);VisuMZ[_0xd30c4a(0x6ce)]['JS'][_0x17550f]=new Function(_0x3087fe);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x252)]=function(_0x27d009,_0x424ed4){const _0x43e5d4=_0x4b7b09,_0x27cdbc='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20'[_0x43e5d4(0xace)](_0x27d009);VisuMZ[_0x43e5d4(0x6ce)]['JS'][_0x424ed4]=new Function(_0x27cdbc);},TextManager['autoBattle']=VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xb41)][_0x4b7b09(0xa9)][_0x4b7b09(0x6b)],TextManager[_0x4b7b09(0x553)]=VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xb41)][_0x4b7b09(0x632)][_0x4b7b09(0x950)],TextManager[_0x4b7b09(0x1e8)]=VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xb41)][_0x4b7b09(0x632)][_0x4b7b09(0x79a)],TextManager[_0x4b7b09(0x444)]=VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xb41)][_0x4b7b09(0x2d3)][_0x4b7b09(0x70f)],ColorManager[_0x4b7b09(0x71a)]=function(_0x41f79c){const _0x517004=_0x4b7b09;return _0x41f79c=String(_0x41f79c),_0x41f79c['match'](/#(.*)/i)?_0x517004(0x5cc)[_0x517004(0xace)](String(RegExp['$1'])):this[_0x517004(0x590)](Number(_0x41f79c));},DataManager[_0x4b7b09(0x784)]=function(_0x29761a){const _0x53bb9f=_0x4b7b09;if(_0x29761a[_0x53bb9f(0xaf1)][_0x53bb9f(0x2c1)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x54f085=String(RegExp['$1'])[_0x53bb9f(0x2c5)]()['trim']();if(_0x54f085==='MANUAL')return _0x53bb9f(0x217);if(VisuMZ['DamageStyles'][_0x54f085])return _0x54f085;}const _0x2c66c7=VisuMZ['BattleCore'][_0x53bb9f(0xb41)]['Damage'][_0x53bb9f(0x22e)][_0x53bb9f(0x2c5)]()['trim']();if(VisuMZ[_0x53bb9f(0xed)][_0x2c66c7])return _0x2c66c7;return'MANUAL';},DataManager[_0x4b7b09(0x251)]=function(_0x3d85fa){const _0x51c4aa=_0x4b7b09;_0x3d85fa=_0x3d85fa['toUpperCase']()['trim'](),this[_0x51c4aa(0x110)]=this[_0x51c4aa(0x110)]||{};if(this[_0x51c4aa(0x110)][_0x3d85fa])return this[_0x51c4aa(0x110)][_0x3d85fa];for(let _0xc9b8ea=0x1;_0xc9b8ea<0x64;_0xc9b8ea++){if(!$dataSystem[_0x51c4aa(0x7b)][_0xc9b8ea])continue;let _0x363002=$dataSystem[_0x51c4aa(0x7b)][_0xc9b8ea]['toUpperCase']()[_0x51c4aa(0x612)]();_0x363002=_0x363002[_0x51c4aa(0x586)](/\x1I\[(\d+)\]/gi,''),_0x363002=_0x363002[_0x51c4aa(0x586)](/\\I\[(\d+)\]/gi,''),this[_0x51c4aa(0x110)][_0x363002]=_0xc9b8ea;}return this[_0x51c4aa(0x110)][_0x3d85fa]||0x0;},DataManager[_0x4b7b09(0xd3)]=function(_0x30174b){const _0x5cd772=_0x4b7b09;_0x30174b=_0x30174b[_0x5cd772(0x2c5)]()['trim'](),this[_0x5cd772(0x5d1)]=this[_0x5cd772(0x5d1)]||{};if(this[_0x5cd772(0x5d1)][_0x30174b])return this[_0x5cd772(0x5d1)][_0x30174b];for(const _0x722e26 of $dataSkills){if(!_0x722e26)continue;this[_0x5cd772(0x5d1)][_0x722e26[_0x5cd772(0x639)][_0x5cd772(0x2c5)]()[_0x5cd772(0x612)]()]=_0x722e26['id'];}return this[_0x5cd772(0x5d1)][_0x30174b]||0x0;},DataManager['getEnemyIdWithName']=function(_0x4c80cd){const _0x37bf9b=_0x4b7b09;_0x4c80cd=_0x4c80cd['toUpperCase']()['trim'](),this[_0x37bf9b(0x103)]=this[_0x37bf9b(0x103)]||{};if(this[_0x37bf9b(0x103)][_0x4c80cd])return this[_0x37bf9b(0x103)][_0x4c80cd];for(const _0x20b290 of $dataEnemies){if('jMMBF'===_0x37bf9b(0x4b4)){if(!_0x20b290)continue;this[_0x37bf9b(0x103)][_0x20b290[_0x37bf9b(0x639)]['toUpperCase']()[_0x37bf9b(0x612)]()]=_0x20b290['id'];}else{const _0x38a981=_0x3f7dfa(_0x1cadbe['$1']),_0x2e870e=_0x16f7f4[_0x37bf9b(0x6ce)][_0x37bf9b(0x64c)](_0x4c3182,_0x37bf9b(0x1b7));_0x14863b['BattleCore'][_0x37bf9b(0x252)](_0x38a981,_0x2e870e);}}return this[_0x37bf9b(0x103)][_0x4c80cd]||0x0;},DataManager[_0x4b7b09(0x52b)]=function(_0x190104){const _0xee38ef=_0x4b7b09;_0x190104=_0x190104[_0xee38ef(0x2c5)]()[_0xee38ef(0x612)](),this[_0xee38ef(0x60c)]=this['_wtypeIDs']||{};if(this[_0xee38ef(0x60c)][_0x190104])return this['_wtypeIDs'][_0x190104];for(let _0x1690fc=0x1;_0x1690fc<0x64;_0x1690fc++){if(!$dataSystem[_0xee38ef(0x565)][_0x1690fc])continue;let _0x4305e2=$dataSystem[_0xee38ef(0x565)][_0x1690fc][_0xee38ef(0x2c5)]()[_0xee38ef(0x612)]();_0x4305e2=_0x4305e2[_0xee38ef(0x586)](/\x1I\[(\d+)\]/gi,''),_0x4305e2=_0x4305e2['replace'](/\\I\[(\d+)\]/gi,''),this[_0xee38ef(0x60c)][_0x4305e2]=_0x1690fc;}return this['_wtypeIDs']['BARE\x20HANDS']=0x0,this[_0xee38ef(0x60c)][_0x190104]||0x0;},DataManager[_0x4b7b09(0x1c1)]=function(_0x1036fe){const _0x2d2780=_0x4b7b09,_0x31c372=_0x2d2780(0x38e);let _0xd007b=_0x1036fe[_0x2d2780(0x3c5)],_0x1edd24=_0x1036fe[_0x2d2780(0x639)];const _0x2cef59=_0x1036fe['note'];return _0x2cef59[_0x2d2780(0x2c1)](/<DISPLAY ICON: (\d+)>/i)&&(_0x2d2780(0x307)===_0x2d2780(0x7aa)?this[_0x2d2780(0x16e)]():_0xd007b=Number(RegExp['$1'])),_0x2cef59[_0x2d2780(0x2c1)](/<DISPLAY TEXT: (.*)>/i)&&(_0x1edd24=String(RegExp['$1'])),_0x31c372[_0x2d2780(0xace)](_0xd007b,_0x1edd24);},DataManager[_0x4b7b09(0x5fb)]=function(_0x38779d){const _0x463b87=_0x4b7b09;return _0x38779d['note']['match'](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x38779d[_0x463b87(0x639)];},DataManager[_0x4b7b09(0x37b)]=function(_0xdc5826){const _0x593cd6=_0x4b7b09;return _0xdc5826['note'][_0x593cd6(0x2c1)](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0xdc5826[_0x593cd6(0x3c5)];},DataManager[_0x4b7b09(0x348)]=function(_0x3f2353){const _0x44457e=_0x4b7b09,_0x2fe2ba=$dataEnemies[_0x3f2353];if(_0x2fe2ba){if(_0x2fe2ba['note'][_0x44457e(0x2c1)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){if(_0x44457e(0x36c)!==_0x44457e(0x581)){const _0x5bf6a8=String(RegExp['$1'])[_0x44457e(0x7c9)](/[\r\n]+/)[_0x44457e(0x76b)](''),_0x139208=this[_0x44457e(0x649)](_0x5bf6a8);_0x3f2353=this['getEnemyIdWithName'](_0x139208)||_0x3f2353,_0x3f2353=DataManager[_0x44457e(0x348)](_0x3f2353);}else{if(!this[_0x44457e(0x6a7)])return![];if(this[_0x44457e(0x6a7)][_0x44457e(0xb0c)]())return!![];if(this['_battler'][_0x44457e(0x182)]())return![];if(this[_0x44457e(0x5a0)]<=0x0)return![];const _0x4151b6=this['_battler']['enemy']()[_0x44457e(0xaf1)];if(_0x4151b6[_0x44457e(0x2c1)](/<SHOW HP GAUGE>/i))return!![];if(_0x4151b6['match'](/<HIDE HP GAUGE>/i))return![];const _0x2da5f1=_0x537249[_0x44457e(0x6ce)][_0x44457e(0xb41)][_0x44457e(0x2d3)];if(_0x2da5f1[_0x44457e(0x855)]){if(_0x2da5f1['BTestBypass']&&_0x5e731e[_0x44457e(0x4ed)]())return!![];if(this['_battler'][_0x44457e(0x123)])return![];return this[_0x44457e(0x6a7)][_0x44457e(0xf4)]();}return!![];}}}return _0x3f2353;},DataManager[_0x4b7b09(0x649)]=function(_0x20aa07){const _0x4cc7c6=_0x4b7b09;let _0x450194=0x0;const _0x24f557={};for(const _0x3bf7c8 of _0x20aa07){if(_0x3bf7c8[_0x4cc7c6(0x2c1)](/(.*):[ ](\d+)/i)){const _0x41b7e7=String(RegExp['$1'])['trim'](),_0x581a36=Number(RegExp['$2']);_0x24f557[_0x41b7e7]=_0x581a36,_0x450194+=_0x581a36;}else{if(_0x3bf7c8[_0x4cc7c6(0x2c1)](/(.*):[ ](\d+\.?\d+)/i)){const _0x31aefa=String(RegExp['$1'])[_0x4cc7c6(0x612)](),_0x2f04cd=Number(RegExp['$2']);_0x24f557[_0x31aefa]=_0x2f04cd,_0x450194+=_0x2f04cd;}else _0x3bf7c8!==''&&(_0x24f557[_0x3bf7c8]=0x1,_0x450194++);}}if(_0x450194<=0x0)return'';let _0x18db0e=Math[_0x4cc7c6(0x7cd)]()*_0x450194;for(const _0x559400 in _0x24f557){_0x18db0e-=_0x24f557[_0x559400];if(_0x18db0e<=0x0)return _0x559400;}return'';},DataManager[_0x4b7b09(0x9de)]=function(_0x5ad191){const _0x479c67=_0x4b7b09;if(!_0x5ad191)return![];if(!VisuMZ[_0x479c67(0x6ce)][_0x479c67(0xb41)]['ActionSequence'][_0x479c67(0x69b)])return![];if(_0x5ad191[_0x479c67(0xaf1)]['match'](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x5ad191[_0x479c67(0xaf1)][_0x479c67(0x2c1)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x1ebe9a of _0x5ad191['effects']){if('EfwIS'===_0x479c67(0x13b))this[_0x479c67(0x460)](_0x479c67(0xb8f));else{if(!_0x1ebe9a)continue;if(_0x1ebe9a[_0x479c67(0x936)]===Game_Action[_0x479c67(0x414)])return!![];}}return![];},DataManager[_0x4b7b09(0x854)]=function(_0x26f6f2){const _0x321846=_0x4b7b09,_0x2be2d5=$dataTroops[_0x26f6f2];if(!_0x2be2d5)return'';let _0xae3019='';_0xae3019+=_0x2be2d5[_0x321846(0x639)];for(const _0x19f90a of _0x2be2d5[_0x321846(0x4d7)]){for(const _0x3d8307 of _0x19f90a[_0x321846(0x577)]){[0x6c,0x198][_0x321846(0x382)](_0x3d8307[_0x321846(0x936)])&&(_0xae3019+='\x0a',_0xae3019+=_0x3d8307[_0x321846(0x671)][0x0]);}}return _0xae3019;},ConfigManager['autoBattleAtStart']=ConfigManager[_0x4b7b09(0x592)]??![],ConfigManager[_0x4b7b09(0x2c9)]=ConfigManager[_0x4b7b09(0x2c9)]??![],ConfigManager[_0x4b7b09(0x444)]=ConfigManager[_0x4b7b09(0x444)]??!![],VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x2d4)]=ConfigManager[_0x4b7b09(0x6f5)],ConfigManager[_0x4b7b09(0x6f5)]=function(){const _0x8f9912=_0x4b7b09,_0x5ce4ee=VisuMZ['BattleCore'][_0x8f9912(0x2d4)][_0x8f9912(0x4ad)](this);return _0x5ce4ee[_0x8f9912(0x592)]=this['autoBattleAtStart'],_0x5ce4ee[_0x8f9912(0x2c9)]=this['autoBattleUseSkills'],_0x5ce4ee[_0x8f9912(0x444)]=this[_0x8f9912(0x444)],_0x5ce4ee;},VisuMZ[_0x4b7b09(0x6ce)]['ConfigManager_applyData']=ConfigManager[_0x4b7b09(0x20a)],ConfigManager[_0x4b7b09(0x20a)]=function(_0x499796){const _0x4b3ed9=_0x4b7b09;VisuMZ[_0x4b3ed9(0x6ce)][_0x4b3ed9(0x431)][_0x4b3ed9(0x4ad)](this,_0x499796);_0x4b3ed9(0x592)in _0x499796?this[_0x4b3ed9(0x592)]=_0x499796[_0x4b3ed9(0x592)]:this[_0x4b3ed9(0x592)]=![];_0x4b3ed9(0x2c9)in _0x499796?this[_0x4b3ed9(0x2c9)]=_0x499796[_0x4b3ed9(0x2c9)]:this[_0x4b3ed9(0x2c9)]=![];if(_0x4b3ed9(0x444)in _0x499796)this['visualHpGauge']=_0x499796['visualHpGauge'];else{if(_0x4b3ed9(0x6be)!==_0x4b3ed9(0x65c))this['visualHpGauge']=!![];else{if(!_0xb9411b[_0x4b3ed9(0x43d)]())return;const _0x5273ee=this[_0x4b3ed9(0xe0)]();if(!_0x5273ee)return;this[_0x4b3ed9(0xb0c)]()&&(_0x2d4cb1*=-0x1,_0x1ccc9b*=-0x1),_0x5273ee[_0x4b3ed9(0x391)](_0x22f821,_0x2a6058,_0x4e2687,_0x57c661);}}},VisuMZ['BattleCore'][_0x4b7b09(0x22f)]=BattleManager[_0x4b7b09(0x737)],BattleManager['initMembers']=function(){const _0x4eeced=_0x4b7b09;VisuMZ[_0x4eeced(0x6ce)][_0x4eeced(0x22f)]['call'](this),this[_0x4eeced(0x313)]=[];},BattleManager[_0x4b7b09(0x39e)]=function(){const _0x41012a=_0x4b7b09;if(!SceneManager[_0x41012a(0x18e)]())return;const _0x2591bf=SceneManager[_0x41012a(0x5ae)][_0x41012a(0x406)];if(_0x2591bf)_0x2591bf[_0x41012a(0x295)]();},BattleManager['battleSys']=function(){const _0x28b723=_0x4b7b09;if(BattleManager[_0x28b723(0x54c)]())return _0x28b723(0x750);return _0x28b723(0x7a0);},BattleManager[_0x4b7b09(0x422)]=function(_0x4a2a03){const _0x373259=_0x4b7b09;return _0x4a2a03=_0x4a2a03[_0x373259(0x2c5)]()[_0x373259(0x612)](),this['battleSys']()===_0x4a2a03;},BattleManager[_0x4b7b09(0x363)]=function(){const _0x4f74bd=_0x4b7b09;return this[_0x4f74bd(0x422)](_0x4f74bd(0x7a0));},BattleManager['isTurnBased']=function(){const _0x9492f2=_0x4b7b09;return this[_0x9492f2(0x363)]();},BattleManager[_0x4b7b09(0x2b4)]=function(){const _0x14a4ee=_0x4b7b09;return!this[_0x14a4ee(0x2e4)]();},BattleManager[_0x4b7b09(0x515)]=function(){const _0x21118d=_0x4b7b09;return!this[_0x21118d(0x2e4)]()&&!this[_0x21118d(0x2b4)]();},BattleManager['processBattleCoreJS']=function(_0x16102c){const _0x269c58=_0x4b7b09;if(_0x16102c==='BattleVictoryJS'){if('iuNKx'==='iuNKx')this[_0x269c58(0x4df)]=!![];else{const _0x2572aa=_0x17f2b1[_0x269c58(0x29d)]?_0x2bba80[_0x269c58(0x791)][_0x269c58(0xb41)][_0x269c58(0x2b1)]:_0xeca7ab[_0x269c58(0x6ce)]['Settings']['ActorCmd'],_0x59efeb=_0x35d68f[_0x269c58(0x2a4)][_0x269c58(0x382)](_0x257a45),_0x27b525=_0x59efeb?_0x2572aa[_0x269c58(0xadc)]:_0x2572aa['IconStypeNorm'];_0x5ae6dc=_0x269c58(0x38e)['format'](_0x27b525,_0x204b93);}}$gameParty['processBattleCoreJS'](_0x16102c),$gameTroop[_0x269c58(0x2c2)](_0x16102c);},VisuMZ['BattleCore'][_0x4b7b09(0x7e2)]=BattleManager[_0x4b7b09(0x7fb)],BattleManager['startBattle']=function(){const _0x1cf69c=_0x4b7b09;this[_0x1cf69c(0x49c)]=![],this['_autoBattle']=ConfigManager[_0x1cf69c(0x592)],this[_0x1cf69c(0x4df)]=![],this[_0x1cf69c(0x2c2)](_0x1cf69c(0x5df)),VisuMZ[_0x1cf69c(0x6ce)][_0x1cf69c(0x7e2)]['call'](this),this['processBattleCoreJS'](_0x1cf69c(0x6c));},BattleManager['processPostBattleCommonEvents']=function(_0x5f2b8f){const _0x472c27=_0x4b7b09,_0x5c32ff=VisuMZ[_0x472c27(0x6ce)][_0x472c27(0xb41)][_0x472c27(0xeb)];_0x5f2b8f!==_0x472c27(0x6b0)&&_0x5c32ff[_0x472c27(0x8a3)]&&VisuMZ[_0x472c27(0x6ce)][_0x472c27(0x1b2)](_0x5c32ff[_0x472c27(0x8a3)])&&('VDifF'==='VDifF'?$gameTemp[_0x472c27(0x84f)](_0x5c32ff[_0x472c27(0x8a3)]):(_0x18fc0e[_0x472c27(0x5ff)]||_0x1588dc[_0x472c27(0xb5f)])&&_0x401478[_0x472c27(0x12f)]());const _0x41a871=_0x472c27(0x98d)[_0x472c27(0xace)](_0x5f2b8f);_0x5c32ff[_0x41a871]&&VisuMZ[_0x472c27(0x6ce)]['CheckMapBattleEventValid'](_0x5c32ff[_0x41a871])&&$gameTemp[_0x472c27(0x84f)](_0x5c32ff[_0x41a871]);},VisuMZ['BattleCore'][_0x4b7b09(0x2d6)]=BattleManager[_0x4b7b09(0x224)],BattleManager[_0x4b7b09(0x224)]=function(){const _0x549b12=_0x4b7b09;if(this[_0x549b12(0x1f0)]===_0x549b12(0xabd)){if(_0x549b12(0xb0f)===_0x549b12(0x3f0)){if(!this[_0x549b12(0x292)])return;this[_0x549b12(0x7c3)]=this[_0x549b12(0x7c3)]||_0x518f4b[_0x549b12(0x4d2)][_0x549b12(0xad8)](),this['x']=_0x28fc39[_0x549b12(0x2ca)](this[_0x549b12(0x292)][_0x549b12(0x226)]),this['y']=_0x38bc0d[_0x549b12(0x2ca)](this[_0x549b12(0x292)]['_baseY']-this['_lineHeight']*0.5);const _0x445f1a=_0x1d0082[_0x549b12(0x6ce)][_0x549b12(0xb41)]['Enemy'];this['x']+=_0x38f91d[_0x549b12(0x2ca)](_0x445f1a[_0x549b12(0x2ec)]||0x0),this['y']+=_0x4f669e[_0x549b12(0x2ca)](_0x445f1a[_0x549b12(0x62f)]||0x0);}else{if($gameTemp[_0x549b12(0x9bb)]())return![];}}return VisuMZ[_0x549b12(0x6ce)][_0x549b12(0x2d6)][_0x549b12(0x4ad)](this);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xa06)]=BattleManager[_0x4b7b09(0x2f8)],BattleManager['processVictory']=function(){const _0x1268f2=_0x4b7b09;this['_endingBattle']=!![],this[_0x1268f2(0x2c2)]('BattleVictoryJS'),VisuMZ[_0x1268f2(0x6ce)][_0x1268f2(0xa06)][_0x1268f2(0x4ad)](this),this[_0x1268f2(0x2dd)](_0x1268f2(0xb46));},VisuMZ[_0x4b7b09(0x6ce)]['BattleManager_processAbort']=BattleManager[_0x4b7b09(0x882)],BattleManager['processAbort']=function(){const _0x2445f0=_0x4b7b09;this[_0x2445f0(0x4df)]=!![],VisuMZ[_0x2445f0(0x6ce)][_0x2445f0(0x947)][_0x2445f0(0x4ad)](this);},VisuMZ['BattleCore'][_0x4b7b09(0x966)]=BattleManager[_0x4b7b09(0xa09)],BattleManager[_0x4b7b09(0xa09)]=function(){const _0x419411=_0x4b7b09;this[_0x419411(0x4df)]=!![],this[_0x419411(0x2c2)](_0x419411(0x3f9)),VisuMZ['BattleCore'][_0x419411(0x966)]['call'](this),this[_0x419411(0x2dd)]('Defeat');},VisuMZ[_0x4b7b09(0x6ce)]['BattleManager_endBattle']=BattleManager[_0x4b7b09(0x595)],BattleManager[_0x4b7b09(0x595)]=function(_0x292f98){const _0x58c361=_0x4b7b09;this[_0x58c361(0x49c)]=!![],this[_0x58c361(0xb33)]=![],this[_0x58c361(0x2c2)]('PreEndBattleJS'),VisuMZ[_0x58c361(0x6ce)]['BattleManager_endBattle']['call'](this,_0x292f98),this['processBattleCoreJS'](_0x58c361(0x126));},VisuMZ[_0x4b7b09(0x6ce)]['BattleManager_startTurn']=BattleManager['startTurn'],BattleManager[_0x4b7b09(0x205)]=function(){const _0x4b0b4a=_0x4b7b09;if(this[_0x4b0b4a(0x2e4)]())this[_0x4b0b4a(0x2c2)]('PreStartTurnJS');VisuMZ[_0x4b0b4a(0x6ce)][_0x4b0b4a(0x327)][_0x4b0b4a(0x4ad)](this);if(this[_0x4b0b4a(0x2e4)]())this[_0x4b0b4a(0x2c2)]('PostStartTurnJS');},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x983)]=BattleManager[_0x4b7b09(0x347)],BattleManager[_0x4b7b09(0x347)]=function(){const _0x3e2699=_0x4b7b09,_0x178c0b=this['_subject']['currentAction'](),_0x388da0=this['_subject'];_0x178c0b&&_0x178c0b[_0x3e2699(0xb2a)]()===_0x388da0&&_0x178c0b[_0x3e2699(0x144)]('PreStartActionJS'),VisuMZ['BattleCore'][_0x3e2699(0x983)][_0x3e2699(0x4ad)](this),_0x178c0b&&_0x178c0b[_0x3e2699(0xb2a)]()===_0x388da0&&_0x178c0b[_0x3e2699(0x144)](_0x3e2699(0x83));},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x4cb)]=BattleManager[_0x4b7b09(0xb51)],BattleManager[_0x4b7b09(0xb51)]=function(){const _0x3a4f6b=_0x4b7b09,_0x374471=this[_0x3a4f6b(0x290)],_0x3f7e78=this[_0x3a4f6b(0xb2)];_0x374471&&_0x374471!==this[_0x3a4f6b(0x74b)]&&_0x374471[_0x3a4f6b(0xb2a)]()===_0x3f7e78&&_0x374471[_0x3a4f6b(0x144)](_0x3a4f6b(0xc7));if(this['_subject'])_0x3a4f6b(0x4b8)!==_0x3a4f6b(0x4b8)?this[_0x3a4f6b(0xa2e)]()?_0x526df3['prototype'][_0x3a4f6b(0x387)][_0x3a4f6b(0x4ad)](this):this[_0x3a4f6b(0x790)]=0x8:VisuMZ['BattleCore'][_0x3a4f6b(0x4cb)][_0x3a4f6b(0x4ad)](this);else{if(_0x3a4f6b(0x3fc)!==_0x3a4f6b(0xb82))this['_phase']=_0x3a4f6b(0xabd);else{const _0x1b1d89=_0x5148ed[_0x3a4f6b(0xaf1)];if(_0x1b1d89[_0x3a4f6b(0x2c1)](_0x4837a1[_0x3a4f6b(0x6ce)][_0x3a4f6b(0xa7b)][_0x4c1236])){const _0x53ed11=_0x2e81e9['$1'],_0x31a733='\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20'[_0x3a4f6b(0xace)](_0x53ed11),_0x5d359b=_0x20de68[_0x3a4f6b(0x6ce)]['createKeyJS'](_0x552523,_0x4133e5);_0x525ee9['BattleCore']['JS'][_0x5d359b]=new _0x35a717(_0x31a733);}}}_0x374471&&_0x374471!==this[_0x3a4f6b(0x74b)]&&_0x374471[_0x3a4f6b(0xb2a)]()===_0x3f7e78&&_0x374471[_0x3a4f6b(0x144)](_0x3a4f6b(0x9b1)),this[_0x3a4f6b(0x7ca)](this[_0x3a4f6b(0xa87)]()),this[_0x3a4f6b(0x74b)]=this[_0x3a4f6b(0x290)];},BattleManager['refreshBattlerMotions']=function(_0x921b43){const _0x29393e=_0x4b7b09;for(const _0x332a5b of _0x921b43){if(!_0x332a5b)continue;if(!_0x332a5b[_0x29393e(0xe0)]())continue;_0x332a5b[_0x29393e(0xe0)]()[_0x29393e(0x7ac)]();}},BattleManager[_0x4b7b09(0xd6)]=function(){const _0x30bc08=_0x4b7b09;!this[_0x30bc08(0xa2d)][_0x30bc08(0xa27)]()&&this[_0x30bc08(0xb51)]();},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x3f3)]=function(){const _0x1a135f=_0x4b7b09;this[_0x1a135f(0x85c)]();if(Imported[_0x1a135f(0x29d)]){if(_0x1a135f(0x170)!==_0x1a135f(0x585)){const _0x3cf698=VisuMZ[_0x1a135f(0x791)]['Settings'][_0x1a135f(0x898)];_0x3cf698&&_0x3cf698[_0x1a135f(0x497)]===![]&&this[_0x1a135f(0x3a7)](0x1);}else{const _0x403db1=this[_0x1a135f(0x37d)],_0x46428e=_0x403db1[_0x1a135f(0x66b)];_0x527f8b=_0x58aee1||0xffffffff;let _0x57f272=_0x3c3976,_0x159def=_0x442337[_0x1a135f(0x2ca)](_0x1a8d0a+0x18/0x2+this[_0x1a135f(0x109)]*0.35);_0x37604d===_0x1a135f(0x5a6)&&(_0x57f272+=_0x33ba39/0x2),_0x247d64===_0x1a135f(0x2f1)&&(_0x57f272+=_0x182b57),_0x403db1[_0x1a135f(0x8c6)](),_0x403db1['font']=this[_0x1a135f(0xa5a)](),_0x403db1[_0x1a135f(0x830)]=_0x1d0dea,_0x403db1[_0x1a135f(0xad4)]='alphabetic',_0x403db1[_0x1a135f(0x66b)]=0x1,this['_drawTextOutline'](_0x240457,_0x57f272,_0x159def,_0x62605a),_0x403db1['globalAlpha']=_0x46428e,this[_0x1a135f(0xa65)](_0x3d0e3e,_0x57f272,_0x159def,_0x5fc100),_0x403db1[_0x1a135f(0x9cb)](),this[_0x1a135f(0x536)][_0x1a135f(0xce)]();}}else _0x1a135f(0x2dc)===_0x1a135f(0x2dc)?this[_0x1a135f(0x3a7)](0x1):this[_0x1a135f(0x6d0)]();this[_0x1a135f(0xf8)]();},BattleManager['makeEscapeRatio']=function(){const _0x57c310=_0x4b7b09;this[_0x57c310(0xb86)]=VisuMZ[_0x57c310(0x6ce)][_0x57c310(0xb41)][_0x57c310(0xeb)][_0x57c310(0x4ee)][_0x57c310(0x4ad)](this);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xb81)]=BattleManager[_0x4b7b09(0x96b)],BattleManager[_0x4b7b09(0x96b)]=function(){const _0x1d969a=_0x4b7b09;this[_0x1d969a(0x2c2)](_0x1d969a(0x216)),BattleManager[_0x1d969a(0xa5b)][_0x1d969a(0x625)](),VisuMZ[_0x1d969a(0x6ce)]['BattleManager_onEscapeSuccess'][_0x1d969a(0x4ad)](this),this[_0x1d969a(0x2dd)](_0x1d969a(0x877));},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x394)]=BattleManager[_0x4b7b09(0x388)],BattleManager[_0x4b7b09(0x388)]=function(){const _0x1f5c1a=_0x4b7b09;this[_0x1f5c1a(0x2c2)](_0x1f5c1a(0x68));const _0x4883fd=this[_0x1f5c1a(0xb86)];VisuMZ[_0x1f5c1a(0x6ce)][_0x1f5c1a(0x394)][_0x1f5c1a(0x4ad)](this),this[_0x1f5c1a(0xb86)]=_0x4883fd+VisuMZ[_0x1f5c1a(0x6ce)][_0x1f5c1a(0xb41)][_0x1f5c1a(0xeb)]['CalcEscapeRaiseJS']['call'](this),this[_0x1f5c1a(0x2dd)](_0x1f5c1a(0x6b0));},BattleManager[_0x4b7b09(0x2d8)]=function(){const _0x28e04a=_0x4b7b09;let _0x4c4390=![];if(this[_0x28e04a(0xb38)]())for(const _0x266e0f of $gameTroop['enemyNames']()){if('DMiOi'!=='DYbUr')this['_logWindow'][_0x28e04a(0x410)](_0x28e04a(0x8a9),TextManager[_0x28e04a(0x6ea)]['format'](_0x266e0f)),this[_0x28e04a(0xa2d)]['push']('wait'),_0x4c4390=!![];else{if([0x6c,0x198][_0x28e04a(0x382)](_0x2fc783[_0x28e04a(0x936)])){const _0x1932e2=_0x86f4b0[_0x28e04a(0x671)][0x0];if(_0x1932e2[_0x28e04a(0x2c1)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}}if(this[_0x28e04a(0x8f9)])_0x28e04a(0x8b6)==='hvWsr'?(this[_0x28e04a(0xa2d)]['push'](_0x28e04a(0x8a9),TextManager[_0x28e04a(0x9c5)]['format']($gameParty[_0x28e04a(0x639)]())),this[_0x28e04a(0xa2d)][_0x28e04a(0x410)](_0x28e04a(0x5b0))):(_0x27f060[_0x28e04a(0x6ce)][_0x28e04a(0x53c)][_0x28e04a(0x4ad)](this),_0x139751[_0x28e04a(0x18e)]()&&this['requestMotion'](_0x28e04a(0x5c2)));else this[_0x28e04a(0x929)]&&(this[_0x28e04a(0xa2d)]['push'](_0x28e04a(0x8a9),TextManager[_0x28e04a(0x1cf)]['format']($gameParty[_0x28e04a(0x639)]())),this[_0x28e04a(0xa2d)][_0x28e04a(0x410)](_0x28e04a(0x5b0)));_0x4c4390&&(_0x28e04a(0x725)===_0x28e04a(0x4b1)?(this[_0x28e04a(0xb37)]=this['_targetGrowX'],this[_0x28e04a(0x68a)]=this['_targetGrowY']):(this['_logWindow'][_0x28e04a(0x410)](_0x28e04a(0x5b0)),this[_0x28e04a(0xa2d)][_0x28e04a(0x410)]('clear'))),this[_0x28e04a(0x54c)]()&&this[_0x28e04a(0x626)]()&&(_0x28e04a(0x1ac)===_0x28e04a(0x1ac)?this['_tpbNeedsPartyCommand']=![]:_0x370485=_0x63a4a5[this[_0x28e04a(0x329)][_0x4e328e][_0x28e04a(0x76a)]]);},BattleManager[_0x4b7b09(0xb38)]=function(){const _0x561fc3=_0x4b7b09;if(BattleManager[_0x561fc3(0xb33)])return![];return VisuMZ['BattleCore']['Settings'][_0x561fc3(0x97d)][_0x561fc3(0x412)];},VisuMZ['BattleCore'][_0x4b7b09(0x729)]=BattleManager[_0x4b7b09(0xa5c)],BattleManager[_0x4b7b09(0xa5c)]=function(){const _0x449de1=_0x4b7b09;VisuMZ['BattleCore'][_0x449de1(0x729)][_0x449de1(0x4ad)](this),this[_0x449de1(0x363)]()&&this[_0x449de1(0x626)]()&&!this['_surprise']&&$gameParty['canInput']()&&(_0x449de1(0x2d0)===_0x449de1(0x604)?(this[_0x449de1(0x566)]=_0x128837,this[_0x449de1(0x91b)]={}):this['selectNextCommand']());},BattleManager[_0x4b7b09(0x626)]=function(){const _0x252cc3=_0x4b7b09;return VisuMZ[_0x252cc3(0x6ce)][_0x252cc3(0xb41)][_0x252cc3(0xa9)]['SkipPartyCmd'];},BattleManager[_0x4b7b09(0x3f7)]=function(){const _0x1eebef=_0x4b7b09;this[_0x1eebef(0x2fa)]()&&this[_0x1eebef(0xa95)]();},VisuMZ[_0x4b7b09(0x6ce)]['Scene_Battle_startActorCommandSelection']=Scene_Battle['prototype'][_0x4b7b09(0x339)],Scene_Battle['prototype']['startActorCommandSelection']=function(){const _0x19e69b=_0x4b7b09;VisuMZ[_0x19e69b(0x6ce)]['Scene_Battle_startActorCommandSelection'][_0x19e69b(0x4ad)](this);if(BattleManager[_0x19e69b(0x54c)]()&&BattleManager['_tpbNeedsPartyCommand']){if(_0x19e69b(0x2cc)!==_0x19e69b(0x2cc))return this[_0x19e69b(0x6e3)]()?_0x438c40[_0x19e69b(0x6ce)][_0x19e69b(0x60b)][_0x19e69b(0x4ad)](this):0x0;else BattleManager[_0x19e69b(0xa8b)]=![],this[_0x19e69b(0x584)]();}},BattleManager[_0x4b7b09(0x4cf)]=function(_0x4c0bf4,_0x4ceeed){const _0x3c1c0d=_0x4b7b09;this[_0x3c1c0d(0x290)]['_reflectionTarget']=_0x4ceeed,this[_0x3c1c0d(0xa2d)][_0x3c1c0d(0x58d)](_0x4ceeed),this[_0x3c1c0d(0xa2d)][_0x3c1c0d(0x90f)](_0x4c0bf4,this[_0x3c1c0d(0x290)]),this['_action'][_0x3c1c0d(0x939)](_0x4c0bf4),this[_0x3c1c0d(0xa2d)]['displayActionResults'](_0x4c0bf4,_0x4c0bf4);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x810)]=BattleManager[_0x4b7b09(0x4f4)],BattleManager[_0x4b7b09(0x4f4)]=function(){const _0x3cba85=_0x4b7b09;VisuMZ[_0x3cba85(0x6ce)]['BattleManager_makeActionOrders'][_0x3cba85(0x4ad)](this),this[_0x3cba85(0x234)]=this['_actionBattlers']['filter'](_0x1acec0=>_0x1acec0&&_0x1acec0[_0x3cba85(0x990)]());},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x9e2)]=BattleManager[_0x4b7b09(0x6bd)],BattleManager[_0x4b7b09(0x6bd)]=function(_0x47e52c){const _0x3e529d=_0x4b7b09;if(this['_phase']==='custom')'FfsuM'===_0x3e529d(0x334)?this['updateCustomActionSequence']():_0x31a924['_scene'][_0x3e529d(0xaa1)]();else{if(this[_0x3e529d(0x1f0)]===_0x3e529d(0x5ab))this[_0x3e529d(0x943)]();else{if(_0x3e529d(0x636)!==_0x3e529d(0x997))VisuMZ[_0x3e529d(0x6ce)][_0x3e529d(0x9e2)]['call'](this,_0x47e52c);else return 0x0;}}},BattleManager['prepareCustomActionSequence']=function(){const _0x2a08c9=_0x4b7b09;this[_0x2a08c9(0x634)]=this['_targets'][_0x2a08c9(0x8ea)](0x0),this[_0x2a08c9(0x233)]=0x0,this[_0x2a08c9(0x28f)]=this[_0x2a08c9(0x634)][0x0]||null,this[_0x2a08c9(0x1f0)]='custom';},BattleManager[_0x4b7b09(0x670)]=function(){const _0x5bc3f0=_0x4b7b09;!this[_0x5bc3f0(0xae5)]()&&!this[_0x5bc3f0(0xa2d)]['isBusy']()&&(_0x5bc3f0(0x65d)!==_0x5bc3f0(0xaa8)?this[_0x5bc3f0(0x1f0)]='action':delete _0x551155[_0x5bc3f0(0xa05)][_0x5bc3f0(0xb57)]);},BattleManager[_0x4b7b09(0x5ab)]=function(_0x57f997){const _0x24716a=_0x4b7b09;this['_actionBattlers'][_0x24716a(0x76b)](_0x57f997);if(_0x57f997===this[_0x24716a(0xb2)])return;const _0x5cad91=JsonEx[_0x24716a(0x9fb)](_0x57f997[_0x24716a(0x335)]());this[_0x24716a(0x313)][_0x24716a(0x410)]([_0x57f997,_0x5cad91]);},BattleManager[_0x4b7b09(0xa62)]=function(){},BattleManager[_0x4b7b09(0x427)]=function(){const _0x30ff7a=_0x4b7b09;if(this[_0x30ff7a(0x54c)]())this[_0x30ff7a(0x1f0)]='turn';else this[_0x30ff7a(0x313)]['length']>0x0?this[_0x30ff7a(0x1f0)]=_0x30ff7a(0xabd):_0x30ff7a(0x7df)!==_0x30ff7a(0x7df)?this[_0x30ff7a(0x63e)](_0x30ff7a(0x5a0)):this[_0x30ff7a(0xa5c)]();},BattleManager[_0x4b7b09(0x7bc)]=function(){const _0x2be75c=_0x4b7b09,_0x2242dd=this[_0x2be75c(0xb2)];if(_0x2242dd&&this[_0x2be75c(0x54c)]()){if('FewZG'!==_0x2be75c(0x4db)){if(!this[_0x2be75c(0x6a7)][_0x2be75c(0x857)]())return;if(_0x1a0a12[_0x2be75c(0xade)]())return;const _0xde47b1=_0xe1c641['BattleCore'][_0x2be75c(0xb41)][_0x2be75c(0xb75)],_0x127d09=new _0x49df71();_0x127d09[_0x2be75c(0x5c3)]=_0xde47b1['PopupDuration'],this[_0x2be75c(0x656)](_0x127d09),_0x127d09[_0x2be75c(0x207)](_0x291c49,_0x1c01a7,_0x2fe857),this[_0x2be75c(0xa5d)](_0x127d09);}else _0x2242dd['setActionState']('undecided');}for(;;){if(_0x2be75c(0x9ab)===_0x2be75c(0x9ab)){const _0x17a83e=this[_0x2be75c(0x4a0)]();if(!_0x17a83e)return'bNIbv'==='bNIbv'?null:_0x13c653[_0x2be75c(0x2e0)]()[_0x2be75c(0x382)](this[_0x2be75c(0x62b)]);if(_0x17a83e['isBattleMember']()&&_0x17a83e['isAlive']()){if('SKqdw'===_0x2be75c(0x7f9))this[_0x2be75c(0x2fa)]()&&this['selectNextCommand']();else return _0x17a83e;}}else return this[_0x2be75c(0x822)]()[_0x2be75c(0x639)];}},BattleManager[_0x4b7b09(0x4a0)]=function(){const _0xb8ba33=_0x4b7b09;if(this[_0xb8ba33(0x313)][_0xb8ba33(0x8db)]>0x0){const _0x42ba6f=this['_forcedBattlers']['shift'](),_0x192a3f=_0x42ba6f[0x0];return _0x192a3f['_actions']=_0x192a3f[_0xb8ba33(0x7c1)]||[],_0x192a3f[_0xb8ba33(0x7c1)][0x0]=_0x42ba6f[0x1],_0x192a3f;}else{if(_0xb8ba33(0x728)!==_0xb8ba33(0x9f8))return this[_0xb8ba33(0x234)]['shift']();else!_0x488837[_0xb8ba33(0x41f)]()[_0xb8ba33(0x382)](this[_0xb8ba33(0x9aa)])&&(this[_0xb8ba33(0x9aa)]=null);}},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x752)]=Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x5ab)],Game_Battler['prototype'][_0x4b7b09(0x5ab)]=function(_0x33980d,_0xe3b330){const _0x27d992=_0x4b7b09;VisuMZ['BattleCore'][_0x27d992(0x752)][_0x27d992(0x4ad)](this,_0x33980d,_0xe3b330),this[_0x27d992(0x7c1)][this['_actions'][_0x27d992(0x8db)]-0x1][_0x27d992(0x498)]=!![];},Game_Interpreter[_0x4b7b09(0x4d2)][_0x4b7b09(0xaca)]=function(_0x59648f){const _0x2bb3eb=_0x4b7b09;return this[_0x2bb3eb(0x864)](_0x59648f[0x0],_0x59648f[0x1],_0xcabbd=>{const _0x21c607=_0x2bb3eb;!_0xcabbd[_0x21c607(0x449)]()&&('eokGj'!==_0x21c607(0x64f)?this['_mainSprite']['bitmap']['smooth']=this[_0x21c607(0x6a7)][_0x21c607(0x46f)]():(_0xcabbd[_0x21c607(0x5ab)](_0x59648f[0x2],_0x59648f[0x3]),BattleManager[_0x21c607(0x5ab)](_0xcabbd)));}),!![];},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xb7a)]=Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x3bc)],Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x3bc)]=function(){const _0x76c2e3=_0x4b7b09;VisuMZ[_0x76c2e3(0x6ce)][_0x76c2e3(0xb7a)][_0x76c2e3(0x4ad)](this),this[_0x76c2e3(0x7c1)][_0x76c2e3(0x8db)]<=0x0&&(this[_0x76c2e3(0x66)]=Number[_0x76c2e3(0x2bd)]);},BattleManager[_0x4b7b09(0xade)]=function(){const _0x21f46b=_0x4b7b09;if(VisuMZ[_0x21f46b(0x6ce)]['Settings']['Damage'][_0x21f46b(0x9fa)]??!![])return![];return SceneManager[_0x21f46b(0x18e)]()&&this['_endingBattle'];},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x718)]=BattleManager[_0x4b7b09(0xa95)],BattleManager['selectNextCommand']=function(){const _0x2b6a20=_0x4b7b09;this[_0x2b6a20(0x54c)]()?this[_0x2b6a20(0x1a6)]():'rlRrl'===_0x2b6a20(0x48e)?_0x2a92a1['wtypeId']=_0x10ed62['getWtypeIdWithName'](_0x57c751['$1']):VisuMZ[_0x2b6a20(0x6ce)][_0x2b6a20(0x718)][_0x2b6a20(0x4ad)](this);},BattleManager[_0x4b7b09(0x1a6)]=function(){const _0x23fe3c=_0x4b7b09;if(this[_0x23fe3c(0x6c7)]){if(_0x23fe3c(0x7e4)===_0x23fe3c(0xb49)){if(this['x']===0x0)this['x']=_0x4ff98d[_0x23fe3c(0x2ca)](_0x456e80[_0x23fe3c(0x839)]/0x2);if(this['y']===0x0)this['y']=_0x5f2f3f[_0x23fe3c(0x2ca)](_0x42ec73[_0x23fe3c(0xb65)]/0x2);}else{if(this[_0x23fe3c(0x6c7)][_0x23fe3c(0xa95)]())return;this[_0x23fe3c(0x95d)](),this[_0x23fe3c(0xae0)]();if(!this[_0x23fe3c(0xb2)]&&!this[_0x23fe3c(0x6c7)]){if('sxpnJ'!==_0x23fe3c(0x450))SceneManager[_0x23fe3c(0x5ae)][_0x23fe3c(0xaa1)]();else{if(_0x5a5239['note']['match'](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x1e36c7=_0x2a577(_0x3f5c5c['$1'])[_0x23fe3c(0x7c9)](/[\r\n]+/)[_0x23fe3c(0x76b)](''),_0xf2fbe6=this['processRandomizedData'](_0x1e36c7);_0xd92a9d=this[_0x23fe3c(0x2e8)](_0xf2fbe6)||_0xd09ab2,_0x521e26=_0x1f4f5b[_0x23fe3c(0x348)](_0x5d4019);}}}}}else!this[_0x23fe3c(0xb2)]&&this[_0x23fe3c(0x802)]();},BattleManager[_0x4b7b09(0xae0)]=function(){const _0x3cdfde=_0x4b7b09;if(!this[_0x3cdfde(0x2fa)]()||this[_0x3cdfde(0x78f)]()){if('YkKdQ'===_0x3cdfde(0xa42)){if(this[_0x3cdfde(0x9aa)]){if(_0x3cdfde(0x7fd)!==_0x3cdfde(0xa6))!$gameParty[_0x3cdfde(0x41f)]()[_0x3cdfde(0x382)](this[_0x3cdfde(0x9aa)])&&(_0x3cdfde(0xc1)!==_0x3cdfde(0x41d)?this[_0x3cdfde(0x9aa)]=null:_0x53dd41[_0x434715]===0x1&&this['_activeWeaponSlot']!==_0x3e270a&&(_0x4d76a4[_0x3a24d5]=null));else{if(this['constructor']===_0x40ddb4)return;this['updateGrow'](),this[_0x3cdfde(0x475)]();}}!this[_0x3cdfde(0x9aa)]?(this[_0x3cdfde(0x8e1)](),this[_0x3cdfde(0x6c7)]=null,this[_0x3cdfde(0x366)]=![]):this[_0x3cdfde(0xa85)]();}else _0x308514[_0x3cdfde(0x5ca)]([_0x5455c5]);}},BattleManager[_0x4b7b09(0xa85)]=function(){const _0x54636d=_0x4b7b09;!$gameParty[_0x54636d(0x41f)]()[_0x54636d(0x382)](this['_tpbSceneChangeCacheActor'])&&(this[_0x54636d(0x9aa)]=null),this[_0x54636d(0x9aa)]?(this[_0x54636d(0x6c7)]=this[_0x54636d(0x9aa)],this['_currentActor'][_0x54636d(0x664)]=_0x54636d(0x808),this['_inputting']=!![],this[_0x54636d(0x9aa)]=null):(this['cancelActorInput'](),this[_0x54636d(0x6c7)]=null,this['_inputting']=![]);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x1f5)]=BattleManager[_0x4b7b09(0x92e)],BattleManager[_0x4b7b09(0x92e)]=function(){const _0x464b2d=_0x4b7b09;return this[_0x464b2d(0x1f0)]==='custom'?this['battleCoreTpbMainPhase']():VisuMZ[_0x464b2d(0x6ce)]['BattleManager_isTpbMainPhase']['call'](this);},BattleManager['battleCoreTpbMainPhase']=function(){const _0x382d7b=_0x4b7b09;return this[_0x382d7b(0x223)]();},VisuMZ['BattleCore']['BattleManager_cancelActorInput']=BattleManager[_0x4b7b09(0x8e1)],BattleManager[_0x4b7b09(0x8e1)]=function(){const _0x4f6c0d=_0x4b7b09;this['isTpb']()&&this[_0x4f6c0d(0x1f0)]==='battleEnd'&&(_0x4f6c0d(0x364)===_0x4f6c0d(0x842)?(this[_0x4f6c0d(0x8e1)](),this[_0x4f6c0d(0x6c7)]=null,this[_0x4f6c0d(0x366)]=![]):this['_currentActor']=null),VisuMZ['BattleCore']['BattleManager_cancelActorInput'][_0x4f6c0d(0x4ad)](this);},VisuMZ[_0x4b7b09(0x6ce)]['BattleManager_inputtingAction']=BattleManager['inputtingAction'],BattleManager[_0x4b7b09(0x6df)]=function(){const _0x715105=_0x4b7b09,_0xee2b75=this[_0x715105(0x6c7)];if(_0xee2b75&&!_0xee2b75[_0x715105(0x6df)]()){if(_0x715105(0x1c7)!=='qEAnP'){const _0x27c9fb=_0xee2b75[_0x715105(0x175)];_0xee2b75[_0x715105(0x7c1)][_0x27c9fb]=new Game_Action(_0xee2b75);}else return _0x457cc7(_0x1ae343['$2']);}return VisuMZ[_0x715105(0x6ce)]['BattleManager_inputtingAction'][_0x715105(0x4ad)](this);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x267)]=BattleManager[_0x4b7b09(0xa8f)],BattleManager[_0x4b7b09(0xa8f)]=function(_0x22c54a){const _0x21b596=_0x4b7b09;if(this[_0x21b596(0x290)][_0x21b596(0x673)]())return![];return VisuMZ[_0x21b596(0x6ce)][_0x21b596(0x267)][_0x21b596(0x4ad)](this,_0x22c54a);},SceneManager[_0x4b7b09(0x18e)]=function(){const _0x3110de=_0x4b7b09;return this[_0x3110de(0x5ae)]&&this[_0x3110de(0x5ae)]['constructor']===Scene_Battle;},SceneManager[_0x4b7b09(0x597)]=function(){const _0x272460=_0x4b7b09;return Spriteset_Battle[_0x272460(0x4d2)][_0x272460(0x76)]();},SceneManager[_0x4b7b09(0x8f7)]=function(){const _0x444d17=_0x4b7b09;if(SceneManager[_0x444d17(0xf1)](Scene_Options))return!![];return![];},SceneManager['isNextSceneBattleTransitionable']=function(){const _0x32ccd5=_0x4b7b09;if(SceneManager[_0x32ccd5(0x210)](Scene_Options))return!![];return![];},SceneManager['checkSceneBattleTransitionable']=function(_0x5bae69){const _0x328ff3=_0x4b7b09;if(!SceneManager[_0x328ff3(0x18e)]())return!![];const _0xffeda3=[_0x328ff3(0x5c0),_0x328ff3(0xb88)];return _0xffeda3['includes'](_0x5bae69[_0x328ff3(0x639)]);},VisuMZ[_0x4b7b09(0x6ce)]['SceneManager_push']=SceneManager['push'],SceneManager[_0x4b7b09(0x410)]=function(_0x44b940){const _0x566dc1=_0x4b7b09;if(!SceneManager[_0x566dc1(0x850)](_0x44b940)){if(_0x566dc1(0x16b)!==_0x566dc1(0x16b))this[_0x566dc1(0x1b4)][_0x566dc1(0x680)]['smooth']!==this[_0x566dc1(0x6a7)][_0x566dc1(0x46f)]()&&(this['_mainSprite'][_0x566dc1(0x680)]['smooth']=this[_0x566dc1(0x6a7)][_0x566dc1(0x46f)]());else return this[_0x566dc1(0x318)](_0x44b940);}VisuMZ[_0x566dc1(0x6ce)][_0x566dc1(0x5a2)][_0x566dc1(0x4ad)](this,_0x44b940);},SceneManager[_0x4b7b09(0x318)]=function(_0x5d5a31){const _0x464682=_0x4b7b09;if(!$gameTemp['isPlaytest']())return;if(this[_0x464682(0x510)])return;this[_0x464682(0x510)]=!![];let _0x3d82e7='';_0x3d82e7+=_0x464682(0x43e),_0x3d82e7+=_0x464682(0x58c)[_0x464682(0xace)](_0x5d5a31['name']),alert(_0x3d82e7);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x3cc)]=Game_Temp[_0x4b7b09(0x4d2)][_0x4b7b09(0x7bb)],Game_Temp[_0x4b7b09(0x4d2)][_0x4b7b09(0x7bb)]=function(_0x5de2e8,_0x4c5ace,_0x1a95a3){const _0x7f734a=_0x4b7b09;_0x5de2e8=_0x5de2e8['filter']((_0x38966e,_0x22f19b,_0x164612)=>_0x164612[_0x7f734a(0x853)](_0x38966e)===_0x22f19b),SceneManager[_0x7f734a(0x18e)]()&&SceneManager['isBattleFlipped']()&&(_0x1a95a3=!_0x1a95a3),VisuMZ[_0x7f734a(0x6ce)][_0x7f734a(0x3cc)]['call'](this,_0x5de2e8,_0x4c5ace,_0x1a95a3),SceneManager[_0x7f734a(0x18e)]()&&BattleManager[_0x7f734a(0xa5b)][_0x7f734a(0x9f5)]();},Game_Temp['prototype'][_0x4b7b09(0x23e)]=function(_0x2c120e){const _0x3655ee=_0x4b7b09;this[_0x3655ee(0x504)]=_0x2c120e;},Game_Temp['prototype']['getLastPluginCommandInterpreter']=function(){const _0xc9bb19=_0x4b7b09;return this[_0xc9bb19(0x504)];},Game_Temp['prototype']['clearForcedGameTroopSettingsBattleCore']=function(){const _0x19b12c=_0x4b7b09;this[_0x19b12c(0x50a)]=undefined;},Game_Temp[_0x4b7b09(0x4d2)]['applyForcedGameTroopSettingsBattleCore']=function(_0x36abf9){const _0x181599=_0x4b7b09;if($gameMap&&$dataMap&&$dataMap[_0x181599(0xaf1)]){if(_0x181599(0x758)!==_0x181599(0x758))return _0x41fab4[_0x181599(0x223)]();else this[_0x181599(0x9d1)]($dataMap[_0x181599(0xaf1)]);}const _0xe26362=$dataTroops[_0x36abf9];if(_0xe26362){if(_0x181599(0x93d)!=='zQSTI'){let _0x639809=DataManager[_0x181599(0x854)](_0xe26362['id']);this[_0x181599(0x9d1)](_0x639809);}else _0x1cf28e&&_0x327fbb[_0x181599(0xce)]();}},Game_Temp[_0x4b7b09(0x4d2)][_0x4b7b09(0x9d1)]=function(_0x58b431){const _0x591af2=_0x4b7b09;if(!_0x58b431)return;if(_0x58b431['match'](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x5f36b7=String(RegExp['$1']);if(_0x5f36b7['match'](/DEFAULT/i))this[_0x591af2(0x50a)]=_0x591af2(0x127);else{if(_0x5f36b7['match'](/LIST/i))this[_0x591af2(0x50a)]=_0x591af2(0x577);else{if(_0x5f36b7[_0x591af2(0x2c1)](/XP/i))this[_0x591af2(0x50a)]='xp';else{if(_0x5f36b7['match'](/PORTRAIT/i)){if(_0x591af2(0x4e0)===_0x591af2(0xdb)){const _0x57d750=_0x9a57b0[_0x591af2(0x609)](_0x4aa0cb['x'],_0x2406d4['y']);if(this['_regionBattleback1']&&this['_regionBattleback2'][_0x57d750])return this['_regionBattleback2'][_0x57d750];}else this[_0x591af2(0x50a)]=_0x591af2(0xb3e);}else{if(_0x5f36b7[_0x591af2(0x2c1)](/BORDER/i)){if(_0x591af2(0x74c)==='rSZVE')this[_0x591af2(0x50a)]=_0x591af2(0xad5);else{if(!_0x3564f4[_0x591af2(0x18e)]())return;if(!_0x2550ec[_0x591af2(0x83a)])return;const _0x4348a8=_0x33154b[_0x591af2(0x290)];if(!_0x4348a8)return;_0x4348a8[_0x591af2(0xaac)]();}}else{if(_0x5f36b7[_0x591af2(0x2c1)](/(?:SIDEVIEW UI|SIDEVIEW)/i)){if(Imported[_0x591af2(0x57a)])this[_0x591af2(0x50a)]=_0x591af2(0x369);else{if(_0x591af2(0x448)!==_0x591af2(0x448))return _0x4261c8['battler']()['_baseX']-_0x49733c[_0x591af2(0xe0)]()[_0x591af2(0x226)];else this[_0x591af2(0x50a)]=_0x591af2(0x127);}}else{if(_0x5f36b7[_0x591af2(0x2c1)](/(?:FRONTVIEW UI|FRONTVIEW)/i)){if(Imported[_0x591af2(0x6a8)]){if(_0x591af2(0x6c2)===_0x591af2(0x973)){let _0x151fd2=0x1;return _0x151fd2*=this[_0x591af2(0x22b)],_0x151fd2*=this['_growX'],_0x151fd2;}else this['_forcedBattleLayout']=_0x591af2(0x4bf);}else this[_0x591af2(0x50a)]=_0x591af2(0x127);}}}}}}}}},VisuMZ['BattleCore'][_0x4b7b09(0x2ad)]=Game_System[_0x4b7b09(0x4d2)][_0x4b7b09(0x827)],Game_System[_0x4b7b09(0x4d2)][_0x4b7b09(0x827)]=function(){const _0x3f704f=_0x4b7b09;VisuMZ[_0x3f704f(0x6ce)][_0x3f704f(0x2ad)]['call'](this),this['initBattleCore']();},Game_System['prototype'][_0x4b7b09(0x6f4)]=function(){const _0x103862=_0x4b7b09;this[_0x103862(0x486)]=this[_0x103862(0x486)]||[];},Game_System['prototype'][_0x4b7b09(0x2e0)]=function(){const _0x252c9b=_0x4b7b09;if(this[_0x252c9b(0x486)]===undefined)this[_0x252c9b(0x6f4)]();return this[_0x252c9b(0x486)];},Game_System[_0x4b7b09(0x4d2)]['registerDefeatedEnemy']=function(_0x1de857){const _0x5c36d8=_0x4b7b09;if(this[_0x5c36d8(0x486)]===undefined)this[_0x5c36d8(0x6f4)]();if(!_0x1de857)return;if(this['_defeatedEnemies']['includes'](_0x1de857))return;this['_defeatedEnemies']['push'](_0x1de857),this[_0x5c36d8(0x486)]['sort']((_0x47ac94,_0x1f8019)=>_0x47ac94-_0x1f8019);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x892)]=Game_BattlerBase[_0x4b7b09(0x4d2)]['addNewState'],Game_BattlerBase[_0x4b7b09(0x4d2)][_0x4b7b09(0x131)]=function(_0x576685){const _0x227f26=_0x4b7b09,_0x447cb0=this['isAlive'](),_0x1301dc=this[_0x227f26(0xb58)]();VisuMZ[_0x227f26(0x6ce)][_0x227f26(0x892)][_0x227f26(0x4ad)](this,_0x576685);if(this[_0x227f26(0xfc)]()&&_0x447cb0&&this[_0x227f26(0x44c)]()){if(_0x227f26(0x760)==='wKeIM')this[_0x227f26(0x123)]=!this[_0x227f26(0xf4)](),$gameSystem[_0x227f26(0xb5c)](this['enemyId']());else{if(!_0x192a98)return;if(!this[_0x227f26(0xa78)](_0x51b0ae))return;const _0x177bca=this[_0x227f26(0x72)](),_0x352998=_0x122a93['battleCommandName'](_0x4692e5),_0x54c027=_0xfc07c9[_0x227f26(0x37b)](_0x4ca226),_0x56a32e=_0x177bca===_0x227f26(0x7c2)?_0x352998:_0x227f26(0x38e)[_0x227f26(0xace)](_0x54c027,_0x352998),_0x42134b=this[_0x227f26(0x7cb)][_0x227f26(0x508)](_0x5df674);this[_0x227f26(0x7d7)](_0x56a32e,_0x227f26(0x16c),_0x42134b,_0x4a4ab6['id']);}}SceneManager[_0x227f26(0x18e)]()&&_0x1301dc!==this[_0x227f26(0xb58)]()&&(this[_0x227f26(0xe0)]()&&(_0x227f26(0x9b5)!==_0x227f26(0x159)?this['battler']()['refreshMotion']():this[_0x227f26(0x795)](_0xd70451)));},Game_Enemy['prototype']['hasBeenDefeatedBefore']=function(){const _0x4e6e73=_0x4b7b09;return $gameSystem[_0x4e6e73(0x2e0)]()['includes'](this[_0x4e6e73(0x62b)]);},VisuMZ[_0x4b7b09(0x6ce)]['Game_BattlerBase_eraseState']=Game_BattlerBase[_0x4b7b09(0x4d2)][_0x4b7b09(0x5b9)],Game_BattlerBase[_0x4b7b09(0x4d2)][_0x4b7b09(0x5b9)]=function(_0x2301af){const _0x3348d3=_0x4b7b09;VisuMZ[_0x3348d3(0x6ce)][_0x3348d3(0x4fd)]['call'](this,_0x2301af);this[_0x3348d3(0xfc)]()&&_0x2301af===this[_0x3348d3(0x7fa)]()&&this[_0x3348d3(0x23d)]()&&(this['_visualHpGauge_JustDied']=![]);if(!this[_0x3348d3(0x576)]&&!this[_0x3348d3(0x820)]&&SceneManager[_0x3348d3(0x18e)]()){if('VrpEo'!==_0x3348d3(0x248))this[_0x3348d3(0x16e)]();else return!_0x132def['isSideView']()&&this[_0x3348d3(0x6a7)]&&this['_battler']['isActor']();}},VisuMZ['BattleCore'][_0x4b7b09(0xacf)]=Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x945)],Game_Action[_0x4b7b09(0x4d2)]['clear']=function(){const _0x4cfe77=_0x4b7b09;VisuMZ[_0x4cfe77(0x6ce)]['Game_Action_clear'][_0x4cfe77(0x4ad)](this),this[_0x4cfe77(0xa5)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x4cfe77(0x1fa)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x4cfe77(0x2c7)]=_0x4cfe77(0x127);},Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x158)]=function(_0x510c89,_0x624ac9){const _0x298c1d=_0x4b7b09;return VisuMZ[_0x298c1d(0x6ce)]['Settings'][_0x298c1d(0xb75)][_0x298c1d(0x331)][_0x298c1d(0x4ad)](this,_0x510c89,_0x624ac9);},Game_Action[_0x4b7b09(0x4d2)]['applyVariance']=function(_0x21678d,_0x4a6d00){const _0x44f47b=_0x4b7b09;return VisuMZ[_0x44f47b(0x6ce)][_0x44f47b(0xb41)][_0x44f47b(0xb75)][_0x44f47b(0x7d)][_0x44f47b(0x4ad)](this,_0x21678d,_0x4a6d00);},Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0xadf)]=function(_0x1eb436,_0x49e147){const _0x2cf497=_0x4b7b09;return VisuMZ[_0x2cf497(0x6ce)]['Settings']['Damage']['GuardFormulaJS'][_0x2cf497(0x4ad)](this,_0x1eb436,_0x49e147);},VisuMZ['BattleCore'][_0x4b7b09(0xb5d)]=Game_Action[_0x4b7b09(0x4d2)]['itemHit'],Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x2a6)]=function(_0x33d2d4){const _0x378de9=_0x4b7b09,_0xaf1e74=this[_0x378de9(0x6e3)]()['note'];if(_0xaf1e74[_0x378de9(0x2c1)](/<ALWAYS HIT>/i))return 0x1;else{if(_0xaf1e74[_0x378de9(0x2c1)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x511376=VisuMZ[_0x378de9(0x6ce)][_0x378de9(0xb5d)][_0x378de9(0x4ad)](this,_0x33d2d4);return _0x511376=this['_multipliers'][_0x378de9(0x405)]*_0x511376+this[_0x378de9(0x1fa)]['hitFlat'],_0x511376;}}},Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x402)]=function(_0x1ae7f3){const _0x59f2ce=_0x4b7b09;if(!this[_0x59f2ce(0x6e3)]()['damage']['critical'])return 0x0;let _0x5bb8a4=VisuMZ[_0x59f2ce(0x6ce)][_0x59f2ce(0xb41)][_0x59f2ce(0xb75)][_0x59f2ce(0x70b)]['call'](this,_0x1ae7f3);return _0x5bb8a4=this[_0x59f2ce(0x1fa)][_0x59f2ce(0x55b)]*_0x5bb8a4+this[_0x59f2ce(0x1fa)][_0x59f2ce(0x42c)],_0x5bb8a4;},Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0xb2e)]=function(_0x38cd36){const _0x1d699a=_0x4b7b09;return _0x38cd36=VisuMZ[_0x1d699a(0x6ce)][_0x1d699a(0xb41)][_0x1d699a(0xb75)][_0x1d699a(0x489)]['call'](this,_0x38cd36),_0x38cd36=this[_0x1d699a(0x1fa)]['criticalDmgRate']*_0x38cd36+this[_0x1d699a(0x1fa)]['criticalDmgFlat'],_0x38cd36;},VisuMZ[_0x4b7b09(0x6ce)]['Game_Action_evalDamageFormula']=Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x302)],Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x302)]=function(_0x37c738){const _0xd6d4eb=_0x4b7b09;if(this['_customDamageFormula']!==_0xd6d4eb(0x127))return this[_0xd6d4eb(0x741)](_0x37c738);else{if(DataManager[_0xd6d4eb(0x784)](this[_0xd6d4eb(0x6e3)]())===_0xd6d4eb(0x217)){if('rUmtq'!==_0xd6d4eb(0x1e5))_0x1ca956[_0xd6d4eb(0x6ce)][_0xd6d4eb(0xac)][_0xd6d4eb(0x4ad)](this),this['updateShadowBattleCore']();else return VisuMZ[_0xd6d4eb(0x6ce)]['Game_Action_evalDamageFormula']['call'](this,_0x37c738);}else return'WVEpn'!==_0xd6d4eb(0xa4b)?this[_0xd6d4eb(0x10c)](_0x37c738):this[_0xd6d4eb(0x36f)]();}},Game_Action[_0x4b7b09(0x4d2)]['setCustomDamageFormula']=function(_0x4039e0){this['_customDamageFormula']=_0x4039e0;},Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x741)]=function(_0x39b80a){const _0x585e39=_0x4b7b09,_0x4dc02c=this[_0x585e39(0x6e3)](),_0x843dbc=_0x4dc02c[_0x585e39(0x28b)]['formula'];_0x4dc02c[_0x585e39(0x28b)][_0x585e39(0x1db)]=this[_0x585e39(0x2c7)];let _0x4dbd88=VisuMZ['BattleCore']['Game_Action_evalDamageFormula']['call'](this,_0x39b80a);return _0x4dc02c['damage'][_0x585e39(0x1db)]=_0x843dbc,_0x4dbd88;},Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x932)]=function(){const _0x178116=_0x4b7b09;if(this[_0x178116(0x6e3)]()[_0x178116(0xaf1)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x4b3940=String(RegExp['$1'])[_0x178116(0x2c5)]()[_0x178116(0x612)]();return _0x4b3940;}return _0x178116(0x217);},Game_Action['prototype'][_0x4b7b09(0x10c)]=function(_0x258943){const _0x407fa4=_0x4b7b09,_0x473a3e=DataManager[_0x407fa4(0x784)](this['item']()),_0x3d6c9b=VisuMZ[_0x407fa4(0xed)][_0x473a3e];try{if(_0x407fa4(0x46a)!==_0x407fa4(0x7a4))return _0x3d6c9b[_0x407fa4(0x4ce)][_0x407fa4(0x4ad)](this,_0x258943);else{if(!_0x51602d[_0x407fa4(0x6ce)]['Settings']['BattleLayout'][_0x407fa4(0x241)])return![];if(_0x3ae928[_0x407fa4(0xb53)]())return!![];return _0x1a2fda['VisuMZ_1_MainMenuCore']&&_0x16531e[_0x407fa4(0x97b)]();}}catch(_0x25daa6){if($gameTemp[_0x407fa4(0x40e)]())console[_0x407fa4(0x11b)](_0x25daa6);return VisuMZ[_0x407fa4(0x6ce)][_0x407fa4(0x88a)][_0x407fa4(0x4ad)](this);}},Game_Action['prototype'][_0x4b7b09(0x8b)]=function(_0xed8b2e,_0x101795){const _0x3e8704=_0x4b7b09;if(this[_0x3e8704(0xc8)]())return _0x101795;const _0x263ab1=this['subject'](),_0x34938e=_0xed8b2e;let _0x1a3f75=[],_0x3dde14=[];_0x1a3f75[_0x3e8704(0x410)](this[_0x3e8704(0xa5)][_0x3e8704(0xf6)],this[_0x3e8704(0xa5)][_0x3e8704(0x530)]),_0x3dde14[_0x3e8704(0x410)](this['_armorPenetration'][_0x3e8704(0x6fd)],this[_0x3e8704(0xa5)][_0x3e8704(0x1e9)]);const _0x1de6a2=this[_0x3e8704(0x24d)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x6333c4=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x209375=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x3a5094=this[_0x3e8704(0x24d)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x1a3f75=_0x1a3f75[_0x3e8704(0xa28)](_0x34938e[_0x3e8704(0xaf0)]()[_0x3e8704(0x78)](_0xfc7a4f=>_0xfc7a4f&&_0xfc7a4f['note'][_0x3e8704(0x2c1)](_0x1de6a2)?Number(RegExp['$1']):0x0)),_0x3dde14=_0x3dde14[_0x3e8704(0xa28)](_0x34938e['traitObjects']()[_0x3e8704(0x78)](_0x332379=>_0x332379&&_0x332379[_0x3e8704(0xaf1)][_0x3e8704(0x2c1)](_0x6333c4)?Number(RegExp['$1'])/0x64:0x0)),_0x1a3f75=_0x1a3f75[_0x3e8704(0xa28)](_0x263ab1[_0x3e8704(0xaf0)]()[_0x3e8704(0x78)](_0x4e667a=>_0x4e667a&&_0x4e667a[_0x3e8704(0xaf1)][_0x3e8704(0x2c1)](_0x209375)?Number(RegExp['$1']):0x0)),_0x3dde14=_0x3dde14[_0x3e8704(0xa28)](_0x263ab1[_0x3e8704(0xaf0)]()[_0x3e8704(0x78)](_0x8b638=>_0x8b638&&_0x8b638['note'][_0x3e8704(0x2c1)](_0x3a5094)?Number(RegExp['$1'])/0x64:0x0)),this[_0x3e8704(0x6e3)]()[_0x3e8704(0xaf1)][_0x3e8704(0x2c1)](_0x209375)&&_0x1a3f75['push'](Number(RegExp['$1'])),this['item']()[_0x3e8704(0xaf1)]['match'](_0x3a5094)&&_0x3dde14[_0x3e8704(0x410)](Number(RegExp['$1'])),_0x101795=_0x1a3f75[_0x3e8704(0x10b)]((_0x27ffea,_0x4ba1ba)=>_0x27ffea-_0x4ba1ba,_0x101795),_0x101795>0x0&&(_0x101795=_0x3dde14[_0x3e8704(0x10b)]((_0x4c868a,_0x1e3472)=>_0x4c868a*(0x1-_0x1e3472),_0x101795)),_0x101795;},VisuMZ['BattleCore'][_0x4b7b09(0x2be)]=Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x500)],Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x500)]=function(_0x4bd7fe,_0x2569ad){const _0x4855fa=_0x4b7b09;_0x2569ad=_0x2569ad*this[_0x4855fa(0x1fa)][_0x4855fa(0x6c9)],_0x2569ad+=this[_0x4855fa(0x1fa)][_0x4855fa(0x3b2)]*(_0x2569ad>=0x0?0x1:-0x1),_0x2569ad=this[_0x4855fa(0x613)]('PreDamage%1JS',_0x4bd7fe,_0x2569ad,![]),_0x2569ad=this['applyDamageCaps'](_0x2569ad),_0x2569ad=Math[_0x4855fa(0x2ca)](_0x2569ad),this[_0x4855fa(0x202)]=_0x2569ad,this['_totalValue']=this[_0x4855fa(0x658)]||0x0,this[_0x4855fa(0x658)]+=_0x2569ad,VisuMZ[_0x4855fa(0x6ce)]['Game_Action_executeDamage']['call'](this,_0x4bd7fe,_0x2569ad),this[_0x4855fa(0x613)](_0x4855fa(0x5f3),_0x4bd7fe,_0x2569ad,!![]);},Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x4b6)]=function(_0x5606ed){const _0x2f6e4a=_0x4b7b09;if(this[_0x2f6e4a(0x746)]())return _0x5606ed;return _0x5606ed=this[_0x2f6e4a(0x61a)](_0x5606ed),_0x5606ed=this['applyHardDamageCap'](_0x5606ed),_0x5606ed;},Game_Action['prototype'][_0x4b7b09(0x746)]=function(){const _0x5c6442=_0x4b7b09,_0x2ee8be=/<BYPASS DAMAGE CAP>/i;if(this[_0x5c6442(0x6e3)]()[_0x5c6442(0xaf1)][_0x5c6442(0x2c1)](_0x2ee8be))return!![];if(this[_0x5c6442(0xb2a)]()[_0x5c6442(0xaf0)]()['some'](_0x188b77=>_0x188b77&&_0x188b77['note'][_0x5c6442(0x2c1)](_0x2ee8be)))return!![];return!VisuMZ[_0x5c6442(0x6ce)][_0x5c6442(0xb41)]['Damage'][_0x5c6442(0x90a)];},Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x61a)]=function(_0x1aaa5d){const _0x4dcb98=_0x4b7b09;if(!VisuMZ[_0x4dcb98(0x6ce)][_0x4dcb98(0xb41)]['Damage']['EnableSoftCap'])return _0x1aaa5d;const _0x1247d5=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x4dcb98(0x6e3)]()[_0x4dcb98(0xaf1)]['match'](_0x1247d5))return _0x1aaa5d;if(this['subject']()[_0x4dcb98(0xaf0)]()[_0x4dcb98(0x31e)](_0x85eaf4=>_0x85eaf4&&_0x85eaf4[_0x4dcb98(0xaf1)][_0x4dcb98(0x2c1)](_0x1247d5)))return _0x1aaa5d;const _0x1d52ad=_0x1aaa5d<0x0?-0x1:0x1;_0x1aaa5d=Math[_0x4dcb98(0x2ef)](_0x1aaa5d);let _0x2616f6=this[_0x4dcb98(0xb2a)]()[_0x4dcb98(0x42d)]();this[_0x4dcb98(0x6e3)]()[_0x4dcb98(0xaf1)]['match'](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x2616f6+=Number(RegExp['$1'])/0x64);_0x2616f6=_0x2616f6[_0x4dcb98(0x88c)](0.01,0x1);const _0x1f83c0=this[_0x4dcb98(0x330)](),_0x219d93=_0x2616f6*_0x1f83c0;if(_0x1aaa5d>_0x219d93&&_0x1f83c0>_0x219d93){if(_0x4dcb98(0x8d8)!==_0x4dcb98(0xb69)){_0x1aaa5d-=_0x219d93;const _0x4d36ef=VisuMZ[_0x4dcb98(0x6ce)]['Settings'][_0x4dcb98(0xb75)]['DefaultSoftScaler'],_0xd992c0=Math[_0x4dcb98(0x90d)](0x1-_0x1aaa5d/((_0x1f83c0-_0x219d93)*_0x4d36ef+_0x1aaa5d),0.01);_0x1aaa5d*=_0xd992c0,_0x1aaa5d+=_0x219d93;}else{const _0x138278=this[_0x4dcb98(0x6bc)]();this[_0x4dcb98(0x708)]=new _0x560543(_0x138278),this['_autoBattleWindow'][_0x4dcb98(0x999)](),this[_0x4dcb98(0x420)](this[_0x4dcb98(0x708)]);}}return _0x1aaa5d*_0x1d52ad;},Game_Action['prototype']['getHardDamageCap']=function(){const _0x4eb78=_0x4b7b09;return this[_0x4eb78(0x6e3)]()[_0x4eb78(0xaf1)]['match'](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0x4eb78(0xb2a)]()[_0x4eb78(0xa7c)]();},Game_Action['prototype'][_0x4b7b09(0x888)]=function(_0x1f19de){const _0x47f05c=_0x4b7b09;console[_0x47f05c(0x11b)](_0x1f19de);let _0x405d93=this[_0x47f05c(0x330)]();return _0x1f19de['clamp'](-_0x405d93,_0x405d93);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x8f3)]=Game_Action['prototype'][_0x4b7b09(0x939)],Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x939)]=function(_0x52211e){const _0x241043=_0x4b7b09;this[_0x241043(0x613)](_0x241043(0x59e),_0x52211e,0x0,!![]),VisuMZ[_0x241043(0x6ce)][_0x241043(0x8f3)][_0x241043(0x4ad)](this,_0x52211e),this[_0x241043(0x613)](_0x241043(0xb90),_0x52211e,this[_0x241043(0x202)]||0x0,!![]),this['applyResultSwitches'](_0x52211e);},Game_Action['prototype'][_0x4b7b09(0x613)]=function(_0x50772f,_0x1dcf6c,_0x39287c,_0x38bf1f){const _0x3d249a=_0x4b7b09;if(this['_tempBattler']||this[_0x3d249a(0x576)])return;_0x39287c=_0x39287c||0x0;const _0x4f8417=_0x39287c,_0x40191f=VisuMZ['BattleCore'][_0x3d249a(0xb41)][_0x3d249a(0xeb)],_0x3cd455=_0x50772f[_0x3d249a(0xace)]('');if(_0x40191f[_0x3cd455]){_0x39287c=_0x40191f[_0x3cd455][_0x3d249a(0x4ad)](this,_0x39287c,_0x1dcf6c);if(_0x38bf1f)_0x39287c=_0x4f8417;}let _0x5efe17=VisuMZ[_0x3d249a(0x6ce)][_0x3d249a(0x64c)](this['item'](),_0x50772f[_0x3d249a(0xace)](''));if(VisuMZ[_0x3d249a(0x6ce)]['JS'][_0x5efe17]){_0x39287c=VisuMZ['BattleCore']['JS'][_0x5efe17][_0x3d249a(0x4ad)](this,this[_0x3d249a(0xb2a)](),_0x1dcf6c,this[_0x3d249a(0x6e3)](),_0x39287c);if(_0x38bf1f)_0x39287c=_0x4f8417;}for(const _0x2bb45a of this[_0x3d249a(0xb2a)]()[_0x3d249a(0xaf0)]()){if('PzSpA'==='pPHJl'){const _0xd9b13b=this[_0x3d249a(0x313)][_0x3d249a(0xaab)](),_0x4af0b3=_0xd9b13b[0x0];return _0x4af0b3[_0x3d249a(0x7c1)]=_0x4af0b3[_0x3d249a(0x7c1)]||[],_0x4af0b3['_actions'][0x0]=_0xd9b13b[0x1],_0x4af0b3;}else{if(!_0x2bb45a)continue;_0x5efe17=VisuMZ[_0x3d249a(0x6ce)][_0x3d249a(0x64c)](_0x2bb45a,_0x50772f[_0x3d249a(0xace)](_0x3d249a(0xa89)));if(VisuMZ[_0x3d249a(0x6ce)]['JS'][_0x5efe17]){_0x39287c=VisuMZ['BattleCore']['JS'][_0x5efe17][_0x3d249a(0x4ad)](this,this['subject'](),_0x1dcf6c,_0x2bb45a,_0x39287c);if(_0x38bf1f)_0x39287c=_0x4f8417;}}}for(const _0x294a84 of _0x1dcf6c[_0x3d249a(0xaf0)]()){if(!_0x294a84)continue;_0x5efe17=VisuMZ[_0x3d249a(0x6ce)][_0x3d249a(0x64c)](_0x294a84,_0x50772f[_0x3d249a(0xace)]('AsTarget'));if(VisuMZ['BattleCore']['JS'][_0x5efe17]){if(_0x3d249a(0x76d)!=='SGlYt'){_0x39287c=VisuMZ['BattleCore']['JS'][_0x5efe17]['call'](this,this[_0x3d249a(0xb2a)](),_0x1dcf6c,_0x294a84,_0x39287c);if(_0x38bf1f)_0x39287c=_0x4f8417;}else{if(!_0x209e37)return![];return _0x1b25b9[_0x3d249a(0x102)]===0x0||_0x3ee7b4[_0x3d249a(0x102)]===0x1;}}}return _0x39287c;},Game_Action[_0x4b7b09(0x4d2)]['actionBattleCoreJS']=function(_0x337711){const _0x1de164=_0x4b7b09,_0xfc6be2=this[_0x1de164(0x658)]||0x0,_0x53bae7=VisuMZ[_0x1de164(0x6ce)][_0x1de164(0xb41)][_0x1de164(0xeb)],_0x3114e1=_0x337711['format']('');_0x53bae7[_0x3114e1]&&(_0x1de164(0x1d7)!=='IDeBj'?_0x53bae7[_0x3114e1][_0x1de164(0x4ad)](this,_0xfc6be2):_0x3a28a5[_0x1de164(0x5dc)][_0x1de164(0xb15)]=![]);let _0x583f3f=VisuMZ[_0x1de164(0x6ce)][_0x1de164(0x64c)](this['item'](),_0x337711);VisuMZ[_0x1de164(0x6ce)]['JS'][_0x583f3f]&&VisuMZ[_0x1de164(0x6ce)]['JS'][_0x583f3f][_0x1de164(0x4ad)](this,this[_0x1de164(0xb2a)](),this['subject'](),this['item'](),_0xfc6be2);for(const _0x448c98 of this[_0x1de164(0xb2a)]()[_0x1de164(0xaf0)]()){if(!_0x448c98)continue;_0x583f3f=VisuMZ[_0x1de164(0x6ce)]['createKeyJS'](_0x448c98,_0x337711),VisuMZ['BattleCore']['JS'][_0x583f3f]&&(_0x1de164(0x70)==='kdaVO'?_0x1460c1[_0x1de164(0x428)](0x0,0x0,_0x403d60[_0x1de164(0x680)][_0x1de164(0x839)],this[_0x1de164(0x680)][_0x1de164(0xb65)]):VisuMZ[_0x1de164(0x6ce)]['JS'][_0x583f3f][_0x1de164(0x4ad)](this,this[_0x1de164(0xb2a)](),this['subject'](),_0x448c98,_0xfc6be2));}},Game_Action['prototype']['speed']=function(){const _0x2ecfac=_0x4b7b09;return VisuMZ['BattleCore']['Settings'][_0x2ecfac(0xeb)][_0x2ecfac(0x560)][_0x2ecfac(0x4ad)](this);},Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0xb40)]=function(){const _0x2a63ab=_0x4b7b09;return VisuMZ[_0x2a63ab(0x6ce)][_0x2a63ab(0xb41)][_0x2a63ab(0xeb)]['AllowRandomSpeed'];},Game_Action[_0x4b7b09(0x4d2)]['isCustomBattleScope']=function(){const _0x212efc=_0x4b7b09;return this[_0x212efc(0x6e3)]()[_0x212efc(0xaf1)]['match'](/<JS TARGETS>/i);},Game_Action['prototype']['isBattleCoreTargetScope']=function(){const _0x391198=_0x4b7b09;if(!this[_0x391198(0x184)]&&this[_0x391198(0xb2a)]()[_0x391198(0x425)]())return![];if(this[_0x391198(0x204)]())return!![];return typeof this[_0x391198(0x6e3)]()[_0x391198(0x570)]===_0x391198(0x183);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x4be)]=Game_Action['prototype'][_0x4b7b09(0x9a7)],Game_Action[_0x4b7b09(0x4d2)]['isForOpponent']=function(){const _0x264c23=_0x4b7b09;if(this['isBattleCoreTargetScope']()&&!this[_0x264c23(0x204)]()){if(_0x264c23(0x383)===_0x264c23(0x5e5)){this[_0x264c23(0x80b)][_0x264c23(0x945)]();const _0x3f3f15=_0x38a88d[_0x264c23(0x6ce)][_0x264c23(0xb41)]['AutoBattle'][_0x264c23(0x64b)],_0x34f887=_0x3f3f15[_0x264c23(0xace)](this[_0x264c23(0x69d)](),this[_0x264c23(0x621)]()),_0x1344d5=this[_0x264c23(0x286)](_0x34f887)[_0x264c23(0x839)],_0x19fa22=_0x409e2c[_0x264c23(0xdd)]((this['innerWidth']-_0x1344d5)/0x2);this[_0x264c23(0xb3b)](_0x34f887,_0x19fa22,0x0,_0x1344d5);}else return this[_0x264c23(0x215)]();}else{if('sKjuB'!==_0x264c23(0x861))return VisuMZ[_0x264c23(0x6ce)][_0x264c23(0x4be)][_0x264c23(0x4ad)](this);else _0xcfe53b[_0x264c23(0x6ce)][_0x264c23(0x93a)]['call'](this,_0x2069b3),this[_0x264c23(0x9bd)]();}},Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x215)]=function(){const _0x2b6c2a=_0x4b7b09,_0x4f90d7=this[_0x2b6c2a(0x6e3)]()['scope'];return _0x4f90d7['match'](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x5aa)]=Game_Action['prototype']['isForFriend'],Game_Action[_0x4b7b09(0x4d2)]['isForFriend']=function(){const _0x418b2e=_0x4b7b09;if(this[_0x418b2e(0x543)]()&&!this[_0x418b2e(0x204)]()){if(_0x418b2e(0x61d)!==_0x418b2e(0x61d)){_0x5dc200[_0x418b2e(0x6c7)]['setActionState']('undecided');const _0x506316=_0x319b4f[_0x418b2e(0x6c7)][_0x418b2e(0xe0)]();if(_0x506316)_0x506316['stepBack']();}else return this[_0x418b2e(0x271)]();}else return VisuMZ[_0x418b2e(0x6ce)][_0x418b2e(0x5aa)][_0x418b2e(0x4ad)](this);},Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x271)]=function(){const _0x390daf=_0x4b7b09,_0x4df33d=this[_0x390daf(0x6e3)]()[_0x390daf(0x570)];return _0x4df33d['match'](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x67f)]=Game_Action['prototype'][_0x4b7b09(0x843)],Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x843)]=function(){const _0x53f04c=_0x4b7b09;return this[_0x53f04c(0x543)]()&&!this[_0x53f04c(0x204)]()?this[_0x53f04c(0x148)]():VisuMZ[_0x53f04c(0x6ce)][_0x53f04c(0x67f)]['call'](this);},Game_Action['prototype'][_0x4b7b09(0x148)]=function(){const _0x7fc863=_0x4b7b09,_0x273d3f=this[_0x7fc863(0x6e3)]()['scope'];return _0x273d3f[_0x7fc863(0x2c1)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x7e7)]=Game_Action['prototype'][_0x4b7b09(0xb24)],Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0xb24)]=function(){const _0x389233=_0x4b7b09;if(this['isBattleCoreTargetScope']()&&!this[_0x389233(0x204)]()){if(_0x389233(0x5d6)===_0x389233(0x9fd))_0x2458bb[_0x389233(0x28b)][_0x389233(0x931)]=!![];else return this[_0x389233(0x600)]();}else{if(_0x389233(0x28c)!=='TvjtY')return VisuMZ['BattleCore'][_0x389233(0x7e7)]['call'](this);else{const _0x42044c=_0x93d9ad['ceil'](_0x505d72['width']/0x3),_0x59a344=_0x331607[_0x389233(0x2ca)]((_0x36853b[_0x389233(0x979)]-_0x42044c)/0x2),_0x30d447=this[_0x389233(0xa0)](),_0x501439=_0x30d447['y'],_0x3f1368=_0x30d447[_0x389233(0xb65)];return new _0x1f4a37(_0x59a344,_0x501439,_0x42044c,_0x3f1368);}}},Game_Action[_0x4b7b09(0x4d2)]['needsSelectionBattleCore']=function(){const _0xe03f27=_0x4b7b09,_0x3a8ac9=this[_0xe03f27(0x6e3)]()['scope'];if(_0x3a8ac9['match'](/RANDOM/i))return![];if(_0x3a8ac9[_0xe03f27(0x2c1)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x3a8ac9[_0xe03f27(0x2c1)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ[_0xe03f27(0x6ce)][_0xe03f27(0x7e7)][_0xe03f27(0x4ad)](this);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x47e)]=Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x5af)],Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x5af)]=function(){const _0x499958=_0x4b7b09;let _0x64b086=[];return this[_0x499958(0x543)]()?'soQXs'!==_0x499958(0x84e)?_0x64b086=this['makeTargetsBattleCore']():(this[_0x499958(0x6b1)]=!![],this[_0x499958(0xa2d)][_0x499958(0x410)](_0x499958(0x8a9),_0x5e21de[_0x499958(0x6ce)]['Settings'][_0x499958(0xa9)][_0x499958(0x94a)])):_0x64b086=VisuMZ[_0x499958(0x6ce)][_0x499958(0x47e)][_0x499958(0x4ad)](this),_0x64b086=this['applyTargetFilters'](_0x64b086),_0x64b086;},Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x2af)]=function(){const _0x6530b7=_0x4b7b09;let _0x4702c7=[];const _0x64b1a3=String(this['item']()[_0x6530b7(0x570)]),_0x12bcf5=VisuMZ['BattleCore'][_0x6530b7(0x64c)](this[_0x6530b7(0x6e3)](),_0x6530b7(0x94e));if(VisuMZ[_0x6530b7(0x6ce)]['JS'][_0x12bcf5]){_0x4702c7=VisuMZ[_0x6530b7(0x6ce)][_0x6530b7(0x47e)][_0x6530b7(0x4ad)](this);const _0x5945c1=VisuMZ[_0x6530b7(0x6ce)][_0x6530b7(0x64c)](this[_0x6530b7(0x6e3)](),_0x6530b7(0x94e));return _0x4702c7=VisuMZ[_0x6530b7(0x6ce)]['JS'][_0x5945c1]['call'](this,this[_0x6530b7(0xb2a)](),_0x4702c7),this[_0x6530b7(0xb7e)](_0x4702c7);}if(_0x64b1a3[_0x6530b7(0x2c1)](/(\d+) RANDOM ANY/i)){let _0x1858fd=Number(RegExp['$1']);while(_0x1858fd--){const _0x416d6b=Math['randomInt'](0x2)===0x0?this[_0x6530b7(0x436)]():this[_0x6530b7(0xafd)]();_0x4702c7[_0x6530b7(0x410)](_0x416d6b[_0x6530b7(0x4d3)]());}return this[_0x6530b7(0xb7e)](_0x4702c7);}if(_0x64b1a3['match'](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x22b26f=Number(RegExp['$1']);while(_0x22b26f--){if(_0x6530b7(0x2c6)===_0x6530b7(0x2c6))_0x4702c7[_0x6530b7(0x410)](this[_0x6530b7(0x436)]()['trueRandomTarget']());else{const _0xc3a022=this['name'](),_0x3c70af=this[_0x6530b7(0x2b9)](),_0x15b73a=this[_0x6530b7(0x1b6)]();this['setupFont'](),this['bitmap'][_0x6530b7(0x945)](),this[_0x6530b7(0x680)][_0x6530b7(0x206)](_0xc3a022,0x4,0x0,_0x3c70af,_0x15b73a,_0x6530b7(0x48f));}}return this[_0x6530b7(0xb7e)](_0x4702c7);}if(_0x64b1a3[_0x6530b7(0x2c1)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x12c375=Number(RegExp['$1']);while(_0x12c375--){if(_0x6530b7(0xaa7)!=='JfRbj')_0x4702c7[_0x6530b7(0x410)](this[_0x6530b7(0xafd)]()['trueRandomTarget']());else for(const _0x41715b of _0x1656b0){const _0x39a45f=_0x369314[0x0][_0x6530b7(0xace)](_0x41715b[0x0],_0x3dede3[0x0]),_0x31d138=_0x160147[0x1]['format'](_0x41715b[0x1],_0x3d1323[0x1])[_0x6530b7(0x612)](),_0x4c6189=new _0x3f7cfd(_0x12f266['format'](_0x31d138),'i');_0x4c17e8[_0x39a45f]=_0x4c6189;}}return this['repeatTargets'](_0x4702c7);}if(_0x64b1a3['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x4702c7[_0x6530b7(0x410)](...this[_0x6530b7(0xafd)]()['aliveMembers']()['filter'](_0x2f57a5=>_0x2f57a5!==this[_0x6530b7(0xb2a)]())),this['repeatTargets'](_0x4702c7);return VisuMZ['BattleCore'][_0x6530b7(0x47e)]['call'](this);},Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x166)]=function(_0x3b4155){const _0x37c236=[];for(let _0x25ce3a=0x0;_0x25ce3a<this['numTargets']();_0x25ce3a++){_0x37c236['push'](_0x3b4155['trueRandomTarget']());}return _0x37c236;},Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x8b1)]=function(_0x43d1c2){const _0x42c089=_0x4b7b09;if(!this[_0x42c089(0x6e3)]())return _0x43d1c2;const _0x577c06=this[_0x42c089(0x6e3)]()['note'];return _0x577c06[_0x42c089(0x2c1)](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0x43d1c2[_0x42c089(0x76b)](this[_0x42c089(0xb2a)]()),_0x43d1c2;},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x7c4)]=Game_Action[_0x4b7b09(0x4d2)]['itemEffectAddAttackState'],Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x1b3)]=function(_0x1fdce3,_0x5c3ddd){const _0x39a3ff=_0x4b7b09;VisuMZ[_0x39a3ff(0x6ce)][_0x39a3ff(0x7c4)][_0x39a3ff(0x4ad)](this,_0x1fdce3,_0x5c3ddd);if(!_0x1fdce3[_0x39a3ff(0x846)]())return;for(const _0x51a0d2 of this[_0x39a3ff(0xb2a)]()[_0x39a3ff(0x473)]()){if(_0x51a0d2===_0x1fdce3[_0x39a3ff(0x7fa)]()){if(_0x39a3ff(0x1a4)===_0x39a3ff(0x679))_0x2a2396[_0x39a3ff(0x6ce)][_0x39a3ff(0xb4f)][_0x39a3ff(0x4ad)](this),this['okTargetSelectionVisibility']();else{let _0x9e7745=_0x5c3ddd['value1'];_0x9e7745*=_0x1fdce3[_0x39a3ff(0x1a1)](_0x51a0d2),_0x9e7745*=this['subject']()[_0x39a3ff(0x85)](_0x51a0d2),_0x9e7745*=this[_0x39a3ff(0x7f3)](_0x1fdce3);if(Math[_0x39a3ff(0x7cd)]()<_0x9e7745){if(_0x39a3ff(0x693)===_0x39a3ff(0x8f5)){if(_0xca3ca8['isTpb']()&&this[_0x39a3ff(0x664)]===_0x39a3ff(0x605))return this[_0x39a3ff(0x381)]()?this['currentAction']()&&this[_0x39a3ff(0x335)]()['item']()&&!this[_0x39a3ff(0x335)]()[_0x39a3ff(0x8ca)]():this[_0x39a3ff(0x335)]()&&this[_0x39a3ff(0x335)]()[_0x39a3ff(0x6e3)]()&&!this[_0x39a3ff(0x335)]()[_0x39a3ff(0x43b)]();return![];}else _0x1fdce3[_0x39a3ff(0x193)]=!![],this[_0x39a3ff(0x7ab)](_0x1fdce3);}}}}},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x11d)]=Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x5c5)],Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x5c5)]=function(_0x5e9d84,_0x2d03f9){const _0x5c4079=_0x4b7b09;VisuMZ[_0x5c4079(0x6ce)][_0x5c4079(0x11d)][_0x5c4079(0x4ad)](this,_0x5e9d84,_0x2d03f9);if(!_0x5e9d84[_0x5c4079(0x846)]())return;if(_0x2d03f9[_0x5c4079(0x603)]!==_0x5e9d84[_0x5c4079(0x7fa)]())return;let _0x189a2a=_0x2d03f9[_0x5c4079(0x702)];if(!this['isCertainHit']()){if(_0x5c4079(0x195)!==_0x5c4079(0x195))return!![];else _0x189a2a*=_0x5e9d84[_0x5c4079(0x1a1)](_0x2d03f9[_0x5c4079(0x603)]),_0x189a2a*=this['lukEffectRate'](_0x5e9d84);}Math[_0x5c4079(0x7cd)]()<_0x189a2a&&(_0x5e9d84[_0x5c4079(0x193)]=!![],this['makeSuccess'](_0x5e9d84));},VisuMZ[_0x4b7b09(0x6ce)]['Game_Action_applyGlobal']=Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x8ef)],Game_Action[_0x4b7b09(0x4d2)]['applyGlobal']=function(){const _0x50e918=_0x4b7b09;VisuMZ[_0x50e918(0x6ce)][_0x50e918(0x40d)][_0x50e918(0x4ad)](this),this[_0x50e918(0x7dc)](),this['resetResultSwitches']();},Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x7dc)]=function(){const _0x53ad1f=_0x4b7b09;if(!SceneManager[_0x53ad1f(0x18e)]())return;const _0x44e064=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0xe237bd=this[_0x53ad1f(0x6e3)]()[_0x53ad1f(0xaf1)]['match'](_0x44e064);if(_0xe237bd){if('IVBas'==='mlSEq')this[_0x53ad1f(0x72a)][_0x53ad1f(0x537)](),this['_itemWindow'][_0x53ad1f(0x537)]();else for(const _0x4d31c1 of _0xe237bd){if(_0x53ad1f(0x1dd)!==_0x53ad1f(0x1dd))this['subject']()&&this[_0x53ad1f(0xb2a)]()[_0x53ad1f(0x415)]()?_0x5e9746[_0x53ad1f(0x6ce)][_0x53ad1f(0x89d)]['call'](this):this[_0x53ad1f(0x945)]();else{if(!_0x4d31c1)continue;_0x4d31c1[_0x53ad1f(0x2c1)](_0x44e064);const _0x4603b8=String(RegExp['$1'])[_0x53ad1f(0x7c9)](',')[_0x53ad1f(0x78)](_0x561e79=>String(_0x561e79)[_0x53ad1f(0x612)]()),_0x23fcfd=_0x4603b8[_0x53ad1f(0x78)](_0xac94b0=>DataManager[_0x53ad1f(0x350)](_0xac94b0));for(const _0x226f1f of _0x23fcfd){if('JPSLU'!==_0x53ad1f(0x2eb))_0x15ab2b+=_0x381ffc[_0x53ad1f(0x2ef)](_0x4fb32d[_0x53ad1f(0x978)]);else{const _0x35aa64=$dataCommonEvents[_0x226f1f];_0x35aa64&&$gameTemp['reserveCommonEvent'](_0x226f1f);}}}}}},DataManager[_0x4b7b09(0x350)]=function(_0xa9b560){const _0x49a645=_0x4b7b09;_0xa9b560=_0xa9b560[_0x49a645(0x2c5)]()[_0x49a645(0x612)](),this[_0x49a645(0xa7d)]=this['_commonEventIDs']||{};if(this[_0x49a645(0xa7d)][_0xa9b560])return this['_commonEventIDs'][_0xa9b560];for(const _0x24c408 of $dataCommonEvents){if('DDJxn'===_0x49a645(0x681))return 0x0;else{if(!_0x24c408)continue;let _0x52875e=_0x24c408[_0x49a645(0x639)];_0x52875e=_0x52875e[_0x49a645(0x586)](/\x1I\[(\d+)\]/gi,''),_0x52875e=_0x52875e['replace'](/\\I\[(\d+)\]/gi,''),this[_0x49a645(0xa7d)][_0x52875e['toUpperCase']()['trim']()]=_0x24c408['id'];}}return this[_0x49a645(0xa7d)][_0xa9b560]||0x0;},Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x80a)]=function(){const _0x346e31=_0x4b7b09;if(!SceneManager[_0x346e31(0x18e)]())return;const _0x53b867=VisuMZ[_0x346e31(0x6ce)][_0x346e31(0xb41)][_0x346e31(0xeb)];_0x53b867[_0x346e31(0x91c)]&&(_0x346e31(0x4e6)!=='doKUw'?$gameSwitches[_0x346e31(0x136)](_0x53b867['SwitchCritical'],![]):_0x914954[_0x346e31(0x235)]=_0xf4cf69[_0x346e31(0x90d)](0x1,_0x267f9b(_0x5510f7['$1'])));_0x53b867[_0x346e31(0x384)]&&$gameSwitches[_0x346e31(0x136)](_0x53b867[_0x346e31(0x384)],![]);if(_0x53b867['VariableDmg']){if(_0x346e31(0x78d)==='OurZP'){if(_0x386a43[_0x346e31(0x3ac)]()[_0x346e31(0x299)]>0x0)return!![];if(_0x4c0d56[_0x346e31(0x3ac)]()[_0x346e31(0xb54)]>0x0)return!![];this[_0x346e31(0x756)]='';}else $gameVariables[_0x346e31(0x136)](_0x53b867['VariableDmg'],0x0);}if(_0x53b867[_0x346e31(0x7f)]){if(_0x346e31(0x209)!==_0x346e31(0x5a7))$gameVariables[_0x346e31(0x136)](_0x53b867[_0x346e31(0x7f)],0x0);else{if(_0x1edf8f['isPreviousSceneBattleTransitionable']())return;if(!_0x55e225)return;if(!_0x2cee1d[_0x346e31(0x7e5)]())return;_0x187d9e[_0x346e31(0x6ce)][_0x346e31(0xb08)][_0x346e31(0x4ad)](this);}}},Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x9f6)]=function(_0x215d9d){const _0x12e3c3=_0x4b7b09;if(!SceneManager[_0x12e3c3(0x18e)]())return;if(!_0x215d9d)return;const _0x38cb06=_0x215d9d['result'](),_0x132dfe=VisuMZ[_0x12e3c3(0x6ce)][_0x12e3c3(0xb41)]['Mechanics'];if(_0x132dfe[_0x12e3c3(0x91c)]&&_0x38cb06[_0x12e3c3(0x931)]){if(_0x12e3c3(0x9f1)!==_0x12e3c3(0x9f1))return _0x1ac605['BattleCore'][_0x12e3c3(0x7e7)][_0x12e3c3(0x4ad)](this);else $gameSwitches[_0x12e3c3(0x136)](_0x132dfe[_0x12e3c3(0x91c)],!![]);}_0x132dfe['SwitchMissEvade']&&(_0x38cb06[_0x12e3c3(0x660)]||_0x38cb06['evaded'])&&$gameSwitches[_0x12e3c3(0x136)](_0x132dfe[_0x12e3c3(0x384)],!![]);if(_0x132dfe[_0x12e3c3(0x654)]){let _0x1c4234=$gameVariables[_0x12e3c3(0x3bd)](_0x132dfe[_0x12e3c3(0x654)]);if(_0x38cb06[_0x12e3c3(0x978)]>0x0){if(_0x12e3c3(0x3d0)!==_0x12e3c3(0x2ee))_0x1c4234+=Math[_0x12e3c3(0x2ef)](_0x38cb06[_0x12e3c3(0x978)]);else{this['setCursorRect'](0x0,0x0,0x0,0x0);return;}}$gameVariables['setValue'](_0x132dfe['VariableDmg'],_0x1c4234);}if(_0x132dfe['VariableHeal']){let _0x38b3bd=$gameVariables[_0x12e3c3(0x3bd)](_0x132dfe[_0x12e3c3(0x7f)]);_0x38cb06[_0x12e3c3(0x978)]<0x0&&(_0x38b3bd+=Math[_0x12e3c3(0x2ef)](_0x38cb06[_0x12e3c3(0x978)])),$gameVariables[_0x12e3c3(0x136)](_0x132dfe['VariableHeal'],_0x38b3bd);}},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xaa9)]=Game_BattlerBase[_0x4b7b09(0x4d2)]['initMembers'],Game_BattlerBase['prototype'][_0x4b7b09(0x737)]=function(){const _0x2bb8dd=_0x4b7b09;VisuMZ['BattleCore'][_0x2bb8dd(0xaa9)][_0x2bb8dd(0x4ad)](this),this[_0x2bb8dd(0xa11)]();},Game_BattlerBase['prototype']['initMembersBattleCore']=function(){this['_immortal']=![];},VisuMZ[_0x4b7b09(0x6ce)]['Game_BattlerBase_refresh']=Game_BattlerBase['prototype'][_0x4b7b09(0x75a)],Game_BattlerBase[_0x4b7b09(0x4d2)][_0x4b7b09(0x75a)]=function(){const _0x479d69=_0x4b7b09;this['_cache']={},VisuMZ[_0x479d69(0x6ce)][_0x479d69(0x715)][_0x479d69(0x4ad)](this);},Game_BattlerBase[_0x4b7b09(0x4d2)]['checkCacheKey']=function(_0x4a23e2){const _0x114aef=_0x4b7b09;return this[_0x114aef(0x91b)]=this[_0x114aef(0x91b)]||{},this[_0x114aef(0x91b)][_0x4a23e2]!==undefined;},Game_BattlerBase['prototype'][_0x4b7b09(0xa7c)]=function(){const _0x15e5a2=_0x4b7b09;if(this[_0x15e5a2(0x91b)][_0x15e5a2(0xa7c)]!==undefined)return this[_0x15e5a2(0x91b)][_0x15e5a2(0xa7c)];const _0x7e1ffd=/<DAMAGE CAP:[ ](\d+)>/i,_0x4974cb=this[_0x15e5a2(0xaf0)]()[_0x15e5a2(0x78)](_0x16054d=>_0x16054d&&_0x16054d[_0x15e5a2(0xaf1)]['match'](_0x7e1ffd)?Number(RegExp['$1']):0x0);let _0x37dcb9=_0x4974cb[_0x15e5a2(0x8db)]>0x0?Math['max'](..._0x4974cb):0x0;if(_0x37dcb9<=0x0)_0x37dcb9=VisuMZ[_0x15e5a2(0x6ce)][_0x15e5a2(0xb41)][_0x15e5a2(0xb75)][_0x15e5a2(0x960)];return this[_0x15e5a2(0x91b)]['hardDamageCap']=_0x37dcb9,this['_cache'][_0x15e5a2(0xa7c)];},Game_BattlerBase[_0x4b7b09(0x4d2)][_0x4b7b09(0x42d)]=function(){const _0x28081c=_0x4b7b09;if(this['_cache'][_0x28081c(0x20e)]!==undefined)return this[_0x28081c(0x91b)]['softDamageCap'];let _0x57973d=VisuMZ[_0x28081c(0x6ce)][_0x28081c(0xb41)][_0x28081c(0xb75)]['DefaultSoftCap'];const _0x516f14=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x458f10=this[_0x28081c(0xaf0)]()[_0x28081c(0x78)](_0x8ca5ec=>_0x8ca5ec&&_0x8ca5ec[_0x28081c(0xaf1)][_0x28081c(0x2c1)](_0x516f14)?Number(RegExp['$1'])/0x64:0x0);return _0x57973d=_0x458f10[_0x28081c(0x10b)]((_0x370d33,_0x2ea5f4)=>_0x370d33+_0x2ea5f4,_0x57973d),this[_0x28081c(0x91b)][_0x28081c(0x20e)]=_0x57973d,this[_0x28081c(0x91b)]['softDamageCap'][_0x28081c(0x88c)](0.01,0x1);},VisuMZ['BattleCore'][_0x4b7b09(0x53c)]=Game_BattlerBase['prototype'][_0x4b7b09(0xb6a)],Game_BattlerBase[_0x4b7b09(0x4d2)][_0x4b7b09(0xb6a)]=function(){const _0x2996fb=_0x4b7b09;VisuMZ[_0x2996fb(0x6ce)][_0x2996fb(0x53c)][_0x2996fb(0x4ad)](this),SceneManager[_0x2996fb(0x18e)]()&&this['requestMotion'](_0x2996fb(0x5c2));},Game_BattlerBase[_0x4b7b09(0x4d2)][_0x4b7b09(0xe0)]=function(){const _0x60bfbd=_0x4b7b09;if(!SceneManager[_0x60bfbd(0x18e)]())return null;if(!SceneManager[_0x60bfbd(0x5ae)][_0x60bfbd(0xa5b)])return null;return SceneManager['_scene'][_0x60bfbd(0xa5b)][_0x60bfbd(0xabc)](this);},Game_BattlerBase[_0x4b7b09(0x4d2)][_0x4b7b09(0x268)]=function(){const _0x5b31df=_0x4b7b09;return VisuMZ[_0x5b31df(0x6ce)][_0x5b31df(0xb41)][_0x5b31df(0x5dc)][_0x5b31df(0x6c1)];},Game_BattlerBase[_0x4b7b09(0x4d2)][_0x4b7b09(0xa52)]=function(){const _0x3156a2=_0x4b7b09;return VisuMZ[_0x3156a2(0x6ce)]['Settings'][_0x3156a2(0x5dc)][_0x3156a2(0x58a)];},Game_BattlerBase[_0x4b7b09(0x4d2)][_0x4b7b09(0x186)]=function(){const _0x4d7185=_0x4b7b09;if(this[_0x4d7185(0xb0c)]&&this[_0x4d7185(0xb0c)]()){if(_0x4d7185(0xa8)!==_0x4d7185(0xa8)){if(!_0x242084['isSceneBattle']())return;_0x4e8877[_0x4d7185(0x92)](_0x3bbead,_0x2fe3dd);const _0x13d953=_0x32adaf['_action'],_0xb79645={'arPenRate':_0x442081[_0x4d7185(0x49d)],'arPenFlat':_0x2eb759[_0x4d7185(0x83f)],'arRedRate':_0x185671[_0x4d7185(0x7d9)],'arRedFlat':_0x237331[_0x4d7185(0x824)]};_0x13d953[_0x4d7185(0xa5)]=_0xb79645;}else return VisuMZ[_0x4d7185(0x6ce)][_0x4d7185(0xb41)][_0x4d7185(0x5dc)][_0x4d7185(0x315)];}else return VisuMZ['BattleCore']['Settings']['Enemy'][_0x4d7185(0x315)];},Game_BattlerBase[_0x4b7b09(0x4d2)][_0x4b7b09(0x46f)]=function(){return!![];},Game_BattlerBase[_0x4b7b09(0x4d2)]['battleUIOffsetX']=function(){return 0x0;},Game_BattlerBase[_0x4b7b09(0x4d2)][_0x4b7b09(0x221)]=function(){return 0x0;},Game_BattlerBase['prototype'][_0x4b7b09(0x930)]=function(_0xf91ab2){const _0x4b4f72=_0x4b7b09;if(!_0xf91ab2)return 0x0;let _0x52b8dc=0x0;const _0x19a8d8=_0xf91ab2['note'];return _0x19a8d8[_0x4b4f72(0x2c1)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x52b8dc+=Number(RegExp['$1'])),_0x19a8d8[_0x4b4f72(0x2c1)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x52b8dc+=Number(RegExp['$1'])),_0x52b8dc;},Game_BattlerBase[_0x4b7b09(0x4d2)]['createBattleUIOffsetY']=function(_0x5dc877){const _0x350dc5=_0x4b7b09;if(!_0x5dc877)return 0x0;let _0x29a0ff=0x0;const _0x2fe2ea=_0x5dc877[_0x350dc5(0xaf1)];return _0x2fe2ea[_0x350dc5(0x2c1)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x350dc5(0x9a5)===_0x350dc5(0x1ce)?_0x233ef3['setValue'](_0x501249[_0x350dc5(0x91c)],!![]):_0x29a0ff+=Number(RegExp['$1'])),_0x2fe2ea[_0x350dc5(0x2c1)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x29a0ff+=Number(RegExp['$2'])),_0x29a0ff;},VisuMZ['BattleCore'][_0x4b7b09(0xa93)]=Game_BattlerBase['prototype'][_0x4b7b09(0xa03)],Game_BattlerBase[_0x4b7b09(0x4d2)]['isStateResist']=function(_0x1f96c7){const _0x4e8fb9=_0x4b7b09;if(_0x1f96c7===this['deathStateId']()&&this['isImmortal']()){if('rjugq'===_0x4e8fb9(0x24a))return!![];else _0x2ef4cc[_0x4e8fb9(0x5fd)](_0x122ab8);}return VisuMZ[_0x4e8fb9(0x6ce)][_0x4e8fb9(0xa93)][_0x4e8fb9(0x4ad)](this,_0x1f96c7);},Game_BattlerBase[_0x4b7b09(0x4d2)][_0x4b7b09(0x846)]=function(){const _0x5e54aa=_0x4b7b09;return this[_0x5e54aa(0xaae)];},Game_BattlerBase[_0x4b7b09(0x4d2)][_0x4b7b09(0xac5)]=function(_0x34ff92){const _0x298a1a=_0x4b7b09;if(_0x34ff92){if(_0x298a1a(0x630)===_0x298a1a(0x630))this[_0x298a1a(0x5a5)]();else{let _0x39db95=_0x3f0663[_0x298a1a(0x7b)][_0x317a8e];if(!_0x39db95)return;let _0x2f5de5=_0x39db95;const _0x251ccb=this['commandStyle']();if(_0x251ccb==='text')_0x2f5de5=_0x2f5de5[_0x298a1a(0x586)](/\x1I\[(\d+)\]/gi,''),_0x2f5de5=_0x2f5de5[_0x298a1a(0x586)](/\\I\[(\d+)\]/gi,'');else{if(!_0x39db95[_0x298a1a(0x2c1)](/\\I\[(\d+)\]/i)){const _0x2a71dc=_0x5755e4['VisuMZ_1_SkillsStatesCore']?_0x98494a[_0x298a1a(0x791)][_0x298a1a(0xb41)][_0x298a1a(0x2b1)]:_0xc6ad5e[_0x298a1a(0x6ce)][_0x298a1a(0xb41)][_0x298a1a(0x995)],_0x7ce6e5=_0x44e6ed[_0x298a1a(0x2a4)]['includes'](_0x242b6a),_0x3d31aa=_0x7ce6e5?_0x2a71dc[_0x298a1a(0xadc)]:_0x2a71dc[_0x298a1a(0xa81)];_0x2f5de5=_0x298a1a(0x38e)[_0x298a1a(0xace)](_0x3d31aa,_0x39db95);}}this[_0x298a1a(0x7d7)](_0x2f5de5,_0x298a1a(0x28d),!![],_0x385ffc);}}else this[_0x298a1a(0x418)]();},Game_BattlerBase[_0x4b7b09(0x4d2)][_0x4b7b09(0x5a5)]=function(){const _0x7bb0f4=_0x4b7b09;if(this[_0x7bb0f4(0x44c)]())return;this['_immortal']=!![],this['_deathStateApplied']=![];},Game_BattlerBase['prototype'][_0x4b7b09(0x418)]=function(){const _0x1a0c19=_0x4b7b09,_0x25ab4f=this['isAlive']();this['_immortal']=![],_0x25ab4f&&this[_0x1a0c19(0x193)]&&(_0x1a0c19(0x99f)===_0x1a0c19(0xaa2)?this[_0x1a0c19(0xa95)]():this[_0x1a0c19(0xb6a)]()),this[_0x1a0c19(0x193)]=![],this[_0x1a0c19(0x75a)](),this[_0x1a0c19(0x44c)]()&&_0x25ab4f&&(this[_0x1a0c19(0x9af)](),this[_0x1a0c19(0x16e)]());},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x60b)]=Game_Action[_0x4b7b09(0x4d2)]['numRepeats'],Game_Action['prototype'][_0x4b7b09(0x1d2)]=function(){const _0x206679=_0x4b7b09;if(this[_0x206679(0x6e3)]()){if(_0x206679(0x1c8)===_0x206679(0xa29))_0x599650[_0x206679(0x6ce)][_0x206679(0x164)][_0x206679(0x4ad)](this,_0x473dff),this['callNextMethod']();else return VisuMZ[_0x206679(0x6ce)]['Game_Action_numRepeats']['call'](this);}else{if(_0x206679(0xaf8)!==_0x206679(0xaf8))this[_0x206679(0x1ee)](_0x4a41ed)?_0x2b08b2[_0x206679(0x4dc)]():this[_0x206679(0x13f)](_0x5ea5f1,_0x2d76cb,_0x5ec7c9);else return 0x0;}},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x89d)]=Game_Action['prototype'][_0x4b7b09(0x5a1)],Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x5a1)]=function(){const _0xe5a801=_0x4b7b09;this[_0xe5a801(0xb2a)]()&&this['subject']()[_0xe5a801(0x415)]()?VisuMZ[_0xe5a801(0x6ce)][_0xe5a801(0x89d)]['call'](this):this[_0xe5a801(0x945)]();},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xb5e)]=Game_BattlerBase[_0x4b7b09(0x4d2)]['canAttack'],Game_BattlerBase[_0x4b7b09(0x4d2)][_0x4b7b09(0x415)]=function(){const _0x31f756=_0x4b7b09;if(!this[_0x31f756(0x5e8)]())return![];return VisuMZ[_0x31f756(0x6ce)]['Game_BattlerBase_canAttack']['call'](this);},Game_BattlerBase[_0x4b7b09(0x4d2)]['canAttackBattleCore']=function(){const _0x2bb7d6=_0x4b7b09;for(const _0x6061fe of this[_0x2bb7d6(0xaf0)]()){if(!_0x6061fe)continue;if(_0x6061fe[_0x2bb7d6(0xaf1)][_0x2bb7d6(0x2c1)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xab)]=Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x6fa)],Game_Action[_0x4b7b09(0x4d2)][_0x4b7b09(0x6fa)]=function(){const _0x2cb881=_0x4b7b09;this[_0x2cb881(0xb2a)]()[_0x2cb881(0xab7)]()&&VisuMZ[_0x2cb881(0x6ce)]['Game_Action_setGuard']['call'](this);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x3e1)]=Game_BattlerBase[_0x4b7b09(0x4d2)][_0x4b7b09(0xab7)],Game_BattlerBase[_0x4b7b09(0x4d2)][_0x4b7b09(0xab7)]=function(){const _0x15425e=_0x4b7b09;if(!this[_0x15425e(0x78a)]())return![];return VisuMZ[_0x15425e(0x6ce)][_0x15425e(0x3e1)][_0x15425e(0x4ad)](this);},Game_BattlerBase[_0x4b7b09(0x4d2)][_0x4b7b09(0x78a)]=function(){const _0x11002d=_0x4b7b09;for(const _0x46dc15 of this['traitObjects']()){if(_0x11002d(0x68b)!==_0x11002d(0x980)){if(!_0x46dc15)continue;if(_0x46dc15[_0x11002d(0xaf1)][_0x11002d(0x2c1)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}else return!![];}return!![];},Game_BattlerBase['prototype'][_0x4b7b09(0xc2)]=function(){const _0x276aba=_0x4b7b09;for(const _0x2f69d1 of this[_0x276aba(0xaf0)]()){if(!_0x2f69d1)continue;if(_0x2f69d1[_0x276aba(0xaf1)][_0x276aba(0x2c1)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0xb40)]=function(){const _0x276f43=_0x4b7b09;return VisuMZ[_0x276f43(0x6ce)][_0x276f43(0xb41)][_0x276f43(0xeb)][_0x276f43(0x3df)];},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xc3)]=Game_Battler['prototype'][_0x4b7b09(0x690)],Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x690)]=function(){const _0x54f550=_0x4b7b09;if(SceneManager[_0x54f550(0x18e)]()){if(_0x54f550(0x3bb)!==_0x54f550(0x3bb)){if(!_0x3b4dc3['isSceneBattle']())return;if(!_0x4b26dc[_0x54f550(0x3a0)])return;if(!_0x37a261['isFTB']())return;_0x211005[_0x54f550(0x92)](_0x5e5dbb,_0x122a96);const _0x56c33c=_0x111c09[_0x54f550(0xb27)];_0x234c35[_0x54f550(0xb2)]&&_0x533986['_subject'][_0x54f550(0xafd)]()[_0x54f550(0x499)](_0x56c33c);}else{if(BattleManager[_0x54f550(0x54c)]()){if(_0x54f550(0xae6)===_0x54f550(0x97e))_0x5cbd08[_0x54f550(0x96e)]([this],_0x5c9b90);else{if(this['turnCount']()<=0x0)return;}}else{if($gameTroop['turnCount']()<=0x0){if(_0x54f550(0x507)===_0x54f550(0x81e))_0xf9a803[_0x54f550(0x680)]=_0x1e04a8[_0x54f550(0x82f)](_0x5e5c39);else return;}}}}if(SceneManager[_0x54f550(0x18e)]()&&BattleManager[_0x54f550(0x54c)]()&&this[_0x54f550(0xa73)]===Graphics[_0x54f550(0x4c8)])return;this[_0x54f550(0xa73)]=Graphics[_0x54f550(0x4c8)],SceneManager[_0x54f550(0x18e)]()&&this[_0x54f550(0x2c2)]('PreRegenerateJS'),VisuMZ[_0x54f550(0x6ce)]['Game_Battler_regenerateAll'][_0x54f550(0x4ad)](this),SceneManager[_0x54f550(0x18e)]()&&(this[_0x54f550(0x736)](),this[_0x54f550(0x2c2)](_0x54f550(0x398)));},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x736)]=function(){const _0x5c8a1a=_0x4b7b09;if(SceneManager[_0x5c8a1a(0x18e)]())for(const _0x5cceba of this[_0x5c8a1a(0xaf0)]()){if(_0x5c8a1a(0x51f)===_0x5c8a1a(0x51f)){if(!_0x5cceba)continue;this[_0x5c8a1a(0x742)](_0x5cceba);}else return this['_damagePopupArray'][_0x5c8a1a(0xaab)]();}},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x742)]=function(_0x57f398){const _0x19cff9=_0x4b7b09;if(!Imported[_0x19cff9(0x490)])return;if(!SceneManager['isSceneBattle']())return;if(this[_0x19cff9(0x44c)]())return;if(this[_0x19cff9(0x182)]())return;if(_0x57f398[_0x19cff9(0xaf1)][_0x19cff9(0x2c1)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){if(_0x19cff9(0x2f2)!==_0x19cff9(0x887)){const _0x12ae92=Number(RegExp['$1']);$gameTemp[_0x19cff9(0x96e)]([this],_0x12ae92,![],![]);}else this[_0x19cff9(0x20d)]=_0x21fa75,this[_0x19cff9(0x8da)]&&(this[_0x19cff9(0x1c0)]=0x0,this['_currentAngle']=0x0);}},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x74f)]=Game_Battler[_0x4b7b09(0x4d2)]['startTpbTurn'],Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x8ba)]=function(){const _0x3844cb=_0x4b7b09;this['processBattleCoreJS']('PreStartTurnJS'),VisuMZ[_0x3844cb(0x6ce)]['Game_Battler_startTpbTurn'][_0x3844cb(0x4ad)](this),this['processBattleCoreJS'](_0x3844cb(0x4c4));},VisuMZ[_0x4b7b09(0x6ce)]['Game_Battler_onTurnEnd']=Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x85a)],Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x85a)]=function(){const _0x3604cb=_0x4b7b09;this[_0x3604cb(0x2c2)](_0x3604cb(0x556)),VisuMZ[_0x3604cb(0x6ce)][_0x3604cb(0x8f2)]['call'](this),this[_0x3604cb(0x2c2)](_0x3604cb(0x7eb));},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x2c2)]=function(_0x57f824){const _0x4dccd1=_0x4b7b09;if(this['_tempBattler']||this[_0x4dccd1(0x576)])return;const _0x432361=VisuMZ[_0x4dccd1(0x6ce)][_0x4dccd1(0xb41)]['Mechanics'];if(_0x432361[_0x57f824])_0x432361[_0x57f824][_0x4dccd1(0x4ad)](this);for(const _0x1d1c71 of this[_0x4dccd1(0xaf0)]()){if(!_0x1d1c71)continue;key=VisuMZ[_0x4dccd1(0x6ce)][_0x4dccd1(0x64c)](_0x1d1c71,_0x57f824),VisuMZ[_0x4dccd1(0x6ce)]['JS'][key]&&VisuMZ[_0x4dccd1(0x6ce)]['JS'][key][_0x4dccd1(0x4ad)](this,this,this,_0x1d1c71,0x0);}},Game_Battler['prototype'][_0x4b7b09(0x381)]=function(){const _0x2b3dba=_0x4b7b09;return VisuMZ[_0x2b3dba(0x6ce)]['Settings'][_0x2b3dba(0x5dc)][_0x2b3dba(0xa8d)]||![];},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0xa2f)]=function(){const _0x4db2a6=_0x4b7b09;if(this[_0x4db2a6(0xa26)]()){if(this[_0x4db2a6(0x381)]()){if(this[_0x4db2a6(0x7c1)]['some'](_0x162f72=>_0x162f72['item']()&&_0x162f72[_0x4db2a6(0x8ca)]()))return!![];}else{if(_0x4db2a6(0x36b)!==_0x4db2a6(0x36b))return this[_0x4db2a6(0x94d)]>0x0;else{if(this['_actions'][_0x4db2a6(0x31e)](_0x592a6b=>_0x592a6b[_0x4db2a6(0x6e3)]()&&_0x592a6b[_0x4db2a6(0x43b)]())){if(_0x4db2a6(0x62a)!==_0x4db2a6(0x62a))this[_0x4db2a6(0x2d1)]['visible']=![];else return!![];}}}}if(BattleManager[_0x4db2a6(0x54c)]()&&this[_0x4db2a6(0x664)]===_0x4db2a6(0x605)){if(this['chantStyle']()){if('IuRDz'==='IuRDz')return this[_0x4db2a6(0x335)]()&&this[_0x4db2a6(0x335)]()[_0x4db2a6(0x6e3)]()&&this['currentAction']()['isMagical']();else _0xd70895['performCastAnimation'](_0x148254),this[_0x4db2a6(0x9bd)]();}else{if(_0x4db2a6(0x794)===_0x4db2a6(0x773))_0x33e09d=_0x528249(_0x196c3c['$1']),_0x1bff17=_0x40d086(_0x40acd5['$2']);else return this[_0x4db2a6(0x335)]()&&this['currentAction']()[_0x4db2a6(0x6e3)]()&&this[_0x4db2a6(0x335)]()[_0x4db2a6(0x43b)]();}}return![];},Game_Battler['prototype']['isCharging']=function(){const _0x3d1036=_0x4b7b09;if(BattleManager['isTpb']()&&this[_0x3d1036(0x664)]===_0x3d1036(0x605)){if(this['chantStyle']()){if('MevIj'!==_0x3d1036(0x96c))return this[_0x3d1036(0x335)]()&&this[_0x3d1036(0x335)]()[_0x3d1036(0x6e3)]()&&!this['currentAction']()[_0x3d1036(0x8ca)]();else{const _0x52601d=_0x256dd7[_0x3d1036(0x753)]('['+_0x10967f['$1'][_0x3d1036(0x2c1)](/\d+/g)+']');for(const _0x33857a of _0x52601d){if(_0x1ff7ff['value'](_0x33857a))return!![];}return![];}}else{if(_0x3d1036(0x14d)!==_0x3d1036(0x14d))this[_0x3d1036(0x1f0)]=_0x3d1036(0xabd);else return this[_0x3d1036(0x335)]()&&this[_0x3d1036(0x335)]()[_0x3d1036(0x6e3)]()&&!this['currentAction']()[_0x3d1036(0x43b)]();}}return![];},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x4ec)]=Game_Battler[_0x4b7b09(0x4d2)]['clearDamagePopup'],Game_Battler[_0x4b7b09(0x4d2)]['clearDamagePopup']=function(){const _0x30fe92=_0x4b7b09;VisuMZ[_0x30fe92(0x6ce)][_0x30fe92(0x4ec)][_0x30fe92(0x4ad)](this),this[_0x30fe92(0x7b4)]=[];},Game_Battler['prototype'][_0x4b7b09(0xb1a)]=function(){const _0x2d11c0=_0x4b7b09;if(!this[_0x2d11c0(0x7b4)])this[_0x2d11c0(0x69e)]();return this['_damagePopupArray'][_0x2d11c0(0x8db)]>0x0;},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x20c)]=function(){const _0x5eca61=_0x4b7b09;if(!SceneManager[_0x5eca61(0x18e)]())return;if(BattleManager[_0x5eca61(0xade)]())return;if(!this[_0x5eca61(0x7b4)])this[_0x5eca61(0x69e)]();this[_0x5eca61(0x4eb)]();const _0x2feba3=this[_0x5eca61(0xe0)]();if(_0x2feba3)_0x2feba3[_0x5eca61(0x89c)]();},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x4eb)]=function(){const _0x1acfbc=_0x4b7b09,_0xfd37f3=this['result']();if(_0xfd37f3[_0x1acfbc(0x660)]||_0xfd37f3[_0x1acfbc(0x7f7)]){const _0x497d5c=JsonEx[_0x1acfbc(0x9fb)](_0xfd37f3);_0x497d5c[_0x1acfbc(0x618)]=![],_0x497d5c['mpDamage']=0x0,this[_0x1acfbc(0x7b4)][_0x1acfbc(0x410)](_0x497d5c);}if(_0xfd37f3['hpAffected']){const _0x35db12=JsonEx[_0x1acfbc(0x9fb)](_0xfd37f3);_0x35db12['missed']=![],_0x35db12['evaded']=![],_0x35db12[_0x1acfbc(0x147)]=0x0,this['_damagePopupArray'][_0x1acfbc(0x410)](_0x35db12);}if(_0xfd37f3['mpDamage']!==0x0){const _0x37159d=JsonEx[_0x1acfbc(0x9fb)](_0xfd37f3);_0x37159d[_0x1acfbc(0x660)]=![],_0x37159d['evaded']=![],_0x37159d[_0x1acfbc(0x618)]=![],this['_damagePopupArray']['push'](_0x37159d);}},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x282)]=function(){const _0xb6c793=_0x4b7b09;if(!this[_0xb6c793(0x7b4)])this[_0xb6c793(0x69e)]();if(VisuMZ[_0xb6c793(0x6ce)][_0xb6c793(0xb41)][_0xb6c793(0xb75)][_0xb6c793(0x60a)]){if(_0xb6c793(0x9ea)==='oSvPQ')return this[_0xb6c793(0x7b4)][_0xb6c793(0xaab)]();else this[_0xb6c793(0x31a)]()?delete _0x444dd1[_0xb6c793(0xa05)][_0xb6c793(0xb57)]:_0x5e1f17[_0xb6c793(0x5b4)](_0xb6c793(0xb57),this[_0xb6c793(0x584)][_0xb6c793(0x165)](this));}else{if(_0xb6c793(0x6f3)==='dpaJQ')return this[_0xb6c793(0x7b4)][_0xb6c793(0x41a)]();else _0xa316cb+=_0x40e91b,_0x3278a1+=_0x136ece[_0xb6c793(0xb0c)]()?-_0x1139b5:_0xaf5699;}},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x21c)]=function(_0x26183f,_0x4ad419){const _0x838b76=_0x4b7b09;if(!SceneManager[_0x838b76(0x18e)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this[_0x838b76(0xe0)]())return;if(_0x26183f['length']<=0x0)return;_0x4ad419=_0x4ad419||{},_0x4ad419[_0x838b76(0x590)]=_0x4ad419[_0x838b76(0x590)]||_0x838b76(0x10f),_0x4ad419[_0x838b76(0x438)]=_0x4ad419[_0x838b76(0x438)]||[0x0,0x0,0x0,0x0],_0x4ad419[_0x838b76(0xa40)]=_0x4ad419[_0x838b76(0xa40)]||0x0,this[_0x838b76(0xe0)]()[_0x838b76(0x21c)](_0x26183f,_0x4ad419);},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x207)]=function(_0x5bc4e4,_0x147671,_0x3b552b){const _0x1f67e2=_0x4b7b09;if(!SceneManager[_0x1f67e2(0x18e)]())return;if(BattleManager[_0x1f67e2(0xade)]())return;if(!this[_0x1f67e2(0xe0)]())return;if(_0x147671[_0x1f67e2(0x8db)]<=0x0)return;_0x3b552b=_0x3b552b||{},_0x3b552b[_0x1f67e2(0x590)]=_0x3b552b[_0x1f67e2(0x590)]||_0x1f67e2(0x10f),_0x3b552b[_0x1f67e2(0x438)]=_0x3b552b[_0x1f67e2(0x438)]||[0x0,0x0,0x0,0x0],_0x3b552b['flashDuration']=_0x3b552b['flashDuration']||0x0,this['battler']()[_0x1f67e2(0x207)](_0x5bc4e4,_0x147671,_0x3b552b);},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x866)]=function(){const _0x26897d=_0x4b7b09;if(this[_0x26897d(0x182)]())return![];if(this[_0x26897d(0x23d)]()&&this[_0x26897d(0x990)]())return!![];if(this['isEnemy']()&&this[_0x26897d(0x6d2)]()){if(_0x26897d(0xa72)!=='lCeak'){if(this[_0x26897d(0x44c)]()&&this[_0x26897d(0x305)]())return![];}else this[_0x26897d(0x1a9)](_0x31c571,_0x48cfd1,_0x57ab07);}else{if(this[_0x26897d(0x44c)]())return![];}return!![];},VisuMZ[_0x4b7b09(0x6ce)]['Game_Battler_clearMotion']=Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x4b2)],Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x4b2)]=function(){const _0x27fff4=_0x4b7b09;VisuMZ[_0x27fff4(0x6ce)][_0x27fff4(0xa5f)]['call'](this),this[_0x27fff4(0xb7d)]();},Game_Battler[_0x4b7b09(0x4d2)]['canBattlerMove']=function(){return!![];},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x6ec)]=function(){return![];},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x867)]=Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x90c)],Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x90c)]=function(_0x3076f9){const _0x3cf4d6=_0x4b7b09;VisuMZ[_0x3cf4d6(0x6ce)]['Game_Battler_onBattleStart'][_0x3cf4d6(0x4ad)](this,_0x3076f9),this[_0x3cf4d6(0xb8b)](_0x3076f9),this['clearDamagePopup']();},Game_Battler['prototype'][_0x4b7b09(0xb8b)]=function(_0x46dacf){const _0x5926c3=_0x4b7b09;this['setBattlerFlip'](![]),this[_0x5926c3(0x7bf)]=undefined,this[_0x5926c3(0x7e3)]=undefined;},VisuMZ['BattleCore'][_0x4b7b09(0xa64)]=Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x917)],Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x917)]=function(){const _0x58529f=_0x4b7b09;VisuMZ[_0x58529f(0x6ce)][_0x58529f(0xa64)][_0x58529f(0x4ad)](this),this[_0x58529f(0x77)]();},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x77)]=function(){const _0x24c644=_0x4b7b09;this[_0x24c644(0x7bf)]=undefined,this[_0x24c644(0x7e3)]=undefined;},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x8bd)]=Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x82e)],Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x82e)]=function(_0x48149c){const _0x3ea139=_0x4b7b09;VisuMZ[_0x3ea139(0x6ce)][_0x3ea139(0x8bd)][_0x3ea139(0x4ad)](this,_0x48149c);if(!_0x48149c[_0x3ea139(0x4d5)]()){if(_0x3ea139(0x297)!==_0x3ea139(0x297))return _0x33495f[_0x3ea139(0x5ae)][_0x3ea139(0x1f7)]()===_0x3ea139(0xad5)?_0x288ccb[_0x3ea139(0x6ce)][_0x3ea139(0xb41)][_0x3ea139(0x8e4)][_0x3ea139(0x4d9)]:_0x3cf1cd[_0x3ea139(0x6ce)][_0x3ea139(0xb41)][_0x3ea139(0x8e4)][_0x3ea139(0x470)];else{const _0xb8d9a2=this[_0x3ea139(0xe0)]();_0xb8d9a2&&(_0x3ea139(0x396)==='tiJYB'?_0xb8d9a2[_0x3ea139(0x157)]():(this[_0x3ea139(0x6c7)]=this[_0x3ea139(0x9aa)],this['_currentActor']['_tpbState']='charged',this[_0x3ea139(0x366)]=!![],this[_0x3ea139(0x9aa)]=null));}}this[_0x3ea139(0x551)](![]);},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x98a)]=function(){const _0x4ccf9c=_0x4b7b09,_0x599bfe=this['_flinched'];this[_0x4ccf9c(0xa08)]=![];if(BattleManager[_0x4ccf9c(0x223)]()&&this['isInputting']()){const _0x47a3d8=this[_0x4ccf9c(0xe0)]();if(_0x47a3d8&&_0x599bfe)_0x47a3d8['stepForward']();return;}const _0x22ae5d=this[_0x4ccf9c(0xe0)]();if(_0x22ae5d)_0x22ae5d['stepBack']();this['setBattlerFlip'](![]),this['requestMotionRefresh']();},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x169)]=function(_0x448d28){const _0x5cccfd=_0x4b7b09;if(_0x448d28['isAttack']()){if('ofbin'!==_0x5cccfd(0x2ac))this[_0x5cccfd(0x7d5)]();else{for(const _0x372d71 of _0x49a91e){_0x372d71[_0x5cccfd(0x2c1)](_0x18ec8f);const _0x3d09c3=_0x54802c(_0x15efde['$1'])[_0x5cccfd(0x7c9)](',')['map'](_0x5c9745=>_0x7b8617(_0x5c9745)[_0x5cccfd(0x2c5)]()[_0x5cccfd(0x612)]());_0x3de108=_0x4b8e41[_0x5cccfd(0xa28)](_0x3d09c3);}!_0x42ecc7[_0x5cccfd(0xaf1)][_0x5cccfd(0x2c1)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x59be6c['note']+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}}else{if(_0x448d28[_0x5cccfd(0x4d5)]())this[_0x5cccfd(0x42f)](_0x5cccfd(0x287));else{if(_0x448d28[_0x5cccfd(0x8ca)]())this['requestMotion'](_0x5cccfd(0x63c));else{if(_0x448d28['isSkill']()){if(_0x5cccfd(0x812)===_0x5cccfd(0x812))[0x1,0x2,0x5,0x6][_0x5cccfd(0x382)](_0x448d28[_0x5cccfd(0x6e3)]()[_0x5cccfd(0x28b)]['type'])?this[_0x5cccfd(0x7d5)]():this[_0x5cccfd(0x42f)](_0x5cccfd(0x28d));else return!this[_0x5cccfd(0x2e4)]()&&!this[_0x5cccfd(0x2b4)]();}else{if(_0x448d28[_0x5cccfd(0x2a7)]()){if(_0x5cccfd(0x908)!==_0x5cccfd(0x275))this[_0x5cccfd(0x42f)]('item');else return _0x1f2171[_0x5cccfd(0x18e)]()?(_0x1490fb[_0x5cccfd(0x5ae)][_0x5cccfd(0xa5b)]['changeBattlebacks'](_0x38de65[0x0],_0x19f028[0x1]),!![]):_0x510065['BattleCore'][_0x5cccfd(0x86a)][_0x5cccfd(0x4ad)](this,_0x103078);}}}}}},Game_Battler[_0x4b7b09(0x4d2)]['getAttackMotion']=function(){return $dataSystem['attackMotions'][0x0];},Game_Battler['prototype']['getAttackWeaponAnimationId']=function(){const _0x1ed894=_0x4b7b09,_0x59007f=this['getAttackMotion']();return _0x59007f?_0x59007f[_0x1ed894(0xa4d)]:0x0;},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x657)]=function(_0x235f50){const _0x8cca6=_0x4b7b09;if(!$gameSystem[_0x8cca6(0x43d)]())return;const _0x520d4f=this[_0x8cca6(0xe0)](),_0x72fe32=_0x235f50[_0x8cca6(0xe0)]();if(!_0x520d4f||!_0x72fe32)return;const _0x3f62da=_0x72fe32[_0x8cca6(0x226)],_0x2e5eb0=_0x72fe32[_0x8cca6(0x518)];this[_0x8cca6(0x868)](_0x3f62da,_0x2e5eb0,0x0,![],'Linear',-0x1),_0x520d4f[_0x8cca6(0xe4)]();const _0x38c877=VisuMZ['BattleCore'][_0x8cca6(0xb41)][_0x8cca6(0x56e)];let _0x224e18=(_0x72fe32['width']+_0x520d4f[_0x8cca6(0x839)])/0x2;_0x224e18*=this[_0x8cca6(0xb0c)]()?0x1:-0x1;let _0x287e3e=_0x38c877[_0x8cca6(0x8df)]*(this[_0x8cca6(0xb0c)]()?0x1:-0x1);_0x235f50['moveBattlerDistance'](_0x224e18,_0x287e3e,0x0,![],'Linear'),_0x72fe32[_0x8cca6(0xe4)]();},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x42f)]=function(_0x6889f8){const _0x5938d5=_0x4b7b09;if(SceneManager[_0x5938d5(0x18e)]()){const _0x29a2d2=this[_0x5938d5(0xe0)]();if(_0x29a2d2){if('iNfIn'!==_0x5938d5(0x70c))_0xca566c=_0x5ad135[_0x5938d5(0x93c)];else{_0x29a2d2[_0x5938d5(0x2c0)](_0x6889f8);if([_0x5938d5(0x81b),_0x5938d5(0xe7),'missile']['includes'](_0x6889f8)){if(_0x5938d5(0xabb)===_0x5938d5(0x38a)){_0x18461b[_0x5938d5(0x4d2)]['callUpdateHelp'][_0x5938d5(0x4ad)](this);if(this['_commandNameWindow'])this[_0x5938d5(0x440)]();}else this[_0x5938d5(0x6c4)]();}}}}this[_0x5938d5(0xb7d)]();},Game_Battler[_0x4b7b09(0x4d2)]['performWeaponAnimation']=function(){},Game_Battler['prototype'][_0x4b7b09(0x3d8)]=function(_0x330d42){const _0xedd8c=_0x4b7b09;if(SceneManager[_0xedd8c(0x18e)]()){if(_0xedd8c(0x101)!=='vcWru'){const _0x4b100b=_0x5e0435[_0xedd8c(0x6ce)][_0xedd8c(0xb41)]['Actor'],_0x5c3645=this[_0xedd8c(0x6a7)]&&this['_battler'][_0xedd8c(0xb0c)]()?0x1:-0x1,_0x101621=this['_baseX']-this[_0xedd8c(0x1e7)]+_0x5c3645*_0x4b100b[_0xedd8c(0x748)],_0x3f4536=this[_0xedd8c(0x518)]-this[_0xedd8c(0x14f)]+_0x5c3645*_0x4b100b[_0xedd8c(0xb01)],_0x46c106=_0x4b100b['FlinchDuration'];this[_0xedd8c(0x7fc)](_0x101621,_0x3f4536,_0x46c106);}else{const _0x405359=this['battler']();if(_0x405359)_0x405359[_0xedd8c(0x856)](_0x330d42);}}},Game_Battler[_0x4b7b09(0x4d2)]['startAttackWeaponAnimation']=function(){const _0x36cc6d=_0x4b7b09;if(SceneManager[_0x36cc6d(0x18e)]()){const _0x1bc99c=this[_0x36cc6d(0x56c)]();this[_0x36cc6d(0x3d8)](_0x1bc99c);}},Game_Battler[_0x4b7b09(0x4d2)]['performCastAnimation']=function(_0x43ce8a,_0xac57){const _0xd11787=_0x4b7b09;if(!_0x43ce8a)return;if(!_0x43ce8a[_0xd11787(0x6e3)]())return;if(_0x43ce8a[_0xd11787(0x50c)]())return;if(_0x43ce8a[_0xd11787(0x4d5)]())return;if(_0x43ce8a[_0xd11787(0x2a7)]())return;let _0x39b5ec=0x0;const _0x2aafd0=VisuMZ['BattleCore'][_0xd11787(0xb41)][_0xd11787(0x56e)],_0x5c8524=_0x43ce8a[_0xd11787(0x6e3)]()['note'];if(_0x5c8524[_0xd11787(0x2c1)](/<CAST ANIMATION: (\d+)>/i))'fiJVq'==='fiJVq'?_0x39b5ec=Number(RegExp['$1']):this[_0xd11787(0xb2a)]()[_0xd11787(0xab7)]()&&_0xc74f65['BattleCore'][_0xd11787(0xab)][_0xd11787(0x4ad)](this);else{if(_0x5c8524[_0xd11787(0x2c1)](/<NO CAST ANIMATION>/i)){if(_0xd11787(0x1ec)!==_0xd11787(0x1ec))_0xec3f25[_0xd11787(0x6ce)][_0xd11787(0x3e6)]['call'](this,_0x22c78);else return;}else{if(_0x43ce8a[_0xd11787(0xc8)]())_0x39b5ec=_0x2aafd0['CastCertain'];else{if(_0x43ce8a[_0xd11787(0x24d)]())_0x39b5ec=_0x2aafd0[_0xd11787(0xab3)];else _0x43ce8a[_0xd11787(0x8ca)]()&&(_0xd11787(0x8dd)===_0xd11787(0x8dd)?_0x39b5ec=_0x2aafd0[_0xd11787(0x2f0)]:_0x3326b2[_0xd11787(0x490)]?_0x1e52df['requestFauxAnimation']([this],_0x27474f):_0x5f27e3[_0xd11787(0x7bb)]([this],_0x3a19b7));}}}if(_0x39b5ec>0x0){if(_0xd11787(0x47a)===_0xd11787(0x47a))$gameTemp['requestAnimation']([this],_0x39b5ec,!!_0xac57);else{if(_0x27b1b1===_0x545171[_0xd11787(0x7fa)]()){let _0x335e20=_0x417e76['value1'];_0x335e20*=_0x5a15f5['stateRate'](_0x41bca2),_0x335e20*=this['subject']()[_0xd11787(0x85)](_0x566f9c),_0x335e20*=this['lukEffectRate'](_0x10647b),_0x1ae779['random']()<_0x335e20&&(_0x37fa7e[_0xd11787(0x193)]=!![],this['makeSuccess'](_0x3490eb));}}}},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x32f)]=function(){const _0x4ad553=_0x4b7b09;SoundManager[_0x4ad553(0x141)]();let _0x279e58=VisuMZ['BattleCore'][_0x4ad553(0xb41)]['ActionSequence']['ReflectAnimation'];if(_0x279e58>0x0){if(_0x4ad553(0x437)!==_0x4ad553(0x121))Imported[_0x4ad553(0x490)]?$gameTemp['requestFauxAnimation']([this],_0x279e58):$gameTemp[_0x4ad553(0x7bb)]([this],_0x279e58);else{this[_0x4ad553(0xfb)](),this[_0x4ad553(0x64a)](),this['updateSpin'](),this['updateFlip'](),_0x36b137[_0x4ad553(0x6ce)][_0x4ad553(0xcd)][_0x4ad553(0x4ad)](this),this[_0x4ad553(0x9dd)]();if(this[_0x4ad553(0x492)]===_0x149227)this[_0x4ad553(0x3ef)]();}}},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x531)]=Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x94)],Game_Battler['prototype']['performDamage']=function(){const _0x1192f8=_0x4b7b09;VisuMZ[_0x1192f8(0x6ce)][_0x1192f8(0x531)]['call'](this),this['performFlinch']();},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x14e)]=Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x250)],Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x250)]=function(){const _0x1ccead=_0x4b7b09;VisuMZ[_0x1ccead(0x6ce)]['Game_Battler_performMiss'][_0x1ccead(0x4ad)](this),this['performFlinch']();},VisuMZ['BattleCore'][_0x4b7b09(0x35b)]=Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x89a)],Game_Battler[_0x4b7b09(0x4d2)]['performEvasion']=function(){const _0x22a356=_0x4b7b09;VisuMZ[_0x22a356(0x6ce)][_0x22a356(0x35b)]['call'](this),this[_0x22a356(0xb13)]();},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0xb13)]=function(){const _0x169149=_0x4b7b09;if(!$gameSystem['isSideView']())return;if(this['_flinched'])return;this[_0x169149(0xa08)]=!![];const _0x1dbdb9=this[_0x169149(0xe0)]();if(_0x1dbdb9)_0x1dbdb9[_0x169149(0x1b0)]();},Game_Battler['prototype'][_0x4b7b09(0x16e)]=function(){const _0x388bfa=_0x4b7b09;if(this['isDead']()&&this[_0x388bfa(0xbb)]!==_0x388bfa(0x5c2)){if('UDuZw'!==_0x388bfa(0x6f6)){this[_0x388bfa(0x42f)](_0x388bfa(0x5c2));return;}else this[_0x388bfa(0x72a)]['show']();}if(this[_0x388bfa(0x44c)]()&&this[_0x388bfa(0xbb)]===_0x388bfa(0x5c2))return;if(!!this[_0x388bfa(0x359)])return;if(this[_0x388bfa(0xfc)]()){if(!this['isDuringNonLoopingMotion']()&&this!==BattleManager[_0x388bfa(0xb2)]){if(this['battler']())this[_0x388bfa(0xe0)]()['refreshMotion']();}this['clearFreezeMotion']();return;}if(this[_0x388bfa(0xbb)]===_0x388bfa(0xa9e))return;if(this[_0x388bfa(0xbb)]==='escape'&&!BattleManager['isInputting']())return;if(this[_0x388bfa(0xbb)]===_0x388bfa(0x287)&&!BattleManager[_0x388bfa(0x970)]())return;this[_0x388bfa(0x4b2)]();if(this['battler']()&&BattleManager[_0x388bfa(0x970)]()){this[_0x388bfa(0xe0)]()[_0x388bfa(0x7ac)](),this[_0x388bfa(0xb7d)]();return;}},Game_Enemy['prototype'][_0x4b7b09(0x8d0)]=function(){const _0x368f45=_0x4b7b09;if(!this[_0x368f45(0x6d2)]())return![];const _0x27abf4=this['battler']();if(!_0x27abf4)return![];const _0x15d0d7=_0x27abf4[_0x368f45(0x480)];if(!_0x15d0d7)return![];const _0x3eb65f=_0x15d0d7['_motion'];return _0x3eb65f&&!_0x3eb65f[_0x368f45(0x231)];},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x1bd)]=function(){const _0x5c9f1b=_0x4b7b09;return this[_0x5c9f1b(0x50e)];},Game_Battler['prototype'][_0x4b7b09(0x551)]=function(_0x1ec440){const _0x358163=_0x4b7b09;if(!$gameSystem['isSideView']())return;this[_0x358163(0x50e)]=_0x1ec440;const _0x4749e3=this[_0x358163(0xe0)]();if(_0x4749e3)_0x4749e3['updateFlip']();},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0xaed)]=function(_0x1e308a,_0x9a05d6,_0x3624b0){const _0x5a878d=_0x4b7b09;if(!$gameSystem[_0x5a878d(0x43d)]())return;const _0x1edd9a=this[_0x5a878d(0xe0)]();if(!_0x1edd9a)return;if(_0x1e308a===_0x1edd9a[_0x5a878d(0x226)])return;let _0xcb6f70=![];if(this[_0x5a878d(0xb0c)]()){if(_0x5a878d(0x62d)===_0x5a878d(0x5d0)){const _0x215a23=_0x1ad374[_0x36a35a];if(!_0x215a23)return'';let _0x40d834='';_0x40d834+=_0x215a23[_0x5a878d(0x639)];for(const _0x1ef4b2 of _0x215a23[_0x5a878d(0x4d7)]){for(const _0x24dbe6 of _0x1ef4b2['list']){[0x6c,0x198][_0x5a878d(0x382)](_0x24dbe6[_0x5a878d(0x936)])&&(_0x40d834+='\x0a',_0x40d834+=_0x24dbe6['parameters'][0x0]);}}return _0x40d834;}else{if(_0x1e308a>_0x1edd9a[_0x5a878d(0x226)])_0xcb6f70=!![];if(_0x1e308a<_0x1edd9a[_0x5a878d(0x226)])_0xcb6f70=![];}}else{if(this[_0x5a878d(0xfc)]()){if(_0x1e308a>_0x1edd9a[_0x5a878d(0x226)])_0xcb6f70=![];if(_0x1e308a<_0x1edd9a[_0x5a878d(0x226)])_0xcb6f70=!![];}};this[_0x5a878d(0x551)](_0x3624b0?!_0xcb6f70:_0xcb6f70),_0x1edd9a[_0x5a878d(0x6eb)]();},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0xa21)]=function(_0x327e26,_0xb7f0e4,_0x35e8b9,_0x56e155,_0x4e9a91){const _0x52157a=_0x4b7b09;if(!$gameSystem['isSideView']())return;const _0x4e8716=this[_0x52157a(0xe0)]();if(!_0x4e8716)return;if(_0x56e155)this['setBattlerFacePoint'](_0x327e26+_0x4e8716['_baseX'],_0xb7f0e4+_0x4e8716['_baseY'],![]);_0x327e26+=_0x4e8716[_0x52157a(0x226)]-_0x4e8716[_0x52157a(0x1e7)],_0xb7f0e4+=_0x4e8716['_baseY']-_0x4e8716[_0x52157a(0x14f)],_0x4e8716[_0x52157a(0x7fc)](_0x327e26,_0xb7f0e4,_0x35e8b9);if(Imported[_0x52157a(0x490)])_0x4e8716['setMoveEasingType'](_0x4e9a91||_0x52157a(0x5cb));},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x868)]=function(_0x4afc46,_0x6069c0,_0xf53b78,_0x4af98d,_0x4beb97,_0x491377){const _0x153414=_0x4b7b09;if(!$gameSystem[_0x153414(0x43d)]())return;const _0x33e92c=this[_0x153414(0xe0)]();if(!_0x33e92c)return;if(_0x4afc46===Infinity||_0x6069c0===Infinity)return;if(isNaN(_0x4afc46)||isNaN(_0x6069c0))return;_0x491377=_0x491377||0x0;if(_0x491377>0x0){if('VZqTI'!==_0x153414(0x280)){const _0x48eb4b=_0x153414(0x927)[_0x153414(0xace)](_0x568268);_0x470dba['BattleCore']['JS'][_0x9ea25c]=new _0x435c2d(_0x48eb4b);}else{if(_0x33e92c[_0x153414(0x226)]>_0x4afc46)_0x4afc46+=_0x33e92c['width']/0x2+_0x491377;if(_0x33e92c[_0x153414(0x226)]<_0x4afc46)_0x4afc46-=_0x33e92c[_0x153414(0x839)]/0x2+_0x491377;}}if(_0x4af98d)this[_0x153414(0xaed)](_0x4afc46,_0x6069c0,![]);_0x4afc46-=_0x33e92c['_homeX'],_0x6069c0-=_0x33e92c[_0x153414(0x14f)],_0x33e92c[_0x153414(0x7fc)](_0x4afc46,_0x6069c0,_0xf53b78);if(Imported[_0x153414(0x490)])_0x33e92c['setMoveEasingType'](_0x4beb97||'Linear');},Game_Battler['prototype']['moveBattlerHomeDistance']=function(_0x18046e,_0x42c6c4,_0x471070,_0x39313b,_0x2cece3){const _0x4c256c=_0x4b7b09;if(!$gameSystem['isSideView']())return;const _0x3c0594=this[_0x4c256c(0xe0)]();if(!_0x3c0594)return;if(_0x39313b)this[_0x4c256c(0xaed)](_0x18046e+_0x3c0594[_0x4c256c(0x226)],_0x42c6c4+_0x3c0594['_baseY'],![]);_0x18046e+=_0x3c0594[_0x4c256c(0x1e7)],_0x42c6c4+=_0x3c0594['_homeY'],_0x3c0594[_0x4c256c(0x655)](_0x18046e,_0x42c6c4,_0x471070,_0x2cece3),this['_forcedHomeX']=_0x18046e,this[_0x4c256c(0x7e3)]=_0x42c6c4;},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0xb39)]=function(_0x57c829,_0x4de4d5,_0x2567f9,_0x2d5961,_0x3c7331,_0x1e0f8b){const _0x34f923=_0x4b7b09;if(!$gameSystem[_0x34f923(0x43d)]())return;const _0x34383d=this[_0x34f923(0xe0)]();if(!_0x34383d)return;_0x1e0f8b=_0x1e0f8b||0x0;if(_0x1e0f8b>0x0){if(_0x34383d[_0x34f923(0x226)]>_0x57c829)_0x57c829+=_0x34383d[_0x34f923(0x839)]/0x2+_0x1e0f8b;if(_0x34383d[_0x34f923(0x226)]<_0x57c829)_0x57c829-=_0x34383d[_0x34f923(0x839)]/0x2+_0x1e0f8b;}if(_0x2d5961)this[_0x34f923(0xaed)](_0x57c829,_0x4de4d5,![]);_0x34383d['startHomeMove'](_0x57c829,_0x4de4d5,_0x2567f9,_0x3c7331),this[_0x34f923(0x7bf)]=_0x57c829,this['_forcedHomeY']=_0x4de4d5;},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0xadb)]=function(_0x529a24,_0x3de661,_0x24ff12){const _0x4ff721=_0x4b7b09;if(!$gameSystem[_0x4ff721(0x43d)]())return;const _0x2501f1=this['battler']();if(!_0x2501f1)return;_0x2501f1[_0x4ff721(0x95c)](_0x529a24,_0x3de661,_0x24ff12);},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0xe5)]=function(_0x424e4e,_0x5cae0a){const _0x550d6c=_0x4b7b09;if(!$gameSystem[_0x550d6c(0x43d)]())return;const _0x3633ba=this[_0x550d6c(0xe0)]();if(!_0x3633ba)return;_0x3633ba[_0x550d6c(0x573)](_0x424e4e,_0x5cae0a);},Game_Battler['prototype']['spinBattler']=function(_0x592fab,_0x5aa3ca,_0x4b9a54,_0x29dab4){const _0xe66adc=_0x4b7b09;if(!$gameSystem[_0xe66adc(0x43d)]())return;const _0x28fadd=this[_0xe66adc(0xe0)]();if(!_0x28fadd)return;_0x28fadd[_0xe66adc(0x598)](_0x592fab,_0x5aa3ca,_0x4b9a54,_0x29dab4);},Game_Battler[_0x4b7b09(0x4d2)]['skewBattler']=function(_0x1193db,_0x1db2a5,_0x5b6e79,_0x2f7e14){const _0x216187=_0x4b7b09;if(!$gameSystem[_0x216187(0x43d)]())return;const _0x53b0f0=this['battler']();if(!_0x53b0f0)return;this[_0x216187(0xb0c)]()&&(_0x1193db*=-0x1,_0x1db2a5*=-0x1),_0x53b0f0['startSkew'](_0x1193db,_0x1db2a5,_0x5b6e79,_0x2f7e14);},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x4ef)]=function(_0x438b0e,_0x38520e,_0x5ab145,_0x445114){if(!$gameSystem['isSideView']())return;const _0x1ec317=this['battler']();if(!_0x1ec317)return;_0x1ec317['startGrow'](_0x438b0e,_0x38520e,_0x5ab145,_0x445114);},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x82a)]=function(_0x4af79a,_0x1fa0da,_0x23c76e){if(!$gameSystem['isSideView']())return;const _0x2ec7ce=this['battler']();if(!_0x2ec7ce)return;_0x2ec7ce['startOpacity'](_0x4af79a,_0x1fa0da,_0x23c76e);},Game_Battler['prototype'][_0x4b7b09(0xb7d)]=function(){const _0x1e8e81=_0x4b7b09,_0x248270=!!this['_freezeMotionData'];this['_freezeMotionData']=undefined,_0x248270&&(this['requestMotionRefresh'](),this[_0x1e8e81(0xb1b)]());},Game_Battler['prototype'][_0x4b7b09(0xb1b)]=function(){const _0x30b729=_0x4b7b09;if(!SceneManager['isSceneBattle']())return;const _0x509f5a=this['battler']();if(!_0x509f5a)return;let _0x36810e=this['isActor']()?_0x509f5a[_0x30b729(0x9da)]:_0x509f5a[_0x30b729(0x480)][_0x30b729(0x9da)];if(_0x36810e){if(_0x30b729(0x76e)===_0x30b729(0x76e))_0x36810e[_0x30b729(0x97a)](0x0);else{const _0x1d6fb6=this['aliveMembers']();return _0x1d6fb6[_0x1e5c29[_0x30b729(0x56b)](_0x1d6fb6['length'])];}}},Game_Battler['prototype']['freezeMotion']=function(_0x48fb1f,_0x545917,_0x5a2bbf){const _0x851f9c=_0x4b7b09;if(this[_0x851f9c(0xfc)]()&&!this['hasSvBattler']())return;let _0x5f4a47=0x0,_0x5507b4=0x0;_0x48fb1f[_0x851f9c(0x2c1)](/ATTACK[ ](\d+)/i)&&(_0x5507b4=Number(RegExp['$1']),_0x5507b4--);if(this[_0x851f9c(0xb0c)]()){const _0x268e22=this['weapons']();_0x5f4a47=_0x268e22[_0x5507b4]?_0x268e22[_0x5507b4][_0x851f9c(0x162)]:0x0;}else this[_0x851f9c(0xfc)]()&&(_0x5f4a47=this[_0x851f9c(0x822)]()[_0x851f9c(0x162)]||0x0);const _0x1e53c7=$dataSystem[_0x851f9c(0x7d4)][_0x5f4a47];if(_0x48fb1f[_0x851f9c(0x2c1)](/attack/i)){if(_0x851f9c(0x69c)!==_0x851f9c(0x69c)){if(!_0xdf64bf[_0x851f9c(0x18e)]())return;_0x1e88ea[_0x851f9c(0x5ae)]['removeOnceParallelInterpreter'](this),_0x28fad5[_0x851f9c(0x4d2)]['terminate']['call'](this);}else _0x48fb1f=[_0x851f9c(0xe7),_0x851f9c(0x81b),_0x851f9c(0xb06)][_0x1e53c7[_0x851f9c(0x45e)]]||'swing';}this[_0x851f9c(0x359)]={'motionType':_0x48fb1f,'weaponImageId':_0x545917?_0x1e53c7[_0x851f9c(0xa4d)]:0x0,'pattern':_0x5a2bbf};},Game_Battler[_0x4b7b09(0x4d2)]['isFriendly']=function(_0x848454){const _0x3f96be=_0x4b7b09;if(!_0x848454)return![];return _0x848454[_0x3f96be(0xafd)]()===this[_0x3f96be(0xafd)]();},Game_Battler[_0x4b7b09(0x4d2)]['isOpponent']=function(_0x2e3ce6){const _0x1f4c75=_0x4b7b09;if(!_0x2e3ce6)return![];return _0x2e3ce6[_0x1f4c75(0x436)]()===this[_0x1f4c75(0xafd)]();},Game_Battler[_0x4b7b09(0x4d2)]['hasStaticSvBattler']=function(){return![];},Game_Actor['prototype']['hasStaticSvBattler']=function(){const _0x544d00=_0x4b7b09;return this[_0x544d00(0x82c)]()[_0x544d00(0x2c1)](/\$/i);},Game_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x97)]=function(){const _0x399fbc=_0x4b7b09;return this['hasSvBattler']()&&this[_0x399fbc(0x81f)]()['match'](/\$/i);},VisuMZ['BattleCore'][_0x4b7b09(0x191)]=Game_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x97a)],Game_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x97a)]=function(_0x135aa8){const _0x4b01a1=_0x4b7b09;VisuMZ[_0x4b01a1(0x6ce)][_0x4b01a1(0x191)][_0x4b01a1(0x4ad)](this,_0x135aa8),this[_0x4b01a1(0x316)]();},Game_Actor[_0x4b7b09(0x4d2)]['initBattlePortrait']=function(){const _0x4518d9=_0x4b7b09;this['_battlePortrait']='',this[_0x4518d9(0x724)]()&&this[_0x4518d9(0x724)]()[_0x4518d9(0xaf1)][_0x4518d9(0x2c1)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x4518d9(0x50f)]=String(RegExp['$1']));},Game_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x92b)]=function(){const _0x41df04=_0x4b7b09;if(this[_0x41df04(0xb53)]()!=='')return this[_0x41df04(0xb53)]();else{if(Imported['VisuMZ_1_MainMenuCore']&&this[_0x41df04(0x97b)]()!==''){if(_0x41df04(0x564)==='kIsLn')return this[_0x41df04(0x97b)]();else{let _0x420b42=_0x3eab87['value1'];_0x420b42*=_0x7350b6[_0x41df04(0x1a1)](_0x15a50c),_0x420b42*=this[_0x41df04(0xb2a)]()['attackStatesRate'](_0x5a1026),_0x420b42*=this[_0x41df04(0x7f3)](_0x197f1d),_0x2d2998[_0x41df04(0x7cd)]()<_0x420b42&&(_0x3faffb[_0x41df04(0x193)]=!![],this[_0x41df04(0x7ab)](_0x2f54aa));}}}return'';},Game_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0xb53)]=function(){const _0x272065=_0x4b7b09;if(this[_0x272065(0x50f)]===undefined)this['initBattlePortrait']();return this['_battlePortrait'];},Game_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x22c)]=function(_0x5b452d){const _0x4768ed=_0x4b7b09;if(this['_battlePortrait']===undefined)this[_0x4768ed(0x316)]();this[_0x4768ed(0x50f)]=_0x5b452d;if(SceneManager[_0x4768ed(0x18e)]()&&$gameParty['battleMembers']()[_0x4768ed(0x382)](this)){const _0x108ce7=SceneManager[_0x4768ed(0x5ae)][_0x4768ed(0x406)];_0x108ce7&&(_0x4768ed(0xb6e)!==_0x4768ed(0xb6e)?_0x344d64=_0x358372[this[_0x4768ed(0x7cb)][_0x4768ed(0xa47)]()]:_0x108ce7['refreshActorPortrait'](this));}},Game_Actor['prototype'][_0x4b7b09(0x857)]=function(){return!![];},Game_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x575)]=function(){const _0x414d12=_0x4b7b09;if(!this[_0x414d12(0x425)]()&&BattleManager[_0x414d12(0xb33)])return!![];return Game_Battler['prototype'][_0x414d12(0x575)][_0x414d12(0x4ad)](this);},VisuMZ[_0x4b7b09(0x6ce)]['Game_Actor_makeActionList']=Game_Actor['prototype'][_0x4b7b09(0x46e)],Game_Actor[_0x4b7b09(0x4d2)]['makeActionList']=function(){const _0x37b096=_0x4b7b09;if(BattleManager[_0x37b096(0xb33)]&&!ConfigManager[_0x37b096(0x2c9)]){if(_0x37b096(0x905)===_0x37b096(0x2e9))_0x780c39[_0x59b154]=null;else return this[_0x37b096(0x7d8)]();}else{if(_0x37b096(0x40f)===_0x37b096(0x15f))_0x24d5ce[_0x37b096(0x6ce)][_0x37b096(0x322)][_0x37b096(0x4ad)](this);else{return VisuMZ['BattleCore']['Game_Actor_makeActionList'][_0x37b096(0x4ad)](this);;}}},Game_Actor['prototype'][_0x4b7b09(0x7d8)]=function(){const _0x2d4c5e=_0x4b7b09,_0x442a8a=[],_0x1e1c2a=new Game_Action(this);return _0x1e1c2a[_0x2d4c5e(0x5a1)](),_0x442a8a[_0x2d4c5e(0x410)](_0x1e1c2a),_0x442a8a;},Game_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x429)]=function(){const _0x4b57f5=_0x4b7b09;return this[_0x4b57f5(0x5ec)]()[_0x4b57f5(0xaf1)][_0x4b57f5(0x2c1)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])['split'](/[\r\n]+/):VisuMZ[_0x4b57f5(0x6ce)][_0x4b57f5(0xb41)]['ActorCmd']['BattleCmdList'];},Game_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x268)]=function(){const _0x4c1b61=_0x4b7b09;if(this['_cache'][_0x4c1b61(0x76c)]!==undefined)return this['_cache']['svAnchorX'];return this[_0x4c1b61(0x724)]()[_0x4c1b61(0xaf1)][_0x4c1b61(0x2c1)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x4c1b61(0x91b)][_0x4c1b61(0x76c)]=eval(RegExp['$1']),this[_0x4c1b61(0x91b)]['svAnchorY']=eval(RegExp['$2'])):this[_0x4c1b61(0x91b)][_0x4c1b61(0x76c)]=Game_Battler[_0x4c1b61(0x4d2)][_0x4c1b61(0x268)][_0x4c1b61(0x4ad)](this),this['_cache'][_0x4c1b61(0x76c)];},Game_Actor[_0x4b7b09(0x4d2)]['svBattlerAnchorY']=function(){const _0x40a261=_0x4b7b09;if(this[_0x40a261(0x91b)]['svAnchorY']!==undefined)return this[_0x40a261(0x91b)][_0x40a261(0x772)];return this[_0x40a261(0x724)]()['note'][_0x40a261(0x2c1)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x40a261(0x91b)]['svAnchorX']=eval(RegExp['$1']),this[_0x40a261(0x91b)][_0x40a261(0x772)]=eval(RegExp['$2'])):this[_0x40a261(0x91b)]['svAnchorY']=Game_Battler['prototype'][_0x40a261(0xa52)][_0x40a261(0x4ad)](this),this['_cache']['svAnchorY'];},Game_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x186)]=function(){const _0x273d00=_0x4b7b09;if(this[_0x273d00(0x91b)][_0x273d00(0x512)]!==undefined)return this[_0x273d00(0x91b)][_0x273d00(0x512)];if(this['actor']()[_0x273d00(0xaf1)][_0x273d00(0x2c1)](/<SIDEVIEW SHOW SHADOW>/i))_0x273d00(0x2fe)==='RJiBV'?this[_0x273d00(0x91b)][_0x273d00(0x512)]=!![]:this['canMove']()&&_0x1e7755['BattleCore'][_0x273d00(0x5a8)][_0x273d00(0x4ad)](this,_0x5a74e1,_0x29e3c9,_0x542588);else this['actor']()[_0x273d00(0xaf1)][_0x273d00(0x2c1)](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x273d00(0x91b)][_0x273d00(0x512)]=![]:_0x273d00(0x70d)===_0x273d00(0x19e)?this[_0x273d00(0x42f)](_0x273d00(0xe7)):this[_0x273d00(0x91b)]['svShadow']=Game_Battler['prototype'][_0x273d00(0x186)][_0x273d00(0x4ad)](this);return this[_0x273d00(0x91b)][_0x273d00(0x512)];},Game_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x46f)]=function(){const _0x44b24d=_0x4b7b09;return VisuMZ[_0x44b24d(0x6ce)][_0x44b24d(0xb41)][_0x44b24d(0x5dc)][_0x44b24d(0xb15)];},Game_Actor['prototype'][_0x4b7b09(0x6c4)]=function(){const _0x1818cb=_0x4b7b09,_0x255752=this[_0x1818cb(0x7c0)](),_0xaf7937=_0x255752[0x0]?_0x255752[0x0][_0x1818cb(0x162)]:0x0,_0x109284=$dataSystem[_0x1818cb(0x7d4)][_0xaf7937];if(_0x109284){if(_0x1818cb(0x7d2)!=='uFoqX')this['startWeaponAnimation'](_0x109284['weaponImageId']);else{if(this['_dimmerSprite']){const _0x18383d=this['_dimmerSprite'][_0x1818cb(0x680)],_0x4b7cd0=this[_0x1818cb(0x839)]-0x8,_0x7eefc3=this[_0x1818cb(0xb65)],_0x54cabf=this[_0x1818cb(0x790)],_0x404022=_0x50ba20[_0x1818cb(0x3a2)](),_0x5d1f71=_0x1f6cbd[_0x1818cb(0x550)]();this[_0x1818cb(0x6e9)]['x']=0x4,_0x18383d[_0x1818cb(0x5ad)](_0x4b7cd0,_0x7eefc3),_0x18383d[_0x1818cb(0x232)](0x0,0x0,_0x4b7cd0,_0x54cabf,_0x5d1f71,_0x404022,!![]),_0x18383d['fillRect'](0x0,_0x54cabf,_0x4b7cd0,_0x7eefc3-_0x54cabf*0x2,_0x404022),_0x18383d[_0x1818cb(0x232)](0x0,_0x7eefc3-_0x54cabf,_0x4b7cd0,_0x54cabf,_0x404022,_0x5d1f71,!![]),this[_0x1818cb(0x6e9)]['setFrame'](0x0,0x0,_0x4b7cd0,_0x7eefc3);}}}},Game_Actor['prototype'][_0x4b7b09(0x552)]=function(_0xa858e5){const _0x4c214c=_0x4b7b09;Game_Battler[_0x4c214c(0x4d2)][_0x4c214c(0x552)][_0x4c214c(0x4ad)](this,_0xa858e5),this['performActionMotions'](_0xa858e5);},Game_Actor['prototype'][_0x4b7b09(0x3f2)]=function(){const _0x40fc5a=this['weapons'](),_0x28a6bb=_0x40fc5a[0x0]?_0x40fc5a[0x0]['wtypeId']:0x0;return $dataSystem['attackMotions'][_0x28a6bb];},Game_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x464)]=function(_0xc1069b){_0xc1069b=_0xc1069b||0x1,_0xc1069b--;const _0x135586=this['weapons']();return _0x135586[_0xc1069b]?_0x135586[_0xc1069b]['animationId']:0x0;},Game_Actor['prototype'][_0x4b7b09(0xa41)]=function(_0x1db319){const _0x1c12e4=_0x4b7b09;_0x1db319=_0x1db319||0x1,_0x1db319--;const _0x4b0afe=this[_0x1c12e4(0x7c0)](),_0x1ea83a=_0x4b0afe[_0x1db319]?_0x4b0afe[_0x1db319][_0x1c12e4(0x162)]:0x0;return $dataSystem[_0x1c12e4(0x7d4)][_0x1ea83a];},Game_Actor['prototype'][_0x4b7b09(0x97c)]=function(_0x4116fb){const _0x4c9367=_0x4b7b09;_0x4116fb=_0x4116fb||0x1,_0x4116fb--;const _0x55fa3e=this[_0x4c9367(0x7c0)](),_0x3c8898=_0x55fa3e[_0x4116fb]?_0x55fa3e[_0x4116fb][_0x4c9367(0x162)]:0x0,_0x9d292d=$dataSystem['attackMotions'][_0x3c8898];if(_0x9d292d){if(_0x4c9367(0x2e5)!==_0x4c9367(0x2e5)){const _0x1815a3=_0x1fd54d[_0x4c9367(0x6e3)]();this['push']('applyImmortal',_0x380916,_0x4093e7,![]),this[_0x4c9367(0x410)](_0x4c9367(0x485)),this[_0x4c9367(0x410)](_0x4c9367(0xa82)),this[_0x4c9367(0x410)](_0x4c9367(0x945)),this[_0x4c9367(0x410)](_0x4c9367(0x2d5),_0x1b57d6),this[_0x4c9367(0x410)](_0x4c9367(0xd1));}else{if(_0x9d292d[_0x4c9367(0x45e)]===0x0)_0x4c9367(0x641)!=='FtETY'?this[_0x4c9367(0x42f)](_0x4c9367(0xe7)):_0x1066f8['endAnimation']();else{if(_0x9d292d[_0x4c9367(0x45e)]===0x1){if(_0x4c9367(0x4b7)!==_0x4c9367(0x6e5))this['requestMotion'](_0x4c9367(0x81b));else{const _0x13d4d0=_0x395e54[0x0][_0x4c9367(0xace)](_0x1be3af[0x0]),_0x41c279=_0x46bf4b[0x1][_0x4c9367(0xace)](_0x2b1136[0x1]),_0x4428ee=new _0x39c8ac(_0x4e074b[_0x4c9367(0xace)](_0x41c279),'i');_0xf357d5[_0x13d4d0]=_0x4428ee;}}else _0x9d292d[_0x4c9367(0x45e)]===0x2&&this[_0x4c9367(0x42f)](_0x4c9367(0xb06));}this[_0x4c9367(0x3d8)](_0x9d292d[_0x4c9367(0xa4d)]);}}},Game_Battler['prototype'][_0x4b7b09(0x5fd)]=function(_0x43e253){const _0x3e4621=_0x4b7b09;this[_0x3e4621(0x566)]=_0x43e253||0x0,this['_cache']={};},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0xd9)]=function(){const _0x598ed6=_0x4b7b09;this['_activeWeaponSlot']=this['_activeWeaponSlot']||0x0,this[_0x598ed6(0x566)]++,this[_0x598ed6(0x91b)]={};},Game_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0xb28)]=function(){const _0xbbc976=_0x4b7b09;this[_0xbbc976(0x566)]=undefined,this[_0xbbc976(0x91b)]={};},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x542)]=Game_Actor[_0x4b7b09(0x4d2)]['equips'],Game_Actor[_0x4b7b09(0x4d2)]['equips']=function(){const _0x4c7823=_0x4b7b09;let _0x555228=VisuMZ[_0x4c7823(0x6ce)][_0x4c7823(0x542)][_0x4c7823(0x4ad)](this);if(this[_0x4c7823(0x7ff)])return _0x555228;if(this[_0x4c7823(0x566)]!==undefined){this[_0x4c7823(0x7ff)]=!![];const _0x201b3e=this[_0x4c7823(0x75f)]();for(let _0xe37ea1=0x0;_0xe37ea1<_0x201b3e[_0x4c7823(0x8db)];_0xe37ea1++){if(_0x4c7823(0x397)===_0x4c7823(0x397))_0x201b3e[_0xe37ea1]===0x1&&this[_0x4c7823(0x566)]!==_0xe37ea1&&(_0x555228[_0xe37ea1]=null);else{if(!_0x5de197[_0x4c7823(0x18e)]())return;if(!_0x44b6b0['VisuMZ_3_ActSeqCamera'])return;_0x355968[_0x4c7823(0x92)](_0x17a2f8,_0xb05b93);const _0x2ec9c1=_0x34a3ca[_0x4c7823(0x1cb)](),_0x454e4a=_0x50cbe5[_0x4c7823(0xb2d)],_0x2a6bbf=_0x285230[_0x4c7823(0x526)],_0x3d112b=_0x56ea84[_0x4c7823(0x142)];if(_0x454e4a){const _0x26ec48=_0xbb5a09[_0x4c7823(0x2ca)](_0x294941[_0x4c7823(0x839)]/0x2),_0x754bd=_0x4730d9[_0x4c7823(0x2ca)](_0x11f137[_0x4c7823(0xb65)]/0x2);_0xe893b8[_0x4c7823(0x1e0)](_0x26ec48,_0x754bd,_0x41c8e6[_0x4c7823(0xad)],_0x260568[_0x4c7823(0x6cb)]);}_0x2a6bbf&&_0x2b54b3['setBattleCameraOffset'](0x0,0x0,_0x23d3da['Duration'],_0x597907[_0x4c7823(0x6cb)]);if(_0x3d112b)_0x2ec9c1[_0x4c7823(0x63e)]('battleCamera');}}this[_0x4c7823(0x7ff)]=undefined;}return _0x555228;},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x3d9)]=function(_0x1202ad){const _0xa3df25=_0x4b7b09;if(_0x1202ad[_0xa3df25(0xb0c)]())return _0x1202ad[_0xa3df25(0x7c0)]()[_0xa3df25(0x8db)]||0x1;else{if('ZdBsk'===_0xa3df25(0xb20))this[_0xa3df25(0x916)][_0xa3df25(0x2ea)](_0x1b434f,0x0,_0x5007df);else return 0x1;}},Window_BattleLog[_0x4b7b09(0x4d2)]['setActiveWeaponSet']=function(_0x469efd,_0x4994c2){const _0x39efe9=_0x4b7b09;_0x469efd&&_0x469efd['isActor']()&&_0x469efd['setActiveWeaponSlot'](_0x4994c2),this[_0x39efe9(0x9bd)]();},Window_BattleLog[_0x4b7b09(0x4d2)]['clearActiveWeaponSet']=function(_0x4ecdf2){const _0x49a6f3=_0x4b7b09;_0x4ecdf2&&_0x4ecdf2[_0x49a6f3(0xb0c)]()&&_0x4ecdf2['clearActiveWeaponSlot'](),this['callNextMethod']();},Game_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x18c)]=function(){const _0x1e9db0=_0x4b7b09;let _0x200f5c=_0x1e9db0(0x18c);if(this[_0x1e9db0(0x87c)](_0x200f5c))return this[_0x1e9db0(0x91b)][_0x200f5c];return this[_0x1e9db0(0x91b)][_0x200f5c]=this[_0x1e9db0(0x930)](this['actor']()),this[_0x1e9db0(0x91b)][_0x200f5c];},Game_Actor[_0x4b7b09(0x4d2)]['battleUIOffsetY']=function(){const _0x547f41=_0x4b7b09;let _0x3a0c62=_0x547f41(0x221);if(this[_0x547f41(0x87c)](_0x3a0c62))return this[_0x547f41(0x91b)][_0x3a0c62];return this[_0x547f41(0x91b)][_0x3a0c62]=this['createBattleUIOffsetY'](this[_0x547f41(0x724)]()),this[_0x547f41(0x91b)][_0x3a0c62];},VisuMZ['BattleCore']['Game_Enemy_setup']=Game_Enemy['prototype'][_0x4b7b09(0x97a)],Game_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x97a)]=function(_0x1e9602,_0x46421e,_0x30170a){const _0x2b0c0d=_0x4b7b09;_0x1e9602=DataManager[_0x2b0c0d(0x348)](_0x1e9602),VisuMZ[_0x2b0c0d(0x6ce)][_0x2b0c0d(0x46d)][_0x2b0c0d(0x4ad)](this,_0x1e9602,_0x46421e,_0x30170a);if(Imported[_0x2b0c0d(0x83a)]){if(_0x2b0c0d(0x115)!==_0x2b0c0d(0x3e3))this[_0x2b0c0d(0x2cb)]();else{if(_0x83d74a[_0x2b0c0d(0x594)]&&_0x416615[_0x2b0c0d(0x4ed)]())return!![];if(this[_0x2b0c0d(0x6a7)][_0x2b0c0d(0x123)])return![];return this['_battler'][_0x2b0c0d(0xf4)]();}}this['clearBattleCoreData'](),this['setupBattleCoreData'](),Imported[_0x2b0c0d(0x83a)]&&this[_0x2b0c0d(0x446)]();},Game_Enemy[_0x4b7b09(0x4d2)]['clearBattleCoreData']=function(){const _0x5c6eba=_0x4b7b09,_0x9f4c22=VisuMZ[_0x5c6eba(0x6ce)]['Settings']['Enemy'];this['_attackAnimationId']=_0x9f4c22[_0x5c6eba(0x1a7)],this[_0x5c6eba(0x25e)]={};},Game_Enemy[_0x4b7b09(0x4d2)]['setupBattleCoreData']=function(){const _0x427fb6=_0x4b7b09,_0xaee401=VisuMZ[_0x427fb6(0x6ce)]['Settings'][_0x427fb6(0x97d)],_0x3c0efe=this[_0x427fb6(0x4f9)]()[_0x427fb6(0xaf1)];this['_svBattlerData']={'name':'','wtypeId':_0xaee401[_0x427fb6(0x466)],'collapse':_0xaee401[_0x427fb6(0xa38)],'motionIdle':_0xaee401['MotionIdle'],'width':_0xaee401[_0x427fb6(0xb85)]||0x40,'height':_0xaee401[_0x427fb6(0x4ca)]||0x40,'anchorX':_0xaee401['AnchorX']||0x0,'anchorY':_0xaee401['AnchorY']||0x0,'shadow':_0xaee401['Shadow']};_0x3c0efe[_0x427fb6(0x2c1)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x427fb6(0xabe)]=Number(RegExp['$1']));const _0x4441c6=this[_0x427fb6(0x25e)];if(_0x3c0efe[_0x427fb6(0x2c1)](/<SIDEVIEW BATTLER: (.*)>/i)){if(_0x427fb6(0x33f)!==_0x427fb6(0x303))_0x4441c6[_0x427fb6(0x639)]=String(RegExp['$1']);else{if(this[_0x427fb6(0x44c)]()&&this[_0x427fb6(0x305)]())return![];}}else{if(_0x3c0efe[_0x427fb6(0x2c1)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x2dbf7f=String(RegExp['$1'])[_0x427fb6(0x7c9)](/[\r\n]+/)['remove']('');_0x4441c6[_0x427fb6(0x639)]=DataManager[_0x427fb6(0x649)](_0x2dbf7f);}}_0x3c0efe[_0x427fb6(0x2c1)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x4441c6[_0x427fb6(0x529)]=eval(RegExp['$1']),_0x4441c6[_0x427fb6(0x17b)]=eval(RegExp['$2']));if(_0x3c0efe[_0x427fb6(0x2c1)](/<SIDEVIEW COLLAPSE>/i)){if('YCgsm'===_0x427fb6(0x8d3))return _0x2789a1[_0x427fb6(0x6ce)]['Settings']['Actor'][_0x427fb6(0x6c1)];else _0x4441c6[_0x427fb6(0x851)]=!![];}else{if(_0x3c0efe[_0x427fb6(0x2c1)](/<SIDEVIEW NO COLLAPSE>/i)){if(_0x427fb6(0x838)!==_0x427fb6(0x838)){this['_tempEquipCheck']=!![];const _0x29c9ac=this['equipSlots']();for(let _0x4b3382=0x0;_0x4b3382<_0x29c9ac[_0x427fb6(0x8db)];_0x4b3382++){_0x29c9ac[_0x4b3382]===0x1&&this[_0x427fb6(0x566)]!==_0x4b3382&&(_0x28d922[_0x4b3382]=null);}this[_0x427fb6(0x7ff)]=_0x34cebf;}else _0x4441c6[_0x427fb6(0x851)]=![];}}if(_0x3c0efe[_0x427fb6(0x2c1)](/<SIDEVIEW SHOW SHADOW>/i))_0x4441c6[_0x427fb6(0xb7c)]=!![];else _0x3c0efe[_0x427fb6(0x2c1)](/<SIDEVIEW HIDE SHADOW>/i)&&('TWnQi'!=='qelMO'?_0x4441c6[_0x427fb6(0xb7c)]=![]:_0x3553f['BattleCore'][_0x427fb6(0x140)][_0x427fb6(0x4ad)](this));if(_0x3c0efe[_0x427fb6(0x2c1)](/<SIDEVIEW IDLE MOTION: (.*)>/i)){if('iuMPH'!==_0x427fb6(0x52f))return this[_0x427fb6(0x6d2)]()&&this[_0x427fb6(0x81f)]()['match'](/\$/i);else _0x4441c6[_0x427fb6(0x3c4)]=String(RegExp['$1'])[_0x427fb6(0x79d)]()[_0x427fb6(0x612)]();}else{if(_0x3c0efe[_0x427fb6(0x2c1)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x507505=String(RegExp['$1'])[_0x427fb6(0x7c9)](/[\r\n]+/)[_0x427fb6(0x76b)]('');_0x4441c6[_0x427fb6(0x3c4)]=DataManager[_0x427fb6(0x649)](_0x507505);}}_0x3c0efe[_0x427fb6(0x2c1)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x4441c6[_0x427fb6(0x839)]=Number(RegExp['$1']),_0x4441c6[_0x427fb6(0xb65)]=Number(RegExp['$2']));if(_0x3c0efe[_0x427fb6(0x2c1)](/<SIDEVIEW WEAPON: (.*)>/i))_0x4441c6[_0x427fb6(0x162)]=DataManager[_0x427fb6(0x52b)](RegExp['$1']);else{if(_0x3c0efe['match'](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x14069e=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x427fb6(0x76b)](''),_0x854d4c=DataManager[_0x427fb6(0x649)](_0x14069e);_0x4441c6[_0x427fb6(0x162)]=DataManager['getWtypeIdWithName'](_0x854d4c);}}if(Imported[_0x427fb6(0x83a)]){if(_0x427fb6(0x14b)===_0x427fb6(0x14b)){const _0x127fe3=this[_0x427fb6(0x837)]();for(const _0xabeca7 of _0x127fe3){if(_0x427fb6(0x21d)===_0x427fb6(0x21d)){const _0x1733a6=this[_0x427fb6(0x3c8)](_0xabeca7)['Name'][_0x427fb6(0x2c5)]()[_0x427fb6(0x612)](),_0x2e783e=_0xabeca7[_0x427fb6(0x2c5)]()['trim']();if(_0x3c0efe['match'](VisuMZ[_0x427fb6(0x591)][_0x427fb6(0xa7b)][_0x427fb6(0x4a4)[_0x427fb6(0xace)](_0x2e783e,_0x1733a6)]))_0x4441c6[_0x427fb6(0x639)]=String(RegExp['$1']);else{if(_0x3c0efe['match'](VisuMZ[_0x427fb6(0x591)][_0x427fb6(0xa7b)][_0x427fb6(0x3b5)[_0x427fb6(0xace)](_0x2e783e,_0x1733a6)])){if(_0x427fb6(0xa88)==='sPOrk'){const _0x4a1914=this['_battler'][_0x427fb6(0x359)];this[_0x427fb6(0x7cc)]=_0x11f0a8['MOTIONS'][_0x4a1914[_0x427fb6(0x895)]],this[_0x427fb6(0x174)]=_0x4a1914[_0x427fb6(0xab1)];const _0x558807=this[_0x427fb6(0x9da)];_0x558807[_0x427fb6(0x32d)](_0x4a1914[_0x427fb6(0xa4d)],_0x4a1914['pattern']),this[_0x427fb6(0x360)]();}else{const _0x32e809=String(RegExp['$1'])['split'](/[\r\n]+/)['remove']('');_0x4441c6['name']=DataManager['processRandomizedData'](_0x32e809);}}}if(_0x3c0efe[_0x427fb6(0x2c1)](VisuMZ[_0x427fb6(0x591)][_0x427fb6(0xa7b)][_0x427fb6(0x58f)[_0x427fb6(0xace)](_0x2e783e,_0x1733a6)]))_0x4441c6['wtypeId']=DataManager[_0x427fb6(0x52b)](RegExp['$1']);else{if(_0x3c0efe[_0x427fb6(0x2c1)](VisuMZ['ElementStatusCore'][_0x427fb6(0xa7b)]['SvWeaponMass-%1-%2'[_0x427fb6(0xace)](_0x2e783e,_0x1733a6)])){const _0x3c956d=String(RegExp['$1'])[_0x427fb6(0x7c9)](/[\r\n]+/)[_0x427fb6(0x76b)](''),_0x504dbd=DataManager[_0x427fb6(0x649)](_0x3c956d);_0x4441c6[_0x427fb6(0x162)]=DataManager[_0x427fb6(0x52b)](_0x504dbd);}}if(_0x3c0efe['match'](VisuMZ[_0x427fb6(0x591)][_0x427fb6(0xa7b)][_0x427fb6(0x12e)[_0x427fb6(0xace)](_0x2e783e,_0x1733a6)])){if(_0x427fb6(0x4bd)!=='TVdYF')_0x4441c6['motionIdle']=String(RegExp['$1'])['toLowerCase']()[_0x427fb6(0x612)]();else{const _0x394ce1=_0xca2ee0['x']+_0x529b53[_0x427fb6(0xdd)]((_0x5dd928[_0x427fb6(0x839)]-_0x19c7b2)/0x2);this[_0x427fb6(0xb3b)](_0x3ffc20,_0x394ce1,_0x26b809['y'],_0x35d42b);}}else{if(_0x3c0efe[_0x427fb6(0x2c1)](VisuMZ[_0x427fb6(0x591)][_0x427fb6(0xa7b)][_0x427fb6(0x7af)[_0x427fb6(0xace)](_0x2e783e,_0x1733a6)])){const _0x943e69=String(RegExp['$1'])[_0x427fb6(0x7c9)](/[\r\n]+/)[_0x427fb6(0x76b)]('');_0x4441c6['motionIdle']=DataManager[_0x427fb6(0x649)](_0x943e69);}}}else _0x5a4755+=_0x16f3bc['isActor']()?-_0x3933b9:_0x3a5222,_0x192685+=_0x479ef3;}}else{if(this[_0x427fb6(0x6a7)]&&this[_0x427fb6(0x6a7)]['isDead']())return![];if(this[_0x427fb6(0x6a7)]&&!this['_battler'][_0x427fb6(0xb25)]())return![];return _0x12b219['isSideView']();}}},Game_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x33c)]=function(){const _0x250d8a=_0x4b7b09;return this[_0x250d8a(0xabe)]||0x0;},Game_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0xb60)]=function(){const _0x2a6e32=_0x4b7b09;return this[_0x2a6e32(0x33c)]();},Game_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x464)]=function(_0x3d3e9a){const _0x5bef47=_0x4b7b09;return this[_0x5bef47(0x33c)]();},Game_Enemy[_0x4b7b09(0x4d2)]['canBattlerMove']=function(){const _0x4c65dc=_0x4b7b09;if(this[_0x4c65dc(0x4f9)]()[_0x4c65dc(0xaf1)]['match'](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x4c65dc(0x4d2)][_0x4c65dc(0xb25)][_0x4c65dc(0x4ad)](this);},Game_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x6ec)]=function(){if(this['enemy']()['note']['match'](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x583)]=function(){const _0x305d87=_0x4b7b09,_0x50593a=[];for(const _0x162b07 of this[_0x305d87(0x4f9)]()[_0x305d87(0x4f0)]){if(_0x305d87(0xb0d)!==_0x305d87(0xb0d)){_0x560eee[_0x305d87(0x4d2)][_0x305d87(0x552)][_0x305d87(0x4ad)](this,_0x7628ac);if(this['hasSvBattler']())this[_0x305d87(0x169)](_0x47bd80);}else{const _0x5b4424=$dataSkills[_0x162b07[_0x305d87(0x483)]];if(_0x5b4424&&!_0x50593a['includes'](_0x5b4424))_0x50593a[_0x305d87(0x410)](_0x5b4424);}}return _0x50593a;},Game_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x18c)]=function(){const _0x470da3=_0x4b7b09;let _0x193d60=_0x470da3(0x18c);if(this['checkCacheKey'](_0x193d60))return this[_0x470da3(0x91b)][_0x193d60];return this[_0x470da3(0x91b)][_0x193d60]=this[_0x470da3(0x930)](this['enemy']()),this['_cache'][_0x193d60];},Game_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x221)]=function(){const _0x446259=_0x4b7b09;let _0x526a91=_0x446259(0x221);if(this['checkCacheKey'](_0x526a91))return this[_0x446259(0x91b)][_0x526a91];return this['_cache'][_0x526a91]=this[_0x446259(0x2e6)](this['enemy']()),this['_cache'][_0x526a91];},Game_Enemy['prototype']['svBattlerData']=function(){const _0x5c8061=_0x4b7b09;if(this[_0x5c8061(0x25e)]!==undefined)return this[_0x5c8061(0x25e)];return this[_0x5c8061(0x35a)](),this[_0x5c8061(0x25e)];},Game_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x6d2)]=function(){const _0x6e53b9=_0x4b7b09;return this[_0x6e53b9(0x822)]()['name']!=='';},Game_Enemy['prototype'][_0x4b7b09(0x81f)]=function(){const _0x49b243=_0x4b7b09;return this[_0x49b243(0x822)]()[_0x49b243(0x639)];},Game_Enemy['prototype'][_0x4b7b09(0x46f)]=function(){const _0x5dd964=_0x4b7b09;return this['hasSvBattler']()?VisuMZ[_0x5dd964(0x6ce)][_0x5dd964(0xb41)][_0x5dd964(0x5dc)][_0x5dd964(0xb15)]:VisuMZ['BattleCore'][_0x5dd964(0xb41)][_0x5dd964(0x97d)][_0x5dd964(0xb15)];},Game_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x552)]=function(_0x2be53c){const _0x39596c=_0x4b7b09;Game_Battler[_0x39596c(0x4d2)][_0x39596c(0x552)][_0x39596c(0x4ad)](this,_0x2be53c);if(this[_0x39596c(0x6d2)]())this[_0x39596c(0x169)](_0x2be53c);},Game_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x7d5)]=function(){const _0x3dc2e0=_0x4b7b09,_0x59eedf=this[_0x3dc2e0(0x822)]()[_0x3dc2e0(0x162)]||0x0,_0x26a22b=$dataSystem[_0x3dc2e0(0x7d4)][_0x59eedf];if(_0x26a22b){if(_0x3dc2e0(0x20b)===_0x3dc2e0(0x20b)){if(_0x26a22b[_0x3dc2e0(0x45e)]===0x0)this[_0x3dc2e0(0x42f)]('thrust');else{if(_0x26a22b[_0x3dc2e0(0x45e)]===0x1)this['requestMotion']('swing');else _0x26a22b[_0x3dc2e0(0x45e)]===0x2&&this[_0x3dc2e0(0x42f)](_0x3dc2e0(0xb06));}}else this[_0x3dc2e0(0x5a0)]-=0x10;}},Game_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x6c4)]=function(){const _0x177636=_0x4b7b09,_0x4ae639=this['svBattlerData']()[_0x177636(0x162)]||0x0,_0x583fbc=$dataSystem[_0x177636(0x7d4)][_0x4ae639];if(_0x583fbc){if('opSCM'===_0x177636(0xa75))this['startWeaponAnimation'](_0x583fbc['weaponImageId']);else{let _0x5407ed=_0x4cd458[_0x177636(0x6ce)][_0x177636(0xb5d)][_0x177636(0x4ad)](this,_0x3200d7);return _0x5407ed=this[_0x177636(0x1fa)][_0x177636(0x405)]*_0x5407ed+this['_multipliers'][_0x177636(0x991)],_0x5407ed;}}},Game_Enemy[_0x4b7b09(0x4d2)]['getAttackMotion']=function(){const _0x52f992=_0x4b7b09,_0x1ef843=this[_0x52f992(0x822)]()[_0x52f992(0x162)]||0x0;return $dataSystem[_0x52f992(0x7d4)][_0x1ef843];},Game_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0xa41)]=function(_0x36ff91){return this['getAttackMotion']();},Game_Enemy['prototype'][_0x4b7b09(0x94)]=function(){const _0x3fad2f=_0x4b7b09;Game_Battler[_0x3fad2f(0x4d2)]['performDamage']['call'](this),this[_0x3fad2f(0x857)]()&&this[_0x3fad2f(0x6d2)]()&&this[_0x3fad2f(0x42f)](_0x3fad2f(0x28b)),SoundManager[_0x3fad2f(0x2db)]();},Game_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x89a)]=function(){const _0x1ef418=_0x4b7b09;Game_Battler[_0x1ef418(0x4d2)][_0x1ef418(0x89a)]['call'](this),this[_0x1ef418(0x42f)]('evade');},Game_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x674)]=function(){const _0x3c0e89=_0x4b7b09;Game_Battler[_0x3c0e89(0x4d2)][_0x3c0e89(0x674)]['call'](this),this[_0x3c0e89(0x42f)](_0x3c0e89(0x3e9));},Game_Enemy[_0x4b7b09(0x4d2)]['performCounter']=function(){const _0x41c1e7=_0x4b7b09;Game_Battler[_0x41c1e7(0x4d2)][_0x41c1e7(0x55f)]['call'](this),this[_0x41c1e7(0x7d5)]();},Game_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x305)]=function(){const _0xce499=_0x4b7b09;if(this[_0xce499(0x6d2)]()){if('UySGp'!==_0xce499(0x567)){const _0x14f200=this[_0xce499(0xa10)][_0xce499(0x822)]();this[_0xce499(0x680)]=new _0x938957(_0x14f200[_0xce499(0x839)],_0x14f200[_0xce499(0xb65)]),this[_0xce499(0x1b4)]['bitmap']=new _0x1ffff1(0x1,0x1);}else{if(this[_0xce499(0x19a)]()>=0x1)return!![];return this[_0xce499(0x822)]()[_0xce499(0x851)];}}else return!![];},Game_Enemy['prototype'][_0x4b7b09(0x268)]=function(){const _0x2a5dfa=_0x4b7b09;return this[_0x2a5dfa(0x822)]()[_0x2a5dfa(0x529)];},Game_Enemy['prototype'][_0x4b7b09(0xa52)]=function(){const _0x4c3ec6=_0x4b7b09;return this[_0x4c3ec6(0x822)]()[_0x4c3ec6(0x17b)];},Game_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x186)]=function(){const _0x5363c0=_0x4b7b09;return this[_0x5363c0(0x822)]()[_0x5363c0(0xb7c)];},VisuMZ[_0x4b7b09(0x6ce)]['Game_Enemy_transform']=Game_Enemy['prototype'][_0x4b7b09(0x8b8)],Game_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x8b8)]=function(_0x659cf7){const _0x521b31=_0x4b7b09;VisuMZ[_0x521b31(0x6ce)][_0x521b31(0x9ed)][_0x521b31(0x4ad)](this,_0x659cf7),this[_0x521b31(0x694)](),this[_0x521b31(0x35a)]();const _0x47fa38=this['battler']();if(_0x47fa38)_0x47fa38[_0x521b31(0x1de)](this);},Game_Unit['prototype'][_0x4b7b09(0x2c2)]=function(_0xd18d35){const _0x10ed60=_0x4b7b09;for(const _0x56cc12 of this[_0x10ed60(0x878)]()){if(_0x10ed60(0x386)!==_0x10ed60(0x386))!_0x466f71['battleMembers']()[_0x10ed60(0x382)](this[_0x10ed60(0x9aa)])&&(this[_0x10ed60(0x9aa)]=null),this['_tpbSceneChangeCacheActor']?(this['_currentActor']=this[_0x10ed60(0x9aa)],this[_0x10ed60(0x6c7)][_0x10ed60(0x664)]=_0x10ed60(0x808),this[_0x10ed60(0x366)]=!![],this[_0x10ed60(0x9aa)]=null):(this[_0x10ed60(0x8e1)](),this['_currentActor']=null,this[_0x10ed60(0x366)]=![]);else{if(_0x56cc12)_0x56cc12[_0x10ed60(0x2c2)](_0xd18d35);}}},Game_Unit[_0x4b7b09(0x4d2)][_0x4b7b09(0x4d3)]=function(){const _0x329680=_0x4b7b09,_0x42e125=this['aliveMembers']();return _0x42e125[Math[_0x329680(0x56b)](_0x42e125[_0x329680(0x8db)])];},VisuMZ['BattleCore'][_0x4b7b09(0x996)]=Game_Party[_0x4b7b09(0x4d2)][_0x4b7b09(0x71b)],Game_Party[_0x4b7b09(0x4d2)]['addActor']=function(_0x345d4a){const _0x86134e=_0x4b7b09;VisuMZ[_0x86134e(0x6ce)][_0x86134e(0x996)][_0x86134e(0x4ad)](this,_0x345d4a),BattleManager[_0x86134e(0x39e)]();},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x96f)]=Game_Party['prototype'][_0x4b7b09(0x7f5)],Game_Party[_0x4b7b09(0x4d2)][_0x4b7b09(0x7f5)]=function(_0x3515d0){const _0x4eff6a=_0x4b7b09;VisuMZ[_0x4eff6a(0x6ce)][_0x4eff6a(0x96f)][_0x4eff6a(0x4ad)](this,_0x3515d0),BattleManager[_0x4eff6a(0x39e)]();},VisuMZ['BattleCore'][_0x4b7b09(0x601)]=Game_Troop[_0x4b7b09(0x4d2)]['setup'],Game_Troop[_0x4b7b09(0x4d2)][_0x4b7b09(0x97a)]=function(_0xc87788){const _0x5aa528=_0x4b7b09;$gameTemp['clearForcedGameTroopSettingsBattleCore'](),$gameTemp['applyForcedGameTroopSettingsBattleCore'](_0xc87788),VisuMZ[_0x5aa528(0x6ce)][_0x5aa528(0x601)][_0x5aa528(0x4ad)](this,_0xc87788),this['extendTroopMembers']();},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x1b5)]=Game_Troop[_0x4b7b09(0x4d2)][_0x4b7b09(0x704)],Game_Troop['prototype'][_0x4b7b09(0x704)]=function(){const _0x76785b=_0x4b7b09;let _0x3bc65a=VisuMZ[_0x76785b(0x6ce)][_0x76785b(0x1b5)][_0x76785b(0x4ad)](this);return this[_0x76785b(0x58b)]&&(_0x3bc65a*=this[_0x76785b(0x58b)]()),Math[_0x76785b(0x83c)](_0x3bc65a);},Game_Troop[_0x4b7b09(0x4d2)]['expRate']=function(){return 0x1;},Game_Troop['prototype'][_0x4b7b09(0x787)]=function(){const _0x134d49=_0x4b7b09,_0x1316fa=this[_0x134d49(0xf3)]()[_0x134d49(0x639)]||'';if(_0x1316fa[_0x134d49(0x2c1)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x4767a4=RegExp['$1'][_0x134d49(0x7c9)](',')[_0x134d49(0x78)](_0x2e8f88=>Number(_0x2e8f88));this[_0x134d49(0x92d)](),this[_0x134d49(0xb29)](_0x4767a4);}},Game_Troop[_0x4b7b09(0x4d2)][_0x4b7b09(0x92d)]=function(){const _0x456ba5=_0x4b7b09;let _0x25940b='Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest'+'\x0a';_0x25940b+=_0x456ba5(0x949);Imported[_0x456ba5(0x763)]&&(VisuMZ['BattleSystemBTB'][_0x456ba5(0x2bf)]<1.11&&(alert(_0x25940b[_0x456ba5(0xace)](_0x456ba5(0x7f6))),SceneManager[_0x456ba5(0x9df)]()));if(Imported[_0x456ba5(0xa4)]){if(_0x456ba5(0xb4e)===_0x456ba5(0x926)){return _0x1b515a['prototype'][_0x456ba5(0x8e7)][_0x456ba5(0x4ad)](this);;}else VisuMZ[_0x456ba5(0x323)][_0x456ba5(0x2bf)]<1.19&&(alert(_0x25940b[_0x456ba5(0xace)](_0x456ba5(0x4e4))),SceneManager['exit']());}Imported['VisuMZ_2_BattleSystemSTB']&&(VisuMZ['BattleSystemSTB'][_0x456ba5(0x2bf)]<1.15&&(_0x456ba5(0x3af)!==_0x456ba5(0x3af)?_0x3f5aea[_0x456ba5(0x42f)](_0x483d1f):(alert(_0x25940b[_0x456ba5(0xace)](_0x456ba5(0x24c))),SceneManager[_0x456ba5(0x9df)]())));},Game_Troop['prototype'][_0x4b7b09(0xb29)]=function(_0x55af95){const _0xbb0f02=_0x4b7b09;this[_0xbb0f02(0x627)]={};for(const _0x5554e8 of this[_0xbb0f02(0x878)]()){if(!_0x5554e8)continue;_0x5554e8[_0xbb0f02(0x6ad)]('');}for(const _0x29f770 of _0x55af95){const _0x217918=$dataTroops[_0x29f770];if(_0x217918)this[_0xbb0f02(0x6f8)](_0x217918);}this[_0xbb0f02(0x1f4)]();},Game_Troop[_0x4b7b09(0x4d2)][_0x4b7b09(0x6f8)]=function(_0x2a043e){const _0x4148f6=_0x4b7b09;for(const _0x227bcf of _0x2a043e[_0x4148f6(0x878)]){if($dataEnemies[_0x227bcf[_0x4148f6(0x81c)]]){const _0x21480d=_0x227bcf[_0x4148f6(0x81c)],_0xbf8245=_0x227bcf['x'],_0x2d2e7d=_0x227bcf['y'],_0x55c044=new Game_Enemy(_0x21480d,_0xbf8245,_0x2d2e7d);_0x227bcf[_0x4148f6(0x942)]&&_0x55c044['hide'](),this[_0x4148f6(0x59d)][_0x4148f6(0x410)](_0x55c044);}}},VisuMZ[_0x4b7b09(0x6ce)]['Game_Map_setupBattleback']=Game_Map[_0x4b7b09(0x4d2)][_0x4b7b09(0x357)],Game_Map['prototype'][_0x4b7b09(0x357)]=function(){const _0xc23a4c=_0x4b7b09;VisuMZ[_0xc23a4c(0x6ce)][_0xc23a4c(0x1da)][_0xc23a4c(0x4ad)](this),this['setupBattlebackBattleCore']();},Game_Map[_0x4b7b09(0x4d2)][_0x4b7b09(0x72f)]=function(){const _0x3edf0e=_0x4b7b09;this['_regionBattleback1']={},this[_0x3edf0e(0x558)]={};if(!$dataMap)return;const _0x3e4298=$dataMap[_0x3edf0e(0xaf1)];if(!_0x3e4298)return;const _0x2634ab=_0x3e4298[_0x3edf0e(0x2c1)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x2634ab)for(const _0x1a3812 of _0x2634ab){if(_0x3edf0e(0x26c)!=='pkLmQ')this[_0x3edf0e(0x4df)]=!![],this[_0x3edf0e(0x2c2)](_0x3edf0e(0x3f9)),_0x4599b7[_0x3edf0e(0x6ce)][_0x3edf0e(0x966)][_0x3edf0e(0x4ad)](this),this[_0x3edf0e(0x2dd)]('Defeat');else{_0x1a3812[_0x3edf0e(0x2c1)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x37a713=Number(RegExp['$1']),_0x384833=Number(RegExp['$2']),_0x40e54d=_0x384833===0x1?this[_0x3edf0e(0x8fa)]:this[_0x3edf0e(0x558)],_0xbe9fde=String(RegExp['$3']);_0x40e54d[_0x37a713]=_0xbe9fde;}}},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x533)]=Game_Map[_0x4b7b09(0x4d2)][_0x4b7b09(0x5ff)],Game_Map[_0x4b7b09(0x4d2)][_0x4b7b09(0x5ff)]=function(){const _0x92ecc1=_0x4b7b09;if(!BattleManager[_0x92ecc1(0x4ed)]()){const _0x422750=$gamePlayer[_0x92ecc1(0x609)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x92ecc1(0x8fa)]&&this[_0x92ecc1(0x8fa)][_0x422750])return this[_0x92ecc1(0x8fa)][_0x422750];}return VisuMZ[_0x92ecc1(0x6ce)][_0x92ecc1(0x533)][_0x92ecc1(0x4ad)](this);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x2a9)]=Game_Map[_0x4b7b09(0x4d2)][_0x4b7b09(0xb5f)],Game_Map[_0x4b7b09(0x4d2)][_0x4b7b09(0xb5f)]=function(){const _0x4f7203=_0x4b7b09;if(!BattleManager[_0x4f7203(0x4ed)]()){const _0x50b7c9=$gamePlayer[_0x4f7203(0x609)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x4f7203(0x8fa)]&&this[_0x4f7203(0x558)][_0x50b7c9])return this['_regionBattleback2'][_0x50b7c9];}return VisuMZ['BattleCore'][_0x4f7203(0x2a9)][_0x4f7203(0x4ad)](this);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x337)]=Game_Map['prototype'][_0x4b7b09(0x3f1)],Game_Map['prototype'][_0x4b7b09(0x3f1)]=function(){const _0x3f8272=_0x4b7b09;let _0x3f4afc=JsonEx[_0x3f8272(0x9fb)](VisuMZ[_0x3f8272(0x6ce)]['Game_Map_encounterList'][_0x3f8272(0x4ad)](this));return VisuMZ['BattleCore'][_0x3f8272(0x120)](_0x3f4afc);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x120)]=function(_0x38ee71){const _0x4a4bc8=_0x4b7b09;var _0x54f1f1,_0x708232,_0x44ef76;for(_0x44ef76=_0x38ee71[_0x4a4bc8(0x8db)]-0x1;_0x44ef76>0x0;_0x44ef76--){_0x54f1f1=Math['floor'](Math[_0x4a4bc8(0x7cd)]()*(_0x44ef76+0x1)),_0x708232=_0x38ee71[_0x44ef76],_0x38ee71[_0x44ef76]=_0x38ee71[_0x54f1f1],_0x38ee71[_0x54f1f1]=_0x708232;}return _0x38ee71;},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x68e)]=Game_Interpreter['prototype'][_0x4b7b09(0x1d0)],Game_Interpreter[_0x4b7b09(0x4d2)][_0x4b7b09(0x1d0)]=function(_0x1b8b9a){const _0x29bb85=_0x4b7b09;return $gameTemp[_0x29bb85(0x23e)](this),VisuMZ[_0x29bb85(0x6ce)][_0x29bb85(0x68e)]['call'](this,_0x1b8b9a);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x80e)]=Game_Interpreter[_0x4b7b09(0x4d2)][_0x4b7b09(0x374)],Game_Interpreter[_0x4b7b09(0x4d2)][_0x4b7b09(0x374)]=function(){const _0x59efdf=_0x4b7b09;if(SceneManager[_0x59efdf(0x18e)]())switch(this[_0x59efdf(0x756)]){case _0x59efdf(0x78c):if(Imported[_0x59efdf(0x522)]){if($gameScreen['battleCameraData']()[_0x59efdf(0x71f)]>0x0)return!![];this[_0x59efdf(0x756)]='';}break;case _0x59efdf(0x270):if(BattleManager['_spriteset']['isAnimationPlaying']())return!![];this['_waitMode']='';break;case _0x59efdf(0x834):if(Imported[_0x59efdf(0x522)]){if($gameScreen['battleCameraData']()['cameraDuration']>0x0)return!![];if($gameScreen[_0x59efdf(0x3ac)]()[_0x59efdf(0xb54)]>0x0)return!![];this[_0x59efdf(0x756)]='';}break;case'battleEffect':if(BattleManager['_spriteset'][_0x59efdf(0x9c)]())return!![];this['_waitMode']='';break;case _0x59efdf(0x5bc):if(BattleManager[_0x59efdf(0xa5b)]['isAnyoneFloating']())return!![];this[_0x59efdf(0x756)]='';break;case _0x59efdf(0x4c6):if(BattleManager[_0x59efdf(0xa5b)]['isAnyoneJumping']())return!![];this[_0x59efdf(0x756)]='';break;case _0x59efdf(0x698):if(BattleManager[_0x59efdf(0xa2d)][_0x59efdf(0xa27)]())return!![];this[_0x59efdf(0x756)]='';break;case _0x59efdf(0x4d4):if(BattleManager['_spriteset'][_0x59efdf(0x7b3)]())return!![];this[_0x59efdf(0x756)]='';break;case _0x59efdf(0x3b8):if(BattleManager[_0x59efdf(0xa5b)][_0x59efdf(0x8de)]())return!![];this[_0x59efdf(0x756)]='';break;case _0x59efdf(0x751):if(BattleManager[_0x59efdf(0xa5b)]['isAnyoneGrowing']())return!![];this[_0x59efdf(0x756)]='';break;case _0x59efdf(0x281):if(BattleManager[_0x59efdf(0xa5b)]['isAnyoneSkewing']())return!![];this['_waitMode']='';break;case _0x59efdf(0x25d):if(Imported[_0x59efdf(0x689)]){if(BattleManager['_spriteset'][_0x59efdf(0x7b1)]())return!![];this[_0x59efdf(0x756)]='';}break;case _0x59efdf(0x959):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x59efdf(0x3ac)]()[_0x59efdf(0x9c7)]>0x0)return!![];this['_waitMode']='';}break;case _0x59efdf(0x328):if(BattleManager['_spriteset'][_0x59efdf(0x816)]())return!![];this[_0x59efdf(0x756)]='';break;case _0x59efdf(0x863):if(Imported[_0x59efdf(0x522)]){if($gameScreen[_0x59efdf(0x3ac)]()[_0x59efdf(0x361)]>0x0)return!![];this['_waitMode']='';}break;case _0x59efdf(0x3da):if(Imported[_0x59efdf(0x5a4)]){if(BattleManager[_0x59efdf(0xa5b)][_0x59efdf(0x596)]){if(BattleManager[_0x59efdf(0xa5b)]['isAnyoneInjectAniPrepping']())return!![];this['_waitMode']='battleInjectAni';}else this[_0x59efdf(0x756)]='';break;}break;case _0x59efdf(0x7a2):if(Imported[_0x59efdf(0x5a4)]){if(BattleManager[_0x59efdf(0xa5b)]['isAnyoneInjectAnimating']())return!![];this['_waitMode']='';}break;}return VisuMZ[_0x59efdf(0x6ce)][_0x59efdf(0x80e)][_0x59efdf(0x4ad)](this);},VisuMZ[_0x4b7b09(0x6ce)]['Game_Interpreter_command301']=Game_Interpreter[_0x4b7b09(0x4d2)][_0x4b7b09(0x682)],Game_Interpreter[_0x4b7b09(0x4d2)][_0x4b7b09(0x682)]=function(_0x11a1da){const _0x2aa816=_0x4b7b09;return!$gameParty[_0x2aa816(0x647)]()?this[_0x2aa816(0x749)](_0x11a1da):VisuMZ[_0x2aa816(0x6ce)][_0x2aa816(0x588)][_0x2aa816(0x4ad)](this,_0x11a1da);},Game_Interpreter[_0x4b7b09(0x4d2)][_0x4b7b09(0x220)]=function(_0x2cc0e9){const _0x3e659e=_0x4b7b09;return VisuMZ[_0x3e659e(0x6ce)][_0x3e659e(0x588)]['call'](this,_0x2cc0e9),BattleManager[_0x3e659e(0x8c7)](_0x41eb66=>{const _0x37cba0=_0x3e659e;this['_branch'][this[_0x37cba0(0xaa5)]]=_0x41eb66;}),!![];},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x1b2)]=function(_0x15b90a){const _0x402aba=_0x4b7b09,_0x2e6f42=$dataCommonEvents[_0x15b90a];if(!_0x2e6f42)return![];if(_0x2e6f42[_0x402aba(0x577)][_0x402aba(0x8db)]<=0x1)return![];return!![];},Game_Interpreter[_0x4b7b09(0x4d2)][_0x4b7b09(0x749)]=function(_0x38e1e9){const _0x12eaf4=_0x4b7b09,_0x18b941=VisuMZ[_0x12eaf4(0x6ce)][_0x12eaf4(0xb41)][_0x12eaf4(0xeb)],_0x169e0f=_0x18b941['BattleStartEvent'],_0x3ad7ab=$dataCommonEvents[_0x169e0f];if(_0x3ad7ab&&VisuMZ[_0x12eaf4(0x6ce)][_0x12eaf4(0x1b2)](_0x169e0f)){if(_0x12eaf4(0x571)===_0x12eaf4(0x4c9))_0x46a317['collapse']=!![];else{const _0x15e8a0=this[_0x12eaf4(0xaa6)]()?this[_0x12eaf4(0xaeb)]:0x0,_0x3dabd9=_0x3ad7ab[_0x12eaf4(0x577)];this['setupChild'](_0x3dabd9,_0x15e8a0),this['_list']=JsonEx[_0x12eaf4(0x9fb)](this[_0x12eaf4(0x329)]);const _0x550600={'code':0xbc3,'indent':this[_0x12eaf4(0xaa5)],'parameters':JsonEx[_0x12eaf4(0x9fb)](_0x38e1e9)};return this[_0x12eaf4(0x329)]['splice'](this[_0x12eaf4(0x4f3)]+0x1,0x0,_0x550600),!![];}}else return VisuMZ['BattleCore'][_0x12eaf4(0x588)]['call'](this,_0x38e1e9);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xaf3)]=BattleManager[_0x4b7b09(0xb4)],BattleManager['onEncounter']=function(){const _0xfbb12=_0x4b7b09;VisuMZ[_0xfbb12(0x6ce)]['BattleManager_onEncounter'][_0xfbb12(0x4ad)](this),this[_0xfbb12(0x8b9)]();},BattleManager[_0x4b7b09(0x8b9)]=function(){const _0x4ff78b=_0x4b7b09,_0x2a1473=VisuMZ['BattleCore']['Settings'][_0x4ff78b(0xeb)],_0x3e5da3=_0x2a1473[_0x4ff78b(0x29a)];_0x3e5da3&&VisuMZ[_0x4ff78b(0x6ce)][_0x4ff78b(0x1b2)](_0x3e5da3)&&(this['_battleCoreBattleStartEvent']=!![],$gameTemp['reserveCommonEvent'](_0x2a1473[_0x4ff78b(0x29a)]),$gameMap[_0x4ff78b(0x324)](),$gameMap['_interpreter'][_0x4ff78b(0xd7)]=!![]),_0x2a1473[_0x4ff78b(0x968)]>0x0&&(this[_0x4ff78b(0xa8a)]=!![]);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x7db)]=Scene_Map[_0x4b7b09(0x4d2)][_0x4b7b09(0x36d)],Scene_Map[_0x4b7b09(0x4d2)][_0x4b7b09(0x36d)]=function(){const _0x333146=_0x4b7b09;if(BattleManager[_0x333146(0x631)])return;VisuMZ[_0x333146(0x6ce)][_0x333146(0x7db)]['call'](this);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x9bf)]=Scene_Map[_0x4b7b09(0x4d2)][_0x4b7b09(0x1cd)],Scene_Map[_0x4b7b09(0x4d2)][_0x4b7b09(0x1cd)]=function(){const _0x15ebb5=_0x4b7b09;if(BattleManager[_0x15ebb5(0x631)])this[_0x15ebb5(0x4da)]();else{if(_0x15ebb5(0x828)===_0x15ebb5(0x89f)){if(!_0x559bf0[_0x15ebb5(0x18e)]())return;_0x569978[_0x15ebb5(0x92)](_0x260d30,_0x1ede1d),_0x37cb2e[_0x15ebb5(0x5ae)][_0x15ebb5(0x368)](_0x27e8ef['ShowHide']);}else VisuMZ['BattleCore'][_0x15ebb5(0x9bf)][_0x15ebb5(0x4ad)](this);}},Scene_Map[_0x4b7b09(0x4d2)]['battleCorePreBattleCommonEvent']=function(){const _0x524f11=_0x4b7b09;this[_0x524f11(0x301)]=!![];},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x963)]=SceneManager[_0x4b7b09(0xf5)],SceneManager[_0x4b7b09(0xf5)]=function(){const _0x286e56=_0x4b7b09;if(BattleManager['_battleCoreBattleStartEvent'])return![];return VisuMZ[_0x286e56(0x6ce)][_0x286e56(0x963)][_0x286e56(0x4ad)](this);},VisuMZ[_0x4b7b09(0x6ce)]['Game_Interpreter_terminate']=Game_Interpreter[_0x4b7b09(0x4d2)][_0x4b7b09(0x4d1)],Game_Interpreter[_0x4b7b09(0x4d2)][_0x4b7b09(0x4d1)]=function(){const _0x358bc4=_0x4b7b09;VisuMZ['BattleCore']['Game_Interpreter_terminate'][_0x358bc4(0x4ad)](this),this[_0x358bc4(0xd7)]&&(this['_preBattleCommonEvent']=undefined,SceneManager[_0x358bc4(0x5ae)][_0x358bc4(0x2ff)]());},Scene_Map[_0x4b7b09(0x4d2)][_0x4b7b09(0x2ff)]=function(){const _0x588de2=_0x4b7b09;BattleManager[_0x588de2(0x631)]=undefined,BattleManager['_battleCoreBattleResumeAfter']=!![],this[_0x588de2(0xb0)]();},VisuMZ[_0x4b7b09(0x6ce)]['Scene_Map_initializeAfter']=Scene_Map[_0x4b7b09(0x4d2)]['initialize'],Scene_Map[_0x4b7b09(0x4d2)][_0x4b7b09(0x827)]=function(){const _0x368d83=_0x4b7b09;VisuMZ[_0x368d83(0x6ce)][_0x368d83(0xa43)][_0x368d83(0x4ad)](this),BattleManager[_0x368d83(0x4e8)]&&('zBvxn'===_0x368d83(0x6de)?(this[_0x368d83(0x301)]=!![],BattleManager['_battleCoreBattleResumeAfter']=undefined):(_0x5e8fa4['x']+=this['x'],_0x5b33a4['y']+=this['y']));},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xa0b)]=Scene_Map['prototype'][_0x4b7b09(0x827)],Scene_Map[_0x4b7b09(0x4d2)]['initialize']=function(){const _0x226ade=_0x4b7b09;VisuMZ[_0x226ade(0x6ce)][_0x226ade(0xa0b)][_0x226ade(0x4ad)](this),$gameTemp[_0x226ade(0x9a4)]();},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x1d5)]=Scene_ItemBase[_0x4b7b09(0x4d2)][_0x4b7b09(0x225)],Scene_ItemBase[_0x4b7b09(0x4d2)][_0x4b7b09(0x225)]=function(){const _0x474474=_0x4b7b09;VisuMZ[_0x474474(0x6ce)]['Scene_ItemBase_applyItem'][_0x474474(0x4ad)](this);if(this[_0x474474(0x6e3)]()[_0x474474(0xaf1)][_0x474474(0x2c1)](/<BYPASS AUTO ACTION SEQUENCE>/i)){if(_0x474474(0x26f)===_0x474474(0x701)){this['_damages'][_0x474474(0x410)](_0x5b6ab8);if(this['isShownOnBattlePortrait']()){const _0x1f7ea1=_0x4f20a5[_0x474474(0x5ae)][_0x474474(0x406)];if(_0x1f7ea1)_0x1f7ea1[_0x474474(0xa5d)](_0x5e631d,this[_0x474474(0x6a7)]);}else{this[_0x474474(0x181)]()[_0x474474(0x420)](_0x34e4c9);if(_0x1184a4[_0x474474(0x597)]())_0x78cfab[_0x474474(0x785)]['x']=-0x1;}}else return;}if(this[_0x474474(0x6e3)]()[_0x474474(0xaf1)][_0x474474(0x2c1)](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x474474(0xacd)===_0x474474(0x1c9)){_0x3494bc[_0x474474(0x6ce)][_0x474474(0x7c4)][_0x474474(0x4ad)](this,_0x4b3034,_0x1619e5);if(!_0x407ae7['isImmortal']())return;for(const _0x1c3f7e of this['subject']()[_0x474474(0x473)]()){if(_0x1c3f7e===_0x347efb[_0x474474(0x7fa)]()){let _0x113604=_0x5b5515[_0x474474(0x702)];_0x113604*=_0x5d0d9d[_0x474474(0x1a1)](_0x1c3f7e),_0x113604*=this['subject']()[_0x474474(0x85)](_0x1c3f7e),_0x113604*=this[_0x474474(0x7f3)](_0x2329f7),_0x3298f3[_0x474474(0x7cd)]()<_0x113604&&(_0xb17488['_deathStateApplied']=!![],this[_0x474474(0x7ab)](_0x1ebda9));}}}else $gameTemp[_0x474474(0x593)]=[];}DataManager[_0x474474(0x9de)](this[_0x474474(0x6e3)]())&&($gameTemp['_commonEventQueue']=[]);},VisuMZ[_0x4b7b09(0x6ce)]['Scene_Options_maxCommands']=Scene_Options[_0x4b7b09(0x4d2)][_0x4b7b09(0x349)],Scene_Options[_0x4b7b09(0x4d2)][_0x4b7b09(0x349)]=function(){const _0x3d4d0f=_0x4b7b09;let _0x2f170a=VisuMZ[_0x3d4d0f(0x6ce)]['Scene_Options_maxCommands'][_0x3d4d0f(0x4ad)](this);const _0x3a9f5b=VisuMZ[_0x3d4d0f(0x6ce)]['Settings'];if(_0x3a9f5b['AutoBattle'][_0x3d4d0f(0x77f)]&&_0x3a9f5b[_0x3d4d0f(0x632)]['AdjustRect'])_0x2f170a+=0x2;if(_0x3a9f5b[_0x3d4d0f(0x2d3)][_0x3d4d0f(0x77f)]&&_0x3a9f5b[_0x3d4d0f(0x2d3)][_0x3d4d0f(0x2f6)])_0x2f170a+=0x1;return _0x2f170a;},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x52c)]=Scene_Battle['prototype']['initialize'],Scene_Battle['prototype']['initialize']=function(){const _0x51cf15=_0x4b7b09;VisuMZ[_0x51cf15(0x6ce)][_0x51cf15(0x52c)][_0x51cf15(0x4ad)](this),this[_0x51cf15(0xa71)]();},VisuMZ['BattleCore'][_0x4b7b09(0x13c)]=Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x60d)],Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x60d)]=function(){const _0xb9862b=_0x4b7b09;SceneManager[_0xb9862b(0x8f7)]()?(Scene_Message[_0xb9862b(0x4d2)][_0xb9862b(0x60d)]['call'](this),this[_0xb9862b(0xa5b)]&&this['_spriteset'][_0xb9862b(0xce)](),BattleManager['_tpbSceneChangeCacheActor']&&BattleManager[_0xb9862b(0xa85)]()):(VisuMZ[_0xb9862b(0x6ce)][_0xb9862b(0x13c)][_0xb9862b(0x4ad)](this),$gameTroop['onBattleStartOnceParallels']());},VisuMZ[_0x4b7b09(0x6ce)]['Scene_Battle_stop']=Scene_Battle['prototype'][_0x4b7b09(0xb0)],Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0xb0)]=function(){const _0x1eb793=_0x4b7b09;SceneManager[_0x1eb793(0xae)]()?Scene_Message[_0x1eb793(0x4d2)][_0x1eb793(0xb0)]['call'](this):VisuMZ[_0x1eb793(0x6ce)]['Scene_Battle_stop']['call'](this);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x897)]=Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x4d1)],Scene_Battle[_0x4b7b09(0x4d2)]['terminate']=function(){const _0x434fd9=_0x4b7b09;SceneManager[_0x434fd9(0xae)]()?Scene_Message[_0x434fd9(0x4d2)][_0x434fd9(0x4d1)][_0x434fd9(0x4ad)](this):VisuMZ[_0x434fd9(0x6ce)][_0x434fd9(0x897)]['call'](this),this[_0x434fd9(0xa71)]();},Scene_Battle[_0x4b7b09(0x4d2)]['isRightInputMode']=function(){const _0x4a2657=_0x4b7b09;if(ConfigManager[_0x4a2657(0x696)]&&ConfigManager[_0x4a2657(0x1a3)]!==undefined)return _0x4a2657(0x33e)!=='IVBjT'?ConfigManager['uiInputPosition']:this[_0x4a2657(0xa58)]();else{if(this[_0x4a2657(0x1f7)]()===_0x4a2657(0xad5))return![];else{return Scene_Message[_0x4a2657(0x4d2)][_0x4a2657(0x8e7)][_0x4a2657(0x4ad)](this);;}}},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xb6c)]=Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x419)],Scene_Battle['prototype'][_0x4b7b09(0x419)]=function(){const _0x17c612=_0x4b7b09;this['createEnemyNameContainer'](),VisuMZ['BattleCore'][_0x17c612(0xb6c)][_0x17c612(0x4ad)](this),this[_0x17c612(0x580)]();},VisuMZ['BattleCore'][_0x4b7b09(0x809)]=Scene_Battle[_0x4b7b09(0x4d2)]['createCancelButton'],Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0xa77)]=function(){const _0x39bd85=_0x4b7b09;VisuMZ['BattleCore'][_0x39bd85(0x809)][_0x39bd85(0x4ad)](this),this[_0x39bd85(0x1f7)]()===_0x39bd85(0xad5)&&this[_0x39bd85(0x7a8)]();},Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x368)]=function(_0x207500){const _0x394c4e=_0x4b7b09;_0x207500?(this[_0x394c4e(0xa1d)]['x']=(Graphics[_0x394c4e(0x839)]-Graphics[_0x394c4e(0x979)])/0x2,this[_0x394c4e(0xa1d)]['y']=(Graphics['height']-Graphics[_0x394c4e(0x807)])/0x2):(this['_windowLayer']['x']=Graphics['width']*0xa,this['_windowLayer']['y']=Graphics[_0x394c4e(0xb65)]*0xa);},VisuMZ['BattleCore'][_0x4b7b09(0x629)]=Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0xa95)],Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0xa95)]=function(){const _0x2e5581=_0x4b7b09,_0x544256=BattleManager['actor']();VisuMZ[_0x2e5581(0x6ce)][_0x2e5581(0x629)][_0x2e5581(0x4ad)](this);if(_0x544256){if(_0x2e5581(0xea)==='Asirl'){if(_0x42b7cf['isPreviousScene'](_0x1fe827))return!![];return![];}else{if(_0x544256===BattleManager[_0x2e5581(0x724)]())return;if(_0x544256===BattleManager[_0x2e5581(0xb2)])return;if(_0x544256[_0x2e5581(0xe0)]())_0x544256[_0x2e5581(0xe0)]()[_0x2e5581(0x15c)]();}}},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x86)]=Scene_Battle[_0x4b7b09(0x4d2)]['selectPreviousCommand'],Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x23a)]=function(){const _0x3f954a=_0x4b7b09,_0x314848=BattleManager[_0x3f954a(0x724)]();if(_0x314848&&_0x314848[_0x3f954a(0xe0)])_0x314848[_0x3f954a(0xe0)]()['stepBack']();VisuMZ[_0x3f954a(0x6ce)][_0x3f954a(0x86)][_0x3f954a(0x4ad)](this);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xb26)]=Scene_Battle['prototype']['logWindowRect'],Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x1e6)]=function(){const _0x23c784=_0x4b7b09;if(VisuMZ[_0x23c784(0x6ce)][_0x23c784(0xb41)][_0x23c784(0x34c)][_0x23c784(0x5b6)])return'FfxOF'!==_0x23c784(0x269)?_0x3119f6[_0x23c784(0xb0c)]()?_0x5507fa[_0x23c784(0x7c0)]()[_0x23c784(0x8db)]||0x1:0x1:VisuMZ[_0x23c784(0x6ce)]['Settings'][_0x23c784(0x34c)][_0x23c784(0x5b6)]['call'](this);return VisuMZ[_0x23c784(0x6ce)][_0x23c784(0xb26)][_0x23c784(0x4ad)](this);},VisuMZ[_0x4b7b09(0x6ce)]['Scene_Battle_createPartyCommandWindow']=Scene_Battle[_0x4b7b09(0x4d2)]['createPartyCommandWindow'],Scene_Battle[_0x4b7b09(0x4d2)]['createPartyCommandWindow']=function(){const _0x257d23=_0x4b7b09;VisuMZ[_0x257d23(0x6ce)][_0x257d23(0x3ce)][_0x257d23(0x4ad)](this),this['createPartyCommandWindowBattleCore']();},Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x129)]=function(){const _0x1c6a9f=_0x4b7b09,_0x186c9a=this[_0x1c6a9f(0x913)];_0x186c9a[_0x1c6a9f(0x5b4)]('autoBattle',this[_0x1c6a9f(0x2f9)][_0x1c6a9f(0x165)](this)),_0x186c9a[_0x1c6a9f(0x5b4)](_0x1c6a9f(0x733),this['commandOptions'][_0x1c6a9f(0x165)](this));const _0xaa9a12=this[_0x1c6a9f(0x1f7)]();switch(_0xaa9a12){case'xp':case'portrait':return this[_0x1c6a9f(0x913)]['setBackgroundType'](0x1);break;}},Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x2f9)]=function(){const _0x250230=_0x4b7b09;BattleManager[_0x250230(0xb33)]=!![],$gameParty[_0x250230(0x735)](),this['selectNextCommand'](),BattleManager[_0x250230(0x54c)]()&&(BattleManager['_inputting']=![]);},Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x3a1)]=function(){const _0x1db0d1=_0x4b7b09;this['isQueueOptionsMenu']()?(this[_0x1db0d1(0x6b1)]=!![],this[_0x1db0d1(0xa2d)]['push'](_0x1db0d1(0x8a9),VisuMZ[_0x1db0d1(0x6ce)][_0x1db0d1(0xb41)][_0x1db0d1(0xa9)][_0x1db0d1(0x94a)])):this['callOptions']();},Scene_Battle['prototype'][_0x4b7b09(0x2c8)]=function(){const _0x117f67=_0x4b7b09;return BattleManager[_0x117f67(0x223)]();},Scene_Battle['prototype'][_0x4b7b09(0x10a)]=function(){const _0x275003=_0x4b7b09;this[_0x275003(0x6b1)]=![],this[_0x275003(0xa5b)][_0x275003(0xce)](),this[_0x275003(0xa1d)]['visible']=![];if(BattleManager['isBattleTest']()){if('qZoUh'===_0x275003(0x53a))return _0x53208f['BattleCore'][_0x275003(0xb41)][_0x275003(0xa9)][_0x275003(0x3b1)];else{if($dataSystem[_0x275003(0x5ff)]||$dataSystem[_0x275003(0xb5f)]){if(_0x275003(0x569)!==_0x275003(0x16a))SceneManager['snapForBackground']();else return _0x463e84['name'];}}}else($gameMap['battleback1Name']()||$gameMap[_0x275003(0xb5f)]())&&SceneManager[_0x275003(0x12f)]();SceneManager['push'](Scene_Options),BattleManager[_0x275003(0x54c)]()&&(BattleManager[_0x275003(0x9aa)]=BattleManager[_0x275003(0x724)]());},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x143)]=Scene_Battle['prototype'][_0x4b7b09(0xaa1)],Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0xaa1)]=function(){const _0x3b06ca=_0x4b7b09;VisuMZ[_0x3b06ca(0x6ce)][_0x3b06ca(0x143)]['call'](this);if(this[_0x3b06ca(0x6b1)]&&!BattleManager['_subject'])this[_0x3b06ca(0x10a)]();},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xae9)]=Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0xce)],Scene_Battle['prototype'][_0x4b7b09(0xce)]=function(){const _0x245041=_0x4b7b09;VisuMZ[_0x245041(0x6ce)][_0x245041(0xae9)][_0x245041(0x4ad)](this),this[_0x245041(0x3c6)]();},Scene_Battle[_0x4b7b09(0x4d2)]['createAutoBattleWindow']=function(){const _0x1cc84e=_0x4b7b09,_0x5b5756=this[_0x1cc84e(0x6bc)]();this['_autoBattleWindow']=new Window_AutoBattleCancel(_0x5b5756),this[_0x1cc84e(0x708)][_0x1cc84e(0x999)](),this[_0x1cc84e(0x420)](this[_0x1cc84e(0x708)]);},Scene_Battle[_0x4b7b09(0x4d2)]['autoBattleWindowRect']=function(){const _0x29e849=_0x4b7b09;return VisuMZ[_0x29e849(0x6ce)][_0x29e849(0xb41)][_0x29e849(0x632)][_0x29e849(0x86e)][_0x29e849(0x4ad)](this);},Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0xa71)]=function(){const _0x1a5e1e=_0x4b7b09;this[_0x1a5e1e(0x86f)]=[];},Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x3c6)]=function(){const _0x4ed7ee=_0x4b7b09;if(!this[_0x4ed7ee(0x86f)])return;for(const _0x2bfdfd of this[_0x4ed7ee(0x86f)]){_0x4ed7ee(0x9f0)==='vUWhF'?_0x2bfdfd&&('zNenc'!==_0x4ed7ee(0x6dc)?(_0x14d01d[_0x4ed7ee(0x6ce)]['Spriteset_Battle_update'][_0x4ed7ee(0x4ad)](this),this[_0x4ed7ee(0x7b6)](),this[_0x4ed7ee(0x155)]()):_0x2bfdfd['update']()):this[_0x4ed7ee(0x91b)][_0x4ed7ee(0x772)]=_0x116250[_0x4ed7ee(0x4d2)][_0x4ed7ee(0xa52)]['call'](this);}},Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x1e3)]=function(_0x1cc506){const _0x122f7c=_0x4b7b09,_0x5e57c9=$dataCommonEvents[_0x1cc506];if(!_0x5e57c9)return;const _0xe4a03c=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0xe4a03c),_0xe4a03c[_0x122f7c(0x4c3)](_0x1cc506);},Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x8f0)]=function(_0x36871d){const _0xdafeb1=_0x4b7b09;this['_onceParallelInterpreters']=this[_0xdafeb1(0x86f)]||[],this[_0xdafeb1(0x86f)]['push'](_0x36871d);},Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x836)]=function(_0x2e02e9){const _0x5e4c34=_0x4b7b09;this[_0x5e4c34(0x86f)]=this[_0x5e4c34(0x86f)]||[],this[_0x5e4c34(0x86f)][_0x5e4c34(0x76b)](_0x2e02e9);},Game_Troop['prototype']['onBattleStartOnceParallels']=function(){const _0x1cacb4=_0x4b7b09;for(const _0x4d82d1 of this[_0x1cacb4(0xf3)]()['pages']){if(!this[_0x1cacb4(0x3a4)](_0x4d82d1))continue;SceneManager['_scene'][_0x1cacb4(0x458)](_0x4d82d1);}},Game_Troop['prototype'][_0x4b7b09(0x3a4)]=function(_0x2c07a3){const _0x3728fe=_0x4b7b09;if(!_0x2c07a3)return;for(const _0x2b2319 of _0x2c07a3[_0x3728fe(0x577)]){if([0x6c,0x198]['includes'](_0x2b2319[_0x3728fe(0x936)])){if('JQajr'==='JQajr'){const _0x532256=_0x2b2319['parameters'][0x0];if(_0x532256['match'](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}else this[_0x3728fe(0x42f)](_0x3728fe(0xb06));}}return![];},Scene_Battle['prototype'][_0x4b7b09(0x458)]=function(_0x58d6a4){const _0x5bef54=_0x4b7b09;if(!_0x58d6a4)return;const _0x2d2136=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0x2d2136),_0x2d2136[_0x5bef54(0x982)](_0x58d6a4);};function Game_BattleOnceParallelInterpreter(){const _0x14bb29=_0x4b7b09;this[_0x14bb29(0x827)](...arguments);}Game_BattleOnceParallelInterpreter['prototype']=Object[_0x4b7b09(0x1e1)](Game_Interpreter[_0x4b7b09(0x4d2)]),Game_BattleOnceParallelInterpreter[_0x4b7b09(0x4d2)][_0x4b7b09(0x492)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x4b7b09(0x4d2)]['setCommonEvent']=function(_0x28b2f9){const _0x18c0ca=_0x4b7b09,_0x47e28e=$dataCommonEvents[_0x28b2f9];_0x47e28e?this['setup'](_0x47e28e[_0x18c0ca(0x577)],0x0):this[_0x18c0ca(0x4d1)]();},Game_BattleOnceParallelInterpreter[_0x4b7b09(0x4d2)][_0x4b7b09(0x4d1)]=function(){const _0xe2a97f=_0x4b7b09;if(!SceneManager[_0xe2a97f(0x18e)]())return;SceneManager[_0xe2a97f(0x5ae)][_0xe2a97f(0x836)](this),Game_Interpreter[_0xe2a97f(0x4d2)][_0xe2a97f(0x4d1)]['call'](this);},Game_BattleOnceParallelInterpreter[_0x4b7b09(0x4d2)][_0x4b7b09(0x982)]=function(_0x3dbb5e){const _0x4eb093=_0x4b7b09;_0x3dbb5e?_0x4eb093(0xae8)!=='TqjNn'?this['_methods'][_0x4eb093(0x410)](_0x17839d):this[_0x4eb093(0x97a)](_0x3dbb5e['list'],0x0):this[_0x4eb093(0x4d1)]();},Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x31a)]=function(){const _0x170151=_0x4b7b09;return VisuMZ['BattleCore'][_0x170151(0xb41)][_0x170151(0xa9)][_0x170151(0x6ef)];},VisuMZ['BattleCore'][_0x4b7b09(0x379)]=Scene_Battle['prototype'][_0x4b7b09(0x84)],Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x84)]=function(){const _0x298c3e=_0x4b7b09;this[_0x298c3e(0x31a)]()?_0x298c3e(0x624)===_0x298c3e(0x624)?this[_0x298c3e(0x941)]():_0x5e3ae0-=_0x2ad668['mainSpriteHeight']():VisuMZ[_0x298c3e(0x6ce)][_0x298c3e(0x379)]['call'](this);},Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x941)]=function(){const _0x1c86ba=_0x4b7b09;if(BattleManager[_0x1c86ba(0x363)]())this[_0x1c86ba(0xa95)]();else{if(BattleManager[_0x1c86ba(0x54c)]()){if(_0x1c86ba(0x7f2)!==_0x1c86ba(0x7f2)){if(_0x53b47e[_0x1c86ba(0x45e)]===0x0)this[_0x1c86ba(0x42f)](_0x1c86ba(0xe7));else{if(_0xe83ab[_0x1c86ba(0x45e)]===0x1)this[_0x1c86ba(0x42f)](_0x1c86ba(0x81b));else _0x96f5f0['type']===0x2&&this[_0x1c86ba(0x42f)]('missile');}this[_0x1c86ba(0x3d8)](_0x414d83[_0x1c86ba(0xa4d)]);}else VisuMZ[_0x1c86ba(0x6ce)][_0x1c86ba(0x379)][_0x1c86ba(0x4ad)](this);}}},VisuMZ['BattleCore'][_0x4b7b09(0x322)]=Scene_Battle['prototype'][_0x4b7b09(0x30b)],Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x30b)]=function(){const _0x284e17=_0x4b7b09;if(BattleManager[_0x284e17(0x54c)]()){if(_0x284e17(0xaf7)!==_0x284e17(0xb0b))this['tpbCommandFight'](),this[_0x284e17(0x339)]();else{if(!_0xc8598d[_0x284e17(0x18e)]())return;_0x31e237[_0x284e17(0x92)](_0x154436,_0xde28b3);const _0x523935=_0x2172ca[_0x284e17(0x1cb)](),_0x12c99e=_0x2c9e5[_0x284e17(0x66f)]*_0x5abc37['_motionSpeed'];_0x523935[_0x284e17(0x5b0)](_0x12c99e);}}else VisuMZ['BattleCore'][_0x284e17(0x322)][_0x284e17(0x4ad)](this);},Scene_Battle['prototype'][_0x4b7b09(0x3b6)]=function(){const _0x386bb3=_0x4b7b09;if(!VisuMZ[_0x386bb3(0x6ce)][_0x386bb3(0xa35)])return;if(Imported[_0x386bb3(0xa4)]&&BattleManager['isCTB']())return;const _0x5c04cc=$gameParty[_0x386bb3(0x9d0)]()['filter'](_0x3bdc65=>_0x3bdc65[_0x386bb3(0x333)]()&&_0x3bdc65[_0x386bb3(0x924)]());BattleManager['_currentActor']=_0x5c04cc[0x0]||null;if(BattleManager['_currentActor']){if('BEtdW'!==_0x386bb3(0x9b3))BattleManager[_0x386bb3(0x6c7)][_0x386bb3(0x3dd)](_0x386bb3(0x840));else{this[_0x386bb3(0x7c8)][_0x386bb3(0x680)]=_0x364b80[_0x386bb3(0x8d6)],this['_borderPortraitSprite'][_0x386bb3(0x179)]='';return;}}},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x2a1)]=Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x4b3)],Scene_Battle['prototype'][_0x4b7b09(0x4b3)]=function(){const _0x428e8d=_0x4b7b09;VisuMZ['BattleCore'][_0x428e8d(0x2a1)][_0x428e8d(0x4ad)](this),this[_0x428e8d(0x33a)]();},Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x33a)]=function(){const _0x332f59=_0x4b7b09,_0x1237ce=this['_actorCommandWindow'];_0x1237ce[_0x332f59(0x5b4)](_0x332f59(0x1ae),this[_0x332f59(0x111)][_0x332f59(0x165)](this)),_0x1237ce[_0x332f59(0x5b4)](_0x332f59(0x3d1),this[_0x332f59(0xb1)][_0x332f59(0x165)](this)),_0x1237ce[_0x332f59(0x5b4)](_0x332f59(0x16c),this['actorCommandSingleSkill'][_0x332f59(0x165)](this)),BattleManager[_0x332f59(0x54c)]()&&(_0x332f59(0x82d)!==_0x332f59(0x82d)?(this['_battlePortrait']='',this[_0x332f59(0x724)]()&&this[_0x332f59(0x724)]()['note'][_0x332f59(0x2c1)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this['_battlePortrait']=_0x3a1c17(_0x58f4da['$1']))):this['isPartyCommandWindowDisabled']()?delete _0x1237ce[_0x332f59(0xa05)][_0x332f59(0xb57)]:_0x1237ce[_0x332f59(0x5b4)]('cancel',this[_0x332f59(0x584)][_0x332f59(0x165)](this)));},Scene_Battle['prototype'][_0x4b7b09(0x111)]=function(){const _0x56ce44=_0x4b7b09;this[_0x56ce44(0x818)]();},Scene_Battle[_0x4b7b09(0x4d2)]['actorCommandAutoBattle']=function(){const _0x920487=_0x4b7b09;BattleManager[_0x920487(0x724)]()[_0x920487(0x915)](),BattleManager[_0x920487(0x95d)](),BattleManager[_0x920487(0x802)](),this[_0x920487(0x9c0)]();},Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x2a8)]=function(){const _0xee7336=_0x4b7b09,_0x1e70d0=BattleManager[_0xee7336(0x6df)](),_0xb98d51=this[_0xee7336(0x9f4)]['currentExt']();_0x1e70d0[_0xee7336(0x89e)](_0xb98d51),BattleManager[_0xee7336(0x724)]()[_0xee7336(0x981)]($dataSkills[_0xb98d51]),this[_0xee7336(0x8fc)]();},Scene_Battle[_0x4b7b09(0x4d2)]['actorCommandCancelTPB']=function(){const _0x17831f=_0x4b7b09;this[_0x17831f(0x57f)]()?_0x17831f(0xfa)===_0x17831f(0xfa)?this[_0x17831f(0x3db)]():(this['push'](_0x17831f(0x1f1)),this['push'](_0x17831f(0x7e1)),this[_0x17831f(0x410)]('pushBaseLine'),this[_0x17831f(0x410)]('addText',_0x1d0bd8['format'](_0x364725[_0x17831f(0x639)]())),this['push'](_0x17831f(0x5b0))):this[_0x17831f(0x1dc)]();},VisuMZ['BattleCore'][_0x4b7b09(0xa35)]=![],Scene_Battle[_0x4b7b09(0x4d2)]['tpbActorSwitchConditionsMet']=function(){const _0x3a3c9b=_0x4b7b09;if(Imported[_0x3a3c9b(0xa4)]&&BattleManager[_0x3a3c9b(0xae1)]())return![];else{if(_0x3a3c9b(0xac3)===_0x3a3c9b(0xa17))this[_0x3a3c9b(0x63e)]('animation');else{if(!VisuMZ[_0x3a3c9b(0x6ce)]['TpbActiveChangeEnabled'])return![];const _0x5618f1=$gameParty[_0x3a3c9b(0x9d0)]()[_0x3a3c9b(0x451)](_0x5885df=>_0x5885df['isTpbCharged']()&&_0x5885df[_0x3a3c9b(0x924)]());return _0x5618f1[_0x3a3c9b(0x8db)]>0x0&&BattleManager['actor']()!==_0x5618f1[_0x5618f1[_0x3a3c9b(0x8db)]-0x1];}}},Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x3db)]=function(){const _0x40f4c6=_0x4b7b09,_0x43bf5a=BattleManager[_0x40f4c6(0x724)](),_0x1ad4e9=_0x43bf5a[_0x40f4c6(0xe0)]();if(_0x1ad4e9)_0x1ad4e9[_0x40f4c6(0x15c)]();const _0x3056e1=$gameParty[_0x40f4c6(0x9d0)]()[_0x40f4c6(0x451)](_0x3fafe0=>_0x3fafe0[_0x40f4c6(0x333)]()&&_0x3fafe0['canInput']()),_0x4455ee=_0x3056e1['indexOf'](_0x43bf5a),_0x27dd1e=_0x3056e1[_0x4455ee+0x1];BattleManager[_0x40f4c6(0x6c7)]=_0x27dd1e||null;if(_0x27dd1e)_0x27dd1e[_0x40f4c6(0x3dd)](_0x40f4c6(0x840));_0x43bf5a[_0x40f4c6(0x3dd)](_0x40f4c6(0x70a)),this['changeInputWindow']();},Scene_Battle[_0x4b7b09(0x4d2)]['processActorCommandCancelTPB']=function(){const _0x31aa41=_0x4b7b09;this[_0x31aa41(0x913)][_0x31aa41(0x97a)](),this[_0x31aa41(0x9f4)][_0x31aa41(0x537)]();if(!VisuMZ[_0x31aa41(0x6ce)][_0x31aa41(0xa35)])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x31aa41(0xae1)]())return;if(BattleManager[_0x31aa41(0x6c7)]){BattleManager[_0x31aa41(0x6c7)]['setActionState'](_0x31aa41(0x70a));const _0xb12d28=BattleManager[_0x31aa41(0x6c7)]['battler']();if(_0xb12d28)_0xb12d28[_0x31aa41(0x15c)]();}BattleManager[_0x31aa41(0x6c7)]=null;},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x3ee)]=Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0xb34)],Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0xb34)]=function(){const _0x17fb7d=_0x4b7b09;VisuMZ['BattleCore'][_0x17fb7d(0x3ee)]['call'](this),this[_0x17fb7d(0x99a)]();},Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x99a)]=function(){const _0x262554=_0x4b7b09;this['_actorCommandWindow'][_0x262554(0x91)](this[_0x262554(0xa94)]),this[_0x262554(0x913)][_0x262554(0x91)](this[_0x262554(0xa94)]);},Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x1f7)]=function(){const _0x103274=_0x4b7b09;if($gameTemp[_0x103274(0x50a)]!==undefined)return $gameTemp['_forcedBattleLayout'];if(this[_0x103274(0xb5)])return this[_0x103274(0xb5)];this[_0x103274(0xb5)]=VisuMZ['BattleCore'][_0x103274(0xb41)][_0x103274(0x8e4)]['Style']['toLowerCase']()[_0x103274(0x612)]();if(this[_0x103274(0xb5)]===_0x103274(0x369)&&!Imported[_0x103274(0x57a)]){if(_0x103274(0x55d)!=='Htsiz')this[_0x103274(0xb5)]=_0x103274(0x127);else{if(_0x56704c[_0x103274(0x210)](_0x4d39a4))return!![];return![];}}return this[_0x103274(0xb5)]===_0x103274(0x4bf)&&!Imported[_0x103274(0x6a8)]&&(this[_0x103274(0xb5)]=_0x103274(0x127)),this[_0x103274(0xb5)];},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x821)]=Scene_Battle['prototype'][_0x4b7b09(0x9fe)],Scene_Battle[_0x4b7b09(0x4d2)]['windowAreaHeight']=function(){const _0x442042=_0x4b7b09,_0x4f6cbc=this[_0x442042(0x1f7)]();switch(_0x4f6cbc){case _0x442042(0x577):return this[_0x442042(0xac1)](Math['max'](0x1,$gameParty['maxBattleMembers']()),!![]);break;default:return VisuMZ[_0x442042(0x6ce)][_0x442042(0x821)]['call'](this);break;}},VisuMZ['BattleCore'][_0x4b7b09(0x789)]=Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x367)],Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x367)]=function(){const _0x2c0bc7=_0x4b7b09,_0x340cc7=this[_0x2c0bc7(0x1f7)]();switch(_0x340cc7){case'border':return this[_0x2c0bc7(0x42a)]();break;case _0x2c0bc7(0x127):case _0x2c0bc7(0x577):case'xp':case'portrait':default:return VisuMZ[_0x2c0bc7(0x6ce)][_0x2c0bc7(0x789)][_0x2c0bc7(0x4ad)](this);break;}},Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0xa5e)]=function(){const _0x178ee6=_0x4b7b09,_0x1f7a34=this[_0x178ee6(0x1f7)]();switch(_0x1f7a34){case'xp':case _0x178ee6(0xb3e):return this[_0x178ee6(0x51e)]();break;case _0x178ee6(0xad5):return this['statusWindowRectBorderStyle']();break;case _0x178ee6(0x127):case _0x178ee6(0x577):default:return this[_0x178ee6(0x1f3)]();break;}},VisuMZ['BattleCore'][_0x4b7b09(0x1af)]=Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x1d4)],Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x1d4)]=function(){const _0x23ce74=_0x4b7b09,_0x1637f5=this['battleLayoutStyle']();switch(_0x1637f5){case'xp':case _0x23ce74(0xb3e):return this[_0x23ce74(0x242)]();break;case'border':return this['partyCommandWindowRectBorderStyle']();case _0x23ce74(0x127):case _0x23ce74(0x577):default:return this[_0x23ce74(0x6c5)]();break;}},Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x6c5)]=function(){const _0x46dde7=_0x4b7b09,_0x2472b7=VisuMZ[_0x46dde7(0x6ce)][_0x46dde7(0xb41)][_0x46dde7(0x8e4)],_0x55401b=_0x2472b7[_0x46dde7(0x611)]||0xc0,_0x28289f=this[_0x46dde7(0x9fe)](),_0x3389b4=this[_0x46dde7(0x8e7)]()?Graphics[_0x46dde7(0x979)]-_0x55401b:0x0,_0xfc46b5=Graphics[_0x46dde7(0x807)]-_0x28289f;return new Rectangle(_0x3389b4,_0xfc46b5,_0x55401b,_0x28289f);},Scene_Battle[_0x4b7b09(0x4d2)]['actorCommandWindowRect']=function(){return this['partyCommandWindowRect']();},VisuMZ['BattleCore'][_0x4b7b09(0x880)]=Scene_Battle[_0x4b7b09(0x4d2)]['updateStatusWindowPosition'],Scene_Battle[_0x4b7b09(0x4d2)]['updateStatusWindowPosition']=function(){const _0x303512=_0x4b7b09,_0x5e278d=this['battleLayoutStyle']();switch(_0x5e278d){case'xp':case _0x303512(0xb3e):case'border':break;case _0x303512(0x127):case'list':default:VisuMZ[_0x303512(0x6ce)][_0x303512(0x880)][_0x303512(0x4ad)](this);break;}},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x764)]=Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x18a)],Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x18a)]=function(){const _0x387091=_0x4b7b09;VisuMZ[_0x387091(0x6ce)]['Scene_Battle_startActorSelection'][_0x387091(0x4ad)](this),this['makeTargetSelectionMoreVisible']();},VisuMZ['BattleCore'][_0x4b7b09(0xa97)]=Scene_Battle[_0x4b7b09(0x4d2)]['startEnemySelection'],Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x7b2)]=function(){const _0x52cba6=_0x4b7b09;VisuMZ['BattleCore'][_0x52cba6(0xa97)]['call'](this),this[_0x52cba6(0xa9a)][_0x52cba6(0x98b)](),this['makeTargetSelectionMoreVisible']();},Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0xafc)]=function(){const _0x4493d0=_0x4b7b09,_0x548e49=this[_0x4493d0(0x1f7)]();['xp','portrait',_0x4493d0(0xad5)][_0x4493d0(0x382)](_0x548e49)&&this[_0x4493d0(0x9f4)][_0x4493d0(0x537)](),(_0x548e49===_0x4493d0(0xad5)||this[_0x4493d0(0x6fb)]())&&(this[_0x4493d0(0x72a)][_0x4493d0(0x537)](),this[_0x4493d0(0xad6)][_0x4493d0(0x537)]());},VisuMZ['BattleCore'][_0x4b7b09(0x4d6)]=Scene_Battle['prototype'][_0x4b7b09(0x80c)],Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x80c)]=function(){const _0x58c9a9=_0x4b7b09;VisuMZ['BattleCore'][_0x58c9a9(0x4d6)][_0x58c9a9(0x4ad)](this),this[_0x58c9a9(0x27d)]();},Scene_Battle[_0x4b7b09(0x4d2)]['isNonSubmenuCancel']=function(){const _0x483571=_0x4b7b09;return['attack',_0x483571(0x287),_0x483571(0x16c)][_0x483571(0x382)](this[_0x483571(0x9f4)]['currentSymbol']());},VisuMZ['BattleCore'][_0x4b7b09(0x769)]=Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x1f2)],Scene_Battle['prototype'][_0x4b7b09(0x1f2)]=function(){const _0x277620=_0x4b7b09;this[_0x277620(0x844)]()?(this[_0x277620(0x406)][_0x277620(0xb4c)](),this[_0x277620(0xb7f)][_0x277620(0x999)](),this[_0x277620(0x9f4)]['activate']()):_0x277620(0x378)!==_0x277620(0x378)?this[_0x277620(0x265)][_0x277620(0x420)](this[_0x277620(0x62c)]):VisuMZ[_0x277620(0x6ce)]['Scene_Battle_onActorCancel'][_0x277620(0x4ad)](this),this['cancelTargetSelectionVisibility']();},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xb4f)]=Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0xa1a)],Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0xa1a)]=function(){const _0x5381d6=_0x4b7b09;VisuMZ[_0x5381d6(0x6ce)]['Scene_Battle_onEnemyOk'][_0x5381d6(0x4ad)](this),this[_0x5381d6(0x27d)]();},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x50d)]=Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x244)],Scene_Battle[_0x4b7b09(0x4d2)]['onEnemyCancel']=function(){const _0x1c3575=_0x4b7b09;this[_0x1c3575(0x844)]()?(this[_0x1c3575(0x406)]['show'](),this['_enemyWindow'][_0x1c3575(0x999)](),this[_0x1c3575(0x9f4)][_0x1c3575(0x421)]()):VisuMZ['BattleCore'][_0x1c3575(0x50d)][_0x1c3575(0x4ad)](this),this[_0x1c3575(0x676)]();},Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x27d)]=function(){const _0x790f4f=_0x4b7b09,_0x50221c=this['battleLayoutStyle']();if(_0x50221c==='border'||this['isSkillItemWindowsMiddle']()){this[_0x790f4f(0x72a)][_0x790f4f(0xa15)]();if(this[_0x790f4f(0x72a)]['active']){if(_0x790f4f(0x98c)===_0x790f4f(0x98c))this[_0x790f4f(0x72a)][_0x790f4f(0xb4c)]();else return this[_0x790f4f(0xb0c)]&&this[_0x790f4f(0xb0c)]()?_0x5e0cfe[_0x790f4f(0x6ce)][_0x790f4f(0xb41)][_0x790f4f(0x5dc)][_0x790f4f(0x315)]:_0x68b499[_0x790f4f(0x6ce)][_0x790f4f(0xb41)]['Enemy'][_0x790f4f(0x315)];}this[_0x790f4f(0xad6)][_0x790f4f(0xa15)]();if(this['_itemWindow'][_0x790f4f(0x661)]){if(_0x790f4f(0x79f)!==_0x790f4f(0x79f)){if(this[_0x790f4f(0x91b)][_0x790f4f(0x20e)]!==_0x5d8fc3)return this[_0x790f4f(0x91b)][_0x790f4f(0x20e)];let _0x149f0a=_0x5ee21b[_0x790f4f(0x6ce)][_0x790f4f(0xb41)][_0x790f4f(0xb75)]['DefaultSoftCap'];const _0x263e0e=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x4b6524=this[_0x790f4f(0xaf0)]()[_0x790f4f(0x78)](_0x11725b=>_0x11725b&&_0x11725b[_0x790f4f(0xaf1)][_0x790f4f(0x2c1)](_0x263e0e)?_0x15d13b(_0x18fd3d['$1'])/0x64:0x0);return _0x149f0a=_0x4b6524[_0x790f4f(0x10b)]((_0x481755,_0x1e7b29)=>_0x481755+_0x1e7b29,_0x149f0a),this[_0x790f4f(0x91b)][_0x790f4f(0x20e)]=_0x149f0a,this['_cache'][_0x790f4f(0x20e)][_0x790f4f(0x88c)](0.01,0x1);}else this[_0x790f4f(0xad6)][_0x790f4f(0xb4c)]();}}},Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x676)]=function(){const _0x5e070d=_0x4b7b09,_0x1d82db=this[_0x5e070d(0x1f7)]();if(['xp',_0x5e070d(0xb3e),'border'][_0x5e070d(0x382)](_0x1d82db)){if(_0x5e070d(0xafa)===_0x5e070d(0xafa))this[_0x5e070d(0x9f4)][_0x5e070d(0xa15)]();else{const _0x1fd67f=_0x3c4cc2[_0x5e070d(0x6ce)]['Settings']['ActionSequence'],_0x1ac268=_0x1fd67f[_0x5e070d(0xa0c)],_0x629ccc=_0x1fd67f[_0x5e070d(0x8df)],_0x402071=_0x1fd67f['StepDuration'];this[_0x5e070d(0x7fc)](-_0x1ac268,-_0x629ccc,_0x402071);}}this[_0x5e070d(0x27d)]();},Scene_Battle['prototype'][_0x4b7b09(0x1f3)]=function(){const _0x26e96f=_0x4b7b09,_0x4c0216=VisuMZ[_0x26e96f(0x6ce)][_0x26e96f(0xb41)][_0x26e96f(0x8e4)],_0x2df1b9=Window_BattleStatus[_0x26e96f(0x4d2)][_0x26e96f(0x23c)](),_0x4ab34d=Graphics[_0x26e96f(0x979)]-(_0x4c0216['CommandWidth']||0xc0),_0x345b18=this[_0x26e96f(0x9fe)]()+_0x2df1b9,_0x5e890b=this[_0x26e96f(0x8e7)]()?0x0:Graphics['boxWidth']-_0x4ab34d,_0x137e5c=Graphics['boxHeight']-_0x345b18+_0x2df1b9;return new Rectangle(_0x5e890b,_0x137e5c,_0x4ab34d,_0x345b18);},Scene_Battle['prototype'][_0x4b7b09(0x51e)]=function(){const _0x5950d2=_0x4b7b09,_0x4d63fe=Window_BattleStatus[_0x5950d2(0x4d2)][_0x5950d2(0x23c)](),_0x25ea49=Graphics['boxWidth'],_0x562cf9=this[_0x5950d2(0x9fe)]()+_0x4d63fe,_0x1047d8=0x0,_0x1aa10d=Graphics[_0x5950d2(0x807)]-_0x562cf9+_0x4d63fe;return new Rectangle(_0x1047d8,_0x1aa10d,_0x25ea49,_0x562cf9);},Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x242)]=function(){const _0x3d243d=_0x4b7b09,_0x1c0a60=Graphics[_0x3d243d(0x979)]/0x2,_0x15aefc=this['calcWindowHeight'](VisuMZ[_0x3d243d(0x6ce)]['Settings']['BattleLayout'][_0x3d243d(0x1fe)],!![]),_0x586c57=Math[_0x3d243d(0x2ca)]((Graphics[_0x3d243d(0x979)]-_0x1c0a60)/0x2),_0x4880ec=Graphics[_0x3d243d(0x807)]-_0x15aefc-this[_0x3d243d(0x51e)]()[_0x3d243d(0xb65)];return new Rectangle(_0x586c57,_0x4880ec,_0x1c0a60,_0x15aefc);},Scene_Battle[_0x4b7b09(0x4d2)]['helpWindowRectBorderStyle']=function(){const _0x2694fc=_0x4b7b09,_0x3c3994=Graphics[_0x2694fc(0x839)],_0x77448b=Math[_0x2694fc(0x2ca)]((Graphics[_0x2694fc(0x979)]-_0x3c3994)/0x2),_0x3ece9f=this['helpAreaHeight'](),_0x18532c=(Graphics[_0x2694fc(0xb65)]-Graphics[_0x2694fc(0x807)])/-0x2;return new Rectangle(_0x77448b,_0x18532c,_0x3c3994,_0x3ece9f);},Scene_Battle[_0x4b7b09(0x4d2)]['statusWindowRectBorderStyle']=function(){const _0x4901a7=_0x4b7b09,_0x52dbbd=Graphics[_0x4901a7(0x839)],_0x49fa92=Math[_0x4901a7(0x2ca)]((Graphics[_0x4901a7(0x979)]-_0x52dbbd)/0x2),_0x3a33f1=this[_0x4901a7(0xac1)](0x4,!![]),_0x337e68=Graphics[_0x4901a7(0x807)]-_0x3a33f1+(Graphics['height']-Graphics['boxHeight'])/0x2;return new Rectangle(_0x49fa92,_0x337e68,_0x52dbbd,_0x3a33f1);},Scene_Battle[_0x4b7b09(0x4d2)]['partyCommandWindowRectBorderStyle']=function(){const _0x52c60d=_0x4b7b09,_0xe7fba2=Math['floor'](Graphics[_0x52c60d(0x839)]/0x3),_0x3aab0c=this[_0x52c60d(0x8e7)]()?(Graphics[_0x52c60d(0x839)]+Graphics[_0x52c60d(0x979)])/0x2-_0xe7fba2:(Graphics[_0x52c60d(0x839)]-Graphics['boxWidth'])/-0x2,_0x284ecc=this[_0x52c60d(0x42a)](),_0x3bcd6c=_0x284ecc['y']+_0x284ecc[_0x52c60d(0xb65)],_0x245282=this[_0x52c60d(0x288)](),_0x341af3=_0x245282['y']-_0x3bcd6c;return new Rectangle(_0x3aab0c,_0x3bcd6c,_0xe7fba2,_0x341af3);},Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x1b1)]=function(){const _0x210d01=_0x4b7b09,_0x554b5c=Math[_0x210d01(0x83c)](Graphics[_0x210d01(0x839)]/0x3),_0x1c1827=Math[_0x210d01(0x2ca)]((Graphics['boxWidth']-_0x554b5c)/0x2),_0x5bf4e7=this[_0x210d01(0xa0)](),_0x367aa7=_0x5bf4e7['y'],_0x5a6b3d=_0x5bf4e7['height'];return new Rectangle(_0x1c1827,_0x367aa7,_0x554b5c,_0x5a6b3d);},Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x7a8)]=function(){const _0x3c3eea=_0x4b7b09;this[_0x3c3eea(0x9d6)]['y']=this[_0x3c3eea(0xa94)]['y']+this[_0x3c3eea(0xa94)][_0x3c3eea(0xb65)],this[_0x3c3eea(0x8e7)]()?this[_0x3c3eea(0x1f7)]()===_0x3c3eea(0xad5)?'oMbaP'!==_0x3c3eea(0x7b5)?this['_cancelButton']['x']=0x8:this[_0x3c3eea(0x50a)]='default':_0x3c3eea(0x4a7)===_0x3c3eea(0x4a7)?this[_0x3c3eea(0x9d6)]['x']=-this[_0x3c3eea(0x9d6)][_0x3c3eea(0x839)]-0x4:(_0x9a5910[_0x3c3eea(0x6ce)][_0x3c3eea(0xa5f)]['call'](this),this['clearFreezeMotion']()):this[_0x3c3eea(0x9d6)]['x']=Graphics[_0x3c3eea(0x839)]-(Graphics['width']-Graphics[_0x3c3eea(0x979)])/0x2-this['_cancelButton'][_0x3c3eea(0x839)]-0x4;},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x66c)]=Scene_Battle['prototype'][_0x4b7b09(0xb77)],Scene_Battle['prototype'][_0x4b7b09(0xb77)]=function(){const _0x15b02e=_0x4b7b09;if(this[_0x15b02e(0x1f7)]()===_0x15b02e(0xad5))return this[_0x15b02e(0x1b1)]();else return this['isSkillItemWindowsMiddle']()?this[_0x15b02e(0x6a9)]():VisuMZ[_0x15b02e(0x6ce)][_0x15b02e(0x66c)][_0x15b02e(0x4ad)](this);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x39b)]=Scene_Battle['prototype'][_0x4b7b09(0xb0a)],Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0xb0a)]=function(){const _0x5dae9a=_0x4b7b09;if(this[_0x5dae9a(0x1f7)]()===_0x5dae9a(0xad5))return this[_0x5dae9a(0x1b1)]();else{if(this[_0x5dae9a(0x6fb)]())return this[_0x5dae9a(0x6a9)]();else{if('kaxiZ'!==_0x5dae9a(0x72e))return VisuMZ['BattleCore'][_0x5dae9a(0x39b)][_0x5dae9a(0x4ad)](this);else{const _0x2bc8b4=this[_0x5dae9a(0x2a0)](_0x795c21);if(_0x2bc8b4[_0x5dae9a(0x2c1)](/\\I\[(\d+)\]/i)){const _0x5930b0=this['itemLineRect'](_0x268edb),_0x2afc88=this[_0x5dae9a(0x286)](_0x2bc8b4)[_0x5dae9a(0x839)];return _0x2afc88<=_0x5930b0[_0x5dae9a(0x839)]?_0x5dae9a(0x5bd):_0x5dae9a(0x188);}}}}},Scene_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x6fb)]=function(){const _0x215528=_0x4b7b09;return VisuMZ['BattleCore'][_0x215528(0xb41)]['BattleLayout'][_0x215528(0x8c3)];},Scene_Battle[_0x4b7b09(0x4d2)]['skillItemWindowRectMiddle']=function(){const _0x51f14f=_0x4b7b09,_0x2350da=Sprite_Button['prototype'][_0x51f14f(0xaf)]()*0x2+0x4;let _0x36269b=Graphics['boxWidth']-_0x2350da;if(Imported[_0x51f14f(0x490)]&&SceneManager['isSideButtonLayout']()){if('ZvJaV'===_0x51f14f(0xcc))_0x36269b+=_0x2350da;else{const _0x4f66d5=this['getAttackMotion']();return _0x4f66d5?_0x4f66d5['weaponImageId']:0x0;}}const _0x3e991a=this[_0x51f14f(0x409)](),_0x93a25=Graphics[_0x51f14f(0x807)]-_0x3e991a-this[_0x51f14f(0xa5e)]()[_0x51f14f(0xb65)]+Window_BattleStatus[_0x51f14f(0x4d2)][_0x51f14f(0x23c)](),_0x49cb00=0x0;return new Rectangle(_0x49cb00,_0x3e991a,_0x36269b,_0x93a25);},Scene_Battle[_0x4b7b09(0x4d2)]['createEnemyNameContainer']=function(){const _0xd1a4a8=_0x4b7b09;if(!VisuMZ[_0xd1a4a8(0x6ce)][_0xd1a4a8(0xb41)][_0xd1a4a8(0x97d)][_0xd1a4a8(0x589)])return;this[_0xd1a4a8(0x3b9)]=new Sprite(),this[_0xd1a4a8(0x3b9)]['x']=this[_0xd1a4a8(0xa1d)]['x'],this[_0xd1a4a8(0x3b9)]['y']=this[_0xd1a4a8(0xa1d)]['y'];const _0x433560=this['children'][_0xd1a4a8(0x853)](this['_windowLayer']);this[_0xd1a4a8(0x503)](this[_0xd1a4a8(0x3b9)],_0x433560);for(let _0x135666=0x0;_0x135666<0x8;_0x135666++){if(_0xd1a4a8(0x45a)===_0xd1a4a8(0x684))return!this[_0xd1a4a8(0x2e4)]();else{const _0x5ef95a=new Window_EnemyName(_0x135666);this['_enemyNameContainer'][_0xd1a4a8(0x420)](_0x5ef95a);}}},Sprite_Battler[_0x4b7b09(0x872)]=VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xb41)][_0x4b7b09(0x5dc)]['MotionSpeed'],VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x786)]=Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x737)],Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x737)]=function(){const _0x1b6a18=_0x4b7b09;VisuMZ['BattleCore'][_0x1b6a18(0x786)]['call'](this),this['initMembersBattleCore']();if(this[_0x1b6a18(0x492)]===Sprite_Enemy)this[_0x1b6a18(0x56f)]();this[_0x1b6a18(0x6d3)]();},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0xa11)]=function(){const _0x1757de=_0x4b7b09;this[_0x1757de(0x226)]=0x0,this[_0x1757de(0x518)]=0x0,this[_0x1757de(0x1fc)]=0x0,this[_0x1757de(0xd5)]=0x0,this[_0x1757de(0x538)]=0x0,this['_floatWholeDuration']=0x0,this[_0x1757de(0x36e)]=_0x1757de(0x5cb),this[_0x1757de(0x9e7)]=0x0,this[_0x1757de(0xb79)]=0x0,this[_0x1757de(0x211)]=0x0,this[_0x1757de(0x8b4)]=0x0,this[_0x1757de(0x4af)]=0xff,this[_0x1757de(0x2bb)]=0x0,this[_0x1757de(0x4e5)]=0x0,this[_0x1757de(0x116)]=_0x1757de(0x5cb),this[_0x1757de(0x20d)]=0x0,this[_0x1757de(0x1c0)]=0x0,this[_0x1757de(0x263)]=0x0,this[_0x1757de(0x32e)]=0x0,this[_0x1757de(0x5cd)]=_0x1757de(0x5cb),this[_0x1757de(0x8da)]=!![],this[_0x1757de(0xb8)]=0x0,this[_0x1757de(0x26a)]=0x0,this['_targetSkewX']=0x0,this['_targetSkewY']=0x0,this[_0x1757de(0xa04)]=0x0,this[_0x1757de(0x177)]=0x0,this[_0x1757de(0x107)]='Linear',this[_0x1757de(0xb37)]=0x1,this[_0x1757de(0x68a)]=0x1,this[_0x1757de(0x646)]=0x1,this[_0x1757de(0x985)]=0x1,this[_0x1757de(0x94d)]=0x0,this['_growWholeDuration']=0x0,this[_0x1757de(0x886)]=_0x1757de(0x5cb),this[_0x1757de(0x22b)]=0x1,this[_0x1757de(0x8e2)]=0x0,this[_0x1757de(0x8e3)]=0x0,this['_homeDuration']=0x0,this[_0x1757de(0x9b0)]=0x0,this['_homeEasing']=_0x1757de(0x5cb);},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x56f)]=function(){const _0x113762=_0x4b7b09;this[_0x113762(0x30d)]=new Sprite(),this['_shadowSprite'][_0x113762(0x680)]=ImageManager[_0x113762(0x6e0)](_0x113762(0x958)),this['_shadowSprite'][_0x113762(0x680)][_0x113762(0x88)]=VisuMZ['BattleCore']['Settings'][_0x113762(0x5dc)][_0x113762(0xb15)],this[_0x113762(0x30d)][_0x113762(0x792)]['x']=0.5,this[_0x113762(0x30d)][_0x113762(0x792)]['y']=0.5,this[_0x113762(0x30d)]['y']=-0x2,this[_0x113762(0x30d)][_0x113762(0xe2)]=![],this[_0x113762(0x420)](this[_0x113762(0x30d)]);},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x6d3)]=function(){const _0x36afe7=_0x4b7b09;this[_0x36afe7(0x265)]=new Sprite(),this['_distortionSprite'][_0x36afe7(0x792)]['x']=0.5,this['_distortionSprite'][_0x36afe7(0x792)]['y']=0.5,this[_0x36afe7(0x420)](this[_0x36afe7(0x265)]);},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x47b)]=function(){const _0xddec74=_0x4b7b09;if(!this[_0xddec74(0x265)])return;if(this['_shadowSprite']){if(_0xddec74(0xa6c)!==_0xddec74(0xb03)){const _0x561033=this[_0xddec74(0x6a3)](this[_0xddec74(0x265)]);this[_0xddec74(0x503)](this[_0xddec74(0x30d)],_0x561033),this['updateShadowVisibility']();}else this['requestMotionRefresh'](),this[_0xddec74(0xb1b)]();}this[_0xddec74(0x480)]&&this[_0xddec74(0x265)][_0xddec74(0x420)](this[_0xddec74(0x480)]),this[_0xddec74(0x9da)]&&this[_0xddec74(0x265)][_0xddec74(0x420)](this[_0xddec74(0x9da)]),this[_0xddec74(0x1b4)]&&this[_0xddec74(0x265)][_0xddec74(0x420)](this[_0xddec74(0x1b4)]),this['_injectAnimationSprite']&&this[_0xddec74(0x265)][_0xddec74(0x420)](this[_0xddec74(0x62c)]),this['_dragonbonesSpriteContainer']&&('ilolp'!=='vurDL'?this[_0xddec74(0x265)][_0xddec74(0x420)](this[_0xddec74(0x75e)]):(this[_0xddec74(0x1c0)]=0x0,this[_0xddec74(0x20d)]=0x0));},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x88f)]=function(){const _0xf1971=_0x4b7b09;if(!this['_shadowSprite'])return;if(this['_battler']&&this[_0xf1971(0x6a7)][_0xf1971(0x186)]()){const _0x8ba42=this[_0xf1971(0x30d)][_0xf1971(0x680)];this[_0xf1971(0x30d)][_0xf1971(0x428)](0x0,0x0,_0x8ba42[_0xf1971(0x839)],_0x8ba42[_0xf1971(0xb65)]);}else'KiXUr'!==_0xf1971(0x38b)?(_0x54ff25=this[_0xf1971(0xa2a)][_0xf1971(0x5ff)](),_0x22f238=this['_back2Sprite']['battleback2Name']()):this[_0xf1971(0x30d)][_0xf1971(0x428)](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x181)]=function(){const _0x2b03a7=_0x4b7b09;if(SceneManager[_0x2b03a7(0x18e)]())return SceneManager['_scene']['_spriteset'][_0x2b03a7(0x6d7)];else{if(_0x2b03a7(0x5f7)!=='blOMZ')for(const _0x216a8a of _0x51e07b){const _0x4dea5e=_0x3a6a3f[0x0]['format'](_0x216a8a[0x0]),_0x1995e7=_0x505a8a[0x1][_0x2b03a7(0xace)](_0x216a8a[0x1]),_0xa689a4=new _0x4ec686(_0x170a0c[_0x2b03a7(0xace)](_0x1995e7),'i');_0x249441[_0x4dea5e]=_0xa689a4;}else return this[_0x2b03a7(0x45c)];}},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x21c)]=function(_0xdb3611,_0x20db02){const _0x326b19=_0x4b7b09;if(!this[_0x326b19(0x6a7)][_0x326b19(0x857)]())return;if(BattleManager[_0x326b19(0xade)]())return;const _0x1795e9=VisuMZ[_0x326b19(0x6ce)][_0x326b19(0xb41)][_0x326b19(0xb75)],_0x3d87ae=new Sprite_Damage();_0x3d87ae[_0x326b19(0x5c3)]=_0x1795e9[_0x326b19(0x156)],this['sortDamageSprites'](_0x3d87ae),_0x3d87ae[_0x326b19(0x21c)](_0xdb3611,_0x20db02),this[_0x326b19(0xa5d)](_0x3d87ae);},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x207)]=function(_0x18cc44,_0x8cf762,_0x5b2b87){const _0x28a10b=_0x4b7b09;if(!this[_0x28a10b(0x6a7)][_0x28a10b(0x857)]())return;if(BattleManager[_0x28a10b(0xade)]())return;const _0x33b0d2=VisuMZ[_0x28a10b(0x6ce)][_0x28a10b(0xb41)][_0x28a10b(0xb75)],_0x5cd504=new Sprite_Damage();_0x5cd504['_duration']=_0x33b0d2[_0x28a10b(0x156)],this[_0x28a10b(0x656)](_0x5cd504),_0x5cd504[_0x28a10b(0x207)](_0x18cc44,_0x8cf762,_0x5b2b87),this['addDamageSprite'](_0x5cd504);},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x89c)]=function(){const _0x3ca657=_0x4b7b09;if(!this[_0x3ca657(0x6a7)]['isDamagePopupRequested']())return;while(this[_0x3ca657(0x6a7)][_0x3ca657(0xb1a)]()){_0x3ca657(0xb4d)===_0x3ca657(0xb4d)?this[_0x3ca657(0x6a7)][_0x3ca657(0x857)]()&&(_0x3ca657(0x68d)!==_0x3ca657(0x68d)?this[_0x3ca657(0x8da)]=!![]:this[_0x3ca657(0x459)]()):(this['push'](_0x3ca657(0x75c)),this[_0x3ca657(0x410)](_0x3ca657(0x7e1)),this[_0x3ca657(0x410)](_0x3ca657(0xaf9)),this['push'](_0x3ca657(0x8a9),_0x79495a[_0x3ca657(0x920)]['format'](_0x3246e9[_0x3ca657(0x639)]())),this[_0x3ca657(0x410)]('wait'));}this[_0x3ca657(0x6a7)][_0x3ca657(0x69e)](),this[_0x3ca657(0x6a7)][_0x3ca657(0x85c)]();},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x459)]=function(){const _0xd9aa3e=_0x4b7b09;if(BattleManager['shouldHideBattleEndPopups']())return;const _0x45f89d=VisuMZ[_0xd9aa3e(0x6ce)]['Settings'][_0xd9aa3e(0xb75)],_0x10f026=new Sprite_Damage();_0x10f026[_0xd9aa3e(0x5c3)]=_0x45f89d[_0xd9aa3e(0x156)],this[_0xd9aa3e(0x656)](_0x10f026),_0x10f026[_0xd9aa3e(0x97a)](this['_battler']),_0x10f026[_0xd9aa3e(0x2cd)](this[_0xd9aa3e(0x6a7)]),this[_0xd9aa3e(0xa5d)](_0x10f026);},Sprite_Battler[_0x4b7b09(0x4d2)]['addDamageSprite']=function(_0x171e1c){const _0x1efd37=_0x4b7b09;this[_0x1efd37(0x385)][_0x1efd37(0x410)](_0x171e1c);if(this['isShownOnBattlePortrait']()){const _0x1f200d=SceneManager[_0x1efd37(0x5ae)][_0x1efd37(0x406)];if(_0x1f200d)_0x1f200d[_0x1efd37(0xa5d)](_0x171e1c,this['_battler']);}else{if(_0x1efd37(0xb5a)===_0x1efd37(0xb5a)){this[_0x1efd37(0x181)]()['addChild'](_0x171e1c);if(SceneManager[_0x1efd37(0x597)]())_0x171e1c[_0x1efd37(0x785)]['x']=-0x1;}else this[_0x1efd37(0x30d)]=new _0x5aa232(),this['_shadowSprite'][_0x1efd37(0x680)]=_0x56506e[_0x1efd37(0x6e0)](_0x1efd37(0x958)),this['_shadowSprite'][_0x1efd37(0x680)]['smooth']=_0x3b1541[_0x1efd37(0x6ce)][_0x1efd37(0xb41)][_0x1efd37(0x5dc)][_0x1efd37(0xb15)],this[_0x1efd37(0x30d)][_0x1efd37(0x792)]['x']=0.5,this['_shadowSprite'][_0x1efd37(0x792)]['y']=0.5,this[_0x1efd37(0x30d)]['y']=-0x2,this[_0x1efd37(0x30d)][_0x1efd37(0xe2)]=![],this[_0x1efd37(0x420)](this[_0x1efd37(0x30d)]);}},Sprite_Battler[_0x4b7b09(0x4d2)]['isShownOnBattlePortrait']=function(){const _0x1d1fa8=_0x4b7b09;return!$gameSystem[_0x1d1fa8(0x43d)]()&&this[_0x1d1fa8(0x6a7)]&&this[_0x1d1fa8(0x6a7)][_0x1d1fa8(0xb0c)]();},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x656)]=function(_0x2fa041){const _0x16a213=_0x4b7b09;this['alignBattleCoreDamageSprite'](_0x2fa041,!![]);const _0x1a5bbb=VisuMZ[_0x16a213(0x6ce)][_0x16a213(0xb41)][_0x16a213(0xb75)],_0x55f7fa=SceneManager[_0x16a213(0x597)]()?-0x1:0x1;if(_0x1a5bbb[_0x16a213(0x60a)])for(const _0x525f55 of this[_0x16a213(0x385)]){if(_0x16a213(0x312)===_0x16a213(0x312))_0x525f55['x']+=_0x1a5bbb[_0x16a213(0x77b)]*_0x55f7fa,_0x525f55['y']+=_0x1a5bbb[_0x16a213(0x77e)];else{const _0x5406fb=this[_0x16a213(0xe0)]();_0x5406fb&&(_0x5406fb['forceMotion'](_0xf0bec2),[_0x16a213(0x81b),_0x16a213(0xe7),_0x16a213(0xb06)][_0x16a213(0x382)](_0x17fffa)&&this[_0x16a213(0x6c4)]());}}else{const _0x5f3c8d=this[_0x16a213(0x385)][this[_0x16a213(0x385)][_0x16a213(0x8db)]-0x1];_0x5f3c8d&&(_0x2fa041['x']=_0x5f3c8d['x']+_0x1a5bbb[_0x16a213(0x77b)]*_0x55f7fa,_0x2fa041['y']=_0x5f3c8d['y']+_0x1a5bbb['PopupShiftY']);}},Sprite_Battler[_0x4b7b09(0x4d2)]['alignBattleCoreDamageSprite']=function(_0x274e96,_0x179adf){const _0x41c187=_0x4b7b09,_0x967608=SceneManager[_0x41c187(0x597)]()?-0x1:0x1;let _0x3c593c=this[_0x41c187(0x226)];_0x3c593c+=this[_0x41c187(0xa0a)]();let _0x3e2874=this[_0x41c187(0x518)];const _0x45bfee=this[_0x41c187(0x265)][_0x41c187(0x785)]['y'];_0x3e2874+=this['extraPositionY']();const _0x52cfbd=SceneManager[_0x41c187(0x5ae)]['_statusWindow'];if(_0x52cfbd&&this[_0x41c187(0x45c)]===_0x52cfbd){if('PgGbW'!==_0x41c187(0x93e)){const _0xdd2912=_0x41c187(0x814)[_0x41c187(0xace)](_0x128df9['actorId']()),_0x44d8b3=this[_0x41c187(0xa96)](_0xdd2912,_0x195ef7),_0x31b678=_0xfcd7f9[_0x41c187(0x92b)]();_0x31b678!==''?_0x44d8b3[_0x41c187(0x680)]=_0x2b08ce[_0x41c187(0x82f)](_0x31b678):_0x44d8b3[_0x41c187(0x680)]=_0xd2f621[_0x41c187(0x8d6)];const _0x37b46a=this['itemRect'](_0x1fd707);_0x44d8b3[_0x41c187(0x792)]['x']=0.5,_0x44d8b3['anchor']['y']=0x1;let _0x2c177b=_0x45ff45[_0x41c187(0x2ca)](_0x37b46a['x']+_0x37b46a['width']/0x2)+this[_0x41c187(0x790)];_0x2c177b+=_0x37df72['getBattlePortraitOffsetX']();let _0x59b829=_0x773f9a[_0x41c187(0x2ca)](this[_0x41c187(0xb65)]);_0x59b829+=_0x4c401d[_0x41c187(0xb8d)](),_0x44d8b3[_0x41c187(0x4c2)](_0x2c177b,_0x59b829);const _0x9e58a1=_0x20c35e['BattleCore'][_0x41c187(0xb41)][_0x41c187(0x8e4)]['PortraitScale'];_0x44d8b3[_0x41c187(0x785)]['x']=_0x9e58a1,_0x44d8b3[_0x41c187(0x785)]['y']=_0x9e58a1,_0x44d8b3[_0x41c187(0xb4c)]();}else{_0x3c593c+=_0x52cfbd['x']-this['damageOffsetX']();const _0x2e0caa=_0x52cfbd[_0x41c187(0xad8)]()*0x3/0x4;_0x3e2874=_0x52cfbd['y']+_0x2e0caa,_0x3e2874=Math[_0x41c187(0x5e3)](_0x3e2874,_0x52cfbd['y']+this['y']-this['height']+_0x2e0caa);}}_0x274e96['x']=Math['round'](_0x3c593c+this['damageOffsetX']()*_0x967608),_0x274e96['y']=Math[_0x41c187(0x2ca)](_0x3e2874+this['damageOffsetY']());},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x721)]=Sprite_Battler[_0x4b7b09(0x4d2)]['damageOffsetX'],Sprite_Battler[_0x4b7b09(0x4d2)]['damageOffsetX']=function(){const _0x14e6f7=_0x4b7b09;let _0x20af2e=VisuMZ['BattleCore'][_0x14e6f7(0x721)]['call'](this),_0x10bac0=VisuMZ[_0x14e6f7(0x6ce)][_0x14e6f7(0xb41)][_0x14e6f7(0xb75)]['PopupOffsetX']||0x0;return Math['round'](_0x20af2e+_0x10bac0);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x5b8)]=Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x975)],Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x975)]=function(){const _0x3012d8=_0x4b7b09;let _0x1c89c4=VisuMZ[_0x3012d8(0x6ce)][_0x3012d8(0x5b8)][_0x3012d8(0x4ad)](this);switch(VisuMZ[_0x3012d8(0x6ce)][_0x3012d8(0xb41)][_0x3012d8(0xb75)][_0x3012d8(0x859)]){case _0x3012d8(0x797):_0x1c89c4-=this[_0x3012d8(0xb65)]*this['scale']['y'];break;case _0x3012d8(0x5a6):_0x1c89c4-=this[_0x3012d8(0xb65)]*this['scale']['y']*0.5;break;}let _0x34c302=VisuMZ[_0x3012d8(0x6ce)][_0x3012d8(0xb41)][_0x3012d8(0xb75)][_0x3012d8(0x55c)]||0x0;return Math[_0x3012d8(0x2ca)](_0x1c89c4+_0x34c302);},Sprite_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x988)]=function(){const _0x339f62=_0x4b7b09;return Sprite_Battler[_0x339f62(0x4d2)][_0x339f62(0x988)][_0x339f62(0x4ad)](this);},Sprite_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x975)]=function(){const _0x361693=_0x4b7b09;return Sprite_Battler['prototype'][_0x361693(0x975)][_0x361693(0x4ad)](this);},Sprite_Battler['prototype'][_0x4b7b09(0x99)]=function(_0x1ace26){const _0x1004e8=_0x4b7b09;this[_0x1004e8(0x7dd)]()?SceneManager[_0x1004e8(0x5ae)][_0x1004e8(0x406)][_0x1004e8(0x3fe)](_0x1ace26):(this[_0x1004e8(0x181)]()[_0x1004e8(0x5c4)](_0x1ace26),this[_0x1004e8(0x385)][_0x1004e8(0x76b)](_0x1ace26),_0x1ace26['destroy']());},VisuMZ[_0x4b7b09(0x6ce)]['Sprite_Battler_setHome']=Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x7cf)],Sprite_Battler[_0x4b7b09(0x4d2)]['setHome']=function(_0x1352ca,_0x20de57){const _0x39691a=_0x4b7b09,_0x555cba=VisuMZ['BattleCore'][_0x39691a(0xb41)];if(this[_0x39691a(0x492)]===Sprite_Actor)_0x39691a(0x1fd)===_0x39691a(0x124)?(this[_0x39691a(0x8ce)]=_0x5cfb53['hpDamage']>=0x0?0x0:0x1,this[_0x39691a(0x948)](_0x832bcf[_0x39691a(0x978)])):(_0x1352ca+=_0x555cba[_0x39691a(0x5dc)]['OffsetX']||0x0,_0x20de57+=_0x555cba[_0x39691a(0x5dc)][_0x39691a(0xaee)]||0x0);else this[_0x39691a(0x492)]===Sprite_Enemy&&(_0x1352ca+=_0x555cba['Enemy'][_0x39691a(0x883)]||0x0,_0x20de57+=_0x555cba['Enemy'][_0x39691a(0xaee)]||0x0);this[_0x39691a(0x6a7)]&&(_0x1352ca=this['_battler'][_0x39691a(0x7bf)]??_0x1352ca,_0x20de57=this[_0x39691a(0x6a7)][_0x39691a(0x7e3)]??_0x20de57),VisuMZ[_0x39691a(0x6ce)]['Sprite_Battler_setHome'][_0x39691a(0x4ad)](this,_0x1352ca,_0x20de57),this[_0x39691a(0x8e2)]=this['_homeX'],this[_0x39691a(0x8e3)]=this['_homeY'],this[_0x39691a(0x667)]=0x0,this[_0x39691a(0x9b0)]=0x0,this[_0x39691a(0x8d2)]='Linear';},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x610)]=Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0xce)],Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0xce)]=function(){const _0x100be5=_0x4b7b09;VisuMZ[_0x100be5(0x6ce)][_0x100be5(0x610)][_0x100be5(0x4ad)](this),!this[_0x100be5(0x6a7)]&&this[_0x100be5(0x2cf)]&&(_0x100be5(0xb00)===_0x100be5(0x37f)?this['startMotion']('abnormal'):this['_hpGaugeSprite'][_0x100be5(0xe2)]=![]);},VisuMZ['BattleCore'][_0x4b7b09(0xcd)]=Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x5c7)],Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x5c7)]=function(){const _0x2e9519=_0x4b7b09;this[_0x2e9519(0xfb)](),this[_0x2e9519(0x64a)](),this[_0x2e9519(0x36a)](),this[_0x2e9519(0x6eb)](),VisuMZ[_0x2e9519(0x6ce)]['Sprite_Battler_updateMain']['call'](this),this[_0x2e9519(0x9dd)]();if(this[_0x2e9519(0x492)]===Sprite_Enemy)this[_0x2e9519(0x3ef)]();},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x582)]=Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0xe4)],Sprite_Battler['prototype'][_0x4b7b09(0xe4)]=function(){const _0x285e6d=_0x4b7b09;this[_0x285e6d(0x145)](),VisuMZ[_0x285e6d(0x6ce)]['Sprite_Battler_updatePosition'][_0x285e6d(0x4ad)](this),this[_0x285e6d(0x3d2)](),this['updateOpacity']();},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x655)]=function(_0x2f9b1f,_0x333356,_0xcc8331,_0xd83d16){const _0x3b86a9=_0x4b7b09;(this[_0x3b86a9(0x8e2)]!==_0x2f9b1f||this['_targetHomeY']!==_0x333356)&&(this[_0x3b86a9(0x8e2)]=_0x2f9b1f,this['_targetHomeY']=_0x333356,this['_homeDuration']=_0xcc8331,this[_0x3b86a9(0x9b0)]=_0xcc8331,this['_homeEasing']=_0xd83d16,_0xcc8331<=0x0&&this['onHomeMoveEnd']());},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x145)]=function(){const _0x406cad=_0x4b7b09;if(this[_0x406cad(0x667)]<=0x0)return;const _0x1eb045=this[_0x406cad(0x667)],_0x545c2f=this[_0x406cad(0x9b0)],_0x29468c=this[_0x406cad(0x8d2)];if(Imported[_0x406cad(0x490)]){if(_0x406cad(0xde)===_0x406cad(0x852)){const _0x35e878=this[_0x406cad(0x7c)](_0x17cdcf);if(_0x35e878==='iconText')this[_0x406cad(0x795)](_0x1a921d);else _0x35e878==='icon'?this[_0x406cad(0x3b7)](_0x3d836b):_0x9b99f6[_0x406cad(0x4d2)][_0x406cad(0x1c2)][_0x406cad(0x4ad)](this,_0x181fad);this[_0x406cad(0xa8c)](_0x1b845c);}else this[_0x406cad(0x1e7)]=this[_0x406cad(0xa12)](this['_homeX'],this[_0x406cad(0x8e2)],_0x1eb045,_0x545c2f,_0x29468c),this[_0x406cad(0x14f)]=this[_0x406cad(0xa12)](this[_0x406cad(0x14f)],this[_0x406cad(0x8e3)],_0x1eb045,_0x545c2f,_0x29468c);}else this[_0x406cad(0x1e7)]=(this['_homeX']*(_0x1eb045-0x1)+this[_0x406cad(0x8e2)])/_0x1eb045,this['_homeY']=(this[_0x406cad(0x14f)]*(_0x1eb045-0x1)+this['_targetHomeY'])/_0x1eb045;this[_0x406cad(0x667)]--;if(this[_0x406cad(0x667)]<=0x0)this[_0x406cad(0x687)]();},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x687)]=function(){const _0x4e6aac=_0x4b7b09;this['_homeX']=this[_0x4e6aac(0x8e2)],this['_homeY']=this[_0x4e6aac(0x8e3)];},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x3d2)]=function(){const _0x42f9bc=_0x4b7b09;this[_0x42f9bc(0x226)]=this['x'],this['_baseY']=this['y'],this[_0x42f9bc(0x370)](),this[_0x42f9bc(0x695)](),this['x']+=this[_0x42f9bc(0xa0a)](),this['y']+=this[_0x42f9bc(0x59a)](),this['y']+=this[_0x42f9bc(0x5fe)](),this['x']=Math[_0x42f9bc(0xdd)](this['x']),this['y']=Math[_0x42f9bc(0xdd)](this['y']);},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0xa0a)]=function(){let _0x59c0d0=0x0;return _0x59c0d0;},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x59a)]=function(){const _0xb07c70=_0x4b7b09;let _0x555be3=0x0;return this[_0xb07c70(0x6a7)]&&!this['_battler'][_0xb07c70(0x6ec)]()&&(_0x555be3-=this[_0xb07c70(0x1fc)],_0x555be3-=this['_jumpHeight']),_0x555be3;},Sprite_Battler['prototype'][_0x4b7b09(0x5fe)]=function(){const _0xed0681=_0x4b7b09;let _0x5014e2=0x0;if(this[_0xed0681(0x265)]&&this[_0xed0681(0x492)]!==Sprite_SvEnemy){if(_0xed0681(0xab4)==='EbmCV'){const _0x279d52=this[_0xed0681(0x265)][_0xed0681(0x785)]['y'];_0x5014e2-=(_0x279d52-0x1)*this[_0xed0681(0xb65)];}else{const _0x519c9e=this[_0xed0681(0x5d4)](this['index']());let _0x634f06=this['commandName'](this[_0xed0681(0x1b8)]());_0x634f06=_0x634f06[_0xed0681(0x586)](/\\I\[(\d+)\]/gi,''),_0x3e5adc[_0xed0681(0x9a9)](),this[_0xed0681(0x59c)](_0x634f06,_0x519c9e),this[_0xed0681(0x954)](_0x634f06,_0x519c9e),this[_0xed0681(0x43c)](_0x634f06,_0x519c9e);}}return _0x5014e2;},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x6eb)]=function(){const _0x420399=_0x4b7b09,_0x39afce=this[_0x420399(0x6a7)]&&this[_0x420399(0x6a7)][_0x420399(0x1bd)]();this[_0x420399(0x22b)]=(_0x39afce?-0x1:0x1)*Math[_0x420399(0x2ef)](this[_0x420399(0x785)]['x']);},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x95c)]=function(_0x41235d,_0x46acee,_0x50b9ce){const _0x3f9c2a=_0x4b7b09;if(!this['canMove']())return;if(this[_0x3f9c2a(0xd5)]===_0x41235d)return;this[_0x3f9c2a(0xd5)]=_0x41235d,this[_0x3f9c2a(0x538)]=_0x46acee,this[_0x3f9c2a(0x3f4)]=_0x46acee,this[_0x3f9c2a(0x36e)]=_0x50b9ce||_0x3f9c2a(0x5cb);if(_0x46acee<=0x0)this[_0x3f9c2a(0x1fc)]=_0x41235d;},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x370)]=function(){const _0x5bbe63=_0x4b7b09;if(this[_0x5bbe63(0x538)]<=0x0)return;const _0x2ff372=this[_0x5bbe63(0x538)],_0xf0ed40=this[_0x5bbe63(0x3f4)],_0x289a16=this[_0x5bbe63(0x36e)];Imported[_0x5bbe63(0x490)]?this['_floatHeight']=this[_0x5bbe63(0xa12)](this[_0x5bbe63(0x1fc)],this[_0x5bbe63(0xd5)],_0x2ff372,_0xf0ed40,_0x289a16):this[_0x5bbe63(0x1fc)]=(this[_0x5bbe63(0x1fc)]*(_0x2ff372-0x1)+this[_0x5bbe63(0xd5)])/_0x2ff372;this['_floatDuration']--;if(this[_0x5bbe63(0x538)]<=0x0)this[_0x5bbe63(0xa3b)]();},Sprite_Battler['prototype'][_0x4b7b09(0xa3b)]=function(){const _0x3be0e5=_0x4b7b09;this[_0x3be0e5(0x1fc)]=this[_0x3be0e5(0xd5)];},Sprite_Battler['prototype']['isFloating']=function(){const _0x5c608d=_0x4b7b09;return this[_0x5c608d(0x538)]>0x0;},Sprite_Battler['prototype'][_0x4b7b09(0x573)]=function(_0x5b92d0,_0x390113){const _0x108b27=_0x4b7b09;if(!this[_0x108b27(0x7e5)]())return;if(_0x390113<=0x0)return;this[_0x108b27(0xb79)]=_0x5b92d0,this[_0x108b27(0x211)]=_0x390113,this[_0x108b27(0x8b4)]=_0x390113;},Sprite_Battler[_0x4b7b09(0x4d2)]['updateJump']=function(){const _0x614d59=_0x4b7b09;if(this[_0x614d59(0x211)]<=0x0)return;const _0x187751=this['_jumpWholeDuration']-this[_0x614d59(0x211)],_0x5af43c=this[_0x614d59(0x8b4)]/0x2,_0x11f3fa=this[_0x614d59(0xb79)],_0x31e546=-_0x11f3fa/Math[_0x614d59(0x645)](_0x5af43c,0x2);this[_0x614d59(0x9e7)]=_0x31e546*Math[_0x614d59(0x645)](_0x187751-_0x5af43c,0x2)+_0x11f3fa,this[_0x614d59(0x211)]--;if(this[_0x614d59(0x211)]<=0x0)return this[_0x614d59(0xaba)]();},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0xaba)]=function(){const _0x5119b5=_0x4b7b09;this[_0x5119b5(0x9e7)]=0x0;},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x501)]=function(){const _0x1e5cae=_0x4b7b09;return this[_0x1e5cae(0x211)]>0x0;},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0xacb)]=function(_0x1c46ce,_0x428c61,_0x2b25da){const _0xee2b67=_0x4b7b09;if(this[_0xee2b67(0x4af)]===_0x1c46ce)return;this[_0xee2b67(0x4af)]=_0x1c46ce,this[_0xee2b67(0x2bb)]=_0x428c61,this[_0xee2b67(0x4e5)]=_0x428c61,this[_0xee2b67(0x116)]=_0x2b25da||_0xee2b67(0x5cb);if(_0x428c61<=0x0)this[_0xee2b67(0x5a0)]=_0x1c46ce;},Sprite_Battler['prototype'][_0x4b7b09(0x2de)]=function(){const _0x3ab456=_0x4b7b09;if(this[_0x3ab456(0x492)][_0x3ab456(0x639)]===_0x3ab456(0xa46))return;if(this[_0x3ab456(0x2bb)]<=0x0)return;const _0xadf7ff=this[_0x3ab456(0x2bb)],_0x4a75b3=this['_opacityWholeDuration'],_0x5cfbd3=this[_0x3ab456(0x116)];if(Imported[_0x3ab456(0x490)]){if('oNbQy'===_0x3ab456(0x967))this[_0x3ab456(0x5a0)]=this[_0x3ab456(0xa12)](this[_0x3ab456(0x5a0)],this[_0x3ab456(0x4af)],_0xadf7ff,_0x4a75b3,_0x5cfbd3);else return![];}else{if(_0x3ab456(0x516)===_0x3ab456(0xa0e)){this[_0x3ab456(0x7c8)]=new _0x50289f();const _0x3420db=_0x5a3725[_0x3ab456(0x5ae)],_0x3e9cc8=_0x3420db[_0x3ab456(0x196)][_0x3ab456(0x853)](_0x3420db[_0x3ab456(0xa1d)]);_0x3420db[_0x3ab456(0x503)](this[_0x3ab456(0x7c8)],_0x3e9cc8),this[_0x3ab456(0x7c8)][_0x3ab456(0x792)]['x']=0.5,this[_0x3ab456(0x7c8)][_0x3ab456(0x792)]['y']=0x1;const _0x3deb87=_0x271e29[_0x3ab456(0x6ce)][_0x3ab456(0xb41)][_0x3ab456(0x8e4)][_0x3ab456(0x953)];this['_borderPortraitSprite']['scale']['x']=_0x3deb87,this['_borderPortraitSprite']['scale']['y']=_0x3deb87,this[_0x3ab456(0x7c8)]['y']=this['y']+this['height'],this[_0x3ab456(0xa7e)]=0x0;}else this[_0x3ab456(0x5a0)]=(this[_0x3ab456(0x5a0)]*(_0xadf7ff-0x1)+this[_0x3ab456(0x4af)])/_0xadf7ff;}this[_0x3ab456(0x2bb)]--;if(this[_0x3ab456(0x2bb)]<=0x0)this[_0x3ab456(0x2ce)]();},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x2ce)]=function(){const _0x26578c=_0x4b7b09;this[_0x26578c(0x5a0)]=this[_0x26578c(0x4af)];},Sprite_Battler[_0x4b7b09(0x4d2)]['isChangingOpacity']=function(){const _0x3278ba=_0x4b7b09;return this[_0x3278ba(0x2bb)]>0x0;},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x3ef)]=function(){const _0x15c3a0=_0x4b7b09;this['_shadowSprite'][_0x15c3a0(0xe2)]=this['_battler'][_0x15c3a0(0x6d2)](),this['updateShadowPosition']();},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x849)]=function(){const _0x31aec5=_0x4b7b09;if(!this['_shadowSprite'])return;this[_0x31aec5(0x30d)]['y']=this[_0x31aec5(0x518)]-this['y']-0x2;},Sprite_Battler['prototype']['updateShadowScale']=function(){const _0x32910a=_0x4b7b09;if(!this[_0x32910a(0x6a7)])return;this['_shadowScaleX']=this['_battler'][_0x32910a(0x21b)](),this[_0x32910a(0x55e)]=this[_0x32910a(0x6a7)][_0x32910a(0x2a5)]();},Game_BattlerBase[_0x4b7b09(0x4d2)][_0x4b7b09(0x21b)]=function(){const _0x271302=_0x4b7b09,_0x3d3d38=this[_0x271302(0xb0c)]()?this[_0x271302(0x724)]():this[_0x271302(0x4f9)]();if(_0x3d3d38){const _0x551821=_0x3d3d38[_0x271302(0xaf1)];if(_0x551821['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i)){if(_0x271302(0x28a)!==_0x271302(0xada))return Number(RegExp['$1'])*0.01;else this[_0x271302(0x680)]=new _0x3f2919(_0x4b1441[_0x271302(0x839)],_0x3425fc[_0x271302(0xb65)]);}else{if(_0x551821['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return _0x271302(0x712)!==_0x271302(0x6da)?Number(RegExp['$1'])||0x0:_0x21eb7c['uiInputPosition'];}}return 0x1;},Game_BattlerBase['prototype'][_0x4b7b09(0x2a5)]=function(){const _0x2ae69c=_0x4b7b09,_0x53cd05=this[_0x2ae69c(0xb0c)]()?this['actor']():this['enemy']();if(_0x53cd05){const _0x154d14=_0x53cd05['note'];if(_0x154d14[_0x2ae69c(0x2c1)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i)){if(_0x2ae69c(0xff)!==_0x2ae69c(0x5e4))return Number(RegExp['$1'])*0.01;else{if(!_0x3484cd[_0x2ae69c(0x18e)]())return;_0x5e5c3d[_0x2ae69c(0x92)](_0x3e8361,_0x589672);const _0xa9d9b0=_0x1188f3[_0x2ae69c(0x1cb)](),_0x421ac1=_0x4ee4fa[_0x2ae69c(0x38f)];if(!_0xa9d9b0)return;_0x3c423c[_0x2ae69c(0x233)]--,_0x344d18['_target']=_0x2f29af[_0x2ae69c(0x634)][_0x3f94fd[_0x2ae69c(0x233)]]||null,_0x323a9a[_0x2ae69c(0x28f)]&&_0x421ac1[_0x2ae69c(0x2c5)]()[_0x2ae69c(0x612)]()!=='UNTITLED'&&_0xa9d9b0['command119']([_0x421ac1]);}}else{if(_0x154d14['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0xfb)]=function(){const _0x2c704b=_0x4b7b09;if(this['constructor']===Sprite_SvEnemy)return;this[_0x2c704b(0xdc)](),this[_0x2c704b(0x475)]();},Sprite_Battler['prototype'][_0x4b7b09(0x475)]=function(){const _0x5e7a9d=_0x4b7b09,_0x5eda74=this[_0x5e7a9d(0x265)];_0x5eda74&&(_0x5eda74[_0x5e7a9d(0x785)]['x']=this['mainSpriteScaleX'](),_0x5eda74[_0x5e7a9d(0x785)]['y']=this[_0x5e7a9d(0x276)]());},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x940)]=function(){const _0x1ab427=_0x4b7b09;let _0x46e752=0x1;return _0x46e752*=this[_0x1ab427(0x22b)],_0x46e752*=this[_0x1ab427(0xb37)],_0x46e752;},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x276)]=function(){const _0x176e9a=_0x4b7b09;return 0x1*this[_0x176e9a(0x68a)];},Sprite_Battler[_0x4b7b09(0x4d2)]['mainSpriteWidth']=function(){const _0x249a29=_0x4b7b09;return this['width']*this[_0x249a29(0x940)]();},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x22a)]=function(){const _0x250806=_0x4b7b09;return this['height']*this[_0x250806(0x276)]();},Sprite_Battler['prototype'][_0x4b7b09(0x9e8)]=function(_0x2e695e,_0x1734fb,_0x16f594,_0x4764e0){const _0x3e658f=_0x4b7b09;if(!this[_0x3e658f(0x7e5)]())return;if(!this['_distortionSprite'])return;if(this[_0x3e658f(0x646)]===_0x2e695e&&this['_targetGrowY']===_0x1734fb)return;this[_0x3e658f(0x646)]=_0x2e695e,this['_targetGrowY']=_0x1734fb,this[_0x3e658f(0x94d)]=_0x16f594,this[_0x3e658f(0x176)]=_0x16f594,this[_0x3e658f(0x886)]=_0x4764e0||_0x3e658f(0x5cb),_0x16f594<=0x0&&(this[_0x3e658f(0xb37)]=this[_0x3e658f(0x646)],this[_0x3e658f(0x68a)]=this['_targetGrowY']);},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0xdc)]=function(){const _0x3372be=_0x4b7b09;if(this[_0x3372be(0x94d)]<=0x0)return;if(!this[_0x3372be(0x265)])return;const _0x32cbee=this['_growDuration'],_0x366733=this[_0x3372be(0x176)],_0x25f081=this[_0x3372be(0x886)];Imported[_0x3372be(0x490)]?_0x3372be(0x3d5)==='gFBQn'?_0x4bd83a=_0x20ecf0>=_0x43b65e?_0x28b3c0:_0x34acdc:(this[_0x3372be(0xb37)]=this[_0x3372be(0xa12)](this['_growX'],this[_0x3372be(0x646)],_0x32cbee,_0x366733,_0x25f081),this[_0x3372be(0x68a)]=this[_0x3372be(0xa12)](this[_0x3372be(0x68a)],this[_0x3372be(0x985)],_0x32cbee,_0x366733,_0x25f081)):(this['_growX']=(this[_0x3372be(0xb37)]*(_0x32cbee-0x1)+this[_0x3372be(0x646)])/_0x32cbee,this['_growY']=(this['_growY']*(_0x32cbee-0x1)+this[_0x3372be(0x985)])/_0x32cbee);this[_0x3372be(0x94d)]--;if(this['_growDuration']<=0x0)this[_0x3372be(0x94b)]();},Sprite_Battler[_0x4b7b09(0x4d2)]['onGrowEnd']=function(){const _0x13a746=_0x4b7b09;this['_growX']=this[_0x13a746(0x646)],this[_0x13a746(0x68a)]=this[_0x13a746(0x985)];},Sprite_Battler[_0x4b7b09(0x4d2)]['isGrowing']=function(){const _0x478ac5=_0x4b7b09;return this[_0x478ac5(0x94d)]>0x0;},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x391)]=function(_0x482ce,_0x469458,_0x113d28,_0x3684ef){const _0x3d5ead=_0x4b7b09;if(!this[_0x3d5ead(0x7e5)]())return;if(!this[_0x3d5ead(0x265)])return;if(this[_0x3d5ead(0x9ae)]===_0x482ce&&this[_0x3d5ead(0x644)]===_0x469458)return;this[_0x3d5ead(0x9ae)]=_0x482ce,this[_0x3d5ead(0x644)]=_0x469458,this[_0x3d5ead(0xa04)]=_0x113d28,this['_skewWholeDuration']=_0x113d28,this[_0x3d5ead(0x107)]=_0x3684ef||_0x3d5ead(0x5cb);if(_0x113d28<=0x0){if('TuBHC'!==_0x3d5ead(0x514))this['_distortionSprite'][_0x3d5ead(0x230)]['x']=this[_0x3d5ead(0x9ae)],this['_distortionSprite'][_0x3d5ead(0x230)]['y']=this[_0x3d5ead(0x644)];else{if(_0x333ffd){const _0x2c1453=_0x32fb70[_0x3d5ead(0x853)](_0x340af6);return _0x2c1453>=0x0?[_0x13d5d9[_0x2c1453-0x1]||_0x5a4f67]:[_0x553fc5];}}}},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x64a)]=function(){const _0x3e2a57=_0x4b7b09;if(this[_0x3e2a57(0xa04)]<=0x0)return;if(!this['_distortionSprite'])return;const _0x189036=this[_0x3e2a57(0xa04)],_0x975a66=this[_0x3e2a57(0x177)],_0x53e334=this['_skewEasing'],_0x2cf1e5=this['_distortionSprite'];Imported[_0x3e2a57(0x490)]?_0x3e2a57(0x9f9)===_0x3e2a57(0x15a)?_0xb397ee[_0x3e2a57(0xb28)]():(_0x2cf1e5[_0x3e2a57(0x230)]['x']=this[_0x3e2a57(0xa12)](_0x2cf1e5[_0x3e2a57(0x230)]['x'],this[_0x3e2a57(0x9ae)],_0x189036,_0x975a66,_0x53e334),_0x2cf1e5['skew']['y']=this[_0x3e2a57(0xa12)](_0x2cf1e5['skew']['y'],this[_0x3e2a57(0x644)],_0x189036,_0x975a66,_0x53e334)):(_0x2cf1e5['skew']['x']=(_0x2cf1e5[_0x3e2a57(0x230)]['x']*(_0x189036-0x1)+this[_0x3e2a57(0x9ae)])/_0x189036,_0x2cf1e5['skew']['y']=(_0x2cf1e5[_0x3e2a57(0x230)]['y']*(_0x189036-0x1)+this[_0x3e2a57(0x644)])/_0x189036);this[_0x3e2a57(0xa04)]--;if(this[_0x3e2a57(0xa04)]<=0x0)this['onSkewEnd']();},Sprite_Battler[_0x4b7b09(0x4d2)]['onSkewEnd']=function(){const _0x546b59=_0x4b7b09;this[_0x546b59(0x265)][_0x546b59(0x230)]['x']=this[_0x546b59(0x9ae)],this['_distortionSprite'][_0x546b59(0x230)]['y']=this['_targetSkewY'];},Sprite_Battler[_0x4b7b09(0x4d2)]['isSkewing']=function(){const _0x46569e=_0x4b7b09;return this[_0x46569e(0xa04)]>0x0;},Sprite_Battler['prototype'][_0x4b7b09(0x598)]=function(_0x530840,_0x455978,_0x1741b9,_0x270cdd){const _0x356783=_0x4b7b09;if(!this[_0x356783(0x7e5)]())return;if(!this[_0x356783(0x265)])return;if(this[_0x356783(0x1c0)]===_0x530840)return;this['_targetAngle']=_0x530840,this[_0x356783(0x263)]=_0x455978,this['_angleWholeDuration']=_0x455978,this['_angleEasing']=_0x1741b9||_0x356783(0x5cb),this[_0x356783(0x8da)]=_0x270cdd;this[_0x356783(0x8da)]===undefined&&(this['_angleRevertOnFinish']=!![]);if(_0x455978<=0x0){this['_currentAngle']=_0x530840;if(this[_0x356783(0x8da)]){if(_0x356783(0x957)!==_0x356783(0xa19))this['_targetAngle']=0x0,this[_0x356783(0x20d)]=0x0;else{if(this[_0x356783(0x6d2)]()){if(this[_0x356783(0x19a)]()>=0x1)return!![];return this[_0x356783(0x822)]()[_0x356783(0x851)];}else return!![];}}}},Sprite_Battler['prototype'][_0x4b7b09(0x36a)]=function(){const _0x540dd1=_0x4b7b09;this[_0x540dd1(0xa90)](),this[_0x540dd1(0x607)]();},Sprite_Battler['prototype'][_0x4b7b09(0xa90)]=function(){const _0x137d21=_0x4b7b09;if(this[_0x137d21(0x263)]<=0x0)return;const _0x596726=this['_angleDuration'],_0x19953a=this[_0x137d21(0x32e)],_0x5f576b=this[_0x137d21(0x5cd)];Imported[_0x137d21(0x490)]?this[_0x137d21(0x20d)]=this[_0x137d21(0xa12)](this[_0x137d21(0x20d)],this[_0x137d21(0x1c0)],_0x596726,_0x19953a,_0x5f576b):this[_0x137d21(0x20d)]=(this[_0x137d21(0x20d)]*(_0x596726-0x1)+this[_0x137d21(0x1c0)])/_0x596726;this['_angleDuration']--;if(this[_0x137d21(0x263)]<=0x0)this[_0x137d21(0x1e4)]();},Sprite_Battler[_0x4b7b09(0x4d2)]['onAngleEnd']=function(){const _0x544588=_0x4b7b09;this[_0x544588(0x20d)]=this[_0x544588(0x1c0)];if(this[_0x544588(0x8da)]){if(_0x544588(0x527)!=='QOQEq')return this[_0x544588(0xaae)];else this['_targetAngle']=0x0,this[_0x544588(0x20d)]=0x0;}},Sprite_Battler[_0x4b7b09(0x4d2)]['isSpinning']=function(){const _0x1925a6=_0x4b7b09;return this[_0x1925a6(0x263)]>0x0;},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x607)]=function(){const _0x29d57a=_0x4b7b09;if(!this[_0x29d57a(0x265)])return;const _0x48b8b6=this[_0x29d57a(0x20d)],_0x3a4331=this['scale']['x'],_0x209d7f=this[_0x29d57a(0x6a7)][_0x29d57a(0xb0c)]()?-0x1:0x1;this['_distortionSprite'][_0x29d57a(0x6b3)]=_0x48b8b6*_0x3a4331*_0x209d7f;const _0x55f375=this[_0x29d57a(0x265)]['scale']['y'];this[_0x29d57a(0x265)]['y']=this['height']*-0.5*(0x2-_0x55f375),this['_distortionSprite']['y']=Math[_0x29d57a(0x83c)](this['_distortionSprite']['y']);const _0x2f85b4=[this[_0x29d57a(0x1b4)],this[_0x29d57a(0x480)],this['_dragonbonesSpriteContainer']];for(const _0x34968d of _0x2f85b4){if(_0x29d57a(0x716)!=='LBTJb'){if(!_0x34968d)continue;_0x34968d['y']=this[_0x29d57a(0xb65)]*0.5;}else _0x977770[_0x29d57a(0x9aa)]=_0x2be387[_0x29d57a(0x724)]();}this[_0x29d57a(0x30d)]&&(this[_0x29d57a(0x6bb)]=this[_0x29d57a(0x6bb)]??0x1,this[_0x29d57a(0x55e)]=this[_0x29d57a(0x55e)]??0x1,this['_shadowSprite']['scale']['x']=this['_distortionSprite'][_0x29d57a(0x785)]['x']*this[_0x29d57a(0x6bb)],this[_0x29d57a(0x30d)][_0x29d57a(0x785)]['y']=this[_0x29d57a(0x265)][_0x29d57a(0x785)]['y']*this[_0x29d57a(0x55e)]);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x112)]=Sprite_Actor[_0x4b7b09(0x4d2)]['createStateSprite'],Sprite_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x452)]=function(){const _0x7b0357=_0x4b7b09;VisuMZ[_0x7b0357(0x6ce)][_0x7b0357(0x112)]['call'](this),VisuMZ[_0x7b0357(0x6ce)][_0x7b0357(0xb41)][_0x7b0357(0x2d3)]['ShowActorGauge']&&this['createHpGaugeSprite']();},VisuMZ['BattleCore']['Sprite_Enemy_createStateIconSprite']=Sprite_Enemy[_0x4b7b09(0x4d2)]['createStateIconSprite'],Sprite_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x8c8)]=function(){const _0x1c25ac=_0x4b7b09;VisuMZ[_0x1c25ac(0x6ce)]['Settings']['HpGauge']['ShowEnemyGauge']&&this[_0x1c25ac(0x720)](),VisuMZ[_0x1c25ac(0x6ce)]['Sprite_Enemy_createStateIconSprite'][_0x1c25ac(0x4ad)](this);},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x720)]=function(){const _0x11b909=_0x4b7b09;if(!ConfigManager[_0x11b909(0x444)])return;if(this[_0x11b909(0x492)]===Sprite_SvEnemy)return;const _0x217654=VisuMZ[_0x11b909(0x6ce)][_0x11b909(0xb41)]['HpGauge'],_0x1ba97c=new Sprite_HpGauge();_0x1ba97c['anchor']['x']=_0x217654[_0x11b909(0x6c1)],_0x1ba97c[_0x11b909(0x792)]['y']=_0x217654['AnchorY'],_0x1ba97c[_0x11b909(0x785)]['x']=_0x1ba97c[_0x11b909(0x785)]['y']=_0x217654[_0x11b909(0x8e9)],this[_0x11b909(0x2cf)]=_0x1ba97c,this[_0x11b909(0x420)](this['_hpGaugeSprite']),Spriteset_Battle[_0x11b909(0x7de)]&&BattleManager[_0x11b909(0x3ff)](this['_hpGaugeSprite']);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x447)]=Sprite_Battler['prototype'][_0x4b7b09(0x1de)],Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x1de)]=function(_0x1f8f10){const _0x2c8ae4=_0x4b7b09,_0x1c2a2d=this[_0x2c8ae4(0x6a7)];VisuMZ[_0x2c8ae4(0x6ce)]['Sprite_Battler_setBattler'][_0x2c8ae4(0x4ad)](this,_0x1f8f10),this[_0x2c8ae4(0x8eb)](_0x1f8f10);if(_0x1c2a2d!==_0x1f8f10)this[_0x2c8ae4(0x5f8)]();},Sprite_Battler['prototype'][_0x4b7b09(0x8eb)]=function(_0x106f44){const _0x4fa6ea=_0x4b7b09;if(!_0x106f44)return;if(!this[_0x4fa6ea(0x2cf)])return;if(_0x106f44[_0x4fa6ea(0xb0c)]()){}else{if(_0x106f44[_0x4fa6ea(0xfc)]()){if(this[_0x4fa6ea(0x492)]===Sprite_SvEnemy&&!_0x106f44[_0x4fa6ea(0x6d2)]())return;}}this['_hpGaugeSprite'][_0x4fa6ea(0x97a)](_0x106f44,'hp');},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x97)]=function(){const _0x5b0fb6=_0x4b7b09;return this[_0x5b0fb6(0x6a7)]&&this[_0x5b0fb6(0x6a7)]['hasStaticSvBattler']();},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x9c6)]=function(){const _0x379644=_0x4b7b09,_0x277a12=this[_0x379644(0x1b4)][_0x379644(0x680)];if(!_0x277a12)return;const _0x3be6d8=_0x277a12[_0x379644(0x839)];let _0x39f294=_0x277a12[_0x379644(0xb65)];if(this[_0x379644(0x6a7)][_0x379644(0x44c)]()){if(this[_0x379644(0x93b)])_0x39f294=Math['max'](0x0,this['_frame'][_0x379644(0xb65)]-0x4);}this[_0x379644(0x1b4)][_0x379644(0x428)](0x0,0x0,_0x3be6d8,_0x39f294),this[_0x379644(0x428)](0x0,0x0,_0x3be6d8,_0x39f294);},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x9dd)]=function(){const _0x128133=_0x4b7b09;if(!this[_0x128133(0x6a7)])return;if(!this[_0x128133(0x2cf)])return;const _0x4d2ce3=VisuMZ['BattleCore'][_0x128133(0xb41)][_0x128133(0x2d3)],_0x2da83c=this[_0x128133(0x2cf)];_0x2da83c[_0x128133(0xe2)]=this[_0x128133(0xb89)]();const _0x200055=_0x4d2ce3[_0x128133(0x883)],_0x23bfc2=_0x4d2ce3[_0x128133(0xaee)];_0x2da83c['x']=_0x200055,_0x2da83c['x']+=this[_0x128133(0x6a7)][_0x128133(0x18c)](),_0x2da83c['y']=-this[_0x128133(0xb65)]+_0x23bfc2,_0x2da83c['y']+=this[_0x128133(0x6a7)][_0x128133(0x221)](),Spriteset_Battle[_0x128133(0x7de)]&&SceneManager[_0x128133(0x5ae)]['_spriteset']&&(_0x2da83c['x']+=this['x'],_0x2da83c['y']+=this['y']);},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0xb89)]=function(){const _0x4720c8=_0x4b7b09;if(!this[_0x4720c8(0x6a7)])return![];if(this[_0x4720c8(0x6a7)][_0x4720c8(0xb0c)]())return!![];if(this[_0x4720c8(0x6a7)][_0x4720c8(0x182)]())return![];if(this[_0x4720c8(0x5a0)]<=0x0)return![];const _0x1c9b39=this[_0x4720c8(0x6a7)][_0x4720c8(0x4f9)]()['note'];if(_0x1c9b39[_0x4720c8(0x2c1)](/<SHOW HP GAUGE>/i))return!![];if(_0x1c9b39[_0x4720c8(0x2c1)](/<HIDE HP GAUGE>/i))return![];const _0x245bdd=VisuMZ[_0x4720c8(0x6ce)][_0x4720c8(0xb41)][_0x4720c8(0x2d3)];if(_0x245bdd[_0x4720c8(0x855)]){if(_0x245bdd[_0x4720c8(0x594)]&&BattleManager[_0x4720c8(0x4ed)]())return!![];if(this[_0x4720c8(0x6a7)]['_visualHpGauge_JustDied'])return![];return this[_0x4720c8(0x6a7)][_0x4720c8(0xf4)]();}return!![];},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x243)]=Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x44b)],Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x44b)]=function(){const _0x2f8c64=_0x4b7b09;if(!this['_battler'])return![];if(this[_0x2f8c64(0x667)]>0x0)return!![];return VisuMZ['BattleCore'][_0x2f8c64(0x243)][_0x2f8c64(0x4ad)](this);},VisuMZ[_0x4b7b09(0x6ce)]['Sprite_Battler_startMove']=Sprite_Battler['prototype']['startMove'],Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x7fc)]=function(_0x212e10,_0x5ec85b,_0x594006){const _0x4818f8=_0x4b7b09;if(this['canMove']()){if(_0x4818f8(0x944)===_0x4818f8(0x944))VisuMZ[_0x4818f8(0x6ce)][_0x4818f8(0x5a8)][_0x4818f8(0x4ad)](this,_0x212e10,_0x5ec85b,_0x594006);else{const _0x637497=!!this[_0x4818f8(0x359)];this['_freezeMotionData']=_0x4718c8,_0x637497&&(this[_0x4818f8(0x16e)](),this['clearFreezeMotionForWeapons']());}}},Sprite_Battler[_0x4b7b09(0x4d2)]['canMove']=function(){const _0xa1bc75=_0x4b7b09;if(this[_0xa1bc75(0x6a7)]&&this[_0xa1bc75(0x6a7)][_0xa1bc75(0x44c)]())return![];if(this[_0xa1bc75(0x6a7)]&&!this[_0xa1bc75(0x6a7)][_0xa1bc75(0xb25)]())return![];return $gameSystem[_0xa1bc75(0x43d)]();},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x157)]=function(){},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x15c)]=function(){const _0x3af82d=_0x4b7b09;this[_0x3af82d(0x7fc)](0x0,0x0,0xc);},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x81a)]=function(){},Sprite_Battler[_0x4b7b09(0x4d2)][_0x4b7b09(0x1b0)]=function(){const _0x11ab6f=_0x4b7b09,_0x163b6b=VisuMZ[_0x11ab6f(0x6ce)]['Settings'][_0x11ab6f(0x5dc)],_0x483b87=this[_0x11ab6f(0x6a7)]&&this[_0x11ab6f(0x6a7)]['isActor']()?0x1:-0x1,_0x34ea20=this[_0x11ab6f(0x226)]-this[_0x11ab6f(0x1e7)]+_0x483b87*_0x163b6b[_0x11ab6f(0x748)],_0x185b9f=this[_0x11ab6f(0x518)]-this[_0x11ab6f(0x14f)]+_0x483b87*_0x163b6b[_0x11ab6f(0xb01)],_0x3b8fa6=_0x163b6b['FlinchDuration'];this[_0x11ab6f(0x7fc)](_0x34ea20,_0x185b9f,_0x3b8fa6);},VisuMZ[_0x4b7b09(0x6ce)]['Sprite_Actor_initMembers']=Sprite_Actor['prototype'][_0x4b7b09(0x737)],Sprite_Actor[_0x4b7b09(0x4d2)]['initMembers']=function(){const _0x156142=_0x4b7b09;VisuMZ['BattleCore'][_0x156142(0x61e)][_0x156142(0x4ad)](this),this[_0x156142(0x47b)]();},Sprite_Actor['prototype'][_0x4b7b09(0x7f8)]=function(){const _0x2f30a7=_0x4b7b09;return this['_distortionSprite']||this[_0x2f30a7(0x1b4)]||this;},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xb08)]=Sprite_Actor[_0x4b7b09(0x4d2)]['moveToStartPosition'],Sprite_Actor[_0x4b7b09(0x4d2)]['moveToStartPosition']=function(){},Sprite_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x2ba)]=function(_0x167c7e){const _0x4d2367=_0x4b7b09;if(SceneManager['isPreviousSceneBattleTransitionable']())return;if(!_0x167c7e)return;if(!_0x167c7e[_0x4d2367(0x7e5)]())return;VisuMZ['BattleCore']['Sprite_Actor_moveToStartPosition']['call'](this);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x8c5)]=Sprite_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x1d8)],Sprite_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x1d8)]=function(_0x41f9e9){const _0x994207=_0x4b7b09;VisuMZ['BattleCore']['Settings']['Actor'][_0x994207(0x237)]?VisuMZ[_0x994207(0x6ce)]['Settings'][_0x994207(0x5dc)]['HomePosJS'][_0x994207(0x4ad)](this,_0x41f9e9):VisuMZ[_0x994207(0x6ce)][_0x994207(0x8c5)][_0x994207(0x4ad)](this,_0x41f9e9);},VisuMZ['BattleCore'][_0x4b7b09(0x776)]=Sprite_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x1de)],Sprite_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x1de)]=function(_0x33614b){const _0x3e566e=_0x4b7b09;VisuMZ[_0x3e566e(0x6ce)]['Sprite_Actor_setBattler'][_0x3e566e(0x4ad)](this,_0x33614b),this[_0x3e566e(0xa4c)](_0x33614b);},Sprite_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0xa4c)]=function(_0x2e881c){const _0x575471=_0x4b7b09;if(!_0x2e881c)return;if(!this[_0x575471(0x1b4)])return;this['_mainSprite']['anchor']['x']=this[_0x575471(0x7cb)]['svBattlerAnchorX'](),this[_0x575471(0x1b4)]['anchor']['y']=this[_0x575471(0x7cb)][_0x575471(0xa52)](),this[_0x575471(0x88f)]();},VisuMZ['BattleCore'][_0x4b7b09(0x3c9)]=Sprite_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0xce)],Sprite_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0xce)]=function(){const _0x4afc6e=_0x4b7b09;VisuMZ[_0x4afc6e(0x6ce)][_0x4afc6e(0x3c9)][_0x4afc6e(0x4ad)](this),this[_0x4afc6e(0x7cb)]&&(this[_0x4afc6e(0x520)](),this['updateStyleOpacity']());},VisuMZ['BattleCore'][_0x4b7b09(0x862)]=Sprite_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x554)],Sprite_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x554)]=function(){const _0xc2f9c6=_0x4b7b09;VisuMZ[_0xc2f9c6(0x6ce)]['Sprite_Actor_updateBitmap'][_0xc2f9c6(0x4ad)](this),this[_0xc2f9c6(0x1b4)]&&this[_0xc2f9c6(0x1b4)]['bitmap']&&this[_0xc2f9c6(0x6a7)]&&(this[_0xc2f9c6(0x1b4)][_0xc2f9c6(0x680)][_0xc2f9c6(0x88)]!==this[_0xc2f9c6(0x6a7)]['battlerSmoothImage']()&&(this[_0xc2f9c6(0x1b4)][_0xc2f9c6(0x680)][_0xc2f9c6(0x88)]=this[_0xc2f9c6(0x6a7)]['battlerSmoothImage']()));},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xac)]=Sprite_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x3ef)],Sprite_Actor['prototype'][_0x4b7b09(0x3ef)]=function(){const _0x3b1893=_0x4b7b09;VisuMZ[_0x3b1893(0x6ce)][_0x3b1893(0xac)][_0x3b1893(0x4ad)](this),this[_0x3b1893(0xb3a)]();},Sprite_Actor['prototype'][_0x4b7b09(0xb3a)]=function(){const _0x14551c=_0x4b7b09;if(!this['_mainSprite'])return;if(!this['_shadowSprite'])return;this[_0x14551c(0x88f)](),this[_0x14551c(0x849)]();},Sprite_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x520)]=function(){const _0x23ca57=_0x4b7b09;this['_stateSprite'][_0x23ca57(0x785)]['x']=0x1/(this[_0x23ca57(0x785)]['x']||0.001),this[_0x23ca57(0x2d1)][_0x23ca57(0x785)]['y']=0x1/(this['scale']['y']||0.001);},Sprite_Actor['prototype'][_0x4b7b09(0x3e8)]=function(){const _0x477f56=_0x4b7b09;if(!$gameSystem['isSideView']()&&this[_0x477f56(0x492)]===Sprite_Actor){const _0x44f93c=Scene_Battle[_0x477f56(0x4d2)][_0x477f56(0x1f7)]();if([_0x477f56(0x127),_0x477f56(0x577),_0x477f56(0xb3e),_0x477f56(0xad5)][_0x477f56(0x382)](_0x44f93c)){if(_0x477f56(0x3cd)!=='MwbmV')this[_0x477f56(0x5a0)]=0x0;else{if(!_0xc8d94b['isSceneBattle']())return;if(!_0x1dca7d[_0x477f56(0x522)])return;_0x198832['ConvertParams'](_0x55c87d,_0x458260);const _0x2bd90e=_0x4f76f2[_0x477f56(0x1cb)](),_0x8c9575=_0x405cdb['WaitForCamera'];_0x53c70d['setBattleCameraPoint'](_0x593ff4[_0x477f56(0x21f)],_0x272889[_0x477f56(0xf2)],_0x44bd81[_0x477f56(0xad)],_0x1aa31f[_0x477f56(0x6cb)]);if(_0x8c9575)_0x2bd90e['setWaitMode'](_0x477f56(0x834));}}}},Sprite_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x7ac)]=function(){const _0x4a5da1=_0x4b7b09,_0x486207=this[_0x4a5da1(0x7cb)];if(_0x486207){if(_0x4a5da1(0xa1)!=='hpVaU'){const _0x5c97fe=_0x486207[_0x4a5da1(0xb58)]();if(_0x486207[_0x4a5da1(0x970)]()||_0x486207[_0x4a5da1(0x97f)]()){if(_0x4a5da1(0xb1f)==='fFTct')this[_0x4a5da1(0x460)](_0x4a5da1(0x356));else return this[_0x4a5da1(0x864)](_0x355b72[0x0],_0x1df77d[0x1],_0x49d1b0=>{const _0x881fc8=_0x4a5da1;!_0x49d1b0[_0x881fc8(0x449)]()&&(_0x49d1b0[_0x881fc8(0x5ab)](_0x4fb8e5[0x2],_0x394733[0x3]),_0x359be0[_0x881fc8(0x5ab)](_0x49d1b0));}),!![];}else{if(_0x5c97fe===0x3)this['startMotion']('dead');else{if(_0x5c97fe===0x2)_0x4a5da1(0x562)!==_0x4a5da1(0xa25)?this['startMotion'](_0x4a5da1(0x96d)):_0x50ec2c['setValue'](_0x2dbbe9['SwitchMissEvade'],![]);else{if(this['forceEscapeSprite']){if(_0x4a5da1(0x9be)==='TvHeA')this['startMotion']('escape');else return _0x4a5da1(0x188);}else{if(_0x486207[_0x4a5da1(0xb32)]())this['startMotion'](_0x4a5da1(0x5b0));else{if(_0x486207[_0x4a5da1(0xa2f)]())'auSrz'===_0x4a5da1(0xad3)?this[_0x4a5da1(0x42f)](_0x4a5da1(0x81b)):this['startMotion'](_0x4a5da1(0xb8f));else{if(_0x486207[_0x4a5da1(0x4d5)]()||_0x486207[_0x4a5da1(0x5be)]()){if(_0x4a5da1(0xa9f)===_0x4a5da1(0x544))return this[_0x4a5da1(0x600)]();else this[_0x4a5da1(0x460)](_0x4a5da1(0x287));}else{if(_0x5c97fe===0x1)this[_0x4a5da1(0x460)](_0x4a5da1(0x900));else{if(_0x486207[_0x4a5da1(0x73c)]())_0x4a5da1(0x563)===_0x4a5da1(0x563)?this[_0x4a5da1(0x460)](_0x4a5da1(0xa80)):this[_0x4a5da1(0x74d)](_0x3fca4b);else{if(_0x486207['isUndecided']()){if(_0x4a5da1(0x519)==='GMkgl'){if(!_0x3ce24f[_0x4a5da1(0x18e)]())return;const _0x60ced4=_0x288ba9[_0x4a5da1(0xa2d)];_0x60ced4['refresh']();}else this[_0x4a5da1(0x460)](_0x4a5da1(0x356));}else{if(_0x486207[_0x4a5da1(0x335)]())this[_0x4a5da1(0x460)](_0x4a5da1(0x5b0));else{if('hbqla'==='hbqla')this[_0x4a5da1(0x460)](_0x4a5da1(0x356));else{let _0x5f0e2e=_0x40b527[_0x4a5da1(0x6ce)]['Sprite_Battler_damageOffsetX'][_0x4a5da1(0x4ad)](this),_0x551103=_0x99c7ba[_0x4a5da1(0x6ce)]['Settings'][_0x4a5da1(0xb75)][_0x4a5da1(0x1d6)]||0x0;return _0x463429[_0x4a5da1(0x2ca)](_0x5f0e2e+_0x551103);}}}}}}}}}}}}}else this[_0x4a5da1(0x446)]();}},Sprite_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x81a)]=function(){const _0x1049e9=_0x4b7b09,_0x4e9e41=0xa,_0x1d757c=0x12c*_0x4e9e41,_0x127713=0x1e*_0x4e9e41;this[_0x1049e9(0x7fc)](_0x1d757c,0x0,_0x127713);},Sprite_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x300)]=function(){const _0x157ee1=_0x4b7b09;Sprite_Battler[_0x157ee1(0x4d2)][_0x157ee1(0x300)][_0x157ee1(0x4ad)](this);},Sprite_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0xb76)]=function(){const _0x3aa923=_0x4b7b09;return Sprite_Battler[_0x3aa923(0x872)];},Sprite_Weapon['prototype'][_0x4b7b09(0x6a5)]=function(){const _0x2d66ee=_0x4b7b09;return Sprite_Battler[_0x2d66ee(0x872)];},Sprite_Actor['prototype']['setupMotion']=function(){},Sprite_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0xa7f)]=function(){},Sprite_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0xb72)]=function(){const _0x294f3e=_0x4b7b09;if(this[_0x294f3e(0x7cc)]&&++this[_0x294f3e(0x380)]>=this[_0x294f3e(0xb76)]()){if(this[_0x294f3e(0x7cc)][_0x294f3e(0x231)])_0x294f3e(0xaff)!==_0x294f3e(0x132)?this[_0x294f3e(0x174)]=(this[_0x294f3e(0x174)]+0x1)%0x4:this[_0x294f3e(0x460)](_0x294f3e(0x1ae));else this[_0x294f3e(0x174)]<0x2?this['_pattern']++:this[_0x294f3e(0x7ac)]();this[_0x294f3e(0x380)]=0x0;}},Sprite_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x2c0)]=function(_0x114d2f){const _0x21983c=_0x4b7b09;if(_0x114d2f===_0x21983c(0xa9e))this[_0x21983c(0x308)]=!![];if(this[_0x21983c(0x6a7)]&&this['_battler'][_0x21983c(0x44c)]()){this['_motion']=Sprite_Actor[_0x21983c(0xb66)][_0x21983c(0x5c2)];return;}const _0x13bfab=Sprite_Actor[_0x21983c(0xb66)][_0x114d2f];this[_0x21983c(0x7cc)]=_0x13bfab,this['_motionCount']=0x0,this['_pattern']=0x0;},Sprite_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x856)]=function(_0x205fd1){const _0x279a84=_0x4b7b09;if(this[_0x279a84(0x97)]())return;this[_0x279a84(0x360)](),this[_0x279a84(0x9da)][_0x279a84(0x97a)](_0x205fd1),this[_0x279a84(0x7cb)][_0x279a84(0xdf)]();},Sprite_Actor[_0x4b7b09(0x4d2)]['adjustWeaponSpriteOffset']=function(){const _0x56e579=_0x4b7b09;let _0x1fe035=-0x10,_0x1f00f6=this[_0x56e579(0xb65)]*0.5;const _0x43ca30=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x85365f=this[_0x56e579(0x6a7)][_0x56e579(0xaf0)]()[_0x56e579(0x78)](_0x2871cc=>_0x2871cc&&_0x2871cc[_0x56e579(0xaf1)][_0x56e579(0x2c1)](_0x43ca30)?Number(RegExp['$1']):0x0),_0x12336d=this[_0x56e579(0x6a7)][_0x56e579(0xaf0)]()['map'](_0x5c5590=>_0x5c5590&&_0x5c5590[_0x56e579(0xaf1)]['match'](_0x43ca30)?Number(RegExp['$2']):0x0);_0x1fe035=_0x85365f['reduce']((_0x327f86,_0x44b975)=>_0x327f86+_0x44b975,_0x1fe035),_0x1f00f6=_0x12336d[_0x56e579(0x10b)]((_0x4f320d,_0x38f67f)=>_0x4f320d+_0x38f67f,_0x1f00f6),this[_0x56e579(0x9da)]['x']=_0x1fe035,this[_0x56e579(0x9da)]['y']=_0x1f00f6,this[_0x56e579(0x9da)]['update']();},Sprite_Weapon[_0x4b7b09(0x4d2)][_0x4b7b09(0x97a)]=function(_0x261c4c){const _0xeabd60=_0x4b7b09;this['_weaponImageId']=_0x261c4c,this[_0xeabd60(0x8a7)]=-0x1,this[_0xeabd60(0x174)]=0x0,this[_0xeabd60(0x9b6)](),this[_0xeabd60(0x56a)]();},Sprite_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0xaa0)]=function(){},Sprite_Actor['prototype'][_0x4b7b09(0x157)]=function(){const _0x252f68=_0x4b7b09,_0x2df809=VisuMZ['BattleCore'][_0x252f68(0xb41)][_0x252f68(0x56e)],_0x39a1cc=_0x2df809['StepDistanceX'],_0x5d906b=_0x2df809[_0x252f68(0x8df)],_0x5748c7=_0x2df809[_0x252f68(0x833)];this[_0x252f68(0x7fc)](-_0x39a1cc,-_0x5d906b,_0x5748c7);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x4c0)]=Sprite_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x56a)],Sprite_Actor['prototype']['updateFrame']=function(){const _0x2933ad=_0x4b7b09;this[_0x2933ad(0x97)]()?_0x2933ad(0x835)!==_0x2933ad(0x835)?_0x56d5c3=_0xe1f9c9[_0x2933ad(0x2f0)]:this[_0x2933ad(0x9c6)]():(this[_0x2933ad(0x34e)](),VisuMZ[_0x2933ad(0x6ce)]['Sprite_Actor_updateFrame'][_0x2933ad(0x4ad)](this));},Sprite_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x34e)]=function(){const _0xfb5ac1=_0x4b7b09;if(this['_battler']&&this[_0xfb5ac1(0x6a7)][_0xfb5ac1(0x359)]){const _0x123514=this[_0xfb5ac1(0x6a7)][_0xfb5ac1(0x359)];this[_0xfb5ac1(0x7cc)]=Sprite_Actor[_0xfb5ac1(0xb66)][_0x123514[_0xfb5ac1(0x895)]],this[_0xfb5ac1(0x174)]=_0x123514['pattern'];const _0x5f0809=this['_weaponSprite'];_0x5f0809['freezeFrame'](_0x123514[_0xfb5ac1(0xa4d)],_0x123514[_0xfb5ac1(0xab1)]),this['adjustWeaponSpriteOffset']();}},Sprite_Weapon[_0x4b7b09(0x4d2)][_0x4b7b09(0x32d)]=function(_0x485519,_0x17ec3b){const _0x207e51=_0x4b7b09;this[_0x207e51(0x494)]=_0x485519,this[_0x207e51(0x8a7)]=-Infinity,this[_0x207e51(0x174)]=_0x17ec3b,this[_0x207e51(0x9b6)](),this[_0x207e51(0x56a)]();},Sprite_Enemy['prototype']['initMembers']=function(){const _0xec054d=_0x4b7b09;Sprite_Battler[_0xec054d(0x4d2)][_0xec054d(0x737)][_0xec054d(0x4ad)](this),this['_enemy']=null,this[_0xec054d(0x274)]=![],this[_0xec054d(0xc5)]='',this[_0xec054d(0x53e)]=0x0,this[_0xec054d(0xaf2)]=null,this[_0xec054d(0xab8)]=0x0,this[_0xec054d(0x6a)]=0x0,this[_0xec054d(0x89b)](),this[_0xec054d(0x8c8)]();},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x3ea)]=Sprite_Enemy['prototype'][_0x4b7b09(0xce)],Sprite_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0xce)]=function(){const _0x5e6a02=_0x4b7b09;VisuMZ[_0x5e6a02(0x6ce)][_0x5e6a02(0x3ea)][_0x5e6a02(0x4ad)](this),this['updateShadowVisibility']();},Sprite_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x89b)]=function(){const _0x56b18d=_0x4b7b09;this[_0x56b18d(0x1b4)]=new Sprite(),this[_0x56b18d(0x1b4)][_0x56b18d(0x792)]['x']=0.5,this[_0x56b18d(0x1b4)][_0x56b18d(0x792)]['y']=0x1,this[_0x56b18d(0x420)](this[_0x56b18d(0x1b4)]),this[_0x56b18d(0x47b)]();},Sprite_Enemy['prototype'][_0x4b7b09(0x7f8)]=function(){const _0x361e74=_0x4b7b09;return this[_0x361e74(0x265)]||this['_mainSprite']||this;},Sprite_Enemy['prototype'][_0x4b7b09(0x9b6)]=function(_0x310f91){const _0x248757=_0x4b7b09;this['bitmap']=new Bitmap(0x1,0x1);if(this[_0x248757(0x6d2)]()){const _0x2f79b1=this['_enemy'][_0x248757(0x822)]();this['bitmap']=new Bitmap(_0x2f79b1[_0x248757(0x839)],_0x2f79b1[_0x248757(0xb65)]),this[_0x248757(0x1b4)]['bitmap']=new Bitmap(0x1,0x1);}else $gameSystem[_0x248757(0x43d)]()?(this[_0x248757(0x1b4)]['bitmap']=ImageManager['loadSvEnemy'](_0x310f91),this[_0x248757(0x1b4)][_0x248757(0x680)][_0x248757(0x4a8)](this[_0x248757(0xb21)][_0x248757(0x165)](this))):_0x248757(0x187)!==_0x248757(0x152)?(this[_0x248757(0x1b4)][_0x248757(0x680)]=ImageManager['loadEnemy'](_0x310f91),this[_0x248757(0x1b4)][_0x248757(0x680)][_0x248757(0x4a8)](this[_0x248757(0xb21)][_0x248757(0x165)](this))):(this[_0x248757(0x3b6)](),this[_0x248757(0x339)]());},Sprite_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0xb21)]=function(){const _0x4b28b2=_0x4b7b09,_0x49f963=this[_0x4b28b2(0x1b4)][_0x4b28b2(0x680)];_0x49f963&&(_0x4b28b2(0x54f)===_0x4b28b2(0x70e)?(_0x198ca6[_0x4b28b2(0x6ce)][_0x4b28b2(0x996)][_0x4b28b2(0x4ad)](this,_0xa3fe6a),_0x3f5aa9['refreshStatusWindow']()):this['bitmap']=new Bitmap(_0x49f963[_0x4b28b2(0x839)],_0x49f963[_0x4b28b2(0xb65)]));},VisuMZ['BattleCore'][_0x4b7b09(0x7ad)]=Sprite_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x72b)],Sprite_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x72b)]=function(_0xedb62){const _0x20e6d7=_0x4b7b09;this['_mainSprite']&&this['_mainSprite'][_0x20e6d7(0x72b)](_0xedb62);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x140)]=Sprite_Enemy['prototype'][_0x4b7b09(0x9e3)],Sprite_Enemy['prototype'][_0x4b7b09(0x9e3)]=function(){const _0x2c6307=_0x4b7b09;if(this[_0x2c6307(0x305)]()){if(_0x2c6307(0x8a1)===_0x2c6307(0x8a1))VisuMZ[_0x2c6307(0x6ce)]['Sprite_Enemy_initVisibility'][_0x2c6307(0x4ad)](this);else return this[_0x2c6307(0x335)]()&&this[_0x2c6307(0x335)]()[_0x2c6307(0x6e3)]()&&!this[_0x2c6307(0x335)]()[_0x2c6307(0x43b)]();}else{this['_appeared']=!this['_enemy'][_0x2c6307(0x182)]();if(!this[_0x2c6307(0x274)]){if(_0x2c6307(0x67c)!==_0x2c6307(0xa48))this[_0x2c6307(0x5a0)]=0x0;else{const _0xeb3316=_0x5e7ba4['BattleCore'][_0x2c6307(0xb41)][_0x2c6307(0x34c)];if(!_0xeb3316[_0x2c6307(0xfe)])return;this[_0x2c6307(0x410)](_0x2c6307(0x8a9),_0xeb3316[_0x2c6307(0x99c)][_0x2c6307(0xace)](_0x2c9259[_0x2c6307(0x3f6)]())),this[_0x2c6307(0x410)]('waitCount',_0xeb3316[_0x2c6307(0x138)]),this[_0x2c6307(0x410)](_0x2c6307(0x945));}}}},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x4ea)]=Sprite_Enemy[_0x4b7b09(0x4d2)]['updateCollapse'],Sprite_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x69a)]=function(){const _0x554bbe=_0x4b7b09;if(this[_0x554bbe(0x305)]())VisuMZ['BattleCore']['Sprite_Enemy_updateCollapse'][_0x554bbe(0x4ad)](this);},Sprite_Enemy['prototype'][_0x4b7b09(0x56a)]=function(){const _0x28c304=_0x4b7b09;Sprite_Battler[_0x28c304(0x4d2)][_0x28c304(0x56a)][_0x28c304(0x4ad)](this);const _0x168930=this['mainSprite']()||this;if(!_0x168930)return;if(!_0x168930[_0x28c304(0x680)]){if(_0x28c304(0xa55)==='nkrMg')_0x168930['bitmap']=new Bitmap(this['width'],this[_0x28c304(0xb65)]);else{return;this[_0x28c304(0x24e)]&&(this['_effectsContainer']['x']=this['x'],this['_effectsContainer']['y']=this['y']),this['_damageContainer']&&(this[_0x28c304(0x6d7)]['x']=this['x'],this[_0x28c304(0x6d7)]['y']=this['y']);}}if(this['_effectType']==='bossCollapse')_0x28c304(0x933)===_0x28c304(0x933)?this[_0x28c304(0x1b4)]['setFrame'](0x0,0x0,this[_0x28c304(0x1b4)][_0x28c304(0x839)],this[_0x28c304(0xab8)]):this[_0x28c304(0x790)]=0x8;else{if(_0x28c304(0x375)===_0x28c304(0x375))_0x168930[_0x28c304(0x428)](0x0,0x0,_0x168930[_0x28c304(0x680)][_0x28c304(0x839)],this[_0x28c304(0x680)][_0x28c304(0xb65)]);else{if(!_0x4a73c0[_0x28c304(0x24d)]())return![];if(!_0x42f3da[_0x28c304(0xaef)]())return![];if(!_0x179c81[_0x28c304(0x9a7)]())return![];return _0x1c1d8e['BattleCore']['Settings']['ActionSequence']['AutoMeleeAoE'];}}},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x987)]=Sprite_Enemy[_0x4b7b09(0x4d2)]['updateBossCollapse'],Sprite_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0xe8)]=function(){const _0x1443ab=_0x4b7b09;if(this[_0x1443ab(0x305)]())VisuMZ[_0x1443ab(0x6ce)]['Sprite_Enemy_updateBossCollapse'][_0x1443ab(0x4ad)](this);},Sprite_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x44b)]=function(){const _0x4c6797=_0x4b7b09;return Sprite_Battler[_0x4c6797(0x4d2)][_0x4c6797(0x44b)][_0x4c6797(0x4ad)](this);},VisuMZ['BattleCore'][_0x4b7b09(0xac6)]=Sprite_Enemy['prototype'][_0x4b7b09(0x520)],Sprite_Enemy[_0x4b7b09(0x4d2)]['updateStateSprite']=function(){const _0x1706b0=_0x4b7b09;VisuMZ[_0x1706b0(0x6ce)][_0x1706b0(0xac6)]['call'](this),this[_0x1706b0(0x899)]();},Sprite_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x899)]=function(){const _0x224edf=_0x4b7b09,_0x4f2d95=VisuMZ['BattleCore']['Settings'][_0x224edf(0x97d)];if(_0x4f2d95[_0x224edf(0xa60)]&&!_0x4f2d95[_0x224edf(0x589)]){this[_0x224edf(0x40c)][_0x224edf(0x5a0)]=0x0;return;}this[_0x224edf(0x40c)]['x']=0x0,this[_0x224edf(0x40c)]['x']+=this[_0x224edf(0x6a7)]['battleUIOffsetX'](),this[_0x224edf(0x40c)]['y']=-this['bitmap'][_0x224edf(0xb65)]-this[_0x224edf(0x40c)][_0x224edf(0xb65)]-0x4,this[_0x224edf(0x40c)]['y']+=this['_battler'][_0x224edf(0x221)](),this[_0x224edf(0x40c)][_0x224edf(0x785)]['x']=0x1/(this[_0x224edf(0x785)]['x']||0.001),this['_stateIconSprite'][_0x224edf(0x785)]['y']=0x1/(this[_0x224edf(0x785)]['y']||0.001),this[_0x224edf(0x6d2)]()&&(this['_svBattlerSprite'][_0x224edf(0x2d1)]['scale']['x']=-0x1/(this[_0x224edf(0x785)]['x']||0.001),this[_0x224edf(0x480)][_0x224edf(0x2d1)]['scale']['y']=0x1/(this[_0x224edf(0x785)]['y']||0.001));},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x8a6)]=Sprite_Enemy[_0x4b7b09(0x4d2)]['setBattler'],Sprite_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x1de)]=function(_0x2715fd){const _0x3e9ddf=_0x4b7b09;VisuMZ[_0x3e9ddf(0x6ce)]['Sprite_Enemy_setBattler']['call'](this,_0x2715fd),this[_0x3e9ddf(0x5dd)](_0x2715fd);},Sprite_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x5dd)]=function(_0x4baac5){const _0x34b763=_0x4b7b09;!this[_0x34b763(0x480)]&&(this['_svBattlerSprite']=new Sprite_SvEnemy(_0x4baac5),this['attachSpritesToDistortionSprite']()),this[_0x34b763(0x480)]['setBattler'](_0x4baac5);},Sprite_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x6d2)]=function(){const _0x5d792c=_0x4b7b09;return this[_0x5d792c(0xa10)]&&this[_0x5d792c(0xa10)][_0x5d792c(0x6d2)]();},Sprite_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x305)]=function(){const _0x1d561e=_0x4b7b09;if(this['hasSvBattler']())return this['_enemy'][_0x1d561e(0x305)]();else{if(_0x1d561e(0x5f4)!==_0x1d561e(0x8f4))return!![];else{const _0x37e666=_0x25a588['makeDeepCopy'](_0x30232e);_0x37e666['missed']=![],_0x37e666['evaded']=![],_0x37e666[_0x1d561e(0x147)]=0x0,this[_0x1d561e(0x7b4)][_0x1d561e(0x410)](_0x37e666);}}},Sprite_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x7ac)]=function(){const _0x20be8f=_0x4b7b09;this[_0x20be8f(0x6d2)]()&&this['_svBattlerSprite'][_0x20be8f(0x7ac)]();},Sprite_Enemy['prototype'][_0x4b7b09(0x2c0)]=function(_0x2a7035){const _0x1aae7d=_0x4b7b09;if(this[_0x1aae7d(0x6d2)]())this[_0x1aae7d(0x480)][_0x1aae7d(0x2c0)](_0x2a7035);},Sprite_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x856)]=function(_0x52ae4b){if(this['hasSvBattler']())this['_svBattlerSprite']['forceWeaponAnimation'](_0x52ae4b);},Sprite_Enemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x157)]=function(){const _0x394fec=_0x4b7b09,_0x3f1b41=VisuMZ['BattleCore']['Settings'][_0x394fec(0x56e)],_0x3d5807=_0x3f1b41['StepDistanceX'],_0x44a713=_0x3f1b41[_0x394fec(0x8df)],_0x3a4d19=_0x3f1b41[_0x394fec(0x833)];this[_0x394fec(0x7fc)](_0x3d5807,_0x44a713,_0x3a4d19);};function Sprite_SvEnemy(){const _0x22e1ca=_0x4b7b09;this[_0x22e1ca(0x827)](...arguments);}Sprite_SvEnemy[_0x4b7b09(0x4d2)]=Object[_0x4b7b09(0x1e1)](Sprite_Actor[_0x4b7b09(0x4d2)]),Sprite_SvEnemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x492)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x4b7b09(0x4d2)]['initialize']=function(_0x14d47c){const _0x54bcec=_0x4b7b09;Sprite_Actor[_0x54bcec(0x4d2)]['initialize']['call'](this,_0x14d47c),this[_0x54bcec(0x785)]['x']=-0x1,this[_0x54bcec(0x2d1)][_0x54bcec(0x785)]['x']=-0x1;},Sprite_SvEnemy[_0x4b7b09(0x4d2)]['createShadowSprite']=function(){},Sprite_SvEnemy[_0x4b7b09(0x4d2)]['moveToStartPosition']=function(){},Sprite_SvEnemy['prototype'][_0x4b7b09(0x1d8)]=function(_0x338f99){},Sprite_SvEnemy[_0x4b7b09(0x4d2)]['updateShadow']=function(){},Sprite_SvEnemy['prototype'][_0x4b7b09(0x849)]=function(){},Sprite_SvEnemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x520)]=function(){const _0x50a30f=_0x4b7b09;this[_0x50a30f(0x2d1)][_0x50a30f(0xe2)]=![];},Sprite_SvEnemy[_0x4b7b09(0x4d2)]['updateBitmap']=function(){const _0x40e9f3=_0x4b7b09;Sprite_Battler[_0x40e9f3(0x4d2)][_0x40e9f3(0x554)]['call'](this);const _0xec0aea=this[_0x40e9f3(0x7cb)][_0x40e9f3(0x81f)]();this['_battlerName']!==_0xec0aea&&(this['_battlerName']=_0xec0aea,this[_0x40e9f3(0x1b4)]['bitmap']=ImageManager[_0x40e9f3(0x8aa)](_0xec0aea)),this['_mainSprite']&&this[_0x40e9f3(0x1b4)][_0x40e9f3(0x680)]&&this[_0x40e9f3(0x6a7)]&&(_0x40e9f3(0x1fb)===_0x40e9f3(0xaaa)?this[_0x40e9f3(0x592)]=![]:this[_0x40e9f3(0x1b4)][_0x40e9f3(0x680)][_0x40e9f3(0x88)]!==this[_0x40e9f3(0x6a7)][_0x40e9f3(0x46f)]()&&(this[_0x40e9f3(0x1b4)][_0x40e9f3(0x680)][_0x40e9f3(0x88)]=this[_0x40e9f3(0x6a7)][_0x40e9f3(0x46f)]()));},Sprite_SvEnemy[_0x4b7b09(0x4d2)]['retreat']=function(){},Sprite_SvEnemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x7fc)]=function(_0x5a6c9e,_0x2c87b6,_0x2a4ca8){const _0x18488c=_0x4b7b09;if(this[_0x18488c(0x45c)])this[_0x18488c(0x45c)][_0x18488c(0x7fc)](_0x5a6c9e,_0x2c87b6,_0x2a4ca8);},Sprite_SvEnemy[_0x4b7b09(0x4d2)]['refreshMotion']=function(){const _0x11fdcf=_0x4b7b09,_0x14bbd1=this[_0x11fdcf(0x7cb)];if(_0x14bbd1){const _0x397d2e=_0x14bbd1[_0x11fdcf(0xb58)]();if(_0x14bbd1[_0x11fdcf(0x970)]()||_0x14bbd1['isActing']())this['startMotion'](_0x11fdcf(0x356));else{if(_0x397d2e===0x3)this['startMotion'](_0x11fdcf(0x5c2));else{if(_0x397d2e===0x2){if('HqVEw'===_0x11fdcf(0x6d9))this[_0x11fdcf(0x460)](_0x11fdcf(0x96d));else{_0x40cc02['BattleCore']['Sprite_Battler_initMembers']['call'](this),this['initMembersBattleCore']();if(this[_0x11fdcf(0x492)]===_0x1916ec)this[_0x11fdcf(0x56f)]();this[_0x11fdcf(0x6d3)]();}}else{if(_0x14bbd1[_0x11fdcf(0xa2f)]()){if(_0x11fdcf(0x4b9)!==_0x11fdcf(0x4b9))return _0x2829ca['BattleCore'][_0x11fdcf(0xb41)][_0x11fdcf(0xa9)][_0x11fdcf(0x38c)];else this[_0x11fdcf(0x460)]('chant');}else{if(_0x14bbd1[_0x11fdcf(0x4d5)]()||_0x14bbd1[_0x11fdcf(0x5be)]())this['startMotion'](_0x11fdcf(0x287));else{if(_0x397d2e===0x1)_0x11fdcf(0x1ab)===_0x11fdcf(0x29c)?(this[_0x11fdcf(0x410)](_0x11fdcf(0x7a3),[_0x1ece05],_0x1fbe04,_0x302243),this[_0x11fdcf(0x410)](_0x11fdcf(0xb36),_0xd03a09,_0x3c5253,_0x11fdcf(0x7ed),_0x51b60e,!![],_0x11fdcf(0x5cb),!![]),this[_0x11fdcf(0x410)](_0x11fdcf(0x42f),[_0x5eec99],'walk'),this['push'](_0x11fdcf(0xd1))):this['startMotion'](_0x11fdcf(0x900));else{if(_0x14bbd1[_0x11fdcf(0x73c)]())_0x11fdcf(0xacc)!==_0x11fdcf(0xacc)?_0x1949db[_0x11fdcf(0xb2)]['friendsUnit']()[_0x11fdcf(0x499)](_0x1982aa):this[_0x11fdcf(0x460)](_0x11fdcf(0xa80));else{if(_0x14bbd1[_0x11fdcf(0x75)]())this[_0x11fdcf(0x460)](_0x11fdcf(0x356));else{if('rqPUZ'!==_0x11fdcf(0x135))this[_0x11fdcf(0x460)](_0x14bbd1['svBattlerData']()[_0x11fdcf(0x3c4)]||_0x11fdcf(0x356));else{this[_0x11fdcf(0x42f)](_0x11fdcf(0x5c2));return;}}}}}}}}}}},Sprite_SvEnemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x615)]=function(){const _0x5e42ad=_0x4b7b09;return this['parent']?this[_0x5e42ad(0x45c)][_0x5e42ad(0x17e)]===0x0&&this[_0x5e42ad(0x45c)]['_offsetY']===0x0:!![];},Sprite_SvEnemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x6eb)]=function(){},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x8c)]=Sprite_Animation[_0x4b7b09(0x4d2)][_0x4b7b09(0x8c0)],Sprite_Animation[_0x4b7b09(0x4d2)]['targetSpritePosition']=function(_0x2872b9){const _0x1e62ae=_0x4b7b09;return _0x2872b9['_distortionSprite']?this['targetDistortionSpritePosition'](_0x2872b9):VisuMZ[_0x1e62ae(0x6ce)][_0x1e62ae(0x8c)]['call'](this,_0x2872b9);},Sprite_Animation[_0x4b7b09(0x4d2)]['targetDistortionSpritePosition']=function(_0x4968db){const _0x97dfc6=_0x4b7b09;let _0x1fd066=_0x4968db['x'],_0x380024=_0x4968db['y'],_0x5b52a0=_0x4968db[_0x97dfc6(0xb65)],_0x17a56c=_0x4968db[_0x97dfc6(0x265)][_0x97dfc6(0x785)]['y'];_0x4968db['x']=_0x4968db[_0x97dfc6(0x226)]+_0x4968db[_0x97dfc6(0xa0a)](),_0x4968db['y']=_0x4968db[_0x97dfc6(0x518)]+_0x4968db[_0x97dfc6(0x59a)](),_0x4968db[_0x97dfc6(0xb65)]*=_0x17a56c;let _0x2e9941=VisuMZ[_0x97dfc6(0x6ce)][_0x97dfc6(0x8c)][_0x97dfc6(0x4ad)](this,_0x4968db);return _0x4968db['x']=_0x1fd066,_0x4968db['y']=_0x380024,_0x4968db[_0x97dfc6(0xb65)]=_0x5b52a0,_0x2e9941;},VisuMZ['BattleCore'][_0x4b7b09(0x3bf)]=Sprite_AnimationMV[_0x4b7b09(0x4d2)][_0x4b7b09(0xe4)],Sprite_AnimationMV[_0x4b7b09(0x4d2)]['updatePosition']=function(){const _0x21aa36=_0x4b7b09;VisuMZ[_0x21aa36(0x6ce)][_0x21aa36(0x3bf)][_0x21aa36(0x4ad)](this);if(this[_0x21aa36(0x27f)][_0x21aa36(0xa98)]===0x3){if(this['x']===0x0)this['x']=Math[_0x21aa36(0x2ca)](Graphics[_0x21aa36(0x839)]/0x2);if(this['y']===0x0)this['y']=Math[_0x21aa36(0x2ca)](Graphics[_0x21aa36(0xb65)]/0x2);}else{if(_0x21aa36(0x487)!==_0x21aa36(0x92c)){if(this[_0x21aa36(0x249)])return;const _0x567969=(Imported[_0x21aa36(0x490)]?VisuMZ[_0x21aa36(0x8a5)][_0x21aa36(0xb41)]['UI'][_0x21aa36(0xb2c)]:0x4)*0x2,_0x37ac2a=(Graphics['width']-(Graphics[_0x21aa36(0x979)]+_0x567969))/0x2;if(_0x37ac2a!==0x0)this['x']+=_0x37ac2a;}else{const _0xc1e023=_0x28056a[_0x21aa36(0x6ce)][_0x21aa36(0xb41)][_0x21aa36(0x901)];if(_0xc1e023&&_0xc1e023[_0x21aa36(0x161)])return _0xc1e023[_0x21aa36(0x161)]['call'](this);this['width']=_0x262371[_0x21aa36(0x839)],this[_0x21aa36(0xb65)]=_0x50704f[_0x21aa36(0xb65)];const _0x184072=_0x4bbcda['max'](0x1,this[_0x21aa36(0x839)]/this[_0x21aa36(0x680)][_0x21aa36(0x839)]),_0x3e90a1=_0x4670ee[_0x21aa36(0x90d)](0x1,this[_0x21aa36(0xb65)]/this['bitmap'][_0x21aa36(0xb65)]),_0x79c715=_0x1e3223[_0x21aa36(0x90d)](_0x184072,_0x3e90a1);this['scale']['x']=_0x79c715,this[_0x21aa36(0x785)]['y']=_0x79c715,this['x']=(_0x22943f[_0x21aa36(0x839)]-this[_0x21aa36(0x839)])/0x2,this['y']=_0x257116[_0x21aa36(0xb65)]-this[_0x21aa36(0xb65)];}}},Sprite_Damage[_0x4b7b09(0x4d2)][_0x4b7b09(0x2cd)]=function(_0x14caf1){const _0x4d1c7d=_0x4b7b09,_0x115967=_0x14caf1[_0x4d1c7d(0x282)]()||_0x14caf1[_0x4d1c7d(0xa66)]();if(_0x115967[_0x4d1c7d(0x660)]||_0x115967[_0x4d1c7d(0x7f7)]){if(_0x4d1c7d(0x434)!==_0x4d1c7d(0x434)){const _0x2bcc62=_0x4035cd[_0x4d1c7d(0x839)],_0x338219=_0x4ad317[_0x4d1c7d(0x2ca)]((_0x5232e6[_0x4d1c7d(0x979)]-_0x2bcc62)/0x2),_0x301e6c=this[_0x4d1c7d(0xac1)](0x4,!![]),_0x4d7849=_0x5332a3[_0x4d1c7d(0x807)]-_0x301e6c+(_0x49dd3c[_0x4d1c7d(0xb65)]-_0x444694[_0x4d1c7d(0x807)])/0x2;return new _0x461b71(_0x338219,_0x4d7849,_0x2bcc62,_0x301e6c);}else this[_0x4d1c7d(0x8ce)]=0x0,this[_0x4d1c7d(0x677)]();}else{if(_0x115967['hpAffected'])this[_0x4d1c7d(0x8ce)]=_0x115967[_0x4d1c7d(0x978)]>=0x0?0x0:0x1,this[_0x4d1c7d(0x948)](_0x115967[_0x4d1c7d(0x978)]);else _0x14caf1[_0x4d1c7d(0x23d)]()&&_0x115967[_0x4d1c7d(0x147)]!==0x0&&(_0x4d1c7d(0x4bb)==='kkAKy'?(this[_0x4d1c7d(0x8ce)]=_0x115967[_0x4d1c7d(0x147)]>=0x0?0x2:0x3,this[_0x4d1c7d(0x948)](_0x115967[_0x4d1c7d(0x147)])):_0x1d0053[_0x4d1c7d(0x3d8)](0x0));}if(_0x115967[_0x4d1c7d(0x931)]){if(_0x4d1c7d(0xad0)!==_0x4d1c7d(0x4f8))this[_0x4d1c7d(0x1bb)]();else{const _0x2d85f8='\x5cI[%1]%2';let _0x52d5b7=_0x533297[_0x4d1c7d(0x3c5)],_0x445907=_0x13f203[_0x4d1c7d(0x639)];const _0x11045d=_0x2b70b7['note'];return _0x11045d[_0x4d1c7d(0x2c1)](/<DISPLAY ICON: (\d+)>/i)&&(_0x52d5b7=_0x3338ee(_0x11fe80['$1'])),_0x11045d['match'](/<DISPLAY TEXT: (.*)>/i)&&(_0x445907=_0x21d011(_0x285c8f['$1'])),_0x2d85f8[_0x4d1c7d(0xace)](_0x52d5b7,_0x445907);}}},Sprite_Damage[_0x4b7b09(0x4d2)][_0x4b7b09(0x97a)]=function(_0x225a66){},Sprite_Damage[_0x4b7b09(0x4d2)][_0x4b7b09(0x948)]=function(_0x1137c0){const _0x505730=_0x4b7b09;let _0x2b8797=this[_0x505730(0x79e)](_0x1137c0);const _0x2466db=this[_0x505730(0x109)](),_0x4f012c=Math[_0x505730(0xdd)](_0x2466db*0.75);for(let _0x315e32=0x0;_0x315e32<_0x2b8797[_0x505730(0x8db)];_0x315e32++){if(_0x505730(0x4de)!==_0x505730(0x213)){const _0x4b5a74=this['createChildSprite'](_0x4f012c,_0x2466db);_0x4b5a74[_0x505730(0x680)][_0x505730(0x557)](_0x2b8797[_0x315e32],0x0,0x0,_0x4f012c,_0x2466db,_0x505730(0x5a6)),_0x4b5a74['x']=(_0x315e32-(_0x2b8797[_0x505730(0x8db)]-0x1)/0x2)*_0x4f012c,_0x4b5a74['dy']=-_0x315e32;}else _0x5d45ef[_0x505730(0x4d2)][_0x505730(0x827)][_0x505730(0x4ad)](this);}},Sprite_Damage[_0x4b7b09(0x4d2)]['createString']=function(_0x38b687){const _0x5416ce=_0x4b7b09;let _0x24938e=Math[_0x5416ce(0x2ef)](_0x38b687)[_0x5416ce(0x6b6)]();if(this[_0x5416ce(0x5c8)]()){if(_0x5416ce(0x256)===_0x5416ce(0x819))return this['statusTextAutoBattleStyle']();else _0x24938e=VisuMZ[_0x5416ce(0x38d)](_0x24938e);}const _0x544a06=VisuMZ['BattleCore'][_0x5416ce(0xb41)][_0x5416ce(0xb75)];let _0xd3fdef='',_0x59359b='';switch(this[_0x5416ce(0x8ce)]){case 0x0:_0xd3fdef=_0x544a06[_0x5416ce(0x3ca)]||_0x5416ce(0x85e),_0x59359b=TextManager['hp'];if(_0x38b687===0x0)_0xd3fdef='%1';break;case 0x1:_0xd3fdef=_0x544a06['hpHealingFmt']||_0x5416ce(0x2e2),_0x59359b=TextManager['hp'];break;case 0x2:_0xd3fdef=_0x544a06[_0x5416ce(0x8d)]||_0x5416ce(0x51b),_0x59359b=TextManager['mp'];break;case 0x3:_0xd3fdef=_0x544a06['mpHealingFmt']||'+%1\x20MP',_0x59359b=TextManager['mp'];break;}return _0xd3fdef[_0x5416ce(0xace)](_0x24938e,_0x59359b)['trim']();},Sprite_Damage[_0x4b7b09(0x4d2)][_0x4b7b09(0x5c8)]=function(){const _0x220eb8=_0x4b7b09;return Imported[_0x220eb8(0x490)]?VisuMZ[_0x220eb8(0x8a5)]['Settings'][_0x220eb8(0x35f)]['DigitGroupingDamageSprites']:![];},Sprite_Damage[_0x4b7b09(0x4d2)][_0x4b7b09(0x1bb)]=function(){const _0x5c8947=_0x4b7b09,_0x220b5d=VisuMZ['BattleCore'][_0x5c8947(0xb41)][_0x5c8947(0xb75)];this[_0x5c8947(0x5eb)]=_0x220b5d[_0x5c8947(0x14c)][_0x5c8947(0x8ea)](0x0),this[_0x5c8947(0x8f)]=_0x220b5d[_0x5c8947(0x16f)];},Sprite_Damage[_0x4b7b09(0x4d2)][_0x4b7b09(0x21c)]=function(_0x37f893,_0x3b86ef){const _0x3ca4b2=_0x4b7b09;this[_0x3ca4b2(0x5eb)]=_0x3b86ef[_0x3ca4b2(0x438)]||[0x0,0x0,0x0,0x0],this[_0x3ca4b2(0x5eb)]=JsonEx['makeDeepCopy'](this[_0x3ca4b2(0x5eb)]),this[_0x3ca4b2(0x8f)]=_0x3b86ef[_0x3ca4b2(0xa40)]||0x0;const _0x5ba828=this[_0x3ca4b2(0x109)](),_0x314879=Math[_0x3ca4b2(0xdd)](_0x5ba828*0x1e),_0x41dad5=this[_0x3ca4b2(0x21a)](_0x314879,_0x5ba828);_0x41dad5[_0x3ca4b2(0x680)][_0x3ca4b2(0x590)]=ColorManager[_0x3ca4b2(0x71a)](_0x3b86ef[_0x3ca4b2(0x590)]),_0x41dad5[_0x3ca4b2(0x680)]['drawText'](_0x37f893,0x0,0x0,_0x314879,_0x5ba828,_0x3ca4b2(0x5a6)),_0x41dad5['dy']=0x0;},Sprite_Damage[_0x4b7b09(0x4d2)][_0x4b7b09(0x207)]=function(_0x1d6c8b,_0xd0eb31,_0x3468a4){const _0x20b1be=_0x4b7b09,_0x24c9e9=Math['max'](this['fontSize'](),ImageManager[_0x20b1be(0x296)]),_0x543d94=Math[_0x20b1be(0xdd)](_0x24c9e9*0x1e),_0x96302d=this[_0x20b1be(0x21a)](_0x543d94,_0x24c9e9),_0x2432e3=ImageManager[_0x20b1be(0x3e0)]/0x2,_0x1647e0=_0x96302d[_0x20b1be(0x680)][_0x20b1be(0x1a2)](_0xd0eb31+'\x20');_0x96302d[_0x20b1be(0x680)][_0x20b1be(0x590)]=ColorManager[_0x20b1be(0x71a)](_0x3468a4[_0x20b1be(0x590)]),_0x96302d[_0x20b1be(0x680)][_0x20b1be(0x557)](_0xd0eb31,_0x2432e3,0x0,_0x543d94-_0x2432e3,_0x24c9e9,'center');const _0x10416f=Math['round']((_0x24c9e9-ImageManager['iconHeight'])/0x2),_0x4ca1dc=_0x543d94/0x2-ImageManager[_0x20b1be(0x3e0)]-_0x1647e0/0x2+_0x2432e3/0x2,_0x137628=ImageManager[_0x20b1be(0x6e0)]('IconSet'),_0x2c649e=ImageManager[_0x20b1be(0x3e0)],_0x4da30a=ImageManager['iconHeight'],_0x4139cc=_0x1d6c8b%0x10*_0x2c649e,_0xbe2638=Math[_0x20b1be(0xdd)](_0x1d6c8b/0x10)*_0x4da30a;_0x96302d[_0x20b1be(0x680)][_0x20b1be(0x20f)](_0x137628,_0x4139cc,_0xbe2638,_0x2c649e,_0x4da30a,_0x4ca1dc,_0x10416f),this[_0x20b1be(0x5eb)]=_0x3468a4['flashColor']||[0x0,0x0,0x0,0x0],this[_0x20b1be(0x5eb)]=JsonEx[_0x20b1be(0x9fb)](this[_0x20b1be(0x5eb)]),this[_0x20b1be(0x8f)]=_0x3468a4[_0x20b1be(0xa40)]||0x0,_0x96302d['dy']=0x0;},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x956)]=Sprite_Damage[_0x4b7b09(0x4d2)][_0x4b7b09(0x21a)],Sprite_Damage[_0x4b7b09(0x4d2)][_0x4b7b09(0x21a)]=function(_0xe592c7,_0x22e449){const _0x2a8190=_0x4b7b09;return _0x22e449=Math[_0x2a8190(0x2ca)](_0x22e449*1.2),VisuMZ[_0x2a8190(0x6ce)][_0x2a8190(0x956)][_0x2a8190(0x4ad)](this,_0xe592c7,_0x22e449);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xb52)]=Sprite_StateIcon[_0x4b7b09(0x4d2)][_0x4b7b09(0x56a)],Sprite_StateIcon[_0x4b7b09(0x4d2)]['updateFrame']=function(){const _0x1365ed=_0x4b7b09;VisuMZ['BattleCore'][_0x1365ed(0xb52)][_0x1365ed(0x4ad)](this),this['opacity']=this[_0x1365ed(0x831)]>0x0?0xff:0x0;},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x6ae)]=Sprite_Weapon[_0x4b7b09(0x4d2)][_0x4b7b09(0x9b6)],Sprite_Weapon[_0x4b7b09(0x4d2)][_0x4b7b09(0x9b6)]=function(){const _0x2505fe=_0x4b7b09;VisuMZ[_0x2505fe(0x6ce)][_0x2505fe(0x6ae)]['call'](this),this[_0x2505fe(0x680)]&&(this['bitmap']['smooth']=VisuMZ['BattleCore'][_0x2505fe(0xb41)][_0x2505fe(0x5dc)]['SmoothImage']);};function Sprite_HpGauge(){const _0xb593a1=_0x4b7b09;this[_0xb593a1(0x827)](...arguments);}function _0x5e6d(){const _0x12c5b9=['Parse_Notetags_Action','_makeFontNameText','_spriteset','startInput','addDamageSprite','statusWindowRect','Game_Battler_clearMotion','NameAttachStateIcon','isBTB','processForcedAction','122528vvmgTN','Game_Battler_onBattleEnd','_drawTextBody','result','displaySubstitute','ActSeq_Inject_AnimationStart','_backAttachmentSprite','addTextToCombatLog','MpGaugeOffsetX','CWcmO','TpGaugeOffsetY','hJVlV','ABWmH','_enemySprites','clearOnceParallelInterpreters','UTvwf','_lastRegenFrameCount','addSkillCommands','opSCM','ActSeq_Impact_TimeStop','createCancelButton','canAddSkillCommand','changeBattlebacks','Hljpg','RegExp','hardDamageCap','_commonEventIDs','_borderPortraitDuration','setupWeaponAnimation','dying','IconStypeNorm','waitForEffect','_ptbActionCost','logActionList','revertTpbCachedActor','setText','allBattleMembers','skcVX','AsUser','_canLose','_tpbNeedsPartyCommand','drawSingleSkillCost','ChantStyle','IAWFd','checkSubstitute','updateAngleCalculations','BravePoints','dYtTf','Game_BattlerBase_isStateResist','_helpWindow','selectNextCommand','createInnerPortrait','Scene_Battle_startEnemySelection','position','ActSeq_Mechanics_BreakShieldReset','_enemyWindow','showPortraits','1:1','CheckSkillCommandShowSwitches','victory','gYdFS','updateTargetPosition','updateBattleProcess','cvguz','gaugeX','_uiContainer','_indent','isOnCurrentMap','JqhuD','mOoMA','Game_BattlerBase_initMembers','SZZsa','shift','clearElementChanges','makeHpDamageText','_immortal','ActSeq_Mechanics_RemoveState','CounterPlayback','pattern','HitFlat','CastPhysical','EbmCV','effects','uYRsV','canGuard','_effectDuration','basicGaugesY','onJumpEnd','VUEbK','findTargetSprite','turn','_attackAnimationId','kyJEI','Actions','calcWindowHeight','MDF','sfhGC','xlIOs','setImmortal','Sprite_Enemy_updateStateSprite','StyleOFF','ActSeq_Mechanics_BoostPointsStoreData','71018PfmbtO','command339','startOpacity','jZYIB','JMFRs','format','Game_Action_clear','dwpjW','ActSeq_Horror_TVRemove','VisuMZ_2_DragonbonesUnion','BMiFy','textBaseline','border','_itemWindow','OffsetAdjust','lineHeight','CheckVisibleBattleNotetags','FrOsx','floatBattler','IconStypeMagic','wgckn','shouldHideBattleEndPopups','applyGuard','checkTpbInputClose','isCTB','QIECv','ActSeq_Camera_Offset','addAttackCommand','updateEventMain','SCZyl','Text','TqjNn','Scene_Battle_update','Window_BattleLog_performMiss','_eventId','clScd','setBattlerFacePoint','OffsetY','isForAll','traitObjects','note','_effectType','BattleManager_onEncounter','bRRgl','ActSeq_Movement_FacePoint','setSTBExploited','PkJAC','oxayR','pushBaseLine','Peofs','cdfgG','makeTargetSelectionMoreVisible','friendsUnit','ActSeq_Element_NullElements','TZKXZ','nlKzh','FlinchDistanceY','ActSeq_Movement_MoveToPoint','FBXAy','ActSeq_BattleLog_Clear','isATB','missile','ISvUS','Sprite_Actor_moveToStartPosition','StatusWindowAttachmentFrontOffsetX','itemWindowRect','doHxx','isActor','WBPwb','ShowWeapon','RBkXm','ChangeOrderBy','Window_BattleLog_update','ActSeq_Movement_Scale','performFlinch','HelpFight','SmoothImage','hhviA','TQGNq','autoSelectLastSelected','Window_BattleLog_performSubstitute','isDamagePopupRequested','clearFreezeMotionForWeapons','ActionSkillMsg1','ogdnL','targetObjects','fFTct','lAxUr','createEmptyBitmap','ActSeq_Impact_ShockwaveCenterTargets','EVAL','needsSelection','canBattlerMove','Scene_Battle_logWindowRect','ActionCount','clearActiveWeaponSlot','processExtendTroopMembers','subject','Kjwzk','BoxMargin','ResetFocus','applyCritical','PreStartTurnJS','Targets2','ParseStateNotetags','isCharging','_autoBattle','createHelpWindow','iNNqq','performMoveToTargets','_growX','isDisplayEmergedEnemies','moveBattlerHomeToPoint','updateShadowBattleCore','drawTextEx','currentExt','selectLast','portrait','dWBsp','allowRandomSpeed','Settings','JS\x20%1END\x20ACTION','makeBattleCommand','ShowCounter','_lines','Victory','createJS','GByAW','zQvVC','battleEffect','atbInterrupt','show','ycylF','lyLNZ','Scene_Battle_onEnemyOk','1274496LOZmHH','endAction','Sprite_StateIcon_updateFrame','getBattlePortrait','cameraOffsetDuration','isFastForward','setBattleZoom','cancel','stateMotionIndex','createBattleField','HZicR','Window_BattleLog_popBaseLine','registerDefeatedEnemy','Game_Action_itemHit','Game_BattlerBase_canAttack','battleback2Name','attackAnimationId2','ConvertActionSequenceTarget','requestDragonbonesAnimation','kVeOE','AutoBattleBgType','height','MOTIONS','selectSymbol','ActSeq_Mechanics_SwapWeapon','uiBGg','die','132PfYgLP','Scene_Battle_createAllWindows','MessageWait','bxUHE','clearHorrorEffects','_waitCount','addedStateObjects','updateMotionCount','CmdIconFight','currentSymbol','Damage','motionSpeed','skillWindowRect','updateStateIconSprite','_jumpMaxHeight','Game_Battler_makeSpeed','ActSeq_Element_AddElements','shadow','clearFreezeMotion','repeatTargets','_actorWindow','iQcFS','BattleManager_onEscapeSuccess','AaKIV','PcObu','canEscape','Width','_escapeRatio','DigitGrouping','Scene_Party','isVisualHpGaugeDisplayed','Skill-%1-%2','onBattleStartBattleCore','Window_BattleLog_displayCritical','getBattlePortraitOffsetY','ShowPortraitsBorderStyle','chant','PostApply%1JS','_speed','animationShouldMirror','EscapeFailureJS','gainFullActionsPTB','_shake','CmdTextAutoBattle','PostStartBattleJS','JS\x20%1END\x20BATTLE','LIToR','ActSeq_Horror_NoiseRemove','STQQQ','setBattleCameraOffset','commandStyle','ActSeq_Movement_FaceTarget','applyImmortal','isUndecided','isFlipped','onBattleEndBattleCore','map','performCastAnimation','GXljf','skillTypes','commandStyleCheck','VarianceFormulaJS','CmdIconAutoBattle','VariableHeal','ParseArmorNotetags','updateHelp','process_VisuMZ_BattleCore_DamageStyles','PostStartActionJS','startPartyCommandSelection','attackStatesRate','Scene_Battle_selectPreviousCommand','ActSeq_Mechanics_DamagePopup','smooth','%1StartBattleJS','Window_BattleLog_clear','applyArmorModifiers','Sprite_Animation_targetSpritePosition','mpDamageFmt','attack','_flashDuration','2622546LRYagZ','setHelpWindow','ConvertParams','visibilityState','performDamage','isBreakStunned','SWwVA','hasStaticSvBattler','DamageRate','destroyDamageSprite','Window_BattleLog_pushBaseLine','cyejY','isEffecting','STYPES','createContents','bqgAl','partyCommandWindowRectBorderStyle','aeOkU','mainSpriteWidth','ESCAPE','VisuMZ_2_BattleSystemCTB','_armorPenetration','gzIqC','changeAtbChargeTime','DKcvC','PartyCmd','ActSeq_Mechanics_PtbAlterCost','Game_Action_setGuard','Sprite_Actor_updateShadow','Duration','isNextSceneBattleTransitionable','blockWidth','stop','actorCommandAutoBattle','_subject','ActSeq_Camera_FocusTarget','onEncounter','_battleLayoutStyle','CmdStyle','isSideButtonLayout','_skewX','RLYTE','TextColor','_motionType','rbuwz','ShowReflect','delay','HP_Flat','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','bmJun','canUseItemCommand','Game_Battler_regenerateAll','setHorrorEffectSettings','_battlerName','%1RegenerateJS','PreEndActionJS','isCertainHit','duration','WaitCount1','WaitForEffect','ZvJaV','Sprite_Battler_updateMain','update','Window_BattleLog_performRecovery','Interrupt','waitForMovement','displayFailure','getSkillIdWithName','_lastEnemy','_targetFloatHeight','updateAction','_preBattleCommonEvent','MeleeDistance','nextActiveWeaponSlot','createBattleFieldBattleCore','wqNyR','updateGrow','floor','VyksA','clearWeaponAnimation','battler','revealNewWeaknesses','visible','preparePartyRefresh','updatePosition','jumpBattler','meUyR','thrust','updateBossCollapse','yYWWM','spKeP','Mechanics','ParseItemNotetags','DamageStyles','AlphaFilter','VisuMZ_2_BattleSystemATB','gpExD','isPreviousScene','FocusY','troop','hasBeenDefeatedBefore','isSceneChanging','arPenFlat','isAnimationPlaying','removeBuffsAuto','PostApplyAsTargetJS','bXnUV','updateScale','isEnemy','TsjzF','StartTurnShow','CpVMZ','CriticalHitFlat','vcWru','occasion','_enemyIDs','QyPeW','removedStateObjects','ActSeq_Impact_ZoomBlurPoint','_skewEasing','isAutoBattleCommandEnabled','fontSize','callOptions','reduce','evalDamageFormulaBattleCore','NextTurn','ActSeq_Motion_WaitMotionFrame','#ffffff','_stypeIDs','actorCommandEscape','Sprite_Actor_createStateSprite','iojsw','FFsOz','zhAOB','_opacityEasing','PerformAction','deadMembers','ActSeq_Mechanics_CustomDmgFormula','fDpQC','log','finishActionSet','Game_Action_itemEffectAddNormalState','xRcon','worldTransform','ShuffleArray','EPibG','StatusWindowAttachmentFront','_visualHpGauge_JustDied','QvMpK','cvvxc','PostEndBattleJS','default','ngxFu','createPartyCommandWindowBattleCore','updateEffectsContainer','ShowCritical','callUpdateHelp','ShowHpDmg','SvMotionIdleSolo-%1-%2','snapForBackground','UlZKv','addNewState','sarzr','ActSeq_Impact_MotionTrailCreate','KtAxc','ffxwu','setValue','HHzNb','StartTurnWait','Targets1','setupShockwaveImpactFilter','Eimdt','Scene_Battle_start','isBattleRefreshRequested','alterType','usePremadeActionSequence','Sprite_Enemy_initVisibility','playReflection','WaitForCamera','Scene_Battle_updateBattleProcess','actionBattleCoreJS','updateHomeMove','OoHLU','mpDamage','isForRandomBattleCore','faceWidth','PreApplyAsTargetJS','bUXvh','CriticalColor','mVhrW','Game_Battler_performMiss','_homeY','MwBTV','DFDLF','ZozvH','addChildToBack','TextAlign','updateWeather','PopupDuration','stepForward','makeDamageValue','pNAND','frZZC','Intensity','stepBack','ZTCzh','WaitForJump','jGJEf','Window_BattleLog_refresh','jsScaleUp','wtypeId','alive\x20friends','Window_BattleLog_popupDamage','bind','randomTargets','setupMotionBlurImpactFilter','xyCUJ','performActionMotions','dybAO','BAMaF','singleSkill','changeAtbCastTime','requestMotionRefresh','CriticalDuration','EndAC','_additionalSprites','isActionSelectionValid','shouldPopupDamage','_pattern','_actionInputIndex','_growWholeDuration','_skewWholeDuration','CopyCombatLog','lastFilename','STsgN','anchorY','PJhfK','noise','_offsetX','bgType','pXbHn','damageContainer','isHidden','string','_forcing','HpGaugeOffsetY','svBattlerShadowVisible','fhTVM','icon','ARRAYJSON','startActorSelection','ActionItemMsg','battleUIOffsetX','vertCells','isSceneBattle','CmdTextAlign','lSKqA','Game_Actor_setup','iNeHk','_deathStateApplied','Spriteset_Battle_createBattleField','vQUAW','children','createTargetsJS','putActiveBattlerOnTop','CurrentTurn','collapseType','Window_Options_statusText','stypeId','checkShowHideSkillNotetags','wbyTp','isCommandEnabled','PreRegenerateJS','stateRate','measureTextWidth','uiInputPosition','WhwYQ','WaitForProjectile','selectNextCommandTpb','AttackAnimation','CWfVA','targetActionSet','_battlerContainer','QRqYV','xSFQA','ParseClassNotetags','escape','Scene_Battle_partyCommandWindowRect','stepFlinch','skillItemWindowRectBorderStyle','CheckMapBattleEventValid','itemEffectAddAttackState','_mainSprite','Game_Troop_expTotal','bitmapHeight','CommandVisible','index','ksKby','createEnemyNames','setupCriticalEffect','SKVPG','isBattlerFlipped','BmXyZ','getSkillTypes','_targetAngle','battleDisplayText','drawItem','cCVeL','ePULQ','WaitForScale','KbfEl','klPVR','lzxee','ogJtc','CastAnimation','getLastPluginCommandInterpreter','%1Damage%2JS','launchBattle','UwjIp','surprise','command357','placeStateIcon','numRepeats','bIBoA','partyCommandWindowRect','Scene_ItemBase_applyItem','PopupOffsetX','cwqYX','setActorHome','glitch','Game_Map_setupBattleback','formula','processActorCommandCancelTPB','jfpWs','setBattler','displayCounter','setBattleCameraPoint','create','debuffAdd','playOnceParallelInterpreter','onAngleEnd','rUmtq','logWindowRect','_homeX','autoBattleStyle','arRedRate','isIncludedInEnemyWindow','hJmVJ','SPSzo','moveBattlerHomeDistance','isCustomActionSequence','displayBuffs','_phase','fnordAddedStates','onActorCancel','statusWindowRectDefaultStyle','makeUniqueNames','BattleManager_isTpbMainPhase','WxPXa','battleLayoutStyle','canAlterActionCostPTB','LFzRh','_multipliers','LYpcW','_floatHeight','IvRxI','XPActorCommandLines','NameFontSize','adjustPosition_ScaleUp','HkjFP','_executedValue','StatusWindowSkinFilename','isCustomBattleScope','startTurn','drawTextTopAligned','setupIconTextPopup','WvPbk','zkWOl','applyData','Ehqji','startDamagePopup','_currentAngle','softDamageCap','blt','isNextScene','_jumpDuration','AnimationID','PxPtt','YieZL','isForOpponentBattleCore','EscapeSuccessJS','MANUAL','getBattlePortraitOffsetX','ActSeq_Motion_RefreshMotion','createChildSprite','battlerShadowScaleX','setupTextPopup','NJmiH','ActSeq_Impact_MotionBlurScreen','FocusX','command3011','battleUIOffsetY','_padding','isActiveTpb','checkBattleEnd','applyItem','_baseX','%1StartTurnJS','drawItemImagePortraitStyle','windowPadding','mainSpriteHeight','_flipScaleX','setBattlePortrait','animationId','DefaultDamageStyle','BattleManager_initMembers','skew','loop','gradientFillRect','_targetIndex','_actionBattlers','repeats','displayMpDamage','HomePosJS','ActSeq_Angle_WaitForAngle','rGPND','selectPreviousCommand','Strength','extraHeight','isAlive','setLastPluginCommandInterpreter','eQxCD','CommonEventID','ShowPortraits','partyCommandWindowRectXPStyle','Sprite_Battler_isMoving','onEnemyCancel','changeWeather','PpfUC','PostDamageJS','bmEzy','battleStatusSprite','rjugq','_updateFilterArea','STB','isPhysical','_effectsContainer','StatusWindowAttachmentBack','performMiss','getStypeIdWithName','createCommandVisibleJS','CmdIconItem','Gkxwz','440778JBYQeP','azGRI','ActionCenteredName','param','_borderPortraitTargetX','showHelpWindow','_frontAttachmentSprite','AntiTintUiElements','battleProjectiles','_svBattlerData','KxjEf','BoostPoints','process_VisuMZ_BattleCore_CommonEventKeys','isSelected','_angleDuration','MpGaugeOffsetY','_distortionSprite','process_VisuMZ_BattleCore_PreBattleCommonEvent','BattleManager_checkSubstitute','svBattlerAnchorX','FfxOF','_skewY','isAtbChargingState','pkLmQ','Enemy-%1-%2','XPSpriteYLocation','PXnNS','battleAnimation','isForFriendBattleCore','UsIgV','NameAlwaysSelectOnly','_appeared','mkKyz','mainSpriteScaleY','addCombatLogCommand','jsScaleDown','FWgNZ','laNdQ','ActSeq_Set_WholeActionSet','createActionSequenceProjectile','okTargetSelectionVisibility','ActSeq_Mechanics_StbRemoveExcessActions','_animation','VZqTI','battleSpriteSkew','getNextDamagePopup','redraw','resetBreakShield','WaitForFloat','textSizeEx','guard','statusWindowRectBorderStyle','_enemyID','GcTJi','damage','UIqjn','skill','faceRect','_target','_action','krrcE','_linkedSprite','Window_BattleLog_performCounter','createBorderStylePortraitSprite','requestRefresh','iconHeight','tlXdg','command236','cameraDuration','BattleStartEvent','MGUGa','vKhZF','VisuMZ_1_SkillsStatesCore','Post','ActSeq_Movement_WaitForJump','commandName','Scene_Battle_createActorCommandWindow','Class-%1-%2','stbGainInstant','magicSkills','battlerShadowScaleY','itemHit','isItem','actorCommandSingleSkill','Game_Map_battleback2Name','loadEnemy','LyFXz','VEhgR','Game_System_initialize','not\x20focus','makeTargetsBattleCore','updateCancel','Skills','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','zndCU','isTickBased','destroy','updateVisibility','drawLineText','wuPhi','bitmapWidth','moveToStartPositionBattleCore','_opacityDuration','ActSeq_Mechanics_StbExploit','MIN_SAFE_INTEGER','Game_Action_executeDamage','version','forceMotion','match','processBattleCoreJS','Frame','prepareBorderActor','toUpperCase','QLkXU','_customDamageFormula','isQueueOptionsMenu','autoBattleUseSkills','round','initElementStatusCore','EJlUN','setupBattleCore','onOpacityEnd','_hpGaugeSprite','klRVY','_stateSprite','maxCols','HpGauge','ConfigManager_makeData','performActionEnd','BattleManager_checkBattleEnd','ActSeq_Mechanics_OtbOrder','displayStartMessages','processRefresh','ShowMpDmg','playEnemyDamage','rJIuG','processPostBattleCommonEvents','updateOpacity','PEKdk','getDefeatedEnemies','unchanged','+%1','ActSeq_Movement_Opacity','isTurnBased','bIDJs','createBattleUIOffsetY','MAT','getEnemyIdWithName','BGxKE','splice','JPSLU','NameOffsetX','ActSeq_Mechanics_PtbConvert','PCLwj','abs','CastMagical','right','kMYQt','autoMeleeSingleTargetActionSet','_requestRefresh','TargetLocation','AdjustRect','jlPQv','processVictory','commandAutoBattle','isPartyTpbInputtable','hFnfK','waQFK','setupBlueRedInvertImpactFilter','RJiBV','battleCoreResumeLaunchBattle','onMoveEnd','_active','evalDamageFormula','nqqoA','rmauE','allowCollapse','XXYHB','ZUuzr','_checkOn','setBattleCameraTargets','ActSeq_Mechanics_AnalyzeWeakness','commandFight','nCGzr','_shadowSprite','displayTpDamage','YAOpQ','WaitForSpin','getHalfActionsPTB','lLCVR','_forcedBattlers','PortraitScale','Shadow','initBattlePortrait','RjVlo','displayBattleCoreTransitionErrorMsg','_text','isPartyCommandWindowDisabled','Weapon-%1-%2','ActSeq_Zoom_Scale','lAkMr','some','isAlwaysHidden','UNTITLED','PreEndBattleJS','Scene_Battle_commandFight','BattleSystemCTB','updateInterpreter','drawActorFace','VariableID','BattleManager_startTurn','battleSpin','_list','optDisplayTp','addWeaponSwapCommand','_back2Sprite','freezeFrame','_angleWholeDuration','performReflection','getHardDamageCap','OverallFormulaJS','oJAaS','isTpbCharged','FfsuM','currentAction','sortEnemies','Game_Map_encounterList','XoIOS','startActorCommandSelection','createActorCommandWindowBattleCore','Window_BattleLog_performReflection','attackAnimationId1','TMVpY','WoZzf','uDDud','drawItemStatus','wsgAs','PrioritySortActive','filters','Window_BattleLog_performCollapse','jwFpb','zBGVY','startAction','swapEnemyIDs','maxCommands','TP_Flat','ActSeq_BattleLog_PushBaseLine','BattleLog','MAXMP','applyFreezeMotionFrames','eWrUX','getCommonEventIdWithName','PRE-','%1Apply%2JS','XnIUI','GOQJK','VHDSY','walk','setupBattleback','ALL\x20SKILLS','_freezeMotionData','setupBattleCoreData','Game_Battler_performEvasion','addFightCommand','_createDamageContainer','clearActiveWeaponSet','QoL','adjustWeaponSpriteOffset','zoomDuration','displayCurrentState','isDTB','ySyXw','refreshRequest','_inputting','helpWindowRect','setVisibleUI','sideview_ui','updateSpin','ltCTH','MlouN','updateCallMenu','_floatEasing','battleCoreTpbMainPhase','updateFloat','riTTN','font','wbjUY','updateWaitMode','WkkuJ','eEkYp','WaitForAngle','hmvmC','Scene_Battle_startPartyCommandSelection','XPActorDefaultHeight','battleCommandIcon','Spriteset_Battle_createLowerLayer','context','updateRefresh','DXyuO','_motionCount','chantStyle','includes','chxKr','SwitchMissEvade','_damages','jlGjF','updatePadding','onEscapeFailure','drawItemImageXPStyle','KCStE','KiXUr','SkipPartyCmd','GroupDigits','\x5cI[%1]%2','JumpToLabel','FaceAway','startSkew','CmdIconEscape','alterChange','BattleManager_onEscapeFailure','FlashDuration','tiJYB','wpxTa','PostRegenerateJS','getItemDamageAmountTextBattleCore','yalAP','Scene_Battle_itemWindowRect','ftjeu','ActSeq_ChangeAngle','refreshStatusWindow','process_VisuMZ_BattleCore_Action_Notetags','VisuMZ_2_BattleSystemFTB','commandOptions','dimColor1','UOYCE','doesPageHaveOnceParallelStart','ActSeq_BattleLog_WaitForNewLine','ActSeq_Weapon_ClearActiveWeapon','removeStatesAuto','animation','isOkEnabled','commandRemember','_battleCoreNoElement','battleCameraData','VisuMZ_2_WeaponSwapSystem','currentValue','HMBxa','setupZoomBlurImpactFilter','CommandAddOptions','damageFlat','ShowFacesListStyle','ErkLJ','SvBattlerMass-%1-%2','tpbCommandFight','drawItemStyleIcon','battleOpacity','_enemyNameContainer','uCLGk','YYJyj','makeSpeed','value','nMoxJ','Sprite_AnimationMV_updatePosition','DZsWt','addMeleeReturnActionSet','gainMp','PrioritySortActors','motionIdle','iconIndex','updateOnceParallelInterpreters','Rate','traitSet','Sprite_Actor_update','hpDamageFmt','ActSeq_Movement_Jump','Game_Temp_requestAnimation','nNonK','Scene_Battle_createPartyCommandWindow','StateIconOffsetY','pKZYk','autoBattle','updatePositionBattleCore','ActSeq_Animation_AttackAnimation','updateBattlebackBitmap2','ZlYXJ','ActSeq_DB_DragonbonesTimeScale','ActSeq_Mechanics_EtbAction','startWeaponAnimation','getDualWieldTimes','battleInjectPrep','performTpbActiveCheckSwitch','ActSeq_Inject_WaitForInjectAni','setActionState','action','AllowRandomSpeed','iconWidth','Game_BattlerBase_canGuard','ActSeq_Movement_Skew','FWNhc','fnnJD','xLfvh','Window_BattleLog_displayMiss','UUyot','updateStyleOpacity','evade','Sprite_Enemy_update','drawSkillCost','ActSeq_Movement_HomeMoveBy','vRoDJ','Scene_Battle_createHelpWindow','updateShadow','hauSl','encounterList','getAttackMotion','onAllActionsEnd','_floatWholeDuration','_battleField','turnCount','checkTpbInputOpen','showNormalAnimation','BattleDefeatJS','origin','gainHp','kzlJM','Direction','removeDamageSprite','addChildToUiContainer','isAnyoneJumping','symbol','itemCri','jsScaleToFit','Window_BattleStatus_drawItemImage','hitRate','_statusWindow','ActSeq_Movement_MoveToTarget','updateAttachedSprites','helpAreaBottom','_cursorSprite','DKbAX','_stateIconSprite','Game_Action_applyGlobal','isPlaytest','byhjA','push','popupDamage','EmergeText','PreDamageAsTargetJS','EFFECT_COMMON_EVENT','canAttack','tuoTv','bODlh','removeImmortal','createAllWindows','pop','createWeather','zBVvU','TdcKF','messageSpeed','battleMembers','addChild','activate','isBattleSys','alive\x20enemies','ActSeq_Impact_ColorBreak','isConfused','GUARD','updateStart','setFrame','battleCommands','helpWindowRectBorderStyle','lineRect','criticalHitFlat','softDamageCapRate','ActSeq_Target_CurrentIndex','requestMotion','ActSeq_Impact_Negative','ConfigManager_applyData','validTargets','checkShowHideSwitchNotetags','duaqg','ActSeq_Movement_FaceDirection','opponentsUnit','SOsGw','flashColor','ActSeq_Mechanics_TextPopup','animationBaseDelay','isMagicSkill','commandNameWindowCenter','isSideView','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','zfIXZ','updateCommandNameWindow','ActSeq_Inject_AnimationPauseResume','displayRemovedStates','_battleCoreAddedElements','visualHpGauge','aTQTu','recoverAll','Sprite_Battler_setBattler','iAHno','isDeathStateAffected','Actor-%1-%2','isMoving','isDead','Sprite_Battleback_adjustPosition','SkNqU','Window_Options_addGeneralOptions','SjPay','filter','createStateSprite','JS\x20%1END\x20TURN','LUK','drawBackgroundRect','Scene_Boot_onDatabaseLoaded','clone','playOnceParallelTroopPage','createDamageSprite','ZAdpT','ParseSkillNotetags','parent','Window_BattleLog_displayFailure','type','HFptb','startMotion','StyleON','createUIContainer','_performActionEnd','attackAnimationIdSlot','WAkFa','WtypeId','TTFcx','gainStoredBoostPoints','WtFvl','PMuoO','ntDht','eWKiL','Game_Enemy_setup','makeActionList','battlerSmoothImage','SkillItemStandardCols','Enable','innerHeight','attackStates','createBattleFieldContainer','finalizeScale','statusTextAutoBattleStyle','MLIPD','ActSeq_Movement_WaitForOpacity','JqQOw','nGenr','attachSpritesToDistortionSprite','createAnimationSprite','JS\x20ESCAPE\x20SUCCESS','Game_Action_makeTargets','addEscapeCommand','_svBattlerSprite','callOkHandler','14lyzWJy','skillId','displayType','waitForNewLine','_defeatedEnemies','SxVFp','ShowFailure','CriticalHitMultiplier','_cursorArea','HelpAutoBattle','base','updateAttachmentSprites','yPlUE','left','VisuMZ_0_CoreEngine','StatusWindowSkinHide','constructor','message2','_weaponImageId','PreDamageAsUserJS','displayChangedBuffs','ActionEndUpdate','_forceAction','gainCurrentActionsFTB','GZfEZ','QAshf','_endBattle','ArPenRate','showAnimation','ActSeq_BattleLog_WaitForBattleLog','getNextSubjectFromPool','isMeleeMultiTargetAction','ITEM','lhjKd','SvBattlerSolo-%1-%2','battleStatusWindowAnimationContainer','drawItemImageListStyle','glATm','addLoadListener','isOTB','xdhjH','process_VisuMZ_BattleCore_Failsafes','Parse_Notetags_Targets','call','AmZpJ','_targetOpacity','battlerSprites','kuueK','clearMotion','createActorCommandWindow','jMMBF','ActSeq_Mechanics_DeathBreak','applyDamageCaps','aCnNp','qOrjK','TvFZL','BgxyM','kkAKy','STR','AzSRD','Game_Action_isForOpponent','frontview_ui','Sprite_Actor_updateFrame','ActSeq_BattleLog_DisplayAction','move','setCommonEvent','PostStartTurnJS','DamageType%1','battleJump','setBackgroundType','frameCount','ahYrb','Height','BattleManager_endAction','addCustomCommands','buffRemove','Formula','invokeMagicReflection','MaxLines','terminate','prototype','trueRandomTarget','battleMove','isGuard','Scene_Battle_onActorOk','pages','checkShowHideBattleNotetags','SkillItemBorderCols','battleCorePreBattleCommonEvent','FewZG','prepareCustomActionSequence','alterBreakShield','hwROW','_endingBattle','XlKLL','apHIr','ActSeq_Mechanics_EnemyEscape','isSTB','CTB','_opacityWholeDuration','sNsKm','Window_SkillList_maxCols','_battleCoreBattleResumeAfter','isSpinning','Sprite_Enemy_updateCollapse','createSeparateDamagePopups','Game_Battler_clearDamagePopup','isBattleTest','CalcEscapeRatioJS','growBattler','actions','setupRgbSplitImpactFilter','ActSeq_Target_RandTarget','_index','makeActionOrders','MP_Flat','processBorderActor','FtZLj','gjtJO','enemy','WaitCount','Opacity','SkewY','Game_BattlerBase_eraseState','setActiveWeaponSet','mZJnG','executeDamage','isJumping','ARRAYEVAL','addChildAt','_lastPluginCommandInterpreter','ActionEnd','uswqS','MGzQd','canUse','_baseLineStack','_forcedBattleLayout','ShowHide','isAttack','Scene_Battle_onEnemyCancel','_isBattlerFlipped','_battlePortrait','_displayBattleCoreTransitionErrorMsg','dead\x20enemies','svShadow','pause','IfHtR','isTeamBased','ElLUL','ActSeq_Movement_HomeMoveToPoint','_baseY','qbLbm','displayChangedStates','-%1\x20MP','ATK','GpHaB','statusWindowRectXPStyle','tAVWw','updateStateSprite','_createClientArea','VisuMZ_3_ActSeqCamera','waitForJump','Debuffs','isGrowing','ResetOffset','QOQEq','Variable','anchorX','dtmEe','getWtypeIdWithName','Scene_Battle_initialize','ActSeq_Mechanics_HpMpTp','sTDbs','iuMPH','arRedFlat','Game_Battler_performDamage','ActSeq_Mechanics_BreakShieldChange','Game_Map_battleback1Name','alive\x20actors','compareBattlerSprites','_baseTexture','close','_floatDuration','HelpEscape','eatqQ','unshift','Game_BattlerBase_die','Window_BattleEnemy_initialize','_battlerHue','ActSeq_Movement_WaitForSpin','refreshCursor','hfghr','Game_Actor_equips','isBattleCoreTargetScope','sAjAI','FwAGm','guardSkillId','displayItemMessage','clearBattleRefreshRequest','5FZhhfk','WaitCount2','ihRhj','isTpb','Bbvze','Window_BattleEnemy_show','MnKot','dimColor2','setBattlerFlip','performAction','autoBattleStart','updateBitmap','Window_BattleLog_performActionStart','PreEndTurnJS','drawText','_regionBattleback2','dead\x20opponents','pikSN','criticalHitRate','PopupOffsetY','RkATX','_shadowScaleY','performCounter','CalcActionSpeedJS','adjustPosition_ScaleDown','RZdiP','RlqUa','kIsLn','weaponTypes','_activeWeaponSlot','UySGp','setHalfActionsPTB','hkAIh','updateFrame','randomInt','getAttackWeaponAnimationId','ActSeq_Animation_ChangeBattlePortrait','ActionSequence','createShadowSprite','scope','rzphd','ChargeRate','startJump','_updateCursorArea','isAutoBattle','_tempActor','list','AutoMeleeSolo','Window_ItemList_maxCols','VisuMZ_3_SideviewBattleUI','ActSeqImpact','removeHorrorEffect','ExoVD','updateBattlerContainer','tpbActorSwitchConditionsMet','createAutoBattleWindow','HJhwV','Sprite_Battler_updatePosition','skills','actorCommandCancelTPB','nvnQC','replace','horzCells','Game_Interpreter_command301','NameLegacy','AnchorY','expRate','\x20to\x20%1\x20midbattle.','displayReflection','frameVisible','SvWeaponSolo-%1-%2','textColor','ElementStatusCore','autoBattleAtStart','_commonEventQueue','BTestBypass','endBattle','isAnyoneInjectAniPrepping','isBattleFlipped','startSpin','ActSeq_Motion_PerformAction','extraPositionY','freezeMotion','commandNameWindowDrawBackground','_enemies','PreApply%1JS','alive\x20battlers\x20not\x20user','opacity','setAttack','SceneManager_push','MotionType','VisuMZ_3_ActSeqImpact','addImmortal','center','SweLk','Sprite_Battler_startMove','noSimilarSTypes','Game_Action_isForFriend','forceAction','displayAffectedStatus','resize','_scene','makeTargets','wait','ActSeq_Mechanics_Multipliers','DzmfH','Item-%1-%2','setHandler','COMBAT\x20LOG','BattleLogRectJS','placeGauge','Sprite_Battler_damageOffsetY','eraseState','DisplayAction','updateLink','battleFloat','iconText','isGuardWaiting','ApplyImmortal','Scene_Options','sJPrv','dead','_duration','removeChild','itemEffectAddNormalState','xjrnJ','updateMain','useDigitGrouping','DaFNb','command119','Linear','#%1','_angleEasing','addSingleSkillCommands','user','qduSW','_skillIDs','ORJMD','AttachStateOffsetY','itemLineRect','azris','nUIro','getFullActionsPTB','process_VisuMZ_BattleCore_Notetags','vJUDW','ActSeq_Mechanics_FtbAction','kcOkL','Actor','setSvBattlerSprite','YGSaa','PreStartBattleJS','rdMMr','ceINc','centerFrontViewSprite','min','HUtvy','obCnE','hokRW','ShowAddedBuff','canAttackBattleCore','clearBattlerMotionTrailData','addAutoBattleCommand','_flashColor','currentClass','CriticalDmgRate','ZiPIf','AutoBattleOK','hfjDP','ActSeq_Movement_MoveBy','DamageDisplay','PostDamage%1JS','fbGHh','hSjzX','counterAttack','blOMZ','updateShadowScale','%1EndBattleJS','setHelpWindowItem','battleCommandName','zWxSL','setActiveWeaponSlot','extraPositionScaledY','battleback1Name','needsSelectionBattleCore','Game_Troop_setup','Radius','dataId','pyqYG','casting','forceSelect','applyAngleChange','BreakShields','regionId','NewPopupBottom','Game_Action_numRepeats','_wtypeIDs','start','lUxan','toUseBoostPoints','Sprite_Battler_update','CommandWidth','trim','applyBattleCoreJS','ActSeq_Motion_FreezeMotionFrame','inHomePosition','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','DistanceY','hpAffected','VisuMZ_2_BattleSystemSTB','applySoftDamageCap','isBorderStylePortraitShown','lFVoT','zWnAq','Sprite_Actor_initMembers','ActSeq_Impact_BlueRedInvert','isSkill','cancelButtonText','KdQuU','hue','ZMoSu','processEscape','isSkipPartyCommandWindow','_namesCount','vqqpg','Scene_Battle_selectNextCommand','NjMyj','_enemyId','_injectAnimationSprite','EdiyT','SkewX','NameOffsetY','wWAWb','_battleCoreBattleStartEvent','AutoBattle','VjkSC','_allTargets','OQgCv','kkgIx','_cacheTextWidth','ECBiQ','name','setCustomDamageFormula','isItemCommandEnabled','spell','Window_BattleLog_performEvasion','setWaitMode','setupFont','drawItemStatusXPStyle','UYipp','changeCtbChargeTime','AS\x20USER','_targetSkewY','pow','_targetGrowX','inBattle','filterArea','processRandomizedData','updateSkew','AutoBattleMsg','createKeyJS','<CENTER>%1','GlXin','eokGj','ActSeq_Projectile_Animation','ActSeq_Impact_MotionBlurTarget','setBattleImpactTimeScale','itemRect','VariableDmg','startHomeMove','sortDamageSprites','performSubstitute','_totalValue','Window_BattleLog_displayEvasion','mvBAU','ActSeq_Set_TargetActionSet','PxihU','aEXdp','JS\x20BATTLE\x20VICTORY','isEscapeCommandEnabled','missed','active','fcieK','ACZhB','_tpbState','drawItemBackground','zWEAP','_homeDuration','BsIBO','isHiddenSkill','alive\x20battlers\x20not\x20target','globalAlpha','Scene_Battle_skillWindowRect','pointX','DistanceX','MotionFrameWait','updateCustomActionSequence','parameters','sliceMin','isForFriend','performMagicEvasion','weatherPower','cancelTargetSelectionVisibility','createMiss','setBattleAngle','GqwNm','Window_BattleLog_displayActionResults','JS\x20%1START\x20TURN','byoxX','WaitForMovement','ActSeq_Movement_WaitForFloat','Game_Action_isForRandom','bitmap','neJXr','command301','Filename','umZUS','WaitForZoom','select','onHomeMoveEnd','isAnyoneGrowing','VisuMZ_3_ActSeqProjectiles','_growY','Yvkyt','missle','QFAVo','Game_Interpreter_PluginCommand','whyia','regenerateAll','IoGBX','AeXyp','SaDYo','clearBattleCoreData','updateJump','uiMenuStyle','addBuff','battlelog','removeAnimationFromContainer','updateCollapse','AutoNotetag','MUSxR','okButtonText','clearDamagePopup','DvAtf','setupDesaturateImpactFilter','ActSeq_Animation_ShowAnimation','_item','getChildIndex','zIVYA','animationWait','text\x20target','_battler','VisuMZ_3_FrontviewBattleUI','skillItemWindowRectMiddle','JS\x20%1DAMAGE\x20%2','createEffectActionSet','Unidi','setLetter','Sprite_Weapon_loadBitmap','join','EscapeFail','_callSceneOptions','cEqhQ','angle','DzTXS','lastBattleSkill','toString','addPartyCommand','FaceDirection','addSingleSkillCommand','Spriteset_Battle_update','_shadowScaleX','autoBattleWindowRect','updatePhase','LlHeF','ActSeq_Element_Clear','wpQpX','AnchorX','lRzOA','Lrpzh','performWeaponAnimation','partyCommandWindowRectDefaultStyle','Angle','_currentActor','xevQS','damageRate','SlotID','EasingType','jump','waitForAnimation','BattleCore','_animationSprites','autoSelectPriority','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','hasSvBattler','createDistortionSprite','alive\x20enemies\x20not\x20user','isOptionsCommandAdded','gaugeLineHeight','_damageContainer','Elements','HqVEw','Ydgxv','lastCommandSymbol','zNenc','COMBATLOG','zBvxn','inputtingAction','loadSystem','gainBravePoints','all\x20targets','item','jvFOF','JcwSl','nUsUV','ActSeq_Inject_AnimationEnd','KCXWH','_dimmerSprite','emerge','updateFlip','isBattlerGrounded','Window_ActorCommand_setup','esVnX','DisablePartyCmd','TeHoO','jsOneForOne','adjustFlippedBattlefield','dpaJQ','initBattleCore','makeData','EdCiL','isCancelled','addExtendedTroopMembers','ActSeq_Mechanics_StbExtraAction','setGuard','isSkillItemWindowsMiddle','XhiTd','arPenRate','displayActionResults','xAJtC','<CUSTOM\x20ACTION\x20SEQUENCE>','dfnVo','value1','ForceDeath','expTotal','ActSeq_Camera_Reset','VqGZv','mpsjE','_autoBattleWindow','Avsia','undecided','CriticalHitRateJS','iNfIn','GynJi','GKbfO','Name','vHzRZ','ParseEnemyNotetags','SKLtK','Wave','updateBattlebackBitmap1','Game_BattlerBase_refresh','gNGEm','wFMZM','BattleManager_selectNextCommand','ActSeq_Horror_GlitchRemove','getColor','addActor','alive\x20friends\x20not\x20target','frontviewSpriteY','process_VisuMZ_BattleCore_TraitObject_Notetags','angleDuration','createHpGaugeSprite','Sprite_Battler_damageOffsetX','JSON','autoMeleeMultiTargetActionSet','actor','PzwNd','alive\x20enemies\x20not\x20target','ActSeq_Mechanics_PtbFullHalfAction','XijTg','BattleManager_startInput','_skillWindow','setHue','IqMXe','NXfnN','kCmZK','setupBattlebackBattleCore','displayHpDamage','isSkewing','Window_ActorCommand_initialize','options','buffAdd','makeActions','regenerateAllBattleCore','initMembers','addShowHpGaugeCommand','isOpen','STzed','addAnimationSpriteToContainer','isDying','float','JS\x20%1START\x20ACTION','oFQDR','_commonEventKey','customDamageFormula','onRegeneratePlayStateAnimation','bpRVU','CELCQ','ActSeq_Zoom_Reset','isBypassDamageCap','Window_BattleLog_performDamage','FlinchDistanceX','command301_PreBattleEvent','pDyEy','_lastAction','rSZVE','addSkillTypeCommand','ecvLX','Game_Battler_startTpbTurn','TPB','battleGrow','Game_Battler_forceAction','parse','NbuzL','AUTO\x20BATTLE','_waitMode','addBattleCoreAutoBattleStartupCommand','WnorE','CreateActionSequenceTargets','refresh','_createEffectsContainer','fnordRemovedStates','BindCommonEventKeysForGroup','_dragonbonesSpriteContainer','equipSlots','wKeIM','rowSpacing','5TTFPuY','VisuMZ_2_BattleSystemBTB','Scene_Battle_startActorSelection','kfSip','ActSeq_Impact_ShockwaveEachTargets','createDamageContainer','SxNuz','Scene_Battle_onActorCancel','ext','remove','svAnchorX','hTYJL','TprpZ','Override','setupOversaturateImpactFilter','findSymbolExt','svAnchorY','rMIsG','_weather','isAlwaysVisible','Sprite_Actor_setBattler','Window_BattleLog_performAction','contentsOpacity','Slot','adjustPosition_ScaleToFit','PopupShiftX','performRecovery','ActSeq_Impact_ZoomBlurTargetCenter','PopupShiftY','AddOption','changePaintOpacity','setupActionSet','NUM','JS\x20ESCAPE\x20FAILURE','getDamageStyle','scale','Sprite_Battler_initMembers','extendTroopMembers','ActionAnimation','Scene_Battle_helpWindowRect','canGuardBattleCore','isMeleeSingleTargetAction','battleAngle','rCTMw','isAffectedByBreakShield','needsActorInputCancel','padding','SkillsStatesCore','anchor','spriteId','CylxV','drawItemStyleIconText','isDebuffAffected','head','mainFontSize','MVsKB','StyleName','_createCursorArea','commandSymbol','toLowerCase','createString','YYBTA','DTB','alive\x20actors\x20not\x20user','battleInjectAni','performJump','kEUxJ','qmUPR','ActSeq_BattleLog_Refresh','Exploiter','repositionCancelButtonBorderStyle','ScaleX','Oprtt','makeSuccess','refreshMotion','Sprite_Enemy_setHue','LLiLY','SvMotionIdleMass-%1-%2','ExToR','isAnyProjectilePresent','startEnemySelection','isAnyoneMoving','_damagePopupArray','EuKpr','updateUiContainerPosition','WaitForNewLine','udhQV','itemTextAlign','ActSeq_Horror_NoiseCreate','requestAnimation','getNextSubject','addItemCommand','Spriteset_Battle_updateActors','_forcedHomeX','weapons','_actions','text','_lineHeight','Game_Action_itemEffectAddAttackState','sTEGI','alive\x20opponents','ActSeq_Mechanics_CtbOrder','_borderPortraitSprite','split','refreshBattlerMotions','_actor','_motion','random','addGuardCommand','setHome','getConfigValue','AGI','UXqvL','endAnimation','attackMotions','performAttack','_animationContainer','addCommand','makeActionListAutoAttack','ArRedRate','removedBuffs','Scene_Map_updateCallMenu','applyGlobalCommonEventNotetags','isShownOnBattlePortrait','ANTI_TINT_UI','Ecthx','drawItemImage','popBaseLine','BattleManager_startBattle','_forcedHomeY','qBvJC','canMove','DTykk','Game_Action_needsSelection','onDatabaseLoaded','alive\x20opponents\x20not\x20target','XuUlD','PostEndTurnJS','displayAction','front\x20base','ARRAYNUM','oShvK','Window_BattleLog_displayMpDamage','actorId','vaXKL','lukEffectRate','priority','removeActor','BTB','evaded','mainSprite','PFvAv','deathStateId','startBattle','startMove','jBMuK','WaitForSkew','_tempEquipCheck','waitCount','rrjii','selectNextActor','NameAlwaysHidden','CreateCommonEventKeys','SKILLS','ActSeq_Mechanics_BtbGain','boxHeight','charged','Scene_Battle_createCancelButton','resetResultSwitches','contents','onActorOk','EdduU','Game_Interpreter_updateWaitMode','fillRect','BattleManager_makeActionOrders','Mirror','DGBzy','createCommandNameWindow','actor%1-portrait','displayCritical','isAnyoneSpinning','ScaleY','commandEscape','MDVWO','retreat','swing','enemyId','ConvertCount','Zthwj','svBattlerName','_tempBattler','Scene_Battle_windowAreaHeight','svBattlerData','DistanceAdjust','ArRedFlat','addOptionsCommand','Destination','initialize','BPatP','offsetX','changeBattlerOpacity','JHCzK','battlerName','LlcTt','performActionStart','loadPicture','textAlign','_iconIndex','VisuMZ_2_HorrorEffects','StepDuration','battleCamera','kjLTP','removeOnceParallelInterpreter','getTraitSetKeys','qNSiZ','width','VisuMZ_1_ElementStatusCore','resizeWindowXPStyle','ceil','ayHrP','ShowRemovedState','ArPenFlat','inputting','ActSeq_Mechanics_CtbSpeed','SvnKf','isForRandom','isNonSubmenuCancel','YrBih','isImmortal','Sprite_Enemy_createStateIconSprite','isPTB','updateShadowPosition','message1','OrxCH','pHons','Amp','YsjtS','reserveCommonEvent','checkSceneBattleTransitionable','collapse','jxkUD','indexOf','createTroopNote','RequiresDefeat','forceWeaponAnimation','isSpriteVisible','cGmUv','PopupPosition','onTurnEnd','Zhdyl','clearResult','RzjUn','-%1','alive\x20battlers','addDebuff','FmrTE','Sprite_Actor_updateBitmap','battleZoom','iterateBattler','freezeTime','notFocusValid','Game_Battler_onBattleStart','moveBattlerToPoint','Point','Game_Interpreter_command283','Reveal','ActSeq_Target_PrevTarget','ActSeq_Mechanics_AtbGauge','AutoBattleRect','_onceParallelInterpreters','isFloating','Turns','_motionSpeed','_updateClientArea','isFTB','magicReflection','dead\x20friends','EscapeSuccess','members','%1EndActionJS','Window_BattleStatus_initialize','FxMVz','checkCacheKey','tnZOZ','FVpXl','ScaleDown','Scene_Battle_updateStatusWindowPosition','displayEvasion','processAbort','OffsetX','ndQuH','ActSeq_Projectile_Picture','_growEasing','KIjjj','applyHardDamageCap','cvgaG','Game_Action_evalDamageFormula','Exploited','clamp','process_VisuMZ_BattleCore_PluginParams','updateBorderSprite','updateShadowVisibility','ForceRandom','isAnimationShownOnBattlePortrait','Game_BattlerBase_addNewState','Window_BattleLog_performActionEnd','ShowTpDmg','motionType','createAnimationContainer','Scene_Battle_terminate','States','updateStateSpriteBattleCore','performEvasion','createMainSprite','setupDamagePopup','Game_Action_setAttack','setSkill','PCOaN','WEAPON\x20SWAP','dnmEo','JS\x20%1APPLY\x20%2','BattleEndEvent','439530FpuBRg','CoreEngine','Sprite_Enemy_setBattler','_animationCount','WaitForAnimation','addText','loadSvActor','VisuMZ_3_BoostAction','placeActorName','isAnyoneFloating','removeBuff','_battleCoreForcedElements','wholeActionSet','applyTargetFilters','ActSeq_Mechanics_ActionEffect','updatePointAnimations','_jumpWholeDuration','CriticalHitRate','hvWsr','SRamT','transform','onEncounterBattleCore','startTpbTurn','charging','koNLS','Game_Battler_performActionStart','getInputButtonString','ShowAddedState','targetSpritePosition','nvAYr','iVbzh','SkillItemMiddleLayout','actionSplicePoint','Sprite_Actor_setActorHome','save','setEventCallback','createStateIconSprite','dqLMY','isMagical','ActionEffect','ActSeq_Mechanics_ArmorPenetration','_commandNameWindow','_colorType','alterActionCostPTB','isDuringNonLoopingMotion','isStatusAffected','_homeEasing','UukfC','process_VisuMZ_BattleCore_jsFunctions','State-%1-%2','_emptyBitmap','IHwRp','FBiTA','PostApplyAsUserJS','_angleRevertOnFinish','length','TpbGaugeOffsetY','tcBjl','isAnyoneChangingOpacity','StepDistanceY','STRUCT','cancelActorInput','_targetHomeX','_targetHomeY','BattleLayout','Window_BattleLog_displayTpDamage','OMqrw','isRightInputMode','compareEnemySprite','Scale','slice','setupHpGaugeSprite','PostApplyJS','ParseWeaponNotetags','placeTimeGauge','applyGlobal','addOnceParallelInterpreter','vJdSb','Game_Battler_onTurnEnd','Game_Action_apply','UmnPI','FXEgn','WaitForOpacity','isPreviousSceneBattleTransitionable','ksWha','_preemptive','_regionBattleback1','GFaBH','onSelectAction','DEF','IFlUG','AlKXz','abnormal','BattlebackScale','ehLNN','ActSeq_Projectile_Icon','ActSeq_Movement_WaitForSkew','LYqwT','statusText','hasSkill','RloLW','UDJiG','EnableDamageCap','refreshDimmerBitmap','onBattleStart','max','sort','displayReflectionPlayBack','coreEngineRepositionEnemies','PreStartActionJS','AutoBattleCancel','_partyCommandWindow','process_VisuMZ_BattleCore_BaseTroops','makeAutoBattleActions','_methods','onBattleEnd','PostDamageAsUserJS','pointY','adjustPosition','_cache','SwitchCritical','GCLqB','makeTargetSprites','VisuMZ_3_ActiveChainSkills','message4','ShowEnemyGauge','animationNextDelay','removeAnimation','canInput','useItem','pBtDb','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','VisuMZ_2_BattleSystemETB','_surprise','IruNw','getBattlePortraitFilename','GpbWk','checkExtendTroopCompatibility','isTpbMainPhase','ScaleUp','createBattleUIOffsetX','critical','damageStyle','XDsvR','ActSeq_DB_DragonbonesMotionAni','semvq','code','qtaob','IXGuq','apply','Window_BattleLog_performMagicEvasion','_frame','CastCertain','QUGEx','PgGbW','ActSeq_Motion_ClearFreezeFrame','mainSpriteScaleX','onDisabledPartyCommandSelection','hidden','updateForceAction','RboCc','clear','addAutoBattleCommands','BattleManager_processAbort','createDigits','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','ActiveTpbOptionsMessage','onGrowEnd','gainHalfActionsPTB','_growDuration','Targets','TpbGaugeOffsetX','StartName','changeCtbCastTime','DamageFlat','PortraitScaleBorderStyle','commandNameWindowDrawText','aMwFu','Sprite_Damage_createChildSprite','ftgDd','Shadow2','battleSkew','loadSvEnemy','%1EndTurnJS','startFloat','finishActorInput','cameraClamp','StatusWindowAttachmentFrontOffsetY','DefaultHardCap','MSpyB','ZSBCj','SceneManager_isSceneChanging','JS\x20%1START\x20BATTLE','linkSprite','BattleManager_processDefeat','oNbQy','DefeatEvent','VisuMZ_1_MainMenuCore','KetDo','onEscapeSuccess','rKQql','sleep','requestFauxAnimation','Game_Party_removeActor','isInputting','isOptionsCommandEnabled','qKPAD','janGd','bqzBK','damageOffsetY','ShowCosts','rObHD','hpDamage','boxWidth','setup','getMenuImage','performAttackSlot','Enemy','WIiAT','isActing','zXnsf','setLastBattleSkill','setTroopPage','BattleManager_startAction','VUAFO','_targetGrowY','mhp','Sprite_Enemy_updateBossCollapse','damageOffsetX','adjustPosition_1for1','performActionEndMembers','autoSelect','fYSlq','%1Event','mLgAt','QdCal','isAppeared','hitFlat','deCeG','opacityStart','actionEffect','ActorCmd','Game_Party_addActor','fimNY','isAtbCastingState','hide','createHelpWindowBattleCore','auto','StartTurnMsg','AmjaY','BindCommonEventKeysForObj','qveHR','ShowMissEvasion','_updateCursorFilterArea','turnOrderChangeOTB','yZtBj','clearForcedGameTroopSettingsBattleCore','AgKRO','hRYTg','isForOpponent','GTXBY','resetFontSettings','_tpbSceneChangeCacheActor','gfgeg','addedDebuffs','textWidth','_targetSkewX','performCollapse','_homeWholeDuration','PostEndActionJS','alterCost','MMwzl','displayAddedStates','gINZN','loadBitmap','CheckVisibleSkillNotetags','updateEffectContainers','GFSkA','addState','isCommonEventReserved','ElUxi','callNextMethod','TvHeA','Scene_Map_launchBattle','changeInputWindow','updateActors','MKnNN','ActSeq_Mechanics_OnceParallel','offsetY','preemptive','updateStaticSvBattlerFrames','skewDuration','DualWield','description','isForOne','restore','ShowSubstitute','Window_BattleLog_displayCurrentState','HpGaugeOffsetX','Window_PartyCommand_initialize','aliveMembers','parseForcedGameTroopSettingsBattleCore','registerCommand','WaitComplete','tBiVm','JWhEK','_cancelButton','displayMiss','Buffs','sWGZd','_weaponSprite','itemHeight','physical','updateHpGaugePosition','checkAutoCustomActionSequenceNotetagEffect','exit','ParseActorNotetags','QHhKC','BattleManager_updatePhase','initVisibility','oIqVO','PreApplyAsUserJS','ActSeq_Skew_WaitForSkew','_jumpHeight','startGrow','drawGauge','oSvPQ','eDOCY','UWjLm','Game_Enemy_transform','repositionEnemiesByResolution','performMoveToPoint','vUWhF','KSike','setBattleSkew','PDsuO','_actorCommandWindow','processAnimationRequests','applyResultSwitches','ermsk','tAYft','mcTeu','EndBattlePopups','makeDeepCopy','hOiFk','YRiLF','windowAreaHeight','makeCommandList','forceEscapeSprite','innerWidth','CmdIconOptions','isStateResist','_skewDuration','_handlers','BattleManager_processVictory','VeqKo','_flinched','processDefeat','extraPositionX','Scene_Map_initialize','StepDistanceX','scEeC','kPjwW','bottom','_enemy','initMembersBattleCore','applyEasing','isLearnedSkill','slices','open','ActSeq_Set_SetupAction','MJpiT','Pre','vZmFH','onEnemyOk','GcGZf','effect','_windowLayer','MYDnZ','brjxx','cOWXM','moveBattlerDistance','current\x20target','status','requestPointAnimation','MulZA','isWaiting','isBusy','concat','XYNfY','_back1Sprite','ActSeq_Impact_Desaturate','_actorSprites','_logWindow','isFrameVisible','isChanting','XUgAq','nameY','347574evIxdH','ActionStart','dragonbonesData','TpbActiveChangeEnabled','isBuffAffected','gainCurrentActionsETB','AllowCollapse','wOmOK','VisuMZ_4_CombatLog','onFloatEnd','HP_Rate','isFightCommandEnabled','sliceMax','updateBattlebackBitmap','flashDuration','getAttackMotionSlot','YkKdQ','Scene_Map_initializeAfter','fight','ekARy','Sprite_SvEnemy','attackSkillId','WGIaC','updateBorderStyle','ARRAYFUNC','JJAjP','setBattlerBattleCore','weaponImageId','BattleVictoryJS','ActSeq_Impact_Oversaturate','FlashColor','drawIcon','svBattlerAnchorY','Parse_Notetags_TraitObjects','xCQvP','nkrMg','ShowPopup','PARTY','maxItems'];_0x5e6d=function(){return _0x12c5b9;};return _0x5e6d();}Sprite_HpGauge[_0x4b7b09(0x4d2)]=Object[_0x4b7b09(0x1e1)](Sprite_Gauge[_0x4b7b09(0x4d2)]),Sprite_HpGauge[_0x4b7b09(0x4d2)]['constructor']=Sprite_HpGauge,Sprite_HpGauge['prototype'][_0x4b7b09(0x827)]=function(){const _0x39e985=_0x4b7b09;Sprite_Gauge['prototype'][_0x39e985(0x827)][_0x39e985(0x4ad)](this);},Sprite_HpGauge['prototype'][_0x4b7b09(0xaa3)]=function(){return 0x0;},Sprite_HpGauge[_0x4b7b09(0x4d2)][_0x4b7b09(0x283)]=function(){const _0x1d71d8=_0x4b7b09;this[_0x1d71d8(0x680)][_0x1d71d8(0x945)]();const _0x3ccd87=this[_0x1d71d8(0x3ae)]();!isNaN(_0x3ccd87)&&this['drawGauge']();};function Sprite_EnemyName(){const _0x28afc3=_0x4b7b09;this[_0x28afc3(0x827)](...arguments);}Sprite_EnemyName[_0x4b7b09(0x4d2)]=Object[_0x4b7b09(0x1e1)](Sprite_Name[_0x4b7b09(0x4d2)]),Sprite_EnemyName[_0x4b7b09(0x4d2)][_0x4b7b09(0x492)]=Sprite_EnemyName,Sprite_EnemyName[_0x4b7b09(0x4d2)][_0x4b7b09(0x827)]=function(){const _0x26de81=_0x4b7b09;Sprite_Name[_0x26de81(0x4d2)][_0x26de81(0x827)][_0x26de81(0x4ad)](this),this['createAttachedSprites']();},Sprite_EnemyName[_0x4b7b09(0x4d2)][_0x4b7b09(0x737)]=function(){const _0x2bc56a=_0x4b7b09;Sprite_Name[_0x2bc56a(0x4d2)][_0x2bc56a(0x737)][_0x2bc56a(0x4ad)](this),this['opacity']=0x0,this[_0x2bc56a(0x292)]=null,this['anchor']['x']=0.5,this[_0x2bc56a(0x792)]['y']=0x0;},Sprite_EnemyName['prototype']['createAttachedSprites']=function(){const _0x3fbfc8=_0x4b7b09;VisuMZ[_0x3fbfc8(0x6ce)][_0x3fbfc8(0xb41)][_0x3fbfc8(0x97d)]['NameAttachStateIcon']&&(this['_stateIconSprite']=new Sprite_StateIcon(),this[_0x3fbfc8(0x420)](this[_0x3fbfc8(0x40c)]));},Sprite_EnemyName[_0x4b7b09(0x4d2)]['bitmapWidth']=function(){const _0xf6757b=_0x4b7b09;return Graphics[_0xf6757b(0x979)];},Sprite_EnemyName[_0x4b7b09(0x4d2)]['bitmapHeight']=function(){const _0x195c68=_0x4b7b09;return this[_0x195c68(0x7c3)]=this[_0x195c68(0x7c3)]||Window_Base[_0x195c68(0x4d2)]['lineHeight']()||0x24,this[_0x195c68(0x7c3)]*0x4;},Sprite_EnemyName['prototype'][_0x4b7b09(0x109)]=function(){const _0x58aaa3=_0x4b7b09;return VisuMZ[_0x58aaa3(0x6ce)]['Settings'][_0x58aaa3(0x97d)]['NameFontSize']||$gameSystem[_0x58aaa3(0x798)]();},Sprite_EnemyName[_0x4b7b09(0x4d2)][_0x4b7b09(0x965)]=function(_0x2ba9c8){const _0x25539e=_0x4b7b09;this[_0x25539e(0x292)]=_0x2ba9c8;},Sprite_EnemyName[_0x4b7b09(0x4d2)][_0x4b7b09(0xce)]=function(){const _0x56de70=_0x4b7b09;Sprite_Name[_0x56de70(0x4d2)][_0x56de70(0xce)]['call'](this),this[_0x56de70(0x5bb)](),this[_0x56de70(0xe4)](),this[_0x56de70(0x408)](),this[_0x56de70(0x2de)]();},Sprite_EnemyName[_0x4b7b09(0x4d2)][_0x4b7b09(0x283)]=function(){const _0x4b04df=_0x4b7b09;this[_0x4b04df(0x637)]=undefined;const _0x325d83=this[_0x4b04df(0x639)](),_0x1ecb4c=this[_0x4b04df(0x2b9)](),_0x46bc32=Window_Base[_0x4b04df(0x4d2)][_0x4b04df(0xad8)]();this[_0x4b04df(0x63f)](),this[_0x4b04df(0x680)][_0x4b04df(0x945)](),this['bitmap']['drawText'](_0x325d83,0x0,0x0,_0x1ecb4c,_0x46bc32,_0x4b04df(0x5a6));},Sprite_EnemyName[_0x4b7b09(0x4d2)][_0x4b7b09(0x5bb)]=function(){const _0xc95101=_0x4b7b09;if(!this[_0xc95101(0x292)])return;this[_0xc95101(0x6a7)]!==this[_0xc95101(0x292)]['_battler']&&this[_0xc95101(0x97a)](this[_0xc95101(0x292)][_0xc95101(0x6a7)]);},Sprite_EnemyName[_0x4b7b09(0x4d2)]['updatePosition']=function(){const _0x3c7bbe=_0x4b7b09;if(!this[_0x3c7bbe(0x292)])return;this[_0x3c7bbe(0x7c3)]=this[_0x3c7bbe(0x7c3)]||Window_Base[_0x3c7bbe(0x4d2)][_0x3c7bbe(0xad8)](),this['x']=Math[_0x3c7bbe(0x2ca)](this['_linkedSprite'][_0x3c7bbe(0x226)]),this['y']=Math['round'](this[_0x3c7bbe(0x292)][_0x3c7bbe(0x518)]-this[_0x3c7bbe(0x7c3)]*0.5);const _0xf426c5=VisuMZ[_0x3c7bbe(0x6ce)][_0x3c7bbe(0xb41)][_0x3c7bbe(0x97d)];this['x']+=Math[_0x3c7bbe(0x2ca)](_0xf426c5['NameOffsetX']||0x0),this['y']+=Math[_0x3c7bbe(0x2ca)](_0xf426c5['NameOffsetY']||0x0);},Sprite_EnemyName[_0x4b7b09(0x4d2)][_0x4b7b09(0x408)]=function(){this['updateStateIconSprite']();},Sprite_EnemyName[_0x4b7b09(0x4d2)][_0x4b7b09(0xb78)]=function(){const _0x492fa7=_0x4b7b09;if(!this[_0x492fa7(0x40c)])return;if(this['_battler']!==this[_0x492fa7(0x40c)][_0x492fa7(0x6a7)]){if('Unidi'!==_0x492fa7(0x6ac)){const _0x4eef8b=_0x55c95c[_0x492fa7(0x753)]('['+_0x35f74b['$1'][_0x492fa7(0x2c1)](/\d+/g)+']');for(const _0x547bfb of _0x4eef8b){if(_0x447fac[_0x492fa7(0x3bd)](_0x547bfb))return![];}return!![];}else this[_0x492fa7(0x40c)][_0x492fa7(0x97a)](this['_battler']);}const _0x38a0ce=this[_0x492fa7(0x9ad)]();this['_lineHeight']=this['_lineHeight']||Window_Base['prototype'][_0x492fa7(0xad8)](),this['_stateIconSprite']['x']=Math['round']((_0x38a0ce+ImageManager[_0x492fa7(0x3e0)])/0x2)+0x8,this[_0x492fa7(0x40c)]['y']=this[_0x492fa7(0x7c3)]/0x2;const _0x54233f=VisuMZ['BattleCore']['Settings'][_0x492fa7(0x97d)];this[_0x492fa7(0x40c)]['x']+=_0x54233f['AttachStateOffsetX']||0x0,this[_0x492fa7(0x40c)]['y']+=_0x54233f[_0x492fa7(0x5d3)]||0x0;},Sprite_EnemyName[_0x4b7b09(0x4d2)][_0x4b7b09(0x2de)]=function(){const _0x302a92=_0x4b7b09,_0x3e5b60=this[_0x302a92(0x93)]();if(_0x3e5b60&&this['opacity']<0xff)this[_0x302a92(0x5a0)]+=0x10;else!_0x3e5b60&&this[_0x302a92(0x5a0)]>0x0&&(this[_0x302a92(0x5a0)]-=0x10);},Sprite_EnemyName[_0x4b7b09(0x4d2)][_0x4b7b09(0x93)]=function(){const _0x5012ee=_0x4b7b09;if(this[_0x5012ee(0x31f)]())return![];else{if(!this[_0x5012ee(0x6a7)])return![];else{if(this[_0x5012ee(0x6a7)]['isDead']()){if(_0x5012ee(0xab6)===_0x5012ee(0xab6))return![];else{let _0x223b2f=_0x3de09d['x'],_0x309607=_0x455370['y'],_0x4acb7a=_0x4e5daf[_0x5012ee(0xb65)],_0x144750=_0x2f389c[_0x5012ee(0x265)]['scale']['y'];_0x3794ee['x']=_0x46b62e[_0x5012ee(0x226)]+_0x228597[_0x5012ee(0xa0a)](),_0x381af1['y']=_0xa1b601['_baseY']+_0x5f4259[_0x5012ee(0x59a)](),_0xb29ed9[_0x5012ee(0xb65)]*=_0x144750;let _0x154051=_0x257b2d[_0x5012ee(0x6ce)][_0x5012ee(0x8c)][_0x5012ee(0x4ad)](this,_0x315057);return _0x1baa74['x']=_0x223b2f,_0xcfa346['y']=_0x309607,_0x31a3a1[_0x5012ee(0xb65)]=_0x4acb7a,_0x154051;}}else{if(!this['_battler']['isAppeared']())return![];else{if(this['compatibilityVisible']())return!![];else{if(this[_0x5012ee(0x775)]())return!![];else{if(this[_0x5012ee(0x1ea)]())return!![];else{if(this[_0x5012ee(0x5a0)]>0x0){if(_0x5012ee(0x52e)===_0x5012ee(0x52e))return![];else{const _0x1b1f52=this[_0x5012ee(0x72)](),_0x76157a=_0x50f2d1[_0x5012ee(0x6ce)][_0x5012ee(0xb41)][_0x5012ee(0xa9)]['CmdIconAutoBattle'],_0x4b6a90=_0x1b1f52===_0x5012ee(0x7c2)?_0x23c36f[_0x5012ee(0x3d1)]:_0x5012ee(0x38e)[_0x5012ee(0xace)](_0x76157a,_0x9df2d9['autoBattle']),_0x4e2e6b=this[_0x5012ee(0x108)]();this['addCommand'](_0x4b6a90,'autoBattle',_0x4e2e6b);}}}}}}}}}},Sprite_EnemyName[_0x4b7b09(0x4d2)][_0x4b7b09(0x31f)]=function(){const _0x1eb5ee=_0x4b7b09;return VisuMZ[_0x1eb5ee(0x6ce)][_0x1eb5ee(0xb41)][_0x1eb5ee(0x97d)][_0x1eb5ee(0x803)];},Sprite_EnemyName[_0x4b7b09(0x4d2)]['compatibilityVisible']=function(){return![];},Sprite_EnemyName[_0x4b7b09(0x4d2)][_0x4b7b09(0x775)]=function(){const _0x435426=_0x4b7b09;return VisuMZ[_0x435426(0x6ce)]['Settings'][_0x435426(0x97d)]['NameAlwaysVisible'];},Sprite_EnemyName[_0x4b7b09(0x4d2)][_0x4b7b09(0x1ea)]=function(){const _0x4034cb=_0x4b7b09;if(VisuMZ[_0x4034cb(0x6ce)][_0x4034cb(0xb41)][_0x4034cb(0x97d)][_0x4034cb(0x273)]){if('ROFrw'!=='Vanph')return this[_0x4034cb(0x6a7)][_0x4034cb(0x262)]();else{const _0x33aecd=_0x43ef0c[_0x3b33cb];_0x33aecd&&_0x2a12a7[_0x4034cb(0x84f)](_0x5dcbec);}}else return SceneManager[_0x4034cb(0x5ae)][_0x4034cb(0xa9a)]&&SceneManager[_0x4034cb(0x5ae)]['_enemyWindow'][_0x4034cb(0x661)]&&SceneManager[_0x4034cb(0x5ae)][_0x4034cb(0xa9a)]['_enemies'][_0x4034cb(0x382)](this[_0x4034cb(0x6a7)]);},Sprite_EnemyName[_0x4b7b09(0x4d2)][_0x4b7b09(0x9ad)]=function(){const _0x1b0acb=_0x4b7b09;if(!this['_battler'])return 0x0;if(this[_0x1b0acb(0x637)])return this[_0x1b0acb(0x637)];const _0x12cdb2=this[_0x1b0acb(0x639)]();return this['setupFont'](),this[_0x1b0acb(0x637)]=this[_0x1b0acb(0x680)][_0x1b0acb(0x1a2)](_0x12cdb2)||0x1,this[_0x1b0acb(0x637)];},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x44d)]=Sprite_Battleback[_0x4b7b09(0x4d2)][_0x4b7b09(0x91a)],Sprite_Battleback[_0x4b7b09(0x4d2)][_0x4b7b09(0x91a)]=function(){const _0x34f698=_0x4b7b09,_0x451f2f=VisuMZ[_0x34f698(0x6ce)]['Settings'][_0x34f698(0x901)];if(!_0x451f2f)return VisuMZ[_0x34f698(0x6ce)][_0x34f698(0x44d)][_0x34f698(0x4ad)](this);const _0x43767d=String(_0x451f2f['DefaultStyle'])||'MZ';switch(_0x43767d){case'MZ':VisuMZ[_0x34f698(0x6ce)]['Sprite_Battleback_adjustPosition']['call'](this);break;case _0x34f698(0xa9c):this['adjustPosition_1for1']();break;case'ScaleToFit':this[_0x34f698(0x77a)]();break;case _0x34f698(0x87f):this[_0x34f698(0x561)]();break;case _0x34f698(0x92f):this['adjustPosition_ScaleUp']();break;}},Sprite_Battleback['prototype'][_0x4b7b09(0x989)]=function(){const _0x5ae6bd=_0x4b7b09,_0x2da627=VisuMZ[_0x5ae6bd(0x6ce)][_0x5ae6bd(0xb41)][_0x5ae6bd(0x901)];if(_0x2da627&&_0x2da627['jsOneForOne'])return _0x2da627['jsOneForOne'][_0x5ae6bd(0x4ad)](this);this[_0x5ae6bd(0x839)]=Graphics[_0x5ae6bd(0x839)],this[_0x5ae6bd(0xb65)]=Graphics[_0x5ae6bd(0xb65)];const _0x3297f=0x1;this[_0x5ae6bd(0x785)]['x']=_0x3297f,this[_0x5ae6bd(0x785)]['y']=_0x3297f,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x4b7b09(0x4d2)]['adjustPosition_ScaleToFit']=function(){const _0x3a2f6c=_0x4b7b09,_0xd13a71=VisuMZ[_0x3a2f6c(0x6ce)][_0x3a2f6c(0xb41)]['BattlebackScale'];if(_0xd13a71&&_0xd13a71[_0x3a2f6c(0x403)]){if('scEeC'!==_0x3a2f6c(0xa0d))_0x17c6fe['command119']([_0x227a1b]);else return _0xd13a71[_0x3a2f6c(0x403)][_0x3a2f6c(0x4ad)](this);}this['width']=Graphics[_0x3a2f6c(0x839)],this[_0x3a2f6c(0xb65)]=Graphics[_0x3a2f6c(0xb65)];const _0x4d50bb=this[_0x3a2f6c(0x839)]/this[_0x3a2f6c(0x680)][_0x3a2f6c(0x839)],_0x500828=this['height']/this['bitmap'][_0x3a2f6c(0xb65)],_0x5e759e=Math[_0x3a2f6c(0x90d)](_0x4d50bb,_0x500828);this['scale']['x']=_0x5e759e,this[_0x3a2f6c(0x785)]['y']=_0x5e759e,this['x']=(Graphics['width']-this['width'])/0x2,this['y']=Graphics[_0x3a2f6c(0xb65)]-this[_0x3a2f6c(0xb65)];},Sprite_Battleback['prototype']['adjustPosition_ScaleDown']=function(){const _0x212fcb=_0x4b7b09,_0x284354=VisuMZ[_0x212fcb(0x6ce)][_0x212fcb(0xb41)][_0x212fcb(0x901)];if(_0x284354&&_0x284354['jsScaleDown'])return _0x284354[_0x212fcb(0x278)][_0x212fcb(0x4ad)](this);this[_0x212fcb(0x839)]=Graphics['width'],this['height']=Graphics[_0x212fcb(0xb65)];const _0x1fcece=Math[_0x212fcb(0x5e3)](0x1,this[_0x212fcb(0x839)]/this[_0x212fcb(0x680)][_0x212fcb(0x839)]),_0x49cb8b=Math[_0x212fcb(0x5e3)](0x1,this[_0x212fcb(0xb65)]/this[_0x212fcb(0x680)][_0x212fcb(0xb65)]),_0x2ae109=Math[_0x212fcb(0x90d)](_0x1fcece,_0x49cb8b);this[_0x212fcb(0x785)]['x']=_0x2ae109,this[_0x212fcb(0x785)]['y']=_0x2ae109,this['x']=(Graphics['width']-this[_0x212fcb(0x839)])/0x2,this['y']=Graphics['height']-this[_0x212fcb(0xb65)];},Sprite_Battleback['prototype'][_0x4b7b09(0x200)]=function(){const _0x459662=_0x4b7b09,_0x13e075=VisuMZ[_0x459662(0x6ce)][_0x459662(0xb41)][_0x459662(0x901)];if(_0x13e075&&_0x13e075[_0x459662(0x161)])return _0x13e075['jsScaleUp'][_0x459662(0x4ad)](this);this['width']=Graphics[_0x459662(0x839)],this['height']=Graphics[_0x459662(0xb65)];const _0x3eaf1f=Math[_0x459662(0x90d)](0x1,this[_0x459662(0x839)]/this[_0x459662(0x680)][_0x459662(0x839)]),_0x3b0bd6=Math['max'](0x1,this['height']/this[_0x459662(0x680)][_0x459662(0xb65)]),_0x5cb504=Math[_0x459662(0x90d)](_0x3eaf1f,_0x3b0bd6);this[_0x459662(0x785)]['x']=_0x5cb504,this['scale']['y']=_0x5cb504,this['x']=(Graphics[_0x459662(0x839)]-this[_0x459662(0x839)])/0x2,this['y']=Graphics['height']-this[_0x459662(0xb65)];},Spriteset_Battle['ANTI_TINT_UI']=VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xb41)][_0x4b7b09(0x8e4)][_0x4b7b09(0x25c)]??!![],Spriteset_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x76)]=function(){const _0xb85bcf=_0x4b7b09;if(!$gameSystem[_0xb85bcf(0x43d)]())return![];return![];},Spriteset_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x43a)]=function(){return 0x0;},Spriteset_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x922)]=function(){return 0x0;},VisuMZ['BattleCore']['Spriteset_Battle_createLowerLayer']=Spriteset_Battle[_0x4b7b09(0x4d2)]['createLowerLayer'],Spriteset_Battle[_0x4b7b09(0x4d2)]['createLowerLayer']=function(){const _0x54618c=_0x4b7b09;VisuMZ[_0x54618c(0x6ce)][_0x54618c(0x37c)][_0x54618c(0x4ad)](this),this[_0x54618c(0x41b)](),this['createEnemyNames']();},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x6ba)]=Spriteset_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0xce)],Spriteset_Battle['prototype']['update']=function(){const _0x538d7f=_0x4b7b09;VisuMZ[_0x538d7f(0x6ce)][_0x538d7f(0x6ba)][_0x538d7f(0x4ad)](this),this[_0x538d7f(0x7b6)](),this['updateWeather']();},Spriteset_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x41b)]=function(){const _0x1ee81f=_0x4b7b09;this['_weather']=new Weather(),this['_battleField'][_0x1ee81f(0x420)](this[_0x1ee81f(0x774)]);},Spriteset_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x155)]=function(){const _0x4aadfc=_0x4b7b09;this[_0x4aadfc(0x774)][_0x4aadfc(0x45e)]=$gameScreen['weatherType'](),this[_0x4aadfc(0x774)]['power']=$gameScreen[_0x4aadfc(0x675)]();},Game_Interpreter[_0x4b7b09(0x4d2)][_0x4b7b09(0x298)]=function(_0x3e50d5){const _0x3178f9=_0x4b7b09;$gameScreen[_0x3178f9(0x245)](_0x3e50d5[0x0],_0x3e50d5[0x1],_0x3e50d5[0x2]);if(_0x3e50d5[0x3])this['wait'](_0x3e50d5[0x2]);return!![];},VisuMZ['BattleCore']['Game_Interpreter_command283']=Game_Interpreter[_0x4b7b09(0x4d2)]['command283'],Game_Interpreter[_0x4b7b09(0x4d2)]['command283']=function(_0x15ca1c){const _0x2f0d2b=_0x4b7b09;if(SceneManager[_0x2f0d2b(0x18e)]()){if(_0x2f0d2b(0x1a8)===_0x2f0d2b(0x9b)){const _0x252a6c=this['troop']()[_0x2f0d2b(0x639)]||'';if(_0x252a6c[_0x2f0d2b(0x2c1)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x205936=_0x80a6a0['$1'][_0x2f0d2b(0x7c9)](',')[_0x2f0d2b(0x78)](_0x40548e=>_0x54dc4e(_0x40548e));this['checkExtendTroopCompatibility'](),this['processExtendTroopMembers'](_0x205936);}}else return SceneManager[_0x2f0d2b(0x5ae)][_0x2f0d2b(0xa5b)]['changeBattlebacks'](_0x15ca1c[0x0],_0x15ca1c[0x1]),!![];}else return VisuMZ[_0x2f0d2b(0x6ce)][_0x2f0d2b(0x86a)][_0x2f0d2b(0x4ad)](this,_0x15ca1c);},Spriteset_Battle['prototype'][_0x4b7b09(0xa3f)]=function(_0x2e49d4,_0x2e5182){const _0x27891d=_0x4b7b09;_0x2e49d4[_0x27891d(0x680)]=_0x2e5182;},Spriteset_Battle['prototype'][_0x4b7b09(0xa79)]=function(_0x2d4e02,_0x6deaa4){const _0x2476b4=_0x4b7b09;_0x2d4e02=_0x2d4e02||'',_0x6deaa4=_0x6deaa4||'';_0x2d4e02===''&&_0x6deaa4===''&&(_0x2476b4(0x2df)!==_0x2476b4(0x2df)?_0x1fde7b['setWaitMode'](_0x2476b4(0x270)):(_0x2d4e02=this[_0x2476b4(0xa2a)]['battleback1Name'](),_0x6deaa4=this[_0x2476b4(0x32c)]['battleback2Name']()));const _0x46e8ef=ImageManager['loadBattleback1'](_0x2d4e02),_0x509f65=ImageManager['loadBattleback2'](_0x6deaa4);_0x46e8ef['addLoadListener'](this[_0x2476b4(0x714)][_0x2476b4(0x165)](this,this[_0x2476b4(0xa2a)],this[_0x2476b4(0x32c)],_0x46e8ef,_0x509f65));},Spriteset_Battle[_0x4b7b09(0x4d2)]['updateBattlebackBitmap1']=function(_0x136744,_0x36b8c1,_0x4367c8,_0x3a0e99){const _0x26fc5e=_0x4b7b09;_0x3a0e99[_0x26fc5e(0x4a8)](this[_0x26fc5e(0x3d4)][_0x26fc5e(0x165)](this,_0x136744,_0x36b8c1,_0x4367c8,_0x3a0e99));},Spriteset_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x3d4)]=function(_0x2498e0,_0x1d2ad3,_0x4cace4,_0x1f7865){const _0x22d4e2=_0x4b7b09;_0x2498e0[_0x22d4e2(0x680)]=_0x4cace4,_0x1d2ad3['bitmap']=_0x1f7865,_0x2498e0[_0x22d4e2(0x91a)](),_0x1d2ad3[_0x22d4e2(0x91a)]();},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x194)]=Spriteset_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0xb59)],Spriteset_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0xb59)]=function(){const _0x57abce=_0x4b7b09;VisuMZ[_0x57abce(0x6ce)][_0x57abce(0x194)][_0x57abce(0x4ad)](this),this[_0x57abce(0xda)]();},Spriteset_Battle[_0x4b7b09(0x4d2)]['createBattleFieldBattleCore']=function(){const _0x3d9534=_0x4b7b09;this[_0x3d9534(0x474)](),this[_0x3d9534(0x462)](),this[_0x3d9534(0x896)](),this[_0x3d9534(0x767)](),this[_0x3d9534(0x6f2)]();},Spriteset_Battle[_0x4b7b09(0x4d2)]['createBattleFieldContainer']=function(){const _0x140ebc=_0x4b7b09;this[_0x140ebc(0x1aa)]=new Sprite(),this[_0x140ebc(0x3f5)]['addChild'](this[_0x140ebc(0x1aa)]);},Spriteset_Battle['prototype'][_0x4b7b09(0x896)]=function(){const _0x431675=_0x4b7b09;this[_0x431675(0x7d6)]=new Sprite(),Spriteset_Battle[_0x431675(0x7de)]?this['addChild'](this[_0x431675(0x7d6)]):this[_0x431675(0x3f5)][_0x431675(0x420)](this['_animationContainer']);},Spriteset_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x767)]=function(){const _0xed8316=_0x4b7b09;this['_damageContainer']=new Sprite(),this[_0xed8316(0x6d7)]['x']=this[_0xed8316(0x3f5)]['x'],this[_0xed8316(0x6d7)]['y']=this[_0xed8316(0x3f5)]['y'],this[_0xed8316(0x420)](this['_damageContainer']);},Spriteset_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x6f2)]=function(){const _0xb9066d=_0x4b7b09;if(!this['isFlipped']())return;this[_0xb9066d(0x1aa)][_0xb9066d(0x785)]['x']=-0x1,this[_0xb9066d(0x1aa)]['x']=this[_0xb9066d(0x3f5)]['width'],this[_0xb9066d(0xaa4)][_0xb9066d(0x785)]['x']=-0x1,this['_uiContainer']['x']=this['_battleField'][_0xb9066d(0x839)],this[_0xb9066d(0x7d6)][_0xb9066d(0x785)]['x']=-0x1,this[_0xb9066d(0x7d6)]['x']=this['_battleField'][_0xb9066d(0x839)],this[_0xb9066d(0x6d7)][_0xb9066d(0x785)]['x']=-0x1,this['_damageContainer']['x']=this[_0xb9066d(0x3f5)]['x']+this[_0xb9066d(0x3f5)][_0xb9066d(0x839)];},Spriteset_Battle['prototype']['createEnemies']=function(){const _0x3c1c02=_0x4b7b09;Imported[_0x3c1c02(0x490)]&&this[_0x3c1c02(0x910)]()&&this[_0x3c1c02(0x9ee)]();const _0x324f06=$gameTroop[_0x3c1c02(0x878)](),_0x4f352c=[];for(const _0x5b9b6f of _0x324f06){_0x4f352c['push'](new Sprite_Enemy(_0x5b9b6f));}_0x4f352c[_0x3c1c02(0x90e)](this[_0x3c1c02(0x8e8)][_0x3c1c02(0x165)](this));for(const _0x25430b of _0x4f352c){if(_0x3c1c02(0x9e4)!==_0x3c1c02(0x6c8))this[_0x3c1c02(0x1aa)][_0x3c1c02(0x420)](_0x25430b);else return!![];}this['_enemySprites']=_0x4f352c;},Spriteset_Battle[_0x4b7b09(0x4d2)]['createActors']=function(){const _0x17c156=_0x4b7b09;this[_0x17c156(0xa2c)]=[];for(let _0x4aec05=0x0;_0x4aec05<$gameParty['maxBattleMembers']();_0x4aec05++){const _0x8ad228=$gameParty['battleMembers']()[_0x4aec05],_0x59b559=new Sprite_Actor();_0x59b559[_0x17c156(0x2ba)](_0x8ad228),_0x59b559[_0x17c156(0x1de)](_0x8ad228),_0x59b559['update'](),this[_0x17c156(0xa2c)][_0x17c156(0x410)](_0x59b559),this['_battlerContainer']['addChild'](_0x59b559);}},Spriteset_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x47c)]=function(_0x1c4823,_0x2c5a06,_0x1ba7eb,_0x32ca82){const _0x2e1eb1=_0x4b7b09,_0x4d552c=this['isMVAnimation'](_0x2c5a06),_0x580694=new(_0x4d552c?Sprite_AnimationMV:Sprite_Animation)(),_0x9a3f2c=this[_0x2e1eb1(0x91e)](_0x1c4823);this[_0x2e1eb1(0x67)](_0x1c4823[0x0])&&(_0x1ba7eb=!_0x1ba7eb),_0x580694[_0x2e1eb1(0xb1e)]=_0x1c4823,_0x580694[_0x2e1eb1(0x97a)](_0x9a3f2c,_0x2c5a06,_0x1ba7eb,_0x32ca82),this[_0x2e1eb1(0x73b)](_0x580694);},Spriteset_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x73b)]=function(_0x5ae0e7){const _0x2a2324=_0x4b7b09;if(this['isAnimationShownOnBattlePortrait'](_0x5ae0e7))this[_0x2a2324(0x4a5)]()[_0x2a2324(0x420)](_0x5ae0e7),_0x5ae0e7[_0x2a2324(0x249)]=!![];else{if(_0x2a2324(0x3c0)===_0x2a2324(0x98f))return _0x19ceee[_0x2a2324(0x5ae)][_0x2a2324(0xa9a)]&&_0x39c838['_scene'][_0x2a2324(0xa9a)][_0x2a2324(0x661)]&&_0x104e72[_0x2a2324(0x5ae)][_0x2a2324(0xa9a)][_0x2a2324(0x59d)][_0x2a2324(0x382)](this[_0x2a2324(0x6a7)]);else this[_0x2a2324(0x7d6)]['addChild'](_0x5ae0e7);}this[_0x2a2324(0x6cf)]['push'](_0x5ae0e7);},Spriteset_Battle['prototype'][_0x4b7b09(0x891)]=function(_0x5eed5f){const _0x2c3f74=_0x4b7b09;if(!_0x5eed5f)return![];if(!_0x5eed5f[_0x2c3f74(0x27f)])return![];if(!_0x5eed5f['targetObjects'][0x0])return![];if(_0x5eed5f['targetObjects'][0x0][_0x2c3f74(0xb0c)]&&!_0x5eed5f[_0x2c3f74(0xb1e)][0x0]['isActor']())return![];if($gameSystem[_0x2c3f74(0x43d)]())return![];if(!this[_0x2c3f74(0x4a5)]())return![];if(_0x5eed5f[_0x2c3f74(0x492)]===Sprite_Animation){if(_0x5eed5f[_0x2c3f74(0x27f)][_0x2c3f74(0x484)]!==0x0)return![];}else{if(_0x5eed5f['constructor']===Sprite_AnimationMV){if('VqGZv'===_0x2c3f74(0x706)){if(_0x5eed5f[_0x2c3f74(0x27f)][_0x2c3f74(0xa98)]===0x3)return![];}else{const _0x4d2e0c=_0x15cbba['BattleCore']['Settings'][_0x2c3f74(0x901)];if(_0x4d2e0c&&_0x4d2e0c['jsOneForOne'])return _0x4d2e0c[_0x2c3f74(0x6f1)]['call'](this);this[_0x2c3f74(0x839)]=_0x1b8192[_0x2c3f74(0x839)],this[_0x2c3f74(0xb65)]=_0x3cf4a2[_0x2c3f74(0xb65)];const _0xe11a64=0x1;this[_0x2c3f74(0x785)]['x']=_0xe11a64,this[_0x2c3f74(0x785)]['y']=_0xe11a64,this['x']=0x0,this['y']=0x0;}}}return!![];const _0x33c37b=Window_BattleStatus[_0x2c3f74(0x4d2)][_0x2c3f74(0x1f7)]();return['xp',_0x2c3f74(0xb3e)]['contains'](_0x33c37b);},Spriteset_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x4a5)]=function(){const _0x523184=_0x4b7b09;if(!SceneManager[_0x523184(0x5ae)])return null;if(!SceneManager[_0x523184(0x5ae)][_0x523184(0x406)])return null;if(!SceneManager['_scene'][_0x523184(0x406)][_0x523184(0x24e)])return null;return SceneManager[_0x523184(0x5ae)]['_statusWindow'][_0x523184(0x24e)];},Spriteset_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x923)]=function(_0x31ceff){const _0x698c69=_0x4b7b09;this[_0x698c69(0x699)](_0x31ceff);for(const _0x22d305 of _0x31ceff[_0x698c69(0xb1e)]){if(_0x698c69(0x208)!==_0x698c69(0x46c)){if(_0x22d305[_0x698c69(0x7d3)]){if('hSjzX'!==_0x698c69(0x5f5)){if(!_0x5181e0[_0x698c69(0x5a4)])return;const _0x2addaf=_0x343f0a['_scene']['_spriteset'];if(!_0x2addaf)return;if(_0x56f139[_0x698c69(0x57b)][_0x698c69(0x2bf)]<=1.04){_0x2392e2(_0x698c69(0x6d1)),_0x3ea2ca[_0x698c69(0x9df)]();return;}_0x2ce755[_0x698c69(0x92)](_0x130ec3,_0x5b5705);const _0x513bec=_0x52a40d['Enable'];_0x2addaf[_0x698c69(0x770)](_0x513bec);}else _0x22d305['endAnimation']();}}else _0x4fc31b[_0x698c69(0x410)](_0xf3a4cc[_0x698c69(0x4d3)]());}_0x31ceff[_0x698c69(0x2b5)]();},Spriteset_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x699)]=function(_0x2640f1){const _0x5841ae=_0x4b7b09;this[_0x5841ae(0x6cf)]['remove'](_0x2640f1);if(this[_0x5841ae(0x891)](_0x2640f1)){if(_0x5841ae(0x114)!==_0x5841ae(0x114)){if(!this[_0x5841ae(0x6a7)])return;this[_0x5841ae(0x6bb)]=this['_battler']['battlerShadowScaleX'](),this[_0x5841ae(0x55e)]=this[_0x5841ae(0x6a7)][_0x5841ae(0x2a5)]();}else this[_0x5841ae(0x4a5)]()[_0x5841ae(0x5c4)](_0x2640f1);}else{if(_0x5841ae(0x332)!==_0x5841ae(0x354))this[_0x5841ae(0x7d6)][_0x5841ae(0x5c4)](_0x2640f1);else{const _0x63ceb4=_0x4e2e14['isActor']()?_0xd53556['message1']:_0x3a51b9['message2'];_0x63ceb4&&_0x18fa94['BattleCore'][_0x5841ae(0xb41)][_0x5841ae(0x34c)]['ShowAddedState']&&(this[_0x5841ae(0x410)](_0x5841ae(0x1f1)),this[_0x5841ae(0x410)](_0x5841ae(0x7e1)),this[_0x5841ae(0x410)](_0x5841ae(0xaf9)),this[_0x5841ae(0x410)](_0x5841ae(0x8a9),_0x63ceb4[_0x5841ae(0xace)](_0x2d1a28['name']())),this['push'](_0x5841ae(0x5b0))),_0x481626['id']===_0x101578[_0x5841ae(0x7fa)]()&&this[_0x5841ae(0x410)](_0x5841ae(0x9af),_0x49b9d6);}}},VisuMZ['BattleCore'][_0x4b7b09(0x7be)]=Spriteset_Battle['prototype'][_0x4b7b09(0x9c1)],Spriteset_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x9c1)]=function(){const _0x5d4d83=_0x4b7b09;VisuMZ['BattleCore'][_0x5d4d83(0x7be)][_0x5d4d83(0x4ad)](this),this[_0x5d4d83(0x57e)]();},Spriteset_Battle[_0x4b7b09(0x4d2)]['updateBattlerContainer']=function(){const _0x366567=_0x4b7b09;this[_0x366567(0x1aa)]['children']['sort'](this[_0x366567(0x535)][_0x366567(0x165)](this)),this[_0x366567(0x198)]();},Spriteset_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x535)]=function(_0x15467c,_0x5d0098){const _0x137e0b=_0x4b7b09;if(VisuMZ['BattleCore'][_0x137e0b(0xb41)][_0x137e0b(0x5dc)][_0x137e0b(0x3c3)]){if(_0x137e0b(0x43f)===_0x137e0b(0x168))this['setBattlerFlip'](![]),this[_0x137e0b(0x7bf)]=_0xa0cc87,this[_0x137e0b(0x7e3)]=_0x37d98e;else{if(_0x15467c[_0x137e0b(0x6a7)]&&_0x5d0098[_0x137e0b(0x6a7)]){if(_0x15467c[_0x137e0b(0x6a7)][_0x137e0b(0xb0c)]()&&_0x5d0098[_0x137e0b(0x6a7)][_0x137e0b(0xfc)]()){if(_0x137e0b(0xa6f)!==_0x137e0b(0x69f))return 0x1;else this[_0x137e0b(0x3d8)](_0x6f6cff[_0x137e0b(0xa4d)]);}else{if(_0x5d0098[_0x137e0b(0x6a7)]['isActor']()&&_0x15467c[_0x137e0b(0x6a7)]['isEnemy']()){if(_0x137e0b(0x96)===_0x137e0b(0x27a))_0x3b2b38[_0x137e0b(0x6ce)][_0x137e0b(0x764)][_0x137e0b(0x4ad)](this),this['makeTargetSelectionMoreVisible']();else return-0x1;}}}}}if(_0x15467c['_baseY']!==_0x5d0098[_0x137e0b(0x518)]){if(_0x137e0b(0x9d4)===_0x137e0b(0x5ee)){if(!this['canMove']())return;if(!this['_distortionSprite'])return;if(this['_targetAngle']===_0x2a978a)return;this[_0x137e0b(0x1c0)]=_0x35902c,this[_0x137e0b(0x263)]=_0xbbcd81,this['_angleWholeDuration']=_0x5d3fbb,this[_0x137e0b(0x5cd)]=_0x5bdbc7||_0x137e0b(0x5cb),this['_angleRevertOnFinish']=_0x180c7,this[_0x137e0b(0x8da)]===_0x33a882&&(this[_0x137e0b(0x8da)]=!![]),_0x464ac1<=0x0&&(this[_0x137e0b(0x20d)]=_0x5b29a6,this[_0x137e0b(0x8da)]&&(this[_0x137e0b(0x1c0)]=0x0,this[_0x137e0b(0x20d)]=0x0));}else return _0x15467c[_0x137e0b(0x518)]-_0x5d0098['_baseY'];}else{if(_0x137e0b(0x4f7)===_0x137e0b(0x4f7))return _0x5d0098['spriteId']-_0x15467c[_0x137e0b(0x793)];else{if(!_0x3428c2[_0x137e0b(0x18e)]())return;if(!_0x2d0dbf[_0x137e0b(0x522)])return;_0x22107e[_0x137e0b(0x92)](_0x2109e1,_0x589263);const _0x3065f9=_0x4ba3a9['getLastPluginCommandInterpreter'](),_0x19a990=_0x3f9e50['CreateActionSequenceTargets'](_0x18c0b5['Targets']),_0x91e875=_0xc44991[_0x137e0b(0x142)];_0x4fdcd4['setBattleCameraTargets'](_0x19a990,_0x44cb05['Duration'],_0x23d723[_0x137e0b(0x6cb)]);if(_0x91e875)_0x3065f9['setWaitMode'](_0x137e0b(0x834));}}},Spriteset_Battle['prototype'][_0x4b7b09(0x198)]=function(){const _0xe594ad=_0x4b7b09;if(!VisuMZ[_0xe594ad(0x6ce)]['Settings'][_0xe594ad(0x5dc)]['PrioritySortActive'])return;const _0x2124d2=BattleManager['_subject'];if(_0x2124d2){if(_0x2124d2[_0xe594ad(0xb0c)]()&&!$gameSystem['isSideView']())return;const _0x50b63c=_0x2124d2[_0xe594ad(0xe0)]();if(_0x50b63c&&_0x2124d2[_0xe594ad(0xb0c)]())this[_0xe594ad(0x1aa)][_0xe594ad(0x420)](_0x50b63c);}},Spriteset_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x625)]=function(){const _0x2831bc=_0x4b7b09;for(const _0x2448e8 of $gameParty[_0x2831bc(0x9d0)]()){if(!_0x2448e8)continue;if(!_0x2448e8[_0x2831bc(0xe0)]())continue;_0x2448e8['battler']()[_0x2831bc(0xa00)]=!![],_0x2448e8[_0x2831bc(0xe0)]()[_0x2831bc(0x81a)]();}},Spriteset_Battle[_0x4b7b09(0x4d2)]['createUIContainer']=function(){const _0x34cef2=_0x4b7b09;this[_0x34cef2(0xaa4)]=new Sprite(),Spriteset_Battle[_0x34cef2(0x7de)]?this[_0x34cef2(0x420)](this[_0x34cef2(0xaa4)]):_0x34cef2(0x9a6)!==_0x34cef2(0x29b)?this[_0x34cef2(0x3f5)][_0x34cef2(0x420)](this[_0x34cef2(0xaa4)]):this[_0x34cef2(0x4d1)](),SceneManager[_0x34cef2(0x5ae)][_0x34cef2(0xaa4)]=this[_0x34cef2(0xaa4)];},Spriteset_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x1ba)]=function(){const _0x1ac21c=_0x4b7b09;if(VisuMZ['BattleCore'][_0x1ac21c(0xb41)][_0x1ac21c(0x97d)]['NameLegacy'])return;this[_0x1ac21c(0x3b9)]=new Sprite(),BattleManager['addChildToUiContainer'](this['_enemyNameContainer']);for(const _0x42df14 of this[_0x1ac21c(0xa70)]){const _0x14b7a9=new Sprite_EnemyName();this[_0x1ac21c(0x3b9)]['addChild'](_0x14b7a9),_0x14b7a9[_0x1ac21c(0x965)](_0x42df14);}},Spriteset_Battle[_0x4b7b09(0x4d2)]['updateUiContainerPosition']=function(){const _0x24bde2=_0x4b7b09;if(!this[_0x24bde2(0x6d7)])return;if(!this[_0x24bde2(0xaa4)])return;const _0x39aae3=Spriteset_Battle[_0x24bde2(0x7de)]?this[_0x24bde2(0x6d7)]['x']:0x0,_0x2405d9=Spriteset_Battle[_0x24bde2(0x7de)]?this['_damageContainer']['y']:0x0,_0x171443=Imported[_0x24bde2(0x522)]?this[_0x24bde2(0x3f5)]['x']:0x0,_0x537306=Imported['VisuMZ_3_ActSeqCamera']?this[_0x24bde2(0x3f5)]['y']:0x0;this[_0x24bde2(0xaa4)]['x']=_0x39aae3+_0x171443,this['_uiContainer']['y']=_0x2405d9+_0x537306;},BattleManager[_0x4b7b09(0x3ff)]=function(_0x4932a1){const _0x5c4e97=_0x4b7b09;if(!SceneManager[_0x5c4e97(0x5ae)]['_uiContainer'])return;SceneManager[_0x5c4e97(0x5ae)][_0x5c4e97(0xaa4)]['addChild'](_0x4932a1);},Spriteset_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0xa27)]=function(){return![];},Spriteset_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x8ad)]=function(){const _0x426659=_0x4b7b09;return this[_0x426659(0x4b0)]()[_0x426659(0x31e)](_0x28574f=>_0x28574f[_0x426659(0x870)]());},Spriteset_Battle['prototype']['isAnyoneJumping']=function(){const _0x12d9c1=_0x4b7b09;return this['battlerSprites']()[_0x12d9c1(0x31e)](_0x1ba79a=>_0x1ba79a[_0x12d9c1(0x501)]());},Spriteset_Battle['prototype'][_0x4b7b09(0x688)]=function(){const _0x40c46b=_0x4b7b09;return this[_0x40c46b(0x4b0)]()[_0x40c46b(0x31e)](_0x38e9e0=>_0x38e9e0[_0x40c46b(0x525)]());},Spriteset_Battle[_0x4b7b09(0x4d2)]['isAnyoneSkewing']=function(){const _0x247ba0=_0x4b7b09;return this['battlerSprites']()[_0x247ba0(0x31e)](_0x308d3a=>_0x308d3a[_0x247ba0(0x731)]());},Spriteset_Battle['prototype'][_0x4b7b09(0x816)]=function(){const _0x1b43be=_0x4b7b09;return this[_0x1b43be(0x4b0)]()['some'](_0x3dd9f8=>_0x3dd9f8[_0x1b43be(0x4e9)]());},Spriteset_Battle[_0x4b7b09(0x4d2)][_0x4b7b09(0x8de)]=function(){const _0x460f40=_0x4b7b09;return this[_0x460f40(0x4b0)]()['some'](_0x4231fa=>_0x4231fa['isChangingOpacity']());},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x579)]=Window_ItemList[_0x4b7b09(0x4d2)]['maxCols'],Window_ItemList[_0x4b7b09(0x4d2)][_0x4b7b09(0x2d2)]=function(){const _0x1781d2=_0x4b7b09;if(SceneManager[_0x1781d2(0x18e)]())return SceneManager[_0x1781d2(0x5ae)][_0x1781d2(0x1f7)]()===_0x1781d2(0xad5)?VisuMZ['BattleCore'][_0x1781d2(0xb41)][_0x1781d2(0x8e4)][_0x1781d2(0x4d9)]:VisuMZ['BattleCore'][_0x1781d2(0xb41)][_0x1781d2(0x8e4)][_0x1781d2(0x470)];else{if(_0x1781d2(0x5db)===_0x1781d2(0x5db))return VisuMZ[_0x1781d2(0x6ce)][_0x1781d2(0x579)][_0x1781d2(0x4ad)](this);else{if(!this[_0x1781d2(0x6a7)])return 0x0;if(this[_0x1781d2(0x637)])return this[_0x1781d2(0x637)];const _0x134401=this[_0x1781d2(0x639)]();return this['setupFont'](),this[_0x1781d2(0x637)]=this[_0x1781d2(0x680)][_0x1781d2(0x1a2)](_0x134401)||0x1,this[_0x1781d2(0x637)];}}},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x4e7)]=Window_SkillList[_0x4b7b09(0x4d2)][_0x4b7b09(0x2d2)],Window_SkillList[_0x4b7b09(0x4d2)][_0x4b7b09(0x2d2)]=function(){const _0x4ff116=_0x4b7b09;if(SceneManager[_0x4ff116(0x18e)]()){if(_0x4ff116(0x506)==='YcSSO'){const _0x23d87e=/<BYPASS DAMAGE CAP>/i;if(this[_0x4ff116(0x6e3)]()[_0x4ff116(0xaf1)]['match'](_0x23d87e))return!![];if(this[_0x4ff116(0xb2a)]()[_0x4ff116(0xaf0)]()[_0x4ff116(0x31e)](_0x8f5f4f=>_0x8f5f4f&&_0x8f5f4f[_0x4ff116(0xaf1)]['match'](_0x23d87e)))return!![];return!_0x4a4a4d['BattleCore']['Settings'][_0x4ff116(0xb75)][_0x4ff116(0x90a)];}else return SceneManager[_0x4ff116(0x5ae)]['battleLayoutStyle']()===_0x4ff116(0xad5)?VisuMZ[_0x4ff116(0x6ce)][_0x4ff116(0xb41)][_0x4ff116(0x8e4)][_0x4ff116(0x4d9)]:VisuMZ[_0x4ff116(0x6ce)][_0x4ff116(0xb41)][_0x4ff116(0x8e4)][_0x4ff116(0x470)];}else{if(_0x4ff116(0x9f3)===_0x4ff116(0x9f3))return VisuMZ[_0x4ff116(0x6ce)]['Window_SkillList_maxCols']['call'](this);else _0x410b57[_0x4ff116(0x4d2)]['performEvasion'][_0x4ff116(0x4ad)](this),this[_0x4ff116(0x42f)]('evade');}},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x44f)]=Window_Options['prototype']['addGeneralOptions'],Window_Options['prototype']['addGeneralOptions']=function(){const _0x2c64aa=_0x4b7b09;VisuMZ[_0x2c64aa(0x6ce)][_0x2c64aa(0x44f)][_0x2c64aa(0x4ad)](this),this[_0x2c64aa(0x946)](),this[_0x2c64aa(0x738)]();},Window_Options[_0x4b7b09(0x4d2)][_0x4b7b09(0x946)]=function(){const _0x4ad9d4=_0x4b7b09;VisuMZ[_0x4ad9d4(0x6ce)][_0x4ad9d4(0xb41)][_0x4ad9d4(0x632)]['AddOption']&&(this[_0x4ad9d4(0x757)](),this['addBattleCoreAutoBattleStyleCommand']());},Window_Options[_0x4b7b09(0x4d2)][_0x4b7b09(0x738)]=function(){const _0x1367f1=_0x4b7b09;if(!VisuMZ[_0x1367f1(0x6ce)]['Settings'][_0x1367f1(0x2d3)]['AddHpGaugeOption'])return;const _0x5d68d3=TextManager[_0x1367f1(0x444)],_0x1b0872=_0x1367f1(0x444);this[_0x1367f1(0x7d7)](_0x5d68d3,_0x1b0872);},Window_Options[_0x4b7b09(0x4d2)]['addBattleCoreAutoBattleStartupCommand']=function(){const _0x17c1ba=_0x4b7b09,_0x574303=TextManager['autoBattleStart'],_0xe59f89='autoBattleAtStart';this[_0x17c1ba(0x7d7)](_0x574303,_0xe59f89);},Window_Options[_0x4b7b09(0x4d2)]['addBattleCoreAutoBattleStyleCommand']=function(){const _0x3e1c92=_0x4b7b09,_0x32c2ff=TextManager[_0x3e1c92(0x1e8)],_0xbc4277=_0x3e1c92(0x2c9);this[_0x3e1c92(0x7d7)](_0x32c2ff,_0xbc4277);},VisuMZ['BattleCore'][_0x4b7b09(0x19b)]=Window_Options[_0x4b7b09(0x4d2)][_0x4b7b09(0x906)],Window_Options[_0x4b7b09(0x4d2)][_0x4b7b09(0x906)]=function(_0x5c4d4a){const _0x2b7ff1=_0x4b7b09,_0x1983bd=this[_0x2b7ff1(0x79c)](_0x5c4d4a);return _0x1983bd===_0x2b7ff1(0x2c9)?this[_0x2b7ff1(0x476)]():VisuMZ['BattleCore'][_0x2b7ff1(0x19b)]['call'](this,_0x5c4d4a);},Window_Options[_0x4b7b09(0x4d2)]['statusTextAutoBattleStyle']=function(){const _0x1a1909=_0x4b7b09,_0x2267cc=VisuMZ[_0x1a1909(0x6ce)][_0x1a1909(0xb41)][_0x1a1909(0x632)],_0x8d7e4c=this[_0x1a1909(0x7d0)]('autoBattleUseSkills');return _0x8d7e4c?_0x2267cc[_0x1a1909(0x461)]:_0x2267cc[_0x1a1909(0xac7)];},Window_ShopStatus[_0x4b7b09(0x4d2)]['getItemDamageAmountLabelBattleCore']=function(){const _0x2daedb=_0x4b7b09,_0x2cb52a=DataManager['getDamageStyle'](this['_item']),_0x16fd3b=VisuMZ[_0x2daedb(0xed)][_0x2cb52a];if(!_0x16fd3b)return this['getItemDamageAmountLabelOriginal']();const _0x35a978=_0x2daedb(0x4c5)[_0x2daedb(0xace)](this[_0x2daedb(0x6a2)][_0x2daedb(0x28b)]['type']),_0xa1ef75=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x2daedb(0x6a2)][_0x2daedb(0x28b)]['type']];return _0x16fd3b[_0x35a978]['format'](_0xa1ef75);},Window_ShopStatus['prototype'][_0x4b7b09(0x399)]=function(){const _0x286c6c=_0x4b7b09,_0x23235a=DataManager['getDamageStyle'](this[_0x286c6c(0x6a2)]),_0x44a528=VisuMZ[_0x286c6c(0xed)][_0x23235a];if(!_0x44a528)return this['getItemDamageAmountTextOriginal']();return _0x44a528[_0x286c6c(0x5f2)][_0x286c6c(0x4ad)](this);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x9cf)]=Window_PartyCommand[_0x4b7b09(0x4d2)]['initialize'],Window_PartyCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x827)]=function(_0x33ce3f){const _0x18e732=_0x4b7b09;VisuMZ[_0x18e732(0x6ce)][_0x18e732(0x9cf)][_0x18e732(0x4ad)](this,_0x33ce3f),this[_0x18e732(0x813)](_0x33ce3f);},Window_PartyCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x813)]=function(_0x184769){const _0x2508bd=_0x4b7b09,_0x5e58a6=new Rectangle(0x0,0x0,_0x184769[_0x2508bd(0x839)],_0x184769[_0x2508bd(0xb65)]);this[_0x2508bd(0x8cd)]=new Window_Base(_0x5e58a6),this[_0x2508bd(0x8cd)]['opacity']=0x0,this[_0x2508bd(0x420)](this[_0x2508bd(0x8cd)]),this[_0x2508bd(0x440)]();},Window_PartyCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x12c)]=function(){const _0x40cd2a=_0x4b7b09;Window_Command[_0x40cd2a(0x4d2)][_0x40cd2a(0x12c)][_0x40cd2a(0x4ad)](this);if(this[_0x40cd2a(0x8cd)])this[_0x40cd2a(0x440)]();},Window_PartyCommand['prototype'][_0x4b7b09(0x440)]=function(){const _0x4da521=_0x4b7b09,_0x1b2f50=this['_commandNameWindow'];_0x1b2f50['contents']['clear']();const _0x464a4b=this[_0x4da521(0x7c)](this[_0x4da521(0x1b8)]());if(_0x464a4b===_0x4da521(0x188)&&this[_0x4da521(0xa58)]()>0x0){const _0x3f44c0=this['itemLineRect'](this[_0x4da521(0x1b8)]());let _0x45984a=this[_0x4da521(0x2a0)](this['index']());_0x45984a=_0x45984a[_0x4da521(0x586)](/\\I\[(\d+)\]/gi,''),_0x1b2f50[_0x4da521(0x9a9)](),this[_0x4da521(0x59c)](_0x45984a,_0x3f44c0),this[_0x4da521(0x954)](_0x45984a,_0x3f44c0),this[_0x4da521(0x43c)](_0x45984a,_0x3f44c0);}},Window_PartyCommand['prototype'][_0x4b7b09(0x59c)]=function(_0x217864,_0x5ade7e){},Window_PartyCommand['prototype'][_0x4b7b09(0x954)]=function(_0x214600,_0x571c15){const _0x19d8d9=_0x4b7b09,_0x1501f7=this['_commandNameWindow'];_0x1501f7[_0x19d8d9(0x557)](_0x214600,0x0,_0x571c15['y'],_0x1501f7[_0x19d8d9(0xa01)],_0x19d8d9(0x5a6));},Window_PartyCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x43c)]=function(_0xc8558b,_0x2e6036){const _0xa96493=_0x4b7b09,_0x152833=this[_0xa96493(0x8cd)],_0x949510=$gameSystem[_0xa96493(0x229)](),_0x462292=_0x2e6036['x']+Math[_0xa96493(0xdd)](_0x2e6036[_0xa96493(0x839)]/0x2)+_0x949510;_0x152833['x']=_0x152833[_0xa96493(0x839)]/-0x2+_0x462292,_0x152833['y']=Math[_0xa96493(0xdd)](_0x2e6036['height']/0x2);},Window_PartyCommand[_0x4b7b09(0x4d2)]['makeCommandList']=function(){const _0x380cf0=_0x4b7b09;this[_0x380cf0(0x35c)](),this[_0x380cf0(0x5ea)](),this[_0x380cf0(0x4cc)](),this['addOptionsCommand'](),this['addEscapeCommand']();},Window_PartyCommand[_0x4b7b09(0x4d2)]['addFightCommand']=function(){const _0x16ce89=_0x4b7b09,_0x1a476f=this['commandStyle'](),_0xcac6fc=VisuMZ[_0x16ce89(0x6ce)]['Settings'][_0x16ce89(0xa9)][_0x16ce89(0xb73)],_0xd7e921=_0x1a476f===_0x16ce89(0x7c2)?TextManager['fight']:_0x16ce89(0x38e)[_0x16ce89(0xace)](_0xcac6fc,TextManager['fight']),_0x2797cc=this['isFightCommandEnabled']();this['addCommand'](_0xd7e921,_0x16ce89(0xa44),_0x2797cc);},Window_PartyCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0xa3d)]=function(){return!![];},Window_PartyCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x5ea)]=function(){const _0x118bad=_0x4b7b09;if(!this['isAutoBattleCommandAdded']())return;const _0x4d13d1=this[_0x118bad(0x72)](),_0x499b13=VisuMZ[_0x118bad(0x6ce)]['Settings']['PartyCmd'][_0x118bad(0x7e)],_0xa169cf=_0x4d13d1===_0x118bad(0x7c2)?TextManager[_0x118bad(0x3d1)]:_0x118bad(0x38e)[_0x118bad(0xace)](_0x499b13,TextManager['autoBattle']),_0x23a5a5=this['isAutoBattleCommandEnabled']();this[_0x118bad(0x7d7)](_0xa169cf,_0x118bad(0x3d1),_0x23a5a5);},Window_PartyCommand[_0x4b7b09(0x4d2)]['isAutoBattleCommandAdded']=function(){const _0x42aa58=_0x4b7b09;return VisuMZ['BattleCore'][_0x42aa58(0xb41)][_0x42aa58(0xa9)]['CommandAddAutoBattle'];},Window_PartyCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x108)]=function(){return!![];},Window_PartyCommand['prototype'][_0x4b7b09(0x4cc)]=function(){},Window_PartyCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x825)]=function(){const _0x3be3c2=_0x4b7b09;if(!this['isOptionsCommandAdded']())return;const _0x271b73=this['commandStyle'](),_0x2f0493=VisuMZ[_0x3be3c2(0x6ce)][_0x3be3c2(0xb41)][_0x3be3c2(0xa9)][_0x3be3c2(0xa02)],_0x17c136=_0x271b73===_0x3be3c2(0x7c2)?TextManager[_0x3be3c2(0x733)]:_0x3be3c2(0x38e)[_0x3be3c2(0xace)](_0x2f0493,TextManager[_0x3be3c2(0x733)]),_0x28fc1f=this[_0x3be3c2(0x971)]();this[_0x3be3c2(0x7d7)](_0x17c136,_0x3be3c2(0x733),_0x28fc1f);},Window_PartyCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x6d5)]=function(){const _0x42ca4e=_0x4b7b09;return VisuMZ[_0x42ca4e(0x6ce)][_0x42ca4e(0xb41)][_0x42ca4e(0xa9)][_0x42ca4e(0x3b1)];},Window_PartyCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x971)]=function(){return!![];},Window_PartyCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x47f)]=function(){const _0x261c55=_0x4b7b09,_0x9aa805=this[_0x261c55(0x72)](),_0x5ebb30=VisuMZ[_0x261c55(0x6ce)][_0x261c55(0xb41)]['PartyCmd']['CmdIconEscape'],_0x296cbe=_0x9aa805==='text'?TextManager['escape']:_0x261c55(0x38e)[_0x261c55(0xace)](_0x5ebb30,TextManager['escape']),_0xf2c9de=this[_0x261c55(0x65f)]();this['addCommand'](_0x296cbe,_0x261c55(0x1ae),_0xf2c9de);},Window_PartyCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x65f)]=function(){const _0x138bfe=_0x4b7b09;return BattleManager[_0x138bfe(0xb84)]();},Window_PartyCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x7b9)]=function(){const _0x1b448d=_0x4b7b09;return VisuMZ['BattleCore'][_0x1b448d(0xb41)][_0x1b448d(0xa9)][_0x1b448d(0x18f)];},Window_PartyCommand[_0x4b7b09(0x4d2)]['drawItem']=function(_0xf9abe){const _0x7ffdb3=_0x4b7b09,_0x53128a=this[_0x7ffdb3(0x7c)](_0xf9abe);if(_0x53128a===_0x7ffdb3(0x5bd)){if(_0x7ffdb3(0x4ff)==='mZJnG')this[_0x7ffdb3(0x795)](_0xf9abe);else return this[_0x7ffdb3(0xb53)]();}else{if(_0x53128a==='icon')'pyclr'===_0x7ffdb3(0x662)?this[_0x7ffdb3(0x460)](_0x7ffdb3(0x356)):this[_0x7ffdb3(0x3b7)](_0xf9abe);else{if(_0x7ffdb3(0x6e6)!==_0x7ffdb3(0x72c))Window_Command['prototype']['drawItem'][_0x7ffdb3(0x4ad)](this,_0xf9abe);else{_0x1a91d0(_0x7ffdb3(0x6d1)),_0x4791e5[_0x7ffdb3(0x9df)]();return;}}}},Window_PartyCommand['prototype'][_0x4b7b09(0x72)]=function(){const _0x4a2751=_0x4b7b09;return VisuMZ[_0x4a2751(0x6ce)][_0x4a2751(0xb41)]['PartyCmd']['CmdStyle'];},Window_PartyCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x7c)]=function(_0x30a972){const _0x27c5cb=_0x4b7b09;if(_0x30a972<0x0)return _0x27c5cb(0x7c2);const _0x7887a5=this['commandStyle']();if(_0x7887a5!==_0x27c5cb(0x99b)){if(_0x27c5cb(0x628)===_0x27c5cb(0x5c9)){if(!_0x247c41)return 0x0;let _0x1a8ad7=0x0;const _0x262ca9=_0x537622[_0x27c5cb(0xaf1)];return _0x262ca9[_0x27c5cb(0x2c1)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x1a8ad7+=_0x2d2124(_0x23be16['$1'])),_0x262ca9['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x1a8ad7+=_0x6f197(_0x49a649['$2'])),_0x1a8ad7;}else return _0x7887a5;}else{if(this[_0x27c5cb(0xa58)]()>0x0){if(_0x27c5cb(0x717)===_0x27c5cb(0x74e))_0x272b6d[_0x27c5cb(0x6ce)][_0x27c5cb(0x8ed)]&&_0x40cdac[_0x27c5cb(0x6ce)][_0x27c5cb(0x8ed)]['call'](this,_0x581cad),_0x2c3eee['BattleCore'][_0x27c5cb(0xa53)](_0x5f0909);else{const _0x1f5fdd=this[_0x27c5cb(0x2a0)](_0x30a972);if(_0x1f5fdd[_0x27c5cb(0x2c1)](/\\I\[(\d+)\]/i)){const _0x294680=this[_0x27c5cb(0x5d4)](_0x30a972),_0x5609b7=this[_0x27c5cb(0x286)](_0x1f5fdd)[_0x27c5cb(0x839)];return _0x5609b7<=_0x294680['width']?'iconText':_0x27c5cb(0x345)!==_0x27c5cb(0x345)?_0x72d06b[_0x27c5cb(0xb84)]():_0x27c5cb(0x188);}}}}return _0x27c5cb(0x7c2);},Window_PartyCommand['prototype'][_0x4b7b09(0x795)]=function(_0x5b9406){const _0x19800c=_0x4b7b09,_0x4d04e0=this[_0x19800c(0x5d4)](_0x5b9406),_0x2cd8a8=this[_0x19800c(0x2a0)](_0x5b9406),_0x59ad6b=this[_0x19800c(0x286)](_0x2cd8a8)['width'];this[_0x19800c(0x780)](this[_0x19800c(0x19f)](_0x5b9406));const _0x12aaa2=this[_0x19800c(0x7b9)]();if(_0x12aaa2==='right'){if('BJYEe'===_0x19800c(0xa45)){if(!_0x47dba2['isSceneBattle']())return;_0x3c7df6[_0x19800c(0x92)](_0x170aed,_0x2f8472);const _0x1cd341=_0x207a62[_0x19800c(0x1cb)](),_0x4bab7f=_0x510e61[_0x19800c(0x290)],_0x9b5da3=_0x1de39a[_0x19800c(0xb2)],_0x3aa2d5=_0xb57f98['_allTargets']?_0x62405[_0x19800c(0x634)]['slice'](0x0):[],_0x39b5b3=_0x5af3cd['_logWindow'];if(!_0x1cd341||!_0x4bab7f||!_0x9b5da3)return;if(!_0x4bab7f[_0x19800c(0x6e3)]())return;if(_0xec47b0[_0x19800c(0x5bf)])_0x39b5b3['push'](_0x19800c(0x74),_0x9b5da3,_0x3aa2d5,![]);if(_0x1cc188[_0x19800c(0x7b7)])_0x39b5b3[_0x19800c(0x410)](_0x19800c(0x485));if(_0xf01209[_0x19800c(0xcb)])_0x39b5b3[_0x19800c(0x410)]('waitForEffect');if(_0x400355['ClearBattleLog'])_0x39b5b3['push'](_0x19800c(0x945));if(_0x5af522[_0x19800c(0x505)])_0x39b5b3['push'](_0x19800c(0x2d5),_0x9b5da3);if(_0x423985[_0x19800c(0x67d)])_0x39b5b3[_0x19800c(0x410)]('waitForMovement');_0x1cd341[_0x19800c(0x63e)](_0x19800c(0x698));}else this['drawTextEx'](_0x2cd8a8,_0x4d04e0['x']+_0x4d04e0['width']-_0x59ad6b,_0x4d04e0['y'],_0x59ad6b);}else{if(_0x12aaa2==='center'){const _0x5a35e6=_0x4d04e0['x']+Math[_0x19800c(0xdd)]((_0x4d04e0['width']-_0x59ad6b)/0x2);this[_0x19800c(0xb3b)](_0x2cd8a8,_0x5a35e6,_0x4d04e0['y'],_0x59ad6b);}else{if('ODHHS'==='ODHHS')this['drawTextEx'](_0x2cd8a8,_0x4d04e0['x'],_0x4d04e0['y'],_0x59ad6b);else return this[_0x19800c(0x6a7)]&&this[_0x19800c(0x6a7)][_0x19800c(0x97)]();}}},Window_PartyCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x3b7)]=function(_0x1d4a5b){const _0x2a9aa8=_0x4b7b09;this[_0x2a9aa8(0x2a0)](_0x1d4a5b)[_0x2a9aa8(0x2c1)](/\\I\[(\d+)\]/i);const _0x4828dd=Number(RegExp['$1'])||0x0,_0x37b8d1=this[_0x2a9aa8(0x5d4)](_0x1d4a5b),_0x14c344=_0x37b8d1['x']+Math['floor']((_0x37b8d1[_0x2a9aa8(0x839)]-ImageManager[_0x2a9aa8(0x3e0)])/0x2),_0x5f585b=_0x37b8d1['y']+(_0x37b8d1[_0x2a9aa8(0xb65)]-ImageManager[_0x2a9aa8(0x296)])/0x2;this[_0x2a9aa8(0xa51)](_0x4828dd,_0x14c344,_0x5f585b);},Window_PartyCommand['prototype'][_0x4b7b09(0x999)]=function(){},Window_PartyCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x421)]=function(){const _0x109dcd=_0x4b7b09;Window_Command[_0x109dcd(0x4d2)][_0x109dcd(0x421)][_0x109dcd(0x4ad)](this);const _0x2110bf=this[_0x109dcd(0x1f7)]();if(_0x2110bf===_0x109dcd(0xad5)){if(_0x109dcd(0x2fb)!==_0x109dcd(0x2fb))return _0x109dcd(0x188);else this[_0x109dcd(0x25a)]();}},Window_PartyCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x1f7)]=function(){const _0x311d6e=_0x4b7b09;if(this['_battleLayoutStyle'])return this['_battleLayoutStyle'];return this[_0x311d6e(0xb5)]=SceneManager[_0x311d6e(0x5ae)][_0x311d6e(0x1f7)](),this[_0x311d6e(0xb5)];},Window_PartyCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x81)]=function(){const _0x442404=_0x4b7b09,_0x3a183c=VisuMZ[_0x442404(0x6ce)][_0x442404(0xb41)][_0x442404(0xa9)],_0x11c701=this[_0x442404(0xb74)]();switch(_0x11c701){case _0x442404(0xa44):this[_0x442404(0xa94)][_0x442404(0xa86)](_0x3a183c[_0x442404(0xb14)]);break;case'autoBattle':this['_helpWindow'][_0x442404(0xa86)](_0x3a183c[_0x442404(0x48b)]);break;case _0x442404(0x733):this[_0x442404(0xa94)][_0x442404(0xa86)](_0x3a183c['HelpOptions']);break;case _0x442404(0x1ae):this[_0x442404(0xa94)]['setText'](_0x3a183c['HelpEscape']);break;default:this[_0x442404(0xa94)][_0x442404(0xa86)]('');break;}},VisuMZ['BattleCore'][_0x4b7b09(0x732)]=Window_ActorCommand['prototype'][_0x4b7b09(0x827)],Window_ActorCommand['prototype'][_0x4b7b09(0x827)]=function(_0xc60520){const _0x5220a7=_0x4b7b09;VisuMZ[_0x5220a7(0x6ce)][_0x5220a7(0x732)][_0x5220a7(0x4ad)](this,_0xc60520),this[_0x5220a7(0x813)](_0xc60520);},Window_ActorCommand['prototype'][_0x4b7b09(0x813)]=function(_0x47986b){const _0x2361ba=_0x4b7b09,_0xba09db=new Rectangle(0x0,0x0,_0x47986b['width'],_0x47986b[_0x2361ba(0xb65)]);this['_commandNameWindow']=new Window_Base(_0xba09db),this[_0x2361ba(0x8cd)][_0x2361ba(0x5a0)]=0x0,this[_0x2361ba(0x420)](this[_0x2361ba(0x8cd)]),this[_0x2361ba(0x440)]();},Window_ActorCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x12c)]=function(){const _0x3e2935=_0x4b7b09;Window_Command[_0x3e2935(0x4d2)][_0x3e2935(0x12c)][_0x3e2935(0x4ad)](this);if(this['_commandNameWindow'])this[_0x3e2935(0x440)]();},Window_ActorCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x440)]=function(){const _0x7b00c3=_0x4b7b09,_0x2e094b=this['_commandNameWindow'];_0x2e094b[_0x7b00c3(0x80b)][_0x7b00c3(0x945)]();const _0x1bf40f=this[_0x7b00c3(0x7c)](this[_0x7b00c3(0x1b8)]());if(_0x1bf40f==='icon'&&this[_0x7b00c3(0xa58)]()>0x0){if(_0x7b00c3(0x6c3)==='JrvMX')_0x2d127a[_0x7b00c3(0x4d2)][_0x7b00c3(0x873)][_0x7b00c3(0x4ad)](this),this[_0x7b00c3(0x574)]();else{const _0x16d970=this['itemLineRect'](this[_0x7b00c3(0x1b8)]());let _0xa474d7=this[_0x7b00c3(0x2a0)](this[_0x7b00c3(0x1b8)]());_0xa474d7=_0xa474d7[_0x7b00c3(0x586)](/\\I\[(\d+)\]/gi,''),_0x2e094b[_0x7b00c3(0x9a9)](),this['commandNameWindowDrawBackground'](_0xa474d7,_0x16d970),this[_0x7b00c3(0x954)](_0xa474d7,_0x16d970),this[_0x7b00c3(0x43c)](_0xa474d7,_0x16d970);}}},Window_ActorCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x59c)]=function(_0x4f377c,_0x39d885){},Window_ActorCommand[_0x4b7b09(0x4d2)]['commandNameWindowDrawText']=function(_0x2360f5,_0x232e09){const _0x1c0dd1=_0x4b7b09,_0x4a6010=this[_0x1c0dd1(0x8cd)];_0x4a6010[_0x1c0dd1(0x557)](_0x2360f5,0x0,_0x232e09['y'],_0x4a6010[_0x1c0dd1(0xa01)],_0x1c0dd1(0x5a6));},Window_ActorCommand['prototype'][_0x4b7b09(0x43c)]=function(_0x18c692,_0x52a677){const _0x29ffd6=_0x4b7b09,_0x23a082=this[_0x29ffd6(0x8cd)],_0x1fad96=$gameSystem[_0x29ffd6(0x229)](),_0x379ba6=_0x52a677['x']+Math[_0x29ffd6(0xdd)](_0x52a677[_0x29ffd6(0x839)]/0x2)+_0x1fad96;_0x23a082['x']=_0x23a082[_0x29ffd6(0x839)]/-0x2+_0x379ba6,_0x23a082['y']=Math[_0x29ffd6(0xdd)](_0x52a677[_0x29ffd6(0xb65)]/0x2);},Window_ActorCommand['prototype'][_0x4b7b09(0x9ff)]=function(){const _0x2788da=_0x4b7b09;if(!this[_0x2788da(0x7cb)])return;const _0x525f9e=this['_actor'][_0x2788da(0x429)]();for(const _0x3ea32f of _0x525f9e){if(_0x2788da(0x972)===_0x2788da(0x977)){this['commandName'](_0x119312)[_0x2788da(0x2c1)](/\\I\[(\d+)\]/i);const _0x5bfac0=_0x54f7b2(_0xbc878f['$1'])||0x0,_0x1d7a93=this[_0x2788da(0x5d4)](_0x4a3c2a),_0x2cba6d=_0x1d7a93['x']+_0x4e5ea6['floor']((_0x1d7a93[_0x2788da(0x839)]-_0x4b9d14['iconWidth'])/0x2),_0x4f7263=_0x1d7a93['y']+(_0x1d7a93['height']-_0xda51b4[_0x2788da(0x296)])/0x2;this[_0x2788da(0xa51)](_0x5bfac0,_0x2cba6d,_0x4f7263);}else this['makeBattleCommand'](_0x3ea32f[_0x2788da(0x2c5)]()[_0x2788da(0x612)]());}},Window_ActorCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0xb43)]=function(_0x88bee0){const _0xf0e8b7=_0x4b7b09;_0x88bee0==='ATTACK'&&this['addAttackCommand']();[_0xf0e8b7(0x9d),_0xf0e8b7(0x805)]['includes'](_0x88bee0)&&this[_0xf0e8b7(0xa74)]();_0x88bee0===_0xf0e8b7(0x426)&&this[_0xf0e8b7(0x7ce)]();_0x88bee0===_0xf0e8b7(0x4a2)&&('PyLFb'==='hibqx'?_0x57553a=_0xf0e8b7(0x48f):this[_0xf0e8b7(0x7bd)]());_0x88bee0===_0xf0e8b7(0xa3)&&this[_0xf0e8b7(0x47f)]();_0x88bee0===_0xf0e8b7(0x755)&&this[_0xf0e8b7(0x5ea)]();if(_0x88bee0['match'](/STYPE: (\d+)/i)){const _0x4354c7=Number(RegExp['$1']);this[_0xf0e8b7(0x74d)](_0x4354c7);}else{if(_0x88bee0[_0xf0e8b7(0x2c1)](/STYPE: (.*)/i)){const _0x5ccfc2=DataManager['getStypeIdWithName'](RegExp['$1']);this[_0xf0e8b7(0x74d)](_0x5ccfc2);}}_0x88bee0===_0xf0e8b7(0x358)&&this[_0xf0e8b7(0x5ce)]();if(_0x88bee0[_0xf0e8b7(0x2c1)](/SKILL: (\d+)/i)){const _0x403e99=Number(RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x403e99]);}else{if(_0x88bee0[_0xf0e8b7(0x2c1)](/SKILL: (.*)/i)){if('GMkBK'!==_0xf0e8b7(0x54b)){const _0x20f7e2=DataManager['getSkillIdWithName'](RegExp['$1']);this[_0xf0e8b7(0x6b9)]($dataSkills[_0x20f7e2]);}else this[_0xf0e8b7(0x10a)]();}}_0x88bee0===_0xf0e8b7(0xa57)&&Imported['VisuMZ_2_PartySystem']&&this[_0xf0e8b7(0x6b7)](),[_0xf0e8b7(0x6dd),_0xf0e8b7(0x5b5)]['includes'](_0x88bee0)&&Imported[_0xf0e8b7(0xa3a)]&&this[_0xf0e8b7(0x277)](),_0x88bee0===_0xf0e8b7(0x8a0)&&Imported[_0xf0e8b7(0x3ad)]&&this[_0xf0e8b7(0x32b)](!![]);},Window_ActorCommand['prototype'][_0x4b7b09(0xae4)]=function(){const _0x1ec419=_0x4b7b09,_0x5d77a1=$dataSkills[this['_actor'][_0x1ec419(0xa47)]()];if(!_0x5d77a1)return;if(!this[_0x1ec419(0xa78)](_0x5d77a1))return;const _0x47e036=this[_0x1ec419(0x72)](),_0x1be8cd=DataManager[_0x1ec419(0x5fb)](_0x5d77a1),_0x164f6d=DataManager['battleCommandIcon'](_0x5d77a1),_0x1921ac=_0x47e036==='text'?_0x1be8cd:_0x1ec419(0x38e)[_0x1ec419(0xace)](_0x164f6d,_0x1be8cd);this[_0x1ec419(0x7d7)](_0x1921ac,_0x1ec419(0x8e),this[_0x1ec419(0x7cb)][_0x1ec419(0x415)]());},Window_ActorCommand[_0x4b7b09(0x4d2)]['addGuardCommand']=function(){const _0x49f478=_0x4b7b09,_0x394a7f=$dataSkills[this[_0x49f478(0x7cb)]['guardSkillId']()];if(!_0x394a7f)return;if(!this[_0x49f478(0xa78)](_0x394a7f))return;const _0x4ad3a9=this[_0x49f478(0x72)](),_0x5b4e78=DataManager[_0x49f478(0x5fb)](_0x394a7f),_0x35252d=DataManager[_0x49f478(0x37b)](_0x394a7f),_0x512ff6=_0x4ad3a9===_0x49f478(0x7c2)?_0x5b4e78:_0x49f478(0x38e)[_0x49f478(0xace)](_0x35252d,_0x5b4e78);this[_0x49f478(0x7d7)](_0x512ff6,_0x49f478(0x287),this[_0x49f478(0x7cb)]['canGuard']());},Window_ActorCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x7bd)]=function(){const _0x32605f=_0x4b7b09,_0x234a8e=this['commandStyle'](),_0x384f7c=VisuMZ['BattleCore'][_0x32605f(0xb41)]['ActorCmd'][_0x32605f(0x253)],_0x14c55=_0x234a8e===_0x32605f(0x7c2)?TextManager[_0x32605f(0x6e3)]:'\x5cI[%1]%2'[_0x32605f(0xace)](_0x384f7c,TextManager['item']),_0xa01a1f=this[_0x32605f(0x63b)]();this[_0x32605f(0x7d7)](_0x14c55,_0x32605f(0x6e3),_0xa01a1f);},Window_ActorCommand[_0x4b7b09(0x4d2)]['isItemCommandEnabled']=function(){const _0x2595a2=_0x4b7b09;return this[_0x2595a2(0x7cb)]&&this[_0x2595a2(0x7cb)][_0x2595a2(0xc2)]();},Window_ActorCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0xa74)]=function(){const _0x1f2d7f=_0x4b7b09,_0x428346=this['_actor'][_0x1f2d7f(0x7b)]();for(const _0xdbe630 of _0x428346){this['addSkillTypeCommand'](_0xdbe630);}},Window_ActorCommand[_0x4b7b09(0x4d2)]['addSkillTypeCommand']=function(_0xe32fae){const _0x5d8696=_0x4b7b09;let _0x40efde=$dataSystem[_0x5d8696(0x7b)][_0xe32fae];if(!_0x40efde)return;let _0x55b08d=_0x40efde;const _0x40873d=this[_0x5d8696(0x72)]();if(_0x40873d===_0x5d8696(0x7c2))_0x5d8696(0x7ea)!=='XuUlD'?_0x22ea21[_0x5d8696(0x7d3)]&&_0x363146[_0x5d8696(0x7d3)]():(_0x55b08d=_0x55b08d[_0x5d8696(0x586)](/\x1I\[(\d+)\]/gi,''),_0x55b08d=_0x55b08d[_0x5d8696(0x586)](/\\I\[(\d+)\]/gi,''));else{if(!_0x40efde[_0x5d8696(0x2c1)](/\\I\[(\d+)\]/i)){const _0x1da63a=Imported[_0x5d8696(0x29d)]?VisuMZ[_0x5d8696(0x791)][_0x5d8696(0xb41)][_0x5d8696(0x2b1)]:VisuMZ[_0x5d8696(0x6ce)][_0x5d8696(0xb41)][_0x5d8696(0x995)],_0x43108d=$dataSystem[_0x5d8696(0x2a4)][_0x5d8696(0x382)](_0xe32fae),_0x15bbb4=_0x43108d?_0x1da63a[_0x5d8696(0xadc)]:_0x1da63a[_0x5d8696(0xa81)];_0x55b08d=_0x5d8696(0x38e)[_0x5d8696(0xace)](_0x15bbb4,_0x40efde);}}this[_0x5d8696(0x7d7)](_0x55b08d,'skill',!![],_0xe32fae);},Window_ActorCommand['prototype']['addSingleSkillCommands']=function(){const _0x493b7f=_0x4b7b09,_0x16a988=this['_actor']['skillTypes'](),_0x4c0db3=this[_0x493b7f(0x7cb)][_0x493b7f(0x583)]();for(const _0x1ff3ea of _0x4c0db3){if(!_0x1ff3ea)continue;if(Imported[_0x493b7f(0x29d)]){if(_0x493b7f(0xa20)!==_0x493b7f(0x9d5)){if(this[_0x493b7f(0x5a9)](_0x1ff3ea))continue;if(this[_0x493b7f(0x669)](_0x1ff3ea))continue;}else{const _0xff68e8=_0x4f1148[_0x10fbf6];if(!_0xff68e8)return;const _0x6d8e38=new _0x3aa752();this[_0x493b7f(0x8f0)](_0x6d8e38),_0x6d8e38['setCommonEvent'](_0xc4a0fc);}}else{if(!_0x16a988[_0x493b7f(0x382)](_0x1ff3ea[_0x493b7f(0x19c)]))continue;}this['addSingleSkillCommand'](_0x1ff3ea);}},Window_ActorCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x5a9)]=function(_0x368b09){const _0x297a7b=_0x4b7b09,_0x2a1de5=this[_0x297a7b(0x7cb)][_0x297a7b(0x7b)](),_0x40ba34=_0x2a1de5[_0x297a7b(0x451)](_0x173457=>DataManager[_0x297a7b(0x1bf)](_0x368b09)[_0x297a7b(0x382)](_0x173457));return _0x40ba34[_0x297a7b(0x8db)]<=0x0;},Window_ActorCommand[_0x4b7b09(0x4d2)]['isHiddenSkill']=function(_0x3b1cbb){const _0x48855a=_0x4b7b09;if(Imported[_0x48855a(0x29d)]){if(VisuMZ[_0x48855a(0x791)][_0x48855a(0x2bf)]>=1.24){if(this[_0x48855a(0x7cb)]){if('JSnxp'!==_0x48855a(0x801)){if(!VisuMZ[_0x48855a(0x791)][_0x48855a(0xad9)](this[_0x48855a(0x7cb)],_0x3b1cbb))return!![];if(!VisuMZ[_0x48855a(0x791)]['CheckVisibleSwitchNotetags'](this[_0x48855a(0x7cb)],_0x3b1cbb))return!![];if(!VisuMZ[_0x48855a(0x791)][_0x48855a(0x9b7)](this[_0x48855a(0x7cb)],_0x3b1cbb))return!![];}else this[_0x48855a(0x145)](),_0x530618[_0x48855a(0x6ce)]['Sprite_Battler_updatePosition'][_0x48855a(0x4ad)](this),this['updatePositionBattleCore'](),this[_0x48855a(0x2de)]();}}else{if('KRLzw'!=='KqQRb'){if(!Window_SkillList[_0x48855a(0x4d2)][_0x48855a(0x4d8)][_0x48855a(0x4ad)](this,_0x3b1cbb))return!![];if(!Window_SkillList[_0x48855a(0x4d2)][_0x48855a(0x433)][_0x48855a(0x4ad)](this,_0x3b1cbb))return!![];if(!Window_SkillList['prototype'][_0x48855a(0x19d)]['call'](this,_0x3b1cbb))return!![];}else return this[_0x48855a(0x590)](_0x158232(_0x4bf204));}}return![];},Window_ActorCommand['prototype']['addSingleSkillCommand']=function(_0x54b2d6){const _0x2cb3bb=_0x4b7b09;if(!_0x54b2d6)return;if(!this[_0x2cb3bb(0xa78)](_0x54b2d6))return;const _0x2a1a83=this[_0x2cb3bb(0x72)](),_0x1ae8fe=DataManager[_0x2cb3bb(0x5fb)](_0x54b2d6),_0xb6a5fa=DataManager['battleCommandIcon'](_0x54b2d6),_0x5eea86=_0x2a1a83===_0x2cb3bb(0x7c2)?_0x1ae8fe:_0x2cb3bb(0x38e)[_0x2cb3bb(0xace)](_0xb6a5fa,_0x1ae8fe),_0x1a1e7a=this['_actor']['canUse'](_0x54b2d6);this[_0x2cb3bb(0x7d7)](_0x5eea86,_0x2cb3bb(0x16c),_0x1a1e7a,_0x54b2d6['id']);},Window_ActorCommand[_0x4b7b09(0x4d2)]['canAddSkillCommand']=function(_0x2d4d65){const _0x2f9318=_0x4b7b09,_0x5a9bc5=_0x2d4d65[_0x2f9318(0xaf1)];if(_0x5a9bc5['match'](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x2f9318(0x7cb)][_0x2f9318(0xa13)](_0x2d4d65['id']))return![];}if(_0x5a9bc5[_0x2f9318(0x2c1)](/<COMMAND REQUIRE ACCESS>/i)){if(_0x2f9318(0x3e7)===_0x2f9318(0x73a)){const _0x57c872=_0x5e860a[_0x2f9318(0x724)]();if(_0x57c872&&_0x57c872[_0x2f9318(0xe0)])_0x57c872[_0x2f9318(0xe0)]()[_0x2f9318(0x15c)]();_0x158bf0['BattleCore']['Scene_Battle_selectPreviousCommand']['call'](this);}else{if(!this[_0x2f9318(0x7cb)][_0x2f9318(0x907)](_0x2d4d65['id']))return![];}}const _0x22eb13=VisuMZ[_0x2f9318(0x6ce)][_0x2f9318(0x64c)](_0x2d4d65,_0x2f9318(0x1b7));if(VisuMZ[_0x2f9318(0x6ce)]['JS'][_0x22eb13]){if(!VisuMZ[_0x2f9318(0x6ce)]['JS'][_0x22eb13][_0x2f9318(0x4ad)](this,this['_actor'],_0x2d4d65))return![];}return VisuMZ[_0x2f9318(0x6ce)][_0x2f9318(0xa9d)](_0x2d4d65);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xa9d)]=function(_0x49619e){const _0x3badcd=_0x4b7b09,_0x9f3b93=_0x49619e[_0x3badcd(0xaf1)];if(_0x9f3b93['match'](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x3badcd(0x6e)!=='LIToR'){const _0x153e4b=new _0x128dd6(0x0,0x0,_0x43252b[_0x3badcd(0x839)],_0x4a10a2[_0x3badcd(0xb65)]);this[_0x3badcd(0x8cd)]=new _0x4572c9(_0x153e4b),this['_commandNameWindow'][_0x3badcd(0x5a0)]=0x0,this[_0x3badcd(0x420)](this[_0x3badcd(0x8cd)]),this['updateCommandNameWindow']();}else{const _0x58b3bc=JSON[_0x3badcd(0x753)]('['+RegExp['$1'][_0x3badcd(0x2c1)](/\d+/g)+']');for(const _0x249fab of _0x58b3bc){if(_0x3badcd(0xb3f)!=='dWBsp'){const _0x4e0c4b=_0x1da0f0[_0x3badcd(0x753)]('['+_0x3f564a['$1'][_0x3badcd(0x2c1)](/\d+/g)+']');for(const _0x446979 of _0x4e0c4b){if(!_0x40e966['value'](_0x446979))return!![];}return![];}else{if(!$gameSwitches[_0x3badcd(0x3bd)](_0x249fab))return![];}}return!![];}}if(_0x9f3b93[_0x3badcd(0x2c1)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x394e10=JSON[_0x3badcd(0x753)]('['+RegExp['$1'][_0x3badcd(0x2c1)](/\d+/g)+']');for(const _0x2a15bd of _0x394e10){if(!$gameSwitches[_0x3badcd(0x3bd)](_0x2a15bd))return![];}return!![];}if(_0x9f3b93[_0x3badcd(0x2c1)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x3badcd(0xa1b)!==_0x3badcd(0xa1b))return _0x269535[_0x3badcd(0x6ce)]['Settings'][_0x3badcd(0x97d)][_0x3badcd(0x315)];else{const _0x21b236=JSON[_0x3badcd(0x753)]('['+RegExp['$1'][_0x3badcd(0x2c1)](/\d+/g)+']');for(const _0x167849 of _0x21b236){if($gameSwitches['value'](_0x167849))return!![];}return![];}}if(_0x9f3b93[_0x3badcd(0x2c1)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x209d90=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x30bee5 of _0x209d90){if(!$gameSwitches['value'](_0x30bee5))return!![];}return![];}if(_0x9f3b93[_0x3badcd(0x2c1)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x3badcd(0x85b)===_0x3badcd(0x65a)){if(this[_0x3badcd(0x486)]===_0x582068)this[_0x3badcd(0x6f4)]();if(!_0xeba53a)return;if(this['_defeatedEnemies'][_0x3badcd(0x382)](_0x143893))return;this[_0x3badcd(0x486)][_0x3badcd(0x410)](_0x3968bc),this[_0x3badcd(0x486)][_0x3badcd(0x90e)]((_0x10ae68,_0x148f3b)=>_0x10ae68-_0x148f3b);}else{const _0x3eb837=JSON['parse']('['+RegExp['$1'][_0x3badcd(0x2c1)](/\d+/g)+']');for(const _0x3dd807 of _0x3eb837){if('YASHD'!==_0x3badcd(0x306)){if(!$gameSwitches[_0x3badcd(0x3bd)](_0x3dd807))return!![];}else this[_0x3badcd(0x6c7)]=null;}return![];}}if(_0x9f3b93[_0x3badcd(0x2c1)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x175fc4=JSON[_0x3badcd(0x753)]('['+RegExp['$1'][_0x3badcd(0x2c1)](/\d+/g)+']');for(const _0x2a3ad4 of _0x175fc4){if($gameSwitches[_0x3badcd(0x3bd)](_0x2a3ad4))return![];}return!![];}return!![];},Window_ActorCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x47f)]=function(){const _0x160999=_0x4b7b09,_0x397fee=this[_0x160999(0x72)](),_0x8d7fd5=VisuMZ[_0x160999(0x6ce)]['Settings'][_0x160999(0xa9)][_0x160999(0x392)],_0x168a5d=_0x397fee===_0x160999(0x7c2)?TextManager[_0x160999(0x1ae)]:_0x160999(0x38e)[_0x160999(0xace)](_0x8d7fd5,TextManager['escape']),_0x4611b3=this[_0x160999(0x65f)]();this[_0x160999(0x7d7)](_0x168a5d,_0x160999(0x1ae),_0x4611b3);},Window_ActorCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x65f)]=function(){const _0x3de7c4=_0x4b7b09;return BattleManager[_0x3de7c4(0xb84)]();},Window_ActorCommand[_0x4b7b09(0x4d2)]['addAutoBattleCommand']=function(){const _0x45aeb7=_0x4b7b09,_0x1157ff=this[_0x45aeb7(0x72)](),_0x54ca0f=VisuMZ[_0x45aeb7(0x6ce)]['Settings'][_0x45aeb7(0xa9)][_0x45aeb7(0x7e)],_0x479d38=_0x1157ff==='text'?TextManager['autoBattle']:_0x45aeb7(0x38e)['format'](_0x54ca0f,TextManager[_0x45aeb7(0x3d1)]),_0x3fa4ff=this[_0x45aeb7(0x108)]();this[_0x45aeb7(0x7d7)](_0x479d38,_0x45aeb7(0x3d1),_0x3fa4ff);},Window_ActorCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x108)]=function(){return!![];},Window_ActorCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x7b9)]=function(){const _0x2558c8=_0x4b7b09;return VisuMZ[_0x2558c8(0x6ce)][_0x2558c8(0xb41)][_0x2558c8(0x995)][_0x2558c8(0x18f)];},Window_ActorCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x1c2)]=function(_0xa44740){const _0x1c5511=_0x4b7b09,_0x32e5bd=this[_0x1c5511(0x7c)](_0xa44740);if(_0x32e5bd===_0x1c5511(0x5bd))'IAWFd'===_0x1c5511(0xa8e)?this[_0x1c5511(0x795)](_0xa44740):_0x58d49b=_0x917ad7[this['_actor']['guardSkillId']()];else{if(_0x32e5bd===_0x1c5511(0x188))_0x1c5511(0x1c4)!==_0x1c5511(0x1c4)?this[_0x1c5511(0x40c)][_0x1c5511(0x97a)](this[_0x1c5511(0x6a7)]):this[_0x1c5511(0x3b7)](_0xa44740);else{if(_0x1c5511(0x304)==='DYzGl'){if(this['_angleDuration']<=0x0)return;const _0x479770=this[_0x1c5511(0x263)],_0x397ab6=this[_0x1c5511(0x32e)],_0x5146cb=this['_angleEasing'];_0x325964[_0x1c5511(0x490)]?this[_0x1c5511(0x20d)]=this['applyEasing'](this[_0x1c5511(0x20d)],this['_targetAngle'],_0x479770,_0x397ab6,_0x5146cb):this[_0x1c5511(0x20d)]=(this[_0x1c5511(0x20d)]*(_0x479770-0x1)+this[_0x1c5511(0x1c0)])/_0x479770;this['_angleDuration']--;if(this['_angleDuration']<=0x0)this[_0x1c5511(0x1e4)]();}else Window_Command[_0x1c5511(0x4d2)]['drawItem'][_0x1c5511(0x4ad)](this,_0xa44740);}}this['drawSingleSkillCost'](_0xa44740);},Window_ActorCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x72)]=function(){const _0x2c4daf=_0x4b7b09;return VisuMZ['BattleCore']['Settings']['ActorCmd'][_0x2c4daf(0xb6)];},Window_ActorCommand[_0x4b7b09(0x4d2)]['commandStyleCheck']=function(_0x2e8cd8){const _0x1683b1=_0x4b7b09;if(_0x2e8cd8<0x0)return _0x1683b1(0x7c2);const _0x5e1caf=this[_0x1683b1(0x72)]();if(_0x5e1caf!=='auto')return _0x5e1caf;else{if(this[_0x1683b1(0xa58)]()>0x0){const _0x24c339=this[_0x1683b1(0x2a0)](_0x2e8cd8);if(_0x24c339[_0x1683b1(0x2c1)](/\\I\[(\d+)\]/i)){if(_0x1683b1(0x5d9)!==_0x1683b1(0x5d9))_0x334550=_0x2827da>=_0x1ffc92?_0x1d3c00:_0x368308;else{const _0x18e031=this[_0x1683b1(0x5d4)](_0x2e8cd8),_0x590275=this['textSizeEx'](_0x24c339)[_0x1683b1(0x839)];if(_0x590275<=_0x18e031[_0x1683b1(0x839)])return _0x1683b1(0x5bd);else{if('vwiXt'!==_0x1683b1(0x541))return _0x1683b1(0x188);else[0x1,0x2,0x5,0x6][_0x1683b1(0x382)](_0x222d35['item']()[_0x1683b1(0x28b)][_0x1683b1(0x45e)])?this[_0x1683b1(0x7d5)]():this[_0x1683b1(0x42f)]('skill');}}}}}return'text';},Window_ActorCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x795)]=function(_0x29ad35){const _0x39a522=_0x4b7b09,_0x501d39=this[_0x39a522(0x5d4)](_0x29ad35),_0x241f76=this[_0x39a522(0x2a0)](_0x29ad35),_0x1e6673=this['textSizeEx'](_0x241f76)[_0x39a522(0x839)];this[_0x39a522(0x780)](this[_0x39a522(0x19f)](_0x29ad35));const _0x319cd0=this['itemTextAlign']();if(_0x319cd0===_0x39a522(0x2f1))'vlGmP'!=='rMppf'?this[_0x39a522(0xb3b)](_0x241f76,_0x501d39['x']+_0x501d39['width']-_0x1e6673,_0x501d39['y'],_0x1e6673):(_0x24a849[_0x39a522(0x6ce)][_0x39a522(0x33b)]['call'](this,_0x72d952),this['callNextMethod']());else{if(_0x319cd0==='center'){if(_0x39a522(0xa92)!=='dYtTf')this[_0x39a522(0x9d6)]['x']=0x8;else{const _0x16ec08=_0x501d39['x']+Math[_0x39a522(0xdd)]((_0x501d39[_0x39a522(0x839)]-_0x1e6673)/0x2);this[_0x39a522(0xb3b)](_0x241f76,_0x16ec08,_0x501d39['y'],_0x1e6673);}}else this[_0x39a522(0xb3b)](_0x241f76,_0x501d39['x'],_0x501d39['y'],_0x1e6673);}},Window_ActorCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x3b7)]=function(_0x372556){const _0x7517c7=_0x4b7b09;this[_0x7517c7(0x2a0)](_0x372556)['match'](/\\I\[(\d+)\]/i);const _0x51d63c=Number(RegExp['$1'])||0x0,_0x1dbee0=this[_0x7517c7(0x5d4)](_0x372556),_0x5df129=_0x1dbee0['x']+Math[_0x7517c7(0xdd)]((_0x1dbee0[_0x7517c7(0x839)]-ImageManager[_0x7517c7(0x3e0)])/0x2),_0x399126=_0x1dbee0['y']+(_0x1dbee0[_0x7517c7(0xb65)]-ImageManager[_0x7517c7(0x296)])/0x2;this[_0x7517c7(0xa51)](_0x51d63c,_0x5df129,_0x399126);},Window_ActorCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0xa8c)]=function(_0x164fa4){const _0x51457=_0x4b7b09;if(!(VisuMZ['BattleCore'][_0x51457(0xb41)][_0x51457(0x995)][_0x51457(0x976)]??!![]))return;const _0x43f59d=this['commandSymbol'](_0x164fa4);if(!['attack',_0x51457(0x287),_0x51457(0x16c)]['includes'](_0x43f59d))return;const _0x3bed8b=this['itemLineRect'](_0x164fa4);let _0x8a2570=null;if(_0x43f59d===_0x51457(0x8e))_0x8a2570=$dataSkills[this[_0x51457(0x7cb)][_0x51457(0xa47)]()];else{if(_0x43f59d===_0x51457(0x287)){if(_0x51457(0x8fb)===_0x51457(0x8fb))_0x8a2570=$dataSkills[this[_0x51457(0x7cb)][_0x51457(0x546)]()];else return _0x4d58a6[_0x51457(0x6ce)][_0x51457(0xb41)][_0x51457(0x5dc)][_0x51457(0xb15)];}else{if(_0x51457(0x17c)!=='PJhfK')return 0x0;else _0x8a2570=$dataSkills[this[_0x51457(0x329)][_0x164fa4]['ext']];}}this[_0x51457(0x3eb)](this[_0x51457(0x7cb)],_0x8a2570,_0x3bed8b['x'],_0x3bed8b['y'],_0x3bed8b[_0x51457(0x839)]);},Window_ActorCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x3eb)]=function(_0x233b12,_0x6faf29,_0x49fab8,_0x5e9ecb,_0x5ac619){const _0x1bbdd6=_0x4b7b09;if(!_0x6faf29)return;if(Imported[_0x1bbdd6(0x29d)]){if(_0x1bbdd6(0x4a3)===_0x1bbdd6(0x6c0)){if(_0x2edcc5[_0x1bbdd6(0xaf1)][_0x1bbdd6(0x2c1)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x35cc18=_0x11e476(_0xb21553['$1'])[_0x1bbdd6(0x2c5)]()[_0x1bbdd6(0x612)]();if(_0x35cc18===_0x1bbdd6(0x217))return _0x1bbdd6(0x217);if(_0x4147bd[_0x1bbdd6(0xed)][_0x35cc18])return _0x35cc18;}const _0x28c4cf=_0x4ce3c3[_0x1bbdd6(0x6ce)][_0x1bbdd6(0xb41)][_0x1bbdd6(0xb75)][_0x1bbdd6(0x22e)][_0x1bbdd6(0x2c5)]()[_0x1bbdd6(0x612)]();if(_0x31c67e['DamageStyles'][_0x28c4cf])return _0x28c4cf;return _0x1bbdd6(0x217);}else Window_Command[_0x1bbdd6(0x4d2)][_0x1bbdd6(0x3eb)][_0x1bbdd6(0x4ad)](this,_0x233b12,_0x6faf29,_0x49fab8,_0x5e9ecb,_0x5ac619);}else Window_SkillList[_0x1bbdd6(0x4d2)][_0x1bbdd6(0x3eb)][_0x1bbdd6(0x4ad)](this,_0x6faf29,_0x49fab8,_0x5e9ecb,_0x5ac619);},Window_ActorCommand['prototype']['hide']=function(){},Window_ActorCommand['prototype']['activate']=function(){const _0x144915=_0x4b7b09;Window_Command[_0x144915(0x4d2)][_0x144915(0x421)][_0x144915(0x4ad)](this);const _0x20ae46=this[_0x144915(0x1f7)]();if(_0x20ae46===_0x144915(0xad5)){if(_0x144915(0x31d)!==_0x144915(0x1c3))this[_0x144915(0x25a)]();else{const _0x226030=_0x24a0fb(_0x4823a1['$1'])[_0x144915(0x612)](),_0x4e1fd0=_0x313eb0(_0x2f5d37['$2']);_0x373df4[_0x226030]=_0x4e1fd0,_0x4918ce+=_0x4e1fd0;}}},Window_ActorCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x1f7)]=function(){const _0xc3ae6e=_0x4b7b09;if(this['_battleLayoutStyle'])return this[_0xc3ae6e(0xb5)];return this[_0xc3ae6e(0xb5)]=SceneManager[_0xc3ae6e(0x5ae)][_0xc3ae6e(0x1f7)](),this[_0xc3ae6e(0xb5)];},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x6ed)]=Window_ActorCommand[_0x4b7b09(0x4d2)]['setup'],Window_ActorCommand['prototype']['setup']=function(_0x1c7511){const _0x128c85=_0x4b7b09,_0x463379=this['battleLayoutStyle']();if(_0x1c7511&&['xp','portrait'][_0x128c85(0x382)](_0x463379)){if('ehLNN'===_0x128c85(0x902))this[_0x128c85(0x83b)](_0x1c7511);else return _0x41442e[_0x128c85(0x6ce)][_0x128c85(0x1f5)][_0x128c85(0x4ad)](this);}else _0x1c7511&&[_0x128c85(0xad5)][_0x128c85(0x382)](_0x463379)&&(this['resizeWindowBorderStyle'](_0x1c7511),this[_0x128c85(0x25a)]());VisuMZ[_0x128c85(0x6ce)][_0x128c85(0x6ed)][_0x128c85(0x4ad)](this,_0x1c7511);if(_0x1c7511&&$gameTroop[_0x128c85(0x9d0)]()['length']>0x0&&_0x1c7511[_0x128c85(0xe0)]()){if(_0x128c85(0xb63)===_0x128c85(0x6b2)){const _0x40b644=this[_0x128c85(0x7c)](_0x4d4347);if(_0x40b644==='iconText')this[_0x128c85(0x795)](_0x49f40d);else _0x40b644==='icon'?this[_0x128c85(0x3b7)](_0x5cc844):_0x442265[_0x128c85(0x4d2)][_0x128c85(0x1c2)]['call'](this,_0xf86d37);}else _0x1c7511[_0x128c85(0xe0)]()[_0x128c85(0x157)]();}},Window_ActorCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x83b)]=function(_0x424593){const _0x279b5d=_0x4b7b09,_0x415f01=Math[_0x279b5d(0x2ca)](Graphics[_0x279b5d(0x979)]/0x3),_0x3a7d7c=Math[_0x279b5d(0x2ca)](Graphics[_0x279b5d(0x979)]/$gameParty[_0x279b5d(0x41f)]()[_0x279b5d(0x8db)]),_0x19634f=Math[_0x279b5d(0x5e3)](_0x415f01,_0x3a7d7c),_0x5e9366=this['fittingHeight'](VisuMZ['BattleCore']['Settings'][_0x279b5d(0x8e4)][_0x279b5d(0x1fe)]),_0x19d3f8=Math[_0x279b5d(0x2ca)](_0x3a7d7c*_0x424593[_0x279b5d(0x1b8)]())+Math[_0x279b5d(0x2ca)]((_0x3a7d7c-_0x19634f)/0x2),_0x4b02bd=Math[_0x279b5d(0x2ca)](SceneManager['_scene'][_0x279b5d(0x406)]['y']-_0x5e9366);this[_0x279b5d(0x4c2)](_0x19d3f8,_0x4b02bd,_0x19634f,_0x5e9366),this[_0x279b5d(0x9e)](),this[_0x279b5d(0x4c7)](0x1);},Window_ActorCommand[_0x4b7b09(0x4d2)]['resizeWindowBorderStyle']=function(_0x489c8f){const _0x473487=_0x4b7b09,_0x13e07b=SceneManager[_0x473487(0x5ae)][_0x473487(0xa0)]();this['move'](_0x13e07b['x'],_0x13e07b['y'],_0x13e07b['width'],_0x13e07b[_0x473487(0xb65)]),this[_0x473487(0x9e)](),this[_0x473487(0x4c7)](0x0);},Window_ActorCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x90b)]=function(){const _0x24f692=_0x4b7b09;if(this[_0x24f692(0x6e9)]){const _0x5dcdad=this[_0x24f692(0x6e9)][_0x24f692(0x680)],_0x38f1b1=this['width']-0x8,_0x460a89=this[_0x24f692(0xb65)],_0x548b68=this['padding'],_0x2f5248=ColorManager[_0x24f692(0x3a2)](),_0x26bf28=ColorManager[_0x24f692(0x550)]();this[_0x24f692(0x6e9)]['x']=0x4,_0x5dcdad[_0x24f692(0x5ad)](_0x38f1b1,_0x460a89),_0x5dcdad[_0x24f692(0x232)](0x0,0x0,_0x38f1b1,_0x548b68,_0x26bf28,_0x2f5248,!![]),_0x5dcdad[_0x24f692(0x80f)](0x0,_0x548b68,_0x38f1b1,_0x460a89-_0x548b68*0x2,_0x2f5248),_0x5dcdad[_0x24f692(0x232)](0x0,_0x460a89-_0x548b68,_0x38f1b1,_0x548b68,_0x2f5248,_0x26bf28,!![]),this[_0x24f692(0x6e9)][_0x24f692(0x428)](0x0,0x0,_0x38f1b1,_0x460a89);}},Window_ActorCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x81)]=function(){const _0x39b48a=_0x4b7b09;if(!this[_0x39b48a(0x7cb)])return;const _0x5bbfc1=VisuMZ[_0x39b48a(0x6ce)][_0x39b48a(0xb41)][_0x39b48a(0x995)],_0x322e6e=this[_0x39b48a(0xb74)]();switch(_0x322e6e){case _0x39b48a(0x8e):this[_0x39b48a(0x5fa)]($dataSkills[this[_0x39b48a(0x7cb)][_0x39b48a(0xa47)]()]);break;case _0x39b48a(0x287):this[_0x39b48a(0x5fa)]($dataSkills[this['_actor']['guardSkillId']()]);break;case _0x39b48a(0x28d):const _0x4db5a5=_0x5bbfc1['HelpSkillType'],_0x509bae=_0x4db5a5[_0x39b48a(0xace)]($dataSystem[_0x39b48a(0x7b)][this[_0x39b48a(0xb3c)]()]);this[_0x39b48a(0xa94)]['setText'](_0x509bae);break;case _0x39b48a(0x16c):this[_0x39b48a(0x5fa)]($dataSkills[this['currentExt']()]);break;case _0x39b48a(0x6e3):this['_helpWindow'][_0x39b48a(0xa86)](_0x5bbfc1['HelpItem']);break;case _0x39b48a(0x1ae):this[_0x39b48a(0xa94)]['setText'](_0x5bbfc1[_0x39b48a(0x539)]);break;case _0x39b48a(0x3d1):this[_0x39b48a(0xa94)][_0x39b48a(0xa86)](_0x5bbfc1[_0x39b48a(0x48b)]);break;default:this[_0x39b48a(0xa94)]['setText']('');break;}},Window_ActorCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0xb3d)]=function(){const _0x590d99=_0x4b7b09;this[_0x590d99(0x606)](0x0);if(this[_0x590d99(0x7cb)]&&ConfigManager[_0x590d99(0x3aa)]){const _0x3691b9=this[_0x590d99(0x7cb)][_0x590d99(0x6db)]();this[_0x590d99(0xb67)](_0x3691b9);if(_0x3691b9===_0x590d99(0x28d)){const _0x416565=this[_0x590d99(0x7cb)][_0x590d99(0x6b5)]();if(_0x416565){const _0x44a3b1=this['findSymbolExt'](_0x590d99(0x28d),_0x416565['stypeId']);this[_0x590d99(0x686)](_0x44a3b1||0x0);}}else{if(_0x3691b9===_0x590d99(0x16c)){if(_0x590d99(0x113)!==_0x590d99(0x113)){if(!_0x34b463['isSideView']())return;const _0x1697d7=this['battler']();if(!_0x1697d7)return;_0x1697d7[_0x590d99(0x9e8)](_0x17a8fe,_0x4bf9a7,_0x201e10,_0x22cbfd);}else{const _0x530f7a=this[_0x590d99(0x7cb)][_0x590d99(0x6b5)]();if(_0x530f7a){const _0x20fdd7=this[_0x590d99(0x771)](_0x590d99(0x16c),_0x530f7a['id']);this['select'](_0x20fdd7||0x0);}}}}}},Window_ActorCommand[_0x4b7b09(0x4d2)][_0x4b7b09(0x771)]=function(_0x550ec1,_0x56dbc4){const _0x4c8ad3=_0x4b7b09;return this[_0x4c8ad3(0x329)]['findIndex'](_0x32843c=>_0x32843c[_0x4c8ad3(0x401)]===_0x550ec1&&_0x32843c[_0x4c8ad3(0x76a)]===_0x56dbc4);},VisuMZ['BattleCore'][_0x4b7b09(0x87a)]=Window_BattleStatus['prototype']['initialize'],Window_BattleStatus[_0x4b7b09(0x4d2)]['initialize']=function(_0x17893a){const _0x2c4513=_0x4b7b09;VisuMZ[_0x2c4513(0x6ce)]['Window_BattleStatus_initialize'][_0x2c4513(0x4ad)](this,_0x17893a),this['initBattleCore'](),this['createAttachmentSprites']();},Window_BattleStatus['prototype'][_0x4b7b09(0x1f7)]=function(){const _0x103833=_0x4b7b09;if(this[_0x103833(0xb5)])return this['_battleLayoutStyle'];return this['_battleLayoutStyle']=SceneManager[_0x103833(0x5ae)]['battleLayoutStyle'](),this[_0x103833(0xb5)];},Window_BattleStatus[_0x4b7b09(0x4d2)][_0x4b7b09(0x6f4)]=function(){const _0x5b12e9=_0x4b7b09;this[_0x5b12e9(0x58e)]=this[_0x5b12e9(0xa2e)]();const _0xf73960=VisuMZ[_0x5b12e9(0x6ce)][_0x5b12e9(0xb41)]['BattleLayout'];_0xf73960[_0x5b12e9(0x491)]&&(this[_0x5b12e9(0x5a0)]=0x0);},Window_BattleStatus['prototype'][_0x4b7b09(0xa2e)]=function(){const _0x35186c=_0x4b7b09,_0x468943=VisuMZ[_0x35186c(0x6ce)]['Settings'][_0x35186c(0x8e4)];if(_0x468943['StatusWindowSkinFilename']){if(_0x35186c(0x3be)===_0x35186c(0x3be))return!![];else{if(!_0x39269d['value'](_0x2bd31a))return![];}}const _0x4e4183=this[_0x35186c(0x1f7)]();switch(_0x4e4183){case _0x35186c(0x577):case _0x35186c(0xad5):return!![];break;case _0x35186c(0x127):case'xp':case'portrait':default:return![];break;}},Window_BattleStatus[_0x4b7b09(0x4d2)]['extraHeight']=function(){const _0x1ee745=_0x4b7b09;return this[_0x1ee745(0xa2e)]()?'yYWWM'===_0x1ee745(0xe9)?0x0:0x0:'xCuAD'==='Stzte'?_0x40c7bb[_0x1ee745(0x436)]()[_0x1ee745(0x9d0)]():0xa;},Window_BattleStatus[_0x4b7b09(0x4d2)][_0x4b7b09(0x2d2)]=function(){const _0x3ec360=_0x4b7b09,_0x2b7bbc=this['battleLayoutStyle']();switch(_0x2b7bbc){case'list':return 0x1;break;case'xp':case'portrait':return $gameParty['battleMembers']()[_0x3ec360(0x8db)];break;case'default':default:return $gameParty['maxBattleMembers']();break;}},Window_BattleStatus[_0x4b7b09(0x4d2)][_0x4b7b09(0x9db)]=function(){const _0x330b0e=_0x4b7b09,_0x99f014=this[_0x330b0e(0x1f7)]();switch(_0x99f014){case _0x330b0e(0x577):return Window_StatusBase[_0x330b0e(0x4d2)][_0x330b0e(0x9db)][_0x330b0e(0x4ad)](this);break;case _0x330b0e(0x127):case'xp':case _0x330b0e(0xb3e):default:return this[_0x330b0e(0x472)];break;}},Window_BattleStatus[_0x4b7b09(0x4d2)][_0x4b7b09(0x761)]=function(){const _0x294417=_0x4b7b09,_0x31c5fe=this[_0x294417(0x1f7)]();switch(_0x31c5fe){case _0x294417(0x577):return Window_StatusBase[_0x294417(0x4d2)][_0x294417(0x761)][_0x294417(0x4ad)](this);break;case'default':case'xp':case _0x294417(0xb3e):default:return 0x0;break;}},Window_BattleStatus['prototype']['updatePadding']=function(){const _0x1564ef=_0x4b7b09;this[_0x1564ef(0xa2e)]()?Window_StatusBase[_0x1564ef(0x4d2)][_0x1564ef(0x387)]['call'](this):this[_0x1564ef(0x790)]=0x8;},Window_BattleStatus['prototype']['loadWindowskin']=function(){const _0x2a5e5e=_0x4b7b09,_0x1ea31f=VisuMZ[_0x2a5e5e(0x6ce)]['Settings'][_0x2a5e5e(0x8e4)];if(_0x1ea31f['StatusWindowSkinFilename']){if(_0x2a5e5e(0xabf)!==_0x2a5e5e(0x633))this['windowskin']=ImageManager[_0x2a5e5e(0x6e0)](_0x1ea31f[_0x2a5e5e(0x203)]);else return this['targetDistortionSpritePosition'](_0x37db02);}else Window_StatusBase[_0x2a5e5e(0x4d2)]['loadWindowskin'][_0x2a5e5e(0x4ad)](this);},Window_BattleStatus['prototype']['drawItemBackground']=function(_0x23ac34){const _0x225621=_0x4b7b09,_0x9933ed=VisuMZ[_0x225621(0x6ce)][_0x225621(0xb41)][_0x225621(0x8e4)];if(_0x9933ed['StatusWindowSelectableBackHide'])return;Window_StatusBase[_0x225621(0x4d2)][_0x225621(0x665)][_0x225621(0x4ad)](this,_0x23ac34);},Window_BattleStatus[_0x4b7b09(0x4d2)][_0x4b7b09(0x295)]=function(){const _0x46763d=_0x4b7b09;this[_0x46763d(0x2f4)]=!![];},Window_BattleStatus[_0x4b7b09(0x4d2)][_0x4b7b09(0xce)]=function(){const _0x40cea7=_0x4b7b09;Window_StatusBase['prototype']['update']['call'](this),this[_0x40cea7(0x37e)](),this[_0x40cea7(0x9b8)]();if(this['battleLayoutStyle']()==='border')this[_0x40cea7(0xa49)]();},Window_BattleStatus[_0x4b7b09(0x4d2)][_0x4b7b09(0x37e)]=function(){const _0x258356=_0x4b7b09;if($gameTemp[_0x258356(0x13d)]())this[_0x258356(0xe3)](),this[_0x258356(0x2f4)]=![],$gameTemp[_0x258356(0x548)]();else this[_0x258356(0x2f4)]&&(this['_requestRefresh']=![],this[_0x258356(0x75a)](),this[_0x258356(0x48d)]());},Window_BattleStatus['prototype'][_0x4b7b09(0xb4c)]=function(){const _0xa51979=_0x4b7b09;Window_StatusBase['prototype'][_0xa51979(0xb4c)][_0xa51979(0x4ad)](this);if(!$gameSystem[_0xa51979(0x43d)]())this[_0xa51979(0x75a)]();},Window_BattleStatus[_0x4b7b09(0x4d2)][_0x4b7b09(0x999)]=function(){const _0x29405d=_0x4b7b09;if(this[_0x29405d(0x492)]===Window_BattleStatus)return;Window_StatusBase[_0x29405d(0x4d2)]['hide'][_0x29405d(0x4ad)](this);},Window_BattleStatus[_0x4b7b09(0x4d2)][_0x4b7b09(0x455)]=function(_0x3d803b){const _0xc6533c=_0x4b7b09,_0x2f3cc2=this[_0xc6533c(0x1f7)]();switch(_0x2f3cc2){case'xp':case'portrait':break;case _0xc6533c(0x127):case _0xc6533c(0x577):case _0xc6533c(0xad5):default:return Window_StatusBase['prototype'][_0xc6533c(0x455)][_0xc6533c(0x4ad)](this,_0x3d803b);break;}},VisuMZ['BattleCore'][_0x4b7b09(0x404)]=Window_BattleStatus['prototype'][_0x4b7b09(0x7e0)],Window_BattleStatus[_0x4b7b09(0x4d2)][_0x4b7b09(0x7e0)]=function(_0x1080f7){const _0x4017e1=_0x4b7b09,_0x5d42cd=this['battleLayoutStyle']();switch(_0x5d42cd){case _0x4017e1(0x577):this[_0x4017e1(0x4a6)](_0x1080f7);break;case'xp':this[_0x4017e1(0x389)](_0x1080f7);break;case _0x4017e1(0xb3e):this[_0x4017e1(0x228)](_0x1080f7);break;case'default':case _0x4017e1(0xad5):default:VisuMZ[_0x4017e1(0x6ce)][_0x4017e1(0x404)][_0x4017e1(0x4ad)](this,_0x1080f7);break;}},Window_BattleStatus[_0x4b7b09(0x4d2)][_0x4b7b09(0x340)]=function(_0x41f88e){const _0x5bf0f2=_0x4b7b09,_0x91c3dd=this[_0x5bf0f2(0x1f7)]();if(!$gameSystem[_0x5bf0f2(0x43d)]())this['centerFrontViewSprite'](_0x41f88e);switch(_0x91c3dd){case _0x5bf0f2(0x577):this['drawItemStatusListStyle'](_0x41f88e);break;case'xp':case _0x5bf0f2(0xb3e):case'default':case _0x5bf0f2(0xad5):default:this[_0x5bf0f2(0x640)](_0x41f88e);break;}},Window_BattleStatus[_0x4b7b09(0x4d2)][_0x4b7b09(0x540)]=function(){const _0x22d91a=_0x4b7b09,_0x4954a8=this['battleLayoutStyle']();if(['xp']['includes'](_0x4954a8)&&!$gameSystem[_0x22d91a(0x43d)]()){this['setCursorRect'](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x22d91a(0x4d2)]['refreshCursor'][_0x22d91a(0x4ad)](this);},Window_BattleStatus[_0x4b7b09(0x4d2)][_0x4b7b09(0x5e2)]=function(_0x112e64){const _0x5aa108=_0x4b7b09,_0x30766e=this['actor'](_0x112e64)[_0x5aa108(0xe0)]();if(!_0x30766e)return;const _0x18aac4=this[_0x5aa108(0x1f7)](),_0xff4a1e=this[_0x5aa108(0x653)](_0x112e64);let _0x531ac8=Math[_0x5aa108(0x2ca)](_0xff4a1e['x']+_0xff4a1e[_0x5aa108(0x839)]/0x2)+this[_0x5aa108(0x790)];[_0x5aa108(0x577)]['includes'](_0x18aac4)&&(_0x531ac8=_0xff4a1e['width']/$gameParty[_0x5aa108(0x41f)]()[_0x5aa108(0x8db)],_0x531ac8*=_0x112e64,_0x531ac8+=_0xff4a1e[_0x5aa108(0x839)]/$gameParty[_0x5aa108(0x41f)]()[_0x5aa108(0x8db)]/0x2);let _0xbfec10=Math[_0x5aa108(0x2ca)](this[_0x5aa108(0x71d)](_0x112e64,_0x30766e,_0xff4a1e));_0x30766e[_0x5aa108(0x7cf)](_0x531ac8,_0xbfec10),this[_0x5aa108(0x503)](_0x30766e,0x1),_0x30766e[_0x5aa108(0xb4c)](),this[_0x5aa108(0x12a)](),this[_0x5aa108(0x48d)]();},Window_BattleStatus['prototype'][_0x4b7b09(0x71d)]=function(_0x1ad182,_0x4177d3,_0x369e0a){const _0x496ed3=_0x4b7b09,_0xf502ff=VisuMZ[_0x496ed3(0x6ce)][_0x496ed3(0xb41)]['BattleLayout'],_0x5232f6=this['battleLayoutStyle']();if(_0x5232f6==='xp'){const _0x153820=_0xf502ff[_0x496ed3(0x26e)];switch(_0x153820['toLowerCase']()['trim']()){case _0x496ed3(0xa0f):return _0x369e0a[_0x496ed3(0xb65)]-_0x4177d3['_shadowSprite'][_0x496ed3(0xb65)]/0x4;break;case _0x496ed3(0x5a6):const _0x115916=_0xf502ff[_0x496ed3(0x37a)];return(_0x369e0a['height']+(_0x4177d3['height']||_0x115916))/0x2;break;case'top':return 0x0;case _0x496ed3(0x639):default:return this[_0x496ed3(0xa31)](_0x369e0a);break;}}else{if(_0x5232f6==='portrait'){}}return _0x4177d3['height'];},Sprite_Name['prototype'][_0x4b7b09(0x1b6)]=function(){return 0x24;},Sprite_Name[_0x4b7b09(0x4d2)][_0x4b7b09(0x283)]=function(){const _0x58bbf5=_0x4b7b09,_0x5ecdda=this[_0x58bbf5(0x639)](),_0x542245=this[_0x58bbf5(0x2b9)](),_0x443df0=this['bitmapHeight']();this[_0x58bbf5(0x63f)](),this['bitmap']['clear'](),this[_0x58bbf5(0x680)][_0x58bbf5(0x206)](_0x5ecdda,0x4,0x0,_0x542245,_0x443df0,_0x58bbf5(0x48f));},Bitmap[_0x4b7b09(0x4d2)]['drawTextTopAligned']=function(_0x36c485,_0x47dcc2,_0x2df58c,_0x46dbea,_0x1ea16d,_0x315e4f){const _0x1c231e=_0x4b7b09,_0x104eac=this[_0x1c231e(0x37d)],_0x1d8516=_0x104eac[_0x1c231e(0x66b)];_0x46dbea=_0x46dbea||0xffffffff;let _0x311252=_0x47dcc2,_0x124434=Math[_0x1c231e(0x2ca)](_0x2df58c+0x18/0x2+this[_0x1c231e(0x109)]*0.35);if(_0x315e4f===_0x1c231e(0x5a6)){if(_0x1c231e(0xaf4)==='rAPYU'){_0x2fced7=_0x282660||0x1,_0x371267--;const _0x35e2d1=this[_0x1c231e(0x7c0)](),_0x1de8d9=_0x35e2d1[_0x139b2b]?_0x35e2d1[_0x50c88a][_0x1c231e(0x162)]:0x0;return _0x1046ac[_0x1c231e(0x7d4)][_0x1de8d9];}else _0x311252+=_0x46dbea/0x2;}_0x315e4f===_0x1c231e(0x2f1)&&(_0x311252+=_0x46dbea),_0x104eac[_0x1c231e(0x8c6)](),_0x104eac[_0x1c231e(0x372)]=this[_0x1c231e(0xa5a)](),_0x104eac[_0x1c231e(0x830)]=_0x315e4f,_0x104eac[_0x1c231e(0xad4)]='alphabetic',_0x104eac[_0x1c231e(0x66b)]=0x1,this['_drawTextOutline'](_0x36c485,_0x311252,_0x124434,_0x46dbea),_0x104eac[_0x1c231e(0x66b)]=_0x1d8516,this[_0x1c231e(0xa65)](_0x36c485,_0x311252,_0x124434,_0x46dbea),_0x104eac[_0x1c231e(0x9cb)](),this['_baseTexture'][_0x1c231e(0xce)]();},Window_BattleStatus[_0x4b7b09(0x4d2)][_0x4b7b09(0xa31)]=function(_0x2ddcc4){const _0x47b578=_0x4b7b09;return this[_0x47b578(0xab9)](_0x2ddcc4)-this['gaugeLineHeight']();},Window_BattleStatus['prototype'][_0x4b7b09(0x4a6)]=function(_0xdc306b){const _0xf9d54d=_0x4b7b09;if(!VisuMZ['BattleCore'][_0xf9d54d(0xb41)][_0xf9d54d(0x8e4)][_0xf9d54d(0x3b3)])return;const _0x1cb47c=this[_0xf9d54d(0x724)](_0xdc306b),_0x4a4e6e=this['itemRect'](_0xdc306b);_0x4a4e6e[_0xf9d54d(0x839)]=ImageManager[_0xf9d54d(0x149)],_0x4a4e6e[_0xf9d54d(0xb65)]-=0x2,this['drawActorFace'](_0x1cb47c,_0x4a4e6e['x']+0x1,_0x4a4e6e['y']+0x1,_0x4a4e6e[_0xf9d54d(0x839)],_0x4a4e6e['height']);},Window_BattleStatus[_0x4b7b09(0x4d2)]['drawItemStatusListStyle']=function(_0x25f6d8){const _0x1fe498=_0x4b7b09,_0x3c0e1e=VisuMZ[_0x1fe498(0x6ce)][_0x1fe498(0xb41)][_0x1fe498(0x8e4)],_0x4e70a4=$dataSystem[_0x1fe498(0x32a)]?0x4:0x3,_0x2660de=_0x4e70a4*0x80+(_0x4e70a4-0x1)*0x8+0x4,_0xf0ad56=this[_0x1fe498(0x724)](_0x25f6d8),_0x331b94=this[_0x1fe498(0x653)](_0x25f6d8);let _0x32d32c=_0x331b94['x']+this['padding'];if(_0x3c0e1e[_0x1fe498(0x3b3)])_0x1fe498(0xa1e)==='JKIcD'?this['makeBattleCommand'](_0x485e02[_0x1fe498(0x2c5)]()['trim']()):_0x32d32c=_0x331b94['x']+ImageManager['faceWidth']+0x8;else{if(_0x1fe498(0x666)!=='bxsOT')_0x32d32c+=ImageManager[_0x1fe498(0x3e0)];else{const _0xa9c39=this[_0x1fe498(0x1b4)][_0x1fe498(0x680)];if(!_0xa9c39)return;const _0x4a18a1=_0xa9c39['width'];let _0x4e45f0=_0xa9c39['height'];if(this[_0x1fe498(0x6a7)][_0x1fe498(0x44c)]()){if(this[_0x1fe498(0x93b)])_0x4e45f0=_0x5df033[_0x1fe498(0x90d)](0x0,this[_0x1fe498(0x93b)]['height']-0x4);}this['_mainSprite']['setFrame'](0x0,0x0,_0x4a18a1,_0x4e45f0),this[_0x1fe498(0x428)](0x0,0x0,_0x4a18a1,_0x4e45f0);}}const _0x4e0276=Math[_0x1fe498(0x2ca)](Math[_0x1fe498(0x5e3)](_0x331b94['x']+_0x331b94[_0x1fe498(0x839)]-_0x2660de,_0x32d32c)),_0x267a78=Math[_0x1fe498(0x2ca)](_0x331b94['y']+(_0x331b94['height']-Sprite_Name['prototype'][_0x1fe498(0x1b6)]())/0x2),_0xb8ddfd=Math[_0x1fe498(0x2ca)](_0x4e0276-ImageManager[_0x1fe498(0x3e0)]/0x2-0x4),_0x588727=Math['round'](_0x331b94['y']+(_0x331b94[_0x1fe498(0xb65)]-ImageManager[_0x1fe498(0x296)])/0x2+ImageManager[_0x1fe498(0x296)]/0x2);let _0x4c0d63=_0x4e0276+0x88;const _0x40352c=_0x267a78;this[_0x1fe498(0x8ee)](_0xf0ad56,_0x4e0276-0x4+(_0x3c0e1e[_0x1fe498(0x94f)]||0x0),_0x267a78+(_0x3c0e1e['TpbGaugeOffsetY']||0x0)),this[_0x1fe498(0x8ac)](_0xf0ad56,_0x4e0276+(_0x3c0e1e[_0x1fe498(0x2ec)]||0x0),_0x267a78+(_0x3c0e1e[_0x1fe498(0x62f)]||0x0)),this[_0x1fe498(0x1d1)](_0xf0ad56,_0xb8ddfd+(_0x3c0e1e['StateIconOffsetX']||0x0),_0x588727+(_0x3c0e1e[_0x1fe498(0x3cf)]||0x0)),this[_0x1fe498(0x5b7)](_0xf0ad56,'hp',_0x4c0d63+0x88*0x0+(_0x3c0e1e[_0x1fe498(0x9ce)]||0x0),_0x40352c+(_0x3c0e1e['HpGaugeOffsetY']||0x0)),this['placeGauge'](_0xf0ad56,'mp',_0x4c0d63+0x88*0x1+(_0x3c0e1e[_0x1fe498(0xa6b)]||0x0),_0x40352c+(_0x3c0e1e[_0x1fe498(0x264)]||0x0)),$dataSystem[_0x1fe498(0x32a)]&&this[_0x1fe498(0x5b7)](_0xf0ad56,'tp',_0x4c0d63+0x88*0x2+(_0x3c0e1e['TpGaugeOffsetX']||0x0),_0x40352c+(_0x3c0e1e[_0x1fe498(0xa6d)]||0x0));},Window_BattleStatus[_0x4b7b09(0x4d2)]['drawItemImageXPStyle']=function(_0x366fef){const _0x4511ab=_0x4b7b09;if(!$gameSystem[_0x4511ab(0x43d)]())return;VisuMZ[_0x4511ab(0x6ce)][_0x4511ab(0x404)][_0x4511ab(0x4ad)](this,_0x366fef);},Window_BattleStatus[_0x4b7b09(0x4d2)][_0x4b7b09(0x640)]=function(_0x5460c5){const _0x44bd8f=_0x4b7b09,_0x1ccce4=VisuMZ[_0x44bd8f(0x6ce)]['Settings'][_0x44bd8f(0x8e4)],_0x1e0756=this[_0x44bd8f(0x724)](_0x5460c5),_0x1b233c=this['itemRect'](_0x5460c5),_0x4e7331=Math[_0x44bd8f(0x2ca)](_0x1b233c['x']+(_0x1b233c[_0x44bd8f(0x839)]-0x80)/0x2),_0x390dd0=this[_0x44bd8f(0xa31)](_0x1b233c);let _0xf164a5=_0x4e7331-ImageManager[_0x44bd8f(0x3e0)]/0x2-0x4,_0x5c98f9=_0x390dd0+ImageManager['iconHeight']/0x2;if(_0xf164a5-ImageManager[_0x44bd8f(0x3e0)]/0x2<_0x1b233c['x']){if('RzjUn'!==_0x44bd8f(0x85d)){if(!this[_0x44bd8f(0x30d)])return;if(this[_0x44bd8f(0x6a7)]&&this[_0x44bd8f(0x6a7)]['svBattlerShadowVisible']()){const _0x5c0aff=this[_0x44bd8f(0x30d)][_0x44bd8f(0x680)];this[_0x44bd8f(0x30d)]['setFrame'](0x0,0x0,_0x5c0aff[_0x44bd8f(0x839)],_0x5c0aff[_0x44bd8f(0xb65)]);}else this[_0x44bd8f(0x30d)][_0x44bd8f(0x428)](0x0,0x0,0x0,0x0);}else _0xf164a5=_0x4e7331+ImageManager['iconWidth']/0x2-0x4,_0x5c98f9=_0x390dd0-ImageManager['iconHeight']/0x2;}const _0x4e5b02=_0x4e7331,_0x32448a=this[_0x44bd8f(0xab9)](_0x1b233c);this[_0x44bd8f(0x8ee)](_0x1e0756,_0x4e7331+(_0x1ccce4[_0x44bd8f(0x94f)]||0x0),_0x390dd0+(_0x1ccce4[_0x44bd8f(0x8dc)]||0x0)),this[_0x44bd8f(0x8ac)](_0x1e0756,_0x4e7331+(_0x1ccce4['NameOffsetX']||0x0),_0x390dd0+(_0x1ccce4[_0x44bd8f(0x62f)]||0x0)),this[_0x44bd8f(0x1d1)](_0x1e0756,_0xf164a5+(_0x1ccce4['StateIconOffsetX']||0x0),_0x5c98f9+(_0x1ccce4[_0x44bd8f(0x3cf)]||0x0)),this[_0x44bd8f(0x5b7)](_0x1e0756,'hp',_0x4e5b02+(_0x1ccce4[_0x44bd8f(0x9ce)]||0x0),_0x32448a+(_0x1ccce4[_0x44bd8f(0x185)]||0x0)),this[_0x44bd8f(0x5b7)](_0x1e0756,'mp',_0x4e5b02+(_0x1ccce4['MpGaugeOffsetX']||0x0),_0x32448a+this[_0x44bd8f(0x6d6)]()+(_0x1ccce4[_0x44bd8f(0x264)]||0x0)),$dataSystem[_0x44bd8f(0x32a)]&&this[_0x44bd8f(0x5b7)](_0x1e0756,'tp',_0x4e5b02+(_0x1ccce4['TpGaugeOffsetX']||0x0),_0x32448a+this[_0x44bd8f(0x6d6)]()*0x2+(_0x1ccce4['TpGaugeOffsetY']||0x0));},Window_BattleStatus[_0x4b7b09(0x4d2)][_0x4b7b09(0xa9b)]=function(_0x303670){const _0x25ce7e=_0x4b7b09;if(!VisuMZ[_0x25ce7e(0x6ce)][_0x25ce7e(0xb41)][_0x25ce7e(0x8e4)][_0x25ce7e(0x241)])return![];if(_0x303670[_0x25ce7e(0xb53)]())return!![];return Imported[_0x25ce7e(0x969)]&&_0x303670[_0x25ce7e(0x97b)]();},Game_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0x218)]=function(){const _0x1e775a=_0x4b7b09;if(this[_0x1e775a(0x724)]()['note'][_0x1e775a(0x2c1)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i)){if(_0x1e775a(0x291)==='krrcE')return Number(RegExp['$1']);else for(const _0x57d3d1 of _0xfd5480[_0x1e775a(0x577)]){[0x6c,0x198]['includes'](_0x57d3d1[_0x1e775a(0x936)])&&(_0x3b82f3+='\x0a',_0x171233+=_0x57d3d1[_0x1e775a(0x671)][0x0]);}}else{if(this['actor']()[_0x1e775a(0xaf1)][_0x1e775a(0x2c1)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x4b7b09(0x4d2)][_0x4b7b09(0xb8d)]=function(){const _0x13e76e=_0x4b7b09;if(this[_0x13e76e(0x724)]()['note'][_0x13e76e(0x2c1)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x13e76e(0xaf1)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x4b7b09(0x4d2)][_0x4b7b09(0x228)]=function(_0x3f1285){const _0x465b07=_0x4b7b09,_0x920164=this[_0x465b07(0x724)](_0x3f1285);if(this[_0x465b07(0xa9b)](_0x920164)){const _0x1e277d=_0x465b07(0x814)[_0x465b07(0xace)](_0x920164[_0x465b07(0x7f1)]()),_0x489209=this[_0x465b07(0xa96)](_0x1e277d,Sprite),_0xf5bb8e=_0x920164[_0x465b07(0x92b)]();_0xf5bb8e!==''?'jStBg'==='jStBg'?_0x489209[_0x465b07(0x680)]=ImageManager[_0x465b07(0x82f)](_0xf5bb8e):(_0x164ee7=_0x406bce['boxWidth']/0x2,_0x3f8ddd=_0x4c92f3['boxHeight']/0x2):_0x489209['bitmap']=ImageManager[_0x465b07(0x8d6)];const _0x9b916d=this['itemRect'](_0x3f1285);_0x489209[_0x465b07(0x792)]['x']=0.5,_0x489209[_0x465b07(0x792)]['y']=0x1;let _0xb63127=Math[_0x465b07(0x2ca)](_0x9b916d['x']+_0x9b916d[_0x465b07(0x839)]/0x2)+this['padding'];_0xb63127+=_0x920164[_0x465b07(0x218)]();let _0x10a139=Math[_0x465b07(0x2ca)](this[_0x465b07(0xb65)]);_0x10a139+=_0x920164[_0x465b07(0xb8d)](),_0x489209[_0x465b07(0x4c2)](_0xb63127,_0x10a139);const _0x3c7465=VisuMZ[_0x465b07(0x6ce)][_0x465b07(0xb41)][_0x465b07(0x8e4)][_0x465b07(0x314)];_0x489209[_0x465b07(0x785)]['x']=_0x3c7465,_0x489209['scale']['y']=_0x3c7465,_0x489209[_0x465b07(0xb4c)]();}else{if(_0x465b07(0x6ee)!==_0x465b07(0x6ee))this[_0x465b07(0x480)][_0x465b07(0x2d1)][_0x465b07(0x785)]['x']=-0x1/(this['scale']['x']||0.001),this[_0x465b07(0x480)][_0x465b07(0x2d1)]['scale']['y']=0x1/(this[_0x465b07(0x785)]['y']||0.001);else{const _0x7045cf=this[_0x465b07(0x28e)](_0x3f1285);this[_0x465b07(0x325)](_0x920164,_0x7045cf['x'],_0x7045cf['y'],_0x7045cf['width'],_0x7045cf[_0x465b07(0xb65)]);}}},Window_BattleStatus[_0x4b7b09(0x4d2)]['createInnerPortrait']=function(_0x2cf27f,_0x43b908){const _0xaa1783=_0x4b7b09,_0x79e21c=this[_0xaa1783(0x171)];if(_0x79e21c[_0x2cf27f])return _0x79e21c[_0x2cf27f];else{const _0x8db45b=new _0x43b908();return _0x79e21c[_0x2cf27f]=_0x8db45b,this['addChildToBack'](_0x8db45b),this[_0xaa1783(0x153)](this[_0xaa1783(0x48a)]),_0x8db45b;}},Window_BattleStatus[_0x4b7b09(0x4d2)][_0x4b7b09(0x521)]=function(){const _0x3eef05=_0x4b7b09;this[_0x3eef05(0x79b)](),this[_0x3eef05(0x75b)](),Window_StatusBase[_0x3eef05(0x4d2)]['_createClientArea'][_0x3eef05(0x4ad)](this),this['_createDamageContainer']();},Window_BattleStatus['prototype'][_0x4b7b09(0x79b)]=function(){const _0x298b68=_0x4b7b09;this[_0x298b68(0x48a)]=new Sprite(),this[_0x298b68(0x48a)][_0x298b68(0x343)]=[new PIXI['filters'][(_0x298b68(0xee))]()],this[_0x298b68(0x48a)]['filterArea']=new Rectangle(),this[_0x298b68(0x48a)][_0x298b68(0x4c2)](this[_0x298b68(0x222)],this[_0x298b68(0x222)]),this[_0x298b68(0x420)](this['_cursorArea']);},Window_BattleStatus[_0x4b7b09(0x4d2)][_0x4b7b09(0x75b)]=function(){const _0x3fdbfe=_0x4b7b09;this['_effectsContainer']=new Sprite(),this[_0x3fdbfe(0x420)](this[_0x3fdbfe(0x24e)]);},Window_BattleStatus['prototype'][_0x4b7b09(0x12a)]=function(){const _0x5c09db=_0x4b7b09;this[_0x5c09db(0x24e)]&&this[_0x5c09db(0x420)](this[_0x5c09db(0x24e)]);},Window_BattleStatus[_0x4b7b09(0x4d2)][_0x4b7b09(0x35d)]=function(){const _0x33b45f=_0x4b7b09;this[_0x33b45f(0x6d7)]=new Sprite(),this[_0x33b45f(0x420)](this[_0x33b45f(0x6d7)]);},Window_BattleStatus[_0x4b7b09(0x4d2)]['_createCursorSprite']=function(){const _0x33e45a=_0x4b7b09;this['_cursorSprite']=new Sprite();for(let _0x4876b0=0x0;_0x4876b0<0x9;_0x4876b0++){this[_0x33e45a(0x40a)][_0x33e45a(0x420)](new Sprite());}this[_0x33e45a(0x48a)][_0x33e45a(0x420)](this['_cursorSprite']);},Window_BattleStatus['prototype'][_0x4b7b09(0x873)]=function(){const _0x50370e=_0x4b7b09;Window_StatusBase[_0x50370e(0x4d2)][_0x50370e(0x873)][_0x50370e(0x4ad)](this),this[_0x50370e(0x574)]();},Window_BattleStatus[_0x4b7b09(0x4d2)][_0x4b7b09(0x574)]=function(){const _0x2619ab=_0x4b7b09,_0xac95c0=this[_0x2619ab(0x222)];this[_0x2619ab(0x48a)][_0x2619ab(0x4c2)](_0xac95c0,_0xac95c0),this[_0x2619ab(0x48a)]['x']=_0xac95c0-this['origin']['x'],this[_0x2619ab(0x48a)]['y']=_0xac95c0-this[_0x2619ab(0x3fa)]['y'],this[_0x2619ab(0xa01)]>0x0&&this['innerHeight']>0x0?_0x2619ab(0x5c1)!==_0x2619ab(0x134)?this[_0x2619ab(0x48a)]['visible']=this[_0x2619ab(0x739)]():(_0x4ed889['prototype'][_0x2619ab(0x60d)][_0x2619ab(0x4ad)](this),this[_0x2619ab(0xa5b)]&&this[_0x2619ab(0xa5b)][_0x2619ab(0xce)](),_0xd657dd[_0x2619ab(0x9aa)]&&_0x4361ef[_0x2619ab(0xa85)]()):this[_0x2619ab(0x48a)][_0x2619ab(0xe2)]=![];},Window_BattleStatus[_0x4b7b09(0x4d2)]['_updateFilterArea']=function(){const _0x1fa496=_0x4b7b09;Window_StatusBase[_0x1fa496(0x4d2)][_0x1fa496(0x24b)][_0x1fa496(0x4ad)](this),this[_0x1fa496(0x9a1)]();},Window_BattleStatus[_0x4b7b09(0x4d2)][_0x4b7b09(0x9a1)]=function(){const _0xf354a6=_0x4b7b09,_0x1c2363=this['_cursorArea'][_0xf354a6(0x11f)][_0xf354a6(0x939)](new Point(0x0,0x0)),_0x56331b=this[_0xf354a6(0x48a)][_0xf354a6(0x648)];_0x56331b['x']=_0x1c2363['x']+this['origin']['x'],_0x56331b['y']=_0x1c2363['y']+this[_0xf354a6(0x3fa)]['y'],_0x56331b['width']=this[_0xf354a6(0xa01)],_0x56331b[_0xf354a6(0xb65)]=this['innerHeight'];},Window_BattleStatus[_0x4b7b09(0x4d2)]['refreshActorPortrait']=function(_0x5ef62a){const _0x571ac6=_0x4b7b09;if(this[_0x571ac6(0x1f7)]()!==_0x571ac6(0xb3e))return;this[_0x571ac6(0x228)](_0x5ef62a['index']());},Window_BattleStatus[_0x4b7b09(0x4d2)]['addDamageSprite']=function(_0x373708,_0x10d07c){const _0x20d8ed=_0x4b7b09;if(!this[_0x20d8ed(0x6d7)])return;if(!_0x373708)return;if(!_0x10d07c)return;const _0xbce8f2=this[_0x20d8ed(0x653)](_0x10d07c[_0x20d8ed(0x1b8)]());_0xbce8f2['x']+=_0xbce8f2[_0x20d8ed(0x839)]/0x2+this[_0x20d8ed(0x790)],_0x373708['x']=_0xbce8f2['x'],_0x373708['y']=_0xbce8f2['y'],this[_0x20d8ed(0x6d7)][_0x20d8ed(0x420)](_0x373708);},Window_BattleStatus[_0x4b7b09(0x4d2)][_0x4b7b09(0x3fe)]=function(_0x4cebb1){const _0x265c5a=_0x4b7b09;if(!this[_0x265c5a(0x6d7)])return;if(!_0x4cebb1)return;this['_damageContainer'][_0x265c5a(0x5c4)](_0x4cebb1);},Window_BattleStatus[_0x4b7b09(0x4d2)]['updateBorderStyle']=function(){const _0x3e4adf=_0x4b7b09;if(!this[_0x3e4adf(0x61b)]())return;if(!this[_0x3e4adf(0x7c8)])this[_0x3e4adf(0x294)]();this[_0x3e4adf(0x2c4)](),this[_0x3e4adf(0x88e)]();},Window_BattleStatus['prototype'][_0x4b7b09(0x61b)]=function(){const _0x13e7c8=_0x4b7b09;if(this[_0x13e7c8(0x492)]!==Window_BattleStatus)return![];if(!SceneManager[_0x13e7c8(0x18e)]())return![];return VisuMZ[_0x13e7c8(0x6ce)][_0x13e7c8(0xb41)]['BattleLayout'][_0x13e7c8(0xb8e)];},Window_BattleStatus['prototype']['createBorderStylePortraitSprite']=function(){const _0x5f4595=_0x4b7b09;this[_0x5f4595(0x7c8)]=new Sprite();const _0x188ccc=SceneManager[_0x5f4595(0x5ae)],_0x111e82=_0x188ccc[_0x5f4595(0x196)][_0x5f4595(0x853)](_0x188ccc[_0x5f4595(0xa1d)]);_0x188ccc[_0x5f4595(0x503)](this[_0x5f4595(0x7c8)],_0x111e82),this[_0x5f4595(0x7c8)][_0x5f4595(0x792)]['x']=0.5,this[_0x5f4595(0x7c8)][_0x5f4595(0x792)]['y']=0x1;const _0x476b7a=VisuMZ[_0x5f4595(0x6ce)][_0x5f4595(0xb41)]['BattleLayout']['PortraitScaleBorderStyle'];this[_0x5f4595(0x7c8)]['scale']['x']=_0x476b7a,this[_0x5f4595(0x7c8)]['scale']['y']=_0x476b7a,this[_0x5f4595(0x7c8)]['y']=this['y']+this[_0x5f4595(0xb65)],this[_0x5f4595(0xa7e)]=0x0;},Window_BattleStatus['prototype'][_0x4b7b09(0x2c4)]=function(){const _0x578c01=_0x4b7b09;this['_borderPortraitSprite'][_0x578c01(0xe2)]=BattleManager[_0x578c01(0x970)]();const _0x38b5f5=BattleManager[_0x578c01(0x724)](),_0x83e603=_0x38b5f5?_0x38b5f5[_0x578c01(0x92b)]()||'':'';if(_0x38b5f5===this[_0x578c01(0x7c8)][_0x578c01(0x724)]&&_0x83e603===this[_0x578c01(0x7c8)][_0x578c01(0x179)])return;this[_0x578c01(0x7c8)][_0x578c01(0x724)]=_0x38b5f5||this[_0x578c01(0x7c8)][_0x578c01(0x724)],this['_borderPortraitSprite'][_0x578c01(0x179)]=_0x83e603;if(!_0x38b5f5)return;else{if(_0x83e603===''){if(_0x578c01(0x2b8)===_0x578c01(0xb17))return this[_0x578c01(0x4b0)]()[_0x578c01(0x31e)](_0x9c2255=>_0x9c2255['isSpinning']());else{this['_borderPortraitSprite'][_0x578c01(0x680)]=ImageManager[_0x578c01(0x8d6)],this[_0x578c01(0x7c8)][_0x578c01(0x179)]='';return;}}else{const _0x4d3674=ImageManager[_0x578c01(0x82f)](_0x83e603);this['_borderPortraitSprite']['opacity']=0x0,_0x4d3674[_0x578c01(0x4a8)](this[_0x578c01(0x4f6)][_0x578c01(0x165)](this,_0x4d3674));}}},Window_BattleStatus[_0x4b7b09(0x4d2)][_0x4b7b09(0x4f6)]=function(_0x252388){const _0x44fbc1=_0x4b7b09;this['_borderPortraitDuration']=0x14,this[_0x44fbc1(0x7c8)]['bitmap']=_0x252388;SceneManager[_0x44fbc1(0x5ae)][_0x44fbc1(0x8e7)]()?(this[_0x44fbc1(0x7c8)]['x']=0x0,this[_0x44fbc1(0x259)]=Math[_0x44fbc1(0x83c)](_0x252388['width']/0x2)):(this[_0x44fbc1(0x7c8)]['x']=this[_0x44fbc1(0x839)],this[_0x44fbc1(0x259)]=this[_0x44fbc1(0x839)]*0x3/0x4);this[_0x44fbc1(0x7c8)][_0x44fbc1(0x5a0)]=0x0,this[_0x44fbc1(0x7c8)]['y']=this['y']+this[_0x44fbc1(0xb65)];const _0x5e5d5a=BattleManager['actor']();_0x5e5d5a&&(this[_0x44fbc1(0x259)]+=_0x5e5d5a[_0x44fbc1(0x218)](),this[_0x44fbc1(0x7c8)]['y']+=_0x5e5d5a[_0x44fbc1(0xb8d)]());},Window_BattleStatus['prototype'][_0x4b7b09(0x88e)]=function(){const _0xdcad00=_0x4b7b09;if(this[_0xdcad00(0xa7e)]>0x0){const _0x1cb400=this['_borderPortraitDuration'],_0x1816c7=this['_borderPortraitSprite'];_0x1816c7['x']=(_0x1816c7['x']*(_0x1cb400-0x1)+this[_0xdcad00(0x259)])/_0x1cb400,_0x1816c7[_0xdcad00(0x5a0)]=(_0x1816c7[_0xdcad00(0x5a0)]*(_0x1cb400-0x1)+0xff)/_0x1cb400,this[_0xdcad00(0xa7e)]--;}},Window_BattleStatus[_0x4b7b09(0x4d2)][_0x4b7b09(0x9b8)]=function(){const _0x3cce01=_0x4b7b09;return;this['_effectsContainer']&&(this[_0x3cce01(0x24e)]['x']=this['x'],this[_0x3cce01(0x24e)]['y']=this['y']),this[_0x3cce01(0x6d7)]&&(this[_0x3cce01(0x6d7)]['x']=this['x'],this['_damageContainer']['y']=this['y']);},Window_BattleStatus[_0x4b7b09(0x4d2)]['createAttachmentSprites']=function(){const _0x2c9120=_0x4b7b09,_0x33c44f=VisuMZ[_0x2c9120(0x6ce)][_0x2c9120(0xb41)]['BattleLayout'];if(_0x33c44f[_0x2c9120(0x24f)]){if('gqfkY'==='gqfkY'){const _0x4da0e2=new Sprite();_0x4da0e2[_0x2c9120(0x680)]=ImageManager[_0x2c9120(0x6e0)](_0x33c44f['StatusWindowAttachmentBack']),_0x4da0e2['x']=_0x33c44f['StatusWindowAttachmentBackOffsetX']||0x0,_0x4da0e2['y']=_0x33c44f['StatusWindowAttachmentBackOffsetY']||0x0,this[_0x2c9120(0x153)](_0x4da0e2),this[_0x2c9120(0xa69)]=_0x4da0e2;}else return _0x13c867;}if(_0x33c44f[_0x2c9120(0x122)]){const _0x458dfa=new Sprite();_0x458dfa[_0x2c9120(0x680)]=ImageManager['loadSystem'](_0x33c44f[_0x2c9120(0x122)]),_0x458dfa['x']=_0x33c44f[_0x2c9120(0xb09)]||0x0,_0x458dfa['y']=_0x33c44f[_0x2c9120(0x95f)]||0x0,this[_0x2c9120(0x420)](_0x458dfa),this[_0x2c9120(0x25b)]=_0x458dfa;}},Window_BattleStatus[_0x4b7b09(0x4d2)][_0x4b7b09(0x48d)]=function(){const _0x36e756=_0x4b7b09;this[_0x36e756(0x25b)]&&this[_0x36e756(0x420)](this[_0x36e756(0x25b)]),this[_0x36e756(0xa69)]&&this[_0x36e756(0x153)](this[_0x36e756(0xa69)]);},Window_BattleActor[_0x4b7b09(0x4d2)][_0x4b7b09(0x3a9)]=function(){const _0x41db40=_0x4b7b09;return Window_BattleStatus[_0x41db40(0x4d2)][_0x41db40(0x3a9)]['call'](this)&&this[_0x41db40(0x172)]();},Window_BattleActor['prototype'][_0x4b7b09(0x172)]=function(){const _0x5512b9=_0x4b7b09,_0x11d4a8=BattleManager[_0x5512b9(0x6df)](),_0x504a45=this[_0x5512b9(0x724)](this['index']());if(!_0x11d4a8)return!![];if(!_0x11d4a8['item']())return!![];const _0x55ae2e=_0x11d4a8[_0x5512b9(0x6e3)]()[_0x5512b9(0xaf1)];if(_0x55ae2e['match'](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x504a45===BattleManager['actor']())return![];}return!![];},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x53d)]=Window_BattleEnemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x827)],Window_BattleEnemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x827)]=function(_0x18fbd8){const _0x3a3297=_0x4b7b09;this['_lastEnemy']=null,VisuMZ[_0x3a3297(0x6ce)][_0x3a3297(0x53d)][_0x3a3297(0x4ad)](this,_0x18fbd8);},Window_BattleEnemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x2d2)]=function(){const _0x166102=_0x4b7b09;return this[_0x166102(0xa58)]();},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x54e)]=Window_BattleEnemy[_0x4b7b09(0x4d2)][_0x4b7b09(0xb4c)],Window_BattleEnemy[_0x4b7b09(0x4d2)][_0x4b7b09(0xb4c)]=function(){const _0x1255c0=_0x4b7b09;VisuMZ[_0x1255c0(0x6ce)][_0x1255c0(0x54e)][_0x1255c0(0x4ad)](this),this['y']=Graphics['height']*0xa;},Window_BattleEnemy[_0x4b7b09(0x4d2)]['validTargets']=function(){const _0x5f31b8=_0x4b7b09;return $gameTroop[_0x5f31b8(0x9d0)]()[_0x5f31b8(0x8ea)](0x0);},Window_BattleEnemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x75a)]=function(){const _0x5e9a50=_0x4b7b09;this[_0x5e9a50(0x59d)]=this[_0x5e9a50(0x432)](),this[_0x5e9a50(0x336)](),Window_Selectable['prototype']['refresh'][_0x5e9a50(0x4ad)](this);},Window_BattleEnemy[_0x4b7b09(0x4d2)]['sortEnemies']=function(){const _0x2fb465=_0x4b7b09;this[_0x2fb465(0x59d)][_0x2fb465(0x90e)]((_0x56a4cb,_0x3569cf)=>{const _0x126087=_0x2fb465;if(_0x56a4cb[_0x126087(0xe0)]()[_0x126087(0x226)]===_0x3569cf[_0x126087(0xe0)]()[_0x126087(0x226)])return _0x56a4cb[_0x126087(0xe0)]()[_0x126087(0x518)]-_0x3569cf[_0x126087(0xe0)]()[_0x126087(0x518)];else{if('sBVgC'!=='sHhgd')return _0x56a4cb[_0x126087(0xe0)]()[_0x126087(0x226)]-_0x3569cf[_0x126087(0xe0)]()[_0x126087(0x226)];else _0x158391=_0x4b8785>=_0x3cc3e0?_0x3b860c:_0x4ad37c;}}),SceneManager[_0x2fb465(0x597)]()&&('ArMPd'!=='esNjG'?this[_0x2fb465(0x59d)]['reverse']():(_0x3a32a9['x']+=_0x4f7bb9['PopupShiftX']*_0x169ad3,_0x1121be['y']+=_0x1b62a4[_0x2fb465(0x77e)]));},Window_BattleEnemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x98b)]=function(){const _0x54281c=_0x4b7b09,_0xec6f52=VisuMZ[_0x54281c(0x6ce)][_0x54281c(0xb41)]['Enemy'];if(_0xec6f52['LastSelected'])this[_0x54281c(0xb18)]();else{if(_0x54281c(0x467)==='TTFcx')this[_0x54281c(0x6d0)]();else{if(!_0x4cab19[_0x54281c(0x18e)]())return;if(!_0xaeac67[_0x54281c(0x91f)])return;_0x217e81[_0x54281c(0x463)]=!![];}}},Window_BattleEnemy[_0x4b7b09(0x4d2)][_0x4b7b09(0xb18)]=function(){const _0x6fdac4=_0x4b7b09;if(this['_lastEnemy']&&this[_0x6fdac4(0x59d)][_0x6fdac4(0x382)](this['_lastEnemy'])){if(_0x6fdac4(0x622)===_0x6fdac4(0x622)){const _0x26be62=this['_enemies'][_0x6fdac4(0x853)](this[_0x6fdac4(0xd4)]);this[_0x6fdac4(0x606)](_0x26be62);}else _0x1dc608[_0x6fdac4(0x6ce)][_0x6fdac4(0xb41)]['HpGauge'][_0x6fdac4(0x921)]&&this[_0x6fdac4(0x720)](),_0x9942b0[_0x6fdac4(0x6ce)][_0x6fdac4(0x847)][_0x6fdac4(0x4ad)](this);}else this['autoSelectPriority']();},Window_BattleEnemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x6d0)]=function(){const _0x3cd22a=_0x4b7b09,_0x2f28df=VisuMZ[_0x3cd22a(0x6ce)][_0x3cd22a(0xb41)]['Enemy'];let _0xec9c1e=![];if($gameSystem[_0x3cd22a(0x43d)]())_0xec9c1e=_0x2f28df['SideviewSelect'];else{if('DWXKY'===_0x3cd22a(0x668))return _0x19d77b[_0x3cd22a(0x4d2)][_0x3cd22a(0x988)]['call'](this);else _0xec9c1e=_0x2f28df['FrontViewSelect'];}this[_0x3cd22a(0x606)](_0xec9c1e?this[_0x3cd22a(0xa58)]()-0x1:0x0);},Window_BattleEnemy[_0x4b7b09(0x4d2)][_0x4b7b09(0x481)]=function(){const _0x301839=_0x4b7b09;Window_Selectable['prototype'][_0x301839(0x481)][_0x301839(0x4ad)](this),this[_0x301839(0xd4)]=this[_0x301839(0x4f9)]();},Window_BattleItem['prototype'][_0x4b7b09(0x382)]=function(_0x910fdc){if(!_0x910fdc)return![];return _0x910fdc['occasion']===0x0||_0x910fdc['occasion']===0x1;};function Window_AutoBattleCancel(){this['initialize'](...arguments);}Window_AutoBattleCancel[_0x4b7b09(0x4d2)]=Object['create'](Window_Base['prototype']),Window_AutoBattleCancel[_0x4b7b09(0x4d2)][_0x4b7b09(0x492)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x4b7b09(0x4d2)]['initialize']=function(_0x35ea11){const _0x4db64a=_0x4b7b09;Window_Base[_0x4db64a(0x4d2)][_0x4db64a(0x827)][_0x4db64a(0x4ad)](this,_0x35ea11),this[_0x4db64a(0x4c7)](this['bgType']()),this[_0x4db64a(0x75a)]();},Window_AutoBattleCancel[_0x4b7b09(0x4d2)][_0x4b7b09(0x17f)]=function(){const _0x3710dd=_0x4b7b09;return VisuMZ[_0x3710dd(0x6ce)][_0x3710dd(0xb41)]['AutoBattle'][_0x3710dd(0xb64)];},Window_AutoBattleCancel[_0x4b7b09(0x4d2)][_0x4b7b09(0x75a)]=function(){const _0x134224=_0x4b7b09;this['contents'][_0x134224(0x945)]();const _0x4868ec=VisuMZ[_0x134224(0x6ce)][_0x134224(0xb41)][_0x134224(0x632)][_0x134224(0x64b)],_0x445bba=_0x4868ec[_0x134224(0xace)](this[_0x134224(0x69d)](),this['cancelButtonText']()),_0x22d42d=this[_0x134224(0x286)](_0x445bba)['width'],_0xa73200=Math['floor']((this[_0x134224(0xa01)]-_0x22d42d)/0x2);this[_0x134224(0xb3b)](_0x445bba,_0xa73200,0x0,_0x22d42d);},Window_AutoBattleCancel[_0x4b7b09(0x4d2)][_0x4b7b09(0x69d)]=function(){const _0x3c4d1f=_0x4b7b09;if(Imported[_0x3c4d1f(0x490)]){if(_0x3c4d1f(0x5d5)!==_0x3c4d1f(0x5d5))_0x22221c['prototype'][_0x3c4d1f(0x737)][_0x3c4d1f(0x4ad)](this),this[_0x3c4d1f(0x5a0)]=0x0,this[_0x3c4d1f(0x292)]=null,this[_0x3c4d1f(0x792)]['x']=0.5,this[_0x3c4d1f(0x792)]['y']=0x0;else return TextManager[_0x3c4d1f(0x8be)]('ok');}else return VisuMZ['BattleCore'][_0x3c4d1f(0xb41)]['AutoBattle'][_0x3c4d1f(0x5ef)];},Window_AutoBattleCancel[_0x4b7b09(0x4d2)]['cancelButtonText']=function(){const _0xdfdb3e=_0x4b7b09;if(Imported[_0xdfdb3e(0x490)]){if('ndQuH'===_0xdfdb3e(0x884))return TextManager[_0xdfdb3e(0x8be)]('cancel');else this[_0xdfdb3e(0x9aa)]=null;}else return VisuMZ[_0xdfdb3e(0x6ce)][_0xdfdb3e(0xb41)][_0xdfdb3e(0x632)][_0xdfdb3e(0x912)];},Window_AutoBattleCancel[_0x4b7b09(0x4d2)][_0x4b7b09(0xce)]=function(){const _0x49d51a=_0x4b7b09;Window_Base[_0x49d51a(0x4d2)]['update'][_0x49d51a(0x4ad)](this),this[_0x49d51a(0x2b6)](),this[_0x49d51a(0x2b0)]();},Window_AutoBattleCancel[_0x4b7b09(0x4d2)][_0x4b7b09(0x2b6)]=function(){const _0x2783fa=_0x4b7b09;this['visible']=BattleManager[_0x2783fa(0xb33)];},Window_AutoBattleCancel['prototype']['updateCancel']=function(){const _0x152d60=_0x4b7b09;if(!BattleManager[_0x152d60(0xb33)])return;if(Input['isTriggered']('ok')||Input['isTriggered'](_0x152d60(0xb57))||TouchInput['isClicked']()||TouchInput[_0x152d60(0x6f7)]()){if(_0x152d60(0x691)!==_0x152d60(0x2ab))SoundManager['playCancel'](),BattleManager[_0x152d60(0xb33)]=![],Input[_0x152d60(0x945)](),TouchInput[_0x152d60(0x945)]();else{const _0x40c0f5=_0x4f3ce1[_0x5d8ff1[_0x152d60(0x29a)]],_0x4ab344=_0x40c0f5[_0x152d60(0x577)][_0x152d60(0x8db)]-0x2,_0x25f8b0=_0x40c0f5[_0x152d60(0x577)][_0x4ab344];if(_0x25f8b0&&_0x25f8b0[_0x152d60(0x936)]!==0xe6){const _0x34fd53={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x3ae35e=_0x40c0f5[_0x152d60(0x577)][_0x152d60(0x41a)]();_0x40c0f5['list'][_0x152d60(0x53b)](_0x34fd53),_0x40c0f5[_0x152d60(0x577)][_0x152d60(0x53b)](_0x3ae35e);}}}};function Window_EnemyName(){this['initialize'](...arguments);}Window_EnemyName[_0x4b7b09(0x4d2)]=Object[_0x4b7b09(0x1e1)](Window_StatusBase[_0x4b7b09(0x4d2)]),Window_EnemyName[_0x4b7b09(0x4d2)][_0x4b7b09(0x492)]=Window_EnemyName,Window_EnemyName['prototype'][_0x4b7b09(0x827)]=function(_0x42b02a){const _0xd40c35=_0x4b7b09;this[_0xd40c35(0x289)]=_0x42b02a,this[_0xd40c35(0x319)]='';const _0x478593=new Rectangle(0x0,0x0,Graphics[_0xd40c35(0x979)],this[_0xd40c35(0xad8)]()*0x4);Window_StatusBase[_0xd40c35(0x4d2)][_0xd40c35(0x827)][_0xd40c35(0x4ad)](this,_0x478593),this[_0xd40c35(0x4c7)](0x2),this[_0xd40c35(0x778)]=0x0;},Window_EnemyName[_0x4b7b09(0x4d2)]['updatePadding']=function(){const _0x289817=_0x4b7b09;this[_0x289817(0x790)]=0x0;},Window_EnemyName['prototype'][_0x4b7b09(0x4f9)]=function(){const _0x429d2d=_0x4b7b09;return $gameTroop[_0x429d2d(0x878)]()[this['_enemyID']];},Window_EnemyName['prototype'][_0x4b7b09(0xce)]=function(){const _0x245da5=_0x4b7b09;Window_StatusBase[_0x245da5(0x4d2)][_0x245da5(0xce)]['call'](this),this[_0x245da5(0x4f9)]()&&this['enemy']()['name']()!==this[_0x245da5(0x319)]&&(this[_0x245da5(0x319)]=this[_0x245da5(0x4f9)]()[_0x245da5(0x639)](),this[_0x245da5(0x75a)]()),this[_0x245da5(0x2de)](),this[_0x245da5(0xe4)]();},Window_EnemyName[_0x4b7b09(0x4d2)][_0x4b7b09(0x2de)]=function(){const _0x4aaf18=_0x4b7b09;if(!this[_0x4aaf18(0x4f9)]()){if(this[_0x4aaf18(0x778)]>0x0)this[_0x4aaf18(0x778)]-=0x10;}else{if(this[_0x4aaf18(0x4f9)]()[_0x4aaf18(0x44c)]()){if(this['contentsOpacity']>0x0)this[_0x4aaf18(0x778)]-=0x10;}else{if(SceneManager[_0x4aaf18(0x5ae)]['_enemyWindow']&&SceneManager[_0x4aaf18(0x5ae)]['_enemyWindow'][_0x4aaf18(0x661)]&&SceneManager[_0x4aaf18(0x5ae)][_0x4aaf18(0xa9a)]['_enemies']['includes'](this['enemy']())){if(_0x4aaf18(0x765)!==_0x4aaf18(0x765)){let _0x3edc7a=_0x4aaf18(0x221);if(this[_0x4aaf18(0x87c)](_0x3edc7a))return this[_0x4aaf18(0x91b)][_0x3edc7a];return this[_0x4aaf18(0x91b)][_0x3edc7a]=this[_0x4aaf18(0x2e6)](this[_0x4aaf18(0x724)]()),this[_0x4aaf18(0x91b)][_0x3edc7a];}else{if(this['contentsOpacity']<0xff)this[_0x4aaf18(0x778)]+=0x10;}}else this['contentsOpacity']>0x0&&(this[_0x4aaf18(0x778)]-=0x10);}}},Window_EnemyName[_0x4b7b09(0x4d2)]['updatePosition']=function(){const _0xc7e463=_0x4b7b09;if(!this[_0xc7e463(0x4f9)]())return;SceneManager[_0xc7e463(0x597)]()?_0xc7e463(0x9e1)===_0xc7e463(0x1bc)?(_0x3afcfd[_0xc7e463(0x6ce)]['Scene_Battle_createCancelButton'][_0xc7e463(0x4ad)](this),this[_0xc7e463(0x1f7)]()===_0xc7e463(0xad5)&&this[_0xc7e463(0x7a8)]()):this['x']=Graphics[_0xc7e463(0x979)]-this[_0xc7e463(0x4f9)]()[_0xc7e463(0xe0)]()['_baseX']:_0xc7e463(0x709)!==_0xc7e463(0x709)?this['_phase']=_0xc7e463(0x3de):this['x']=this[_0xc7e463(0x4f9)]()[_0xc7e463(0xe0)]()['_baseX'];this['x']-=Math[_0xc7e463(0x2ca)](this[_0xc7e463(0x839)]/0x2),this['y']=this[_0xc7e463(0x4f9)]()[_0xc7e463(0xe0)]()['_baseY']-Math[_0xc7e463(0x2ca)](this[_0xc7e463(0xad8)]()*1.5);const _0x1c209f=VisuMZ['BattleCore'][_0xc7e463(0xb41)]['Enemy'];this['x']+=_0x1c209f[_0xc7e463(0x2ec)]||0x0,this['y']+=_0x1c209f[_0xc7e463(0x62f)]||0x0;},Window_EnemyName['prototype'][_0x4b7b09(0x9a9)]=function(){const _0x2fb27b=_0x4b7b09;Window_Base[_0x2fb27b(0x4d2)][_0x2fb27b(0x9a9)][_0x2fb27b(0x4ad)](this),this[_0x2fb27b(0x80b)][_0x2fb27b(0x109)]=VisuMZ['BattleCore'][_0x2fb27b(0xb41)]['Enemy'][_0x2fb27b(0x1ff)];},Window_EnemyName['prototype'][_0x4b7b09(0x75a)]=function(){const _0x1d417c=_0x4b7b09;Window_StatusBase['prototype']['refresh'][_0x1d417c(0x4ad)](this),this[_0x1d417c(0x80b)]['clear']();if(!this[_0x1d417c(0x4f9)]())return;this['drawEnemyName']();},Window_EnemyName[_0x4b7b09(0x4d2)]['drawEnemyName']=function(){const _0x19bedf=_0x4b7b09;this[_0x19bedf(0x319)]=this['enemy']()['name']();const _0x12452b=this[_0x19bedf(0x286)](this[_0x19bedf(0x319)])[_0x19bedf(0x839)],_0x1c118f=Math[_0x19bedf(0x2ca)]((this['innerWidth']-_0x12452b)/0x2);this['drawTextEx'](this['_text'],_0x1c118f,0x0,_0x12452b+0x8);},Window_BattleLog[_0x4b7b09(0x4d2)]['maxLines']=function(){const _0x13f205=_0x4b7b09;return VisuMZ[_0x13f205(0x6ce)][_0x13f205(0xb41)][_0x13f205(0x34c)][_0x13f205(0x4d0)];},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x41e)]=function(){const _0x1d9a94=_0x4b7b09;return VisuMZ['BattleCore'][_0x1d9a94(0xb41)][_0x1d9a94(0x34c)][_0x1d9a94(0xb6d)];},Window_BattleLog[_0x4b7b09(0x4d2)]['backColor']=function(){const _0x1bf729=_0x4b7b09;return VisuMZ[_0x1bf729(0x6ce)][_0x1bf729(0xb41)][_0x1bf729(0x34c)]['BackColor'];},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0xb55)]=function(){return![];},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x994)]=function(_0xf20c5a,_0x5535d7){const _0x49f835=_0x4b7b09;this['unshift'](_0x49f835(0x8c4)),BattleManager['invokeAction'](_0xf20c5a,_0x5535d7),this['callNextMethod']();},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x8c4)]=function(){const _0x3405c1=_0x4b7b09;this[_0x3405c1(0x9bd)]();},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x410)]=function(_0x2ee8fd){const _0x137c11=_0x4b7b09,_0x6e26b8=Array[_0x137c11(0x4d2)]['slice'][_0x137c11(0x4ad)](arguments,0x1),_0x433bcf={'name':_0x2ee8fd,'params':_0x6e26b8},_0x5f1c92=this[_0x137c11(0x916)]['map'](_0xa4c67a=>_0xa4c67a['name'])[_0x137c11(0x853)](_0x137c11(0x8c4));_0x5f1c92>=0x0?this[_0x137c11(0x916)][_0x137c11(0x2ea)](_0x5f1c92,0x0,_0x433bcf):this[_0x137c11(0x916)][_0x137c11(0x410)](_0x433bcf);},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x53b)]=function(_0x368c3e){const _0xbe49cc=_0x4b7b09,_0x4a898a=Array[_0xbe49cc(0x4d2)][_0xbe49cc(0x8ea)][_0xbe49cc(0x4ad)](arguments,0x1);this[_0xbe49cc(0x916)][_0xbe49cc(0x53b)]({'name':_0x368c3e,'params':_0x4a898a});},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0xa84)]=function(){const _0x2d51d6=_0x4b7b09;if(!$gameTemp['isPlaytest']())return;console['log'](this[_0x2d51d6(0x916)][_0x2d51d6(0x78)](_0x5b73c4=>_0x5b73c4['name'])[_0x2d51d6(0x6af)]('\x0a'));},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x160)]=Window_BattleLog['prototype'][_0x4b7b09(0x75a)],Window_BattleLog['prototype'][_0x4b7b09(0x75a)]=function(){const _0xe68eb7=_0x4b7b09;this[_0xe68eb7(0x2f4)]=!![];},VisuMZ['BattleCore'][_0x4b7b09(0xb11)]=Window_BattleLog['prototype'][_0x4b7b09(0xce)],Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0xce)]=function(){const _0x100bca=_0x4b7b09;VisuMZ[_0x100bca(0x6ce)][_0x100bca(0xb11)]['call'](this);if(this[_0x100bca(0x2f4)])this['processRefresh']();},Window_BattleLog['prototype'][_0x4b7b09(0x2d9)]=function(){const _0x3fa866=_0x4b7b09;this[_0x3fa866(0x2f4)]=![],VisuMZ['BattleCore'][_0x3fa866(0x160)][_0x3fa866(0x4ad)](this);},Window_BattleLog['prototype'][_0x4b7b09(0x2b7)]=function(_0x444696){const _0x1432a3=_0x4b7b09;let _0x111cf2=VisuMZ[_0x1432a3(0x6ce)][_0x1432a3(0xb41)]['BattleLog'][_0x1432a3(0x154)][_0x1432a3(0x79d)]()[_0x1432a3(0x612)](),_0x19cf6d=this[_0x1432a3(0xb45)][_0x444696];if(_0x19cf6d[_0x1432a3(0x2c1)](/<LEFT>/i)){if('zvvzX'===_0x1432a3(0x4ba)){if(_0x426985[_0x1432a3(0x54c)]())return'TPB';return'DTB';}else _0x111cf2=_0x1432a3(0x48f);}else{if(_0x19cf6d[_0x1432a3(0x2c1)](/<CENTER>/i))_0x111cf2=_0x1432a3(0x5a6);else _0x19cf6d[_0x1432a3(0x2c1)](/<RIGHT>/i)&&(_0x1432a3(0x1f6)!=='nIFei'?_0x111cf2='right':(this[_0x1432a3(0x6bb)]=this['_shadowScaleX']??0x1,this['_shadowScaleY']=this[_0x1432a3(0x55e)]??0x1,this['_shadowSprite'][_0x1432a3(0x785)]['x']=this[_0x1432a3(0x265)][_0x1432a3(0x785)]['x']*this[_0x1432a3(0x6bb)],this[_0x1432a3(0x30d)][_0x1432a3(0x785)]['y']=this[_0x1432a3(0x265)][_0x1432a3(0x785)]['y']*this['_shadowScaleY']));}_0x19cf6d=_0x19cf6d[_0x1432a3(0x586)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x19cf6d=_0x19cf6d[_0x1432a3(0x586)](/\\I\[0\]/gi,'');const _0x1b6677=this[_0x1432a3(0x42b)](_0x444696);this['contents']['clearRect'](_0x1b6677['x'],_0x1b6677['y'],_0x1b6677[_0x1432a3(0x839)],_0x1b6677[_0x1432a3(0xb65)]);const _0x2b361e=this[_0x1432a3(0x286)](_0x19cf6d)[_0x1432a3(0x839)];let _0x4b9790=_0x1b6677['x'];if(_0x111cf2===_0x1432a3(0x5a6))_0x4b9790+=(_0x1b6677['width']-_0x2b361e)/0x2;else _0x111cf2===_0x1432a3(0x2f1)&&(_0x1432a3(0x858)===_0x1432a3(0x858)?_0x4b9790+=_0x1b6677[_0x1432a3(0x839)]-_0x2b361e:this[_0x1432a3(0x420)](this[_0x1432a3(0x25b)]));this[_0x1432a3(0xb3b)](_0x19cf6d,_0x4b9790,_0x1b6677['y'],_0x2b361e+0x8);},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x8a9)]=function(_0x39d867){const _0x35f72d=_0x4b7b09;this['_lines'][_0x35f72d(0x410)](_0x39d867),this['refresh'](),this['callNextMethod']();},Window_BattleLog['prototype'][_0x4b7b09(0x374)]=function(){const _0x4a62a6=_0x4b7b09;let _0x2257f8=![];switch(this[_0x4a62a6(0x756)]){case _0x4a62a6(0xa1c):_0x2257f8=this[_0x4a62a6(0xa5b)][_0x4a62a6(0x9c)]();break;case'movement':_0x2257f8=this[_0x4a62a6(0xa5b)][_0x4a62a6(0x7b3)]();break;case'animation':_0x2257f8=this[_0x4a62a6(0xa5b)][_0x4a62a6(0xf7)]();break;case _0x4a62a6(0x73d):_0x2257f8=this[_0x4a62a6(0xa5b)][_0x4a62a6(0x8ad)]();break;case _0x4a62a6(0x6cc):_0x2257f8=this[_0x4a62a6(0xa5b)][_0x4a62a6(0x400)]();break;case _0x4a62a6(0x5a0):_0x2257f8=this[_0x4a62a6(0xa5b)]['isAnyoneChangingOpacity']();break;}return!_0x2257f8&&(this[_0x4a62a6(0x756)]=''),_0x2257f8;},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x6cd)]=function(){const _0x152cc0=_0x4b7b09;this[_0x152cc0(0x63e)](_0x152cc0(0x3a8));},Window_BattleLog['prototype']['waitForFloat']=function(){const _0x240637=_0x4b7b09;this[_0x240637(0x63e)]('float');},Window_BattleLog['prototype'][_0x4b7b09(0x523)]=function(){const _0x4687cf=_0x4b7b09;this[_0x4687cf(0x63e)](_0x4687cf(0x6cc));},Window_BattleLog[_0x4b7b09(0x4d2)]['waitForOpacity']=function(){const _0x59df3c=_0x4b7b09;this[_0x59df3c(0x63e)]('opacity');},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x205)]=function(){const _0x17e61a=_0x4b7b09,_0x288d55=VisuMZ[_0x17e61a(0x6ce)]['Settings']['BattleLog'];if(!_0x288d55[_0x17e61a(0xfe)])return;this[_0x17e61a(0x410)](_0x17e61a(0x8a9),_0x288d55[_0x17e61a(0x99c)][_0x17e61a(0xace)]($gameTroop[_0x17e61a(0x3f6)]())),this['push'](_0x17e61a(0x800),_0x288d55['StartTurnWait']),this[_0x17e61a(0x410)](_0x17e61a(0x945));},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x347)]=function(_0x228f79,_0x571a31,_0x196541){const _0x365d79=_0x4b7b09;this['isCustomActionSequence'](_0x571a31)?BattleManager[_0x365d79(0x4dc)]():this[_0x365d79(0x13f)](_0x228f79,_0x571a31,_0x196541);},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x1ee)]=function(_0x58e234){const _0x47be32=_0x4b7b09;if(!SceneManager[_0x47be32(0x18e)]())return![];if(!_0x58e234)return![];if(!_0x58e234['item']())return![];if(_0x58e234['item']()[_0x47be32(0xaf1)]['match'](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager['checkAutoCustomActionSequenceNotetagEffect'](_0x58e234['item']()))return!![];return![];},Window_BattleLog[_0x4b7b09(0x4d2)]['usePremadeActionSequence']=function(_0x3d09e8,_0x5a42e8,_0x59f891){const _0x2eaf6e=_0x5a42e8['item']();this['setupActionSet'](_0x3d09e8,_0x5a42e8,_0x59f891),this['createEffectActionSet'](_0x3d09e8,_0x5a42e8,_0x59f891),this['finishActionSet'](_0x3d09e8,_0x5a42e8,_0x59f891);},Window_BattleLog[_0x4b7b09(0x4d2)]['displayAction']=function(_0x48ed50,_0x3b5a4c){const _0x12e529=_0x4b7b09,_0x2d1597=VisuMZ[_0x12e529(0x6ce)]['Settings'][_0x12e529(0x34c)];_0x2d1597['ActionCenteredName']&&this[_0x12e529(0x410)](_0x12e529(0x8a9),_0x12e529(0x64d)[_0x12e529(0xace)](DataManager[_0x12e529(0x1c1)](_0x3b5a4c)));if(DataManager[_0x12e529(0x620)](_0x3b5a4c)){if(_0x2d1597['ActionSkillMsg1'])this[_0x12e529(0x547)](_0x3b5a4c['message1'],_0x48ed50,_0x3b5a4c);if(_0x2d1597['ActionSkillMsg2'])this[_0x12e529(0x547)](_0x3b5a4c[_0x12e529(0x493)],_0x48ed50,_0x3b5a4c);}else{if(_0x2d1597[_0x12e529(0x18b)])this[_0x12e529(0x547)](TextManager[_0x12e529(0x925)],_0x48ed50,_0x3b5a4c);}},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x781)]=function(_0x3ff1d7,_0x505919,_0x2f8995){const _0x3a4d14=_0x4b7b09,_0x4967ac=_0x505919['item']();this[_0x3a4d14(0x7ec)](_0x3ff1d7,_0x4967ac),this[_0x3a4d14(0x410)](_0x3a4d14(0x74),_0x3ff1d7,_0x2f8995,!![]),this[_0x3a4d14(0x410)](_0x3a4d14(0x82e),_0x3ff1d7,_0x505919),this[_0x3a4d14(0x410)]('waitForMovement'),this[_0x3a4d14(0x410)]('performCastAnimation',_0x3ff1d7,_0x505919),this[_0x3a4d14(0x410)](_0x3a4d14(0x6cd));},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x6ab)]=function(_0x7b6a1b,_0x108704,_0x519e6e){const _0x21c32e=_0x4b7b09;if(this['isMeleeSingleTargetAction'](_0x108704))this[_0x21c32e(0x2f3)](_0x7b6a1b,_0x108704,_0x519e6e);else{if(this['isMeleeMultiTargetAction'](_0x108704))_0x21c32e(0x9a3)!==_0x21c32e(0x99d)?this[_0x21c32e(0x723)](_0x7b6a1b,_0x108704,_0x519e6e):this['setup'](_0x564894[_0x21c32e(0x577)],0x0);else _0x108704[_0x21c32e(0x843)]()?_0x21c32e(0x8fe)!==_0x21c32e(0x8fe)?this[_0x21c32e(0x9f4)]['close']():this[_0x21c32e(0x1a9)](_0x7b6a1b,_0x108704,_0x519e6e):this['wholeActionSet'](_0x7b6a1b,_0x108704,_0x519e6e);}},Window_BattleLog[_0x4b7b09(0x4d2)]['addMeleeReturnActionSet']=function(_0x4b3d85,_0x2195ba,_0x25d416,_0x352522){const _0x6da8d4=_0x4b7b09;if(_0x2195ba){const _0x84a246=_0x4b3d85[_0x6da8d4(0xe0)]();this['push'](_0x6da8d4(0x7a3),[_0x4b3d85],_0x25d416,_0x352522),this[_0x6da8d4(0x410)]('performMoveToPoint',_0x4b3d85,_0x84a246[_0x6da8d4(0x1e7)],_0x84a246[_0x6da8d4(0x14f)],_0x352522,![],_0x6da8d4(0x5cb)),this[_0x6da8d4(0x410)](_0x6da8d4(0x42f),[_0x4b3d85],_0x6da8d4(0x3e9)),this['push'](_0x6da8d4(0xd1)),this[_0x6da8d4(0x410)]('requestMotion',[_0x4b3d85],_0x6da8d4(0x356));}},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x78b)]=function(_0x36115f){const _0x2e157c=_0x4b7b09;if(!_0x36115f[_0x2e157c(0x24d)]())return![];if(!_0x36115f[_0x2e157c(0x9ca)]())return![];if(!_0x36115f[_0x2e157c(0x9a7)]())return![];return VisuMZ[_0x2e157c(0x6ce)][_0x2e157c(0xb41)][_0x2e157c(0x56e)][_0x2e157c(0x578)];},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x2f3)]=function(_0x133fc5,_0x5957e8,_0x3e6605){const _0xb4e7b7=_0x4b7b09,_0x27b5d2=_0x133fc5[_0xb4e7b7(0x3f2)]()[_0xb4e7b7(0x45e)]<0x2,_0x74e52c=0x14,_0x1b7caf=0x30;_0x27b5d2&&(_0xb4e7b7(0x7a5)!==_0xb4e7b7(0x7a5)?(this[_0xb4e7b7(0x72a)]['open'](),this['_skillWindow'][_0xb4e7b7(0x661)]&&this[_0xb4e7b7(0x72a)]['show'](),this[_0xb4e7b7(0xad6)][_0xb4e7b7(0xa15)](),this[_0xb4e7b7(0xad6)][_0xb4e7b7(0x661)]&&this[_0xb4e7b7(0xad6)][_0xb4e7b7(0xb4c)]()):(this[_0xb4e7b7(0x410)]('performJump',[_0x133fc5],_0x1b7caf,_0x74e52c),this[_0xb4e7b7(0x410)](_0xb4e7b7(0xb36),_0x133fc5,_0x3e6605,_0xb4e7b7(0x7ed),_0x74e52c,!![],_0xb4e7b7(0x5cb),!![]),this['push']('requestMotion',[_0x133fc5],_0xb4e7b7(0x356)),this[_0xb4e7b7(0x410)](_0xb4e7b7(0xd1))));let _0x428855=_0x5957e8[_0xb4e7b7(0x50c)]()?this[_0xb4e7b7(0x3d9)](_0x133fc5):0x1;for(let _0x499b7d=0x0;_0x499b7d<_0x428855;_0x499b7d++){if(_0x5957e8[_0xb4e7b7(0x50c)]()&&_0x133fc5[_0xb4e7b7(0xb0c)]()){if('AmHZg'===_0xb4e7b7(0x96a)){if(!_0x1e5bf3[_0xb4e7b7(0x4ed)]()){const _0x32fa57=_0x3e99df[_0xb4e7b7(0x609)](_0x3d1742['x'],_0x4ecd80['y']);if(this[_0xb4e7b7(0x8fa)]&&this[_0xb4e7b7(0x8fa)][_0x32fa57])return this['_regionBattleback1'][_0x32fa57];}return _0x5beb42['BattleCore'][_0xb4e7b7(0x533)][_0xb4e7b7(0x4ad)](this);}else this['push'](_0xb4e7b7(0x4fe),_0x133fc5,_0x499b7d);}if(_0x5957e8[_0xb4e7b7(0x6e3)]()[_0xb4e7b7(0x22d)]<0x0)this[_0xb4e7b7(0x1a9)](_0x133fc5,_0x5957e8,_0x3e6605);else{if('ElUxi'===_0xb4e7b7(0x9bc))this[_0xb4e7b7(0x8b0)](_0x133fc5,_0x5957e8,_0x3e6605);else{this[_0xb4e7b7(0x234)][_0xb4e7b7(0x76b)](_0xe86044);if(_0x462ab7===this['_subject'])return;const _0x369a2e=_0x141e92['makeDeepCopy'](_0x884bc7[_0xb4e7b7(0x335)]());this[_0xb4e7b7(0x313)]['push']([_0x5c1263,_0x369a2e]);}}}_0x5957e8[_0xb4e7b7(0x50c)]()&&_0x133fc5[_0xb4e7b7(0xb0c)]()&&this['push'](_0xb4e7b7(0x35e),_0x133fc5),this[_0xb4e7b7(0x410)](_0xb4e7b7(0x74),_0x133fc5,_0x3e6605,![]),this[_0xb4e7b7(0x3c1)](_0x133fc5,_0x27b5d2,_0x1b7caf,_0x74e52c);},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x4a1)]=function(_0xd58817){const _0x21ab1b=_0x4b7b09;if(!_0xd58817[_0x21ab1b(0x24d)]())return![];if(!_0xd58817[_0x21ab1b(0xaef)]())return![];if(!_0xd58817[_0x21ab1b(0x9a7)]())return![];return VisuMZ[_0x21ab1b(0x6ce)][_0x21ab1b(0xb41)][_0x21ab1b(0x56e)]['AutoMeleeAoE'];},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x723)]=function(_0x11d4a5,_0x15f347,_0x3edc36){const _0x4d8eaa=_0x4b7b09,_0x4e5bf1=_0x11d4a5[_0x4d8eaa(0x3f2)]()['type']<0x2,_0x49a479=0x14,_0x241ceb=0x30;if(_0x4e5bf1){if('KuMAO'!==_0x4d8eaa(0x146))this[_0x4d8eaa(0x410)](_0x4d8eaa(0x7a3),[_0x11d4a5],_0x241ceb,_0x49a479),this[_0x4d8eaa(0x410)]('performMoveToTargets',_0x11d4a5,_0x3edc36,'front\x20center',_0x49a479,!![],'Linear',!![]),this['push']('requestMotion',[_0x11d4a5],_0x4d8eaa(0x356)),this[_0x4d8eaa(0x410)](_0x4d8eaa(0xd1));else{if(this[_0x4d8eaa(0x50f)]===_0x1d8c3b)this[_0x4d8eaa(0x316)]();this['_battlePortrait']=_0x536b13;if(_0x531acc[_0x4d8eaa(0x18e)]()&&_0x25654c[_0x4d8eaa(0x41f)]()['includes'](this)){const _0x54aa40=_0x20e377[_0x4d8eaa(0x5ae)]['_statusWindow'];_0x54aa40&&_0x54aa40['refreshActorPortrait'](this);}}}let _0x47550b=_0x15f347[_0x4d8eaa(0x50c)]()?this[_0x4d8eaa(0x3d9)](_0x11d4a5):0x1;for(let _0x342a02=0x0;_0x342a02<_0x47550b;_0x342a02++){if(_0x4d8eaa(0x279)==='FWgNZ')_0x15f347[_0x4d8eaa(0x50c)]()&&_0x11d4a5[_0x4d8eaa(0xb0c)]()&&this[_0x4d8eaa(0x410)](_0x4d8eaa(0x4fe),_0x11d4a5,_0x342a02),this[_0x4d8eaa(0x8b0)](_0x11d4a5,_0x15f347,_0x3edc36);else{this[_0x4d8eaa(0x680)][_0x4d8eaa(0x945)]();const _0x17aa8e=this[_0x4d8eaa(0x3ae)]();!_0x22a0d1(_0x17aa8e)&&this[_0x4d8eaa(0x9e9)]();}}_0x15f347[_0x4d8eaa(0x50c)]()&&_0x11d4a5[_0x4d8eaa(0xb0c)]()&&this['push'](_0x4d8eaa(0x35e),_0x11d4a5),this[_0x4d8eaa(0x410)](_0x4d8eaa(0x74),_0x11d4a5,_0x3edc36,![]),this[_0x4d8eaa(0x3c1)](_0x11d4a5,_0x4e5bf1,_0x241ceb,_0x49a479);},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x1a9)]=function(_0x32ad5f,_0x114f72,_0x19d12f){const _0x2ffc2f=_0x4b7b09,_0x4886a7=_0x114f72[_0x2ffc2f(0x6e3)]();for(const _0x386d60 of _0x19d12f){if(!_0x386d60)continue;this['push'](_0x2ffc2f(0x552),_0x32ad5f,_0x114f72),this[_0x2ffc2f(0x410)](_0x2ffc2f(0x800),Sprite_Battler[_0x2ffc2f(0x872)]),this[_0x2ffc2f(0x410)](_0x2ffc2f(0x49e),_0x32ad5f,[_0x386d60],_0x4886a7[_0x2ffc2f(0x22d)]),this['push'](_0x2ffc2f(0x800),0x18),this[_0x2ffc2f(0x410)](_0x2ffc2f(0x994),_0x32ad5f,_0x386d60);}},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x8b0)]=function(_0xcedc98,_0x4314ce,_0x137c6e){const _0x2bab35=_0x4b7b09,_0x4551d9=_0x4314ce[_0x2bab35(0x6e3)]();this[_0x2bab35(0x410)](_0x2bab35(0x552),_0xcedc98,_0x4314ce),this[_0x2bab35(0x410)]('waitCount',Sprite_Battler[_0x2bab35(0x872)]),this[_0x2bab35(0x410)](_0x2bab35(0x49e),_0xcedc98,_0x137c6e[_0x2bab35(0x457)](),_0x4551d9[_0x2bab35(0x22d)]),this[_0x2bab35(0x410)](_0x2bab35(0x6cd));for(const _0x3090d5 of _0x137c6e){if(_0x2bab35(0x3ed)===_0x2bab35(0x477)){if(!this[_0x2bab35(0x6a7)][_0x2bab35(0xb1a)]())return;while(this[_0x2bab35(0x6a7)][_0x2bab35(0xb1a)]()){this[_0x2bab35(0x6a7)][_0x2bab35(0x857)]()&&this[_0x2bab35(0x459)]();}this[_0x2bab35(0x6a7)][_0x2bab35(0x69e)](),this[_0x2bab35(0x6a7)][_0x2bab35(0x85c)]();}else{if(!_0x3090d5)continue;this['push'](_0x2bab35(0x994),_0xcedc98,_0x3090d5);}}},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x11c)]=function(_0x3d86f,_0x332dc1,_0x59c722){const _0x507a44=_0x4b7b09,_0x42d38b=_0x332dc1[_0x507a44(0x6e3)]();this[_0x507a44(0x410)]('applyImmortal',_0x3d86f,_0x59c722,![]),this[_0x507a44(0x410)](_0x507a44(0x485)),this['push'](_0x507a44(0xa82)),this[_0x507a44(0x410)](_0x507a44(0x945)),this[_0x507a44(0x410)](_0x507a44(0x2d5),_0x3d86f),this[_0x507a44(0x410)](_0x507a44(0xd1));},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0xb51)]=function(_0x5cca43){},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x9cd)]=Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x362)],Window_BattleLog['prototype'][_0x4b7b09(0x362)]=function(_0x4d423e){const _0x1dadbf=_0x4b7b09;if(!VisuMZ['BattleCore'][_0x1dadbf(0xb41)][_0x1dadbf(0x34c)]['ShowCurrentState'])return;VisuMZ['BattleCore'][_0x1dadbf(0x9cd)][_0x1dadbf(0x4ad)](this,_0x4d423e);},Window_BattleLog['prototype'][_0x4b7b09(0x1df)]=function(_0x57d8f2){const _0x2bcb43=_0x4b7b09;this[_0x2bcb43(0x410)](_0x2bcb43(0x55f),_0x57d8f2);VisuMZ['BattleCore'][_0x2bcb43(0xb41)]['ActionSequence'][_0x2bcb43(0xab0)]&&('IruNw'===_0x2bcb43(0x92a)?this[_0x2bcb43(0x410)]('showAnimation',_0x57d8f2,[BattleManager[_0x2bcb43(0xb2)]],-0x1):(this[_0x2bcb43(0x6d7)]['x']=this['x'],this[_0x2bcb43(0x6d7)]['y']=this['y']));if(!VisuMZ[_0x2bcb43(0x6ce)][_0x2bcb43(0xb41)][_0x2bcb43(0x34c)][_0x2bcb43(0xb44)])return;this['push'](_0x2bcb43(0x8a9),TextManager[_0x2bcb43(0x5f6)][_0x2bcb43(0xace)](_0x57d8f2[_0x2bcb43(0x639)]()));},Window_BattleLog['prototype'][_0x4b7b09(0x58d)]=function(_0x3a425a){const _0x4eb998=_0x4b7b09;this[_0x4eb998(0x410)]('performReflection',_0x3a425a);if(!VisuMZ['BattleCore']['Settings'][_0x4eb998(0x34c)][_0x4eb998(0xbd)])return;this['push'](_0x4eb998(0x8a9),TextManager[_0x4eb998(0x875)]['format'](_0x3a425a[_0x4eb998(0x639)]()));},Window_BattleLog[_0x4b7b09(0x4d2)]['displayReflectionPlayBack']=function(_0x2003c3,_0x5bb428){const _0x1e52a9=_0x4b7b09;if(VisuMZ[_0x1e52a9(0x6ce)][_0x1e52a9(0xb41)]['ActionSequence']['ReflectPlayback']){const _0x39fd5a=_0x5bb428[_0x1e52a9(0x6e3)]();this[_0x1e52a9(0x410)](_0x1e52a9(0x49e),_0x2003c3,[_0x2003c3],_0x39fd5a[_0x1e52a9(0x22d)]);}},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0xa67)]=function(_0x28d6a0,_0x46990c){const _0x3de3d4=_0x4b7b09;this[_0x3de3d4(0x410)](_0x3de3d4(0x657),_0x28d6a0,_0x46990c);if(!VisuMZ[_0x3de3d4(0x6ce)][_0x3de3d4(0xb41)][_0x3de3d4(0x34c)][_0x3de3d4(0x9cc)])return;const _0x33f41d=_0x28d6a0['name'](),_0x236563=TextManager['substitute'][_0x3de3d4(0xace)](_0x33f41d,_0x46990c[_0x3de3d4(0x639)]());this[_0x3de3d4(0x410)](_0x3de3d4(0x8a9),_0x236563);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x67a)]=Window_BattleLog['prototype'][_0x4b7b09(0x6fe)],Window_BattleLog['prototype'][_0x4b7b09(0x6fe)]=function(_0x30b412,_0xc8596e){const _0x42e478=_0x4b7b09;VisuMZ[_0x42e478(0x6ce)][_0x42e478(0x67a)][_0x42e478(0x4ad)](this,_0x30b412,_0xc8596e);},VisuMZ[_0x4b7b09(0x6ce)]['Window_BattleLog_displayFailure']=Window_BattleLog['prototype']['displayFailure'],Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0xd2)]=function(_0x5e592b){const _0x24cebe=_0x4b7b09;if(!VisuMZ['BattleCore'][_0x24cebe(0xb41)][_0x24cebe(0x34c)][_0x24cebe(0x488)])return;VisuMZ['BattleCore'][_0x24cebe(0x45d)][_0x24cebe(0x4ad)](this,_0x5e592b);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xb8c)]=Window_BattleLog['prototype']['displayCritical'],Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x815)]=function(_0x4341e9){const _0x5ed09b=_0x4b7b09;if(!VisuMZ['BattleCore']['Settings']['BattleLog'][_0x5ed09b(0x12b)])return;VisuMZ[_0x5ed09b(0x6ce)]['Window_BattleLog_displayCritical']['call'](this,_0x4341e9);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x3e6)]=Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x9d7)],Window_BattleLog[_0x4b7b09(0x4d2)]['displayMiss']=function(_0x178c10){const _0x2f95ef=_0x4b7b09;!VisuMZ[_0x2f95ef(0x6ce)]['Settings'][_0x2f95ef(0x34c)][_0x2f95ef(0x9a0)]?this[_0x2f95ef(0x410)](_0x2f95ef(0x250),_0x178c10):VisuMZ[_0x2f95ef(0x6ce)][_0x2f95ef(0x3e6)][_0x2f95ef(0x4ad)](this,_0x178c10);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x659)]=Window_BattleLog[_0x4b7b09(0x4d2)]['displayEvasion'],Window_BattleLog['prototype'][_0x4b7b09(0x881)]=function(_0x4a55c6){const _0x1afbce=_0x4b7b09;!VisuMZ[_0x1afbce(0x6ce)][_0x1afbce(0xb41)][_0x1afbce(0x34c)][_0x1afbce(0x9a0)]?_0x1afbce(0xa1f)!=='brjxx'?(this[_0x1afbce(0x2f4)]=![],this[_0x1afbce(0x75a)](),this['updateAttachmentSprites']()):_0x4a55c6[_0x1afbce(0xa66)]()[_0x1afbce(0x9dc)]?this[_0x1afbce(0x410)]('performEvasion',_0x4a55c6):this[_0x1afbce(0x410)]('performMagicEvasion',_0x4a55c6):_0x1afbce(0x72d)==='bpNhy'?this['isPartyCommandWindowDisabled']()?this[_0x1afbce(0x941)]():_0x50a5d5[_0x1afbce(0x6ce)][_0x1afbce(0x379)]['call'](this):VisuMZ[_0x1afbce(0x6ce)][_0x1afbce(0x659)][_0x1afbce(0x4ad)](this,_0x4a55c6);},Window_BattleLog['prototype'][_0x4b7b09(0x730)]=function(_0xd9ccc4){const _0x209326=_0x4b7b09;if(_0xd9ccc4['result']()[_0x209326(0x618)]){if(_0x209326(0x545)===_0x209326(0x125))return _0x105446[_0x209326(0x872)];else _0xd9ccc4[_0x209326(0xa66)]()[_0x209326(0x978)]>0x0&&!_0xd9ccc4[_0x209326(0xa66)]()['drain']&&this[_0x209326(0x410)]('performDamage',_0xd9ccc4),_0xd9ccc4['result']()[_0x209326(0x978)]<0x0&&this[_0x209326(0x410)](_0x209326(0x77c),_0xd9ccc4),VisuMZ['BattleCore'][_0x209326(0xb41)][_0x209326(0x34c)][_0x209326(0x12d)]&&this['push']('addText',this[_0x209326(0xaad)](_0xd9ccc4));}},VisuMZ[_0x4b7b09(0x6ce)]['Window_BattleLog_displayMpDamage']=Window_BattleLog['prototype']['displayMpDamage'],Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x236)]=function(_0x1f0372){const _0x20d667=_0x4b7b09;if(!VisuMZ['BattleCore']['Settings'][_0x20d667(0x34c)][_0x20d667(0x2da)])return;VisuMZ['BattleCore'][_0x20d667(0x7f0)][_0x20d667(0x4ad)](this,_0x1f0372);},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x8e5)]=Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x30e)],Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x30e)]=function(_0x47ddfa){const _0x5147d0=_0x4b7b09;if(!VisuMZ['BattleCore'][_0x5147d0(0xb41)][_0x5147d0(0x34c)][_0x5147d0(0x894)])return;VisuMZ[_0x5147d0(0x6ce)]['Window_BattleLog_displayTpDamage']['call'](this,_0x47ddfa);},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x5ac)]=function(_0x14bc97){const _0x76b422=_0x4b7b09;if(_0x14bc97[_0x76b422(0xa66)]()[_0x76b422(0x8d1)]()){if(_0x76b422(0x353)===_0x76b422(0x417)){let _0x5a6f3c=[];for(const _0xad9dd4 of _0x32d683){_0x5a6f3c=_0x5a6f3c['concat'](_0x1bcf33['ConvertActionSequenceTarget'](_0xad9dd4));}return _0x5a6f3c[_0x76b422(0x451)](_0x51ad28=>_0x51ad28);}else this[_0x76b422(0x410)](_0x76b422(0xaf9)),this['displayChangedStates'](_0x14bc97),this[_0x76b422(0x496)](_0x14bc97),this['push'](_0x76b422(0x485));}},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x9b4)]=function(_0x5647f4){const _0x3270f8=_0x4b7b09,_0x6a6b02=_0x5647f4[_0x3270f8(0xa66)](),_0x1a9835=_0x6a6b02[_0x3270f8(0xb71)]();for(const _0x245ff3 of _0x1a9835){if(_0x3270f8(0x4ae)!==_0x3270f8(0x984)){const _0x39f096=_0x5647f4[_0x3270f8(0xb0c)]()?_0x245ff3[_0x3270f8(0x84a)]:_0x245ff3[_0x3270f8(0x493)];_0x39f096&&VisuMZ[_0x3270f8(0x6ce)][_0x3270f8(0xb41)][_0x3270f8(0x34c)][_0x3270f8(0x8bf)]&&(this[_0x3270f8(0x410)](_0x3270f8(0x1f1)),this[_0x3270f8(0x410)]('popBaseLine'),this[_0x3270f8(0x410)](_0x3270f8(0xaf9)),this['push'](_0x3270f8(0x8a9),_0x39f096[_0x3270f8(0xace)](_0x5647f4[_0x3270f8(0x639)]())),this[_0x3270f8(0x410)]('wait')),_0x245ff3['id']===_0x5647f4[_0x3270f8(0x7fa)]()&&this[_0x3270f8(0x410)](_0x3270f8(0x9af),_0x5647f4);}else this['_animationSprites'][_0x3270f8(0x76b)](_0xb277da),this[_0x3270f8(0x891)](_0x4a5fc9)?this[_0x3270f8(0x4a5)]()['removeChild'](_0x2d0fad):this[_0x3270f8(0x7d6)][_0x3270f8(0x5c4)](_0x1570bc);}},Window_BattleLog['prototype'][_0x4b7b09(0x1f1)]=function(){},Window_BattleLog['prototype'][_0x4b7b09(0x442)]=function(_0x1bc121){const _0x28825c=_0x4b7b09;if(!VisuMZ[_0x28825c(0x6ce)][_0x28825c(0xb41)][_0x28825c(0x34c)][_0x28825c(0x83e)])return;const _0xc836c3=_0x1bc121[_0x28825c(0xa66)](),_0x581320=_0xc836c3[_0x28825c(0x105)]();for(const _0x4e0c37 of _0x581320){'MwBTV'===_0x28825c(0x150)?_0x4e0c37[_0x28825c(0x920)]&&(this['push'](_0x28825c(0x75c)),this[_0x28825c(0x410)]('popBaseLine'),this['push']('pushBaseLine'),this['push']('addText',_0x4e0c37[_0x28825c(0x920)][_0x28825c(0xace)](_0x1bc121[_0x28825c(0x639)]())),this[_0x28825c(0x410)](_0x28825c(0x5b0))):_0x4e90d9=_0x2c534a(_0x599c6f['$1']);}},Window_BattleLog[_0x4b7b09(0x4d2)]['fnordRemovedStates']=function(){},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x496)]=function(_0x3cfdd6){const _0xbaaeac=_0x4b7b09,_0x1e61da=VisuMZ['BattleCore'][_0xbaaeac(0xb41)][_0xbaaeac(0x34c)],_0x891171=_0x3cfdd6['result']();if(_0x1e61da[_0xbaaeac(0x5e7)])this[_0xbaaeac(0x1ef)](_0x3cfdd6,_0x891171['addedBuffs'],TextManager[_0xbaaeac(0x734)]);if(_0x1e61da['ShowAddedDebuff'])this[_0xbaaeac(0x1ef)](_0x3cfdd6,_0x891171[_0xbaaeac(0x9ac)],TextManager[_0xbaaeac(0x1e2)]);if(_0x1e61da['ShowRemovedBuff'])this['displayBuffs'](_0x3cfdd6,_0x891171[_0xbaaeac(0x7da)],TextManager[_0xbaaeac(0x4cd)]);},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x1ef)]=function(_0xf7d1a1,_0x324158,_0x28192a){const _0x3a4502=_0x4b7b09;for(const _0x37668c of _0x324158){if('JKsbO'===_0x3a4502(0x190))return _0x5632e8[_0x3a4502(0x451)](_0x17d1b2=>_0x17d1b2!==_0x11282b&&!_0x27f4c3[_0x3a4502(0x382)](_0x17d1b2)&&_0x17d1b2[_0x3a4502(0x866)]());else{const _0x3dfc33=_0x28192a[_0x3a4502(0xace)](_0xf7d1a1[_0x3a4502(0x639)](),TextManager[_0x3a4502(0x258)](_0x37668c));this[_0x3a4502(0x410)](_0x3a4502(0x7e1)),this[_0x3a4502(0x410)]('pushBaseLine'),this[_0x3a4502(0x410)](_0x3a4502(0x8a9),_0x3dfc33),this[_0x3a4502(0x410)](_0x3a4502(0x5b0));}}},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x8a)]=Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x945)],Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x945)]=function(){const _0x214150=_0x4b7b09;VisuMZ['BattleCore'][_0x214150(0x8a)][_0x214150(0x4ad)](this),this[_0x214150(0x9bd)]();},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x9a)]=Window_BattleLog['prototype'][_0x4b7b09(0xaf9)],Window_BattleLog['prototype'][_0x4b7b09(0xaf9)]=function(){const _0x2ab556=_0x4b7b09;VisuMZ[_0x2ab556(0x6ce)][_0x2ab556(0x9a)][_0x2ab556(0x4ad)](this),this['callNextMethod']();},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xb5b)]=Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x7e1)],Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x7e1)]=function(){const _0x2fa176=_0x4b7b09;VisuMZ[_0x2fa176(0x6ce)][_0x2fa176(0xb5b)]['call'](this),this[_0x2fa176(0x2d9)](),this[_0x2fa176(0x9bd)]();},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x164)]=Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x411)],Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x411)]=function(_0x9be409){const _0x9d58a2=_0x4b7b09;VisuMZ['BattleCore'][_0x9d58a2(0x164)]['call'](this,_0x9be409),this['callNextMethod']();},Window_BattleLog[_0x4b7b09(0x4d2)]['waitForNewLine']=function(){const _0x5c58b3=_0x4b7b09;let _0x270db5=0x0;if(this[_0x5c58b3(0x509)][_0x5c58b3(0x8db)]>0x0){if(_0x5c58b3(0x7b8)===_0x5c58b3(0x7b8))_0x270db5=this['_baseLineStack'][this[_0x5c58b3(0x509)]['length']-0x1];else{const _0x1b0a2c=_0xa3abb1[_0xc5320d];if(_0x1b0a2c)_0x2c4f5a[_0x5c58b3(0x410)](_0x2a5a45[_0x5c58b3(0x9fb)](_0x1b0a2c));}}this[_0x5c58b3(0xb45)][_0x5c58b3(0x8db)]>_0x270db5?this[_0x5c58b3(0x5b0)]():this[_0x5c58b3(0x9bd)]();},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x555)]=Window_BattleLog['prototype'][_0x4b7b09(0x82e)],Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x82e)]=function(_0x51ac7b,_0xa47d7){const _0x2c032f=_0x4b7b09;VisuMZ[_0x2c032f(0x6ce)][_0x2c032f(0x555)][_0x2c032f(0x4ad)](this,_0x51ac7b,_0xa47d7),this[_0x2c032f(0x9bd)]();},VisuMZ['BattleCore'][_0x4b7b09(0x777)]=Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x552)],Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x552)]=function(_0x29eda1,_0x26e549){const _0x325ac3=_0x4b7b09;VisuMZ[_0x325ac3(0x6ce)]['Window_BattleLog_performAction'][_0x325ac3(0x4ad)](this,_0x29eda1,_0x26e549),this['callNextMethod']();},VisuMZ['BattleCore']['Window_BattleLog_performActionEnd']=Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x2d5)],Window_BattleLog['prototype'][_0x4b7b09(0x2d5)]=function(_0x204001){const _0x3a1825=_0x4b7b09;VisuMZ[_0x3a1825(0x6ce)][_0x3a1825(0x893)][_0x3a1825(0x4ad)](this,_0x204001);for(const _0xb049cb of BattleManager['allBattleMembers']()){if(_0x3a1825(0x1c6)===_0x3a1825(0x6b4)){if(!_0x5cd4d3['isSceneBattle']())return;if(!_0x5b17b5[_0x3a1825(0x522)])return;const _0x252055=_0x40ae5a[_0x3a1825(0x1cb)]();if(!_0x252055)return;_0x252055[_0x3a1825(0x63e)]('battleAngle');}else{if(!_0xb049cb)continue;if(_0xb049cb[_0x3a1825(0x44c)]())continue;_0xb049cb[_0x3a1825(0x98a)]();}}this[_0x3a1825(0x9bd)]();},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0x747)]=Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x94)],Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x94)]=function(_0x1ba94f){const _0x2f278c=_0x4b7b09;VisuMZ[_0x2f278c(0x6ce)][_0x2f278c(0x747)][_0x2f278c(0x4ad)](this,_0x1ba94f),this['callNextMethod']();},VisuMZ[_0x4b7b09(0x6ce)][_0x4b7b09(0xaea)]=Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x250)],Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x250)]=function(_0x1ea442){const _0x1b795e=_0x4b7b09;VisuMZ[_0x1b795e(0x6ce)]['Window_BattleLog_performMiss']['call'](this,_0x1ea442),this['callNextMethod']();},VisuMZ['BattleCore'][_0x4b7b09(0xcf)]=Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x77c)],Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x77c)]=function(_0x528a42){const _0x2f9f02=_0x4b7b09;VisuMZ[_0x2f9f02(0x6ce)]['Window_BattleLog_performRecovery'][_0x2f9f02(0x4ad)](this,_0x528a42),this[_0x2f9f02(0x9bd)]();},VisuMZ['BattleCore']['Window_BattleLog_performEvasion']=Window_BattleLog[_0x4b7b09(0x4d2)]['performEvasion'],Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x89a)]=function(_0x34309a){const _0x2aa8e2=_0x4b7b09;VisuMZ[_0x2aa8e2(0x6ce)][_0x2aa8e2(0x63d)][_0x2aa8e2(0x4ad)](this,_0x34309a),this[_0x2aa8e2(0x9bd)]();},VisuMZ[_0x4b7b09(0x6ce)]['Window_BattleLog_performMagicEvasion']=Window_BattleLog[_0x4b7b09(0x4d2)]['performMagicEvasion'],Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x674)]=function(_0x5edd31){const _0x540bd2=_0x4b7b09;VisuMZ['BattleCore'][_0x540bd2(0x93a)][_0x540bd2(0x4ad)](this,_0x5edd31),this['callNextMethod']();},VisuMZ['BattleCore'][_0x4b7b09(0x293)]=Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x55f)],Window_BattleLog[_0x4b7b09(0x4d2)]['performCounter']=function(_0x51fa36){const _0x4129ac=_0x4b7b09;VisuMZ['BattleCore'][_0x4129ac(0x293)][_0x4129ac(0x4ad)](this,_0x51fa36),this[_0x4129ac(0x9bd)]();},VisuMZ[_0x4b7b09(0x6ce)]['Window_BattleLog_performReflection']=Window_BattleLog['prototype'][_0x4b7b09(0x32f)],Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x32f)]=function(_0x32e88a){const _0x3c1790=_0x4b7b09;VisuMZ['BattleCore']['Window_BattleLog_performReflection']['call'](this,_0x32e88a),this[_0x3c1790(0x9bd)]();},VisuMZ[_0x4b7b09(0x6ce)]['Window_BattleLog_performSubstitute']=Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x657)],Window_BattleLog['prototype'][_0x4b7b09(0x657)]=function(_0x55113e,_0x48862f){const _0x12d2b5=_0x4b7b09;VisuMZ[_0x12d2b5(0x6ce)][_0x12d2b5(0xb19)][_0x12d2b5(0x4ad)](this,_0x55113e,_0x48862f),this[_0x12d2b5(0x9bd)]();},VisuMZ['BattleCore'][_0x4b7b09(0x344)]=Window_BattleLog['prototype'][_0x4b7b09(0x9af)],Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x9af)]=function(_0x1845a4){const _0x1a0bec=_0x4b7b09;VisuMZ[_0x1a0bec(0x6ce)]['Window_BattleLog_performCollapse'][_0x1a0bec(0x4ad)](this,_0x1845a4),this[_0x1a0bec(0x9bd)]();},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x79)]=function(_0x278c91,_0x573aeb){const _0x1c5dd1=_0x4b7b09;_0x278c91[_0x1c5dd1(0x79)](_0x573aeb),this[_0x1c5dd1(0x9bd)]();},Window_BattleLog['prototype']['showEnemyAttackAnimation']=function(_0xe45439,_0x50bda9){const _0x423c6a=_0x4b7b09,_0x18d110=_0xe45439['attackAnimationId1']();_0x18d110<=0x0?_0x423c6a(0x44e)!==_0x423c6a(0x80d)?SoundManager['playEnemyAttack']():(_0x28440d[_0x423c6a(0x6ce)]['Scene_Battle_createActorCommandWindow'][_0x423c6a(0x4ad)](this),this[_0x423c6a(0x33a)]()):this[_0x423c6a(0x3f8)](_0x50bda9,_0x18d110);},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x74)]=function(_0x34525b,_0x1ae4bb,_0x46178b){const _0x136600=_0x4b7b09,_0x18eac6=[_0x34525b][_0x136600(0xa28)](_0x1ae4bb);for(const _0x172a19 of _0x18eac6){if(!_0x172a19)continue;_0x172a19[_0x136600(0xac5)](_0x46178b);}this[_0x136600(0x9bd)]();},Window_BattleLog['prototype'][_0x4b7b09(0x800)]=function(_0x347451){const _0x45d409=_0x4b7b09;this[_0x45d409(0xb70)]=_0x347451;},Window_BattleLog[_0x4b7b09(0x4d2)]['requestMotion']=function(_0x1abf89,_0x505438){const _0x5bec75=_0x4b7b09;for(const _0x490111 of _0x1abf89){if(!_0x490111)continue;_0x490111[_0x5bec75(0x42f)](_0x505438);}this[_0x5bec75(0x9bd)]();},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x9ef)]=function(_0x2e1acd,_0x54afd9,_0x1b1eb2,_0xa27bda,_0x1e77e3,_0x4512ca){const _0x10a48d=_0x4b7b09;_0x2e1acd[_0x10a48d(0x868)](_0x54afd9,_0x1b1eb2,_0xa27bda,_0x1e77e3,_0x4512ca,-0x1),this['callNextMethod']();},Window_BattleLog['prototype']['performMoveToTargets']=function(_0x268d69,_0x5674fc,_0x28e8e6,_0x1019f2,_0x9c4671,_0x2fe673,_0x53e581){const _0x4be0c1=_0x4b7b09,_0x16fa63=Math[_0x4be0c1(0x5e3)](..._0x5674fc[_0x4be0c1(0x78)](_0x2b8a90=>_0x2b8a90[_0x4be0c1(0xe0)]()['_baseX']-_0x2b8a90['battler']()['mainSpriteWidth']()/0x2)),_0x3a85fe=Math['max'](..._0x5674fc['map'](_0x2ced02=>_0x2ced02['battler']()[_0x4be0c1(0x226)]+_0x2ced02[_0x4be0c1(0xe0)]()[_0x4be0c1(0xa2)]()/0x2)),_0x3428f0=Math[_0x4be0c1(0x5e3)](..._0x5674fc[_0x4be0c1(0x78)](_0x6d70c3=>_0x6d70c3[_0x4be0c1(0xe0)]()[_0x4be0c1(0x518)]-_0x6d70c3[_0x4be0c1(0xe0)]()[_0x4be0c1(0x22a)]())),_0x619639=Math['max'](..._0x5674fc[_0x4be0c1(0x78)](_0x44a3bf=>_0x44a3bf[_0x4be0c1(0xe0)]()['_baseY'])),_0x18128d=_0x5674fc['filter'](_0x58de46=>_0x58de46[_0x4be0c1(0xb0c)]())[_0x4be0c1(0x8db)],_0xaaf808=_0x5674fc[_0x4be0c1(0x451)](_0x2326ac=>_0x2326ac[_0x4be0c1(0xfc)]())['length'];let _0x47795f=0x0,_0x202014=0x0;if(_0x28e8e6[_0x4be0c1(0x2c1)](/front/i))'QAshf'!==_0x4be0c1(0x49b)?_0x1331cc[_0x4be0c1(0x6ce)]['Game_Action_setGuard'][_0x4be0c1(0x4ad)](this):_0x47795f=_0x18128d>=_0xaaf808?_0x16fa63:_0x3a85fe;else{if(_0x28e8e6[_0x4be0c1(0x2c1)](/middle/i))_0x47795f=(_0x16fa63+_0x3a85fe)/0x2,_0x53e581=-0x1;else _0x28e8e6[_0x4be0c1(0x2c1)](/back/i)&&(_0x47795f=_0x18128d>=_0xaaf808?_0x3a85fe:_0x16fa63);}if(_0x28e8e6[_0x4be0c1(0x2c1)](/head/i))_0x202014=_0x3428f0;else{if(_0x28e8e6[_0x4be0c1(0x2c1)](/center/i))_0x202014=(_0x3428f0+_0x619639)/0x2;else _0x28e8e6[_0x4be0c1(0x2c1)](/base/i)&&(_0x202014=_0x619639);}_0x268d69[_0x4be0c1(0x868)](_0x47795f,_0x202014,_0x1019f2,_0x9c4671,_0x2fe673,_0x53e581),this[_0x4be0c1(0x9bd)]();},Window_BattleLog[_0x4b7b09(0x4d2)][_0x4b7b09(0x7a3)]=function(_0x43dd3e,_0x4faa00,_0x4d564){const _0x974d7e=_0x4b7b09;for(const _0x94ffe9 of _0x43dd3e){if(!_0x94ffe9)continue;_0x94ffe9[_0x974d7e(0xe5)](_0x4faa00,_0x4d564);}this['callNextMethod']();};