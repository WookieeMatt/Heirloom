//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.69;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.69] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.69: August 25, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0x10ff30=_0x1fff;(function(_0x3796c5,_0x54b126){const _0x568845=_0x1fff,_0x1690d9=_0x3796c5();while(!![]){try{const _0x339c6b=parseInt(_0x568845(0x2a6))/0x1*(parseInt(_0x568845(0x7b4))/0x2)+-parseInt(_0x568845(0x732))/0x3+-parseInt(_0x568845(0x1ff))/0x4+parseInt(_0x568845(0x752))/0x5+-parseInt(_0x568845(0x730))/0x6+parseInt(_0x568845(0x9b4))/0x7+parseInt(_0x568845(0xab6))/0x8;if(_0x339c6b===_0x54b126)break;else _0x1690d9['push'](_0x1690d9['shift']());}catch(_0x1a6c28){_0x1690d9['push'](_0x1690d9['shift']());}}}(_0x24a1,0x22c13));var label=_0x10ff30(0x95b),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x10ff30(0xb68)](function(_0x5c9f81){const _0x5dab74=_0x10ff30;return _0x5c9f81[_0x5dab74(0x279)]&&_0x5c9f81[_0x5dab74(0x8f2)][_0x5dab74(0x778)]('['+label+']');})[0x0];VisuMZ[label][_0x10ff30(0x928)]=VisuMZ[label]['Settings']||{},VisuMZ[_0x10ff30(0xb1e)]=function(_0x1d4b10,_0x296f78){const _0xdf845c=_0x10ff30;for(const _0x2be43d in _0x296f78){if(_0x2be43d['match'](/(.*):(.*)/i)){if('VAeTW'!=='VAeTW')_0x2ff04f['BattleCore'][_0xdf845c(0x9d1)][_0xdf845c(0xb96)](this),_0x1b2553['isTpb']()&&_0x3d6f4e[_0xdf845c(0xa2c)]&&(_0x1c8710['_tpbNeedsPartyCommand']=![],this['actorCommandCancelTPB']());else{const _0x254935=String(RegExp['$1']),_0x3772ee=String(RegExp['$2'])[_0xdf845c(0x9d9)]()['trim']();let _0x24d9ea,_0x24a2f7,_0x3c1829;switch(_0x3772ee){case _0xdf845c(0x72d):_0x24d9ea=_0x296f78[_0x2be43d]!==''?Number(_0x296f78[_0x2be43d]):0x0;break;case _0xdf845c(0x2a4):_0x24a2f7=_0x296f78[_0x2be43d]!==''?JSON[_0xdf845c(0xc51)](_0x296f78[_0x2be43d]):[],_0x24d9ea=_0x24a2f7[_0xdf845c(0xad3)](_0x18a5d9=>Number(_0x18a5d9));break;case _0xdf845c(0x50d):_0x24d9ea=_0x296f78[_0x2be43d]!==''?eval(_0x296f78[_0x2be43d]):null;break;case _0xdf845c(0x7e1):_0x24a2f7=_0x296f78[_0x2be43d]!==''?JSON[_0xdf845c(0xc51)](_0x296f78[_0x2be43d]):[],_0x24d9ea=_0x24a2f7[_0xdf845c(0xad3)](_0x87fe81=>eval(_0x87fe81));break;case _0xdf845c(0xb40):_0x24d9ea=_0x296f78[_0x2be43d]!==''?JSON[_0xdf845c(0xc51)](_0x296f78[_0x2be43d]):'';break;case _0xdf845c(0x749):_0x24a2f7=_0x296f78[_0x2be43d]!==''?JSON['parse'](_0x296f78[_0x2be43d]):[],_0x24d9ea=_0x24a2f7[_0xdf845c(0xad3)](_0x3fbe71=>JSON[_0xdf845c(0xc51)](_0x3fbe71));break;case _0xdf845c(0x4f8):_0x24d9ea=_0x296f78[_0x2be43d]!==''?new Function(JSON[_0xdf845c(0xc51)](_0x296f78[_0x2be43d])):new Function(_0xdf845c(0xb01));break;case _0xdf845c(0x623):_0x24a2f7=_0x296f78[_0x2be43d]!==''?JSON[_0xdf845c(0xc51)](_0x296f78[_0x2be43d]):[],_0x24d9ea=_0x24a2f7['map'](_0x2d4f29=>new Function(JSON[_0xdf845c(0xc51)](_0x2d4f29)));break;case'STR':_0x24d9ea=_0x296f78[_0x2be43d]!==''?String(_0x296f78[_0x2be43d]):'';break;case _0xdf845c(0x3de):_0x24a2f7=_0x296f78[_0x2be43d]!==''?JSON['parse'](_0x296f78[_0x2be43d]):[],_0x24d9ea=_0x24a2f7[_0xdf845c(0xad3)](_0x32b044=>String(_0x32b044));break;case _0xdf845c(0x204):_0x3c1829=_0x296f78[_0x2be43d]!==''?JSON[_0xdf845c(0xc51)](_0x296f78[_0x2be43d]):{},_0x1d4b10[_0x254935]={},VisuMZ[_0xdf845c(0xb1e)](_0x1d4b10[_0x254935],_0x3c1829);continue;case _0xdf845c(0xcbb):_0x24a2f7=_0x296f78[_0x2be43d]!==''?JSON[_0xdf845c(0xc51)](_0x296f78[_0x2be43d]):[],_0x24d9ea=_0x24a2f7[_0xdf845c(0xad3)](_0x369bdd=>VisuMZ[_0xdf845c(0xb1e)]({},JSON[_0xdf845c(0xc51)](_0x369bdd)));break;default:continue;}_0x1d4b10[_0x254935]=_0x24d9ea;}}}return _0x1d4b10;},(_0x5efa88=>{const _0xbf6f7e=_0x10ff30,_0x3212ea=_0x5efa88['name'];for(const _0x382822 of dependencies){if(!Imported[_0x382822]){alert(_0xbf6f7e(0x8ed)['format'](_0x3212ea,_0x382822)),SceneManager[_0xbf6f7e(0xa8c)]();break;}}const _0x3187a7=_0x5efa88['description'];if(_0x3187a7[_0xbf6f7e(0x22f)](/\[Version[ ](.*?)\]/i)){const _0x2aa772=Number(RegExp['$1']);_0x2aa772!==VisuMZ[label]['version']&&(alert('%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.'[_0xbf6f7e(0x958)](_0x3212ea,_0x2aa772)),SceneManager[_0xbf6f7e(0xa8c)]());}if(_0x3187a7[_0xbf6f7e(0x22f)](/\[Tier[ ](\d+)\]/i)){const _0x5e4e59=Number(RegExp['$1']);_0x5e4e59<tier?(alert('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'[_0xbf6f7e(0x958)](_0x3212ea,_0x5e4e59,tier)),SceneManager[_0xbf6f7e(0xa8c)]()):_0xbf6f7e(0x3a9)==='niEsR'?tier=Math[_0xbf6f7e(0x909)](_0x5e4e59,tier):this['_mainSprite']['bitmap'][_0xbf6f7e(0x533)]!==this[_0xbf6f7e(0xb4f)][_0xbf6f7e(0x79c)]()&&(this[_0xbf6f7e(0x6ca)]['bitmap'][_0xbf6f7e(0x533)]=this['_battler'][_0xbf6f7e(0x79c)]());}VisuMZ[_0xbf6f7e(0xb1e)](VisuMZ[label]['Settings'],_0x5efa88[_0xbf6f7e(0xc0e)]);})(pluginData),VisuMZ['CreateActionSequenceTargets']=function(_0x2137b9){const _0x5bee9f=_0x10ff30;let _0x49b176=[];for(const _0x4ec1ac of _0x2137b9){_0x49b176=_0x49b176[_0x5bee9f(0xc68)](VisuMZ[_0x5bee9f(0x260)](_0x4ec1ac));}return _0x49b176[_0x5bee9f(0xb68)](_0x15bb6a=>_0x15bb6a);},VisuMZ['ConvertActionSequenceTarget']=function(_0x441f59){const _0x2c3793=_0x10ff30,_0x9b33a4=BattleManager['allBattleMembers']()[_0x2c3793(0xb68)](_0x4aaf59=>_0x4aaf59&&_0x4aaf59[_0x2c3793(0xaf9)]()),_0x25430d=BattleManager['_subject'],_0x246212=BattleManager['_target'],_0x132383=BattleManager[_0x2c3793(0x56a)]?BattleManager[_0x2c3793(0x56a)][_0x2c3793(0x73e)](0x0):_0x9b33a4;_0x441f59=_0x441f59[_0x2c3793(0x799)]()['trim']();if(_0x441f59===_0x2c3793(0xa59))return _0x2c3793(0x2b2)!=='YHreT'?[_0x25430d]:0x1;else{if(_0x441f59==='current\x20target'){if(_0x2c3793(0x86d)==='lLRzP')_0x27f9d0=_0x5817d3[_0x2c3793(0x358)];else return[_0x246212];}else{if(_0x441f59===_0x2c3793(0x4a7)){if(_0x246212){if('lyVCo'!=='lyVCo')_0x10f862[_0x2c3793(0x95b)][_0x2c3793(0xccc)]['call'](this,_0x6145d8);else{const _0x5565e7=_0x132383[_0x2c3793(0xbc2)](_0x246212);return _0x5565e7>=0x0?[_0x132383[_0x5565e7-0x1]||_0x246212]:[_0x246212];}}}else{if(_0x441f59===_0x2c3793(0x999)){if(_0x246212){const _0x30696f=_0x132383[_0x2c3793(0xbc2)](_0x246212);return _0x30696f>=0x0?[_0x132383[_0x30696f+0x1]||_0x246212]:[_0x246212];}}else{if(_0x441f59===_0x2c3793(0x421))return _0x132383;else{if(_0x441f59===_0x2c3793(0x3cf)){if(_0x2c3793(0x681)==='mxNBr')return[_0x25430d][_0x2c3793(0xc68)](_0x132383);else _0x5f1666[_0x2c3793(0x95b)]['BattleManager_startInput']['call'](this),this[_0x2c3793(0x9ec)]()&&this[_0x2c3793(0xa52)]()&&!this[_0x2c3793(0xb5c)]&&_0x25e592[_0x2c3793(0x5f7)]()&&this[_0x2c3793(0x3ea)]();}else{if(_0x441f59==='not\x20focus')return _0x9b33a4[_0x2c3793(0xb68)](_0x3d52d9=>_0x3d52d9!==_0x25430d&&!_0x132383[_0x2c3793(0x778)](_0x3d52d9)&&_0x3d52d9[_0x2c3793(0x93d)]());}}}}}}if(_0x25430d){if(_0x441f59===_0x2c3793(0x2a3))return _0x2c3793(0x60a)!==_0x2c3793(0x60a)?![]:_0x25430d[_0x2c3793(0x72a)]()[_0x2c3793(0xc07)]();else{if(_0x441f59===_0x2c3793(0xc2f)){if(_0x2c3793(0x34d)!==_0x2c3793(0x34d))_0x337761[_0x2c3793(0xccf)]()?(this[_0x2c3793(0x6ed)](),this[_0x2c3793(0xab2)]()):_0x1fff4c['BattleCore'][_0x2c3793(0x677)][_0x2c3793(0xb96)](this);else return _0x25430d[_0x2c3793(0x72a)]()[_0x2c3793(0xc07)]()[_0x2c3793(0xb68)](_0x3861d7=>_0x3861d7!==_0x25430d);}else{if(_0x441f59==='alive\x20friends\x20not\x20target'){if(_0x2c3793(0x70b)!==_0x2c3793(0xb98))return _0x25430d['friendsUnit']()[_0x2c3793(0xc07)]()[_0x2c3793(0xb68)](_0x5cfac4=>_0x5cfac4!==_0x246212);else{var _0x2c96f9,_0x201f9c,_0x5864b9;for(_0x5864b9=_0x33ed2c[_0x2c3793(0x449)]-0x1;_0x5864b9>0x0;_0x5864b9--){_0x2c96f9=_0x5ee878['floor'](_0x46e899[_0x2c3793(0x2b6)]()*(_0x5864b9+0x1)),_0x201f9c=_0x157732[_0x5864b9],_0x406a00[_0x5864b9]=_0x144bd5[_0x2c96f9],_0x449b11[_0x2c96f9]=_0x201f9c;}return _0x1282f7;}}else{if(_0x441f59===_0x2c3793(0x840))return _0x25430d[_0x2c3793(0x72a)]()[_0x2c3793(0x486)]();else{if(_0x441f59['match'](/FRIEND INDEX (\d+)/i)){if(_0x2c3793(0x637)===_0x2c3793(0x637)){const _0x250cee=Number(RegExp['$1']);return[_0x25430d[_0x2c3793(0x72a)]()[_0x2c3793(0x660)]()[_0x250cee]];}else{const _0x1e2da1=_0x2a0e3d[_0x2c3793(0x2df)][_0x2c3793(0x656)];if(_0x1e2da1)_0x1e2da1[_0x2c3793(0x3b2)](this);}}}}}}if(_0x441f59===_0x2c3793(0x410))return _0x25430d['opponentsUnit']()[_0x2c3793(0xc07)]();else{if(_0x441f59===_0x2c3793(0xa5e))return _0x25430d[_0x2c3793(0x3df)]()[_0x2c3793(0xc07)]()[_0x2c3793(0xb68)](_0x3f2125=>_0x3f2125!==_0x246212);else{if(_0x441f59===_0x2c3793(0xaf8))return _0x25430d['opponentsUnit']()['deadMembers']();else{if(_0x441f59[_0x2c3793(0x22f)](/OPPONENT INDEX (\d+)/i)){const _0x5eb71e=Number(RegExp['$1']);return[_0x25430d[_0x2c3793(0x3df)]()[_0x2c3793(0x660)]()[_0x5eb71e]];}}}}}if(_0x441f59==='alive\x20actors')return $gameParty[_0x2c3793(0xc07)]();else{if(_0x441f59===_0x2c3793(0x695)){if(_0x2c3793(0x73d)===_0x2c3793(0x6aa)){if(!_0x22e303[_0x2c3793(0x95b)][_0x2c3793(0x61c)])return![];const _0x12da21=_0x4eea2a[_0x2c3793(0xc07)]()[_0x2c3793(0xb68)](_0x27bd91=>_0x27bd91[_0x2c3793(0xc6e)]()&&_0x27bd91['canInput']());return _0x12da21['length']>0x0&&_0x503cc7[_0x2c3793(0x9fe)]()!==_0x12da21[_0x12da21[_0x2c3793(0x449)]-0x1];}else return $gameParty[_0x2c3793(0xc07)]()['filter'](_0x477bda=>_0x477bda!==_0x25430d);}else{if(_0x441f59===_0x2c3793(0x5d1))return $gameParty['aliveMembers']()[_0x2c3793(0xb68)](_0x1cce45=>_0x1cce45!==_0x246212);else{if(_0x441f59===_0x2c3793(0x224))return $gameParty[_0x2c3793(0x486)]();else{if(_0x441f59['match'](/ACTOR INDEX (\d+)/i)){const _0x408144=Number(RegExp['$1']);return[$gameParty[_0x2c3793(0x660)]()[_0x408144]];}else{if(_0x441f59[_0x2c3793(0x22f)](/ACTOR ID (\d+)/i)){if(_0x2c3793(0x566)===_0x2c3793(0x411)){if(!(_0x597167[_0x2c3793(0x95b)]['Settings'][_0x2c3793(0x304)][_0x2c3793(0x2da)]??!![]))return;const _0x269a8e=this['commandSymbol'](_0x457ffd);if(![_0x2c3793(0x6f0),_0x2c3793(0x867),_0x2c3793(0x7dc)]['includes'](_0x269a8e))return;const _0x43c087=this[_0x2c3793(0x321)](_0x1a1e30);let _0x2688af=null;if(_0x269a8e==='attack')_0x2688af=_0x1dc4e5[this[_0x2c3793(0x4e8)][_0x2c3793(0x701)]()];else _0x269a8e===_0x2c3793(0x867)?_0x2688af=_0x5c7ccb[this[_0x2c3793(0x4e8)]['guardSkillId']()]:_0x2688af=_0x3fed1[this[_0x2c3793(0xc2b)][_0x5e8ba5][_0x2c3793(0x20a)]];this[_0x2c3793(0x758)](this[_0x2c3793(0x4e8)],_0x2688af,_0x43c087['x'],_0x43c087['y'],_0x43c087[_0x2c3793(0x7b2)]);}else{const _0x1f3e0d=Number(RegExp['$1']);return[$gameActors[_0x2c3793(0x9fe)](_0x1f3e0d)];}}}}}}}if(_0x441f59===_0x2c3793(0xc0a))return $gameTroop['aliveMembers']();else{if(_0x441f59===_0x2c3793(0x3fd)){if(_0x2c3793(0xc42)===_0x2c3793(0x5fb))this['_weather']=new _0x5a74bd(),this[_0x2c3793(0x6b1)][_0x2c3793(0x440)](this['_weather']);else return $gameTroop['aliveMembers']()[_0x2c3793(0xb68)](_0x303a81=>_0x303a81!==_0x25430d);}else{if(_0x441f59===_0x2c3793(0x28f)){if('SjxIC'===_0x2c3793(0x71a))return $gameTroop['aliveMembers']()['filter'](_0x582f6d=>_0x582f6d!==_0x246212);else this['startMotion'](_0x2c3793(0x867));}else{if(_0x441f59===_0x2c3793(0x38f)){if(_0x2c3793(0xadd)!==_0x2c3793(0xcb9))return $gameTroop[_0x2c3793(0x486)]();else this['isNonSubmenuCancel']()?(this[_0x2c3793(0x656)][_0x2c3793(0xb71)](),this['_enemyWindow']['hide'](),this[_0x2c3793(0x285)][_0x2c3793(0x47f)]()):_0x260808['BattleCore'][_0x2c3793(0x747)][_0x2c3793(0xb96)](this),this[_0x2c3793(0x23b)]();}else{if(_0x441f59[_0x2c3793(0x22f)](/ENEMY INDEX (\d+)/i)){const _0x110d0d=Number(RegExp['$1']);return[$gameTroop['members']()[_0x110d0d]];}else{if(_0x441f59[_0x2c3793(0x22f)](/ENEMY ID (\d+)/i)){const _0x217a09=Number(RegExp['$1']);return $gameTroop['aliveMembers']()[_0x2c3793(0xb68)](_0x2fc773=>_0x2fc773[_0x2c3793(0x68d)]()===_0x217a09);}}}}}}if(_0x441f59===_0x2c3793(0xab9))return _0x9b33a4['filter'](_0x573228=>_0x573228[_0x2c3793(0x355)]());else{if(_0x441f59==='alive\x20battlers\x20not\x20user')return _0x9b33a4[_0x2c3793(0xb68)](_0x549fd0=>_0x549fd0['isAlive']()&&_0x549fd0!==_0x25430d);else{if(_0x441f59==='alive\x20battlers\x20not\x20target')return _0x9b33a4[_0x2c3793(0xb68)](_0x5c3800=>_0x5c3800[_0x2c3793(0x355)]()&&_0x5c3800!==_0x246212);else{if(_0x441f59===_0x2c3793(0x599))return _0x9b33a4[_0x2c3793(0xb68)](_0xdfb25a=>_0xdfb25a['isDead']());}}}return[];},PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xb78),_0x4dac04=>{const _0x593124=_0x10ff30;if(!SceneManager[_0x593124(0xc1e)]())return;VisuMZ[_0x593124(0xb1e)](_0x4dac04,_0x4dac04);const _0x5bf9e3=$gameTemp['getLastPluginCommandInterpreter'](),_0x159837=BattleManager[_0x593124(0x837)],_0x2a2527=BattleManager[_0x593124(0x427)],_0xa76664=BattleManager[_0x593124(0x56a)]?BattleManager['_allTargets'][_0x593124(0x73e)](0x0):[],_0x34e6ce=BattleManager[_0x593124(0x7ba)];if(!_0x5bf9e3||!_0x159837||!_0x2a2527)return;if(!_0x159837[_0x593124(0x5c4)]())return;if(_0x4dac04[_0x593124(0x649)])_0x34e6ce[_0x593124(0x352)](_0x2a2527,_0x159837[_0x593124(0x5c4)]());if(_0x4dac04[_0x593124(0x861)]){if(_0x593124(0x7a4)!==_0x593124(0x7a4)){let _0x1f7b50=_0x593124(0x4b0);if(this['checkCacheKey'](_0x1f7b50))return this[_0x593124(0x3f7)][_0x1f7b50];return this['_cache'][_0x1f7b50]=this['createBattleUIOffsetX'](this[_0x593124(0x296)]()),this['_cache'][_0x1f7b50];}else _0x34e6ce[_0x593124(0x395)](_0x593124(0x1e1),_0x2a2527,_0xa76664,!![]);}if(_0x4dac04[_0x593124(0x9fc)])_0x34e6ce[_0x593124(0x395)](_0x593124(0x858),_0x2a2527,_0x159837);if(_0x4dac04[_0x593124(0x405)])_0x34e6ce[_0x593124(0x395)](_0x593124(0x713));if(_0x4dac04['CastAnimation'])_0x34e6ce[_0x593124(0x395)]('performCastAnimation',_0x2a2527,_0x159837);if(_0x4dac04[_0x593124(0xc5a)])_0x34e6ce[_0x593124(0x395)](_0x593124(0x372));_0x5bf9e3[_0x593124(0x4ca)]('battlelog');}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x5cb),_0x2a6155=>{const _0x2ce36b=_0x10ff30;if(!SceneManager[_0x2ce36b(0xc1e)]())return;VisuMZ[_0x2ce36b(0xb1e)](_0x2a6155,_0x2a6155);const _0x245f08=$gameTemp[_0x2ce36b(0x621)](),_0x3269c0=BattleManager[_0x2ce36b(0x837)],_0x162569=BattleManager[_0x2ce36b(0x427)],_0x4c64b7=BattleManager['_allTargets']?BattleManager[_0x2ce36b(0x56a)][_0x2ce36b(0x73e)](0x0):[],_0x151b04=BattleManager[_0x2ce36b(0x7ba)],_0x3aeb5e=_0x2a6155[_0x2ce36b(0x755)]??![];if(!_0x245f08||!_0x3269c0||!_0x162569)return;if(!_0x3269c0[_0x2ce36b(0x5c4)]())return;let _0x6fe1e7=_0x3aeb5e?_0x151b04['getDualWieldTimes'](_0x162569):0x1;for(let _0x53a7ec=0x0;_0x53a7ec<_0x6fe1e7;_0x53a7ec++){_0x3aeb5e&&_0x162569['isActor']()&&(_0x2ce36b(0xb0a)==='yXprw'?(this['push']('fnordAddedStates'),this[_0x2ce36b(0x395)]('popBaseLine'),this[_0x2ce36b(0x395)](_0x2ce36b(0xc98)),this[_0x2ce36b(0x395)](_0x2ce36b(0x657),_0x522588[_0x2ce36b(0x958)](_0x2ef85a[_0x2ce36b(0x52f)]())),this['push'](_0x2ce36b(0x1ec))):_0x151b04['push'](_0x2ce36b(0x6a6),_0x162569,_0x53a7ec));if(_0x2a6155[_0x2ce36b(0xb20)])_0x151b04[_0x2ce36b(0x395)](_0x2ce36b(0xb9d),_0x162569,_0x3269c0);if(_0x2a6155[_0x2ce36b(0xb4c)]>0x0)_0x151b04[_0x2ce36b(0x395)](_0x2ce36b(0x32f),_0x2a6155[_0x2ce36b(0xb4c)]);if(_0x2a6155[_0x2ce36b(0x97a)])_0x151b04[_0x2ce36b(0x395)](_0x2ce36b(0xa43),_0x162569,_0x4c64b7,_0x3269c0[_0x2ce36b(0x5c4)]()[_0x2ce36b(0x72e)]);if(_0x2a6155[_0x2ce36b(0xc5a)])_0x151b04['push'](_0x2ce36b(0x372));for(const _0x5deb31 of _0x4c64b7){if(_0x2ce36b(0xb6c)===_0x2ce36b(0xb6c)){if(!_0x5deb31)continue;if(_0x2a6155[_0x2ce36b(0x857)])_0x151b04[_0x2ce36b(0x395)]('actionEffect',_0x162569,_0x5deb31);}else this['drawItemStyleIcon'](_0x9664e);}}if(_0x3aeb5e&&_0x162569[_0x2ce36b(0x58a)]()){if(_0x2ce36b(0x641)===_0x2ce36b(0x668)){let _0x53db6c=_0x370da6(_0x44aed3['$1'])[_0x2ce36b(0x319)](/,/g,'')[_0x2ce36b(0x9d9)]()[_0x2ce36b(0x6a3)]();_0x14fcc1['BattleCore'][_0x2ce36b(0xb18)][_0x53db6c]=_0x16d931['id'];}else _0x151b04['push'](_0x2ce36b(0x5bf),_0x162569);}if(_0x2a6155[_0x2ce36b(0x861)])_0x151b04[_0x2ce36b(0x395)](_0x2ce36b(0x1e1),_0x162569,_0x4c64b7,![]);_0x245f08[_0x2ce36b(0x4ca)](_0x2ce36b(0xc7e));}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],'ActSeq_Set_TargetActionSet',_0x34f82a=>{const _0xc2c1a0=_0x10ff30;if(!SceneManager[_0xc2c1a0(0xc1e)]())return;VisuMZ[_0xc2c1a0(0xb1e)](_0x34f82a,_0x34f82a);const _0x40b10b=$gameTemp[_0xc2c1a0(0x621)](),_0x74aed6=BattleManager[_0xc2c1a0(0x837)],_0x332b4a=BattleManager[_0xc2c1a0(0x427)],_0x5f30e2=BattleManager[_0xc2c1a0(0x56a)]?BattleManager['_allTargets'][_0xc2c1a0(0x73e)](0x0):[],_0x3f3816=BattleManager[_0xc2c1a0(0x7ba)],_0x4519dd=_0x34f82a[_0xc2c1a0(0x755)]??![];if(!_0x40b10b||!_0x74aed6||!_0x332b4a)return;if(!_0x74aed6[_0xc2c1a0(0x5c4)]())return;let _0x426bef=_0x4519dd?_0x3f3816[_0xc2c1a0(0x232)](_0x332b4a):0x1;for(let _0x2100f6=0x0;_0x2100f6<_0x426bef;_0x2100f6++){for(const _0x1f7ade of _0x5f30e2){if(!_0x1f7ade)continue;_0x4519dd&&_0x332b4a[_0xc2c1a0(0x58a)]()&&('JQjYV'!==_0xc2c1a0(0x6f9)?_0x3f3816['push'](_0xc2c1a0(0x6a6),_0x332b4a,_0x2100f6):(_0x9fadf9['BattleCore'][_0xc2c1a0(0xc7a)]&&_0x172b9b['BattleCore'][_0xc2c1a0(0xc7a)][_0xc2c1a0(0xb96)](this,_0x512ee8),_0x148933['BattleCore'][_0xc2c1a0(0xbd6)](_0x1caa02)));if(_0x34f82a[_0xc2c1a0(0xb20)])_0x3f3816['push']('performAction',_0x332b4a,_0x74aed6);if(_0x34f82a[_0xc2c1a0(0x3bb)]>0x0)_0x3f3816[_0xc2c1a0(0x395)](_0xc2c1a0(0x32f),_0x34f82a[_0xc2c1a0(0x3bb)]);if(_0x34f82a[_0xc2c1a0(0x97a)])_0x3f3816[_0xc2c1a0(0x395)](_0xc2c1a0(0xa43),_0x332b4a,[_0x1f7ade],_0x74aed6[_0xc2c1a0(0x5c4)]()[_0xc2c1a0(0x72e)]);if(_0x34f82a['WaitCount2']>0x0)_0x3f3816[_0xc2c1a0(0x395)](_0xc2c1a0(0x32f),_0x34f82a[_0xc2c1a0(0x1df)]);if(_0x34f82a[_0xc2c1a0(0x857)])_0x3f3816[_0xc2c1a0(0x395)](_0xc2c1a0(0xc00),_0x332b4a,_0x1f7ade);}}_0x4519dd&&_0x332b4a[_0xc2c1a0(0x58a)]()&&_0x3f3816[_0xc2c1a0(0x395)]('clearActiveWeaponSet',_0x332b4a);if(_0x34f82a[_0xc2c1a0(0x861)])_0x3f3816[_0xc2c1a0(0x395)]('applyImmortal',_0x332b4a,_0x5f30e2,![]);_0x40b10b[_0xc2c1a0(0x4ca)](_0xc2c1a0(0xc7e));}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x25d),_0x1dd806=>{const _0x33ed14=_0x10ff30;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x33ed14(0xb1e)](_0x1dd806,_0x1dd806);const _0x38c91d=$gameTemp[_0x33ed14(0x621)](),_0x3d8e2f=BattleManager['_action'],_0x1569db=BattleManager['_subject'],_0xce1280=BattleManager[_0x33ed14(0x56a)]?BattleManager[_0x33ed14(0x56a)][_0x33ed14(0x73e)](0x0):[],_0xae2655=BattleManager[_0x33ed14(0x7ba)];if(!_0x38c91d||!_0x3d8e2f||!_0x1569db)return;if(!_0x3d8e2f['item']())return;if(_0x1dd806[_0x33ed14(0x861)])_0xae2655[_0x33ed14(0x395)](_0x33ed14(0x1e1),_0x1569db,_0xce1280,![]);if(_0x1dd806[_0x33ed14(0x819)])_0xae2655[_0x33ed14(0x395)](_0x33ed14(0xb56));if(_0x1dd806[_0x33ed14(0x577)])_0xae2655['push']('waitForEffect');if(_0x1dd806[_0x33ed14(0x57b)])_0xae2655['push'](_0x33ed14(0xb10));if(_0x1dd806[_0x33ed14(0x503)])_0xae2655[_0x33ed14(0x395)](_0x33ed14(0x940),_0x1569db);if(_0x1dd806[_0x33ed14(0x405)])_0xae2655[_0x33ed14(0x395)](_0x33ed14(0x713));_0x38c91d[_0x33ed14(0x4ca)](_0x33ed14(0xc7e));}),PluginManager[_0x10ff30(0x651)](pluginData['name'],_0x10ff30(0x7c6),_0x4765a0=>{const _0xb1b482=_0x10ff30;if(!SceneManager[_0xb1b482(0xc1e)]())return;if(!Imported[_0xb1b482(0xadf)])return;VisuMZ['ConvertParams'](_0x4765a0,_0x4765a0);const _0x488919=$gameTemp['getLastPluginCommandInterpreter'](),_0x170c7=_0x4765a0[_0xb1b482(0x75a)];if(!_0x488919)return;$gameScreen[_0xb1b482(0xb1d)](_0x4765a0[_0xb1b482(0xa5b)],_0x4765a0[_0xb1b482(0x200)],_0x4765a0['EasingType']);if(_0x170c7)_0x488919[_0xb1b482(0x4ca)](_0xb1b482(0xa34));}),PluginManager[_0x10ff30(0x651)](pluginData['name'],_0x10ff30(0xaa8),_0xf53ff5=>{const _0x520d56=_0x10ff30;if(!SceneManager[_0x520d56(0xc1e)]())return;if(!Imported[_0x520d56(0xadf)])return;VisuMZ['ConvertParams'](_0xf53ff5,_0xf53ff5);const _0x592075=$gameTemp[_0x520d56(0x621)](),_0x4b921e=_0xf53ff5['WaitForAngle'];if(!_0x592075)return;$gameScreen['setBattleAngle'](0x0,_0xf53ff5[_0x520d56(0x200)],_0xf53ff5[_0x520d56(0x46c)]);if(_0x4b921e)_0x592075[_0x520d56(0x4ca)]('battleAngle');}),PluginManager[_0x10ff30(0x651)](pluginData['name'],_0x10ff30(0x98f),_0xd5957c=>{const _0x18b11d=_0x10ff30;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x18b11d(0xadf)])return;const _0x2d0f24=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x2d0f24)return;_0x2d0f24[_0x18b11d(0x4ca)](_0x18b11d(0xa34));}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xadb),_0x2a25c9=>{const _0x1c0d4d=_0x10ff30;if(!SceneManager[_0x1c0d4d(0xc1e)]())return;VisuMZ[_0x1c0d4d(0xb1e)](_0x2a25c9,_0x2a25c9);const _0x5f4642=$gameTemp[_0x1c0d4d(0x621)](),_0x22e802=BattleManager[_0x1c0d4d(0x837)],_0x1c14f2=BattleManager[_0x1c0d4d(0x427)],_0x4a1137=VisuMZ['CreateActionSequenceTargets'](_0x2a25c9[_0x1c0d4d(0xa62)]),_0x181d59=_0x2a25c9[_0x1c0d4d(0x606)],_0x4686bf=BattleManager[_0x1c0d4d(0x7ba)];if(!_0x5f4642||!_0x22e802||!_0x1c14f2)return;if(!_0x22e802[_0x1c0d4d(0x5c4)]())return;let _0x13953d=_0x22e802[_0x1c0d4d(0x5c4)]()[_0x1c0d4d(0x72e)];if(_0x13953d<0x0)_0x13953d=_0x1c14f2[_0x1c0d4d(0xba2)]();$gameTemp['requestAnimation'](_0x4a1137,_0x13953d,_0x181d59),_0x2a25c9[_0x1c0d4d(0xc5a)]&&_0x5f4642[_0x1c0d4d(0x4ca)](_0x1c0d4d(0xcab));}),PluginManager[_0x10ff30(0x651)](pluginData['name'],_0x10ff30(0xbdd),_0x430bf4=>{const _0x4bc93e=_0x10ff30;if(!SceneManager[_0x4bc93e(0xc1e)]())return;VisuMZ['ConvertParams'](_0x430bf4,_0x430bf4);const _0x47d25b=$gameTemp[_0x4bc93e(0x621)](),_0x31090a=BattleManager['_subject'],_0x6552d2=VisuMZ['CreateActionSequenceTargets'](_0x430bf4['Targets']),_0x249c79=_0x430bf4[_0x4bc93e(0x606)],_0x33d371=BattleManager[_0x4bc93e(0x7ba)];if(!_0x47d25b||!_0x31090a)return;const _0x5ef75b=_0x31090a['attackAnimationId1']();$gameTemp[_0x4bc93e(0x1e7)](_0x6552d2,_0x5ef75b,_0x249c79);if(_0x430bf4['WaitForAnimation']){if(_0x4bc93e(0x635)!=='aylEZ')return!![];else _0x47d25b[_0x4bc93e(0x4ca)](_0x4bc93e(0xcab));}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Animation_AttackAnimation2',_0x1d39fc=>{const _0x2f04c8=_0x10ff30;if(!SceneManager[_0x2f04c8(0xc1e)]())return;VisuMZ['ConvertParams'](_0x1d39fc,_0x1d39fc);const _0x776bc=_0x11680e['attackAnimationIdSlot'](_0x1d39fc['Slot']);if(_0x776bc<=0x0)return;const _0x57b9af=$gameTemp[_0x2f04c8(0x621)](),_0x11680e=BattleManager[_0x2f04c8(0x427)],_0x117e32=VisuMZ[_0x2f04c8(0x2f2)](_0x1d39fc[_0x2f04c8(0xa62)]),_0x2c5555=_0x1d39fc[_0x2f04c8(0x606)],_0x2b84a6=BattleManager['_logWindow'];if(!_0x57b9af||!_0x11680e)return;$gameTemp[_0x2f04c8(0x1e7)](_0x117e32,_0x776bc,_0x2c5555),_0x1d39fc['WaitForAnimation']&&_0x57b9af['setWaitMode'](_0x2f04c8(0xcab));}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xbd2),_0x5ace52=>{const _0x2e0903=_0x10ff30;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x5ace52,_0x5ace52);const _0xd46e4=$gameTemp[_0x2e0903(0x621)](),_0x48b368=BattleManager[_0x2e0903(0x837)],_0x50b839=_0x5ace52['Mirror'],_0x179f79=VisuMZ[_0x2e0903(0x2f2)](_0x5ace52[_0x2e0903(0xa62)]);if(!_0xd46e4||!_0x48b368)return;if(!_0x48b368[_0x2e0903(0x5c4)]())return;for(const _0x27d462 of _0x179f79){if(!_0x27d462)continue;_0x27d462[_0x2e0903(0xc41)](_0x48b368,_0x50b839);}if(_0x5ace52[_0x2e0903(0xc5a)])_0xd46e4[_0x2e0903(0x4ca)]('battleAnimation');}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x2d8),_0x5f0559=>{const _0x26a1db=_0x10ff30;VisuMZ[_0x26a1db(0xb1e)](_0x5f0559,_0x5f0559);const _0x39f735=$gameTemp[_0x26a1db(0x621)](),_0x25538f=VisuMZ[_0x26a1db(0x2f2)](_0x5f0559[_0x26a1db(0xa62)]),_0x458d45=_0x5f0559[_0x26a1db(0x81d)];if(!_0x458d45)return;for(const _0x59849b of _0x25538f){if(_0x26a1db(0x369)===_0x26a1db(0x369)){if(!_0x59849b)continue;if(!_0x59849b[_0x26a1db(0x58a)]())continue;_0x59849b[_0x26a1db(0x569)](_0x458d45);}else{this['commandName'](_0x11e929)[_0x26a1db(0x22f)](/\\I\[(\d+)\]/i);const _0x239587=_0x2489e9(_0x371753['$1'])||0x0,_0x9a3c88=this[_0x26a1db(0x321)](_0x2b0d51),_0x10bec1=_0x9a3c88['x']+_0x585cd9[_0x26a1db(0xcce)]((_0x9a3c88[_0x26a1db(0x7b2)]-_0x1069f0[_0x26a1db(0x824)])/0x2),_0x3f1241=_0x9a3c88['y']+(_0x9a3c88['height']-_0x2eebf9[_0x26a1db(0x282)])/0x2;this[_0x26a1db(0x4f6)](_0x239587,_0x10bec1,_0x3f1241);}}}),PluginManager[_0x10ff30(0x651)](pluginData['name'],_0x10ff30(0x445),_0x34b7f5=>{const _0x4176c0=_0x10ff30;if(!SceneManager[_0x4176c0(0x2df)])return;if(!SceneManager[_0x4176c0(0x2df)][_0x4176c0(0x93a)])return;if(!Imported[_0x4176c0(0xa8d)])return;VisuMZ[_0x4176c0(0xb1e)](_0x34b7f5,_0x34b7f5);const _0x1dcac9=$gameTemp['getLastPluginCommandInterpreter'](),_0x1b5b74=Math[_0x4176c0(0x556)](_0x34b7f5['pointX']),_0x2a63ae=Math[_0x4176c0(0x556)](_0x34b7f5[_0x4176c0(0x49c)]);$gameTemp[_0x4176c0(0x4b6)](_0x1b5b74,_0x2a63ae,_0x34b7f5[_0x4176c0(0x39f)],_0x34b7f5['Mirror'],_0x34b7f5[_0x4176c0(0xc73)]),_0x34b7f5['WaitComplete']&&_0x1dcac9&&(SceneManager[_0x4176c0(0x2df)][_0x4176c0(0x93a)]['updatePointAnimations'](),_0x1dcac9[_0x4176c0(0x4ca)]('battleAnimation'));}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],'ActSeq_Animation_ShowAnimation',_0x3d708f=>{const _0x25b925=_0x10ff30;if(!SceneManager[_0x25b925(0xc1e)]())return;VisuMZ[_0x25b925(0xb1e)](_0x3d708f,_0x3d708f);const _0x21ac98=$gameTemp['getLastPluginCommandInterpreter'](),_0x1d7cde=VisuMZ[_0x25b925(0x2f2)](_0x3d708f[_0x25b925(0xa62)]),_0x338ae7=_0x3d708f[_0x25b925(0x39f)],_0x57437c=_0x3d708f['Mirror'];if(!_0x21ac98)return;$gameTemp[_0x25b925(0x1e7)](_0x1d7cde,_0x338ae7,_0x57437c);if(_0x3d708f['WaitForAnimation'])_0x21ac98[_0x25b925(0x4ca)](_0x25b925(0xcab));}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],'ActSeq_Animation_WaitForAnimation',_0xe4cabc=>{const _0x1c73a5=_0x10ff30;if(!SceneManager[_0x1c73a5(0xc1e)]())return;const _0x1bf1ec=$gameTemp[_0x1c73a5(0x621)]();if(!_0x1bf1ec)return;_0x1bf1ec[_0x1c73a5(0x4ca)]('battleAnimation');}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],'ActSeq_BattleLog_AddText',_0x51d5f1=>{const _0x29bd4f=_0x10ff30;if(!SceneManager[_0x29bd4f(0xc1e)]())return;VisuMZ['ConvertParams'](_0x51d5f1,_0x51d5f1);const _0x2a1544=BattleManager[_0x29bd4f(0x7ba)],_0x57aecd=_0x51d5f1[_0x29bd4f(0x272)]&&Imported['VisuMZ_4_CombatLog'];_0x2a1544['addText'](_0x51d5f1[_0x29bd4f(0xc34)]),_0x57aecd&&Imported[_0x29bd4f(0x479)]&&$gameSystem[_0x29bd4f(0xb29)](_0x51d5f1[_0x29bd4f(0xc34)]||'',_0x51d5f1[_0x29bd4f(0x2eb)]||0x0);}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xae5),_0x4cb4cb=>{const _0x88ce1=_0x10ff30;if(!SceneManager['isSceneBattle']())return;const _0x15ec47=BattleManager['_logWindow'];_0x15ec47[_0x88ce1(0xb10)]();}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x645),_0x3419dd=>{const _0x1d67f6=_0x10ff30;if(!SceneManager[_0x1d67f6(0xc1e)]())return;const _0x5400a0=$gameTemp[_0x1d67f6(0x621)](),_0x18158a=BattleManager[_0x1d67f6(0x837)],_0x4d68f1=BattleManager[_0x1d67f6(0x427)],_0x32f664=BattleManager[_0x1d67f6(0x7ba)];if(!_0x5400a0||!_0x18158a||!_0x4d68f1)return;if(!_0x18158a['item']())return;_0x32f664[_0x1d67f6(0x352)](_0x4d68f1,_0x18158a[_0x1d67f6(0x5c4)]()),_0x5400a0[_0x1d67f6(0x4ca)](_0x1d67f6(0xc7e));}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],'ActSeq_BattleLog_PopBaseLine',_0x418b5f=>{const _0x45eb1f=_0x10ff30;if(!SceneManager[_0x45eb1f(0xc1e)]())return;const _0x4995b6=BattleManager['_logWindow'];_0x4995b6[_0x45eb1f(0x64e)]();}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x7d4),_0x46e5ce=>{const _0x461d76=_0x10ff30;if(!SceneManager[_0x461d76(0xc1e)]())return;const _0x20061e=BattleManager[_0x461d76(0x7ba)];_0x20061e[_0x461d76(0xc98)]();}),PluginManager[_0x10ff30(0x651)](pluginData['name'],_0x10ff30(0x274),_0x390e56=>{const _0x3476e5=_0x10ff30;if(!SceneManager['isSceneBattle']())return;const _0xf4495c=BattleManager[_0x3476e5(0x7ba)];_0xf4495c[_0x3476e5(0x219)]();}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x690),_0x3ec8c6=>{const _0x292371=_0x10ff30;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x292371(0xb1e)](_0x3ec8c6,_0x3ec8c6),SceneManager[_0x292371(0x2df)][_0x292371(0x473)](_0x3ec8c6[_0x292371(0x596)]);}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],'ActSeq_BattleLog_WaitForBattleLog',_0xb33473=>{const _0x2e2cf1=_0x10ff30;if(!SceneManager['isSceneBattle']())return;const _0x422b94=$gameTemp[_0x2e2cf1(0x621)]();_0x422b94['setWaitMode']('battlelog');}),PluginManager['registerCommand'](pluginData['name'],_0x10ff30(0x588),_0xb0bcf7=>{const _0xfc656c=_0x10ff30;if(!SceneManager[_0xfc656c(0xc1e)]())return;const _0x5bf0b7=$gameTemp[_0xfc656c(0x621)](),_0x3c0058=BattleManager[_0xfc656c(0x7ba)];_0x3c0058['waitForNewLine'](),_0x5bf0b7[_0xfc656c(0x4ca)]('battlelog');}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x561),_0x5e5a2d=>{const _0x40cfd4=_0x10ff30;if(!SceneManager[_0x40cfd4(0xc1e)]())return;if(!Imported[_0x40cfd4(0xadf)])return;VisuMZ[_0x40cfd4(0xb1e)](_0x5e5a2d,_0x5e5a2d);const _0x52f827=$gameScreen[_0x40cfd4(0x684)]();_0x52f827['cameraClamp']=_0x5e5a2d[_0x40cfd4(0xb07)];}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Camera_FocusPoint',_0x35e3b0=>{const _0x2a98b5=_0x10ff30;if(!SceneManager[_0x2a98b5(0xc1e)]())return;if(!Imported[_0x2a98b5(0xadf)])return;VisuMZ[_0x2a98b5(0xb1e)](_0x35e3b0,_0x35e3b0);const _0x5d3533=$gameTemp[_0x2a98b5(0x621)](),_0x1130ec=_0x35e3b0[_0x2a98b5(0xcc5)];$gameScreen[_0x2a98b5(0x7b6)](_0x35e3b0[_0x2a98b5(0x5dc)],_0x35e3b0['FocusY'],_0x35e3b0['Duration'],_0x35e3b0[_0x2a98b5(0x46c)]);if(_0x1130ec)_0x5d3533['setWaitMode'](_0x2a98b5(0xbb0));}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],'ActSeq_Camera_FocusTarget',_0x560c85=>{const _0x24a694=_0x10ff30;if(!SceneManager[_0x24a694(0xc1e)]())return;if(!Imported[_0x24a694(0xadf)])return;VisuMZ[_0x24a694(0xb1e)](_0x560c85,_0x560c85);const _0x4df74f=$gameTemp[_0x24a694(0x621)](),_0x1b9602=VisuMZ[_0x24a694(0x2f2)](_0x560c85[_0x24a694(0xa62)]),_0x58636c=_0x560c85[_0x24a694(0xcc5)];$gameScreen['setBattleCameraTargets'](_0x1b9602,_0x560c85[_0x24a694(0x200)],_0x560c85[_0x24a694(0x46c)]);if(_0x58636c)_0x4df74f[_0x24a694(0x4ca)]('battleCamera');}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],'ActSeq_Camera_Offset',_0x5a9567=>{const _0x14d9d1=_0x10ff30;if(!SceneManager[_0x14d9d1(0xc1e)]())return;if(!Imported[_0x14d9d1(0xadf)])return;VisuMZ[_0x14d9d1(0xb1e)](_0x5a9567,_0x5a9567);const _0x10493c=$gameTemp[_0x14d9d1(0x621)](),_0xd5dc93=_0x5a9567['WaitForCamera'];$gameScreen['setBattleCameraOffset'](_0x5a9567[_0x14d9d1(0x795)],_0x5a9567[_0x14d9d1(0x6b8)],_0x5a9567[_0x14d9d1(0x200)],_0x5a9567['EasingType']);if(_0xd5dc93)_0x10493c[_0x14d9d1(0x4ca)](_0x14d9d1(0xbb0));}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],'ActSeq_Camera_Reset',_0x51bad5=>{const _0x4a9123=_0x10ff30;if(!SceneManager[_0x4a9123(0xc1e)]())return;if(!Imported[_0x4a9123(0xadf)])return;VisuMZ['ConvertParams'](_0x51bad5,_0x51bad5);const _0x28a452=$gameTemp[_0x4a9123(0x621)](),_0xa24546=_0x51bad5[_0x4a9123(0xa51)],_0x168a27=_0x51bad5[_0x4a9123(0x390)],_0x19a970=_0x51bad5[_0x4a9123(0xcc5)];if(_0xa24546){const _0xcab0e7=Math[_0x4a9123(0x556)](Graphics['width']/0x2),_0x2d8113=Math[_0x4a9123(0x556)](Graphics['height']/0x2);$gameScreen['setBattleCameraPoint'](_0xcab0e7,_0x2d8113,_0x51bad5[_0x4a9123(0x200)],_0x51bad5[_0x4a9123(0x46c)]);}_0x168a27&&('wBvTw'!==_0x4a9123(0xba3)?(_0x457c35=_0x10eaf1['battler']()['_homeX'],_0x267210=_0x1cccc6[_0x4a9123(0x843)]()[_0x4a9123(0x2f8)]):$gameScreen[_0x4a9123(0x64c)](0x0,0x0,_0x51bad5[_0x4a9123(0x200)],_0x51bad5[_0x4a9123(0x46c)]));if(_0x19a970)_0x28a452[_0x4a9123(0x4ca)](_0x4a9123(0xbb0));}),PluginManager[_0x10ff30(0x651)](pluginData['name'],'ActSeq_Camera_WaitForCamera',_0x131cc5=>{const _0x2a8405=_0x10ff30;if(!SceneManager[_0x2a8405(0xc1e)]())return;if(!Imported[_0x2a8405(0xadf)])return;const _0x3d9795=$gameTemp[_0x2a8405(0x621)]();if(!_0x3d9795)return;_0x3d9795[_0x2a8405(0x4ca)]('battleCamera');}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xc48),_0x3e9469=>{const _0x1b32d2=_0x10ff30;if(!SceneManager[_0x1b32d2(0xc1e)]())return;if(!Imported[_0x1b32d2(0x476)])return;VisuMZ[_0x1b32d2(0xb1e)](_0x3e9469,_0x3e9469);const _0x2b2a4e=VisuMZ[_0x1b32d2(0x2f2)](_0x3e9469[_0x1b32d2(0xa62)]),_0x1a8b8a=_0x3e9469['MotionAni'][_0x1b32d2(0x799)]()['trim']();for(const _0x2e9546 of _0x2b2a4e){if(!_0x2e9546)continue;_0x2e9546[_0x1b32d2(0x4f3)](_0x1a8b8a);}}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x4fa),_0x59cea8=>{const _0x2baab7=_0x10ff30;if(!SceneManager[_0x2baab7(0xc1e)]())return;if(!Imported[_0x2baab7(0x476)])return;VisuMZ[_0x2baab7(0xb1e)](_0x59cea8,_0x59cea8);const _0x35b395=VisuMZ[_0x2baab7(0x2f2)](_0x59cea8[_0x2baab7(0xa62)]),_0x2f1843=_0x59cea8[_0x2baab7(0xb63)];for(const _0x2ffa7c of _0x35b395){if(_0x2baab7(0x54a)===_0x2baab7(0x9c7)){_0x5aa3f2[_0x2baab7(0xb0c)][_0x2baab7(0x58c)][_0x2baab7(0xb96)](this);if(this['_commandNameWindow'])this['updateCommandNameWindow']();}else{if(!_0x2ffa7c)continue;_0x2ffa7c[_0x2baab7(0xcbc)]()[_0x2baab7(0xb92)]=_0x2f1843;}}}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x7be),_0x17c504=>{const _0xd10a4c=_0x10ff30;if(!SceneManager[_0xd10a4c(0xc1e)]())return;if(!Imported[_0xd10a4c(0xb05)])return;VisuMZ[_0xd10a4c(0xb1e)](_0x17c504,_0x17c504);const _0x16b574=BattleManager[_0xd10a4c(0x837)],_0x42b1aa=_0x17c504[_0xd10a4c(0x3e1)];if(!_0x16b574)return;_0x16b574[_0xd10a4c(0x41c)]=_0x42b1aa;}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],'ActSeq_Element_Clear',_0x432455=>{const _0x321df5=_0x10ff30;if(!SceneManager[_0x321df5(0xc1e)]())return;if(!Imported[_0x321df5(0xb05)])return;const _0x4ec154=BattleManager['_action'];if(!_0x4ec154)return;_0x4ec154[_0x321df5(0x380)]();}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x202),_0x2c9b20=>{const _0x55d937=_0x10ff30;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x55d937(0xb05)])return;VisuMZ['ConvertParams'](_0x2c9b20,_0x2c9b20);const _0x144ebe=BattleManager['_action'],_0x30da3f=_0x2c9b20[_0x55d937(0x3e1)];if(!_0x144ebe)return;_0x144ebe[_0x55d937(0xc45)]=_0x30da3f;}),PluginManager['registerCommand'](pluginData['name'],_0x10ff30(0x432),_0xc8e8d3=>{const _0x21ba73=_0x10ff30;if(!SceneManager[_0x21ba73(0xc1e)]())return;if(!Imported[_0x21ba73(0xb05)])return;const _0x132ad5=BattleManager[_0x21ba73(0x837)];if(!_0x132ad5)return;_0x132ad5[_0x21ba73(0x75d)]=!![];}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xc59),_0x5e4dff=>{const _0x28f05b=_0x10ff30;if(!Imported[_0x28f05b(0x2e8)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x28f05b(0xb1e)](_0x5e4dff,_0x5e4dff);const _0x32bad5=VisuMZ[_0x28f05b(0x2f2)](_0x5e4dff['Targets']);for(const _0x4bfa88 of _0x32bad5){if(_0x28f05b(0x226)===_0x28f05b(0xcb1))return _0x59b19a[_0x28f05b(0xc07)]()['filter'](_0x4af3d2=>_0x4af3d2!==_0x5539b2);else{if(!_0x4bfa88)continue;_0x4bfa88[_0x28f05b(0x6af)]('noise'),_0x4bfa88[_0x28f05b(0x6af)]('glitch'),_0x4bfa88[_0x28f05b(0x6af)]('tv'),_0x4bfa88[_0x28f05b(0xcc1)]();}}$gamePlayer['refresh']();}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],'ActSeq_Horror_GlitchCreate',_0x59144d=>{const _0x1cfba7=_0x10ff30;if(!Imported[_0x1cfba7(0x2e8)])return;if(!SceneManager[_0x1cfba7(0xc1e)]())return;VisuMZ[_0x1cfba7(0xb1e)](_0x59144d,_0x59144d);const _0xfb7de8=VisuMZ[_0x1cfba7(0x2f2)](_0x59144d[_0x1cfba7(0xa62)]),_0x4e9c11=_0x1cfba7(0x96c);_0x59144d['sliceMin']=Math['ceil'](_0x59144d['slices']/0x2),_0x59144d[_0x1cfba7(0x689)]=_0x59144d[_0x1cfba7(0x661)],_0x59144d[_0x1cfba7(0x8c9)]=!![];for(const _0x5009c2 of _0xfb7de8){if(_0x1cfba7(0x212)!=='ksQQJ'){if(!_0x5009c2)continue;_0x5009c2[_0x1cfba7(0x391)](_0x4e9c11,_0x59144d);}else _0x45c7ea[_0x1cfba7(0x4ca)](_0x1cfba7(0x3b1));}$gamePlayer[_0x1cfba7(0x219)]();}),PluginManager[_0x10ff30(0x651)](pluginData['name'],_0x10ff30(0x2fc),_0x454b0f=>{const _0x44cd89=_0x10ff30;if(!Imported[_0x44cd89(0x2e8)])return;if(!SceneManager[_0x44cd89(0xc1e)]())return;VisuMZ['ConvertParams'](_0x454b0f,_0x454b0f);const _0x385d7c=VisuMZ[_0x44cd89(0x2f2)](_0x454b0f[_0x44cd89(0xa62)]);for(const _0x5714d3 of _0x385d7c){if(_0x44cd89(0x8a9)===_0x44cd89(0x481)){this[_0x44cd89(0x768)](_0x274aa2)[_0x44cd89(0x22f)](/\\I\[(\d+)\]/i);const _0x5ce87c=_0x452965(_0x14de8b['$1'])||0x0,_0x1c2eb4=this[_0x44cd89(0x321)](_0xc4d19f),_0x590357=_0x1c2eb4['x']+_0x5ba79e[_0x44cd89(0xcce)]((_0x1c2eb4[_0x44cd89(0x7b2)]-_0x12af1c[_0x44cd89(0x824)])/0x2),_0x3e681e=_0x1c2eb4['y']+(_0x1c2eb4[_0x44cd89(0x956)]-_0x5689c8[_0x44cd89(0x282)])/0x2;this['drawIcon'](_0x5ce87c,_0x590357,_0x3e681e);}else{if(!_0x5714d3)continue;_0x5714d3['removeHorrorEffect'](_0x44cd89(0x96c));}}$gamePlayer[_0x44cd89(0x219)]();}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],'ActSeq_Horror_NoiseCreate',_0x5cff05=>{const _0x2288d1=_0x10ff30;if(!Imported[_0x2288d1(0x2e8)])return;if(!SceneManager[_0x2288d1(0xc1e)]())return;VisuMZ[_0x2288d1(0xb1e)](_0x5cff05,_0x5cff05);const _0x455483=VisuMZ['CreateActionSequenceTargets'](_0x5cff05[_0x2288d1(0xa62)]),_0x5aa53f=_0x2288d1(0x21a);for(const _0x280c31 of _0x455483){if(!_0x280c31)continue;_0x280c31[_0x2288d1(0x391)](_0x5aa53f,_0x5cff05);}$gamePlayer[_0x2288d1(0x219)]();}),PluginManager[_0x10ff30(0x651)](pluginData['name'],_0x10ff30(0x8d7),_0x2a63b6=>{const _0x223755=_0x10ff30;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x223755(0xc1e)]())return;VisuMZ[_0x223755(0xb1e)](_0x2a63b6,_0x2a63b6);const _0x5558cc=VisuMZ[_0x223755(0x2f2)](_0x2a63b6[_0x223755(0xa62)]);for(const _0xbe24df of _0x5558cc){if(_0x223755(0x48e)!==_0x223755(0x48e)){return _0x5609bb[_0x223755(0x95b)][_0x223755(0xa40)][_0x223755(0xb96)](this);;}else{if(!_0xbe24df)continue;_0xbe24df[_0x223755(0x6af)]('noise');}}$gamePlayer[_0x223755(0x219)]();}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x478),_0x3161a8=>{const _0x1e5453=_0x10ff30;if(!Imported[_0x1e5453(0x2e8)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x3161a8,_0x3161a8);const _0x456324=VisuMZ[_0x1e5453(0x2f2)](_0x3161a8[_0x1e5453(0xa62)]),_0x1636bc='tv';for(const _0x2d2ad5 of _0x456324){if(!_0x2d2ad5)continue;_0x2d2ad5[_0x1e5453(0x391)](_0x1636bc,_0x3161a8);}$gamePlayer[_0x1e5453(0x219)]();}),PluginManager[_0x10ff30(0x651)](pluginData['name'],_0x10ff30(0xb00),_0x27f93c=>{const _0x3df499=_0x10ff30;if(!Imported[_0x3df499(0x2e8)])return;if(!SceneManager[_0x3df499(0xc1e)]())return;VisuMZ[_0x3df499(0xb1e)](_0x27f93c,_0x27f93c);const _0x278899=VisuMZ[_0x3df499(0x2f2)](_0x27f93c[_0x3df499(0xa62)]);for(const _0x290e18 of _0x278899){if(!_0x290e18)continue;_0x290e18['removeHorrorEffect']('tv');}$gamePlayer[_0x3df499(0x219)]();}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x265),_0xae90a=>{const _0x472b72=_0x10ff30;if(!Imported[_0x472b72(0xa47)])return;const _0x27c1ff=SceneManager[_0x472b72(0x2df)][_0x472b72(0x93a)];if(!_0x27c1ff)return;if(VisuMZ['ActSeqImpact'][_0x472b72(0x994)]<=1.04){if(_0x472b72(0x8e6)==='ZpNBE'){alert(_0x472b72(0x467)),SceneManager[_0x472b72(0xa8c)]();return;}else _0x3c1485[_0x472b72(0x95b)][_0x472b72(0xc79)]['call'](this,_0x2a440d);}VisuMZ['ConvertParams'](_0xae90a,_0xae90a);const _0x19cc95=_0xae90a['Enable'];_0x27c1ff[_0x472b72(0xc2c)](_0x19cc95);}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xa80),_0x1f4077=>{const _0x1408e2=_0x10ff30;if(!SceneManager[_0x1408e2(0xc1e)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x86301=SceneManager[_0x1408e2(0x2df)][_0x1408e2(0x93a)];if(!_0x86301)return;VisuMZ[_0x1408e2(0xb1e)](_0x1f4077,_0x1f4077);const _0x330126=_0x1f4077[_0x1408e2(0xa48)]||0x1,_0x477e25=_0x1f4077[_0x1408e2(0x200)]||0x1,_0x5494f0=_0x1f4077[_0x1408e2(0x46c)]||_0x1408e2(0x92a);_0x86301[_0x1408e2(0x45d)](_0x330126,_0x477e25,_0x5494f0);}),PluginManager[_0x10ff30(0x651)](pluginData['name'],'ActSeq_Impact_Desaturate',_0x26f2ec=>{const _0x357d27=_0x10ff30;if(!Imported[_0x357d27(0xa47)])return;const _0xb4d7b2=SceneManager[_0x357d27(0x2df)][_0x357d27(0x93a)];if(!_0xb4d7b2)return;if(VisuMZ[_0x357d27(0xa89)]['version']<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x357d27(0xa8c)]();return;}VisuMZ[_0x357d27(0xb1e)](_0x26f2ec,_0x26f2ec);const _0x997f13=_0x26f2ec['Enable'];_0xb4d7b2[_0x357d27(0x465)](_0x997f13);}),PluginManager[_0x10ff30(0x651)](pluginData['name'],_0x10ff30(0x7e6),_0x1871bc=>{const _0x487c8e=_0x10ff30;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x41395a=SceneManager['_scene'][_0x487c8e(0x93a)];if(!_0x41395a)return;VisuMZ[_0x487c8e(0xb1e)](_0x1871bc,_0x1871bc);const _0x4b588c=Number(_0x1871bc[_0x487c8e(0xa5b)])||0x0,_0x3552e1=Number(_0x1871bc[_0x487c8e(0x703)]),_0x560750=_0x1871bc[_0x487c8e(0x200)]||0x1,_0x5af701=_0x1871bc[_0x487c8e(0x46c)]||_0x487c8e(0x92a);_0x41395a[_0x487c8e(0x882)](_0x4b588c,_0x3552e1,_0x560750,_0x5af701);}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xc9c),_0x1f29f8=>{const _0x5146c0=_0x10ff30;if(!SceneManager[_0x5146c0(0xc1e)]())return;if(!Imported[_0x5146c0(0xa47)])return;const _0x19c1d6=SceneManager['_scene']['_spriteset'];if(!_0x19c1d6)return;VisuMZ[_0x5146c0(0xb1e)](_0x1f29f8,_0x1f29f8);const _0x273341=Number(_0x1f29f8[_0x5146c0(0xa5b)])||0x0,_0x159bde=Number(_0x1f29f8[_0x5146c0(0x703)]),_0x247074=_0x1f29f8['Duration']||0x1,_0x386244=_0x1f29f8[_0x5146c0(0x46c)]||'Linear',_0x300a2e=VisuMZ['CreateActionSequenceTargets'](_0x1f29f8['Targets']);for(const _0x3b342d of _0x300a2e){if(_0x5146c0(0x27a)!==_0x5146c0(0x1c8)){if(!_0x3b342d)continue;if(!_0x3b342d[_0x5146c0(0x843)]())continue;_0x3b342d[_0x5146c0(0x843)]()[_0x5146c0(0x882)](_0x273341,_0x159bde,_0x247074,_0x386244);}else this[_0x5146c0(0x4ca)]('jump');}}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],'ActSeq_Impact_MotionTrailCreate',_0x3ea720=>{const _0x14e68a=_0x10ff30;if(!SceneManager[_0x14e68a(0xc1e)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ[_0x14e68a(0xb1e)](_0x3ea720,_0x3ea720);const _0xcb93a2={'delay':_0x3ea720[_0x14e68a(0xa3b)],'duration':_0x3ea720[_0x14e68a(0x6cb)],'hue':_0x3ea720[_0x14e68a(0x9cb)],'opacityStart':_0x3ea720[_0x14e68a(0x987)],'tone':_0x3ea720[_0x14e68a(0xa6f)],'visible':!![]},_0x3b7eea=VisuMZ[_0x14e68a(0x2f2)](_0x3ea720['Targets']);for(const _0x6aad85 of _0x3b7eea){if(!_0x6aad85)continue;_0x6aad85[_0x14e68a(0xa05)](_0xcb93a2);}}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x57f),_0x36e4b4=>{const _0x40ea4b=_0x10ff30;if(!SceneManager[_0x40ea4b(0xc1e)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ['ConvertParams'](_0x36e4b4,_0x36e4b4);const _0x45339f=VisuMZ[_0x40ea4b(0x2f2)](_0x36e4b4['Targets']);for(const _0x56fbb0 of _0x45339f){if(!_0x56fbb0)continue;_0x56fbb0['clearBattlerMotionTrailData']();}}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x7b0),_0x340de0=>{const _0x252c18=_0x10ff30;if(!Imported[_0x252c18(0xa47)])return;const _0x38be6a=SceneManager[_0x252c18(0x2df)][_0x252c18(0x93a)];if(!_0x38be6a)return;if(VisuMZ[_0x252c18(0xa89)][_0x252c18(0x994)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x252c18(0xa8c)]();return;}VisuMZ['ConvertParams'](_0x340de0,_0x340de0);const _0x5af81f=_0x340de0[_0x252c18(0x8f6)];_0x38be6a[_0x252c18(0xb6d)](_0x5af81f);}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x4e9),_0x558439=>{const _0x327a20=_0x10ff30;if(!Imported[_0x327a20(0xa47)])return;const _0x5e6157=SceneManager[_0x327a20(0x2df)][_0x327a20(0x93a)];if(!_0x5e6157)return;if(VisuMZ[_0x327a20(0xa89)][_0x327a20(0x994)]<=1.04){alert(_0x327a20(0x467)),SceneManager['exit']();return;}VisuMZ['ConvertParams'](_0x558439,_0x558439);const _0x3d688f=_0x558439[_0x327a20(0x8f6)];_0x5e6157[_0x327a20(0x579)](_0x3d688f);}),PluginManager['registerCommand'](pluginData['name'],_0x10ff30(0xa65),_0x532d71=>{const _0xd9cc89=_0x10ff30;if(!Imported[_0xd9cc89(0xa47)])return;const _0x4e551a=SceneManager[_0xd9cc89(0x2df)][_0xd9cc89(0x93a)];if(!_0x4e551a)return;VisuMZ[_0xd9cc89(0xb1e)](_0x532d71,_0x532d71);const _0x35be68=_0x532d71['X']||0x0,_0x57ebba=_0x532d71['Y']||0x0,_0x166253=_0x532d71[_0xd9cc89(0x82b)]||0x0,_0x41d7c5=_0x532d71['Wave']||0x0,_0x1918ae=_0x532d71[_0xd9cc89(0x200)]||0x1;_0x4e551a['setupShockwaveImpactFilter'](_0x35be68,_0x57ebba,_0x166253,_0x41d7c5,_0x1918ae);}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x912),_0x587c94=>{const _0x42ebfc=_0x10ff30;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x4dfbd3=SceneManager[_0x42ebfc(0x2df)]['_spriteset'];if(!_0x4dfbd3)return;VisuMZ[_0x42ebfc(0xb1e)](_0x587c94,_0x587c94);const _0x22dbbc=VisuMZ[_0x42ebfc(0x2f2)](_0x587c94['Targets']),_0x5df3c7=_0x587c94[_0x42ebfc(0x6f4)],_0x41674a=_0x587c94[_0x42ebfc(0x795)]||0x0,_0xfe01c9=_0x587c94[_0x42ebfc(0x6b8)]||0x0,_0x3886d7=_0x587c94['Amp']||0x0,_0x38c468=_0x587c94[_0x42ebfc(0x466)]||0x0,_0x245a18=_0x587c94[_0x42ebfc(0x200)]||0x1;for(const _0x4f1ae5 of _0x22dbbc){if(!_0x4f1ae5)continue;if(!_0x4f1ae5['battler']())continue;const _0x5b4f1d=_0x4f1ae5[_0x42ebfc(0x843)]();let _0xedb6f8=_0x5b4f1d[_0x42ebfc(0xa75)],_0xe11e9e=_0x5b4f1d['_baseY'];_0xedb6f8+=(Graphics[_0x42ebfc(0x7b2)]-Graphics[_0x42ebfc(0xb97)])/0x2,_0xe11e9e+=(Graphics[_0x42ebfc(0x956)]-Graphics[_0x42ebfc(0x9be)])/0x2;if(_0x5df3c7[_0x42ebfc(0x22f)](/front/i))_0xedb6f8+=(_0x4f1ae5[_0x42ebfc(0xccb)]()?0x1:-0x1)*_0x5b4f1d[_0x42ebfc(0x243)]()/0x2;else _0x5df3c7[_0x42ebfc(0x22f)](/back/i)&&(_0xedb6f8+=(_0x4f1ae5['isEnemy']()?-0x1:0x1)*_0x5b4f1d[_0x42ebfc(0x243)]()/0x2);if(_0x5df3c7[_0x42ebfc(0x22f)](/head/i))_0x42ebfc(0x42e)!==_0x42ebfc(0x42e)?this[_0x42ebfc(0x6b1)][_0x42ebfc(0x440)](this[_0x42ebfc(0x2e1)]):_0xe11e9e-=_0x5b4f1d['mainSpriteHeight']();else _0x5df3c7['match'](/center/i)&&(_0x42ebfc(0x459)!==_0x42ebfc(0x213)?_0xe11e9e-=_0x5b4f1d[_0x42ebfc(0x6d3)]()/0x2:this[_0x42ebfc(0x7ea)]());_0xedb6f8+=_0x41674a,_0xe11e9e+=_0xfe01c9,_0x4dfbd3['setupShockwaveImpactFilter'](_0xedb6f8,_0xe11e9e,_0x3886d7,_0x38c468,_0x245a18);}}),PluginManager[_0x10ff30(0x651)](pluginData['name'],_0x10ff30(0x294),_0x86ddfa=>{const _0x18e497=_0x10ff30;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x18e497(0xa47)])return;const _0x103250=SceneManager[_0x18e497(0x2df)]['_spriteset'];if(!_0x103250)return;VisuMZ[_0x18e497(0xb1e)](_0x86ddfa,_0x86ddfa);const _0x42f0cf=VisuMZ[_0x18e497(0x2f2)](_0x86ddfa[_0x18e497(0xa62)]),_0x70f41b=_0x86ddfa[_0x18e497(0x6f4)],_0x4788fe=_0x86ddfa[_0x18e497(0x795)]||0x0,_0x53192e=_0x86ddfa[_0x18e497(0x6b8)]||0x0,_0xc2334e=_0x86ddfa[_0x18e497(0x82b)]||0x0,_0x3e11aa=_0x86ddfa[_0x18e497(0x466)]||0x0,_0x318b13=_0x86ddfa[_0x18e497(0x200)]||0x1,_0x5c7928=Math[_0x18e497(0xa7f)](..._0x42f0cf[_0x18e497(0xad3)](_0x395b97=>_0x395b97[_0x18e497(0x843)]()['_baseX']-_0x395b97[_0x18e497(0x843)]()[_0x18e497(0x243)]()/0x2)),_0x1bbea8=Math[_0x18e497(0x909)](..._0x42f0cf[_0x18e497(0xad3)](_0x1ec134=>_0x1ec134[_0x18e497(0x843)]()[_0x18e497(0xa75)]+_0x1ec134[_0x18e497(0x843)]()['mainSpriteWidth']()/0x2)),_0x1297e0=Math['min'](..._0x42f0cf['map'](_0x8b434a=>_0x8b434a[_0x18e497(0x843)]()['_baseY']-_0x8b434a[_0x18e497(0x843)]()[_0x18e497(0x6d3)]())),_0x4a3cd5=Math[_0x18e497(0x909)](..._0x42f0cf[_0x18e497(0xad3)](_0x80b4ab=>_0x80b4ab[_0x18e497(0x843)]()['_baseY'])),_0x57682b=_0x42f0cf[_0x18e497(0xb68)](_0x2e71b8=>_0x2e71b8['isActor']())[_0x18e497(0x449)],_0x3d3e46=_0x42f0cf[_0x18e497(0xb68)](_0x5b2401=>_0x5b2401[_0x18e497(0xccb)]())[_0x18e497(0x449)];let _0x536f90=0x0,_0x1e36fe=0x0;if(_0x70f41b[_0x18e497(0x22f)](/front/i))_0x536f90=_0x57682b>=_0x3d3e46?_0x5c7928:_0x1bbea8;else{if(_0x70f41b[_0x18e497(0x22f)](/middle/i)){if('mOHIH'===_0x18e497(0xc90)){const _0x4569d7=_0x42b9dc[_0x18e497(0x7ed)];if(_0x4569d7[_0x18e497(0x22f)](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x18e497(0x4e8)]['isLearnedSkill'](_0x22f258['id']))return![];}if(_0x4569d7[_0x18e497(0x22f)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x18e497(0x4e8)]['hasSkill'](_0x177c9c['id']))return![];}const _0x32af38=_0x537649[_0x18e497(0x95b)][_0x18e497(0x613)](_0x5a3187,_0x18e497(0x7cd));if(_0x5275f8[_0x18e497(0x95b)]['JS'][_0x32af38]){if(!_0x217572[_0x18e497(0x95b)]['JS'][_0x32af38][_0x18e497(0xb96)](this,this[_0x18e497(0x4e8)],_0x23bde6))return![];}return _0x40b9ba[_0x18e497(0x95b)][_0x18e497(0xca6)](_0x20b483);}else _0x536f90=(_0x5c7928+_0x1bbea8)/0x2,melee=-0x1;}else _0x70f41b[_0x18e497(0x22f)](/back/i)&&(_0x536f90=_0x57682b>=_0x3d3e46?_0x1bbea8:_0x5c7928);}if(_0x70f41b['match'](/head/i))_0x1e36fe=_0x1297e0;else{if(_0x70f41b[_0x18e497(0x22f)](/center/i))_0x1e36fe=(_0x1297e0+_0x4a3cd5)/0x2;else _0x70f41b[_0x18e497(0x22f)](/base/i)&&(_0x18e497(0xb4d)!==_0x18e497(0xb4d)?(_0x4c3bce[_0x18e497(0x62c)](_0x1e8300[0x2],_0x289fa8[0x3]),_0x325e02[_0x18e497(0x62c)](_0xd5297e)):_0x1e36fe=_0x4a3cd5);}_0x536f90+=(Graphics[_0x18e497(0x7b2)]-Graphics['boxWidth'])/0x2,_0x1e36fe+=(Graphics['height']-Graphics[_0x18e497(0x9be)])/0x2,_0x536f90+=_0x4788fe,_0x1e36fe+=_0x53192e,_0x103250[_0x18e497(0x68e)](_0x536f90,_0x1e36fe,_0xc2334e,_0x3e11aa,_0x318b13);}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x6b5),_0x156942=>{const _0x5b468a=_0x10ff30;if(!Imported[_0x5b468a(0xa47)])return;const _0x504641=SceneManager['_scene'][_0x5b468a(0x93a)];if(!_0x504641)return;if(VisuMZ[_0x5b468a(0xa89)][_0x5b468a(0x994)]<=1.04){if(_0x5b468a(0x6f7)!==_0x5b468a(0x978)){alert(_0x5b468a(0x467)),SceneManager['exit']();return;}else{if(!_0x3773a9[_0x5b468a(0xc1e)]())return;if(!_0x35c9d0[_0x5b468a(0x287)])return;if(!_0x56000c[_0x5b468a(0x21f)]())return;_0x4db79c[_0x5b468a(0xb1e)](_0xf9c349,_0x30e556);const _0x304264=_0x3b6dbf[_0x5b468a(0x427)][_0x5b468a(0x72a)]();let _0x42637f=_0x40c200[_0x5b468a(0x2b7)],_0x1db9c4=_0x5bd555[_0x5b468a(0xc28)];_0x304264['gainFullActionsPTB'](_0x42637f),_0x304264[_0x5b468a(0x6c1)](_0x1db9c4);}}VisuMZ['ConvertParams'](_0x156942,_0x156942);const _0x3f9bc4=$gameTemp['getLastPluginCommandInterpreter'](),_0x289b1c=Math[_0x5b468a(0x909)](0.01,_0x156942[_0x5b468a(0x2b5)]);$gameTemp[_0x5b468a(0xb79)](_0x289b1c,_0x3f9bc4);}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xc3f),_0x21d2d7=>{const _0x567a1b=_0x10ff30;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x3ffee3=SceneManager[_0x567a1b(0x2df)]['_spriteset'];if(!_0x3ffee3)return;if(VisuMZ[_0x567a1b(0xa89)][_0x567a1b(0x994)]<=1.04){alert(_0x567a1b(0x467)),SceneManager[_0x567a1b(0xa8c)]();return;}VisuMZ['ConvertParams'](_0x21d2d7,_0x21d2d7);const _0x1b9b67=$gameTemp[_0x567a1b(0x621)](),_0x515564=_0x21d2d7['ms']||0x1;VisuMZ[_0x567a1b(0xa89)][_0x567a1b(0x7d1)](_0x515564,_0x1b9b67);}),PluginManager['registerCommand'](pluginData['name'],_0x10ff30(0x9c3),_0x2c88a1=>{const _0x354d96=_0x10ff30;if(!Imported[_0x354d96(0xa47)])return;const _0x35012a=SceneManager['_scene']['_spriteset'];if(!_0x35012a)return;VisuMZ[_0x354d96(0xb1e)](_0x2c88a1,_0x2c88a1);const _0x48a01f=_0x2c88a1['X']||0x0,_0x1ccceb=_0x2c88a1['Y']||0x0,_0x1d8ee6=_0x2c88a1[_0x354d96(0xbac)]||0x0,_0x13ce03=_0x2c88a1[_0x354d96(0x5c8)]||0x0,_0x2e7363=_0x2c88a1[_0x354d96(0x200)]||0x1,_0x59a91f=_0x2c88a1[_0x354d96(0x46c)]||_0x354d96(0x92a);_0x35012a[_0x354d96(0x29e)](_0x1d8ee6,_0x48a01f,_0x1ccceb,_0x13ce03,_0x2e7363,_0x59a91f);}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xb70),_0x1fa417=>{const _0x18246b=_0x10ff30;if(!Imported[_0x18246b(0xa47)])return;const _0x4e9cb5=SceneManager[_0x18246b(0x2df)][_0x18246b(0x93a)];if(!_0x4e9cb5)return;VisuMZ['ConvertParams'](_0x1fa417,_0x1fa417);const _0x4ebc99=VisuMZ[_0x18246b(0x2f2)](_0x1fa417[_0x18246b(0xa62)]),_0x150865=_0x1fa417[_0x18246b(0x6f4)],_0x425b05=_0x1fa417[_0x18246b(0x795)]||0x0,_0x3c3c03=_0x1fa417[_0x18246b(0x6b8)]||0x0,_0x44737c=_0x1fa417[_0x18246b(0xbac)]||0x0,_0x29f43d=_0x1fa417[_0x18246b(0x5c8)]||0x0,_0x2bb1c9=_0x1fa417['Duration']||0x1,_0x3aca06=_0x1fa417[_0x18246b(0x46c)]||'Linear',_0x48fadf=Math[_0x18246b(0xa7f)](..._0x4ebc99[_0x18246b(0xad3)](_0xc72f66=>_0xc72f66[_0x18246b(0x843)]()['_baseX']-_0xc72f66[_0x18246b(0x843)]()[_0x18246b(0x243)]()/0x2)),_0x349507=Math['max'](..._0x4ebc99[_0x18246b(0xad3)](_0x197679=>_0x197679[_0x18246b(0x843)]()[_0x18246b(0xa75)]+_0x197679[_0x18246b(0x843)]()[_0x18246b(0x243)]()/0x2)),_0x8495ec=Math['min'](..._0x4ebc99[_0x18246b(0xad3)](_0xb546e3=>_0xb546e3[_0x18246b(0x843)]()[_0x18246b(0xcae)]-_0xb546e3['battler']()[_0x18246b(0x6d3)]())),_0x4ba0a4=Math[_0x18246b(0x909)](..._0x4ebc99['map'](_0x63fd34=>_0x63fd34[_0x18246b(0x843)]()[_0x18246b(0xcae)])),_0x1ac5fb=_0x4ebc99[_0x18246b(0xb68)](_0x4cb66c=>_0x4cb66c['isActor']())[_0x18246b(0x449)],_0x261ae5=_0x4ebc99[_0x18246b(0xb68)](_0x56c711=>_0x56c711[_0x18246b(0xccb)]())[_0x18246b(0x449)];let _0x4b22a1=0x0,_0x2ccb09=0x0;if(_0x150865[_0x18246b(0x22f)](/front/i))_0x18246b(0x2dc)===_0x18246b(0xb4e)?this[_0x18246b(0x395)](_0x18246b(0x6a6),_0x38ff46,_0x40d00d):_0x4b22a1=_0x1ac5fb>=_0x261ae5?_0x48fadf:_0x349507;else{if(_0x150865['match'](/middle/i))_0x4b22a1=(_0x48fadf+_0x349507)/0x2,melee=-0x1;else{if(_0x150865[_0x18246b(0x22f)](/back/i)){if('yBQyT'!==_0x18246b(0x815))return'iconText';else _0x4b22a1=_0x1ac5fb>=_0x261ae5?_0x349507:_0x48fadf;}}}if(_0x150865[_0x18246b(0x22f)](/head/i))_0x2ccb09=_0x8495ec;else{if(_0x150865[_0x18246b(0x22f)](/center/i))_0x2ccb09=(_0x8495ec+_0x4ba0a4)/0x2;else _0x150865[_0x18246b(0x22f)](/base/i)&&(_0x2ccb09=_0x4ba0a4);}_0x4b22a1+=(Graphics['width']-Graphics[_0x18246b(0xb97)])/0x2,_0x2ccb09+=(Graphics[_0x18246b(0x956)]-Graphics[_0x18246b(0x9be)])/0x2,_0x4b22a1+=_0x425b05,_0x2ccb09+=_0x3c3c03,_0x4e9cb5[_0x18246b(0x29e)](_0x44737c,_0x4b22a1,_0x2ccb09,_0x29f43d,_0x2bb1c9,_0x3aca06);}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x8d4),_0x61046=>{const _0x227308=_0x10ff30;if(!Imported[_0x227308(0xa47)])return;const _0x2d0dde=SceneManager[_0x227308(0x2df)][_0x227308(0x93a)];if(!_0x2d0dde)return;if(VisuMZ['ActSeqImpact'][_0x227308(0x994)]<=1.05){alert(_0x227308(0x467)),SceneManager[_0x227308(0xa8c)]();return;}VisuMZ[_0x227308(0xb1e)](_0x61046,_0x61046);const _0x165f04=VisuMZ[_0x227308(0x2f2)](_0x61046[_0x227308(0xa62)]),_0x53cfd1={'filename':_0x61046[_0x227308(0x81d)],'horzCells':_0x61046['horzCells']||0x1,'vertCells':_0x61046['vertCells']||0x1,'frameDelay':_0x61046[_0x227308(0x9d8)]||0x1,'smooth':_0x61046[_0x227308(0x533)]||![],'anchorX':_0x61046[_0x227308(0x7a0)]||0x0,'anchorY':_0x61046['anchorY']||0x0,'offsetX':_0x61046[_0x227308(0x888)]||0x0,'offsetY':_0x61046['offsetY']||0x0};for(const _0x2cabe3 of _0x165f04){if(_0x227308(0x7fc)==='HaNmf'){const _0x84373a=this['item']()[_0x227308(0xb0e)];return _0x84373a[_0x227308(0x22f)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);}else{if(!_0x2cabe3)continue;if(!_0x2cabe3['battler']())continue;_0x2cabe3[_0x227308(0x843)]()[_0x227308(0x5e2)](_0x53cfd1);}}const _0xf4fbce=$gameTemp[_0x227308(0x621)]();_0xf4fbce&&(_0x227308(0x2cb)!==_0x227308(0x2cb)?this[_0x227308(0x3b6)](0x1):_0xf4fbce[_0x227308(0x4ca)](_0x227308(0x3b1)));}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],'ActSeq_Inject_AnimationEnd',_0x1669ac=>{const _0xbb5999=_0x10ff30;if(!Imported[_0xbb5999(0xa47)])return;const _0x1e322b=SceneManager[_0xbb5999(0x2df)][_0xbb5999(0x93a)];if(!_0x1e322b)return;if(VisuMZ[_0xbb5999(0xa89)][_0xbb5999(0x994)]<=1.05){if(_0xbb5999(0xad9)===_0xbb5999(0xad9)){alert(_0xbb5999(0x467)),SceneManager[_0xbb5999(0xa8c)]();return;}else{const _0x2f1181=_0x575ea1(_0x4eb2ec['$1']);return[_0x917756['friendsUnit']()[_0xbb5999(0x660)]()[_0x2f1181]];}}VisuMZ['ConvertParams'](_0x1669ac,_0x1669ac);const _0x35808e=VisuMZ[_0xbb5999(0x2f2)](_0x1669ac['Targets']);for(const _0x361b0e of _0x35808e){if(!_0x361b0e)continue;if(!_0x361b0e[_0xbb5999(0x843)]())continue;_0x361b0e['battler']()['stopInjectAnimation']();}}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x9ea),_0x4d2194=>{const _0x229365=_0x10ff30;if(!Imported[_0x229365(0xa47)])return;const _0x1cd217=SceneManager['_scene'][_0x229365(0x93a)];if(!_0x1cd217)return;if(VisuMZ[_0x229365(0xa89)][_0x229365(0x994)]<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ[_0x229365(0xb1e)](_0x4d2194,_0x4d2194);const _0x211e58=VisuMZ['CreateActionSequenceTargets'](_0x4d2194['Targets']),_0x21107c=_0x4d2194['pause'];for(const _0x1395b9 of _0x211e58){if(!_0x1395b9)continue;if(!_0x1395b9[_0x229365(0x843)]())continue;_0x1395b9[_0x229365(0x843)]()[_0x229365(0xacf)](_0x21107c);}}),PluginManager[_0x10ff30(0x651)](pluginData['name'],_0x10ff30(0xabe),_0x258687=>{const _0x4f9700=_0x10ff30;if(!SceneManager[_0x4f9700(0xc1e)]())return;const _0x10e6ca=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x10e6ca)return;_0x10e6ca[_0x4f9700(0x4ca)](_0x4f9700(0x773));}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x654),_0x36c88f=>{const _0x67a3cd=_0x10ff30;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x36c88f,_0x36c88f);const _0x2c0b01=$gameTemp[_0x67a3cd(0x621)](),_0xcf4339=BattleManager['_action'],_0x47a392=BattleManager[_0x67a3cd(0x427)],_0x301e89=BattleManager[_0x67a3cd(0x7ba)];if(!_0x2c0b01||!_0xcf4339||!_0x47a392)return;if(!_0xcf4339[_0x67a3cd(0x5c4)]())return;const _0x520ffa=VisuMZ[_0x67a3cd(0x2f2)](_0x36c88f['Targets']);for(const _0xb3135d of _0x520ffa){if(_0x67a3cd(0x477)!=='ukTaA'){if(!_0xb3135d)continue;_0x301e89['push'](_0x67a3cd(0xc00),_0x47a392,_0xb3135d);}else _0x50aa10=_0xa59b27(_0x15d09f['$1']);}_0x2c0b01[_0x67a3cd(0x4ca)](_0x67a3cd(0xc7e));}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x59f),_0x25828b=>{const _0x1d2a7c=_0x10ff30;if(!SceneManager[_0x1d2a7c(0xc1e)]())return;VisuMZ[_0x1d2a7c(0xb1e)](_0x25828b,_0x25828b);const _0x5d5fe2=[_0x1d2a7c(0xc17),_0x1d2a7c(0x5d7),_0x1d2a7c(0x84d),_0x1d2a7c(0x48d),_0x1d2a7c(0x831),_0x1d2a7c(0x23d),'AGI',_0x1d2a7c(0x3c9)],_0x40820f=_0x25828b[_0x1d2a7c(0x775)],_0x5c5851=_0x25828b[_0x1d2a7c(0x7e2)],_0x430017=_0x25828b[_0x1d2a7c(0x98b)],_0x328e88=VisuMZ[_0x1d2a7c(0x2f2)](_0x25828b[_0x1d2a7c(0xa62)]);for(const _0x3b4557 of _0x328e88){if(_0x1d2a7c(0x2cf)===_0x1d2a7c(0x4c6)){if(!_0x12e248[_0x1d2a7c(0x95b)][_0x1d2a7c(0x928)][_0x1d2a7c(0x5f4)][_0x1d2a7c(0xc11)])return;_0x180c20[_0x1d2a7c(0x95b)][_0x1d2a7c(0x349)][_0x1d2a7c(0xb96)](this,_0xdd0ee3);}else{if(!_0x3b4557)continue;for(const _0x47bd3a of _0x40820f){if('Bcbaj'!==_0x1d2a7c(0x37a)){const _0x2e63d1=_0x5d5fe2[_0x1d2a7c(0xbc2)](_0x47bd3a[_0x1d2a7c(0x9d9)]()[_0x1d2a7c(0x6a3)]());_0x2e63d1>=0x0&&_0x2e63d1<=0x7&&_0x3b4557['addBuff'](_0x2e63d1,_0x430017);}else{let _0x1384e7=_0x18df69[_0x1d2a7c(0x3ed)](_0x25a89f['id']);this[_0x1d2a7c(0x3fb)](_0x1384e7);}}for(const _0x5e6b08 of _0x5c5851){const _0x5df262=_0x5d5fe2[_0x1d2a7c(0xbc2)](_0x5e6b08[_0x1d2a7c(0x9d9)]()[_0x1d2a7c(0x6a3)]());if(_0x5df262>=0x0&&_0x5df262<=0x7){if(_0x1d2a7c(0xb41)!=='luFir')_0x3b4557[_0x1d2a7c(0x9eb)](_0x5df262,_0x430017);else{_0x5dac93(_0x1d2a7c(0x467)),_0x56386f['exit']();return;}}}}}}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xb75),_0x415965=>{const _0x389593=_0x10ff30;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x389593(0xb1e)](_0x415965,_0x415965);const _0x1d65f8=_0x415965[_0x389593(0x802)],_0x1637e=VisuMZ[_0x389593(0x2f2)](_0x415965[_0x389593(0xa62)]);for(const _0x28c909 of _0x1637e){if('vZqck'!=='vZqck')return _0x5a6e8a[_0x389593(0x95b)][_0x389593(0x771)][_0x389593(0xb96)](this,_0x2ca205);else{if(!_0x28c909)continue;for(const _0x571d7a of _0x1d65f8){_0x28c909[_0x389593(0x41a)](_0x571d7a);}}}}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],'ActSeq_Mechanics_ArmorPenetration',_0x3c99ee=>{const _0x2a323e=_0x10ff30;if(!SceneManager[_0x2a323e(0xc1e)]())return;VisuMZ['ConvertParams'](_0x3c99ee,_0x3c99ee);const _0x242ce7=BattleManager[_0x2a323e(0x837)],_0x2f8150={'arPenRate':_0x3c99ee[_0x2a323e(0xa23)],'arPenFlat':_0x3c99ee[_0x2a323e(0x70f)],'arRedRate':_0x3c99ee[_0x2a323e(0x737)],'arRedFlat':_0x3c99ee[_0x2a323e(0xc7f)]};_0x242ce7[_0x2a323e(0x267)]=_0x2f8150;}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x4dd),_0x5b90c9=>{const _0x105121=_0x10ff30;if(!SceneManager[_0x105121(0xc1e)]())return;if(!Imported[_0x105121(0x5ac)])return;VisuMZ[_0x105121(0xb1e)](_0x5b90c9,_0x5b90c9);const _0x124e3d=VisuMZ['CreateActionSequenceTargets'](_0x5b90c9['Targets']),_0x468b9a=_0x5b90c9[_0x105121(0x3f0)]||0x1;for(const _0x467444 of _0x124e3d){if(!_0x467444)continue;if(!_0x467444[_0x105121(0xccb)]())continue;_0x467444[_0x105121(0x96d)](_0x468b9a);}}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xbb9),_0x178d27=>{const _0x5ee740=_0x10ff30;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5ee740(0x862)])return;if(!BattleManager[_0x5ee740(0x604)]())return;VisuMZ[_0x5ee740(0xb1e)](_0x178d27,_0x178d27);const _0x442626=VisuMZ[_0x5ee740(0x2f2)](_0x178d27[_0x5ee740(0xa62)]),_0x3c424d=_0x178d27[_0x5ee740(0xa49)],_0x3b50e4=_0x178d27['ChargeRate'],_0xfc658f=_0x178d27[_0x5ee740(0x879)];for(const _0x229414 of _0x442626){if(!_0x229414)continue;if(_0x229414[_0x5ee740(0x74e)]())_0x229414[_0x5ee740(0xae6)](_0x3c424d);else{if(_0x229414[_0x5ee740(0x904)]()){_0x229414[_0x5ee740(0x794)](_0x3b50e4);if(_0xfc658f)_0x229414['atbInterrupt']();}}}}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x74a),_0x16bde7=>{const _0x3ba877=_0x10ff30;if(!SceneManager[_0x3ba877(0xc1e)]())return;if(!Imported['VisuMZ_3_BoostAction'])return;VisuMZ[_0x3ba877(0xb1e)](_0x16bde7,_0x16bde7);const _0x31b2f4=VisuMZ[_0x3ba877(0x2f2)](_0x16bde7[_0x3ba877(0xa62)]),_0x29f61f=_0x16bde7['BoostPoints'];for(const _0x18f098 of _0x31b2f4){if(!_0x18f098)continue;_0x18f098[_0x3ba877(0x457)](_0x29f61f);}}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xb53),_0x26bba5=>{const _0x3710c6=_0x10ff30;if(!SceneManager[_0x3710c6(0xc1e)]())return;if(!Imported[_0x3710c6(0xabd)])return;if(!BattleManager['_subject'])return;VisuMZ[_0x3710c6(0xb1e)](_0x26bba5,_0x26bba5);const _0x1b32d4=_0x26bba5[_0x3710c6(0x89c)];$gameVariables[_0x3710c6(0x6b9)](_0x1b32d4,BattleManager[_0x3710c6(0x427)]['toUseBoostPoints']());}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],'ActSeq_Mechanics_BreakShieldChange',_0x564e44=>{const _0x304791=_0x10ff30;if(!SceneManager[_0x304791(0xc1e)]())return;if(!Imported[_0x304791(0x488)])return;VisuMZ[_0x304791(0xb1e)](_0x564e44,_0x564e44);const _0x38b363=VisuMZ[_0x304791(0x2f2)](_0x564e44[_0x304791(0xa62)]),_0x564e23=_0x564e44['BreakShields'];for(const _0x39e779 of _0x38b363){if(_0x304791(0x2f7)===_0x304791(0x39a))_0x2cfba8[_0x304791(0xb0c)][_0x304791(0xa4d)]['call'](this),this[_0x304791(0x918)](_0x304791(0x565));else{if(!_0x39e779)continue;if(_0x39e779[_0x304791(0xc24)]())continue;if(!_0x39e779[_0x304791(0xc22)]())continue;_0x39e779['alterBreakShield'](_0x564e23);}}}),PluginManager[_0x10ff30(0x651)](pluginData['name'],'ActSeq_Mechanics_BreakShieldReset',_0x25c477=>{const _0x23b8a6=_0x10ff30;if(!SceneManager[_0x23b8a6(0xc1e)]())return;if(!Imported[_0x23b8a6(0x488)])return;VisuMZ['ConvertParams'](_0x25c477,_0x25c477);const _0x2eab3b=VisuMZ[_0x23b8a6(0x2f2)](_0x25c477[_0x23b8a6(0xa62)]);for(const _0x31a8b5 of _0x2eab3b){if(_0x23b8a6(0x631)!==_0x23b8a6(0xc03)){if(!_0x31a8b5)continue;if(_0x31a8b5[_0x23b8a6(0xc24)]())continue;if(!_0x31a8b5[_0x23b8a6(0xc22)]())continue;_0x31a8b5[_0x23b8a6(0xae1)]();}else _0x40abd8[_0x23b8a6(0x95b)]['Sprite_Battler_startMove'][_0x23b8a6(0xb96)](this,_0x1bd417,_0x4ed747,_0x5a75d6);}}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x9c2),_0x4fd0bf=>{const _0x56368d=_0x10ff30;if(!SceneManager[_0x56368d(0xc1e)]())return;if(!Imported[_0x56368d(0x27f)])return;if(!BattleManager[_0x56368d(0x545)]())return;VisuMZ[_0x56368d(0xb1e)](_0x4fd0bf,_0x4fd0bf);const _0x492ae5=VisuMZ['CreateActionSequenceTargets'](_0x4fd0bf[_0x56368d(0xa62)]),_0x9e484b=_0x4fd0bf['BravePoints'];for(const _0x20c37d of _0x492ae5){if(!_0x20c37d)continue;_0x20c37d[_0x56368d(0xb80)](_0x9e484b);}}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x83b),_0x24ec69=>{const _0x3c9afb=_0x10ff30;if(!SceneManager[_0x3c9afb(0xc1e)]())return;VisuMZ[_0x3c9afb(0xb1e)](_0x24ec69,_0x24ec69);const _0x4c8775=$gameTemp[_0x3c9afb(0x621)](),_0x276fec=BattleManager[_0x3c9afb(0x837)],_0x4ea1ad=BattleManager[_0x3c9afb(0x427)];if(!_0x4c8775||!_0x276fec||!_0x4ea1ad)return;if(!_0x276fec[_0x3c9afb(0x5c4)]())return;const _0x4cccb0=VisuMZ[_0x3c9afb(0x2f2)](_0x24ec69[_0x3c9afb(0xa62)]);for(const _0x3006c8 of _0x4cccb0){if(!_0x3006c8)continue;_0x24ec69[_0x3c9afb(0x798)]&&(_0x3006c8[_0x3c9afb(0x6a2)](),_0x3006c8[_0x3c9afb(0x41a)](_0x3006c8[_0x3c9afb(0x6d7)]())),_0x3006c8[_0x3c9afb(0x48f)]()&&_0x3006c8[_0x3c9afb(0xbd5)]();}_0x4c8775[_0x3c9afb(0x4ca)](_0x3c9afb(0x793));}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x5fd),_0x1f4852=>{const _0x5763dc=_0x10ff30;if(!SceneManager[_0x5763dc(0xc1e)]())return;if(!Imported[_0x5763dc(0x643)])return;if(!BattleManager[_0x5763dc(0x203)]())return;VisuMZ[_0x5763dc(0xb1e)](_0x1f4852,_0x1f4852);const _0x58d8e6=VisuMZ[_0x5763dc(0x2f2)](_0x1f4852[_0x5763dc(0xa62)]),_0x4a5546=_0x1f4852['ChangeOrderBy'];for(const _0x4efb11 of _0x58d8e6){if(!_0x4efb11)continue;_0x4efb11[_0x5763dc(0x1d1)](_0x4a5546);}}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x1e2),_0xd55244=>{const _0x5c154c=_0x10ff30;if(!SceneManager[_0x5c154c(0xc1e)]())return;if(!Imported[_0x5c154c(0x643)])return;if(!BattleManager[_0x5c154c(0x203)]())return;VisuMZ[_0x5c154c(0xb1e)](_0xd55244,_0xd55244);const _0x1e4741=VisuMZ[_0x5c154c(0x2f2)](_0xd55244[_0x5c154c(0xa62)]),_0x2d0ec5=_0xd55244[_0x5c154c(0xa49)],_0x3f53cc=_0xd55244[_0x5c154c(0xa49)];for(const _0x824e44 of _0x1e4741){if(!_0x824e44)continue;if(_0x824e44[_0x5c154c(0x310)]===_0x5c154c(0xbab))_0x5c154c(0x9ce)===_0x5c154c(0x9ce)?_0x824e44['changeCtbChargeTime'](_0x2d0ec5):_0x492533+=(_0x1af99d[_0x5c154c(0xccb)]()?-0x1:0x1)*_0x3d47cd['mainSpriteWidth']()/0x2;else _0x824e44['_tpbState']===_0x5c154c(0xb39)&&(_0x5c154c(0x68f)!==_0x5c154c(0x4e4)?_0x824e44['changeCtbCastTime'](_0x3f53cc):this[_0x5c154c(0x843)]()[_0x5c154c(0x97b)]());}}),PluginManager[_0x10ff30(0x651)](pluginData['name'],'ActSeq_Mechanics_CustomDmgFormula',_0x4c3de6=>{const _0x480c5f=_0x10ff30;if(!SceneManager[_0x480c5f(0xc1e)]())return;VisuMZ['ConvertParams'](_0x4c3de6,_0x4c3de6);const _0x416911=BattleManager[_0x480c5f(0x837)];if(!_0x416911)return;let _0x5c9e9a=_0x4c3de6[_0x480c5f(0x40c)];_0x416911['setCustomDamageFormula'](_0x5c9e9a);}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x69e),_0x58d1dc=>{const _0x30ebc1=_0x10ff30;if(!SceneManager[_0x30ebc1(0xc1e)]())return;VisuMZ['ConvertParams'](_0x58d1dc,_0x58d1dc);const _0x27b1f5=VisuMZ['CreateActionSequenceTargets'](_0x58d1dc['Targets']);for(const _0xb20131 of _0x27b1f5){if('TtMDg'==='TtMDg'){if(!_0xb20131)continue;if(_0xb20131[_0x30ebc1(0x629)]())_0xb20131[_0x30ebc1(0x2a1)]();}else this['push'](_0x30ebc1(0x5bf),_0x86dc2d);}}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x930),_0x3019b0=>{const _0x43aeac=_0x10ff30;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x43aeac(0xb1e)](_0x3019b0,_0x3019b0);const _0x10952b=$gameTemp['getLastPluginCommandInterpreter'](),_0x37f3ca=BattleManager[_0x43aeac(0x427)],_0x45a59a=_0x3019b0[_0x43aeac(0xb7d)];if(!_0x10952b)return;if(!_0x37f3ca)return;_0x37f3ca&&_0x37f3ca['isDead']()&&_0x45a59a[_0x43aeac(0x9d9)]()[_0x43aeac(0x6a3)]()!=='UNTITLED'&&_0x10952b[_0x43aeac(0x4fb)]([_0x45a59a]);}),PluginManager[_0x10ff30(0x651)](pluginData['name'],_0x10ff30(0x2d7),_0x4738b7=>{const _0x23f999=_0x10ff30;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x23f999(0xb1e)](_0x4738b7,_0x4738b7);const _0x345022=VisuMZ[_0x23f999(0x2f2)](_0x4738b7[_0x23f999(0xa62)]);for(const _0x30fc26 of _0x345022){if(!_0x30fc26)continue;if(!_0x30fc26[_0x23f999(0xccb)]())continue;_0x30fc26[_0x23f999(0x378)]();}}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x7b8),_0x1fff3e=>{const _0x5a1faf=_0x10ff30;if(!SceneManager[_0x5a1faf(0xc1e)]())return;if(!Imported[_0x5a1faf(0xa5a)])return;if(!BattleManager[_0x5a1faf(0xbf3)]())return;VisuMZ[_0x5a1faf(0xb1e)](_0x1fff3e,_0x1fff3e);const _0x397c06=_0x1fff3e[_0x5a1faf(0x36e)];BattleManager[_0x5a1faf(0x427)]&&BattleManager[_0x5a1faf(0x427)][_0x5a1faf(0x72a)]()[_0x5a1faf(0xc08)](_0x397c06);}),PluginManager[_0x10ff30(0x651)](pluginData['name'],_0x10ff30(0x76c),_0x220c10=>{const _0x1345dd=_0x10ff30;if(!SceneManager[_0x1345dd(0xc1e)]())return;if(!Imported[_0x1345dd(0x6b7)])return;if(!BattleManager['isFTB']())return;VisuMZ['ConvertParams'](_0x220c10,_0x220c10);const _0x2dc3e8=_0x220c10[_0x1345dd(0x36e)];if(BattleManager[_0x1345dd(0x427)]){if('rgBqH'===_0x1345dd(0x227))BattleManager[_0x1345dd(0x427)][_0x1345dd(0x72a)]()[_0x1345dd(0x9f2)](_0x2dc3e8);else{if(!this[_0x1345dd(0x7ef)]())return;if(!this[_0x1345dd(0xa8f)])return;if(this[_0x1345dd(0x81f)]===_0x23695b&&this[_0x1345dd(0x47c)]===_0x3491df)return;this[_0x1345dd(0x81f)]=_0x1df928,this['_targetGrowY']=_0x2c6afa,this[_0x1345dd(0x46b)]=_0x3c38ec,this[_0x1345dd(0x78b)]=_0x344729,this[_0x1345dd(0x3e7)]=_0x2da11d||_0x1345dd(0x92a),_0x4d8462<=0x0&&(this['_growX']=this[_0x1345dd(0x81f)],this['_growY']=this[_0x1345dd(0x47c)]);}}}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],'ActSeq_Mechanics_HpMpTp',_0x3c1f98=>{const _0x4234f5=_0x10ff30;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4234f5(0xb1e)](_0x3c1f98,_0x3c1f98);const _0x2faa7d=VisuMZ[_0x4234f5(0x2f2)](_0x3c1f98[_0x4234f5(0xa62)]),_0x249926=_0x3c1f98[_0x4234f5(0xcac)],_0x559bc2=_0x3c1f98[_0x4234f5(0x6bb)],_0x4c1e7c=_0x3c1f98[_0x4234f5(0x7ee)],_0x201e79=_0x3c1f98[_0x4234f5(0xc38)],_0x5e7758=_0x3c1f98[_0x4234f5(0xa99)],_0x25054=_0x3c1f98[_0x4234f5(0x9ff)],_0x3f0b6b=_0x3c1f98[_0x4234f5(0x735)];for(const _0x4b5cb4 of _0x2faa7d){if(_0x4234f5(0xb8f)!==_0x4234f5(0x9f0)){if(!_0x4b5cb4)continue;const _0x5a284c=_0x4b5cb4['isAlive'](),_0x156c01=Math['round'](_0x249926*_0x4b5cb4[_0x4234f5(0xb2b)]+_0x559bc2),_0x4ebde7=Math[_0x4234f5(0x556)](_0x4c1e7c*_0x4b5cb4['mmp']+_0x201e79),_0x539c0a=Math['round'](_0x5e7758*_0x4b5cb4[_0x4234f5(0x75f)]()+_0x25054);if(_0x156c01!==0x0)_0x4b5cb4[_0x4234f5(0x9f8)](_0x156c01);if(_0x4ebde7!==0x0)_0x4b5cb4[_0x4234f5(0xba7)](_0x4ebde7);if(_0x539c0a!==0x0)_0x4b5cb4[_0x4234f5(0xc4e)](_0x539c0a);if(_0x3f0b6b)_0x4b5cb4['startDamagePopup']();_0x5a284c&&_0x4b5cb4['isDead']()&&_0x4b5cb4[_0x4234f5(0xbd5)]();}else{if(!_0x2d17cf[_0x4234f5(0xc1e)]())return;_0x4e16fa['ConvertParams'](_0x4eaa86,_0x3d57c1);const _0x3a359a=_0x2527ef[_0x4234f5(0x837)];if(!_0x3a359a)return;let _0x538b6a=_0x5e9624[_0x4234f5(0x40c)];_0x3a359a[_0x4234f5(0x9d3)](_0x538b6a);}}}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xb15),_0x3df15d=>{const _0x158ddc=_0x10ff30;if(!SceneManager[_0x158ddc(0xc1e)]())return;VisuMZ['ConvertParams'](_0x3df15d,_0x3df15d);const _0x16bb8c=VisuMZ['CreateActionSequenceTargets'](_0x3df15d[_0x158ddc(0xa62)]);for(const _0x4331e8 of _0x16bb8c){if('YUUzC'!==_0x158ddc(0x1db))return this[_0x158ddc(0xc57)]()?this[_0x158ddc(0x8fd)]()&&this[_0x158ddc(0x8fd)]()[_0x158ddc(0x5c4)]()&&!this[_0x158ddc(0x8fd)]()[_0x158ddc(0x792)]():this[_0x158ddc(0x8fd)]()&&this['currentAction']()[_0x158ddc(0x5c4)]()&&!this[_0x158ddc(0x8fd)]()['isMagicSkill']();else{if(!_0x4331e8)continue;_0x4331e8[_0x158ddc(0x3e6)](_0x3df15d[_0x158ddc(0xa18)]);}}}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xa14),_0x13577a=>{const _0x75c3b9=_0x10ff30;if(!SceneManager[_0x75c3b9(0xc1e)]())return;VisuMZ[_0x75c3b9(0xb1e)](_0x13577a,_0x13577a);const _0x52e83e=BattleManager[_0x75c3b9(0x837)],_0x82d1ae={'criticalHitRate':_0x13577a[_0x75c3b9(0x60f)],'criticalHitFlat':_0x13577a[_0x75c3b9(0x563)],'criticalDmgRate':_0x13577a[_0x75c3b9(0xb99)],'criticalDmgFlat':_0x13577a[_0x75c3b9(0x74d)],'damageRate':_0x13577a['DamageRate'],'damageFlat':_0x13577a[_0x75c3b9(0x9a8)],'hitRate':_0x13577a[_0x75c3b9(0x633)],'hitFlat':_0x13577a[_0x75c3b9(0x4cd)]};_0x52e83e['_multipliers']=_0x82d1ae;}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xba0),_0x2c449d=>{const _0xfe516b=_0x10ff30;if(!SceneManager[_0xfe516b(0xc1e)]())return;VisuMZ[_0xfe516b(0xb1e)](_0x2c449d,_0x2c449d);const _0x25d6b4=_0x2c449d[_0xfe516b(0x99e)];SceneManager[_0xfe516b(0x2df)][_0xfe516b(0x543)](_0x25d6b4);}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],'ActSeq_Mechanics_OtbOrder',_0xc0c2c2=>{const _0x899814=_0x10ff30;if(!SceneManager[_0x899814(0xc1e)]())return;if(!Imported[_0x899814(0x28a)])return;if(!BattleManager[_0x899814(0xc53)]())return;VisuMZ['ConvertParams'](_0xc0c2c2,_0xc0c2c2);const _0x6853b2=VisuMZ[_0x899814(0x2f2)](_0xc0c2c2[_0x899814(0xa62)]);for(const _0x1748a0 of _0x6853b2){if('auowN'!=='auowN')this['_cancelButton']['x']=0x8;else{if(!_0x1748a0)continue;let _0x49f807=_0xc0c2c2[_0x899814(0x61d)],_0x1fa82b=_0xc0c2c2['NextTurn'],_0x464adb=_0xc0c2c2[_0x899814(0x311)];if(BattleManager['_actionBattlers'][_0x899814(0x778)](_0x1748a0))'BRjyj'!==_0x899814(0x712)?_0x49f807+=_0x464adb:_0x39a758[_0x899814(0xc8c)]?this[_0x899814(0x967)]='sideview_ui':this[_0x899814(0x967)]='default';else{if(_0x899814(0x3cb)!==_0x899814(0x990))_0x1fa82b+=_0x464adb;else return this[_0x899814(0x9e0)](_0x3d12b9);}BattleManager[_0x899814(0xaed)](_0x1748a0,-_0x49f807,![]),BattleManager[_0x899814(0xaed)](_0x1748a0,-_0x1fa82b,!![]);}}}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x590),_0x18f259=>{const _0x24a85d=_0x10ff30;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x24a85d(0x287)])return;if(!BattleManager[_0x24a85d(0x21f)]())return;VisuMZ[_0x24a85d(0xb1e)](_0x18f259,_0x18f259);const _0x24a2f8=BattleManager[_0x24a85d(0x427)][_0x24a85d(0x72a)](),_0x267a10=_0x18f259[_0x24a85d(0xa6b)],_0x490e0d=_0x18f259[_0x24a85d(0x594)]||_0x24a85d(0x902),_0x5e6c36=_0x18f259[_0x24a85d(0xa2f)]||_0x24a85d(0x902),_0xad44c9=_0x18f259[_0x24a85d(0x972)]||0x0,_0x1b6a52=_0x18f259[_0x24a85d(0x24b)]||0x0;(_0x24a2f8[_0x24a85d(0x40a)]()||_0x267a10)&&(_0x267a10&&(_0x24a2f8[_0x24a85d(0x31f)]=_0x24a2f8[_0x24a85d(0x31f)]||{},_0x24a2f8[_0x24a85d(0x31f)][_0x24a85d(0x3d8)]=0x0),_0x24a2f8[_0x24a85d(0x2aa)](_0x490e0d,_0x5e6c36,_0xad44c9,_0x1b6a52));}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x90c),_0x26e7a8=>{const _0x2216c7=_0x10ff30;if(!SceneManager[_0x2216c7(0xc1e)]())return;if(!Imported[_0x2216c7(0x287)])return;if(!BattleManager[_0x2216c7(0x21f)]())return;VisuMZ['ConvertParams'](_0x26e7a8,_0x26e7a8);const _0x3df8b9=BattleManager[_0x2216c7(0x427)][_0x2216c7(0x72a)]();let _0x278c52=Math['max'](_0x26e7a8[_0x2216c7(0x3aa)],0x0),_0x28f931=_0x3df8b9['getFullActionsPTB'](),_0x53a435=_0x3df8b9[_0x2216c7(0x950)]();while(_0x278c52--){if(_0x2216c7(0x64f)==='CjuGi')_0x4a0942[_0x2216c7(0xb0c)]['terminate'][_0x2216c7(0xb96)](this);else{if(_0x28f931<=0x0&&_0x53a435<=0x0)break;else{if(_0x28f931>0x0)_0x28f931--,_0x53a435++;else{if(_0x2216c7(0x855)!==_0x2216c7(0x855)){if(!_0x2c5f37['isSceneBattle']())return;_0x166314[_0x2216c7(0xb1e)](_0x1ab7af,_0x5a2aec);const _0x4dd771=_0x20c8d3[_0x2216c7(0x621)](),_0xb05094=_0x3e8087[_0x2216c7(0x427)],_0x249d00=_0xd8a1e0['JumpToLabel'];if(!_0x4dd771)return;if(!_0xb05094)return;_0xb05094&&_0xb05094[_0x2216c7(0x472)]()&&_0x249d00[_0x2216c7(0x9d9)]()[_0x2216c7(0x6a3)]()!=='UNTITLED'&&_0x4dd771[_0x2216c7(0x4fb)]([_0x249d00]);}else _0x53a435--;}}}}_0x3df8b9['setFullActionsPTB'](_0x28f931),_0x3df8b9[_0x2216c7(0x22a)](_0x53a435);}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xa24),_0x2fc61a=>{const _0x1affa4=_0x10ff30;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1affa4(0x287)])return;if(!BattleManager[_0x1affa4(0x21f)]())return;VisuMZ['ConvertParams'](_0x2fc61a,_0x2fc61a);const _0x20a63c=BattleManager[_0x1affa4(0x427)]['friendsUnit']();let _0x19b451=_0x2fc61a[_0x1affa4(0x2b7)],_0x16a74d=_0x2fc61a[_0x1affa4(0xc28)];_0x20a63c[_0x1affa4(0x91b)](_0x19b451),_0x20a63c[_0x1affa4(0x6c1)](_0x16a74d);}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x96f),_0x1f4aba=>{const _0x11568d=_0x10ff30;if(!SceneManager[_0x11568d(0xc1e)]())return;VisuMZ[_0x11568d(0xb1e)](_0x1f4aba,_0x1f4aba);const _0x44d5f9=[_0x11568d(0xc17),_0x11568d(0x5d7),_0x11568d(0x84d),'DEF','MAT','MDF','AGI',_0x11568d(0x3c9)],_0x5cb1ed=_0x1f4aba[_0x11568d(0x775)],_0x133e26=_0x1f4aba[_0x11568d(0x7e2)],_0x6a7f2d=VisuMZ[_0x11568d(0x2f2)](_0x1f4aba[_0x11568d(0xa62)]);for(const _0x4367bf of _0x6a7f2d){if(!_0x4367bf)continue;for(const _0x2cc853 of _0x5cb1ed){const _0x42ec57=_0x44d5f9[_0x11568d(0xbc2)](_0x2cc853[_0x11568d(0x9d9)]()[_0x11568d(0x6a3)]());_0x42ec57>=0x0&&_0x42ec57<=0x7&&_0x4367bf[_0x11568d(0x1e5)](_0x42ec57)&&_0x4367bf[_0x11568d(0x1e9)](_0x42ec57);}for(const _0x4242b4 of _0x133e26){const _0x27ae15=_0x44d5f9['indexOf'](_0x4242b4[_0x11568d(0x9d9)]()['trim']());_0x27ae15>=0x0&&_0x27ae15<=0x7&&_0x4367bf[_0x11568d(0x859)](_0x27ae15)&&_0x4367bf[_0x11568d(0x1e9)](_0x27ae15);}}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_RemoveState',_0x5ab4c7=>{const _0x2123f9=_0x10ff30;if(!SceneManager[_0x2123f9(0xc1e)]())return;VisuMZ[_0x2123f9(0xb1e)](_0x5ab4c7,_0x5ab4c7);const _0x5796e6=_0x5ab4c7['States'],_0x491a3a=VisuMZ[_0x2123f9(0x2f2)](_0x5ab4c7[_0x2123f9(0xa62)]);for(const _0x31498e of _0x491a3a){if(_0x2123f9(0x688)!==_0x2123f9(0x688))return _0x5670c2;else{if(!_0x31498e)continue;for(const _0x27301e of _0x5796e6){_0x31498e[_0x2123f9(0x53d)](_0x27301e);}}}}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x41d),_0x3e62bd=>{const _0x3184a2=_0x10ff30;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3184a2(0xb84)])return;if(!BattleManager[_0x3184a2(0x7a8)]())return;VisuMZ[_0x3184a2(0xb1e)](_0x3e62bd,_0x3e62bd);const _0x2c4696=_0x3e62bd['Exploited'],_0x411201=VisuMZ[_0x3184a2(0x2f2)](_0x3e62bd[_0x3184a2(0xa62)]),_0x4a9ee8=_0x3e62bd['ForceExploited'],_0x3532b1=_0x3e62bd[_0x3184a2(0x526)],_0x113cd2=_0x3e62bd['ForceExploiter'],_0x293194=BattleManager['_action'];if(_0x2c4696)for(const _0x3848e6 of _0x411201){if(!_0x3848e6)continue;if(_0x3848e6===user)continue;if(_0x4a9ee8)_0x3848e6[_0x3184a2(0x511)](![]);_0x3848e6['becomeSTBExploited'](BattleManager['_subject'],_0x293194);}if(_0x3532b1&&BattleManager[_0x3184a2(0x427)]){if(_0x3184a2(0xa42)!=='shEOv'){if(_0x113cd2)BattleManager['_subject']['setSTBExploited'](![]);const _0x376a96=_0x411201[0x0];BattleManager[_0x3184a2(0xa55)](_0x376a96,_0x293194);}else this[_0x3184a2(0x62a)]();}}),PluginManager[_0x10ff30(0x651)](pluginData['name'],_0x10ff30(0x5ef),_0x2b8c95=>{const _0x5edcf1=_0x10ff30;if(!SceneManager[_0x5edcf1(0xc1e)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x5edcf1(0x7a8)]())return;VisuMZ[_0x5edcf1(0xb1e)](_0x2b8c95,_0x2b8c95);const _0x4b2d8b=_0x2b8c95[_0x5edcf1(0x539)];BattleManager[_0x5edcf1(0x427)]&&BattleManager[_0x5edcf1(0x427)]['stbGainInstant'](_0x4b2d8b);}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x399),_0x55a485=>{const _0x135b4d=_0x10ff30;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x135b4d(0xb84)])return;if(!BattleManager[_0x135b4d(0x7a8)]())return;VisuMZ['ConvertParams'](_0x55a485,_0x55a485);let _0x3ff9fc=_0x55a485[_0x135b4d(0x539)];if(BattleManager[_0x135b4d(0x427)]){BattleManager[_0x135b4d(0x427)][_0x135b4d(0x8cf)]=BattleManager['_subject']['_actions']||[];while(_0x3ff9fc--){if(BattleManager['_subject'][_0x135b4d(0x8cf)][_0x135b4d(0x449)]<=0x0)break;BattleManager[_0x135b4d(0x427)][_0x135b4d(0x8cf)][_0x135b4d(0x4f5)]();}}}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x233),_0x4a6acc=>{const _0x50d85f=_0x10ff30;if(!SceneManager[_0x50d85f(0xc1e)]())return;if(!Imported[_0x50d85f(0x235)])return;VisuMZ[_0x50d85f(0xb1e)](_0x4a6acc,_0x4a6acc);const _0x127bf7=VisuMZ[_0x50d85f(0x2f2)](_0x4a6acc[_0x50d85f(0xa62)]),_0xed36d2=_0x4a6acc[_0x50d85f(0xa44)];for(const _0x186ab9 of _0x127bf7){if(!_0x186ab9)continue;if(!_0x186ab9[_0x50d85f(0x58a)]())continue;_0x186ab9[_0x50d85f(0x612)](_0xed36d2);}}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xafa),_0x360c34=>{const _0x16bd16=_0x10ff30;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x360c34,_0x360c34);const _0x2b9f7c=VisuMZ[_0x16bd16(0x2f2)](_0x360c34[_0x16bd16(0xa62)]),_0x505300=_0x360c34[_0x16bd16(0xc34)],_0x2dd0c1={'textColor':ColorManager[_0x16bd16(0x6dc)](_0x360c34[_0x16bd16(0xba8)]),'flashColor':_0x360c34[_0x16bd16(0x3e2)],'flashDuration':_0x360c34[_0x16bd16(0x389)]};for(const _0x1142d8 of _0x2b9f7c){if(!_0x1142d8)continue;_0x1142d8[_0x16bd16(0x1ca)](_0x505300,_0x2dd0c1);}}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],'ActSeq_Mechanics_VariablePopup',_0x513ab8=>{const _0x22737b=_0x10ff30;if(!SceneManager[_0x22737b(0xc1e)]())return;VisuMZ['ConvertParams'](_0x513ab8,_0x513ab8);const _0x1a79b6=VisuMZ[_0x22737b(0x2f2)](_0x513ab8[_0x22737b(0xa62)]);let _0x5c51a6=$gameVariables[_0x22737b(0x640)](_0x513ab8[_0x22737b(0x4cb)]);Imported[_0x22737b(0xa8d)]&&_0x513ab8[_0x22737b(0x6ff)]&&('dqtxk'!==_0x22737b(0xb30)?_0x53ac54+=_0xb5a27f['abs'](_0x274ceb[_0x22737b(0x2e4)]):_0x5c51a6=VisuMZ['GroupDigits'](_0x5c51a6));const _0x2754fe=String(_0x5c51a6),_0x379b4e={'textColor':ColorManager[_0x22737b(0x6dc)](_0x513ab8[_0x22737b(0xba8)]),'flashColor':_0x513ab8['FlashColor'],'flashDuration':_0x513ab8[_0x22737b(0x389)]};for(const _0x2acc3c of _0x1a79b6){if(_0x22737b(0x971)!==_0x22737b(0x307)){if(!_0x2acc3c)continue;_0x2acc3c['setupTextPopup'](_0x2754fe,_0x379b4e);}else{let _0x2168b6=_0x3bcc87(_0xba08cd['$1']);while(_0x2168b6--){_0x5e651b[_0x22737b(0x395)](this[_0x22737b(0x3df)]()[_0x22737b(0x7d3)]());}return this['repeatTargets'](_0x18e65e);}}}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],'ActSeq_Mechanics_WaitForEffect',_0x1c0374=>{const _0x301398=_0x10ff30;if(!SceneManager['isSceneBattle']())return;const _0xc43f41=$gameTemp[_0x301398(0x621)]();if(!_0xc43f41)return;_0xc43f41[_0x301398(0x4ca)]('battleEffect');}),PluginManager[_0x10ff30(0x651)](pluginData['name'],'ActSeq_Motion_ClearFreezeFrame',_0x2d35cc=>{const _0x341e9a=_0x10ff30;if(!SceneManager[_0x341e9a(0xc1e)]())return;VisuMZ['ConvertParams'](_0x2d35cc,_0x2d35cc);const _0x4779a9=VisuMZ[_0x341e9a(0x2f2)](_0x2d35cc[_0x341e9a(0xa62)]);for(const _0x5df428 of _0x4779a9){if(_0x341e9a(0x963)!=='hdwht'){if(!_0x5df428)continue;_0x5df428[_0x341e9a(0x26b)]();}else{if(_0x283f61[_0x341e9a(0x95b)][_0x341e9a(0xb18)][_0x24852d]){const _0x3eaaf5=_0x357b02[_0x341e9a(0x95b)][_0x341e9a(0xb18)][_0x3fb059],_0x5de121={'code':0x2c,'dataId':_0x3eaaf5,'value1':0x1,'value2':0x0};_0x56a92f['effects'][_0x341e9a(0x395)](_0x5de121);}}}}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],'ActSeq_Motion_FreezeMotionFrame',_0x469823=>{const _0x10f55c=_0x10ff30;if(!SceneManager[_0x10f55c(0xc1e)]())return;VisuMZ[_0x10f55c(0xb1e)](_0x469823,_0x469823);const _0x42557e=VisuMZ[_0x10f55c(0x2f2)](_0x469823['Targets']),_0x11861a=_0x469823[_0x10f55c(0x4d8)][_0x10f55c(0x799)]()[_0x10f55c(0x6a3)]();let _0x4175f7=_0x469823['ShowWeapon'];const _0x39af97=_0x469823[_0x10f55c(0x759)];![_0x10f55c(0x6f0),_0x10f55c(0x757),'swing',_0x10f55c(0x417)][_0x10f55c(0x778)](_0x11861a)&&(_0x4175f7=![]);for(const _0x5c87fb of _0x42557e){if(_0x10f55c(0xae4)===_0x10f55c(0x324)){if(this[_0x10f55c(0xa9e)]<=0x0)return;const _0x560a3a=this[_0x10f55c(0xb77)]-this[_0x10f55c(0xa9e)],_0x22ed94=this[_0x10f55c(0xb77)]/0x2,_0x9ef480=this[_0x10f55c(0x5a2)],_0x69be71=-_0x9ef480/_0x127e53[_0x10f55c(0x7ad)](_0x22ed94,0x2);this[_0x10f55c(0x382)]=_0x69be71*_0x4c28b5[_0x10f55c(0x7ad)](_0x560a3a-_0x22ed94,0x2)+_0x9ef480,this[_0x10f55c(0xa9e)]--;if(this[_0x10f55c(0xa9e)]<=0x0)return this['onJumpEnd']();}else{if(!_0x5c87fb)continue;_0x5c87fb[_0x10f55c(0x242)](_0x11861a,_0x4175f7,_0x39af97);}}}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x546),_0x1b43f4=>{const _0xb9888d=_0x10ff30;if(!SceneManager[_0xb9888d(0xc1e)]())return;VisuMZ[_0xb9888d(0xb1e)](_0x1b43f4,_0x1b43f4);const _0x3285c0=VisuMZ[_0xb9888d(0x2f2)](_0x1b43f4[_0xb9888d(0xa62)]),_0x4a9edd=_0x1b43f4['MotionType'][_0xb9888d(0x799)]()[_0xb9888d(0x6a3)](),_0x1bf4b2=_0x1b43f4[_0xb9888d(0x6a7)];for(const _0x4c0e48 of _0x3285c0){if(!_0x4c0e48)continue;if(_0x4a9edd[_0xb9888d(0x22f)](/ATTACK[ ](\d+)/i))_0x4c0e48['performAttackSlot'](Number(RegExp['$1']));else _0x4a9edd===_0xb9888d(0x6f0)?_0xb9888d(0x40e)!==_0xb9888d(0x40e)?this[_0xb9888d(0x553)](_0x23b421[_0xb9888d(0x63e)]):_0x4c0e48['performAttack']():_0x4c0e48[_0xb9888d(0x918)](_0x4a9edd);if(!_0x1bf4b2)_0x4c0e48['startWeaponAnimation'](0x0);else{if(_0x1bf4b2&&[_0xb9888d(0x757),_0xb9888d(0x762),_0xb9888d(0xa15)][_0xb9888d(0x778)](_0x4a9edd)){}}}}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xc6a),_0x26fc19=>{const _0x21a509=_0x10ff30;if(!SceneManager[_0x21a509(0xc1e)]())return;VisuMZ[_0x21a509(0xb1e)](_0x26fc19,_0x26fc19);const _0xb7d2c=BattleManager[_0x21a509(0x837)];if(!_0xb7d2c)return;if(!_0xb7d2c[_0x21a509(0x5c4)]())return;const _0x532e7f=VisuMZ['CreateActionSequenceTargets'](_0x26fc19['Targets']);for(const _0x1ebdc3 of _0x532e7f){if('VCxSZ'!==_0x21a509(0xa9f)){if(!_0x1ebdc3)continue;_0x1ebdc3['performAction'](_0xb7d2c);}else _0x2e7254['BattleCore']['Settings'][_0x21a509(0x2ec)][_0x21a509(0x255)]&&(this[_0x21a509(0xaa7)]=new _0x1cd317(),this[_0x21a509(0x440)](this[_0x21a509(0xaa7)]));}}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x941),_0x26e355=>{const _0x5f5207=_0x10ff30;if(!SceneManager[_0x5f5207(0xc1e)]())return;VisuMZ['ConvertParams'](_0x26e355,_0x26e355);const _0x321eb9=VisuMZ[_0x5f5207(0x2f2)](_0x26e355[_0x5f5207(0xa62)]);for(const _0x490eeb of _0x321eb9){if(_0x5f5207(0x495)!==_0x5f5207(0x495))for(const _0x1fa0e5 of this['_damages']){_0x1fa0e5['x']+=_0x4c63ce[_0x5f5207(0x56f)]*_0x7c2e75,_0x1fa0e5['y']+=_0xcf22d7[_0x5f5207(0x9fb)];}else{if(!_0x490eeb)continue;if(!_0x490eeb[_0x5f5207(0x843)]())continue;_0x490eeb[_0x5f5207(0x843)]()[_0x5f5207(0x97b)]();}}}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],'ActSeq_Motion_WaitMotionFrame',_0x243b45=>{const _0x4d7c37=_0x10ff30;if(!SceneManager[_0x4d7c37(0xc1e)]())return;VisuMZ[_0x4d7c37(0xb1e)](_0x243b45,_0x243b45);const _0x3439b1=$gameTemp['getLastPluginCommandInterpreter'](),_0x5ccdc2=_0x243b45[_0x4d7c37(0x3a7)]*Sprite_Battler[_0x4d7c37(0x964)];_0x3439b1[_0x4d7c37(0x1ec)](_0x5ccdc2);}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],'ActSeq_Movement_BattleStep',_0x4bb958=>{const _0x4de1e0=_0x10ff30;if(!SceneManager[_0x4de1e0(0xc1e)]())return;VisuMZ[_0x4de1e0(0xb1e)](_0x4bb958,_0x4bb958);const _0x2689f1=$gameTemp[_0x4de1e0(0x621)](),_0x154f64=BattleManager[_0x4de1e0(0x837)];if(!_0x2689f1||!_0x154f64)return;if(!_0x154f64[_0x4de1e0(0x5c4)]())return;const _0x1ac051=VisuMZ['CreateActionSequenceTargets'](_0x4bb958[_0x4de1e0(0xa62)]);for(const _0x5651b4 of _0x1ac051){if(!_0x5651b4)continue;_0x5651b4['performActionStart'](_0x154f64);}if(_0x4bb958[_0x4de1e0(0x405)])_0x2689f1[_0x4de1e0(0x4ca)](_0x4de1e0(0xcd2));}),PluginManager[_0x10ff30(0x651)](pluginData['name'],_0x10ff30(0xc27),_0x42b808=>{const _0xe73873=_0x10ff30;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0xe73873(0xa7c)]())return;VisuMZ[_0xe73873(0xb1e)](_0x42b808,_0x42b808);const _0x3ba79e=$gameTemp[_0xe73873(0x621)](),_0x6d386f=VisuMZ[_0xe73873(0x2f2)](_0x42b808[_0xe73873(0xa62)]),_0x139bca=_0x42b808['DistanceAdjust'],_0x27e2c7=_0x42b808[_0xe73873(0x4a5)],_0x476468=_0x42b808[_0xe73873(0x6c0)],_0x2820d0=_0x42b808['Duration'],_0xf5da99=_0x42b808[_0xe73873(0x3c4)],_0x52ae06=_0x42b808[_0xe73873(0x46c)],_0x36b5f1=_0x42b808['MotionType'],_0x21a98c=_0x42b808[_0xe73873(0x405)];if(!_0x3ba79e)return;for(const _0xfb310a of _0x6d386f){if(!_0xfb310a)continue;let _0x1f7fba=_0x27e2c7,_0x1983ca=_0x476468;if(_0x139bca[_0xe73873(0x22f)](/horz/i))_0x1f7fba*=_0xfb310a['isActor']()?-0x1:0x1;if(_0x139bca[_0xe73873(0x22f)](/vert/i))_0x1983ca*=_0xfb310a[_0xe73873(0x58a)]()?-0x1:0x1;_0xfb310a['moveBattlerHomeDistance'](_0x1f7fba,_0x1983ca,_0x2820d0,_0xf5da99,_0x52ae06),_0xfb310a[_0xe73873(0x918)](_0x36b5f1);}if(_0x21a98c)_0x3ba79e['setWaitMode'](_0xe73873(0xcd2));}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],'ActSeq_Movement_HomeMoveToPoint',_0x207916=>{const _0x335873=_0x10ff30;if(!SceneManager[_0x335873(0xc1e)]())return;if(!$gameSystem[_0x335873(0xa7c)]())return;VisuMZ['ConvertParams'](_0x207916,_0x207916);const _0x125f00=$gameTemp[_0x335873(0x621)](),_0x544dc2=VisuMZ[_0x335873(0x2f2)](_0x207916[_0x335873(0xa62)]),_0x4ec08e=_0x207916[_0x335873(0xaa1)],_0x3a9e61=_0x207916[_0x335873(0x71c)],_0x12175c=_0x207916[_0x335873(0x795)],_0x304e43=_0x207916[_0x335873(0x6b8)],_0x350a2a=_0x207916['Duration'],_0xa698b4=_0x207916[_0x335873(0x3c4)],_0x4917e7=_0x207916[_0x335873(0x46c)],_0x51e731=_0x207916[_0x335873(0x4d8)],_0x250432=_0x207916[_0x335873(0x405)];if(!_0x125f00)return;for(const _0x4e001e of _0x544dc2){if(_0x335873(0x258)===_0x335873(0x258)){if(!_0x4e001e)continue;let _0xe10609=_0x4e001e[_0x335873(0x843)]()[_0x335873(0xa75)],_0xac4839=_0x4e001e[_0x335873(0x843)]()[_0x335873(0xcae)];if(_0x4ec08e[_0x335873(0x22f)](/home/i))_0xe10609=_0x4e001e['battler']()['_homeX'],_0xac4839=_0x4e001e[_0x335873(0x843)]()[_0x335873(0x2f8)];else{if(_0x4ec08e['match'](/center/i))_0xe10609=Graphics[_0x335873(0xb97)]/0x2,_0xac4839=Graphics[_0x335873(0x9be)]/0x2;else _0x4ec08e['match'](/point (\d+), (\d+)/i)&&(_0x335873(0xbcd)!=='tGlKU'?this[_0x335873(0x334)](_0xe0a2e6):(_0xe10609=Number(RegExp['$1']),_0xac4839=Number(RegExp['$2'])));}if(_0x3a9e61[_0x335873(0x22f)](/none/i))_0x335873(0xb66)!=='fmDhX'?(_0xe10609+=_0x12175c,_0xac4839+=_0x304e43):(_0x3f694a=_0x194373[_0x335873(0x843)]()[_0x335873(0x7e9)],_0x4ba607=_0x227892['battler']()[_0x335873(0x2f8)]);else{if(_0x3a9e61['match'](/horz/i)&&_0x3a9e61[_0x335873(0x22f)](/vert/i))_0x335873(0x519)==='LhwXb'?(_0x3e8c42[_0x335873(0xb0c)][_0x335873(0x82e)][_0x335873(0xb96)](this),this[_0x335873(0x93a)]&&this[_0x335873(0x93a)][_0x335873(0x78d)](),_0x4d1cb8[_0x335873(0x29d)]&&_0x7e0bf['revertTpbCachedActor']()):(_0xe10609+=_0x4e001e[_0x335873(0x58a)]()?-_0x12175c:_0x12175c,_0xac4839+=_0x4e001e[_0x335873(0x58a)]()?-_0x304e43:_0x304e43);else{if(_0x3a9e61[_0x335873(0x22f)](/horz/i)){if(_0x335873(0x97d)===_0x335873(0x97d))_0xe10609+=_0x4e001e['isActor']()?-_0x12175c:_0x12175c,_0xac4839+=_0x304e43;else{const _0xe03217=_0x5ac150['BattleCore'][_0x335873(0x928)][_0x335873(0x9f9)],_0x42161d=new _0x180ac6();_0x42161d[_0x335873(0xc3b)]=_0xe03217[_0x335873(0x1f5)],this[_0x335873(0xb81)](_0x42161d),_0x42161d[_0x335873(0x542)](this[_0x335873(0xb4f)]),_0x42161d[_0x335873(0x822)](this['_battler']),this[_0x335873(0x4eb)](_0x42161d);}}else _0x3a9e61['match'](/vert/i)&&(_0x335873(0xa33)===_0x335873(0xa33)?(_0xe10609+=_0x12175c,_0xac4839+=_0x4e001e[_0x335873(0x58a)]()?-_0x304e43:_0x304e43):(this[_0x335873(0x611)]=_0x20cdd6,this[_0x335873(0x6ca)]['bitmap']=_0x2e5b0e['loadSvActor'](_0x41963c)));}}_0x4e001e[_0x335873(0x718)](_0xe10609,_0xac4839,_0x350a2a,_0xa698b4,_0x4917e7,-0x1),_0x4e001e[_0x335873(0x918)](_0x51e731);}else this['_branch'][this[_0x335873(0x7c0)]]=_0x316e77;}if(_0x250432)_0x125f00[_0x335873(0x4ca)](_0x335873(0xcd2));}),PluginManager['registerCommand'](pluginData['name'],_0x10ff30(0xbec),_0x53cf75=>{const _0x2a130b=_0x10ff30;if(!SceneManager[_0x2a130b(0xc1e)]())return;if(!$gameSystem[_0x2a130b(0xa7c)]())return;VisuMZ['ConvertParams'](_0x53cf75,_0x53cf75);const _0x96f287=$gameTemp[_0x2a130b(0x621)](),_0x526311=VisuMZ[_0x2a130b(0x2f2)](_0x53cf75[_0x2a130b(0xc02)]),_0x37ddc2=VisuMZ[_0x2a130b(0x2f2)](_0x53cf75[_0x2a130b(0x750)]),_0x90ec4b=_0x53cf75[_0x2a130b(0x6f4)];let _0x499562=_0x53cf75[_0x2a130b(0x5f3)];const _0x327577=_0x53cf75[_0x2a130b(0x71c)],_0x30bcf1=_0x53cf75[_0x2a130b(0x795)],_0x3bc993=_0x53cf75['OffsetY'],_0x132483=_0x53cf75[_0x2a130b(0x200)],_0x3bc2dd=_0x53cf75['FaceDirection'],_0x10c37c=_0x53cf75[_0x2a130b(0x46c)],_0x3e7b07=_0x53cf75[_0x2a130b(0x4d8)],_0xcf577b=_0x53cf75[_0x2a130b(0x405)],_0x450282=Math[_0x2a130b(0xa7f)](..._0x37ddc2[_0x2a130b(0xad3)](_0x58fad5=>_0x58fad5[_0x2a130b(0x843)]()[_0x2a130b(0xa75)]-_0x58fad5[_0x2a130b(0x843)]()[_0x2a130b(0x243)]()/0x2)),_0x3ddf77=Math[_0x2a130b(0x909)](..._0x37ddc2[_0x2a130b(0xad3)](_0x47c60c=>_0x47c60c[_0x2a130b(0x843)]()['_baseX']+_0x47c60c['battler']()[_0x2a130b(0x243)]()/0x2)),_0x5e99b9=Math[_0x2a130b(0xa7f)](..._0x37ddc2[_0x2a130b(0xad3)](_0x16d5a7=>_0x16d5a7[_0x2a130b(0x843)]()[_0x2a130b(0xcae)]-_0x16d5a7[_0x2a130b(0x843)]()[_0x2a130b(0x6d3)]())),_0x1bd338=Math[_0x2a130b(0x909)](..._0x37ddc2[_0x2a130b(0xad3)](_0x2a9252=>_0x2a9252[_0x2a130b(0x843)]()[_0x2a130b(0xcae)])),_0x224651=_0x37ddc2['filter'](_0x45c3c5=>_0x45c3c5[_0x2a130b(0x58a)]())[_0x2a130b(0x449)],_0x48ebf6=_0x37ddc2[_0x2a130b(0xb68)](_0x5c18b9=>_0x5c18b9[_0x2a130b(0xccb)]())[_0x2a130b(0x449)];let _0x29b286=0x0,_0x2884a1=0x0;if(_0x90ec4b[_0x2a130b(0x22f)](/front/i))_0x29b286=_0x224651>=_0x48ebf6?_0x450282:_0x3ddf77;else{if(_0x90ec4b[_0x2a130b(0x22f)](/middle/i))_0x29b286=(_0x450282+_0x3ddf77)/0x2,_0x499562=-0x1;else _0x90ec4b[_0x2a130b(0x22f)](/back/i)&&(_0x29b286=_0x224651>=_0x48ebf6?_0x3ddf77:_0x450282);}if(_0x90ec4b[_0x2a130b(0x22f)](/head/i))_0x2884a1=_0x5e99b9;else{if(_0x90ec4b['match'](/center/i))_0x2884a1=(_0x5e99b9+_0x1bd338)/0x2;else _0x90ec4b[_0x2a130b(0x22f)](/base/i)&&(_0x2884a1=_0x1bd338);}if(!_0x96f287)return;for(const _0x22ced5 of _0x526311){if(_0x2a130b(0xc72)===_0x2a130b(0x4c8)){if(!_0x1c46d3['BattleCore'][_0x2a130b(0x928)]['BattleLog'][_0x2a130b(0xc69)])return;_0x54a3c0['BattleCore']['Window_BattleLog_displayFailure'][_0x2a130b(0xb96)](this,_0x550519);}else{if(!_0x22ced5)continue;let _0x4bcb2e=_0x29b286,_0x3d87c2=_0x2884a1;if(_0x327577[_0x2a130b(0x22f)](/none/i))_0x4bcb2e+=_0x30bcf1,_0x3d87c2+=_0x3bc993;else{if(_0x327577[_0x2a130b(0x22f)](/horz/i)&&_0x327577[_0x2a130b(0x22f)](/vert/i))_0x4bcb2e+=_0x22ced5[_0x2a130b(0x58a)]()?-_0x30bcf1:_0x30bcf1,_0x3d87c2+=_0x22ced5['isActor']()?-_0x3bc993:_0x3bc993;else{if(_0x327577['match'](/horz/i))_0x4bcb2e+=_0x22ced5[_0x2a130b(0x58a)]()?-_0x30bcf1:_0x30bcf1,_0x3d87c2+=_0x3bc993;else _0x327577['match'](/vert/i)&&(_0x4bcb2e+=_0x30bcf1,_0x3d87c2+=_0x22ced5[_0x2a130b(0x58a)]()?-_0x3bc993:_0x3bc993);}}_0x22ced5[_0x2a130b(0x718)](_0x4bcb2e,_0x3d87c2,_0x132483,_0x3bc2dd,_0x10c37c,_0x499562),_0x22ced5[_0x2a130b(0x918)](_0x3e7b07);}}if(_0xcf577b)_0x96f287[_0x2a130b(0x4ca)](_0x2a130b(0xcd2));}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],'ActSeq_Movement_FaceDirection',_0x84c741=>{const _0x10eba6=_0x10ff30;if(!SceneManager[_0x10eba6(0xc1e)]())return;if(!$gameSystem[_0x10eba6(0xa7c)]())return;VisuMZ[_0x10eba6(0xb1e)](_0x84c741,_0x84c741);const _0x56e757=VisuMZ[_0x10eba6(0x2f2)](_0x84c741[_0x10eba6(0xa62)]);let _0x447b7e=_0x84c741[_0x10eba6(0x30c)][_0x10eba6(0x22f)](/back/i);for(const _0x2a7830 of _0x56e757){if(!_0x2a7830)continue;if(_0x84c741[_0x10eba6(0x30c)]['match'](/rand/i))_0x447b7e=Math[_0x10eba6(0x8c1)](0x2);_0x2a7830['setBattlerFlip'](!!_0x447b7e);}}),PluginManager[_0x10ff30(0x651)](pluginData['name'],_0x10ff30(0xbdc),_0x799438=>{const _0x380a48=_0x10ff30;if(!SceneManager[_0x380a48(0xc1e)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x380a48(0xb1e)](_0x799438,_0x799438);const _0x2b9967=VisuMZ[_0x380a48(0x2f2)](_0x799438[_0x380a48(0xa62)]);let _0x505eb3=_0x799438[_0x380a48(0xafc)];const _0x19ceac=_0x799438[_0x380a48(0x82c)];for(const _0x3424a6 of _0x2b9967){if(_0x380a48(0x5b2)!==_0x380a48(0xbca)){if(!_0x3424a6)continue;let _0x33f90e=_0x3424a6[_0x380a48(0x843)]()[_0x380a48(0xa75)],_0x2c3cbf=_0x3424a6['battler']()[_0x380a48(0xcae)];if(_0x505eb3[_0x380a48(0x22f)](/home/i)){if(_0x380a48(0xb2e)!==_0x380a48(0xb2e))return this[_0x380a48(0x312)]>0x0;else _0x33f90e=_0x3424a6[_0x380a48(0x843)]()[_0x380a48(0x7e9)],_0x2c3cbf=_0x3424a6[_0x380a48(0x843)]()[_0x380a48(0x2f8)];}else{if(_0x505eb3['match'](/center/i))_0x33f90e=Graphics[_0x380a48(0xb97)]/0x2,_0x2c3cbf=Graphics[_0x380a48(0x9be)]/0x2;else _0x505eb3['match'](/point (\d+), (\d+)/i)&&('NBJXH'==='NBJXH'?(_0x33f90e=Number(RegExp['$1']),_0x2c3cbf=Number(RegExp['$2'])):(_0x5bca5f[_0x380a48(0x37c)]=_0x701eae,_0x5312f3[_0x380a48(0xa39)]=!![],this['stop']()));}_0x3424a6[_0x380a48(0x977)](Math[_0x380a48(0x556)](_0x33f90e),Math[_0x380a48(0x556)](_0x2c3cbf),!!_0x19ceac);}else{if(_0x2cb709[_0x380a48(0x7ed)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x1937a8=_0x3a78eb(_0x365cc9['$1'])['toUpperCase']()[_0x380a48(0x6a3)]();if(_0x1937a8===_0x380a48(0x85d))return'MANUAL';if(_0x449a20['DamageStyles'][_0x1937a8])return _0x1937a8;}const _0x328a38=_0xaa0bd7[_0x380a48(0x95b)]['Settings']['Damage'][_0x380a48(0x90d)]['toUpperCase']()[_0x380a48(0x6a3)]();if(_0x4e1f12['DamageStyles'][_0x328a38])return _0x328a38;return _0x380a48(0x85d);}}}),PluginManager[_0x10ff30(0x651)](pluginData['name'],'ActSeq_Movement_FaceTarget',_0x3aac97=>{const _0x5e8c33=_0x10ff30;if(!SceneManager[_0x5e8c33(0xc1e)]())return;if(!$gameSystem[_0x5e8c33(0xa7c)]())return;VisuMZ[_0x5e8c33(0xb1e)](_0x3aac97,_0x3aac97);const _0xe0e0e3=VisuMZ['CreateActionSequenceTargets'](_0x3aac97[_0x5e8c33(0xc02)]),_0x255922=VisuMZ[_0x5e8c33(0x2f2)](_0x3aac97[_0x5e8c33(0x750)]),_0x474766=_0x255922[_0x5e8c33(0xad3)](_0x3d8a27=>_0x3d8a27&&_0x3d8a27['battler']()?_0x3d8a27['battler']()[_0x5e8c33(0xa75)]:0x0)/(_0x255922[_0x5e8c33(0x449)]||0x1),_0x3b08b9=_0x255922[_0x5e8c33(0xad3)](_0xbb47a5=>_0xbb47a5&&_0xbb47a5[_0x5e8c33(0x843)]()?_0xbb47a5[_0x5e8c33(0x843)]()[_0x5e8c33(0xcae)]:0x0)/(_0x255922['length']||0x1),_0x38f490=_0x3aac97['FaceAway'];for(const _0x200e5d of _0xe0e0e3){if(_0x5e8c33(0x7e4)===_0x5e8c33(0x7e4)){if(!_0x200e5d)continue;_0x200e5d[_0x5e8c33(0x977)](Math[_0x5e8c33(0x556)](_0x474766),Math[_0x5e8c33(0x556)](_0x3b08b9),!!_0x38f490);}else return _0x989bfe[_0x5e8c33(0x95b)]['Settings'][_0x5e8c33(0x25e)][_0x5e8c33(0x9ef)]||![];}}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],'ActSeq_Movement_Float',_0x527c47=>{const _0x161861=_0x10ff30;if(!SceneManager[_0x161861(0xc1e)]())return;VisuMZ[_0x161861(0xb1e)](_0x527c47,_0x527c47);const _0xb6f4ae=$gameTemp[_0x161861(0x621)](),_0x18449b=VisuMZ[_0x161861(0x2f2)](_0x527c47[_0x161861(0xa62)]),_0x1a0c8b=_0x527c47[_0x161861(0xa0c)],_0x2f5109=_0x527c47['Duration'],_0xa1863a=_0x527c47[_0x161861(0x46c)],_0x32252d=_0x527c47[_0x161861(0xa3e)];if(!_0xb6f4ae)return;for(const _0x4d8bb1 of _0x18449b){if(!_0x4d8bb1)continue;_0x4d8bb1[_0x161861(0xaa0)](_0x1a0c8b,_0x2f5109,_0xa1863a);}if(_0x32252d)_0xb6f4ae['setWaitMode'](_0x161861(0x3c6));}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x6a1),_0x246974=>{const _0x2fbd6c=_0x10ff30;if(!SceneManager[_0x2fbd6c(0xc1e)]())return;VisuMZ[_0x2fbd6c(0xb1e)](_0x246974,_0x246974);const _0x5dbad6=$gameTemp[_0x2fbd6c(0x621)]();if(!_0x5dbad6)return;const _0x24ef30=VisuMZ[_0x2fbd6c(0x2f2)](_0x246974[_0x2fbd6c(0xa62)]);for(const _0x306c03 of _0x24ef30){if(_0x2fbd6c(0x222)==='FknUg')return this[_0x2fbd6c(0x58a)]&&this[_0x2fbd6c(0x58a)]()?_0x260524[_0x2fbd6c(0x95b)][_0x2fbd6c(0x928)]['Actor'][_0x2fbd6c(0x45f)]:_0x3a949b[_0x2fbd6c(0x95b)][_0x2fbd6c(0x928)][_0x2fbd6c(0x2ec)][_0x2fbd6c(0x45f)];else{if(!_0x306c03)continue;_0x306c03[_0x2fbd6c(0x4fc)]();}}BattleManager[_0x2fbd6c(0x427)]&&BattleManager[_0x2fbd6c(0x427)][_0x2fbd6c(0x940)]();if(_0x246974[_0x2fbd6c(0x405)])_0x5dbad6[_0x2fbd6c(0x4ca)](_0x2fbd6c(0xcd2));}),PluginManager[_0x10ff30(0x651)](pluginData['name'],'ActSeq_Movement_Jump',_0x20a765=>{const _0x2e5bce=_0x10ff30;if(!SceneManager[_0x2e5bce(0xc1e)]())return;VisuMZ['ConvertParams'](_0x20a765,_0x20a765);const _0x31e5d9=$gameTemp[_0x2e5bce(0x621)](),_0x53d847=VisuMZ[_0x2e5bce(0x2f2)](_0x20a765[_0x2e5bce(0xa62)]),_0x1f7d08=_0x20a765[_0x2e5bce(0xa0c)],_0x312932=_0x20a765[_0x2e5bce(0x200)],_0x90a637=_0x20a765[_0x2e5bce(0xc47)];if(!_0x31e5d9)return;for(const _0x3232b6 of _0x53d847){if(!_0x3232b6)continue;_0x3232b6['jumpBattler'](_0x1f7d08,_0x312932);}if(_0x90a637)_0x31e5d9['setWaitMode'](_0x2e5bce(0x5ad));}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x580),_0x5d6866=>{const _0x20c177=_0x10ff30;if(!SceneManager[_0x20c177(0xc1e)]())return;if(!$gameSystem[_0x20c177(0xa7c)]())return;VisuMZ['ConvertParams'](_0x5d6866,_0x5d6866);const _0x494831=$gameTemp[_0x20c177(0x621)](),_0x4455e4=VisuMZ['CreateActionSequenceTargets'](_0x5d6866[_0x20c177(0xa62)]),_0xa8c1e4=_0x5d6866[_0x20c177(0x40d)],_0x151ac1=_0x5d6866[_0x20c177(0x4a5)],_0x4f1ef4=_0x5d6866[_0x20c177(0x6c0)],_0x3444b8=_0x5d6866[_0x20c177(0x200)],_0x46c3d8=_0x5d6866['FaceDirection'],_0x4bd0e9=_0x5d6866['EasingType'],_0x5b110f=_0x5d6866['MotionType'],_0x138418=_0x5d6866['WaitForMovement'];if(!_0x494831)return;for(const _0x530191 of _0x4455e4){if(!_0x530191)continue;let _0x4fa297=_0x151ac1,_0x5a7761=_0x4f1ef4;if(_0xa8c1e4[_0x20c177(0x22f)](/horz/i))_0x4fa297*=_0x530191[_0x20c177(0x58a)]()?-0x1:0x1;if(_0xa8c1e4[_0x20c177(0x22f)](/vert/i))_0x5a7761*=_0x530191[_0x20c177(0x58a)]()?-0x1:0x1;_0x530191[_0x20c177(0x463)](_0x4fa297,_0x5a7761,_0x3444b8,_0x46c3d8,_0x4bd0e9),_0x530191['requestMotion'](_0x5b110f);}if(_0x138418)_0x494831['setWaitMode'](_0x20c177(0xcd2));}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x81b),_0x22e73a=>{const _0x1aa135=_0x10ff30;if(!SceneManager[_0x1aa135(0xc1e)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x1aa135(0xb1e)](_0x22e73a,_0x22e73a);const _0x219879=$gameTemp[_0x1aa135(0x621)](),_0x1dac2a=VisuMZ[_0x1aa135(0x2f2)](_0x22e73a[_0x1aa135(0xa62)]),_0x4e1736=_0x22e73a[_0x1aa135(0xaa1)],_0x3d5931=_0x22e73a[_0x1aa135(0x71c)],_0x177709=_0x22e73a[_0x1aa135(0x795)],_0x1e8f22=_0x22e73a[_0x1aa135(0x6b8)],_0x544757=_0x22e73a[_0x1aa135(0x200)],_0x595a4d=_0x22e73a[_0x1aa135(0x3c4)],_0x330b66=_0x22e73a[_0x1aa135(0x46c)],_0x3a67c3=_0x22e73a[_0x1aa135(0x4d8)],_0x4e9d8f=_0x22e73a['WaitForMovement'];if(!_0x219879)return;for(const _0x5ad75c of _0x1dac2a){if(!_0x5ad75c)continue;let _0x28ff92=_0x5ad75c[_0x1aa135(0x843)]()[_0x1aa135(0xa75)],_0x148d9d=_0x5ad75c[_0x1aa135(0x843)]()[_0x1aa135(0xcae)];if(_0x4e1736[_0x1aa135(0x22f)](/home/i))_0x1aa135(0x9d5)===_0x1aa135(0x9d5)?(_0x28ff92=_0x5ad75c[_0x1aa135(0x843)]()['_homeX'],_0x148d9d=_0x5ad75c['battler']()[_0x1aa135(0x2f8)]):(_0x363df1[_0x1aa135(0x95b)][_0x1aa135(0x744)]['call'](this,_0x341d40),this[_0x1aa135(0x86c)]());else{if(_0x4e1736[_0x1aa135(0x22f)](/center/i))_0x28ff92=Graphics['boxWidth']/0x2,_0x148d9d=Graphics[_0x1aa135(0x9be)]/0x2;else{if(_0x4e1736[_0x1aa135(0x22f)](/point (\d+), (\d+)/i)){if(_0x1aa135(0x3ff)!==_0x1aa135(0x3ff))return _0x3d29f0[_0x1aa135(0xa8d)]?_0x32d44c['CoreEngine'][_0x1aa135(0x928)][_0x1aa135(0x3fa)]['DigitGroupingDamageSprites']:![];else _0x28ff92=Number(RegExp['$1']),_0x148d9d=Number(RegExp['$2']);}}}if(_0x3d5931[_0x1aa135(0x22f)](/none/i))_0x28ff92+=_0x177709,_0x148d9d+=_0x1e8f22;else{if(_0x3d5931[_0x1aa135(0x22f)](/horz/i)&&_0x3d5931[_0x1aa135(0x22f)](/vert/i))_0x1aa135(0x86a)!=='qWoQe'?(_0x28ff92+=_0x5ad75c['isActor']()?-_0x177709:_0x177709,_0x148d9d+=_0x5ad75c[_0x1aa135(0x58a)]()?-_0x1e8f22:_0x1e8f22):(_0x5b9319[_0x1aa135(0x95b)]['Window_BattleLog_performMagicEvasion']['call'](this,_0x3a7193),this['callNextMethod']());else{if(_0x3d5931[_0x1aa135(0x22f)](/horz/i))_0x28ff92+=_0x5ad75c[_0x1aa135(0x58a)]()?-_0x177709:_0x177709,_0x148d9d+=_0x1e8f22;else{if(_0x3d5931['match'](/vert/i)){if(_0x1aa135(0x7d5)===_0x1aa135(0x7d5))_0x28ff92+=_0x177709,_0x148d9d+=_0x5ad75c[_0x1aa135(0x58a)]()?-_0x1e8f22:_0x1e8f22;else{const _0x58f997=_0x1f66fe[_0x1aa135(0x5c4)]();this['displayAction'](_0x5ddb1d,_0x58f997),this[_0x1aa135(0x395)](_0x1aa135(0x1e1),_0x4fc3ed,_0xb7ff49,!![]),this[_0x1aa135(0x395)](_0x1aa135(0x858),_0x2be3d1,_0x3ae1ae),this[_0x1aa135(0x395)](_0x1aa135(0x713)),this[_0x1aa135(0x395)](_0x1aa135(0xc41),_0x302a2f,_0x5a6a2c),this['push'](_0x1aa135(0x372));}}}}}_0x5ad75c[_0x1aa135(0x2bf)](_0x28ff92,_0x148d9d,_0x544757,_0x595a4d,_0x330b66,-0x1),_0x5ad75c[_0x1aa135(0x918)](_0x3a67c3);}if(_0x4e9d8f)_0x219879['setWaitMode'](_0x1aa135(0xcd2));}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x1d0),_0x1d3b45=>{const _0x28daed=_0x10ff30;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x28daed(0xa7c)]())return;VisuMZ[_0x28daed(0xb1e)](_0x1d3b45,_0x1d3b45);const _0x359585=$gameTemp[_0x28daed(0x621)](),_0xd1e280=VisuMZ['CreateActionSequenceTargets'](_0x1d3b45[_0x28daed(0xc02)]),_0x47cf1d=VisuMZ['CreateActionSequenceTargets'](_0x1d3b45[_0x28daed(0x750)]),_0x2cfc04=_0x1d3b45[_0x28daed(0x6f4)];let _0x3ba143=_0x1d3b45[_0x28daed(0x5f3)];const _0x3a6111=_0x1d3b45[_0x28daed(0x71c)],_0xb747bd=_0x1d3b45[_0x28daed(0x795)],_0x470b37=_0x1d3b45[_0x28daed(0x6b8)],_0x376331=_0x1d3b45[_0x28daed(0x200)],_0x589d9c=_0x1d3b45[_0x28daed(0x3c4)],_0x5452e0=_0x1d3b45[_0x28daed(0x46c)],_0x5d8dd9=_0x1d3b45[_0x28daed(0x4d8)],_0x2b9955=_0x1d3b45[_0x28daed(0x405)],_0xecaf9c=Math[_0x28daed(0xa7f)](..._0x47cf1d[_0x28daed(0xad3)](_0xfbe46a=>_0xfbe46a[_0x28daed(0x843)]()[_0x28daed(0xa75)]-_0xfbe46a[_0x28daed(0x843)]()[_0x28daed(0x243)]()/0x2)),_0x3055cf=Math[_0x28daed(0x909)](..._0x47cf1d[_0x28daed(0xad3)](_0x16b0b3=>_0x16b0b3[_0x28daed(0x843)]()[_0x28daed(0xa75)]+_0x16b0b3['battler']()[_0x28daed(0x243)]()/0x2)),_0x1a88fc=Math[_0x28daed(0xa7f)](..._0x47cf1d[_0x28daed(0xad3)](_0x374f90=>_0x374f90[_0x28daed(0x843)]()['_baseY']-_0x374f90[_0x28daed(0x843)]()[_0x28daed(0x6d3)]())),_0x4cf432=Math[_0x28daed(0x909)](..._0x47cf1d[_0x28daed(0xad3)](_0x564e7f=>_0x564e7f[_0x28daed(0x843)]()['_baseY'])),_0x2d1f79=_0x47cf1d['filter'](_0x17c88c=>_0x17c88c[_0x28daed(0x58a)]())[_0x28daed(0x449)],_0x55a59e=_0x47cf1d[_0x28daed(0xb68)](_0x5ea80=>_0x5ea80[_0x28daed(0xccb)]())[_0x28daed(0x449)];let _0x124b95=0x0,_0x2be32a=0x0;if(_0x2cfc04[_0x28daed(0x22f)](/front/i))_0x124b95=_0x2d1f79>=_0x55a59e?_0xecaf9c:_0x3055cf;else{if(_0x2cfc04[_0x28daed(0x22f)](/middle/i)){if(_0x28daed(0x7e7)===_0x28daed(0x7e7))_0x124b95=(_0xecaf9c+_0x3055cf)/0x2,_0x3ba143=-0x1;else{if(this[_0x28daed(0x843)]())this[_0x28daed(0x843)]()[_0x28daed(0x97b)]();}}else _0x2cfc04[_0x28daed(0x22f)](/back/i)&&(_0x124b95=_0x2d1f79>=_0x55a59e?_0x3055cf:_0xecaf9c);}if(_0x2cfc04['match'](/head/i))_0x2be32a=_0x1a88fc;else{if(_0x2cfc04[_0x28daed(0x22f)](/center/i)){if(_0x28daed(0x31b)!=='tlods')return _0x34a339[_0x28daed(0x95b)][_0x28daed(0x928)][_0x28daed(0x2ec)][_0x28daed(0x9ae)];else _0x2be32a=(_0x1a88fc+_0x4cf432)/0x2;}else _0x2cfc04['match'](/base/i)&&(_0x2be32a=_0x4cf432);}if(!_0x359585)return;for(const _0x5782b1 of _0xd1e280){if(!_0x5782b1)continue;let _0x138f1a=_0x124b95,_0x52e62c=_0x2be32a;if(_0x3a6111[_0x28daed(0x22f)](/none/i))'lJoeu'===_0x28daed(0x2ce)?(_0x138f1a+=_0xb747bd,_0x52e62c+=_0x470b37):this['x']=_0x2e7dae[_0x28daed(0xb97)]-this['enemy']()[_0x28daed(0x843)]()[_0x28daed(0xa75)];else{if(_0x3a6111[_0x28daed(0x22f)](/horz/i)&&_0x3a6111[_0x28daed(0x22f)](/vert/i)){if(_0x28daed(0x687)===_0x28daed(0x687))_0x138f1a+=_0x5782b1[_0x28daed(0x58a)]()?-_0xb747bd:_0xb747bd,_0x52e62c+=_0x5782b1['isActor']()?-_0x470b37:_0x470b37;else{_0x3771b0[_0x28daed(0xb0c)][_0x28daed(0x47f)]['call'](this);const _0x574891=this[_0x28daed(0xc1b)]();_0x574891===_0x28daed(0x401)&&this['showHelpWindow']();}}else{if(_0x3a6111['match'](/horz/i)){if(_0x28daed(0x7f6)!==_0x28daed(0xc29))_0x138f1a+=_0x5782b1[_0x28daed(0x58a)]()?-_0xb747bd:_0xb747bd,_0x52e62c+=_0x470b37;else{if(!_0x1d5f1f[_0x28daed(0xa47)])return;const _0x5a13e0=_0xbde32b[_0x28daed(0x2df)][_0x28daed(0x93a)];if(!_0x5a13e0)return;if(_0x59e2d9['ActSeqImpact'][_0x28daed(0x994)]<=1.04){_0x3aedc8(_0x28daed(0x467)),_0x12f21f[_0x28daed(0xa8c)]();return;}_0xf59e82[_0x28daed(0xb1e)](_0x5f22a8,_0x175f9c);const _0x422817=_0x152fba[_0x28daed(0x8f6)];_0x5a13e0[_0x28daed(0xb6d)](_0x422817);}}else _0x3a6111['match'](/vert/i)&&(_0x138f1a+=_0xb747bd,_0x52e62c+=_0x5782b1[_0x28daed(0x58a)]()?-_0x470b37:_0x470b37);}}_0x5782b1['moveBattlerToPoint'](_0x138f1a,_0x52e62c,_0x376331,_0x589d9c,_0x5452e0,_0x3ba143),_0x5782b1[_0x28daed(0x918)](_0x5d8dd9);}if(_0x2b9955)_0x359585[_0x28daed(0x4ca)](_0x28daed(0xcd2));}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x290),_0xfeee7e=>{const _0x3857d2=_0x10ff30;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3857d2(0xb1e)](_0xfeee7e,_0xfeee7e);const _0x109d8f=$gameTemp[_0x3857d2(0x621)](),_0x5da687=VisuMZ[_0x3857d2(0x2f2)](_0xfeee7e[_0x3857d2(0xa62)]),_0x2050e4=_0xfeee7e[_0x3857d2(0x37e)],_0x52dcce=_0xfeee7e[_0x3857d2(0x200)],_0x3647f5=_0xfeee7e[_0x3857d2(0x46c)],_0x2eb630=_0xfeee7e[_0x3857d2(0x6e8)];if(!_0x109d8f)return;for(const _0x498ddd of _0x5da687){if(!_0x498ddd)continue;_0x498ddd[_0x3857d2(0xc9a)](_0x2050e4,_0x52dcce,_0x3647f5);}if(_0x2eb630)_0x109d8f['setWaitMode'](_0x3857d2(0x81c));}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],'ActSeq_Movement_Scale',_0xca7478=>{const _0x105b30=_0x10ff30;if(!SceneManager[_0x105b30(0xc1e)]())return;VisuMZ[_0x105b30(0xb1e)](_0xca7478,_0xca7478);const _0x3f3fd2=$gameTemp[_0x105b30(0x621)](),_0x2c8c24=VisuMZ['CreateActionSequenceTargets'](_0xca7478[_0x105b30(0xa62)]),_0x581ef0=_0xca7478[_0x105b30(0x3d4)],_0x5c4a30=_0xca7478[_0x105b30(0xbb2)],_0x33d516=_0xca7478['Duration'],_0x9b6547=_0xca7478[_0x105b30(0x46c)],_0x12ea46=_0xca7478[_0x105b30(0x3be)];if(!_0x3f3fd2)return;for(const _0x39da35 of _0x2c8c24){if(!_0x39da35)continue;_0x39da35[_0x105b30(0xa1f)](_0x581ef0,_0x5c4a30,_0x33d516,_0x9b6547);}if(_0x12ea46)_0x3f3fd2['setWaitMode'](_0x105b30(0x5fe));}),PluginManager[_0x10ff30(0x651)](pluginData['name'],_0x10ff30(0xccd),_0x3aed3b=>{const _0x194369=_0x10ff30;if(!SceneManager[_0x194369(0xc1e)]())return;VisuMZ[_0x194369(0xb1e)](_0x3aed3b,_0x3aed3b);const _0x19f7d8=$gameTemp[_0x194369(0x621)](),_0x315a95=VisuMZ[_0x194369(0x2f2)](_0x3aed3b[_0x194369(0xa62)]),_0x1a8612=_0x3aed3b[_0x194369(0x359)],_0x3dc126=_0x3aed3b[_0x194369(0x41b)],_0x1bbf3e=_0x3aed3b['Duration'],_0x3d32eb=_0x3aed3b[_0x194369(0x46c)],_0x3dcedc=_0x3aed3b['WaitForSkew'];if(!_0x19f7d8)return;for(const _0x90f6b4 of _0x315a95){if(_0x194369(0x460)===_0x194369(0x725))for(const _0x2bdb2a of _0x3fd11d[_0x194369(0x660)]){if(_0x3fbd94[_0x2bdb2a[_0x194369(0x68d)]]){const _0x5215f0=_0x2bdb2a['enemyId'],_0x1a25cc=_0x2bdb2a['x'],_0x55bc6c=_0x2bdb2a['y'],_0x298e78=new _0x1e8042(_0x5215f0,_0x1a25cc,_0x55bc6c);_0x2bdb2a[_0x194369(0x89d)]&&_0x298e78[_0x194369(0x34b)](),this[_0x194369(0xb59)][_0x194369(0x395)](_0x298e78);}}else{if(!_0x90f6b4)continue;_0x90f6b4[_0x194369(0x754)](_0x1a8612,_0x3dc126,_0x1bbf3e,_0x3d32eb);}}if(_0x3dcedc)_0x19f7d8['setWaitMode'](_0x194369(0x237));}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xb3c),_0x4c6492=>{const _0x982b30=_0x10ff30;if(!SceneManager[_0x982b30(0xc1e)]())return;VisuMZ[_0x982b30(0xb1e)](_0x4c6492,_0x4c6492);const _0xa4917=$gameTemp['getLastPluginCommandInterpreter'](),_0x8c285f=VisuMZ[_0x982b30(0x2f2)](_0x4c6492[_0x982b30(0xa62)]),_0x4fc271=_0x4c6492[_0x982b30(0xa5b)],_0x3ff4d9=_0x4c6492[_0x982b30(0x200)],_0x2b52f5=_0x4c6492[_0x982b30(0x46c)],_0x528739=_0x4c6492[_0x982b30(0x706)],_0x281608=_0x4c6492['WaitForSpin'];if(!_0xa4917)return;for(const _0x4a59b4 of _0x8c285f){if(!_0x4a59b4)continue;_0x4a59b4[_0x982b30(0x446)](_0x4fc271,_0x3ff4d9,_0x2b52f5,_0x528739);}if(_0x281608)_0xa4917['setWaitMode'](_0x982b30(0x9bc));}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x2a8),_0x57ad35=>{const _0x4344fa=_0x10ff30;if(!SceneManager[_0x4344fa(0xc1e)]())return;const _0x139437=$gameTemp[_0x4344fa(0x621)]();if(!_0x139437)return;_0x139437[_0x4344fa(0x4ca)]('battleFloat');}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xad6),_0x4773a1=>{const _0xf73c35=_0x10ff30;if(!SceneManager[_0xf73c35(0xc1e)]())return;const _0x5d4ca6=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x5d4ca6)return;_0x5d4ca6[_0xf73c35(0x4ca)]('battleJump');}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x35c),_0x3fe330=>{const _0x1cb432=_0x10ff30;if(!SceneManager['isSceneBattle']())return;const _0x477491=$gameTemp[_0x1cb432(0x621)]();if(!_0x477491)return;_0x477491['setWaitMode']('battleMove');}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xc95),_0x1070f6=>{const _0x280abb=_0x10ff30;if(!SceneManager[_0x280abb(0xc1e)]())return;const _0x1e22f8=$gameTemp[_0x280abb(0x621)]();if(!_0x1e22f8)return;_0x1e22f8[_0x280abb(0x4ca)](_0x280abb(0x81c));}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],'ActSeq_Movement_WaitForScale',_0x1aed90=>{const _0x54e528=_0x10ff30;if(!SceneManager['isSceneBattle']())return;const _0x3dd72b=$gameTemp[_0x54e528(0x621)]();if(!_0x3dd72b)return;_0x3dd72b['setWaitMode'](_0x54e528(0x5fe));}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x292),_0x4aaf0f=>{const _0x51ef32=_0x10ff30;if(!SceneManager[_0x51ef32(0xc1e)]())return;const _0x2dfc91=$gameTemp[_0x51ef32(0x621)]();if(!_0x2dfc91)return;_0x2dfc91[_0x51ef32(0x4ca)]('battleSpriteSkew');}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xbd1),_0x24905c=>{const _0x4e7656=_0x10ff30;if(!SceneManager[_0x4e7656(0xc1e)]())return;const _0x57436b=$gameTemp[_0x4e7656(0x621)]();if(!_0x57436b)return;_0x57436b[_0x4e7656(0x4ca)]('battleSpin');}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x6bd),_0x2d148f=>{const _0x420238=_0x10ff30;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x420238(0x20b)])return;VisuMZ[_0x420238(0xb1e)](_0x2d148f,_0x2d148f);const _0x804000=$gameTemp[_0x420238(0x621)](),_0x1ff8f1=_0x2d148f[_0x420238(0xbff)];if(!_0x804000)return;const _0x581c3a=BattleManager[_0x420238(0x93a)];if(!_0x581c3a)return;_0x581c3a['createActionSequenceProjectile'](_0x2d148f);if(_0x1ff8f1)_0x804000[_0x420238(0x4ca)](_0x420238(0x4f7));}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x914),_0x565b35=>{const _0x329209=_0x10ff30;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x329209(0x20b)])return;VisuMZ[_0x329209(0xb1e)](_0x565b35,_0x565b35);const _0x29898b=$gameTemp[_0x329209(0x621)](),_0x271033=_0x565b35[_0x329209(0xbff)];if(!_0x29898b)return;const _0x138cdf=BattleManager['_spriteset'];if(!_0x138cdf)return;_0x138cdf[_0x329209(0xbba)](_0x565b35);if(_0x271033)_0x29898b[_0x329209(0x4ca)](_0x329209(0x4f7));}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x88f),_0x12464e=>{const _0x305fb2=_0x10ff30;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x305fb2(0x20b)])return;VisuMZ['ConvertParams'](_0x12464e,_0x12464e);const _0x34d802=$gameTemp[_0x305fb2(0x621)](),_0x593990=_0x12464e['WaitForProjectile'];if(!_0x34d802)return;const _0x39d2a4=BattleManager[_0x305fb2(0x93a)];if(!_0x39d2a4)return;_0x39d2a4[_0x305fb2(0xbba)](_0x12464e);if(_0x593990)_0x34d802['setWaitMode'](_0x305fb2(0x4f7));}),PluginManager['registerCommand'](pluginData['name'],_0x10ff30(0x42b),_0x19e521=>{const _0x275e85=_0x10ff30;if(!SceneManager[_0x275e85(0xc1e)]())return;if(!Imported[_0x275e85(0xadf)])return;VisuMZ[_0x275e85(0xb1e)](_0x19e521,_0x19e521);const _0x15855c=$gameTemp[_0x275e85(0x621)](),_0x1df3b1=_0x19e521['WaitForSkew'];if(!_0x15855c)return;$gameScreen[_0x275e85(0x846)](_0x19e521['SkewX'],_0x19e521[_0x275e85(0x41b)],_0x19e521[_0x275e85(0x200)],_0x19e521[_0x275e85(0x46c)]);if(_0x1df3b1)_0x15855c[_0x275e85(0x4ca)](_0x275e85(0x276));}),PluginManager[_0x10ff30(0x651)](pluginData['name'],'ActSeq_Skew_Reset',_0x5394f7=>{const _0x50bf6d=_0x10ff30;if(!SceneManager[_0x50bf6d(0xc1e)]())return;if(!Imported[_0x50bf6d(0xadf)])return;VisuMZ[_0x50bf6d(0xb1e)](_0x5394f7,_0x5394f7);const _0x27f76a=$gameTemp[_0x50bf6d(0x621)](),_0x56d0f8=_0x5394f7[_0x50bf6d(0x6b2)];if(!_0x27f76a)return;$gameScreen[_0x50bf6d(0x846)](0x0,0x0,_0x5394f7[_0x50bf6d(0x200)],_0x5394f7[_0x50bf6d(0x46c)]);if(_0x56d0f8)_0x27f76a['setWaitMode']('battleSkew');}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xc67),_0x15ce7=>{const _0x309876=_0x10ff30;if(!SceneManager[_0x309876(0xc1e)]())return;if(!Imported[_0x309876(0xadf)])return;const _0x357d2d=$gameTemp[_0x309876(0x621)]();if(!_0x357d2d)return;_0x357d2d['setWaitMode'](_0x309876(0x276));}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],'ActSeq_Target_CurrentIndex',_0x509f44=>{const _0x40df37=_0x10ff30;if(!SceneManager[_0x40df37(0xc1e)]())return;VisuMZ['ConvertParams'](_0x509f44,_0x509f44);const _0x910425=$gameTemp['getLastPluginCommandInterpreter'](),_0x317dea=_0x509f44[_0x40df37(0x8b2)],_0x38ffd9=_0x509f44[_0x40df37(0xb7d)];if(!_0x910425)return;BattleManager['_targetIndex']=_0x317dea,BattleManager[_0x40df37(0x236)]=BattleManager[_0x40df37(0x56a)]?BattleManager[_0x40df37(0x56a)][BattleManager[_0x40df37(0x7c4)]]||null:null,BattleManager['_target']&&_0x38ffd9['toUpperCase']()[_0x40df37(0x6a3)]()!==_0x40df37(0x291)&&_0x910425[_0x40df37(0x4fb)]([_0x38ffd9]);}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xb3f),_0x19138e=>{const _0x4b3807=_0x10ff30;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4b3807(0xb1e)](_0x19138e,_0x19138e);const _0x2a81fc=$gameTemp[_0x4b3807(0x621)](),_0x1a5a32=_0x19138e['JumpToLabel'];if(!_0x2a81fc)return;BattleManager[_0x4b3807(0x7c4)]++,BattleManager[_0x4b3807(0x236)]=BattleManager[_0x4b3807(0x56a)][BattleManager[_0x4b3807(0x7c4)]]||null,BattleManager[_0x4b3807(0x236)]&&_0x1a5a32[_0x4b3807(0x9d9)]()[_0x4b3807(0x6a3)]()!=='UNTITLED'&&(_0x4b3807(0x4ee)===_0x4b3807(0x6fa)?this[_0x4b3807(0x887)]():_0x2a81fc[_0x4b3807(0x4fb)]([_0x1a5a32]));}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],'ActSeq_Target_PrevTarget',_0x248738=>{const _0x23f7bd=_0x10ff30;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x23f7bd(0xb1e)](_0x248738,_0x248738);const _0x3d780d=$gameTemp[_0x23f7bd(0x621)](),_0x31e3ca=_0x248738['JumpToLabel'];if(!_0x3d780d)return;BattleManager[_0x23f7bd(0x7c4)]--,BattleManager['_target']=BattleManager[_0x23f7bd(0x56a)][BattleManager['_targetIndex']]||null,BattleManager[_0x23f7bd(0x236)]&&_0x31e3ca[_0x23f7bd(0x9d9)]()[_0x23f7bd(0x6a3)]()!==_0x23f7bd(0x291)&&_0x3d780d[_0x23f7bd(0x4fb)]([_0x31e3ca]);}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xb06),_0x841d69=>{const _0x4e6230=_0x10ff30;if(!SceneManager[_0x4e6230(0xc1e)]())return;VisuMZ[_0x4e6230(0xb1e)](_0x841d69,_0x841d69);const _0x43b6f9=$gameTemp['getLastPluginCommandInterpreter'](),_0x3ed58c=_0x841d69[_0x4e6230(0xc26)],_0x3c0fc7=_0x841d69[_0x4e6230(0xb7d)];if(!_0x43b6f9)return;const _0x26c723=BattleManager[_0x4e6230(0x7c4)];for(;;){BattleManager[_0x4e6230(0x7c4)]=Math[_0x4e6230(0x8c1)](BattleManager[_0x4e6230(0x56a)][_0x4e6230(0x449)]);if(!_0x3ed58c)break;if(BattleManager['_targetIndex']!==_0x26c723)break;if(BattleManager[_0x4e6230(0x56a)][_0x4e6230(0x449)]<=0x1){if(_0x4e6230(0x26d)===_0x4e6230(0x7fd))this[_0x4e6230(0xb10)]();else{BattleManager['_targetIndex']=0x0;break;}}}BattleManager[_0x4e6230(0x236)]=BattleManager[_0x4e6230(0x56a)][BattleManager[_0x4e6230(0x7c4)]]||null,BattleManager[_0x4e6230(0x236)]&&_0x3c0fc7['toUpperCase']()[_0x4e6230(0x6a3)]()!==_0x4e6230(0x291)&&_0x43b6f9['command119']([_0x3c0fc7]);}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xa5d),_0x3d4a76=>{const _0xf5f82e=_0x10ff30;if(!SceneManager[_0xf5f82e(0xc1e)]())return;VisuMZ[_0xf5f82e(0xb1e)](_0x3d4a76,_0x3d4a76);const _0x2cbbb7=VisuMZ[_0xf5f82e(0x2f2)](_0x3d4a76[_0xf5f82e(0xa62)]);for(const _0x329540 of _0x2cbbb7){if(!_0x329540)continue;if(!_0x329540[_0xf5f82e(0x58a)]())continue;_0x329540['clearActiveWeaponSlot']();}}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xbc6),_0xa3b0e1=>{const _0x4a0b6e=_0x10ff30;if(!SceneManager[_0x4a0b6e(0xc1e)]())return;VisuMZ[_0x4a0b6e(0xb1e)](_0xa3b0e1,_0xa3b0e1);const _0x1f7f9a=$gameTemp[_0x4a0b6e(0x621)]();let _0x1ddd50=![];const _0x2ef66c=_0xa3b0e1['JumpToLabel'],_0x338c0e=VisuMZ[_0x4a0b6e(0x2f2)](_0xa3b0e1['Targets']);for(const _0x194262 of _0x338c0e){if(!_0x194262)continue;if(!_0x194262[_0x4a0b6e(0x58a)]())continue;_0x194262['nextActiveWeaponSlot'](),_0x194262[_0x4a0b6e(0x62b)]()[_0x4a0b6e(0x449)]>0x0?_0x1ddd50=!![]:_0x194262[_0x4a0b6e(0xa72)]();}_0x1ddd50&&_0x2ef66c[_0x4a0b6e(0x9d9)]()[_0x4a0b6e(0x6a3)]()!==_0x4a0b6e(0x291)&&_0x1f7f9a[_0x4a0b6e(0x4fb)]([_0x2ef66c]);}),PluginManager[_0x10ff30(0x651)](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x98c),_0x231f42=>{const _0x17092a=_0x10ff30;if(!SceneManager[_0x17092a(0xc1e)]())return;VisuMZ[_0x17092a(0xb1e)](_0x231f42,_0x231f42);let _0x50c300=_0x231f42[_0x17092a(0x38c)];_0x50c300--,_0x50c300=Math['max'](_0x50c300,0x0);const _0x3086de=VisuMZ[_0x17092a(0x2f2)](_0x231f42[_0x17092a(0xa62)]);for(const _0xbb981b of _0x3086de){if('DbSTs'===_0x17092a(0x9af)){if(!_0xbb981b)continue;if(!_0xbb981b[_0x17092a(0x58a)]())continue;_0xbb981b[_0x17092a(0x3d9)](_0x50c300);}else{if(_0x34c394[_0x17092a(0x22f)](/(.*):[ ](\d+)/i)){const _0xe43624=_0xb53421(_0x2883ef['$1'])[_0x17092a(0x6a3)](),_0x254caf=_0x4dc2d5(_0x4eae53['$2']);_0x51591d[_0xe43624]=_0x254caf,_0x341e8b+=_0x254caf;}else{if(_0x31a8a5['match'](/(.*):[ ](\d+\.?\d+)/i)){const _0x5265e8=_0x468fae(_0x36a3eb['$1'])[_0x17092a(0x6a3)](),_0xc37c11=_0x3115c2(_0x16fc52['$2']);_0x5ef495[_0x5265e8]=_0xc37c11,_0x2ae46e+=_0xc37c11;}else _0x34f7cb!==''&&(_0x3ea8d6[_0x4e326e]=0x1,_0x4643fb++);}}}}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xa29),_0x441621=>{const _0x7aa6fd=_0x10ff30;if(!SceneManager[_0x7aa6fd(0xc1e)]())return;if(!Imported[_0x7aa6fd(0xadf)])return;VisuMZ[_0x7aa6fd(0xb1e)](_0x441621,_0x441621);const _0x2b9c30=$gameTemp[_0x7aa6fd(0x621)](),_0x200729=_0x441621['WaitForZoom'];if(!_0x2b9c30)return;$gameScreen['setBattleZoom'](_0x441621[_0x7aa6fd(0x2b5)],_0x441621['Duration'],_0x441621['EasingType']);if(_0x200729)_0x2b9c30[_0x7aa6fd(0x4ca)]('battleZoom');}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],_0x10ff30(0x4c1),_0x2c9627=>{const _0xf3c1a4=_0x10ff30;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0xf3c1a4(0xb1e)](_0x2c9627,_0x2c9627);const _0x1efa68=$gameTemp[_0xf3c1a4(0x621)](),_0x9f2265=_0x2c9627[_0xf3c1a4(0xac7)];if(!_0x1efa68)return;$gameScreen[_0xf3c1a4(0x5ae)](0x1,_0x2c9627['Duration'],_0x2c9627[_0xf3c1a4(0x46c)]);if(_0x9f2265)_0x1efa68['setWaitMode'](_0xf3c1a4(0x271));}),PluginManager['registerCommand'](pluginData[_0x10ff30(0x52f)],_0x10ff30(0xa25),_0x4d6bb7=>{const _0x26b289=_0x10ff30;if(!SceneManager[_0x26b289(0xc1e)]())return;if(!Imported[_0x26b289(0xadf)])return;const _0x59d47d=$gameTemp[_0x26b289(0x621)]();if(!_0x59d47d)return;_0x59d47d[_0x26b289(0x4ca)](_0x26b289(0x271));}),VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x65b)]=Scene_Boot[_0x10ff30(0xb0c)][_0x10ff30(0x9d2)],Scene_Boot[_0x10ff30(0xb0c)][_0x10ff30(0x9d2)]=function(){const _0x1e1181=_0x10ff30;this['process_VisuMZ_BattleCore_Failsafes'](),this[_0x1e1181(0xa04)](),this['process_VisuMZ_BattleCore_DamageStyles'](),this[_0x1e1181(0x3ae)](),VisuMZ[_0x1e1181(0x95b)]['Scene_Boot_onDatabaseLoaded']['call'](this),this[_0x1e1181(0x95d)](),this[_0x1e1181(0x598)](),this['process_VisuMZ_BattleCore_PreBattleCommonEvent'](),this[_0x1e1181(0x506)]();},Scene_Boot[_0x10ff30(0xb0c)][_0x10ff30(0x95d)]=function(){const _0x53f9f3=_0x10ff30;if(VisuMZ['ParseAllNotetags'])return;this[_0x53f9f3(0xacb)](),this[_0x53f9f3(0x787)](),this[_0x53f9f3(0x322)]();},Scene_Boot[_0x10ff30(0xb0c)]['process_VisuMZ_BattleCore_Failsafes']=function(){const _0x404b62=_0x10ff30,_0x46cf20=$dataSystem['weaponTypes'][_0x404b62(0x449)];for(let _0x1d1a2f=0x0;_0x1d1a2f<_0x46cf20;_0x1d1a2f++){if('JhZvq'!=='JhZvq')_0x5a114d-=_0x1b2ced[_0x404b62(0x6d3)]()/0x2;else{const _0x3efe0c=$dataSystem[_0x404b62(0x231)][_0x1d1a2f];if(_0x3efe0c)continue;$dataSystem[_0x404b62(0x231)][_0x1d1a2f]={'type':0x1,'weaponImageId':0x1};}}},Scene_Boot[_0x10ff30(0xb0c)]['process_VisuMZ_BattleCore_PluginParams']=function(){const _0x4f3df6=_0x10ff30,_0x2b39c2=VisuMZ[_0x4f3df6(0x95b)][_0x4f3df6(0x928)];_0x2b39c2[_0x4f3df6(0x9f9)][_0x4f3df6(0x8f7)]===undefined&&(_0x2b39c2[_0x4f3df6(0x9f9)][_0x4f3df6(0x8f7)]=_0x4f3df6(0x908));_0x2b39c2['Actor']['SmoothImage']===undefined&&(_0x2b39c2['Actor']['SmoothImage']=![]);_0x2b39c2[_0x4f3df6(0x2ec)][_0x4f3df6(0xb8d)]===undefined&&(_0x2b39c2[_0x4f3df6(0x2ec)]['SmoothImage']=!![]);_0x2b39c2[_0x4f3df6(0x25e)][_0x4f3df6(0x29a)]===undefined&&(_0x2b39c2[_0x4f3df6(0x25e)][_0x4f3df6(0x29a)]=![]);if(_0x2b39c2[_0x4f3df6(0x25e)][_0x4f3df6(0x63c)]===undefined){if(_0x4f3df6(0x6a0)!==_0x4f3df6(0x5d5))_0x2b39c2[_0x4f3df6(0x25e)]['PrioritySortActors']=!![];else{if(!this[_0x4f3df6(0x4e8)][_0x4f3df6(0x9cd)](_0x2b69d2['id']))return![];}}},VisuMZ['DamageStyles']={},Scene_Boot['prototype'][_0x10ff30(0x67e)]=function(){const _0x481d88=_0x10ff30;for(const _0xae49b0 of VisuMZ[_0x481d88(0x95b)]['Settings'][_0x481d88(0x9f9)][_0x481d88(0x1eb)]){if(!_0xae49b0)continue;const _0xf32fd4=_0xae49b0[_0x481d88(0xc46)][_0x481d88(0x9d9)]()[_0x481d88(0x6a3)]();VisuMZ[_0x481d88(0x560)][_0xf32fd4]=_0xae49b0;}},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x694)]={},Scene_Boot[_0x10ff30(0xb0c)][_0x10ff30(0x3ae)]=function(){const _0x340ff5=_0x10ff30,_0x4b549f=VisuMZ['BattleCore']['RegExp'],_0x27e642='<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>',_0x310d65=[[_0x340ff5(0x61f),'PRE-'],['Post',_0x340ff5(0x356)]],_0x5236f9=[['%1Apply%2JS',_0x340ff5(0xc3d)],[_0x340ff5(0xbbc),_0x340ff5(0x7e0)]],_0x1e13d4=[['',''],[_0x340ff5(0xae3),_0x340ff5(0x22b)],[_0x340ff5(0x586),_0x340ff5(0xc9d)]];for(const _0x275adb of _0x5236f9){for(const _0x3e7ec7 of _0x1e13d4){for(const _0x28b891 of _0x310d65){const _0x5f08db=_0x275adb[0x0][_0x340ff5(0x958)](_0x28b891[0x0],_0x3e7ec7[0x0]),_0x447e45=_0x275adb[0x1]['format'](_0x28b891[0x1],_0x3e7ec7[0x1])[_0x340ff5(0x6a3)](),_0x575484=new RegExp(_0x27e642['format'](_0x447e45),'i');_0x4b549f[_0x5f08db]=_0x575484;}}}const _0x3d9d4d=[[_0x340ff5(0x254),'JS\x20%1START\x20ACTION'],[_0x340ff5(0x5a6),'JS\x20%1END\x20ACTION']];for(const _0x35d5ef of _0x3d9d4d){for(const _0x11f60b of _0x310d65){if(_0x340ff5(0x92e)===_0x340ff5(0x92e)){const _0x5f134c=_0x35d5ef[0x0][_0x340ff5(0x958)](_0x11f60b[0x0]),_0xeb6dad=_0x35d5ef[0x1]['format'](_0x11f60b[0x1]),_0x5ccaeb=new RegExp(_0x27e642['format'](_0xeb6dad),'i');_0x4b549f[_0x5f134c]=_0x5ccaeb;}else this[_0x340ff5(0x395)]('addText',_0x340ff5(0x73b)[_0x340ff5(0x958)](_0x21981f[_0x340ff5(0xa1a)](_0x297aaa)));}}const _0xe79ceb=[[_0x340ff5(0x595),_0x340ff5(0x9ca)],[_0x340ff5(0xa45),'JS\x20%1END\x20BATTLE'],['BattleVictoryJS','JS\x20BATTLE\x20VICTORY'],[_0x340ff5(0x3c8),_0x340ff5(0xb57)],[_0x340ff5(0x240),'JS\x20ESCAPE\x20SUCCESS'],[_0x340ff5(0x676),_0x340ff5(0x7d7)],[_0x340ff5(0x429),_0x340ff5(0x5e7)],[_0x340ff5(0x9ee),_0x340ff5(0x678)],[_0x340ff5(0x84e),_0x340ff5(0x4ba)]];for(const _0x159d76 of _0xe79ceb){if('cHUwi'===_0x340ff5(0xb3a))for(const _0x4a16c6 of _0x310d65){if('sCnQr'===_0x340ff5(0xb89)){const _0x3cfdc3=_0x159d76[0x0][_0x340ff5(0x958)](_0x4a16c6[0x0]),_0x1ac9f3=_0x159d76[0x1][_0x340ff5(0x958)](_0x4a16c6[0x1]),_0xad0ced=new RegExp(_0x27e642[_0x340ff5(0x958)](_0x1ac9f3),'i');_0x4b549f[_0x3cfdc3]=_0xad0ced;}else _0x596591=_0x316a2b(_0x5efc18['$1']),_0x16236c=_0xb4e0c3(_0x5c81fa['$2']);}else _0x30b73f&&(_0x4f968e[_0x340ff5(0x31f)]=_0x42a476[_0x340ff5(0x31f)]||{},_0x530337['_ptbActionCost'][_0x340ff5(0x3d8)]=0x0),_0x57de4a[_0x340ff5(0x2aa)](_0x1255ed,_0x34cd7d,_0x3b63d4,_0xf78c1);}},Scene_Boot['prototype'][_0x10ff30(0xacb)]=function(){const _0xbeba6e=_0x10ff30,_0x23f90d=$dataSkills[_0xbeba6e(0xc68)]($dataItems);for(const _0x2dd177 of _0x23f90d){if(!_0x2dd177)continue;VisuMZ[_0xbeba6e(0x95b)][_0xbeba6e(0x435)](_0x2dd177);}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_TraitObject_Notetags']=function(){const _0x3ab352=_0x10ff30,_0x59446a=$dataActors[_0x3ab352(0xc68)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x442131 of _0x59446a){if(_0x3ab352(0x913)===_0x3ab352(0x4e6)){_0x510930[_0x3ab352(0xb0c)]['updateFrame']['call'](this);const _0x444d20=this['mainSprite']()||this;if(!_0x444d20)return;!_0x444d20['bitmap']&&(_0x444d20[_0x3ab352(0xc87)]=new _0x2d859d(this[_0x3ab352(0x7b2)],this[_0x3ab352(0x956)])),this['_effectType']===_0x3ab352(0xa5c)?this[_0x3ab352(0x6ca)][_0x3ab352(0xc6c)](0x0,0x0,this[_0x3ab352(0x6ca)][_0x3ab352(0x7b2)],this[_0x3ab352(0x5d9)]):_0x444d20[_0x3ab352(0xc6c)](0x0,0x0,_0x444d20[_0x3ab352(0xc87)][_0x3ab352(0x7b2)],this[_0x3ab352(0xc87)][_0x3ab352(0x956)]);}else{if(!_0x442131)continue;VisuMZ[_0x3ab352(0x95b)]['Parse_Notetags_TraitObjects'](_0x442131);}}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_BaseTroops']=function(){const _0x5d061a=_0x10ff30,_0x39a6b7=VisuMZ['BattleCore'][_0x5d061a(0x928)][_0x5d061a(0x64d)]['BaseTroopIDs'],_0x1f75b1=[];for(const _0x3c9ed4 of _0x39a6b7){const _0x3beea8=$dataTroops[_0x3c9ed4];if(_0x3beea8)_0x1f75b1[_0x5d061a(0x395)](JsonEx['makeDeepCopy'](_0x3beea8));}for(const _0x476638 of $dataTroops){if('PfATN'==='PfATN'){if(!_0x476638)continue;for(const _0x9de377 of _0x1f75b1){if(_0x5d061a(0xac6)===_0x5d061a(0xac2)){if(!this[_0x5d061a(0xb4f)])return 0x0;if(this[_0x5d061a(0x43d)])return this[_0x5d061a(0x43d)];const _0x262140=this[_0x5d061a(0x52f)]();return this['setupFont'](),this[_0x5d061a(0x43d)]=this[_0x5d061a(0xc87)][_0x5d061a(0x727)](_0x262140)||0x1,this[_0x5d061a(0x43d)];}else{if(_0x9de377['id']===_0x476638['id'])continue;_0x476638[_0x5d061a(0xa6a)]=_0x476638['pages']['concat'](_0x9de377[_0x5d061a(0xa6a)]);}}}else return this[_0x5d061a(0x46b)]>0x0;}},Scene_Boot[_0x10ff30(0xb0c)][_0x10ff30(0x431)]=function(){const _0x10d534=_0x10ff30,_0x2c9b0b=VisuMZ['BattleCore'][_0x10d534(0x928)]['Mechanics'];if(_0x2c9b0b[_0x10d534(0x375)]>0x0&&$dataCommonEvents[_0x2c9b0b[_0x10d534(0x375)]]){if(_0x10d534(0xbd4)!==_0x10d534(0x77e)){const _0x114930=$dataCommonEvents[_0x2c9b0b[_0x10d534(0x375)]],_0xa84738=_0x114930['list'][_0x10d534(0x449)]-0x2,_0x5b18a0=_0x114930[_0x10d534(0x9f4)][_0xa84738];if(_0x5b18a0&&_0x5b18a0[_0x10d534(0x45e)]!==0xe6){const _0x5a02ef={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x5600a=_0x114930[_0x10d534(0x9f4)][_0x10d534(0x818)]();_0x114930[_0x10d534(0x9f4)]['unshift'](_0x5a02ef),_0x114930[_0x10d534(0x9f4)]['unshift'](_0x5600a);}}else _0x32f191+=_0xdd2fa8['Enemy'][_0x10d534(0x795)]||0x0,_0x5e0cf5+=_0x3fb88a[_0x10d534(0x2ec)][_0x10d534(0x6b8)]||0x0;}},Scene_Boot[_0x10ff30(0xb0c)][_0x10ff30(0x506)]=function(){const _0x5ca8b8=_0x10ff30;VisuMZ['BattleCore']['CreateCommonEventKeys'](),VisuMZ[_0x5ca8b8(0x95b)][_0x5ca8b8(0x835)]($dataSkills),VisuMZ['BattleCore'][_0x5ca8b8(0x835)]($dataItems);},VisuMZ['BattleCore'][_0x10ff30(0x520)]=function(){const _0x2c7bd1=_0x10ff30;VisuMZ[_0x2c7bd1(0x95b)][_0x2c7bd1(0xb18)]={};for(const _0x40fe89 of $dataCommonEvents){if(!_0x40fe89)continue;if(_0x40fe89['name'][_0x2c7bd1(0x22f)](/\[(.*)\]/i)){let _0x484d18=String(RegExp['$1'])[_0x2c7bd1(0x319)](/,/g,'')[_0x2c7bd1(0x9d9)]()[_0x2c7bd1(0x6a3)]();VisuMZ[_0x2c7bd1(0x95b)][_0x2c7bd1(0xb18)][_0x484d18]=_0x40fe89['id'];}}},VisuMZ[_0x10ff30(0x95b)]['BindCommonEventKeysForGroup']=function(_0x2fee2f){for(const _0x5986b0 of _0x2fee2f){if(!_0x5986b0)continue;VisuMZ['BattleCore']['BindCommonEventKeysForObj'](_0x5986b0);}},VisuMZ['BattleCore'][_0x10ff30(0xc6f)]=function(_0x577b42){const _0x34c4c7=_0x10ff30;if(!_0x577b42)return;if(!_0x577b42[_0x34c4c7(0xb25)])return;VisuMZ[_0x34c4c7(0x95b)][_0x34c4c7(0xb18)]=VisuMZ[_0x34c4c7(0x95b)][_0x34c4c7(0xb18)]||{};const _0x4b41f6=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x35bf69=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x5e8251=[];const _0x507558=_0x577b42[_0x34c4c7(0x7ed)]['match'](_0x4b41f6);if(_0x507558){for(const _0x28af82 of _0x507558){_0x28af82[_0x34c4c7(0x22f)](_0x4b41f6);const _0x16a9db=String(RegExp['$1'])[_0x34c4c7(0x5f0)](',')[_0x34c4c7(0xad3)](_0x200ce7=>String(_0x200ce7)[_0x34c4c7(0x9d9)]()['trim']());_0x5e8251=_0x5e8251[_0x34c4c7(0xc68)](_0x16a9db);}if(!_0x577b42['note'][_0x34c4c7(0x22f)](/<CUSTOM ACTION SEQUENCE>/i)){if('lVKZk'===_0x34c4c7(0xa54))_0x577b42[_0x34c4c7(0x7ed)]+=_0x34c4c7(0xb5f);else{if(_0x41dafd['_battleCoreBattleStartEvent'])return![];return _0x2037db[_0x34c4c7(0x95b)]['SceneManager_isSceneChanging'][_0x34c4c7(0xb96)](this);}};}if(_0x577b42[_0x34c4c7(0x7ed)][_0x34c4c7(0x22f)](_0x35bf69)){if(_0x34c4c7(0x8e3)!==_0x34c4c7(0x8e3)){if(!_0x567d69['visualHpGauge'])return;if(this['constructor']===_0x23c90f)return;const _0x4578df=_0x181fa3[_0x34c4c7(0x95b)]['Settings'][_0x34c4c7(0xcbf)],_0x4cc8a7=new _0x1703f3();_0x4cc8a7[_0x34c4c7(0x8eb)]['x']=_0x4578df[_0x34c4c7(0xa93)],_0x4cc8a7[_0x34c4c7(0x8eb)]['y']=_0x4578df[_0x34c4c7(0x575)],_0x4cc8a7[_0x34c4c7(0x808)]['x']=_0x4cc8a7[_0x34c4c7(0x808)]['y']=_0x4578df['Scale'],this[_0x34c4c7(0x810)]=_0x4cc8a7,this['addChild'](this[_0x34c4c7(0x810)]),_0x55d117[_0x34c4c7(0x90a)]&&_0x548e9e[_0x34c4c7(0x3e4)](this[_0x34c4c7(0x810)]);}else{const _0xcb1627=String(RegExp['$1'])[_0x34c4c7(0x5f0)](/[\r\n]+/)[_0x34c4c7(0xad3)](_0x55575a=>String(_0x55575a)['toUpperCase']()['trim']());_0x5e8251=_0x5e8251['concat'](_0xcb1627);!_0x577b42['note'][_0x34c4c7(0x22f)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x577b42[_0x34c4c7(0x7ed)]+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}}for(const _0x7ea26e of _0x5e8251){if(VisuMZ[_0x34c4c7(0x95b)][_0x34c4c7(0xb18)][_0x7ea26e]){const _0x11e863=VisuMZ['BattleCore']['_commonEventKey'][_0x7ea26e],_0x407586={'code':0x2c,'dataId':_0x11e863,'value1':0x1,'value2':0x0};_0x577b42[_0x34c4c7(0xb25)]['push'](_0x407586);}}},Scene_Boot['prototype'][_0x10ff30(0x322)]=function(){const _0x1c574c=_0x10ff30,_0x54cfeb=$dataSkills['concat']($dataItems);for(const _0x1e1f31 of _0x54cfeb){if(_0x1c574c(0x6e9)===_0x1c574c(0x6bf)){this[_0x1c574c(0x1f3)](_0x1c574c(0x676));const _0x1f4adc=this[_0x1c574c(0x295)];_0x3403c0[_0x1c574c(0x95b)][_0x1c574c(0x717)][_0x1c574c(0xb96)](this),this['_escapeRatio']=_0x1f4adc+_0x4776f9['BattleCore'][_0x1c574c(0x928)][_0x1c574c(0x64d)][_0x1c574c(0x84b)][_0x1c574c(0xb96)](this),this['processPostBattleCommonEvents'](_0x1c574c(0x639));}else{if(!_0x1e1f31)continue;VisuMZ[_0x1c574c(0x95b)][_0x1c574c(0x386)](_0x1e1f31);}}},VisuMZ['BattleCore'][_0x10ff30(0x47a)]=VisuMZ[_0x10ff30(0x47a)],VisuMZ[_0x10ff30(0x47a)]=function(_0x7ba84){const _0x3c0f20=_0x10ff30;VisuMZ['BattleCore'][_0x3c0f20(0x47a)]&&(_0x3c0f20(0x8dc)===_0x3c0f20(0x8dc)?VisuMZ['BattleCore'][_0x3c0f20(0x47a)][_0x3c0f20(0xb96)](this,_0x7ba84):(this[_0x3c0f20(0x7ba)][_0x3c0f20(0x395)]('wait'),this[_0x3c0f20(0x7ba)][_0x3c0f20(0x395)]('clear'))),VisuMZ['BattleCore'][_0x3c0f20(0xbd6)](_0x7ba84);},VisuMZ[_0x10ff30(0x95b)]['ParseClassNotetags']=VisuMZ[_0x10ff30(0x9b7)],VisuMZ[_0x10ff30(0x9b7)]=function(_0x320958){const _0x19e525=_0x10ff30;VisuMZ[_0x19e525(0x95b)][_0x19e525(0x9b7)]&&VisuMZ[_0x19e525(0x95b)][_0x19e525(0x9b7)][_0x19e525(0xb96)](this,_0x320958),VisuMZ[_0x19e525(0x95b)]['Parse_Notetags_TraitObjects'](_0x320958);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xc79)]=VisuMZ[_0x10ff30(0xc79)],VisuMZ[_0x10ff30(0xc79)]=function(_0x1305ad){const _0x15cb16=_0x10ff30;VisuMZ[_0x15cb16(0x95b)][_0x15cb16(0xc79)]&&VisuMZ[_0x15cb16(0x95b)][_0x15cb16(0xc79)][_0x15cb16(0xb96)](this,_0x1305ad),VisuMZ[_0x15cb16(0x95b)]['Parse_Notetags_Action'](_0x1305ad),VisuMZ[_0x15cb16(0x95b)][_0x15cb16(0x386)](_0x1305ad);},VisuMZ['BattleCore']['ParseItemNotetags']=VisuMZ['ParseItemNotetags'],VisuMZ[_0x10ff30(0x832)]=function(_0x459084){const _0x17c367=_0x10ff30;VisuMZ['BattleCore'][_0x17c367(0x832)]&&('kopth'==='VyqgF'?(_0x5dbc06=this[_0x17c367(0xb4f)]['_forcedHomeX']??_0x3b3926,_0x446a90=this[_0x17c367(0xb4f)][_0x17c367(0x54e)]??_0xfd101b):VisuMZ[_0x17c367(0x95b)][_0x17c367(0x832)][_0x17c367(0xb96)](this,_0x459084)),VisuMZ[_0x17c367(0x95b)][_0x17c367(0x435)](_0x459084),VisuMZ[_0x17c367(0x95b)]['Parse_Notetags_Targets'](_0x459084);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xc7a)]=VisuMZ[_0x10ff30(0xc7a)],VisuMZ[_0x10ff30(0xc7a)]=function(_0x37d43f){const _0x8ad256=_0x10ff30;VisuMZ[_0x8ad256(0x95b)]['ParseWeaponNotetags']&&VisuMZ[_0x8ad256(0x95b)][_0x8ad256(0xc7a)][_0x8ad256(0xb96)](this,_0x37d43f),VisuMZ[_0x8ad256(0x95b)][_0x8ad256(0xbd6)](_0x37d43f);},VisuMZ['BattleCore'][_0x10ff30(0xc77)]=VisuMZ[_0x10ff30(0xc77)],VisuMZ['ParseArmorNotetags']=function(_0x5eeca3){const _0x8c157b=_0x10ff30;VisuMZ[_0x8c157b(0x95b)][_0x8c157b(0xc77)]&&VisuMZ[_0x8c157b(0x95b)]['ParseArmorNotetags'][_0x8c157b(0xb96)](this,_0x5eeca3),VisuMZ[_0x8c157b(0x95b)][_0x8c157b(0xbd6)](_0x5eeca3);},VisuMZ['BattleCore'][_0x10ff30(0xccc)]=VisuMZ['ParseEnemyNotetags'],VisuMZ[_0x10ff30(0xccc)]=function(_0x2ecb0a){const _0x4b67f2=_0x10ff30;VisuMZ[_0x4b67f2(0x95b)][_0x4b67f2(0xccc)]&&VisuMZ['BattleCore'][_0x4b67f2(0xccc)][_0x4b67f2(0xb96)](this,_0x2ecb0a),VisuMZ['BattleCore'][_0x4b67f2(0xbd6)](_0x2ecb0a);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xc4d)]=VisuMZ[_0x10ff30(0xc4d)],VisuMZ[_0x10ff30(0xc4d)]=function(_0x528334){const _0x32ec27=_0x10ff30;if(VisuMZ[_0x32ec27(0x95b)][_0x32ec27(0xc4d)]){if(_0x32ec27(0x714)===_0x32ec27(0x468)){if(!_0x1b3b8a['isSceneBattle']())return;const _0x3f39ea=_0x3c955d[_0x32ec27(0x621)]();if(!_0x3f39ea)return;_0x3f39ea['setWaitMode'](_0x32ec27(0xcd2));}else VisuMZ['BattleCore'][_0x32ec27(0xc4d)][_0x32ec27(0xb96)](this,_0x528334);}VisuMZ['BattleCore'][_0x32ec27(0xbd6)](_0x528334);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x435)]=function(_0x586b77){const _0x218666=_0x10ff30,_0x2ae43a=[_0x218666(0xc3e),_0x218666(0x893),_0x218666(0x53a),'PostDamageJS',_0x218666(0x776),'PostStartActionJS',_0x218666(0xa38),_0x218666(0xcc6)];for(const _0x5a53eb of _0x2ae43a){VisuMZ[_0x218666(0x95b)][_0x218666(0x418)](_0x586b77,_0x5a53eb);}const _0x5a08cc=_0x586b77['note'];_0x5a08cc['match'](/<ALWAYS CRITICAL/i)&&(_0x586b77[_0x218666(0xb64)][_0x218666(0x829)]=!![]),_0x5a08cc[_0x218666(0x22f)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&('IsJAy'!==_0x218666(0x826)?_0x586b77['repeats']=Math[_0x218666(0x909)](0x1,Number(RegExp['$1'])):this[_0x218666(0x1d5)]['splice'](_0xdde354,0x0,_0x5e0431)),_0x5a08cc[_0x218666(0x22f)](/<TARGET:[ ](.*)>/i)&&(_0x218666(0x736)!==_0x218666(0x736)?_0x1adf45['performAttackSlot'](_0x50d195(_0x2365c4['$1'])):_0x586b77[_0x218666(0xb0e)]=String(RegExp['$1'])[_0x218666(0x9d9)]()[_0x218666(0x6a3)]());},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xbd6)]=function(_0x4fc518){const _0x1253ed=_0x10ff30,_0x3f58bf=[_0x1253ed(0x559),_0x1253ed(0x339),_0x1253ed(0x245),_0x1253ed(0x937),_0x1253ed(0x7f2),_0x1253ed(0x66c),_0x1253ed(0x51b),'PostDamageAsTargetJS',_0x1253ed(0x776),_0x1253ed(0x890),_0x1253ed(0xa38),'PostEndActionJS',_0x1253ed(0x8ac),_0x1253ed(0xa3f),_0x1253ed(0x753),'PostEndBattleJS',_0x1253ed(0xa13),_0x1253ed(0x3c8),_0x1253ed(0x240),_0x1253ed(0x676),'PreStartTurnJS','PostStartTurnJS','PreEndTurnJS',_0x1253ed(0x2bb),_0x1253ed(0xa67),_0x1253ed(0x87b)];for(const _0x155fc3 of _0x3f58bf){VisuMZ[_0x1253ed(0x95b)][_0x1253ed(0x418)](_0x4fc518,_0x155fc3);}},VisuMZ[_0x10ff30(0x95b)]['Parse_Notetags_Targets']=function(_0x5d1a43){const _0x475bce=_0x10ff30,_0x3fbfe8=_0x5d1a43[_0x475bce(0x7ed)];if(_0x3fbfe8[_0x475bce(0x22f)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x82fb7f=String(RegExp['$1']),_0x3cc8d7=VisuMZ[_0x475bce(0x95b)][_0x475bce(0x613)](_0x5d1a43,'Targets');VisuMZ[_0x475bce(0x95b)]['createTargetsJS'](_0x82fb7f,_0x3cc8d7);}if(_0x3fbfe8[_0x475bce(0x22f)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){if(_0x475bce(0x644)!==_0x475bce(0x644))_0xe3f21+=_0x192b7b/0x2;else{const _0xf3b439=String(RegExp['$1']),_0x6bb2b9=VisuMZ[_0x475bce(0x95b)]['createKeyJS'](_0x5d1a43,_0x475bce(0x7cd));VisuMZ['BattleCore'][_0x475bce(0x406)](_0xf3b439,_0x6bb2b9);}}},VisuMZ[_0x10ff30(0x95b)]['JS']={},VisuMZ[_0x10ff30(0x95b)]['createJS']=function(_0x1f86d9,_0x2859b2){const _0x26658e=_0x10ff30,_0x2cdfb6=_0x1f86d9[_0x26658e(0x7ed)];if(_0x2cdfb6[_0x26658e(0x22f)](VisuMZ[_0x26658e(0x95b)]['RegExp'][_0x2859b2])){if('ruIoE'!==_0x26658e(0xc4c)){const _0xe502e2=RegExp['$1'],_0x5b5897='\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20'[_0x26658e(0x958)](_0xe502e2),_0x4cacc3=VisuMZ[_0x26658e(0x95b)][_0x26658e(0x613)](_0x1f86d9,_0x2859b2);VisuMZ['BattleCore']['JS'][_0x4cacc3]=new Function(_0x5b5897);}else return 0x0;}},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x613)]=function(_0x6f17d3,_0x2f395b){const _0x5079c3=_0x10ff30;if(VisuMZ[_0x5079c3(0x613)])return VisuMZ['createKeyJS'](_0x6f17d3,_0x2f395b);let _0xfc8c59='';if($dataActors['includes'](_0x6f17d3))_0xfc8c59=_0x5079c3(0xcc0)[_0x5079c3(0x958)](_0x6f17d3['id'],_0x2f395b);if($dataClasses['includes'](_0x6f17d3))_0xfc8c59='Class-%1-%2'[_0x5079c3(0x958)](_0x6f17d3['id'],_0x2f395b);if($dataSkills[_0x5079c3(0x778)](_0x6f17d3))_0xfc8c59='Skill-%1-%2'[_0x5079c3(0x958)](_0x6f17d3['id'],_0x2f395b);if($dataItems[_0x5079c3(0x778)](_0x6f17d3))_0xfc8c59=_0x5079c3(0x5b6)[_0x5079c3(0x958)](_0x6f17d3['id'],_0x2f395b);if($dataWeapons[_0x5079c3(0x778)](_0x6f17d3))_0xfc8c59=_0x5079c3(0x4a2)['format'](_0x6f17d3['id'],_0x2f395b);if($dataArmors[_0x5079c3(0x778)](_0x6f17d3))_0xfc8c59=_0x5079c3(0x841)[_0x5079c3(0x958)](_0x6f17d3['id'],_0x2f395b);if($dataEnemies[_0x5079c3(0x778)](_0x6f17d3))_0xfc8c59=_0x5079c3(0x8d2)['format'](_0x6f17d3['id'],_0x2f395b);if($dataStates[_0x5079c3(0x778)](_0x6f17d3))_0xfc8c59=_0x5079c3(0x88e)[_0x5079c3(0x958)](_0x6f17d3['id'],_0x2f395b);return _0xfc8c59;},VisuMZ[_0x10ff30(0x95b)]['createTargetsJS']=function(_0x46eded,_0x2c1e1f){const _0x294dbe=_0x10ff30,_0x3c83f5=_0x294dbe(0xbce)['format'](_0x46eded);VisuMZ['BattleCore']['JS'][_0x2c1e1f]=new Function(_0x3c83f5);},VisuMZ['BattleCore'][_0x10ff30(0x406)]=function(_0x6c4b0b,_0x169378){const _0xf4dd21=_0x10ff30,_0x55e105=_0xf4dd21(0x88c)['format'](_0x6c4b0b);VisuMZ['BattleCore']['JS'][_0x169378]=new Function(_0x55e105);},TextManager[_0x10ff30(0xb21)]=VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x928)]['PartyCmd'][_0x10ff30(0x834)],TextManager[_0x10ff30(0x724)]=VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x928)][_0x10ff30(0xab0)][_0x10ff30(0x568)],TextManager[_0x10ff30(0xaf1)]=VisuMZ['BattleCore'][_0x10ff30(0x928)]['AutoBattle'][_0x10ff30(0x782)],TextManager[_0x10ff30(0x5b8)]=VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x928)][_0x10ff30(0xcbf)][_0x10ff30(0xc46)],ColorManager['getColor']=function(_0x12cbf8){const _0x550643=_0x10ff30;_0x12cbf8=String(_0x12cbf8);if(_0x12cbf8[_0x550643(0x22f)](/#(.*)/i))return'#%1'[_0x550643(0x958)](String(RegExp['$1']));else{if(_0x550643(0x70d)===_0x550643(0x70d))return this[_0x550643(0x65e)](Number(_0x12cbf8));else{const _0x25e196=this[_0x550643(0x5c4)]()[_0x550643(0xb0e)];if(_0x25e196[_0x550643(0x22f)](/RANDOM/i))return![];if(_0x25e196[_0x550643(0x22f)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x25e196[_0x550643(0x22f)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return _0x4e3107[_0x550643(0x95b)][_0x550643(0xc1c)][_0x550643(0xb96)](this);}}},DataManager[_0x10ff30(0x3e5)]=function(_0x50f014){const _0xd6aad9=_0x10ff30;if(_0x50f014[_0xd6aad9(0x7ed)][_0xd6aad9(0x22f)](/<DAMAGE STYLE:[ ](.*)>/i)){if('bkgYy'!==_0xd6aad9(0x582)){const _0x4e5664=String(RegExp['$1'])['toUpperCase']()[_0xd6aad9(0x6a3)]();if(_0x4e5664===_0xd6aad9(0x85d))return'MANUAL';if(VisuMZ[_0xd6aad9(0x560)][_0x4e5664])return _0x4e5664;}else{if(!_0x12960b[_0xd6aad9(0x344)]()){const _0x246c4f=_0x104867[_0xd6aad9(0xb87)](_0x962e0d['x'],_0x47df48['y']);if(this[_0xd6aad9(0xcc8)]&&this['_regionBattleback1'][_0x246c4f])return this[_0xd6aad9(0xcc8)][_0x246c4f];}return _0x2df43e[_0xd6aad9(0x95b)][_0xd6aad9(0x5c5)][_0xd6aad9(0xb96)](this);}}const _0x2a4b86=VisuMZ[_0xd6aad9(0x95b)][_0xd6aad9(0x928)][_0xd6aad9(0x9f9)][_0xd6aad9(0x90d)][_0xd6aad9(0x9d9)]()[_0xd6aad9(0x6a3)]();if(VisuMZ[_0xd6aad9(0x560)][_0x2a4b86])return _0x2a4b86;return _0xd6aad9(0x85d);},DataManager['getStypeIdWithName']=function(_0x4a9090){const _0x2b49e4=_0x10ff30;_0x4a9090=_0x4a9090['toUpperCase']()[_0x2b49e4(0x6a3)](),this['_stypeIDs']=this[_0x2b49e4(0x335)]||{};if(this[_0x2b49e4(0x335)][_0x4a9090])return this[_0x2b49e4(0x335)][_0x4a9090];for(let _0x27f7e8=0x1;_0x27f7e8<0x64;_0x27f7e8++){if(!$dataSystem[_0x2b49e4(0x3e9)][_0x27f7e8])continue;let _0x225cd0=$dataSystem[_0x2b49e4(0x3e9)][_0x27f7e8][_0x2b49e4(0x9d9)]()[_0x2b49e4(0x6a3)]();_0x225cd0=_0x225cd0[_0x2b49e4(0x319)](/\x1I\[(\d+)\]/gi,''),_0x225cd0=_0x225cd0[_0x2b49e4(0x319)](/\\I\[(\d+)\]/gi,''),this[_0x2b49e4(0x335)][_0x225cd0]=_0x27f7e8;}return this[_0x2b49e4(0x335)][_0x4a9090]||0x0;},DataManager['getSkillIdWithName']=function(_0x2d737b){const _0x20737d=_0x10ff30;_0x2d737b=_0x2d737b[_0x20737d(0x9d9)]()[_0x20737d(0x6a3)](),this[_0x20737d(0x628)]=this[_0x20737d(0x628)]||{};if(this['_skillIDs'][_0x2d737b])return this[_0x20737d(0x628)][_0x2d737b];for(const _0x611bd9 of $dataSkills){if('yRVpJ'==='KchHw')_0x56509b['BattleCore'][_0x20737d(0x926)]['call'](this,_0x5f3577,_0x2e508c),this[_0x20737d(0x86c)]();else{if(!_0x611bd9)continue;this[_0x20737d(0x628)][_0x611bd9['name']['toUpperCase']()[_0x20737d(0x6a3)]()]=_0x611bd9['id'];}}return this[_0x20737d(0x628)][_0x2d737b]||0x0;},DataManager['getEnemyIdWithName']=function(_0x5c111a){const _0xfe1329=_0x10ff30;_0x5c111a=_0x5c111a[_0xfe1329(0x9d9)]()[_0xfe1329(0x6a3)](),this[_0xfe1329(0x469)]=this[_0xfe1329(0x469)]||{};if(this[_0xfe1329(0x469)][_0x5c111a])return this['_enemyIDs'][_0x5c111a];for(const _0x22966e of $dataEnemies){if(!_0x22966e)continue;this[_0xfe1329(0x469)][_0x22966e[_0xfe1329(0x52f)]['toUpperCase']()[_0xfe1329(0x6a3)]()]=_0x22966e['id'];}return this[_0xfe1329(0x469)][_0x5c111a]||0x0;},DataManager['getWtypeIdWithName']=function(_0x1978a3){const _0x1dd03d=_0x10ff30;_0x1978a3=_0x1978a3[_0x1dd03d(0x9d9)]()[_0x1dd03d(0x6a3)](),this[_0x1dd03d(0x2fb)]=this[_0x1dd03d(0x2fb)]||{};if(this[_0x1dd03d(0x2fb)][_0x1978a3])return this[_0x1dd03d(0x2fb)][_0x1978a3];for(let _0x1ff513=0x1;_0x1ff513<0x64;_0x1ff513++){if('IpRsL'!==_0x1dd03d(0xa27))this[_0x1dd03d(0xbd0)]=![],this[_0x1dd03d(0xa92)]=_0x183294[_0x1dd03d(0x8b9)],this[_0x1dd03d(0x1f3)](_0x1dd03d(0x8ac)),_0x268686[_0x1dd03d(0x95b)]['BattleManager_startBattle'][_0x1dd03d(0xb96)](this),this['processBattleCoreJS'](_0x1dd03d(0xa3f));else{if(!$dataSystem['weaponTypes'][_0x1ff513])continue;let _0x35b76c=$dataSystem[_0x1dd03d(0x2c1)][_0x1ff513][_0x1dd03d(0x9d9)]()['trim']();_0x35b76c=_0x35b76c['replace'](/\x1I\[(\d+)\]/gi,''),_0x35b76c=_0x35b76c[_0x1dd03d(0x319)](/\\I\[(\d+)\]/gi,''),this[_0x1dd03d(0x2fb)][_0x35b76c]=_0x1ff513;}}return this['_wtypeIDs'][_0x1dd03d(0x80d)]=0x0,this[_0x1dd03d(0x2fb)][_0x1978a3]||0x0;},DataManager[_0x10ff30(0xa1a)]=function(_0x5a8098){const _0x1b6180=_0x10ff30,_0x12bf90=_0x1b6180(0x898);let _0x5c30a4=_0x5a8098['iconIndex'],_0xdea48f=_0x5a8098[_0x1b6180(0x52f)];const _0x464be3=_0x5a8098[_0x1b6180(0x7ed)];return _0x464be3['match'](/<DISPLAY ICON: (\d+)>/i)&&(_0x1b6180(0x3bd)===_0x1b6180(0xac8)?_0x235588[_0x1b6180(0xb11)]=![]:_0x5c30a4=Number(RegExp['$1'])),_0x464be3[_0x1b6180(0x22f)](/<DISPLAY TEXT: (.*)>/i)&&(_0xdea48f=String(RegExp['$1'])),_0x12bf90[_0x1b6180(0x958)](_0x5c30a4,_0xdea48f);},DataManager[_0x10ff30(0x75c)]=function(_0x22b993){const _0x1707e8=_0x10ff30;if(_0x22b993['note'][_0x1707e8(0x22f)](/<COMMAND TEXT: (.*)>/i))return String(RegExp['$1']);else{if(_0x1707e8(0x66a)==='WTmDo')return;else return _0x22b993[_0x1707e8(0x52f)];}},DataManager['battleCommandIcon']=function(_0x309596){const _0x17210b=_0x10ff30;if(_0x309596[_0x17210b(0x7ed)][_0x17210b(0x22f)](/<COMMAND ICON: (\d+)>/i)){if(_0x17210b(0xbe2)!==_0x17210b(0x2b4))return Number(RegExp['$1']);else _0x652400=_0x50f0b2[_0x17210b(0x3ee)];}else return _0x17210b(0x63f)===_0x17210b(0x881)?this[_0x17210b(0x60c)](_0x448769):_0x309596['iconIndex'];},DataManager[_0x10ff30(0xaea)]=function(_0x450a53){const _0x55273f=_0x10ff30,_0x49187e=$dataEnemies[_0x450a53];if(_0x49187e){if(_0x55273f(0x420)!=='aFbTR'){if(_0x49187e[_0x55273f(0x7ed)][_0x55273f(0x22f)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x4dd45c=String(RegExp['$1'])[_0x55273f(0x5f0)](/[\r\n]+/)[_0x55273f(0xc04)](''),_0x3894e0=this['processRandomizedData'](_0x4dd45c);_0x450a53=this[_0x55273f(0xad0)](_0x3894e0)||_0x450a53,_0x450a53=DataManager[_0x55273f(0xaea)](_0x450a53);}}else{let _0x338cdf=_0x4960e4(_0x4e8d62['$1']);while(_0x338cdf--){_0x5493be[_0x55273f(0x395)](this[_0x55273f(0x72a)]()[_0x55273f(0x7d3)]());}return this[_0x55273f(0x425)](_0x3a2cf8);}}return _0x450a53;},DataManager[_0x10ff30(0xa2b)]=function(_0x40afab){const _0x59b64d=_0x10ff30;let _0x6ceeec=0x0;const _0x202af1={};for(const _0x32827d of _0x40afab){if(_0x32827d['match'](/(.*):[ ](\d+)/i)){if('GOadI'!==_0x59b64d(0x4bc))_0x2151e6[_0x59b64d(0x2ff)](this[_0x59b64d(0xace)][_0x59b64d(0x973)](this,_0x3264db,_0x3dab44,_0x2a3135,_0x2ebc41));else{const _0x22eaa3=String(RegExp['$1'])[_0x59b64d(0x6a3)](),_0xa96a22=Number(RegExp['$2']);_0x202af1[_0x22eaa3]=_0xa96a22,_0x6ceeec+=_0xa96a22;}}else{if(_0x32827d[_0x59b64d(0x22f)](/(.*):[ ](\d+\.?\d+)/i)){const _0x5f0b46=String(RegExp['$1'])[_0x59b64d(0x6a3)](),_0x558842=Number(RegExp['$2']);_0x202af1[_0x5f0b46]=_0x558842,_0x6ceeec+=_0x558842;}else{if(_0x32827d!==''){if(_0x59b64d(0x69d)==='JvNhz'){const _0x1be5fc=_0x29e3b9(_0x21131f['$1'])[_0x59b64d(0x5f0)](/[\r\n]+/)[_0x59b64d(0xc04)]('');_0x5b7142['motionIdle']=_0x10d532[_0x59b64d(0xa2b)](_0x1be5fc);}else _0x202af1[_0x32827d]=0x1,_0x6ceeec++;}}}}if(_0x6ceeec<=0x0)return'';let _0x572057=Math['random']()*_0x6ceeec;for(const _0xfd7957 in _0x202af1){_0x572057-=_0x202af1[_0xfd7957];if(_0x572057<=0x0)return _0xfd7957;}return'';},DataManager[_0x10ff30(0x4d3)]=function(_0x562b5b){const _0x4a6d8f=_0x10ff30;if(!_0x562b5b)return![];if(!VisuMZ[_0x4a6d8f(0x95b)]['Settings'][_0x4a6d8f(0x617)][_0x4a6d8f(0x94d)])return![];if(_0x562b5b[_0x4a6d8f(0x7ed)][_0x4a6d8f(0x22f)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x562b5b[_0x4a6d8f(0x7ed)][_0x4a6d8f(0x22f)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x4f34d4 of _0x562b5b[_0x4a6d8f(0xb25)]){if(!_0x4f34d4)continue;if(_0x4f34d4[_0x4a6d8f(0x45e)]===Game_Action[_0x4a6d8f(0xc15)])return!![];}return![];},DataManager[_0x10ff30(0x3ed)]=function(_0x2604a3){const _0x211c71=_0x10ff30,_0x19071b=$dataTroops[_0x2604a3];if(!_0x19071b)return'';let _0x4e9bc7='';_0x4e9bc7+=_0x19071b[_0x211c71(0x52f)];for(const _0x545f55 of _0x19071b[_0x211c71(0xa6a)]){for(const _0x43a438 of _0x545f55[_0x211c71(0x9f4)]){if([0x6c,0x198][_0x211c71(0x778)](_0x43a438[_0x211c71(0x45e)])){if(_0x211c71(0xc49)===_0x211c71(0xc49))_0x4e9bc7+='\x0a',_0x4e9bc7+=_0x43a438[_0x211c71(0xc0e)][0x0];else{const _0x329b85=_0x29b9b4(_0x599042['$1']);this[_0x211c71(0x3cc)](_0x5b02c4[_0x329b85]);}}}}return _0x4e9bc7;},ConfigManager[_0x10ff30(0x8b9)]=ConfigManager['autoBattleAtStart']??![],ConfigManager[_0x10ff30(0xbf6)]=ConfigManager['autoBattleUseSkills']??![],ConfigManager[_0x10ff30(0x5b8)]=ConfigManager['visualHpGauge']??!![],VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x7b7)]=ConfigManager['makeData'],ConfigManager['makeData']=function(){const _0x1409e9=_0x10ff30,_0x4d8112=VisuMZ[_0x1409e9(0x95b)][_0x1409e9(0x7b7)][_0x1409e9(0xb96)](this);return _0x4d8112[_0x1409e9(0x8b9)]=this['autoBattleAtStart'],_0x4d8112[_0x1409e9(0xbf6)]=this[_0x1409e9(0xbf6)],_0x4d8112[_0x1409e9(0x5b8)]=this[_0x1409e9(0x5b8)],_0x4d8112;},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x44c)]=ConfigManager['applyData'],ConfigManager[_0x10ff30(0x40f)]=function(_0x115e09){const _0x425227=_0x10ff30;VisuMZ[_0x425227(0x95b)][_0x425227(0x44c)][_0x425227(0xb96)](this,_0x115e09),_0x425227(0x8b9)in _0x115e09?this[_0x425227(0x8b9)]=_0x115e09[_0x425227(0x8b9)]:_0x425227(0x6b6)===_0x425227(0x318)?(_0x3aa28b=_0x5cb6ce[_0x425227(0xb97)]/0x2,_0x9ba35e=_0x2d807e[_0x425227(0x9be)]/0x2):this['autoBattleAtStart']=![],_0x425227(0xbf6)in _0x115e09?this['autoBattleUseSkills']=_0x115e09[_0x425227(0xbf6)]:this[_0x425227(0xbf6)]=![],_0x425227(0x5b8)in _0x115e09?_0x425227(0xa87)===_0x425227(0x675)?this[_0x425227(0x550)]()?this[_0x425227(0xbfb)]():_0x409d1d['BattleCore'][_0x425227(0x29b)]['call'](this):this[_0x425227(0x5b8)]=_0x115e09[_0x425227(0x5b8)]:this[_0x425227(0x5b8)]=!![];},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x330)]=BattleManager[_0x10ff30(0x6c8)],BattleManager['initMembers']=function(){const _0x59b7ee=_0x10ff30;VisuMZ[_0x59b7ee(0x95b)][_0x59b7ee(0x330)]['call'](this),this[_0x59b7ee(0xb26)]=[];},BattleManager[_0x10ff30(0x8ba)]=function(){const _0x194ef5=_0x10ff30;if(!SceneManager[_0x194ef5(0xc1e)]())return;const _0xa161de=SceneManager[_0x194ef5(0x2df)][_0x194ef5(0x656)];if(_0xa161de)_0xa161de['requestRefresh']();},BattleManager[_0x10ff30(0x6fc)]=function(){const _0x2435e0=_0x10ff30;if(BattleManager[_0x2435e0(0xccf)]())return'TPB';return _0x2435e0(0xc1f);},BattleManager[_0x10ff30(0xad2)]=function(_0x10fdf4){const _0x2c014f=_0x10ff30;return _0x10fdf4=_0x10fdf4[_0x2c014f(0x9d9)]()[_0x2c014f(0x6a3)](),this[_0x2c014f(0x6fc)]()===_0x10fdf4;},BattleManager[_0x10ff30(0x9ec)]=function(){const _0x121413=_0x10ff30;return this[_0x121413(0xad2)]('DTB');},BattleManager['isTurnBased']=function(){const _0x5baf1e=_0x10ff30;return this[_0x5baf1e(0x9ec)]();},BattleManager[_0x10ff30(0xa17)]=function(){const _0x157ce7=_0x10ff30;return!this[_0x157ce7(0x917)]();},BattleManager[_0x10ff30(0x597)]=function(){const _0x428957=_0x10ff30;return!this['isTurnBased']()&&!this[_0x428957(0xa17)]();},BattleManager['processBattleCoreJS']=function(_0xc2f20f){const _0xafc635=_0x10ff30;$gameParty['processBattleCoreJS'](_0xc2f20f),$gameTroop[_0xafc635(0x1f3)](_0xc2f20f);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x4e0)]=BattleManager[_0x10ff30(0x42f)],BattleManager[_0x10ff30(0x42f)]=function(){const _0x641f5f=_0x10ff30;this['_endBattle']=![],this[_0x641f5f(0xa92)]=ConfigManager[_0x641f5f(0x8b9)],this['processBattleCoreJS'](_0x641f5f(0x8ac)),VisuMZ[_0x641f5f(0x95b)][_0x641f5f(0x4e0)][_0x641f5f(0xb96)](this),this[_0x641f5f(0x1f3)](_0x641f5f(0xa3f));},BattleManager['processPostBattleCommonEvents']=function(_0x52d891){const _0x57c2a5=_0x10ff30,_0x3b5a63=VisuMZ[_0x57c2a5(0x95b)][_0x57c2a5(0x928)][_0x57c2a5(0x64d)];_0x52d891!=='EscapeFail'&&_0x3b5a63[_0x57c2a5(0x8de)]&&VisuMZ[_0x57c2a5(0x95b)][_0x57c2a5(0x2af)](_0x3b5a63['BattleEndEvent'])&&$gameTemp['reserveCommonEvent'](_0x3b5a63[_0x57c2a5(0x8de)]);const _0x4a4251=_0x57c2a5(0xb91)[_0x57c2a5(0x958)](_0x52d891);_0x3b5a63[_0x4a4251]&&VisuMZ['BattleCore'][_0x57c2a5(0x2af)](_0x3b5a63[_0x4a4251])&&(_0x57c2a5(0x5a1)!==_0x57c2a5(0xa84)?$gameTemp[_0x57c2a5(0x57c)](_0x3b5a63[_0x4a4251]):(_0x5328c2[_0x57c2a5(0xb0c)]['performAction'][_0x57c2a5(0xb96)](this,_0x1cfa4b),this[_0x57c2a5(0x2ba)](_0x17e29c)));},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xa7e)]=BattleManager[_0x10ff30(0x9a5)],BattleManager[_0x10ff30(0x9a5)]=function(){const _0x5c899a=_0x10ff30;if(this[_0x5c899a(0x99d)]===_0x5c899a(0xa81)){if('UHAka'!==_0x5c899a(0x68b)){if($gameTemp[_0x5c899a(0xab4)]())return![];}else _0xfbc072[_0x5c899a(0x395)](_0x5c899a(0x5bf),_0x39285c);}return VisuMZ[_0x5c899a(0x95b)][_0x5c899a(0xa7e)][_0x5c899a(0xb96)](this);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x3b8)]=BattleManager[_0x10ff30(0x806)],BattleManager['processVictory']=function(){const _0x17a3f6=_0x10ff30;this[_0x17a3f6(0x1f3)](_0x17a3f6(0xa13)),VisuMZ['BattleCore'][_0x17a3f6(0x3b8)][_0x17a3f6(0xb96)](this),this[_0x17a3f6(0xc85)](_0x17a3f6(0x516));},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x82d)]=BattleManager['processDefeat'],BattleManager[_0x10ff30(0x80e)]=function(){const _0x1339b3=_0x10ff30;this[_0x1339b3(0x1f3)](_0x1339b3(0x3c8)),VisuMZ[_0x1339b3(0x95b)][_0x1339b3(0x82d)][_0x1339b3(0xb96)](this),this[_0x1339b3(0xc85)](_0x1339b3(0xa68));},VisuMZ['BattleCore']['BattleManager_endBattle']=BattleManager[_0x10ff30(0xa11)],BattleManager['endBattle']=function(_0x3b1195){const _0x518b16=_0x10ff30;this['_endBattle']=!![],this[_0x518b16(0xa92)]=![],this[_0x518b16(0x1f3)](_0x518b16(0x753)),VisuMZ[_0x518b16(0x95b)]['BattleManager_endBattle'][_0x518b16(0xb96)](this,_0x3b1195),this[_0x518b16(0x1f3)]('PostEndBattleJS');},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x218)]=BattleManager['startTurn'],BattleManager[_0x10ff30(0x8bf)]=function(){const _0x2d8eaa=_0x10ff30;if(this[_0x2d8eaa(0x917)]())this[_0x2d8eaa(0x1f3)](_0x2d8eaa(0x576));VisuMZ[_0x2d8eaa(0x95b)][_0x2d8eaa(0x218)]['call'](this);if(this[_0x2d8eaa(0x917)]())this[_0x2d8eaa(0x1f3)](_0x2d8eaa(0xc6b));},VisuMZ[_0x10ff30(0x95b)]['BattleManager_startAction']=BattleManager[_0x10ff30(0x8a2)],BattleManager[_0x10ff30(0x8a2)]=function(){const _0xf89e36=_0x10ff30,_0x46640d=this['_subject'][_0xf89e36(0x8fd)](),_0x13d0fe=this[_0xf89e36(0x427)];if(_0x46640d&&_0x46640d[_0xf89e36(0x906)]()===_0x13d0fe){if(_0xf89e36(0xa41)!==_0xf89e36(0xb7c))_0x46640d[_0xf89e36(0x530)]('PreStartActionJS');else{if(_0x57a97f['ActionItemMsg'])this[_0xf89e36(0x2ad)](_0x5f3fb3['useItem'],_0x5b8e8b,_0x24279d);}}VisuMZ[_0xf89e36(0x95b)][_0xf89e36(0x959)]['call'](this),_0x46640d&&_0x46640d[_0xf89e36(0x906)]()===_0x13d0fe&&_0x46640d[_0xf89e36(0x530)](_0xf89e36(0x890));},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x828)]=BattleManager['endAction'],BattleManager['endAction']=function(){const _0x2bd0e6=_0x10ff30,_0x20b6fb=this[_0x2bd0e6(0x837)],_0x457f68=this[_0x2bd0e6(0x427)];if(_0x20b6fb&&_0x20b6fb!==this[_0x2bd0e6(0x870)]&&_0x20b6fb['subject']()===_0x457f68){if(_0x2bd0e6(0x3f2)!==_0x2bd0e6(0x980))_0x20b6fb['actionBattleCoreJS'](_0x2bd0e6(0xa38));else return _0x5ece7b[_0x2bd0e6(0xb68)](_0x394330=>_0x394330!==_0x46c9fe&&!_0x12b61c[_0x2bd0e6(0x778)](_0x394330)&&_0x394330[_0x2bd0e6(0x93d)]());}this['_subject']?VisuMZ[_0x2bd0e6(0x95b)][_0x2bd0e6(0x828)][_0x2bd0e6(0xb96)](this):this[_0x2bd0e6(0x99d)]=_0x2bd0e6(0xa81),_0x20b6fb&&_0x20b6fb!==this[_0x2bd0e6(0x870)]&&_0x20b6fb['subject']()===_0x457f68&&_0x20b6fb[_0x2bd0e6(0x530)](_0x2bd0e6(0xcc6)),this[_0x2bd0e6(0x6c2)](this['allBattleMembers']()),this['_lastAction']=this[_0x2bd0e6(0x837)];},BattleManager[_0x10ff30(0x6c2)]=function(_0x460042){const _0x507f86=_0x10ff30;for(const _0x496a63 of _0x460042){if(!_0x496a63)continue;if(!_0x496a63[_0x507f86(0x843)]())continue;_0x496a63[_0x507f86(0x843)]()[_0x507f86(0x97b)]();}},BattleManager[_0x10ff30(0x537)]=function(){const _0xe82054=_0x10ff30;!this[_0xe82054(0x7ba)][_0xe82054(0x87c)]()&&this[_0xe82054(0x502)]();},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x5af)]=function(){const _0x37cd00=_0x10ff30;this[_0x37cd00(0x60e)]();if(Imported[_0x37cd00(0x55b)]){if('GTuIh'!==_0x37cd00(0x699)){const _0xaff426=VisuMZ[_0x37cd00(0x5cd)][_0x37cd00(0x928)][_0x37cd00(0x802)];_0xaff426&&_0xaff426['ActionEndUpdate']===![]&&this['removeStatesAuto'](0x1);}else _0x33d563[_0x37cd00(0x95b)]['Scene_Battle_startPartyCommandSelection'][_0x37cd00(0xb96)](this);}else{if(_0x37cd00(0x864)===_0x37cd00(0x864))this[_0x37cd00(0x3b6)](0x1);else{const _0x4a1baa=_0x4768b1[_0x37cd00(0x95b)]['Settings'][_0x37cd00(0x5f4)];_0x4a1baa[_0x37cd00(0xc5e)]&&this[_0x37cd00(0x395)](_0x37cd00(0x657),_0x37cd00(0x73b)['format'](_0x1827b5[_0x37cd00(0xa1a)](_0x446719)));if(_0x365ef9[_0x37cd00(0x938)](_0x1d39a7)){if(_0x4a1baa[_0x37cd00(0x84f)])this[_0x37cd00(0x2ad)](_0x518bee[_0x37cd00(0x884)],_0x55d99e,_0x52ecfd);if(_0x4a1baa['ActionSkillMsg2'])this['displayItemMessage'](_0xc4e9b7[_0x37cd00(0x8fc)],_0x201af5,_0x9e4f06);}else{if(_0x4a1baa['ActionItemMsg'])this[_0x37cd00(0x2ad)](_0x15b153[_0x37cd00(0x433)],_0x53c7b9,_0x5f1413);}}}this['removeBuffsAuto']();},BattleManager[_0x10ff30(0xbd7)]=function(){const _0x269907=_0x10ff30;this[_0x269907(0x295)]=VisuMZ['BattleCore']['Settings'][_0x269907(0x64d)][_0x269907(0x7f7)]['call'](this);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x813)]=BattleManager[_0x10ff30(0x73c)],BattleManager[_0x10ff30(0x73c)]=function(){const _0x53cd42=_0x10ff30;this['processBattleCoreJS'](_0x53cd42(0x240)),BattleManager[_0x53cd42(0x93a)][_0x53cd42(0x800)](),VisuMZ['BattleCore'][_0x53cd42(0x813)][_0x53cd42(0xb96)](this),this['processPostBattleCommonEvents'](_0x53cd42(0x64b));},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x717)]=BattleManager[_0x10ff30(0x36f)],BattleManager[_0x10ff30(0x36f)]=function(){const _0x538479=_0x10ff30;this['processBattleCoreJS'](_0x538479(0x676));const _0x485e7f=this[_0x538479(0x295)];VisuMZ[_0x538479(0x95b)][_0x538479(0x717)]['call'](this),this[_0x538479(0x295)]=_0x485e7f+VisuMZ['BattleCore']['Settings'][_0x538479(0x64d)][_0x538479(0x84b)][_0x538479(0xb96)](this),this['processPostBattleCommonEvents']('EscapeFail');},BattleManager['displayStartMessages']=function(){const _0x30f9cb=_0x10ff30;let _0x55c98f=![];if(this[_0x30f9cb(0x6f2)]())for(const _0x77c71d of $gameTroop[_0x30f9cb(0x1d3)]()){if(_0x30f9cb(0x1cb)==='DljqQ'){if(!_0x137933[_0x30f9cb(0xc1e)]())return;const _0x1e12ae=_0x51420c['getLastPluginCommandInterpreter'](),_0x4db48c=_0x16461f[_0x30f9cb(0x837)],_0x21910a=_0x154291['_subject'],_0x8d61f0=_0x7b3b05[_0x30f9cb(0x7ba)];if(!_0x1e12ae||!_0x4db48c||!_0x21910a)return;if(!_0x4db48c[_0x30f9cb(0x5c4)]())return;_0x8d61f0['displayAction'](_0x21910a,_0x4db48c[_0x30f9cb(0x5c4)]()),_0x1e12ae[_0x30f9cb(0x4ca)](_0x30f9cb(0xc7e));}else this[_0x30f9cb(0x7ba)][_0x30f9cb(0x395)](_0x30f9cb(0x657),TextManager[_0x30f9cb(0xc58)][_0x30f9cb(0x958)](_0x77c71d)),this['_logWindow']['push']('wait'),_0x55c98f=!![];}if(this[_0x30f9cb(0x49b)]){if(_0x30f9cb(0xb4a)!==_0x30f9cb(0xb4a)){const _0x487c9a=_0xc621a0(_0x54256b['$1']);return[_0x16f51a[_0x30f9cb(0x660)]()[_0x487c9a]];}else this['_logWindow'][_0x30f9cb(0x395)](_0x30f9cb(0x657),TextManager[_0x30f9cb(0xc94)][_0x30f9cb(0x958)]($gameParty[_0x30f9cb(0x52f)]())),this['_logWindow'][_0x30f9cb(0x395)]('wait');}else this[_0x30f9cb(0xb5c)]&&(this[_0x30f9cb(0x7ba)][_0x30f9cb(0x395)](_0x30f9cb(0x657),TextManager[_0x30f9cb(0x608)][_0x30f9cb(0x958)]($gameParty[_0x30f9cb(0x52f)]())),this[_0x30f9cb(0x7ba)]['push'](_0x30f9cb(0x1ec)));_0x55c98f&&(_0x30f9cb(0x458)!==_0x30f9cb(0x683)?(this[_0x30f9cb(0x7ba)][_0x30f9cb(0x395)](_0x30f9cb(0x1ec)),this['_logWindow'][_0x30f9cb(0x395)](_0x30f9cb(0xb10))):this[_0x30f9cb(0x443)]=this[_0x30f9cb(0x28b)]),this[_0x30f9cb(0xccf)]()&&this[_0x30f9cb(0xa52)]()&&(this[_0x30f9cb(0xa2c)]=![]);},BattleManager[_0x10ff30(0x6f2)]=function(){const _0x17a665=_0x10ff30;if(BattleManager['_autoBattle'])return![];return VisuMZ[_0x17a665(0x95b)][_0x17a665(0x928)][_0x17a665(0x2ec)][_0x17a665(0x630)];},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x3c5)]=BattleManager[_0x10ff30(0x25c)],BattleManager[_0x10ff30(0x25c)]=function(){const _0x27d603=_0x10ff30;VisuMZ[_0x27d603(0x95b)]['BattleManager_startInput']['call'](this);if(this[_0x27d603(0x9ec)]()&&this[_0x27d603(0xa52)]()&&!this['_surprise']&&$gameParty[_0x27d603(0x5f7)]()){if(_0x27d603(0x1fa)!==_0x27d603(0x1fa)){const _0x40a6ad=new _0x17c2df();_0x40a6ad['bitmap']=_0x5a6445[_0x27d603(0xa97)](_0xe8cce8[_0x27d603(0xcb7)]),_0x40a6ad['x']=_0x316c23[_0x27d603(0x9dd)]||0x0,_0x40a6ad['y']=_0xe6c41b[_0x27d603(0x3c0)]||0x0,this[_0x27d603(0x440)](_0x40a6ad),this['_frontAttachmentSprite']=_0x40a6ad;}else this[_0x27d603(0x3ea)]();}},BattleManager[_0x10ff30(0xa52)]=function(){const _0x571a91=_0x10ff30;return VisuMZ[_0x571a91(0x95b)][_0x571a91(0x928)][_0x571a91(0xc78)][_0x571a91(0x686)];},BattleManager[_0x10ff30(0x2c6)]=function(){const _0x37057d=_0x10ff30;this[_0x37057d(0xb82)]()&&this['selectNextCommand']();},VisuMZ['BattleCore']['Scene_Battle_startActorCommandSelection']=Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0xab2)],Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0xab2)]=function(){const _0x1b1d0e=_0x10ff30;VisuMZ[_0x1b1d0e(0x95b)]['Scene_Battle_startActorCommandSelection'][_0x1b1d0e(0xb96)](this),BattleManager[_0x1b1d0e(0xccf)]()&&BattleManager[_0x1b1d0e(0xa2c)]&&(BattleManager[_0x1b1d0e(0xa2c)]=![],this[_0x1b1d0e(0x7a9)]());},BattleManager[_0x10ff30(0x47d)]=function(_0x521266,_0x4461f3){const _0x5a14fe=_0x10ff30;this[_0x5a14fe(0x837)][_0x5a14fe(0x98d)]=_0x4461f3,this[_0x5a14fe(0x7ba)][_0x5a14fe(0x422)](_0x4461f3),this[_0x5a14fe(0x7ba)]['displayReflectionPlayBack'](_0x521266,this[_0x5a14fe(0x837)]),this[_0x5a14fe(0x837)]['apply'](_0x521266),this[_0x5a14fe(0x7ba)][_0x5a14fe(0xb72)](_0x521266,_0x521266);},VisuMZ['BattleCore'][_0x10ff30(0x6ee)]=BattleManager[_0x10ff30(0x20e)],BattleManager[_0x10ff30(0x20e)]=function(){const _0x4041f5=_0x10ff30;VisuMZ[_0x4041f5(0x95b)][_0x4041f5(0x6ee)]['call'](this),this[_0x4041f5(0x340)]=this[_0x4041f5(0x340)]['filter'](_0x22b77f=>_0x22b77f&&_0x22b77f['isAppeared']());},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x9a0)]=BattleManager[_0x10ff30(0xbf7)],BattleManager[_0x10ff30(0xbf7)]=function(_0x4ed17f){const _0xdff3e4=_0x10ff30;if(this[_0xdff3e4(0x99d)]===_0xdff3e4(0x4ef))_0xdff3e4(0xb04)===_0xdff3e4(0xb04)?this[_0xdff3e4(0x5f5)]():(this[_0xdff3e4(0x24d)](![]),this['_forcedHomeX']=_0x2e36dc,this[_0xdff3e4(0x54e)]=_0x1b94d1);else this[_0xdff3e4(0x99d)]===_0xdff3e4(0x62c)?this[_0xdff3e4(0x887)]():_0xdff3e4(0x3f9)!==_0xdff3e4(0x83d)?VisuMZ['BattleCore']['BattleManager_updatePhase'][_0xdff3e4(0xb96)](this,_0x4ed17f):(_0x279fbf[_0xdff3e4(0x808)]['x']=this[_0xdff3e4(0x949)](),_0x44c10d['scale']['y']=this[_0xdff3e4(0x927)]());},BattleManager['prepareCustomActionSequence']=function(){const _0x6996da=_0x10ff30;this[_0x6996da(0x56a)]=this[_0x6996da(0xb6e)][_0x6996da(0x73e)](0x0),this[_0x6996da(0x7c4)]=0x0,this['_target']=this[_0x6996da(0x56a)][0x0]||null,this[_0x6996da(0x99d)]='custom';},BattleManager[_0x10ff30(0x5f5)]=function(){const _0x239729=_0x10ff30;!this[_0x239729(0x4a8)]()&&!this[_0x239729(0x7ba)]['isBusy']()&&(this[_0x239729(0x99d)]=_0x239729(0x5bd));},BattleManager[_0x10ff30(0x62c)]=function(_0x456602){const _0x5bb705=_0x10ff30;this[_0x5bb705(0x340)]['remove'](_0x456602);if(_0x456602===this['_subject'])return;const _0xdb00d8=JsonEx[_0x5bb705(0x6ab)](_0x456602[_0x5bb705(0x8fd)]());this['_forcedBattlers'][_0x5bb705(0x395)]([_0x456602,_0xdb00d8]);},BattleManager[_0x10ff30(0x428)]=function(){},BattleManager[_0x10ff30(0x7d8)]=function(){const _0x5ecd15=_0x10ff30;if(this[_0x5ecd15(0xccf)]())this[_0x5ecd15(0x99d)]='turn';else this[_0x5ecd15(0xb26)][_0x5ecd15(0x449)]>0x0?_0x5ecd15(0x248)===_0x5ecd15(0x603)?this[_0x5ecd15(0x4ca)]('animation'):this[_0x5ecd15(0x99d)]=_0x5ecd15(0xa81):this[_0x5ecd15(0x25c)]();},BattleManager['getNextSubject']=function(){const _0x28bc7f=_0x10ff30,_0x5c60c1=this[_0x28bc7f(0x427)];_0x5c60c1&&this[_0x28bc7f(0xccf)]()&&_0x5c60c1[_0x28bc7f(0xa64)](_0x28bc7f(0x584));for(;;){const _0x2b84f3=this[_0x28bc7f(0x6db)]();if(!_0x2b84f3)return null;if(_0x2b84f3[_0x28bc7f(0x23c)]()&&_0x2b84f3[_0x28bc7f(0x355)]())return _0x2b84f3;}},BattleManager[_0x10ff30(0x6db)]=function(){const _0x26e7e6=_0x10ff30;if(this[_0x26e7e6(0xb26)][_0x26e7e6(0x449)]>0x0){const _0x15d0d5=this[_0x26e7e6(0xb26)]['shift'](),_0x2f39b7=_0x15d0d5[0x0];return _0x2f39b7[_0x26e7e6(0x8cf)]=_0x2f39b7['_actions']||[],_0x2f39b7[_0x26e7e6(0x8cf)][0x0]=_0x15d0d5[0x1],_0x2f39b7;}else{if(_0x26e7e6(0x27d)===_0x26e7e6(0x823))this[_0x26e7e6(0x99d)]=_0x26e7e6(0xa81);else return this[_0x26e7e6(0x340)][_0x26e7e6(0x4f5)]();}},VisuMZ[_0x10ff30(0x95b)]['Game_Battler_forceAction']=Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x62c)],Game_Battler['prototype']['forceAction']=function(_0x12d141,_0x353d70){const _0x5a434b=_0x10ff30;VisuMZ[_0x5a434b(0x95b)]['Game_Battler_forceAction']['call'](this,_0x12d141,_0x353d70),this[_0x5a434b(0x8cf)][this[_0x5a434b(0x8cf)]['length']-0x1]['_forceAction']=!![];},Game_Interpreter[_0x10ff30(0xb0c)][_0x10ff30(0x496)]=function(_0x20359d){const _0x355abd=_0x10ff30;return this[_0x355abd(0x923)](_0x20359d[0x0],_0x20359d[0x1],_0x1d5eac=>{const _0x4e38d5=_0x355abd;!_0x1d5eac[_0x4e38d5(0x48f)]()&&(_0x1d5eac[_0x4e38d5(0x62c)](_0x20359d[0x2],_0x20359d[0x3]),BattleManager[_0x4e38d5(0x62c)](_0x1d5eac));}),!![];},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xbcb)]=Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0xa83)],Game_Battler['prototype'][_0x10ff30(0xa83)]=function(){const _0x116b38=_0x10ff30;VisuMZ[_0x116b38(0x95b)][_0x116b38(0xbcb)]['call'](this),this[_0x116b38(0x8cf)][_0x116b38(0x449)]<=0x0&&(_0x116b38(0x2c4)!==_0x116b38(0x7e5)?this[_0x116b38(0x371)]=Number[_0x116b38(0x3c3)]:this['_cache'][_0x116b38(0x4d7)]=_0x5f1cd1[_0x116b38(0xb0c)]['svBattlerAnchorX'][_0x116b38(0xb96)](this));},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x29c)]=BattleManager[_0x10ff30(0x3ea)],BattleManager[_0x10ff30(0x3ea)]=function(){const _0x10b9f8=_0x10ff30;this[_0x10b9f8(0xccf)]()?this[_0x10b9f8(0xb28)]():'YVVKK'!==_0x10b9f8(0x209)?VisuMZ[_0x10b9f8(0x95b)][_0x10b9f8(0x29c)][_0x10b9f8(0xb96)](this):_0x4a732f+=_0x346bc1(_0x2b98f5['$2']);},BattleManager[_0x10ff30(0xb28)]=function(){const _0xc357b5=_0x10ff30;if(this[_0xc357b5(0xb12)]){if(this[_0xc357b5(0xb12)][_0xc357b5(0x3ea)]())return;this[_0xc357b5(0xaef)](),this[_0xc357b5(0x6da)]();if(!this[_0xc357b5(0x427)]&&!this[_0xc357b5(0xb12)]){if(_0xc357b5(0x512)==='XsFLa'){if(this[_0xc357b5(0x602)][_0xc357b5(0x52f)]===_0xc357b5(0x3ab))return;if(this['_opacityDuration']<=0x0)return;const _0x674e3f=this[_0xc357b5(0x2bd)],_0x4d6221=this['_opacityWholeDuration'],_0x54e775=this[_0xc357b5(0xa8a)];_0x276792[_0xc357b5(0xa8d)]?this[_0xc357b5(0x443)]=this[_0xc357b5(0x8a1)](this[_0xc357b5(0x443)],this[_0xc357b5(0x28b)],_0x674e3f,_0x4d6221,_0x54e775):this['opacity']=(this[_0xc357b5(0x443)]*(_0x674e3f-0x1)+this[_0xc357b5(0x28b)])/_0x674e3f;this['_opacityDuration']--;if(this[_0xc357b5(0x2bd)]<=0x0)this[_0xc357b5(0xcb6)]();}else SceneManager[_0xc357b5(0x2df)][_0xc357b5(0x59c)]();}}else{if(!this['_subject']){if('ixgAv'!==_0xc357b5(0x1de))this[_0xc357b5(0x872)]();else{const _0x168a00=this[_0xc357b5(0xb4f)][_0xc357b5(0x8aa)];this[_0xc357b5(0x6fb)]=_0x346427[_0xc357b5(0xb85)][_0x168a00[_0xc357b5(0x5b5)]],this['_pattern']=_0x168a00[_0xc357b5(0x7c1)];const _0x1b6681=this[_0xc357b5(0x803)];_0x1b6681[_0xc357b5(0xc30)](_0x168a00[_0xc357b5(0x63e)],_0x168a00['pattern']),this['adjustWeaponSpriteOffset']();}}}},BattleManager['checkTpbInputClose']=function(){const _0x3503bb=_0x10ff30;if(!this[_0x3503bb(0xb82)]()||this[_0x3503bb(0x4a4)]()){this[_0x3503bb(0x29d)]&&(!$gameParty[_0x3503bb(0xb03)]()[_0x3503bb(0x778)](this[_0x3503bb(0x29d)])&&(this[_0x3503bb(0x29d)]=null));if(!this['_tpbSceneChangeCacheActor'])this['cancelActorInput'](),this[_0x3503bb(0xb12)]=null,this[_0x3503bb(0xb11)]=![];else{if(_0x3503bb(0x723)===_0x3503bb(0x723))this[_0x3503bb(0x952)]();else{const _0x163860=_0x22c4d4[_0x3503bb(0x7ed)];if(_0x163860['match'](_0xab9ac9[_0x3503bb(0x95b)]['RegExp'][_0xcca7c4])){const _0x2a99d1=_0x42694d['$1'],_0x253fe6=_0x3503bb(0x5df)['format'](_0x2a99d1),_0x40041b=_0xcf7f4f[_0x3503bb(0x95b)][_0x3503bb(0x613)](_0x453316,_0x463356);_0x8090de['BattleCore']['JS'][_0x40041b]=new _0x253a88(_0x253fe6);}}}}},BattleManager[_0x10ff30(0x952)]=function(){const _0x5af759=_0x10ff30;!$gameParty[_0x5af759(0xb03)]()['includes'](this[_0x5af759(0x29d)])&&(this['_tpbSceneChangeCacheActor']=null);if(this['_tpbSceneChangeCacheActor'])this[_0x5af759(0xb12)]=this[_0x5af759(0x29d)],this[_0x5af759(0xb12)]['_tpbState']='charged',this['_inputting']=!![],this[_0x5af759(0x29d)]=null;else{if(_0x5af759(0xbcc)!==_0x5af759(0xbcc))return _0x239f03['BattleCore'][_0x5af759(0x928)][_0x5af759(0x25e)]['SmoothImage'];else this[_0x5af759(0xb2f)](),this[_0x5af759(0xb12)]=null,this[_0x5af759(0xb11)]=![];}},VisuMZ['BattleCore'][_0x10ff30(0x259)]=BattleManager[_0x10ff30(0x3ac)],BattleManager[_0x10ff30(0x3ac)]=function(){const _0x5cf780=_0x10ff30;if(this[_0x5cf780(0x99d)]===_0x5cf780(0x4ef)){if(_0x5cf780(0x91d)===_0x5cf780(0x3a2))_0x4af0f5['playEnemyAttack']();else return this['battleCoreTpbMainPhase']();}else return VisuMZ[_0x5cf780(0x95b)][_0x5cf780(0x259)]['call'](this);},BattleManager[_0x10ff30(0x9b8)]=function(){const _0x4c4593=_0x10ff30;return this[_0x4c4593(0x3bc)]();},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x1f1)]=BattleManager[_0x10ff30(0xb2f)],BattleManager[_0x10ff30(0xb2f)]=function(){const _0x17e378=_0x10ff30;this['isTpb']()&&this['_phase']===_0x17e378(0xcad)&&(this[_0x17e378(0xb12)]=null),VisuMZ[_0x17e378(0x95b)][_0x17e378(0x1f1)]['call'](this);},VisuMZ['BattleCore']['BattleManager_inputtingAction']=BattleManager[_0x10ff30(0xa30)],BattleManager['inputtingAction']=function(){const _0x110fe1=_0x10ff30,_0x58d3fb=this['_currentActor'];if(_0x58d3fb&&!_0x58d3fb[_0x110fe1(0xa30)]()){const _0x57f875=_0x58d3fb[_0x110fe1(0x77a)];_0x58d3fb['_actions'][_0x57f875]=new Game_Action(_0x58d3fb);}return VisuMZ[_0x110fe1(0x95b)][_0x110fe1(0xb08)][_0x110fe1(0xb96)](this);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xc31)]=BattleManager[_0x10ff30(0xa66)],BattleManager[_0x10ff30(0xa66)]=function(_0x53488b){const _0x1756e1=_0x10ff30;if(this[_0x1756e1(0x837)][_0x1756e1(0xbea)]())return![];return VisuMZ[_0x1756e1(0x95b)]['BattleManager_checkSubstitute']['call'](this,_0x53488b);},SceneManager['isSceneBattle']=function(){const _0x15993f=_0x10ff30;return this[_0x15993f(0x2df)]&&this['_scene'][_0x15993f(0x602)]===Scene_Battle;},SceneManager[_0x10ff30(0xbe3)]=function(){const _0x1f1ea3=_0x10ff30;return Spriteset_Battle[_0x1f1ea3(0xb0c)][_0x1f1ea3(0xc13)]();},SceneManager[_0x10ff30(0xa35)]=function(){const _0x5118f5=_0x10ff30;if(SceneManager[_0x5118f5(0x326)](Scene_Options))return!![];return![];},SceneManager[_0x10ff30(0x532)]=function(){if(SceneManager['isNextScene'](Scene_Options))return!![];return![];},SceneManager[_0x10ff30(0xc12)]=function(_0x2b3696){const _0x54bd0b=_0x10ff30;if(!SceneManager[_0x54bd0b(0xc1e)]())return!![];const _0x455233=[_0x54bd0b(0x955),_0x54bd0b(0xafb)];return _0x455233[_0x54bd0b(0x778)](_0x2b3696[_0x54bd0b(0x52f)]);},VisuMZ['BattleCore']['SceneManager_push']=SceneManager[_0x10ff30(0x395)],SceneManager[_0x10ff30(0x395)]=function(_0x556449){const _0x1de936=_0x10ff30;if(!SceneManager[_0x1de936(0xc12)](_0x556449))return _0x1de936(0x2d2)==='Hqwph'?this[_0x1de936(0x247)](_0x556449):_0x1d4e8e[_0x1de936(0x95b)][_0x1de936(0x777)][_0x1de936(0xb96)](this,_0x4649c2);VisuMZ[_0x1de936(0x95b)][_0x1de936(0x5db)][_0x1de936(0xb96)](this,_0x556449);},SceneManager[_0x10ff30(0x247)]=function(_0xa35155){const _0x5342a8=_0x10ff30;if(!$gameTemp[_0x5342a8(0x21d)]())return;if(this[_0x5342a8(0x8bd)])return;this['_displayBattleCoreTransitionErrorMsg']=!![];let _0x51a362='';_0x51a362+=_0x5342a8(0x9a6),_0x51a362+=_0x5342a8(0xa70)[_0x5342a8(0x958)](_0xa35155[_0x5342a8(0x52f)]),alert(_0x51a362);},VisuMZ['BattleCore'][_0x10ff30(0x28c)]=Game_Temp['prototype']['requestAnimation'],Game_Temp['prototype'][_0x10ff30(0x1e7)]=function(_0x25691a,_0x1d0504,_0x26fa81){const _0x3d0318=_0x10ff30;_0x25691a=_0x25691a[_0x3d0318(0xb68)]((_0x111f4a,_0x3969f2,_0x3aa460)=>_0x3aa460[_0x3d0318(0xbc2)](_0x111f4a)===_0x3969f2),SceneManager[_0x3d0318(0xc1e)]()&&SceneManager[_0x3d0318(0xbe3)]()&&(_0x26fa81=!_0x26fa81),VisuMZ[_0x3d0318(0x95b)][_0x3d0318(0x28c)][_0x3d0318(0xb96)](this,_0x25691a,_0x1d0504,_0x26fa81),SceneManager[_0x3d0318(0xc1e)]()&&BattleManager[_0x3d0318(0x93a)][_0x3d0318(0x544)]();},Game_Temp['prototype'][_0x10ff30(0x3b0)]=function(_0x3e5b24){const _0x16dd34=_0x10ff30;this[_0x16dd34(0xa53)]=_0x3e5b24;},Game_Temp[_0x10ff30(0xb0c)][_0x10ff30(0x621)]=function(){return this['_lastPluginCommandInterpreter'];},Game_Temp['prototype']['clearForcedGameTroopSettingsBattleCore']=function(){const _0x4c16d2=_0x10ff30;this[_0x4c16d2(0x967)]=undefined;},Game_Temp[_0x10ff30(0xb0c)][_0x10ff30(0x825)]=function(_0x6cd106){const _0x310dd0=_0x10ff30;if($gameMap&&$dataMap&&$dataMap[_0x310dd0(0x7ed)]){if(_0x310dd0(0xa9d)!==_0x310dd0(0x388))this['parseForcedGameTroopSettingsBattleCore']($dataMap[_0x310dd0(0x7ed)]);else{this[_0x310dd0(0x395)](_0x310dd0(0x3a4),_0x14a3df,_0xcc8d97);if(!_0x2cf8e7[_0x310dd0(0x95b)][_0x310dd0(0x928)][_0x310dd0(0x5f4)][_0x310dd0(0x7c9)])return;const _0x320ba7=_0x2f07af[_0x310dd0(0x52f)](),_0x3542a9=_0x233687[_0x310dd0(0x981)][_0x310dd0(0x958)](_0x320ba7,_0x5b365e['name']());this[_0x310dd0(0x395)](_0x310dd0(0x657),_0x3542a9);}}const _0x4c5aaa=$dataTroops[_0x6cd106];if(_0x4c5aaa){if(_0x310dd0(0xbaf)==='TkEeC')_0x1985d5=_0x5760a1;else{let _0x5c6473=DataManager['createTroopNote'](_0x4c5aaa['id']);this[_0x310dd0(0x3fb)](_0x5c6473);}}},Game_Temp[_0x10ff30(0xb0c)][_0x10ff30(0x3fb)]=function(_0x1971ae){const _0x32cafd=_0x10ff30;if(!_0x1971ae)return;if(_0x1971ae['match'](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*)>/i)){const _0x19fd32=String(RegExp['$1']);if(_0x19fd32[_0x32cafd(0x22f)](/DEFAULT/i))this[_0x32cafd(0x967)]=_0x32cafd(0x281);else{if(_0x19fd32[_0x32cafd(0x22f)](/LIST/i)){if('mrxgn'!=='mrxgn'){if(this[_0x32cafd(0x8cf)][_0x32cafd(0xb58)](_0x2acc6c=>_0x2acc6c['item']()&&_0x2acc6c[_0x32cafd(0xc54)]()))return!![];}else this[_0x32cafd(0x967)]=_0x32cafd(0x9f4);}else{if(_0x19fd32[_0x32cafd(0x22f)](/XP/i))_0x32cafd(0x911)!==_0x32cafd(0x452)?this[_0x32cafd(0x967)]='xp':this[_0x32cafd(0x5da)][_0x32cafd(0x440)](_0x3f9851);else{if(_0x19fd32[_0x32cafd(0x22f)](/PORTRAIT/i)){if(_0x32cafd(0x288)!=='lBIMN'){if(this[_0x32cafd(0x9e1)]())_0x106f50['BattleCore'][_0x32cafd(0xb42)][_0x32cafd(0xb96)](this);}else this[_0x32cafd(0x967)]='portrait';}else{if(_0x19fd32[_0x32cafd(0x22f)](/BORDER/i))_0x32cafd(0x875)!==_0x32cafd(0x875)?(_0x5a5073+=_0x33bcd1,_0xd5fb9a+=_0x5d87be['isActor']()?-_0x5a8f2d:_0x360581):this[_0x32cafd(0x967)]=_0x32cafd(0x401);else _0x19fd32[_0x32cafd(0x22f)](/(?:SIDEVIEW UI|SIDEVIEW)/i)&&('rqiry'==='QAIaW'?(this['_forcedHomeX']=_0x2461dc,this[_0x32cafd(0x54e)]=_0x470b36):Imported[_0x32cafd(0xc8c)]?_0x32cafd(0xc21)===_0x32cafd(0xc21)?this[_0x32cafd(0x967)]=_0x32cafd(0x8f3):this[_0x32cafd(0x918)](_0x32cafd(0x417)):this[_0x32cafd(0x967)]=_0x32cafd(0x281));}}}}}},VisuMZ[_0x10ff30(0x95b)]['Game_System_initialize']=Game_System[_0x10ff30(0xb0c)][_0x10ff30(0x600)],Game_System['prototype'][_0x10ff30(0x600)]=function(){const _0xe02e08=_0x10ff30;VisuMZ[_0xe02e08(0x95b)][_0xe02e08(0x518)][_0xe02e08(0xb96)](this),this[_0xe02e08(0x2de)]();},Game_System['prototype'][_0x10ff30(0x2de)]=function(){const _0x9d85c1=_0x10ff30;this['_defeatedEnemies']=this[_0x9d85c1(0x8e1)]||[];},Game_System[_0x10ff30(0xb0c)][_0x10ff30(0x9e9)]=function(){const _0x2d8700=_0x10ff30;if(this[_0x2d8700(0x8e1)]===undefined)this[_0x2d8700(0x2de)]();return this[_0x2d8700(0x8e1)];},Game_System[_0x10ff30(0xb0c)][_0x10ff30(0x961)]=function(_0x5a2b21){const _0x436fee=_0x10ff30;if(this[_0x436fee(0x8e1)]===undefined)this[_0x436fee(0x2de)]();if(!_0x5a2b21)return;if(this[_0x436fee(0x8e1)][_0x436fee(0x778)](_0x5a2b21))return;this[_0x436fee(0x8e1)][_0x436fee(0x395)](_0x5a2b21),this[_0x436fee(0x8e1)]['sort']((_0x56936d,_0x356203)=>_0x56936d-_0x356203);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x4cf)]=Game_BattlerBase[_0x10ff30(0xb0c)][_0x10ff30(0xa71)],Game_BattlerBase['prototype'][_0x10ff30(0xa71)]=function(_0xdcdadf){const _0x4d5667=_0x10ff30,_0x5a5c22=this[_0x4d5667(0x355)](),_0x367ca2=this[_0x4d5667(0x7b9)]();VisuMZ[_0x4d5667(0x95b)]['Game_BattlerBase_addNewState'][_0x4d5667(0xb96)](this,_0xdcdadf),this[_0x4d5667(0xccb)]()&&_0x5a5c22&&this[_0x4d5667(0x472)]()&&(this[_0x4d5667(0xa06)]=!this[_0x4d5667(0x3e3)](),$gameSystem[_0x4d5667(0x961)](this[_0x4d5667(0x68d)]())),SceneManager[_0x4d5667(0xc1e)]()&&_0x367ca2!==this['stateMotionIndex']()&&(this[_0x4d5667(0x843)]()&&this[_0x4d5667(0x843)]()[_0x4d5667(0x97b)]());},Game_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0x3e3)]=function(){const _0x16d673=_0x10ff30;return $gameSystem[_0x16d673(0x9e9)]()[_0x16d673(0x778)](this[_0x16d673(0x652)]);},VisuMZ[_0x10ff30(0x95b)]['Game_BattlerBase_eraseState']=Game_BattlerBase[_0x10ff30(0xb0c)][_0x10ff30(0xa6c)],Game_BattlerBase['prototype'][_0x10ff30(0xa6c)]=function(_0x19d17){const _0x5b3eba=_0x10ff30;VisuMZ[_0x5b3eba(0x95b)]['Game_BattlerBase_eraseState']['call'](this,_0x19d17);this[_0x5b3eba(0xccb)]()&&_0x19d17===this[_0x5b3eba(0x6d7)]()&&this[_0x5b3eba(0x355)]()&&(this[_0x5b3eba(0xa06)]=![]);if(!this[_0x5b3eba(0x7a1)]&&!this[_0x5b3eba(0x895)]&&SceneManager['isSceneBattle']()){if(_0x5b3eba(0x3f3)!=='ATkqK')return _0x47ab8d[_0x5b3eba(0x95b)][_0x5b3eba(0x928)][_0x5b3eba(0x304)][_0x5b3eba(0x704)];else this['requestMotionRefresh']();}},VisuMZ[_0x10ff30(0x95b)]['Game_Action_clear']=Game_Action[_0x10ff30(0xb0c)]['clear'],Game_Action[_0x10ff30(0xb0c)]['clear']=function(){const _0x444e1e=_0x10ff30;VisuMZ[_0x444e1e(0x95b)][_0x444e1e(0x3b3)]['call'](this),this[_0x444e1e(0x267)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x444e1e(0xa4a)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x444e1e(0x6f5)]=_0x444e1e(0x281);},Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0xc0b)]=function(_0x40cefc,_0x5e32da){const _0x1919d6=_0x10ff30;return VisuMZ[_0x1919d6(0x95b)][_0x1919d6(0x928)]['Damage'][_0x1919d6(0xbb4)][_0x1919d6(0xb96)](this,_0x40cefc,_0x5e32da);},Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x4ff)]=function(_0x457fcb,_0x3c6a63){const _0x47ebc6=_0x10ff30;return VisuMZ[_0x47ebc6(0x95b)][_0x47ebc6(0x928)][_0x47ebc6(0x9f9)][_0x47ebc6(0x2e3)]['call'](this,_0x457fcb,_0x3c6a63);},Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0xb61)]=function(_0x50545e,_0x55d685){const _0x30200b=_0x10ff30;return VisuMZ[_0x30200b(0x95b)]['Settings']['Damage'][_0x30200b(0xc2a)][_0x30200b(0xb96)](this,_0x50545e,_0x55d685);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x5d6)]=Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x93c)],Game_Action['prototype'][_0x10ff30(0x93c)]=function(_0x1c9731){const _0x2f1709=_0x10ff30,_0x57b3af=this['item']()[_0x2f1709(0x7ed)];if(_0x57b3af[_0x2f1709(0x22f)](/<ALWAYS HIT>/i)){if(_0x2f1709(0x277)==='mWvXh')_0x27846f[_0x2f1709(0x2bf)](_0x559373,_0x26c2d6,_0x1b4593,_0x5bd9ce,_0x281474,-0x1),this['callNextMethod']();else return 0x1;}else{if(_0x57b3af['match'](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x4bdb=VisuMZ[_0x2f1709(0x95b)][_0x2f1709(0x5d6)][_0x2f1709(0xb96)](this,_0x1c9731);return _0x4bdb=this[_0x2f1709(0xa4a)][_0x2f1709(0xb1a)]*_0x4bdb+this[_0x2f1709(0xa4a)][_0x2f1709(0x797)],_0x4bdb;}}},Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x453)]=function(_0x15301d){const _0x2f5c27=_0x10ff30;if(!this[_0x2f5c27(0x5c4)]()[_0x2f5c27(0xb64)][_0x2f5c27(0x829)])return 0x0;let _0x16f5ac=VisuMZ[_0x2f5c27(0x95b)][_0x2f5c27(0x928)]['Damage']['CriticalHitRateJS'][_0x2f5c27(0xb96)](this,_0x15301d);return _0x16f5ac=this[_0x2f5c27(0xa4a)][_0x2f5c27(0x94f)]*_0x16f5ac+this[_0x2f5c27(0xa4a)][_0x2f5c27(0x27b)],_0x16f5ac;},Game_Action['prototype'][_0x10ff30(0x5c1)]=function(_0x4375ce){const _0xc2568a=_0x10ff30;return _0x4375ce=VisuMZ[_0xc2568a(0x95b)][_0xc2568a(0x928)][_0xc2568a(0x9f9)][_0xc2568a(0x897)][_0xc2568a(0xb96)](this,_0x4375ce),_0x4375ce=this['_multipliers'][_0xc2568a(0xc8f)]*_0x4375ce+this[_0xc2568a(0xa4a)]['criticalDmgFlat'],_0x4375ce;},VisuMZ[_0x10ff30(0x95b)]['Game_Action_evalDamageFormula']=Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x7ae)],Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x7ae)]=function(_0x4aa24d){const _0x21ed6d=_0x10ff30;if(this[_0x21ed6d(0x6f5)]!==_0x21ed6d(0x281)){if('qulDe'!=='Lyeih')return this[_0x21ed6d(0x60c)](_0x4aa24d);else this[_0x21ed6d(0x430)](_0x21ed6d(0xb44));}else{if(DataManager['getDamageStyle'](this[_0x21ed6d(0x5c4)]())===_0x21ed6d(0x85d))return _0x21ed6d(0xb76)==='uzbMH'?_0x56c782[_0x21ed6d(0x967)]:VisuMZ['BattleCore'][_0x21ed6d(0x6ec)]['call'](this,_0x4aa24d);else{if('DmaYQ'!=='XJVZS')return this[_0x21ed6d(0x2ca)](_0x4aa24d);else this[_0x21ed6d(0x6ca)]['bitmap']=_0x49d861[_0x21ed6d(0x966)](_0x261341),this[_0x21ed6d(0x6ca)]['bitmap'][_0x21ed6d(0x2ff)](this[_0x21ed6d(0x498)][_0x21ed6d(0x973)](this));}}},Game_Action['prototype'][_0x10ff30(0x9d3)]=function(_0x4ce749){const _0xa15ea8=_0x10ff30;this[_0xa15ea8(0x6f5)]=_0x4ce749;},Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x60c)]=function(_0xf6b068){const _0x3de50d=_0x10ff30,_0x2993bb=this['item'](),_0x5c00ea=_0x2993bb[_0x3de50d(0xb64)][_0x3de50d(0xbcf)];_0x2993bb[_0x3de50d(0xb64)][_0x3de50d(0xbcf)]=this[_0x3de50d(0x6f5)];let _0x2c0aec=VisuMZ['BattleCore'][_0x3de50d(0x6ec)][_0x3de50d(0xb96)](this,_0xf6b068);return _0x2993bb[_0x3de50d(0xb64)][_0x3de50d(0xbcf)]=_0x5c00ea,_0x2c0aec;},Game_Action['prototype'][_0x10ff30(0xa78)]=function(){const _0x35433b=_0x10ff30;if(this[_0x35433b(0x5c4)]()['note'][_0x35433b(0x22f)](/<DAMAGE STYLE:[ ](.*)>/i)){if(_0x35433b(0xaad)===_0x35433b(0x919)){const _0x5d6ff8=_0x4c6d4f[_0x35433b(0x9fe)](),_0x5c5ae3=_0x5d6ff8[_0x35433b(0x843)]();if(_0x5c5ae3)_0x5c5ae3[_0x35433b(0x2c2)]();const _0x49eafb=_0x54efed[_0x35433b(0xc07)]()[_0x35433b(0xb68)](_0x448c55=>_0x448c55[_0x35433b(0xc6e)]()&&_0x448c55[_0x35433b(0x5f7)]()),_0x3263e1=_0x49eafb['indexOf'](_0x5d6ff8),_0x3e081c=_0x49eafb[_0x3263e1+0x1];_0x15f315[_0x35433b(0xb12)]=_0x3e081c||null;if(_0x3e081c)_0x3e081c[_0x35433b(0xa64)](_0x35433b(0x362));_0x5d6ff8[_0x35433b(0xa64)](_0x35433b(0x584)),this[_0x35433b(0x8c6)]();}else{const _0x414143=String(RegExp['$1'])['toUpperCase']()[_0x35433b(0x6a3)]();return _0x414143;}}return'MANUAL';},Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x2ca)]=function(_0x3afea3){const _0x25f54b=_0x10ff30,_0x408d2e=DataManager[_0x25f54b(0x3e5)](this[_0x25f54b(0x5c4)]()),_0x42bc9a=VisuMZ[_0x25f54b(0x560)][_0x408d2e];try{return _0x42bc9a[_0x25f54b(0x40c)]['call'](this,_0x3afea3);}catch(_0x370640){if('rnHxV'===_0x25f54b(0x1f7)){if($gameTemp[_0x25f54b(0x21d)]())console[_0x25f54b(0x262)](_0x370640);return VisuMZ['BattleCore'][_0x25f54b(0x6ec)][_0x25f54b(0xb96)](this);}else this['_enemies']=this[_0x25f54b(0x4c3)](),this[_0x25f54b(0xc37)](),_0x2eec27[_0x25f54b(0xb0c)][_0x25f54b(0x219)]['call'](this);}},Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x4d0)]=function(_0x236c29,_0x19b8cc){const _0x397233=_0x10ff30;if(this['isCertainHit']())return _0x19b8cc;const _0x3281c2=this['subject'](),_0xb198cd=_0x236c29;let _0x1b481c=[],_0x1616c3=[];_0x1b481c[_0x397233(0x395)](this[_0x397233(0x267)][_0x397233(0x81a)],this[_0x397233(0x267)][_0x397233(0x3d7)]),_0x1616c3[_0x397233(0x395)](this['_armorPenetration'][_0x397233(0x729)],this[_0x397233(0x267)][_0x397233(0x95e)]);const _0x5456ac=this[_0x397233(0xb67)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x20d69=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x3127c3=this[_0x397233(0xb67)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x13ad05=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x1b481c=_0x1b481c[_0x397233(0xc68)](_0xb198cd[_0x397233(0x4ab)]()[_0x397233(0xad3)](_0x1fa0fc=>_0x1fa0fc&&_0x1fa0fc[_0x397233(0x7ed)][_0x397233(0x22f)](_0x5456ac)?Number(RegExp['$1']):0x0)),_0x1616c3=_0x1616c3[_0x397233(0xc68)](_0xb198cd[_0x397233(0x4ab)]()[_0x397233(0xad3)](_0x15e231=>_0x15e231&&_0x15e231[_0x397233(0x7ed)][_0x397233(0x22f)](_0x20d69)?Number(RegExp['$1'])/0x64:0x0)),_0x1b481c=_0x1b481c[_0x397233(0xc68)](_0x3281c2[_0x397233(0x4ab)]()[_0x397233(0xad3)](_0x101dc3=>_0x101dc3&&_0x101dc3[_0x397233(0x7ed)][_0x397233(0x22f)](_0x3127c3)?Number(RegExp['$1']):0x0)),_0x1616c3=_0x1616c3[_0x397233(0xc68)](_0x3281c2[_0x397233(0x4ab)]()[_0x397233(0xad3)](_0x196dec=>_0x196dec&&_0x196dec[_0x397233(0x7ed)]['match'](_0x13ad05)?Number(RegExp['$1'])/0x64:0x0)),this[_0x397233(0x5c4)]()[_0x397233(0x7ed)][_0x397233(0x22f)](_0x3127c3)&&_0x1b481c[_0x397233(0x395)](Number(RegExp['$1'])),this[_0x397233(0x5c4)]()[_0x397233(0x7ed)][_0x397233(0x22f)](_0x13ad05)&&_0x1616c3[_0x397233(0x395)](Number(RegExp['$1'])),_0x19b8cc=_0x1b481c[_0x397233(0x393)]((_0x16ab5a,_0xe74da4)=>_0x16ab5a-_0xe74da4,_0x19b8cc),_0x19b8cc>0x0&&(_0x397233(0x9b6)===_0x397233(0x5a7)?_0x27452d[_0x397233(0x427)][_0x397233(0x72a)]()[_0x397233(0xc08)](_0x8cfb49):_0x19b8cc=_0x1616c3[_0x397233(0x393)]((_0x4a69a3,_0x575880)=>_0x4a69a3*(0x1-_0x575880),_0x19b8cc)),_0x19b8cc;},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xa1e)]=Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x8a6)],Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x8a6)]=function(_0x535ee8,_0x21c51d){const _0x1a59dd=_0x10ff30;_0x21c51d=_0x21c51d*this[_0x1a59dd(0xa4a)][_0x1a59dd(0xb02)],_0x21c51d+=this[_0x1a59dd(0xa4a)]['damageFlat']*(_0x21c51d>=0x0?0x1:-0x1),_0x21c51d=this[_0x1a59dd(0xa1b)]('PreDamage%1JS',_0x535ee8,_0x21c51d,![]),_0x21c51d=this[_0x1a59dd(0x5ca)](_0x21c51d),_0x21c51d=Math[_0x1a59dd(0x556)](_0x21c51d),this[_0x1a59dd(0x691)]=_0x21c51d,this[_0x1a59dd(0x6bc)]=this[_0x1a59dd(0x6bc)]||0x0,this[_0x1a59dd(0x6bc)]+=_0x21c51d,VisuMZ[_0x1a59dd(0x95b)]['Game_Action_executeDamage'][_0x1a59dd(0xb96)](this,_0x535ee8,_0x21c51d),this[_0x1a59dd(0xa1b)](_0x1a59dd(0xc6d),_0x535ee8,_0x21c51d,!![]);},Game_Action['prototype'][_0x10ff30(0x5ca)]=function(_0x3d354f){const _0x2538c9=_0x10ff30;if(this[_0x2538c9(0x31e)]())return _0x3d354f;return _0x3d354f=this[_0x2538c9(0x20d)](_0x3d354f),_0x3d354f=this[_0x2538c9(0x249)](_0x3d354f),_0x3d354f;},Game_Action[_0x10ff30(0xb0c)]['isBypassDamageCap']=function(){const _0x4045dc=_0x10ff30,_0x1a0a91=/<BYPASS DAMAGE CAP>/i;if(this[_0x4045dc(0x5c4)]()['note']['match'](_0x1a0a91))return!![];if(this[_0x4045dc(0x906)]()[_0x4045dc(0x4ab)]()['some'](_0x596e2a=>_0x596e2a&&_0x596e2a[_0x4045dc(0x7ed)][_0x4045dc(0x22f)](_0x1a0a91)))return!![];return!VisuMZ[_0x4045dc(0x95b)][_0x4045dc(0x928)][_0x4045dc(0x9f9)][_0x4045dc(0xc1a)];},Game_Action[_0x10ff30(0xb0c)]['applySoftDamageCap']=function(_0x501624){const _0x1e23f0=_0x10ff30;if(!VisuMZ['BattleCore'][_0x1e23f0(0x928)][_0x1e23f0(0x9f9)][_0x1e23f0(0x933)])return _0x501624;const _0x15ed28=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x1e23f0(0x5c4)]()['note'][_0x1e23f0(0x22f)](_0x15ed28))return _0x501624;if(this[_0x1e23f0(0x906)]()[_0x1e23f0(0x4ab)]()[_0x1e23f0(0xb58)](_0x55b6f2=>_0x55b6f2&&_0x55b6f2[_0x1e23f0(0x7ed)]['match'](_0x15ed28))){if(_0x1e23f0(0x38d)===_0x1e23f0(0x38d))return _0x501624;else{if(_0x32149e===_0x45e16f[_0x1e23f0(0x6d7)]()){let _0x1299d8=_0x3b8415[_0x1e23f0(0x997)];_0x1299d8*=_0x6f151b[_0x1e23f0(0x814)](_0x11b7b1),_0x1299d8*=this['subject']()[_0x1e23f0(0x734)](_0x411962),_0x1299d8*=this[_0x1e23f0(0x680)](_0x3b85f6),_0x13d057[_0x1e23f0(0x2b6)]()<_0x1299d8&&(_0xfd374[_0x1e23f0(0x4ac)]=!![],this[_0x1e23f0(0x6e6)](_0x336604));}}}const _0x135f3e=_0x501624<0x0?-0x1:0x1;_0x501624=Math[_0x1e23f0(0x614)](_0x501624);let _0x254f7c=this[_0x1e23f0(0x906)]()[_0x1e23f0(0x7c2)]();this['item']()[_0x1e23f0(0x7ed)][_0x1e23f0(0x22f)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x254f7c+=Number(RegExp['$1'])/0x64);_0x254f7c=_0x254f7c[_0x1e23f0(0xbf0)](0.01,0x1);const _0xa661e3=this['getHardDamageCap'](),_0x1726e0=_0x254f7c*_0xa661e3;if(_0x501624>_0x1726e0&&_0xa661e3>_0x1726e0){if('SdDYZ'!==_0x1e23f0(0x302))return _0x26de0e;else{_0x501624-=_0x1726e0;const _0x9ca39b=VisuMZ['BattleCore'][_0x1e23f0(0x928)][_0x1e23f0(0x9f9)][_0x1e23f0(0x221)],_0x831709=Math[_0x1e23f0(0x909)](0x1-_0x501624/((_0xa661e3-_0x1726e0)*_0x9ca39b+_0x501624),0.01);_0x501624*=_0x831709,_0x501624+=_0x1726e0;}}return _0x501624*_0x135f3e;},Game_Action['prototype'][_0x10ff30(0x2bc)]=function(){const _0x511b97=_0x10ff30;if(this[_0x511b97(0x5c4)]()[_0x511b97(0x7ed)][_0x511b97(0x22f)](/<DAMAGE CAP:[ ](\d+)>/i))return Number(RegExp['$1']);else{if('HgPlu'!=='HgPlu')delete _0x19799a[_0x511b97(0x350)][_0x511b97(0x535)];else return this[_0x511b97(0x906)]()[_0x511b97(0x2fa)]();}},Game_Action['prototype'][_0x10ff30(0x249)]=function(_0x3ae09c){const _0x5092d7=_0x10ff30;console[_0x5092d7(0x262)](_0x3ae09c);let _0x5dd81a=this[_0x5092d7(0x2bc)]();return _0x3ae09c['clamp'](-_0x5dd81a,_0x5dd81a);},VisuMZ['BattleCore'][_0x10ff30(0x86b)]=Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x299)],Game_Action[_0x10ff30(0xb0c)]['apply']=function(_0x125093){const _0x4915d2=_0x10ff30;this[_0x4915d2(0xa1b)](_0x4915d2(0x37b),_0x125093,0x0,!![]),VisuMZ[_0x4915d2(0x95b)]['Game_Action_apply']['call'](this,_0x125093),this['applyBattleCoreJS'](_0x4915d2(0x490),_0x125093,this['_executedValue']||0x0,!![]),this[_0x4915d2(0x25f)](_0x125093);},Game_Action['prototype'][_0x10ff30(0xa1b)]=function(_0x1bd394,_0x7f4d7,_0x3b7d51,_0x308538){const _0xc0cc16=_0x10ff30;if(this[_0xc0cc16(0x895)]||this[_0xc0cc16(0x7a1)])return;_0x3b7d51=_0x3b7d51||0x0;const _0x304e0b=_0x3b7d51,_0xacc47=VisuMZ[_0xc0cc16(0x95b)]['Settings']['Mechanics'],_0x32d4bf=_0x1bd394['format']('');if(_0xacc47[_0x32d4bf]){if('ZTTBT'==='qHkLI')this['drawTextEx'](_0x1c5e89,_0x81a246['x'],_0x4addd3['y'],_0x354071);else{_0x3b7d51=_0xacc47[_0x32d4bf][_0xc0cc16(0xb96)](this,_0x3b7d51,_0x7f4d7);if(_0x308538)_0x3b7d51=_0x304e0b;}}let _0x557f9d=VisuMZ[_0xc0cc16(0x95b)]['createKeyJS'](this['item'](),_0x1bd394[_0xc0cc16(0x958)](''));if(VisuMZ['BattleCore']['JS'][_0x557f9d]){_0x3b7d51=VisuMZ[_0xc0cc16(0x95b)]['JS'][_0x557f9d][_0xc0cc16(0xb96)](this,this['subject'](),_0x7f4d7,this[_0xc0cc16(0x5c4)](),_0x3b7d51);if(_0x308538)_0x3b7d51=_0x304e0b;}for(const _0x3065ae of this[_0xc0cc16(0x906)]()[_0xc0cc16(0x4ab)]()){if(!_0x3065ae)continue;_0x557f9d=VisuMZ['BattleCore']['createKeyJS'](_0x3065ae,_0x1bd394['format'](_0xc0cc16(0xae3)));if(VisuMZ['BattleCore']['JS'][_0x557f9d]){if('XuRwN'===_0xc0cc16(0x263)){if(!_0x61f0a2[_0xc0cc16(0xc1e)]())return;if(!_0x4269c4[_0xc0cc16(0x6b7)])return;if(!_0xa4f394[_0xc0cc16(0x6d0)]())return;_0x31918a[_0xc0cc16(0xb1e)](_0x5260b5,_0xd7af0b);const _0x59ee4c=_0x40a7e0['ActionCount'];_0x571d45[_0xc0cc16(0x427)]&&_0x2e86ee[_0xc0cc16(0x427)][_0xc0cc16(0x72a)]()[_0xc0cc16(0x9f2)](_0x59ee4c);}else{_0x3b7d51=VisuMZ[_0xc0cc16(0x95b)]['JS'][_0x557f9d][_0xc0cc16(0xb96)](this,this[_0xc0cc16(0x906)](),_0x7f4d7,_0x3065ae,_0x3b7d51);if(_0x308538)_0x3b7d51=_0x304e0b;}}}for(const _0x1bb078 of _0x7f4d7['traitObjects']()){if(_0xc0cc16(0x510)!==_0xc0cc16(0x510)){const _0x3a486b=_0xa443c2(_0x58ad98['$1'])['split'](/[\r\n]+/)[_0xc0cc16(0xc04)]('');_0x4cb3a0['name']=_0x50b257[_0xc0cc16(0xa2b)](_0x3a486b);}else{if(!_0x1bb078)continue;_0x557f9d=VisuMZ['BattleCore'][_0xc0cc16(0x613)](_0x1bb078,_0x1bd394[_0xc0cc16(0x958)](_0xc0cc16(0x586)));if(VisuMZ[_0xc0cc16(0x95b)]['JS'][_0x557f9d]){_0x3b7d51=VisuMZ['BattleCore']['JS'][_0x557f9d][_0xc0cc16(0xb96)](this,this[_0xc0cc16(0x906)](),_0x7f4d7,_0x1bb078,_0x3b7d51);if(_0x308538)_0x3b7d51=_0x304e0b;}}}return _0x3b7d51;},Game_Action['prototype'][_0x10ff30(0x530)]=function(_0x547ba5){const _0x96bc0b=_0x10ff30,_0x232f34=this[_0x96bc0b(0x6bc)]||0x0,_0x1a3a5d=VisuMZ[_0x96bc0b(0x95b)][_0x96bc0b(0x928)][_0x96bc0b(0x64d)],_0xbf5718=_0x547ba5[_0x96bc0b(0x958)]('');if(_0x1a3a5d[_0xbf5718]){if(_0x96bc0b(0xb16)!==_0x96bc0b(0xb16))return this[_0x96bc0b(0x8db)]()[_0x96bc0b(0x6eb)];else _0x1a3a5d[_0xbf5718][_0x96bc0b(0xb96)](this,_0x232f34);}let _0x3cc851=VisuMZ[_0x96bc0b(0x95b)][_0x96bc0b(0x613)](this[_0x96bc0b(0x5c4)](),_0x547ba5);if(VisuMZ[_0x96bc0b(0x95b)]['JS'][_0x3cc851]){if(_0x96bc0b(0xc92)!==_0x96bc0b(0x273))VisuMZ[_0x96bc0b(0x95b)]['JS'][_0x3cc851][_0x96bc0b(0xb96)](this,this[_0x96bc0b(0x906)](),this[_0x96bc0b(0x906)](),this[_0x96bc0b(0x5c4)](),_0x232f34);else return _0x33bee4[_0x96bc0b(0x95b)]['Settings'][_0x96bc0b(0x5f4)][_0x96bc0b(0x2f1)]['call'](this);}for(const _0x5884b1 of this[_0x96bc0b(0x906)]()[_0x96bc0b(0x4ab)]()){if(!_0x5884b1)continue;_0x3cc851=VisuMZ[_0x96bc0b(0x95b)]['createKeyJS'](_0x5884b1,_0x547ba5),VisuMZ[_0x96bc0b(0x95b)]['JS'][_0x3cc851]&&VisuMZ[_0x96bc0b(0x95b)]['JS'][_0x3cc851][_0x96bc0b(0xb96)](this,this[_0x96bc0b(0x906)](),this[_0x96bc0b(0x906)](),_0x5884b1,_0x232f34);}},Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x682)]=function(){const _0x15a676=_0x10ff30;return VisuMZ[_0x15a676(0x95b)][_0x15a676(0x928)]['Mechanics'][_0x15a676(0x80a)][_0x15a676(0xb96)](this);},Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x42a)]=function(){const _0x352e13=_0x10ff30;return VisuMZ[_0x352e13(0x95b)]['Settings'][_0x352e13(0x64d)][_0x352e13(0x426)];},Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0xb0d)]=function(){const _0x33233f=_0x10ff30;return this[_0x33233f(0x5c4)]()['note']['match'](/<JS TARGETS>/i);},Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x836)]=function(){const _0x23ef21=_0x10ff30;if(!this['_forcing']&&this['subject']()['isConfused']())return![];if(this[_0x23ef21(0xb0d)]())return!![];return typeof this[_0x23ef21(0x5c4)]()['scope']===_0x23ef21(0x1fb);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xc8d)]=Game_Action['prototype'][_0x10ff30(0x482)],Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x482)]=function(){const _0xf2c481=_0x10ff30;if(this[_0xf2c481(0x836)]()&&!this['isCustomBattleScope']()){if(_0xf2c481(0xc2e)===_0xf2c481(0xc97))this[_0xf2c481(0x35f)]();else return this[_0xf2c481(0xca2)]();}else return VisuMZ[_0xf2c481(0x95b)]['Game_Action_isForOpponent'][_0xf2c481(0xb96)](this);},Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0xca2)]=function(){const _0x5bc55a=_0x10ff30,_0x1fb0c4=this[_0x5bc55a(0x5c4)]()[_0x5bc55a(0xb0e)];return _0x1fb0c4[_0x5bc55a(0x22f)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x10ff30(0x95b)]['Game_Action_isForFriend']=Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0xbea)],Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0xbea)]=function(){const _0x420346=_0x10ff30;return this[_0x420346(0x836)]()&&!this[_0x420346(0xb0d)]()?this['isForFriendBattleCore']():VisuMZ['BattleCore'][_0x420346(0xbfa)][_0x420346(0xb96)](this);},Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x626)]=function(){const _0x13f937=_0x10ff30,_0x2c60d8=this['item']()[_0x13f937(0xb0e)];return _0x2c60d8[_0x13f937(0x22f)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xabb)]=Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x804)],Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x804)]=function(){const _0x488e2b=_0x10ff30;if(this[_0x488e2b(0x836)]()&&!this[_0x488e2b(0xb0d)]())return this['isForRandomBattleCore']();else{if('XLnFB'===_0x488e2b(0x552))return VisuMZ[_0x488e2b(0x95b)][_0x488e2b(0xabb)][_0x488e2b(0xb96)](this);else _0x1aefd4['scope']=_0x500509(_0x2abc4a['$1'])['toUpperCase']()[_0x488e2b(0x6a3)]();}},Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x36b)]=function(){const _0x10972e=_0x10ff30,_0xeeea1a=this['item']()[_0x10972e(0xb0e)];return _0xeeea1a[_0x10972e(0x22f)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xc1c)]=Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x336)],Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x336)]=function(){const _0x461dad=_0x10ff30;if(this[_0x461dad(0x836)]()&&!this[_0x461dad(0xb0d)]())return this['needsSelectionBattleCore']();else{if('LpKLH'!=='GKjci')return VisuMZ[_0x461dad(0x95b)]['Game_Action_needsSelection'][_0x461dad(0xb96)](this);else{const _0x4ee534=_0x46bd91[_0x461dad(0x5c4)]();this['push'](_0x461dad(0x1e1),_0x15bd38,_0xd8cdc,![]),this[_0x461dad(0x395)](_0x461dad(0xb56)),this[_0x461dad(0x395)]('waitForEffect'),this[_0x461dad(0x395)](_0x461dad(0xb10)),this[_0x461dad(0x395)]('performActionEnd',_0xa66fd),this[_0x461dad(0x395)](_0x461dad(0x713));}}},Game_Action['prototype']['needsSelectionBattleCore']=function(){const _0x24b10e=_0x10ff30,_0x5bbbab=this[_0x24b10e(0x5c4)]()[_0x24b10e(0xb0e)];if(_0x5bbbab[_0x24b10e(0x22f)](/RANDOM/i))return![];if(_0x5bbbab[_0x24b10e(0x22f)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x5bbbab[_0x24b10e(0x22f)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ[_0x24b10e(0x95b)][_0x24b10e(0xc1c)][_0x24b10e(0xb96)](this);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x5e9)]=Game_Action['prototype'][_0x10ff30(0x851)],Game_Action[_0x10ff30(0xb0c)]['makeTargets']=function(){const _0x4c926a=_0x10ff30;let _0x411001=[];return this[_0x4c926a(0x836)]()?_0x411001=this[_0x4c926a(0x6ea)]():_0x411001=VisuMZ[_0x4c926a(0x95b)]['Game_Action_makeTargets'][_0x4c926a(0xb96)](this),_0x411001=this['applyTargetFilters'](_0x411001),_0x411001;},Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x6ea)]=function(){const _0x30f077=_0x10ff30;let _0x3021d9=[];const _0x4a9f4e=String(this[_0x30f077(0x5c4)]()[_0x30f077(0xb0e)]),_0x12f485=VisuMZ['BattleCore']['createKeyJS'](this['item'](),_0x30f077(0xa62));if(VisuMZ[_0x30f077(0x95b)]['JS'][_0x12f485]){_0x3021d9=VisuMZ[_0x30f077(0x95b)]['Game_Action_makeTargets'][_0x30f077(0xb96)](this);const _0x4b4b71=VisuMZ[_0x30f077(0x95b)][_0x30f077(0x613)](this[_0x30f077(0x5c4)](),_0x30f077(0xa62));return _0x3021d9=VisuMZ[_0x30f077(0x95b)]['JS'][_0x4b4b71]['call'](this,this[_0x30f077(0x906)](),_0x3021d9),this[_0x30f077(0x425)](_0x3021d9);}if(_0x4a9f4e[_0x30f077(0x22f)](/(\d+) RANDOM ANY/i)){if(_0x30f077(0x1dd)==='POpDG'){let _0x3085f3=Number(RegExp['$1']);while(_0x3085f3--){const _0x41fcf8=Math[_0x30f077(0x8c1)](0x2)===0x0?this['opponentsUnit']():this[_0x30f077(0x72a)]();_0x3021d9[_0x30f077(0x395)](_0x41fcf8[_0x30f077(0x7d3)]());}return this['repeatTargets'](_0x3021d9);}else _0x25f44e=this[_0x30f077(0x2d1)][this['_baseLineStack'][_0x30f077(0x449)]-0x1];}if(_0x4a9f4e[_0x30f077(0x22f)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x52deeb=Number(RegExp['$1']);while(_0x52deeb--){if(_0x30f077(0xc64)!==_0x30f077(0xc64))return this[_0x30f077(0xb09)];else _0x3021d9['push'](this[_0x30f077(0x3df)]()['trueRandomTarget']());}return this['repeatTargets'](_0x3021d9);}if(_0x4a9f4e['match'](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){if('WPnVE'!==_0x30f077(0x6e3))this[_0x30f077(0x6c5)](),this[_0x30f077(0x85c)]();else{let _0x3890c0=Number(RegExp['$1']);while(_0x3890c0--){if(_0x30f077(0x960)==='hbpLP')_0x3021d9['push'](this[_0x30f077(0x72a)]()['trueRandomTarget']());else{const _0x24bc6a=_0x140cfd[_0x30f077(0xb03)]()[_0x55a1b8],_0x20c276=new _0x35305d();_0x20c276[_0x30f077(0x79a)](_0x24bc6a),_0x20c276['setBattler'](_0x24bc6a),_0x20c276['update'](),this[_0x30f077(0x58d)][_0x30f077(0x395)](_0x20c276),this[_0x30f077(0x5da)][_0x30f077(0x440)](_0x20c276);}}return this['repeatTargets'](_0x3021d9);}}if(_0x4a9f4e[_0x30f077(0x22f)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x3021d9[_0x30f077(0x395)](...this[_0x30f077(0x72a)]()['aliveMembers']()[_0x30f077(0xb68)](_0x3b6e38=>_0x3b6e38!==this[_0x30f077(0x906)]())),this[_0x30f077(0x425)](_0x3021d9);return VisuMZ[_0x30f077(0x95b)][_0x30f077(0x5e9)]['call'](this);},Game_Action[_0x10ff30(0xb0c)]['randomTargets']=function(_0x5a2be1){const _0x9e2db6=_0x10ff30,_0x15a0d5=[];for(let _0xfe8475=0x0;_0xfe8475<this[_0x9e2db6(0x416)]();_0xfe8475++){if(_0x9e2db6(0x9ad)==='ZaXhI'){const _0x270a92=_0x6e3bca[_0x9e2db6(0x7ed)];if(_0x270a92[_0x9e2db6(0x22f)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x481730=_0x1654bf(_0x42d979['$1']),_0x2ef778=_0x3b55f7[_0x9e2db6(0x95b)][_0x9e2db6(0x613)](_0x3b19f5,'Targets');_0x1bfce6[_0x9e2db6(0x95b)]['createTargetsJS'](_0x481730,_0x2ef778);}if(_0x270a92[_0x9e2db6(0x22f)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x2713cd=_0x9612ce(_0x5e0116['$1']),_0x33c58e=_0x47f49d[_0x9e2db6(0x95b)][_0x9e2db6(0x613)](_0x2364dd,_0x9e2db6(0x7cd));_0xd388e2[_0x9e2db6(0x95b)]['createCommandVisibleJS'](_0x2713cd,_0x33c58e);}}else _0x15a0d5[_0x9e2db6(0x395)](_0x5a2be1[_0x9e2db6(0x7d3)]());}return _0x15a0d5;},Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x2fe)]=function(_0x23fa31){const _0x535d4a=_0x10ff30;if(!this[_0x535d4a(0x5c4)]())return _0x23fa31;const _0x464b10=this[_0x535d4a(0x5c4)]()[_0x535d4a(0x7ed)];return _0x464b10[_0x535d4a(0x22f)](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&(_0x535d4a(0x61a)===_0x535d4a(0x61a)?_0x23fa31[_0x535d4a(0xc04)](this[_0x535d4a(0x906)]()):_0x19842c[_0x535d4a(0x357)](_0x278853,_0x5b2605)),_0x23fa31;},VisuMZ['BattleCore'][_0x10ff30(0x8c8)]=Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x748)],Game_Action[_0x10ff30(0xb0c)]['itemEffectAddAttackState']=function(_0xd2897,_0x2cdae9){const _0x102712=_0x10ff30;VisuMZ[_0x102712(0x95b)][_0x102712(0x8c8)]['call'](this,_0xd2897,_0x2cdae9);if(!_0xd2897[_0x102712(0x3f4)]())return;for(const _0x1050d0 of this[_0x102712(0x906)]()[_0x102712(0x1fe)]()){if(_0x1050d0===_0xd2897['deathStateId']()){let _0x500aae=_0x2cdae9[_0x102712(0x997)];_0x500aae*=_0xd2897[_0x102712(0x814)](_0x1050d0),_0x500aae*=this[_0x102712(0x906)]()['attackStatesRate'](_0x1050d0),_0x500aae*=this['lukEffectRate'](_0xd2897),Math[_0x102712(0x2b6)]()<_0x500aae&&(_0xd2897[_0x102712(0x4ac)]=!![],this['makeSuccess'](_0xd2897));}}},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x442)]=Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x696)],Game_Action['prototype'][_0x10ff30(0x696)]=function(_0x5decf9,_0x400c9b){const _0x3cda78=_0x10ff30;VisuMZ[_0x3cda78(0x95b)]['Game_Action_itemEffectAddNormalState'][_0x3cda78(0xb96)](this,_0x5decf9,_0x400c9b);if(!_0x5decf9[_0x3cda78(0x3f4)]())return;if(_0x400c9b[_0x3cda78(0x605)]!==_0x5decf9[_0x3cda78(0x6d7)]())return;let _0x1ffa3f=_0x400c9b[_0x3cda78(0x997)];!this[_0x3cda78(0x7aa)]()&&(_0x1ffa3f*=_0x5decf9['stateRate'](_0x400c9b['dataId']),_0x1ffa3f*=this[_0x3cda78(0x680)](_0x5decf9)),Math[_0x3cda78(0x2b6)]()<_0x1ffa3f&&(_0x5decf9[_0x3cda78(0x4ac)]=!![],this[_0x3cda78(0x6e6)](_0x5decf9));},VisuMZ['BattleCore'][_0x10ff30(0x6a9)]=Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x2ee)],Game_Action[_0x10ff30(0xb0c)]['applyGlobal']=function(){const _0x5d9273=_0x10ff30;VisuMZ[_0x5d9273(0x95b)][_0x5d9273(0x6a9)][_0x5d9273(0xb96)](this),this[_0x5d9273(0x373)](),this[_0x5d9273(0x424)]();},Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x373)]=function(){const _0x30eb7d=_0x10ff30;if(!SceneManager[_0x30eb7d(0xc1e)]())return;const _0x1c44b0=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x181c77=this[_0x30eb7d(0x5c4)]()[_0x30eb7d(0x7ed)][_0x30eb7d(0x22f)](_0x1c44b0);if(_0x181c77){if(_0x30eb7d(0xaee)!=='sJKeg')for(const _0x5e5549 of _0x181c77){if(_0x30eb7d(0x59e)===_0x30eb7d(0x39d))this[_0x30eb7d(0x7cc)]['visible']=![];else{if(!_0x5e5549)continue;_0x5e5549[_0x30eb7d(0x22f)](_0x1c44b0);const _0x1c8f20=String(RegExp['$1'])[_0x30eb7d(0x5f0)](',')['map'](_0x59272a=>String(_0x59272a)[_0x30eb7d(0x6a3)]()),_0x17bfe1=_0x1c8f20[_0x30eb7d(0xad3)](_0x38db96=>DataManager[_0x30eb7d(0x741)](_0x38db96));for(const _0x4dc3d3 of _0x17bfe1){const _0x4bd546=$dataCommonEvents[_0x4dc3d3];_0x4bd546&&$gameTemp[_0x30eb7d(0x57c)](_0x4dc3d3);}}}else{for(const _0x200523 of _0x6c9c6a){_0x200523[_0x30eb7d(0x22f)](_0x34cd2c);const _0x53acd7=_0x4086c7(_0x2b6eac['$1'])[_0x30eb7d(0x5f0)](',')[_0x30eb7d(0xad3)](_0x225c40=>_0x4ea5fa(_0x225c40)[_0x30eb7d(0x9d9)]()[_0x30eb7d(0x6a3)]());_0x55ba20=_0x19ddfc['concat'](_0x53acd7);}!_0x4eaf4a[_0x30eb7d(0x7ed)][_0x30eb7d(0x22f)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x50f35f['note']+=_0x30eb7d(0xb5f));;}}},DataManager[_0x10ff30(0x741)]=function(_0x10e2e3){const _0x3e863a=_0x10ff30;_0x10e2e3=_0x10e2e3[_0x3e863a(0x9d9)]()[_0x3e863a(0x6a3)](),this['_commonEventIDs']=this[_0x3e863a(0x7a2)]||{};if(this[_0x3e863a(0x7a2)][_0x10e2e3])return this[_0x3e863a(0x7a2)][_0x10e2e3];for(const _0x1e1a85 of $dataCommonEvents){if(!_0x1e1a85)continue;let _0x380e8a=_0x1e1a85[_0x3e863a(0x52f)];_0x380e8a=_0x380e8a[_0x3e863a(0x319)](/\x1I\[(\d+)\]/gi,''),_0x380e8a=_0x380e8a[_0x3e863a(0x319)](/\\I\[(\d+)\]/gi,''),this[_0x3e863a(0x7a2)][_0x380e8a['toUpperCase']()[_0x3e863a(0x6a3)]()]=_0x1e1a85['id'];}return this['_commonEventIDs'][_0x10e2e3]||0x0;},Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x424)]=function(){const _0x20445b=_0x10ff30;if(!SceneManager[_0x20445b(0xc1e)]())return;const _0x8c104b=VisuMZ[_0x20445b(0x95b)][_0x20445b(0x928)][_0x20445b(0x64d)];_0x8c104b['SwitchCritical']&&$gameSwitches[_0x20445b(0x6b9)](_0x8c104b[_0x20445b(0x1cf)],![]);if(_0x8c104b['SwitchMissEvade']){if('GwAyX'!=='GwAyX')return this[_0x20445b(0x329)]>0x0;else $gameSwitches[_0x20445b(0x6b9)](_0x8c104b['SwitchMissEvade'],![]);}_0x8c104b[_0x20445b(0x62e)]&&(_0x20445b(0x438)===_0x20445b(0x438)?$gameVariables['setValue'](_0x8c104b[_0x20445b(0x62e)],0x0):this['addWeaponSwapCommand'](!![])),_0x8c104b['VariableHeal']&&$gameVariables[_0x20445b(0x6b9)](_0x8c104b[_0x20445b(0x21c)],0x0);},Game_Action[_0x10ff30(0xb0c)]['applyResultSwitches']=function(_0x329ebf){const _0x1270ed=_0x10ff30;if(!SceneManager[_0x1270ed(0xc1e)]())return;if(!_0x329ebf)return;const _0x46eadb=_0x329ebf[_0x1270ed(0xc81)](),_0x36f433=VisuMZ[_0x1270ed(0x95b)][_0x1270ed(0x928)][_0x1270ed(0x64d)];_0x36f433[_0x1270ed(0x1cf)]&&_0x46eadb[_0x1270ed(0x829)]&&$gameSwitches[_0x1270ed(0x6b9)](_0x36f433[_0x1270ed(0x1cf)],!![]);_0x36f433[_0x1270ed(0x943)]&&(_0x46eadb[_0x1270ed(0x3ad)]||_0x46eadb[_0x1270ed(0xcc3)])&&$gameSwitches[_0x1270ed(0x6b9)](_0x36f433['SwitchMissEvade'],!![]);if(_0x36f433[_0x1270ed(0x62e)]){let _0x5eeef5=$gameVariables['value'](_0x36f433[_0x1270ed(0x62e)]);_0x46eadb[_0x1270ed(0x2e4)]>0x0&&(_0x5eeef5+=Math[_0x1270ed(0x614)](_0x46eadb[_0x1270ed(0x2e4)])),$gameVariables['setValue'](_0x36f433[_0x1270ed(0x62e)],_0x5eeef5);}if(_0x36f433[_0x1270ed(0x21c)]){let _0x4a59c3=$gameVariables[_0x1270ed(0x640)](_0x36f433[_0x1270ed(0x21c)]);_0x46eadb[_0x1270ed(0x2e4)]<0x0&&(_0x4a59c3+=Math[_0x1270ed(0x614)](_0x46eadb[_0x1270ed(0x2e4)])),$gameVariables[_0x1270ed(0x6b9)](_0x36f433[_0x1270ed(0x21c)],_0x4a59c3);}},VisuMZ['BattleCore'][_0x10ff30(0x8a7)]=Game_BattlerBase[_0x10ff30(0xb0c)][_0x10ff30(0x6c8)],Game_BattlerBase[_0x10ff30(0xb0c)][_0x10ff30(0x6c8)]=function(){const _0x342139=_0x10ff30;VisuMZ[_0x342139(0x95b)][_0x342139(0x8a7)]['call'](this),this['initMembersBattleCore']();},Game_BattlerBase[_0x10ff30(0xb0c)][_0x10ff30(0x6e4)]=function(){const _0x31b563=_0x10ff30;this[_0x31b563(0xb09)]=![];},VisuMZ[_0x10ff30(0x95b)]['Game_BattlerBase_refresh']=Game_BattlerBase[_0x10ff30(0xb0c)][_0x10ff30(0x219)],Game_BattlerBase[_0x10ff30(0xb0c)]['refresh']=function(){const _0x3b4026=_0x10ff30;this[_0x3b4026(0x3f7)]={},VisuMZ[_0x3b4026(0x95b)][_0x3b4026(0x790)][_0x3b4026(0xb96)](this);},Game_BattlerBase[_0x10ff30(0xb0c)][_0x10ff30(0x46f)]=function(_0x45c72f){const _0x6dc6c3=_0x10ff30;return this[_0x6dc6c3(0x3f7)]=this[_0x6dc6c3(0x3f7)]||{},this[_0x6dc6c3(0x3f7)][_0x45c72f]!==undefined;},Game_BattlerBase[_0x10ff30(0xb0c)][_0x10ff30(0x2fa)]=function(){const _0x541012=_0x10ff30;if(this[_0x541012(0x3f7)][_0x541012(0x2fa)]!==undefined)return this[_0x541012(0x3f7)]['hardDamageCap'];const _0x2f470a=/<DAMAGE CAP:[ ](\d+)>/i,_0x5867be=this[_0x541012(0x4ab)]()[_0x541012(0xad3)](_0x154804=>_0x154804&&_0x154804[_0x541012(0x7ed)][_0x541012(0x22f)](_0x2f470a)?Number(RegExp['$1']):0x0);let _0x2d93eb=_0x5867be[_0x541012(0x449)]>0x0?Math[_0x541012(0x909)](..._0x5867be):0x0;if(_0x2d93eb<=0x0)_0x2d93eb=VisuMZ['BattleCore'][_0x541012(0x928)]['Damage'][_0x541012(0x55d)];return this[_0x541012(0x3f7)][_0x541012(0x2fa)]=_0x2d93eb,this[_0x541012(0x3f7)]['hardDamageCap'];},Game_BattlerBase[_0x10ff30(0xb0c)][_0x10ff30(0x7c2)]=function(){const _0x3a6306=_0x10ff30;if(this['_cache'][_0x3a6306(0x49a)]!==undefined)return this[_0x3a6306(0x3f7)]['softDamageCap'];let _0x297ae4=VisuMZ[_0x3a6306(0x95b)][_0x3a6306(0x928)][_0x3a6306(0x9f9)][_0x3a6306(0xaa5)];const _0x44f94a=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x30f8dc=this[_0x3a6306(0x4ab)]()['map'](_0x1611c2=>_0x1611c2&&_0x1611c2[_0x3a6306(0x7ed)][_0x3a6306(0x22f)](_0x44f94a)?Number(RegExp['$1'])/0x64:0x0);return _0x297ae4=_0x30f8dc[_0x3a6306(0x393)]((_0x6b9c95,_0x469765)=>_0x6b9c95+_0x469765,_0x297ae4),this['_cache']['softDamageCap']=_0x297ae4,this[_0x3a6306(0x3f7)][_0x3a6306(0x49a)][_0x3a6306(0xbf0)](0.01,0x1);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x24c)]=Game_BattlerBase[_0x10ff30(0xb0c)][_0x10ff30(0x5aa)],Game_BattlerBase[_0x10ff30(0xb0c)][_0x10ff30(0x5aa)]=function(){const _0x1cc774=_0x10ff30;VisuMZ['BattleCore'][_0x1cc774(0x24c)][_0x1cc774(0xb96)](this),SceneManager[_0x1cc774(0xc1e)]()&&this['requestMotion'](_0x1cc774(0x379));},Game_BattlerBase[_0x10ff30(0xb0c)]['battler']=function(){const _0x2ca3ed=_0x10ff30;if(!SceneManager[_0x2ca3ed(0xc1e)]())return null;if(!SceneManager[_0x2ca3ed(0x2df)][_0x2ca3ed(0x93a)])return null;return SceneManager[_0x2ca3ed(0x2df)][_0x2ca3ed(0x93a)]['findTargetSprite'](this);},Game_BattlerBase['prototype'][_0x10ff30(0x5fc)]=function(){const _0x28b67f=_0x10ff30;return VisuMZ['BattleCore'][_0x28b67f(0x928)]['Actor']['AnchorX'];},Game_BattlerBase[_0x10ff30(0xb0c)][_0x10ff30(0xbf8)]=function(){const _0x314b52=_0x10ff30;return VisuMZ[_0x314b52(0x95b)][_0x314b52(0x928)][_0x314b52(0x25e)][_0x314b52(0x575)];},Game_BattlerBase[_0x10ff30(0xb0c)][_0x10ff30(0xa7d)]=function(){const _0x5e37ad=_0x10ff30;if(this[_0x5e37ad(0x58a)]&&this[_0x5e37ad(0x58a)]()){if(_0x5e37ad(0x555)===_0x5e37ad(0x8b5)){_0x48ab4e[_0x5e37ad(0xb65)]();let _0x84ee08=_0x2f1bcd[_0x5e37ad(0x95b)][_0x5e37ad(0x928)]['ActionSequence'][_0x5e37ad(0xb3e)];_0x84ee08>0x0&&(_0x3bd51b[_0x5e37ad(0xa8d)]?_0x33e3b7[_0x5e37ad(0x8e0)]([this],_0x84ee08):_0x29cb02[_0x5e37ad(0x1e7)]([this],_0x84ee08));}else return VisuMZ[_0x5e37ad(0x95b)][_0x5e37ad(0x928)][_0x5e37ad(0x25e)]['Shadow'];}else return VisuMZ[_0x5e37ad(0x95b)]['Settings'][_0x5e37ad(0x2ec)]['Shadow'];},Game_BattlerBase[_0x10ff30(0xb0c)]['battlerSmoothImage']=function(){return!![];},Game_BattlerBase[_0x10ff30(0xb0c)][_0x10ff30(0x4b0)]=function(){return 0x0;},Game_BattlerBase['prototype']['battleUIOffsetY']=function(){return 0x0;},Game_BattlerBase[_0x10ff30(0xb0c)][_0x10ff30(0x5ee)]=function(_0x3c1f55){const _0x481f65=_0x10ff30;if(!_0x3c1f55)return 0x0;let _0x52b9ef=0x0;const _0x10fece=_0x3c1f55[_0x481f65(0x7ed)];return _0x10fece[_0x481f65(0x22f)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x52b9ef+=Number(RegExp['$1'])),_0x10fece[_0x481f65(0x22f)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x52b9ef+=Number(RegExp['$1'])),_0x52b9ef;},Game_BattlerBase[_0x10ff30(0xb0c)][_0x10ff30(0x68c)]=function(_0x40f853){const _0x97a1e3=_0x10ff30;if(!_0x40f853)return 0x0;let _0x1885bc=0x0;const _0x493f3e=_0x40f853[_0x97a1e3(0x7ed)];if(_0x493f3e[_0x97a1e3(0x22f)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)){if(_0x97a1e3(0x293)==='birux'){if(!this['_actor'])return;const _0x55c751=this[_0x97a1e3(0x4e8)][_0x97a1e3(0xa98)]();for(const _0xfe003e of _0x55c751){this[_0x97a1e3(0x1f0)](_0xfe003e[_0x97a1e3(0x9d9)]()[_0x97a1e3(0x6a3)]());}}else _0x1885bc+=Number(RegExp['$1']);}return _0x493f3e[_0x97a1e3(0x22f)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x1885bc+=Number(RegExp['$2'])),_0x1885bc;},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x9ba)]=Game_BattlerBase[_0x10ff30(0xb0c)][_0x10ff30(0xb51)],Game_BattlerBase['prototype'][_0x10ff30(0xb51)]=function(_0x5aad1f){const _0x2de670=_0x10ff30;if(_0x5aad1f===this[_0x2de670(0x6d7)]()&&this[_0x2de670(0x3f4)]())return!![];return VisuMZ[_0x2de670(0x95b)][_0x2de670(0x9ba)][_0x2de670(0xb96)](this,_0x5aad1f);},Game_BattlerBase[_0x10ff30(0xb0c)][_0x10ff30(0x3f4)]=function(){return this['_immortal'];},Game_BattlerBase[_0x10ff30(0xb0c)][_0x10ff30(0x3e6)]=function(_0x5efdba){const _0x349aa6=_0x10ff30;_0x5efdba?_0x349aa6(0xcb8)===_0x349aa6(0xcb8)?this[_0x349aa6(0x35f)]():this[_0x349aa6(0x3ea)]():this['removeImmortal']();},Game_BattlerBase[_0x10ff30(0xb0c)][_0x10ff30(0x35f)]=function(){const _0xe2798d=_0x10ff30;if(this[_0xe2798d(0x472)]())return;this[_0xe2798d(0xb09)]=!![],this['_deathStateApplied']=![];},Game_BattlerBase[_0x10ff30(0xb0c)][_0x10ff30(0x6a2)]=function(){const _0x3d25a1=_0x10ff30,_0x588eac=this[_0x3d25a1(0x355)]();this['_immortal']=![],_0x588eac&&this[_0x3d25a1(0x4ac)]&&this[_0x3d25a1(0x5aa)](),this[_0x3d25a1(0x4ac)]=![],this[_0x3d25a1(0x219)](),this[_0x3d25a1(0x472)]()&&_0x588eac&&(this[_0x3d25a1(0xbd5)](),this['requestMotionRefresh']());},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xc06)]=Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x541)],Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x541)]=function(){const _0x4efdd7=_0x10ff30;if(this[_0x4efdd7(0x5c4)]()){if(_0x4efdd7(0x43b)===_0x4efdd7(0x43b))return VisuMZ['BattleCore'][_0x4efdd7(0xc06)]['call'](this);else this[_0x4efdd7(0x32c)]=this['applyEasing'](this[_0x4efdd7(0x32c)],this['_targetFloatHeight'],_0x4d38a0,_0x4d2f93,_0x354713);}else return 0x0;},VisuMZ[_0x10ff30(0x95b)]['Game_Action_setAttack']=Game_Action['prototype'][_0x10ff30(0xc43)],Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0xc43)]=function(){const _0x82d76e=_0x10ff30;this[_0x82d76e(0x906)]()&&this['subject']()[_0x82d76e(0xc86)]()?VisuMZ[_0x82d76e(0x95b)][_0x82d76e(0x239)][_0x82d76e(0xb96)](this):'fysuo'!=='HODvV'?this[_0x82d76e(0xb10)]():(_0x5587fb+=_0x3f39c6,_0x48be88+=_0x55ed18[_0x82d76e(0x58a)]()?-_0x597822:_0x4587a8);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x58b)]=Game_BattlerBase['prototype'][_0x10ff30(0xc86)],Game_BattlerBase[_0x10ff30(0xb0c)]['canAttack']=function(){const _0x3ad2b0=_0x10ff30;if(!this['canAttackBattleCore']())return![];return VisuMZ[_0x3ad2b0(0x95b)][_0x3ad2b0(0x58b)]['call'](this);},Game_BattlerBase[_0x10ff30(0xb0c)][_0x10ff30(0xba4)]=function(){const _0x37fa44=_0x10ff30;for(const _0x404caf of this[_0x37fa44(0x4ab)]()){if(_0x37fa44(0x75b)===_0x37fa44(0xa03)){const _0x38aef7=this[_0x37fa44(0xb4f)];_0xaaf2d3[_0x37fa44(0x95b)]['Sprite_Battler_setBattler'][_0x37fa44(0xb96)](this,_0x1f6920),this[_0x37fa44(0x51f)](_0x29f276);if(_0x38aef7!==_0x3e2e6c)this[_0x37fa44(0x1c7)]();}else{if(!_0x404caf)continue;if(_0x404caf[_0x37fa44(0x7ed)][_0x37fa44(0x22f)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}}return!![];},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x79f)]=Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x945)],Game_Action[_0x10ff30(0xb0c)][_0x10ff30(0x945)]=function(){const _0x1b4cd1=_0x10ff30;this['subject']()[_0x1b4cd1(0x97f)]()&&(_0x1b4cd1(0xbbd)===_0x1b4cd1(0xbbd)?VisuMZ[_0x1b4cd1(0x95b)][_0x1b4cd1(0x79f)][_0x1b4cd1(0xb96)](this):!this[_0x1b4cd1(0x7ba)][_0x1b4cd1(0x87c)]()&&this[_0x1b4cd1(0x502)]());},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x48a)]=Game_BattlerBase[_0x10ff30(0xb0c)]['canGuard'],Game_BattlerBase[_0x10ff30(0xb0c)][_0x10ff30(0x97f)]=function(){const _0x34ea97=_0x10ff30;if(!this[_0x34ea97(0x2f5)]())return![];return VisuMZ[_0x34ea97(0x95b)][_0x34ea97(0x48a)][_0x34ea97(0xb96)](this);},Game_BattlerBase['prototype'][_0x10ff30(0x2f5)]=function(){const _0x266b70=_0x10ff30;for(const _0x1751f2 of this[_0x266b70(0x4ab)]()){if(!_0x1751f2)continue;if(_0x1751f2['note'][_0x266b70(0x22f)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x10ff30(0xb0c)][_0x10ff30(0x702)]=function(){const _0x13c3ee=_0x10ff30;for(const _0xc377a7 of this[_0x13c3ee(0x4ab)]()){if(!_0xc377a7)continue;if(_0xc377a7[_0x13c3ee(0x7ed)][_0x13c3ee(0x22f)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x42a)]=function(){const _0x3c2d90=_0x10ff30;return VisuMZ[_0x3c2d90(0x95b)][_0x3c2d90(0x928)][_0x3c2d90(0x64d)][_0x3c2d90(0x426)];},VisuMZ['BattleCore'][_0x10ff30(0x82f)]=Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x9cf)],Game_Battler[_0x10ff30(0xb0c)]['regenerateAll']=function(){const _0xa6855b=_0x10ff30;if(SceneManager['isSceneBattle']()){if(_0xa6855b(0x3a0)!==_0xa6855b(0x592)){if(BattleManager[_0xa6855b(0xccf)]()){if(_0xa6855b(0x760)==='eWDtG'){if(this[_0xa6855b(0x3b7)]()<=0x0)return;}else this['startMotion'](_0x446de2[_0xa6855b(0x8db)]()[_0xa6855b(0x558)]||_0xa6855b(0x646));}else{if($gameTroop[_0xa6855b(0x3b7)]()<=0x0)return;}}else return _0x5bc54f=_0x555cc6(_0xb663a5),_0x5119b6[_0xa6855b(0x22f)](/#(.*)/i)?_0xa6855b(0xabf)[_0xa6855b(0x958)](_0x2b4226(_0x33d11c['$1'])):this[_0xa6855b(0x65e)](_0x3eac40(_0x54a2f3));}if(SceneManager[_0xa6855b(0xc1e)]()&&BattleManager[_0xa6855b(0xccf)]()&&this[_0xa6855b(0x74c)]===Graphics[_0xa6855b(0xaf6)])return;this[_0xa6855b(0x74c)]=Graphics['frameCount'];SceneManager['isSceneBattle']()&&this['processBattleCoreJS']('PreRegenerateJS');VisuMZ[_0xa6855b(0x95b)][_0xa6855b(0x82f)]['call'](this);if(SceneManager[_0xa6855b(0xc1e)]()){if(_0xa6855b(0x4d2)===_0xa6855b(0x4d2))this[_0xa6855b(0xb9a)](),this[_0xa6855b(0x1f3)](_0xa6855b(0x87b));else return this[_0xa6855b(0x80c)]();}},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0xb9a)]=function(){const _0xe86e25=_0x10ff30;if(SceneManager[_0xe86e25(0xc1e)]())for(const _0x1f5036 of this[_0xe86e25(0x4ab)]()){if(!_0x1f5036)continue;this['onRegeneratePlayStateAnimation'](_0x1f5036);}},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x99c)]=function(_0x7f6cd5){const _0x2f222a=_0x10ff30;if(!Imported[_0x2f222a(0xa8d)])return;if(!SceneManager[_0x2f222a(0xc1e)]())return;if(this[_0x2f222a(0x472)]())return;if(this[_0x2f222a(0x9ac)]())return;if(_0x7f6cd5[_0x2f222a(0x7ed)][_0x2f222a(0x22f)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x5695b3=Number(RegExp['$1']);$gameTemp[_0x2f222a(0x8e0)]([this],_0x5695b3,![],![]);}},VisuMZ['BattleCore'][_0x10ff30(0x692)]=Game_Battler[_0x10ff30(0xb0c)]['startTpbTurn'],Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x67a)]=function(){const _0x1f31f0=_0x10ff30;this['processBattleCoreJS'](_0x1f31f0(0x576)),VisuMZ[_0x1f31f0(0x95b)]['Game_Battler_startTpbTurn'][_0x1f31f0(0xb96)](this),this[_0x1f31f0(0x1f3)](_0x1f31f0(0xc6b));},VisuMZ[_0x10ff30(0x95b)]['Game_Battler_onTurnEnd']=Game_Battler[_0x10ff30(0xb0c)]['onTurnEnd'],Game_Battler['prototype'][_0x10ff30(0x8f5)]=function(){const _0x5b58e5=_0x10ff30;this[_0x5b58e5(0x1f3)](_0x5b58e5(0x377)),VisuMZ[_0x5b58e5(0x95b)]['Game_Battler_onTurnEnd']['call'](this),this[_0x5b58e5(0x1f3)](_0x5b58e5(0x2bb));},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x1f3)]=function(_0xf15860){const _0xc5eaef=_0x10ff30;if(this[_0xc5eaef(0x895)]||this[_0xc5eaef(0x7a1)])return;const _0x160d4c=VisuMZ['BattleCore']['Settings']['Mechanics'];if(_0x160d4c[_0xf15860])_0x160d4c[_0xf15860][_0xc5eaef(0xb96)](this);for(const _0x4c4a76 of this[_0xc5eaef(0x4ab)]()){if(_0xc5eaef(0xbf1)==='RRaMT'){if(!_0x4c4a76)continue;key=VisuMZ[_0xc5eaef(0x95b)][_0xc5eaef(0x613)](_0x4c4a76,_0xf15860),VisuMZ['BattleCore']['JS'][key]&&VisuMZ[_0xc5eaef(0x95b)]['JS'][key]['call'](this,this,this,_0x4c4a76,0x0);}else{if(_0x5e8eef[_0xc5eaef(0xa92)]&&!_0xea4bee[_0xc5eaef(0xbf6)])return this[_0xc5eaef(0x7ab)]();else{return _0x41a6cd[_0xc5eaef(0x95b)][_0xc5eaef(0xa40)][_0xc5eaef(0xb96)](this);;}}}},Game_Battler['prototype']['chantStyle']=function(){const _0x4942cf=_0x10ff30;return VisuMZ[_0x4942cf(0x95b)][_0x4942cf(0x928)]['Actor']['ChantStyle']||![];},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x805)]=function(){const _0x53270d=_0x10ff30;if(this[_0x53270d(0xb6f)]()){if(_0x53270d(0x899)===_0x53270d(0x899)){if(this[_0x53270d(0xc57)]()){if(this[_0x53270d(0x8cf)][_0x53270d(0xb58)](_0xcf5162=>_0xcf5162[_0x53270d(0x5c4)]()&&_0xcf5162[_0x53270d(0x792)]())){if('EDvjY'!==_0x53270d(0x26a)){if(!_0x569d19[_0x53270d(0xc1e)]())return;_0x27ecab[_0x53270d(0xb1e)](_0x1d7e65,_0x41d38f);const _0xfa2365=_0x167a04['CommonEventID'];_0x5c1399['_scene'][_0x53270d(0x543)](_0xfa2365);}else return!![];}}else{if(this[_0x53270d(0x8cf)]['some'](_0x5d2125=>_0x5d2125[_0x53270d(0x5c4)]()&&_0x5d2125[_0x53270d(0xc54)]()))return!![];}}else{if(_0x1e0ab9)_0x52f122['processBattleCoreJS'](_0x17a28c);}}if(BattleManager[_0x53270d(0xccf)]()&&this[_0x53270d(0x310)]===_0x53270d(0xb39)){if(this[_0x53270d(0xc57)]()){if(_0x53270d(0xa2a)!==_0x53270d(0xa2a)){_0x45faee(_0x53270d(0x467)),_0x1b0748[_0x53270d(0xa8c)]();return;}else return this[_0x53270d(0x8fd)]()&&this[_0x53270d(0x8fd)]()[_0x53270d(0x5c4)]()&&this[_0x53270d(0x8fd)]()['isMagical']();}else return this[_0x53270d(0x8fd)]()&&this[_0x53270d(0x8fd)]()[_0x53270d(0x5c4)]()&&this['currentAction']()[_0x53270d(0xc54)]();}return![];},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x672)]=function(){const _0x56ef2e=_0x10ff30;if(BattleManager[_0x56ef2e(0xccf)]()&&this['_tpbState']===_0x56ef2e(0xb39)){if(this['chantStyle']())return this[_0x56ef2e(0x8fd)]()&&this['currentAction']()[_0x56ef2e(0x5c4)]()&&!this[_0x56ef2e(0x8fd)]()[_0x56ef2e(0x792)]();else{if(_0x56ef2e(0x969)===_0x56ef2e(0x969))return this[_0x56ef2e(0x8fd)]()&&this['currentAction']()[_0x56ef2e(0x5c4)]()&&!this[_0x56ef2e(0x8fd)]()[_0x56ef2e(0xc54)]();else _0x270c9c[_0x56ef2e(0x95b)][_0x56ef2e(0x65a)]['call'](this,_0x4f7d6b),this[_0x56ef2e(0x7e8)](_0x2abc2);}}return![];},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x42c)]=Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x1d4)],Game_Battler[_0x10ff30(0xb0c)]['clearDamagePopup']=function(){const _0x53cce9=_0x10ff30;VisuMZ[_0x53cce9(0x95b)][_0x53cce9(0x42c)][_0x53cce9(0xb96)](this),this[_0x53cce9(0x483)]=[];},Game_Battler[_0x10ff30(0xb0c)]['isDamagePopupRequested']=function(){const _0x1c3457=_0x10ff30;if(!this[_0x1c3457(0x483)])this[_0x1c3457(0x1d4)]();return this[_0x1c3457(0x483)][_0x1c3457(0x449)]>0x0;},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x2a1)]=function(){const _0xc8989b=_0x10ff30;if(!SceneManager['isSceneBattle']())return;if(!this['_damagePopupArray'])this[_0xc8989b(0x1d4)]();this[_0xc8989b(0x50c)]();const _0x2c17d8=this['battler']();if(_0x2c17d8)_0x2c17d8['setupDamagePopup']();},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x50c)]=function(){const _0x42ddac=_0x10ff30,_0x27389a=this[_0x42ddac(0xc81)]();if(_0x27389a[_0x42ddac(0x3ad)]||_0x27389a[_0x42ddac(0xcc3)]){const _0x14d469=JsonEx[_0x42ddac(0x6ab)](_0x27389a);_0x14d469['hpAffected']=![],_0x14d469[_0x42ddac(0x571)]=0x0,this['_damagePopupArray']['push'](_0x14d469);}if(_0x27389a[_0x42ddac(0x6b3)]){if(_0x42ddac(0x9df)!==_0x42ddac(0x513)){const _0x1785a0=JsonEx['makeDeepCopy'](_0x27389a);_0x1785a0[_0x42ddac(0x3ad)]=![],_0x1785a0['evaded']=![],_0x1785a0[_0x42ddac(0x571)]=0x0,this[_0x42ddac(0x483)]['push'](_0x1785a0);}else _0x5aa21e=_0x35d4e6[_0x42ddac(0x319)](/\x1I\[(\d+)\]/gi,''),_0x5c213d=_0x4e5169[_0x42ddac(0x319)](/\\I\[(\d+)\]/gi,'');}if(_0x27389a[_0x42ddac(0x571)]!==0x0){if(_0x42ddac(0x9c6)===_0x42ddac(0x90b)){if(!_0x446567['isSideView']())return;_0x54f07b[_0x42ddac(0x95b)][_0x42ddac(0x669)]['call'](this,_0x415f84);}else{const _0x13aa44=JsonEx[_0x42ddac(0x6ab)](_0x27389a);_0x13aa44['missed']=![],_0x13aa44['evaded']=![],_0x13aa44[_0x42ddac(0x6b3)]=![],this[_0x42ddac(0x483)]['push'](_0x13aa44);}}},Game_Battler['prototype'][_0x10ff30(0x229)]=function(){const _0x32731b=_0x10ff30;if(!this[_0x32731b(0x483)])this[_0x32731b(0x1d4)]();if(VisuMZ[_0x32731b(0x95b)][_0x32731b(0x928)]['Damage'][_0x32731b(0x56c)]){if(_0x32731b(0x5e3)===_0x32731b(0x5e8)){this[_0x32731b(0x83c)][_0x32731b(0xc87)]=_0x2f7e63[_0x32731b(0xc60)];return;}else return this[_0x32731b(0x483)][_0x32731b(0x4f5)]();}else return this[_0x32731b(0x483)][_0x32731b(0x818)]();},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x1ca)]=function(_0x245fbb,_0x4b84e1){const _0x75cbd9=_0x10ff30;if(!SceneManager['isSceneBattle']())return;if(!this[_0x75cbd9(0x843)]())return;if(_0x245fbb[_0x75cbd9(0x449)]<=0x0)return;_0x4b84e1=_0x4b84e1||{},_0x4b84e1[_0x75cbd9(0x65e)]=_0x4b84e1['textColor']||'#ffffff',_0x4b84e1['flashColor']=_0x4b84e1[_0x75cbd9(0x454)]||[0x0,0x0,0x0,0x0],_0x4b84e1[_0x75cbd9(0x5d0)]=_0x4b84e1[_0x75cbd9(0x5d0)]||0x0,this[_0x75cbd9(0x843)]()[_0x75cbd9(0x1ca)](_0x245fbb,_0x4b84e1);},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x211)]=function(_0x14d1b0,_0xaac34a,_0x1e26bf){const _0x5103ec=_0x10ff30;if(!SceneManager[_0x5103ec(0xc1e)]())return;if(!this[_0x5103ec(0x843)]())return;if(_0xaac34a[_0x5103ec(0x449)]<=0x0)return;_0x1e26bf=_0x1e26bf||{},_0x1e26bf[_0x5103ec(0x65e)]=_0x1e26bf[_0x5103ec(0x65e)]||'#ffffff',_0x1e26bf['flashColor']=_0x1e26bf[_0x5103ec(0x454)]||[0x0,0x0,0x0,0x0],_0x1e26bf[_0x5103ec(0x5d0)]=_0x1e26bf[_0x5103ec(0x5d0)]||0x0,this[_0x5103ec(0x843)]()[_0x5103ec(0x211)](_0x14d1b0,_0xaac34a,_0x1e26bf);},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x93d)]=function(){const _0x656df1=_0x10ff30;if(this[_0x656df1(0x9ac)]())return![];if(this['isAlive']()&&this[_0x656df1(0xaf9)]())return!![];if(this[_0x656df1(0xccb)]()&&this[_0x656df1(0xc4a)]()){if(_0x656df1(0x2cd)===_0x656df1(0xa36))_0x4f86dd=this[_0x656df1(0x8db)]()[_0x656df1(0x2c5)]||0x0;else{if(this[_0x656df1(0x472)]()&&this[_0x656df1(0x9e1)]())return![];}}else{if(this[_0x656df1(0x472)]())return![];}return!![];},VisuMZ['BattleCore'][_0x10ff30(0x9b5)]=Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x3d2)],Game_Battler['prototype'][_0x10ff30(0x3d2)]=function(){const _0x1e53fd=_0x10ff30;VisuMZ['BattleCore']['Game_Battler_clearMotion'][_0x1e53fd(0xb96)](this),this[_0x1e53fd(0x26b)]();},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x92d)]=function(){return!![];},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x214)]=function(){return![];},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x35b)]=Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x8e9)],Game_Battler[_0x10ff30(0xb0c)]['onBattleStart']=function(_0x4eaff9){const _0x52efa6=_0x10ff30;VisuMZ['BattleCore'][_0x52efa6(0x35b)][_0x52efa6(0xb96)](this,_0x4eaff9),this[_0x52efa6(0xcb2)](_0x4eaff9),this[_0x52efa6(0x1d4)]();},Game_Battler['prototype'][_0x10ff30(0xcb2)]=function(_0x5a46b5){const _0x2c6a06=_0x10ff30;this[_0x2c6a06(0x24d)](![]),this[_0x2c6a06(0xbdf)]=undefined,this[_0x2c6a06(0x54e)]=undefined;},VisuMZ['BattleCore']['Game_Battler_onBattleEnd']=Game_Battler[_0x10ff30(0xb0c)]['onBattleEnd'],Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x4b3)]=function(){const _0x1013bd=_0x10ff30;VisuMZ[_0x1013bd(0x95b)][_0x1013bd(0x67d)]['call'](this),this[_0x1013bd(0x4ea)]();},Game_Battler['prototype'][_0x10ff30(0x4ea)]=function(){const _0x158c3d=_0x10ff30;this[_0x158c3d(0xbdf)]=undefined,this[_0x158c3d(0x54e)]=undefined;},VisuMZ['BattleCore'][_0x10ff30(0x385)]=Game_Battler['prototype'][_0x10ff30(0x858)],Game_Battler['prototype'][_0x10ff30(0x858)]=function(_0x512a18){const _0x5e74dc=_0x10ff30;VisuMZ[_0x5e74dc(0x95b)][_0x5e74dc(0x385)][_0x5e74dc(0xb96)](this,_0x512a18);if(!_0x512a18[_0x5e74dc(0x523)]()){if('ZzLjf'==='ZzLjf'){const _0x5782db=this['battler']();if(_0x5782db){if('otetR'!==_0x5e74dc(0x246))return _0x1bc7c3[_0x5e74dc(0x9e9)]()[_0x5e74dc(0x778)](this[_0x5e74dc(0x652)]);else _0x5782db[_0x5e74dc(0xade)]();}}else return this[_0x5e74dc(0x65e)](_0x3921d7(_0xfdacd2));}this[_0x5e74dc(0x24d)](![]);},Game_Battler[_0x10ff30(0xb0c)]['performActionEndMembers']=function(){const _0x101c68=_0x10ff30,_0x385589=this[_0x101c68(0x9e6)];this[_0x101c68(0x9e6)]=![];if(BattleManager[_0x101c68(0x3bc)]()&&this[_0x101c68(0x817)]()){if('BNsWS'==='BNsWS'){const _0x348c54=this[_0x101c68(0x843)]();if(_0x348c54&&_0x385589)_0x348c54['stepForward']();return;}else{const _0x152c7c=_0x4ee97e(_0x3647db['$1']);return _0x44518a[_0x101c68(0xc07)]()[_0x101c68(0xb68)](_0x26964d=>_0x26964d[_0x101c68(0x68d)]()===_0x152c7c);}}const _0x3c34ba=this[_0x101c68(0x843)]();if(_0x3c34ba)_0x3c34ba['stepBack']();this[_0x101c68(0x24d)](![]),this[_0x101c68(0x6c5)]();},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x2ba)]=function(_0xf9c3b6){const _0x5c0410=_0x10ff30;if(_0xf9c3b6['isAttack']())this[_0x5c0410(0x62a)]();else{if(_0xf9c3b6[_0x5c0410(0x523)]())_0x5c0410(0x8e4)===_0x5c0410(0x8e4)?this[_0x5c0410(0x918)]('guard'):!_0x468351['battleMembers']()[_0x5c0410(0x778)](this[_0x5c0410(0x29d)])&&(this[_0x5c0410(0x29d)]=null);else{if(_0xf9c3b6[_0x5c0410(0x792)]()){if(_0x5c0410(0x5e5)===_0x5c0410(0x70e))return 0xa;else this[_0x5c0410(0x918)]('spell');}else{if(_0xf9c3b6[_0x5c0410(0x938)]()){if(_0x5c0410(0x238)==='alNdu')return this['_attackAnimationId']||0x0;else{if([0x1,0x2,0x5,0x6][_0x5c0410(0x778)](_0xf9c3b6[_0x5c0410(0x5c4)]()['damage']['type']))'kyykf'===_0x5c0410(0xca1)?this[_0x5c0410(0x62a)]():(_0x661ed7[_0x5c0410(0x95b)]['Window_BattleLog_performEvasion'][_0x5c0410(0xb96)](this,_0x4cb253),this[_0x5c0410(0x86c)]());else{if(_0x5c0410(0x256)!==_0x5c0410(0x256)){const _0x3e0cde=this['_additionalSprites'];if(_0x3e0cde[_0x49147c])return _0x3e0cde[_0x4061ea];else{const _0xba571d=new _0xc0cbe3();return _0x3e0cde[_0x5b12cc]=_0xba571d,this['addChildToBack'](_0xba571d),this[_0x5c0410(0x25a)](this['_cursorArea']),_0xba571d;}}else this[_0x5c0410(0x918)]('skill');}}}else _0xf9c3b6[_0x5c0410(0xb5a)]()&&this[_0x5c0410(0x918)](_0x5c0410(0x5c4));}}}},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x4f0)]=function(){return $dataSystem['attackMotions'][0x0];},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x497)]=function(){const _0x48fc2c=_0x10ff30,_0x2fb26e=this[_0x48fc2c(0x4f0)]();return _0x2fb26e?_0x2fb26e[_0x48fc2c(0x63e)]:0x0;},Game_Battler['prototype'][_0x10ff30(0x3a4)]=function(_0x4c5259){const _0x38bea2=_0x10ff30;if(!$gameSystem['isSideView']())return;const _0x42a994=this[_0x38bea2(0x843)](),_0x516506=_0x4c5259[_0x38bea2(0x843)]();if(!_0x42a994||!_0x516506)return;const _0x4c370a=_0x516506['_baseX'],_0x7df51b=_0x516506[_0x38bea2(0xcae)];this['moveBattlerToPoint'](_0x4c370a,_0x7df51b,0x0,![],_0x38bea2(0x92a),-0x1),_0x42a994[_0x38bea2(0x8b0)]();const _0x482921=VisuMZ[_0x38bea2(0x95b)]['Settings'][_0x38bea2(0x617)];let _0xd114a1=(_0x516506[_0x38bea2(0x7b2)]+_0x42a994[_0x38bea2(0x7b2)])/0x2;_0xd114a1*=this['isActor']()?0x1:-0x1;let _0x1142cf=_0x482921[_0x38bea2(0x632)]*(this[_0x38bea2(0x58a)]()?0x1:-0x1);_0x4c5259[_0x38bea2(0x463)](_0xd114a1,_0x1142cf,0x0,![],_0x38bea2(0x92a)),_0x516506[_0x38bea2(0x8b0)]();},Game_Battler['prototype'][_0x10ff30(0x918)]=function(_0xc8f60){const _0x2aba92=_0x10ff30;if(SceneManager['isSceneBattle']()){if('PJvAu'==='tgkoL'){const _0x2bdf0a={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x15432d=_0x2f69e7[_0x2aba92(0x9f4)][_0x2aba92(0x818)]();_0x1db076[_0x2aba92(0x9f4)]['unshift'](_0x2bdf0a),_0x223338[_0x2aba92(0x9f4)][_0x2aba92(0x8da)](_0x15432d);}else{const _0x4b7953=this[_0x2aba92(0x843)]();if(_0x4b7953){_0x4b7953[_0x2aba92(0xa5f)](_0xc8f60);if(['swing',_0x2aba92(0x757),_0x2aba92(0x417)]['includes'](_0xc8f60)){if('rNEVK'!==_0x2aba92(0x52c))return this['isForRandomBattleCore']();else this['performWeaponAnimation']();}}}}this[_0x2aba92(0x26b)]();},Game_Battler['prototype'][_0x10ff30(0x807)]=function(){},Game_Battler[_0x10ff30(0xb0c)]['startWeaponAnimation']=function(_0xf6133d){const _0x584407=_0x10ff30;if(SceneManager[_0x584407(0xc1e)]()){const _0x240c15=this[_0x584407(0x843)]();if(_0x240c15)_0x240c15['forceWeaponAnimation'](_0xf6133d);}},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x26c)]=function(){const _0x12342c=_0x10ff30;if(SceneManager[_0x12342c(0xc1e)]()){if('wvjcY'===_0x12342c(0x9d6)){if(_0x23575e[_0x12342c(0x93a)][_0x12342c(0x252)]())return!![];this[_0x12342c(0xb74)]='';}else{const _0x1fbcc3=this[_0x12342c(0x497)]();this[_0x12342c(0x553)](_0x1fbcc3);}}},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0xc41)]=function(_0x17de52,_0x5abc57){const _0x198d48=_0x10ff30;if(!_0x17de52)return;if(!_0x17de52[_0x198d48(0x5c4)]())return;if(_0x17de52[_0x198d48(0x6f3)]())return;if(_0x17de52[_0x198d48(0x523)]())return;if(_0x17de52['isItem']())return;let _0x4711a9=0x0;const _0x1ede7f=VisuMZ[_0x198d48(0x95b)]['Settings'][_0x198d48(0x617)],_0x52cd77=_0x17de52['item']()[_0x198d48(0x7ed)];if(_0x52cd77[_0x198d48(0x22f)](/<CAST ANIMATION: (\d+)>/i))_0x4711a9=Number(RegExp['$1']);else{if(_0x52cd77[_0x198d48(0x22f)](/<NO CAST ANIMATION>/i))return;else{if(_0x17de52[_0x198d48(0x7aa)]())_0x4711a9=_0x1ede7f[_0x198d48(0x770)];else{if(_0x17de52[_0x198d48(0xb67)]())_0x4711a9=_0x1ede7f['CastPhysical'];else _0x17de52[_0x198d48(0x792)]()&&(_0x4711a9=_0x1ede7f[_0x198d48(0x7a6)]);}}}_0x4711a9>0x0&&$gameTemp['requestAnimation']([this],_0x4711a9,!!_0x5abc57);},Game_Battler['prototype'][_0x10ff30(0x7f5)]=function(){const _0x33f78e=_0x10ff30;SoundManager[_0x33f78e(0xb65)]();let _0x61a44d=VisuMZ[_0x33f78e(0x95b)][_0x33f78e(0x928)][_0x33f78e(0x617)][_0x33f78e(0xb3e)];if(_0x61a44d>0x0){if(Imported[_0x33f78e(0xa8d)])$gameTemp[_0x33f78e(0x8e0)]([this],_0x61a44d);else{if(_0x33f78e(0x5ec)!==_0x33f78e(0x5ec)){const _0x259ff8=this['_commandNameWindow'],_0x260964=_0x2c311b['windowPadding'](),_0x444dfe=_0xbfdad2['x']+_0x2bf302[_0x33f78e(0xcce)](_0x3a0528[_0x33f78e(0x7b2)]/0x2)+_0x260964;_0x259ff8['x']=_0x259ff8[_0x33f78e(0x7b2)]/-0x2+_0x444dfe,_0x259ff8['y']=_0x46e683['floor'](_0x3548e3['height']/0x2);}else $gameTemp[_0x33f78e(0x1e7)]([this],_0x61a44d);}}},VisuMZ['BattleCore'][_0x10ff30(0x8b6)]=Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0xb94)],Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0xb94)]=function(){const _0x7885e4=_0x10ff30;VisuMZ[_0x7885e4(0x95b)][_0x7885e4(0x8b6)][_0x7885e4(0xb96)](this),this[_0x7885e4(0xa3c)]();},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xb8a)]=Game_Battler[_0x10ff30(0xb0c)]['performMiss'],Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x82a)]=function(){const _0x385f98=_0x10ff30;VisuMZ[_0x385f98(0x95b)]['Game_Battler_performMiss'][_0x385f98(0xb96)](this),this[_0x385f98(0xa3c)]();},VisuMZ['BattleCore']['Game_Battler_performEvasion']=Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0xa4d)],Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0xa4d)]=function(){const _0x161a9d=_0x10ff30;VisuMZ[_0x161a9d(0x95b)]['Game_Battler_performEvasion'][_0x161a9d(0xb96)](this),this[_0x161a9d(0xa3c)]();},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0xa3c)]=function(){const _0xe8de2f=_0x10ff30;if(!$gameSystem[_0xe8de2f(0xa7c)]())return;if(this['_flinched'])return;this['_flinched']=!![];const _0x4067dc=this['battler']();if(_0x4067dc)_0x4067dc[_0xe8de2f(0x7f1)]();},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x6c5)]=function(){const _0x542512=_0x10ff30;if(this[_0x542512(0x472)]()&&this[_0x542512(0x78e)]!==_0x542512(0x379)){this[_0x542512(0x918)](_0x542512(0x379));return;}if(this[_0x542512(0x472)]()&&this['_motionType']===_0x542512(0x379))return;if(!!this['_freezeMotionData'])return;if(this[_0x542512(0xccb)]()){if(_0x542512(0xaf2)===_0x542512(0xaf2)){if(!this[_0x542512(0x663)]()&&this!==BattleManager[_0x542512(0x427)]){if(this[_0x542512(0x843)]())this[_0x542512(0x843)]()[_0x542512(0x97b)]();}this[_0x542512(0x26b)]();return;}else{_0x195d4c(_0x542512(0x467)),_0x34fd04[_0x542512(0xa8c)]();return;}}if(this[_0x542512(0x78e)]===_0x542512(0xc44))return;if(this['_motionType']===_0x542512(0x378)&&!BattleManager['isInputting']())return;if(this[_0x542512(0x78e)]===_0x542512(0x867)&&!BattleManager[_0x542512(0x817)]())return;this['clearMotion']();if(this['battler']()&&BattleManager[_0x542512(0x817)]()){this[_0x542512(0x843)]()[_0x542512(0x97b)](),this[_0x542512(0x26b)]();return;}},Game_Enemy[_0x10ff30(0xb0c)]['isDuringNonLoopingMotion']=function(){const _0x3ba91a=_0x10ff30;if(!this[_0x3ba91a(0xc4a)]())return![];const _0x37ddb2=this['battler']();if(!_0x37ddb2)return![];const _0x13889b=_0x37ddb2[_0x3ba91a(0x408)];if(!_0x13889b)return![];const _0x43f470=_0x13889b[_0x3ba91a(0x6fb)];return _0x43f470&&!_0x43f470[_0x3ba91a(0x745)];},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x471)]=function(){const _0x28d72a=_0x10ff30;return this[_0x28d72a(0x84a)];},Game_Battler['prototype'][_0x10ff30(0x24d)]=function(_0x4a8f3d){const _0x57681d=_0x10ff30;if(!$gameSystem[_0x57681d(0xa7c)]())return;this[_0x57681d(0x84a)]=_0x4a8f3d;const _0x1c8ee3=this[_0x57681d(0x843)]();if(_0x1c8ee3)_0x1c8ee3['updateFlip']();},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x977)]=function(_0x1a444c,_0x72b562,_0x253d0e){const _0x355244=_0x10ff30;if(!$gameSystem['isSideView']())return;const _0x22b483=this['battler']();if(!_0x22b483)return;if(_0x1a444c===_0x22b483[_0x355244(0xa75)])return;let _0x412b9a=![];if(this[_0x355244(0x58a)]()){if(_0x1a444c>_0x22b483[_0x355244(0xa75)])_0x412b9a=!![];if(_0x1a444c<_0x22b483[_0x355244(0xa75)])_0x412b9a=![];}else{if(this[_0x355244(0xccb)]()){if(_0x1a444c>_0x22b483[_0x355244(0xa75)])_0x412b9a=![];if(_0x1a444c<_0x22b483[_0x355244(0xa75)])_0x412b9a=!![];}};this[_0x355244(0x24d)](_0x253d0e?!_0x412b9a:_0x412b9a),_0x22b483[_0x355244(0x522)]();},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x463)]=function(_0x3e3c6d,_0x20cb21,_0x7144e1,_0x3cd1fe,_0x36ce36){const _0x46b4e1=_0x10ff30;if(!$gameSystem['isSideView']())return;const _0xa43d8b=this['battler']();if(!_0xa43d8b)return;if(_0x3cd1fe)this['setBattlerFacePoint'](_0x3e3c6d+_0xa43d8b[_0x46b4e1(0xa75)],_0x20cb21+_0xa43d8b[_0x46b4e1(0xcae)],![]);_0x3e3c6d+=_0xa43d8b[_0x46b4e1(0xa75)]-_0xa43d8b[_0x46b4e1(0x7e9)],_0x20cb21+=_0xa43d8b[_0x46b4e1(0xcae)]-_0xa43d8b[_0x46b4e1(0x2f8)],_0xa43d8b[_0x46b4e1(0xb17)](_0x3e3c6d,_0x20cb21,_0x7144e1);if(Imported[_0x46b4e1(0xa8d)])_0xa43d8b[_0x46b4e1(0xcbd)](_0x36ce36||_0x46b4e1(0x92a));},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x2bf)]=function(_0x4ec7c5,_0x1d9f44,_0x54b2cf,_0x4e22a4,_0x4055f8,_0x2ba9cb){const _0x4da72f=_0x10ff30;if(!$gameSystem[_0x4da72f(0xa7c)]())return;const _0x425ceb=this[_0x4da72f(0x843)]();if(!_0x425ceb)return;if(_0x4ec7c5===Infinity||_0x1d9f44===Infinity)return;if(isNaN(_0x4ec7c5)||isNaN(_0x1d9f44))return;_0x2ba9cb=_0x2ba9cb||0x0;if(_0x2ba9cb>0x0){if(_0x425ceb[_0x4da72f(0xa75)]>_0x4ec7c5)_0x4ec7c5+=_0x425ceb['width']/0x2+_0x2ba9cb;if(_0x425ceb[_0x4da72f(0xa75)]<_0x4ec7c5)_0x4ec7c5-=_0x425ceb[_0x4da72f(0x7b2)]/0x2+_0x2ba9cb;}if(_0x4e22a4)this[_0x4da72f(0x977)](_0x4ec7c5,_0x1d9f44,![]);_0x4ec7c5-=_0x425ceb[_0x4da72f(0x7e9)],_0x1d9f44-=_0x425ceb['_homeY'],_0x425ceb[_0x4da72f(0xb17)](_0x4ec7c5,_0x1d9f44,_0x54b2cf);if(Imported['VisuMZ_0_CoreEngine'])_0x425ceb[_0x4da72f(0xcbd)](_0x4055f8||_0x4da72f(0x92a));},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x384)]=function(_0x2b4d38,_0x4e3c73,_0x183035,_0x13e34a,_0x521b56){const _0x1de473=_0x10ff30;if(!$gameSystem[_0x1de473(0xa7c)]())return;const _0x7d682=this['battler']();if(!_0x7d682)return;if(_0x13e34a)this[_0x1de473(0x977)](_0x2b4d38+_0x7d682[_0x1de473(0xa75)],_0x4e3c73+_0x7d682['_baseY'],![]);_0x2b4d38+=_0x7d682[_0x1de473(0x7e9)],_0x4e3c73+=_0x7d682[_0x1de473(0x2f8)],_0x7d682[_0x1de473(0xa1c)](_0x2b4d38,_0x4e3c73,_0x183035,_0x521b56),this['_forcedHomeX']=_0x2b4d38,this[_0x1de473(0x54e)]=_0x4e3c73;},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x718)]=function(_0x2bd39c,_0xf56328,_0x565f62,_0x515508,_0x19cc87,_0x52168c){const _0x1100d3=_0x10ff30;if(!$gameSystem['isSideView']())return;const _0x4c4daf=this['battler']();if(!_0x4c4daf)return;_0x52168c=_0x52168c||0x0;if(_0x52168c>0x0){if(_0x4c4daf[_0x1100d3(0xa75)]>_0x2bd39c)_0x2bd39c+=_0x4c4daf['width']/0x2+_0x52168c;if(_0x4c4daf[_0x1100d3(0xa75)]<_0x2bd39c)_0x2bd39c-=_0x4c4daf[_0x1100d3(0x7b2)]/0x2+_0x52168c;}if(_0x515508)this[_0x1100d3(0x977)](_0x2bd39c,_0xf56328,![]);_0x4c4daf[_0x1100d3(0xa1c)](_0x2bd39c,_0xf56328,_0x565f62,_0x19cc87),this[_0x1100d3(0xbdf)]=_0x2bd39c,this[_0x1100d3(0x54e)]=_0xf56328;},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0xaa0)]=function(_0x24a474,_0x401b91,_0x37727f){const _0x59e0ce=_0x10ff30;if(!$gameSystem[_0x59e0ce(0xa7c)]())return;const _0x467719=this[_0x59e0ce(0x843)]();if(!_0x467719)return;_0x467719['startFloat'](_0x24a474,_0x401b91,_0x37727f);},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x4dc)]=function(_0x2137d5,_0x4f3871){const _0x259397=_0x10ff30;if(!$gameSystem['isSideView']())return;const _0x384a28=this['battler']();if(!_0x384a28)return;_0x384a28[_0x259397(0x549)](_0x2137d5,_0x4f3871);},Game_Battler[_0x10ff30(0xb0c)]['spinBattler']=function(_0x5bd6d0,_0x5683aa,_0xdc2a64,_0x290c31){const _0x1ef7e5=_0x10ff30;if(!$gameSystem['isSideView']())return;const _0xf1d747=this['battler']();if(!_0xf1d747)return;_0xf1d747[_0x1ef7e5(0x783)](_0x5bd6d0,_0x5683aa,_0xdc2a64,_0x290c31);},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x754)]=function(_0x2a72d3,_0x2fa0f6,_0x5da153,_0x4b4d42){const _0x5e429f=_0x10ff30;if(!$gameSystem['isSideView']())return;const _0x132e9d=this['battler']();if(!_0x132e9d)return;this[_0x5e429f(0x58a)]()&&(_0x2a72d3*=-0x1,_0x2fa0f6*=-0x1),_0x132e9d[_0x5e429f(0x73a)](_0x2a72d3,_0x2fa0f6,_0x5da153,_0x4b4d42);},Game_Battler['prototype'][_0x10ff30(0xa1f)]=function(_0x4fe9e3,_0x4598a6,_0x163dea,_0x55717c){const _0x1ed3a6=_0x10ff30;if(!$gameSystem['isSideView']())return;const _0x101e7b=this[_0x1ed3a6(0x843)]();if(!_0x101e7b)return;_0x101e7b['startGrow'](_0x4fe9e3,_0x4598a6,_0x163dea,_0x55717c);},Game_Battler['prototype'][_0x10ff30(0xc9a)]=function(_0x492b41,_0x2704ea,_0xe8c4f7){const _0x16edae=_0x10ff30;if(!$gameSystem[_0x16edae(0xa7c)]())return;const _0x4f4ded=this[_0x16edae(0x843)]();if(!_0x4f4ded)return;_0x4f4ded['startOpacity'](_0x492b41,_0x2704ea,_0xe8c4f7);},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x26b)]=function(){const _0x4979a1=_0x10ff30,_0x54d26d=!!this[_0x4979a1(0x8aa)];this[_0x4979a1(0x8aa)]=undefined;if(_0x54d26d){if(_0x4979a1(0x8b8)!==_0x4979a1(0xc62))this[_0x4979a1(0x6c5)](),this[_0x4979a1(0x85c)]();else return this[_0x4979a1(0x2bd)]>0x0;}},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x85c)]=function(){const _0x4b2956=_0x10ff30;if(!SceneManager['isSceneBattle']())return;const _0x36d37a=this[_0x4b2956(0x843)]();if(!_0x36d37a)return;let _0xf960db=this[_0x4b2956(0x58a)]()?_0x36d37a[_0x4b2956(0x803)]:_0x36d37a[_0x4b2956(0x408)][_0x4b2956(0x803)];_0xf960db&&_0xf960db[_0x4b2956(0x542)](0x0);},Game_Battler['prototype'][_0x10ff30(0x242)]=function(_0x365686,_0x3484f4,_0x315e93){const _0x306d04=_0x10ff30;if(this[_0x306d04(0xccb)]()&&!this[_0x306d04(0xc4a)]())return;let _0x52b77c=0x0,_0xd53d4=0x0;if(_0x365686[_0x306d04(0x22f)](/ATTACK[ ](\d+)/i)){if(_0x306d04(0x3b5)!==_0x306d04(0x345))_0xd53d4=Number(RegExp['$1']),_0xd53d4--;else{if(this['x']===0x0)this['x']=_0x58ee13[_0x306d04(0x556)](_0x2f4b44[_0x306d04(0x7b2)]/0x2);if(this['y']===0x0)this['y']=_0x12dd4c['round'](_0x272f40[_0x306d04(0x956)]/0x2);}}if(this[_0x306d04(0x58a)]()){if('PaXHM'!=='AVdfJ'){const _0x251c24=this[_0x306d04(0x62b)]();_0x52b77c=_0x251c24[_0xd53d4]?_0x251c24[_0xd53d4][_0x306d04(0x2c5)]:0x0;}else{if(_0x8fceaf['isSceneBattle']()){const _0x254fe2=this['battler']();_0x254fe2&&(_0x254fe2[_0x306d04(0xa5f)](_0x37a0e7),[_0x306d04(0x762),_0x306d04(0x757),'missile'][_0x306d04(0x778)](_0x19c3e5)&&this['performWeaponAnimation']());}this[_0x306d04(0x26b)]();}}else this[_0x306d04(0xccb)]()&&(_0x52b77c=this[_0x306d04(0x8db)]()['wtypeId']||0x0);const _0x5b854d=$dataSystem['attackMotions'][_0x52b77c];if(_0x365686[_0x306d04(0x22f)](/attack/i)){if(_0x306d04(0x910)===_0x306d04(0x283)){if(!_0x41a471['isSceneBattle']())return;if(!_0x14f47c[_0x306d04(0xa47)])return;const _0x2c7175=_0xe23121['_scene']['_spriteset'];if(!_0x2c7175)return;_0x75622a[_0x306d04(0xb1e)](_0x9552c5,_0x2110fc);const _0x42679a=_0x1589f2(_0x11ec61[_0x306d04(0xa5b)])||0x0,_0x1fa80a=_0x590a14(_0x2452b2['Rate']),_0x346010=_0x3f7247['Duration']||0x1,_0x5e4b49=_0x142199[_0x306d04(0x46c)]||_0x306d04(0x92a);_0x2c7175['setupMotionBlurImpactFilter'](_0x42679a,_0x1fa80a,_0x346010,_0x5e4b49);}else _0x365686=[_0x306d04(0x757),_0x306d04(0x762),_0x306d04(0x417)][_0x5b854d[_0x306d04(0x589)]]||'swing';}this[_0x306d04(0x8aa)]={'motionType':_0x365686,'weaponImageId':_0x3484f4?_0x5b854d['weaponImageId']:0x0,'pattern':_0x315e93};},Game_Battler['prototype'][_0x10ff30(0x332)]=function(_0x1e92d3){const _0x19b806=_0x10ff30;if(!_0x1e92d3)return![];return _0x1e92d3[_0x19b806(0x72a)]()===this[_0x19b806(0x72a)]();},Game_Battler['prototype'][_0x10ff30(0x3cd)]=function(_0x12baf5){const _0x592732=_0x10ff30;if(!_0x12baf5)return![];return _0x12baf5[_0x592732(0x3df)]()===this[_0x592732(0x72a)]();},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x953)]=function(){return![];},Game_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x953)]=function(){const _0x6f2d1d=_0x10ff30;return this[_0x6f2d1d(0x8ec)]()[_0x6f2d1d(0x22f)](/\$/i);},Game_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0x953)]=function(){const _0x45a10c=_0x10ff30;return this[_0x45a10c(0xc4a)]()&&this[_0x45a10c(0xaa4)]()['match'](/\$/i);},VisuMZ['BattleCore'][_0x10ff30(0x5cf)]=Game_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x542)],Game_Actor['prototype']['setup']=function(_0x1de064){const _0xc13fe1=_0x10ff30;VisuMZ[_0xc13fe1(0x95b)][_0xc13fe1(0x5cf)][_0xc13fe1(0xb96)](this,_0x1de064),this[_0xc13fe1(0x796)]();},Game_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x796)]=function(){const _0x4419a2=_0x10ff30;this['_battlePortrait']='',this[_0x4419a2(0x9fe)]()&&this[_0x4419a2(0x9fe)]()[_0x4419a2(0x7ed)][_0x4419a2(0x22f)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(_0x4419a2(0x79d)!=='AxTnY'?this[_0x4419a2(0xa0e)]=String(RegExp['$1']):this['isShownOnBattlePortrait']()?_0x50d4be[_0x4419a2(0x2df)][_0x4419a2(0x656)][_0x4419a2(0x934)](_0x15b17e):(this['damageContainer']()[_0x4419a2(0x976)](_0x64291),this[_0x4419a2(0x366)][_0x4419a2(0xc04)](_0x54a4c2),_0x26e1f4['destroy']()));},Game_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x3da)]=function(){const _0x41f1e1=_0x10ff30;if(this['getBattlePortrait']()!==''){if(_0x41f1e1(0x320)!==_0x41f1e1(0x34a))return this[_0x41f1e1(0x491)]();else _0x1c5324=_0x4689fc[_0x41f1e1(0x33d)](_0x4cfcb5);}else{if(Imported['VisuMZ_1_MainMenuCore']&&this[_0x41f1e1(0x83f)]()!=='')return this[_0x41f1e1(0x83f)]();}return'';},Game_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x491)]=function(){const _0x18ecc7=_0x10ff30;if(this[_0x18ecc7(0xa0e)]===undefined)this[_0x18ecc7(0x796)]();return this[_0x18ecc7(0xa0e)];},Game_Actor[_0x10ff30(0xb0c)]['setBattlePortrait']=function(_0x549946){const _0x1a9d27=_0x10ff30;if(this['_battlePortrait']===undefined)this[_0x1a9d27(0x796)]();this[_0x1a9d27(0xa0e)]=_0x549946;if(SceneManager['isSceneBattle']()&&$gameParty['battleMembers']()[_0x1a9d27(0x778)](this)){const _0x5d0e73=SceneManager[_0x1a9d27(0x2df)][_0x1a9d27(0x656)];if(_0x5d0e73)_0x5d0e73[_0x1a9d27(0x3b2)](this);}},Game_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x509)]=function(){return!![];},Game_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x876)]=function(){const _0x5f26f9=_0x10ff30;if(!this[_0x5f26f9(0x51e)]()&&BattleManager[_0x5f26f9(0xa92)])return!![];return Game_Battler[_0x5f26f9(0xb0c)]['isAutoBattle'][_0x5f26f9(0xb96)](this);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xa40)]=Game_Actor['prototype'][_0x10ff30(0xb19)],Game_Actor[_0x10ff30(0xb0c)][_0x10ff30(0xb19)]=function(){const _0x5acfd=_0x10ff30;if(BattleManager[_0x5acfd(0xa92)]&&!ConfigManager['autoBattleUseSkills'])return this[_0x5acfd(0x7ab)]();else{if('SzhdE'!==_0x5acfd(0xb55)){return VisuMZ[_0x5acfd(0x95b)][_0x5acfd(0xa40)]['call'](this);;}else _0x810050['BattleCore'][_0x5acfd(0xbae)][_0x5acfd(0xb96)](this),this['updateBattlerContainer']();}},Game_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x7ab)]=function(){const _0x537341=_0x10ff30,_0x40c306=[],_0x240ef8=new Game_Action(this);return _0x240ef8[_0x537341(0xc43)](),_0x40c306[_0x537341(0x395)](_0x240ef8),_0x40c306;},Game_Actor[_0x10ff30(0xb0c)]['battleCommands']=function(){const _0x2660d2=_0x10ff30;if(this[_0x2660d2(0xa9a)]()[_0x2660d2(0x7ed)]['match'](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i))return String(RegExp['$1'])[_0x2660d2(0x5f0)](/[\r\n]+/);else{if(_0x2660d2(0x8c5)===_0x2660d2(0x8c5))return VisuMZ[_0x2660d2(0x95b)][_0x2660d2(0x928)]['ActorCmd'][_0x2660d2(0x704)];else _0x3b75a4['BattleCore'][_0x2660d2(0x6a9)][_0x2660d2(0xb96)](this),this[_0x2660d2(0x373)](),this['resetResultSwitches']();}},Game_Actor['prototype'][_0x10ff30(0x5fc)]=function(){const _0x3d47c3=_0x10ff30;if(this[_0x3d47c3(0x3f7)][_0x3d47c3(0x4d7)]!==undefined)return this[_0x3d47c3(0x3f7)]['svAnchorX'];if(this['actor']()[_0x3d47c3(0x7ed)][_0x3d47c3(0x22f)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)){if(_0x3d47c3(0x75e)!==_0x3d47c3(0x9d0))this[_0x3d47c3(0x3f7)][_0x3d47c3(0x4d7)]=eval(RegExp['$1']),this[_0x3d47c3(0x3f7)][_0x3d47c3(0x275)]=eval(RegExp['$2']);else{this[_0x3d47c3(0x395)](_0x3d47c3(0x7f5),_0xfcfbaf);if(!_0x314753[_0x3d47c3(0x95b)][_0x3d47c3(0x928)][_0x3d47c3(0x5f4)]['ShowReflect'])return;this[_0x3d47c3(0x395)](_0x3d47c3(0x657),_0x1fd064[_0x3d47c3(0x7bd)][_0x3d47c3(0x958)](_0x161840[_0x3d47c3(0x52f)]()));}}else this[_0x3d47c3(0x3f7)]['svAnchorX']=Game_Battler[_0x3d47c3(0xb0c)][_0x3d47c3(0x5fc)]['call'](this);return this['_cache'][_0x3d47c3(0x4d7)];},Game_Actor[_0x10ff30(0xb0c)]['svBattlerAnchorY']=function(){const _0x3db62b=_0x10ff30;if(this[_0x3db62b(0x3f7)][_0x3db62b(0x275)]!==undefined)return this['_cache'][_0x3db62b(0x275)];if(this[_0x3db62b(0x9fe)]()[_0x3db62b(0x7ed)][_0x3db62b(0x22f)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i))'PmwcG'!==_0x3db62b(0x903)?(this['_cache'][_0x3db62b(0x4d7)]=eval(RegExp['$1']),this[_0x3db62b(0x3f7)][_0x3db62b(0x275)]=eval(RegExp['$2'])):this[_0x3db62b(0xaf4)]=!![];else{if(_0x3db62b(0x863)!==_0x3db62b(0xbd8))this['_cache']['svAnchorY']=Game_Battler[_0x3db62b(0xb0c)][_0x3db62b(0xbf8)][_0x3db62b(0xb96)](this);else return this['_cache']=this[_0x3db62b(0x3f7)]||{},this[_0x3db62b(0x3f7)][_0x24edcc]!==_0x9a2765;}return this[_0x3db62b(0x3f7)]['svAnchorY'];},Game_Actor['prototype'][_0x10ff30(0xa7d)]=function(){const _0x3a66c5=_0x10ff30;if(this[_0x3a66c5(0x3f7)][_0x3a66c5(0x66f)]!==undefined)return this[_0x3a66c5(0x3f7)][_0x3a66c5(0x66f)];if(this[_0x3a66c5(0x9fe)]()[_0x3a66c5(0x7ed)][_0x3a66c5(0x22f)](/<SIDEVIEW SHOW SHADOW>/i))this['_cache'][_0x3a66c5(0x66f)]=!![];else{if(this[_0x3a66c5(0x9fe)]()[_0x3a66c5(0x7ed)][_0x3a66c5(0x22f)](/<SIDEVIEW HIDE SHADOW>/i))this[_0x3a66c5(0x3f7)][_0x3a66c5(0x66f)]=![];else{if(_0x3a66c5(0x89b)!==_0x3a66c5(0x89b)){if(!this[_0x3a66c5(0x920)]())return;if(!this[_0x3a66c5(0x83c)])this[_0x3a66c5(0x965)]();this[_0x3a66c5(0xbf2)](),this[_0x3a66c5(0x4b4)]();}else this[_0x3a66c5(0x3f7)][_0x3a66c5(0x66f)]=Game_Battler['prototype'][_0x3a66c5(0xa7d)][_0x3a66c5(0xb96)](this);}}return this[_0x3a66c5(0x3f7)]['svShadow'];},Game_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x79c)]=function(){const _0x4e5362=_0x10ff30;return VisuMZ['BattleCore'][_0x4e5362(0x928)]['Actor']['SmoothImage'];},Game_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x807)]=function(){const _0x3a4670=_0x10ff30,_0x16d1b8=this['weapons'](),_0x8763c4=_0x16d1b8[0x0]?_0x16d1b8[0x0]['wtypeId']:0x0,_0x4a3e2e=$dataSystem['attackMotions'][_0x8763c4];if(_0x4a3e2e){if(_0x3a4670(0xad5)!=='kciHb'){if(!_0x3dde70['_autoBattle'])return;(_0x57ae60[_0x3a4670(0x40b)]('ok')||_0x59c531[_0x3a4670(0x40b)](_0x3a4670(0x535))||_0x415f4c[_0x3a4670(0xaf5)]()||_0x63c620[_0x3a4670(0x766)]())&&(_0x39a7ff['playCancel'](),_0x3d4151[_0x3a4670(0xa92)]=![],_0x4506c5['clear'](),_0x5a1b39[_0x3a4670(0xb10)]());}else this[_0x3a4670(0x553)](_0x4a3e2e[_0x3a4670(0x63e)]);}},Game_Actor[_0x10ff30(0xb0c)][_0x10ff30(0xb9d)]=function(_0x226d41){const _0x521105=_0x10ff30;Game_Battler[_0x521105(0xb0c)][_0x521105(0xb9d)][_0x521105(0xb96)](this,_0x226d41),this[_0x521105(0x2ba)](_0x226d41);},Game_Actor['prototype'][_0x10ff30(0x4f0)]=function(){const _0x3c0507=_0x10ff30,_0x3ff69d=this[_0x3c0507(0x62b)](),_0xec6320=_0x3ff69d[0x0]?_0x3ff69d[0x0]['wtypeId']:0x0;return $dataSystem[_0x3c0507(0x231)][_0xec6320];},Game_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x78a)]=function(_0x58f610){const _0x5cef80=_0x10ff30;_0x58f610=_0x58f610||0x1,_0x58f610--;const _0x2bab65=this[_0x5cef80(0x62b)]();return _0x2bab65[_0x58f610]?_0x2bab65[_0x58f610][_0x5cef80(0x72e)]:0x0;},Game_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x816)]=function(_0x40f33a){const _0x45ba41=_0x10ff30;_0x40f33a=_0x40f33a||0x1,_0x40f33a--;const _0x52f552=this[_0x45ba41(0x62b)](),_0x42d30d=_0x52f552[_0x40f33a]?_0x52f552[_0x40f33a]['wtypeId']:0x0;return $dataSystem[_0x45ba41(0x231)][_0x42d30d];},Game_Actor[_0x10ff30(0xb0c)][_0x10ff30(0xc56)]=function(_0x276b13){const _0x328b4d=_0x10ff30;_0x276b13=_0x276b13||0x1,_0x276b13--;const _0x363164=this[_0x328b4d(0x62b)](),_0x40fb17=_0x363164[_0x276b13]?_0x363164[_0x276b13]['wtypeId']:0x0,_0x418abe=$dataSystem['attackMotions'][_0x40fb17];if(_0x418abe){if(_0x328b4d(0x45a)!==_0x328b4d(0x45a))return _0x4cf425[_0x328b4d(0xc1e)]()?(_0x3116ab[_0x328b4d(0x2df)][_0x328b4d(0x93a)]['changeBattlebacks'](_0x495588[0x0],_0x451252[0x1]),!![]):_0x1167f0[_0x328b4d(0x95b)][_0x328b4d(0x1d6)][_0x328b4d(0xb96)](this,_0x456e51);else{if(_0x418abe[_0x328b4d(0x589)]===0x0)this['requestMotion']('thrust');else{if(_0x418abe[_0x328b4d(0x589)]===0x1)this['requestMotion'](_0x328b4d(0x762));else _0x418abe[_0x328b4d(0x589)]===0x2&&('jkWXt'!==_0x328b4d(0x531)?(this[_0x328b4d(0x7e9)]=this[_0x328b4d(0x8a1)](this[_0x328b4d(0x7e9)],this[_0x328b4d(0x63b)],_0x5b62fc,_0x1078ff,_0x25528c),this['_homeY']=this[_0x328b4d(0x8a1)](this[_0x328b4d(0x2f8)],this['_targetHomeY'],_0x21890a,_0x154c99,_0x53c38a)):this[_0x328b4d(0x918)]('missile'));}this[_0x328b4d(0x553)](_0x418abe[_0x328b4d(0x63e)]);}}},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x3d9)]=function(_0xa84b3f){const _0x25c3c0=_0x10ff30;this[_0x25c3c0(0x2ef)]=_0xa84b3f||0x0,this[_0x25c3c0(0x3f7)]={};},Game_Battler['prototype'][_0x10ff30(0x52e)]=function(){const _0x5c8519=_0x10ff30;this['_activeWeaponSlot']=this[_0x5c8519(0x2ef)]||0x0,this[_0x5c8519(0x2ef)]++,this[_0x5c8519(0x3f7)]={};},Game_Battler[_0x10ff30(0xb0c)][_0x10ff30(0xa72)]=function(){const _0x5243c2=_0x10ff30;this[_0x5243c2(0x2ef)]=undefined,this['_cache']={};},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xbfe)]=Game_Actor['prototype'][_0x10ff30(0xb9c)],Game_Actor[_0x10ff30(0xb0c)][_0x10ff30(0xb9c)]=function(){const _0x638dcf=_0x10ff30;let _0x48ef41=VisuMZ['BattleCore'][_0x638dcf(0xbfe)][_0x638dcf(0xb96)](this);if(this['_tempEquipCheck'])return _0x48ef41;if(this['_activeWeaponSlot']!==undefined){this[_0x638dcf(0x25b)]=!![];const _0x4386f0=this[_0x638dcf(0x437)]();for(let _0x111d4c=0x0;_0x111d4c<_0x4386f0[_0x638dcf(0x449)];_0x111d4c++){_0x4386f0[_0x111d4c]===0x1&&this[_0x638dcf(0x2ef)]!==_0x111d4c&&(_0x638dcf(0x37d)===_0x638dcf(0x5b1)?this[_0x638dcf(0x889)]()[_0x638dcf(0x976)](_0x34d49e):_0x48ef41[_0x111d4c]=null);}this[_0x638dcf(0x25b)]=undefined;}return _0x48ef41;},Window_BattleLog['prototype'][_0x10ff30(0x232)]=function(_0x417fa3){const _0x30497d=_0x10ff30;return _0x417fa3['isActor']()?_0x417fa3[_0x30497d(0x62b)]()['length']||0x1:0x1;},Window_BattleLog['prototype'][_0x10ff30(0x6a6)]=function(_0x128c9b,_0x536b00){const _0xef0b14=_0x10ff30;_0x128c9b&&_0x128c9b['isActor']()&&_0x128c9b['setActiveWeaponSlot'](_0x536b00),this[_0xef0b14(0x86c)]();},Window_BattleLog['prototype'][_0x10ff30(0x5bf)]=function(_0x39ac12){const _0x35eb9f=_0x10ff30;_0x39ac12&&_0x39ac12['isActor']()&&_0x39ac12[_0x35eb9f(0xa72)](),this[_0x35eb9f(0x86c)]();},Game_Actor[_0x10ff30(0xb0c)]['battleUIOffsetX']=function(){const _0x257926=_0x10ff30;let _0x4c9514=_0x257926(0x4b0);if(this[_0x257926(0x46f)](_0x4c9514))return this['_cache'][_0x4c9514];return this[_0x257926(0x3f7)][_0x4c9514]=this[_0x257926(0x5ee)](this['actor']()),this[_0x257926(0x3f7)][_0x4c9514];},Game_Actor['prototype'][_0x10ff30(0xbb5)]=function(){const _0x2cc011=_0x10ff30;let _0x307fc5=_0x2cc011(0xbb5);if(this[_0x2cc011(0x46f)](_0x307fc5))return this['_cache'][_0x307fc5];return this[_0x2cc011(0x3f7)][_0x307fc5]=this['createBattleUIOffsetY'](this['actor']()),this[_0x2cc011(0x3f7)][_0x307fc5];},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x65f)]=Game_Enemy['prototype'][_0x10ff30(0x542)],Game_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0x542)]=function(_0x1e63ba,_0x1c2b69,_0x48b187){const _0x383872=_0x10ff30;_0x1e63ba=DataManager[_0x383872(0xaea)](_0x1e63ba),VisuMZ[_0x383872(0x95b)][_0x383872(0x65f)][_0x383872(0xb96)](this,_0x1e63ba,_0x1c2b69,_0x48b187),Imported['VisuMZ_1_ElementStatusCore']&&this[_0x383872(0xb48)](),this[_0x383872(0x9a9)](),this[_0x383872(0x3eb)](),Imported[_0x383872(0xb05)]&&(_0x383872(0x4b2)===_0x383872(0x4b2)?this['recoverAll']():this[_0x383872(0x3ea)]());},Game_Enemy['prototype'][_0x10ff30(0x9a9)]=function(){const _0x119372=_0x10ff30,_0x1fc6f8=VisuMZ['BattleCore'][_0x119372(0x928)][_0x119372(0x2ec)];this[_0x119372(0x9b2)]=_0x1fc6f8[_0x119372(0xbc9)],this[_0x119372(0xab5)]={};},Game_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0x3eb)]=function(){const _0x401bfb=_0x10ff30,_0x4045b3=VisuMZ[_0x401bfb(0x95b)][_0x401bfb(0x928)]['Enemy'],_0x27e4bc=this['enemy']()[_0x401bfb(0x7ed)];this['_svBattlerData']={'name':'','wtypeId':_0x4045b3[_0x401bfb(0x3e8)],'collapse':_0x4045b3[_0x401bfb(0x397)],'motionIdle':_0x4045b3[_0x401bfb(0xc89)],'width':_0x4045b3['Width']||0x40,'height':_0x4045b3[_0x401bfb(0xa0c)]||0x40,'anchorX':_0x4045b3[_0x401bfb(0xa93)]||0x0,'anchorY':_0x4045b3[_0x401bfb(0x575)]||0x0,'shadow':_0x4045b3[_0x401bfb(0x45f)]};_0x27e4bc[_0x401bfb(0x22f)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this['_attackAnimationId']=Number(RegExp['$1']));const _0x251fad=this['_svBattlerData'];if(_0x27e4bc['match'](/<SIDEVIEW BATTLER: (.*)>/i))_0x251fad['name']=String(RegExp['$1']);else{if(_0x27e4bc[_0x401bfb(0x22f)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x32be22=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x401bfb(0xc04)]('');_0x251fad[_0x401bfb(0x52f)]=DataManager[_0x401bfb(0xa2b)](_0x32be22);}}_0x27e4bc[_0x401bfb(0x22f)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x251fad[_0x401bfb(0x7a0)]=eval(RegExp['$1']),_0x251fad['anchorY']=eval(RegExp['$2']));if(_0x27e4bc[_0x401bfb(0x22f)](/<SIDEVIEW COLLAPSE>/i)){if('DyfDv'!==_0x401bfb(0xaae))_0x251fad[_0x401bfb(0xa10)]=!![];else{if(_0x223d65){const _0x3510f4=_0x3234da['battler']();this[_0x401bfb(0x395)](_0x401bfb(0x957),[_0x12242a],_0x454cf0,_0x2f23bf),this['push']('performMoveToPoint',_0x5c8c7e,_0x3510f4[_0x401bfb(0x7e9)],_0x3510f4[_0x401bfb(0x2f8)],_0x25c5eb,![],'Linear'),this[_0x401bfb(0x395)](_0x401bfb(0x918),[_0x30279a],'evade'),this[_0x401bfb(0x395)](_0x401bfb(0x713)),this['push'](_0x401bfb(0x918),[_0x2f4869],_0x401bfb(0x646));}}}else _0x27e4bc[_0x401bfb(0x22f)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x251fad['collapse']=![]);if(_0x27e4bc[_0x401bfb(0x22f)](/<SIDEVIEW SHOW SHADOW>/i))_0x401bfb(0x4b8)!==_0x401bfb(0x57a)?_0x251fad[_0x401bfb(0x8d8)]=!![]:(_0x172d3a=(_0x8670d7+_0x241831)/0x2,_0x2e6d9a=-0x1);else{if(_0x27e4bc['match'](/<SIDEVIEW HIDE SHADOW>/i)){if(_0x401bfb(0x583)!==_0x401bfb(0xc9e))_0x251fad[_0x401bfb(0x8d8)]=![];else{if(!_0x393c00[_0x401bfb(0x95b)][_0x401bfb(0x928)][_0x401bfb(0xa21)]['ShowFacesListStyle'])return;const _0x449e91=this[_0x401bfb(0x9fe)](_0x51e42a),_0x156597=this['itemRect'](_0x217ea3);_0x156597[_0x401bfb(0x7b2)]=_0x1ff505[_0x401bfb(0x2a0)],_0x156597[_0x401bfb(0x956)]-=0x2,this[_0x401bfb(0x935)](_0x449e91,_0x156597['x']+0x1,_0x156597['y']+0x1,_0x156597[_0x401bfb(0x7b2)],_0x156597[_0x401bfb(0x956)]);}}}if(_0x27e4bc['match'](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x401bfb(0xc82)==='TPPES'?_0xcc1b64=_0x33f63a[this[_0x401bfb(0x4e8)][_0x401bfb(0xb43)]()]:_0x251fad[_0x401bfb(0x558)]=String(RegExp['$1'])[_0x401bfb(0x799)]()[_0x401bfb(0x6a3)]();else{if(_0x27e4bc[_0x401bfb(0x22f)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x2597b4=String(RegExp['$1'])[_0x401bfb(0x5f0)](/[\r\n]+/)[_0x401bfb(0xc04)]('');_0x251fad[_0x401bfb(0x558)]=DataManager[_0x401bfb(0xa2b)](_0x2597b4);}}_0x27e4bc[_0x401bfb(0x22f)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x251fad['width']=Number(RegExp['$1']),_0x251fad[_0x401bfb(0x956)]=Number(RegExp['$2']));if(_0x27e4bc['match'](/<SIDEVIEW WEAPON: (.*)>/i))_0x251fad[_0x401bfb(0x2c5)]=DataManager['getWtypeIdWithName'](RegExp['$1']);else{if(_0x27e4bc[_0x401bfb(0x22f)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x4559c7=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x401bfb(0xc04)](''),_0x33a9ad=DataManager[_0x401bfb(0xa2b)](_0x4559c7);_0x251fad[_0x401bfb(0x2c5)]=DataManager[_0x401bfb(0x932)](_0x33a9ad);}}if(Imported[_0x401bfb(0xb05)]){const _0x708e87=this[_0x401bfb(0xc70)]();for(const _0x38894a of _0x708e87){const _0x35c8f0=this[_0x401bfb(0x87e)](_0x38894a)['Name'][_0x401bfb(0x9d9)]()[_0x401bfb(0x6a3)](),_0x38c6f8=_0x38894a['toUpperCase']()[_0x401bfb(0x6a3)]();if(_0x27e4bc[_0x401bfb(0x22f)](VisuMZ[_0x401bfb(0x314)][_0x401bfb(0x694)]['SvBattlerSolo-%1-%2'['format'](_0x38c6f8,_0x35c8f0)]))_0x401bfb(0x7fe)!=='ldJrG'?_0x251fad[_0x401bfb(0x52f)]=String(RegExp['$1']):(this[_0x401bfb(0x4af)]['x']=(_0xafe911[_0x401bfb(0x7b2)]-_0xe4735a[_0x401bfb(0xb97)])/0x2,this[_0x401bfb(0x4af)]['y']=(_0x2cb853[_0x401bfb(0x956)]-_0x3b8069[_0x401bfb(0x9be)])/0x2);else{if(_0x27e4bc['match'](VisuMZ[_0x401bfb(0x314)][_0x401bfb(0x694)][_0x401bfb(0x8ce)[_0x401bfb(0x958)](_0x38c6f8,_0x35c8f0)])){const _0x343900=String(RegExp['$1'])[_0x401bfb(0x5f0)](/[\r\n]+/)[_0x401bfb(0xc04)]('');_0x251fad[_0x401bfb(0x52f)]=DataManager[_0x401bfb(0xa2b)](_0x343900);}}if(_0x27e4bc[_0x401bfb(0x22f)](VisuMZ[_0x401bfb(0x314)]['RegExp'][_0x401bfb(0x7e3)[_0x401bfb(0x958)](_0x38c6f8,_0x35c8f0)]))_0x251fad[_0x401bfb(0x2c5)]=DataManager[_0x401bfb(0x932)](RegExp['$1']);else{if(_0x27e4bc[_0x401bfb(0x22f)](VisuMZ['ElementStatusCore']['RegExp'][_0x401bfb(0x470)['format'](_0x38c6f8,_0x35c8f0)])){const _0x33f716=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x401bfb(0xc04)](''),_0x7ba1a8=DataManager[_0x401bfb(0xa2b)](_0x33f716);_0x251fad[_0x401bfb(0x2c5)]=DataManager[_0x401bfb(0x932)](_0x7ba1a8);}}if(_0x27e4bc[_0x401bfb(0x22f)](VisuMZ[_0x401bfb(0x314)][_0x401bfb(0x694)][_0x401bfb(0x3a8)[_0x401bfb(0x958)](_0x38c6f8,_0x35c8f0)]))_0x401bfb(0x6f6)!==_0x401bfb(0x484)?_0x251fad[_0x401bfb(0x558)]=String(RegExp['$1'])[_0x401bfb(0x799)]()[_0x401bfb(0x6a3)]():this['initialize'](...arguments);else{if(_0x27e4bc[_0x401bfb(0x22f)](VisuMZ[_0x401bfb(0x314)]['RegExp'][_0x401bfb(0xbe1)[_0x401bfb(0x958)](_0x38c6f8,_0x35c8f0)])){if(_0x401bfb(0x7f0)!==_0x401bfb(0x415)){const _0x18c814=String(RegExp['$1'])[_0x401bfb(0x5f0)](/[\r\n]+/)['remove']('');_0x251fad[_0x401bfb(0x558)]=DataManager[_0x401bfb(0xa2b)](_0x18c814);}else _0x3a698e=_0x57c27d[_0x401bfb(0x843)]()[_0x401bfb(0x7e9)],_0x27eb46=_0x378944[_0x401bfb(0x843)]()[_0x401bfb(0x2f8)];}}}}},Game_Enemy['prototype'][_0x10ff30(0xba2)]=function(){return this['_attackAnimationId']||0x0;},Game_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0xc3c)]=function(){return this['attackAnimationId1']();},Game_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0x78a)]=function(_0x105564){return this['attackAnimationId1']();},Game_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0x92d)]=function(){const _0x43e5e1=_0x10ff30;if(this[_0x43e5e1(0x296)]()[_0x43e5e1(0x7ed)][_0x43e5e1(0x22f)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x43e5e1(0xb0c)][_0x43e5e1(0x92d)][_0x43e5e1(0xb96)](this);},Game_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0x214)]=function(){const _0x9c2d72=_0x10ff30;if(this[_0x9c2d72(0x296)]()['note'][_0x9c2d72(0x22f)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0x8dd)]=function(){const _0x2d4044=_0x10ff30,_0x3e7ea1=[];for(const _0xb2f1d1 of this[_0x2d4044(0x296)]()['actions']){if(_0x2d4044(0x50e)===_0x2d4044(0x50e)){const _0x286c40=$dataSkills[_0xb2f1d1['skillId']];if(_0x286c40&&!_0x3e7ea1[_0x2d4044(0x778)](_0x286c40))_0x3e7ea1[_0x2d4044(0x395)](_0x286c40);}else _0x4f3d07['BattleCore'][_0x2d4044(0x35b)]['call'](this,_0x5f264a),this[_0x2d4044(0xcb2)](_0x66428e),this['clearDamagePopup']();}return _0x3e7ea1;},Game_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0x4b0)]=function(){const _0x441a01=_0x10ff30;let _0x1dd6b6=_0x441a01(0x4b0);if(this['checkCacheKey'](_0x1dd6b6))return this[_0x441a01(0x3f7)][_0x1dd6b6];return this[_0x441a01(0x3f7)][_0x1dd6b6]=this[_0x441a01(0x5ee)](this[_0x441a01(0x296)]()),this[_0x441a01(0x3f7)][_0x1dd6b6];},Game_Enemy['prototype']['battleUIOffsetY']=function(){const _0x523ac8=_0x10ff30;let _0x223e4b=_0x523ac8(0xbb5);if(this[_0x523ac8(0x46f)](_0x223e4b))return this[_0x523ac8(0x3f7)][_0x223e4b];return this[_0x523ac8(0x3f7)][_0x223e4b]=this[_0x523ac8(0x68c)](this['enemy']()),this[_0x523ac8(0x3f7)][_0x223e4b];},Game_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0x8db)]=function(){const _0x310217=_0x10ff30;if(this['_svBattlerData']!==undefined)return this[_0x310217(0xab5)];return this['setupBattleCoreData'](),this[_0x310217(0xab5)];},Game_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0xc4a)]=function(){const _0x2d4421=_0x10ff30;return this['svBattlerData']()[_0x2d4421(0x52f)]!=='';},Game_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0xaa4)]=function(){const _0x1caef0=_0x10ff30;return this[_0x1caef0(0x8db)]()[_0x1caef0(0x52f)];},Game_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0x79c)]=function(){const _0x39993c=_0x10ff30;if(this[_0x39993c(0xc4a)]()){if('vCPIs'!==_0x39993c(0xa3a))return VisuMZ[_0x39993c(0x95b)][_0x39993c(0x928)][_0x39993c(0x25e)]['SmoothImage'];else{if(!_0x1a0bd3[_0x39993c(0xc1e)]())return;if(!_0x2014b1['VisuMZ_3_ActSeqCamera'])return;const _0x4f316a=_0x2d4095[_0x39993c(0x621)]();if(!_0x4f316a)return;_0x4f316a[_0x39993c(0x4ca)](_0x39993c(0xa34));}}else return VisuMZ[_0x39993c(0x95b)][_0x39993c(0x928)][_0x39993c(0x2ec)][_0x39993c(0xb8d)];},Game_Enemy['prototype']['performAction']=function(_0x5c7e3e){const _0x5caba3=_0x10ff30;Game_Battler[_0x5caba3(0xb0c)]['performAction'][_0x5caba3(0xb96)](this,_0x5c7e3e);if(this['hasSvBattler']())this[_0x5caba3(0x2ba)](_0x5c7e3e);},Game_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0x62a)]=function(){const _0x5b58ff=_0x10ff30,_0x1d8deb=this[_0x5b58ff(0x8db)]()[_0x5b58ff(0x2c5)]||0x0,_0x57c680=$dataSystem[_0x5b58ff(0x231)][_0x1d8deb];if(_0x57c680){if(_0x57c680[_0x5b58ff(0x589)]===0x0)this[_0x5b58ff(0x918)]('thrust');else{if(_0x57c680[_0x5b58ff(0x589)]===0x1)this[_0x5b58ff(0x918)](_0x5b58ff(0x762));else{if(_0x57c680[_0x5b58ff(0x589)]===0x2){if(_0x5b58ff(0x6d9)!==_0x5b58ff(0x6d9))return _0x3de2a['jsScaleUp'][_0x5b58ff(0xb96)](this);else this[_0x5b58ff(0x918)](_0x5b58ff(0x417));}}}}},Game_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0x807)]=function(){const _0x3ebac9=_0x10ff30,_0x189efb=this[_0x3ebac9(0x8db)]()[_0x3ebac9(0x2c5)]||0x0,_0x19b8f4=$dataSystem[_0x3ebac9(0x231)][_0x189efb];_0x19b8f4&&this[_0x3ebac9(0x553)](_0x19b8f4[_0x3ebac9(0x63e)]);},Game_Enemy[_0x10ff30(0xb0c)]['getAttackMotion']=function(){const _0x35c2f0=_0x10ff30,_0x3196ea=this[_0x35c2f0(0x8db)]()[_0x35c2f0(0x2c5)]||0x0;return $dataSystem[_0x35c2f0(0x231)][_0x3196ea];},Game_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0x816)]=function(_0x282fa0){const _0x4ddbed=_0x10ff30;return this[_0x4ddbed(0x4f0)]();},Game_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0xb94)]=function(){const _0x16f128=_0x10ff30;Game_Battler[_0x16f128(0xb0c)][_0x16f128(0xb94)][_0x16f128(0xb96)](this),this['isSpriteVisible']()&&this['hasSvBattler']()&&this[_0x16f128(0x918)](_0x16f128(0xb64)),SoundManager[_0x16f128(0x308)]();},Game_Enemy[_0x10ff30(0xb0c)]['performEvasion']=function(){const _0x8546e7=_0x10ff30;Game_Battler[_0x8546e7(0xb0c)][_0x8546e7(0xa4d)]['call'](this),this[_0x8546e7(0x918)](_0x8546e7(0x565));},Game_Enemy['prototype'][_0x10ff30(0x767)]=function(){const _0x5abe56=_0x10ff30;Game_Battler[_0x5abe56(0xb0c)][_0x5abe56(0x767)]['call'](this),this[_0x5abe56(0x918)]('evade');},Game_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0x6a8)]=function(){const _0x32db42=_0x10ff30;Game_Battler[_0x32db42(0xb0c)][_0x32db42(0x6a8)][_0x32db42(0xb96)](this),this['performAttack']();},Game_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0x9e1)]=function(){const _0x2e0f5e=_0x10ff30;if(this[_0x2e0f5e(0xc4a)]()){if(this[_0x2e0f5e(0xa20)]()>=0x1)return!![];return this[_0x2e0f5e(0x8db)]()[_0x2e0f5e(0xa10)];}else return!![];},Game_Enemy['prototype'][_0x10ff30(0x5fc)]=function(){const _0x257ea0=_0x10ff30;return this[_0x257ea0(0x8db)]()[_0x257ea0(0x7a0)];},Game_Enemy[_0x10ff30(0xb0c)]['svBattlerAnchorY']=function(){const _0x4b89bd=_0x10ff30;return this[_0x4b89bd(0x8db)]()['anchorY'];},Game_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0xa7d)]=function(){const _0x55c469=_0x10ff30;return this[_0x55c469(0x8db)]()['shadow'];},VisuMZ[_0x10ff30(0x95b)]['Game_Enemy_transform']=Game_Enemy['prototype'][_0x10ff30(0x574)],Game_Enemy[_0x10ff30(0xb0c)]['transform']=function(_0x277c93){const _0x187ba2=_0x10ff30;VisuMZ[_0x187ba2(0x95b)][_0x187ba2(0x5f6)]['call'](this,_0x277c93),this[_0x187ba2(0x9a9)](),this['setupBattleCoreData']();const _0x59aa00=this['battler']();if(_0x59aa00)_0x59aa00[_0x187ba2(0x56b)](this);},Game_Unit[_0x10ff30(0xb0c)][_0x10ff30(0x1f3)]=function(_0x2191af){const _0x3b91ff=_0x10ff30;for(const _0x45ca90 of this[_0x3b91ff(0x660)]()){if(_0x45ca90)_0x45ca90[_0x3b91ff(0x1f3)](_0x2191af);}},Game_Unit[_0x10ff30(0xb0c)]['trueRandomTarget']=function(){const _0x506317=_0x10ff30,_0x593af5=this[_0x506317(0xc07)]();return _0x593af5[Math[_0x506317(0x8c1)](_0x593af5[_0x506317(0x449)])];},VisuMZ['BattleCore'][_0x10ff30(0xa0b)]=Game_Party[_0x10ff30(0xb0c)][_0x10ff30(0xc52)],Game_Party[_0x10ff30(0xb0c)][_0x10ff30(0xc52)]=function(_0x4fb2cb){const _0x4727c8=_0x10ff30;VisuMZ['BattleCore'][_0x4727c8(0xa0b)][_0x4727c8(0xb96)](this,_0x4fb2cb),BattleManager[_0x4727c8(0x8ba)]();},VisuMZ['BattleCore'][_0x10ff30(0x50b)]=Game_Party['prototype'][_0x10ff30(0xab7)],Game_Party[_0x10ff30(0xb0c)]['removeActor']=function(_0x260684){const _0x3c4776=_0x10ff30;VisuMZ['BattleCore'][_0x3c4776(0x50b)][_0x3c4776(0xb96)](this,_0x260684),BattleManager[_0x3c4776(0x8ba)]();},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x480)]=Game_Troop['prototype'][_0x10ff30(0x542)],Game_Troop[_0x10ff30(0xb0c)][_0x10ff30(0x542)]=function(_0x40b7bc){const _0x5dbea7=_0x10ff30;$gameTemp[_0x5dbea7(0x353)](),$gameTemp[_0x5dbea7(0x825)](_0x40b7bc),VisuMZ[_0x5dbea7(0x95b)][_0x5dbea7(0x480)][_0x5dbea7(0xb96)](this,_0x40b7bc),this[_0x5dbea7(0x9fa)]();},VisuMZ['BattleCore'][_0x10ff30(0x622)]=Game_Troop[_0x10ff30(0xb0c)][_0x10ff30(0x5c2)],Game_Troop['prototype'][_0x10ff30(0x5c2)]=function(){const _0x5cdec2=_0x10ff30;let _0x4ca474=VisuMZ[_0x5cdec2(0x95b)][_0x5cdec2(0x622)][_0x5cdec2(0xb96)](this);return this[_0x5cdec2(0x7a3)]&&(_0x4ca474*=this[_0x5cdec2(0x7a3)]()),Math[_0x5cdec2(0xbc5)](_0x4ca474);},Game_Troop[_0x10ff30(0xb0c)][_0x10ff30(0x7a3)]=function(){return 0x1;},Game_Troop['prototype']['extendTroopMembers']=function(){const _0x5df75b=_0x10ff30,_0x367114=this[_0x5df75b(0x298)]()[_0x5df75b(0x52f)]||'';if(_0x367114[_0x5df75b(0x22f)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x10a804=RegExp['$1'][_0x5df75b(0x5f0)](',')['map'](_0x64d0b0=>Number(_0x64d0b0));this[_0x5df75b(0x547)](),this[_0x5df75b(0x8c0)](_0x10a804);}},Game_Troop[_0x10ff30(0xb0c)][_0x10ff30(0x547)]=function(){const _0x45e7d4=_0x10ff30;let _0x5847c7='Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest'+'\x0a';_0x5847c7+=_0x45e7d4(0x536);Imported[_0x45e7d4(0x27f)]&&(_0x45e7d4(0x838)==='WoUdG'?(this[_0x45e7d4(0x3f7)]={},_0x562d7d[_0x45e7d4(0x95b)][_0x45e7d4(0x790)][_0x45e7d4(0xb96)](this)):VisuMZ[_0x45e7d4(0xb7f)][_0x45e7d4(0x994)]<1.11&&(alert(_0x5847c7[_0x45e7d4(0x958)](_0x45e7d4(0x848))),SceneManager[_0x45e7d4(0xa8c)]()));if(Imported['VisuMZ_2_BattleSystemCTB']){if(_0x45e7d4(0x785)!==_0x45e7d4(0x785))return _0x32cb1f['BattleCore'][_0x45e7d4(0x928)][_0x45e7d4(0xc78)][_0x45e7d4(0x3d3)];else VisuMZ[_0x45e7d4(0xb54)]['version']<1.19&&(alert(_0x5847c7[_0x45e7d4(0x958)](_0x45e7d4(0x92c))),SceneManager[_0x45e7d4(0xa8c)]());}Imported[_0x45e7d4(0xb84)]&&(_0x45e7d4(0x36d)!==_0x45e7d4(0x36d)?this[_0x45e7d4(0x600)](...arguments):VisuMZ[_0x45e7d4(0x71e)][_0x45e7d4(0x994)]<1.15&&(alert(_0x5847c7[_0x45e7d4(0x958)](_0x45e7d4(0xb62))),SceneManager['exit']()));},Game_Troop[_0x10ff30(0xb0c)][_0x10ff30(0x8c0)]=function(_0x3c734b){const _0x1ef58f=_0x10ff30;this[_0x1ef58f(0x618)]={};for(const _0x86e941 of this[_0x1ef58f(0x660)]()){if(!_0x86e941)continue;_0x86e941['setLetter']('');}for(const _0x293f94 of _0x3c734b){const _0x492d69=$dataTroops[_0x293f94];if(_0x492d69)this[_0x1ef58f(0x885)](_0x492d69);}this[_0x1ef58f(0xcc9)]();},Game_Troop[_0x10ff30(0xb0c)][_0x10ff30(0x885)]=function(_0x22f046){const _0x66d3c9=_0x10ff30;for(const _0x215a7a of _0x22f046[_0x66d3c9(0x660)]){if($dataEnemies[_0x215a7a['enemyId']]){if(_0x66d3c9(0xc0d)===_0x66d3c9(0xc0d)){const _0x40a450=_0x215a7a[_0x66d3c9(0x68d)],_0x5b5b72=_0x215a7a['x'],_0x15af11=_0x215a7a['y'],_0x739b4d=new Game_Enemy(_0x40a450,_0x5b5b72,_0x15af11);_0x215a7a[_0x66d3c9(0x89d)]&&_0x739b4d[_0x66d3c9(0x34b)](),this['_enemies'][_0x66d3c9(0x395)](_0x739b4d);}else{if(!_0x451d92)return;if(!this[_0x66d3c9(0x6ca)])return;this[_0x66d3c9(0x6ca)][_0x66d3c9(0x8eb)]['x']=this['_actor']['svBattlerAnchorX'](),this[_0x66d3c9(0x6ca)][_0x66d3c9(0x8eb)]['y']=this['_actor'][_0x66d3c9(0xbf8)](),this[_0x66d3c9(0x456)]();}}}},VisuMZ['BattleCore'][_0x10ff30(0xcc2)]=Game_Map[_0x10ff30(0xb0c)][_0x10ff30(0x662)],Game_Map['prototype'][_0x10ff30(0x662)]=function(){const _0x26ab4c=_0x10ff30;VisuMZ[_0x26ab4c(0x95b)][_0x26ab4c(0xcc2)][_0x26ab4c(0xb96)](this),this[_0x26ab4c(0x2d4)]();},Game_Map[_0x10ff30(0xb0c)][_0x10ff30(0x2d4)]=function(){const _0x1d9d18=_0x10ff30;this[_0x1d9d18(0xcc8)]={},this[_0x1d9d18(0x300)]={};if(!$dataMap)return;const _0x1f9d79=$dataMap[_0x1d9d18(0x7ed)];if(!_0x1f9d79)return;const _0xf94d16=_0x1f9d79[_0x1d9d18(0x22f)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0xf94d16){if(_0x1d9d18(0x21b)===_0x1d9d18(0x21b))for(const _0x3bdd62 of _0xf94d16){_0x3bdd62['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x2adebc=Number(RegExp['$1']),_0x16bbed=Number(RegExp['$2']),_0x393645=_0x16bbed===0x1?this[_0x1d9d18(0xcc8)]:this['_regionBattleback2'],_0x2c1d8a=String(RegExp['$3']);_0x393645[_0x2adebc]=_0x2c1d8a;}else _0x44a9db&&_0x22ca1e[_0x1d9d18(0x58a)]()&&_0x45e0e2[_0x1d9d18(0xa72)](),this['callNextMethod']();}},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x5c5)]=Game_Map['prototype'][_0x10ff30(0x5bc)],Game_Map['prototype'][_0x10ff30(0x5bc)]=function(){const _0x4bd44b=_0x10ff30;if(!BattleManager[_0x4bd44b(0x344)]()){const _0x58a0c7=$gamePlayer[_0x4bd44b(0xb87)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x4bd44b(0xcc8)]&&this[_0x4bd44b(0xcc8)][_0x58a0c7])return this[_0x4bd44b(0xcc8)][_0x58a0c7];}return VisuMZ[_0x4bd44b(0x95b)][_0x4bd44b(0x5c5)]['call'](this);},VisuMZ[_0x10ff30(0x95b)]['Game_Map_battleback2Name']=Game_Map[_0x10ff30(0xb0c)][_0x10ff30(0x607)],Game_Map[_0x10ff30(0xb0c)]['battleback2Name']=function(){const _0x4afb6e=_0x10ff30;if(!BattleManager[_0x4afb6e(0x344)]()){const _0x45ad83=$gamePlayer[_0x4afb6e(0xb87)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x4afb6e(0xcc8)]&&this[_0x4afb6e(0x300)][_0x45ad83])return this['_regionBattleback2'][_0x45ad83];}return VisuMZ[_0x4afb6e(0x95b)]['Game_Map_battleback2Name'][_0x4afb6e(0xb96)](this);},VisuMZ[_0x10ff30(0x95b)]['Game_Map_encounterList']=Game_Map[_0x10ff30(0xb0c)]['encounterList'],Game_Map[_0x10ff30(0xb0c)][_0x10ff30(0xcca)]=function(){const _0x3c5ff0=_0x10ff30;let _0x13820f=JsonEx['makeDeepCopy'](VisuMZ[_0x3c5ff0(0x95b)][_0x3c5ff0(0xc5d)][_0x3c5ff0(0xb96)](this));return VisuMZ['BattleCore'][_0x3c5ff0(0x72c)](_0x13820f);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x72c)]=function(_0x3a8291){const _0x4a5d7d=_0x10ff30;var _0x5a54f6,_0x383f8a,_0x3ee532;for(_0x3ee532=_0x3a8291[_0x4a5d7d(0x449)]-0x1;_0x3ee532>0x0;_0x3ee532--){_0x5a54f6=Math[_0x4a5d7d(0xcce)](Math['random']()*(_0x3ee532+0x1)),_0x383f8a=_0x3a8291[_0x3ee532],_0x3a8291[_0x3ee532]=_0x3a8291[_0x5a54f6],_0x3a8291[_0x5a54f6]=_0x383f8a;}return _0x3a8291;},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xb2a)]=Game_Interpreter[_0x10ff30(0xb0c)][_0x10ff30(0x609)],Game_Interpreter[_0x10ff30(0xb0c)][_0x10ff30(0x609)]=function(_0x43dce3){const _0x2438a0=_0x10ff30;return $gameTemp[_0x2438a0(0x3b0)](this),VisuMZ['BattleCore'][_0x2438a0(0xb2a)][_0x2438a0(0xb96)](this,_0x43dce3);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x455)]=Game_Interpreter['prototype'][_0x10ff30(0xb47)],Game_Interpreter[_0x10ff30(0xb0c)]['updateWaitMode']=function(){const _0xf2d3ed=_0x10ff30;if(SceneManager[_0xf2d3ed(0xc1e)]()){if(_0xf2d3ed(0x8f9)!==_0xf2d3ed(0x8f9)){let _0x7781e3=_0x13a16f[_0xf2d3ed(0x3e9)][_0xa37618];if(!_0x7781e3)return;let _0x28a6a1=_0x7781e3;const _0x2107bf=this[_0xf2d3ed(0xc23)]();if(_0x2107bf===_0xf2d3ed(0x39b))_0x28a6a1=_0x28a6a1[_0xf2d3ed(0x319)](/\x1I\[(\d+)\]/gi,''),_0x28a6a1=_0x28a6a1[_0xf2d3ed(0x319)](/\\I\[(\d+)\]/gi,'');else{if(!_0x7781e3[_0xf2d3ed(0x22f)](/\\I\[(\d+)\]/i)){const _0x5ef754=_0x535e70[_0xf2d3ed(0x55b)]?_0x1484a7[_0xf2d3ed(0x5cd)][_0xf2d3ed(0x928)]['Skills']:_0x1df493[_0xf2d3ed(0x95b)][_0xf2d3ed(0x928)][_0xf2d3ed(0x304)],_0x5ccfb5=_0x504fb7[_0xf2d3ed(0xaf3)][_0xf2d3ed(0x778)](_0x3551d9),_0x39895d=_0x5ccfb5?_0x5ef754[_0xf2d3ed(0xa4e)]:_0x5ef754[_0xf2d3ed(0x85f)];_0x28a6a1='\x5cI[%1]%2'[_0xf2d3ed(0x958)](_0x39895d,_0x7781e3);}}this['addCommand'](_0x28a6a1,_0xf2d3ed(0x36c),!![],_0x25514d);}else switch(this[_0xf2d3ed(0xb74)]){case _0xf2d3ed(0xa34):if(Imported[_0xf2d3ed(0xadf)]){if($gameScreen[_0xf2d3ed(0x684)]()['angleDuration']>0x0)return!![];this[_0xf2d3ed(0xb74)]='';}break;case _0xf2d3ed(0xcab):if(BattleManager[_0xf2d3ed(0x93a)][_0xf2d3ed(0x80f)]())return!![];this[_0xf2d3ed(0xb74)]='';break;case _0xf2d3ed(0xbb0):if(Imported[_0xf2d3ed(0xadf)]){if(_0xf2d3ed(0x333)===_0xf2d3ed(0xb8c)){if(!this[_0xf2d3ed(0xb4f)][_0xf2d3ed(0x8c2)]())return;while(this[_0xf2d3ed(0xb4f)][_0xf2d3ed(0x8c2)]()){this['_battler'][_0xf2d3ed(0x509)]()&&this[_0xf2d3ed(0x726)]();}this[_0xf2d3ed(0xb4f)][_0xf2d3ed(0x1d4)](),this[_0xf2d3ed(0xb4f)][_0xf2d3ed(0x60e)]();}else{if($gameScreen[_0xf2d3ed(0x684)]()['cameraDuration']>0x0)return!![];if($gameScreen[_0xf2d3ed(0x684)]()['cameraOffsetDuration']>0x0)return!![];this['_waitMode']='';}}break;case _0xf2d3ed(0x793):if(BattleManager[_0xf2d3ed(0x93a)][_0xf2d3ed(0x6e7)]())return!![];this['_waitMode']='';break;case'battleFloat':if(BattleManager[_0xf2d3ed(0x93a)][_0xf2d3ed(0x9bd)]())return!![];this[_0xf2d3ed(0xb74)]='';break;case _0xf2d3ed(0x5ad):if(BattleManager[_0xf2d3ed(0x93a)][_0xf2d3ed(0x45b)]())return!![];this[_0xf2d3ed(0xb74)]='';break;case _0xf2d3ed(0xc7e):if(BattleManager['_logWindow'][_0xf2d3ed(0x87c)]())return!![];this[_0xf2d3ed(0xb74)]='';break;case _0xf2d3ed(0xcd2):if(BattleManager['_spriteset'][_0xf2d3ed(0x9db)]())return!![];this['_waitMode']='';break;case _0xf2d3ed(0x81c):if(BattleManager[_0xf2d3ed(0x93a)][_0xf2d3ed(0xa50)]())return!![];this['_waitMode']='';break;case _0xf2d3ed(0x5fe):if(BattleManager[_0xf2d3ed(0x93a)][_0xf2d3ed(0x562)]())return!![];this[_0xf2d3ed(0xb74)]='';break;case _0xf2d3ed(0x237):if(BattleManager['_spriteset']['isAnyoneSkewing']())return!![];this[_0xf2d3ed(0xb74)]='';break;case _0xf2d3ed(0x4f7):if(Imported[_0xf2d3ed(0x20b)]){if(BattleManager[_0xf2d3ed(0x93a)]['isAnyProjectilePresent']())return!![];this['_waitMode']='';}break;case _0xf2d3ed(0x276):if(Imported[_0xf2d3ed(0xadf)]){if('qBYzA'===_0xf2d3ed(0x710)){if($gameScreen[_0xf2d3ed(0x684)]()[_0xf2d3ed(0x2ae)]>0x0)return!![];this[_0xf2d3ed(0xb74)]='';}else return this[_0xf2d3ed(0xad2)](_0xf2d3ed(0xc1f));}break;case _0xf2d3ed(0x9bc):if(BattleManager[_0xf2d3ed(0x93a)]['isAnyoneSpinning']())return!![];this[_0xf2d3ed(0xb74)]='';break;case'battleZoom':if(Imported[_0xf2d3ed(0xadf)]){if(_0xf2d3ed(0xa9b)==='PsAEB'){if($gameScreen[_0xf2d3ed(0x684)]()[_0xf2d3ed(0x361)]>0x0)return!![];this['_waitMode']='';}else _0x50cfe0+=_0x5d47bb['width']-_0x136edf;}break;case _0xf2d3ed(0x3b1):if(Imported[_0xf2d3ed(0xa47)]){if(BattleManager[_0xf2d3ed(0x93a)]['isAnyoneInjectAniPrepping']){if(_0xf2d3ed(0x9b1)!==_0xf2d3ed(0xac1)){if(BattleManager[_0xf2d3ed(0x93a)][_0xf2d3ed(0x86e)]())return!![];this[_0xf2d3ed(0xb74)]=_0xf2d3ed(0x773);}else _0x25cd98[_0xf2d3ed(0x95b)][_0xf2d3ed(0x520)](),_0x5b09c1[_0xf2d3ed(0x95b)]['BindCommonEventKeysForGroup'](_0x2b38d8),_0x3d2f4e[_0xf2d3ed(0x95b)][_0xf2d3ed(0x835)](_0x36f722);}else{if('CrEpk'==='Jnfot'){const _0x443912=_0x265052['prototype'][_0xf2d3ed(0x73e)][_0xf2d3ed(0xb96)](arguments,0x1);this[_0xf2d3ed(0x1d5)]['unshift']({'name':_0x40b2d8,'params':_0x443912});}else this[_0xf2d3ed(0xb74)]='';}break;}break;case _0xf2d3ed(0x773):if(Imported[_0xf2d3ed(0xa47)]){if(BattleManager[_0xf2d3ed(0x93a)][_0xf2d3ed(0x5bb)]())return!![];this[_0xf2d3ed(0xb74)]='';}break;}}return VisuMZ[_0xf2d3ed(0x95b)][_0xf2d3ed(0x455)][_0xf2d3ed(0xb96)](this);},VisuMZ['BattleCore'][_0x10ff30(0x853)]=Game_Interpreter['prototype'][_0x10ff30(0x407)],Game_Interpreter[_0x10ff30(0xb0c)][_0x10ff30(0x407)]=function(_0x234439){const _0x53ec44=_0x10ff30;return!$gameParty[_0x53ec44(0x54c)]()?_0x53ec44(0xa58)==='eygez'?this[_0x53ec44(0xc2b)][_0x53ec44(0x61b)](_0xfec701=>_0xfec701[_0x53ec44(0x34f)]===_0x546d9d&&_0xfec701[_0x53ec44(0x20a)]===_0x3eaeb1):this[_0x53ec44(0x9e0)](_0x234439):VisuMZ[_0x53ec44(0x95b)][_0x53ec44(0x853)][_0x53ec44(0xb96)](this,_0x234439);},Game_Interpreter[_0x10ff30(0xb0c)][_0x10ff30(0xbfc)]=function(_0x1cc0ae){const _0x149235=_0x10ff30;return VisuMZ[_0x149235(0x95b)][_0x149235(0x853)][_0x149235(0xb96)](this,_0x1cc0ae),BattleManager[_0x149235(0x6d4)](_0x197894=>{const _0x3d5593=_0x149235;_0x3d5593(0x4a3)===_0x3d5593(0x4a3)?this[_0x3d5593(0xb22)][this[_0x3d5593(0x7c0)]]=_0x197894:_0x17f6c4['setup'](0x0);}),!![];},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x2af)]=function(_0xdd4971){const _0x105bcd=_0x10ff30,_0x2a17aa=$dataCommonEvents[_0xdd4971];if(!_0x2a17aa)return![];if(_0x2a17aa[_0x105bcd(0x9f4)][_0x105bcd(0x449)]<=0x1)return![];return!![];},Game_Interpreter[_0x10ff30(0xb0c)][_0x10ff30(0x9e0)]=function(_0x27cdf0){const _0x4e33e8=_0x10ff30,_0x310bcc=VisuMZ[_0x4e33e8(0x95b)][_0x4e33e8(0x928)][_0x4e33e8(0x64d)],_0x467a57=_0x310bcc[_0x4e33e8(0x375)],_0x5c61fc=$dataCommonEvents[_0x467a57];if(_0x5c61fc&&VisuMZ[_0x4e33e8(0x95b)][_0x4e33e8(0x2af)](_0x467a57)){if(_0x4e33e8(0x5d3)===_0x4e33e8(0x95f)){if(!_0x3ba8b0)return 0x0;let _0x595ecf=0x0;const _0x5766f5=_0x599c01[_0x4e33e8(0x7ed)];return _0x5766f5[_0x4e33e8(0x22f)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x595ecf+=_0x3667ba(_0x2f66fa['$1'])),_0x5766f5[_0x4e33e8(0x22f)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x595ecf+=_0x4b1c33(_0x1d78f2['$1'])),_0x595ecf;}else{const _0x1aabb3=this[_0x4e33e8(0x781)]()?this['_eventId']:0x0,_0x5e7b2d=_0x5c61fc[_0x4e33e8(0x9f4)];this[_0x4e33e8(0xa82)](_0x5e7b2d,_0x1aabb3),this[_0x4e33e8(0xc2b)]=JsonEx['makeDeepCopy'](this['_list']);const _0x3f2235={'code':0xbc3,'indent':this['_indent'],'parameters':JsonEx[_0x4e33e8(0x6ab)](_0x27cdf0)};return this[_0x4e33e8(0xc2b)][_0x4e33e8(0x2e5)](this[_0x4e33e8(0x1dc)]+0x1,0x0,_0x3f2235),!![];}}else return VisuMZ[_0x4e33e8(0x95b)][_0x4e33e8(0x853)][_0x4e33e8(0xb96)](this,_0x27cdf0);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x839)]=BattleManager[_0x10ff30(0x948)],BattleManager[_0x10ff30(0x948)]=function(){const _0x467e61=_0x10ff30;VisuMZ[_0x467e61(0x95b)][_0x467e61(0x839)][_0x467e61(0xb96)](this),this[_0x467e61(0x487)]();},BattleManager[_0x10ff30(0x487)]=function(){const _0x159497=_0x10ff30,_0x7a8b39=VisuMZ[_0x159497(0x95b)][_0x159497(0x928)][_0x159497(0x64d)],_0x56eaeb=_0x7a8b39['BattleStartEvent'];_0x56eaeb&&VisuMZ['BattleCore'][_0x159497(0x2af)](_0x56eaeb)&&('iZWWb'!==_0x159497(0x2ab)?(this['_targetAngle']=0x0,this[_0x159497(0xb86)]=0x0):(this[_0x159497(0x37c)]=!![],$gameTemp['reserveCommonEvent'](_0x7a8b39[_0x159497(0x375)]),$gameMap[_0x159497(0xae0)](),$gameMap['_interpreter'][_0x159497(0x8bc)]=!![])),_0x7a8b39[_0x159497(0x99a)]>0x0&&(this[_0x159497(0xaf4)]=!![]);},VisuMZ[_0x10ff30(0x95b)]['Scene_Map_updateCallMenu']=Scene_Map[_0x10ff30(0xb0c)]['updateCallMenu'],Scene_Map['prototype']['updateCallMenu']=function(){const _0x587061=_0x10ff30;if(BattleManager['_battleCoreBattleStartEvent'])return;VisuMZ[_0x587061(0x95b)][_0x587061(0x241)][_0x587061(0xb96)](this);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x43e)]=Scene_Map['prototype']['launchBattle'],Scene_Map[_0x10ff30(0xb0c)][_0x10ff30(0x979)]=function(){const _0x8d780a=_0x10ff30;BattleManager[_0x8d780a(0x37c)]?this[_0x8d780a(0x331)]():VisuMZ[_0x8d780a(0x95b)][_0x8d780a(0x43e)][_0x8d780a(0xb96)](this);},Scene_Map[_0x10ff30(0xb0c)][_0x10ff30(0x331)]=function(){this['_active']=!![];},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xb13)]=SceneManager[_0x10ff30(0x3a3)],SceneManager[_0x10ff30(0x3a3)]=function(){const _0x5171b8=_0x10ff30;if(BattleManager[_0x5171b8(0x37c)])return![];return VisuMZ[_0x5171b8(0x95b)]['SceneManager_isSceneChanging'][_0x5171b8(0xb96)](this);},VisuMZ['BattleCore']['Game_Interpreter_terminate']=Game_Interpreter[_0x10ff30(0xb0c)][_0x10ff30(0x873)],Game_Interpreter['prototype'][_0x10ff30(0x873)]=function(){const _0x3b7a00=_0x10ff30;VisuMZ[_0x3b7a00(0x95b)][_0x3b7a00(0x7af)][_0x3b7a00(0xb96)](this),this['_preBattleCommonEvent']&&(_0x3b7a00(0x280)===_0x3b7a00(0x280)?(this['_preBattleCommonEvent']=undefined,SceneManager[_0x3b7a00(0x2df)][_0x3b7a00(0xa1d)]()):_0xa23c60+=_0x3f5b27);},Scene_Map[_0x10ff30(0xb0c)][_0x10ff30(0xa1d)]=function(){const _0x44e31f=_0x10ff30;BattleManager[_0x44e31f(0x37c)]=undefined,BattleManager['_battleCoreBattleResumeAfter']=!![],this[_0x44e31f(0xbe8)]();},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x616)]=Scene_Map['prototype'][_0x10ff30(0x600)],Scene_Map[_0x10ff30(0xb0c)][_0x10ff30(0x600)]=function(){const _0x17be7b=_0x10ff30;VisuMZ[_0x17be7b(0x95b)][_0x17be7b(0x616)]['call'](this),BattleManager[_0x17be7b(0xa39)]&&(this['_active']=!![],BattleManager[_0x17be7b(0xa39)]=undefined);},VisuMZ[_0x10ff30(0x95b)]['Scene_Map_initialize']=Scene_Map[_0x10ff30(0xb0c)][_0x10ff30(0x600)],Scene_Map['prototype'][_0x10ff30(0x600)]=function(){const _0x2c6a0c=_0x10ff30;VisuMZ[_0x2c6a0c(0x95b)][_0x2c6a0c(0x9e4)][_0x2c6a0c(0xb96)](this),$gameTemp[_0x2c6a0c(0x353)]();},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x8cd)]=Scene_ItemBase['prototype'][_0x10ff30(0x624)],Scene_ItemBase[_0x10ff30(0xb0c)][_0x10ff30(0x624)]=function(){const _0x17c237=_0x10ff30;VisuMZ[_0x17c237(0x95b)][_0x17c237(0x8cd)][_0x17c237(0xb96)](this);if(this[_0x17c237(0x5c4)]()['note'][_0x17c237(0x22f)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this[_0x17c237(0x5c4)]()['note'][_0x17c237(0x22f)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x17c237(0x4ad)===_0x17c237(0x4ad)?$gameTemp['_commonEventQueue']=[]:this[_0x17c237(0xa2c)]=![]),DataManager['checkAutoCustomActionSequenceNotetagEffect'](this[_0x17c237(0x5c4)]())&&(_0x17c237(0x1e4)===_0x17c237(0x215)?_0x3df16e=_0x47cc1d:$gameTemp[_0x17c237(0xa08)]=[]);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x984)]=Scene_Options[_0x10ff30(0xb0c)]['maxCommands'],Scene_Options[_0x10ff30(0xb0c)][_0x10ff30(0xc74)]=function(){const _0x26e017=_0x10ff30;let _0x19b30d=VisuMZ['BattleCore']['Scene_Options_maxCommands'][_0x26e017(0xb96)](this);const _0x4c468b=VisuMZ[_0x26e017(0x95b)][_0x26e017(0x928)];if(_0x4c468b[_0x26e017(0xab0)][_0x26e017(0x90f)]&&_0x4c468b[_0x26e017(0xab0)][_0x26e017(0xc61)])_0x19b30d+=0x2;if(_0x4c468b[_0x26e017(0xcbf)][_0x26e017(0x90f)]&&_0x4c468b[_0x26e017(0xcbf)][_0x26e017(0xc61)])_0x19b30d+=0x1;return _0x19b30d;},VisuMZ['BattleCore']['Scene_Battle_initialize']=Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x600)],Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x600)]=function(){const _0x11d23c=_0x10ff30;VisuMZ[_0x11d23c(0x95b)][_0x11d23c(0x6c9)][_0x11d23c(0xb96)](this),this['clearOnceParallelInterpreters']();},VisuMZ[_0x10ff30(0x95b)]['Scene_Battle_start']=Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x82e)],Scene_Battle['prototype'][_0x10ff30(0x82e)]=function(){const _0x38eaba=_0x10ff30;SceneManager[_0x38eaba(0xa35)]()?(Scene_Message['prototype'][_0x38eaba(0x82e)][_0x38eaba(0xb96)](this),this[_0x38eaba(0x93a)]&&(_0x38eaba(0xb73)!==_0x38eaba(0xb73)?this[_0x38eaba(0xb4f)][_0x38eaba(0x509)]()&&this['createDamageSprite']():this[_0x38eaba(0x93a)][_0x38eaba(0x78d)]()),BattleManager[_0x38eaba(0x29d)]&&BattleManager['revertTpbCachedActor']()):(VisuMZ[_0x38eaba(0x95b)][_0x38eaba(0x801)][_0x38eaba(0xb96)](this),$gameTroop[_0x38eaba(0x42d)]());},VisuMZ['BattleCore']['Scene_Battle_stop']=Scene_Battle[_0x10ff30(0xb0c)]['stop'],Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0xbe8)]=function(){const _0x1f4a4b=_0x10ff30;SceneManager[_0x1f4a4b(0x532)]()?Scene_Message['prototype'][_0x1f4a4b(0xbe8)][_0x1f4a4b(0xb96)](this):VisuMZ[_0x1f4a4b(0x95b)][_0x1f4a4b(0x670)][_0x1f4a4b(0xb96)](this);},VisuMZ[_0x10ff30(0x95b)]['Scene_Battle_terminate']=Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x873)],Scene_Battle['prototype'][_0x10ff30(0x873)]=function(){const _0x45a1fd=_0x10ff30;SceneManager['isNextSceneBattleTransitionable']()?Scene_Message[_0x45a1fd(0xb0c)][_0x45a1fd(0x873)][_0x45a1fd(0xb96)](this):'YhTya'!==_0x45a1fd(0x3a5)?this[_0x45a1fd(0x873)]():VisuMZ[_0x45a1fd(0x95b)][_0x45a1fd(0x548)][_0x45a1fd(0xb96)](this),this['clearOnceParallelInterpreters']();},Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0xa73)]=function(){const _0x2a43cf=_0x10ff30;if(ConfigManager[_0x2a43cf(0x721)]&&ConfigManager[_0x2a43cf(0x591)]!==undefined)return ConfigManager[_0x2a43cf(0x591)];else{if(this[_0x2a43cf(0xc1b)]()===_0x2a43cf(0x401))return _0x2a43cf(0x91f)!==_0x2a43cf(0xbda)?![]:this[_0x2a43cf(0x2e0)][_0x2a43cf(0xb7e)]===0x0&&this[_0x2a43cf(0x2e0)]['_offsetY']===0x0;else{if(_0x2a43cf(0x527)===_0x2a43cf(0x4e7)){if(this[_0x2a43cf(0x3f7)]['svAnchorX']!==_0x1811b9)return this['_cache'][_0x2a43cf(0x4d7)];return this['actor']()[_0x2a43cf(0x7ed)]['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache']['svAnchorX']=_0xea1c17(_0x204662['$1']),this[_0x2a43cf(0x3f7)][_0x2a43cf(0x275)]=_0x443ea9(_0x56ac55['$2'])):this[_0x2a43cf(0x3f7)][_0x2a43cf(0x4d7)]=_0x3fc51f[_0x2a43cf(0xb0c)][_0x2a43cf(0x5fc)]['call'](this),this[_0x2a43cf(0x3f7)][_0x2a43cf(0x4d7)];}else{return Scene_Message[_0x2a43cf(0xb0c)][_0x2a43cf(0xa73)][_0x2a43cf(0xb96)](this);;}}}},VisuMZ[_0x10ff30(0x95b)]['Scene_Battle_createAllWindows']=Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x1da)],Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x1da)]=function(){const _0x2bb744=_0x10ff30;this[_0x2bb744(0x8ad)](),VisuMZ[_0x2bb744(0x95b)][_0x2bb744(0x9e2)]['call'](this),this[_0x2bb744(0x85b)]();},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xb95)]=Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0xbc8)],Scene_Battle[_0x10ff30(0xb0c)]['createCancelButton']=function(){const _0xc739c8=_0x10ff30;VisuMZ[_0xc739c8(0x95b)][_0xc739c8(0xb95)][_0xc739c8(0xb96)](this),this[_0xc739c8(0xc1b)]()===_0xc739c8(0x401)&&this[_0xc739c8(0x505)]();},Scene_Battle[_0x10ff30(0xb0c)]['setVisibleUI']=function(_0x167f41){const _0x27b38c=_0x10ff30;_0x167f41?(this[_0x27b38c(0x4af)]['x']=(Graphics[_0x27b38c(0x7b2)]-Graphics['boxWidth'])/0x2,this['_windowLayer']['y']=(Graphics[_0x27b38c(0x956)]-Graphics['boxHeight'])/0x2):(this[_0x27b38c(0x4af)]['x']=Graphics['width']*0xa,this[_0x27b38c(0x4af)]['y']=Graphics['height']*0xa);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xc39)]=Scene_Battle['prototype'][_0x10ff30(0x3ea)],Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x3ea)]=function(){const _0x591c38=_0x10ff30,_0x213fb7=BattleManager[_0x591c38(0x9fe)]();VisuMZ['BattleCore'][_0x591c38(0xc39)][_0x591c38(0xb96)](this);if(_0x213fb7){if(_0x213fb7===BattleManager['actor']())return;if(_0x213fb7===BattleManager['_subject'])return;if(_0x213fb7[_0x591c38(0x843)]())_0x213fb7[_0x591c38(0x843)]()['stepBack']();}},VisuMZ['BattleCore'][_0x10ff30(0x63d)]=Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x634)],Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x634)]=function(){const _0xea36e9=_0x10ff30,_0x318721=BattleManager[_0xea36e9(0x9fe)]();if(_0x318721&&_0x318721[_0xea36e9(0x843)])_0x318721[_0xea36e9(0x843)]()[_0xea36e9(0x2c2)]();VisuMZ['BattleCore'][_0xea36e9(0x63d)][_0xea36e9(0xb96)](this);},VisuMZ['BattleCore'][_0x10ff30(0x697)]=Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x4a9)],Scene_Battle[_0x10ff30(0xb0c)]['logWindowRect']=function(){const _0x28879a=_0x10ff30;if(VisuMZ[_0x28879a(0x95b)][_0x28879a(0x928)][_0x28879a(0x5f4)]['BattleLogRectJS']){if('hHCws'===_0x28879a(0x2d3)){this[_0x28879a(0xc87)][_0x28879a(0xb10)]();const _0x54a525=this[_0x28879a(0x69a)]();!_0x1fffad(_0x54a525)&&this[_0x28879a(0xaa6)]();}else return VisuMZ[_0x28879a(0x95b)]['Settings'][_0x28879a(0x5f4)][_0x28879a(0x2f1)]['call'](this);}return VisuMZ['BattleCore'][_0x28879a(0x697)]['call'](this);},VisuMZ['BattleCore'][_0x10ff30(0x6cf)]=Scene_Battle['prototype'][_0x10ff30(0x4db)],Scene_Battle['prototype']['createPartyCommandWindow']=function(){const _0x2b6da3=_0x10ff30;VisuMZ[_0x2b6da3(0x95b)][_0x2b6da3(0x6cf)][_0x2b6da3(0xb96)](this),this[_0x2b6da3(0x8f0)]();},Scene_Battle['prototype']['createPartyCommandWindowBattleCore']=function(){const _0x595678=_0x10ff30,_0x5ddee2=this['_partyCommandWindow'];_0x5ddee2[_0x595678(0x740)](_0x595678(0xb21),this[_0x595678(0x8af)][_0x595678(0x973)](this)),_0x5ddee2[_0x595678(0x740)](_0x595678(0x76b),this[_0x595678(0x439)]['bind'](this));const _0x486975=this['battleLayoutStyle']();switch(_0x486975){case'xp':case'portrait':return this[_0x595678(0x7f8)][_0x595678(0x8ab)](0x1);break;}},Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x8af)]=function(){const _0x39f164=_0x10ff30;BattleManager['_autoBattle']=!![],$gameParty[_0x39f164(0x61e)](),this[_0x39f164(0x3ea)](),BattleManager[_0x39f164(0xccf)]()&&(BattleManager['_inputting']=![]);},Scene_Battle[_0x10ff30(0xb0c)]['commandOptions']=function(){const _0x13af24=_0x10ff30;if(this[_0x13af24(0x78f)]())this[_0x13af24(0x38b)]=!![],this[_0x13af24(0x7ba)][_0x13af24(0x395)](_0x13af24(0x657),VisuMZ['BattleCore']['Settings'][_0x13af24(0xc78)][_0x13af24(0x9f5)]);else{if(_0x13af24(0xafe)!==_0x13af24(0xafe)){if(this[_0x13af24(0x28b)]===_0x4474c0)return;this[_0x13af24(0x28b)]=_0x5bf8f0,this[_0x13af24(0x2bd)]=_0xf95117,this[_0x13af24(0xaff)]=_0x3d575e,this[_0x13af24(0xa8a)]=_0x1b4d8a||_0x13af24(0x92a);if(_0x274f43<=0x0)this['opacity']=_0x59665d;}else this['callOptions']();}},Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x78f)]=function(){return BattleManager['isActiveTpb']();},Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x35a)]=function(){const _0x48040d=_0x10ff30;this[_0x48040d(0x38b)]=![],this[_0x48040d(0x93a)]['update'](),this['_windowLayer'][_0x48040d(0x905)]=![];if(BattleManager[_0x48040d(0x344)]())($dataSystem[_0x48040d(0x5bc)]||$dataSystem[_0x48040d(0x607)])&&('SyTQl'===_0x48040d(0x485)?_0xc5d4a4[_0x48040d(0x41a)](_0x2f65ab):SceneManager[_0x48040d(0x7bf)]());else($gameMap[_0x48040d(0x5bc)]()||$gameMap[_0x48040d(0x607)]())&&SceneManager[_0x48040d(0x7bf)]();SceneManager[_0x48040d(0x395)](Scene_Options),BattleManager['isTpb']()&&(BattleManager[_0x48040d(0x29d)]=BattleManager[_0x48040d(0x9fe)]());},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xaf0)]=Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x59c)],Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x59c)]=function(){const _0x1a1016=_0x10ff30;VisuMZ[_0x1a1016(0x95b)][_0x1a1016(0xaf0)][_0x1a1016(0xb96)](this);if(this[_0x1a1016(0x38b)]&&!BattleManager['_subject'])this[_0x1a1016(0x35a)]();},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x309)]=Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x78d)],Scene_Battle[_0x10ff30(0xb0c)]['update']=function(){const _0x1243de=_0x10ff30;VisuMZ[_0x1243de(0x95b)]['Scene_Battle_update'][_0x1243de(0xb96)](this),this[_0x1243de(0x3db)]();},Scene_Battle[_0x10ff30(0xb0c)]['createAutoBattleWindow']=function(){const _0x3ffa57=_0x10ff30,_0x3e8b50=this[_0x3ffa57(0xab1)]();this[_0x3ffa57(0x6d8)]=new Window_AutoBattleCancel(_0x3e8b50),this[_0x3ffa57(0x6d8)][_0x3ffa57(0x34b)](),this[_0x3ffa57(0x440)](this[_0x3ffa57(0x6d8)]);},Scene_Battle['prototype'][_0x10ff30(0xab1)]=function(){const _0x1e82b8=_0x10ff30;return VisuMZ[_0x1e82b8(0x95b)]['Settings']['AutoBattle'][_0x1e82b8(0x303)][_0x1e82b8(0xb96)](this);},Scene_Battle['prototype'][_0x10ff30(0x708)]=function(){const _0x177564=_0x10ff30;this[_0x177564(0x327)]=[];},Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x3db)]=function(){const _0x2c769c=_0x10ff30;if(!this[_0x2c769c(0x327)])return;for(const _0x4c221e of this[_0x2c769c(0x327)]){_0x4c221e&&('POGXw'!==_0x2c769c(0x850)?_0x4c221e[_0x2c769c(0x78d)]():this[_0x2c769c(0x572)](_0x4d9869,_0x2e79f1,_0x5b4842));}},Scene_Battle['prototype'][_0x10ff30(0x543)]=function(_0x37d4ff){const _0x5c96dc=_0x10ff30,_0x13e47d=$dataCommonEvents[_0x37d4ff];if(!_0x13e47d)return;const _0x3b78cb=new Game_BattleOnceParallelInterpreter();this[_0x5c96dc(0x982)](_0x3b78cb),_0x3b78cb[_0x5c96dc(0x3c7)](_0x37d4ff);},Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x982)]=function(_0x596e22){const _0x4b1908=_0x10ff30;this['_onceParallelInterpreters']=this[_0x4b1908(0x327)]||[],this[_0x4b1908(0x327)]['push'](_0x596e22);},Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x33f)]=function(_0x1cca7c){const _0x1db883=_0x10ff30;this[_0x1db883(0x327)]=this['_onceParallelInterpreters']||[],this[_0x1db883(0x327)][_0x1db883(0xc04)](_0x1cca7c);},Game_Troop[_0x10ff30(0xb0c)][_0x10ff30(0x42d)]=function(){const _0x570b4b=_0x10ff30;for(const _0x3ce900 of this['troop']()[_0x570b4b(0xa6a)]){if(!this['doesPageHaveOnceParallelStart'](_0x3ce900))continue;SceneManager[_0x570b4b(0x2df)][_0x570b4b(0x8ee)](_0x3ce900);}},Game_Troop['prototype'][_0x10ff30(0xcbe)]=function(_0x3f998f){const _0x5578a4=_0x10ff30;if(!_0x3f998f)return;for(const _0x469f09 of _0x3f998f[_0x5578a4(0x9f4)]){if([0x6c,0x198][_0x5578a4(0x778)](_0x469f09[_0x5578a4(0x45e)])){if(_0x5578a4(0xc84)!==_0x5578a4(0xc84))return this[_0x5578a4(0x2df)]&&this[_0x5578a4(0x2df)][_0x5578a4(0x602)]===_0x1647e3;else{const _0x1b1009=_0x469f09[_0x5578a4(0xc0e)][0x0];if(_0x1b1009['match'](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}}return![];},Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x8ee)]=function(_0x58c999){const _0x2fd2f3=_0x10ff30;if(!_0x58c999)return;const _0x10b521=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0x10b521),_0x10b521[_0x2fd2f3(0x396)](_0x58c999);};function Game_BattleOnceParallelInterpreter(){this['initialize'](...arguments);}function _0x1fff(_0x18176a,_0x257950){const _0x24a15f=_0x24a1();return _0x1fff=function(_0x1fff97,_0x440235){_0x1fff97=_0x1fff97-0x1c6;let _0x4d2ee4=_0x24a15f[_0x1fff97];return _0x4d2ee4;},_0x1fff(_0x18176a,_0x257950);}function _0x24a1(){const _0xf047f7=['battleUIOffsetY','KOPxC','PGFZX','attachSpritesToDistortionSprite','ActSeq_Mechanics_AtbGauge','createActionSequenceProjectile','YOfYn','%1Damage%2JS','BnhRE','addSingleSkillCommands','requestRefresh','ShowCurrentState','applyFreezeMotionFrames','indexOf','Scene_Battle_windowAreaHeight','setHue','ceil','ActSeq_Weapon_NextActiveWeapon','cZAPh','createCancelButton','AttackAnimation','jYQZV','Game_Battler_makeSpeed','oaaVF','tGlKU','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','formula','_endBattle','ActSeq_Movement_WaitForSpin','ActSeq_Animation_CastAnimation','setHelpWindow','aQGpY','performCollapse','Parse_Notetags_TraitObjects','makeEscapeRatio','CtuMi','showNormalAnimation','kglOs','commandSymbol','ActSeq_Movement_FacePoint','ActSeq_Animation_AttackAnimation','cancelButtonText','_forcedHomeX','TTIxu','SvMotionIdleMass-%1-%2','hshUl','isBattleFlipped','DtpRb','Sprite_Enemy_updateStateSprite','_angleRevertOnFinish','Scene_Battle_onActorOk','stop','wxWgW','isForFriend','canAddSkillCommand','ActSeq_Movement_HomeMoveToTarget','placeStateIcon','getItemDamageAmountTextBattleCore','ShowReflect','clamp','RRaMT','prepareBorderActor','isETB','startFloat','animationWait','autoBattleUseSkills','updatePhase','svBattlerAnchorY','Window_ActorCommand_initialize','Game_Action_isForFriend','onDisabledPartyCommandSelection','command3011','_additionalSprites','Game_Actor_equips','WaitForProjectile','actionEffect','_colorType','Targets1','smvNn','remove','updateActors','Game_Action_numRepeats','aliveMembers','gainCurrentActionsETB','BattlebackScale','alive\x20enemies','makeDamageValue','startActorSelection','aMpfl','parameters','addBattleCoreAutoBattleStyleCommand','yWGJB','ShowMpDmg','checkSceneBattleTransitionable','isFlipped','portrait','EFFECT_COMMON_EVENT','isMeleeMultiTargetAction','MAXHP','addAnimationSpriteToContainer','RksKi','EnableDamageCap','battleLayoutStyle','Game_Action_needsSelection','changeBattlebacks','isSceneBattle','DTB','SkillItemBorderCols','gRbbN','isAffectedByBreakShield','commandStyle','isBreakStunned','Window_ActorCommand_setup','ForceRandom','ActSeq_Movement_HomeMoveBy','HalfActions','UPRDx','GuardFormulaJS','_list','setupBlueRedInvertImpactFilter','nzVfH','QNsAU','alive\x20friends\x20not\x20user','freezeFrame','BattleManager_checkSubstitute','PopupOffsetX','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','Text','addItemCommand','ZKIWE','sortEnemies','MP_Flat','Scene_Battle_selectNextCommand','nameY','_duration','attackAnimationId2','JS\x20%1APPLY\x20%2','PreApplyJS','ActSeq_Impact_TimeStop','updateEffectsContainer','performCastAnimation','svoAx','setAttack','victory','_battleCoreForcedElements','Name','WaitForJump','ActSeq_DB_DragonbonesMotionAni','IsvnA','hasSvBattler','Sprite_Actor_setActorHome','ZLJYD','ParseStateNotetags','gainTp','PostEndBattleJS','centerFrontViewSprite','parse','addActor','isOTB','isMagicSkill','oQnUQ','performAttackSlot','chantStyle','emerge','ActSeq_Horror_Clear','WaitForAnimation','_animationCount','OECxo','Game_Map_encounterList','ActionCenteredName','dxyFb','_emptyBitmap','AdjustRect','RrFSN','weatherType','QVlGq','ZQgYV','lastCommandSymbol','ActSeq_Skew_WaitForSkew','concat','ShowFailure','ActSeq_Motion_PerformAction','PostStartTurnJS','setFrame','PostDamage%1JS','isTpbCharged','BindCommonEventKeysForObj','getTraitSetKeys','_drawTextOutline','ymKUS','Mute','maxCommands','isOptionsCommandEnabled','chant','ParseArmorNotetags','PartyCmd','ParseSkillNotetags','ParseWeaponNotetags','checkShowHideSkillNotetags','backColor','_weaponImageId','battlelog','ArRedFlat','getSkillTypes','result','rhgIA','Window_BattleLog_refresh','QKJUQ','processPostBattleCommonEvents','canAttack','bitmap','TpbGaugeOffsetX','MotionIdle','message4','selectSymbol','VisuMZ_3_SideviewBattleUI','Game_Action_isForOpponent','updateBattlebackBitmap1','criticalDmgRate','RQRHx','ShowCritical','HFlIZ','_angleWholeDuration','preemptive','ActSeq_Movement_WaitForOpacity','_borderPortraitTargetX','kKvrR','pushBaseLine','updateStatusWindowPosition','changeBattlerOpacity','DigitGroupingDamageSprites','ActSeq_Impact_MotionBlurTarget','AS\x20TARGET','PJlPt','Scene_Battle_updateStatusWindowPosition','Sprite_Actor_createStateSprite','kyykf','isForOpponentBattleCore','_actorWindow','yyovL','isCommandEnabled','CheckSkillCommandShowSwitches','HhdBo','front\x20center','vxbil','isFloating','battleAnimation','HP_Rate','battleEnd','_baseY','VPXmt','ltPTM','nubbd','onBattleStartBattleCore','XPActorDefaultHeight','+%1','_targetFloatHeight','onOpacityEnd','StatusWindowAttachmentFront','WLHWL','NHWCQ','setHelpWindowItem','ARRAYSTRUCT','dragonbonesData','setMoveEasingType','doesPageHaveOnceParallelStart','HpGauge','Actor-%1-%2','clearHorrorEffects','Game_Map_setupBattleback','evaded','Window_PartyCommand_initialize','WaitForCamera','PostEndActionJS','DSzxF','_regionBattleback1','makeUniqueNames','encounterList','isEnemy','ParseEnemyNotetags','ActSeq_Movement_Skew','floor','isTpb','_skewWholeDuration','vzCJW','battleMove','CklCo','updateShadowScale','VdBgr','windowskin','setupTextPopup','HoYOE','windowPadding','YQslC','_cursorSprite','SwitchCritical','ActSeq_Movement_MoveToTarget','changeTurnOrderByCTB','addBattleCoreAutoBattleStartupCommand','enemyNames','clearDamagePopup','_methods','Game_Interpreter_command283','mqJPW','nTCIc','_back1Sprite','createAllWindows','YUUzC','_index','POpDG','YPXNX','WaitCount2','displayTpDamage','applyImmortal','ActSeq_Mechanics_CtbSpeed','createEnemies','MczOk','isBuffAffected','weatherPower','requestAnimation','KuqeZ','removeBuff','updateGrow','DamageStyleList','wait','_floatEasing','IESNC','coreEngineRepositionEnemies','makeBattleCommand','BattleManager_cancelActorInput','save','processBattleCoreJS','createActorCommandWindowBattleCore','PopupDuration','onSkewEnd','rnHxV','actionSplicePoint','runIf','nIJGk','string','_makeFontNameText','mWPfg','attackStates','628164nmDpZk','Duration','HUYtS','ActSeq_Element_ForceElements','isCTB','STRUCT','isSkillItemWindowsMiddle','fontSize','gaugeLineHeight','canEscape','zgnDa','ext','VisuMZ_3_ActSeqProjectiles','TPQQz','applySoftDamageCap','makeActionOrders','displayEvasion','StyleON','setupIconTextPopup','kyTlR','fKDFk','isBattlerGrounded','nBgrz','EtDeT','drawItem','BattleManager_startTurn','refresh','noise','MqsAK','VariableHeal','isPlaytest','isCustomActionSequence','isPTB','nVLhO','DefaultSoftScaler','IzkvO','updateMain','dead\x20actors','Window_BattleLog_performMiss','HWqRc','rgBqH','updateStateIconSprite','getNextDamagePopup','setHalfActionsPTB','AS\x20USER','_skillWindow','updateStyleOpacity','battlerSprites','match','isForAll','attackMotions','getDualWieldTimes','ActSeq_Mechanics_SwapWeapon','origin','VisuMZ_2_WeaponSwapSystem','_target','battleSpriteSkew','MSsJE','Game_Action_setAttack','CommandWidth','cancelTargetSelectionVisibility','isBattleMember','MDF','RequiresDefeat','updateBattlebackBitmap','EscapeSuccessJS','Scene_Map_updateCallMenu','freezeMotion','mainSpriteWidth','KWHxd','PreDamageAsUserJS','otetR','displayBattleCoreTransitionErrorMsg','aOHxn','applyHardDamageCap','drawText','alterPriority','Game_BattlerBase_die','setBattlerFlip','adjustPosition_1for1','_appeared','updateFloat','sleep','isAnyProjectilePresent','drawItemStatusListStyle','%1StartActionJS','NameAttachStateIcon','tyLHK','lineHeight','DSKau','BattleManager_isTpbMainPhase','addChildToBack','_tempEquipCheck','startInput','ActSeq_Set_FinishAction','Actor','applyResultSwitches','ConvertActionSequenceTarget','xPRuE','log','CNnYr','Window_BattleLog_popupDamage','ActSeq_Impact_BlueRedInvert','_updateCursorFilterArea','_armorPenetration','CmdTextAlign','refreshCursor','EDvjY','clearFreezeMotion','startAttackWeaponAnimation','KJHjZ','_skewEasing','_itemWindow','_enemy','battleZoom','CopyCombatLog','gsYtd','ActSeq_BattleLog_Refresh','svAnchorY','battleSkew','gIkZM','invokeAction','status','VsLYj','criticalHitFlat','AutoMeleeAoE','lbAxK','Sprite_Battler_damageOffsetX','VisuMZ_2_BattleSystemBTB','GdQEE','default','iconHeight','IWQlq','ZNFFf','_actorCommandWindow','wholeActionSet','VisuMZ_2_BattleSystemPTB','lBIMN','NameOffsetX','VisuMZ_2_BattleSystemOTB','_targetOpacity','Game_Temp_requestAnimation','Sprite_Enemy_createStateIconSprite','actorId','alive\x20enemies\x20not\x20target','ActSeq_Movement_Opacity','UNTITLED','ActSeq_Movement_WaitForSkew','iECcj','ActSeq_Impact_ShockwaveCenterTargets','_escapeRatio','enemy','_enemySprites','troop','apply','PrioritySortActive','Scene_Battle_startPartyCommandSelection','BattleManager_selectNextCommand','_tpbSceneChangeCacheActor','setupZoomBlurImpactFilter','visibilityState','faceWidth','startDamagePopup','Sprite_Actor_initMembers','alive\x20friends','ARRAYNUM','JwenL','1AHfiqh','_flashColor','ActSeq_Movement_WaitForFloat','Scene_Battle_itemWindowRect','alterActionCostPTB','iZWWb','setSvBattlerSprite','displayItemMessage','skewDuration','CheckMapBattleEventValid','XyxmG','pjrdW','mCZRn','skew','jZKFv','Scale','random','FullActions','autoSelect','hrESX','performActionMotions','PostEndTurnJS','getHardDamageCap','_opacityDuration','HomePosJS','moveBattlerToPoint','ZvpIF','weaponTypes','stepBack','NivXJ','KfvfE','wtypeId','checkTpbInputOpen','clearBattleRefreshRequest','_shake','IZPWV','evalDamageFormulaBattleCore','GchZc','_enemyWindow','NXFqv','lJoeu','YWthH','noSimilarSTypes','_baseLineStack','Hqwph','DrnNO','setupBattlebackBattleCore','MyKmv','soWNM','ActSeq_Mechanics_EnemyEscape','ActSeq_Animation_ChangeBattlePortrait','PXUvm','ShowCosts','setupFont','HNuVV','preparePartyRefresh','initBattleCore','_scene','parent','_animationContainer','actorCommandAutoBattle','VarianceFormulaJS','hpDamage','splice','icon','jtzTP','VisuMZ_2_HorrorEffects','PostDamageAsTargetJS','compareBattlerSprites','CombatLogIcon','Enemy','_homeEasing','applyGlobal','_activeWeaponSlot','onMoveEnd','BattleLogRectJS','CreateActionSequenceTargets','okButtonText','adjustWeaponSpriteOffset','canGuardBattleCore','Kvbjh','UkKVW','_homeY','maxItems','hardDamageCap','_wtypeIDs','ActSeq_Horror_GlitchRemove','YmrEa','applyTargetFilters','addLoadListener','_regionBattleback2','jsScaleDown','SdDYZ','AutoBattleRect','ActorCmd','isUndecided','updateMotionCount','LSHAn','playEnemyDamage','Scene_Battle_update','Sprite_Enemy_setBattler','drawItemBackground','Direction','TinrZ','drawItemImageListStyle','isMVAnimation','_tpbState','FollowTurn','_skewDuration','itemTextAlign','ElementStatusCore','Sprite_Battler_setHome','displayRemovedStates','bgType','iEoXq','replace','CmdIconAutoBattle','tlods','ShowRemovedBuff','updateWeather','isBypassDamageCap','_ptbActionCost','eegBQ','itemLineRect','process_VisuMZ_BattleCore_jsFunctions','statusWindowRectDefaultStyle','NNXuk','exSul','isPreviousScene','_onceParallelInterpreters','displaySubstitute','_floatDuration','NameAlwaysVisible','oXLtQ','_floatHeight','Window_BattleLog_popBaseLine','findSymbolExt','waitCount','BattleManager_initMembers','battleCorePreBattleCommonEvent','isFriendly','PBiVk','resizeWindowXPStyle','_stypeIDs','needsSelection','updateAttachedSprites','Spriteset_Battle_update','PostApplyAsUserJS','animationBaseDelay','alphabetic','iconText','GroupDigits','createHelpWindow','removeOnceParallelInterpreter','_actionBattlers','dimColor2','extraPositionScaledY','playCancel','isBattleTest','QhaMd','_back2Sprite','onActorOk','drawLineText','Window_BattleLog_displayMpDamage','ZtppF','hide','commandNameWindowDrawText','xqndZ','Window_BattleLog_clear','symbol','_handlers','DktUx','displayAction','clearForcedGameTroopSettingsBattleCore','Sprite_Enemy_initVisibility','isAlive','POST-','addBuff','FrontViewSelect','SkewX','callOptions','Game_Battler_onBattleStart','ActSeq_Movement_WaitForMovement','evZxf','updateStateSprite','addImmortal','displayType','zoomDuration','inputting','_shadowScaleX','_injectAnimationSprite','Sprite_Actor_update','_damages','-%1','CheckVisibleBattleNotetags','JXssT','createDistortionSprite','isForRandomBattleCore','skill','JFjVj','ActionCount','onEscapeFailure','ShowPortraits','_speed','waitForAnimation','applyGlobalCommonEventNotetags','faceRect','BattleStartEvent','aMUVM','PreEndTurnJS','escape','dead','uxuHP','PreApply%1JS','_battleCoreBattleStartEvent','Eswfu','Opacity','_growX','clearElementChanges','updateHomeMove','_jumpHeight','displayBuffs','moveBattlerHomeDistance','Game_Battler_performActionStart','Parse_Notetags_Targets','jweCE','WoCaF','FlashDuration','jOKgF','_callSceneOptions','SlotID','LiMGb','WobmS','dead\x20enemies','ResetOffset','setHorrorEffectSettings','SkillItemStandardCols','reduce','updateBattlerContainer','push','setTroopPage','AllowCollapse','commandFight','ActSeq_Mechanics_StbRemoveExcessActions','WiLQl','text','alignBattleCoreDamageSprite','lcsVk','Sprite_Battler_startMove','AnimationID','BoUna','WkmEH','GUhSb','isSceneChanging','performSubstitute','YhTya','clone','MotionFrameWait','SvMotionIdleSolo-%1-%2','niEsR','ConvertCount','Sprite_SvEnemy','isTpbMainPhase','missed','process_VisuMZ_BattleCore_CreateRegExp','_dragonbonesSpriteContainer','setLastPluginCommandInterpreter','battleInjectPrep','refreshActorPortrait','Game_Action_clear','index','qZAgG','removeStatesAuto','turnCount','BattleManager_processVictory','_updateClientArea','ShowPortraitsBorderStyle','WaitCount1','isActiveTpb','fzaTn','WaitForScale','xBohn','StatusWindowAttachmentFrontOffsetY','command283','hUhyU','MIN_SAFE_INTEGER','FaceDirection','BattleManager_startInput','battleFloat','setCommonEvent','BattleDefeatJS','LUK','Window_BattleLog_displayCurrentState','osGuq','addSingleSkillCommand','isOpponent','damageOffsetY','focus','Window_BattleEnemy_show','tePvr','clearMotion','CommandAddOptions','ScaleX','adjustPosition','updateScale','arRedFlat','priority','setActiveWeaponSlot','getBattlePortraitFilename','updateOnceParallelInterpreters','placeGauge','CriticalColor','ARRAYSTR','opponentsUnit','Skills','Elements','FlashColor','hasBeenDefeatedBefore','addChildToUiContainer','getDamageStyle','setImmortal','_growEasing','WtypeId','skillTypes','selectNextCommand','setupBattleCoreData','fnordRemovedStates','createTroopNote','CastPhysical','SkillItemMiddleLayout','Reveal','xMOuT','jbmEp','ATkqK','isImmortal','HAYIN','CmdIconItem','_cache','addCommand','KAPaF','QoL','parseForcedGameTroopSettingsBattleCore','YyGIr','alive\x20enemies\x20not\x20user','PoJat','IejUk','_createDamageContainer','border','gyDSC','onGrowEnd','Skill-%1-%2','WaitForMovement','createCommandVisibleJS','command301','_svBattlerSprite','HpGaugeOffsetY','canAlterActionCostPTB','isTriggered','Formula','DistanceAdjust','yIENO','applyData','alive\x20opponents','DVMIj','_lines','xjRxM','CmdStyle','ScIif','numTargets','missile','createJS','isActionSelectionValid','addState','SkewY','_battleCoreAddedElements','ActSeq_Mechanics_StbExploit','placeTimeGauge','GQDwl','EFWAN','all\x20targets','displayReflection','selectLast','resetResultSwitches','repeatTargets','AllowRandomSpeed','_subject','processForcedAction','%1StartTurnJS','allowRandomSpeed','ActSeq_ChangeSkew','Game_Battler_clearDamagePopup','onBattleStartOnceParallels','YOCLK','startBattle','startMotion','process_VisuMZ_BattleCore_PreBattleCommonEvent','ActSeq_Element_NullElements','useItem','oxbPw','Parse_Notetags_Action','moveToStartPosition','equipSlots','JGlFH','commandOptions','ULSGL','nxERq','StatusWindowAttachmentBack','_cacheTextWidth','Scene_Map_launchBattle','drawSingleSkillCost','addChild','top','Game_Action_itemEffectAddNormalState','opacity','CaOQg','ActSeq_Animation_PlayAtCoordinate','spinBattler','isAnimationShownOnBattlePortrait','Shadow2','length','addAutoBattleCommand','KKaiP','ConfigManager_applyData','drawEnemyName','MCUaA','vQHoh','Window_BattleLog_pushBaseLine','PJUwH','YsiBK','itemCri','flashColor','Game_Interpreter_updateWaitMode','updateShadowVisibility','gainStoredBoostPoints','TFvTj','cEYhS','BqUZx','isAnyoneJumping','AutoBattleOK','setupRgbSplitImpactFilter','code','Shadow','bkdiZ','createBattleFieldContainer','Sprite_Actor_updateBitmap','moveBattlerDistance','tpbActorSwitchConditionsMet','setupDesaturateImpactFilter','Wave','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','NzcLy','_enemyIDs','statusWindowRectXPStyle','_growDuration','EasingType','isGuardWaiting','forceEscapeSprite','checkCacheKey','SvWeaponMass-%1-%2','isBattlerFlipped','isDead','setVisibleUI','getItemDamageAmountLabelBattleCore','setActorHome','VisuMZ_2_DragonbonesUnion','yKPks','ActSeq_Horror_TVCreate','VisuMZ_4_CombatLog','ParseActorNotetags','destroy','_targetGrowY','invokeMagicReflection','HelpSkillType','activate','Game_Troop_setup','CXrBU','isForOpponent','_damagePopupArray','VgXxk','EhCRj','deadMembers','onEncounterBattleCore','VisuMZ_4_BreakShields','Sprite_Actor_updateShadow','Game_BattlerBase_canGuard','XRVRC','FlinchDistanceY','DEF','yIDfN','isDeathStateAffected','PostApply%1JS','getBattlePortrait','PmZWq','destroyDamageSprite','FlinchDistanceX','ypKGY','command339','getAttackWeaponAnimationId','createEmptyBitmap','dWoSh','softDamageCap','_preemptive','pointY','changeWeather','context','currentExt','uTTVl','setSkill','Weapon-%1-%2','BNxOk','needsActorInputCancel','DistanceX','addSkillTypeCommand','prev\x20target','updateEventMain','logWindowRect','CUtJV','traitObjects','_deathStateApplied','MZbKT','_forceAction','_windowLayer','battleUIOffsetX','PGgvB','BdqWf','onBattleEnd','updateBorderSprite','addOptionsCommand','requestPointAnimation','waitForOpacity','agshA','GaEgr','JS\x20%1REGENERATE','bvFnC','GOadI','loadWindowskin','_commandNameWindow','setText','textSizeEx','ActSeq_Zoom_Reset','Window_BattleLog_performReflection','validTargets','_lastEnemy','CheckVisibleSkillNotetags','pAlJy','loadBitmap','EQjdF','NameFontSize','setWaitMode','Variable','updateCancel','HitFlat','adjustPosition_ScaleUp','Game_BattlerBase_addNewState','applyArmorModifiers','finalizeScale','XWKFt','checkAutoCustomActionSequenceNotetagEffect','createDigits','NRIlz','extraHeight','svAnchorX','MotionType','targetObjects','effect','createPartyCommandWindow','jumpBattler','ActSeq_Mechanics_AnalyzeWeakness','loadSvActor','_shadowScaleY','BattleManager_startBattle','textWidth','jsOneForOne','center','jBvrt','addShowHpGaugeCommand','zIQFZ','JultG','_actor','ActSeq_Impact_Oversaturate','onBattleEndBattleCore','addDamageSprite','Window_BattleLog_performMagicEvasion','mainSprite','RJMCx','custom','getAttackMotion','ESCAPE','animationShouldMirror','requestDragonbonesAnimation','MessageWait','shift','drawIcon','battleProjectiles','FUNC','head','ActSeq_DB_DragonbonesTimeScale','command119','performActionEndMembers','_helpWindow','PXcGy','applyVariance','rmplr','PvhBq','endAction','ActionEnd','commandStyleCheck','repositionCancelButtonBorderStyle','process_VisuMZ_BattleCore_CommonEventKeys','TpGaugeOffsetX','optDisplayTp','isSpriteVisible','isSpinning','Game_Party_removeActor','createSeparateDamagePopups','EVAL','srwFU','helpWindowRectBorderStyle','nMILU','setSTBExploited','pCGcK','odCAb','usePremadeActionSequence','KDPfK','Victory','resizeWindowBorderStyle','Game_System_initialize','xajxu','_targetSkewX','PreDamageAsTargetJS','makeCommandList','removedStateObjects','isConfused','setupHpGaugeSprite','CreateCommonEventKeys','isAlwaysVisible','updateFlip','isGuard','resetFontSettings','hpHealingFmt','Exploiter','qWKFX','displayChangedBuffs','skillItemWindowRectBorderStyle','ScaleToFit','updateHelp','rNEVK','AUTO\x20BATTLE','nextActiveWeaponSlot','name','actionBattleCoreJS','jkWXt','isNextSceneBattleTransitionable','smooth','sXvwW','cancel','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','updateAction','WDpir','Actions','PreDamageJS','GzFfG','contentsOpacity','removeState','DamageDisplay','ShowAddedState','KknQL','numRepeats','setup','playOnceParallelInterpreter','processAnimationRequests','isBTB','ActSeq_Motion_MotionType','checkExtendTroopCompatibility','Scene_Battle_terminate','startJump','pRIZk','textAlign','inBattle','hxSAT','_forcedHomeY','upPXw','isPartyCommandWindowDisabled','partyCommandWindowRectBorderStyle','XLnFB','startWeaponAnimation','dRAtX','cWOMo','round','isActing','motionIdle','PreApplyAsUserJS','setHome','VisuMZ_1_SkillsStatesCore','_frame','DefaultHardCap','ShowMissEvasion','XPPal','DamageStyles','ActSeq_Camera_Clamp','isAnyoneGrowing','CriticalHitFlat','RkVnE','evade','iYBXp','Window_BattleStatus_initialize','StartName','setBattlePortrait','_allTargets','setBattler','NewPopupBottom','Sprite_StateIcon_updateFrame','itemWindowRect','PopupShiftX','checkShowHideSwitchNotetags','mpDamage','targetActionSet','Scene_Battle_partyCommandWindowRect','transform','AnchorY','PreStartTurnJS','WaitForEffect','loadPicture','setupOversaturateImpactFilter','tDRLI','ClearBattleLog','reserveCommonEvent','onEnemyOk','createEffectActionSet','ActSeq_Impact_MotionTrailRemove','ActSeq_Movement_MoveBy','addGeneralOptions','iCCAE','lhGqS','undecided','setupDamagePopup','AsTarget','isFightCommandEnabled','ActSeq_BattleLog_WaitForNewLine','type','isActor','Game_BattlerBase_canAttack','callUpdateHelp','_actorSprites','onSelectAction','_item','ActSeq_Mechanics_PtbAlterCost','uiInputPosition','EeAqW','DTNZt','alterChange','%1StartBattleJS','ShowHide','isTeamBased','process_VisuMZ_BattleCore_BaseTroops','dead\x20battlers','updateVisibility','Window_BattleLog_performCounter','updateBattleProcess','dimColor1','XEYFD','ActSeq_Mechanics_AddBuffDebuff','addCustomCommands','mqUSe','_jumpMaxHeight','popupDamage','partyCommandWindowRectXPStyle','removeAnimationFromContainer','%1EndActionJS','HMPWo','createString','setupCriticalEffect','die','command236','VisuMZ_3_WeaknessDisplay','battleJump','setBattleZoom','onAllActionsEnd','buffRemove','spIwb','vCVjq','_uiContainer','fillRect','motionType','Item-%1-%2','ltkKC','visualHpGauge','qUtTD','HelpEscape','isAnyoneInjectAnimating','battleback1Name','action','MpGaugeOffsetY','clearActiveWeaponSet','updateOpacity','applyCritical','expTotal','_borderPortraitDuration','item','Game_Map_battleback1Name','textBaseline','Window_BattleLog_performAction','Radius','Window_SkillList_maxCols','applyDamageCaps','ActSeq_Set_WholeActionSet','HelpFight','SkillsStatesCore','movement','Game_Actor_setup','flashDuration','alive\x20actors\x20not\x20target','loadBattleback1','yKHrp','battlerShadowScaleY','etByJ','Game_Action_itemHit','MAXMP','Sprite_Enemy_update','_effectDuration','_battlerContainer','SceneManager_push','FocusX','AvpvN','addGuardCommand','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','buffAdd','bitmapHeight','startInjectAnimation','hyXXi','onAngleEnd','QzBuA','displayReflectionPlayBack','JS\x20%1START\x20TURN','TDktG','Game_Action_makeTargets','addSkillCommands','Scene_Battle_startEnemySelection','dOHGd','actorCommandEscape','createBattleUIOffsetX','ActSeq_Mechanics_StbExtraAction','split','_enemyID','_iconIndex','MeleeDistance','BattleLog','updateCustomActionSequence','Game_Enemy_transform','canInput','AutoBattleCancel','drawItemImagePortraitStyle','waitForEffect','iACOa','svBattlerAnchorX','ActSeq_Mechanics_CtbOrder','battleGrow','FevqY','initialize','NvteG','constructor','ZQKGz','isATB','dataId','Mirror','battleback2Name','surprise','command357','AgbSe','WEAPON\x20SWAP','customDamageFormula','debuffAdd','clearResult','CriticalHitRate','left','_battlerName','switchToWeaponType','createKeyJS','abs','yPHzz','Scene_Map_initializeAfter','ActionSequence','_namesCount','isAnyoneSpinning','wSoks','findIndex','TpbActiveChangeEnabled','CurrentTurn','makeActions','Pre','updateHpGaugePosition','getLastPluginCommandInterpreter','Game_Troop_expTotal','ARRAYFUNC','applyItem','createUIContainer','isForFriendBattleCore','EcTBb','_skillIDs','shouldPopupDamage','performAttack','weapons','forceAction','kQGLW','VariableDmg','OwZDN','EmergeText','HDnDt','StepDistanceY','HitRate','selectPreviousCommand','aylEZ','_cursorArea','jjwGi','forceSelect','EscapeFail','updateCollapse','_targetHomeX','PrioritySortActors','Scene_Battle_selectPreviousCommand','weaponImageId','SslkX','value','voQeB','IconSet','VisuMZ_2_BattleSystemCTB','bPvCG','ActSeq_BattleLog_DisplayAction','walk','showPortraits','Sprite_Damage_createChildSprite','DisplayAction','Scene_Battle_onActorCancel','EscapeSuccess','setBattleCameraOffset','Mechanics','popBaseLine','AXOfr','drain','registerCommand','_enemyId','Window_BattleLog_displayMiss','ActSeq_Mechanics_ActionEffect','_battlerHue','_statusWindow','addText','putActiveBattlerOnTop','TpGaugeOffsetY','Sprite_Actor_setBattler','Scene_Boot_onDatabaseLoaded','getBattlePortraitOffsetY','Scene_Battle_skillWindowRect','textColor','Game_Enemy_setup','members','slices','setupBattleback','isDuringNonLoopingMotion','jsScaleToFit','iCZsO','VhQhe','GOMxb','iUbOb','Window_BattleStatus_drawItemImage','Dncyx','updateStateSpriteBattleCore','PostApplyAsTargetJS','performRecovery','isOkEnabled','svShadow','Scene_Battle_stop','_skewX','isCharging','JDHGY','_battleLayoutStyle','jecOY','EscapeFailureJS','Scene_Battle_commandFight','JS\x20%1END\x20TURN','placeActorName','startTpbTurn','isEscapeCommandEnabled','skillItemWindowRectMiddle','Game_Battler_onBattleEnd','process_VisuMZ_BattleCore_DamageStyles','isStatusAffected','lukEffectRate','mxNBr','speed','TmKVw','battleCameraData','updateFrame','SkipPartyCmd','msyQP','IaCGI','sliceMax','displayMiss','hGDAe','createBattleUIOffsetY','enemyId','setupShockwaveImpactFilter','wDuPO','ActSeq_BattleLog_UI','_executedValue','Game_Battler_startTpbTurn','updateShadowPosition','RegExp','alive\x20actors\x20not\x20user','itemEffectAddNormalState','Scene_Battle_logWindowRect','getChildIndex','jUvVI','currentValue','_createCursorArea','NFeAc','lsWFV','ActSeq_Mechanics_DamagePopup','pOPCY','lsdrI','ActSeq_Movement_HomeReset','removeImmortal','trim','partyCommandWindowRect','addEscapeCommand','setActiveWeaponSet','ShowWeapon','performCounter','Game_Action_applyGlobal','XCyXN','makeDeepCopy','Sprite_Weapon_loadBitmap','iAzgl','forceWeaponAnimation','removeHorrorEffect','addFightCommand','_battleField','WaitForSkew','hpAffected','itemRect','ActSeq_Impact_TimeScale','RKFNY','VisuMZ_2_BattleSystemFTB','OffsetY','setValue','isChangingOpacity','HP_Flat','_totalValue','ActSeq_Projectile_Animation','vOMae','NIXZg','DistanceY','gainHalfActionsPTB','refreshBattlerMotions','extraPositionY','counterAttack','requestMotionRefresh','_targetAngle','_flashDuration','initMembers','Scene_Battle_initialize','_mainSprite','duration','startOpacity','_text','statusText','Scene_Battle_createPartyCommandWindow','isFTB','updateTargetPosition','setupActionSet','mainSpriteHeight','setEventCallback','contains','updateUiContainerPosition','deathStateId','_autoBattleWindow','HBJSE','checkTpbInputClose','getNextSubjectFromPool','getColor','move','float','XKrfp','compatibilityVisible','createHpGaugeSprite','displayCritical','WPnVE','initMembersBattleCore','MaxLines','makeSuccess','isEffecting','WaitForOpacity','pyucf','makeTargetsBattleCore','anchorY','Game_Action_evalDamageFormula','tpbCommandFight','BattleManager_makeActionOrders','isMeleeSingleTargetAction','attack','NkfaU','isDisplayEmergedEnemies','isAttack','TargetLocation','_customDamageFormula','WdHlL','eSKTM','sClot','fQMFg','ROwCm','_motion','battleSys','animation','restore','DigitGrouping','XPActorCommandLines','attackSkillId','canUseItemCommand','Rate','BattleCmdList','isOptionsCommandAdded','RevertAngle','Usgcd','clearOnceParallelInterpreters','SKILLS','createEnemyNames','Uttok','nhlXd','HQCbp','DCyeQ','ArPenFlat','qBYzA','setupWeaponAnimation','ndreT','waitForMovement','Exmks','fnordAddedStates','_waitCount','BattleManager_onEscapeFailure','moveBattlerHomeToPoint','ShowFacesListStyle','SjxIC','drawTextEx','OffsetAdjust','STYPES','BattleSystemSTB','addAutoBattleCommands','gXLZG','uiMenuStyle','makeTargetSprites','fXsJg','autoBattleStart','TAvFe','createDamageSprite','measureTextWidth','ngxzn','arPenRate','friendsUnit','_enemyNameContainer','ShuffleArray','NUM','animationId','createAnimationContainer','1039716KoAZZl','Scene_Battle_helpWindowRect','846498IvvZWn','useDigitGrouping','attackStatesRate','ShowPopup','erefG','ArRedRate','_padding','createMiss','startSkew','<CENTER>%1','onEscapeSuccess','NuLGA','slice','LlSGy','setHandler','getCommonEventIdWithName','vRYai','adjustFlippedBattlefield','Window_BattleLog_performDamage','loop','ATjVQ','Scene_Battle_onEnemyCancel','itemEffectAddAttackState','ARRAYJSON','ActSeq_Mechanics_BoostPointsChange','worldTransform','_lastRegenFrameCount','CriticalDmgFlat','isAtbChargingState','contents','Targets2','Scene_Battle_createHelpWindow','1002450FRJtnd','PreEndBattleJS','skewBattler','DualWield','commandNameWindowCenter','thrust','drawSkillCost','Frame','WaitForAngle','nUYrx','battleCommandName','_battleCoreNoElement','jFVte','maxTp','eWDtG','createMainSprite','swing','isBattleRefreshRequested','_effectType','_animation','isCancelled','performMagicEvasion','commandName','blockWidth','Window_BattleLog_performActionEnd','options','ActSeq_Mechanics_FtbAction','SideviewSelect','performMoveToTargets','occasion','CastCertain','Sprite_Animation_targetSpritePosition','okTargetSelectionVisibility','battleInjectAni','displayCurrentState','Buffs','PreStartActionJS','Window_Options_statusText','includes','_targetSkewY','_actionInputIndex','DamageType%1','Window_BattleLog_performEvasion','PortraitScaleBorderStyle','JkznH','initVisibility','createAnimationSprite','isOnCurrentMap','StyleName','startSpin','AJYms','GmEoP','createStateSprite','process_VisuMZ_BattleCore_TraitObject_Notetags','baGeO','zBfmi','attackAnimationIdSlot','_growWholeDuration','vhnNH','update','_motionType','isQueueOptionsMenu','Game_BattlerBase_refresh','CmdIconEscape','isMagical','battleEffect','changeAtbCastTime','OffsetX','initBattlePortrait','hitFlat','ForceDeath','toLowerCase','moveToStartPositionBattleCore','motionSpeed','battlerSmoothImage','eNaTj','UFLTu','Game_Action_setGuard','anchorX','_tempActor','_commonEventIDs','expRate','LVwbb','right','CastMagical','close','isSTB','actorCommandCancelTPB','isCertainHit','makeActionListAutoAttack','BTestBypass','pow','evalDamageFormula','Game_Interpreter_terminate','ActSeq_Impact_Negative','power','width','_weather','404066cLJfNU','Sprite_Battler_update','setBattleCameraPoint','ConfigManager_makeData','ActSeq_Mechanics_EtbAction','stateMotionIndex','_logWindow','performMoveToPoint','isVisualHpGaugeDisplayed','magicReflection','ActSeq_Element_AddElements','snapForBackground','_indent','pattern','softDamageCapRate','_drawTextBody','_targetIndex','ReflectPlayback','ActSeq_ChangeAngle','mpDamageFmt','updateJump','ShowSubstitute','isAnyoneSkewing','startPartyCommandSelection','_stateSprite','CommandVisible','_flipScaleX','_linkedSprite','Window_BattleLog_displayTpDamage','freezeTime','VisuMZ_1_MainMenuCore','trueRandomTarget','ActSeq_BattleLog_PushBaseLine','GUHuO','_effectsContainer','JS\x20ESCAPE\x20FAILURE','updateStart','_angleEasing','Sprite_Battleback_adjustPosition','_skewY','singleSkill','Sprite_Enemy_updateCollapse','lastBattleSkill','blt','JS\x20%1DAMAGE\x20%2','ARRAYEVAL','Debuffs','SvWeaponSolo-%1-%2','QJtfb','lejwt','ActSeq_Impact_MotionBlurScreen','bSDxc','setBattlerBattleCore','_homeX','showHelpWindow','tKBmJ','QNEqv','note','MP_Rate','canMove','LcmhF','stepFlinch','PreApplyAsTargetJS','dying','_animationSprites','performReflection','OuMEA','CalcEscapeRatioJS','_partyCommandWindow','targetSpritePosition','_homeWholeDuration','CheckVisibleSwitchNotetags','rCmCV','EFeZe','NhgYU','MuAln','processEscape','Scene_Battle_start','States','_weaponSprite','isForRandom','isChanting','processVictory','performWeaponAnimation','scale','autoMeleeMultiTargetActionSet','CalcActionSpeedJS','helpWindowRect','statusTextAutoBattleStyle','BARE\x20HANDS','processDefeat','isAnimationPlaying','_hpGaugeSprite','ShowActorGauge','adjustPosition_ScaleToFit','BattleManager_onEscapeSuccess','stateRate','yBQyT','getAttackMotionSlot','isInputting','pop','WaitForNewLine','arPenFlat','ActSeq_Movement_MoveToPoint','battleOpacity','Filename','fxNCi','_targetGrowX','drawItemImage','addChildAt','setupBattleCore','urfYr','iconWidth','applyForcedGameTroopSettingsBattleCore','nVHMm','updatePositionBattleCore','BattleManager_endAction','critical','performMiss','Amp','FaceAway','BattleManager_processDefeat','start','Game_Battler_regenerateAll','Sprite_Battler_updatePosition','MAT','ParseItemNotetags','innerHeight','CmdTextAutoBattle','BindCommonEventKeysForGroup','isBattleCoreTargetScope','_action','MMDSt','BattleManager_onEncounter','1:1','ActSeq_Mechanics_Collapse','_borderPortraitSprite','HJJMD','Window_BattleLog_displayCritical','getMenuImage','dead\x20friends','Armor-%1-%2','damageOffsetX','battler','cuWjB','jump','setBattleSkew','Sprite_Actor_moveToStartPosition','BTB','CQIdn','_isBattlerFlipped','CalcEscapeRaiseJS','_createCursorSprite','ATK','%1RegenerateJS','ActionSkillMsg1','QkRvw','makeTargets','btalm','Game_Interpreter_command301','children','FKuFK','isForOne','ActionEffect','performActionStart','isDebuffAffected','getInputButtonString','createAutoBattleWindow','clearFreezeMotionForWeapons','MANUAL','join','IconStypeNorm','battlerShadowScaleX','ApplyImmortal','VisuMZ_2_BattleSystemATB','kgHeD','qbDTc','Scene_Battle_startActorSelection','ShowHpDmg','guard','ScaleDown','jsScaleUp','VlEmT','Game_Action_apply','callNextMethod','sSIfQ','isAnyoneInjectAniPrepping','VisuMZ_2_PartySystem','_lastAction','AlphaFilter','selectNextActor','terminate','fight','XDWpQ','isAutoBattle','XPSpriteYLocation','actorCommandSingleSkill','Interrupt','drawItemStyleIconText','PostRegenerateJS','isBusy','SPbRN','traitSet','createHelpWindowBattleCore','HelpAutoBattle','uRUvd','setupMotionBlurImpactFilter','getStypeIdWithName','message1','addExtendedTroopMembers','UjceI','updateForceAction','offsetX','battleStatusWindowAnimationContainer','StyleOFF','globalAlpha','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','oLhQC','State-%1-%2','ActSeq_Projectile_Picture','PostStartActionJS','StartTurnMsg','processBorderActor','PostApplyJS','select','_tempBattler','Window_BattleLog_performCollapse','CriticalHitMultiplier','\x5cI[%1]%2','lXEQT','CounterPlayback','zYGmc','VariableID','hidden','targetDistortionSpritePosition','isGrowing','calcWindowHeight','applyEasing','startAction','StepDuration','resize','createShadowSprite','executeDamage','Game_BattlerBase_initMembers','maxBattleMembers','JeCnD','_freezeMotionData','setBackgroundType','PreStartBattleJS','createEnemyNameContainer','redraw','commandAutoBattle','updatePosition','OTfWm','Index','Style','Window_BattleLog_performRecovery','zMxYJ','Game_Battler_performDamage','battleStatusSprite','eXLuS','autoBattleAtStart','refreshStatusWindow','StateIconOffsetX','_preBattleCommonEvent','_displayBattleCoreTransitionErrorMsg','isOpen','startTurn','processExtendTroopMembers','randomInt','isDamagePopupRequested','lineRect','_createClientArea','cFMxF','changeInputWindow','commandNameWindowDrawBackground','Game_Action_itemEffectAddAttackState','refreshRequest','performTpbActiveCheckSwitch','jObQZ','FBsPW','Scene_ItemBase_applyItem','SvBattlerMass-%1-%2','_actions','drawTextTopAligned','IAUNr','Enemy-%1-%2','logActionList','ActSeq_Inject_AnimationStart','TXfYx','bottom','ActSeq_Horror_NoiseRemove','shadow','_damageContainer','unshift','svBattlerData','uxTEJ','skills','BattleEndEvent','retreat','requestFauxAnimation','_defeatedEnemies','createAttachedSprites','gWayj','YbYDo','cdAeg','ZpNBE','+%1\x20MP','spriteId','onBattleStart','AutoBattleMsg','anchor','battlerName','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','playOnceParallelTroopPage','isDying','createPartyCommandWindowBattleCore','createActorCommandWindow','description','sideview_ui','isHiddenSkill','onTurnEnd','Enable','PopupPosition','qRrTn','Aambf','isShownOnBattlePortrait','updateShadow','message2','currentAction','Class-%1-%2','isFastForward','frontviewSpriteY','updateLink','unchanged','nWHDg','isAtbCastingState','visible','subject','drawItemStyleIcon','base','max','ANTI_TINT_UI','PdATL','ActSeq_Mechanics_PtbConvert','DefaultDamageStyle','updateRefresh','AddOption','oeGbu','MMXrB','ActSeq_Impact_ShockwaveEachTargets','wKfyM','ActSeq_Projectile_Icon','WQUDn','AutoMeleeSolo','isTurnBased','requestMotion','JihXt','addAttackCommand','gainFullActionsPTB','Ihizd','LUBcF','HpGaugeOffsetX','mODVp','isBorderStylePortraitShown','ZPstJ','StTWO','iterateBattler','StatusWindowSkinFilename','createContents','Window_BattleLog_performActionStart','mainSpriteScaleY','Settings','UkqTP','Linear','currentSymbol','CTB','canBattlerMove','yyWrm','prepareCustomActionSequence','ActSeq_Mechanics_DeathBreak','createChildSprite','getWtypeIdWithName','EnableSoftCap','removeDamageSprite','drawActorFace','PzGxl','PostDamageAsUserJS','isSkill','createDamageContainer','_spriteset','create','itemHit','notFocusValid','_cancelButton','dYQbY','performActionEnd','ActSeq_Motion_RefreshMotion','Sprite_Battler_initMembers','SwitchMissEvade','grQFs','setGuard','updateAngleCalculations','TpbGaugeOffsetY','onEncounter','mainSpriteScaleX','PjtNw','PnqYS','Sprite_Enemy_setHue','AutoNotetag','QZrxH','criticalHitRate','getHalfActionsPTB','innerWidth','revertTpbCachedActor','hasStaticSvBattler','updateSkew','Scene_Options','height','performJump','format','BattleManager_startAction','HelpOptions','BattleCore','NameOffsetY','process_VisuMZ_BattleCore_Notetags','arRedRate','NEoQY','hbpLP','registerDefeatedEnemy','padding','kBYZk','_motionSpeed','createBorderStylePortraitSprite','loadSvEnemy','_forcedBattleLayout','addWeaponSwapCommand','KAzrK','KJMio','StatusWindowAttachmentBackOffsetY','glitch','revealNewWeaknesses','_shadowSprite','ActSeq_Mechanics_RemoveBuffDebuff','COMBATLOG','SaBgD','alterCost','bind','canUse','sBKYS','removeChild','setBattlerFacePoint','ppnoh','launchBattle','ActionAnimation','refreshMotion','createCommandNameWindow','REcEX','processActorCommandCancelTPB','canGuard','vKPrd','substitute','addOnceParallelInterpreter','filters','Scene_Options_maxCommands','nhRNv','Sprite_Battler_damageOffsetY','opacityStart','displayChangedStates','CoreEngine','displayFailure','Turns','ActSeq_Weapon_SetActiveWeapon','_reflectionTarget','VdbSE','ActSeq_Angle_WaitForAngle','QIwqF','KoQSw','CmdIconOptions','NameLegacy','version','_updateCursorArea','processRefresh','value1','Window_Options_addGeneralOptions','text\x20target','DefeatEvent','helpAreaHeight','onRegeneratePlayStateAnimation','_phase','CommonEventID','StepDistanceX','BattleManager_updatePhase','updateSpin','autoSelectLastSelected','JTzSv','updateEffectContainers','checkBattleEnd','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','createWeather','DamageFlat','clearBattleCoreData','isIncludedInEnemyWindow','GRYry','isHidden','uKAQN','NameAlwaysHidden','DbSTs','uDlvE','cYgrD','_attackAnimationId','allBattleMembers','611051gvyiXX','Game_Battler_clearMotion','TLiJp','ParseClassNotetags','battleCoreTpbMainPhase','fuUMJ','Game_BattlerBase_isStateResist','statusWindowRectBorderStyle','battleSpin','isAnyoneFloating','boxHeight','Window_ItemList_maxCols','FlinchDuration','ShowRemovedState','ActSeq_Mechanics_BtbGain','ActSeq_Impact_ZoomBlurPoint','physical','isFrameVisible','LzTgE','eEwyX','applyAngleChange','ATTACK','JS\x20%1START\x20BATTLE','hue','_dimmerSprite','hasSkill','NIELG','regenerateAll','eSvhp','Scene_Battle_startActorCommandSelection','onDatabaseLoaded','setCustomDamageFormula','loadEnemy','mBvxt','HryGX','frameVisible','frameDelay','toUpperCase','AttachStateOffsetY','isAnyoneMoving','Sprite_AnimationMV_updatePosition','StatusWindowAttachmentFrontOffsetX','YuWzH','EmREk','command301_PreBattleEvent','allowCollapse','Scene_Battle_createAllWindows','makeTargetSelectionMoreVisible','Scene_Map_initialize','changePaintOpacity','_flinched','drawBackgroundRect','drawItemImageXPStyle','getDefeatedEnemies','ActSeq_Inject_AnimationPauseResume','addDebuff','isDTB','isAlwaysHidden','%1EndTurnJS','ChantStyle','rUEVx','updateAttachmentSprites','gainCurrentActionsFTB','helpAreaBottom','list','ActiveTpbOptionsMessage','autoMeleeSingleTargetActionSet','isSelected','gainHp','Damage','extendTroopMembers','PopupShiftY','ActionStart','Window_BattleLog_displayEvasion','actor','TP_Flat','gaugeX','UVAWy','filterArea','XoSXz','process_VisuMZ_BattleCore_PluginParams','setBattlerMotionTrailData','_visualHpGauge_JustDied','tYqsW','_commonEventQueue','Sprite_Actor_updateFrame','addMeleeReturnActionSet','Game_Party_addActor','Height','_pattern','_battlePortrait','VlYgX','collapse','endBattle','_offsetY','BattleVictoryJS','ActSeq_Mechanics_Multipliers','missle','DefaultStyle','isTickBased','Immortal','_targetHomeY','battleDisplayText','applyBattleCoreJS','startHomeMove','battleCoreResumeLaunchBattle','Game_Action_executeDamage','growBattler','collapseType','BattleLayout','onHomeMoveEnd','ArPenRate','ActSeq_Mechanics_PtbFullHalfAction','ActSeq_Zoom_WaitForZoom','GHJMY','IpRsL','commandRemember','ActSeq_Zoom_Scale','xXzTa','processRandomizedData','_tpbNeedsPartyCommand','tjMsd','startGrow','alterType','inputtingAction','getItemDamageAmountLabelOriginal','XAqqR','daNkz','battleAngle','isPreviousSceneBattleTransitionable','aySGo','MPmKT','PreEndActionJS','_battleCoreBattleResumeAfter','iydex','delay','performFlinch','_createEffectsContainer','WaitForFloat','PostStartBattleJS','Game_Actor_makeActionList','VDtAk','cSaoA','showAnimation','WeaponTypeID','%1EndBattleJS','maxCols','VisuMZ_3_ActSeqImpact','Intensity','ChargeRate','_multipliers','_updateFilterArea','_backAttachmentSprite','performEvasion','IconStypeMagic','_homeDuration','isAnyoneChangingOpacity','ResetFocus','isSkipPartyCommandWindow','_lastPluginCommandInterpreter','lVKZk','performSTBExploiter','isAutoBattleCommandEnabled','isItemCommandEnabled','RkAHr','user','VisuMZ_2_BattleSystemETB','Angle','bossCollapse','ActSeq_Weapon_ClearActiveWeapon','alive\x20opponents\x20not\x20target','forceMotion','PortraitScale','KysdX','Targets','ALL\x20SKILLS','setActionState','ActSeq_Impact_ShockwavePoint','checkSubstitute','PreRegenerateJS','Defeat','_frontAttachmentSprite','pages','Override','eraseState','updateCommandNameWindow','autoSelectPriority','tone','\x20to\x20%1\x20midbattle.','addNewState','clearActiveWeaponSlot','isRightInputMode','Sprite_Battler_updateMain','_baseX','HHpqf','createAttachmentSprites','damageStyle','bitmapWidth','Spriteset_Battle_createLowerLayer','font','isSideView','svBattlerShadowVisible','BattleManager_checkBattleEnd','min','ActSeq_Impact_ColorBreak','turn','setupChild','makeSpeed','SnElB','createLowerLayer','hMLvA','vbUXB','statusWindowRect','ActSeqImpact','_opacityEasing','rowSpacing','exit','VisuMZ_0_CoreEngine','battleCommandIcon','_distortionSprite','displayMpDamage','Scene_Battle_createActorCommandWindow','_autoBattle','AnchorX','isAutoBattleCommandAdded','jgSNO','Window_BattleLog_performSubstitute','loadSystem','battleCommands','TP_Rate','currentClass','PsAEB','CommandAddAutoBattle','RvPOh','_jumpDuration','GLwZH','floatBattler','Destination','addedStateObjects','nbUpL','svBattlerName','DefaultSoftCap','drawGauge','_stateIconSprite','ActSeq_Angle_Reset','HBHZb','ShowAddedDebuff','_lineHeight','hpDamageFmt','VQjOZ','ueFCA','updateBossCollapse','AutoBattle','autoBattleWindowRect','startActorCommandSelection','onJumpEnd','isCommonEventReserved','_svBattlerData','2120256LTvUgj','removeActor','removeAnimation','alive\x20battlers','StateIconOffsetY','Game_Action_isForRandom','Window_BattleEnemy_initialize','VisuMZ_3_BoostAction','ActSeq_Inject_WaitForInjectAni','#%1','AEZnU','jLZQi','fbPRo','open','FcFgF','_requestRefresh','XkzCL','WaitForZoom','kLdkP','setLastBattleSkill','_growY','process_VisuMZ_BattleCore_Action_Notetags','isMoving','skillWindowRect','updateBattlebackBitmap2','pauseInjectAnimation','getEnemyIdWithName','onEnemyCancel','isBattleSys','map','refreshDimmerBitmap','kciHb','ActSeq_Movement_WaitForJump','AntiTintUiElements','addPartyCommand','QdQKR','extraPositionX','ActSeq_Animation_ActionAnimation','updateShadowBattleCore','xANlf','stepForward','VisuMZ_3_ActSeqCamera','updateInterpreter','resetBreakShield','Sprite_Battler_isMoving','AsUser','yloNL','ActSeq_BattleLog_Clear','changeAtbChargeTime','_angleDuration','JqYVc','uFEQK','swapEnemyIDs','-%1\x20MP','Scene_Battle_onEnemyOk','turnOrderChangeOTB','ibash','finishActorInput','Scene_Battle_updateBattleProcess','autoBattleStyle','Hxemy','magicSkills','_canLose','isClicked','frameCount','Window_BattleLog_update','dead\x20opponents','isAppeared','ActSeq_Mechanics_TextPopup','Scene_Party','Point','updateStaticSvBattlerFrames','BvQst','_opacityWholeDuration','ActSeq_Horror_TVRemove','return\x200','damageRate','battleMembers','VuGHT','VisuMZ_1_ElementStatusCore','ActSeq_Target_RandTarget','Setting','BattleManager_inputtingAction','_immortal','jEygT','isJumping','prototype','isCustomBattleScope','scope','ddQLl','clear','_inputting','_currentActor','SceneManager_isSceneChanging','nZPYz','ActSeq_Mechanics_Immortal','zgaQY','startMove','_commonEventKey','makeActionList','hitRate','ShowTpDmg','BmtSq','setBattleAngle','ConvertParams','createInnerPortrait','PerformAction','autoBattle','_branch','kDWXM','Redha','effects','_forcedBattlers','callOkHandler','selectNextCommandTpb','addTextToCombatLog','Game_Interpreter_PluginCommand','mhp','XLMSK','PUpGL','lpEuH','cancelActorInput','dqtxk','ifRVm','updatePadding','BussZ','partyCommandWindowRectDefaultStyle','checkShowHideBattleNotetags','OJMFy','lwGaV','ooAOK','casting','cHUwi','adjustPosition_ScaleDown','ActSeq_Movement_Spin','xovmP','ReflectAnimation','ActSeq_Target_NextTarget','JSON','yzTYQ','Sprite_Enemy_updateBossCollapse','guardSkillId','abnormal','SrJXv','YIjPr','updateWaitMode','initElementStatusCore','endAnimation','lAwrn','front\x20base','WaitCount','ERHVJ','Llrja','_battler','getBattlePortraitOffsetX','isStateResist','isSkewing','ActSeq_Mechanics_BoostPointsStoreData','BattleSystemCTB','ftpac','waitForNewLine','JS\x20BATTLE\x20DEFEAT','some','_enemies','isItem','StartTurnShow','_surprise','position','JtacO','<CUSTOM\x20ACTION\x20SEQUENCE>','getSkillIdWithName','applyGuard','STB','TimeScale','damage','playReflection','QNeqE','isPhysical','filter','damageContainer','drawItemStatusXPStyle','windowAreaHeight','dpboV','setupNegativeImpactFilter','_targets','isWaiting','ActSeq_Impact_ZoomBlurTargetCenter','show','displayActionResults','sXKyy','_waitMode','ActSeq_Mechanics_AddState','IZSQo','_jumpWholeDuration','ActSeq_Set_SetupAction','setBattleImpactTimeScale','clearWeaponAnimation','gradientFillRect','HWkWW','JumpToLabel','_offsetX','BattleSystemBTB','gainBravePoints','sortDamageSprites','isPartyTpbInputtable','_floatWholeDuration','VisuMZ_2_BattleSystemSTB','MOTIONS','_currentAngle','regionId','createBattleField','sCnQr','Game_Battler_performMiss','StatusWindowSelectableBackHide','FPzdl','SmoothImage','rzOor','HmIjF','MpGaugeOffsetX','%1Event','timeScale','getItemDamageAmountTextOriginal','performDamage','Scene_Battle_createCancelButton','call','boxWidth','DCWpY','CriticalDmgRate','regenerateAllBattleCore','linkSprite','equips','performAction','StatusWindowAttachmentBackOffsetX','onFloatEnd','ActSeq_Mechanics_OnceParallel','isNonSubmenuCancel','attackAnimationId1','wBvTw','canAttackBattleCore','Window_BattleLog_displayFailure','Window_BattleLog_displayActionResults','gainMp','TextColor','Sprite_Battler_setBattler','displayHpDamage','charging','Strength','sort','Spriteset_Battle_updateActors','vStcv','battleCamera','fcEKj','ScaleY','createStateIconSprite','OverallFormulaJS'];_0x24a1=function(){return _0xf047f7;};return _0x24a1();}Game_BattleOnceParallelInterpreter[_0x10ff30(0xb0c)]=Object[_0x10ff30(0x93b)](Game_Interpreter[_0x10ff30(0xb0c)]),Game_BattleOnceParallelInterpreter[_0x10ff30(0xb0c)]['constructor']=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter['prototype'][_0x10ff30(0x3c7)]=function(_0x15d5c9){const _0x11d7f6=_0x10ff30,_0x52e0e9=$dataCommonEvents[_0x15d5c9];_0x52e0e9?'cllNV'===_0x11d7f6(0x3bf)?(this[_0x11d7f6(0x285)]['setHelpWindow'](this[_0x11d7f6(0x4fd)]),this[_0x11d7f6(0x7f8)]['setHelpWindow'](this[_0x11d7f6(0x4fd)])):this[_0x11d7f6(0x542)](_0x52e0e9[_0x11d7f6(0x9f4)],0x0):this['terminate']();},Game_BattleOnceParallelInterpreter['prototype'][_0x10ff30(0x873)]=function(){const _0x2a4b5a=_0x10ff30;if(!SceneManager[_0x2a4b5a(0xc1e)]())return;SceneManager[_0x2a4b5a(0x2df)][_0x2a4b5a(0x33f)](this),Game_Interpreter[_0x2a4b5a(0xb0c)]['terminate'][_0x2a4b5a(0xb96)](this);},Game_BattleOnceParallelInterpreter['prototype'][_0x10ff30(0x396)]=function(_0x1f4a48){const _0x2f7c23=_0x10ff30;_0x1f4a48?_0x2f7c23(0x6be)===_0x2f7c23(0x673)?this[_0x2f7c23(0x967)]='default':this['setup'](_0x1f4a48['list'],0x0):this[_0x2f7c23(0x873)]();},Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x550)]=function(){const _0x280d2f=_0x10ff30;return VisuMZ[_0x280d2f(0x95b)][_0x280d2f(0x928)][_0x280d2f(0xc78)]['DisablePartyCmd'];},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x29b)]=Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x7cb)],Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x7cb)]=function(){const _0x77b128=_0x10ff30;this[_0x77b128(0x550)]()?this[_0x77b128(0xbfb)]():_0x77b128(0x499)!==_0x77b128(0x499)?(_0x118758['_autoBattle']=!![],_0x56741f[_0x77b128(0x61e)](),this[_0x77b128(0x3ea)](),_0x293551[_0x77b128(0xccf)]()&&(_0x4704de[_0x77b128(0xb11)]=![])):VisuMZ['BattleCore'][_0x77b128(0x29b)][_0x77b128(0xb96)](this);},Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0xbfb)]=function(){const _0x1b8e5d=_0x10ff30;if(BattleManager[_0x1b8e5d(0x9ec)]()){if('VhQhe'===_0x1b8e5d(0x666))this[_0x1b8e5d(0x3ea)]();else return;}else BattleManager[_0x1b8e5d(0xccf)]()&&VisuMZ[_0x1b8e5d(0x95b)]['Scene_Battle_startPartyCommandSelection'][_0x1b8e5d(0xb96)](this);},VisuMZ[_0x10ff30(0x95b)]['Scene_Battle_commandFight']=Scene_Battle['prototype'][_0x10ff30(0x398)],Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x398)]=function(){const _0x1d6124=_0x10ff30;BattleManager['isTpb']()?(this['tpbCommandFight'](),this[_0x1d6124(0xab2)]()):VisuMZ[_0x1d6124(0x95b)][_0x1d6124(0x677)][_0x1d6124(0xb96)](this);},Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x6ed)]=function(){const _0x3d6c4b=_0x10ff30;if(!VisuMZ[_0x3d6c4b(0x95b)]['TpbActiveChangeEnabled'])return;if(Imported[_0x3d6c4b(0x643)]&&BattleManager[_0x3d6c4b(0x203)]())return;const _0x1a10ba=$gameParty[_0x3d6c4b(0xc07)]()[_0x3d6c4b(0xb68)](_0x232569=>_0x232569[_0x3d6c4b(0xc6e)]()&&_0x232569[_0x3d6c4b(0x5f7)]());BattleManager[_0x3d6c4b(0xb12)]=_0x1a10ba[0x0]||null,BattleManager['_currentActor']&&('DdvhV'!=='DdvhV'?_0x42f242[_0x3d6c4b(0x740)]('cancel',this[_0x3d6c4b(0x7a9)][_0x3d6c4b(0x973)](this)):BattleManager[_0x3d6c4b(0xb12)][_0x3d6c4b(0xa64)](_0x3d6c4b(0x362)));},VisuMZ['BattleCore'][_0x10ff30(0xa91)]=Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x8f1)],Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x8f1)]=function(){const _0x542c03=_0x10ff30;VisuMZ['BattleCore'][_0x542c03(0xa91)][_0x542c03(0xb96)](this),this[_0x542c03(0x1f4)]();},Scene_Battle[_0x10ff30(0xb0c)]['createActorCommandWindowBattleCore']=function(){const _0x4cd1ca=_0x10ff30,_0x5436bf=this[_0x4cd1ca(0x285)];_0x5436bf['setHandler'](_0x4cd1ca(0x378),this[_0x4cd1ca(0x5ed)][_0x4cd1ca(0x973)](this)),_0x5436bf[_0x4cd1ca(0x740)]('autoBattle',this['actorCommandAutoBattle'][_0x4cd1ca(0x973)](this)),_0x5436bf[_0x4cd1ca(0x740)]('singleSkill',this[_0x4cd1ca(0x878)][_0x4cd1ca(0x973)](this));if(BattleManager['isTpb']()){if(this['isPartyCommandWindowDisabled']())delete _0x5436bf[_0x4cd1ca(0x350)][_0x4cd1ca(0x535)];else{if(_0x4cd1ca(0x540)!==_0x4cd1ca(0x540)){if(!_0x5d569a[_0x4cd1ca(0x640)](_0x800d69))return![];}else _0x5436bf[_0x4cd1ca(0x740)](_0x4cd1ca(0x535),this[_0x4cd1ca(0x7a9)][_0x4cd1ca(0x973)](this));}}},Scene_Battle['prototype'][_0x10ff30(0x5ed)]=function(){this['commandEscape']();},Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x2e2)]=function(){const _0x144c1e=_0x10ff30;BattleManager[_0x144c1e(0x9fe)]()['makeAutoBattleActions'](),BattleManager['finishActorInput'](),BattleManager[_0x144c1e(0x872)](),this[_0x144c1e(0x8c6)]();},Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x878)]=function(){const _0x29d1b5=_0x10ff30,_0x58f064=BattleManager[_0x29d1b5(0xa30)](),_0x1a7265=this[_0x29d1b5(0x285)][_0x29d1b5(0x49f)]();_0x58f064[_0x29d1b5(0x4a1)](_0x1a7265),BattleManager[_0x29d1b5(0x9fe)]()[_0x29d1b5(0xac9)]($dataSkills[_0x1a7265]),this[_0x29d1b5(0x58e)]();},Scene_Battle[_0x10ff30(0xb0c)]['actorCommandCancelTPB']=function(){const _0x159304=_0x10ff30;if(this[_0x159304(0x464)]()){if(_0x159304(0xac0)==='mzCjm'){if(this[_0x159304(0x491)]()!=='')return this[_0x159304(0x491)]();else{if(_0xca4141[_0x159304(0x7d2)]&&this[_0x159304(0x83f)]()!=='')return this[_0x159304(0x83f)]();}return'';}else this[_0x159304(0x8ca)]();}else{if(_0x159304(0x201)===_0x159304(0x69f)){const _0x4e3162=_0x8c9729[_0x159304(0x95b)][_0x159304(0x928)][_0x159304(0x617)],_0x1a8f53=_0x4e3162['StepDistanceX'],_0x4e34a9=_0x4e3162[_0x159304(0x632)],_0x15e117=_0x4e3162[_0x159304(0x8a3)];this[_0x159304(0xb17)](-_0x1a8f53,-_0x4e34a9,_0x15e117);}else this[_0x159304(0x97e)]();}},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x61c)]=![],Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x464)]=function(){const _0x3c2b4f=_0x10ff30;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x3c2b4f(0x203)]())return![];else{if(!VisuMZ['BattleCore'][_0x3c2b4f(0x61c)])return![];const _0x178559=$gameParty['aliveMembers']()[_0x3c2b4f(0xb68)](_0x1f121a=>_0x1f121a[_0x3c2b4f(0xc6e)]()&&_0x1f121a[_0x3c2b4f(0x5f7)]());return _0x178559[_0x3c2b4f(0x449)]>0x0&&BattleManager[_0x3c2b4f(0x9fe)]()!==_0x178559[_0x178559['length']-0x1];}},Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x8ca)]=function(){const _0x124c4c=_0x10ff30,_0x1cc198=BattleManager[_0x124c4c(0x9fe)](),_0xd965b5=_0x1cc198[_0x124c4c(0x843)]();if(_0xd965b5)_0xd965b5['stepBack']();const _0x43fc59=$gameParty[_0x124c4c(0xc07)]()[_0x124c4c(0xb68)](_0x4cf703=>_0x4cf703[_0x124c4c(0xc6e)]()&&_0x4cf703[_0x124c4c(0x5f7)]()),_0x253121=_0x43fc59[_0x124c4c(0xbc2)](_0x1cc198),_0x455760=_0x43fc59[_0x253121+0x1];BattleManager['_currentActor']=_0x455760||null;if(_0x455760)_0x455760[_0x124c4c(0xa64)]('inputting');_0x1cc198['setActionState'](_0x124c4c(0x584)),this[_0x124c4c(0x8c6)]();},Scene_Battle['prototype'][_0x10ff30(0x97e)]=function(){const _0x1073e3=_0x10ff30;this['_partyCommandWindow']['setup'](),this['_actorCommandWindow'][_0x1073e3(0x7a7)]();if(!VisuMZ['BattleCore'][_0x1073e3(0x61c)])return;if(Imported[_0x1073e3(0x643)]&&BattleManager[_0x1073e3(0x203)]())return;if(BattleManager[_0x1073e3(0xb12)]){if(_0x1073e3(0x9a3)!=='EjFhF'){BattleManager[_0x1073e3(0xb12)][_0x1073e3(0xa64)](_0x1073e3(0x584));const _0x2958cf=BattleManager[_0x1073e3(0xb12)][_0x1073e3(0x843)]();if(_0x2958cf)_0x2958cf[_0x1073e3(0x2c2)]();}else this[_0x1073e3(0x440)](this[_0x1073e3(0x5b3)]);}BattleManager[_0x1073e3(0xb12)]=null;},VisuMZ[_0x10ff30(0x95b)]['Scene_Battle_createHelpWindow']=Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x33e)],Scene_Battle[_0x10ff30(0xb0c)]['createHelpWindow']=function(){const _0x205c59=_0x10ff30;VisuMZ['BattleCore'][_0x205c59(0x751)]['call'](this),this[_0x205c59(0x87f)]();},Scene_Battle['prototype'][_0x10ff30(0x87f)]=function(){const _0x578827=_0x10ff30;this[_0x578827(0x285)][_0x578827(0xbd3)](this[_0x578827(0x4fd)]),this[_0x578827(0x7f8)]['setHelpWindow'](this[_0x578827(0x4fd)]);},Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0xc1b)]=function(){const _0x25e11a=_0x10ff30;if($gameTemp['_forcedBattleLayout']!==undefined)return $gameTemp[_0x25e11a(0x967)];if(this[_0x25e11a(0x674)])return this[_0x25e11a(0x674)];return this[_0x25e11a(0x674)]=VisuMZ[_0x25e11a(0x95b)]['Settings'][_0x25e11a(0xa21)]['Style'][_0x25e11a(0x799)]()[_0x25e11a(0x6a3)](),this['_battleLayoutStyle']===_0x25e11a(0x8f3)&&!Imported[_0x25e11a(0xc8c)]&&(this[_0x25e11a(0x674)]=_0x25e11a(0x281)),this[_0x25e11a(0x674)];},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xbc3)]=Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0xb6b)],Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0xb6b)]=function(){const _0xb27b35=_0x10ff30,_0x2a26d7=this[_0xb27b35(0xc1b)]();switch(_0x2a26d7){case _0xb27b35(0x9f4):return this[_0xb27b35(0x8a0)](Math['max'](0x1,$gameParty[_0xb27b35(0x8a8)]()),!![]);break;default:return VisuMZ[_0xb27b35(0x95b)][_0xb27b35(0xbc3)]['call'](this);break;}},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x731)]=Scene_Battle['prototype'][_0x10ff30(0x80b)],Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x80b)]=function(){const _0x4cc081=_0x10ff30,_0x198ac6=this[_0x4cc081(0xc1b)]();switch(_0x198ac6){case _0x4cc081(0x401):return this['helpWindowRectBorderStyle']();break;case'default':case _0x4cc081(0x9f4):case'xp':case _0x4cc081(0xc14):default:return VisuMZ[_0x4cc081(0x95b)][_0x4cc081(0x731)][_0x4cc081(0xb96)](this);break;}},Scene_Battle[_0x10ff30(0xb0c)]['statusWindowRect']=function(){const _0x53a53c=_0x10ff30,_0x4ef36b=this[_0x53a53c(0xc1b)]();switch(_0x4ef36b){case'xp':case _0x53a53c(0xc14):return this['statusWindowRectXPStyle']();break;case _0x53a53c(0x401):return this[_0x53a53c(0x9bb)]();break;case _0x53a53c(0x281):case _0x53a53c(0x9f4):default:return this[_0x53a53c(0x323)]();break;}},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x573)]=Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x6a4)],Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x6a4)]=function(){const _0x382c17=_0x10ff30,_0x462c0a=this[_0x382c17(0xc1b)]();switch(_0x462c0a){case'xp':case _0x382c17(0xc14):return this[_0x382c17(0x5a4)]();break;case _0x382c17(0x401):return this[_0x382c17(0x551)]();case _0x382c17(0x281):case _0x382c17(0x9f4):default:return this[_0x382c17(0xb34)]();break;}},Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0xb34)]=function(){const _0x460284=_0x10ff30,_0x2abc85=VisuMZ[_0x460284(0x95b)][_0x460284(0x928)][_0x460284(0xa21)],_0x1b65a3=_0x2abc85[_0x460284(0x23a)]||0xc0,_0x41f831=this['windowAreaHeight'](),_0xc1b928=this['isRightInputMode']()?Graphics[_0x460284(0xb97)]-_0x1b65a3:0x0,_0x4c95a8=Graphics[_0x460284(0x9be)]-_0x41f831;return new Rectangle(_0xc1b928,_0x4c95a8,_0x1b65a3,_0x41f831);},Scene_Battle[_0x10ff30(0xb0c)]['actorCommandWindowRect']=function(){const _0xaa250d=_0x10ff30;return this[_0xaa250d(0x6a4)]();},VisuMZ['BattleCore']['Scene_Battle_updateStatusWindowPosition']=Scene_Battle['prototype'][_0x10ff30(0xc99)],Scene_Battle[_0x10ff30(0xb0c)]['updateStatusWindowPosition']=function(){const _0x48d9ea=_0x10ff30,_0x461d59=this[_0x48d9ea(0xc1b)]();switch(_0x461d59){case'xp':case _0x48d9ea(0xc14):case _0x48d9ea(0x401):break;case _0x48d9ea(0x281):case _0x48d9ea(0x9f4):default:VisuMZ[_0x48d9ea(0x95b)][_0x48d9ea(0xc9f)][_0x48d9ea(0xb96)](this);break;}},VisuMZ['BattleCore'][_0x10ff30(0x865)]=Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0xc0c)],Scene_Battle['prototype']['startActorSelection']=function(){const _0x2abe67=_0x10ff30;VisuMZ[_0x2abe67(0x95b)][_0x2abe67(0x865)][_0x2abe67(0xb96)](this),this[_0x2abe67(0x9e3)]();},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x5eb)]=Scene_Battle['prototype']['startEnemySelection'],Scene_Battle[_0x10ff30(0xb0c)]['startEnemySelection']=function(){const _0x59251b=_0x10ff30;VisuMZ['BattleCore'][_0x59251b(0x5eb)][_0x59251b(0xb96)](this),this[_0x59251b(0x2cc)][_0x59251b(0x2b8)](),this[_0x59251b(0x9e3)]();},Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x9e3)]=function(){const _0x310919=_0x10ff30,_0x4833c6=this[_0x310919(0xc1b)]();['xp',_0x310919(0xc14),'border'][_0x310919(0x778)](_0x4833c6)&&('HHpqf'!==_0x310919(0xa76)?this['_forcedBattleLayout']=_0x310919(0x401):this['_actorCommandWindow'][_0x310919(0x7a7)]()),(_0x4833c6==='border'||this[_0x310919(0x205)]())&&('ZhOTp'!==_0x310919(0x284)?(this['_skillWindow']['close'](),this[_0x310919(0x26f)][_0x310919(0x7a7)]()):_0x5bbbc8['_scene'][_0x310919(0x59c)]());},VisuMZ['BattleCore']['Scene_Battle_onActorOk']=Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x347)],Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x347)]=function(){const _0x5c7867=_0x10ff30;VisuMZ[_0x5c7867(0x95b)][_0x5c7867(0xbe7)][_0x5c7867(0xb96)](this),this['okTargetSelectionVisibility']();},Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0xba1)]=function(){const _0x1e8282=_0x10ff30;return[_0x1e8282(0x6f0),_0x1e8282(0x867),'singleSkill'][_0x1e8282(0x778)](this[_0x1e8282(0x285)][_0x1e8282(0x92b)]());},VisuMZ['BattleCore'][_0x10ff30(0x64a)]=Scene_Battle[_0x10ff30(0xb0c)]['onActorCancel'],Scene_Battle[_0x10ff30(0xb0c)]['onActorCancel']=function(){const _0x59f51b=_0x10ff30;if(this[_0x59f51b(0xba1)]()){if('ynwjc'==='ynwjc')this[_0x59f51b(0x656)][_0x59f51b(0xb71)](),this[_0x59f51b(0xca3)][_0x59f51b(0x34b)](),this[_0x59f51b(0x285)]['activate']();else return![];}else VisuMZ[_0x59f51b(0x95b)][_0x59f51b(0x64a)][_0x59f51b(0xb96)](this);this[_0x59f51b(0x23b)]();},VisuMZ['BattleCore'][_0x10ff30(0xaec)]=Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x57d)],Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x57d)]=function(){const _0x2072d8=_0x10ff30;VisuMZ[_0x2072d8(0x95b)][_0x2072d8(0xaec)]['call'](this),this[_0x2072d8(0x772)]();},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x747)]=Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0xad1)],Scene_Battle[_0x10ff30(0xb0c)]['onEnemyCancel']=function(){const _0xfb5131=_0x10ff30;if(this['isNonSubmenuCancel']())this['_statusWindow']['show'](),this[_0xfb5131(0x2cc)][_0xfb5131(0x34b)](),this[_0xfb5131(0x285)][_0xfb5131(0x47f)]();else{if(_0xfb5131(0xa26)!==_0xfb5131(0x8b1))VisuMZ[_0xfb5131(0x95b)]['Scene_Battle_onEnemyCancel']['call'](this);else return this[_0xfb5131(0x836)]()&&!this['isCustomBattleScope']()?this[_0xfb5131(0x36b)]():_0x55cf2d['BattleCore'][_0xfb5131(0xabb)]['call'](this);}this[_0xfb5131(0x23b)]();},Scene_Battle[_0x10ff30(0xb0c)]['okTargetSelectionVisibility']=function(){const _0x154889=_0x10ff30,_0x4bb8ea=this[_0x154889(0xc1b)]();if(_0x4bb8ea===_0x154889(0x401)||this[_0x154889(0x205)]()){this[_0x154889(0x22c)][_0x154889(0xac3)]();if(this[_0x154889(0x22c)]['active']){if(_0x154889(0x3f1)===_0x154889(0x3f1))this['_skillWindow'][_0x154889(0xb71)]();else{if(!_0x7a706f[_0x154889(0xc1e)]())return;_0x3ecc01[_0x154889(0xb1e)](_0x1b6d63,_0x1b6f26);const _0x4627e0=_0x2695f4[_0x154889(0x621)](),_0x56d7f1=_0xf109c1['MotionFrameWait']*_0xc78960['_motionSpeed'];_0x4627e0['wait'](_0x56d7f1);}}this[_0x154889(0x26f)][_0x154889(0xac3)](),this['_itemWindow']['active']&&this[_0x154889(0x26f)][_0x154889(0xb71)]();}},Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x23b)]=function(){const _0x2bb5e4=_0x10ff30,_0x5664b5=this[_0x2bb5e4(0xc1b)]();['xp','portrait',_0x2bb5e4(0x401)][_0x2bb5e4(0x778)](_0x5664b5)&&this[_0x2bb5e4(0x285)][_0x2bb5e4(0xac3)](),this[_0x2bb5e4(0x772)]();},Scene_Battle[_0x10ff30(0xb0c)]['statusWindowRectDefaultStyle']=function(){const _0x27d9d7=_0x10ff30,_0x80f818=VisuMZ[_0x27d9d7(0x95b)][_0x27d9d7(0x928)][_0x27d9d7(0xa21)],_0x386879=Window_BattleStatus['prototype'][_0x27d9d7(0x4d6)](),_0x478177=Graphics[_0x27d9d7(0xb97)]-(_0x80f818[_0x27d9d7(0x23a)]||0xc0),_0x420bfe=this[_0x27d9d7(0xb6b)]()+_0x386879,_0xf70f6e=this['isRightInputMode']()?0x0:Graphics[_0x27d9d7(0xb97)]-_0x478177,_0x27fa25=Graphics[_0x27d9d7(0x9be)]-_0x420bfe+_0x386879;return new Rectangle(_0xf70f6e,_0x27fa25,_0x478177,_0x420bfe);},Scene_Battle[_0x10ff30(0xb0c)]['statusWindowRectXPStyle']=function(){const _0x26a0b0=_0x10ff30,_0x171c9a=Window_BattleStatus[_0x26a0b0(0xb0c)][_0x26a0b0(0x4d6)](),_0x290c79=Graphics['boxWidth'],_0x46477f=this['windowAreaHeight']()+_0x171c9a,_0x215a07=0x0,_0x4f0ba6=Graphics[_0x26a0b0(0x9be)]-_0x46477f+_0x171c9a;return new Rectangle(_0x215a07,_0x4f0ba6,_0x290c79,_0x46477f);},Scene_Battle[_0x10ff30(0xb0c)]['partyCommandWindowRectXPStyle']=function(){const _0x2ab0fa=_0x10ff30,_0x2deee9=Graphics[_0x2ab0fa(0xb97)]/0x2,_0x3c93b9=this['calcWindowHeight'](VisuMZ[_0x2ab0fa(0x95b)][_0x2ab0fa(0x928)][_0x2ab0fa(0xa21)][_0x2ab0fa(0x700)],!![]),_0x2a67f9=Math['round']((Graphics[_0x2ab0fa(0xb97)]-_0x2deee9)/0x2),_0x170fb9=Graphics[_0x2ab0fa(0x9be)]-_0x3c93b9-this[_0x2ab0fa(0x46a)]()[_0x2ab0fa(0x956)];return new Rectangle(_0x2a67f9,_0x170fb9,_0x2deee9,_0x3c93b9);},Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x50f)]=function(){const _0x516943=_0x10ff30,_0x48ce28=Graphics['width'],_0x42aded=Math['round']((Graphics[_0x516943(0xb97)]-_0x48ce28)/0x2),_0x269a3e=this[_0x516943(0x99b)](),_0x2d3367=(Graphics[_0x516943(0x956)]-Graphics['boxHeight'])/-0x2;return new Rectangle(_0x42aded,_0x2d3367,_0x48ce28,_0x269a3e);},Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x9bb)]=function(){const _0x974f81=_0x10ff30,_0x3fde41=Graphics['width'],_0x28097f=Math[_0x974f81(0x556)]((Graphics['boxWidth']-_0x3fde41)/0x2),_0x343f0e=this[_0x974f81(0x8a0)](0x4,!![]),_0x427c4e=Graphics[_0x974f81(0x9be)]-_0x343f0e+(Graphics['height']-Graphics[_0x974f81(0x9be)])/0x2;return new Rectangle(_0x28097f,_0x427c4e,_0x3fde41,_0x343f0e);},Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x551)]=function(){const _0x41a799=_0x10ff30,_0x23bc62=Math[_0x41a799(0xcce)](Graphics['width']/0x3),_0x557b6e=this['isRightInputMode']()?(Graphics[_0x41a799(0x7b2)]+Graphics[_0x41a799(0xb97)])/0x2-_0x23bc62:(Graphics[_0x41a799(0x7b2)]-Graphics[_0x41a799(0xb97)])/-0x2,_0xacd2b7=this['helpWindowRectBorderStyle'](),_0x197d14=_0xacd2b7['y']+_0xacd2b7[_0x41a799(0x956)],_0x2c5fc9=this[_0x41a799(0x9bb)](),_0x59b0de=_0x2c5fc9['y']-_0x197d14;return new Rectangle(_0x557b6e,_0x197d14,_0x23bc62,_0x59b0de);},Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x529)]=function(){const _0x575d00=_0x10ff30,_0x256e83=Math['ceil'](Graphics[_0x575d00(0x7b2)]/0x3),_0x5da8e2=Math[_0x575d00(0x556)]((Graphics[_0x575d00(0xb97)]-_0x256e83)/0x2),_0x5435aa=this['partyCommandWindowRectBorderStyle'](),_0x72f9a=_0x5435aa['y'],_0x493c70=_0x5435aa[_0x575d00(0x956)];return new Rectangle(_0x5da8e2,_0x72f9a,_0x256e83,_0x493c70);},Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x505)]=function(){const _0xd51974=_0x10ff30;this[_0xd51974(0x93e)]['y']=this[_0xd51974(0x4fd)]['y']+this[_0xd51974(0x4fd)][_0xd51974(0x956)];if(this['isRightInputMode']()){if(_0xd51974(0x8e5)!==_0xd51974(0x5b7)){if(this[_0xd51974(0xc1b)]()==='border'){if(_0xd51974(0x9b9)===_0xd51974(0x9b9))this[_0xd51974(0x93e)]['x']=0x8;else return _0x308e0d(_0x1952bd['$1']);}else this[_0xd51974(0x93e)]['x']=-this['_cancelButton']['width']-0x4;}else{let _0x12ee2b=_0x43e60e['value1'];_0x12ee2b*=_0x3a7a1c['stateRate'](_0x1729e9),_0x12ee2b*=this[_0xd51974(0x906)]()[_0xd51974(0x734)](_0x5bdec3),_0x12ee2b*=this['lukEffectRate'](_0x5b3619),_0x54d558[_0xd51974(0x2b6)]()<_0x12ee2b&&(_0x1b4ed7[_0xd51974(0x4ac)]=!![],this[_0xd51974(0x6e6)](_0x4c762f));}}else _0xd51974(0x789)!==_0xd51974(0x789)?(this[_0xd51974(0x395)](_0xd51974(0x957),[_0x4e232a],_0x50323e,_0x10bfd6),this['push'](_0xd51974(0x76e),_0x8b3448,_0x377bf6,_0xd51974(0xb4b),_0x3da3e0,!![],'Linear',!![]),this[_0xd51974(0x395)]('requestMotion',[_0x20459b],_0xd51974(0x646)),this['push']('waitForMovement')):this[_0xd51974(0x93e)]['x']=Graphics[_0xd51974(0x7b2)]-(Graphics[_0xd51974(0x7b2)]-Graphics[_0xd51974(0xb97)])/0x2-this[_0xd51974(0x93e)]['width']-0x4;},VisuMZ['BattleCore'][_0x10ff30(0x65d)]=Scene_Battle[_0x10ff30(0xb0c)]['skillWindowRect'],Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0xacd)]=function(){const _0x4ee64a=_0x10ff30;if(this[_0x4ee64a(0xc1b)]()==='border')return this['skillItemWindowRectBorderStyle']();else return this['isSkillItemWindowsMiddle']()?_0x4ee64a(0x62d)!==_0x4ee64a(0x62d)?_0x4ee64a(0x2e6):this[_0x4ee64a(0x67c)]():VisuMZ[_0x4ee64a(0x95b)]['Scene_Battle_skillWindowRect']['call'](this);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x2a9)]=Scene_Battle['prototype'][_0x10ff30(0x56e)],Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x56e)]=function(){const _0x12929f=_0x10ff30;if(this[_0x12929f(0xc1b)]()==='border')return _0x12929f(0x69c)===_0x12929f(0x413)?!![]:this[_0x12929f(0x529)]();else{if(this['isSkillItemWindowsMiddle']())return this[_0x12929f(0x67c)]();else{if(_0x12929f(0x44e)!=='MCUaA')this[_0x12929f(0x464)]()?this[_0x12929f(0x8ca)]():this[_0x12929f(0x97e)]();else return VisuMZ[_0x12929f(0x95b)][_0x12929f(0x2a9)][_0x12929f(0xb96)](this);}}},Scene_Battle['prototype'][_0x10ff30(0x205)]=function(){const _0x1f6685=_0x10ff30;return VisuMZ[_0x1f6685(0x95b)][_0x1f6685(0x928)][_0x1f6685(0xa21)][_0x1f6685(0x3ef)];},Scene_Battle['prototype'][_0x10ff30(0x67c)]=function(){const _0x33d6d9=_0x10ff30,_0x4d4ace=Sprite_Button['prototype'][_0x33d6d9(0x769)]()*0x2+0x4;let _0x5d3300=Graphics[_0x33d6d9(0xb97)]-_0x4d4ace;Imported['VisuMZ_0_CoreEngine']&&SceneManager['isSideButtonLayout']()&&('vRYai'===_0x33d6d9(0x742)?_0x5d3300+=_0x4d4ace:this['addAutoBattleCommand']());const _0x1bc8cb=this[_0x33d6d9(0x9f3)](),_0x2f3034=Graphics['boxHeight']-_0x1bc8cb-this[_0x33d6d9(0xa88)]()[_0x33d6d9(0x956)]+Window_BattleStatus[_0x33d6d9(0xb0c)][_0x33d6d9(0x4d6)](),_0x164ee8=0x0;return new Rectangle(_0x164ee8,_0x1bc8cb,_0x5d3300,_0x2f3034);},Scene_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x8ad)]=function(){const _0x5ac7ea=_0x10ff30;if(!VisuMZ[_0x5ac7ea(0x95b)][_0x5ac7ea(0x928)]['Enemy'][_0x5ac7ea(0x993)])return;this['_enemyNameContainer']=new Sprite(),this['_enemyNameContainer']['x']=this['_windowLayer']['x'],this[_0x5ac7ea(0x72b)]['y']=this['_windowLayer']['y'];const _0x140e8a=this[_0x5ac7ea(0x854)][_0x5ac7ea(0xbc2)](this[_0x5ac7ea(0x4af)]);this['addChildAt'](this['_enemyNameContainer'],_0x140e8a);for(let _0x135a98=0x0;_0x135a98<0x8;_0x135a98++){if(_0x5ac7ea(0x5dd)!==_0x5ac7ea(0x5dd))this[_0x5ac7ea(0x6ca)][_0x5ac7ea(0xbc4)](_0x4148ae);else{const _0x271c1d=new Window_EnemyName(_0x135a98);this['_enemyNameContainer']['addChild'](_0x271c1d);}}},Sprite_Battler[_0x10ff30(0x964)]=VisuMZ['BattleCore']['Settings'][_0x10ff30(0x25e)]['MotionSpeed'],VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x942)]=Sprite_Battler[_0x10ff30(0xb0c)]['initMembers'],Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x6c8)]=function(){const _0x1be4e9=_0x10ff30;VisuMZ['BattleCore'][_0x1be4e9(0x942)][_0x1be4e9(0xb96)](this),this[_0x1be4e9(0x6e4)]();if(this[_0x1be4e9(0x602)]===Sprite_Enemy)this[_0x1be4e9(0x8a5)]();this[_0x1be4e9(0x36a)]();},Sprite_Battler['prototype'][_0x10ff30(0x6e4)]=function(){const _0x183561=_0x10ff30;this['_baseX']=0x0,this['_baseY']=0x0,this[_0x183561(0x32c)]=0x0,this[_0x183561(0xcb5)]=0x0,this['_floatDuration']=0x0,this[_0x183561(0xb83)]=0x0,this[_0x183561(0x1ed)]=_0x183561(0x92a),this[_0x183561(0x382)]=0x0,this[_0x183561(0x5a2)]=0x0,this['_jumpDuration']=0x0,this[_0x183561(0xb77)]=0x0,this[_0x183561(0x28b)]=0xff,this[_0x183561(0x2bd)]=0x0,this[_0x183561(0xaff)]=0x0,this[_0x183561(0xa8a)]=_0x183561(0x92a),this[_0x183561(0xb86)]=0x0,this[_0x183561(0x6c6)]=0x0,this[_0x183561(0xae7)]=0x0,this[_0x183561(0xc93)]=0x0,this[_0x183561(0x7d9)]=_0x183561(0x92a),this[_0x183561(0xbe6)]=!![],this[_0x183561(0x671)]=0x0,this[_0x183561(0x7db)]=0x0,this[_0x183561(0x51a)]=0x0,this[_0x183561(0x779)]=0x0,this[_0x183561(0x312)]=0x0,this[_0x183561(0xcd0)]=0x0,this[_0x183561(0x26e)]='Linear',this['_growX']=0x1,this[_0x183561(0xaca)]=0x1,this[_0x183561(0x81f)]=0x1,this[_0x183561(0x47c)]=0x1,this[_0x183561(0x46b)]=0x0,this['_growWholeDuration']=0x0,this[_0x183561(0x3e7)]=_0x183561(0x92a),this[_0x183561(0x7ce)]=0x1,this[_0x183561(0x63b)]=0x0,this[_0x183561(0xa19)]=0x0,this[_0x183561(0xa4f)]=0x0,this[_0x183561(0x7fa)]=0x0,this[_0x183561(0x2ed)]=_0x183561(0x92a);},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x8a5)]=function(){const _0xbef475=_0x10ff30;this[_0xbef475(0x96e)]=new Sprite(),this['_shadowSprite'][_0xbef475(0xc87)]=ImageManager['loadSystem'](_0xbef475(0x448)),this['_shadowSprite']['bitmap'][_0xbef475(0x533)]=VisuMZ[_0xbef475(0x95b)]['Settings'][_0xbef475(0x25e)][_0xbef475(0xb8d)],this[_0xbef475(0x96e)][_0xbef475(0x8eb)]['x']=0.5,this[_0xbef475(0x96e)]['anchor']['y']=0.5,this['_shadowSprite']['y']=-0x2,this[_0xbef475(0x96e)][_0xbef475(0x905)]=![],this[_0xbef475(0x440)](this[_0xbef475(0x96e)]);},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x36a)]=function(){const _0x3104ff=_0x10ff30;this[_0x3104ff(0xa8f)]=new Sprite(),this[_0x3104ff(0xa8f)][_0x3104ff(0x8eb)]['x']=0.5,this['_distortionSprite'][_0x3104ff(0x8eb)]['y']=0.5,this[_0x3104ff(0x440)](this['_distortionSprite']);},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0xbb8)]=function(){const _0x300db9=_0x10ff30;if(!this[_0x300db9(0xa8f)])return;if(this['_shadowSprite']){const _0x5b3b72=this[_0x300db9(0x698)](this[_0x300db9(0xa8f)]);this[_0x300db9(0x821)](this[_0x300db9(0x96e)],_0x5b3b72),this[_0x300db9(0x456)]();}this['_svBattlerSprite']&&this[_0x300db9(0xa8f)][_0x300db9(0x440)](this[_0x300db9(0x408)]),this[_0x300db9(0x803)]&&this[_0x300db9(0xa8f)][_0x300db9(0x440)](this[_0x300db9(0x803)]),this[_0x300db9(0x6ca)]&&this[_0x300db9(0xa8f)][_0x300db9(0x440)](this[_0x300db9(0x6ca)]),this[_0x300db9(0x364)]&&this[_0x300db9(0xa8f)]['addChild'](this[_0x300db9(0x364)]),this['_dragonbonesSpriteContainer']&&this['_distortionSprite'][_0x300db9(0x440)](this['_dragonbonesSpriteContainer']);},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x456)]=function(){const _0x463049=_0x10ff30;if(!this['_shadowSprite'])return;if(this[_0x463049(0xb4f)]&&this[_0x463049(0xb4f)]['svBattlerShadowVisible']()){if('WQWnm'!=='lsNtu'){const _0x234602=this[_0x463049(0x96e)]['bitmap'];this[_0x463049(0x96e)][_0x463049(0xc6c)](0x0,0x0,_0x234602[_0x463049(0x7b2)],_0x234602[_0x463049(0x956)]);}else{if(!_0x27925f[_0x463049(0xa7c)]())return;const _0x51784d=this[_0x463049(0x843)]();if(!_0x51784d)return;_0x51784d[_0x463049(0x549)](_0x33c948,_0x5b5bee);}}else this[_0x463049(0x96e)][_0x463049(0xc6c)](0x0,0x0,0x0,0x0);},Sprite_Battler['prototype']['damageContainer']=function(){const _0x3f938e=_0x10ff30;return SceneManager['isSceneBattle']()?SceneManager[_0x3f938e(0x2df)][_0x3f938e(0x93a)][_0x3f938e(0x8d9)]:this[_0x3f938e(0x2e0)];},Sprite_Battler['prototype'][_0x10ff30(0x1ca)]=function(_0x536555,_0x1b912b){const _0x3def09=_0x10ff30;if(!this[_0x3def09(0xb4f)][_0x3def09(0x509)]())return;const _0x64ce24=VisuMZ[_0x3def09(0x95b)][_0x3def09(0x928)][_0x3def09(0x9f9)],_0x579bbd=new Sprite_Damage();_0x579bbd[_0x3def09(0xc3b)]=_0x64ce24[_0x3def09(0x1f5)],this[_0x3def09(0xb81)](_0x579bbd),_0x579bbd[_0x3def09(0x1ca)](_0x536555,_0x1b912b),this[_0x3def09(0x4eb)](_0x579bbd);},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x211)]=function(_0x59600b,_0x3c254a,_0x45c916){const _0x4a6100=_0x10ff30;if(!this[_0x4a6100(0xb4f)]['isSpriteVisible']())return;const _0x2e0505=VisuMZ[_0x4a6100(0x95b)][_0x4a6100(0x928)]['Damage'],_0x1cf527=new Sprite_Damage();_0x1cf527['_duration']=_0x2e0505['PopupDuration'],this[_0x4a6100(0xb81)](_0x1cf527),_0x1cf527[_0x4a6100(0x211)](_0x59600b,_0x3c254a,_0x45c916),this[_0x4a6100(0x4eb)](_0x1cf527);},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x585)]=function(){const _0x13e341=_0x10ff30;if(!this[_0x13e341(0xb4f)][_0x13e341(0x8c2)]())return;while(this['_battler']['isDamagePopupRequested']()){this[_0x13e341(0xb4f)][_0x13e341(0x509)]()&&this['createDamageSprite']();}this[_0x13e341(0xb4f)][_0x13e341(0x1d4)](),this[_0x13e341(0xb4f)][_0x13e341(0x60e)]();},Sprite_Battler[_0x10ff30(0xb0c)]['createDamageSprite']=function(){const _0xcb9fa0=_0x10ff30,_0x1a22e6=VisuMZ['BattleCore'][_0xcb9fa0(0x928)][_0xcb9fa0(0x9f9)],_0x499771=new Sprite_Damage();_0x499771[_0xcb9fa0(0xc3b)]=_0x1a22e6[_0xcb9fa0(0x1f5)],this[_0xcb9fa0(0xb81)](_0x499771),_0x499771[_0xcb9fa0(0x542)](this['_battler']),_0x499771[_0xcb9fa0(0x822)](this[_0xcb9fa0(0xb4f)]),this['addDamageSprite'](_0x499771);},Sprite_Battler['prototype'][_0x10ff30(0x4eb)]=function(_0x4cb260){const _0x1a41af=_0x10ff30;this[_0x1a41af(0x366)][_0x1a41af(0x395)](_0x4cb260);if(this[_0x1a41af(0x8fa)]()){const _0x3dfae6=SceneManager[_0x1a41af(0x2df)]['_statusWindow'];if(_0x3dfae6)_0x3dfae6[_0x1a41af(0x4eb)](_0x4cb260,this[_0x1a41af(0xb4f)]);}else{this[_0x1a41af(0xb69)]()[_0x1a41af(0x440)](_0x4cb260);if(SceneManager[_0x1a41af(0xbe3)]())_0x4cb260['scale']['x']=-0x1;}},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x8fa)]=function(){const _0x221619=_0x10ff30;return!$gameSystem[_0x221619(0xa7c)]()&&this['_battler']&&this[_0x221619(0xb4f)][_0x221619(0x58a)]();},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0xb81)]=function(_0x401e17){const _0x370ced=_0x10ff30;this[_0x370ced(0x39c)](_0x401e17,!![]);const _0x8c5370=VisuMZ['BattleCore']['Settings'][_0x370ced(0x9f9)],_0x1835f9=SceneManager[_0x370ced(0xbe3)]()?-0x1:0x1;if(_0x8c5370[_0x370ced(0x56c)])for(const _0x12ceb4 of this[_0x370ced(0x366)]){if('UzGRy'!==_0x370ced(0x1d8))_0x12ceb4['x']+=_0x8c5370[_0x370ced(0x56f)]*_0x1835f9,_0x12ceb4['y']+=_0x8c5370[_0x370ced(0x9fb)];else{const _0x394ced=!!this['_freezeMotionData'];this[_0x370ced(0x8aa)]=_0x1f2003,_0x394ced&&(this['requestMotionRefresh'](),this[_0x370ced(0x85c)]());}}else{const _0xa6ea67=this[_0x370ced(0x366)][this[_0x370ced(0x366)][_0x370ced(0x449)]-0x1];_0xa6ea67&&(_0x401e17['x']=_0xa6ea67['x']+_0x8c5370['PopupShiftX']*_0x1835f9,_0x401e17['y']=_0xa6ea67['y']+_0x8c5370[_0x370ced(0x9fb)]);}},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x39c)]=function(_0x5d4918,_0x3d274f){const _0x58a3c7=_0x10ff30,_0x1c94c4=SceneManager[_0x58a3c7(0xbe3)]()?-0x1:0x1;let _0x3454de=this[_0x58a3c7(0xa75)];_0x3454de+=this[_0x58a3c7(0xada)]();let _0x2af664=this['_baseY'];const _0x4e7653=this[_0x58a3c7(0xa8f)]['scale']['y'];_0x2af664+=this[_0x58a3c7(0x6c3)]();const _0x8bf136=SceneManager[_0x58a3c7(0x2df)]['_statusWindow'];if(_0x8bf136&&this['parent']===_0x8bf136){if(_0x58a3c7(0x844)===_0x58a3c7(0x32b))_0x4ea213[_0x58a3c7(0xb49)]&&_0x5c96bc[_0x58a3c7(0xb49)]();else{_0x3454de+=_0x8bf136['x']-this[_0x58a3c7(0x842)]();const _0x374492=_0x8bf136[_0x58a3c7(0x257)]()*0x3/0x4;_0x2af664=_0x8bf136['y']+_0x374492,_0x2af664=Math[_0x58a3c7(0xa7f)](_0x2af664,_0x8bf136['y']+this['y']-this['height']+_0x374492);}}_0x5d4918['x']=Math['round'](_0x3454de+this[_0x58a3c7(0x842)]()*_0x1c94c4),_0x5d4918['y']=Math[_0x58a3c7(0x556)](_0x2af664+this[_0x58a3c7(0x3ce)]());},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x27e)]=Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x842)],Sprite_Battler['prototype'][_0x10ff30(0x842)]=function(){const _0x272e12=_0x10ff30;let _0xfa7eff=VisuMZ['BattleCore'][_0x272e12(0x27e)][_0x272e12(0xb96)](this),_0x326b11=VisuMZ[_0x272e12(0x95b)]['Settings'][_0x272e12(0x9f9)][_0x272e12(0xc32)]||0x0;return Math[_0x272e12(0x556)](_0xfa7eff+_0x326b11);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x986)]=Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x3ce)],Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x3ce)]=function(){const _0x339d0a=_0x10ff30;let _0x523685=VisuMZ[_0x339d0a(0x95b)]['Sprite_Battler_damageOffsetY'][_0x339d0a(0xb96)](this);switch(VisuMZ[_0x339d0a(0x95b)][_0x339d0a(0x928)][_0x339d0a(0x9f9)]['PopupPosition']){case _0x339d0a(0x4f9):_0x523685-=this[_0x339d0a(0x956)]*this[_0x339d0a(0x808)]['y'];break;case _0x339d0a(0x4e3):_0x523685-=this[_0x339d0a(0x956)]*this[_0x339d0a(0x808)]['y']*0.5;break;}let _0x29697e=VisuMZ[_0x339d0a(0x95b)][_0x339d0a(0x928)][_0x339d0a(0x9f9)]['PopupOffsetY']||0x0;return Math[_0x339d0a(0x556)](_0x523685+_0x29697e);},Sprite_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x842)]=function(){const _0x6434fd=_0x10ff30;return Sprite_Battler['prototype'][_0x6434fd(0x842)][_0x6434fd(0xb96)](this);},Sprite_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x3ce)]=function(){const _0x123c8a=_0x10ff30;return Sprite_Battler['prototype'][_0x123c8a(0x3ce)][_0x123c8a(0xb96)](this);},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x493)]=function(_0x4ae4f9){const _0x511106=_0x10ff30;this[_0x511106(0x8fa)]()?SceneManager[_0x511106(0x2df)]['_statusWindow'][_0x511106(0x934)](_0x4ae4f9):(this['damageContainer']()['removeChild'](_0x4ae4f9),this[_0x511106(0x366)][_0x511106(0xc04)](_0x4ae4f9),_0x4ae4f9[_0x511106(0x47b)]());},VisuMZ['BattleCore'][_0x10ff30(0x315)]=Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x55a)],Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x55a)]=function(_0x1a1d9b,_0x9d399f){const _0x58251e=_0x10ff30,_0x4f1f28=VisuMZ['BattleCore']['Settings'];if(this[_0x58251e(0x602)]===Sprite_Actor)'WNDbE'===_0x58251e(0xc2d)?this[_0x58251e(0x228)]():(_0x1a1d9b+=_0x4f1f28['Actor'][_0x58251e(0x795)]||0x0,_0x9d399f+=_0x4f1f28[_0x58251e(0x25e)][_0x58251e(0x6b8)]||0x0);else this[_0x58251e(0x602)]===Sprite_Enemy&&(_0x1a1d9b+=_0x4f1f28['Enemy'][_0x58251e(0x795)]||0x0,_0x9d399f+=_0x4f1f28[_0x58251e(0x2ec)][_0x58251e(0x6b8)]||0x0);this[_0x58251e(0xb4f)]&&(_0x1a1d9b=this['_battler'][_0x58251e(0xbdf)]??_0x1a1d9b,_0x9d399f=this[_0x58251e(0xb4f)][_0x58251e(0x54e)]??_0x9d399f),VisuMZ[_0x58251e(0x95b)][_0x58251e(0x315)]['call'](this,_0x1a1d9b,_0x9d399f),this[_0x58251e(0x63b)]=this[_0x58251e(0x7e9)],this[_0x58251e(0xa19)]=this[_0x58251e(0x2f8)],this[_0x58251e(0xa4f)]=0x0,this[_0x58251e(0x7fa)]=0x0,this['_homeEasing']=_0x58251e(0x92a);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x7b5)]=Sprite_Battler['prototype']['update'],Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x78d)]=function(){const _0x4f8610=_0x10ff30;VisuMZ[_0x4f8610(0x95b)][_0x4f8610(0x7b5)][_0x4f8610(0xb96)](this),!this[_0x4f8610(0xb4f)]&&this['_hpGaugeSprite']&&(this[_0x4f8610(0x810)][_0x4f8610(0x905)]=![]);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xa74)]=Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x223)],Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x223)]=function(){const _0x287c59=_0x10ff30;this['updateScale'](),this[_0x287c59(0x954)](),this[_0x287c59(0x9a1)](),this['updateFlip'](),VisuMZ[_0x287c59(0x95b)][_0x287c59(0xa74)][_0x287c59(0xb96)](this),this[_0x287c59(0x620)]();if(this[_0x287c59(0x602)]===Sprite_Enemy)this[_0x287c59(0x8fb)]();},VisuMZ[_0x10ff30(0x95b)]['Sprite_Battler_updatePosition']=Sprite_Battler['prototype'][_0x10ff30(0x8b0)],Sprite_Battler['prototype'][_0x10ff30(0x8b0)]=function(){const _0x502bdb=_0x10ff30;this[_0x502bdb(0x381)](),VisuMZ[_0x502bdb(0x95b)][_0x502bdb(0x830)][_0x502bdb(0xb96)](this),this['updatePositionBattleCore'](),this['updateOpacity']();},Sprite_Battler['prototype']['startHomeMove']=function(_0x16c30f,_0x457a28,_0x4efb8b,_0x1e2127){const _0x56a0e0=_0x10ff30;(this[_0x56a0e0(0x63b)]!==_0x16c30f||this['_targetHomeY']!==_0x457a28)&&(this[_0x56a0e0(0x63b)]=_0x16c30f,this[_0x56a0e0(0xa19)]=_0x457a28,this[_0x56a0e0(0xa4f)]=_0x4efb8b,this[_0x56a0e0(0x7fa)]=_0x4efb8b,this[_0x56a0e0(0x2ed)]=_0x1e2127,_0x4efb8b<=0x0&&this[_0x56a0e0(0xa22)]());},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x381)]=function(){const _0x5dcc80=_0x10ff30;if(this['_homeDuration']<=0x0)return;const _0x3ce5b8=this[_0x5dcc80(0xa4f)],_0x4afa2f=this[_0x5dcc80(0x7fa)],_0x5a56f3=this[_0x5dcc80(0x2ed)];if(Imported['VisuMZ_0_CoreEngine']){if(_0x5dcc80(0x852)!==_0x5dcc80(0x852)){const _0x457449=_0x4b80d3[_0x5dcc80(0xc51)]('['+_0x162219['$1'][_0x5dcc80(0x22f)](/\d+/g)+']');for(const _0x4a851a of _0x457449){if(_0x1e7bc5['value'](_0x4a851a))return![];}return!![];}else this[_0x5dcc80(0x7e9)]=this['applyEasing'](this[_0x5dcc80(0x7e9)],this[_0x5dcc80(0x63b)],_0x3ce5b8,_0x4afa2f,_0x5a56f3),this[_0x5dcc80(0x2f8)]=this[_0x5dcc80(0x8a1)](this[_0x5dcc80(0x2f8)],this[_0x5dcc80(0xa19)],_0x3ce5b8,_0x4afa2f,_0x5a56f3);}else this[_0x5dcc80(0x7e9)]=(this[_0x5dcc80(0x7e9)]*(_0x3ce5b8-0x1)+this['_targetHomeX'])/_0x3ce5b8,this[_0x5dcc80(0x2f8)]=(this[_0x5dcc80(0x2f8)]*(_0x3ce5b8-0x1)+this['_targetHomeY'])/_0x3ce5b8;this[_0x5dcc80(0xa4f)]--;if(this[_0x5dcc80(0xa4f)]<=0x0)this[_0x5dcc80(0xa22)]();},Sprite_Battler['prototype']['onHomeMoveEnd']=function(){const _0x1d4139=_0x10ff30;this[_0x1d4139(0x7e9)]=this[_0x1d4139(0x63b)],this['_homeY']=this['_targetHomeY'];},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x827)]=function(){const _0x15278f=_0x10ff30;this[_0x15278f(0xa75)]=this['x'],this['_baseY']=this['y'],this[_0x15278f(0x250)](),this[_0x15278f(0x7c8)](),this['x']+=this['extraPositionX'](),this['y']+=this[_0x15278f(0x6c3)](),this['y']+=this[_0x15278f(0x342)](),this['x']=Math['floor'](this['x']),this['y']=Math[_0x15278f(0xcce)](this['y']);},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0xada)]=function(){let _0x167a3e=0x0;return _0x167a3e;},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x6c3)]=function(){const _0xda1739=_0x10ff30;let _0x3242e8=0x0;if(this[_0xda1739(0xb4f)]&&!this[_0xda1739(0xb4f)]['isBattlerGrounded']()){if(_0xda1739(0x48b)===_0xda1739(0xb0f)){const _0x35b4ef=_0x5de085(_0x5ea341['$1']);_0x35b4ef!==_0x1bc0ad[_0x2c25a2]['version']&&(_0x12cb15(_0xda1739(0xc33)[_0xda1739(0x958)](_0x5d3b97,_0x35b4ef)),_0x1b53a3[_0xda1739(0xa8c)]());}else _0x3242e8-=this[_0xda1739(0x32c)],_0x3242e8-=this[_0xda1739(0x382)];}return _0x3242e8;},Sprite_Battler['prototype']['extraPositionScaledY']=function(){const _0x197c53=_0x10ff30;let _0x47cf93=0x0;if(this[_0x197c53(0xa8f)]&&this['constructor']!==Sprite_SvEnemy){if(_0x197c53(0xbb7)==='tgHBL')_0x48d03d=_0x4a024f[_0x197c53(0x33d)](_0x5f54b0);else{const _0x251b27=this[_0x197c53(0xa8f)][_0x197c53(0x808)]['y'];_0x47cf93-=(_0x251b27-0x1)*this[_0x197c53(0x956)];}}return _0x47cf93;},Sprite_Battler['prototype'][_0x10ff30(0x522)]=function(){const _0x12202a=_0x10ff30,_0x23434f=this[_0x12202a(0xb4f)]&&this[_0x12202a(0xb4f)][_0x12202a(0x471)]();this[_0x12202a(0x7ce)]=(_0x23434f?-0x1:0x1)*Math[_0x12202a(0x614)](this['scale']['x']);},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0xbf4)]=function(_0xef5f8a,_0x7130bb,_0x474886){const _0xe5f901=_0x10ff30;if(!this['canMove']())return;if(this[_0xe5f901(0xcb5)]===_0xef5f8a)return;this['_targetFloatHeight']=_0xef5f8a,this[_0xe5f901(0x329)]=_0x7130bb,this['_floatWholeDuration']=_0x7130bb,this[_0xe5f901(0x1ed)]=_0x474886||_0xe5f901(0x92a);if(_0x7130bb<=0x0)this[_0xe5f901(0x32c)]=_0xef5f8a;},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x250)]=function(){const _0x2314ba=_0x10ff30;if(this[_0x2314ba(0x329)]<=0x0)return;const _0x98976b=this[_0x2314ba(0x329)],_0x309a25=this['_floatWholeDuration'],_0x314fc4=this[_0x2314ba(0x1ed)];Imported[_0x2314ba(0xa8d)]?this[_0x2314ba(0x32c)]=this[_0x2314ba(0x8a1)](this['_floatHeight'],this[_0x2314ba(0xcb5)],_0x98976b,_0x309a25,_0x314fc4):this[_0x2314ba(0x32c)]=(this[_0x2314ba(0x32c)]*(_0x98976b-0x1)+this[_0x2314ba(0xcb5)])/_0x98976b;this[_0x2314ba(0x329)]--;if(this[_0x2314ba(0x329)]<=0x0)this[_0x2314ba(0xb9f)]();},Sprite_Battler['prototype'][_0x10ff30(0xb9f)]=function(){const _0x3d03d7=_0x10ff30;this['_floatHeight']=this[_0x3d03d7(0xcb5)];},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0xcaa)]=function(){const _0x32b557=_0x10ff30;return this[_0x32b557(0x329)]>0x0;},Sprite_Battler['prototype'][_0x10ff30(0x549)]=function(_0x3cc2e3,_0x175094){const _0x19aec1=_0x10ff30;if(!this[_0x19aec1(0x7ef)]())return;if(_0x175094<=0x0)return;this['_jumpMaxHeight']=_0x3cc2e3,this[_0x19aec1(0xa9e)]=_0x175094,this[_0x19aec1(0xb77)]=_0x175094;},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x7c8)]=function(){const _0x660175=_0x10ff30;if(this[_0x660175(0xa9e)]<=0x0)return;const _0x5946d1=this[_0x660175(0xb77)]-this['_jumpDuration'],_0xf2e45f=this[_0x660175(0xb77)]/0x2,_0x2248f3=this['_jumpMaxHeight'],_0xce8993=-_0x2248f3/Math[_0x660175(0x7ad)](_0xf2e45f,0x2);this[_0x660175(0x382)]=_0xce8993*Math['pow'](_0x5946d1-_0xf2e45f,0x2)+_0x2248f3,this[_0x660175(0xa9e)]--;if(this[_0x660175(0xa9e)]<=0x0)return this[_0x660175(0xab3)]();},Sprite_Battler['prototype'][_0x10ff30(0xab3)]=function(){this['_jumpHeight']=0x0;},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0xb0b)]=function(){const _0x13a324=_0x10ff30;return this[_0x13a324(0xa9e)]>0x0;},Sprite_Battler['prototype'][_0x10ff30(0x6cc)]=function(_0x2ae8af,_0x19a8b1,_0x518e30){const _0x3a5ef1=_0x10ff30;if(this[_0x3a5ef1(0x28b)]===_0x2ae8af)return;this[_0x3a5ef1(0x28b)]=_0x2ae8af,this[_0x3a5ef1(0x2bd)]=_0x19a8b1,this[_0x3a5ef1(0xaff)]=_0x19a8b1,this['_opacityEasing']=_0x518e30||_0x3a5ef1(0x92a);if(_0x19a8b1<=0x0)this[_0x3a5ef1(0x443)]=_0x2ae8af;},Sprite_Battler['prototype'][_0x10ff30(0x5c0)]=function(){const _0x530622=_0x10ff30;if(this[_0x530622(0x602)]['name']==='Sprite_SvEnemy')return;if(this[_0x530622(0x2bd)]<=0x0)return;const _0x482e29=this[_0x530622(0x2bd)],_0x263ad1=this[_0x530622(0xaff)],_0x2f82e9=this['_opacityEasing'];Imported[_0x530622(0xa8d)]?this[_0x530622(0x443)]=this[_0x530622(0x8a1)](this['opacity'],this[_0x530622(0x28b)],_0x482e29,_0x263ad1,_0x2f82e9):_0x530622(0x728)===_0x530622(0x728)?this[_0x530622(0x443)]=(this[_0x530622(0x443)]*(_0x482e29-0x1)+this[_0x530622(0x28b)])/_0x482e29:_0x23d88c[_0x530622(0x2c5)]=_0x8d393[_0x530622(0x932)](_0x5d8f6d['$1']);this[_0x530622(0x2bd)]--;if(this[_0x530622(0x2bd)]<=0x0)this[_0x530622(0xcb6)]();},Sprite_Battler[_0x10ff30(0xb0c)]['onOpacityEnd']=function(){const _0x5069e5=_0x10ff30;this['opacity']=this[_0x5069e5(0x28b)];},Sprite_Battler['prototype']['isChangingOpacity']=function(){const _0x372d3f=_0x10ff30;return this[_0x372d3f(0x2bd)]>0x0;},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x8fb)]=function(){const _0x464382=_0x10ff30;this[_0x464382(0x96e)][_0x464382(0x905)]=this['_battler']['hasSvBattler'](),this[_0x464382(0x693)]();},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x693)]=function(){const _0x4fe245=_0x10ff30;if(!this['_shadowSprite'])return;this['_shadowSprite']['y']=this[_0x4fe245(0xcae)]-this['y']-0x2;},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x1c7)]=function(){const _0x3257f0=_0x10ff30;if(!this['_battler'])return;this[_0x3257f0(0x363)]=this[_0x3257f0(0xb4f)][_0x3257f0(0x860)](),this['_shadowScaleY']=this[_0x3257f0(0xb4f)][_0x3257f0(0x5d4)]();},Game_BattlerBase['prototype'][_0x10ff30(0x860)]=function(){const _0x1f2337=_0x10ff30,_0x5f36a3=this[_0x1f2337(0x58a)]()?this[_0x1f2337(0x9fe)]():this[_0x1f2337(0x296)]();if(_0x5f36a3){const _0x5831d2=_0x5f36a3[_0x1f2337(0x7ed)];if(_0x5831d2[_0x1f2337(0x22f)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x5831d2['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i)){if('RMHdy'===_0x1f2337(0x500)){if(!this[_0x1f2337(0x296)]())return;_0x3a9be9['isBattleFlipped']()?this['x']=_0x10060e[_0x1f2337(0xb97)]-this[_0x1f2337(0x296)]()['battler']()[_0x1f2337(0xa75)]:this['x']=this[_0x1f2337(0x296)]()[_0x1f2337(0x843)]()[_0x1f2337(0xa75)];this['x']-=_0xee317a[_0x1f2337(0x556)](this[_0x1f2337(0x7b2)]/0x2),this['y']=this[_0x1f2337(0x296)]()[_0x1f2337(0x843)]()[_0x1f2337(0xcae)]-_0x3f2c9b[_0x1f2337(0x556)](this[_0x1f2337(0x257)]()*1.5);const _0x498e1b=_0x1ee0e9[_0x1f2337(0x95b)][_0x1f2337(0x928)]['Enemy'];this['x']+=_0x498e1b[_0x1f2337(0x289)]||0x0,this['y']+=_0x498e1b[_0x1f2337(0x95c)]||0x0;}else return Number(RegExp['$1'])||0x0;}}}return 0x1;},Game_BattlerBase[_0x10ff30(0xb0c)][_0x10ff30(0x5d4)]=function(){const _0x3483cf=_0x10ff30,_0x2172bc=this[_0x3483cf(0x58a)]()?this[_0x3483cf(0x9fe)]():this[_0x3483cf(0x296)]();if(_0x2172bc){if(_0x3483cf(0x2e7)!=='jtzTP'){_0x463a6f['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x37f791=_0x2fe249(_0x22a5f0['$1']),_0x4be8e1=_0x3110e5(_0xc64f95['$2']),_0x3829f3=_0x4be8e1===0x1?this[_0x3483cf(0xcc8)]:this['_regionBattleback2'],_0x109a30=_0xf090c6(_0x488a33['$3']);_0x3829f3[_0x37f791]=_0x109a30;}else{const _0x4ae195=_0x2172bc[_0x3483cf(0x7ed)];if(_0x4ae195[_0x3483cf(0x22f)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i)){if(_0x3483cf(0x921)===_0x3483cf(0x2fd))_0x2a29d0['BattleCore'][_0x3483cf(0x6ee)][_0x3483cf(0xb96)](this),this[_0x3483cf(0x340)]=this['_actionBattlers'][_0x3483cf(0xb68)](_0x2fa18e=>_0x2fa18e&&_0x2fa18e['isAppeared']());else return Number(RegExp['$1'])*0.01;}else{if(_0x4ae195[_0x3483cf(0x22f)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}}return 0x1;},Sprite_Battler['prototype'][_0x10ff30(0x3d6)]=function(){const _0x23f875=_0x10ff30;if(this[_0x23f875(0x602)]===Sprite_SvEnemy)return;this['updateGrow'](),this[_0x23f875(0x4d1)]();},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x4d1)]=function(){const _0x394399=_0x10ff30,_0xe46839=this[_0x394399(0xa8f)];_0xe46839&&(_0x394399(0x3d1)!==_0x394399(0x3d1)?(this[_0x394399(0x6ed)](),this['startActorCommandSelection']()):(_0xe46839[_0x394399(0x808)]['x']=this['mainSpriteScaleX'](),_0xe46839[_0x394399(0x808)]['y']=this[_0x394399(0x927)]()));},Sprite_Battler[_0x10ff30(0xb0c)]['mainSpriteScaleX']=function(){const _0x3d4079=_0x10ff30;let _0x5f1db7=0x1;return _0x5f1db7*=this['_flipScaleX'],_0x5f1db7*=this[_0x3d4079(0x37f)],_0x5f1db7;},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x927)]=function(){const _0x29061a=_0x10ff30;return 0x1*this[_0x29061a(0xaca)];},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x243)]=function(){const _0x284ff1=_0x10ff30;return this[_0x284ff1(0x7b2)]*this[_0x284ff1(0x949)]();},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x6d3)]=function(){const _0x138592=_0x10ff30;return this[_0x138592(0x956)]*this[_0x138592(0x927)]();},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0xa2e)]=function(_0x2ab405,_0x408c43,_0x388459,_0x2bb621){const _0x1e763d=_0x10ff30;if(!this[_0x1e763d(0x7ef)]())return;if(!this[_0x1e763d(0xa8f)])return;if(this['_targetGrowX']===_0x2ab405&&this[_0x1e763d(0x47c)]===_0x408c43)return;this['_targetGrowX']=_0x2ab405,this[_0x1e763d(0x47c)]=_0x408c43,this[_0x1e763d(0x46b)]=_0x388459,this[_0x1e763d(0x78b)]=_0x388459,this[_0x1e763d(0x3e7)]=_0x2bb621||_0x1e763d(0x92a);if(_0x388459<=0x0){if('FKPga'!==_0x1e763d(0xb24))this[_0x1e763d(0x37f)]=this[_0x1e763d(0x81f)],this[_0x1e763d(0xaca)]=this[_0x1e763d(0x47c)];else return!![];}},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x1ea)]=function(){const _0x436a72=_0x10ff30;if(this[_0x436a72(0x46b)]<=0x0)return;if(!this[_0x436a72(0xa8f)])return;const _0x48e24b=this['_growDuration'],_0x1fe866=this[_0x436a72(0x78b)],_0x4f5a36=this[_0x436a72(0x3e7)];if(Imported[_0x436a72(0xa8d)]){if(_0x436a72(0x615)==='cgSLn'){const _0x33ab32=_0x552ea0(_0x33ab88['$1'])['split'](/[\r\n]+/)[_0x436a72(0xc04)]('');_0xb70add[_0x436a72(0x52f)]=_0x1432c9[_0x436a72(0xa2b)](_0x33ab32);}else this[_0x436a72(0x37f)]=this[_0x436a72(0x8a1)](this[_0x436a72(0x37f)],this[_0x436a72(0x81f)],_0x48e24b,_0x1fe866,_0x4f5a36),this[_0x436a72(0xaca)]=this[_0x436a72(0x8a1)](this[_0x436a72(0xaca)],this[_0x436a72(0x47c)],_0x48e24b,_0x1fe866,_0x4f5a36);}else{if('WkoVK'==='WkoVK')this[_0x436a72(0x37f)]=(this[_0x436a72(0x37f)]*(_0x48e24b-0x1)+this['_targetGrowX'])/_0x48e24b,this[_0x436a72(0xaca)]=(this[_0x436a72(0xaca)]*(_0x48e24b-0x1)+this[_0x436a72(0x47c)])/_0x48e24b;else{_0x3ef366[_0x436a72(0x95b)][_0x436a72(0x8c8)][_0x436a72(0xb96)](this,_0x21217a,_0xe865b2);if(!_0xfe8456[_0x436a72(0x3f4)]())return;for(const _0x2b7e9a of this[_0x436a72(0x906)]()[_0x436a72(0x1fe)]()){if(_0x2b7e9a===_0x427e0d[_0x436a72(0x6d7)]()){let _0x18fc5a=_0xf901ec[_0x436a72(0x997)];_0x18fc5a*=_0x3ee350[_0x436a72(0x814)](_0x2b7e9a),_0x18fc5a*=this[_0x436a72(0x906)]()[_0x436a72(0x734)](_0x2b7e9a),_0x18fc5a*=this[_0x436a72(0x680)](_0x40dbe7),_0x598dc6[_0x436a72(0x2b6)]()<_0x18fc5a&&(_0x3534ab[_0x436a72(0x4ac)]=!![],this[_0x436a72(0x6e6)](_0xf370d1));}}}}this[_0x436a72(0x46b)]--;if(this['_growDuration']<=0x0)this['onGrowEnd']();},Sprite_Battler['prototype'][_0x10ff30(0x403)]=function(){const _0x466017=_0x10ff30;this[_0x466017(0x37f)]=this[_0x466017(0x81f)],this[_0x466017(0xaca)]=this[_0x466017(0x47c)];},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x89f)]=function(){const _0x404fb5=_0x10ff30;return this[_0x404fb5(0x46b)]>0x0;},Sprite_Battler[_0x10ff30(0xb0c)]['startSkew']=function(_0x3d2304,_0x1d9a15,_0x55538c,_0x1568b1){const _0xfbd40b=_0x10ff30;if(!this[_0xfbd40b(0x7ef)]())return;if(!this[_0xfbd40b(0xa8f)])return;if(this['_targetSkewX']===_0x3d2304&&this['_targetSkewY']===_0x1d9a15)return;this['_targetSkewX']=_0x3d2304,this[_0xfbd40b(0x779)]=_0x1d9a15,this[_0xfbd40b(0x312)]=_0x55538c,this[_0xfbd40b(0xcd0)]=_0x55538c,this['_skewEasing']=_0x1568b1||_0xfbd40b(0x92a),_0x55538c<=0x0&&(this[_0xfbd40b(0xa8f)][_0xfbd40b(0x2b3)]['x']=this['_targetSkewX'],this[_0xfbd40b(0xa8f)]['skew']['y']=this[_0xfbd40b(0x779)]);},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x954)]=function(){const _0x3fe11e=_0x10ff30;if(this[_0x3fe11e(0x312)]<=0x0)return;if(!this[_0x3fe11e(0xa8f)])return;const _0x754cd9=this[_0x3fe11e(0x312)],_0x5750d2=this['_skewWholeDuration'],_0x1e4669=this[_0x3fe11e(0x26e)],_0x100eeb=this[_0x3fe11e(0xa8f)];if(Imported['VisuMZ_0_CoreEngine']){if(_0x3fe11e(0xa07)!==_0x3fe11e(0xa07)){const _0x155be5=this['aliveMembers']();return _0x155be5[_0x2637a9[_0x3fe11e(0x8c1)](_0x155be5[_0x3fe11e(0x449)])];}else _0x100eeb[_0x3fe11e(0x2b3)]['x']=this[_0x3fe11e(0x8a1)](_0x100eeb[_0x3fe11e(0x2b3)]['x'],this[_0x3fe11e(0x51a)],_0x754cd9,_0x5750d2,_0x1e4669),_0x100eeb['skew']['y']=this[_0x3fe11e(0x8a1)](_0x100eeb[_0x3fe11e(0x2b3)]['y'],this[_0x3fe11e(0x779)],_0x754cd9,_0x5750d2,_0x1e4669);}else _0x3fe11e(0xae8)===_0x3fe11e(0xae8)?(_0x100eeb[_0x3fe11e(0x2b3)]['x']=(_0x100eeb[_0x3fe11e(0x2b3)]['x']*(_0x754cd9-0x1)+this[_0x3fe11e(0x51a)])/_0x754cd9,_0x100eeb[_0x3fe11e(0x2b3)]['y']=(_0x100eeb[_0x3fe11e(0x2b3)]['y']*(_0x754cd9-0x1)+this[_0x3fe11e(0x779)])/_0x754cd9):(this[_0x3fe11e(0xa8f)][_0x3fe11e(0x2b3)]['x']=this[_0x3fe11e(0x51a)],this[_0x3fe11e(0xa8f)][_0x3fe11e(0x2b3)]['y']=this[_0x3fe11e(0x779)]);this[_0x3fe11e(0x312)]--;if(this[_0x3fe11e(0x312)]<=0x0)this[_0x3fe11e(0x1f6)]();},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x1f6)]=function(){const _0x2405a8=_0x10ff30;this['_distortionSprite'][_0x2405a8(0x2b3)]['x']=this[_0x2405a8(0x51a)],this['_distortionSprite'][_0x2405a8(0x2b3)]['y']=this[_0x2405a8(0x779)];},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0xb52)]=function(){const _0x1fc2a6=_0x10ff30;return this[_0x1fc2a6(0x312)]>0x0;},Sprite_Battler['prototype'][_0x10ff30(0x783)]=function(_0x9b430b,_0x27dec3,_0x4d245d,_0xf9b1ae){const _0x2f38d5=_0x10ff30;if(!this['canMove']())return;if(!this[_0x2f38d5(0xa8f)])return;if(this[_0x2f38d5(0x6c6)]===_0x9b430b)return;this['_targetAngle']=_0x9b430b,this[_0x2f38d5(0xae7)]=_0x27dec3,this['_angleWholeDuration']=_0x27dec3,this[_0x2f38d5(0x7d9)]=_0x4d245d||'Linear',this[_0x2f38d5(0xbe6)]=_0xf9b1ae,this[_0x2f38d5(0xbe6)]===undefined&&(this[_0x2f38d5(0xbe6)]=!![]),_0x27dec3<=0x0&&(this[_0x2f38d5(0xb86)]=_0x9b430b,this[_0x2f38d5(0xbe6)]&&(this[_0x2f38d5(0x6c6)]=0x0,this[_0x2f38d5(0xb86)]=0x0));},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x9a1)]=function(){this['updateAngleCalculations'](),this['applyAngleChange']();},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x946)]=function(){const _0x5b1ad1=_0x10ff30;if(this[_0x5b1ad1(0xae7)]<=0x0)return;const _0x59b433=this[_0x5b1ad1(0xae7)],_0x3c581a=this[_0x5b1ad1(0xc93)],_0x20a596=this['_angleEasing'];Imported['VisuMZ_0_CoreEngine']?_0x5b1ad1(0x220)!==_0x5b1ad1(0x1d7)?this[_0x5b1ad1(0xb86)]=this[_0x5b1ad1(0x8a1)](this[_0x5b1ad1(0xb86)],this[_0x5b1ad1(0x6c6)],_0x59b433,_0x3c581a,_0x20a596):(this[_0x5b1ad1(0x56a)]=this[_0x5b1ad1(0xb6e)][_0x5b1ad1(0x73e)](0x0),this[_0x5b1ad1(0x7c4)]=0x0,this[_0x5b1ad1(0x236)]=this[_0x5b1ad1(0x56a)][0x0]||null,this['_phase']=_0x5b1ad1(0x4ef)):'SwxBg'!=='SwxBg'?_0x12f5ec[_0x5b1ad1(0xc6c)](0x0,0x0,_0xc173ca[_0x5b1ad1(0xc87)][_0x5b1ad1(0x7b2)],this[_0x5b1ad1(0xc87)][_0x5b1ad1(0x956)]):this[_0x5b1ad1(0xb86)]=(this['_currentAngle']*(_0x59b433-0x1)+this[_0x5b1ad1(0x6c6)])/_0x59b433;this[_0x5b1ad1(0xae7)]--;if(this[_0x5b1ad1(0xae7)]<=0x0)this[_0x5b1ad1(0x5e4)]();},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x5e4)]=function(){const _0x1b158a=_0x10ff30;this['_currentAngle']=this[_0x1b158a(0x6c6)],this[_0x1b158a(0xbe6)]&&(this[_0x1b158a(0x6c6)]=0x0,this[_0x1b158a(0xb86)]=0x0);},Sprite_Battler[_0x10ff30(0xb0c)]['isSpinning']=function(){return this['_angleDuration']>0x0;},Sprite_Battler['prototype'][_0x10ff30(0x9c8)]=function(){const _0xe3974b=_0x10ff30;if(!this['_distortionSprite'])return;const _0xd609d1=this[_0xe3974b(0xb86)],_0x4cc1ae=this['scale']['x'],_0x1bf598=this[_0xe3974b(0xb4f)][_0xe3974b(0x58a)]()?-0x1:0x1;this[_0xe3974b(0xa8f)]['angle']=_0xd609d1*_0x4cc1ae*_0x1bf598;const _0x364dc7=this[_0xe3974b(0xa8f)]['scale']['y'];this[_0xe3974b(0xa8f)]['y']=this[_0xe3974b(0x956)]*-0.5*(0x2-_0x364dc7),this[_0xe3974b(0xa8f)]['y']=Math[_0xe3974b(0xbc5)](this[_0xe3974b(0xa8f)]['y']);const _0x18977=[this[_0xe3974b(0x6ca)],this['_svBattlerSprite'],this[_0xe3974b(0x3af)]];for(const _0x599e05 of _0x18977){if(_0xe3974b(0x8cb)===_0xe3974b(0x8d1)){const _0x4b41bc=['PreApplyAsUserJS',_0xe3974b(0x339),'PreDamageAsUserJS',_0xe3974b(0x937),_0xe3974b(0x7f2),_0xe3974b(0x66c),_0xe3974b(0x51b),_0xe3974b(0x2e9),'PreStartActionJS',_0xe3974b(0x890),'PreEndActionJS',_0xe3974b(0xcc6),_0xe3974b(0x8ac),'PostStartBattleJS','PreEndBattleJS',_0xe3974b(0xc4f),_0xe3974b(0xa13),_0xe3974b(0x3c8),_0xe3974b(0x240),'EscapeFailureJS',_0xe3974b(0x576),_0xe3974b(0xc6b),_0xe3974b(0x377),'PostEndTurnJS','PreRegenerateJS',_0xe3974b(0x87b)];for(const _0x42b914 of _0x4b41bc){_0x4db58d['BattleCore']['createJS'](_0x54f49c,_0x42b914);}}else{if(!_0x599e05)continue;_0x599e05['y']=this[_0xe3974b(0x956)]*0.5;}}if(this['_shadowSprite']){if('xFBie'!=='xFBie')return _0x1e6eed[_0xe3974b(0x95b)][_0xe3974b(0x928)]['PartyCmd'][_0xe3974b(0x686)];else this[_0xe3974b(0x363)]=this[_0xe3974b(0x363)]??0x1,this[_0xe3974b(0x4df)]=this[_0xe3974b(0x4df)]??0x1,this[_0xe3974b(0x96e)][_0xe3974b(0x808)]['x']=this['_distortionSprite']['scale']['x']*this['_shadowScaleX'],this[_0xe3974b(0x96e)][_0xe3974b(0x808)]['y']=this['_distortionSprite'][_0xe3974b(0x808)]['y']*this[_0xe3974b(0x4df)];}},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xca0)]=Sprite_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x786)],Sprite_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x786)]=function(){const _0x522354=_0x10ff30;VisuMZ[_0x522354(0x95b)][_0x522354(0xca0)][_0x522354(0xb96)](this),VisuMZ['BattleCore'][_0x522354(0x928)][_0x522354(0xcbf)][_0x522354(0x811)]&&(_0x522354(0xc55)!=='YtqJJ'?this[_0x522354(0x6e1)]():(_0x208a4b[_0x522354(0x95b)][_0x522354(0x5cf)]['call'](this,_0xc155ec),this['initBattlePortrait']()));},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x28d)]=Sprite_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0xbb3)],Sprite_Enemy['prototype']['createStateIconSprite']=function(){const _0x1a4a6c=_0x10ff30;VisuMZ[_0x1a4a6c(0x95b)][_0x1a4a6c(0x928)]['HpGauge']['ShowEnemyGauge']&&this[_0x1a4a6c(0x6e1)](),VisuMZ[_0x1a4a6c(0x95b)][_0x1a4a6c(0x28d)][_0x1a4a6c(0xb96)](this);},Sprite_Battler[_0x10ff30(0xb0c)]['createHpGaugeSprite']=function(){const _0x81321c=_0x10ff30;if(!ConfigManager[_0x81321c(0x5b8)])return;if(this[_0x81321c(0x602)]===Sprite_SvEnemy)return;const _0x24ef14=VisuMZ[_0x81321c(0x95b)][_0x81321c(0x928)][_0x81321c(0xcbf)],_0x488fb8=new Sprite_HpGauge();_0x488fb8[_0x81321c(0x8eb)]['x']=_0x24ef14['AnchorX'],_0x488fb8[_0x81321c(0x8eb)]['y']=_0x24ef14[_0x81321c(0x575)],_0x488fb8[_0x81321c(0x808)]['x']=_0x488fb8[_0x81321c(0x808)]['y']=_0x24ef14[_0x81321c(0x2b5)],this[_0x81321c(0x810)]=_0x488fb8,this['addChild'](this[_0x81321c(0x810)]);if(Spriteset_Battle['ANTI_TINT_UI']){if('wwMiw'===_0x81321c(0x216)){const _0x3b4d62=this[_0x81321c(0xa8f)];_0x3b4d62&&(_0x3b4d62[_0x81321c(0x808)]['x']=this[_0x81321c(0x949)](),_0x3b4d62[_0x81321c(0x808)]['y']=this[_0x81321c(0x927)]());}else BattleManager['addChildToUiContainer'](this[_0x81321c(0x810)]);}},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xba9)]=Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x56b)],Sprite_Battler[_0x10ff30(0xb0c)]['setBattler']=function(_0x222a51){const _0x42b760=_0x10ff30,_0x4b31ec=this[_0x42b760(0xb4f)];VisuMZ[_0x42b760(0x95b)]['Sprite_Battler_setBattler'][_0x42b760(0xb96)](this,_0x222a51),this[_0x42b760(0x51f)](_0x222a51);if(_0x4b31ec!==_0x222a51)this[_0x42b760(0x1c7)]();},Sprite_Battler[_0x10ff30(0xb0c)]['setupHpGaugeSprite']=function(_0x1d1601){const _0x2397be=_0x10ff30;if(!_0x1d1601)return;if(!this[_0x2397be(0x810)])return;if(_0x1d1601[_0x2397be(0x58a)]()){}else{if(_0x1d1601['isEnemy']()){if(this['constructor']===Sprite_SvEnemy&&!_0x1d1601['hasSvBattler']())return;}}this[_0x2397be(0x810)][_0x2397be(0x542)](_0x1d1601,'hp');},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x953)]=function(){const _0x1c6908=_0x10ff30;return this[_0x1c6908(0xb4f)]&&this[_0x1c6908(0xb4f)]['hasStaticSvBattler']();},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0xafd)]=function(){const _0x436c65=_0x10ff30,_0x5d0974=this['_mainSprite']['bitmap'];if(!_0x5d0974)return;const _0x1be701=_0x5d0974[_0x436c65(0x7b2)];let _0x3de6de=_0x5d0974[_0x436c65(0x956)];if(this[_0x436c65(0xb4f)][_0x436c65(0x472)]()){if(this[_0x436c65(0x55c)])_0x3de6de=Math['max'](0x0,this[_0x436c65(0x55c)]['height']-0x4);}this['_mainSprite'][_0x436c65(0xc6c)](0x0,0x0,_0x1be701,_0x3de6de),this[_0x436c65(0xc6c)](0x0,0x0,_0x1be701,_0x3de6de);},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x620)]=function(){const _0x46c4cf=_0x10ff30;if(!this[_0x46c4cf(0xb4f)])return;if(!this[_0x46c4cf(0x810)])return;const _0x5c24fd=VisuMZ['BattleCore'][_0x46c4cf(0x928)]['HpGauge'],_0x2cb3b7=this[_0x46c4cf(0x810)];_0x2cb3b7[_0x46c4cf(0x905)]=this['isVisualHpGaugeDisplayed']();const _0x646e04=_0x5c24fd['OffsetX'],_0x109b93=_0x5c24fd[_0x46c4cf(0x6b8)];_0x2cb3b7['x']=_0x646e04,_0x2cb3b7['x']+=this[_0x46c4cf(0xb4f)][_0x46c4cf(0x4b0)](),_0x2cb3b7['y']=-this[_0x46c4cf(0x956)]+_0x109b93,_0x2cb3b7['y']+=this[_0x46c4cf(0xb4f)][_0x46c4cf(0xbb5)](),Spriteset_Battle['ANTI_TINT_UI']&&SceneManager['_scene'][_0x46c4cf(0x93a)]&&(_0x2cb3b7['x']+=this['x'],_0x2cb3b7['y']+=this['y']);},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x7bc)]=function(){const _0x216e31=_0x10ff30;if(!this[_0x216e31(0xb4f)])return![];if(this[_0x216e31(0xb4f)]['isActor']())return!![];if(this[_0x216e31(0xb4f)][_0x216e31(0x9ac)]())return![];if(this[_0x216e31(0x443)]<=0x0)return![];const _0x3fccc3=this['_battler'][_0x216e31(0x296)]()[_0x216e31(0x7ed)];if(_0x3fccc3[_0x216e31(0x22f)](/<SHOW HP GAUGE>/i))return!![];if(_0x3fccc3['match'](/<HIDE HP GAUGE>/i))return![];const _0x401e37=VisuMZ[_0x216e31(0x95b)][_0x216e31(0x928)][_0x216e31(0xcbf)];if(_0x401e37[_0x216e31(0x23e)]){if(_0x401e37[_0x216e31(0x7ac)]&&BattleManager[_0x216e31(0x344)]())return!![];if(this['_battler']['_visualHpGauge_JustDied'])return![];return this[_0x216e31(0xb4f)][_0x216e31(0x3e3)]();}return!![];},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xae2)]=Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0xacc)],Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0xacc)]=function(){const _0x5131b5=_0x10ff30;if(!this[_0x5131b5(0xb4f)])return![];if(this[_0x5131b5(0xa4f)]>0x0)return!![];return VisuMZ[_0x5131b5(0x95b)]['Sprite_Battler_isMoving'][_0x5131b5(0xb96)](this);},VisuMZ['BattleCore'][_0x10ff30(0x39e)]=Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0xb17)],Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0xb17)]=function(_0x13366f,_0x5b349c,_0x63ea98){const _0x14722d=_0x10ff30;this[_0x14722d(0x7ef)]()&&VisuMZ['BattleCore']['Sprite_Battler_startMove'][_0x14722d(0xb96)](this,_0x13366f,_0x5b349c,_0x63ea98);},Sprite_Battler['prototype'][_0x10ff30(0x7ef)]=function(){const _0x29473c=_0x10ff30;if(this['_battler']&&this[_0x29473c(0xb4f)]['isDead']())return![];if(this['_battler']&&!this[_0x29473c(0xb4f)][_0x29473c(0x92d)]())return![];return $gameSystem[_0x29473c(0xa7c)]();},Sprite_Battler['prototype'][_0x10ff30(0xade)]=function(){},Sprite_Battler[_0x10ff30(0xb0c)][_0x10ff30(0x2c2)]=function(){const _0x2f30c0=_0x10ff30;this[_0x2f30c0(0xb17)](0x0,0x0,0xc);},Sprite_Battler['prototype'][_0x10ff30(0x8df)]=function(){},Sprite_Battler['prototype'][_0x10ff30(0x7f1)]=function(){const _0x237ea5=_0x10ff30,_0x5c325b=VisuMZ[_0x237ea5(0x95b)][_0x237ea5(0x928)]['Actor'],_0x5f3b5c=this[_0x237ea5(0xb4f)]&&this[_0x237ea5(0xb4f)]['isActor']()?0x1:-0x1,_0x1bbc39=this['_baseX']-this[_0x237ea5(0x7e9)]+_0x5f3b5c*_0x5c325b[_0x237ea5(0x494)],_0xbb04c5=this[_0x237ea5(0xcae)]-this[_0x237ea5(0x2f8)]+_0x5f3b5c*_0x5c325b[_0x237ea5(0x48c)],_0x44ebf6=_0x5c325b[_0x237ea5(0x9c0)];this[_0x237ea5(0xb17)](_0x1bbc39,_0xbb04c5,_0x44ebf6);},VisuMZ[_0x10ff30(0x95b)]['Sprite_Actor_initMembers']=Sprite_Actor[_0x10ff30(0xb0c)]['initMembers'],Sprite_Actor['prototype'][_0x10ff30(0x6c8)]=function(){const _0x1053af=_0x10ff30;VisuMZ[_0x1053af(0x95b)][_0x1053af(0x2a2)][_0x1053af(0xb96)](this),this[_0x1053af(0xbb8)]();},Sprite_Actor[_0x10ff30(0xb0c)]['mainSprite']=function(){const _0x10f6dc=_0x10ff30;return this[_0x10f6dc(0xa8f)]||this[_0x10f6dc(0x6ca)]||this;},VisuMZ['BattleCore']['Sprite_Actor_moveToStartPosition']=Sprite_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x436)],Sprite_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x436)]=function(){},Sprite_Actor[_0x10ff30(0xb0c)]['moveToStartPositionBattleCore']=function(_0x5242c2){const _0x4b6c0e=_0x10ff30;if(SceneManager[_0x4b6c0e(0xa35)]())return;if(!_0x5242c2)return;if(!_0x5242c2[_0x4b6c0e(0x7ef)]())return;VisuMZ[_0x4b6c0e(0x95b)][_0x4b6c0e(0x847)]['call'](this);},VisuMZ['BattleCore'][_0x10ff30(0xc4b)]=Sprite_Actor['prototype']['setActorHome'],Sprite_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x475)]=function(_0x4cf17c){const _0x2b91f2=_0x10ff30;if(VisuMZ['BattleCore']['Settings'][_0x2b91f2(0x25e)][_0x2b91f2(0x2be)]){if(_0x2b91f2(0x922)!==_0x2b91f2(0x94e))VisuMZ[_0x2b91f2(0x95b)][_0x2b91f2(0x928)][_0x2b91f2(0x25e)]['HomePosJS'][_0x2b91f2(0xb96)](this,_0x4cf17c);else{if(!_0x3c6792[_0x2b91f2(0x95b)][_0x2b91f2(0x928)][_0x2b91f2(0x5f4)][_0x2b91f2(0x9c1)])return;const _0x18d3a3=_0x4c043d[_0x2b91f2(0xc81)](),_0x23abe1=_0x18d3a3[_0x2b91f2(0x51d)]();for(const _0x524dfb of _0x23abe1){_0x524dfb['message4']&&(this[_0x2b91f2(0x395)]('fnordRemovedStates'),this[_0x2b91f2(0x395)](_0x2b91f2(0x64e)),this[_0x2b91f2(0x395)](_0x2b91f2(0xc98)),this[_0x2b91f2(0x395)](_0x2b91f2(0x657),_0x524dfb[_0x2b91f2(0xc8a)][_0x2b91f2(0x958)](_0x1a29ef[_0x2b91f2(0x52f)]())),this[_0x2b91f2(0x395)](_0x2b91f2(0x1ec)));}}}else VisuMZ[_0x2b91f2(0x95b)][_0x2b91f2(0xc4b)][_0x2b91f2(0xb96)](this,_0x4cf17c);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x65a)]=Sprite_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x56b)],Sprite_Actor[_0x10ff30(0xb0c)]['setBattler']=function(_0x241dff){const _0x3a4f00=_0x10ff30;VisuMZ[_0x3a4f00(0x95b)][_0x3a4f00(0x65a)][_0x3a4f00(0xb96)](this,_0x241dff),this[_0x3a4f00(0x7e8)](_0x241dff);},Sprite_Actor[_0x10ff30(0xb0c)]['setBattlerBattleCore']=function(_0x119371){const _0xc51e96=_0x10ff30;if(!_0x119371)return;if(!this[_0xc51e96(0x6ca)])return;this[_0xc51e96(0x6ca)]['anchor']['x']=this[_0xc51e96(0x4e8)][_0xc51e96(0x5fc)](),this[_0xc51e96(0x6ca)]['anchor']['y']=this[_0xc51e96(0x4e8)]['svBattlerAnchorY'](),this[_0xc51e96(0x456)]();},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x365)]=Sprite_Actor['prototype'][_0x10ff30(0x78d)],Sprite_Actor['prototype'][_0x10ff30(0x78d)]=function(){const _0x55c9a8=_0x10ff30;VisuMZ[_0x55c9a8(0x95b)][_0x55c9a8(0x365)]['call'](this),this[_0x55c9a8(0x4e8)]&&(this[_0x55c9a8(0x35e)](),this[_0x55c9a8(0x22d)]());},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x462)]=Sprite_Actor[_0x10ff30(0xb0c)]['updateBitmap'],Sprite_Actor[_0x10ff30(0xb0c)]['updateBitmap']=function(){const _0x2e4c2e=_0x10ff30;VisuMZ[_0x2e4c2e(0x95b)][_0x2e4c2e(0x462)][_0x2e4c2e(0xb96)](this);if(this[_0x2e4c2e(0x6ca)]&&this[_0x2e4c2e(0x6ca)][_0x2e4c2e(0xc87)]&&this[_0x2e4c2e(0xb4f)]){if(_0x2e4c2e(0xc5c)!=='zNTII')this[_0x2e4c2e(0x6ca)][_0x2e4c2e(0xc87)][_0x2e4c2e(0x533)]!==this[_0x2e4c2e(0xb4f)][_0x2e4c2e(0x79c)]()&&(_0x2e4c2e(0x2d6)===_0x2e4c2e(0x6ad)?this[_0x2e4c2e(0x382)]=0x0:this[_0x2e4c2e(0x6ca)][_0x2e4c2e(0xc87)]['smooth']=this[_0x2e4c2e(0xb4f)][_0x2e4c2e(0x79c)]());else{_0xeb934e[_0x2e4c2e(0xb0c)][_0x2e4c2e(0xb9d)][_0x2e4c2e(0xb96)](this,_0x368179);if(this[_0x2e4c2e(0xc4a)]())this[_0x2e4c2e(0x2ba)](_0xfa1042);}}},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x489)]=Sprite_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x8fb)],Sprite_Actor['prototype']['updateShadow']=function(){const _0x370977=_0x10ff30;VisuMZ[_0x370977(0x95b)]['Sprite_Actor_updateShadow'][_0x370977(0xb96)](this),this['updateShadowBattleCore']();},Sprite_Actor[_0x10ff30(0xb0c)][_0x10ff30(0xadc)]=function(){const _0x22cce3=_0x10ff30;if(!this[_0x22cce3(0x6ca)])return;if(!this[_0x22cce3(0x96e)])return;this[_0x22cce3(0x456)](),this[_0x22cce3(0x693)]();},Sprite_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x35e)]=function(){const _0x3af193=_0x10ff30;this[_0x3af193(0x7cc)][_0x3af193(0x808)]['x']=0x1/(this['scale']['x']||0.001),this[_0x3af193(0x7cc)]['scale']['y']=0x1/(this[_0x3af193(0x808)]['y']||0.001);},Sprite_Actor[_0x10ff30(0xb0c)]['updateStyleOpacity']=function(){const _0x433668=_0x10ff30;if(!$gameSystem[_0x433668(0xa7c)]()&&this['constructor']===Sprite_Actor){const _0x5dd6c5=Scene_Battle['prototype'][_0x433668(0xc1b)]();[_0x433668(0x281),_0x433668(0x9f4),_0x433668(0xc14),_0x433668(0x401)][_0x433668(0x778)](_0x5dd6c5)&&(this[_0x433668(0x443)]=0x0);}},Sprite_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x97b)]=function(){const _0x178ab1=_0x10ff30,_0x47963d=this['_actor'];if(_0x47963d){const _0x383da2=_0x47963d[_0x178ab1(0x7b9)]();if(_0x47963d['isInputting']()||_0x47963d[_0x178ab1(0x557)]())this[_0x178ab1(0x430)](_0x178ab1(0x646));else{if(_0x383da2===0x3)this[_0x178ab1(0x430)](_0x178ab1(0x379));else{if(_0x383da2===0x2)this[_0x178ab1(0x430)](_0x178ab1(0x251));else{if(this[_0x178ab1(0x46e)]){if(_0x178ab1(0xb14)===_0x178ab1(0xb14))this['startMotion'](_0x178ab1(0x378));else{if(_0x531385[_0x178ab1(0x763)]())this['preparePartyRefresh'](),this[_0x178ab1(0xac5)]=![],_0x488964[_0x178ab1(0x2c7)]();else this[_0x178ab1(0xac5)]&&(this[_0x178ab1(0xac5)]=![],this[_0x178ab1(0x219)](),this[_0x178ab1(0x9f1)]());}}else{if(_0x47963d[_0x178ab1(0x672)]())this[_0x178ab1(0x430)](_0x178ab1(0x1ec));else{if(_0x47963d[_0x178ab1(0x805)]())this[_0x178ab1(0x430)](_0x178ab1(0xc76));else{if(_0x47963d[_0x178ab1(0x523)]()||_0x47963d[_0x178ab1(0x46d)]())_0x178ab1(0x944)===_0x178ab1(0x746)?_0x22d4da=_0x3ad742(_0x92cb34['$1']):this['startMotion'](_0x178ab1(0x867));else{if(_0x383da2===0x1)this['startMotion'](_0x178ab1(0xb44));else{if(_0x47963d['isDying']()){if(_0x178ab1(0x3fc)!==_0x178ab1(0x38e))this[_0x178ab1(0x430)](_0x178ab1(0x7f3));else{if(_0x55180d[_0x178ab1(0x95b)][_0x178ab1(0x928)][_0x178ab1(0x617)][_0x178ab1(0x7c5)]){const _0x30a619=_0x5d1766['item']();this[_0x178ab1(0x395)](_0x178ab1(0xa43),_0x2a9974,[_0x2ca4cc],_0x30a619[_0x178ab1(0x72e)]);}}}else{if(_0x47963d[_0x178ab1(0x305)]())this[_0x178ab1(0x430)](_0x178ab1(0x646));else _0x47963d['currentAction']()?this[_0x178ab1(0x430)](_0x178ab1(0x1ec)):this[_0x178ab1(0x430)](_0x178ab1(0x646));}}}}}}}}}}},Sprite_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x8df)]=function(){const _0x5cfd83=_0x10ff30,_0x270b54=0xa,_0x5d6d46=0x12c*_0x270b54,_0x3266b5=0x1e*_0x270b54;this[_0x5cfd83(0xb17)](_0x5d6d46,0x0,_0x3266b5);},Sprite_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x2f0)]=function(){const _0x346ff0=_0x10ff30;Sprite_Battler[_0x346ff0(0xb0c)][_0x346ff0(0x2f0)][_0x346ff0(0xb96)](this);},Sprite_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x79b)]=function(){const _0x2fd548=_0x10ff30;return Sprite_Battler[_0x2fd548(0x964)];},Sprite_Weapon[_0x10ff30(0xb0c)][_0x10ff30(0xbf5)]=function(){const _0x3685a2=_0x10ff30;return Sprite_Battler[_0x3685a2(0x964)];},Sprite_Actor['prototype']['setupMotion']=function(){},Sprite_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x711)]=function(){},Sprite_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x306)]=function(){const _0x53e55b=_0x10ff30;if(this[_0x53e55b(0x6fb)]&&++this['_motionCount']>=this[_0x53e55b(0x79b)]()){if(_0x53e55b(0x2f6)!==_0x53e55b(0x2f6))this['_baseX']=this['x'],this['_baseY']=this['y'],this[_0x53e55b(0x250)](),this['updateJump'](),this['x']+=this['extraPositionX'](),this['y']+=this[_0x53e55b(0x6c3)](),this['y']+=this[_0x53e55b(0x342)](),this['x']=_0xea5325[_0x53e55b(0xcce)](this['x']),this['y']=_0x5cb317[_0x53e55b(0xcce)](this['y']);else{if(this[_0x53e55b(0x6fb)][_0x53e55b(0x745)])this[_0x53e55b(0xa0d)]=(this[_0x53e55b(0xa0d)]+0x1)%0x4;else this['_pattern']<0x2?this[_0x53e55b(0xa0d)]++:this[_0x53e55b(0x97b)]();this['_motionCount']=0x0;}}},Sprite_Actor[_0x10ff30(0xb0c)][_0x10ff30(0xa5f)]=function(_0x44a435){const _0x45fdba=_0x10ff30;if(_0x44a435===_0x45fdba(0xc44))this['_checkOn']=!![];if(this[_0x45fdba(0xb4f)]&&this[_0x45fdba(0xb4f)][_0x45fdba(0x472)]()){this['_motion']=Sprite_Actor[_0x45fdba(0xb85)][_0x45fdba(0x379)];return;}const _0x32fcbc=Sprite_Actor[_0x45fdba(0xb85)][_0x44a435];this[_0x45fdba(0x6fb)]=_0x32fcbc,this['_motionCount']=0x0,this['_pattern']=0x0;},Sprite_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x6ae)]=function(_0x593d38){const _0x256cc2=_0x10ff30;if(this['hasStaticSvBattler']())return;this[_0x256cc2(0x2f4)](),this[_0x256cc2(0x803)][_0x256cc2(0x542)](_0x593d38),this[_0x256cc2(0x4e8)][_0x256cc2(0xb7a)]();},Sprite_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x2f4)]=function(){const _0x154f96=_0x10ff30;let _0x24aba3=-0x10,_0x4ed971=this[_0x154f96(0x956)]*0.5;const _0x5cc0f6=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x4128cc=this[_0x154f96(0xb4f)][_0x154f96(0x4ab)]()[_0x154f96(0xad3)](_0x2b57e0=>_0x2b57e0&&_0x2b57e0[_0x154f96(0x7ed)]['match'](_0x5cc0f6)?Number(RegExp['$1']):0x0),_0x58d1c6=this[_0x154f96(0xb4f)]['traitObjects']()[_0x154f96(0xad3)](_0x4f9297=>_0x4f9297&&_0x4f9297['note'][_0x154f96(0x22f)](_0x5cc0f6)?Number(RegExp['$2']):0x0);_0x24aba3=_0x4128cc[_0x154f96(0x393)]((_0x119c69,_0x1a2211)=>_0x119c69+_0x1a2211,_0x24aba3),_0x4ed971=_0x58d1c6[_0x154f96(0x393)]((_0x55a528,_0x51eeb1)=>_0x55a528+_0x51eeb1,_0x4ed971),this[_0x154f96(0x803)]['x']=_0x24aba3,this[_0x154f96(0x803)]['y']=_0x4ed971,this['_weaponSprite']['update']();},Sprite_Weapon['prototype']['setup']=function(_0x1ccfb9){const _0x440b05=_0x10ff30;this[_0x440b05(0xc7d)]=_0x1ccfb9,this['_animationCount']=-0x1,this[_0x440b05(0xa0d)]=0x0,this[_0x440b05(0x4c7)](),this[_0x440b05(0x685)]();},Sprite_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x6d1)]=function(){},Sprite_Actor[_0x10ff30(0xb0c)][_0x10ff30(0xade)]=function(){const _0x3f673c=_0x10ff30,_0x5039ff=VisuMZ[_0x3f673c(0x95b)][_0x3f673c(0x928)]['ActionSequence'],_0x5875b5=_0x5039ff[_0x3f673c(0x99f)],_0x11af84=_0x5039ff[_0x3f673c(0x632)],_0x25a11e=_0x5039ff['StepDuration'];this[_0x3f673c(0xb17)](-_0x5875b5,-_0x11af84,_0x25a11e);},VisuMZ['BattleCore'][_0x10ff30(0xa09)]=Sprite_Actor[_0x10ff30(0xb0c)][_0x10ff30(0x685)],Sprite_Actor['prototype'][_0x10ff30(0x685)]=function(){const _0x246ca2=_0x10ff30;this[_0x246ca2(0x953)]()?_0x246ca2(0xb31)===_0x246ca2(0xb31)?this[_0x246ca2(0xafd)]():(this['push'](_0x246ca2(0x3ec)),this[_0x246ca2(0x395)](_0x246ca2(0x64e)),this[_0x246ca2(0x395)](_0x246ca2(0xc98)),this[_0x246ca2(0x395)](_0x246ca2(0x657),_0x52f53b[_0x246ca2(0xc8a)]['format'](_0x14a9d2[_0x246ca2(0x52f)]())),this['push']('wait')):(this[_0x246ca2(0xbc1)](),VisuMZ[_0x246ca2(0x95b)][_0x246ca2(0xa09)]['call'](this));},Sprite_Actor[_0x10ff30(0xb0c)][_0x10ff30(0xbc1)]=function(){const _0x590be1=_0x10ff30;if(this[_0x590be1(0xb4f)]&&this[_0x590be1(0xb4f)][_0x590be1(0x8aa)]){const _0x494b53=this['_battler'][_0x590be1(0x8aa)];this[_0x590be1(0x6fb)]=Sprite_Actor[_0x590be1(0xb85)][_0x494b53[_0x590be1(0x5b5)]],this[_0x590be1(0xa0d)]=_0x494b53[_0x590be1(0x7c1)];const _0x373d5e=this[_0x590be1(0x803)];_0x373d5e[_0x590be1(0xc30)](_0x494b53[_0x590be1(0x63e)],_0x494b53[_0x590be1(0x7c1)]),this[_0x590be1(0x2f4)]();}},Sprite_Weapon['prototype']['freezeFrame']=function(_0x27a03e,_0x581b00){const _0x162fca=_0x10ff30;this[_0x162fca(0xc7d)]=_0x27a03e,this[_0x162fca(0xc5b)]=-Infinity,this['_pattern']=_0x581b00,this[_0x162fca(0x4c7)](),this[_0x162fca(0x685)]();},Sprite_Enemy[_0x10ff30(0xb0c)]['initMembers']=function(){const _0x1f41b7=_0x10ff30;Sprite_Battler[_0x1f41b7(0xb0c)][_0x1f41b7(0x6c8)][_0x1f41b7(0xb96)](this),this[_0x1f41b7(0x270)]=null,this[_0x1f41b7(0x24f)]=![],this['_battlerName']='',this[_0x1f41b7(0x655)]=0x0,this['_effectType']=null,this['_effectDuration']=0x0,this[_0x1f41b7(0x2c8)]=0x0,this[_0x1f41b7(0x761)](),this[_0x1f41b7(0xbb3)]();},VisuMZ['BattleCore']['Sprite_Enemy_update']=Sprite_Enemy['prototype'][_0x10ff30(0x78d)],Sprite_Enemy['prototype'][_0x10ff30(0x78d)]=function(){const _0x35033b=_0x10ff30;VisuMZ[_0x35033b(0x95b)][_0x35033b(0x5d8)][_0x35033b(0xb96)](this),this[_0x35033b(0x456)]();},Sprite_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0x761)]=function(){const _0x281548=_0x10ff30;this['_mainSprite']=new Sprite(),this[_0x281548(0x6ca)][_0x281548(0x8eb)]['x']=0.5,this[_0x281548(0x6ca)][_0x281548(0x8eb)]['y']=0x1,this[_0x281548(0x440)](this[_0x281548(0x6ca)]),this[_0x281548(0xbb8)]();},Sprite_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0x4ed)]=function(){const _0xfa906c=_0x10ff30;return this[_0xfa906c(0xa8f)]||this[_0xfa906c(0x6ca)]||this;},Sprite_Enemy['prototype'][_0x10ff30(0x4c7)]=function(_0x4ec758){const _0x526858=_0x10ff30;this[_0x526858(0xc87)]=new Bitmap(0x1,0x1);if(this[_0x526858(0xc4a)]()){const _0x104c15=this[_0x526858(0x270)][_0x526858(0x8db)]();this[_0x526858(0xc87)]=new Bitmap(_0x104c15[_0x526858(0x7b2)],_0x104c15[_0x526858(0x956)]),this['_mainSprite'][_0x526858(0xc87)]=new Bitmap(0x1,0x1);}else{if($gameSystem[_0x526858(0xa7c)]()){if('Wheac'!==_0x526858(0x43a))this[_0x526858(0x6ca)][_0x526858(0xc87)]=ImageManager['loadSvEnemy'](_0x4ec758),this['_mainSprite'][_0x526858(0xc87)][_0x526858(0x2ff)](this[_0x526858(0x498)][_0x526858(0x973)](this));else{this[_0x526858(0x918)](_0x526858(0x379));return;}}else'uaiRV'===_0x526858(0x6df)?this[_0x526858(0x371)]=_0x1e902b['MIN_SAFE_INTEGER']:(this['_mainSprite'][_0x526858(0xc87)]=ImageManager[_0x526858(0x9d4)](_0x4ec758),this[_0x526858(0x6ca)]['bitmap'][_0x526858(0x2ff)](this['createEmptyBitmap'][_0x526858(0x973)](this)));}},Sprite_Enemy[_0x10ff30(0xb0c)]['createEmptyBitmap']=function(){const _0x1dc8cf=_0x10ff30,_0x515fc7=this[_0x1dc8cf(0x6ca)][_0x1dc8cf(0xc87)];_0x515fc7&&(this[_0x1dc8cf(0xc87)]=new Bitmap(_0x515fc7[_0x1dc8cf(0x7b2)],_0x515fc7[_0x1dc8cf(0x956)]));},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x94c)]=Sprite_Enemy[_0x10ff30(0xb0c)]['setHue'],Sprite_Enemy[_0x10ff30(0xb0c)]['setHue']=function(_0x205310){const _0x16215c=_0x10ff30;this['_mainSprite']&&('CVgSC'!=='LPdjp'?this[_0x16215c(0x6ca)][_0x16215c(0xbc4)](_0x205310):(this[_0x16215c(0x2ef)]=this['_activeWeaponSlot']||0x0,this[_0x16215c(0x2ef)]++,this['_cache']={}));},VisuMZ[_0x10ff30(0x95b)]['Sprite_Enemy_initVisibility']=Sprite_Enemy['prototype']['initVisibility'],Sprite_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0x77f)]=function(){const _0x54ed06=_0x10ff30;this['allowCollapse']()?VisuMZ[_0x54ed06(0x95b)][_0x54ed06(0x354)][_0x54ed06(0xb96)](this):(this[_0x54ed06(0x24f)]=!this[_0x54ed06(0x270)]['isHidden'](),!this[_0x54ed06(0x24f)]&&(this[_0x54ed06(0x443)]=0x0));},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x7dd)]=Sprite_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0x63a)],Sprite_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0x63a)]=function(){const _0x1f2662=_0x10ff30;if(this[_0x1f2662(0x9e1)]())VisuMZ[_0x1f2662(0x95b)]['Sprite_Enemy_updateCollapse'][_0x1f2662(0xb96)](this);},Sprite_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0x685)]=function(){const _0x45df95=_0x10ff30;Sprite_Battler[_0x45df95(0xb0c)][_0x45df95(0x685)][_0x45df95(0xb96)](this);const _0x1e2b98=this[_0x45df95(0x4ed)]()||this;if(!_0x1e2b98)return;!_0x1e2b98[_0x45df95(0xc87)]&&(_0x1e2b98[_0x45df95(0xc87)]=new Bitmap(this['width'],this[_0x45df95(0x956)])),this[_0x45df95(0x764)]==='bossCollapse'?this[_0x45df95(0x6ca)]['setFrame'](0x0,0x0,this['_mainSprite'][_0x45df95(0x7b2)],this['_effectDuration']):_0x1e2b98[_0x45df95(0xc6c)](0x0,0x0,_0x1e2b98['bitmap']['width'],this[_0x45df95(0xc87)]['height']);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xb42)]=Sprite_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0xaaf)],Sprite_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0xaaf)]=function(){const _0x2a1738=_0x10ff30;if(this[_0x2a1738(0x9e1)]())VisuMZ[_0x2a1738(0x95b)][_0x2a1738(0xb42)]['call'](this);},Sprite_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0xacc)]=function(){const _0x17c5f3=_0x10ff30;return Sprite_Battler['prototype'][_0x17c5f3(0xacc)][_0x17c5f3(0xb96)](this);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xbe5)]=Sprite_Enemy['prototype'][_0x10ff30(0x35e)],Sprite_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0x35e)]=function(){const _0x4afad4=_0x10ff30;VisuMZ[_0x4afad4(0x95b)]['Sprite_Enemy_updateStateSprite'][_0x4afad4(0xb96)](this),this[_0x4afad4(0x66b)]();},Sprite_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0x66b)]=function(){const _0x5a670a=_0x10ff30,_0x1fe7ff=VisuMZ[_0x5a670a(0x95b)]['Settings'][_0x5a670a(0x2ec)];if(_0x1fe7ff[_0x5a670a(0x255)]&&!_0x1fe7ff[_0x5a670a(0x993)]){if('CGCRJ'!=='CGCRJ')return this[_0x5a670a(0x247)](_0x21b48e);else{this[_0x5a670a(0xaa7)][_0x5a670a(0x443)]=0x0;return;}}this['_stateIconSprite']['x']=0x0,this[_0x5a670a(0xaa7)]['x']+=this[_0x5a670a(0xb4f)][_0x5a670a(0x4b0)](),this[_0x5a670a(0xaa7)]['y']=-this['bitmap'][_0x5a670a(0x956)]-this['_stateIconSprite'][_0x5a670a(0x956)]-0x4,this['_stateIconSprite']['y']+=this[_0x5a670a(0xb4f)][_0x5a670a(0xbb5)](),this[_0x5a670a(0xaa7)][_0x5a670a(0x808)]['x']=0x1/(this['scale']['x']||0.001),this[_0x5a670a(0xaa7)]['scale']['y']=0x1/(this[_0x5a670a(0x808)]['y']||0.001);if(this[_0x5a670a(0xc4a)]()){if('LcrXH'==='LcrXH')this[_0x5a670a(0x408)]['_stateSprite'][_0x5a670a(0x808)]['x']=-0x1/(this['scale']['x']||0.001),this[_0x5a670a(0x408)][_0x5a670a(0x7cc)][_0x5a670a(0x808)]['y']=0x1/(this[_0x5a670a(0x808)]['y']||0.001);else{if(!_0x36c397[_0x5a670a(0xc1e)]())return;const _0x513909=_0x1439f7[_0x5a670a(0x7ba)];_0x513909[_0x5a670a(0xb10)]();}}},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x30a)]=Sprite_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0x56b)],Sprite_Enemy['prototype'][_0x10ff30(0x56b)]=function(_0x3a7d60){const _0x43552c=_0x10ff30;VisuMZ[_0x43552c(0x95b)][_0x43552c(0x30a)][_0x43552c(0xb96)](this,_0x3a7d60),this[_0x43552c(0x2ac)](_0x3a7d60);},Sprite_Enemy[_0x10ff30(0xb0c)]['setSvBattlerSprite']=function(_0x238fb4){const _0x35af3d=_0x10ff30;!this[_0x35af3d(0x408)]&&('QnHak'===_0x35af3d(0xcc7)?(this[_0x35af3d(0xac5)]=![],this[_0x35af3d(0x219)](),this[_0x35af3d(0x9f1)]()):(this[_0x35af3d(0x408)]=new Sprite_SvEnemy(_0x238fb4),this['attachSpritesToDistortionSprite']())),this[_0x35af3d(0x408)][_0x35af3d(0x56b)](_0x238fb4);},Sprite_Enemy['prototype'][_0x10ff30(0xc4a)]=function(){const _0xa126ac=_0x10ff30;return this[_0xa126ac(0x270)]&&this[_0xa126ac(0x270)][_0xa126ac(0xc4a)]();},Sprite_Enemy[_0x10ff30(0xb0c)]['allowCollapse']=function(){const _0x3490a4=_0x10ff30;return this[_0x3490a4(0xc4a)]()?this[_0x3490a4(0x270)][_0x3490a4(0x9e1)]():!![];},Sprite_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0x97b)]=function(){const _0x5d7c1e=_0x10ff30;this[_0x5d7c1e(0xc4a)]()&&this[_0x5d7c1e(0x408)][_0x5d7c1e(0x97b)]();},Sprite_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0xa5f)]=function(_0x455a13){const _0x1fa1da=_0x10ff30;if(this['hasSvBattler']())this[_0x1fa1da(0x408)][_0x1fa1da(0xa5f)](_0x455a13);},Sprite_Enemy[_0x10ff30(0xb0c)][_0x10ff30(0x6ae)]=function(_0x37d138){const _0x10b488=_0x10ff30;if(this[_0x10b488(0xc4a)]())this[_0x10b488(0x408)][_0x10b488(0x6ae)](_0x37d138);},Sprite_Enemy[_0x10ff30(0xb0c)]['stepForward']=function(){const _0x30ebb3=_0x10ff30,_0x29b26e=VisuMZ[_0x30ebb3(0x95b)][_0x30ebb3(0x928)][_0x30ebb3(0x617)],_0xc8eca3=_0x29b26e[_0x30ebb3(0x99f)],_0x2ed8ac=_0x29b26e[_0x30ebb3(0x632)],_0x4bff84=_0x29b26e['StepDuration'];this['startMove'](_0xc8eca3,_0x2ed8ac,_0x4bff84);};function Sprite_SvEnemy(){const _0x5b03fe=_0x10ff30;this[_0x5b03fe(0x600)](...arguments);}Sprite_SvEnemy[_0x10ff30(0xb0c)]=Object[_0x10ff30(0x93b)](Sprite_Actor['prototype']),Sprite_SvEnemy[_0x10ff30(0xb0c)][_0x10ff30(0x602)]=Sprite_SvEnemy,Sprite_SvEnemy['prototype'][_0x10ff30(0x600)]=function(_0x2041ee){const _0x444749=_0x10ff30;Sprite_Actor['prototype'][_0x444749(0x600)]['call'](this,_0x2041ee),this[_0x444749(0x808)]['x']=-0x1,this['_stateSprite'][_0x444749(0x808)]['x']=-0x1;},Sprite_SvEnemy[_0x10ff30(0xb0c)][_0x10ff30(0x8a5)]=function(){},Sprite_SvEnemy['prototype']['moveToStartPosition']=function(){},Sprite_SvEnemy['prototype']['setActorHome']=function(_0x575d08){},Sprite_SvEnemy[_0x10ff30(0xb0c)][_0x10ff30(0x8fb)]=function(){},Sprite_SvEnemy[_0x10ff30(0xb0c)]['updateShadowPosition']=function(){},Sprite_SvEnemy[_0x10ff30(0xb0c)][_0x10ff30(0x35e)]=function(){const _0x5c6a7e=_0x10ff30;this[_0x5c6a7e(0x7cc)][_0x5c6a7e(0x905)]=![];},Sprite_SvEnemy[_0x10ff30(0xb0c)]['updateBitmap']=function(){const _0x49f4f4=_0x10ff30;Sprite_Battler[_0x49f4f4(0xb0c)]['updateBitmap'][_0x49f4f4(0xb96)](this);const _0x46580c=this[_0x49f4f4(0x4e8)][_0x49f4f4(0xaa4)]();this[_0x49f4f4(0x611)]!==_0x46580c&&(this[_0x49f4f4(0x611)]=_0x46580c,this[_0x49f4f4(0x6ca)]['bitmap']=ImageManager[_0x49f4f4(0x4de)](_0x46580c));if(this[_0x49f4f4(0x6ca)]&&this[_0x49f4f4(0x6ca)][_0x49f4f4(0xc87)]&&this[_0x49f4f4(0xb4f)]){if(_0x49f4f4(0x1ee)!=='IESNC'){const _0x4ec39d=_0x5e145c[_0x49f4f4(0x3e5)](this['item']()),_0x4d98c6=_0x477b48[_0x49f4f4(0x560)][_0x4ec39d];try{return _0x4d98c6[_0x49f4f4(0x40c)][_0x49f4f4(0xb96)](this,_0x176831);}catch(_0x34c825){if(_0x50cd25[_0x49f4f4(0x21d)]())_0x1475ef[_0x49f4f4(0x262)](_0x34c825);return _0x347163[_0x49f4f4(0x95b)][_0x49f4f4(0x6ec)]['call'](this);}}else this[_0x49f4f4(0x6ca)][_0x49f4f4(0xc87)]['smooth']!==this[_0x49f4f4(0xb4f)][_0x49f4f4(0x79c)]()&&(this[_0x49f4f4(0x6ca)][_0x49f4f4(0xc87)][_0x49f4f4(0x533)]=this[_0x49f4f4(0xb4f)][_0x49f4f4(0x79c)]());}},Sprite_SvEnemy['prototype'][_0x10ff30(0x8df)]=function(){},Sprite_SvEnemy[_0x10ff30(0xb0c)][_0x10ff30(0xb17)]=function(_0x1df607,_0x1b6424,_0x430b66){const _0x5ccd31=_0x10ff30;if(this[_0x5ccd31(0x2e0)])this['parent'][_0x5ccd31(0xb17)](_0x1df607,_0x1b6424,_0x430b66);},Sprite_SvEnemy[_0x10ff30(0xb0c)][_0x10ff30(0x97b)]=function(){const _0x2872cd=_0x10ff30,_0xb4dd18=this[_0x2872cd(0x4e8)];if(_0xb4dd18){if(_0x2872cd(0xbe9)!==_0x2872cd(0x70c)){const _0x1697aa=_0xb4dd18[_0x2872cd(0x7b9)]();if(_0xb4dd18[_0x2872cd(0x817)]()||_0xb4dd18['isActing']()){if('xYAKV'==='xYAKV')this[_0x2872cd(0x430)]('walk');else{if(_0xfe174b['createKeyJS'])return _0x3a9689[_0x2872cd(0x613)](_0x100e15,_0x285bfe);let _0x6ae279='';if(_0x3603e3[_0x2872cd(0x778)](_0x4c4247))_0x6ae279=_0x2872cd(0xcc0)['format'](_0x2b0da1['id'],_0x1b7e2a);if(_0x4a8cc0[_0x2872cd(0x778)](_0x55f63f))_0x6ae279=_0x2872cd(0x8fe)['format'](_0x2ac6ca['id'],_0x1622ac);if(_0xd1c21f[_0x2872cd(0x778)](_0x2df03e))_0x6ae279=_0x2872cd(0x404)[_0x2872cd(0x958)](_0x14c608['id'],_0x2f54d6);if(_0x261e80[_0x2872cd(0x778)](_0x38a2cb))_0x6ae279=_0x2872cd(0x5b6)['format'](_0x1ee73e['id'],_0x497d62);if(_0x101b80[_0x2872cd(0x778)](_0x24b686))_0x6ae279=_0x2872cd(0x4a2)[_0x2872cd(0x958)](_0x378d38['id'],_0x1e4130);if(_0x14aa61[_0x2872cd(0x778)](_0x17fc94))_0x6ae279='Armor-%1-%2'['format'](_0xafbef8['id'],_0x20be1a);if(_0x1b4a64[_0x2872cd(0x778)](_0xc72014))_0x6ae279=_0x2872cd(0x8d2)[_0x2872cd(0x958)](_0x39d1ee['id'],_0x4e9a69);if(_0x70e06b[_0x2872cd(0x778)](_0x2eac3f))_0x6ae279=_0x2872cd(0x88e)[_0x2872cd(0x958)](_0x4d8e75['id'],_0xf3e5b7);return _0x6ae279;}}else{if(_0x1697aa===0x3)this[_0x2872cd(0x430)](_0x2872cd(0x379));else{if(_0x1697aa===0x2)this[_0x2872cd(0x430)](_0x2872cd(0x251));else{if(_0xb4dd18[_0x2872cd(0x805)]())'EbzHr'===_0x2872cd(0xc10)?_0x461a3f['actionBattleCoreJS']('PreEndActionJS'):this[_0x2872cd(0x430)]('chant');else{if(_0xb4dd18[_0x2872cd(0x523)]()||_0xb4dd18[_0x2872cd(0x46d)]())_0x2872cd(0x534)!==_0x2872cd(0xb3d)?this[_0x2872cd(0x430)](_0x2872cd(0x867)):this[_0x2872cd(0x430)](_0x2872cd(0x646));else{if(_0x1697aa===0x1)_0x2872cd(0xac4)===_0x2872cd(0xb1c)?(!this[_0x2872cd(0x408)]&&(this[_0x2872cd(0x408)]=new _0x5196ac(_0x299a33),this[_0x2872cd(0xbb8)]()),this[_0x2872cd(0x408)][_0x2872cd(0x56b)](_0x1de90d)):this[_0x2872cd(0x430)](_0x2872cd(0xb44));else{if(_0xb4dd18[_0x2872cd(0x8ef)]())this[_0x2872cd(0x430)](_0x2872cd(0x7f3));else _0xb4dd18[_0x2872cd(0x305)]()?this[_0x2872cd(0x430)](_0x2872cd(0x646)):this['startMotion'](_0xb4dd18[_0x2872cd(0x8db)]()[_0x2872cd(0x558)]||'walk');}}}}}}}else{if(_0x513f49[_0x2872cd(0xb4f)][_0x2872cd(0x58a)]()&&_0x3adad7[_0x2872cd(0xb4f)]['isEnemy']())return 0x1;else{if(_0x3e34e1[_0x2872cd(0xb4f)][_0x2872cd(0x58a)]()&&_0x488d1d[_0x2872cd(0xb4f)][_0x2872cd(0xccb)]())return-0x1;}}}},Sprite_SvEnemy['prototype']['inHomePosition']=function(){const _0x33d59d=_0x10ff30;if(this[_0x33d59d(0x2e0)]){if(_0x33d59d(0x4d5)===_0x33d59d(0x4d5))return this[_0x33d59d(0x2e0)][_0x33d59d(0xb7e)]===0x0&&this['parent'][_0x33d59d(0xa12)]===0x0;else _0x50951f--,_0x2dfd95++;}else return!![];},Sprite_SvEnemy[_0x10ff30(0xb0c)][_0x10ff30(0x522)]=function(){},VisuMZ[_0x10ff30(0x95b)]['Sprite_Animation_targetSpritePosition']=Sprite_Animation[_0x10ff30(0xb0c)][_0x10ff30(0x7f9)],Sprite_Animation[_0x10ff30(0xb0c)]['targetSpritePosition']=function(_0x25699e){const _0x4c6e8f=_0x10ff30;if(_0x25699e['_distortionSprite']){if(_0x4c6e8f(0xc36)==='ZKIWE')return this['targetDistortionSpritePosition'](_0x25699e);else{const _0x46c8c9=this['battler']();_0x46c8c9&&(_0x46c8c9[_0x4c6e8f(0xa5f)](_0xf517ce),[_0x4c6e8f(0x762),_0x4c6e8f(0x757),_0x4c6e8f(0x417)][_0x4c6e8f(0x778)](_0x4c7546)&&this[_0x4c6e8f(0x807)]());}}else{if('YQslC'===_0x4c6e8f(0x1cd))return VisuMZ[_0x4c6e8f(0x95b)]['Sprite_Animation_targetSpritePosition'][_0x4c6e8f(0xb96)](this,_0x25699e);else{const _0x227dd=_0x23344c[0x0]['format'](_0x5bb611[0x0]),_0x4cd6ee=_0x294bda[0x1]['format'](_0x5f2221[0x1]),_0x345be7=new _0x8ae89c(_0xfb11b3[_0x4c6e8f(0x958)](_0x4cd6ee),'i');_0x5db8de[_0x227dd]=_0x345be7;}}},Sprite_Animation['prototype'][_0x10ff30(0x89e)]=function(_0x148218){const _0x3443ed=_0x10ff30;let _0xc2a88b=_0x148218['x'],_0x20badd=_0x148218['y'],_0x541351=_0x148218[_0x3443ed(0x956)],_0xe00f81=_0x148218[_0x3443ed(0xa8f)][_0x3443ed(0x808)]['y'];_0x148218['x']=_0x148218['_baseX']+_0x148218['extraPositionX'](),_0x148218['y']=_0x148218['_baseY']+_0x148218[_0x3443ed(0x6c3)](),_0x148218[_0x3443ed(0x956)]*=_0xe00f81;let _0xc8d21e=VisuMZ['BattleCore'][_0x3443ed(0x771)]['call'](this,_0x148218);return _0x148218['x']=_0xc2a88b,_0x148218['y']=_0x20badd,_0x148218[_0x3443ed(0x956)]=_0x541351,_0xc8d21e;},VisuMZ[_0x10ff30(0x95b)]['Sprite_AnimationMV_updatePosition']=Sprite_AnimationMV['prototype'][_0x10ff30(0x8b0)],Sprite_AnimationMV['prototype'][_0x10ff30(0x8b0)]=function(){const _0x179796=_0x10ff30;VisuMZ[_0x179796(0x95b)][_0x179796(0x9dc)][_0x179796(0xb96)](this);if(this['_animation']['position']===0x3){if(this['x']===0x0)this['x']=Math[_0x179796(0x556)](Graphics[_0x179796(0x7b2)]/0x2);if(this['y']===0x0)this['y']=Math[_0x179796(0x556)](Graphics['height']/0x2);}else{if(this[_0x179796(0x8b7)])return;const _0x21d4ea=(Imported[_0x179796(0xa8d)]?VisuMZ[_0x179796(0x989)]['Settings']['UI']['BoxMargin']:0x4)*0x2,_0x408227=(Graphics[_0x179796(0x7b2)]-(Graphics[_0x179796(0xb97)]+_0x21d4ea))/0x2;if(_0x408227!==0x0)this['x']+=_0x408227;}},Sprite_Damage['prototype'][_0x10ff30(0x822)]=function(_0xffbde6){const _0x543ee8=_0x10ff30,_0x3bb1f6=_0xffbde6['getNextDamagePopup']()||_0xffbde6['result']();if(_0x3bb1f6['missed']||_0x3bb1f6[_0x543ee8(0xcc3)]){if(_0x543ee8(0xca7)!==_0x543ee8(0x54f))this['_colorType']=0x0,this[_0x543ee8(0x739)]();else return this[_0x543ee8(0xca2)]();}else{if(_0x3bb1f6[_0x543ee8(0x6b3)]){if(_0x543ee8(0xb33)==='BussZ')this['_colorType']=_0x3bb1f6[_0x543ee8(0x2e4)]>=0x0?0x0:0x1,this['createDigits'](_0x3bb1f6[_0x543ee8(0x2e4)]);else{if(!_0x2d8169[_0x543ee8(0xa47)])return;const _0x3e6cf5=_0x27696e[_0x543ee8(0x2df)]['_spriteset'];if(!_0x3e6cf5)return;if(_0x59c462[_0x543ee8(0xa89)][_0x543ee8(0x994)]<=1.04){_0x7ae3c(_0x543ee8(0x467)),_0x2aff8e[_0x543ee8(0xa8c)]();return;}_0x44e8c6[_0x543ee8(0xb1e)](_0x2792b3,_0x4c8d8b);const _0x4a9435=_0x421747[_0x543ee8(0x8f6)];_0x3e6cf5['setupDesaturateImpactFilter'](_0x4a9435);}}else _0xffbde6[_0x543ee8(0x355)]()&&_0x3bb1f6[_0x543ee8(0x571)]!==0x0&&(this[_0x543ee8(0xc01)]=_0x3bb1f6['mpDamage']>=0x0?0x2:0x3,this[_0x543ee8(0x4d4)](_0x3bb1f6[_0x543ee8(0x571)]));}if(_0x3bb1f6[_0x543ee8(0x829)]){if('fmkCw'!==_0x543ee8(0xca4))this[_0x543ee8(0x5a9)]();else{const _0x20dd8a=_0x2a8116(_0x398f06['$1'])[_0x543ee8(0x6a3)](),_0x2a1855=_0x31a222(_0x38c723['$2']);_0x2894d1[_0x20dd8a]=_0x2a1855,_0x33d185+=_0x2a1855;}}},Sprite_Damage[_0x10ff30(0xb0c)][_0x10ff30(0x542)]=function(_0x5a944f){},Sprite_Damage[_0x10ff30(0xb0c)][_0x10ff30(0x4d4)]=function(_0x3922f3){const _0x452f07=_0x10ff30;let _0x5c8ad6=this[_0x452f07(0x5a8)](_0x3922f3);const _0x164f03=this[_0x452f07(0x206)](),_0x3a5e06=Math[_0x452f07(0xcce)](_0x164f03*0.75);for(let _0x366757=0x0;_0x366757<_0x5c8ad6[_0x452f07(0x449)];_0x366757++){const _0x383cc1=this[_0x452f07(0x931)](_0x3a5e06,_0x164f03);_0x383cc1[_0x452f07(0xc87)][_0x452f07(0x24a)](_0x5c8ad6[_0x366757],0x0,0x0,_0x3a5e06,_0x164f03,_0x452f07(0x4e3)),_0x383cc1['x']=(_0x366757-(_0x5c8ad6[_0x452f07(0x449)]-0x1)/0x2)*_0x3a5e06,_0x383cc1['dy']=-_0x366757;}},Sprite_Damage[_0x10ff30(0xb0c)][_0x10ff30(0x5a8)]=function(_0x47bf9e){const _0x5ef0ae=_0x10ff30;let _0x421e10=Math[_0x5ef0ae(0x614)](_0x47bf9e)['toString']();if(this[_0x5ef0ae(0x733)]()){if(_0x5ef0ae(0x7ec)!==_0x5ef0ae(0x7ec))return _0x440ce7[_0x5ef0ae(0x95b)]['Settings']['Damage'][_0x5ef0ae(0xbb4)][_0x5ef0ae(0xb96)](this,_0x659277,_0x16d299);else _0x421e10=VisuMZ[_0x5ef0ae(0x33d)](_0x421e10);}const _0x22d343=VisuMZ[_0x5ef0ae(0x95b)]['Settings']['Damage'];let _0x2fa68d='',_0x4188cb='';switch(this['_colorType']){case 0x0:_0x2fa68d=_0x22d343[_0x5ef0ae(0xaac)]||_0x5ef0ae(0x367),_0x4188cb=TextManager['hp'];if(_0x47bf9e===0x0)_0x2fa68d='%1';break;case 0x1:_0x2fa68d=_0x22d343[_0x5ef0ae(0x525)]||_0x5ef0ae(0xcb4),_0x4188cb=TextManager['hp'];break;case 0x2:_0x2fa68d=_0x22d343[_0x5ef0ae(0x7c7)]||_0x5ef0ae(0xaeb),_0x4188cb=TextManager['mp'];break;case 0x3:_0x2fa68d=_0x22d343['mpHealingFmt']||_0x5ef0ae(0x8e7),_0x4188cb=TextManager['mp'];break;}return _0x2fa68d[_0x5ef0ae(0x958)](_0x421e10,_0x4188cb)[_0x5ef0ae(0x6a3)]();},Sprite_Damage['prototype'][_0x10ff30(0x733)]=function(){const _0x27a58e=_0x10ff30;return Imported['VisuMZ_0_CoreEngine']?VisuMZ['CoreEngine'][_0x27a58e(0x928)][_0x27a58e(0x3fa)][_0x27a58e(0xc9b)]:![];},Sprite_Damage['prototype'][_0x10ff30(0x5a9)]=function(){const _0x442b76=_0x10ff30,_0x2e2f5a=VisuMZ[_0x442b76(0x95b)][_0x442b76(0x928)][_0x442b76(0x9f9)];this[_0x442b76(0x2a7)]=_0x2e2f5a[_0x442b76(0x3dd)][_0x442b76(0x73e)](0x0),this[_0x442b76(0x6c7)]=_0x2e2f5a['CriticalDuration'];},Sprite_Damage['prototype'][_0x10ff30(0x1ca)]=function(_0x55f1c4,_0x4909b9){const _0x26ab60=_0x10ff30;this[_0x26ab60(0x2a7)]=_0x4909b9[_0x26ab60(0x454)]||[0x0,0x0,0x0,0x0],this[_0x26ab60(0x2a7)]=JsonEx[_0x26ab60(0x6ab)](this['_flashColor']),this[_0x26ab60(0x6c7)]=_0x4909b9['flashDuration']||0x0;const _0x3d56ff=this[_0x26ab60(0x206)](),_0x2b43bb=Math['floor'](_0x3d56ff*0x1e),_0x980974=this[_0x26ab60(0x931)](_0x2b43bb,_0x3d56ff);_0x980974[_0x26ab60(0xc87)][_0x26ab60(0x65e)]=ColorManager[_0x26ab60(0x6dc)](_0x4909b9[_0x26ab60(0x65e)]),_0x980974[_0x26ab60(0xc87)][_0x26ab60(0x24a)](_0x55f1c4,0x0,0x0,_0x2b43bb,_0x3d56ff,'center'),_0x980974['dy']=0x0;},Sprite_Damage[_0x10ff30(0xb0c)][_0x10ff30(0x211)]=function(_0x123b92,_0x3ef2e1,_0x1bada2){const _0x31a8e0=_0x10ff30,_0x232b11=Math[_0x31a8e0(0x909)](this[_0x31a8e0(0x206)](),ImageManager[_0x31a8e0(0x282)]),_0x2c8c36=Math[_0x31a8e0(0xcce)](_0x232b11*0x1e),_0x1189ff=this['createChildSprite'](_0x2c8c36,_0x232b11),_0xb84d81=ImageManager[_0x31a8e0(0x824)]/0x2,_0xe732e5=_0x1189ff[_0x31a8e0(0xc87)][_0x31a8e0(0x727)](_0x3ef2e1+'\x20');_0x1189ff[_0x31a8e0(0xc87)][_0x31a8e0(0x65e)]=ColorManager[_0x31a8e0(0x6dc)](_0x1bada2[_0x31a8e0(0x65e)]),_0x1189ff[_0x31a8e0(0xc87)][_0x31a8e0(0x24a)](_0x3ef2e1,_0xb84d81,0x0,_0x2c8c36-_0xb84d81,_0x232b11,'center');const _0x13a39d=Math[_0x31a8e0(0x556)]((_0x232b11-ImageManager[_0x31a8e0(0x282)])/0x2),_0x4cb47b=_0x2c8c36/0x2-ImageManager[_0x31a8e0(0x824)]-_0xe732e5/0x2+_0xb84d81/0x2,_0x48d5ce=ImageManager[_0x31a8e0(0xa97)](_0x31a8e0(0x642)),_0x2309a5=ImageManager[_0x31a8e0(0x824)],_0x3ff7a6=ImageManager[_0x31a8e0(0x282)],_0x5521c1=_0x123b92%0x10*_0x2309a5,_0x4079f3=Math[_0x31a8e0(0xcce)](_0x123b92/0x10)*_0x3ff7a6;_0x1189ff['bitmap'][_0x31a8e0(0x7df)](_0x48d5ce,_0x5521c1,_0x4079f3,_0x2309a5,_0x3ff7a6,_0x4cb47b,_0x13a39d),this[_0x31a8e0(0x2a7)]=_0x1bada2[_0x31a8e0(0x454)]||[0x0,0x0,0x0,0x0],this[_0x31a8e0(0x2a7)]=JsonEx[_0x31a8e0(0x6ab)](this['_flashColor']),this['_flashDuration']=_0x1bada2[_0x31a8e0(0x5d0)]||0x0,_0x1189ff['dy']=0x0;},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x648)]=Sprite_Damage['prototype']['createChildSprite'],Sprite_Damage[_0x10ff30(0xb0c)]['createChildSprite']=function(_0x2e65f3,_0x3f1153){const _0x4f2b27=_0x10ff30;return _0x3f1153=Math[_0x4f2b27(0x556)](_0x3f1153*1.2),VisuMZ[_0x4f2b27(0x95b)]['Sprite_Damage_createChildSprite'][_0x4f2b27(0xb96)](this,_0x2e65f3,_0x3f1153);},VisuMZ[_0x10ff30(0x95b)]['Sprite_StateIcon_updateFrame']=Sprite_StateIcon[_0x10ff30(0xb0c)][_0x10ff30(0x685)],Sprite_StateIcon[_0x10ff30(0xb0c)]['updateFrame']=function(){const _0x412d23=_0x10ff30;VisuMZ[_0x412d23(0x95b)][_0x412d23(0x56d)]['call'](this),this[_0x412d23(0x443)]=this[_0x412d23(0x5f2)]>0x0?0xff:0x0;},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x6ac)]=Sprite_Weapon[_0x10ff30(0xb0c)][_0x10ff30(0x4c7)],Sprite_Weapon['prototype'][_0x10ff30(0x4c7)]=function(){const _0x1ba6e3=_0x10ff30;VisuMZ['BattleCore'][_0x1ba6e3(0x6ac)]['call'](this),this[_0x1ba6e3(0xc87)]&&(_0x1ba6e3(0x8f8)===_0x1ba6e3(0x720)?this[_0x1ba6e3(0x843)]()&&this[_0x1ba6e3(0x843)]()['refreshMotion']():this[_0x1ba6e3(0xc87)]['smooth']=VisuMZ[_0x1ba6e3(0x95b)][_0x1ba6e3(0x928)][_0x1ba6e3(0x25e)][_0x1ba6e3(0xb8d)]);};function Sprite_HpGauge(){const _0x535ec0=_0x10ff30;this[_0x535ec0(0x600)](...arguments);}Sprite_HpGauge[_0x10ff30(0xb0c)]=Object[_0x10ff30(0x93b)](Sprite_Gauge['prototype']),Sprite_HpGauge[_0x10ff30(0xb0c)][_0x10ff30(0x602)]=Sprite_HpGauge,Sprite_HpGauge[_0x10ff30(0xb0c)][_0x10ff30(0x600)]=function(){const _0x26d6d9=_0x10ff30;Sprite_Gauge[_0x26d6d9(0xb0c)][_0x26d6d9(0x600)][_0x26d6d9(0xb96)](this);},Sprite_HpGauge['prototype'][_0x10ff30(0xa00)]=function(){return 0x0;},Sprite_HpGauge[_0x10ff30(0xb0c)][_0x10ff30(0x8ae)]=function(){const _0x367f62=_0x10ff30;this[_0x367f62(0xc87)][_0x367f62(0xb10)]();const _0x296c53=this[_0x367f62(0x69a)]();!isNaN(_0x296c53)&&this[_0x367f62(0xaa6)]();};function Sprite_EnemyName(){const _0x53fa90=_0x10ff30;this[_0x53fa90(0x600)](...arguments);}Sprite_EnemyName[_0x10ff30(0xb0c)]=Object[_0x10ff30(0x93b)](Sprite_Name[_0x10ff30(0xb0c)]),Sprite_EnemyName[_0x10ff30(0xb0c)][_0x10ff30(0x602)]=Sprite_EnemyName,Sprite_EnemyName[_0x10ff30(0xb0c)]['initialize']=function(){const _0x423248=_0x10ff30;Sprite_Name[_0x423248(0xb0c)][_0x423248(0x600)]['call'](this),this[_0x423248(0x8e2)]();},Sprite_EnemyName[_0x10ff30(0xb0c)][_0x10ff30(0x6c8)]=function(){const _0x21bb78=_0x10ff30;Sprite_Name[_0x21bb78(0xb0c)]['initMembers'][_0x21bb78(0xb96)](this),this[_0x21bb78(0x443)]=0x0,this[_0x21bb78(0x7cf)]=null,this['anchor']['x']=0.5,this[_0x21bb78(0x8eb)]['y']=0x0;},Sprite_EnemyName[_0x10ff30(0xb0c)]['createAttachedSprites']=function(){const _0x383d2e=_0x10ff30;VisuMZ[_0x383d2e(0x95b)][_0x383d2e(0x928)]['Enemy'][_0x383d2e(0x255)]&&(this['_stateIconSprite']=new Sprite_StateIcon(),this['addChild'](this[_0x383d2e(0xaa7)]));},Sprite_EnemyName[_0x10ff30(0xb0c)][_0x10ff30(0xa79)]=function(){return Graphics['boxWidth'];},Sprite_EnemyName[_0x10ff30(0xb0c)]['bitmapHeight']=function(){const _0x1ee748=_0x10ff30;return this['_lineHeight']=this[_0x1ee748(0xaab)]||Window_Base[_0x1ee748(0xb0c)][_0x1ee748(0x257)]()||0x24,this[_0x1ee748(0xaab)]*0x4;},Sprite_EnemyName[_0x10ff30(0xb0c)][_0x10ff30(0x206)]=function(){const _0x400152=_0x10ff30;return VisuMZ[_0x400152(0x95b)][_0x400152(0x928)][_0x400152(0x2ec)][_0x400152(0x4c9)]||$gameSystem['mainFontSize']();},Sprite_EnemyName[_0x10ff30(0xb0c)]['linkSprite']=function(_0x5aca45){this['_linkedSprite']=_0x5aca45;},Sprite_EnemyName[_0x10ff30(0xb0c)][_0x10ff30(0x78d)]=function(){const _0x1ea4de=_0x10ff30;Sprite_Name[_0x1ea4de(0xb0c)]['update']['call'](this),this[_0x1ea4de(0x901)](),this[_0x1ea4de(0x8b0)](),this[_0x1ea4de(0x337)](),this[_0x1ea4de(0x5c0)]();},Sprite_EnemyName[_0x10ff30(0xb0c)]['redraw']=function(){const _0x40975b=_0x10ff30;this['_cacheTextWidth']=undefined;const _0x47f9c2=this['name'](),_0x483280=this[_0x40975b(0xa79)](),_0x4ecb5a=Window_Base[_0x40975b(0xb0c)]['lineHeight']();this['setupFont'](),this[_0x40975b(0xc87)][_0x40975b(0xb10)](),this[_0x40975b(0xc87)]['drawText'](_0x47f9c2,0x0,0x0,_0x483280,_0x4ecb5a,_0x40975b(0x4e3));},Sprite_EnemyName[_0x10ff30(0xb0c)][_0x10ff30(0x901)]=function(){const _0x27911a=_0x10ff30;if(!this[_0x27911a(0x7cf)])return;this['_battler']!==this[_0x27911a(0x7cf)][_0x27911a(0xb4f)]&&this['setup'](this[_0x27911a(0x7cf)][_0x27911a(0xb4f)]);},Sprite_EnemyName['prototype'][_0x10ff30(0x8b0)]=function(){const _0x1feba0=_0x10ff30;if(!this[_0x1feba0(0x7cf)])return;this[_0x1feba0(0xaab)]=this[_0x1feba0(0xaab)]||Window_Base[_0x1feba0(0xb0c)][_0x1feba0(0x257)](),this['x']=Math['round'](this[_0x1feba0(0x7cf)][_0x1feba0(0xa75)]),this['y']=Math['round'](this['_linkedSprite']['_baseY']-this[_0x1feba0(0xaab)]*0.5);const _0x3f71cc=VisuMZ['BattleCore'][_0x1feba0(0x928)]['Enemy'];this['x']+=Math[_0x1feba0(0x556)](_0x3f71cc[_0x1feba0(0x289)]||0x0),this['y']+=Math[_0x1feba0(0x556)](_0x3f71cc[_0x1feba0(0x95c)]||0x0);},Sprite_EnemyName['prototype'][_0x10ff30(0x337)]=function(){this['updateStateIconSprite']();},Sprite_EnemyName[_0x10ff30(0xb0c)][_0x10ff30(0x228)]=function(){const _0x43fa6c=_0x10ff30;if(!this[_0x43fa6c(0xaa7)])return;this[_0x43fa6c(0xb4f)]!==this[_0x43fa6c(0xaa7)]['_battler']&&(_0x43fa6c(0x4b1)!=='UYPDW'?this[_0x43fa6c(0xaa7)]['setup'](this['_battler']):(_0x517b72=_0x57b9ce['width']/_0x1e088b['battleMembers']()[_0x43fa6c(0x449)],_0x4efa67*=_0x70983b,_0x29a6c5+=_0x49f0ba['width']/_0x35fb19[_0x43fa6c(0xb03)]()[_0x43fa6c(0x449)]/0x2));const _0x3f1a08=this['textWidth']();this[_0x43fa6c(0xaab)]=this[_0x43fa6c(0xaab)]||Window_Base[_0x43fa6c(0xb0c)][_0x43fa6c(0x257)](),this[_0x43fa6c(0xaa7)]['x']=Math[_0x43fa6c(0x556)]((_0x3f1a08+ImageManager['iconWidth'])/0x2)+0x8,this[_0x43fa6c(0xaa7)]['y']=this[_0x43fa6c(0xaab)]/0x2;const _0x1b13ea=VisuMZ[_0x43fa6c(0x95b)][_0x43fa6c(0x928)]['Enemy'];this[_0x43fa6c(0xaa7)]['x']+=_0x1b13ea['AttachStateOffsetX']||0x0,this[_0x43fa6c(0xaa7)]['y']+=_0x1b13ea[_0x43fa6c(0x9da)]||0x0;},Sprite_EnemyName['prototype'][_0x10ff30(0x5c0)]=function(){const _0x3a5ed7=_0x10ff30,_0x444405=this['visibilityState']();if(_0x444405&&this[_0x3a5ed7(0x443)]<0xff)this[_0x3a5ed7(0x443)]+=0x10;else{if(!_0x444405&&this[_0x3a5ed7(0x443)]>0x0){if(_0x3a5ed7(0x564)===_0x3a5ed7(0x665))return _0x52112a[_0x3a5ed7(0x95b)]['Window_ItemList_maxCols']['call'](this);else this[_0x3a5ed7(0x443)]-=0x10;}}},Sprite_EnemyName[_0x10ff30(0xb0c)][_0x10ff30(0x29f)]=function(){const _0x4243f2=_0x10ff30;if(this[_0x4243f2(0x9ed)]())return![];else{if(!this['_battler'])return![];else{if(this[_0x4243f2(0xb4f)][_0x4243f2(0x472)]())return![];else{if(!this[_0x4243f2(0xb4f)][_0x4243f2(0xaf9)]())return![];else{if(this[_0x4243f2(0x6e0)]())return!![];else{if(this[_0x4243f2(0x521)]())return!![];else{if(this['isIncludedInEnemyWindow']()){if('XinUo'!==_0x4243f2(0x9b0))return!![];else _0x537ad4[_0x4243f2(0x95b)]['Game_Battler_forceAction'][_0x4243f2(0xb96)](this,_0x22e407,_0x4c346),this[_0x4243f2(0x8cf)][this[_0x4243f2(0x8cf)]['length']-0x1][_0x4243f2(0x4ae)]=!![];}else{if(this[_0x4243f2(0x443)]>0x0)return![];}}}}}}}},Sprite_EnemyName[_0x10ff30(0xb0c)][_0x10ff30(0x9ed)]=function(){const _0xc2d939=_0x10ff30;return VisuMZ[_0xc2d939(0x95b)][_0xc2d939(0x928)]['Enemy'][_0xc2d939(0x9ae)];},Sprite_EnemyName[_0x10ff30(0xb0c)][_0x10ff30(0x6e0)]=function(){return![];},Sprite_EnemyName[_0x10ff30(0xb0c)][_0x10ff30(0x521)]=function(){const _0x1cf381=_0x10ff30;return VisuMZ[_0x1cf381(0x95b)][_0x1cf381(0x928)][_0x1cf381(0x2ec)][_0x1cf381(0x32a)];},Sprite_EnemyName[_0x10ff30(0xb0c)][_0x10ff30(0x9aa)]=function(){const _0x3cb88d=_0x10ff30;return VisuMZ['BattleCore'][_0x3cb88d(0x928)][_0x3cb88d(0x2ec)]['NameAlwaysSelectOnly']?this['_battler'][_0x3cb88d(0x9f7)]():SceneManager[_0x3cb88d(0x2df)][_0x3cb88d(0x2cc)]&&SceneManager[_0x3cb88d(0x2df)][_0x3cb88d(0x2cc)]['active']&&SceneManager[_0x3cb88d(0x2df)][_0x3cb88d(0x2cc)][_0x3cb88d(0xb59)]['includes'](this[_0x3cb88d(0xb4f)]);},Sprite_EnemyName[_0x10ff30(0xb0c)][_0x10ff30(0x4e1)]=function(){const _0x3e1865=_0x10ff30;if(!this[_0x3e1865(0xb4f)])return 0x0;if(this[_0x3e1865(0x43d)])return this[_0x3e1865(0x43d)];const _0x5d9073=this[_0x3e1865(0x52f)]();return this['setupFont'](),this['_cacheTextWidth']=this[_0x3e1865(0xc87)][_0x3e1865(0x727)](_0x5d9073)||0x1,this[_0x3e1865(0x43d)];},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x7da)]=Sprite_Battleback[_0x10ff30(0xb0c)]['adjustPosition'],Sprite_Battleback[_0x10ff30(0xb0c)][_0x10ff30(0x3d5)]=function(){const _0x3e04cb=_0x10ff30,_0x1eb7fd=VisuMZ[_0x3e04cb(0x95b)][_0x3e04cb(0x928)][_0x3e04cb(0xc09)];if(!_0x1eb7fd){if(_0x3e04cb(0x554)===_0x3e04cb(0x2b1))this[_0x3e04cb(0x6ca)]['setFrame'](0x0,0x0,this[_0x3e04cb(0x6ca)]['width'],this['_effectDuration']);else return VisuMZ[_0x3e04cb(0x95b)][_0x3e04cb(0x7da)][_0x3e04cb(0xb96)](this);}const _0x4d205e=String(_0x1eb7fd[_0x3e04cb(0xa16)])||'MZ';switch(_0x4d205e){case'MZ':VisuMZ[_0x3e04cb(0x95b)][_0x3e04cb(0x7da)][_0x3e04cb(0xb96)](this);break;case _0x3e04cb(0x83a):this[_0x3e04cb(0x24e)]();break;case _0x3e04cb(0x52a):this[_0x3e04cb(0x812)]();break;case _0x3e04cb(0x868):this[_0x3e04cb(0xb3b)]();break;case'ScaleUp':this[_0x3e04cb(0x4ce)]();break;}},Sprite_Battleback[_0x10ff30(0xb0c)][_0x10ff30(0x24e)]=function(){const _0x74122b=_0x10ff30,_0x2f9ffc=VisuMZ[_0x74122b(0x95b)][_0x74122b(0x928)][_0x74122b(0xc09)];if(_0x2f9ffc&&_0x2f9ffc[_0x74122b(0x4e2)]){if(_0x74122b(0x4a0)!=='uTTVl'){const _0x311f58=_0x449754[_0x74122b(0x556)](_0x8f6742[_0x74122b(0x7b2)]/0x2),_0x33dd6a=_0x175676[_0x74122b(0x556)](_0xa72cf5['height']/0x2);_0x215842['setBattleCameraPoint'](_0x311f58,_0x33dd6a,_0x452a89[_0x74122b(0x200)],_0x1cf91f[_0x74122b(0x46c)]);}else return _0x2f9ffc[_0x74122b(0x4e2)][_0x74122b(0xb96)](this);}this['width']=Graphics['width'],this[_0x74122b(0x956)]=Graphics[_0x74122b(0x956)];const _0x1bf033=0x1;this[_0x74122b(0x808)]['x']=_0x1bf033,this[_0x74122b(0x808)]['y']=_0x1bf033,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x10ff30(0xb0c)][_0x10ff30(0x812)]=function(){const _0x1c380d=_0x10ff30,_0x3234ea=VisuMZ[_0x1c380d(0x95b)][_0x1c380d(0x928)][_0x1c380d(0xc09)];if(_0x3234ea&&_0x3234ea[_0x1c380d(0x664)]){if(_0x1c380d(0x96a)!=='mKTin')return _0x3234ea['jsScaleToFit']['call'](this);else{const _0x3c51c4=_0x47b892['BattleCore'][_0x1c380d(0x928)][_0x1c380d(0xa21)],_0x8aa07b=_0x1b3cbd[_0x1c380d(0xb0c)]['extraHeight'](),_0x3d9ba=_0x1a07f3[_0x1c380d(0xb97)]-(_0x3c51c4['CommandWidth']||0xc0),_0x3b83b5=this[_0x1c380d(0xb6b)]()+_0x8aa07b,_0x3300d4=this[_0x1c380d(0xa73)]()?0x0:_0x8b7f56[_0x1c380d(0xb97)]-_0x3d9ba,_0xa0e776=_0x1fd5de[_0x1c380d(0x9be)]-_0x3b83b5+_0x8aa07b;return new _0x1468ac(_0x3300d4,_0xa0e776,_0x3d9ba,_0x3b83b5);}}this[_0x1c380d(0x7b2)]=Graphics[_0x1c380d(0x7b2)],this[_0x1c380d(0x956)]=Graphics[_0x1c380d(0x956)];const _0x1d9613=this[_0x1c380d(0x7b2)]/this[_0x1c380d(0xc87)]['width'],_0x5ec571=this['height']/this['bitmap'][_0x1c380d(0x956)],_0x204f95=Math[_0x1c380d(0x909)](_0x1d9613,_0x5ec571);this[_0x1c380d(0x808)]['x']=_0x204f95,this[_0x1c380d(0x808)]['y']=_0x204f95,this['x']=(Graphics[_0x1c380d(0x7b2)]-this[_0x1c380d(0x7b2)])/0x2,this['y']=Graphics[_0x1c380d(0x956)]-this[_0x1c380d(0x956)];},Sprite_Battleback[_0x10ff30(0xb0c)][_0x10ff30(0xb3b)]=function(){const _0x48317d=_0x10ff30,_0x739bb0=VisuMZ[_0x48317d(0x95b)]['Settings'][_0x48317d(0xc09)];if(_0x739bb0&&_0x739bb0['jsScaleDown'])return _0x739bb0[_0x48317d(0x301)]['call'](this);this[_0x48317d(0x7b2)]=Graphics[_0x48317d(0x7b2)],this['height']=Graphics['height'];const _0x5499a7=Math[_0x48317d(0xa7f)](0x1,this['width']/this['bitmap'][_0x48317d(0x7b2)]),_0xf4598e=Math[_0x48317d(0xa7f)](0x1,this[_0x48317d(0x956)]/this[_0x48317d(0xc87)]['height']),_0x27ab97=Math['max'](_0x5499a7,_0xf4598e);this[_0x48317d(0x808)]['x']=_0x27ab97,this[_0x48317d(0x808)]['y']=_0x27ab97,this['x']=(Graphics[_0x48317d(0x7b2)]-this[_0x48317d(0x7b2)])/0x2,this['y']=Graphics[_0x48317d(0x956)]-this[_0x48317d(0x956)];},Sprite_Battleback['prototype'][_0x10ff30(0x4ce)]=function(){const _0x5fbfc4=_0x10ff30,_0x141ebe=VisuMZ[_0x5fbfc4(0x95b)]['Settings']['BattlebackScale'];if(_0x141ebe&&_0x141ebe[_0x5fbfc4(0x869)])return _0x141ebe[_0x5fbfc4(0x869)][_0x5fbfc4(0xb96)](this);this[_0x5fbfc4(0x7b2)]=Graphics[_0x5fbfc4(0x7b2)],this[_0x5fbfc4(0x956)]=Graphics[_0x5fbfc4(0x956)];const _0x2d015e=Math[_0x5fbfc4(0x909)](0x1,this[_0x5fbfc4(0x7b2)]/this[_0x5fbfc4(0xc87)]['width']),_0x2fd187=Math[_0x5fbfc4(0x909)](0x1,this[_0x5fbfc4(0x956)]/this[_0x5fbfc4(0xc87)][_0x5fbfc4(0x956)]),_0x8a1e41=Math[_0x5fbfc4(0x909)](_0x2d015e,_0x2fd187);this[_0x5fbfc4(0x808)]['x']=_0x8a1e41,this[_0x5fbfc4(0x808)]['y']=_0x8a1e41,this['x']=(Graphics['width']-this[_0x5fbfc4(0x7b2)])/0x2,this['y']=Graphics['height']-this['height'];},Spriteset_Battle[_0x10ff30(0x90a)]=VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x928)][_0x10ff30(0xa21)][_0x10ff30(0xad7)]??!![],Spriteset_Battle[_0x10ff30(0xb0c)][_0x10ff30(0xc13)]=function(){if(!$gameSystem['isSideView']())return![];return![];},Spriteset_Battle['prototype'][_0x10ff30(0x33a)]=function(){return 0x0;},Spriteset_Battle[_0x10ff30(0xb0c)]['animationNextDelay']=function(){return 0x0;},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xa7a)]=Spriteset_Battle[_0x10ff30(0xb0c)][_0x10ff30(0xa85)],Spriteset_Battle[_0x10ff30(0xb0c)][_0x10ff30(0xa85)]=function(){const _0x5e49c5=_0x10ff30;VisuMZ[_0x5e49c5(0x95b)][_0x5e49c5(0xa7a)][_0x5e49c5(0xb96)](this),this[_0x5e49c5(0x9a7)](),this[_0x5e49c5(0x70a)]();},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x338)]=Spriteset_Battle['prototype'][_0x10ff30(0x78d)],Spriteset_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x78d)]=function(){const _0x362ac1=_0x10ff30;VisuMZ[_0x362ac1(0x95b)][_0x362ac1(0x338)][_0x362ac1(0xb96)](this),this['updateUiContainerPosition'](),this['updateWeather']();},Spriteset_Battle['prototype'][_0x10ff30(0x9a7)]=function(){const _0x1c48f2=_0x10ff30;this[_0x1c48f2(0x7b3)]=new Weather(),this[_0x1c48f2(0x6b1)][_0x1c48f2(0x440)](this['_weather']);},Spriteset_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x31d)]=function(){const _0x5acf9e=_0x10ff30;this[_0x5acf9e(0x7b3)][_0x5acf9e(0x589)]=$gameScreen[_0x5acf9e(0xc63)](),this[_0x5acf9e(0x7b3)][_0x5acf9e(0x7b1)]=$gameScreen[_0x5acf9e(0x1e6)]();},Game_Interpreter[_0x10ff30(0xb0c)][_0x10ff30(0x5ab)]=function(_0x4882df){const _0x1809c0=_0x10ff30;$gameScreen[_0x1809c0(0x49d)](_0x4882df[0x0],_0x4882df[0x1],_0x4882df[0x2]);if(_0x4882df[0x3])this[_0x1809c0(0x1ec)](_0x4882df[0x2]);return!![];},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x1d6)]=Game_Interpreter[_0x10ff30(0xb0c)][_0x10ff30(0x3c1)],Game_Interpreter[_0x10ff30(0xb0c)][_0x10ff30(0x3c1)]=function(_0x5c4196){const _0xd5de6a=_0x10ff30;return SceneManager[_0xd5de6a(0xc1e)]()?(SceneManager[_0xd5de6a(0x2df)][_0xd5de6a(0x93a)][_0xd5de6a(0xc1d)](_0x5c4196[0x0],_0x5c4196[0x1]),!![]):VisuMZ[_0xd5de6a(0x95b)][_0xd5de6a(0x1d6)][_0xd5de6a(0xb96)](this,_0x5c4196);},Spriteset_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x23f)]=function(_0x375f89,_0x1a56ed){_0x375f89['bitmap']=_0x1a56ed;},Spriteset_Battle[_0x10ff30(0xb0c)][_0x10ff30(0xc1d)]=function(_0x3c002b,_0x4423a6){const _0x9e152c=_0x10ff30;_0x3c002b=_0x3c002b||'',_0x4423a6=_0x4423a6||'';_0x3c002b===''&&_0x4423a6===''&&(_0x3c002b=this['_back1Sprite'][_0x9e152c(0x5bc)](),_0x4423a6=this[_0x9e152c(0x346)]['battleback2Name']());const _0x577a0e=ImageManager[_0x9e152c(0x5d2)](_0x3c002b),_0x4693ae=ImageManager['loadBattleback2'](_0x4423a6);_0x577a0e[_0x9e152c(0x2ff)](this[_0x9e152c(0xc8e)][_0x9e152c(0x973)](this,this[_0x9e152c(0x1d9)],this[_0x9e152c(0x346)],_0x577a0e,_0x4693ae));},Spriteset_Battle[_0x10ff30(0xb0c)][_0x10ff30(0xc8e)]=function(_0x14cab2,_0xdd9d9b,_0x4e9502,_0x2d26db){const _0x198796=_0x10ff30;_0x2d26db[_0x198796(0x2ff)](this[_0x198796(0xace)][_0x198796(0x973)](this,_0x14cab2,_0xdd9d9b,_0x4e9502,_0x2d26db));},Spriteset_Battle[_0x10ff30(0xb0c)]['updateBattlebackBitmap2']=function(_0x1cdee4,_0x15bd78,_0x77c187,_0x45322f){const _0x5bbf60=_0x10ff30;_0x1cdee4[_0x5bbf60(0xc87)]=_0x77c187,_0x15bd78[_0x5bbf60(0xc87)]=_0x45322f,_0x1cdee4['adjustPosition'](),_0x15bd78[_0x5bbf60(0x3d5)]();},VisuMZ[_0x10ff30(0x95b)]['Spriteset_Battle_createBattleField']=Spriteset_Battle[_0x10ff30(0xb0c)]['createBattleField'],Spriteset_Battle[_0x10ff30(0xb0c)][_0x10ff30(0xb88)]=function(){const _0x31e0ac=_0x10ff30;VisuMZ[_0x31e0ac(0x95b)]['Spriteset_Battle_createBattleField'][_0x31e0ac(0xb96)](this),this['createBattleFieldBattleCore']();},Spriteset_Battle[_0x10ff30(0xb0c)]['createBattleFieldBattleCore']=function(){const _0x3f29f5=_0x10ff30;this['createBattleFieldContainer'](),this[_0x3f29f5(0x625)](),this[_0x3f29f5(0x72f)](),this[_0x3f29f5(0x939)](),this[_0x3f29f5(0x743)]();},Spriteset_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x461)]=function(){const _0x589cc4=_0x10ff30;this[_0x589cc4(0x5da)]=new Sprite(),this[_0x589cc4(0x6b1)][_0x589cc4(0x440)](this[_0x589cc4(0x5da)]);},Spriteset_Battle[_0x10ff30(0xb0c)]['createAnimationContainer']=function(){const _0x24b2ac=_0x10ff30;this[_0x24b2ac(0x2e1)]=new Sprite();if(Spriteset_Battle['ANTI_TINT_UI']){if('Uajgq'===_0x24b2ac(0x515))return this[_0x24b2ac(0x491)]();else this[_0x24b2ac(0x440)](this[_0x24b2ac(0x2e1)]);}else this[_0x24b2ac(0x6b1)][_0x24b2ac(0x440)](this[_0x24b2ac(0x2e1)]);},Spriteset_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x939)]=function(){const _0x37c4f4=_0x10ff30;this[_0x37c4f4(0x8d9)]=new Sprite(),this[_0x37c4f4(0x8d9)]['x']=this[_0x37c4f4(0x6b1)]['x'],this[_0x37c4f4(0x8d9)]['y']=this['_battleField']['y'],this[_0x37c4f4(0x440)](this[_0x37c4f4(0x8d9)]);},Spriteset_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x743)]=function(){const _0x58a80b=_0x10ff30;if(!this[_0x58a80b(0xc13)]())return;this[_0x58a80b(0x5da)][_0x58a80b(0x808)]['x']=-0x1,this[_0x58a80b(0x5da)]['x']=this[_0x58a80b(0x6b1)][_0x58a80b(0x7b2)],this[_0x58a80b(0x5b3)][_0x58a80b(0x808)]['x']=-0x1,this[_0x58a80b(0x5b3)]['x']=this[_0x58a80b(0x6b1)][_0x58a80b(0x7b2)],this[_0x58a80b(0x2e1)][_0x58a80b(0x808)]['x']=-0x1,this[_0x58a80b(0x2e1)]['x']=this[_0x58a80b(0x6b1)][_0x58a80b(0x7b2)],this['_damageContainer'][_0x58a80b(0x808)]['x']=-0x1,this['_damageContainer']['x']=this[_0x58a80b(0x6b1)]['x']+this[_0x58a80b(0x6b1)][_0x58a80b(0x7b2)];},Spriteset_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x1e3)]=function(){const _0x56e8c7=_0x10ff30;if(Imported[_0x56e8c7(0xa8d)]&&this[_0x56e8c7(0x1ef)]()){if(_0x56e8c7(0x1f9)!==_0x56e8c7(0x1f9))return this[_0x56e8c7(0x4e8)]&&this['_actor'][_0x56e8c7(0x702)]();else this['repositionEnemiesByResolution']();}const _0x92e3f0=$gameTroop['members'](),_0x4c6c14=[];for(const _0xa05d5b of _0x92e3f0){_0x4c6c14['push'](new Sprite_Enemy(_0xa05d5b));}_0x4c6c14[_0x56e8c7(0xbad)](this['compareEnemySprite'][_0x56e8c7(0x973)](this));for(const _0x4d167e of _0x4c6c14){this[_0x56e8c7(0x5da)][_0x56e8c7(0x440)](_0x4d167e);}this['_enemySprites']=_0x4c6c14;},Spriteset_Battle[_0x10ff30(0xb0c)]['createActors']=function(){const _0x57d42f=_0x10ff30;this[_0x57d42f(0x58d)]=[];for(let _0x4606d4=0x0;_0x4606d4<$gameParty['maxBattleMembers']();_0x4606d4++){const _0x47e629=$gameParty[_0x57d42f(0xb03)]()[_0x4606d4],_0x22d837=new Sprite_Actor();_0x22d837[_0x57d42f(0x79a)](_0x47e629),_0x22d837[_0x57d42f(0x56b)](_0x47e629),_0x22d837['update'](),this[_0x57d42f(0x58d)]['push'](_0x22d837),this[_0x57d42f(0x5da)][_0x57d42f(0x440)](_0x22d837);}},Spriteset_Battle['prototype'][_0x10ff30(0x780)]=function(_0x2320a3,_0x22d475,_0x911e1b,_0x31078d){const _0x2a446d=_0x10ff30,_0x3d4b72=this[_0x2a446d(0x30f)](_0x22d475),_0x99c5e6=new(_0x3d4b72?Sprite_AnimationMV:Sprite_Animation)(),_0x1b771d=this[_0x2a446d(0x722)](_0x2320a3);this[_0x2a446d(0x4f2)](_0x2320a3[0x0])&&(_0x911e1b=!_0x911e1b),_0x99c5e6[_0x2a446d(0x4d9)]=_0x2320a3,_0x99c5e6[_0x2a446d(0x542)](_0x1b771d,_0x22d475,_0x911e1b,_0x31078d),this[_0x2a446d(0xc18)](_0x99c5e6);},Spriteset_Battle[_0x10ff30(0xb0c)][_0x10ff30(0xc18)]=function(_0x54de25){const _0x47e13a=_0x10ff30;if(this[_0x47e13a(0x447)](_0x54de25)){if(_0x47e13a(0xbe0)===_0x47e13a(0xbb1)){this['_borderPortraitSprite']=new _0x46c7b6();const _0x5de2c5=_0x2bc2b9[_0x47e13a(0x2df)],_0x435407=_0x5de2c5['children'][_0x47e13a(0xbc2)](_0x5de2c5['_windowLayer']);_0x5de2c5[_0x47e13a(0x821)](this[_0x47e13a(0x83c)],_0x435407),this['_borderPortraitSprite'][_0x47e13a(0x8eb)]['x']=0.5,this['_borderPortraitSprite'][_0x47e13a(0x8eb)]['y']=0x1;const _0x519f6e=_0xceb94e[_0x47e13a(0x95b)][_0x47e13a(0x928)][_0x47e13a(0xa21)][_0x47e13a(0x77d)];this[_0x47e13a(0x83c)][_0x47e13a(0x808)]['x']=_0x519f6e,this[_0x47e13a(0x83c)][_0x47e13a(0x808)]['y']=_0x519f6e,this[_0x47e13a(0x83c)]['y']=this['y']+this[_0x47e13a(0x956)],this['_borderPortraitDuration']=0x0;}else this['battleStatusWindowAnimationContainer']()['addChild'](_0x54de25),_0x54de25[_0x47e13a(0x8b7)]=!![];}else this[_0x47e13a(0x2e1)][_0x47e13a(0x440)](_0x54de25);this['_animationSprites'][_0x47e13a(0x395)](_0x54de25);},Spriteset_Battle['prototype'][_0x10ff30(0x447)]=function(_0x1a2308){const _0x335b65=_0x10ff30;if(!_0x1a2308)return![];if(!_0x1a2308['_animation'])return![];if(!_0x1a2308[_0x335b65(0x4d9)][0x0])return![];if(_0x1a2308[_0x335b65(0x4d9)][0x0]['isActor']&&!_0x1a2308[_0x335b65(0x4d9)][0x0][_0x335b65(0x58a)]())return![];if($gameSystem[_0x335b65(0xa7c)]())return![];if(!this[_0x335b65(0x889)]())return![];if(_0x1a2308[_0x335b65(0x602)]===Sprite_Animation){if(_0x1a2308[_0x335b65(0x765)][_0x335b65(0x360)]!==0x0)return![];}else{if(_0x1a2308[_0x335b65(0x602)]===Sprite_AnimationMV){if(_0x335b65(0xae9)==='IcFZc')return!this['isTurnBased']();else{if(_0x1a2308[_0x335b65(0x765)][_0x335b65(0xb5d)]===0x3)return![];}}}return!![];const _0x13da3f=Window_BattleStatus[_0x335b65(0xb0c)][_0x335b65(0xc1b)]();return['xp',_0x335b65(0xc14)][_0x335b65(0x6d5)](_0x13da3f);},Spriteset_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x889)]=function(){const _0x3248e9=_0x10ff30;if(!SceneManager[_0x3248e9(0x2df)])return null;if(!SceneManager['_scene'][_0x3248e9(0x656)])return null;if(!SceneManager[_0x3248e9(0x2df)]['_statusWindow']['_effectsContainer'])return null;return SceneManager[_0x3248e9(0x2df)][_0x3248e9(0x656)][_0x3248e9(0x7d6)];},Spriteset_Battle['prototype'][_0x10ff30(0xab8)]=function(_0x526572){const _0x38c810=_0x10ff30;this[_0x38c810(0x5a5)](_0x526572);for(const _0x3f5e51 of _0x526572['targetObjects']){_0x3f5e51['endAnimation']&&(_0x38c810(0x788)!==_0x38c810(0x784)?_0x3f5e51[_0x38c810(0xb49)]():(_0x11cd9d[_0x38c810(0x95b)]['Window_BattleLog_performCounter'][_0x38c810(0xb96)](this,_0x3cbb8d),this[_0x38c810(0x86c)]()));}_0x526572['destroy']();},Spriteset_Battle[_0x10ff30(0xb0c)]['removeAnimationFromContainer']=function(_0x19f09d){const _0x18e591=_0x10ff30;this[_0x18e591(0x7f4)][_0x18e591(0xc04)](_0x19f09d);if(this['isAnimationShownOnBattlePortrait'](_0x19f09d))this['battleStatusWindowAnimationContainer']()[_0x18e591(0x976)](_0x19f09d);else{if(_0x18e591(0x7eb)!==_0x18e591(0x7eb)){const _0x4a8416=_0x119bc0[_0x18e591(0x8c1)](0x2)===0x0?this['opponentsUnit']():this[_0x18e591(0x72a)]();_0x2c6628['push'](_0x4a8416[_0x18e591(0x7d3)]());}else this[_0x18e591(0x2e1)][_0x18e591(0x976)](_0x19f09d);}},VisuMZ['BattleCore'][_0x10ff30(0xbae)]=Spriteset_Battle['prototype'][_0x10ff30(0xc05)],Spriteset_Battle['prototype'][_0x10ff30(0xc05)]=function(){const _0x538661=_0x10ff30;VisuMZ['BattleCore']['Spriteset_Battle_updateActors'][_0x538661(0xb96)](this),this[_0x538661(0x394)]();},Spriteset_Battle[_0x10ff30(0xb0c)]['updateBattlerContainer']=function(){const _0x4326fe=_0x10ff30;this[_0x4326fe(0x5da)][_0x4326fe(0x854)][_0x4326fe(0xbad)](this['compareBattlerSprites'][_0x4326fe(0x973)](this)),this[_0x4326fe(0x658)]();},Spriteset_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x2ea)]=function(_0x56195d,_0x19a7f9){const _0xf9f8c1=_0x10ff30;if(VisuMZ['BattleCore'][_0xf9f8c1(0x928)]['Actor'][_0xf9f8c1(0x63c)]){if(_0xf9f8c1(0x44f)==='vQHoh'){if(_0x56195d[_0xf9f8c1(0xb4f)]&&_0x19a7f9['_battler']){if('avWMM'!=='avWMM'){if(this['battleLayoutStyle']()===_0xf9f8c1(0x401))return this['skillItemWindowRectBorderStyle']();else return this[_0xf9f8c1(0x205)]()?this[_0xf9f8c1(0x67c)]():_0xf11724[_0xf9f8c1(0x95b)][_0xf9f8c1(0x65d)][_0xf9f8c1(0xb96)](this);}else{if(_0x56195d[_0xf9f8c1(0xb4f)][_0xf9f8c1(0x58a)]()&&_0x19a7f9[_0xf9f8c1(0xb4f)]['isEnemy']())return 0x1;else{if(_0x19a7f9['_battler'][_0xf9f8c1(0x58a)]()&&_0x56195d[_0xf9f8c1(0xb4f)][_0xf9f8c1(0xccb)]()){if(_0xf9f8c1(0x93f)!==_0xf9f8c1(0x2c3))return-0x1;else{const _0x52d953=_0x158cbc[_0xf9f8c1(0xcce)](_0x2e5edb['width']/0x3),_0x4c9f69=this['isRightInputMode']()?(_0x33c3be[_0xf9f8c1(0x7b2)]+_0xd085db[_0xf9f8c1(0xb97)])/0x2-_0x52d953:(_0x18d80e['width']-_0x317322[_0xf9f8c1(0xb97)])/-0x2,_0x519a80=this[_0xf9f8c1(0x50f)](),_0x40c64f=_0x519a80['y']+_0x519a80[_0xf9f8c1(0x956)],_0x26f8ef=this[_0xf9f8c1(0x9bb)](),_0x383d57=_0x26f8ef['y']-_0x40c64f;return new _0x37b350(_0x4c9f69,_0x40c64f,_0x52d953,_0x383d57);}}}}}}else _0x31919f+=_0x413e9e(_0x1397bc['$1']);}if(_0x56195d[_0xf9f8c1(0xcae)]!==_0x19a7f9[_0xf9f8c1(0xcae)]){if(_0xf9f8c1(0xa86)==='hMLvA')return _0x56195d[_0xf9f8c1(0xcae)]-_0x19a7f9[_0xf9f8c1(0xcae)];else _0x4830d7=_0x25895b;}else return _0x19a7f9[_0xf9f8c1(0x8e8)]-_0x56195d[_0xf9f8c1(0x8e8)];},Spriteset_Battle['prototype'][_0x10ff30(0x658)]=function(){const _0x5d98b4=_0x10ff30;if(!VisuMZ[_0x5d98b4(0x95b)][_0x5d98b4(0x928)]['Actor']['PrioritySortActive'])return;const _0x45c4d7=BattleManager['_subject'];if(_0x45c4d7){if(_0x5d98b4(0x627)!==_0x5d98b4(0x627))_0x33fb8b[_0x5d98b4(0x95b)]['Game_Action_setAttack']['call'](this);else{if(_0x45c4d7[_0x5d98b4(0x58a)]()&&!$gameSystem[_0x5d98b4(0xa7c)]())return;const _0x297f7b=_0x45c4d7['battler']();if(_0x297f7b&&_0x45c4d7[_0x5d98b4(0x58a)]())this[_0x5d98b4(0x5da)][_0x5d98b4(0x440)](_0x297f7b);}}},Spriteset_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x800)]=function(){const _0x249b88=_0x10ff30;for(const _0x1fc880 of $gameParty[_0x249b88(0xc07)]()){if('kiVWM'!=='hGEtW'){if(!_0x1fc880)continue;if(!_0x1fc880[_0x249b88(0x843)]())continue;_0x1fc880[_0x249b88(0x843)]()[_0x249b88(0x46e)]=!![],_0x1fc880['battler']()[_0x249b88(0x8df)]();}else{const _0x4c297e=this['context'],_0x4725ff=_0x4c297e['globalAlpha'];_0x1ad5f2=_0x5455c7||0xffffffff;let _0x10d330=_0x31abfd,_0x11caa8=_0x530fd8[_0x249b88(0x556)](_0x2f37c6+0x18/0x2+this[_0x249b88(0x206)]*0.35);_0x5ba83e===_0x249b88(0x4e3)&&(_0x10d330+=_0x1fe82c/0x2),_0x3dad33===_0x249b88(0x7a5)&&(_0x10d330+=_0x4f88c8),_0x4c297e['save'](),_0x4c297e[_0x249b88(0xa7b)]=this[_0x249b88(0x1fc)](),_0x4c297e['textAlign']=_0x693bb4,_0x4c297e[_0x249b88(0x5c6)]=_0x249b88(0x33b),_0x4c297e['globalAlpha']=0x1,this[_0x249b88(0xc71)](_0x1fa2b0,_0x10d330,_0x11caa8,_0x3f7091),_0x4c297e[_0x249b88(0x88b)]=_0x4725ff,this['_drawTextBody'](_0x377978,_0x10d330,_0x11caa8,_0x496b2d),_0x4c297e['restore'](),this['_baseTexture'][_0x249b88(0x78d)]();}}},Spriteset_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x625)]=function(){const _0x4c32c4=_0x10ff30;this[_0x4c32c4(0x5b3)]=new Sprite(),Spriteset_Battle['ANTI_TINT_UI']?this[_0x4c32c4(0x440)](this[_0x4c32c4(0x5b3)]):this[_0x4c32c4(0x6b1)]['addChild'](this[_0x4c32c4(0x5b3)]),SceneManager[_0x4c32c4(0x2df)][_0x4c32c4(0x5b3)]=this['_uiContainer'];},Spriteset_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x70a)]=function(){const _0xa3255e=_0x10ff30;if(VisuMZ[_0xa3255e(0x95b)][_0xa3255e(0x928)]['Enemy'][_0xa3255e(0x993)])return;this[_0xa3255e(0x72b)]=new Sprite(),BattleManager[_0xa3255e(0x3e4)](this[_0xa3255e(0x72b)]);for(const _0x34c512 of this[_0xa3255e(0x297)]){if('cyusf'!==_0xa3255e(0x707)){const _0x35f700=new Sprite_EnemyName();this[_0xa3255e(0x72b)][_0xa3255e(0x440)](_0x35f700),_0x35f700[_0xa3255e(0xb9b)](_0x34c512);}else{if(this[_0xa3255e(0x602)]!==_0x11ece8)return![];if(!_0x3d6f18[_0xa3255e(0xc1e)]())return![];return _0x3096cf[_0xa3255e(0x95b)][_0xa3255e(0x928)][_0xa3255e(0xa21)][_0xa3255e(0x3ba)];}}},Spriteset_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x6d6)]=function(){const _0x5b8d49=_0x10ff30;if(!this[_0x5b8d49(0x8d9)])return;if(!this[_0x5b8d49(0x5b3)])return;const _0x460ab0=Spriteset_Battle[_0x5b8d49(0x90a)]?this['_damageContainer']['x']:0x0,_0x1ef613=Spriteset_Battle[_0x5b8d49(0x90a)]?this[_0x5b8d49(0x8d9)]['y']:0x0,_0x144cab=Imported[_0x5b8d49(0xadf)]?this[_0x5b8d49(0x6b1)]['x']:0x0,_0x30e846=Imported[_0x5b8d49(0xadf)]?this[_0x5b8d49(0x6b1)]['y']:0x0;this['_uiContainer']['x']=_0x460ab0+_0x144cab,this['_uiContainer']['y']=_0x1ef613+_0x30e846;},BattleManager[_0x10ff30(0x3e4)]=function(_0x53b35a){const _0x323624=_0x10ff30;if(!SceneManager[_0x323624(0x2df)]['_uiContainer'])return;SceneManager[_0x323624(0x2df)]['_uiContainer'][_0x323624(0x440)](_0x53b35a);},Spriteset_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x87c)]=function(){return![];},Spriteset_Battle['prototype']['isAnyoneFloating']=function(){const _0x4f1938=_0x10ff30;return this[_0x4f1938(0x22e)]()[_0x4f1938(0xb58)](_0x32d035=>_0x32d035[_0x4f1938(0xcaa)]());},Spriteset_Battle['prototype'][_0x10ff30(0x45b)]=function(){const _0x5c1ccf=_0x10ff30;return this[_0x5c1ccf(0x22e)]()[_0x5c1ccf(0xb58)](_0x2d2fac=>_0x2d2fac[_0x5c1ccf(0xb0b)]());},Spriteset_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x562)]=function(){const _0x387b4c=_0x10ff30;return this[_0x387b4c(0x22e)]()['some'](_0x58be00=>_0x58be00[_0x387b4c(0x89f)]());},Spriteset_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x7ca)]=function(){const _0xce710f=_0x10ff30;return this[_0xce710f(0x22e)]()['some'](_0x360c6c=>_0x360c6c['isSkewing']());},Spriteset_Battle[_0x10ff30(0xb0c)][_0x10ff30(0x619)]=function(){const _0x4fc127=_0x10ff30;return this['battlerSprites']()[_0x4fc127(0xb58)](_0x18b777=>_0x18b777[_0x4fc127(0x50a)]());},Spriteset_Battle[_0x10ff30(0xb0c)][_0x10ff30(0xa50)]=function(){const _0x47d5c1=_0x10ff30;return this[_0x47d5c1(0x22e)]()['some'](_0x3ce0c1=>_0x3ce0c1[_0x47d5c1(0x6ba)]());},VisuMZ[_0x10ff30(0x95b)]['Window_ItemList_maxCols']=Window_ItemList[_0x10ff30(0xb0c)][_0x10ff30(0xa46)],Window_ItemList[_0x10ff30(0xb0c)][_0x10ff30(0xa46)]=function(){const _0x5dd06c=_0x10ff30;if(SceneManager[_0x5dd06c(0xc1e)]()){if(SceneManager[_0x5dd06c(0x2df)]['battleLayoutStyle']()===_0x5dd06c(0x401)){if(_0x5dd06c(0x5b9)===_0x5dd06c(0x55f))_0x5211dd[_0x5dd06c(0x95b)][_0x5dd06c(0x47a)][_0x5dd06c(0xb96)](this,_0x4882c1);else return VisuMZ[_0x5dd06c(0x95b)][_0x5dd06c(0x928)][_0x5dd06c(0xa21)][_0x5dd06c(0xc20)];}else{if(_0x5dd06c(0xa37)!==_0x5dd06c(0x79e))return VisuMZ[_0x5dd06c(0x95b)][_0x5dd06c(0x928)]['BattleLayout'][_0x5dd06c(0x392)];else{if(this['contentsOpacity']>0x0)this[_0x5dd06c(0x53c)]-=0x10;}}}else return _0x5dd06c(0x1fd)==='mWPfg'?VisuMZ[_0x5dd06c(0x95b)][_0x5dd06c(0x9bf)][_0x5dd06c(0xb96)](this):!![];},VisuMZ['BattleCore'][_0x10ff30(0x5c9)]=Window_SkillList[_0x10ff30(0xb0c)]['maxCols'],Window_SkillList['prototype'][_0x10ff30(0xa46)]=function(){const _0x4222a3=_0x10ff30;if(SceneManager[_0x4222a3(0xc1e)]()){if(_0x4222a3(0x7ff)!==_0x4222a3(0x7ff))return _0x293ece[_0x4222a3(0x95b)]['Settings'][_0x4222a3(0x9f9)][_0x4222a3(0xc2a)][_0x4222a3(0xb96)](this,_0x3e669b,_0x2e2bc9);else{if(SceneManager['_scene'][_0x4222a3(0xc1b)]()===_0x4222a3(0x401)){if(_0x4222a3(0x8cc)!==_0x4222a3(0x54d))return VisuMZ['BattleCore']['Settings'][_0x4222a3(0xa21)][_0x4222a3(0xc20)];else _0xd1b3a0[_0x4222a3(0xb29)](_0x5f1892['Text']||'',_0x36261a[_0x4222a3(0x2eb)]||0x0);}else{if(_0x4222a3(0xa95)!==_0x4222a3(0xa95))_0x321158['prototype'][_0x4222a3(0x4bd)][_0x4222a3(0xb96)](this);else return VisuMZ[_0x4222a3(0x95b)]['Settings'][_0x4222a3(0xa21)][_0x4222a3(0x392)];}}}else{if(_0x4222a3(0xa2d)===_0x4222a3(0xa2d))return VisuMZ[_0x4222a3(0x95b)][_0x4222a3(0x5c9)]['call'](this);else this[_0x4222a3(0x6b0)](),this[_0x4222a3(0x44a)](),this[_0x4222a3(0x5a0)](),this['addOptionsCommand'](),this[_0x4222a3(0x6a5)]();}},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x998)]=Window_Options[_0x10ff30(0xb0c)][_0x10ff30(0x581)],Window_Options[_0x10ff30(0xb0c)][_0x10ff30(0x581)]=function(){const _0x4c676c=_0x10ff30;VisuMZ[_0x4c676c(0x95b)][_0x4c676c(0x998)][_0x4c676c(0xb96)](this),this[_0x4c676c(0x71f)](),this[_0x4c676c(0x4e5)]();},Window_Options[_0x10ff30(0xb0c)][_0x10ff30(0x71f)]=function(){const _0x35902f=_0x10ff30;VisuMZ[_0x35902f(0x95b)][_0x35902f(0x928)][_0x35902f(0xab0)]['AddOption']&&(this[_0x35902f(0x1d2)](),this[_0x35902f(0xc0f)]());},Window_Options[_0x10ff30(0xb0c)][_0x10ff30(0x4e5)]=function(){const _0x366c77=_0x10ff30;if(!VisuMZ[_0x366c77(0x95b)][_0x366c77(0x928)]['HpGauge']['AddHpGaugeOption'])return;const _0x333ee8=TextManager[_0x366c77(0x5b8)],_0x29417e=_0x366c77(0x5b8);this[_0x366c77(0x3f8)](_0x333ee8,_0x29417e);},Window_Options[_0x10ff30(0xb0c)][_0x10ff30(0x1d2)]=function(){const _0x20c0b2=_0x10ff30,_0x362a0a=TextManager[_0x20c0b2(0x724)],_0x2c7fd2=_0x20c0b2(0x8b9);this[_0x20c0b2(0x3f8)](_0x362a0a,_0x2c7fd2);},Window_Options['prototype'][_0x10ff30(0xc0f)]=function(){const _0x2cffb7=TextManager['autoBattleStyle'],_0x3bc970='autoBattleUseSkills';this['addCommand'](_0x2cffb7,_0x3bc970);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x777)]=Window_Options['prototype'][_0x10ff30(0x6ce)],Window_Options[_0x10ff30(0xb0c)][_0x10ff30(0x6ce)]=function(_0x445b05){const _0xc2a6f3=_0x10ff30,_0x3533ce=this[_0xc2a6f3(0xbdb)](_0x445b05);if(_0x3533ce===_0xc2a6f3(0xbf6)){if(_0xc2a6f3(0x1c6)===_0xc2a6f3(0x985))_0x22ccb8[_0xc2a6f3(0xb0c)][_0xc2a6f3(0x78d)][_0xc2a6f3(0xb96)](this),this[_0xc2a6f3(0x296)]()&&this[_0xc2a6f3(0x296)]()[_0xc2a6f3(0x52f)]()!==this[_0xc2a6f3(0x6cd)]&&(this['_text']=this[_0xc2a6f3(0x296)]()[_0xc2a6f3(0x52f)](),this['refresh']()),this['updateOpacity'](),this[_0xc2a6f3(0x8b0)]();else return this[_0xc2a6f3(0x80c)]();}else return VisuMZ['BattleCore'][_0xc2a6f3(0x777)][_0xc2a6f3(0xb96)](this,_0x445b05);},Window_Options['prototype'][_0x10ff30(0x80c)]=function(){const _0x5803cb=_0x10ff30,_0x33e8ca=VisuMZ[_0x5803cb(0x95b)]['Settings'][_0x5803cb(0xab0)],_0x41533d=this['getConfigValue'](_0x5803cb(0xbf6));return _0x41533d?_0x33e8ca[_0x5803cb(0x210)]:_0x33e8ca[_0x5803cb(0x88a)];},Window_ShopStatus['prototype'][_0x10ff30(0x474)]=function(){const _0x9773a2=_0x10ff30,_0xceb27b=DataManager[_0x9773a2(0x3e5)](this['_item']),_0x1dae54=VisuMZ[_0x9773a2(0x560)][_0xceb27b];if(!_0x1dae54)return this[_0x9773a2(0xa31)]();const _0x4246ae=_0x9773a2(0x77b)['format'](this[_0x9773a2(0x58f)][_0x9773a2(0xb64)][_0x9773a2(0x589)]),_0x4e3801=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x9773a2(0x58f)][_0x9773a2(0xb64)][_0x9773a2(0x589)]];return _0x1dae54[_0x4246ae][_0x9773a2(0x958)](_0x4e3801);},Window_ShopStatus['prototype'][_0x10ff30(0xbee)]=function(){const _0x5db496=_0x10ff30,_0x348ca7=DataManager[_0x5db496(0x3e5)](this['_item']),_0x53570e=VisuMZ['DamageStyles'][_0x348ca7];if(!_0x53570e)return this[_0x5db496(0xb93)]();return _0x53570e[_0x5db496(0x53e)]['call'](this);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xcc4)]=Window_PartyCommand[_0x10ff30(0xb0c)]['initialize'],Window_PartyCommand[_0x10ff30(0xb0c)][_0x10ff30(0x600)]=function(_0x2c8106){const _0x84068b=_0x10ff30;VisuMZ[_0x84068b(0x95b)][_0x84068b(0xcc4)]['call'](this,_0x2c8106),this[_0x84068b(0x97c)](_0x2c8106);},Window_PartyCommand['prototype'][_0x10ff30(0x97c)]=function(_0x103ec4){const _0x1d4ebb=_0x10ff30,_0x1376f8=new Rectangle(0x0,0x0,_0x103ec4[_0x1d4ebb(0x7b2)],_0x103ec4[_0x1d4ebb(0x956)]);this[_0x1d4ebb(0x4be)]=new Window_Base(_0x1376f8),this[_0x1d4ebb(0x4be)][_0x1d4ebb(0x443)]=0x0,this[_0x1d4ebb(0x440)](this[_0x1d4ebb(0x4be)]),this['updateCommandNameWindow']();},Window_PartyCommand[_0x10ff30(0xb0c)][_0x10ff30(0x58c)]=function(){const _0x264616=_0x10ff30;Window_Command[_0x264616(0xb0c)][_0x264616(0x58c)][_0x264616(0xb96)](this);if(this['_commandNameWindow'])this[_0x264616(0xa6d)]();},Window_PartyCommand[_0x10ff30(0xb0c)]['updateCommandNameWindow']=function(){const _0x14b27e=_0x10ff30,_0x2a5795=this[_0x14b27e(0x4be)];_0x2a5795['contents'][_0x14b27e(0xb10)]();const _0xb9afd2=this[_0x14b27e(0x504)](this[_0x14b27e(0x3b4)]());if(_0xb9afd2===_0x14b27e(0x2e6)&&this[_0x14b27e(0x2f9)]()>0x0){const _0x557f8f=this[_0x14b27e(0x321)](this[_0x14b27e(0x3b4)]());let _0x3796ef=this[_0x14b27e(0x768)](this['index']());_0x3796ef=_0x3796ef[_0x14b27e(0x319)](/\\I\[(\d+)\]/gi,''),_0x2a5795['resetFontSettings'](),this[_0x14b27e(0x8c7)](_0x3796ef,_0x557f8f),this[_0x14b27e(0x34c)](_0x3796ef,_0x557f8f),this['commandNameWindowCenter'](_0x3796ef,_0x557f8f);}},Window_PartyCommand[_0x10ff30(0xb0c)]['commandNameWindowDrawBackground']=function(_0x3a6f52,_0x164ed1){},Window_PartyCommand[_0x10ff30(0xb0c)][_0x10ff30(0x34c)]=function(_0x36c153,_0x65e8a0){const _0x311f3c=_0x10ff30,_0x1d6b3c=this[_0x311f3c(0x4be)];_0x1d6b3c['drawText'](_0x36c153,0x0,_0x65e8a0['y'],_0x1d6b3c[_0x311f3c(0x951)],_0x311f3c(0x4e3));},Window_PartyCommand[_0x10ff30(0xb0c)][_0x10ff30(0x756)]=function(_0x181df5,_0x1baffe){const _0x1ee9f1=_0x10ff30,_0x2c4701=this[_0x1ee9f1(0x4be)],_0x4596b8=$gameSystem['windowPadding'](),_0x36a8a7=_0x1baffe['x']+Math[_0x1ee9f1(0xcce)](_0x1baffe[_0x1ee9f1(0x7b2)]/0x2)+_0x4596b8;_0x2c4701['x']=_0x2c4701[_0x1ee9f1(0x7b2)]/-0x2+_0x36a8a7,_0x2c4701['y']=Math['floor'](_0x1baffe[_0x1ee9f1(0x956)]/0x2);},Window_PartyCommand['prototype'][_0x10ff30(0x51c)]=function(){const _0x23314a=_0x10ff30;this[_0x23314a(0x6b0)](),this[_0x23314a(0x44a)](),this[_0x23314a(0x5a0)](),this[_0x23314a(0x4b5)](),this[_0x23314a(0x6a5)]();},Window_PartyCommand['prototype'][_0x10ff30(0x6b0)]=function(){const _0x1cbb45=_0x10ff30,_0x369e98=this['commandStyle'](),_0x48ae35=VisuMZ['BattleCore']['Settings'][_0x1cbb45(0xc78)]['CmdIconFight'],_0x90d480=_0x369e98===_0x1cbb45(0x39b)?TextManager[_0x1cbb45(0x874)]:_0x1cbb45(0x898)[_0x1cbb45(0x958)](_0x48ae35,TextManager[_0x1cbb45(0x874)]),_0x3f0fc5=this[_0x1cbb45(0x587)]();this[_0x1cbb45(0x3f8)](_0x90d480,'fight',_0x3f0fc5);},Window_PartyCommand[_0x10ff30(0xb0c)][_0x10ff30(0x587)]=function(){return!![];},Window_PartyCommand[_0x10ff30(0xb0c)]['addAutoBattleCommand']=function(){const _0x32f3ab=_0x10ff30;if(!this[_0x32f3ab(0xa94)]())return;const _0x24b96a=this[_0x32f3ab(0xc23)](),_0x12c35e=VisuMZ[_0x32f3ab(0x95b)]['Settings'][_0x32f3ab(0xc78)][_0x32f3ab(0x31a)],_0x69d3c4=_0x24b96a===_0x32f3ab(0x39b)?TextManager[_0x32f3ab(0xb21)]:_0x32f3ab(0x898)[_0x32f3ab(0x958)](_0x12c35e,TextManager[_0x32f3ab(0xb21)]),_0x494342=this[_0x32f3ab(0xa56)]();this[_0x32f3ab(0x3f8)](_0x69d3c4,_0x32f3ab(0xb21),_0x494342);},Window_PartyCommand[_0x10ff30(0xb0c)][_0x10ff30(0xa94)]=function(){const _0x3ffac5=_0x10ff30;return VisuMZ[_0x3ffac5(0x95b)][_0x3ffac5(0x928)][_0x3ffac5(0xc78)][_0x3ffac5(0xa9c)];},Window_PartyCommand[_0x10ff30(0xb0c)][_0x10ff30(0xa56)]=function(){return!![];},Window_PartyCommand[_0x10ff30(0xb0c)][_0x10ff30(0x5a0)]=function(){},Window_PartyCommand[_0x10ff30(0xb0c)]['addOptionsCommand']=function(){const _0x3429d3=_0x10ff30;if(!this[_0x3429d3(0x705)]())return;const _0x26c32f=this['commandStyle'](),_0x7405da=VisuMZ[_0x3429d3(0x95b)][_0x3429d3(0x928)][_0x3429d3(0xc78)][_0x3429d3(0x992)],_0x23e09c=_0x26c32f===_0x3429d3(0x39b)?TextManager[_0x3429d3(0x76b)]:_0x3429d3(0x898)['format'](_0x7405da,TextManager[_0x3429d3(0x76b)]),_0x4c462a=this[_0x3429d3(0xc75)]();this['addCommand'](_0x23e09c,_0x3429d3(0x76b),_0x4c462a);},Window_PartyCommand[_0x10ff30(0xb0c)]['isOptionsCommandAdded']=function(){const _0x23b7be=_0x10ff30;return VisuMZ[_0x23b7be(0x95b)][_0x23b7be(0x928)][_0x23b7be(0xc78)][_0x23b7be(0x3d3)];},Window_PartyCommand[_0x10ff30(0xb0c)][_0x10ff30(0xc75)]=function(){return!![];},Window_PartyCommand[_0x10ff30(0xb0c)][_0x10ff30(0x6a5)]=function(){const _0x423172=_0x10ff30,_0x3c8325=this[_0x423172(0xc23)](),_0x366147=VisuMZ[_0x423172(0x95b)][_0x423172(0x928)][_0x423172(0xc78)][_0x423172(0x791)],_0x7ab141=_0x3c8325===_0x423172(0x39b)?TextManager[_0x423172(0x378)]:_0x423172(0x898)[_0x423172(0x958)](_0x366147,TextManager[_0x423172(0x378)]),_0x33fad4=this['isEscapeCommandEnabled']();this[_0x423172(0x3f8)](_0x7ab141,_0x423172(0x378),_0x33fad4);},Window_PartyCommand[_0x10ff30(0xb0c)][_0x10ff30(0x67b)]=function(){return BattleManager['canEscape']();},Window_PartyCommand[_0x10ff30(0xb0c)][_0x10ff30(0x313)]=function(){const _0x52e233=_0x10ff30;return VisuMZ[_0x52e233(0x95b)][_0x52e233(0x928)][_0x52e233(0xc78)][_0x52e233(0x268)];},Window_PartyCommand[_0x10ff30(0xb0c)][_0x10ff30(0x217)]=function(_0x46cc27){const _0x36e4cc=_0x10ff30,_0x2ff22b=this['commandStyleCheck'](_0x46cc27);if(_0x2ff22b===_0x36e4cc(0x33c))this[_0x36e4cc(0x87a)](_0x46cc27);else _0x2ff22b===_0x36e4cc(0x2e6)?this['drawItemStyleIcon'](_0x46cc27):Window_Command['prototype']['drawItem'][_0x36e4cc(0xb96)](this,_0x46cc27);},Window_PartyCommand[_0x10ff30(0xb0c)]['commandStyle']=function(){const _0x2ba643=_0x10ff30;return VisuMZ[_0x2ba643(0x95b)]['Settings'][_0x2ba643(0xc78)][_0x2ba643(0x414)];},Window_PartyCommand[_0x10ff30(0xb0c)][_0x10ff30(0x504)]=function(_0x5c1804){const _0x38aa8e=_0x10ff30;if(_0x5c1804<0x0)return _0x38aa8e(0x39b);const _0x3e333d=this[_0x38aa8e(0xc23)]();if(_0x3e333d!=='auto')return _0x3e333d;else{if(this[_0x38aa8e(0x2f9)]()>0x0){const _0x513715=this[_0x38aa8e(0x768)](_0x5c1804);if(_0x513715[_0x38aa8e(0x22f)](/\\I\[(\d+)\]/i)){const _0x4fac72=this[_0x38aa8e(0x321)](_0x5c1804),_0x1d6b2b=this[_0x38aa8e(0x4c0)](_0x513715)['width'];if(_0x1d6b2b<=_0x4fac72[_0x38aa8e(0x7b2)])return _0x38aa8e(0x33c);else{if('PoJat'===_0x38aa8e(0x3fe))return _0x38aa8e(0x2e6);else{const _0x31a94e=_0x4450c2[_0x38aa8e(0xb60)](_0x5d7687['$1']);this[_0x38aa8e(0x3cc)](_0x2a4f8c[_0x31a94e]);}}}}}return _0x38aa8e(0x39b);},Window_PartyCommand[_0x10ff30(0xb0c)][_0x10ff30(0x87a)]=function(_0x84c9db){const _0x2e34ce=_0x10ff30,_0x56d340=this['itemLineRect'](_0x84c9db),_0x2d255d=this['commandName'](_0x84c9db),_0x1f71ca=this['textSizeEx'](_0x2d255d)[_0x2e34ce(0x7b2)];this[_0x2e34ce(0x9e5)](this['isCommandEnabled'](_0x84c9db));const _0x269965=this['itemTextAlign']();if(_0x269965==='right')this[_0x2e34ce(0x71b)](_0x2d255d,_0x56d340['x']+_0x56d340[_0x2e34ce(0x7b2)]-_0x1f71ca,_0x56d340['y'],_0x1f71ca);else{if(_0x269965===_0x2e34ce(0x4e3)){const _0x4a8353=_0x56d340['x']+Math[_0x2e34ce(0xcce)]((_0x56d340[_0x2e34ce(0x7b2)]-_0x1f71ca)/0x2);this[_0x2e34ce(0x71b)](_0x2d255d,_0x4a8353,_0x56d340['y'],_0x1f71ca);}else this[_0x2e34ce(0x71b)](_0x2d255d,_0x56d340['x'],_0x56d340['y'],_0x1f71ca);}},Window_PartyCommand[_0x10ff30(0xb0c)]['drawItemStyleIcon']=function(_0x44fd28){const _0xe8c251=_0x10ff30;this[_0xe8c251(0x768)](_0x44fd28)[_0xe8c251(0x22f)](/\\I\[(\d+)\]/i);const _0x1538bb=Number(RegExp['$1'])||0x0,_0x52c581=this[_0xe8c251(0x321)](_0x44fd28),_0x2b312b=_0x52c581['x']+Math[_0xe8c251(0xcce)]((_0x52c581['width']-ImageManager[_0xe8c251(0x824)])/0x2),_0x3dc33c=_0x52c581['y']+(_0x52c581[_0xe8c251(0x956)]-ImageManager[_0xe8c251(0x282)])/0x2;this[_0xe8c251(0x4f6)](_0x1538bb,_0x2b312b,_0x3dc33c);},Window_PartyCommand[_0x10ff30(0xb0c)][_0x10ff30(0x34b)]=function(){},Window_PartyCommand[_0x10ff30(0xb0c)][_0x10ff30(0x47f)]=function(){const _0x5409c4=_0x10ff30;Window_Command['prototype']['activate'][_0x5409c4(0xb96)](this);const _0x22f1a6=this[_0x5409c4(0xc1b)]();if(_0x22f1a6===_0x5409c4(0x401)){if(_0x5409c4(0x325)===_0x5409c4(0x325))this['showHelpWindow']();else{const _0x49c934=this[_0x5409c4(0x4f0)]();return _0x49c934?_0x49c934[_0x5409c4(0x63e)]:0x0;}}},Window_PartyCommand['prototype'][_0x10ff30(0xc1b)]=function(){const _0x278ed7=_0x10ff30;if(this[_0x278ed7(0x674)])return this[_0x278ed7(0x674)];return this[_0x278ed7(0x674)]=SceneManager[_0x278ed7(0x2df)][_0x278ed7(0xc1b)](),this['_battleLayoutStyle'];},Window_PartyCommand[_0x10ff30(0xb0c)]['updateHelp']=function(){const _0x30198c=_0x10ff30,_0x3cb61c=VisuMZ[_0x30198c(0x95b)][_0x30198c(0x928)][_0x30198c(0xc78)],_0x25bb8b=this[_0x30198c(0x92b)]();switch(_0x25bb8b){case _0x30198c(0x874):this[_0x30198c(0x4fd)][_0x30198c(0x4bf)](_0x3cb61c[_0x30198c(0x5cc)]);break;case _0x30198c(0xb21):this['_helpWindow'][_0x30198c(0x4bf)](_0x3cb61c[_0x30198c(0x880)]);break;case'options':this[_0x30198c(0x4fd)][_0x30198c(0x4bf)](_0x3cb61c[_0x30198c(0x95a)]);break;case _0x30198c(0x378):this['_helpWindow'][_0x30198c(0x4bf)](_0x3cb61c[_0x30198c(0x5ba)]);break;default:this[_0x30198c(0x4fd)][_0x30198c(0x4bf)]('');break;}},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xbf9)]=Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0x600)],Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0x600)]=function(_0x2ec3f6){const _0x383836=_0x10ff30;VisuMZ[_0x383836(0x95b)][_0x383836(0xbf9)][_0x383836(0xb96)](this,_0x2ec3f6),this['createCommandNameWindow'](_0x2ec3f6);},Window_ActorCommand['prototype'][_0x10ff30(0x97c)]=function(_0x79c51b){const _0x45a7b5=_0x10ff30,_0x15f890=new Rectangle(0x0,0x0,_0x79c51b[_0x45a7b5(0x7b2)],_0x79c51b[_0x45a7b5(0x956)]);this[_0x45a7b5(0x4be)]=new Window_Base(_0x15f890),this[_0x45a7b5(0x4be)][_0x45a7b5(0x443)]=0x0,this[_0x45a7b5(0x440)](this[_0x45a7b5(0x4be)]),this[_0x45a7b5(0xa6d)]();},Window_ActorCommand['prototype']['callUpdateHelp']=function(){const _0x21bb1d=_0x10ff30;Window_Command[_0x21bb1d(0xb0c)]['callUpdateHelp'][_0x21bb1d(0xb96)](this);if(this[_0x21bb1d(0x4be)])this['updateCommandNameWindow']();},Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0xa6d)]=function(){const _0x506f4f=_0x10ff30,_0x40e05f=this[_0x506f4f(0x4be)];_0x40e05f[_0x506f4f(0x74f)][_0x506f4f(0xb10)]();const _0x4fd913=this[_0x506f4f(0x504)](this[_0x506f4f(0x3b4)]());if(_0x4fd913==='icon'&&this[_0x506f4f(0x2f9)]()>0x0){const _0x27cc8c=this[_0x506f4f(0x321)](this[_0x506f4f(0x3b4)]());let _0x1124a1=this['commandName'](this[_0x506f4f(0x3b4)]());_0x1124a1=_0x1124a1[_0x506f4f(0x319)](/\\I\[(\d+)\]/gi,''),_0x40e05f[_0x506f4f(0x524)](),this[_0x506f4f(0x8c7)](_0x1124a1,_0x27cc8c),this[_0x506f4f(0x34c)](_0x1124a1,_0x27cc8c),this[_0x506f4f(0x756)](_0x1124a1,_0x27cc8c);}},Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0x8c7)]=function(_0x1fcc7c,_0x4fee67){},Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0x34c)]=function(_0xc9106e,_0x30923a){const _0x5cfc9b=_0x10ff30,_0x541672=this[_0x5cfc9b(0x4be)];_0x541672[_0x5cfc9b(0x24a)](_0xc9106e,0x0,_0x30923a['y'],_0x541672['innerWidth'],_0x5cfc9b(0x4e3));},Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0x756)]=function(_0x499a88,_0x5599c6){const _0xec609d=_0x10ff30,_0x458e9c=this[_0xec609d(0x4be)],_0x5216bb=$gameSystem[_0xec609d(0x1cc)](),_0x58d0e8=_0x5599c6['x']+Math[_0xec609d(0xcce)](_0x5599c6['width']/0x2)+_0x5216bb;_0x458e9c['x']=_0x458e9c[_0xec609d(0x7b2)]/-0x2+_0x58d0e8,_0x458e9c['y']=Math[_0xec609d(0xcce)](_0x5599c6[_0xec609d(0x956)]/0x2);},Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0x51c)]=function(){const _0xf9370a=_0x10ff30;if(!this[_0xf9370a(0x4e8)])return;const _0x576179=this[_0xf9370a(0x4e8)]['battleCommands']();for(const _0x28082c of _0x576179){this[_0xf9370a(0x1f0)](_0x28082c['toUpperCase']()[_0xf9370a(0x6a3)]());}},Window_ActorCommand[_0x10ff30(0xb0c)]['makeBattleCommand']=function(_0x330baa){const _0x2c23d6=_0x10ff30;_0x330baa===_0x2c23d6(0x9c9)&&this[_0x2c23d6(0x91a)]();[_0x2c23d6(0x71d),_0x2c23d6(0x709)][_0x2c23d6(0x778)](_0x330baa)&&this[_0x2c23d6(0x5ea)]();_0x330baa==='GUARD'&&this['addGuardCommand']();if(_0x330baa==='ITEM'){if(_0x2c23d6(0xcb0)===_0x2c23d6(0xcb0))this['addItemCommand']();else{const _0xb24a3d=_0x1acf86[_0x4f2086['BattleStartEvent']],_0x4ebd9d=_0xb24a3d[_0x2c23d6(0x9f4)]['length']-0x2,_0x48aa8c=_0xb24a3d[_0x2c23d6(0x9f4)][_0x4ebd9d];if(_0x48aa8c&&_0x48aa8c['code']!==0xe6){const _0x1f3576={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x11d78c=_0xb24a3d[_0x2c23d6(0x9f4)]['pop']();_0xb24a3d[_0x2c23d6(0x9f4)][_0x2c23d6(0x8da)](_0x1f3576),_0xb24a3d['list'][_0x2c23d6(0x8da)](_0x11d78c);}}}_0x330baa===_0x2c23d6(0x4f1)&&this[_0x2c23d6(0x6a5)]();_0x330baa===_0x2c23d6(0x52d)&&this['addAutoBattleCommand']();if(_0x330baa[_0x2c23d6(0x22f)](/STYPE: (\d+)/i)){const _0x5c5cbe=Number(RegExp['$1']);this[_0x2c23d6(0x4a6)](_0x5c5cbe);}else{if(_0x330baa[_0x2c23d6(0x22f)](/STYPE: (.*)/i)){const _0x2771c5=DataManager[_0x2c23d6(0x883)](RegExp['$1']);this['addSkillTypeCommand'](_0x2771c5);}}_0x330baa===_0x2c23d6(0xa63)&&(_0x2c23d6(0x1e8)!==_0x2c23d6(0x1e8)?_0x4af1b6[_0x2c23d6(0xb64)][_0x2c23d6(0x829)]=!![]:this[_0x2c23d6(0xbbe)]());if(_0x330baa[_0x2c23d6(0x22f)](/SKILL: (\d+)/i)){const _0x57d5e8=Number(RegExp['$1']);this[_0x2c23d6(0x3cc)]($dataSkills[_0x57d5e8]);}else{if(_0x330baa[_0x2c23d6(0x22f)](/SKILL: (.*)/i)){const _0x5efd69=DataManager[_0x2c23d6(0xb60)](RegExp['$1']);this[_0x2c23d6(0x3cc)]($dataSkills[_0x5efd69]);}}_0x330baa==='PARTY'&&Imported[_0x2c23d6(0x86f)]&&this[_0x2c23d6(0xad8)]();if([_0x2c23d6(0x970),'COMBAT\x20LOG']['includes'](_0x330baa)&&Imported[_0x2c23d6(0x479)]){if('iimwc'!==_0x2c23d6(0xc65))this['addCombatLogCommand']();else return 0x0;}if(_0x330baa===_0x2c23d6(0x60b)&&Imported['VisuMZ_2_WeaponSwapSystem']){if(_0x2c23d6(0x9de)!=='oFNQD')this[_0x2c23d6(0x968)](!![]);else{const _0x5bf054=_0x5dcddc[_0x529548];if(_0x5bf054)_0x8e9c03[_0x2c23d6(0x395)](_0x3d3d81['makeDeepCopy'](_0x5bf054));}}},Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0x91a)]=function(){const _0x388de9=_0x10ff30,_0x2ed570=$dataSkills[this[_0x388de9(0x4e8)][_0x388de9(0x701)]()];if(!_0x2ed570)return;if(!this[_0x388de9(0xbeb)](_0x2ed570))return;const _0x595a99=this[_0x388de9(0xc23)](),_0xb3a952=DataManager[_0x388de9(0x75c)](_0x2ed570),_0x76496f=DataManager[_0x388de9(0xa8e)](_0x2ed570),_0x577bfe=_0x595a99===_0x388de9(0x39b)?_0xb3a952:_0x388de9(0x898)['format'](_0x76496f,_0xb3a952);this[_0x388de9(0x3f8)](_0x577bfe,_0x388de9(0x6f0),this[_0x388de9(0x4e8)][_0x388de9(0xc86)]());},Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0x5de)]=function(){const _0xe3f1e9=_0x10ff30,_0x3387fb=$dataSkills[this[_0xe3f1e9(0x4e8)][_0xe3f1e9(0xb43)]()];if(!_0x3387fb)return;if(!this['canAddSkillCommand'](_0x3387fb))return;const _0x3b7439=this[_0xe3f1e9(0xc23)](),_0x5690d8=DataManager['battleCommandName'](_0x3387fb),_0x31f478=DataManager[_0xe3f1e9(0xa8e)](_0x3387fb),_0x500ee7=_0x3b7439==='text'?_0x5690d8:'\x5cI[%1]%2'[_0xe3f1e9(0x958)](_0x31f478,_0x5690d8);this[_0xe3f1e9(0x3f8)](_0x500ee7,_0xe3f1e9(0x867),this[_0xe3f1e9(0x4e8)][_0xe3f1e9(0x97f)]());},Window_ActorCommand['prototype'][_0x10ff30(0xc35)]=function(){const _0x5ad7fa=_0x10ff30,_0x4740a4=this['commandStyle'](),_0x4651af=VisuMZ[_0x5ad7fa(0x95b)][_0x5ad7fa(0x928)][_0x5ad7fa(0x304)][_0x5ad7fa(0x3f6)],_0x391343=_0x4740a4==='text'?TextManager['item']:'\x5cI[%1]%2'[_0x5ad7fa(0x958)](_0x4651af,TextManager['item']),_0x1ec8ce=this[_0x5ad7fa(0xa57)]();this['addCommand'](_0x391343,_0x5ad7fa(0x5c4),_0x1ec8ce);},Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0xa57)]=function(){const _0xec6a0e=_0x10ff30;return this[_0xec6a0e(0x4e8)]&&this[_0xec6a0e(0x4e8)]['canUseItemCommand']();},Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0x5ea)]=function(){const _0x53cef6=_0x10ff30,_0x4cf2a7=this[_0x53cef6(0x4e8)][_0x53cef6(0x3e9)]();for(const _0xdd6a8e of _0x4cf2a7){if(_0x53cef6(0xa32)===_0x53cef6(0x593)){if(!_0x2b732e['isSceneBattle']())return;_0x2f5223[_0x53cef6(0xb1e)](_0x27889e,_0x4bedb4);const _0xb1588a=_0x22d177[_0x53cef6(0x621)](),_0x51237a=_0x177e60[_0x53cef6(0xb7d)];if(!_0xb1588a)return;_0x4c3681[_0x53cef6(0x7c4)]--,_0x12c4db[_0x53cef6(0x236)]=_0x5c8daf['_allTargets'][_0x526e16[_0x53cef6(0x7c4)]]||null,_0x42a3a9['_target']&&_0x51237a[_0x53cef6(0x9d9)]()[_0x53cef6(0x6a3)]()!==_0x53cef6(0x291)&&_0xb1588a['command119']([_0x51237a]);}else this[_0x53cef6(0x4a6)](_0xdd6a8e);}},Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0x4a6)]=function(_0x519769){const _0x19815a=_0x10ff30;let _0x42f02d=$dataSystem[_0x19815a(0x3e9)][_0x519769];if(!_0x42f02d)return;let _0xc1330d=_0x42f02d;const _0x35408b=this[_0x19815a(0xc23)]();if(_0x35408b==='text'){if(_0x19815a(0x975)===_0x19815a(0x975))_0xc1330d=_0xc1330d[_0x19815a(0x319)](/\x1I\[(\d+)\]/gi,''),_0xc1330d=_0xc1330d[_0x19815a(0x319)](/\\I\[(\d+)\]/gi,'');else return _0x42ab6f;}else{if(!_0x42f02d['match'](/\\I\[(\d+)\]/i)){if('JtacO'===_0x19815a(0xb5e)){const _0x2f5581=Imported[_0x19815a(0x55b)]?VisuMZ['SkillsStatesCore'][_0x19815a(0x928)][_0x19815a(0x3e0)]:VisuMZ[_0x19815a(0x95b)][_0x19815a(0x928)][_0x19815a(0x304)],_0x443e30=$dataSystem[_0x19815a(0xaf3)][_0x19815a(0x778)](_0x519769),_0x3296ee=_0x443e30?_0x2f5581[_0x19815a(0xa4e)]:_0x2f5581[_0x19815a(0x85f)];_0xc1330d=_0x19815a(0x898)[_0x19815a(0x958)](_0x3296ee,_0x42f02d);}else{const _0x25f89a=this[_0x19815a(0x698)](this[_0x19815a(0xa8f)]);this[_0x19815a(0x821)](this[_0x19815a(0x96e)],_0x25f89a),this['updateShadowVisibility']();}}}this[_0x19815a(0x3f8)](_0xc1330d,_0x19815a(0x36c),!![],_0x519769);},Window_ActorCommand[_0x10ff30(0xb0c)]['addSingleSkillCommands']=function(){const _0x1429e7=_0x10ff30,_0x26d0db=this[_0x1429e7(0x4e8)][_0x1429e7(0x3e9)](),_0x4628fa=this['_actor'][_0x1429e7(0x8dd)]();for(const _0x107382 of _0x4628fa){if('VdbSE'===_0x1429e7(0x98e)){if(!_0x107382)continue;if(Imported[_0x1429e7(0x55b)]){if(_0x1429e7(0x929)!=='ZRkYB'){if(this[_0x1429e7(0x2d0)](_0x107382))continue;if(this[_0x1429e7(0x8f4)](_0x107382))continue;}else this[_0x1429e7(0x8d9)]['x']=this['x'],this['_damageContainer']['y']=this['y'];}else{if(!_0x26d0db['includes'](_0x107382['stypeId']))continue;}this[_0x1429e7(0x3cc)](_0x107382);}else{if(!_0x5c0f0e)return![];if(!_0x3838da[_0x1429e7(0x765)])return![];if(!_0xcaa3b4[_0x1429e7(0x4d9)][0x0])return![];if(_0x3286eb['targetObjects'][0x0][_0x1429e7(0x58a)]&&!_0x29d96b['targetObjects'][0x0][_0x1429e7(0x58a)]())return![];if(_0x4d54a2[_0x1429e7(0xa7c)]())return![];if(!this[_0x1429e7(0x889)]())return![];if(_0x51b997[_0x1429e7(0x602)]===_0x81de75){if(_0x22649f[_0x1429e7(0x765)][_0x1429e7(0x360)]!==0x0)return![];}else{if(_0x44ddaf[_0x1429e7(0x602)]===_0x3c6f6e){if(_0x4d952e[_0x1429e7(0x765)][_0x1429e7(0xb5d)]===0x3)return![];}}return!![];const _0x28e041=_0x1ddb7c[_0x1429e7(0xb0c)]['battleLayoutStyle']();return['xp',_0x1429e7(0xc14)][_0x1429e7(0x6d5)](_0x28e041);}}},Window_ActorCommand['prototype'][_0x10ff30(0x2d0)]=function(_0x5c8bf8){const _0x12ea10=_0x10ff30,_0x125dd9=this[_0x12ea10(0x4e8)]['skillTypes'](),_0xe58da7=_0x125dd9[_0x12ea10(0xb68)](_0x4aa62e=>DataManager[_0x12ea10(0xc80)](_0x5c8bf8)[_0x12ea10(0x778)](_0x4aa62e));return _0xe58da7[_0x12ea10(0x449)]<=0x0;},Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0x8f4)]=function(_0x1ba0e6){const _0x4d3ee5=_0x10ff30;if(Imported[_0x4d3ee5(0x55b)]){if(VisuMZ['SkillsStatesCore']['version']>=1.24){if('SbvRE'==='SbvRE'){if(this[_0x4d3ee5(0x4e8)]){if(!VisuMZ[_0x4d3ee5(0x5cd)][_0x4d3ee5(0x368)](this[_0x4d3ee5(0x4e8)],_0x1ba0e6))return!![];if(!VisuMZ[_0x4d3ee5(0x5cd)][_0x4d3ee5(0x7fb)](this[_0x4d3ee5(0x4e8)],_0x1ba0e6))return!![];if(!VisuMZ[_0x4d3ee5(0x5cd)][_0x4d3ee5(0x4c5)](this['_actor'],_0x1ba0e6))return!![];}}else this[_0x4d3ee5(0x97e)]();}else{if(!Window_SkillList[_0x4d3ee5(0xb0c)][_0x4d3ee5(0xb35)][_0x4d3ee5(0xb96)](this,_0x1ba0e6))return!![];if(!Window_SkillList[_0x4d3ee5(0xb0c)][_0x4d3ee5(0x570)]['call'](this,_0x1ba0e6))return!![];if(!Window_SkillList[_0x4d3ee5(0xb0c)][_0x4d3ee5(0xc7b)]['call'](this,_0x1ba0e6))return!![];}}return![];},Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0x3cc)]=function(_0x3e3216){const _0xdf9148=_0x10ff30;if(!_0x3e3216)return;if(!this[_0xdf9148(0xbeb)](_0x3e3216))return;const _0x2bdc53=this['commandStyle'](),_0x3b36d6=DataManager[_0xdf9148(0x75c)](_0x3e3216),_0xab392f=DataManager[_0xdf9148(0xa8e)](_0x3e3216),_0x5da5fc=_0x2bdc53===_0xdf9148(0x39b)?_0x3b36d6:_0xdf9148(0x898)[_0xdf9148(0x958)](_0xab392f,_0x3b36d6),_0x5808eb=this[_0xdf9148(0x4e8)][_0xdf9148(0x974)](_0x3e3216);this[_0xdf9148(0x3f8)](_0x5da5fc,'singleSkill',_0x5808eb,_0x3e3216['id']);},Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0xbeb)]=function(_0x202999){const _0x3ba980=_0x10ff30,_0x21e2fb=_0x202999[_0x3ba980(0x7ed)];if(_0x21e2fb['match'](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x3ba980(0x4e8)]['isLearnedSkill'](_0x202999['id']))return![];}if(_0x21e2fb[_0x3ba980(0x22f)](/<COMMAND REQUIRE ACCESS>/i)){if(!this['_actor'][_0x3ba980(0x9cd)](_0x202999['id']))return![];}const _0x444114=VisuMZ[_0x3ba980(0x95b)][_0x3ba980(0x613)](_0x202999,_0x3ba980(0x7cd));if(VisuMZ[_0x3ba980(0x95b)]['JS'][_0x444114]){if(!VisuMZ[_0x3ba980(0x95b)]['JS'][_0x444114][_0x3ba980(0xb96)](this,this[_0x3ba980(0x4e8)],_0x202999))return![];}return VisuMZ['BattleCore']['CheckSkillCommandShowSwitches'](_0x202999);},VisuMZ['BattleCore'][_0x10ff30(0xca6)]=function(_0x33964f){const _0x4c34a2=_0x10ff30,_0x124b56=_0x33964f['note'];if(_0x124b56[_0x4c34a2(0x22f)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x4c34a2(0xb46)===_0x4c34a2(0xb46)){const _0x1efb1f=JSON[_0x4c34a2(0xc51)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x57d7d5 of _0x1efb1f){if(!$gameSwitches['value'](_0x57d7d5))return![];}return!![];}else this[_0x4c34a2(0x331)]();}if(_0x124b56[_0x4c34a2(0x22f)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x19057e=JSON['parse']('['+RegExp['$1'][_0x4c34a2(0x22f)](/\d+/g)+']');for(const _0x19fdd2 of _0x19057e){if(!$gameSwitches[_0x4c34a2(0x640)](_0x19fdd2))return![];}return!![];}if(_0x124b56[_0x4c34a2(0x22f)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x3ae6fd=JSON[_0x4c34a2(0xc51)]('['+RegExp['$1'][_0x4c34a2(0x22f)](/\d+/g)+']');for(const _0x196d05 of _0x3ae6fd){if($gameSwitches[_0x4c34a2(0x640)](_0x196d05))return!![];}return![];}if(_0x124b56['match'](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x4c34a2(0x88d)===_0x4c34a2(0x88d)){const _0x205e48=JSON[_0x4c34a2(0xc51)]('['+RegExp['$1'][_0x4c34a2(0x22f)](/\d+/g)+']');for(const _0x3c69c3 of _0x205e48){if(!$gameSwitches[_0x4c34a2(0x640)](_0x3c69c3))return!![];}return![];}else _0x678e4[_0x4c34a2(0x92f)]();}if(_0x124b56[_0x4c34a2(0x22f)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0xeeca2f=JSON['parse']('['+RegExp['$1'][_0x4c34a2(0x22f)](/\d+/g)+']');for(const _0x4e8a34 of _0xeeca2f){if(_0x4c34a2(0x38a)!==_0x4c34a2(0x38a))_0x565343=_0x4e818e+_0x579d67['iconWidth']/0x2-0x4,_0xb1cf45=_0xd07687-_0x28adc9['iconHeight']/0x2;else{if(!$gameSwitches[_0x4c34a2(0x640)](_0x4e8a34))return!![];}}return![];}if(_0x124b56[_0x4c34a2(0x22f)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x4c34a2(0xbe4)!=='DtpRb')_0x59ee2d=_0x16041c[this[_0x4c34a2(0x4e8)][_0x4c34a2(0x701)]()];else{const _0x4aaaf5=JSON['parse']('['+RegExp['$1'][_0x4c34a2(0x22f)](/\d+/g)+']');for(const _0x54864f of _0x4aaaf5){if(_0x4c34a2(0x94b)!==_0x4c34a2(0x94b))return _0x2b1351[_0x4c34a2(0x208)]();else{if($gameSwitches[_0x4c34a2(0x640)](_0x54864f))return![];}}return!![];}}return!![];},Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0x6a5)]=function(){const _0x4aa2c5=_0x10ff30,_0x54ec51=this[_0x4aa2c5(0xc23)](),_0x4f2d51=VisuMZ[_0x4aa2c5(0x95b)][_0x4aa2c5(0x928)]['PartyCmd'][_0x4aa2c5(0x791)],_0x1352a5=_0x54ec51===_0x4aa2c5(0x39b)?TextManager[_0x4aa2c5(0x378)]:_0x4aa2c5(0x898)[_0x4aa2c5(0x958)](_0x4f2d51,TextManager['escape']),_0x59ba9e=this['isEscapeCommandEnabled']();this['addCommand'](_0x1352a5,_0x4aa2c5(0x378),_0x59ba9e);},Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0x67b)]=function(){const _0x1e7601=_0x10ff30;return BattleManager[_0x1e7601(0x208)]();},Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0x44a)]=function(){const _0x3ca0e3=_0x10ff30,_0x1d9aff=this['commandStyle'](),_0x345ab3=VisuMZ[_0x3ca0e3(0x95b)]['Settings'][_0x3ca0e3(0xc78)][_0x3ca0e3(0x31a)],_0x41b4a1=_0x1d9aff==='text'?TextManager[_0x3ca0e3(0xb21)]:_0x3ca0e3(0x898)['format'](_0x345ab3,TextManager[_0x3ca0e3(0xb21)]),_0x320476=this[_0x3ca0e3(0xa56)]();this['addCommand'](_0x41b4a1,_0x3ca0e3(0xb21),_0x320476);},Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0xa56)]=function(){return!![];},Window_ActorCommand[_0x10ff30(0xb0c)]['itemTextAlign']=function(){const _0x11108a=_0x10ff30;return VisuMZ[_0x11108a(0x95b)][_0x11108a(0x928)][_0x11108a(0x304)]['CmdTextAlign'];},Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0x217)]=function(_0x2db5ec){const _0x3878ca=_0x10ff30,_0x5ab375=this['commandStyleCheck'](_0x2db5ec);if(_0x5ab375===_0x3878ca(0x33c))this[_0x3878ca(0x87a)](_0x2db5ec);else _0x5ab375===_0x3878ca(0x2e6)?_0x3878ca(0x2b0)==='QPxnZ'?_0x1f4c7d+=_0x12c0ab:this[_0x3878ca(0x907)](_0x2db5ec):Window_Command['prototype'][_0x3878ca(0x217)][_0x3878ca(0xb96)](this,_0x2db5ec);this[_0x3878ca(0x43f)](_0x2db5ec);},Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0xc23)]=function(){const _0x1e6056=_0x10ff30;return VisuMZ[_0x1e6056(0x95b)][_0x1e6056(0x928)][_0x1e6056(0x304)][_0x1e6056(0x414)];},Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0x504)]=function(_0x1b9d30){const _0x5d019b=_0x10ff30;if(_0x1b9d30<0x0)return _0x5d019b(0x39b);const _0x501a51=this[_0x5d019b(0xc23)]();if(_0x501a51!=='auto'){if('KObuv'!==_0x5d019b(0x41f))return _0x501a51;else{if(_0x222865[_0x5d019b(0x967)]!==_0x15eda4)return _0x4d9217[_0x5d019b(0x967)];if(this[_0x5d019b(0x674)])return this[_0x5d019b(0x674)];return this[_0x5d019b(0x674)]=_0x2521eb[_0x5d019b(0x95b)][_0x5d019b(0x928)][_0x5d019b(0xa21)][_0x5d019b(0x8b3)]['toLowerCase']()['trim'](),this[_0x5d019b(0x674)]===_0x5d019b(0x8f3)&&!_0x113efa[_0x5d019b(0xc8c)]&&(this[_0x5d019b(0x674)]=_0x5d019b(0x281)),this[_0x5d019b(0x674)];}}else{if(this[_0x5d019b(0x2f9)]()>0x0){const _0x1ef2ff=this[_0x5d019b(0x768)](_0x1b9d30);if(_0x1ef2ff[_0x5d019b(0x22f)](/\\I\[(\d+)\]/i)){const _0x5993aa=this[_0x5d019b(0x321)](_0x1b9d30),_0xf2859b=this['textSizeEx'](_0x1ef2ff)[_0x5d019b(0x7b2)];if(_0xf2859b<=_0x5993aa[_0x5d019b(0x7b2)]){if('WDpir'!==_0x5d019b(0x538))this['updateStateSprite'](),this[_0x5d019b(0x22d)]();else return'iconText';}else{if('YOfYn'===_0x5d019b(0xbbb))return _0x5d019b(0x2e6);else this['opacity']-=0x10;}}}}return'text';},Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0x87a)]=function(_0x3f3fe5){const _0x1eddf3=_0x10ff30,_0x53708f=this['itemLineRect'](_0x3f3fe5),_0x5ea97a=this[_0x1eddf3(0x768)](_0x3f3fe5),_0x20ccfc=this[_0x1eddf3(0x4c0)](_0x5ea97a)[_0x1eddf3(0x7b2)];this[_0x1eddf3(0x9e5)](this[_0x1eddf3(0xca5)](_0x3f3fe5));const _0x1044a8=this[_0x1eddf3(0x313)]();if(_0x1044a8===_0x1eddf3(0x7a5))this['drawTextEx'](_0x5ea97a,_0x53708f['x']+_0x53708f[_0x1eddf3(0x7b2)]-_0x20ccfc,_0x53708f['y'],_0x20ccfc);else{if(_0x1044a8==='center'){if(_0x1eddf3(0x4aa)!=='CUtJV'){if(!this['hasSvBattler']())return![];const _0x2e09e6=this['battler']();if(!_0x2e09e6)return![];const _0x4dcf5d=_0x2e09e6[_0x1eddf3(0x408)];if(!_0x4dcf5d)return![];const _0xf53c38=_0x4dcf5d[_0x1eddf3(0x6fb)];return _0xf53c38&&!_0xf53c38['loop'];}else{const _0x16e094=_0x53708f['x']+Math[_0x1eddf3(0xcce)]((_0x53708f[_0x1eddf3(0x7b2)]-_0x20ccfc)/0x2);this[_0x1eddf3(0x71b)](_0x5ea97a,_0x16e094,_0x53708f['y'],_0x20ccfc);}}else this[_0x1eddf3(0x71b)](_0x5ea97a,_0x53708f['x'],_0x53708f['y'],_0x20ccfc);}},Window_ActorCommand['prototype'][_0x10ff30(0x907)]=function(_0x3a9c44){const _0x55b3fa=_0x10ff30;this['commandName'](_0x3a9c44)[_0x55b3fa(0x22f)](/\\I\[(\d+)\]/i);const _0x13dbc6=Number(RegExp['$1'])||0x0,_0x48fc37=this[_0x55b3fa(0x321)](_0x3a9c44),_0x2887d6=_0x48fc37['x']+Math[_0x55b3fa(0xcce)]((_0x48fc37[_0x55b3fa(0x7b2)]-ImageManager[_0x55b3fa(0x824)])/0x2),_0x428838=_0x48fc37['y']+(_0x48fc37[_0x55b3fa(0x956)]-ImageManager[_0x55b3fa(0x282)])/0x2;this['drawIcon'](_0x13dbc6,_0x2887d6,_0x428838);},Window_ActorCommand['prototype'][_0x10ff30(0x43f)]=function(_0x65bb8d){const _0x4f1012=_0x10ff30;if(!(VisuMZ[_0x4f1012(0x95b)]['Settings'][_0x4f1012(0x304)]['ShowCosts']??!![]))return;const _0x50cdd3=this[_0x4f1012(0xbdb)](_0x65bb8d);if(![_0x4f1012(0x6f0),_0x4f1012(0x867),_0x4f1012(0x7dc)][_0x4f1012(0x778)](_0x50cdd3))return;const _0x1d53aa=this[_0x4f1012(0x321)](_0x65bb8d);let _0x5edeb5=null;if(_0x50cdd3===_0x4f1012(0x6f0))_0x5edeb5=$dataSkills[this['_actor'][_0x4f1012(0x701)]()];else _0x50cdd3===_0x4f1012(0x867)?_0x4f1012(0x8d5)===_0x4f1012(0xca9)?this[_0x4f1012(0x967)]=_0x15b80f:_0x5edeb5=$dataSkills[this[_0x4f1012(0x4e8)][_0x4f1012(0xb43)]()]:_0x5edeb5=$dataSkills[this[_0x4f1012(0xc2b)][_0x65bb8d][_0x4f1012(0x20a)]];this[_0x4f1012(0x758)](this[_0x4f1012(0x4e8)],_0x5edeb5,_0x1d53aa['x'],_0x1d53aa['y'],_0x1d53aa[_0x4f1012(0x7b2)]);},Window_ActorCommand[_0x10ff30(0xb0c)]['drawSkillCost']=function(_0x402629,_0x57b5e8,_0x43e35e,_0xdf2514,_0x5ecf99){const _0x4a706a=_0x10ff30;if(!_0x57b5e8)return;Imported[_0x4a706a(0x55b)]?Window_Command[_0x4a706a(0xb0c)][_0x4a706a(0x758)]['call'](this,_0x402629,_0x57b5e8,_0x43e35e,_0xdf2514,_0x5ecf99):'ZsKcs'!==_0x4a706a(0x886)?Window_SkillList[_0x4a706a(0xb0c)][_0x4a706a(0x758)][_0x4a706a(0xb96)](this,_0x57b5e8,_0x43e35e,_0xdf2514,_0x5ecf99):_0x19d56b=_0x4db295;},Window_ActorCommand['prototype'][_0x10ff30(0x34b)]=function(){},Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0x47f)]=function(){const _0x312672=_0x10ff30;Window_Command[_0x312672(0xb0c)][_0x312672(0x47f)]['call'](this);const _0x459ae3=this['battleLayoutStyle']();_0x459ae3===_0x312672(0x401)&&this[_0x312672(0x7ea)]();},Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0xc1b)]=function(){const _0x2f0740=_0x10ff30;if(this[_0x2f0740(0x674)])return this['_battleLayoutStyle'];return this[_0x2f0740(0x674)]=SceneManager[_0x2f0740(0x2df)][_0x2f0740(0xc1b)](),this[_0x2f0740(0x674)];},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xc25)]=Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0x542)],Window_ActorCommand['prototype'][_0x10ff30(0x542)]=function(_0x192965){const _0x3015e9=_0x10ff30,_0x47fafa=this[_0x3015e9(0xc1b)]();if(_0x192965&&['xp',_0x3015e9(0xc14)][_0x3015e9(0x778)](_0x47fafa))this[_0x3015e9(0x334)](_0x192965);else _0x192965&&[_0x3015e9(0x401)][_0x3015e9(0x778)](_0x47fafa)&&(this[_0x3015e9(0x517)](_0x192965),this[_0x3015e9(0x7ea)]());VisuMZ[_0x3015e9(0x95b)][_0x3015e9(0xc25)]['call'](this,_0x192965),_0x192965&&$gameTroop[_0x3015e9(0xc07)]()[_0x3015e9(0x449)]>0x0&&_0x192965[_0x3015e9(0x843)]()&&_0x192965[_0x3015e9(0x843)]()[_0x3015e9(0xade)]();},Window_ActorCommand[_0x10ff30(0xb0c)]['resizeWindowXPStyle']=function(_0x2f062f){const _0x27dd94=_0x10ff30,_0x36c5bd=Math[_0x27dd94(0x556)](Graphics[_0x27dd94(0xb97)]/0x3),_0xad5740=Math[_0x27dd94(0x556)](Graphics[_0x27dd94(0xb97)]/$gameParty[_0x27dd94(0xb03)]()[_0x27dd94(0x449)]),_0x4a9f71=Math[_0x27dd94(0xa7f)](_0x36c5bd,_0xad5740),_0x472aec=this['fittingHeight'](VisuMZ['BattleCore'][_0x27dd94(0x928)][_0x27dd94(0xa21)]['XPActorCommandLines']),_0x2500cf=Math[_0x27dd94(0x556)](_0xad5740*_0x2f062f['index']())+Math[_0x27dd94(0x556)]((_0xad5740-_0x4a9f71)/0x2),_0x1bd895=Math[_0x27dd94(0x556)](SceneManager[_0x27dd94(0x2df)][_0x27dd94(0x656)]['y']-_0x472aec);this[_0x27dd94(0x6dd)](_0x2500cf,_0x1bd895,_0x4a9f71,_0x472aec),this[_0x27dd94(0x925)](),this[_0x27dd94(0x8ab)](0x1);},Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0x517)]=function(_0x4ec084){const _0x5a7fd2=_0x10ff30,_0x1671b9=SceneManager[_0x5a7fd2(0x2df)][_0x5a7fd2(0x551)]();this[_0x5a7fd2(0x6dd)](_0x1671b9['x'],_0x1671b9['y'],_0x1671b9[_0x5a7fd2(0x7b2)],_0x1671b9[_0x5a7fd2(0x956)]),this['createContents'](),this['setBackgroundType'](0x0);},Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0xad4)]=function(){const _0x409a43=_0x10ff30;if(this[_0x409a43(0x9cc)]){if('HpCFR'===_0x409a43(0x6f1))this[_0x409a43(0x906)]()&&this['subject']()[_0x409a43(0xc86)]()?_0x42cc11['BattleCore'][_0x409a43(0x239)]['call'](this):this[_0x409a43(0xb10)]();else{const _0xe51f9=this[_0x409a43(0x9cc)][_0x409a43(0xc87)],_0x1b8e2d=this['width']-0x8,_0xbbd2d=this[_0x409a43(0x956)],_0x1f0e62=this[_0x409a43(0x962)],_0xa434f0=ColorManager[_0x409a43(0x59d)](),_0x2480af=ColorManager[_0x409a43(0x341)]();this[_0x409a43(0x9cc)]['x']=0x4,_0xe51f9[_0x409a43(0x8a4)](_0x1b8e2d,_0xbbd2d),_0xe51f9['gradientFillRect'](0x0,0x0,_0x1b8e2d,_0x1f0e62,_0x2480af,_0xa434f0,!![]),_0xe51f9[_0x409a43(0x5b4)](0x0,_0x1f0e62,_0x1b8e2d,_0xbbd2d-_0x1f0e62*0x2,_0xa434f0),_0xe51f9[_0x409a43(0xb7b)](0x0,_0xbbd2d-_0x1f0e62,_0x1b8e2d,_0x1f0e62,_0xa434f0,_0x2480af,!![]),this[_0x409a43(0x9cc)][_0x409a43(0xc6c)](0x0,0x0,_0x1b8e2d,_0xbbd2d);}}},Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0x52b)]=function(){const _0x84c03b=_0x10ff30;if(!this[_0x84c03b(0x4e8)])return;const _0xe6b167=VisuMZ[_0x84c03b(0x95b)][_0x84c03b(0x928)][_0x84c03b(0x304)],_0x1371e1=this[_0x84c03b(0x92b)]();switch(_0x1371e1){case _0x84c03b(0x6f0):this[_0x84c03b(0xcba)]($dataSkills[this['_actor']['attackSkillId']()]);break;case _0x84c03b(0x867):this[_0x84c03b(0xcba)]($dataSkills[this[_0x84c03b(0x4e8)][_0x84c03b(0xb43)]()]);break;case _0x84c03b(0x36c):const _0x10eb9d=_0xe6b167[_0x84c03b(0x47e)],_0x379a9a=_0x10eb9d[_0x84c03b(0x958)]($dataSystem[_0x84c03b(0x3e9)][this['currentExt']()]);this[_0x84c03b(0x4fd)]['setText'](_0x379a9a);break;case _0x84c03b(0x7dc):this[_0x84c03b(0xcba)]($dataSkills[this['currentExt']()]);break;case _0x84c03b(0x5c4):this[_0x84c03b(0x4fd)][_0x84c03b(0x4bf)](_0xe6b167['HelpItem']);break;case'escape':this['_helpWindow'][_0x84c03b(0x4bf)](_0xe6b167[_0x84c03b(0x5ba)]);break;case _0x84c03b(0xb21):this[_0x84c03b(0x4fd)]['setText'](_0xe6b167['HelpAutoBattle']);break;default:this[_0x84c03b(0x4fd)][_0x84c03b(0x4bf)]('');break;}},Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0x423)]=function(){const _0x30980a=_0x10ff30;this['forceSelect'](0x0);if(this[_0x30980a(0x4e8)]&&ConfigManager[_0x30980a(0xa28)]){const _0x6a5ce7=this[_0x30980a(0x4e8)][_0x30980a(0xc66)]();this[_0x30980a(0xc8b)](_0x6a5ce7);if(_0x6a5ce7===_0x30980a(0x36c)){const _0x2602c0=this['_actor'][_0x30980a(0x7de)]();if(_0x2602c0){const _0x110442=this['findSymbolExt'](_0x30980a(0x36c),_0x2602c0['stypeId']);this[_0x30980a(0x894)](_0x110442||0x0);}}else{if(_0x6a5ce7===_0x30980a(0x7dc)){const _0x1bd329=this[_0x30980a(0x4e8)][_0x30980a(0x7de)]();if(_0x1bd329){if(_0x30980a(0x94a)===_0x30980a(0x30d))_0x465304+=_0x52cbb1,_0x453bc5+=_0x3838c5[_0x30980a(0x58a)]()?-_0x141c83:_0x38cbe2;else{const _0x15495d=this[_0x30980a(0x32e)]('singleSkill',_0x1bd329['id']);this['select'](_0x15495d||0x0);}}}}}},Window_ActorCommand[_0x10ff30(0xb0c)][_0x10ff30(0x32e)]=function(_0x42d050,_0x45265c){const _0x190ca5=_0x10ff30;return this['_list'][_0x190ca5(0x61b)](_0x31f0e5=>_0x31f0e5[_0x190ca5(0x34f)]===_0x42d050&&_0x31f0e5['ext']===_0x45265c);},VisuMZ[_0x10ff30(0x95b)]['Window_BattleStatus_initialize']=Window_BattleStatus[_0x10ff30(0xb0c)][_0x10ff30(0x600)],Window_BattleStatus['prototype'][_0x10ff30(0x600)]=function(_0x19d16a){const _0xcc9253=_0x10ff30;VisuMZ[_0xcc9253(0x95b)][_0xcc9253(0x567)][_0xcc9253(0xb96)](this,_0x19d16a),this[_0xcc9253(0x2de)](),this[_0xcc9253(0xa77)]();},Window_BattleStatus[_0x10ff30(0xb0c)][_0x10ff30(0xc1b)]=function(){const _0x380050=_0x10ff30;if(this[_0x380050(0x674)])return this[_0x380050(0x674)];return this['_battleLayoutStyle']=SceneManager[_0x380050(0x2df)][_0x380050(0xc1b)](),this['_battleLayoutStyle'];},Window_BattleStatus['prototype'][_0x10ff30(0x2de)]=function(){const _0x48de28=_0x10ff30;this[_0x48de28(0x9d7)]=this[_0x48de28(0x9c5)]();const _0x1aa7c8=VisuMZ[_0x48de28(0x95b)][_0x48de28(0x928)]['BattleLayout'];_0x1aa7c8['StatusWindowSkinHide']&&('SPbRN'!==_0x48de28(0x87d)?_0x4d44af[_0x48de28(0xb0c)][_0x48de28(0x600)][_0x48de28(0xb96)](this):this[_0x48de28(0x443)]=0x0);},Window_BattleStatus['prototype']['isFrameVisible']=function(){const _0x31aab1=_0x10ff30,_0x14e05c=VisuMZ[_0x31aab1(0x95b)][_0x31aab1(0x928)][_0x31aab1(0xa21)];if(_0x14e05c[_0x31aab1(0x924)])return!![];const _0xc2a053=this[_0x31aab1(0xc1b)]();switch(_0xc2a053){case'list':case _0x31aab1(0x401):return!![];break;case _0x31aab1(0x281):case'xp':case _0x31aab1(0xc14):default:return![];break;}},Window_BattleStatus['prototype']['extraHeight']=function(){const _0x44aa87=_0x10ff30;return this[_0x44aa87(0x9c5)]()?0x0:0xa;},Window_BattleStatus[_0x10ff30(0xb0c)][_0x10ff30(0xa46)]=function(){const _0x4dd181=_0x10ff30,_0xb48f02=this[_0x4dd181(0xc1b)]();switch(_0xb48f02){case'list':return 0x1;break;case'xp':case _0x4dd181(0xc14):return $gameParty[_0x4dd181(0xb03)]()[_0x4dd181(0x449)];break;case _0x4dd181(0x281):default:return $gameParty[_0x4dd181(0x8a8)]();break;}},Window_BattleStatus[_0x10ff30(0xb0c)]['itemHeight']=function(){const _0x5a1310=_0x10ff30,_0x298c79=this[_0x5a1310(0xc1b)]();switch(_0x298c79){case _0x5a1310(0x9f4):return Window_StatusBase[_0x5a1310(0xb0c)]['itemHeight'][_0x5a1310(0xb96)](this);break;case _0x5a1310(0x281):case'xp':case _0x5a1310(0xc14):default:return this[_0x5a1310(0x833)];break;}},Window_BattleStatus[_0x10ff30(0xb0c)][_0x10ff30(0xa8b)]=function(){const _0x1b458d=_0x10ff30,_0x29f119=this[_0x1b458d(0xc1b)]();switch(_0x29f119){case _0x1b458d(0x9f4):return Window_StatusBase[_0x1b458d(0xb0c)]['rowSpacing'][_0x1b458d(0xb96)](this);break;case _0x1b458d(0x281):case'xp':case _0x1b458d(0xc14):default:return 0x0;break;}},Window_BattleStatus['prototype']['updatePadding']=function(){const _0x5e2331=_0x10ff30;this['isFrameVisible']()?Window_StatusBase[_0x5e2331(0xb0c)]['updatePadding'][_0x5e2331(0xb96)](this):'TazDK'!==_0x5e2331(0xb8e)?this[_0x5e2331(0x962)]=0x8:_0x42c5b4[_0x5e2331(0x4fb)]([_0x651689]);},Window_BattleStatus[_0x10ff30(0xb0c)][_0x10ff30(0x4bd)]=function(){const _0x51c0f8=_0x10ff30,_0xa9aa9=VisuMZ[_0x51c0f8(0x95b)][_0x51c0f8(0x928)][_0x51c0f8(0xa21)];_0xa9aa9[_0x51c0f8(0x924)]?this[_0x51c0f8(0x1c9)]=ImageManager['loadSystem'](_0xa9aa9[_0x51c0f8(0x924)]):Window_StatusBase[_0x51c0f8(0xb0c)]['loadWindowskin']['call'](this);},Window_BattleStatus[_0x10ff30(0xb0c)][_0x10ff30(0x30b)]=function(_0xa44894){const _0x2949c6=_0x10ff30,_0x38f55b=VisuMZ[_0x2949c6(0x95b)]['Settings'][_0x2949c6(0xa21)];if(_0x38f55b[_0x2949c6(0xb8b)])return;Window_StatusBase[_0x2949c6(0xb0c)][_0x2949c6(0x30b)]['call'](this,_0xa44894);},Window_BattleStatus['prototype'][_0x10ff30(0xbbf)]=function(){const _0x50ee17=_0x10ff30;this[_0x50ee17(0xac5)]=!![];},Window_BattleStatus[_0x10ff30(0xb0c)][_0x10ff30(0x78d)]=function(){const _0x12ed21=_0x10ff30;Window_StatusBase[_0x12ed21(0xb0c)][_0x12ed21(0x78d)][_0x12ed21(0xb96)](this),this[_0x12ed21(0x90e)](),this[_0x12ed21(0x9a4)]();if(this[_0x12ed21(0xc1b)]()===_0x12ed21(0x401))this['updateBorderStyle']();},Window_BattleStatus['prototype']['updateRefresh']=function(){const _0x4ff350=_0x10ff30;if($gameTemp['isBattleRefreshRequested']())this[_0x4ff350(0x2dd)](),this[_0x4ff350(0xac5)]=![],$gameTemp[_0x4ff350(0x2c7)]();else this[_0x4ff350(0xac5)]&&(this[_0x4ff350(0xac5)]=![],this[_0x4ff350(0x219)](),this[_0x4ff350(0x9f1)]());},Window_BattleStatus[_0x10ff30(0xb0c)][_0x10ff30(0xb71)]=function(){const _0x1d032f=_0x10ff30;Window_StatusBase[_0x1d032f(0xb0c)][_0x1d032f(0xb71)][_0x1d032f(0xb96)](this);if(!$gameSystem[_0x1d032f(0xa7c)]())this[_0x1d032f(0x219)]();},Window_BattleStatus[_0x10ff30(0xb0c)][_0x10ff30(0x34b)]=function(){const _0x949c15=_0x10ff30;if(this[_0x949c15(0x602)]===Window_BattleStatus)return;Window_StatusBase['prototype'][_0x949c15(0x34b)][_0x949c15(0xb96)](this);},Window_BattleStatus[_0x10ff30(0xb0c)]['drawBackgroundRect']=function(_0xce8f98){const _0x499f6f=_0x10ff30,_0x775d5d=this['battleLayoutStyle']();switch(_0x775d5d){case'xp':case _0x499f6f(0xc14):break;case'default':case _0x499f6f(0x9f4):case _0x499f6f(0x401):default:return Window_StatusBase[_0x499f6f(0xb0c)][_0x499f6f(0x9e7)]['call'](this,_0xce8f98);break;}},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x669)]=Window_BattleStatus[_0x10ff30(0xb0c)][_0x10ff30(0x820)],Window_BattleStatus[_0x10ff30(0xb0c)][_0x10ff30(0x820)]=function(_0x350039){const _0x313328=_0x10ff30,_0x8d501b=this[_0x313328(0xc1b)]();switch(_0x8d501b){case _0x313328(0x9f4):this[_0x313328(0x30e)](_0x350039);break;case'xp':this[_0x313328(0x9e8)](_0x350039);break;case'portrait':this[_0x313328(0x5f9)](_0x350039);break;case _0x313328(0x281):case _0x313328(0x401):default:VisuMZ[_0x313328(0x95b)][_0x313328(0x669)][_0x313328(0xb96)](this,_0x350039);break;}},Window_BattleStatus[_0x10ff30(0xb0c)]['drawItemStatus']=function(_0x10b3e7){const _0x416db2=_0x10ff30,_0x3f5479=this['battleLayoutStyle']();if(!$gameSystem[_0x416db2(0xa7c)]())this[_0x416db2(0xc50)](_0x10b3e7);switch(_0x3f5479){case _0x416db2(0x9f4):this['drawItemStatusListStyle'](_0x10b3e7);break;case'xp':case _0x416db2(0xc14):case _0x416db2(0x281):case'border':default:this[_0x416db2(0xb6a)](_0x10b3e7);break;}},Window_BattleStatus['prototype'][_0x10ff30(0x269)]=function(){const _0x3d7601=_0x10ff30,_0x497e54=this[_0x3d7601(0xc1b)]();if(['xp'][_0x3d7601(0x778)](_0x497e54)&&!$gameSystem[_0x3d7601(0xa7c)]()){if(_0x3d7601(0xcd1)!==_0x3d7601(0xcd1))_0x126108[_0x3d7601(0x95b)][_0x3d7601(0x29c)]['call'](this);else{this['setCursorRect'](0x0,0x0,0x0,0x0);return;}}Window_StatusBase[_0x3d7601(0xb0c)][_0x3d7601(0x269)][_0x3d7601(0xb96)](this);},Window_BattleStatus[_0x10ff30(0xb0c)]['centerFrontViewSprite']=function(_0x3e2bb4){const _0x19f802=_0x10ff30,_0x3c624a=this[_0x19f802(0x9fe)](_0x3e2bb4)[_0x19f802(0x843)]();if(!_0x3c624a)return;const _0x220967=this['battleLayoutStyle'](),_0x579f57=this[_0x19f802(0x6b4)](_0x3e2bb4);let _0x1cedbc=Math[_0x19f802(0x556)](_0x579f57['x']+_0x579f57['width']/0x2)+this['padding'];[_0x19f802(0x9f4)][_0x19f802(0x778)](_0x220967)&&(_0x1cedbc=_0x579f57['width']/$gameParty['battleMembers']()[_0x19f802(0x449)],_0x1cedbc*=_0x3e2bb4,_0x1cedbc+=_0x579f57['width']/$gameParty[_0x19f802(0xb03)]()[_0x19f802(0x449)]/0x2);let _0x2c948c=Math[_0x19f802(0x556)](this[_0x19f802(0x900)](_0x3e2bb4,_0x3c624a,_0x579f57));_0x3c624a[_0x19f802(0x55a)](_0x1cedbc,_0x2c948c),this['addChildAt'](_0x3c624a,0x1),_0x3c624a['show'](),this[_0x19f802(0xc40)](),this['updateAttachmentSprites']();},Window_BattleStatus[_0x10ff30(0xb0c)][_0x10ff30(0x900)]=function(_0x24c1cb,_0xf90f5d,_0x359e72){const _0x34738e=_0x10ff30,_0x16e1a1=VisuMZ[_0x34738e(0x95b)][_0x34738e(0x928)][_0x34738e(0xa21)],_0x3e7a15=this[_0x34738e(0xc1b)]();if(_0x3e7a15==='xp'){const _0x21fbd0=_0x16e1a1[_0x34738e(0x877)];switch(_0x21fbd0[_0x34738e(0x799)]()['trim']()){case _0x34738e(0x8d6):return _0x359e72[_0x34738e(0x956)]-_0xf90f5d[_0x34738e(0x96e)]['height']/0x4;break;case _0x34738e(0x4e3):const _0x495cb4=_0x16e1a1[_0x34738e(0xcb3)];return(_0x359e72[_0x34738e(0x956)]+(_0xf90f5d[_0x34738e(0x956)]||_0x495cb4))/0x2;break;case _0x34738e(0x441):return 0x0;case _0x34738e(0x52f):default:return this[_0x34738e(0xc3a)](_0x359e72);break;}}else{if(_0x3e7a15===_0x34738e(0xc14)){}}return _0xf90f5d[_0x34738e(0x956)];},Sprite_Name['prototype'][_0x10ff30(0x5e1)]=function(){return 0x24;},Sprite_Name[_0x10ff30(0xb0c)][_0x10ff30(0x8ae)]=function(){const _0x1e81a0=_0x10ff30,_0x289cb=this[_0x1e81a0(0x52f)](),_0x13d7a6=this['bitmapWidth'](),_0x1b5ed1=this[_0x1e81a0(0x5e1)]();this[_0x1e81a0(0x2db)](),this['bitmap'][_0x1e81a0(0xb10)](),this[_0x1e81a0(0xc87)][_0x1e81a0(0x8d0)](_0x289cb,0x0,0x0,_0x13d7a6,_0x1b5ed1,_0x1e81a0(0x610));},Bitmap['prototype'][_0x10ff30(0x8d0)]=function(_0x1190da,_0x5b0f08,_0x4c6a87,_0x592972,_0x5c4beb,_0x4cfa44){const _0xfd51fc=_0x10ff30,_0xa5ca49=this[_0xfd51fc(0x49e)],_0x520c65=_0xa5ca49[_0xfd51fc(0x88b)];_0x592972=_0x592972||0xffffffff;let _0x5d0f98=_0x5b0f08,_0x4c4704=Math[_0xfd51fc(0x556)](_0x4c6a87+0x18/0x2+this['fontSize']*0.35);_0x4cfa44===_0xfd51fc(0x4e3)&&(_0x5d0f98+=_0x592972/0x2),_0x4cfa44===_0xfd51fc(0x7a5)&&(_0xfd51fc(0x849)!==_0xfd51fc(0xa01)?_0x5d0f98+=_0x592972:(this[_0xfd51fc(0x517)](_0xef62bd),this[_0xfd51fc(0x7ea)]())),_0xa5ca49[_0xfd51fc(0x1f2)](),_0xa5ca49['font']=this[_0xfd51fc(0x1fc)](),_0xa5ca49[_0xfd51fc(0x54b)]=_0x4cfa44,_0xa5ca49[_0xfd51fc(0x5c6)]='alphabetic',_0xa5ca49[_0xfd51fc(0x88b)]=0x1,this[_0xfd51fc(0xc71)](_0x1190da,_0x5d0f98,_0x4c4704,_0x592972),_0xa5ca49[_0xfd51fc(0x88b)]=_0x520c65,this[_0xfd51fc(0x7c3)](_0x1190da,_0x5d0f98,_0x4c4704,_0x592972),_0xa5ca49[_0xfd51fc(0x6fe)](),this['_baseTexture']['update']();},Window_BattleStatus[_0x10ff30(0xb0c)][_0x10ff30(0xc3a)]=function(_0x27a63b){return this['basicGaugesY'](_0x27a63b)-this['gaugeLineHeight']();},Window_BattleStatus[_0x10ff30(0xb0c)][_0x10ff30(0x30e)]=function(_0x3b24a2){const _0x271522=_0x10ff30;if(!VisuMZ['BattleCore']['Settings'][_0x271522(0xa21)]['ShowFacesListStyle'])return;const _0x54888a=this[_0x271522(0x9fe)](_0x3b24a2),_0x3cf747=this[_0x271522(0x6b4)](_0x3b24a2);_0x3cf747[_0x271522(0x7b2)]=ImageManager['faceWidth'],_0x3cf747[_0x271522(0x956)]-=0x2,this[_0x271522(0x935)](_0x54888a,_0x3cf747['x']+0x1,_0x3cf747['y']+0x1,_0x3cf747[_0x271522(0x7b2)],_0x3cf747[_0x271522(0x956)]);},Window_BattleStatus[_0x10ff30(0xb0c)][_0x10ff30(0x253)]=function(_0x37f5b4){const _0x366258=_0x10ff30,_0x4fb080=VisuMZ[_0x366258(0x95b)][_0x366258(0x928)]['BattleLayout'],_0x45ea9d=$dataSystem[_0x366258(0x508)]?0x4:0x3,_0x1eaca3=_0x45ea9d*0x80+(_0x45ea9d-0x1)*0x8+0x4,_0x4fb0dd=this[_0x366258(0x9fe)](_0x37f5b4),_0x4de89e=this[_0x366258(0x6b4)](_0x37f5b4);let _0x177969=_0x4de89e['x']+this['padding'];_0x4fb080[_0x366258(0x719)]?_0x177969=_0x4de89e['x']+ImageManager[_0x366258(0x2a0)]+0x8:_0x177969+=ImageManager[_0x366258(0x824)];const _0x4bb587=Math[_0x366258(0x556)](Math[_0x366258(0xa7f)](_0x4de89e['x']+_0x4de89e[_0x366258(0x7b2)]-_0x1eaca3,_0x177969)),_0x2332b7=Math[_0x366258(0x556)](_0x4de89e['y']+(_0x4de89e[_0x366258(0x956)]-Sprite_Name['prototype'][_0x366258(0x5e1)]())/0x2),_0xa02ad6=Math['round'](_0x4bb587-ImageManager[_0x366258(0x824)]/0x2-0x4),_0x19cb3b=Math[_0x366258(0x556)](_0x4de89e['y']+(_0x4de89e['height']-ImageManager['iconHeight'])/0x2+ImageManager[_0x366258(0x282)]/0x2);let _0x558af3=_0x4bb587+0x88;const _0x54c566=_0x2332b7;this['placeTimeGauge'](_0x4fb0dd,_0x4bb587-0x4+(_0x4fb080[_0x366258(0xc88)]||0x0),_0x2332b7+(_0x4fb080[_0x366258(0x947)]||0x0)),this[_0x366258(0x679)](_0x4fb0dd,_0x4bb587+(_0x4fb080['NameOffsetX']||0x0),_0x2332b7+(_0x4fb080[_0x366258(0x95c)]||0x0)),this['placeStateIcon'](_0x4fb0dd,_0xa02ad6+(_0x4fb080['StateIconOffsetX']||0x0),_0x19cb3b+(_0x4fb080[_0x366258(0xaba)]||0x0)),this['placeGauge'](_0x4fb0dd,'hp',_0x558af3+0x88*0x0+(_0x4fb080['HpGaugeOffsetX']||0x0),_0x54c566+(_0x4fb080[_0x366258(0x409)]||0x0)),this[_0x366258(0x3dc)](_0x4fb0dd,'mp',_0x558af3+0x88*0x1+(_0x4fb080[_0x366258(0xb90)]||0x0),_0x54c566+(_0x4fb080[_0x366258(0x5be)]||0x0)),$dataSystem[_0x366258(0x508)]&&this[_0x366258(0x3dc)](_0x4fb0dd,'tp',_0x558af3+0x88*0x2+(_0x4fb080[_0x366258(0x507)]||0x0),_0x54c566+(_0x4fb080[_0x366258(0x659)]||0x0));},Window_BattleStatus['prototype'][_0x10ff30(0x9e8)]=function(_0x1236d0){const _0xd9e6ef=_0x10ff30;if(!$gameSystem[_0xd9e6ef(0xa7c)]())return;VisuMZ[_0xd9e6ef(0x95b)][_0xd9e6ef(0x669)][_0xd9e6ef(0xb96)](this,_0x1236d0);},Window_BattleStatus[_0x10ff30(0xb0c)]['drawItemStatusXPStyle']=function(_0x5a05e4){const _0x48bd66=_0x10ff30,_0x3ccc7b=VisuMZ[_0x48bd66(0x95b)][_0x48bd66(0x928)]['BattleLayout'],_0x337528=this[_0x48bd66(0x9fe)](_0x5a05e4),_0x666c4c=this[_0x48bd66(0x6b4)](_0x5a05e4),_0x4796ae=Math[_0x48bd66(0x556)](_0x666c4c['x']+(_0x666c4c[_0x48bd66(0x7b2)]-0x80)/0x2),_0x5b0125=this[_0x48bd66(0xc3a)](_0x666c4c);let _0x2b7e66=_0x4796ae-ImageManager[_0x48bd66(0x824)]/0x2-0x4,_0x777f1=_0x5b0125+ImageManager[_0x48bd66(0x282)]/0x2;_0x2b7e66-ImageManager['iconWidth']/0x2<_0x666c4c['x']&&(_0x2b7e66=_0x4796ae+ImageManager[_0x48bd66(0x824)]/0x2-0x4,_0x777f1=_0x5b0125-ImageManager['iconHeight']/0x2);const _0x587771=_0x4796ae,_0x3c609a=this['basicGaugesY'](_0x666c4c);this[_0x48bd66(0x41e)](_0x337528,_0x4796ae+(_0x3ccc7b['TpbGaugeOffsetX']||0x0),_0x5b0125+(_0x3ccc7b[_0x48bd66(0x947)]||0x0)),this[_0x48bd66(0x679)](_0x337528,_0x4796ae+(_0x3ccc7b[_0x48bd66(0x289)]||0x0),_0x5b0125+(_0x3ccc7b[_0x48bd66(0x95c)]||0x0)),this[_0x48bd66(0xbed)](_0x337528,_0x2b7e66+(_0x3ccc7b[_0x48bd66(0x8bb)]||0x0),_0x777f1+(_0x3ccc7b['StateIconOffsetY']||0x0)),this[_0x48bd66(0x3dc)](_0x337528,'hp',_0x587771+(_0x3ccc7b[_0x48bd66(0x91e)]||0x0),_0x3c609a+(_0x3ccc7b[_0x48bd66(0x409)]||0x0)),this[_0x48bd66(0x3dc)](_0x337528,'mp',_0x587771+(_0x3ccc7b[_0x48bd66(0xb90)]||0x0),_0x3c609a+this[_0x48bd66(0x207)]()+(_0x3ccc7b[_0x48bd66(0x5be)]||0x0));if($dataSystem[_0x48bd66(0x508)]){if('eEQut'===_0x48bd66(0x444)){const _0x4ad3de=_0x22bdc5['item']();this[_0x48bd66(0x6d2)](_0x163fc6,_0x4e356f,_0x3dd0ec),this[_0x48bd66(0x57e)](_0x21874a,_0x1cfb24,_0x416473),this['finishActionSet'](_0x1df98e,_0x6ba675,_0x3e991c);}else this[_0x48bd66(0x3dc)](_0x337528,'tp',_0x587771+(_0x3ccc7b[_0x48bd66(0x507)]||0x0),_0x3c609a+this['gaugeLineHeight']()*0x2+(_0x3ccc7b[_0x48bd66(0x659)]||0x0));}},Window_BattleStatus['prototype'][_0x10ff30(0x647)]=function(_0x385118){const _0x1248c7=_0x10ff30;if(!VisuMZ[_0x1248c7(0x95b)][_0x1248c7(0x928)][_0x1248c7(0xa21)][_0x1248c7(0x370)])return![];if(_0x385118['getBattlePortrait']())return!![];return Imported[_0x1248c7(0x7d2)]&&_0x385118[_0x1248c7(0x83f)]();},Game_Actor[_0x10ff30(0xb0c)][_0x10ff30(0xb50)]=function(){const _0xe46fcd=_0x10ff30;if(this['actor']()['note'][_0xe46fcd(0x22f)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i)){if('HBHZb'!==_0xe46fcd(0xaa9))this[_0xe46fcd(0x962)]=0x8;else return Number(RegExp['$1']);}else{if(this['actor']()[_0xe46fcd(0x7ed)][_0xe46fcd(0x22f)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x10ff30(0xb0c)]['getBattlePortraitOffsetY']=function(){const _0x1080b0=_0x10ff30;if(this['actor']()[_0x1080b0(0x7ed)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x1080b0(0x9fe)]()[_0x1080b0(0x7ed)][_0x1080b0(0x22f)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if('sClot'!==_0x1080b0(0x6f8))this[_0x1080b0(0x93e)]['x']=_0x5e58d1[_0x1080b0(0x7b2)]-(_0x3fcc67[_0x1080b0(0x7b2)]-_0x1bff8a[_0x1080b0(0xb97)])/0x2-this[_0x1080b0(0x93e)][_0x1080b0(0x7b2)]-0x4;else return Number(RegExp['$2']);}}return 0x0;},Window_BattleStatus['prototype']['drawItemImagePortraitStyle']=function(_0x5365b1){const _0xf7e149=_0x10ff30,_0x3a3bd5=this['actor'](_0x5365b1);if(this[_0xf7e149(0x647)](_0x3a3bd5)){const _0x2fcf1b='actor%1-portrait'[_0xf7e149(0x958)](_0x3a3bd5[_0xf7e149(0x28e)]()),_0x2943f2=this['createInnerPortrait'](_0x2fcf1b,Sprite),_0x2fa7b6=_0x3a3bd5[_0xf7e149(0x3da)]();_0x2fa7b6!==''?_0x2943f2[_0xf7e149(0xc87)]=ImageManager['loadPicture'](_0x2fa7b6):_0x2943f2[_0xf7e149(0xc87)]=ImageManager[_0xf7e149(0xc60)];const _0x1e9aba=this[_0xf7e149(0x6b4)](_0x5365b1);_0x2943f2[_0xf7e149(0x8eb)]['x']=0.5,_0x2943f2['anchor']['y']=0x1;let _0x4eb442=Math[_0xf7e149(0x556)](_0x1e9aba['x']+_0x1e9aba['width']/0x2)+this[_0xf7e149(0x962)];_0x4eb442+=_0x3a3bd5[_0xf7e149(0xb50)]();let _0x42b6ae=Math[_0xf7e149(0x556)](this['height']);_0x42b6ae+=_0x3a3bd5[_0xf7e149(0x65c)](),_0x2943f2[_0xf7e149(0x6dd)](_0x4eb442,_0x42b6ae);const _0x10adb4=VisuMZ[_0xf7e149(0x95b)][_0xf7e149(0x928)][_0xf7e149(0xa21)][_0xf7e149(0xa60)];_0x2943f2[_0xf7e149(0x808)]['x']=_0x10adb4,_0x2943f2[_0xf7e149(0x808)]['y']=_0x10adb4,_0x2943f2[_0xf7e149(0xb71)]();}else{const _0x298ce4=this[_0xf7e149(0x374)](_0x5365b1);this[_0xf7e149(0x935)](_0x3a3bd5,_0x298ce4['x'],_0x298ce4['y'],_0x298ce4[_0xf7e149(0x7b2)],_0x298ce4[_0xf7e149(0x956)]);}},Window_BattleStatus[_0x10ff30(0xb0c)][_0x10ff30(0xb1f)]=function(_0x39e6a3,_0x48fead){const _0x35a7f0=_0x10ff30,_0x2f8269=this[_0x35a7f0(0xbfd)];if(_0x2f8269[_0x39e6a3])return _0x35a7f0(0x5ff)!==_0x35a7f0(0xc5f)?_0x2f8269[_0x39e6a3]:_0x2767a5[_0x35a7f0(0xb0c)]['damageOffsetX'][_0x35a7f0(0xb96)](this);else{const _0x269e5a=new _0x48fead();return _0x2f8269[_0x39e6a3]=_0x269e5a,this[_0x35a7f0(0x25a)](_0x269e5a),this[_0x35a7f0(0x25a)](this['_cursorArea']),_0x269e5a;}},Window_BattleStatus[_0x10ff30(0xb0c)][_0x10ff30(0x8c4)]=function(){const _0x22df96=_0x10ff30;this[_0x22df96(0x69b)](),this[_0x22df96(0xa3d)](),Window_StatusBase[_0x22df96(0xb0c)][_0x22df96(0x8c4)][_0x22df96(0xb96)](this),this[_0x22df96(0x400)]();},Window_BattleStatus[_0x10ff30(0xb0c)][_0x10ff30(0x69b)]=function(){const _0x465607=_0x10ff30;this[_0x465607(0x636)]=new Sprite(),this['_cursorArea'][_0x465607(0x983)]=[new PIXI[(_0x465607(0x983))][(_0x465607(0x871))]()],this[_0x465607(0x636)][_0x465607(0xa02)]=new Rectangle(),this[_0x465607(0x636)][_0x465607(0x6dd)](this['_padding'],this[_0x465607(0x738)]),this[_0x465607(0x440)](this[_0x465607(0x636)]);},Window_BattleStatus['prototype'][_0x10ff30(0xa3d)]=function(){const _0x29896b=_0x10ff30;this[_0x29896b(0x7d6)]=new Sprite(),this['addChild'](this['_effectsContainer']);},Window_BattleStatus['prototype']['updateEffectsContainer']=function(){const _0x58494a=_0x10ff30;this[_0x58494a(0x7d6)]&&(_0x58494a(0x492)!=='eXFRP'?this[_0x58494a(0x440)](this['_effectsContainer']):(_0x327028['BattleCore']['Scene_Battle_onActorOk']['call'](this),this[_0x58494a(0x772)]()));},Window_BattleStatus[_0x10ff30(0xb0c)]['_createDamageContainer']=function(){const _0xdd08fa=_0x10ff30;this[_0xdd08fa(0x8d9)]=new Sprite(),this['addChild'](this['_damageContainer']);},Window_BattleStatus[_0x10ff30(0xb0c)][_0x10ff30(0x84c)]=function(){const _0x303a5c=_0x10ff30;this[_0x303a5c(0x1ce)]=new Sprite();for(let _0x60f08d=0x0;_0x60f08d<0x9;_0x60f08d++){if(_0x303a5c(0x73f)!==_0x303a5c(0x73f)){if(!_0x4e9739[_0x303a5c(0xa7c)]())return;const _0x3c939d=this['battler']();if(!_0x3c939d)return;_0x3c939d[_0x303a5c(0x783)](_0x4c04e8,_0x2313ee,_0x354088,_0xd43dc8);}else this[_0x303a5c(0x1ce)][_0x303a5c(0x440)](new Sprite());}this[_0x303a5c(0x636)]['addChild'](this[_0x303a5c(0x1ce)]);},Window_BattleStatus[_0x10ff30(0xb0c)]['_updateClientArea']=function(){const _0x47b1ac=_0x10ff30;Window_StatusBase[_0x47b1ac(0xb0c)][_0x47b1ac(0x3b9)]['call'](this),this[_0x47b1ac(0x995)]();},Window_BattleStatus['prototype'][_0x10ff30(0x995)]=function(){const _0x524eb7=_0x10ff30,_0xc2336a=this[_0x524eb7(0x738)];this['_cursorArea'][_0x524eb7(0x6dd)](_0xc2336a,_0xc2336a),this[_0x524eb7(0x636)]['x']=_0xc2336a-this[_0x524eb7(0x234)]['x'],this['_cursorArea']['y']=_0xc2336a-this[_0x524eb7(0x234)]['y'],this[_0x524eb7(0x951)]>0x0&&this[_0x524eb7(0x833)]>0x0?this[_0x524eb7(0x636)]['visible']=this[_0x524eb7(0x8be)]():_0x524eb7(0xb2d)!==_0x524eb7(0x2a5)?this[_0x524eb7(0x636)][_0x524eb7(0x905)]=![]:(_0x4be5b5[_0x524eb7(0xc41)](_0x4ec0ae),this['callNextMethod']());},Window_BattleStatus['prototype'][_0x10ff30(0xa4b)]=function(){const _0x2fbe08=_0x10ff30;Window_StatusBase[_0x2fbe08(0xb0c)][_0x2fbe08(0xa4b)][_0x2fbe08(0xb96)](this),this[_0x2fbe08(0x266)]();},Window_BattleStatus['prototype'][_0x10ff30(0x266)]=function(){const _0x414657=_0x10ff30,_0x16e306=this[_0x414657(0x636)][_0x414657(0x74b)]['apply'](new Point(0x0,0x0)),_0x539b4b=this[_0x414657(0x636)][_0x414657(0xa02)];_0x539b4b['x']=_0x16e306['x']+this[_0x414657(0x234)]['x'],_0x539b4b['y']=_0x16e306['y']+this[_0x414657(0x234)]['y'],_0x539b4b['width']=this[_0x414657(0x951)],_0x539b4b[_0x414657(0x956)]=this[_0x414657(0x833)];},Window_BattleStatus[_0x10ff30(0xb0c)][_0x10ff30(0x3b2)]=function(_0x2ad65a){const _0x158198=_0x10ff30;if(this[_0x158198(0xc1b)]()!==_0x158198(0xc14))return;this[_0x158198(0x5f9)](_0x2ad65a[_0x158198(0x3b4)]());},Window_BattleStatus[_0x10ff30(0xb0c)][_0x10ff30(0x4eb)]=function(_0x377c45,_0xcaa6af){const _0x2f71fc=_0x10ff30;if(!this[_0x2f71fc(0x8d9)])return;if(!_0x377c45)return;if(!_0xcaa6af)return;const _0x40d817=this[_0x2f71fc(0x6b4)](_0xcaa6af[_0x2f71fc(0x3b4)]());_0x40d817['x']+=_0x40d817[_0x2f71fc(0x7b2)]/0x2+this['padding'],_0x377c45['x']=_0x40d817['x'],_0x377c45['y']=_0x40d817['y'],this[_0x2f71fc(0x8d9)][_0x2f71fc(0x440)](_0x377c45);},Window_BattleStatus['prototype'][_0x10ff30(0x934)]=function(_0x5b9e65){const _0x319275=_0x10ff30;if(!this['_damageContainer'])return;if(!_0x5b9e65)return;this[_0x319275(0x8d9)][_0x319275(0x976)](_0x5b9e65);},Window_BattleStatus[_0x10ff30(0xb0c)]['updateBorderStyle']=function(){const _0x4e73e3=_0x10ff30;if(!this[_0x4e73e3(0x920)]())return;if(!this[_0x4e73e3(0x83c)])this['createBorderStylePortraitSprite']();this['prepareBorderActor'](),this[_0x4e73e3(0x4b4)]();},Window_BattleStatus[_0x10ff30(0xb0c)][_0x10ff30(0x920)]=function(){const _0x21b912=_0x10ff30;if(this[_0x21b912(0x602)]!==Window_BattleStatus)return![];if(!SceneManager[_0x21b912(0xc1e)]())return![];return VisuMZ[_0x21b912(0x95b)][_0x21b912(0x928)][_0x21b912(0xa21)]['ShowPortraitsBorderStyle'];},Window_BattleStatus[_0x10ff30(0xb0c)][_0x10ff30(0x965)]=function(){const _0x5c4d27=_0x10ff30;this[_0x5c4d27(0x83c)]=new Sprite();const _0x396159=SceneManager[_0x5c4d27(0x2df)],_0x4dfa93=_0x396159[_0x5c4d27(0x854)][_0x5c4d27(0xbc2)](_0x396159[_0x5c4d27(0x4af)]);_0x396159[_0x5c4d27(0x821)](this['_borderPortraitSprite'],_0x4dfa93),this[_0x5c4d27(0x83c)]['anchor']['x']=0.5,this[_0x5c4d27(0x83c)][_0x5c4d27(0x8eb)]['y']=0x1;const _0x471fe0=VisuMZ[_0x5c4d27(0x95b)][_0x5c4d27(0x928)]['BattleLayout'][_0x5c4d27(0x77d)];this['_borderPortraitSprite']['scale']['x']=_0x471fe0,this[_0x5c4d27(0x83c)]['scale']['y']=_0x471fe0,this[_0x5c4d27(0x83c)]['y']=this['y']+this['height'],this[_0x5c4d27(0x5c3)]=0x0;},Window_BattleStatus[_0x10ff30(0xb0c)][_0x10ff30(0xbf2)]=function(){const _0xf947c=_0x10ff30;this[_0xf947c(0x83c)][_0xf947c(0x905)]=BattleManager[_0xf947c(0x817)]();const _0xb37b74=BattleManager[_0xf947c(0x9fe)]();if(_0xb37b74===this[_0xf947c(0x83c)][_0xf947c(0x9fe)])return;this[_0xf947c(0x83c)]['actor']=_0xb37b74||this[_0xf947c(0x83c)][_0xf947c(0x9fe)];if(!_0xb37b74)return;else{if(_0xb37b74['getBattlePortraitFilename']()===''){this[_0xf947c(0x83c)][_0xf947c(0xc87)]=ImageManager[_0xf947c(0xc60)];return;}else{const _0x326a71=ImageManager[_0xf947c(0x578)](_0xb37b74[_0xf947c(0x3da)]());_0x326a71[_0xf947c(0x2ff)](this[_0xf947c(0x892)][_0xf947c(0x973)](this,_0x326a71));}}},Window_BattleStatus['prototype']['processBorderActor']=function(_0x59c93a){const _0x1dd607=_0x10ff30;this['_borderPortraitDuration']=0x14,this[_0x1dd607(0x83c)]['bitmap']=_0x59c93a;SceneManager['_scene'][_0x1dd607(0xa73)]()?(this[_0x1dd607(0x83c)]['x']=0x0,this[_0x1dd607(0xc96)]=Math[_0x1dd607(0xbc5)](_0x59c93a['width']/0x2)):(this['_borderPortraitSprite']['x']=this[_0x1dd607(0x7b2)],this[_0x1dd607(0xc96)]=this[_0x1dd607(0x7b2)]*0x3/0x4);this[_0x1dd607(0x83c)]['opacity']=0x0,this[_0x1dd607(0x83c)]['y']=this['y']+this[_0x1dd607(0x956)];const _0x38b9c8=BattleManager[_0x1dd607(0x9fe)]();_0x38b9c8&&(this[_0x1dd607(0xc96)]+=_0x38b9c8[_0x1dd607(0xb50)](),this[_0x1dd607(0x83c)]['y']+=_0x38b9c8[_0x1dd607(0x65c)]());},Window_BattleStatus['prototype'][_0x10ff30(0x4b4)]=function(){const _0x458339=_0x10ff30;if(this['_borderPortraitDuration']>0x0){const _0x287440=this[_0x458339(0x5c3)],_0x29bc88=this[_0x458339(0x83c)];_0x29bc88['x']=(_0x29bc88['x']*(_0x287440-0x1)+this[_0x458339(0xc96)])/_0x287440,_0x29bc88[_0x458339(0x443)]=(_0x29bc88[_0x458339(0x443)]*(_0x287440-0x1)+0xff)/_0x287440,this[_0x458339(0x5c3)]--;}},Window_BattleStatus[_0x10ff30(0xb0c)][_0x10ff30(0x9a4)]=function(){const _0x146df5=_0x10ff30;return;this[_0x146df5(0x7d6)]&&(this[_0x146df5(0x7d6)]['x']=this['x'],this[_0x146df5(0x7d6)]['y']=this['y']),this[_0x146df5(0x8d9)]&&(_0x146df5(0x501)==='PvhBq'?(this[_0x146df5(0x8d9)]['x']=this['x'],this[_0x146df5(0x8d9)]['y']=this['y']):_0x43dc65['setWaitMode'](_0x146df5(0xcab)));},Window_BattleStatus[_0x10ff30(0xb0c)]['createAttachmentSprites']=function(){const _0x5ddb2b=_0x10ff30,_0x6ec4b7=VisuMZ[_0x5ddb2b(0x95b)][_0x5ddb2b(0x928)]['BattleLayout'];if(_0x6ec4b7[_0x5ddb2b(0x43c)]){const _0x56a28c=new Sprite();_0x56a28c[_0x5ddb2b(0xc87)]=ImageManager[_0x5ddb2b(0xa97)](_0x6ec4b7[_0x5ddb2b(0x43c)]),_0x56a28c['x']=_0x6ec4b7[_0x5ddb2b(0xb9e)]||0x0,_0x56a28c['y']=_0x6ec4b7[_0x5ddb2b(0x96b)]||0x0,this[_0x5ddb2b(0x25a)](_0x56a28c),this[_0x5ddb2b(0xa4c)]=_0x56a28c;}if(_0x6ec4b7['StatusWindowAttachmentFront']){if(_0x5ddb2b(0xb37)!==_0x5ddb2b(0xcaf)){const _0x201991=new Sprite();_0x201991['bitmap']=ImageManager[_0x5ddb2b(0xa97)](_0x6ec4b7[_0x5ddb2b(0xcb7)]),_0x201991['x']=_0x6ec4b7[_0x5ddb2b(0x9dd)]||0x0,_0x201991['y']=_0x6ec4b7[_0x5ddb2b(0x3c0)]||0x0,this[_0x5ddb2b(0x440)](_0x201991),this['_frontAttachmentSprite']=_0x201991;}else _0x5b45fc[_0x5ddb2b(0x7bf)]();}},Window_BattleStatus[_0x10ff30(0xb0c)][_0x10ff30(0x9f1)]=function(){const _0x22f87d=_0x10ff30;this[_0x22f87d(0xa69)]&&this[_0x22f87d(0x440)](this[_0x22f87d(0xa69)]);if(this['_backAttachmentSprite']){if(_0x22f87d(0x991)!==_0x22f87d(0xb38))this[_0x22f87d(0x25a)](this[_0x22f87d(0xa4c)]);else{if(!_0x35acf8[_0x22f87d(0x95b)][_0x22f87d(0x61c)])return;if(_0x87511d[_0x22f87d(0x643)]&&_0x24f705[_0x22f87d(0x203)]())return;const _0x5d8080=_0x660e47[_0x22f87d(0xc07)]()[_0x22f87d(0xb68)](_0x29667a=>_0x29667a[_0x22f87d(0xc6e)]()&&_0x29667a[_0x22f87d(0x5f7)]());_0x299c47[_0x22f87d(0xb12)]=_0x5d8080[0x0]||null,_0x348bee['_currentActor']&&_0x50323b[_0x22f87d(0xb12)][_0x22f87d(0xa64)]('inputting');}}},Window_BattleActor['prototype']['isOkEnabled']=function(){const _0xead003=_0x10ff30;return Window_BattleStatus[_0xead003(0xb0c)][_0xead003(0x66e)][_0xead003(0xb96)](this)&&this['isActionSelectionValid']();},Window_BattleActor[_0x10ff30(0xb0c)][_0x10ff30(0x419)]=function(){const _0x1b0336=_0x10ff30,_0xd78061=BattleManager['inputtingAction'](),_0x6dff40=this['actor'](this[_0x1b0336(0x3b4)]());if(!_0xd78061)return!![];if(!_0xd78061[_0x1b0336(0x5c4)]())return!![];const _0x314211=_0xd78061[_0x1b0336(0x5c4)]()[_0x1b0336(0x7ed)];if(_0x314211[_0x1b0336(0x22f)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x6dff40===BattleManager[_0x1b0336(0x9fe)]())return![];}return!![];},VisuMZ['BattleCore'][_0x10ff30(0xabc)]=Window_BattleEnemy[_0x10ff30(0xb0c)][_0x10ff30(0x600)],Window_BattleEnemy[_0x10ff30(0xb0c)][_0x10ff30(0x600)]=function(_0xc920da){const _0x1c4cba=_0x10ff30;this[_0x1c4cba(0x4c4)]=null,VisuMZ[_0x1c4cba(0x95b)][_0x1c4cba(0xabc)][_0x1c4cba(0xb96)](this,_0xc920da);},Window_BattleEnemy[_0x10ff30(0xb0c)][_0x10ff30(0xa46)]=function(){const _0x4fcceb=_0x10ff30;return this[_0x4fcceb(0x2f9)]();},VisuMZ[_0x10ff30(0x95b)]['Window_BattleEnemy_show']=Window_BattleEnemy[_0x10ff30(0xb0c)]['show'],Window_BattleEnemy[_0x10ff30(0xb0c)][_0x10ff30(0xb71)]=function(){const _0xfd163c=_0x10ff30;VisuMZ[_0xfd163c(0x95b)][_0xfd163c(0x3d0)][_0xfd163c(0xb96)](this),this['y']=Graphics[_0xfd163c(0x956)]*0xa;},Window_BattleEnemy[_0x10ff30(0xb0c)][_0x10ff30(0x4c3)]=function(){const _0x992c25=_0x10ff30;return $gameTroop[_0x992c25(0xc07)]()['slice'](0x0);},Window_BattleEnemy[_0x10ff30(0xb0c)][_0x10ff30(0x219)]=function(){const _0x39fee9=_0x10ff30;this[_0x39fee9(0xb59)]=this[_0x39fee9(0x4c3)](),this['sortEnemies'](),Window_Selectable[_0x39fee9(0xb0c)][_0x39fee9(0x219)][_0x39fee9(0xb96)](this);},Window_BattleEnemy[_0x10ff30(0xb0c)][_0x10ff30(0xc37)]=function(){const _0x267fae=_0x10ff30;this['_enemies']['sort']((_0x32431c,_0x13d748)=>{const _0xab321a=_0x1fff;if(_0xab321a(0x3c2)===_0xab321a(0x3c2))return _0x32431c[_0xab321a(0x843)]()[_0xab321a(0xa75)]===_0x13d748['battler']()[_0xab321a(0xa75)]?_0x32431c[_0xab321a(0x843)]()['_baseY']-_0x13d748[_0xab321a(0x843)]()[_0xab321a(0xcae)]:_0x32431c['battler']()[_0xab321a(0xa75)]-_0x13d748[_0xab321a(0x843)]()[_0xab321a(0xa75)];else{if(!this[_0xab321a(0x6ca)])return;if(!this[_0xab321a(0x96e)])return;this['updateShadowVisibility'](),this[_0xab321a(0x693)]();}}),SceneManager[_0x267fae(0xbe3)]()&&this[_0x267fae(0xb59)]['reverse']();},Window_BattleEnemy[_0x10ff30(0xb0c)]['autoSelect']=function(){const _0x166c74=_0x10ff30,_0x196ca1=VisuMZ[_0x166c74(0x95b)][_0x166c74(0x928)][_0x166c74(0x2ec)];_0x196ca1['LastSelected']?this[_0x166c74(0x9a2)]():this['autoSelectPriority']();},Window_BattleEnemy['prototype']['autoSelectLastSelected']=function(){const _0x10eb08=_0x10ff30;if(this[_0x10eb08(0x4c4)]&&this[_0x10eb08(0xb59)][_0x10eb08(0x778)](this[_0x10eb08(0x4c4)])){const _0x1f8d8d=this[_0x10eb08(0xb59)][_0x10eb08(0xbc2)](this[_0x10eb08(0x4c4)]);this[_0x10eb08(0x638)](_0x1f8d8d);}else this[_0x10eb08(0xa6e)]();},Window_BattleEnemy[_0x10ff30(0xb0c)][_0x10ff30(0xa6e)]=function(){const _0xe3d99e=_0x10ff30,_0x76f3c1=VisuMZ[_0xe3d99e(0x95b)][_0xe3d99e(0x928)][_0xe3d99e(0x2ec)];let _0x178889=![];$gameSystem['isSideView']()?_0x178889=_0x76f3c1[_0xe3d99e(0x76d)]:_0x178889=_0x76f3c1[_0xe3d99e(0x358)],this[_0xe3d99e(0x638)](_0x178889?this['maxItems']()-0x1:0x0);},Window_BattleEnemy[_0x10ff30(0xb0c)]['callOkHandler']=function(){const _0xa9b12e=_0x10ff30;Window_Selectable[_0xa9b12e(0xb0c)][_0xa9b12e(0xb27)][_0xa9b12e(0xb96)](this),this['_lastEnemy']=this[_0xa9b12e(0x296)]();},Window_BattleItem[_0x10ff30(0xb0c)][_0x10ff30(0x778)]=function(_0x4d278d){const _0x18218a=_0x10ff30;if(!_0x4d278d)return![];return _0x4d278d['occasion']===0x0||_0x4d278d[_0x18218a(0x76f)]===0x1;};function Window_AutoBattleCancel(){const _0x33e4aa=_0x10ff30;this[_0x33e4aa(0x600)](...arguments);}Window_AutoBattleCancel['prototype']=Object[_0x10ff30(0x93b)](Window_Base['prototype']),Window_AutoBattleCancel[_0x10ff30(0xb0c)][_0x10ff30(0x602)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x10ff30(0xb0c)]['initialize']=function(_0x4f761e){const _0x512ea0=_0x10ff30;Window_Base['prototype'][_0x512ea0(0x600)][_0x512ea0(0xb96)](this,_0x4f761e),this[_0x512ea0(0x8ab)](this[_0x512ea0(0x317)]()),this[_0x512ea0(0x219)]();},Window_AutoBattleCancel[_0x10ff30(0xb0c)][_0x10ff30(0x317)]=function(){const _0x4f901d=_0x10ff30;return VisuMZ[_0x4f901d(0x95b)][_0x4f901d(0x928)][_0x4f901d(0xab0)]['AutoBattleBgType'];},Window_AutoBattleCancel['prototype'][_0x10ff30(0x219)]=function(){const _0x4311c1=_0x10ff30;this[_0x4311c1(0x74f)][_0x4311c1(0xb10)]();const _0xf53783=VisuMZ['BattleCore'][_0x4311c1(0x928)][_0x4311c1(0xab0)][_0x4311c1(0x8ea)],_0x9b47f6=_0xf53783[_0x4311c1(0x958)](this['okButtonText'](),this['cancelButtonText']()),_0x26bee6=this[_0x4311c1(0x4c0)](_0x9b47f6)[_0x4311c1(0x7b2)],_0x4ca817=Math['floor']((this[_0x4311c1(0x951)]-_0x26bee6)/0x2);this['drawTextEx'](_0x9b47f6,_0x4ca817,0x0,_0x26bee6);},Window_AutoBattleCancel[_0x10ff30(0xb0c)][_0x10ff30(0x2f3)]=function(){const _0xe4e581=_0x10ff30;if(Imported['VisuMZ_0_CoreEngine']){if(_0xe4e581(0x2c0)===_0xe4e581(0x3a1))this[_0xe4e581(0x1ce)][_0xe4e581(0x440)](new _0x492960());else return TextManager[_0xe4e581(0x85a)]('ok');}else{if(_0xe4e581(0x387)===_0xe4e581(0x3f5)){const _0x4319c5=this[_0xe4e581(0x6ca)][_0xe4e581(0xc87)];_0x4319c5&&(this[_0xe4e581(0xc87)]=new _0x515c27(_0x4319c5[_0xe4e581(0x7b2)],_0x4319c5[_0xe4e581(0x956)]));}else return VisuMZ[_0xe4e581(0x95b)][_0xe4e581(0x928)]['AutoBattle'][_0xe4e581(0x45c)];}},Window_AutoBattleCancel[_0x10ff30(0xb0c)][_0x10ff30(0xbde)]=function(){const _0x5ef1ad=_0x10ff30;if(Imported[_0x5ef1ad(0xa8d)]){if(_0x5ef1ad(0x4fe)!==_0x5ef1ad(0x2d5))return TextManager['getInputButtonString'](_0x5ef1ad(0x535));else _0x549125[_0x5ef1ad(0x95b)][_0x5ef1ad(0x47a)]&&_0x5ed461[_0x5ef1ad(0x95b)]['ParseActorNotetags'][_0x5ef1ad(0xb96)](this,_0x5efd66),_0x5ecce2[_0x5ef1ad(0x95b)]['Parse_Notetags_TraitObjects'](_0x4ac0cc);}else return VisuMZ['BattleCore'][_0x5ef1ad(0x928)][_0x5ef1ad(0xab0)][_0x5ef1ad(0x5f8)];},Window_AutoBattleCancel[_0x10ff30(0xb0c)][_0x10ff30(0x78d)]=function(){const _0x592204=_0x10ff30;Window_Base[_0x592204(0xb0c)]['update']['call'](this),this[_0x592204(0x59a)](),this[_0x592204(0x4cc)]();},Window_AutoBattleCancel['prototype'][_0x10ff30(0x59a)]=function(){const _0x225097=_0x10ff30;this[_0x225097(0x905)]=BattleManager[_0x225097(0xa92)];},Window_AutoBattleCancel[_0x10ff30(0xb0c)][_0x10ff30(0x4cc)]=function(){const _0x2294e9=_0x10ff30;if(!BattleManager['_autoBattle'])return;if(Input['isTriggered']('ok')||Input[_0x2294e9(0x40b)](_0x2294e9(0x535))||TouchInput[_0x2294e9(0xaf5)]()||TouchInput[_0x2294e9(0x766)]()){if('cgapK'!=='rjGLc')SoundManager[_0x2294e9(0x343)](),BattleManager['_autoBattle']=![],Input['clear'](),TouchInput['clear']();else return!_0x342fa2['inBattle']()?this[_0x2294e9(0x9e0)](_0x58be1f):_0x49e03e[_0x2294e9(0x95b)][_0x2294e9(0x853)]['call'](this,_0x32fd6b);}};function Window_EnemyName(){const _0x4a0bfc=_0x10ff30;this[_0x4a0bfc(0x600)](...arguments);}Window_EnemyName[_0x10ff30(0xb0c)]=Object[_0x10ff30(0x93b)](Window_StatusBase['prototype']),Window_EnemyName[_0x10ff30(0xb0c)][_0x10ff30(0x602)]=Window_EnemyName,Window_EnemyName['prototype'][_0x10ff30(0x600)]=function(_0x2b9d2f){const _0x1f70b4=_0x10ff30;this[_0x1f70b4(0x5f1)]=_0x2b9d2f,this['_text']='';const _0x2ba0d4=new Rectangle(0x0,0x0,Graphics[_0x1f70b4(0xb97)],this[_0x1f70b4(0x257)]()*0x4);Window_StatusBase[_0x1f70b4(0xb0c)]['initialize']['call'](this,_0x2ba0d4),this[_0x1f70b4(0x8ab)](0x2),this[_0x1f70b4(0x53c)]=0x0;},Window_EnemyName[_0x10ff30(0xb0c)][_0x10ff30(0xb32)]=function(){const _0x2d8f3c=_0x10ff30;this[_0x2d8f3c(0x962)]=0x0;},Window_EnemyName['prototype']['enemy']=function(){const _0x174a1b=_0x10ff30;return $gameTroop['members']()[this[_0x174a1b(0x5f1)]];},Window_EnemyName['prototype'][_0x10ff30(0x78d)]=function(){const _0x53aa80=_0x10ff30;Window_StatusBase['prototype']['update']['call'](this),this[_0x53aa80(0x296)]()&&this['enemy']()[_0x53aa80(0x52f)]()!==this[_0x53aa80(0x6cd)]&&(this[_0x53aa80(0x6cd)]=this[_0x53aa80(0x296)]()[_0x53aa80(0x52f)](),this['refresh']()),this[_0x53aa80(0x5c0)](),this[_0x53aa80(0x8b0)]();},Window_EnemyName['prototype'][_0x10ff30(0x5c0)]=function(){const _0x40545b=_0x10ff30;if(!this['enemy']()){if(this[_0x40545b(0x53c)]>0x0)this['contentsOpacity']-=0x10;}else{if(this[_0x40545b(0x296)]()[_0x40545b(0x472)]()){if(this[_0x40545b(0x53c)]>0x0)this[_0x40545b(0x53c)]-=0x10;}else{if(SceneManager['_scene'][_0x40545b(0x2cc)]&&SceneManager[_0x40545b(0x2df)]['_enemyWindow']['active']&&SceneManager[_0x40545b(0x2df)]['_enemyWindow']['_enemies']['includes'](this[_0x40545b(0x296)]())){if('KWHxd'!==_0x40545b(0x244))_0x2a9945[_0x40545b(0x95b)][_0x40545b(0xb95)][_0x40545b(0xb96)](this),this[_0x40545b(0xc1b)]()==='border'&&this['repositionCancelButtonBorderStyle']();else{if(this[_0x40545b(0x53c)]<0xff)this[_0x40545b(0x53c)]+=0x10;}}else this['contentsOpacity']>0x0&&(this['contentsOpacity']-=0x10);}}},Window_EnemyName[_0x10ff30(0xb0c)][_0x10ff30(0x8b0)]=function(){const _0x712630=_0x10ff30;if(!this[_0x712630(0x296)]())return;SceneManager[_0x712630(0xbe3)]()?this['x']=Graphics['boxWidth']-this['enemy']()['battler']()[_0x712630(0xa75)]:this['x']=this[_0x712630(0x296)]()[_0x712630(0x843)]()[_0x712630(0xa75)];this['x']-=Math['round'](this[_0x712630(0x7b2)]/0x2),this['y']=this[_0x712630(0x296)]()['battler']()[_0x712630(0xcae)]-Math[_0x712630(0x556)](this[_0x712630(0x257)]()*1.5);const _0x245d5c=VisuMZ['BattleCore']['Settings'][_0x712630(0x2ec)];this['x']+=_0x245d5c[_0x712630(0x289)]||0x0,this['y']+=_0x245d5c[_0x712630(0x95c)]||0x0;},Window_EnemyName[_0x10ff30(0xb0c)][_0x10ff30(0x524)]=function(){const _0x1fe344=_0x10ff30;Window_Base[_0x1fe344(0xb0c)][_0x1fe344(0x524)]['call'](this),this[_0x1fe344(0x74f)][_0x1fe344(0x206)]=VisuMZ[_0x1fe344(0x95b)]['Settings']['Enemy'][_0x1fe344(0x4c9)];},Window_EnemyName['prototype']['refresh']=function(){const _0x451f5e=_0x10ff30;Window_StatusBase[_0x451f5e(0xb0c)][_0x451f5e(0x219)][_0x451f5e(0xb96)](this),this['contents'][_0x451f5e(0xb10)]();if(!this['enemy']())return;this[_0x451f5e(0x44d)]();},Window_EnemyName['prototype'][_0x10ff30(0x44d)]=function(){const _0x4cb805=_0x10ff30;this['_text']=this[_0x4cb805(0x296)]()[_0x4cb805(0x52f)]();const _0x4a64e8=this[_0x4cb805(0x4c0)](this[_0x4cb805(0x6cd)])[_0x4cb805(0x7b2)],_0x18d492=Math[_0x4cb805(0x556)]((this[_0x4cb805(0x951)]-_0x4a64e8)/0x2);this[_0x4cb805(0x71b)](this['_text'],_0x18d492,0x0,_0x4a64e8+0x8);},Window_BattleLog[_0x10ff30(0xb0c)]['maxLines']=function(){const _0x46538a=_0x10ff30;return VisuMZ['BattleCore'][_0x46538a(0x928)][_0x46538a(0x5f4)][_0x46538a(0x6e5)];},Window_BattleLog['prototype']['messageSpeed']=function(){const _0x1dc1bb=_0x10ff30;return VisuMZ[_0x1dc1bb(0x95b)][_0x1dc1bb(0x928)][_0x1dc1bb(0x5f4)][_0x1dc1bb(0x4f4)];},Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0xc7c)]=function(){const _0x1f8253=_0x10ff30;return VisuMZ[_0x1f8253(0x95b)][_0x1f8253(0x928)]['BattleLog']['BackColor'];},Window_BattleLog['prototype'][_0x10ff30(0x8ff)]=function(){return![];},Window_BattleLog[_0x10ff30(0xb0c)]['actionEffect']=function(_0x56ee44,_0xc5b8bd){const _0x3d6864=_0x10ff30;this[_0x3d6864(0x8da)]('actionSplicePoint'),BattleManager[_0x3d6864(0x278)](_0x56ee44,_0xc5b8bd),this[_0x3d6864(0x86c)]();},Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x1f8)]=function(){const _0x220af3=_0x10ff30;this[_0x220af3(0x86c)]();},Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x395)]=function(_0x101fdd){const _0xaaed8=_0x10ff30,_0x30c02c=Array['prototype'][_0xaaed8(0x73e)][_0xaaed8(0xb96)](arguments,0x1),_0x18e6f3={'name':_0x101fdd,'params':_0x30c02c},_0x4a63bf=this['_methods']['map'](_0x4d8bb7=>_0x4d8bb7[_0xaaed8(0x52f)])[_0xaaed8(0xbc2)](_0xaaed8(0x1f8));_0x4a63bf>=0x0?this[_0xaaed8(0x1d5)][_0xaaed8(0x2e5)](_0x4a63bf,0x0,_0x18e6f3):this[_0xaaed8(0x1d5)][_0xaaed8(0x395)](_0x18e6f3);},Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x8da)]=function(_0x4b89de){const _0x5e4758=_0x10ff30,_0x58e598=Array[_0x5e4758(0xb0c)]['slice']['call'](arguments,0x1);this['_methods'][_0x5e4758(0x8da)]({'name':_0x4b89de,'params':_0x58e598});},Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x8d3)]=function(){const _0xb5e9fd=_0x10ff30;if(!$gameTemp['isPlaytest']())return;console['log'](this[_0xb5e9fd(0x1d5)][_0xb5e9fd(0xad3)](_0x19b57b=>_0x19b57b[_0xb5e9fd(0x52f)])[_0xb5e9fd(0x85e)]('\x0a'));},VisuMZ['BattleCore'][_0x10ff30(0xc83)]=Window_BattleLog[_0x10ff30(0xb0c)]['refresh'],Window_BattleLog['prototype']['refresh']=function(){this['_requestRefresh']=!![];},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xaf7)]=Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x78d)],Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x78d)]=function(){const _0x431c24=_0x10ff30;VisuMZ['BattleCore']['Window_BattleLog_update'][_0x431c24(0xb96)](this);if(this['_requestRefresh'])this[_0x431c24(0x996)]();},Window_BattleLog[_0x10ff30(0xb0c)]['processRefresh']=function(){const _0x50849d=_0x10ff30;this[_0x50849d(0xac5)]=![],VisuMZ[_0x50849d(0x95b)][_0x50849d(0xc83)][_0x50849d(0xb96)](this);},Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x348)]=function(_0x28c9e5){const _0x25dcd4=_0x10ff30;let _0x5b357c=VisuMZ[_0x25dcd4(0x95b)][_0x25dcd4(0x928)][_0x25dcd4(0x5f4)]['TextAlign']['toLowerCase']()[_0x25dcd4(0x6a3)](),_0x48f494=this[_0x25dcd4(0x412)][_0x28c9e5];if(_0x48f494['match'](/<LEFT>/i))_0x5b357c=_0x25dcd4(0x610);else{if(_0x48f494['match'](/<CENTER>/i)){if(_0x25dcd4(0x20c)===_0x25dcd4(0xa61)){if(!_0x1da9fc[_0x25dcd4(0x95b)][_0x25dcd4(0x928)]['BattleLog'][_0x25dcd4(0xc91)])return;_0x5e8334[_0x25dcd4(0x95b)][_0x25dcd4(0x83e)][_0x25dcd4(0xb96)](this,_0x59eea9);}else _0x5b357c=_0x25dcd4(0x4e3);}else _0x48f494[_0x25dcd4(0x22f)](/<RIGHT>/i)&&(_0x5b357c=_0x25dcd4(0x7a5));}_0x48f494=_0x48f494[_0x25dcd4(0x319)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x48f494=_0x48f494['replace'](/\\I\[0\]/gi,'');const _0x1e78ba=this[_0x25dcd4(0x8c3)](_0x28c9e5);this[_0x25dcd4(0x74f)]['clearRect'](_0x1e78ba['x'],_0x1e78ba['y'],_0x1e78ba[_0x25dcd4(0x7b2)],_0x1e78ba['height']);const _0x440091=this['textSizeEx'](_0x48f494)[_0x25dcd4(0x7b2)];let _0x453b5d=_0x1e78ba['x'];if(_0x5b357c===_0x25dcd4(0x4e3)){if(_0x25dcd4(0x915)!==_0x25dcd4(0x2c9))_0x453b5d+=(_0x1e78ba['width']-_0x440091)/0x2;else{if(!_0x3ae5c0['BattleCore']['Settings'][_0x25dcd4(0xa21)][_0x25dcd4(0x370)])return![];if(_0x43f70a['getBattlePortrait']())return!![];return _0x387f70[_0x25dcd4(0x7d2)]&&_0x2634f9[_0x25dcd4(0x83f)]();}}else _0x5b357c==='right'&&(_0x453b5d+=_0x1e78ba[_0x25dcd4(0x7b2)]-_0x440091);this['drawTextEx'](_0x48f494,_0x453b5d,_0x1e78ba['y'],_0x440091+0x8);},Window_BattleLog['prototype']['addText']=function(_0xa31b16){const _0x35bdf9=_0x10ff30;this['_lines'][_0x35bdf9(0x395)](_0xa31b16),this[_0x35bdf9(0x219)](),this[_0x35bdf9(0x86c)]();},Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0xb47)]=function(){const _0x44857b=_0x10ff30;let _0x59c9dd=![];switch(this['_waitMode']){case _0x44857b(0x4da):_0x59c9dd=this['_spriteset'][_0x44857b(0x6e7)]();break;case _0x44857b(0x5ce):_0x59c9dd=this[_0x44857b(0x93a)][_0x44857b(0x9db)]();break;case _0x44857b(0x6fd):_0x59c9dd=this['_spriteset'][_0x44857b(0x80f)]();break;case _0x44857b(0x6de):_0x59c9dd=this[_0x44857b(0x93a)][_0x44857b(0x9bd)]();break;case _0x44857b(0x845):_0x59c9dd=this[_0x44857b(0x93a)][_0x44857b(0x45b)]();break;case _0x44857b(0x443):_0x59c9dd=this['_spriteset'][_0x44857b(0xa50)]();break;}return!_0x59c9dd&&(this[_0x44857b(0xb74)]=''),_0x59c9dd;},Window_BattleLog['prototype'][_0x10ff30(0x372)]=function(){const _0xf88490=_0x10ff30;this[_0xf88490(0x4ca)]('animation');},Window_BattleLog[_0x10ff30(0xb0c)]['waitForFloat']=function(){const _0x1f5739=_0x10ff30;this[_0x1f5739(0x4ca)](_0x1f5739(0x6de));},Window_BattleLog[_0x10ff30(0xb0c)]['waitForJump']=function(){const _0x518814=_0x10ff30;this[_0x518814(0x4ca)]('jump');},Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x4b7)]=function(){const _0x7708f8=_0x10ff30;this['setWaitMode'](_0x7708f8(0x443));},Window_BattleLog['prototype'][_0x10ff30(0x8bf)]=function(){const _0x3d64c6=_0x10ff30,_0x3a0aa4=VisuMZ['BattleCore'][_0x3d64c6(0x928)][_0x3d64c6(0x5f4)];if(!_0x3a0aa4[_0x3d64c6(0xb5b)])return;this[_0x3d64c6(0x395)](_0x3d64c6(0x657),_0x3a0aa4[_0x3d64c6(0x891)]['format']($gameTroop['turnCount']())),this[_0x3d64c6(0x395)](_0x3d64c6(0x32f),_0x3a0aa4['StartTurnWait']),this[_0x3d64c6(0x395)]('clear');},Window_BattleLog['prototype'][_0x10ff30(0x8a2)]=function(_0x269123,_0x2301d9,_0x3cc633){const _0x4a4c7c=_0x10ff30;this[_0x4a4c7c(0x21e)](_0x2301d9)?_0x4a4c7c(0xb45)==='SrJXv'?BattleManager[_0x4a4c7c(0x92f)]():this[_0x4a4c7c(0x918)](_0x4a4c7c(0xb64)):this[_0x4a4c7c(0x514)](_0x269123,_0x2301d9,_0x3cc633);},Window_BattleLog[_0x10ff30(0xb0c)]['isCustomActionSequence']=function(_0x9fabee){const _0x400273=_0x10ff30;if(!SceneManager[_0x400273(0xc1e)]())return![];if(!_0x9fabee)return![];if(!_0x9fabee[_0x400273(0x5c4)]())return![];if(_0x9fabee[_0x400273(0x5c4)]()[_0x400273(0x7ed)][_0x400273(0x22f)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x400273(0x4d3)](_0x9fabee[_0x400273(0x5c4)]()))return!![];return![];},Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x514)]=function(_0x2006cb,_0x4f8402,_0x141d5b){const _0x2d5791=_0x10ff30,_0x48a974=_0x4f8402[_0x2d5791(0x5c4)]();this[_0x2d5791(0x6d2)](_0x2006cb,_0x4f8402,_0x141d5b),this[_0x2d5791(0x57e)](_0x2006cb,_0x4f8402,_0x141d5b),this['finishActionSet'](_0x2006cb,_0x4f8402,_0x141d5b);},Window_BattleLog['prototype'][_0x10ff30(0x352)]=function(_0x49b493,_0x4c750a){const _0x583df0=_0x10ff30,_0x1b028f=VisuMZ['BattleCore'][_0x583df0(0x928)][_0x583df0(0x5f4)];if(_0x1b028f[_0x583df0(0xc5e)]){if(_0x583df0(0x35d)==='GVqLT'){const _0x5b8283=_0x4f3127[_0x583df0(0xbc2)](_0x2345a9[_0x583df0(0x9d9)]()[_0x583df0(0x6a3)]());_0x5b8283>=0x0&&_0x5b8283<=0x7&&_0x3516ce[_0x583df0(0x357)](_0x5b8283,_0x4d26b2);}else this[_0x583df0(0x395)](_0x583df0(0x657),_0x583df0(0x73b)[_0x583df0(0x958)](DataManager['battleDisplayText'](_0x4c750a)));}if(DataManager[_0x583df0(0x938)](_0x4c750a)){if(_0x1b028f[_0x583df0(0x84f)])this[_0x583df0(0x2ad)](_0x4c750a[_0x583df0(0x884)],_0x49b493,_0x4c750a);if(_0x1b028f['ActionSkillMsg2'])this[_0x583df0(0x2ad)](_0x4c750a[_0x583df0(0x8fc)],_0x49b493,_0x4c750a);}else{if(_0x583df0(0xbc7)===_0x583df0(0x667))_0x1e54f2-=_0x365fa1[_0x583df0(0x6d3)]();else{if(_0x1b028f['ActionItemMsg'])this[_0x583df0(0x2ad)](TextManager['useItem'],_0x49b493,_0x4c750a);}}},Window_BattleLog[_0x10ff30(0xb0c)]['setupActionSet']=function(_0xddb88e,_0x590ffc,_0x550f0b){const _0x4b488f=_0x10ff30,_0x7fb672=_0x590ffc[_0x4b488f(0x5c4)]();this[_0x4b488f(0x352)](_0xddb88e,_0x7fb672),this[_0x4b488f(0x395)](_0x4b488f(0x1e1),_0xddb88e,_0x550f0b,!![]),this[_0x4b488f(0x395)](_0x4b488f(0x858),_0xddb88e,_0x590ffc),this[_0x4b488f(0x395)](_0x4b488f(0x713)),this['push'](_0x4b488f(0xc41),_0xddb88e,_0x590ffc),this[_0x4b488f(0x395)](_0x4b488f(0x372));},Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x57e)]=function(_0x279df6,_0x298112,_0x240492){const _0x350992=_0x10ff30;if(this['isMeleeSingleTargetAction'](_0x298112))this['autoMeleeSingleTargetActionSet'](_0x279df6,_0x298112,_0x240492);else{if(this[_0x350992(0xc16)](_0x298112))this[_0x350992(0x809)](_0x279df6,_0x298112,_0x240492);else _0x298112['isForRandom']()?this[_0x350992(0x572)](_0x279df6,_0x298112,_0x240492):_0x350992(0xaa3)===_0x350992(0xaa3)?this[_0x350992(0x286)](_0x279df6,_0x298112,_0x240492):this[_0x350992(0xa8f)][_0x350992(0x440)](this['_injectAnimationSprite']);}},Window_BattleLog[_0x10ff30(0xb0c)]['addMeleeReturnActionSet']=function(_0x369b26,_0x46702e,_0x12ba74,_0x268109){const _0x35bc03=_0x10ff30;if(_0x46702e){if(_0x35bc03(0x2d9)!=='zzanx'){const _0x4b5c57=_0x369b26[_0x35bc03(0x843)]();this[_0x35bc03(0x395)](_0x35bc03(0x957),[_0x369b26],_0x12ba74,_0x268109),this[_0x35bc03(0x395)](_0x35bc03(0x7bb),_0x369b26,_0x4b5c57[_0x35bc03(0x7e9)],_0x4b5c57[_0x35bc03(0x2f8)],_0x268109,![],'Linear'),this['push'](_0x35bc03(0x918),[_0x369b26],_0x35bc03(0x565)),this['push']('waitForMovement'),this['push'](_0x35bc03(0x918),[_0x369b26],'walk');}else{const _0x2d913b=_0x51e04b[_0x35bc03(0x95b)][_0x35bc03(0x928)]['BattlebackScale'];if(_0x2d913b&&_0x2d913b[_0x35bc03(0x4e2)])return _0x2d913b['jsOneForOne'][_0x35bc03(0xb96)](this);this['width']=_0x58283b['width'],this[_0x35bc03(0x956)]=_0x3645a7[_0x35bc03(0x956)];const _0x15aea9=0x1;this[_0x35bc03(0x808)]['x']=_0x15aea9,this[_0x35bc03(0x808)]['y']=_0x15aea9,this['x']=0x0,this['y']=0x0;}}},Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x6ef)]=function(_0x15bbd9){const _0x12f425=_0x10ff30;if(!_0x15bbd9[_0x12f425(0xb67)]())return![];if(!_0x15bbd9[_0x12f425(0x856)]())return![];if(!_0x15bbd9[_0x12f425(0x482)]())return![];return VisuMZ[_0x12f425(0x95b)][_0x12f425(0x928)]['ActionSequence'][_0x12f425(0x916)];},Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x9f6)]=function(_0x5074f1,_0x1031b0,_0x20953f){const _0x131c30=_0x10ff30,_0x39d5ef=_0x5074f1[_0x131c30(0x4f0)]()[_0x131c30(0x589)]<0x2,_0x4add84=0x14,_0x569ddd=0x30;if(_0x39d5ef){if('oauhp'!=='oauhp'){if(!_0x4442f1)return;if(!this[_0x131c30(0x810)])return;if(_0x2901bd[_0x131c30(0x58a)]()){}else{if(_0x3c8d9e['isEnemy']()){if(this[_0x131c30(0x602)]===_0x462dad&&!_0x11c4a1[_0x131c30(0xc4a)]())return;}}this[_0x131c30(0x810)][_0x131c30(0x542)](_0x5b25f6,'hp');}else this['push'](_0x131c30(0x957),[_0x5074f1],_0x569ddd,_0x4add84),this[_0x131c30(0x395)](_0x131c30(0x76e),_0x5074f1,_0x20953f,_0x131c30(0xb4b),_0x4add84,!![],'Linear',!![]),this['push'](_0x131c30(0x918),[_0x5074f1],'walk'),this[_0x131c30(0x395)](_0x131c30(0x713));}let _0x569ea7=_0x1031b0[_0x131c30(0x6f3)]()?this['getDualWieldTimes'](_0x5074f1):0x1;for(let _0x1746e0=0x0;_0x1746e0<_0x569ea7;_0x1746e0++){_0x1031b0[_0x131c30(0x6f3)]()&&_0x5074f1[_0x131c30(0x58a)]()&&this[_0x131c30(0x395)](_0x131c30(0x6a6),_0x5074f1,_0x1746e0),_0x1031b0[_0x131c30(0x5c4)]()[_0x131c30(0x72e)]<0x0?'GzFfG'===_0x131c30(0x53b)?this[_0x131c30(0x572)](_0x5074f1,_0x1031b0,_0x20953f):_0x98eb4f[_0x131c30(0x4fb)]([_0x449da8]):_0x131c30(0x936)==='PzGxl'?this[_0x131c30(0x286)](_0x5074f1,_0x1031b0,_0x20953f):this[_0x131c30(0x91a)]();}_0x1031b0[_0x131c30(0x6f3)]()&&_0x5074f1['isActor']()&&this[_0x131c30(0x395)](_0x131c30(0x5bf),_0x5074f1),this[_0x131c30(0x395)](_0x131c30(0x1e1),_0x5074f1,_0x20953f,![]),this['addMeleeReturnActionSet'](_0x5074f1,_0x39d5ef,_0x569ddd,_0x4add84);},Window_BattleLog['prototype'][_0x10ff30(0xc16)]=function(_0x4714da){const _0x5a9539=_0x10ff30;if(!_0x4714da['isPhysical']())return![];if(!_0x4714da[_0x5a9539(0x230)]())return![];if(!_0x4714da[_0x5a9539(0x482)]())return![];return VisuMZ[_0x5a9539(0x95b)][_0x5a9539(0x928)]['ActionSequence'][_0x5a9539(0x27c)];},Window_BattleLog[_0x10ff30(0xb0c)]['autoMeleeMultiTargetActionSet']=function(_0x1b8f70,_0x45ddb4,_0x9b48e6){const _0x433d3a=_0x10ff30,_0x4a596b=_0x1b8f70[_0x433d3a(0x4f0)]()[_0x433d3a(0x589)]<0x2,_0xb26e4b=0x14,_0x32614a=0x30;_0x4a596b&&(this[_0x433d3a(0x395)](_0x433d3a(0x957),[_0x1b8f70],_0x32614a,_0xb26e4b),this[_0x433d3a(0x395)]('performMoveToTargets',_0x1b8f70,_0x9b48e6,_0x433d3a(0xca8),_0xb26e4b,!![],_0x433d3a(0x92a),!![]),this[_0x433d3a(0x395)](_0x433d3a(0x918),[_0x1b8f70],_0x433d3a(0x646)),this[_0x433d3a(0x395)]('waitForMovement'));let _0x2e2b37=_0x45ddb4[_0x433d3a(0x6f3)]()?this[_0x433d3a(0x232)](_0x1b8f70):0x1;for(let _0x536155=0x0;_0x536155<_0x2e2b37;_0x536155++){if(_0x45ddb4['isAttack']()&&_0x1b8f70[_0x433d3a(0x58a)]()){if(_0x433d3a(0xc19)===_0x433d3a(0xc19))this[_0x433d3a(0x395)](_0x433d3a(0x6a6),_0x1b8f70,_0x536155);else return _0x27c01e[_0x433d3a(0x95b)]['Game_Action_isForRandom'][_0x433d3a(0xb96)](this);}this[_0x433d3a(0x286)](_0x1b8f70,_0x45ddb4,_0x9b48e6);}if(_0x45ddb4[_0x433d3a(0x6f3)]()&&_0x1b8f70[_0x433d3a(0x58a)]()){if(_0x433d3a(0x78c)===_0x433d3a(0x78c))this[_0x433d3a(0x395)](_0x433d3a(0x5bf),_0x1b8f70);else{if(_0x39dc01[_0x433d3a(0xccf)]()){if(this[_0x433d3a(0x3b7)]()<=0x0)return;}else{if(_0x57d7c0[_0x433d3a(0x3b7)]()<=0x0)return;}}}this[_0x433d3a(0x395)](_0x433d3a(0x1e1),_0x1b8f70,_0x9b48e6,![]),this[_0x433d3a(0xa0a)](_0x1b8f70,_0x4a596b,_0x32614a,_0xb26e4b);},Window_BattleLog[_0x10ff30(0xb0c)]['targetActionSet']=function(_0x636e07,_0x22a4a9,_0x14701d){const _0x5a2aa5=_0x10ff30,_0x2ca32a=_0x22a4a9[_0x5a2aa5(0x5c4)]();for(const _0x219c84 of _0x14701d){if(_0x5a2aa5(0x601)!=='NvteG')return _0x117c64[_0x5a2aa5(0x231)][0x0];else{if(!_0x219c84)continue;this[_0x5a2aa5(0x395)](_0x5a2aa5(0xb9d),_0x636e07,_0x22a4a9),this['push'](_0x5a2aa5(0x32f),Sprite_Battler['_motionSpeed']),this[_0x5a2aa5(0x395)](_0x5a2aa5(0xa43),_0x636e07,[_0x219c84],_0x2ca32a[_0x5a2aa5(0x72e)]),this['push'](_0x5a2aa5(0x32f),0x18),this[_0x5a2aa5(0x395)](_0x5a2aa5(0xc00),_0x636e07,_0x219c84);}}},Window_BattleLog['prototype']['wholeActionSet']=function(_0x1b7966,_0x578f6d,_0x2c09ca){const _0x172338=_0x10ff30,_0x1baf0b=_0x578f6d['item']();this[_0x172338(0x395)]('performAction',_0x1b7966,_0x578f6d),this[_0x172338(0x395)]('waitCount',Sprite_Battler['_motionSpeed']),this[_0x172338(0x395)]('showAnimation',_0x1b7966,_0x2c09ca[_0x172338(0x3a6)](),_0x1baf0b[_0x172338(0x72e)]),this[_0x172338(0x395)](_0x172338(0x372));for(const _0x20a1e6 of _0x2c09ca){if(_0x172338(0x91c)===_0x172338(0x376)){const _0x2da671=_0x199175[_0x172338(0x3e5)](this[_0x172338(0x58f)]),_0xfd3222=_0x3ad797[_0x172338(0x560)][_0x2da671];if(!_0xfd3222)return this[_0x172338(0xa31)]();const _0x478b00=_0x172338(0x77b)[_0x172338(0x958)](this[_0x172338(0x58f)][_0x172338(0xb64)][_0x172338(0x589)]),_0x450829=[null,_0xea5596['hp'],_0x5c1690['mp'],_0x5c64fe['hp'],_0x50ec23['mp'],_0x33e00b['hp'],_0x141617['mp']][this[_0x172338(0x58f)][_0x172338(0xb64)][_0x172338(0x589)]];return _0xfd3222[_0x478b00]['format'](_0x450829);}else{if(!_0x20a1e6)continue;this[_0x172338(0x395)](_0x172338(0xc00),_0x1b7966,_0x20a1e6);}}},Window_BattleLog[_0x10ff30(0xb0c)]['finishActionSet']=function(_0x1ac2e9,_0x1f5e42,_0x3341d7){const _0x82f573=_0x10ff30,_0x452ab3=_0x1f5e42[_0x82f573(0x5c4)]();this[_0x82f573(0x395)](_0x82f573(0x1e1),_0x1ac2e9,_0x3341d7,![]),this[_0x82f573(0x395)](_0x82f573(0xb56)),this[_0x82f573(0x395)](_0x82f573(0x5fa)),this[_0x82f573(0x395)](_0x82f573(0xb10)),this[_0x82f573(0x395)](_0x82f573(0x940),_0x1ac2e9),this[_0x82f573(0x395)](_0x82f573(0x713));},Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x502)]=function(_0x28d9f1){},VisuMZ['BattleCore']['Window_BattleLog_displayCurrentState']=Window_BattleLog['prototype'][_0x10ff30(0x774)],Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x774)]=function(_0x48f811){const _0x2d76c7=_0x10ff30;if(!VisuMZ[_0x2d76c7(0x95b)]['Settings'][_0x2d76c7(0x5f4)][_0x2d76c7(0xbc0)])return;VisuMZ['BattleCore'][_0x2d76c7(0x3ca)]['call'](this,_0x48f811);},Window_BattleLog['prototype']['displayCounter']=function(_0x40e60f){const _0x265178=_0x10ff30;this[_0x265178(0x395)](_0x265178(0x6a8),_0x40e60f);VisuMZ[_0x265178(0x95b)][_0x265178(0x928)][_0x265178(0x617)][_0x265178(0x89a)]&&('OwZDN'!==_0x265178(0x62f)?this[_0x265178(0x430)](_0x265178(0x646)):this[_0x265178(0x395)](_0x265178(0xa43),_0x40e60f,[BattleManager[_0x265178(0x427)]],-0x1));if(!VisuMZ[_0x265178(0x95b)][_0x265178(0x928)][_0x265178(0x5f4)]['ShowCounter'])return;this[_0x265178(0x395)](_0x265178(0x657),TextManager[_0x265178(0x6c4)][_0x265178(0x958)](_0x40e60f[_0x265178(0x52f)]()));},Window_BattleLog[_0x10ff30(0xb0c)]['displayReflection']=function(_0x46ab7b){const _0x22dd8d=_0x10ff30;this[_0x22dd8d(0x395)](_0x22dd8d(0x7f5),_0x46ab7b);if(!VisuMZ[_0x22dd8d(0x95b)][_0x22dd8d(0x928)][_0x22dd8d(0x5f4)][_0x22dd8d(0xbef)])return;this[_0x22dd8d(0x395)](_0x22dd8d(0x657),TextManager[_0x22dd8d(0x7bd)][_0x22dd8d(0x958)](_0x46ab7b[_0x22dd8d(0x52f)]()));},Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x5e6)]=function(_0x58951d,_0x114b7b){const _0x5efcf1=_0x10ff30;if(VisuMZ['BattleCore']['Settings'][_0x5efcf1(0x617)][_0x5efcf1(0x7c5)]){const _0x3c2e9c=_0x114b7b[_0x5efcf1(0x5c4)]();this[_0x5efcf1(0x395)](_0x5efcf1(0xa43),_0x58951d,[_0x58951d],_0x3c2e9c[_0x5efcf1(0x72e)]);}},Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x328)]=function(_0x4c4e09,_0x48a483){const _0x5472b8=_0x10ff30;this[_0x5472b8(0x395)]('performSubstitute',_0x4c4e09,_0x48a483);if(!VisuMZ[_0x5472b8(0x95b)][_0x5472b8(0x928)]['BattleLog'][_0x5472b8(0x7c9)])return;const _0x4a6827=_0x4c4e09[_0x5472b8(0x52f)](),_0x882df0=TextManager[_0x5472b8(0x981)][_0x5472b8(0x958)](_0x4a6827,_0x48a483[_0x5472b8(0x52f)]());this[_0x5472b8(0x395)](_0x5472b8(0x657),_0x882df0);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xba6)]=Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0xb72)],Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0xb72)]=function(_0x2a1faa,_0x23e50e){const _0x59d710=_0x10ff30;VisuMZ[_0x59d710(0x95b)][_0x59d710(0xba6)][_0x59d710(0xb96)](this,_0x2a1faa,_0x23e50e);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0xba5)]=Window_BattleLog['prototype'][_0x10ff30(0x98a)],Window_BattleLog['prototype'][_0x10ff30(0x98a)]=function(_0x14bd11){const _0x20410a=_0x10ff30;if(!VisuMZ[_0x20410a(0x95b)][_0x20410a(0x928)][_0x20410a(0x5f4)][_0x20410a(0xc69)])return;VisuMZ['BattleCore'][_0x20410a(0xba5)]['call'](this,_0x14bd11);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x83e)]=Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x6e2)],Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x6e2)]=function(_0x2dfc72){const _0x11624e=_0x10ff30;if(!VisuMZ[_0x11624e(0x95b)][_0x11624e(0x928)][_0x11624e(0x5f4)][_0x11624e(0xc91)])return;VisuMZ[_0x11624e(0x95b)][_0x11624e(0x83e)][_0x11624e(0xb96)](this,_0x2dfc72);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x653)]=Window_BattleLog['prototype'][_0x10ff30(0x68a)],Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x68a)]=function(_0x174b8b){const _0x5cb6da=_0x10ff30;!VisuMZ[_0x5cb6da(0x95b)][_0x5cb6da(0x928)][_0x5cb6da(0x5f4)][_0x5cb6da(0x55e)]?_0x5cb6da(0xb36)===_0x5cb6da(0xb36)?this[_0x5cb6da(0x395)](_0x5cb6da(0x82a),_0x174b8b):(_0x4b4c23[_0x5cb6da(0x95b)][_0x5cb6da(0xa91)]['call'](this),this[_0x5cb6da(0x1f4)]()):VisuMZ[_0x5cb6da(0x95b)][_0x5cb6da(0x653)][_0x5cb6da(0xb96)](this,_0x174b8b);},VisuMZ['BattleCore'][_0x10ff30(0x9fd)]=Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x20f)],Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x20f)]=function(_0x38dafe){const _0x46ed18=_0x10ff30;if(!VisuMZ[_0x46ed18(0x95b)][_0x46ed18(0x928)][_0x46ed18(0x5f4)][_0x46ed18(0x55e)])_0x38dafe[_0x46ed18(0xc81)]()[_0x46ed18(0x9c4)]?this[_0x46ed18(0x395)]('performEvasion',_0x38dafe):this['push'](_0x46ed18(0x767),_0x38dafe);else{if(_0x46ed18(0x434)===_0x46ed18(0x402)){_0x1d21a8[_0x46ed18(0xb0c)][_0x46ed18(0x47f)]['call'](this);const _0x15fbc9=this[_0x46ed18(0xc1b)]();_0x15fbc9===_0x46ed18(0x401)&&this[_0x46ed18(0x7ea)]();}else VisuMZ[_0x46ed18(0x95b)][_0x46ed18(0x9fd)][_0x46ed18(0xb96)](this,_0x38dafe);}},Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0xbaa)]=function(_0xd39c0f){const _0x1b03c6=_0x10ff30;if(_0xd39c0f[_0x1b03c6(0xc81)]()[_0x1b03c6(0x6b3)]){_0xd39c0f[_0x1b03c6(0xc81)]()[_0x1b03c6(0x2e4)]>0x0&&!_0xd39c0f[_0x1b03c6(0xc81)]()[_0x1b03c6(0x650)]&&this[_0x1b03c6(0x395)]('performDamage',_0xd39c0f);_0xd39c0f['result']()[_0x1b03c6(0x2e4)]<0x0&&this[_0x1b03c6(0x395)](_0x1b03c6(0x66d),_0xd39c0f);if(VisuMZ[_0x1b03c6(0x95b)]['Settings'][_0x1b03c6(0x5f4)][_0x1b03c6(0x866)]){if('Bpfjz'!==_0x1b03c6(0x81e))this[_0x1b03c6(0x395)]('addText',this['makeHpDamageText'](_0xd39c0f));else return _0x309529[_0x1b03c6(0x95b)][_0x1b03c6(0x928)][_0x1b03c6(0x64d)][_0x1b03c6(0x426)];}}},VisuMZ['BattleCore'][_0x10ff30(0x349)]=Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0xa90)],Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0xa90)]=function(_0x4a9f2f){const _0x131e9c=_0x10ff30;if(!VisuMZ[_0x131e9c(0x95b)][_0x131e9c(0x928)][_0x131e9c(0x5f4)]['ShowMpDmg'])return;VisuMZ['BattleCore'][_0x131e9c(0x349)][_0x131e9c(0xb96)](this,_0x4a9f2f);},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x7d0)]=Window_BattleLog['prototype'][_0x10ff30(0x1e0)],Window_BattleLog['prototype']['displayTpDamage']=function(_0x1e6388){const _0x1495cc=_0x10ff30;if(!VisuMZ['BattleCore']['Settings'][_0x1495cc(0x5f4)][_0x1495cc(0xb1b)])return;VisuMZ['BattleCore'][_0x1495cc(0x7d0)][_0x1495cc(0xb96)](this,_0x1e6388);},Window_BattleLog[_0x10ff30(0xb0c)]['displayAffectedStatus']=function(_0x4d66ba){const _0x53d3ce=_0x10ff30;if(_0x4d66ba[_0x53d3ce(0xc81)]()[_0x53d3ce(0x67f)]()){if(_0x53d3ce(0x2b9)!==_0x53d3ce(0x2b9)){_0x562834['BattleCore'][_0x53d3ce(0x442)]['call'](this,_0x23e609,_0x484031);if(!_0x3da18e[_0x53d3ce(0x3f4)]())return;if(_0x88af96[_0x53d3ce(0x605)]!==_0xb0fea9[_0x53d3ce(0x6d7)]())return;let _0x508588=_0x5e5b6b[_0x53d3ce(0x997)];!this['isCertainHit']()&&(_0x508588*=_0x2528d1[_0x53d3ce(0x814)](_0xab9ce2[_0x53d3ce(0x605)]),_0x508588*=this['lukEffectRate'](_0xdcba46)),_0xf1a8a0[_0x53d3ce(0x2b6)]()<_0x508588&&(_0x174537[_0x53d3ce(0x4ac)]=!![],this[_0x53d3ce(0x6e6)](_0x5b5125));}else this[_0x53d3ce(0x395)](_0x53d3ce(0xc98)),this[_0x53d3ce(0x988)](_0x4d66ba),this[_0x53d3ce(0x528)](_0x4d66ba),this[_0x53d3ce(0x395)]('waitForNewLine');}},Window_BattleLog['prototype']['displayAddedStates']=function(_0x5bb129){const _0x38395d=_0x10ff30,_0x1e60db=_0x5bb129[_0x38395d(0xc81)](),_0x5d8c63=_0x1e60db[_0x38395d(0xaa2)]();for(const _0x3af3e1 of _0x5d8c63){if(_0x38395d(0x4bb)===_0x38395d(0xbb6)){if(!_0x4d8a9f['isSceneBattle']())return;if(!_0x21f28e[_0x38395d(0xa5a)])return;if(!_0x1a1cf9[_0x38395d(0xbf3)]())return;_0x388a48['ConvertParams'](_0x17508c,_0x4d5dc9);const _0x3f78c1=_0x334105[_0x38395d(0x36e)];_0x4a326a['_subject']&&_0x120338['_subject'][_0x38395d(0x72a)]()[_0x38395d(0xc08)](_0x3f78c1);}else{const _0x29b84a=_0x5bb129['isActor']()?_0x3af3e1[_0x38395d(0x884)]:_0x3af3e1['message2'];if(_0x29b84a&&VisuMZ['BattleCore'][_0x38395d(0x928)][_0x38395d(0x5f4)][_0x38395d(0x53f)]){if('YoKGX'!==_0x38395d(0x451))this[_0x38395d(0x395)](_0x38395d(0x715)),this[_0x38395d(0x395)](_0x38395d(0x64e)),this[_0x38395d(0x395)]('pushBaseLine'),this[_0x38395d(0x395)](_0x38395d(0x657),_0x29b84a['format'](_0x5bb129[_0x38395d(0x52f)]())),this['push'](_0x38395d(0x1ec));else{_0x492aca[_0x38395d(0x49d)](_0x3f2620[0x0],_0x4257be[0x1],_0x4b83b2[0x2]);if(_0x54b838[0x3])this[_0x38395d(0x1ec)](_0xfc61b1[0x2]);return!![];}}_0x3af3e1['id']===_0x5bb129['deathStateId']()&&('VlYgX'===_0x38395d(0xa0f)?this['push']('performCollapse',_0x5bb129):_0x248402['collapse']=![]);}}},Window_BattleLog['prototype'][_0x10ff30(0x715)]=function(){},Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x316)]=function(_0x4aa72c){const _0x33e3a5=_0x10ff30;if(!VisuMZ[_0x33e3a5(0x95b)][_0x33e3a5(0x928)]['BattleLog'][_0x33e3a5(0x9c1)])return;const _0x436eb6=_0x4aa72c[_0x33e3a5(0xc81)](),_0xa1ffb6=_0x436eb6[_0x33e3a5(0x51d)]();for(const _0x1e57b5 of _0xa1ffb6){_0x1e57b5[_0x33e3a5(0xc8a)]&&(this[_0x33e3a5(0x395)](_0x33e3a5(0x3ec)),this[_0x33e3a5(0x395)](_0x33e3a5(0x64e)),this['push'](_0x33e3a5(0xc98)),this[_0x33e3a5(0x395)](_0x33e3a5(0x657),_0x1e57b5[_0x33e3a5(0xc8a)]['format'](_0x4aa72c[_0x33e3a5(0x52f)]())),this[_0x33e3a5(0x395)](_0x33e3a5(0x1ec)));}},Window_BattleLog['prototype'][_0x10ff30(0x3ec)]=function(){},Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x528)]=function(_0xdec19f){const _0x289dab=_0x10ff30,_0x52398a=VisuMZ[_0x289dab(0x95b)][_0x289dab(0x928)][_0x289dab(0x5f4)],_0x2ef2c4=_0xdec19f[_0x289dab(0xc81)]();if(_0x52398a['ShowAddedBuff'])this[_0x289dab(0x383)](_0xdec19f,_0x2ef2c4['addedBuffs'],TextManager[_0x289dab(0x5e0)]);if(_0x52398a[_0x289dab(0xaaa)])this[_0x289dab(0x383)](_0xdec19f,_0x2ef2c4['addedDebuffs'],TextManager[_0x289dab(0x60d)]);if(_0x52398a[_0x289dab(0x31c)])this[_0x289dab(0x383)](_0xdec19f,_0x2ef2c4['removedBuffs'],TextManager[_0x289dab(0x5b0)]);},Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x383)]=function(_0x59a811,_0x1e4271,_0x8d3d78){const _0x31cf3a=_0x10ff30;for(const _0x11a8a5 of _0x1e4271){const _0x4f56ce=_0x8d3d78['format'](_0x59a811[_0x31cf3a(0x52f)](),TextManager['param'](_0x11a8a5));this[_0x31cf3a(0x395)](_0x31cf3a(0x64e)),this[_0x31cf3a(0x395)](_0x31cf3a(0xc98)),this[_0x31cf3a(0x395)](_0x31cf3a(0x657),_0x4f56ce),this[_0x31cf3a(0x395)](_0x31cf3a(0x1ec));}},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x34e)]=Window_BattleLog['prototype']['clear'],Window_BattleLog[_0x10ff30(0xb0c)]['clear']=function(){const _0x516b22=_0x10ff30;VisuMZ[_0x516b22(0x95b)]['Window_BattleLog_clear'][_0x516b22(0xb96)](this),this[_0x516b22(0x86c)]();},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x450)]=Window_BattleLog['prototype'][_0x10ff30(0xc98)],Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0xc98)]=function(){const _0xcfd6e2=_0x10ff30;VisuMZ[_0xcfd6e2(0x95b)]['Window_BattleLog_pushBaseLine'][_0xcfd6e2(0xb96)](this),this[_0xcfd6e2(0x86c)]();},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x32d)]=Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x64e)],Window_BattleLog[_0x10ff30(0xb0c)]['popBaseLine']=function(){const _0x541994=_0x10ff30;VisuMZ['BattleCore'][_0x541994(0x32d)]['call'](this),this['processRefresh'](),this['callNextMethod']();},VisuMZ['BattleCore'][_0x10ff30(0x264)]=Window_BattleLog['prototype'][_0x10ff30(0x5a3)],Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x5a3)]=function(_0x423897){const _0x2b73bb=_0x10ff30;VisuMZ[_0x2b73bb(0x95b)][_0x2b73bb(0x264)][_0x2b73bb(0xb96)](this,_0x423897),this[_0x2b73bb(0x86c)]();},Window_BattleLog['prototype'][_0x10ff30(0xb56)]=function(){const _0x340fc4=_0x10ff30;let _0x1104ba=0x0;this[_0x340fc4(0x2d1)][_0x340fc4(0x449)]>0x0&&(_0x340fc4(0x261)!=='xPRuE'?_0x2d81a4['update']():_0x1104ba=this[_0x340fc4(0x2d1)][this[_0x340fc4(0x2d1)][_0x340fc4(0x449)]-0x1]),this[_0x340fc4(0x412)][_0x340fc4(0x449)]>_0x1104ba?this['wait']():this[_0x340fc4(0x86c)]();},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x926)]=Window_BattleLog[_0x10ff30(0xb0c)]['performActionStart'],Window_BattleLog['prototype']['performActionStart']=function(_0x4b9c9e,_0x304db8){const _0x54fd6c=_0x10ff30;VisuMZ[_0x54fd6c(0x95b)][_0x54fd6c(0x926)][_0x54fd6c(0xb96)](this,_0x4b9c9e,_0x304db8),this['callNextMethod']();},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x5c7)]=Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0xb9d)],Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0xb9d)]=function(_0x548aa4,_0x27e05f){const _0x21a647=_0x10ff30;VisuMZ[_0x21a647(0x95b)][_0x21a647(0x5c7)]['call'](this,_0x548aa4,_0x27e05f),this['callNextMethod']();},VisuMZ['BattleCore']['Window_BattleLog_performActionEnd']=Window_BattleLog['prototype']['performActionEnd'],Window_BattleLog[_0x10ff30(0xb0c)]['performActionEnd']=function(_0x34bcc2){const _0x51462f=_0x10ff30;VisuMZ[_0x51462f(0x95b)][_0x51462f(0x76a)]['call'](this,_0x34bcc2);for(const _0x53cecf of BattleManager[_0x51462f(0x9b3)]()){if(!_0x53cecf)continue;if(_0x53cecf[_0x51462f(0x472)]())continue;_0x53cecf[_0x51462f(0x4fc)]();}this['callNextMethod']();},VisuMZ['BattleCore'][_0x10ff30(0x744)]=Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0xb94)],Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0xb94)]=function(_0x214e9e){const _0x14d293=_0x10ff30;VisuMZ[_0x14d293(0x95b)]['Window_BattleLog_performDamage'][_0x14d293(0xb96)](this,_0x214e9e),this['callNextMethod']();},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x225)]=Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x82a)],Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x82a)]=function(_0x44e6ce){const _0x2a32f1=_0x10ff30;VisuMZ[_0x2a32f1(0x95b)][_0x2a32f1(0x225)][_0x2a32f1(0xb96)](this,_0x44e6ce),this[_0x2a32f1(0x86c)]();},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x8b4)]=Window_BattleLog[_0x10ff30(0xb0c)]['performRecovery'],Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x66d)]=function(_0x2a13e7){const _0x4a4a03=_0x10ff30;VisuMZ[_0x4a4a03(0x95b)][_0x4a4a03(0x8b4)][_0x4a4a03(0xb96)](this,_0x2a13e7),this[_0x4a4a03(0x86c)]();},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x77c)]=Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0xa4d)],Window_BattleLog['prototype'][_0x10ff30(0xa4d)]=function(_0x151244){const _0x2fde43=_0x10ff30;VisuMZ[_0x2fde43(0x95b)][_0x2fde43(0x77c)][_0x2fde43(0xb96)](this,_0x151244),this[_0x2fde43(0x86c)]();},VisuMZ['BattleCore'][_0x10ff30(0x4ec)]=Window_BattleLog['prototype'][_0x10ff30(0x767)],Window_BattleLog['prototype'][_0x10ff30(0x767)]=function(_0xffffe){const _0x1e8661=_0x10ff30;VisuMZ['BattleCore']['Window_BattleLog_performMagicEvasion'][_0x1e8661(0xb96)](this,_0xffffe),this[_0x1e8661(0x86c)]();},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x59b)]=Window_BattleLog['prototype']['performCounter'],Window_BattleLog['prototype']['performCounter']=function(_0x19406e){const _0x66e071=_0x10ff30;VisuMZ[_0x66e071(0x95b)]['Window_BattleLog_performCounter'][_0x66e071(0xb96)](this,_0x19406e),this[_0x66e071(0x86c)]();},VisuMZ[_0x10ff30(0x95b)]['Window_BattleLog_performReflection']=Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x7f5)],Window_BattleLog[_0x10ff30(0xb0c)]['performReflection']=function(_0x501308){const _0x60c41d=_0x10ff30;VisuMZ[_0x60c41d(0x95b)][_0x60c41d(0x4c2)][_0x60c41d(0xb96)](this,_0x501308),this[_0x60c41d(0x86c)]();},VisuMZ[_0x10ff30(0x95b)]['Window_BattleLog_performSubstitute']=Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x3a4)],Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x3a4)]=function(_0x3d7a85,_0x3ae67d){const _0x47f5a0=_0x10ff30;VisuMZ[_0x47f5a0(0x95b)][_0x47f5a0(0xa96)][_0x47f5a0(0xb96)](this,_0x3d7a85,_0x3ae67d),this['callNextMethod']();},VisuMZ[_0x10ff30(0x95b)][_0x10ff30(0x896)]=Window_BattleLog['prototype'][_0x10ff30(0xbd5)],Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0xbd5)]=function(_0x4958df){const _0x111cfa=_0x10ff30;VisuMZ[_0x111cfa(0x95b)]['Window_BattleLog_performCollapse'][_0x111cfa(0xb96)](this,_0x4958df),this[_0x111cfa(0x86c)]();},Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0xc41)]=function(_0x3fcde7,_0x2f4b01){const _0x320fd4=_0x10ff30;_0x3fcde7[_0x320fd4(0xc41)](_0x2f4b01),this[_0x320fd4(0x86c)]();},Window_BattleLog[_0x10ff30(0xb0c)]['showEnemyAttackAnimation']=function(_0x347907,_0x215274){const _0x5199db=_0x10ff30,_0x540734=_0x347907[_0x5199db(0xba2)]();_0x540734<=0x0?_0x5199db(0xb23)==='FeGLZ'?this[_0x5199db(0xbf6)]=![]:SoundManager['playEnemyAttack']():this[_0x5199db(0xbd9)](_0x215274,_0x540734);},Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x1e1)]=function(_0x54684f,_0x507d89,_0x35771e){const _0x208062=_0x10ff30,_0x3b6f2c=[_0x54684f][_0x208062(0xc68)](_0x507d89);for(const _0x453ee5 of _0x3b6f2c){if('vOfga'!==_0x208062(0x9ab)){if(!_0x453ee5)continue;_0x453ee5[_0x208062(0x3e6)](_0x35771e);}else _0x57b2b2['x']=_0x37ba51['x']+_0x1967be[_0x208062(0x56f)]*_0x3ad7dc,_0x260caf['y']=_0x2ef6f0['y']+_0x36c1de[_0x208062(0x9fb)];}this[_0x208062(0x86c)]();},Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x32f)]=function(_0x58db25){const _0x1ad9b4=_0x10ff30;this[_0x1ad9b4(0x716)]=_0x58db25;},Window_BattleLog['prototype'][_0x10ff30(0x918)]=function(_0x9a8655,_0x4321e6){for(const _0x2b8e46 of _0x9a8655){if(!_0x2b8e46)continue;_0x2b8e46['requestMotion'](_0x4321e6);}this['callNextMethod']();},Window_BattleLog[_0x10ff30(0xb0c)]['performMoveToPoint']=function(_0x12b8b3,_0x2afef7,_0x57830e,_0x79838,_0x4350c6,_0x21e9f9){const _0xd82240=_0x10ff30;_0x12b8b3[_0xd82240(0x2bf)](_0x2afef7,_0x57830e,_0x79838,_0x4350c6,_0x21e9f9,-0x1),this[_0xd82240(0x86c)]();},Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x76e)]=function(_0x2d3f42,_0x429285,_0x516574,_0x16efa1,_0x1b5c2c,_0x4911b0,_0x19342f){const _0x159dc5=_0x10ff30,_0x43c66d=Math[_0x159dc5(0xa7f)](..._0x429285[_0x159dc5(0xad3)](_0x4d1596=>_0x4d1596[_0x159dc5(0x843)]()[_0x159dc5(0xa75)]-_0x4d1596[_0x159dc5(0x843)]()[_0x159dc5(0x243)]()/0x2)),_0x1eedab=Math[_0x159dc5(0x909)](..._0x429285[_0x159dc5(0xad3)](_0x33a71b=>_0x33a71b[_0x159dc5(0x843)]()[_0x159dc5(0xa75)]+_0x33a71b[_0x159dc5(0x843)]()[_0x159dc5(0x243)]()/0x2)),_0x699af9=Math[_0x159dc5(0xa7f)](..._0x429285[_0x159dc5(0xad3)](_0x168914=>_0x168914[_0x159dc5(0x843)]()[_0x159dc5(0xcae)]-_0x168914['battler']()[_0x159dc5(0x6d3)]())),_0x2d0aa3=Math[_0x159dc5(0x909)](..._0x429285[_0x159dc5(0xad3)](_0x1942af=>_0x1942af['battler']()['_baseY'])),_0x112428=_0x429285[_0x159dc5(0xb68)](_0x123c6f=>_0x123c6f[_0x159dc5(0x58a)]())[_0x159dc5(0x449)],_0x5c736f=_0x429285[_0x159dc5(0xb68)](_0x4c6365=>_0x4c6365[_0x159dc5(0xccb)]())[_0x159dc5(0x449)];let _0x5914dd=0x0,_0x44cc41=0x0;if(_0x516574[_0x159dc5(0x22f)](/front/i)){if('GaEgr'===_0x159dc5(0x4b9))_0x5914dd=_0x112428>=_0x5c736f?_0x43c66d:_0x1eedab;else{const _0x1a7e1f=this[_0x159dc5(0xa8f)][_0x159dc5(0x808)]['y'];_0x43a3ac-=(_0x1a7e1f-0x1)*this['height'];}}else{if(_0x516574[_0x159dc5(0x22f)](/middle/i))_0x5914dd=(_0x43c66d+_0x1eedab)/0x2,_0x19342f=-0x1;else _0x516574[_0x159dc5(0x22f)](/back/i)&&(_0x5914dd=_0x112428>=_0x5c736f?_0x1eedab:_0x43c66d);}if(_0x516574['match'](/head/i)){if(_0x159dc5(0x351)!=='smYwy')_0x44cc41=_0x699af9;else{if(!_0x4eaa94[_0x159dc5(0xc1e)]())return;const _0x1b025c=_0x5f585a[_0x159dc5(0x621)]();if(!_0x1b025c)return;_0x1b025c[_0x159dc5(0x4ca)](_0x159dc5(0x3c6));}}else{if(_0x516574[_0x159dc5(0x22f)](/center/i))'KKaiP'===_0x159dc5(0x44b)?_0x44cc41=(_0x699af9+_0x2d0aa3)/0x2:_0x182dc4['shadow']=![];else{if(_0x516574[_0x159dc5(0x22f)](/base/i)){if(_0x159dc5(0xb2c)===_0x159dc5(0xb2c))_0x44cc41=_0x2d0aa3;else{if(!_0x50b732[_0x159dc5(0xc1e)]())return![];if(!_0x5d9f5e)return![];if(!_0x59998c[_0x159dc5(0x5c4)]())return![];if(_0x4de55b[_0x159dc5(0x5c4)]()[_0x159dc5(0x7ed)][_0x159dc5(0x22f)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(_0x62e47d[_0x159dc5(0x4d3)](_0x3e46e7[_0x159dc5(0x5c4)]()))return!![];return![];}}}}_0x2d3f42['moveBattlerToPoint'](_0x5914dd,_0x44cc41,_0x16efa1,_0x1b5c2c,_0x4911b0,_0x19342f),this[_0x159dc5(0x86c)]();},Window_BattleLog[_0x10ff30(0xb0c)][_0x10ff30(0x957)]=function(_0x5921be,_0x31b5e7,_0x14d983){const _0x5d775c=_0x10ff30;for(const _0x193916 of _0x5921be){if(!_0x193916)continue;_0x193916[_0x5d775c(0x4dc)](_0x31b5e7,_0x14d983);}this[_0x5d775c(0x86c)]();};