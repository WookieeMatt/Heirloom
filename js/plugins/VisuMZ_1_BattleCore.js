//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.69;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.69] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0x45cef8=_0x2a1e;(function(_0x44b9d3,_0x17e52f){const _0x523ae0=_0x2a1e,_0x1dfdaf=_0x44b9d3();while(!![]){try{const _0x1cab94=-parseInt(_0x523ae0(0x725))/0x1+parseInt(_0x523ae0(0xb0c))/0x2+parseInt(_0x523ae0(0x3e6))/0x3+parseInt(_0x523ae0(0xa51))/0x4*(parseInt(_0x523ae0(0x671))/0x5)+parseInt(_0x523ae0(0xc9e))/0x6+-parseInt(_0x523ae0(0x86f))/0x7*(-parseInt(_0x523ae0(0x841))/0x8)+-parseInt(_0x523ae0(0x589))/0x9;if(_0x1cab94===_0x17e52f)break;else _0x1dfdaf['push'](_0x1dfdaf['shift']());}catch(_0x36a3a1){_0x1dfdaf['push'](_0x1dfdaf['shift']());}}}(_0x46f7,0x682d6));var label=_0x45cef8(0x6c0),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x45cef8(0x4db)](function(_0x4a1bf1){const _0x49bac7=_0x45cef8;return _0x4a1bf1[_0x49bac7(0xa40)]&&_0x4a1bf1[_0x49bac7(0xcd9)][_0x49bac7(0x2b1)]('['+label+']');})[0x0];VisuMZ[label][_0x45cef8(0x658)]=VisuMZ[label][_0x45cef8(0x658)]||{},VisuMZ[_0x45cef8(0x8b3)]=function(_0x42b3a5,_0x1df49d){const _0x5740aa=_0x45cef8;for(const _0x2eb2c5 in _0x1df49d){if('OoOqm'===_0x5740aa(0xc50)){if(_0x2eb2c5['match'](/(.*):(.*)/i)){const _0x3aaf21=String(RegExp['$1']),_0x351c5d=String(RegExp['$2'])[_0x5740aa(0x5d3)]()[_0x5740aa(0x7f3)]();let _0x2de943,_0x4b5476,_0x50f454;switch(_0x351c5d){case _0x5740aa(0x7bb):_0x2de943=_0x1df49d[_0x2eb2c5]!==''?Number(_0x1df49d[_0x2eb2c5]):0x0;break;case _0x5740aa(0xcfc):_0x4b5476=_0x1df49d[_0x2eb2c5]!==''?JSON['parse'](_0x1df49d[_0x2eb2c5]):[],_0x2de943=_0x4b5476[_0x5740aa(0x4a9)](_0x73ecaf=>Number(_0x73ecaf));break;case _0x5740aa(0x905):_0x2de943=_0x1df49d[_0x2eb2c5]!==''?eval(_0x1df49d[_0x2eb2c5]):null;break;case _0x5740aa(0x91a):_0x4b5476=_0x1df49d[_0x2eb2c5]!==''?JSON[_0x5740aa(0xadd)](_0x1df49d[_0x2eb2c5]):[],_0x2de943=_0x4b5476[_0x5740aa(0x4a9)](_0x56b073=>eval(_0x56b073));break;case _0x5740aa(0x5a9):_0x2de943=_0x1df49d[_0x2eb2c5]!==''?JSON[_0x5740aa(0xadd)](_0x1df49d[_0x2eb2c5]):'';break;case _0x5740aa(0x2f0):_0x4b5476=_0x1df49d[_0x2eb2c5]!==''?JSON[_0x5740aa(0xadd)](_0x1df49d[_0x2eb2c5]):[],_0x2de943=_0x4b5476[_0x5740aa(0x4a9)](_0x8db3bb=>JSON[_0x5740aa(0xadd)](_0x8db3bb));break;case'FUNC':_0x2de943=_0x1df49d[_0x2eb2c5]!==''?new Function(JSON[_0x5740aa(0xadd)](_0x1df49d[_0x2eb2c5])):new Function(_0x5740aa(0x8bd));break;case _0x5740aa(0x7a8):_0x4b5476=_0x1df49d[_0x2eb2c5]!==''?JSON[_0x5740aa(0xadd)](_0x1df49d[_0x2eb2c5]):[],_0x2de943=_0x4b5476[_0x5740aa(0x4a9)](_0x31cea5=>new Function(JSON[_0x5740aa(0xadd)](_0x31cea5)));break;case'STR':_0x2de943=_0x1df49d[_0x2eb2c5]!==''?String(_0x1df49d[_0x2eb2c5]):'';break;case'ARRAYSTR':_0x4b5476=_0x1df49d[_0x2eb2c5]!==''?JSON[_0x5740aa(0xadd)](_0x1df49d[_0x2eb2c5]):[],_0x2de943=_0x4b5476[_0x5740aa(0x4a9)](_0x3cd4f1=>String(_0x3cd4f1));break;case _0x5740aa(0x7ea):_0x50f454=_0x1df49d[_0x2eb2c5]!==''?JSON['parse'](_0x1df49d[_0x2eb2c5]):{},_0x42b3a5[_0x3aaf21]={},VisuMZ[_0x5740aa(0x8b3)](_0x42b3a5[_0x3aaf21],_0x50f454);continue;case _0x5740aa(0xb46):_0x4b5476=_0x1df49d[_0x2eb2c5]!==''?JSON[_0x5740aa(0xadd)](_0x1df49d[_0x2eb2c5]):[],_0x2de943=_0x4b5476['map'](_0x42d887=>VisuMZ[_0x5740aa(0x8b3)]({},JSON[_0x5740aa(0xadd)](_0x42d887)));break;default:continue;}_0x42b3a5[_0x3aaf21]=_0x2de943;}}else this['push']('fnordAddedStates'),this[_0x5740aa(0x287)]('popBaseLine'),this[_0x5740aa(0x287)](_0x5740aa(0xc8f)),this[_0x5740aa(0x287)](_0x5740aa(0x4b8),_0x2de7f5[_0x5740aa(0x9ec)](_0x1a239e[_0x5740aa(0xd00)]())),this[_0x5740aa(0x287)](_0x5740aa(0xcfe));}return _0x42b3a5;},(_0x2b1f2c=>{const _0x53028e=_0x45cef8,_0x192f36=_0x2b1f2c['name'];for(const _0x300599 of dependencies){if('WZfBh'==='XSehJ'){if(!this['item']())return _0x42e8dc;const _0x35c887=this[_0x53028e(0x3a4)]()[_0x53028e(0xbfd)];return _0x35c887[_0x53028e(0x291)](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0x572501[_0x53028e(0xcad)](this[_0x53028e(0x289)]()),_0x3d892a;}else{if(!Imported[_0x300599]){alert(_0x53028e(0x7da)[_0x53028e(0x9ec)](_0x192f36,_0x300599)),SceneManager[_0x53028e(0xa50)]();break;}}}const _0x1e7770=_0x2b1f2c['description'];if(_0x1e7770[_0x53028e(0x291)](/\[Version[ ](.*?)\]/i)){const _0x4ae1f5=Number(RegExp['$1']);_0x4ae1f5!==VisuMZ[label][_0x53028e(0x2a2)]&&(alert(_0x53028e(0x394)[_0x53028e(0x9ec)](_0x192f36,_0x4ae1f5)),SceneManager['exit']());}if(_0x1e7770[_0x53028e(0x291)](/\[Tier[ ](\d+)\]/i)){const _0xe35840=Number(RegExp['$1']);_0xe35840<tier?(alert(_0x53028e(0x2ac)['format'](_0x192f36,_0xe35840,tier)),SceneManager['exit']()):tier=Math[_0x53028e(0x2ce)](_0xe35840,tier);}VisuMZ[_0x53028e(0x8b3)](VisuMZ[label]['Settings'],_0x2b1f2c[_0x53028e(0x827)]);})(pluginData),VisuMZ[_0x45cef8(0xce7)]=function(_0x4e2d1c){const _0x13574e=_0x45cef8;let _0x513c6d=[];for(const _0x3828f5 of _0x4e2d1c){_0x513c6d=_0x513c6d[_0x13574e(0x9f7)](VisuMZ[_0x13574e(0xae8)](_0x3828f5));}return _0x513c6d[_0x13574e(0x4db)](_0x1c505f=>_0x1c505f);},VisuMZ[_0x45cef8(0xae8)]=function(_0x361dbf){const _0x523161=_0x45cef8,_0x494b19=BattleManager['allBattleMembers']()[_0x523161(0x4db)](_0x4e015a=>_0x4e015a&&_0x4e015a[_0x523161(0x608)]()),_0x404ebb=BattleManager[_0x523161(0x8af)],_0x1f48d6=BattleManager[_0x523161(0x244)],_0x53f3f3=BattleManager['_allTargets']?BattleManager[_0x523161(0xca8)][_0x523161(0xa4c)](0x0):_0x494b19;_0x361dbf=_0x361dbf[_0x523161(0xa5b)]()[_0x523161(0x7f3)]();if(_0x361dbf===_0x523161(0x295))return[_0x404ebb];else{if(_0x361dbf===_0x523161(0x434))return[_0x1f48d6];else{if(_0x361dbf===_0x523161(0x552)){if(_0x523161(0x4a6)!==_0x523161(0x4a6)){const _0x21333d=this[_0x523161(0x562)](_0x1b3384);return _0x21333d===_0x523161(0x84d)?this[_0x523161(0x4eb)]():_0x5386fc[_0x523161(0x6c0)]['Window_Options_statusText'][_0x523161(0xa07)](this,_0x381cae);}else{if(_0x1f48d6){if(_0x523161(0x39f)==='nRjRG'){const _0x49833b=_0x53f3f3[_0x523161(0xac5)](_0x1f48d6);return _0x49833b>=0x0?[_0x53f3f3[_0x49833b-0x1]||_0x1f48d6]:[_0x1f48d6];}else _0x43723b[_0x523161(0x6c0)][_0x523161(0x759)]['call'](this),this[_0x523161(0x60d)]();}}}else{if(_0x361dbf===_0x523161(0x8b4)){if(_0x523161(0xce5)===_0x523161(0xce5)){if(_0x1f48d6){const _0x50bf70=_0x53f3f3[_0x523161(0xac5)](_0x1f48d6);return _0x50bf70>=0x0?[_0x53f3f3[_0x50bf70+0x1]||_0x1f48d6]:[_0x1f48d6];}}else this['_tpbNeedsPartyCommand']=![];}else{if(_0x361dbf===_0x523161(0x98b))return _0x523161(0xbb5)!==_0x523161(0xbb5)?_0x6da4ca[_0x523161(0x6c0)][_0x523161(0x658)]['BattleLayout'][_0x523161(0x7c7)]:_0x53f3f3;else{if(_0x361dbf===_0x523161(0x6b9))return[_0x404ebb][_0x523161(0x9f7)](_0x53f3f3);else{if(_0x361dbf==='not\x20focus')return _0x494b19['filter'](_0x1daff0=>_0x1daff0!==_0x404ebb&&!_0x53f3f3[_0x523161(0x2b1)](_0x1daff0)&&_0x1daff0[_0x523161(0xa68)]());}}}}}}if(_0x404ebb){if(_0x523161(0x65e)===_0x523161(0x9e4))_0x356fdd[_0x523161(0x2dd)](0x0,0x0,_0x41e394[_0x523161(0xaaa)]['width'],this[_0x523161(0xaaa)][_0x523161(0xa2a)]);else{if(_0x361dbf==='alive\x20friends')return _0x404ebb['friendsUnit']()[_0x523161(0x214)]();else{if(_0x361dbf==='alive\x20friends\x20not\x20user'){if(_0x523161(0x3b8)!=='VckRf')_0x24dd79+=_0x4447e0,_0x143e9a+=_0x418c0c;else return _0x404ebb[_0x523161(0xa15)]()[_0x523161(0x214)]()[_0x523161(0x4db)](_0x121604=>_0x121604!==_0x404ebb);}else{if(_0x361dbf===_0x523161(0x2e4)){if(_0x523161(0x7eb)===_0x523161(0x7eb))return _0x404ebb['friendsUnit']()[_0x523161(0x214)]()['filter'](_0x29a8ed=>_0x29a8ed!==_0x1f48d6);else{const _0x48e23c=_0x3469f2(_0x1b0cbb['$1'])[_0x523161(0x7e0)](/[\r\n]+/)['remove'](''),_0xf42833=_0x6abe9a['processRandomizedData'](_0x48e23c);_0x56a60c[_0x523161(0x84c)]=_0x29d3a3[_0x523161(0x590)](_0xf42833);}}else{if(_0x361dbf===_0x523161(0x70b))return _0x404ebb[_0x523161(0xa15)]()[_0x523161(0x33c)]();else{if(_0x361dbf[_0x523161(0x291)](/FRIEND INDEX (\d+)/i)){const _0x3f36ca=Number(RegExp['$1']);return[_0x404ebb['friendsUnit']()[_0x523161(0x666)]()[_0x3f36ca]];}}}}}if(_0x361dbf===_0x523161(0xce6))return _0x404ebb[_0x523161(0x96a)]()[_0x523161(0x214)]();else{if(_0x361dbf===_0x523161(0xc3e))return _0x404ebb[_0x523161(0x96a)]()[_0x523161(0x214)]()[_0x523161(0x4db)](_0x5bfe12=>_0x5bfe12!==_0x1f48d6);else{if(_0x361dbf==='dead\x20opponents'){if(_0x523161(0x2cd)!=='syAwB')return _0x404ebb[_0x523161(0x96a)]()[_0x523161(0x33c)]();else _0x340b07*=this[_0x523161(0x49c)]();}else{if(_0x361dbf[_0x523161(0x291)](/OPPONENT INDEX (\d+)/i)){const _0xcb467d=Number(RegExp['$1']);return[_0x404ebb[_0x523161(0x96a)]()[_0x523161(0x666)]()[_0xcb467d]];}}}}}}if(_0x361dbf===_0x523161(0xc4a)){if('FaLxO'===_0x523161(0x4f8))_0x434df5[_0x523161(0x6c0)][_0x523161(0x654)][_0x523161(0xa07)](this,_0x4b8de0,_0x4e06cb),this[_0x523161(0x5d7)]();else return $gameParty[_0x523161(0x214)]();}else{if(_0x361dbf===_0x523161(0x9ee)){if(_0x523161(0xa81)===_0x523161(0xa16)){if(this[_0x523161(0x3eb)]())return;this['adjustWeaponSpriteOffset'](),this['_weaponSprite'][_0x523161(0x74e)](_0x92f169),this[_0x523161(0x318)][_0x523161(0x427)]();}else return $gameParty[_0x523161(0x214)]()['filter'](_0x3168fd=>_0x3168fd!==_0x404ebb);}else{if(_0x361dbf==='alive\x20actors\x20not\x20target')return $gameParty[_0x523161(0x214)]()[_0x523161(0x4db)](_0x47da2e=>_0x47da2e!==_0x1f48d6);else{if(_0x361dbf===_0x523161(0x69c))return $gameParty[_0x523161(0x33c)]();else{if(_0x361dbf['match'](/ACTOR INDEX (\d+)/i)){const _0x3cafe3=Number(RegExp['$1']);return[$gameParty[_0x523161(0x666)]()[_0x3cafe3]];}else{if(_0x361dbf['match'](/ACTOR ID (\d+)/i)){const _0xbd2099=Number(RegExp['$1']);return[$gameActors[_0x523161(0x4d4)](_0xbd2099)];}}}}}}if(_0x361dbf==='alive\x20enemies')return $gameTroop[_0x523161(0x214)]();else{if(_0x361dbf==='alive\x20enemies\x20not\x20user')return $gameTroop[_0x523161(0x214)]()[_0x523161(0x4db)](_0x5c6ed3=>_0x5c6ed3!==_0x404ebb);else{if(_0x361dbf===_0x523161(0x727))return $gameTroop[_0x523161(0x214)]()[_0x523161(0x4db)](_0x6c57c3=>_0x6c57c3!==_0x1f48d6);else{if(_0x361dbf===_0x523161(0x33e))return $gameTroop[_0x523161(0x33c)]();else{if(_0x361dbf[_0x523161(0x291)](/ENEMY INDEX (\d+)/i)){if(_0x523161(0x1e1)===_0x523161(0x1e1)){const _0x1eb4bd=Number(RegExp['$1']);return[$gameTroop[_0x523161(0x666)]()[_0x1eb4bd]];}else{const _0x386c41=0xa,_0x2011f0=0x12c*_0x386c41,_0x40a1f1=0x1e*_0x386c41;this[_0x523161(0x2b5)](_0x2011f0,0x0,_0x40a1f1);}}else{if(_0x361dbf[_0x523161(0x291)](/ENEMY ID (\d+)/i)){const _0x1cfc08=Number(RegExp['$1']);return $gameTroop[_0x523161(0x214)]()['filter'](_0x4a3e20=>_0x4a3e20[_0x523161(0xbce)]()===_0x1cfc08);}}}}}}if(_0x361dbf==='alive\x20battlers')return _0x494b19[_0x523161(0x4db)](_0x498e8f=>_0x498e8f[_0x523161(0xa9a)]());else{if(_0x361dbf===_0x523161(0xbf2))return _0x494b19[_0x523161(0x4db)](_0x1582a3=>_0x1582a3['isAlive']()&&_0x1582a3!==_0x404ebb);else{if(_0x361dbf===_0x523161(0x4a0))return _0x494b19[_0x523161(0x4db)](_0x5cbc31=>_0x5cbc31[_0x523161(0xa9a)]()&&_0x5cbc31!==_0x1f48d6);else{if(_0x361dbf===_0x523161(0x5e9))return _0x494b19[_0x523161(0x4db)](_0x570988=>_0x570988[_0x523161(0x61e)]());}}}return[];},PluginManager['registerCommand'](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x3c4),_0x3c0973=>{const _0x1c1556=_0x45cef8;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1c1556(0x8b3)](_0x3c0973,_0x3c0973);const _0x2d7e72=$gameTemp[_0x1c1556(0xaf3)](),_0x1636ec=BattleManager['_action'],_0x1f2bf2=BattleManager[_0x1c1556(0x8af)],_0x34afbf=BattleManager[_0x1c1556(0xca8)]?BattleManager[_0x1c1556(0xca8)][_0x1c1556(0xa4c)](0x0):[],_0x5e8fee=BattleManager[_0x1c1556(0x266)];if(!_0x2d7e72||!_0x1636ec||!_0x1f2bf2)return;if(!_0x1636ec[_0x1c1556(0x3a4)]())return;if(_0x3c0973[_0x1c1556(0xb27)])_0x5e8fee[_0x1c1556(0x482)](_0x1f2bf2,_0x1636ec[_0x1c1556(0x3a4)]());if(_0x3c0973[_0x1c1556(0x632)]){if('DaBmu'===_0x1c1556(0x324))return _0x53e633[_0x1c1556(0x6c0)][_0x1c1556(0x658)]['ActorCmd'][_0x1c1556(0x50e)];else _0x5e8fee[_0x1c1556(0x287)](_0x1c1556(0x79f),_0x1f2bf2,_0x34afbf,!![]);}if(_0x3c0973[_0x1c1556(0x710)])_0x5e8fee[_0x1c1556(0x287)](_0x1c1556(0xcb1),_0x1f2bf2,_0x1636ec);if(_0x3c0973[_0x1c1556(0x22b)])_0x5e8fee['push'](_0x1c1556(0x9a0));if(_0x3c0973[_0x1c1556(0x9a6)])_0x5e8fee[_0x1c1556(0x287)](_0x1c1556(0x54e),_0x1f2bf2,_0x1636ec);if(_0x3c0973[_0x1c1556(0xb66)])_0x5e8fee[_0x1c1556(0x287)](_0x1c1556(0x787));_0x2d7e72[_0x1c1556(0x625)](_0x1c1556(0x65a));}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],'ActSeq_Set_WholeActionSet',_0x591b8e=>{const _0x1cd757=_0x45cef8;if(!SceneManager[_0x1cd757(0xc83)]())return;VisuMZ['ConvertParams'](_0x591b8e,_0x591b8e);const _0x382fcd=$gameTemp[_0x1cd757(0xaf3)](),_0x12a6f5=BattleManager['_action'],_0x1e1c3d=BattleManager[_0x1cd757(0x8af)],_0x1d3acf=BattleManager['_allTargets']?BattleManager[_0x1cd757(0xca8)][_0x1cd757(0xa4c)](0x0):[],_0x47b6ac=BattleManager[_0x1cd757(0x266)],_0x1222aa=_0x591b8e[_0x1cd757(0xa82)]??![];if(!_0x382fcd||!_0x12a6f5||!_0x1e1c3d)return;if(!_0x12a6f5[_0x1cd757(0x3a4)]())return;let _0xda11b0=_0x1222aa?_0x47b6ac['getDualWieldTimes'](_0x1e1c3d):0x1;for(let _0x16b09c=0x0;_0x16b09c<_0xda11b0;_0x16b09c++){if(_0x1cd757(0x29e)!==_0x1cd757(0xad1)){_0x1222aa&&_0x1e1c3d['isActor']()&&_0x47b6ac['push'](_0x1cd757(0xb1a),_0x1e1c3d,_0x16b09c);if(_0x591b8e['PerformAction'])_0x47b6ac['push'](_0x1cd757(0x8a3),_0x1e1c3d,_0x12a6f5);if(_0x591b8e[_0x1cd757(0xc4d)]>0x0)_0x47b6ac['push']('waitCount',_0x591b8e[_0x1cd757(0xc4d)]);if(_0x591b8e[_0x1cd757(0x9b1)])_0x47b6ac['push'](_0x1cd757(0x253),_0x1e1c3d,_0x1d3acf,_0x12a6f5[_0x1cd757(0x3a4)]()[_0x1cd757(0xc91)]);if(_0x591b8e[_0x1cd757(0xb66)])_0x47b6ac[_0x1cd757(0x287)]('waitForAnimation');for(const _0x5ef2f6 of _0x1d3acf){if(!_0x5ef2f6)continue;if(_0x591b8e['ActionEffect'])_0x47b6ac[_0x1cd757(0x287)](_0x1cd757(0xa08),_0x1e1c3d,_0x5ef2f6);}}else{if(!this[_0x1cd757(0x3cd)]())return;if(!this[_0x1cd757(0x6b4)])return;if(this[_0x1cd757(0x86a)]===_0x935236&&this[_0x1cd757(0x265)]===_0x30b6f7)return;this[_0x1cd757(0x86a)]=_0x2d242f,this[_0x1cd757(0x265)]=_0x3c8f08,this[_0x1cd757(0x471)]=_0x3eddac,this[_0x1cd757(0xc6f)]=_0x11cdc2,this['_growEasing']=_0x2fed88||_0x1cd757(0x278),_0x4a2965<=0x0&&(this[_0x1cd757(0x58f)]=this[_0x1cd757(0x86a)],this[_0x1cd757(0x53c)]=this[_0x1cd757(0x265)]);}}if(_0x1222aa&&_0x1e1c3d[_0x1cd757(0x98a)]()){if(_0x1cd757(0x5e3)==='iIoPB')_0x47b6ac[_0x1cd757(0x287)]('clearActiveWeaponSet',_0x1e1c3d);else for(const _0x5d6fbf of _0x233ec8){_0x5d6fbf[_0x1cd757(0x291)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x1a47d0=_0x2a7516(_0x1becb1['$1']),_0x2b16e5=_0x2ccb9b(_0xb60a1b['$2']),_0x219674=_0x2b16e5===0x1?this[_0x1cd757(0x222)]:this[_0x1cd757(0x8aa)],_0x4362d0=_0x8d29b2(_0x50acdb['$3']);_0x219674[_0x1a47d0]=_0x4362d0;}}if(_0x591b8e[_0x1cd757(0x632)])_0x47b6ac[_0x1cd757(0x287)]('applyImmortal',_0x1e1c3d,_0x1d3acf,![]);_0x382fcd[_0x1cd757(0x625)](_0x1cd757(0x65a));}),PluginManager[_0x45cef8(0x456)](pluginData['name'],_0x45cef8(0xae1),_0x1b3010=>{const _0x2ede00=_0x45cef8;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2ede00(0x8b3)](_0x1b3010,_0x1b3010);const _0xfa2acb=$gameTemp['getLastPluginCommandInterpreter'](),_0x43f861=BattleManager[_0x2ede00(0x79c)],_0x45b16e=BattleManager[_0x2ede00(0x8af)],_0x2f5963=BattleManager['_allTargets']?BattleManager[_0x2ede00(0xca8)][_0x2ede00(0xa4c)](0x0):[],_0x615af3=BattleManager[_0x2ede00(0x266)],_0x402e28=_0x1b3010['DualWield']??![];if(!_0xfa2acb||!_0x43f861||!_0x45b16e)return;if(!_0x43f861['item']())return;let _0x591a6d=_0x402e28?_0x615af3[_0x2ede00(0x7b7)](_0x45b16e):0x1;for(let _0x52f7c0=0x0;_0x52f7c0<_0x591a6d;_0x52f7c0++){for(const _0x3c923f of _0x2f5963){if(_0x2ede00(0x2d8)!=='EMqgZ'){if(!_0x3c923f)continue;_0x402e28&&_0x45b16e[_0x2ede00(0x98a)]()&&_0x615af3[_0x2ede00(0x287)]('setActiveWeaponSet',_0x45b16e,_0x52f7c0);if(_0x1b3010['PerformAction'])_0x615af3[_0x2ede00(0x287)]('performAction',_0x45b16e,_0x43f861);if(_0x1b3010[_0x2ede00(0xa58)]>0x0)_0x615af3[_0x2ede00(0x287)](_0x2ede00(0x717),_0x1b3010['WaitCount1']);if(_0x1b3010[_0x2ede00(0x9b1)])_0x615af3[_0x2ede00(0x287)](_0x2ede00(0x253),_0x45b16e,[_0x3c923f],_0x43f861[_0x2ede00(0x3a4)]()['animationId']);if(_0x1b3010['WaitCount2']>0x0)_0x615af3['push']('waitCount',_0x1b3010['WaitCount2']);if(_0x1b3010[_0x2ede00(0x5cc)])_0x615af3['push'](_0x2ede00(0xa08),_0x45b16e,_0x3c923f);}else _0xa9f57f[_0x2ede00(0x6c0)][_0x2ede00(0x23d)][_0x2ede00(0xa07)](this),_0xa8c42d[_0x2ede00(0xc70)]();}}_0x402e28&&_0x45b16e['isActor']()&&_0x615af3['push'](_0x2ede00(0xa3a),_0x45b16e);if(_0x1b3010[_0x2ede00(0x632)])_0x615af3[_0x2ede00(0x287)](_0x2ede00(0x79f),_0x45b16e,_0x2f5963,![]);_0xfa2acb[_0x2ede00(0x625)](_0x2ede00(0x65a));}),PluginManager[_0x45cef8(0x456)](pluginData['name'],_0x45cef8(0xbeb),_0x40d1de=>{const _0x2559b3=_0x45cef8;if(!SceneManager[_0x2559b3(0xc83)]())return;VisuMZ[_0x2559b3(0x8b3)](_0x40d1de,_0x40d1de);const _0x5f3172=$gameTemp[_0x2559b3(0xaf3)](),_0x54ccc3=BattleManager[_0x2559b3(0x79c)],_0x4a38b5=BattleManager['_subject'],_0x474b31=BattleManager['_allTargets']?BattleManager[_0x2559b3(0xca8)][_0x2559b3(0xa4c)](0x0):[],_0x5ec6f9=BattleManager['_logWindow'];if(!_0x5f3172||!_0x54ccc3||!_0x4a38b5)return;if(!_0x54ccc3['item']())return;if(_0x40d1de[_0x2559b3(0x632)])_0x5ec6f9[_0x2559b3(0x287)](_0x2559b3(0x79f),_0x4a38b5,_0x474b31,![]);if(_0x40d1de[_0x2559b3(0x23a)])_0x5ec6f9[_0x2559b3(0x287)](_0x2559b3(0x79d));if(_0x40d1de[_0x2559b3(0x2fc)])_0x5ec6f9[_0x2559b3(0x287)]('waitForEffect');if(_0x40d1de[_0x2559b3(0x990)])_0x5ec6f9[_0x2559b3(0x287)](_0x2559b3(0x6db));if(_0x40d1de[_0x2559b3(0xa9e)])_0x5ec6f9[_0x2559b3(0x287)](_0x2559b3(0xd06),_0x4a38b5);if(_0x40d1de[_0x2559b3(0x22b)])_0x5ec6f9[_0x2559b3(0x287)](_0x2559b3(0x9a0));_0x5f3172[_0x2559b3(0x625)](_0x2559b3(0x65a));}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],'ActSeq_ChangeAngle',_0x4ac2de=>{const _0x64bd32=_0x45cef8;if(!SceneManager[_0x64bd32(0xc83)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x64bd32(0x8b3)](_0x4ac2de,_0x4ac2de);const _0x1b5d23=$gameTemp[_0x64bd32(0xaf3)](),_0xff78a=_0x4ac2de['WaitForAngle'];if(!_0x1b5d23)return;$gameScreen[_0x64bd32(0x24b)](_0x4ac2de[_0x64bd32(0x526)],_0x4ac2de[_0x64bd32(0x690)],_0x4ac2de[_0x64bd32(0x94a)]);if(_0xff78a)_0x1b5d23[_0x64bd32(0x625)](_0x64bd32(0x7bf));}),PluginManager[_0x45cef8(0x456)](pluginData['name'],_0x45cef8(0xb75),_0x2c9141=>{const _0x1cc82d=_0x45cef8;if(!SceneManager[_0x1cc82d(0xc83)]())return;if(!Imported[_0x1cc82d(0xa9b)])return;VisuMZ[_0x1cc82d(0x8b3)](_0x2c9141,_0x2c9141);const _0x44a530=$gameTemp[_0x1cc82d(0xaf3)](),_0x2c6834=_0x2c9141[_0x1cc82d(0xd05)];if(!_0x44a530)return;$gameScreen[_0x1cc82d(0x24b)](0x0,_0x2c9141[_0x1cc82d(0x690)],_0x2c9141[_0x1cc82d(0x94a)]);if(_0x2c6834)_0x44a530[_0x1cc82d(0x625)]('battleAngle');}),PluginManager['registerCommand'](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x7b2),_0x160621=>{const _0x536d77=_0x45cef8;if(!SceneManager[_0x536d77(0xc83)]())return;if(!Imported[_0x536d77(0xa9b)])return;const _0x595066=$gameTemp[_0x536d77(0xaf3)]();if(!_0x595066)return;_0x595066[_0x536d77(0x625)](_0x536d77(0x7bf));}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0xb16),_0x2ba4a5=>{const _0x58bcab=_0x45cef8;if(!SceneManager[_0x58bcab(0xc83)]())return;VisuMZ[_0x58bcab(0x8b3)](_0x2ba4a5,_0x2ba4a5);const _0x4b59df=$gameTemp[_0x58bcab(0xaf3)](),_0x4ec007=BattleManager[_0x58bcab(0x79c)],_0x2c0824=BattleManager[_0x58bcab(0x8af)],_0x4fba26=VisuMZ[_0x58bcab(0xce7)](_0x2ba4a5[_0x58bcab(0x2d1)]),_0x54b4d3=_0x2ba4a5['Mirror'],_0x2a0033=BattleManager[_0x58bcab(0x266)];if(!_0x4b59df||!_0x4ec007||!_0x2c0824)return;if(!_0x4ec007[_0x58bcab(0x3a4)]())return;let _0x3d753c=_0x4ec007['item']()[_0x58bcab(0xc91)];if(_0x3d753c<0x0)_0x3d753c=_0x2c0824[_0x58bcab(0x9ef)]();$gameTemp['requestAnimation'](_0x4fba26,_0x3d753c,_0x54b4d3),_0x2ba4a5[_0x58bcab(0xb66)]&&_0x4b59df[_0x58bcab(0x625)]('battleAnimation');}),PluginManager['registerCommand'](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x999),_0x480da6=>{const _0x2a6d94=_0x45cef8;if(!SceneManager[_0x2a6d94(0xc83)]())return;VisuMZ[_0x2a6d94(0x8b3)](_0x480da6,_0x480da6);const _0x47b514=$gameTemp[_0x2a6d94(0xaf3)](),_0x1cb797=BattleManager[_0x2a6d94(0x8af)],_0x95bd0=VisuMZ[_0x2a6d94(0xce7)](_0x480da6[_0x2a6d94(0x2d1)]),_0x1d7063=_0x480da6[_0x2a6d94(0xc9b)],_0x40c4fc=BattleManager[_0x2a6d94(0x266)];if(!_0x47b514||!_0x1cb797)return;const _0x4cf3c2=_0x1cb797['attackAnimationId1']();$gameTemp[_0x2a6d94(0xc5f)](_0x95bd0,_0x4cf3c2,_0x1d7063),_0x480da6[_0x2a6d94(0xb66)]&&('wUNMb'!=='RgVwJ'?_0x47b514[_0x2a6d94(0x625)](_0x2a6d94(0x227)):_0x3a381f[_0x2a6d94(0x625)]('battleAnimation'));}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],'ActSeq_Animation_AttackAnimation2',_0x1cadd9=>{const _0x4d61d4=_0x45cef8;if(!SceneManager[_0x4d61d4(0xc83)]())return;VisuMZ['ConvertParams'](_0x1cadd9,_0x1cadd9);const _0x4660a0=_0x13e96['attackAnimationIdSlot'](_0x1cadd9[_0x4d61d4(0xb22)]);if(_0x4660a0<=0x0)return;const _0x2cb442=$gameTemp[_0x4d61d4(0xaf3)](),_0x13e96=BattleManager[_0x4d61d4(0x8af)],_0x3e700e=VisuMZ['CreateActionSequenceTargets'](_0x1cadd9[_0x4d61d4(0x2d1)]),_0xbc1b4d=_0x1cadd9[_0x4d61d4(0xc9b)],_0x235151=BattleManager[_0x4d61d4(0x266)];if(!_0x2cb442||!_0x13e96)return;$gameTemp[_0x4d61d4(0xc5f)](_0x3e700e,_0x4660a0,_0xbc1b4d),_0x1cadd9['WaitForAnimation']&&_0x2cb442['setWaitMode']('battleAnimation');}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x9e5),_0x4f2ff2=>{const _0x1c3577=_0x45cef8;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x4f2ff2,_0x4f2ff2);const _0x5698a9=$gameTemp[_0x1c3577(0xaf3)](),_0x459dc6=BattleManager[_0x1c3577(0x79c)],_0x268334=_0x4f2ff2['Mirror'],_0x167523=VisuMZ[_0x1c3577(0xce7)](_0x4f2ff2[_0x1c3577(0x2d1)]);if(!_0x5698a9||!_0x459dc6)return;if(!_0x459dc6[_0x1c3577(0x3a4)]())return;for(const _0x436f8d of _0x167523){if(!_0x436f8d)continue;_0x436f8d['performCastAnimation'](_0x459dc6,_0x268334);}if(_0x4f2ff2['WaitForAnimation'])_0x5698a9[_0x1c3577(0x625)](_0x1c3577(0x227));}),PluginManager['registerCommand'](pluginData[_0x45cef8(0xd00)],_0x45cef8(0xa0d),_0x4efb96=>{const _0xc34aa3=_0x45cef8;VisuMZ['ConvertParams'](_0x4efb96,_0x4efb96);const _0x5cc621=$gameTemp[_0xc34aa3(0xaf3)](),_0x18cbf1=VisuMZ[_0xc34aa3(0xce7)](_0x4efb96[_0xc34aa3(0x2d1)]),_0x3f7f2d=_0x4efb96[_0xc34aa3(0x377)];if(!_0x3f7f2d)return;for(const _0x3935ad of _0x18cbf1){if(!_0x3935ad)continue;if(!_0x3935ad[_0xc34aa3(0x98a)]())continue;_0x3935ad['setBattlePortrait'](_0x3f7f2d);}}),PluginManager['registerCommand'](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x20e),_0x4492a5=>{const _0x1bfc4e=_0x45cef8;if(!SceneManager['_scene'])return;if(!SceneManager[_0x1bfc4e(0x9e2)][_0x1bfc4e(0x78d)])return;if(!Imported[_0x1bfc4e(0x22d)])return;VisuMZ[_0x1bfc4e(0x8b3)](_0x4492a5,_0x4492a5);const _0x53f126=$gameTemp[_0x1bfc4e(0xaf3)](),_0x338daa=Math[_0x1bfc4e(0x365)](_0x4492a5[_0x1bfc4e(0xc95)]),_0x3bb95a=Math[_0x1bfc4e(0x365)](_0x4492a5[_0x1bfc4e(0x31b)]);$gameTemp[_0x1bfc4e(0x242)](_0x338daa,_0x3bb95a,_0x4492a5['AnimationID'],_0x4492a5[_0x1bfc4e(0xc9b)],_0x4492a5[_0x1bfc4e(0x349)]),_0x4492a5[_0x1bfc4e(0x8a6)]&&_0x53f126&&(SceneManager[_0x1bfc4e(0x9e2)][_0x1bfc4e(0x78d)][_0x1bfc4e(0x43a)](),_0x53f126['setWaitMode'](_0x1bfc4e(0x227)));}),PluginManager['registerCommand'](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x2c6),_0x2f0caa=>{const _0x59ab00=_0x45cef8;if(!SceneManager[_0x59ab00(0xc83)]())return;VisuMZ[_0x59ab00(0x8b3)](_0x2f0caa,_0x2f0caa);const _0x3a4e61=$gameTemp[_0x59ab00(0xaf3)](),_0x4de4ef=VisuMZ[_0x59ab00(0xce7)](_0x2f0caa[_0x59ab00(0x2d1)]),_0x35c6ce=_0x2f0caa['AnimationID'],_0xea2973=_0x2f0caa[_0x59ab00(0xc9b)];if(!_0x3a4e61)return;$gameTemp[_0x59ab00(0xc5f)](_0x4de4ef,_0x35c6ce,_0xea2973);if(_0x2f0caa['WaitForAnimation'])_0x3a4e61['setWaitMode'](_0x59ab00(0x227));}),PluginManager[_0x45cef8(0x456)](pluginData['name'],_0x45cef8(0x58b),_0x11e818=>{const _0x26623d=_0x45cef8;if(!SceneManager[_0x26623d(0xc83)]())return;const _0x5048ba=$gameTemp[_0x26623d(0xaf3)]();if(!_0x5048ba)return;_0x5048ba[_0x26623d(0x625)](_0x26623d(0x227));}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x7f6),_0x4b1104=>{const _0x184b11=_0x45cef8;if(!SceneManager[_0x184b11(0xc83)]())return;VisuMZ['ConvertParams'](_0x4b1104,_0x4b1104);const _0x4d5338=BattleManager[_0x184b11(0x266)],_0x5b5b76=_0x4b1104[_0x184b11(0x73c)]&&Imported['VisuMZ_4_CombatLog'];_0x4d5338[_0x184b11(0x4b8)](_0x4b1104[_0x184b11(0x23f)]),_0x5b5b76&&Imported['VisuMZ_4_CombatLog']&&$gameSystem[_0x184b11(0x6f2)](_0x4b1104[_0x184b11(0x23f)]||'',_0x4b1104[_0x184b11(0x874)]||0x0);}),PluginManager['registerCommand'](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x327),_0x3c0986=>{const _0xbf5f8=_0x45cef8;if(!SceneManager['isSceneBattle']())return;const _0x2b1636=BattleManager[_0xbf5f8(0x266)];_0x2b1636[_0xbf5f8(0x6db)]();}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0xbc6),_0x36159d=>{const _0x4ec360=_0x45cef8;if(!SceneManager[_0x4ec360(0xc83)]())return;const _0x16249c=$gameTemp[_0x4ec360(0xaf3)](),_0x596fd5=BattleManager['_action'],_0x50b47a=BattleManager['_subject'],_0x493b52=BattleManager[_0x4ec360(0x266)];if(!_0x16249c||!_0x596fd5||!_0x50b47a)return;if(!_0x596fd5[_0x4ec360(0x3a4)]())return;_0x493b52[_0x4ec360(0x482)](_0x50b47a,_0x596fd5['item']()),_0x16249c[_0x4ec360(0x625)]('battlelog');}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0xc31),_0x23bbff=>{const _0xf4df83=_0x45cef8;if(!SceneManager[_0xf4df83(0xc83)]())return;const _0x3d63bc=BattleManager['_logWindow'];_0x3d63bc[_0xf4df83(0xa65)]();}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],'ActSeq_BattleLog_PushBaseLine',_0x2f1d10=>{const _0x3f0ce5=_0x45cef8;if(!SceneManager[_0x3f0ce5(0xc83)]())return;const _0x10556f=BattleManager[_0x3f0ce5(0x266)];_0x10556f['pushBaseLine']();}),PluginManager[_0x45cef8(0x456)](pluginData['name'],_0x45cef8(0x763),_0x12750e=>{const _0x2e32b5=_0x45cef8;if(!SceneManager[_0x2e32b5(0xc83)]())return;const _0x4aa970=BattleManager['_logWindow'];_0x4aa970[_0x2e32b5(0x807)]();}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x83f),_0x2e3dad=>{const _0x5b6479=_0x45cef8;if(!SceneManager[_0x5b6479(0xc83)]())return;VisuMZ[_0x5b6479(0x8b3)](_0x2e3dad,_0x2e3dad),SceneManager[_0x5b6479(0x9e2)][_0x5b6479(0xbc4)](_0x2e3dad['ShowHide']);}),PluginManager[_0x45cef8(0x456)](pluginData['name'],_0x45cef8(0x747),_0xe4d1df=>{const _0x4d7f98=_0x45cef8;if(!SceneManager[_0x4d7f98(0xc83)]())return;const _0x569db5=$gameTemp[_0x4d7f98(0xaf3)]();_0x569db5[_0x4d7f98(0x625)](_0x4d7f98(0x65a));}),PluginManager['registerCommand'](pluginData[_0x45cef8(0xd00)],'ActSeq_BattleLog_WaitForNewLine',_0x1a130a=>{const _0x4fc06a=_0x45cef8;if(!SceneManager[_0x4fc06a(0xc83)]())return;const _0x33fcf1=$gameTemp[_0x4fc06a(0xaf3)](),_0x159eb7=BattleManager['_logWindow'];_0x159eb7[_0x4fc06a(0x79d)](),_0x33fcf1['setWaitMode'](_0x4fc06a(0x65a));}),PluginManager['registerCommand'](pluginData[_0x45cef8(0xd00)],_0x45cef8(0xcf7),_0x35b12d=>{const _0x4caab8=_0x45cef8;if(!SceneManager[_0x4caab8(0xc83)]())return;if(!Imported[_0x4caab8(0xa9b)])return;VisuMZ[_0x4caab8(0x8b3)](_0x35b12d,_0x35b12d);const _0x4ad276=$gameScreen[_0x4caab8(0x463)]();_0x4ad276[_0x4caab8(0x51f)]=_0x35b12d[_0x4caab8(0x32a)];}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x2b7),_0xf5308e=>{const _0x2bd117=_0x45cef8;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2bd117(0xa9b)])return;VisuMZ[_0x2bd117(0x8b3)](_0xf5308e,_0xf5308e);const _0x12a39f=$gameTemp[_0x2bd117(0xaf3)](),_0x3406ea=_0xf5308e['WaitForCamera'];$gameScreen[_0x2bd117(0x353)](_0xf5308e[_0x2bd117(0x59e)],_0xf5308e['FocusY'],_0xf5308e[_0x2bd117(0x690)],_0xf5308e['EasingType']);if(_0x3406ea)_0x12a39f[_0x2bd117(0x625)](_0x2bd117(0xc23));}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],'ActSeq_Camera_FocusTarget',_0x15ddee=>{const _0x45c4de=_0x45cef8;if(!SceneManager[_0x45c4de(0xc83)]())return;if(!Imported[_0x45c4de(0xa9b)])return;VisuMZ[_0x45c4de(0x8b3)](_0x15ddee,_0x15ddee);const _0x49cd5c=$gameTemp[_0x45c4de(0xaf3)](),_0x1c40df=VisuMZ[_0x45c4de(0xce7)](_0x15ddee[_0x45c4de(0x2d1)]),_0x2841ef=_0x15ddee[_0x45c4de(0x805)];$gameScreen[_0x45c4de(0x66a)](_0x1c40df,_0x15ddee[_0x45c4de(0x690)],_0x15ddee['EasingType']);if(_0x2841ef)_0x49cd5c[_0x45c4de(0x625)](_0x45c4de(0xc23));}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],'ActSeq_Camera_Offset',_0x3876e2=>{const _0x263573=_0x45cef8;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x263573(0xa9b)])return;VisuMZ[_0x263573(0x8b3)](_0x3876e2,_0x3876e2);const _0xaab779=$gameTemp[_0x263573(0xaf3)](),_0x456009=_0x3876e2[_0x263573(0x805)];$gameScreen[_0x263573(0x5dd)](_0x3876e2[_0x263573(0x900)],_0x3876e2[_0x263573(0x372)],_0x3876e2[_0x263573(0x690)],_0x3876e2['EasingType']);if(_0x456009)_0xaab779['setWaitMode'](_0x263573(0xc23));}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0xbec),_0x258fdf=>{const _0x2ea65b=_0x45cef8;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2ea65b(0xa9b)])return;VisuMZ[_0x2ea65b(0x8b3)](_0x258fdf,_0x258fdf);const _0x11fe67=$gameTemp['getLastPluginCommandInterpreter'](),_0x299864=_0x258fdf[_0x2ea65b(0x749)],_0x17c1ae=_0x258fdf[_0x2ea65b(0xa5c)],_0xd2c0ae=_0x258fdf[_0x2ea65b(0x805)];if(_0x299864){const _0x5f84e=Math[_0x2ea65b(0x365)](Graphics[_0x2ea65b(0x639)]/0x2),_0x2fdaf8=Math[_0x2ea65b(0x365)](Graphics[_0x2ea65b(0xa2a)]/0x2);$gameScreen[_0x2ea65b(0x353)](_0x5f84e,_0x2fdaf8,_0x258fdf['Duration'],_0x258fdf[_0x2ea65b(0x94a)]);}_0x17c1ae&&$gameScreen[_0x2ea65b(0x5dd)](0x0,0x0,_0x258fdf[_0x2ea65b(0x690)],_0x258fdf[_0x2ea65b(0x94a)]);if(_0xd2c0ae)_0x11fe67['setWaitMode'](_0x2ea65b(0xc23));}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x4fd),_0x221e75=>{const _0x2fe7fc=_0x45cef8;if(!SceneManager[_0x2fe7fc(0xc83)]())return;if(!Imported[_0x2fe7fc(0xa9b)])return;const _0x21864d=$gameTemp[_0x2fe7fc(0xaf3)]();if(!_0x21864d)return;_0x21864d[_0x2fe7fc(0x625)](_0x2fe7fc(0xc23));}),PluginManager['registerCommand'](pluginData[_0x45cef8(0xd00)],'ActSeq_DB_DragonbonesMotionAni',_0x5b7c60=>{const _0x5a5903=_0x45cef8;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5a5903(0x3bf)])return;VisuMZ[_0x5a5903(0x8b3)](_0x5b7c60,_0x5b7c60);const _0x10539e=VisuMZ[_0x5a5903(0xce7)](_0x5b7c60[_0x5a5903(0x2d1)]),_0x4465e1=_0x5b7c60[_0x5a5903(0xcb2)]['toLowerCase']()[_0x5a5903(0x7f3)]();for(const _0x5f3b13 of _0x10539e){if(!_0x5f3b13)continue;_0x5f3b13[_0x5a5903(0x84a)](_0x4465e1);}}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x9cc),_0x40e33a=>{const _0x235092=_0x45cef8;if(!SceneManager[_0x235092(0xc83)]())return;if(!Imported[_0x235092(0x3bf)])return;VisuMZ[_0x235092(0x8b3)](_0x40e33a,_0x40e33a);const _0x3f243b=VisuMZ['CreateActionSequenceTargets'](_0x40e33a[_0x235092(0x2d1)]),_0x74a157=_0x40e33a[_0x235092(0x7e3)];for(const _0x395ff0 of _0x3f243b){if('XlLAd'==='UKxHI'){if(!_0x45e81e)return;_0x1cdf38['VisuMZ_1_SkillsStatesCore']?_0xcc1951[_0x235092(0x3cf)][_0x235092(0x203)]['call'](this,_0x245836,_0x26a1f3,_0x53d804,_0x56bee2,_0x57ff5a):_0x55f08d[_0x235092(0x3cf)][_0x235092(0x203)]['call'](this,_0x24d628,_0x39b504,_0x214464,_0x2aedb4);}else{if(!_0x395ff0)continue;_0x395ff0[_0x235092(0xbcb)]()['timeScale']=_0x74a157;}}}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x6d1),_0x2d194e=>{const _0x59f9be=_0x45cef8;if(!SceneManager[_0x59f9be(0xc83)]())return;if(!Imported[_0x59f9be(0xc21)])return;VisuMZ[_0x59f9be(0x8b3)](_0x2d194e,_0x2d194e);const _0x51be49=BattleManager[_0x59f9be(0x79c)],_0x401024=_0x2d194e[_0x59f9be(0x1e7)];if(!_0x51be49)return;_0x51be49['_battleCoreAddedElements']=_0x401024;}),PluginManager['registerCommand'](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x876),_0x48b547=>{const _0x37f21f=_0x45cef8;if(!SceneManager[_0x37f21f(0xc83)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x1eb0d2=BattleManager[_0x37f21f(0x79c)];if(!_0x1eb0d2)return;_0x1eb0d2[_0x37f21f(0x8d0)]();}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],'ActSeq_Element_ForceElements',_0x1be20b=>{const _0x16c62b=_0x45cef8;if(!SceneManager[_0x16c62b(0xc83)]())return;if(!Imported[_0x16c62b(0xc21)])return;VisuMZ[_0x16c62b(0x8b3)](_0x1be20b,_0x1be20b);const _0x29db61=BattleManager['_action'],_0x51c439=_0x1be20b[_0x16c62b(0x1e7)];if(!_0x29db61)return;_0x29db61[_0x16c62b(0x2e2)]=_0x51c439;}),PluginManager['registerCommand'](pluginData['name'],_0x45cef8(0x393),_0x34141c=>{const _0x1a8c6c=_0x45cef8;if(!SceneManager[_0x1a8c6c(0xc83)]())return;if(!Imported[_0x1a8c6c(0xc21)])return;const _0xb07f27=BattleManager[_0x1a8c6c(0x79c)];if(!_0xb07f27)return;_0xb07f27['_battleCoreNoElement']=!![];}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x610),_0x195514=>{const _0xe6da40=_0x45cef8;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0xe6da40(0xc83)]())return;VisuMZ[_0xe6da40(0x8b3)](_0x195514,_0x195514);const _0x5a80bc=VisuMZ['CreateActionSequenceTargets'](_0x195514['Targets']);for(const _0x189a4b of _0x5a80bc){if(_0xe6da40(0xbff)!==_0xe6da40(0xbff))_0x202125[_0xe6da40(0x2d9)]=![];else{if(!_0x189a4b)continue;_0x189a4b[_0xe6da40(0x2a3)](_0xe6da40(0x3b7)),_0x189a4b[_0xe6da40(0x2a3)](_0xe6da40(0xa28)),_0x189a4b['removeHorrorEffect']('tv'),_0x189a4b['clearHorrorEffects']();}}$gamePlayer[_0xe6da40(0x807)]();}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],'ActSeq_Horror_GlitchCreate',_0x208ce5=>{const _0x544711=_0x45cef8;if(!Imported[_0x544711(0xc7a)])return;if(!SceneManager[_0x544711(0xc83)]())return;VisuMZ['ConvertParams'](_0x208ce5,_0x208ce5);const _0x8cb4b1=VisuMZ[_0x544711(0xce7)](_0x208ce5[_0x544711(0x2d1)]),_0x248c6e=_0x544711(0xa28);_0x208ce5['sliceMin']=Math[_0x544711(0xc7c)](_0x208ce5['slices']/0x2),_0x208ce5['sliceMax']=_0x208ce5[_0x544711(0x41d)],_0x208ce5['refreshRequest']=!![];for(const _0x325551 of _0x8cb4b1){if(_0x544711(0xac9)!==_0x544711(0xac9))this[_0x544711(0x8bb)]();else{if(!_0x325551)continue;_0x325551[_0x544711(0x75f)](_0x248c6e,_0x208ce5);}}$gamePlayer[_0x544711(0x807)]();}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x8c3),_0x2ceba9=>{const _0x310716=_0x45cef8;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x310716(0xc83)]())return;VisuMZ['ConvertParams'](_0x2ceba9,_0x2ceba9);const _0x513b11=VisuMZ[_0x310716(0xce7)](_0x2ceba9[_0x310716(0x2d1)]);for(const _0x4d80d9 of _0x513b11){if(!_0x4d80d9)continue;_0x4d80d9[_0x310716(0x2a3)](_0x310716(0xa28));}$gamePlayer['refresh']();}),PluginManager[_0x45cef8(0x456)](pluginData['name'],_0x45cef8(0x451),_0x201e9f=>{const _0x2e9d78=_0x45cef8;if(!Imported[_0x2e9d78(0xc7a)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2e9d78(0x8b3)](_0x201e9f,_0x201e9f);const _0x176cbe=VisuMZ[_0x2e9d78(0xce7)](_0x201e9f[_0x2e9d78(0x2d1)]),_0x121f15=_0x2e9d78(0x3b7);for(const _0x496c22 of _0x176cbe){if(!_0x496c22)continue;_0x496c22[_0x2e9d78(0x75f)](_0x121f15,_0x201e9f);}$gamePlayer[_0x2e9d78(0x807)]();}),PluginManager[_0x45cef8(0x456)](pluginData['name'],_0x45cef8(0x333),_0x18ba23=>{const _0x3cd4e5=_0x45cef8;if(!Imported[_0x3cd4e5(0xc7a)])return;if(!SceneManager[_0x3cd4e5(0xc83)]())return;VisuMZ[_0x3cd4e5(0x8b3)](_0x18ba23,_0x18ba23);const _0x2485aa=VisuMZ[_0x3cd4e5(0xce7)](_0x18ba23[_0x3cd4e5(0x2d1)]);for(const _0xc5cd9e of _0x2485aa){if(!_0xc5cd9e)continue;_0xc5cd9e[_0x3cd4e5(0x2a3)](_0x3cd4e5(0x3b7));}$gamePlayer['refresh']();}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x593),_0x164445=>{const _0x3deec2=_0x45cef8;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x3deec2(0xc83)]())return;VisuMZ['ConvertParams'](_0x164445,_0x164445);const _0x339b50=VisuMZ[_0x3deec2(0xce7)](_0x164445[_0x3deec2(0x2d1)]),_0x2dba67='tv';for(const _0x45257b of _0x339b50){if(_0x3deec2(0x703)!==_0x3deec2(0x768)){if(!_0x45257b)continue;_0x45257b['setHorrorEffectSettings'](_0x2dba67,_0x164445);}else{const _0x5367d1=_0x404bc1(_0xf2a29b['$1']),_0x1a340b=_0x53dcca['BattleCore'][_0x3deec2(0x554)](_0x4f76b9,_0x3deec2(0x23c));_0x469cfe['BattleCore'][_0x3deec2(0x845)](_0x5367d1,_0x1a340b);}}$gamePlayer[_0x3deec2(0x807)]();}),PluginManager['registerCommand'](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x412),_0x49412b=>{const _0x3be0ad=_0x45cef8;if(!Imported[_0x3be0ad(0xc7a)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x49412b,_0x49412b);const _0x608e98=VisuMZ[_0x3be0ad(0xce7)](_0x49412b[_0x3be0ad(0x2d1)]);for(const _0x231ba3 of _0x608e98){if(!_0x231ba3)continue;_0x231ba3[_0x3be0ad(0x2a3)]('tv');}$gamePlayer[_0x3be0ad(0x807)]();}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0xc17),_0x1c9224=>{const _0x1874fa=_0x45cef8;if(!Imported[_0x1874fa(0x279)])return;const _0x347b78=SceneManager[_0x1874fa(0x9e2)][_0x1874fa(0x78d)];if(!_0x347b78)return;if(VisuMZ[_0x1874fa(0x997)][_0x1874fa(0x2a2)]<=1.04){alert(_0x1874fa(0x603)),SceneManager['exit']();return;}VisuMZ[_0x1874fa(0x8b3)](_0x1c9224,_0x1c9224);const _0x3ca800=_0x1c9224[_0x1874fa(0x474)];_0x347b78[_0x1874fa(0x5c9)](_0x3ca800);}),PluginManager[_0x45cef8(0x456)](pluginData['name'],'ActSeq_Impact_ColorBreak',_0x49db03=>{const _0x51531f=_0x45cef8;if(!SceneManager[_0x51531f(0xc83)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x27e79f=SceneManager[_0x51531f(0x9e2)][_0x51531f(0x78d)];if(!_0x27e79f)return;VisuMZ['ConvertParams'](_0x49db03,_0x49db03);const _0x4651b7=_0x49db03[_0x51531f(0x38f)]||0x1,_0x1efc37=_0x49db03[_0x51531f(0x690)]||0x1,_0x21dc73=_0x49db03[_0x51531f(0x94a)]||_0x51531f(0x278);_0x27e79f[_0x51531f(0x48e)](_0x4651b7,_0x1efc37,_0x21dc73);}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0xc2b),_0x2dfcdc=>{const _0x47a55b=_0x45cef8;if(!Imported[_0x47a55b(0x279)])return;const _0x5116d4=SceneManager['_scene'][_0x47a55b(0x78d)];if(!_0x5116d4)return;if(VisuMZ['ActSeqImpact'][_0x47a55b(0x2a2)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ['ConvertParams'](_0x2dfcdc,_0x2dfcdc);const _0x2c9eef=_0x2dfcdc[_0x47a55b(0x474)];_0x5116d4[_0x47a55b(0x80d)](_0x2c9eef);}),PluginManager['registerCommand'](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x6a1),_0x34ebdf=>{const _0x4571a2=_0x45cef8;if(!SceneManager[_0x4571a2(0xc83)]())return;if(!Imported[_0x4571a2(0x279)])return;const _0xa952a6=SceneManager[_0x4571a2(0x9e2)][_0x4571a2(0x78d)];if(!_0xa952a6)return;VisuMZ['ConvertParams'](_0x34ebdf,_0x34ebdf);const _0x40c50b=Number(_0x34ebdf[_0x4571a2(0x526)])||0x0,_0x573e63=Number(_0x34ebdf[_0x4571a2(0x4f5)]),_0x34fda6=_0x34ebdf[_0x4571a2(0x690)]||0x1,_0x54b52b=_0x34ebdf[_0x4571a2(0x94a)]||'Linear';_0xa952a6['setupMotionBlurImpactFilter'](_0x40c50b,_0x573e63,_0x34fda6,_0x54b52b);}),PluginManager['registerCommand'](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x530),_0x5eaf2c=>{const _0x183d79=_0x45cef8;if(!SceneManager[_0x183d79(0xc83)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x34b227=SceneManager[_0x183d79(0x9e2)][_0x183d79(0x78d)];if(!_0x34b227)return;VisuMZ['ConvertParams'](_0x5eaf2c,_0x5eaf2c);const _0x2f9419=Number(_0x5eaf2c[_0x183d79(0x526)])||0x0,_0x4217fc=Number(_0x5eaf2c[_0x183d79(0x4f5)]),_0x28cf8a=_0x5eaf2c[_0x183d79(0x690)]||0x1,_0x34efe4=_0x5eaf2c[_0x183d79(0x94a)]||_0x183d79(0x278),_0x2e7c93=VisuMZ[_0x183d79(0xce7)](_0x5eaf2c['Targets']);for(const _0x123ffe of _0x2e7c93){if(!_0x123ffe)continue;if(!_0x123ffe[_0x183d79(0x231)]())continue;_0x123ffe[_0x183d79(0x231)]()[_0x183d79(0x6bb)](_0x2f9419,_0x4217fc,_0x28cf8a,_0x34efe4);}}),PluginManager['registerCommand'](pluginData['name'],_0x45cef8(0x487),_0x1ad513=>{const _0x4a5acd=_0x45cef8;if(!SceneManager[_0x4a5acd(0xc83)]())return;if(!Imported[_0x4a5acd(0x279)])return;VisuMZ[_0x4a5acd(0x8b3)](_0x1ad513,_0x1ad513);const _0x1e251b={'delay':_0x1ad513[_0x4a5acd(0x35e)],'duration':_0x1ad513[_0x4a5acd(0x69a)],'hue':_0x1ad513[_0x4a5acd(0xa1f)],'opacityStart':_0x1ad513[_0x4a5acd(0x510)],'tone':_0x1ad513['tone'],'visible':!![]},_0x275ab3=VisuMZ[_0x4a5acd(0xce7)](_0x1ad513['Targets']);for(const _0x768ddd of _0x275ab3){if(!_0x768ddd)continue;_0x768ddd[_0x4a5acd(0x219)](_0x1e251b);}}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x9e1),_0x179ba3=>{const _0x3e74a1=_0x45cef8;if(!SceneManager[_0x3e74a1(0xc83)]())return;if(!Imported[_0x3e74a1(0x279)])return;VisuMZ['ConvertParams'](_0x179ba3,_0x179ba3);const _0x462909=VisuMZ[_0x3e74a1(0xce7)](_0x179ba3[_0x3e74a1(0x2d1)]);for(const _0x370c7e of _0x462909){if(!_0x370c7e)continue;_0x370c7e[_0x3e74a1(0x5fa)]();}}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0xa47),_0x5993e0=>{const _0x33fc12=_0x45cef8;if(!Imported[_0x33fc12(0x279)])return;const _0x3153c4=SceneManager[_0x33fc12(0x9e2)][_0x33fc12(0x78d)];if(!_0x3153c4)return;if(VisuMZ[_0x33fc12(0x997)][_0x33fc12(0x2a2)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x33fc12(0xa50)]();return;}VisuMZ['ConvertParams'](_0x5993e0,_0x5993e0);const _0x537bb4=_0x5993e0[_0x33fc12(0x474)];_0x3153c4[_0x33fc12(0x2f5)](_0x537bb4);}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x9b4),_0x56e1b2=>{const _0x54bcd9=_0x45cef8;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x563a36=SceneManager[_0x54bcd9(0x9e2)]['_spriteset'];if(!_0x563a36)return;if(VisuMZ[_0x54bcd9(0x997)][_0x54bcd9(0x2a2)]<=1.04){alert(_0x54bcd9(0x603)),SceneManager['exit']();return;}VisuMZ[_0x54bcd9(0x8b3)](_0x56e1b2,_0x56e1b2);const _0x286c76=_0x56e1b2[_0x54bcd9(0x474)];_0x563a36[_0x54bcd9(0x962)](_0x286c76);}),PluginManager['registerCommand'](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x3b5),_0xa1687a=>{const _0x5d3330=_0x45cef8;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x4c4fab=SceneManager[_0x5d3330(0x9e2)]['_spriteset'];if(!_0x4c4fab)return;VisuMZ[_0x5d3330(0x8b3)](_0xa1687a,_0xa1687a);const _0x17e460=_0xa1687a['X']||0x0,_0x2793ae=_0xa1687a['Y']||0x0,_0x3614e2=_0xa1687a[_0x5d3330(0x5d0)]||0x0,_0x371c1a=_0xa1687a['Wave']||0x0,_0x57978e=_0xa1687a['Duration']||0x1;_0x4c4fab['setupShockwaveImpactFilter'](_0x17e460,_0x2793ae,_0x3614e2,_0x371c1a,_0x57978e);}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],'ActSeq_Impact_ShockwaveEachTargets',_0x483060=>{const _0x480715=_0x45cef8;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x480715(0x279)])return;const _0x5064e7=SceneManager['_scene'][_0x480715(0x78d)];if(!_0x5064e7)return;VisuMZ[_0x480715(0x8b3)](_0x483060,_0x483060);const _0xc4fffe=VisuMZ['CreateActionSequenceTargets'](_0x483060[_0x480715(0x2d1)]),_0x159a9a=_0x483060['TargetLocation'],_0x4d81b3=_0x483060[_0x480715(0x900)]||0x0,_0x20c1ae=_0x483060[_0x480715(0x372)]||0x0,_0x4b8816=_0x483060['Amp']||0x0,_0x530b30=_0x483060['Wave']||0x0,_0x3a3a07=_0x483060['Duration']||0x1;for(const _0x5c6ae4 of _0xc4fffe){if(_0x480715(0x3cb)===_0x480715(0x813))this[_0x480715(0x754)](...arguments);else{if(!_0x5c6ae4)continue;if(!_0x5c6ae4[_0x480715(0x231)]())continue;const _0x265d18=_0x5c6ae4[_0x480715(0x231)]();let _0x4fb70c=_0x265d18[_0x480715(0x3c6)],_0x4c8633=_0x265d18[_0x480715(0x987)];_0x4fb70c+=(Graphics[_0x480715(0x639)]-Graphics['boxWidth'])/0x2,_0x4c8633+=(Graphics[_0x480715(0xa2a)]-Graphics[_0x480715(0xb42)])/0x2;if(_0x159a9a[_0x480715(0x291)](/front/i))_0x4fb70c+=(_0x5c6ae4['isEnemy']()?0x1:-0x1)*_0x265d18[_0x480715(0x48f)]()/0x2;else _0x159a9a[_0x480715(0x291)](/back/i)&&(_0x4fb70c+=(_0x5c6ae4['isEnemy']()?-0x1:0x1)*_0x265d18['mainSpriteWidth']()/0x2);if(_0x159a9a['match'](/head/i))_0x4c8633-=_0x265d18[_0x480715(0x2e5)]();else _0x159a9a['match'](/center/i)&&(_0x4c8633-=_0x265d18[_0x480715(0x2e5)]()/0x2);_0x4fb70c+=_0x4d81b3,_0x4c8633+=_0x20c1ae,_0x5064e7[_0x480715(0x778)](_0x4fb70c,_0x4c8633,_0x4b8816,_0x530b30,_0x3a3a07);}}}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x646),_0x21acee=>{const _0x204c6a=_0x45cef8;if(!SceneManager[_0x204c6a(0xc83)]())return;if(!Imported[_0x204c6a(0x279)])return;const _0x4dc6af=SceneManager[_0x204c6a(0x9e2)][_0x204c6a(0x78d)];if(!_0x4dc6af)return;VisuMZ['ConvertParams'](_0x21acee,_0x21acee);const _0x52a915=VisuMZ[_0x204c6a(0xce7)](_0x21acee[_0x204c6a(0x2d1)]),_0x1c8c4a=_0x21acee[_0x204c6a(0xc77)],_0x4b09f3=_0x21acee[_0x204c6a(0x900)]||0x0,_0x339909=_0x21acee['OffsetY']||0x0,_0x4d13ba=_0x21acee['Amp']||0x0,_0x4bfc8e=_0x21acee[_0x204c6a(0xd0b)]||0x0,_0x1e5149=_0x21acee[_0x204c6a(0x690)]||0x1,_0x45a90e=Math[_0x204c6a(0x582)](..._0x52a915['map'](_0x39055f=>_0x39055f[_0x204c6a(0x231)]()['_baseX']-_0x39055f['battler']()[_0x204c6a(0x48f)]()/0x2)),_0x3b346f=Math[_0x204c6a(0x2ce)](..._0x52a915[_0x204c6a(0x4a9)](_0x59077b=>_0x59077b[_0x204c6a(0x231)]()[_0x204c6a(0x3c6)]+_0x59077b[_0x204c6a(0x231)]()[_0x204c6a(0x48f)]()/0x2)),_0x5598a5=Math[_0x204c6a(0x582)](..._0x52a915[_0x204c6a(0x4a9)](_0x25101c=>_0x25101c[_0x204c6a(0x231)]()[_0x204c6a(0x987)]-_0x25101c[_0x204c6a(0x231)]()['mainSpriteHeight']())),_0x568272=Math[_0x204c6a(0x2ce)](..._0x52a915[_0x204c6a(0x4a9)](_0x2d4a4c=>_0x2d4a4c['battler']()['_baseY'])),_0x285c72=_0x52a915[_0x204c6a(0x4db)](_0xf29e3b=>_0xf29e3b[_0x204c6a(0x98a)]())[_0x204c6a(0xcc5)],_0x5e43fb=_0x52a915['filter'](_0x845ae5=>_0x845ae5[_0x204c6a(0x724)]())[_0x204c6a(0xcc5)];let _0x419353=0x0,_0x555009=0x0;if(_0x1c8c4a['match'](/front/i))_0x204c6a(0x670)===_0x204c6a(0x670)?_0x419353=_0x285c72>=_0x5e43fb?_0x45a90e:_0x3b346f:(this['_battlePortrait']='',this['actor']()&&this[_0x204c6a(0x4d4)]()[_0x204c6a(0xbfd)][_0x204c6a(0x291)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x204c6a(0x76b)]=_0x2b11ba(_0xcfa920['$1'])));else{if(_0x1c8c4a[_0x204c6a(0x291)](/middle/i))_0x419353=(_0x45a90e+_0x3b346f)/0x2,melee=-0x1;else _0x1c8c4a['match'](/back/i)&&(_0x419353=_0x285c72>=_0x5e43fb?_0x3b346f:_0x45a90e);}if(_0x1c8c4a['match'](/head/i))_0x555009=_0x5598a5;else{if(_0x1c8c4a['match'](/center/i))_0x555009=(_0x5598a5+_0x568272)/0x2;else _0x1c8c4a['match'](/base/i)&&(_0x555009=_0x568272);}_0x419353+=(Graphics[_0x204c6a(0x639)]-Graphics[_0x204c6a(0xa5d)])/0x2,_0x555009+=(Graphics[_0x204c6a(0xa2a)]-Graphics[_0x204c6a(0xb42)])/0x2,_0x419353+=_0x4b09f3,_0x555009+=_0x339909,_0x4dc6af[_0x204c6a(0x778)](_0x419353,_0x555009,_0x4d13ba,_0x4bfc8e,_0x1e5149);}),PluginManager['registerCommand'](pluginData[_0x45cef8(0xd00)],_0x45cef8(0xc15),_0xe1bb7e=>{const _0x44b94a=_0x45cef8;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x58698b=SceneManager[_0x44b94a(0x9e2)][_0x44b94a(0x78d)];if(!_0x58698b)return;if(VisuMZ[_0x44b94a(0x997)][_0x44b94a(0x2a2)]<=1.04){alert(_0x44b94a(0x603)),SceneManager[_0x44b94a(0xa50)]();return;}VisuMZ[_0x44b94a(0x8b3)](_0xe1bb7e,_0xe1bb7e);const _0x5a6cee=$gameTemp[_0x44b94a(0xaf3)](),_0x1c9602=Math['max'](0.01,_0xe1bb7e[_0x44b94a(0xc19)]);$gameTemp[_0x44b94a(0x1f6)](_0x1c9602,_0x5a6cee);}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x425),_0x3437e5=>{const _0x49e6c2=_0x45cef8;if(!Imported[_0x49e6c2(0x279)])return;const _0x450ac9=SceneManager[_0x49e6c2(0x9e2)][_0x49e6c2(0x78d)];if(!_0x450ac9)return;if(VisuMZ[_0x49e6c2(0x997)][_0x49e6c2(0x2a2)]<=1.04){alert(_0x49e6c2(0x603)),SceneManager['exit']();return;}VisuMZ[_0x49e6c2(0x8b3)](_0x3437e5,_0x3437e5);const _0x42688c=$gameTemp['getLastPluginCommandInterpreter'](),_0x177397=_0x3437e5['ms']||0x1;VisuMZ[_0x49e6c2(0x997)][_0x49e6c2(0x2ff)](_0x177397,_0x42688c);}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],'ActSeq_Impact_ZoomBlurPoint',_0x488568=>{const _0x14ce57=_0x45cef8;if(!Imported[_0x14ce57(0x279)])return;const _0x21659c=SceneManager[_0x14ce57(0x9e2)][_0x14ce57(0x78d)];if(!_0x21659c)return;VisuMZ[_0x14ce57(0x8b3)](_0x488568,_0x488568);const _0x1d0477=_0x488568['X']||0x0,_0x46adec=_0x488568['Y']||0x0,_0x4a2146=_0x488568['Strength']||0x0,_0x4f32a6=_0x488568[_0x14ce57(0x499)]||0x0,_0xa9626c=_0x488568[_0x14ce57(0x690)]||0x1,_0x5061bb=_0x488568[_0x14ce57(0x94a)]||_0x14ce57(0x278);_0x21659c[_0x14ce57(0x300)](_0x4a2146,_0x1d0477,_0x46adec,_0x4f32a6,_0xa9626c,_0x5061bb);}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x2ad),_0x2d202e=>{const _0x564446=_0x45cef8;if(!Imported[_0x564446(0x279)])return;const _0x4ef7cd=SceneManager['_scene'][_0x564446(0x78d)];if(!_0x4ef7cd)return;VisuMZ['ConvertParams'](_0x2d202e,_0x2d202e);const _0xef38a5=VisuMZ[_0x564446(0xce7)](_0x2d202e[_0x564446(0x2d1)]),_0x1bf0f5=_0x2d202e[_0x564446(0xc77)],_0xd9e0fa=_0x2d202e[_0x564446(0x900)]||0x0,_0x1ac38a=_0x2d202e[_0x564446(0x372)]||0x0,_0x33b80e=_0x2d202e['Strength']||0x0,_0x16bc76=_0x2d202e[_0x564446(0x499)]||0x0,_0x13d691=_0x2d202e['Duration']||0x1,_0x1ea3ea=_0x2d202e[_0x564446(0x94a)]||_0x564446(0x278),_0x1dbac4=Math['min'](..._0xef38a5[_0x564446(0x4a9)](_0x36a11f=>_0x36a11f[_0x564446(0x231)]()[_0x564446(0x3c6)]-_0x36a11f[_0x564446(0x231)]()['mainSpriteWidth']()/0x2)),_0x5d6469=Math[_0x564446(0x2ce)](..._0xef38a5[_0x564446(0x4a9)](_0x10bc63=>_0x10bc63[_0x564446(0x231)]()[_0x564446(0x3c6)]+_0x10bc63[_0x564446(0x231)]()[_0x564446(0x48f)]()/0x2)),_0x4d0437=Math[_0x564446(0x582)](..._0xef38a5[_0x564446(0x4a9)](_0x50e19e=>_0x50e19e['battler']()['_baseY']-_0x50e19e[_0x564446(0x231)]()[_0x564446(0x2e5)]())),_0x1b5904=Math[_0x564446(0x2ce)](..._0xef38a5[_0x564446(0x4a9)](_0x24ea1e=>_0x24ea1e['battler']()['_baseY'])),_0x40021b=_0xef38a5[_0x564446(0x4db)](_0x550f5a=>_0x550f5a[_0x564446(0x98a)]())[_0x564446(0xcc5)],_0x451662=_0xef38a5[_0x564446(0x4db)](_0x259b4e=>_0x259b4e[_0x564446(0x724)]())[_0x564446(0xcc5)];let _0x318da0=0x0,_0x54f4df=0x0;if(_0x1bf0f5[_0x564446(0x291)](/front/i))_0x318da0=_0x40021b>=_0x451662?_0x1dbac4:_0x5d6469;else{if(_0x1bf0f5[_0x564446(0x291)](/middle/i))_0x564446(0x22f)===_0x564446(0x730)?this[_0x564446(0x81a)]():(_0x318da0=(_0x1dbac4+_0x5d6469)/0x2,melee=-0x1);else _0x1bf0f5['match'](/back/i)&&(_0x318da0=_0x40021b>=_0x451662?_0x5d6469:_0x1dbac4);}if(_0x1bf0f5[_0x564446(0x291)](/head/i)){if(_0x564446(0x3a3)!=='KAQnM'){if(_0x264a33[_0x564446(0x463)]()['skewDuration']>0x0)return!![];this['_waitMode']='';}else _0x54f4df=_0x4d0437;}else{if(_0x1bf0f5[_0x564446(0x291)](/center/i)){if(_0x564446(0x49e)===_0x564446(0x49e))_0x54f4df=(_0x4d0437+_0x1b5904)/0x2;else{const _0x413958=_0x26372a[_0x564446(0xbfd)];if(_0x413958[_0x564446(0x291)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x558a85=_0xc7012f(_0xb17acc['$1']),_0x11ea5c=_0x283e81[_0x564446(0x6c0)][_0x564446(0x554)](_0xe924a8,_0x564446(0x2d1));_0x42e80d[_0x564446(0x6c0)][_0x564446(0x97a)](_0x558a85,_0x11ea5c);}if(_0x413958[_0x564446(0x291)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x1ebd09=_0x50c62a(_0x195069['$1']),_0x4d3f71=_0x450e51[_0x564446(0x6c0)][_0x564446(0x554)](_0x443062,_0x564446(0x23c));_0x4a4f0f['BattleCore'][_0x564446(0x845)](_0x1ebd09,_0x4d3f71);}}}else _0x1bf0f5[_0x564446(0x291)](/base/i)&&(_0x54f4df=_0x1b5904);}_0x318da0+=(Graphics[_0x564446(0x639)]-Graphics[_0x564446(0xa5d)])/0x2,_0x54f4df+=(Graphics[_0x564446(0xa2a)]-Graphics['boxHeight'])/0x2,_0x318da0+=_0xd9e0fa,_0x54f4df+=_0x1ac38a,_0x4ef7cd['setupZoomBlurImpactFilter'](_0x33b80e,_0x318da0,_0x54f4df,_0x16bc76,_0x13d691,_0x1ea3ea);}),PluginManager['registerCommand'](pluginData[_0x45cef8(0xd00)],_0x45cef8(0xb29),_0x432e43=>{const _0xcee78f=_0x45cef8;if(!Imported[_0xcee78f(0x279)])return;const _0x1b74f7=SceneManager[_0xcee78f(0x9e2)][_0xcee78f(0x78d)];if(!_0x1b74f7)return;if(VisuMZ['ActSeqImpact']['version']<=1.05){alert(_0xcee78f(0x603)),SceneManager[_0xcee78f(0xa50)]();return;}VisuMZ[_0xcee78f(0x8b3)](_0x432e43,_0x432e43);const _0x408099=VisuMZ[_0xcee78f(0xce7)](_0x432e43[_0xcee78f(0x2d1)]),_0x1bfcd6={'filename':_0x432e43[_0xcee78f(0x377)],'horzCells':_0x432e43[_0xcee78f(0x71b)]||0x1,'vertCells':_0x432e43[_0xcee78f(0x93e)]||0x1,'frameDelay':_0x432e43[_0xcee78f(0x9b9)]||0x1,'smooth':_0x432e43[_0xcee78f(0xc52)]||![],'anchorX':_0x432e43['anchorX']||0x0,'anchorY':_0x432e43[_0xcee78f(0xb0a)]||0x0,'offsetX':_0x432e43['offsetX']||0x0,'offsetY':_0x432e43[_0xcee78f(0x3c3)]||0x0};for(const _0x5bf26a of _0x408099){if(!_0x5bf26a)continue;if(!_0x5bf26a[_0xcee78f(0x231)]())continue;_0x5bf26a[_0xcee78f(0x231)]()[_0xcee78f(0xc72)](_0x1bfcd6);}const _0x15af9c=$gameTemp['getLastPluginCommandInterpreter']();if(_0x15af9c){if(_0xcee78f(0xbd2)!=='TxqMd'){_0x58e3f4[_0xcee78f(0x22d)]&&this[_0xcee78f(0xb2f)]()&&this[_0xcee78f(0x9d0)]();const _0x4649a7=_0x1888b4[_0xcee78f(0x666)](),_0x1697d5=[];for(const _0x15ab0e of _0x4649a7){_0x1697d5[_0xcee78f(0x287)](new _0x13daa7(_0x15ab0e));}_0x1697d5[_0xcee78f(0x52a)](this[_0xcee78f(0x281)]['bind'](this));for(const _0x2bf0fe of _0x1697d5){this['_battlerContainer'][_0xcee78f(0x5b6)](_0x2bf0fe);}this[_0xcee78f(0xc1e)]=_0x1697d5;}else _0x15af9c[_0xcee78f(0x625)](_0xcee78f(0x512));}}),PluginManager[_0x45cef8(0x456)](pluginData['name'],_0x45cef8(0x595),_0x239bc3=>{const _0x3a3397=_0x45cef8;if(!Imported[_0x3a3397(0x279)])return;const _0x1ab0b4=SceneManager[_0x3a3397(0x9e2)]['_spriteset'];if(!_0x1ab0b4)return;if(VisuMZ[_0x3a3397(0x997)][_0x3a3397(0x2a2)]<=1.05){alert(_0x3a3397(0x603)),SceneManager[_0x3a3397(0xa50)]();return;}VisuMZ[_0x3a3397(0x8b3)](_0x239bc3,_0x239bc3);const _0x2d791b=VisuMZ[_0x3a3397(0xce7)](_0x239bc3[_0x3a3397(0x2d1)]);for(const _0x2c9a82 of _0x2d791b){if(_0x3a3397(0x8e5)!==_0x3a3397(0x8e5))_0x2d9fd5[_0x3a3397(0x3cf)]['stop'][_0x3a3397(0xa07)](this);else{if(!_0x2c9a82)continue;if(!_0x2c9a82[_0x3a3397(0x231)]())continue;_0x2c9a82[_0x3a3397(0x231)]()[_0x3a3397(0x782)]();}}}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],'ActSeq_Inject_AnimationPauseResume',_0x131b94=>{const _0x29b0d=_0x45cef8;if(!Imported[_0x29b0d(0x279)])return;const _0x336c9a=SceneManager['_scene']['_spriteset'];if(!_0x336c9a)return;if(VisuMZ[_0x29b0d(0x997)][_0x29b0d(0x2a2)]<=1.05){if('PiqNa'===_0x29b0d(0x825)){alert(_0x29b0d(0x603)),SceneManager[_0x29b0d(0xa50)]();return;}else _0x77688a[_0x29b0d(0x3cf)][_0x29b0d(0x757)]['call'](this),this[_0x29b0d(0x39b)]();}VisuMZ[_0x29b0d(0x8b3)](_0x131b94,_0x131b94);const _0x40023d=VisuMZ['CreateActionSequenceTargets'](_0x131b94['Targets']),_0x2c7977=_0x131b94[_0x29b0d(0x802)];for(const _0x27b31a of _0x40023d){if(!_0x27b31a)continue;if(!_0x27b31a['battler']())continue;_0x27b31a[_0x29b0d(0x231)]()['pauseInjectAnimation'](_0x2c7977);}}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x1fe),_0x599f0a=>{const _0x4fd53e=_0x45cef8;if(!SceneManager[_0x4fd53e(0xc83)]())return;const _0x13c5a4=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x13c5a4)return;_0x13c5a4['setWaitMode'](_0x4fd53e(0xaa0));}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0xaf0),_0x782340=>{const _0x5835a3=_0x45cef8;if(!SceneManager[_0x5835a3(0xc83)]())return;VisuMZ[_0x5835a3(0x8b3)](_0x782340,_0x782340);const _0x5cf62f=$gameTemp['getLastPluginCommandInterpreter'](),_0x4512a2=BattleManager['_action'],_0xf19cd1=BattleManager[_0x5835a3(0x8af)],_0x5d974c=BattleManager[_0x5835a3(0x266)];if(!_0x5cf62f||!_0x4512a2||!_0xf19cd1)return;if(!_0x4512a2[_0x5835a3(0x3a4)]())return;const _0x5bc39f=VisuMZ[_0x5835a3(0xce7)](_0x782340[_0x5835a3(0x2d1)]);for(const _0x395f56 of _0x5bc39f){if(!_0x395f56)continue;_0x5d974c['push'](_0x5835a3(0xa08),_0xf19cd1,_0x395f56);}_0x5cf62f[_0x5835a3(0x625)](_0x5835a3(0x65a));}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],'ActSeq_Mechanics_AddBuffDebuff',_0x1baa9e=>{const _0x5c4d22=_0x45cef8;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x1baa9e,_0x1baa9e);const _0x75f9a1=[_0x5c4d22(0x698),'MAXMP',_0x5c4d22(0xbcc),'DEF',_0x5c4d22(0x225),_0x5c4d22(0x2e1),'AGI','LUK'],_0x4aabc8=_0x1baa9e[_0x5c4d22(0x819)],_0x1c13fe=_0x1baa9e[_0x5c4d22(0x8e4)],_0x425137=_0x1baa9e[_0x5c4d22(0x4ef)],_0xb01d6a=VisuMZ[_0x5c4d22(0xce7)](_0x1baa9e['Targets']);for(const _0x532e4a of _0xb01d6a){if(!_0x532e4a)continue;for(const _0x943df8 of _0x4aabc8){if(_0x5c4d22(0x52e)===_0x5c4d22(0x52e)){const _0x59ec35=_0x75f9a1[_0x5c4d22(0xac5)](_0x943df8[_0x5c4d22(0x5d3)]()['trim']());_0x59ec35>=0x0&&_0x59ec35<=0x7&&('tcsmU'!==_0x5c4d22(0x858)?_0x532e4a[_0x5c4d22(0x94c)](_0x59ec35,_0x425137):(this[_0x5c4d22(0x928)]=new _0x5a1013(),this['addChild'](this['_stateIconSprite'])));}else{if(!_0x3f60f8['isSceneBattle']())return;_0x5d7498[_0x5c4d22(0x8b3)](_0x280baf,_0xbc443);const _0x4ee35f=_0x18b12e['getLastPluginCommandInterpreter'](),_0x239123=_0x5544c0[_0x5c4d22(0x8af)],_0x5dd1ce=_0x33dcf0[_0x5c4d22(0xce7)](_0x296336[_0x5c4d22(0x2d1)]),_0x1b3772=_0x372a8d['Mirror'],_0x2a8b8a=_0x3cafc2[_0x5c4d22(0x266)];if(!_0x4ee35f||!_0x239123)return;const _0x12dfae=_0x239123[_0x5c4d22(0x9ef)]();_0x13d069[_0x5c4d22(0xc5f)](_0x5dd1ce,_0x12dfae,_0x1b3772),_0x536663[_0x5c4d22(0xb66)]&&_0x4ee35f['setWaitMode'](_0x5c4d22(0x227));}}for(const _0x33a767 of _0x1c13fe){const _0xd6eece=_0x75f9a1[_0x5c4d22(0xac5)](_0x33a767[_0x5c4d22(0x5d3)]()[_0x5c4d22(0x7f3)]());_0xd6eece>=0x0&&_0xd6eece<=0x7&&(_0x5c4d22(0x257)===_0x5c4d22(0x438)?_0x18a1e6[_0x5c4d22(0x6c0)]['ParseEnemyNotetags']['call'](this,_0x45ead3):_0x532e4a[_0x5c4d22(0x26f)](_0xd6eece,_0x425137));}}}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x505),_0x32ca15=>{const _0x554f2c=_0x45cef8;if(!SceneManager[_0x554f2c(0xc83)]())return;VisuMZ[_0x554f2c(0x8b3)](_0x32ca15,_0x32ca15);const _0x124daa=_0x32ca15['States'],_0x2865d9=VisuMZ[_0x554f2c(0xce7)](_0x32ca15[_0x554f2c(0x2d1)]);for(const _0x29800c of _0x2865d9){if(!_0x29800c)continue;for(const _0x345dbb of _0x124daa){_0x29800c['addState'](_0x345dbb);}}}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x3b9),_0x2e7bd0=>{const _0x13178c=_0x45cef8;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x13178c(0x8b3)](_0x2e7bd0,_0x2e7bd0);const _0x5ef6d4=BattleManager[_0x13178c(0x79c)],_0x62a5ab={'arPenRate':_0x2e7bd0[_0x13178c(0x35c)],'arPenFlat':_0x2e7bd0[_0x13178c(0x30b)],'arRedRate':_0x2e7bd0[_0x13178c(0x743)],'arRedFlat':_0x2e7bd0[_0x13178c(0x59c)]};_0x5ef6d4['_armorPenetration']=_0x62a5ab;}),PluginManager['registerCommand'](pluginData['name'],_0x45cef8(0xc61),_0x136beb=>{const _0x23a878=_0x45cef8;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x23a878(0x550)])return;VisuMZ['ConvertParams'](_0x136beb,_0x136beb);const _0x40634b=VisuMZ[_0x23a878(0xce7)](_0x136beb['Targets']),_0x4489f8=_0x136beb[_0x23a878(0x7ad)]||0x1;for(const _0x34883a of _0x40634b){if(!_0x34883a)continue;if(!_0x34883a[_0x23a878(0x724)]())continue;_0x34883a[_0x23a878(0x7a4)](_0x4489f8);}}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x4e2),_0x13cc6d=>{const _0x5a4e88=_0x45cef8;if(!SceneManager[_0x5a4e88(0xc83)]())return;if(!Imported[_0x5a4e88(0x7b4)])return;if(!BattleManager[_0x5a4e88(0x2e7)]())return;VisuMZ['ConvertParams'](_0x13cc6d,_0x13cc6d);const _0x47acfd=VisuMZ[_0x5a4e88(0xce7)](_0x13cc6d[_0x5a4e88(0x2d1)]),_0x163d8b=_0x13cc6d[_0x5a4e88(0x642)],_0x46138f=_0x13cc6d[_0x5a4e88(0x642)],_0x3607c2=_0x13cc6d['Interrupt'];for(const _0x1366ee of _0x47acfd){if(!_0x1366ee)continue;if(_0x1366ee[_0x5a4e88(0xc5d)]())_0x1366ee[_0x5a4e88(0x657)](_0x163d8b);else{if(_0x1366ee['isAtbCastingState']()){if(_0x5a4e88(0x384)==='Nidpn')return _0x99b234[_0x5a4e88(0x231)]()['_baseX']-_0x44525b[_0x5a4e88(0x231)]()[_0x5a4e88(0x3c6)];else{_0x1366ee[_0x5a4e88(0x6f7)](_0x46138f);if(_0x3607c2)_0x1366ee['atbInterrupt']();}}}}}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x2c3),_0x7b6207=>{const _0x15b33f=_0x45cef8;if(!SceneManager[_0x15b33f(0xc83)]())return;if(!Imported[_0x15b33f(0x3ca)])return;VisuMZ[_0x15b33f(0x8b3)](_0x7b6207,_0x7b6207);const _0x493acf=VisuMZ[_0x15b33f(0xce7)](_0x7b6207[_0x15b33f(0x2d1)]),_0x3a9b28=_0x7b6207[_0x15b33f(0x1ec)];for(const _0x31c122 of _0x493acf){if(_0x15b33f(0x917)===_0x15b33f(0xc6e))_0x5c09a8[_0x15b33f(0x9e2)][_0x15b33f(0x78d)][_0x15b33f(0x43a)](),_0x19c3ac['setWaitMode'](_0x15b33f(0x227));else{if(!_0x31c122)continue;_0x31c122[_0x15b33f(0x29d)](_0x3a9b28);}}}),PluginManager[_0x45cef8(0x456)](pluginData['name'],_0x45cef8(0x76c),_0x4bcbac=>{const _0x26ae8a=_0x45cef8;if(!SceneManager[_0x26ae8a(0xc83)]())return;if(!Imported[_0x26ae8a(0x3ca)])return;if(!BattleManager[_0x26ae8a(0x8af)])return;VisuMZ[_0x26ae8a(0x8b3)](_0x4bcbac,_0x4bcbac);const _0x374630=_0x4bcbac['VariableID'];$gameVariables['setValue'](_0x374630,BattleManager['_subject']['toUseBoostPoints']());}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x2cb),_0x2f9f39=>{const _0x4edc02=_0x45cef8;if(!SceneManager[_0x4edc02(0xc83)]())return;if(!Imported[_0x4edc02(0x1df)])return;VisuMZ[_0x4edc02(0x8b3)](_0x2f9f39,_0x2f9f39);const _0x991c7c=VisuMZ[_0x4edc02(0xce7)](_0x2f9f39[_0x4edc02(0x2d1)]),_0x2c9680=_0x2f9f39[_0x4edc02(0x9db)];for(const _0xa841dd of _0x991c7c){if(_0x4edc02(0xc6d)!==_0x4edc02(0xc6d)){if(!_0x47f0ba[_0x4edc02(0x279)])return;const _0x5035ca=_0x4d63d5[_0x4edc02(0x9e2)][_0x4edc02(0x78d)];if(!_0x5035ca)return;if(_0x4488b2[_0x4edc02(0x997)]['version']<=1.04){_0x3216fd('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),_0x5e1986[_0x4edc02(0xa50)]();return;}_0x1387f9[_0x4edc02(0x8b3)](_0x36d854,_0x1c4a08);const _0x2c7bac=_0x2446b5[_0x4edc02(0x474)];_0x5035ca[_0x4edc02(0x80d)](_0x2c7bac);}else{if(!_0xa841dd)continue;if(_0xa841dd[_0x4edc02(0x8a5)]())continue;if(!_0xa841dd[_0x4edc02(0x674)]())continue;_0xa841dd['alterBreakShield'](_0x2c9680);}}}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x50f),_0x5b36ec=>{const _0x227f7e=_0x45cef8;if(!SceneManager[_0x227f7e(0xc83)]())return;if(!Imported[_0x227f7e(0x1df)])return;VisuMZ['ConvertParams'](_0x5b36ec,_0x5b36ec);const _0xc98dee=VisuMZ[_0x227f7e(0xce7)](_0x5b36ec['Targets']);for(const _0x1d572f of _0xc98dee){if(!_0x1d572f)continue;if(_0x1d572f['isBreakStunned']())continue;if(!_0x1d572f['isAffectedByBreakShield']())continue;_0x1d572f[_0x227f7e(0x8c8)]();}}),PluginManager[_0x45cef8(0x456)](pluginData['name'],_0x45cef8(0x331),_0x58a322=>{const _0x32b65c=_0x45cef8;if(!SceneManager[_0x32b65c(0xc83)]())return;if(!Imported[_0x32b65c(0xb24)])return;if(!BattleManager[_0x32b65c(0x441)]())return;VisuMZ['ConvertParams'](_0x58a322,_0x58a322);const _0x157914=VisuMZ[_0x32b65c(0xce7)](_0x58a322[_0x32b65c(0x2d1)]),_0x40150c=_0x58a322[_0x32b65c(0x38b)];for(const _0x46b262 of _0x157914){if(_0x32b65c(0x3fd)===_0x32b65c(0x3fd)){if(!_0x46b262)continue;_0x46b262[_0x32b65c(0x7e2)](_0x40150c);}else this[_0x32b65c(0x60a)]=this['_targetAngle'],this['_angleRevertOnFinish']&&(this['_targetAngle']=0x0,this['_currentAngle']=0x0);}}),PluginManager[_0x45cef8(0x456)](pluginData['name'],'ActSeq_Mechanics_Collapse',_0xc31dd3=>{const _0x1afc84=_0x45cef8;if(!SceneManager[_0x1afc84(0xc83)]())return;VisuMZ[_0x1afc84(0x8b3)](_0xc31dd3,_0xc31dd3);const _0x30da35=$gameTemp[_0x1afc84(0xaf3)](),_0x4323d2=BattleManager['_action'],_0x1d2e16=BattleManager[_0x1afc84(0x8af)];if(!_0x30da35||!_0x4323d2||!_0x1d2e16)return;if(!_0x4323d2[_0x1afc84(0x3a4)]())return;const _0x2a8aa0=VisuMZ[_0x1afc84(0xce7)](_0xc31dd3[_0x1afc84(0x2d1)]);for(const _0x172995 of _0x2a8aa0){if(_0x1afc84(0xcd4)!==_0x1afc84(0xbfa)){if(!_0x172995)continue;_0xc31dd3[_0x1afc84(0x866)]&&(_0x172995[_0x1afc84(0x67b)](),_0x172995['addState'](_0x172995[_0x1afc84(0xa3c)]()));if(_0x172995[_0x1afc84(0x31f)]()){if(_0x1afc84(0x8db)!==_0x1afc84(0x57e))_0x172995[_0x1afc84(0xa2b)]();else{let _0x104cf0=_0x4aeaf7[_0x1afc84(0x6c0)][_0x1afc84(0x7bd)][_0x1afc84(0xa07)](this);if(this[_0x1afc84(0x89b)])return _0x104cf0;if(this[_0x1afc84(0x99b)]!==_0x53b96e){this[_0x1afc84(0x89b)]=!![];const _0x2caa6b=this[_0x1afc84(0xce9)]();for(let _0x573f81=0x0;_0x573f81<_0x2caa6b[_0x1afc84(0xcc5)];_0x573f81++){_0x2caa6b[_0x573f81]===0x1&&this[_0x1afc84(0x99b)]!==_0x573f81&&(_0x104cf0[_0x573f81]=null);}this['_tempEquipCheck']=_0x58bb4c;}return _0x104cf0;}}}else{_0x1b6a46[_0x1afc84(0x6c0)]['Game_Action_itemEffectAddNormalState'][_0x1afc84(0xa07)](this,_0x285c22,_0x573b0e);if(!_0x5c53b['isImmortal']())return;if(_0x109572[_0x1afc84(0x9c9)]!==_0x3d80ce['deathStateId']())return;let _0x327709=_0x4edc12[_0x1afc84(0x715)];!this[_0x1afc84(0x5f4)]()&&(_0x327709*=_0x36bec4[_0x1afc84(0x85f)](_0x59e9af[_0x1afc84(0x9c9)]),_0x327709*=this[_0x1afc84(0x205)](_0x26dc17)),_0x362d4d[_0x1afc84(0x3aa)]()<_0x327709&&(_0x23197f[_0x1afc84(0x40d)]=!![],this[_0x1afc84(0x2ea)](_0x53f7dd));}}_0x30da35[_0x1afc84(0x625)](_0x1afc84(0xbe3));}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x707),_0x5a6abe=>{const _0x29f917=_0x45cef8;if(!SceneManager[_0x29f917(0xc83)]())return;if(!Imported[_0x29f917(0x6a4)])return;if(!BattleManager[_0x29f917(0xb45)]())return;VisuMZ[_0x29f917(0x8b3)](_0x5a6abe,_0x5a6abe);const _0x583776=VisuMZ[_0x29f917(0xce7)](_0x5a6abe['Targets']),_0x3d1575=_0x5a6abe[_0x29f917(0x8a1)];for(const _0x41176c of _0x583776){if(!_0x41176c)continue;_0x41176c['changeTurnOrderByCTB'](_0x3d1575);}}),PluginManager['registerCommand'](pluginData['name'],_0x45cef8(0x732),_0x9e28e9=>{const _0x3bf4b5=_0x45cef8;if(!SceneManager[_0x3bf4b5(0xc83)]())return;if(!Imported[_0x3bf4b5(0x6a4)])return;if(!BattleManager[_0x3bf4b5(0xb45)]())return;VisuMZ[_0x3bf4b5(0x8b3)](_0x9e28e9,_0x9e28e9);const _0xdef384=VisuMZ[_0x3bf4b5(0xce7)](_0x9e28e9[_0x3bf4b5(0x2d1)]),_0x5dae63=_0x9e28e9[_0x3bf4b5(0x642)],_0xee34bd=_0x9e28e9[_0x3bf4b5(0x642)];for(const _0x316141 of _0xdef384){if(!_0x316141)continue;if(_0x316141[_0x3bf4b5(0x7c6)]===_0x3bf4b5(0x760)){if(_0x3bf4b5(0x7f4)===_0x3bf4b5(0x4e5))return _0x2b9e58[_0x3bf4b5(0x9e2)][_0x3bf4b5(0x282)]&&_0x33f30d[_0x3bf4b5(0x9e2)][_0x3bf4b5(0x282)][_0x3bf4b5(0x6ea)]&&_0x4f905b['_scene'][_0x3bf4b5(0x282)][_0x3bf4b5(0xa41)][_0x3bf4b5(0x2b1)](this[_0x3bf4b5(0xa87)]);else _0x316141[_0x3bf4b5(0x21a)](_0x5dae63);}else _0x316141[_0x3bf4b5(0x7c6)]==='casting'&&('lYdyn'!==_0x3bf4b5(0xcdd)?_0x316141[_0x3bf4b5(0xb3c)](_0xee34bd):(this[_0x3bf4b5(0x24d)](_0x47499d)?(this['battleStatusWindowAnimationContainer']()[_0x3bf4b5(0x5b6)](_0x55e41f),_0x12a5e4[_0x3bf4b5(0x74b)]=!![]):this[_0x3bf4b5(0x292)][_0x3bf4b5(0x5b6)](_0xe4de90),this[_0x3bf4b5(0xba3)][_0x3bf4b5(0x287)](_0x3b214f)));}}),PluginManager[_0x45cef8(0x456)](pluginData['name'],'ActSeq_Mechanics_CustomDmgFormula',_0xb6dc6=>{const _0x6e2c36=_0x45cef8;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x6e2c36(0x8b3)](_0xb6dc6,_0xb6dc6);const _0x37fc09=BattleManager[_0x6e2c36(0x79c)];if(!_0x37fc09)return;let _0x3ad2b7=_0xb6dc6[_0x6e2c36(0x6d6)];_0x37fc09['setCustomDamageFormula'](_0x3ad2b7);}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x570),_0x48d6c5=>{const _0x4f9430=_0x45cef8;if(!SceneManager[_0x4f9430(0xc83)]())return;VisuMZ[_0x4f9430(0x8b3)](_0x48d6c5,_0x48d6c5);const _0x4a08f8=VisuMZ[_0x4f9430(0xce7)](_0x48d6c5[_0x4f9430(0x2d1)]);for(const _0x3e258d of _0x4a08f8){if(!_0x3e258d)continue;if(_0x3e258d[_0x4f9430(0xa32)]())_0x3e258d[_0x4f9430(0xba1)]();}}),PluginManager[_0x45cef8(0x456)](pluginData['name'],_0x45cef8(0x426),_0x3b0bc1=>{const _0x34b447=_0x45cef8;if(!SceneManager[_0x34b447(0xc83)]())return;VisuMZ[_0x34b447(0x8b3)](_0x3b0bc1,_0x3b0bc1);const _0x5c13c0=$gameTemp[_0x34b447(0xaf3)](),_0x2af0f4=BattleManager[_0x34b447(0x8af)],_0x367c19=_0x3b0bc1[_0x34b447(0x357)];if(!_0x5c13c0)return;if(!_0x2af0f4)return;if(_0x2af0f4&&_0x2af0f4[_0x34b447(0x61e)]()&&_0x367c19[_0x34b447(0x5d3)]()['trim']()!==_0x34b447(0x391)){if('wsFSr'===_0x34b447(0x545))_0x5c13c0[_0x34b447(0x408)]([_0x367c19]);else{this[_0x34b447(0x43e)]=_0x306172[_0x34b447(0xceb)]||[0x0,0x0,0x0,0x0],this[_0x34b447(0x43e)]=_0x5a99f2[_0x34b447(0x5bf)](this['_flashColor']),this[_0x34b447(0x675)]=_0x4776c8[_0x34b447(0x2f7)]||0x0;const _0x1b35c9=this[_0x34b447(0x47a)](),_0x5e8ff3=_0x4a9670[_0x34b447(0x74d)](_0x1b35c9*0x1e),_0x63cf5a=this['createChildSprite'](_0x5e8ff3,_0x1b35c9);_0x63cf5a[_0x34b447(0xaaa)][_0x34b447(0x73f)]=_0x235029['getColor'](_0x31b998[_0x34b447(0x73f)]),_0x63cf5a[_0x34b447(0xaaa)][_0x34b447(0x894)](_0x979508,0x0,0x0,_0x5e8ff3,_0x1b35c9,_0x34b447(0xace)),_0x63cf5a['dy']=0x0;}}}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x4be),_0x47fbbd=>{const _0x2d7ff0=_0x45cef8;if(!SceneManager[_0x2d7ff0(0xc83)]())return;VisuMZ[_0x2d7ff0(0x8b3)](_0x47fbbd,_0x47fbbd);const _0x52dc8d=VisuMZ[_0x2d7ff0(0xce7)](_0x47fbbd[_0x2d7ff0(0x2d1)]);for(const _0x165f72 of _0x52dc8d){if(_0x2d7ff0(0x229)!==_0x2d7ff0(0x74f)){if(!_0x165f72)continue;if(!_0x165f72[_0x2d7ff0(0x724)]())continue;_0x165f72[_0x2d7ff0(0x520)]();}else{let _0x126a96=0x0;if(this[_0x2d7ff0(0x6b4)]&&this[_0x2d7ff0(0x8e2)]!==_0x2041ac){const _0x28cf3e=this[_0x2d7ff0(0x6b4)]['scale']['y'];_0x126a96-=(_0x28cf3e-0x1)*this[_0x2d7ff0(0xa2a)];}return _0x126a96;}}}),PluginManager['registerCommand'](pluginData['name'],_0x45cef8(0x491),_0x2e10c5=>{const _0x59f863=_0x45cef8;if(!SceneManager[_0x59f863(0xc83)]())return;if(!Imported['VisuMZ_2_BattleSystemETB'])return;if(!BattleManager['isETB']())return;VisuMZ[_0x59f863(0x8b3)](_0x2e10c5,_0x2e10c5);const _0x3619b1=_0x2e10c5[_0x59f863(0x908)];if(BattleManager['_subject']){if('cEHOG'===_0x59f863(0x6eb))return this[_0x59f863(0x4f6)]>0x0;else BattleManager[_0x59f863(0x8af)][_0x59f863(0xa15)]()['gainCurrentActionsETB'](_0x3619b1);}}),PluginManager['registerCommand'](pluginData['name'],_0x45cef8(0x57d),_0x1dc15b=>{const _0x335317=_0x45cef8;if(!SceneManager[_0x335317(0xc83)]())return;if(!Imported['VisuMZ_2_BattleSystemFTB'])return;if(!BattleManager[_0x335317(0x853)]())return;VisuMZ[_0x335317(0x8b3)](_0x1dc15b,_0x1dc15b);const _0x4e7831=_0x1dc15b[_0x335317(0x908)];BattleManager[_0x335317(0x8af)]&&BattleManager[_0x335317(0x8af)][_0x335317(0xa15)]()[_0x335317(0x296)](_0x4e7831);}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0xbaf),_0x3f412c=>{const _0x16ea6c=_0x45cef8;if(!SceneManager[_0x16ea6c(0xc83)]())return;VisuMZ[_0x16ea6c(0x8b3)](_0x3f412c,_0x3f412c);const _0x5dadd8=VisuMZ[_0x16ea6c(0xce7)](_0x3f412c[_0x16ea6c(0x2d1)]),_0x566b54=_0x3f412c[_0x16ea6c(0xbad)],_0x3df8b4=_0x3f412c[_0x16ea6c(0x5f8)],_0xec8e55=_0x3f412c[_0x16ea6c(0x9f6)],_0x4e32ea=_0x3f412c[_0x16ea6c(0xa17)],_0x36ea12=_0x3f412c[_0x16ea6c(0x6f1)],_0x533d01=_0x3f412c[_0x16ea6c(0xcaa)],_0x506b1b=_0x3f412c[_0x16ea6c(0x79e)];for(const _0x2dd363 of _0x5dadd8){if(!_0x2dd363)continue;const _0x2c48fb=_0x2dd363[_0x16ea6c(0xa9a)](),_0x446646=Math[_0x16ea6c(0x365)](_0x566b54*_0x2dd363[_0x16ea6c(0x5f1)]+_0x3df8b4),_0x3ec24b=Math[_0x16ea6c(0x365)](_0xec8e55*_0x2dd363[_0x16ea6c(0x673)]+_0x4e32ea),_0x32508b=Math[_0x16ea6c(0x365)](_0x36ea12*_0x2dd363[_0x16ea6c(0x51d)]()+_0x533d01);if(_0x446646!==0x0)_0x2dd363['gainHp'](_0x446646);if(_0x3ec24b!==0x0)_0x2dd363[_0x16ea6c(0x753)](_0x3ec24b);if(_0x32508b!==0x0)_0x2dd363[_0x16ea6c(0xc37)](_0x32508b);if(_0x506b1b)_0x2dd363[_0x16ea6c(0xba1)]();_0x2c48fb&&_0x2dd363[_0x16ea6c(0x61e)]()&&_0x2dd363[_0x16ea6c(0xa2b)]();}}),PluginManager['registerCommand'](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x464),_0x566af9=>{const _0xd999dd=_0x45cef8;if(!SceneManager[_0xd999dd(0xc83)]())return;VisuMZ[_0xd999dd(0x8b3)](_0x566af9,_0x566af9);const _0x46a139=VisuMZ[_0xd999dd(0xce7)](_0x566af9[_0xd999dd(0x2d1)]);for(const _0x468b4b of _0x46a139){if(_0xd999dd(0xcbc)===_0xd999dd(0xcbc)){if(!_0x468b4b)continue;_0x468b4b[_0xd999dd(0x82a)](_0x566af9[_0xd999dd(0x392)]);}else return!![];}}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x356),_0xdd0c9b=>{const _0x4e8e82=_0x45cef8;if(!SceneManager[_0x4e8e82(0xc83)]())return;VisuMZ[_0x4e8e82(0x8b3)](_0xdd0c9b,_0xdd0c9b);const _0x4f268a=BattleManager[_0x4e8e82(0x79c)],_0x404a8f={'criticalHitRate':_0xdd0c9b[_0x4e8e82(0x90e)],'criticalHitFlat':_0xdd0c9b[_0x4e8e82(0x46d)],'criticalDmgRate':_0xdd0c9b[_0x4e8e82(0x85c)],'criticalDmgFlat':_0xdd0c9b[_0x4e8e82(0xcc7)],'damageRate':_0xdd0c9b[_0x4e8e82(0x5c8)],'damageFlat':_0xdd0c9b[_0x4e8e82(0xbf4)],'hitRate':_0xdd0c9b[_0x4e8e82(0x9ae)],'hitFlat':_0xdd0c9b[_0x4e8e82(0xbb9)]};_0x4f268a[_0x4e8e82(0x45b)]=_0x404a8f;}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x511),_0xc2b6a7=>{const _0xbcf6ea=_0x45cef8;if(!SceneManager[_0xbcf6ea(0xc83)]())return;VisuMZ[_0xbcf6ea(0x8b3)](_0xc2b6a7,_0xc2b6a7);const _0x237e52=_0xc2b6a7['CommonEventID'];SceneManager[_0xbcf6ea(0x9e2)]['playOnceParallelInterpreter'](_0x237e52);}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],'ActSeq_Mechanics_OtbOrder',_0x525c28=>{const _0x59cb05=_0x45cef8;if(!SceneManager[_0x59cb05(0xc83)]())return;if(!Imported['VisuMZ_2_BattleSystemOTB'])return;if(!BattleManager[_0x59cb05(0x561)]())return;VisuMZ['ConvertParams'](_0x525c28,_0x525c28);const _0x15278e=VisuMZ['CreateActionSequenceTargets'](_0x525c28[_0x59cb05(0x2d1)]);for(const _0x220380 of _0x15278e){if('Aidkb'===_0x59cb05(0xbc2)){if(!_0x220380)continue;let _0x146fb0=_0x525c28[_0x59cb05(0xb5d)],_0x17c96f=_0x525c28[_0x59cb05(0x560)],_0x56a06e=_0x525c28[_0x59cb05(0x5bd)];if(BattleManager[_0x59cb05(0x43b)][_0x59cb05(0x2b1)](_0x220380))_0x146fb0+=_0x56a06e;else{if(_0x59cb05(0x21e)!=='HYYZC')_0x17c96f+=_0x56a06e;else{const _0x204dda=_0x1be084[_0x59cb05(0x827)][0x0];if(_0x204dda[_0x59cb05(0x291)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}BattleManager[_0x59cb05(0x77f)](_0x220380,-_0x146fb0,![]),BattleManager['turnOrderChangeOTB'](_0x220380,-_0x17c96f,!![]);}else this[_0x59cb05(0xc0e)](),this[_0x59cb05(0x915)](),_0x3fb4ce['prototype'][_0x59cb05(0x7a5)][_0x59cb05(0xa07)](this),this['_createDamageContainer']();}}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0xc34),_0x1de937=>{const _0x354742=_0x45cef8;if(!SceneManager[_0x354742(0xc83)]())return;if(!Imported[_0x354742(0xa56)])return;if(!BattleManager[_0x354742(0x26b)]())return;VisuMZ[_0x354742(0x8b3)](_0x1de937,_0x1de937);const _0x415d8d=BattleManager[_0x354742(0x8af)][_0x354742(0xa15)](),_0x20498f=_0x1de937[_0x354742(0x600)],_0x117cc7=_0x1de937[_0x354742(0x984)]||'unchanged',_0x287d30=_0x1de937['alterType']||_0x354742(0x1f8),_0x1a5805=_0x1de937[_0x354742(0xa85)]||0x0,_0x145cd7=_0x1de937[_0x354742(0x96d)]||0x0;if(_0x415d8d[_0x354742(0x41b)]()||_0x20498f){if(_0x354742(0xa2f)===_0x354742(0xa2f)){if(_0x20498f){if('ImGHh'!=='rVEOs')_0x415d8d[_0x354742(0xcb7)]=_0x415d8d['_ptbActionCost']||{},_0x415d8d[_0x354742(0xcb7)][_0x354742(0xbee)]=0x0;else{const _0x273704=_0x5dca05[_0x354742(0xa8e)](_0x300c68['$1']);this[_0x354742(0x42a)](_0x273704);}}_0x415d8d[_0x354742(0xa83)](_0x117cc7,_0x287d30,_0x1a5805,_0x145cd7);}else{return;this[_0x354742(0x686)]&&(this[_0x354742(0x686)]['x']=this['x'],this[_0x354742(0x686)]['y']=this['y']),this[_0x354742(0x63c)]&&(this[_0x354742(0x63c)]['x']=this['x'],this[_0x354742(0x63c)]['y']=this['y']);}}}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0xa66),_0x36f30c=>{const _0x40cfd4=_0x45cef8;if(!SceneManager[_0x40cfd4(0xc83)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x40cfd4(0x26b)]())return;VisuMZ[_0x40cfd4(0x8b3)](_0x36f30c,_0x36f30c);const _0x1c4274=BattleManager[_0x40cfd4(0x8af)][_0x40cfd4(0xa15)]();let _0x5041ee=Math[_0x40cfd4(0x2ce)](_0x36f30c[_0x40cfd4(0xc2e)],0x0),_0x3aceed=_0x1c4274[_0x40cfd4(0xb06)](),_0x276335=_0x1c4274[_0x40cfd4(0x43d)]();while(_0x5041ee--){if(_0x40cfd4(0x36c)===_0x40cfd4(0x36c)){if(_0x3aceed<=0x0&&_0x276335<=0x0){if(_0x40cfd4(0x693)===_0x40cfd4(0x3ad))return!![];else break;}else _0x3aceed>0x0?(_0x3aceed--,_0x276335++):_0x40cfd4(0x6f0)!==_0x40cfd4(0x6f0)?(this['addFightCommand'](),this[_0x40cfd4(0x567)](),this['addCustomCommands'](),this['addOptionsCommand'](),this[_0x40cfd4(0x343)]()):_0x276335--;}else return this[_0x40cfd4(0xd0a)]();}_0x1c4274['setFullActionsPTB'](_0x3aceed),_0x1c4274[_0x40cfd4(0x432)](_0x276335);}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x5a7),_0x515741=>{const _0x8ee04e=_0x45cef8;if(!SceneManager[_0x8ee04e(0xc83)]())return;if(!Imported[_0x8ee04e(0xa56)])return;if(!BattleManager['isPTB']())return;VisuMZ[_0x8ee04e(0x8b3)](_0x515741,_0x515741);const _0x5d9d6c=BattleManager['_subject']['friendsUnit']();let _0x47dacf=_0x515741[_0x8ee04e(0xbba)],_0x11ea34=_0x515741['HalfActions'];_0x5d9d6c['gainFullActionsPTB'](_0x47dacf),_0x5d9d6c[_0x8ee04e(0x490)](_0x11ea34);}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x4f2),_0x55c208=>{const _0x593993=_0x45cef8;if(!SceneManager[_0x593993(0xc83)]())return;VisuMZ['ConvertParams'](_0x55c208,_0x55c208);const _0x13d3ec=['MAXHP',_0x593993(0xbbb),'ATK',_0x593993(0x398),_0x593993(0x225),_0x593993(0x2e1),_0x593993(0xc5c),_0x593993(0x97b)],_0x2f0e9f=_0x55c208[_0x593993(0x819)],_0x509533=_0x55c208[_0x593993(0x8e4)],_0x110851=VisuMZ[_0x593993(0xce7)](_0x55c208[_0x593993(0x2d1)]);for(const _0x5bc161 of _0x110851){if(!_0x5bc161)continue;for(const _0x4e009a of _0x2f0e9f){const _0xcfc70b=_0x13d3ec[_0x593993(0xac5)](_0x4e009a[_0x593993(0x5d3)]()[_0x593993(0x7f3)]());_0xcfc70b>=0x0&&_0xcfc70b<=0x7&&_0x5bc161[_0x593993(0xa5f)](_0xcfc70b)&&_0x5bc161[_0x593993(0x52b)](_0xcfc70b);}for(const _0x1922e4 of _0x509533){const _0x225b72=_0x13d3ec[_0x593993(0xac5)](_0x1922e4[_0x593993(0x5d3)]()[_0x593993(0x7f3)]());_0x225b72>=0x0&&_0x225b72<=0x7&&_0x5bc161[_0x593993(0x2ec)](_0x225b72)&&(_0x593993(0x979)!==_0x593993(0xa02)?_0x5bc161[_0x593993(0x52b)](_0x225b72):_0x4f55ff=_0x4686ef['max'](_0x4efe47,_0x17d795));}}}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],'ActSeq_Mechanics_RemoveState',_0x357828=>{const _0xb56f33=_0x45cef8;if(!SceneManager[_0xb56f33(0xc83)]())return;VisuMZ[_0xb56f33(0x8b3)](_0x357828,_0x357828);const _0x2535ed=_0x357828[_0xb56f33(0x5c4)],_0x860876=VisuMZ[_0xb56f33(0xce7)](_0x357828[_0xb56f33(0x2d1)]);for(const _0x27fd06 of _0x860876){if(!_0x27fd06)continue;for(const _0x42f5e0 of _0x2535ed){_0x27fd06[_0xb56f33(0x38e)](_0x42f5e0);}}}),PluginManager[_0x45cef8(0x456)](pluginData['name'],_0x45cef8(0x2c8),_0x3feb0b=>{const _0x31f5e4=_0x45cef8;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x31f5e4(0xd0c)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x31f5e4(0x8b3)](_0x3feb0b,_0x3feb0b);const _0x3c7bd6=_0x3feb0b[_0x31f5e4(0x9fe)],_0x382233=VisuMZ[_0x31f5e4(0xce7)](_0x3feb0b[_0x31f5e4(0x2d1)]),_0x5125d4=_0x3feb0b[_0x31f5e4(0x62b)],_0x4ba4a0=_0x3feb0b['Exploiter'],_0x211fb9=_0x3feb0b[_0x31f5e4(0x8b6)],_0x133964=BattleManager[_0x31f5e4(0x79c)];if(_0x3c7bd6)for(const _0x2b816d of _0x382233){if(!_0x2b816d)continue;if(_0x2b816d===user)continue;if(_0x5125d4)_0x2b816d[_0x31f5e4(0x578)](![]);_0x2b816d[_0x31f5e4(0xa14)](BattleManager[_0x31f5e4(0x8af)],_0x133964);}if(_0x4ba4a0&&BattleManager[_0x31f5e4(0x8af)]){if(_0x211fb9)BattleManager[_0x31f5e4(0x8af)][_0x31f5e4(0x578)](![]);const _0x4bc7d2=_0x382233[0x0];BattleManager[_0x31f5e4(0x8ee)](_0x4bc7d2,_0x133964);}}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0xc4b),_0x40126a=>{const _0x26b175=_0x45cef8;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x26b175(0xd0c)])return;if(!BattleManager[_0x26b175(0x8c6)]())return;VisuMZ[_0x26b175(0x8b3)](_0x40126a,_0x40126a);const _0x599a29=_0x40126a['Actions'];BattleManager['_subject']&&(_0x26b175(0x885)!==_0x26b175(0x885)?this[_0x26b175(0x292)][_0x26b175(0x92d)](_0x334835):BattleManager[_0x26b175(0x8af)]['stbGainInstant'](_0x599a29));}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0xb68),_0x276f0c=>{const _0x384468=_0x45cef8;if(!SceneManager[_0x384468(0xc83)]())return;if(!Imported[_0x384468(0xd0c)])return;if(!BattleManager[_0x384468(0x8c6)]())return;VisuMZ[_0x384468(0x8b3)](_0x276f0c,_0x276f0c);let _0x419248=_0x276f0c[_0x384468(0x5a2)];if(BattleManager[_0x384468(0x8af)]){if('AqVKW'===_0x384468(0x3c1))_0x31cc77+=_0x3b2339;else{BattleManager['_subject'][_0x384468(0xc7f)]=BattleManager['_subject'][_0x384468(0xc7f)]||[];while(_0x419248--){if(BattleManager[_0x384468(0x8af)][_0x384468(0xc7f)][_0x384468(0xcc5)]<=0x0)break;BattleManager[_0x384468(0x8af)][_0x384468(0xc7f)][_0x384468(0x817)]();}}}}),PluginManager['registerCommand'](pluginData[_0x45cef8(0xd00)],'ActSeq_Mechanics_SwapWeapon',_0x457b75=>{const _0x2b8c4c=_0x45cef8;if(!SceneManager[_0x2b8c4c(0xc83)]())return;if(!Imported[_0x2b8c4c(0x248)])return;VisuMZ[_0x2b8c4c(0x8b3)](_0x457b75,_0x457b75);const _0x5e2d99=VisuMZ[_0x2b8c4c(0xce7)](_0x457b75['Targets']),_0x42cf14=_0x457b75[_0x2b8c4c(0xb11)];for(const _0x3d4578 of _0x5e2d99){if(!_0x3d4578)continue;if(!_0x3d4578[_0x2b8c4c(0x98a)]())continue;_0x3d4578[_0x2b8c4c(0x4de)](_0x42cf14);}}),PluginManager['registerCommand'](pluginData[_0x45cef8(0xd00)],'ActSeq_Mechanics_TextPopup',_0x47372f=>{const _0x86b12a=_0x45cef8;if(!SceneManager[_0x86b12a(0xc83)]())return;VisuMZ[_0x86b12a(0x8b3)](_0x47372f,_0x47372f);const _0x409363=VisuMZ[_0x86b12a(0xce7)](_0x47372f[_0x86b12a(0x2d1)]),_0xec6431=_0x47372f[_0x86b12a(0x23f)],_0x52858b={'textColor':ColorManager['getColor'](_0x47372f[_0x86b12a(0x525)]),'flashColor':_0x47372f[_0x86b12a(0xc1a)],'flashDuration':_0x47372f[_0x86b12a(0xd02)]};for(const _0x3fa200 of _0x409363){if(!_0x3fa200)continue;_0x3fa200[_0x86b12a(0xa70)](_0xec6431,_0x52858b);}}),PluginManager['registerCommand'](pluginData[_0x45cef8(0xd00)],_0x45cef8(0xa7e),_0x198cc0=>{const _0x7208cc=_0x45cef8;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x7208cc(0x8b3)](_0x198cc0,_0x198cc0);const _0x487faf=VisuMZ[_0x7208cc(0xce7)](_0x198cc0[_0x7208cc(0x2d1)]);let _0x3cc7c5=$gameVariables[_0x7208cc(0x28c)](_0x198cc0['Variable']);Imported['VisuMZ_0_CoreEngine']&&_0x198cc0['DigitGrouping']&&(_0x3cc7c5=VisuMZ[_0x7208cc(0x39e)](_0x3cc7c5));const _0x2ff295=String(_0x3cc7c5),_0x2f44b5={'textColor':ColorManager[_0x7208cc(0xc44)](_0x198cc0['TextColor']),'flashColor':_0x198cc0[_0x7208cc(0xc1a)],'flashDuration':_0x198cc0['FlashDuration']};for(const _0xb118de of _0x487faf){if(!_0xb118de)continue;_0xb118de[_0x7208cc(0xa70)](_0x2ff295,_0x2f44b5);}}),PluginManager[_0x45cef8(0x456)](pluginData['name'],'ActSeq_Mechanics_WaitForEffect',_0x6a4a3=>{const _0x383b39=_0x45cef8;if(!SceneManager[_0x383b39(0xc83)]())return;const _0x4f78a6=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x4f78a6)return;_0x4f78a6[_0x383b39(0x625)]('battleEffect');}),PluginManager[_0x45cef8(0x456)](pluginData['name'],'ActSeq_Motion_ClearFreezeFrame',_0xc28d4a=>{const _0x357bd0=_0x45cef8;if(!SceneManager[_0x357bd0(0xc83)]())return;VisuMZ[_0x357bd0(0x8b3)](_0xc28d4a,_0xc28d4a);const _0x238bf3=VisuMZ['CreateActionSequenceTargets'](_0xc28d4a[_0x357bd0(0x2d1)]);for(const _0x28268a of _0x238bf3){if(!_0x28268a)continue;_0x28268a['clearFreezeMotion']();}}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x3c8),_0x35c5e3=>{const _0x20c912=_0x45cef8;if(!SceneManager[_0x20c912(0xc83)]())return;VisuMZ[_0x20c912(0x8b3)](_0x35c5e3,_0x35c5e3);const _0x3368d7=VisuMZ[_0x20c912(0xce7)](_0x35c5e3['Targets']),_0x551312=_0x35c5e3['MotionType'][_0x20c912(0xa5b)]()[_0x20c912(0x7f3)]();let _0x4e34ef=_0x35c5e3['ShowWeapon'];const _0x37d8aa=_0x35c5e3[_0x20c912(0x25e)];![_0x20c912(0x71e),_0x20c912(0x4c5),_0x20c912(0xaff),_0x20c912(0x929)][_0x20c912(0x2b1)](_0x551312)&&(_0x4e34ef=![]);for(const _0x38e91a of _0x3368d7){if('siuDk'===_0x20c912(0xa89)){if(!_0x38e91a)continue;_0x38e91a[_0x20c912(0xb89)](_0x551312,_0x4e34ef,_0x37d8aa);}else this[_0x20c912(0x478)]=!![],this[_0x20c912(0x266)][_0x20c912(0x287)](_0x20c912(0x4b8),_0x44e79[_0x20c912(0x6c0)][_0x20c912(0x658)][_0x20c912(0x8f7)]['ActiveTpbOptionsMessage']);}}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x26c),_0x262e07=>{const _0x16c7a5=_0x45cef8;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x16c7a5(0x8b3)](_0x262e07,_0x262e07);const _0x2d88a5=VisuMZ[_0x16c7a5(0xce7)](_0x262e07['Targets']),_0x13673c=_0x262e07[_0x16c7a5(0x77b)][_0x16c7a5(0xa5b)]()['trim'](),_0x3ecf51=_0x262e07[_0x16c7a5(0x1e0)];for(const _0x1c87aa of _0x2d88a5){if(!_0x1c87aa)continue;if(_0x13673c[_0x16c7a5(0x291)](/ATTACK[ ](\d+)/i))_0x1c87aa[_0x16c7a5(0x396)](Number(RegExp['$1']));else _0x13673c===_0x16c7a5(0x71e)?_0x1c87aa['performAttack']():_0x1c87aa[_0x16c7a5(0x8c4)](_0x13673c);if(!_0x3ecf51){if(_0x16c7a5(0x25b)!==_0x16c7a5(0x25b)){const _0x4b6578=_0x54225b[_0x24d048];if(!_0x4b6578)return;const _0x408321=new _0x54fd97();this[_0x16c7a5(0x8d1)](_0x408321),_0x408321[_0x16c7a5(0x9b7)](_0x2c065f);}else _0x1c87aa[_0x16c7a5(0xc16)](0x0);}else{if(_0x3ecf51&&[_0x16c7a5(0x4c5),_0x16c7a5(0xaff),_0x16c7a5(0xb2d)][_0x16c7a5(0x2b1)](_0x13673c)){}}}}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x63b),_0xb34d4=>{const _0x1629c9=_0x45cef8;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1629c9(0x8b3)](_0xb34d4,_0xb34d4);const _0xc24a3a=BattleManager[_0x1629c9(0x79c)];if(!_0xc24a3a)return;if(!_0xc24a3a[_0x1629c9(0x3a4)]())return;const _0x414473=VisuMZ[_0x1629c9(0xce7)](_0xb34d4[_0x1629c9(0x2d1)]);for(const _0x11dd75 of _0x414473){if(!_0x11dd75)continue;_0x11dd75[_0x1629c9(0x8a3)](_0xc24a3a);}}),PluginManager[_0x45cef8(0x456)](pluginData['name'],_0x45cef8(0xbdb),_0x5e91d7=>{const _0x1cfec1=_0x45cef8;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1cfec1(0x8b3)](_0x5e91d7,_0x5e91d7);const _0x5d5beb=VisuMZ['CreateActionSequenceTargets'](_0x5e91d7[_0x1cfec1(0x2d1)]);for(const _0x59f3f1 of _0x5d5beb){if(!_0x59f3f1)continue;if(!_0x59f3f1[_0x1cfec1(0x231)]())continue;_0x59f3f1[_0x1cfec1(0x231)]()[_0x1cfec1(0x5f7)]();}}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x6f3),_0x17f9ad=>{const _0x17a817=_0x45cef8;if(!SceneManager[_0x17a817(0xc83)]())return;VisuMZ[_0x17a817(0x8b3)](_0x17f9ad,_0x17f9ad);const _0x13ad2a=$gameTemp[_0x17a817(0xaf3)](),_0x532f0b=_0x17f9ad[_0x17a817(0x8dc)]*Sprite_Battler[_0x17a817(0x3be)];_0x13ad2a[_0x17a817(0xcfe)](_0x532f0b);}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x3ef),_0x322498=>{const _0x1d37c3=_0x45cef8;if(!SceneManager[_0x1d37c3(0xc83)]())return;VisuMZ[_0x1d37c3(0x8b3)](_0x322498,_0x322498);const _0x526101=$gameTemp[_0x1d37c3(0xaf3)](),_0x3941f2=BattleManager[_0x1d37c3(0x79c)];if(!_0x526101||!_0x3941f2)return;if(!_0x3941f2[_0x1d37c3(0x3a4)]())return;const _0x30f63e=VisuMZ[_0x1d37c3(0xce7)](_0x322498[_0x1d37c3(0x2d1)]);for(const _0x213c0d of _0x30f63e){if('LWVms'===_0x1d37c3(0xcc2))_0x52e48c['BattleCore'][_0x1d37c3(0xb20)]['call'](this),this[_0x1d37c3(0xcd6)]();else{if(!_0x213c0d)continue;_0x213c0d[_0x1d37c3(0xcb1)](_0x3941f2);}}if(_0x322498[_0x1d37c3(0x22b)])_0x526101[_0x1d37c3(0x625)]('battleMove');}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Movement_HomeMoveBy',_0x27db78=>{const _0x40bb84=_0x45cef8;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x40bb84(0x8b3)](_0x27db78,_0x27db78);const _0x3acd01=$gameTemp[_0x40bb84(0xaf3)](),_0x435d07=VisuMZ['CreateActionSequenceTargets'](_0x27db78[_0x40bb84(0x2d1)]),_0xb9dcdb=_0x27db78[_0x40bb84(0x4e1)],_0x29ac77=_0x27db78[_0x40bb84(0xbbf)],_0x10c123=_0x27db78[_0x40bb84(0x882)],_0x1076c4=_0x27db78['Duration'],_0x40f79c=_0x27db78[_0x40bb84(0x201)],_0x58a1c8=_0x27db78[_0x40bb84(0x94a)],_0x422a0f=_0x27db78['MotionType'],_0x15bf0a=_0x27db78['WaitForMovement'];if(!_0x3acd01)return;for(const _0x3466bc of _0x435d07){if(_0x40bb84(0x3f6)!==_0x40bb84(0x3f6))_0x4304e7[_0x40bb84(0xa10)]&&(this[_0x40bb84(0x287)](_0x40bb84(0x36a)),this['push']('popBaseLine'),this[_0x40bb84(0x287)](_0x40bb84(0xc8f)),this[_0x40bb84(0x287)](_0x40bb84(0x4b8),_0x47919e[_0x40bb84(0xa10)][_0x40bb84(0x9ec)](_0x590f42[_0x40bb84(0xd00)]())),this['push'](_0x40bb84(0xcfe)));else{if(!_0x3466bc)continue;let _0x46be3b=_0x29ac77,_0xaa9f7=_0x10c123;if(_0xb9dcdb['match'](/horz/i))_0x46be3b*=_0x3466bc[_0x40bb84(0x98a)]()?-0x1:0x1;if(_0xb9dcdb['match'](/vert/i))_0xaa9f7*=_0x3466bc[_0x40bb84(0x98a)]()?-0x1:0x1;_0x3466bc['moveBattlerHomeDistance'](_0x46be3b,_0xaa9f7,_0x1076c4,_0x40f79c,_0x58a1c8),_0x3466bc[_0x40bb84(0x8c4)](_0x422a0f);}}if(_0x15bf0a)_0x3acd01[_0x40bb84(0x625)](_0x40bb84(0x307));}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x3a0),_0xfc26cc=>{const _0x2a976f=_0x45cef8;if(!SceneManager[_0x2a976f(0xc83)]())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0xfc26cc,_0xfc26cc);const _0x4e18d8=$gameTemp[_0x2a976f(0xaf3)](),_0xdbf0f6=VisuMZ['CreateActionSequenceTargets'](_0xfc26cc['Targets']),_0x360b9d=_0xfc26cc[_0x2a976f(0x82b)],_0x352a60=_0xfc26cc[_0x2a976f(0xb1d)],_0x43b3d8=_0xfc26cc[_0x2a976f(0x900)],_0x383419=_0xfc26cc[_0x2a976f(0x372)],_0x7f0a8a=_0xfc26cc['Duration'],_0x35baa9=_0xfc26cc[_0x2a976f(0x201)],_0x128e56=_0xfc26cc[_0x2a976f(0x94a)],_0xc946aa=_0xfc26cc['MotionType'],_0x163a99=_0xfc26cc['WaitForMovement'];if(!_0x4e18d8)return;for(const _0x3c73de of _0xdbf0f6){if(!_0x3c73de)continue;let _0x3e2954=_0x3c73de[_0x2a976f(0x231)]()[_0x2a976f(0x3c6)],_0x1e4fab=_0x3c73de[_0x2a976f(0x231)]()[_0x2a976f(0x987)];if(_0x360b9d[_0x2a976f(0x291)](/home/i))_0x3e2954=_0x3c73de[_0x2a976f(0x231)]()[_0x2a976f(0x883)],_0x1e4fab=_0x3c73de['battler']()[_0x2a976f(0xabb)];else{if(_0x360b9d[_0x2a976f(0x291)](/center/i))_0x2a976f(0xb15)!==_0x2a976f(0xb15)?_0x154fe2[_0x2a976f(0x1f4)]():(_0x3e2954=Graphics['boxWidth']/0x2,_0x1e4fab=Graphics['boxHeight']/0x2);else _0x360b9d[_0x2a976f(0x291)](/point (\d+), (\d+)/i)&&(_0x3e2954=Number(RegExp['$1']),_0x1e4fab=Number(RegExp['$2']));}if(_0x352a60['match'](/none/i))_0x2a976f(0xcab)===_0x2a976f(0xcab)?(_0x3e2954+=_0x43b3d8,_0x1e4fab+=_0x383419):_0x4dcf85=_0x4a4c02;else{if(_0x352a60[_0x2a976f(0x291)](/horz/i)&&_0x352a60[_0x2a976f(0x291)](/vert/i))_0x2a976f(0x682)===_0x2a976f(0x682)?(_0x3e2954+=_0x3c73de[_0x2a976f(0x98a)]()?-_0x43b3d8:_0x43b3d8,_0x1e4fab+=_0x3c73de[_0x2a976f(0x98a)]()?-_0x383419:_0x383419):this[_0x2a976f(0x5e1)](_0x2a976f(0x375));else{if(_0x352a60[_0x2a976f(0x291)](/horz/i))_0x3e2954+=_0x3c73de[_0x2a976f(0x98a)]()?-_0x43b3d8:_0x43b3d8,_0x1e4fab+=_0x383419;else _0x352a60['match'](/vert/i)&&(_0x3e2954+=_0x43b3d8,_0x1e4fab+=_0x3c73de[_0x2a976f(0x98a)]()?-_0x383419:_0x383419);}}_0x3c73de[_0x2a976f(0x8ca)](_0x3e2954,_0x1e4fab,_0x7f0a8a,_0x35baa9,_0x128e56,-0x1),_0x3c73de[_0x2a976f(0x8c4)](_0xc946aa);}if(_0x163a99)_0x4e18d8['setWaitMode']('battleMove');}),PluginManager['registerCommand'](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x796),_0x18dc7f=>{const _0x4d1c0f=_0x45cef8;if(!SceneManager[_0x4d1c0f(0xc83)]())return;if(!$gameSystem[_0x4d1c0f(0xc02)]())return;VisuMZ[_0x4d1c0f(0x8b3)](_0x18dc7f,_0x18dc7f);const _0x9fa8ea=$gameTemp[_0x4d1c0f(0xaf3)](),_0x59d46e=VisuMZ[_0x4d1c0f(0xce7)](_0x18dc7f[_0x4d1c0f(0x794)]),_0x128679=VisuMZ[_0x4d1c0f(0xce7)](_0x18dc7f['Targets2']),_0x381482=_0x18dc7f['TargetLocation'];let _0x4285c3=_0x18dc7f[_0x4d1c0f(0xcc8)];const _0x1cdbb7=_0x18dc7f['OffsetAdjust'],_0x2e485c=_0x18dc7f['OffsetX'],_0x546264=_0x18dc7f[_0x4d1c0f(0x372)],_0x34367b=_0x18dc7f[_0x4d1c0f(0x690)],_0x1e1876=_0x18dc7f[_0x4d1c0f(0x201)],_0x2c3f8c=_0x18dc7f[_0x4d1c0f(0x94a)],_0x16ce73=_0x18dc7f[_0x4d1c0f(0x77b)],_0x4b1488=_0x18dc7f[_0x4d1c0f(0x22b)],_0x2d9ee8=Math['min'](..._0x128679[_0x4d1c0f(0x4a9)](_0x48cb34=>_0x48cb34[_0x4d1c0f(0x231)]()['_baseX']-_0x48cb34[_0x4d1c0f(0x231)]()['mainSpriteWidth']()/0x2)),_0x16f795=Math['max'](..._0x128679[_0x4d1c0f(0x4a9)](_0x666629=>_0x666629[_0x4d1c0f(0x231)]()['_baseX']+_0x666629[_0x4d1c0f(0x231)]()[_0x4d1c0f(0x48f)]()/0x2)),_0x5dbf32=Math[_0x4d1c0f(0x582)](..._0x128679[_0x4d1c0f(0x4a9)](_0x107cca=>_0x107cca[_0x4d1c0f(0x231)]()[_0x4d1c0f(0x987)]-_0x107cca['battler']()[_0x4d1c0f(0x2e5)]())),_0x31b2f7=Math['max'](..._0x128679[_0x4d1c0f(0x4a9)](_0x46aecd=>_0x46aecd['battler']()[_0x4d1c0f(0x987)])),_0x81efa7=_0x128679[_0x4d1c0f(0x4db)](_0xa78dfd=>_0xa78dfd[_0x4d1c0f(0x98a)]())[_0x4d1c0f(0xcc5)],_0x1a325b=_0x128679[_0x4d1c0f(0x4db)](_0x48fe9f=>_0x48fe9f[_0x4d1c0f(0x724)]())[_0x4d1c0f(0xcc5)];let _0x4e2c0e=0x0,_0x236c6b=0x0;if(_0x381482['match'](/front/i))_0x4e2c0e=_0x81efa7>=_0x1a325b?_0x2d9ee8:_0x16f795;else{if(_0x381482['match'](/middle/i)){if(_0x4d1c0f(0x537)!==_0x4d1c0f(0x803))_0x4e2c0e=(_0x2d9ee8+_0x16f795)/0x2,_0x4285c3=-0x1;else{const _0x52b38b=_0x39d598[_0x4d1c0f(0x5bf)](_0x4a30c9);_0x52b38b['hpAffected']=![],_0x52b38b[_0x4d1c0f(0x5eb)]=0x0,this[_0x4d1c0f(0xbe1)][_0x4d1c0f(0x287)](_0x52b38b);}}else _0x381482[_0x4d1c0f(0x291)](/back/i)&&(_0x4e2c0e=_0x81efa7>=_0x1a325b?_0x16f795:_0x2d9ee8);}if(_0x381482[_0x4d1c0f(0x291)](/head/i))_0x236c6b=_0x5dbf32;else{if(_0x381482[_0x4d1c0f(0x291)](/center/i)){if(_0x4d1c0f(0x8cd)!==_0x4d1c0f(0x8cd))return![];else _0x236c6b=(_0x5dbf32+_0x31b2f7)/0x2;}else{if(_0x381482['match'](/base/i)){if(_0x4d1c0f(0x360)===_0x4d1c0f(0x360))_0x236c6b=_0x31b2f7;else return this[_0x4d1c0f(0x56d)]();}}}if(!_0x9fa8ea)return;for(const _0xcf28f of _0x59d46e){if(!_0xcf28f)continue;let _0x5d7761=_0x4e2c0e,_0x4972a1=_0x236c6b;if(_0x1cdbb7[_0x4d1c0f(0x291)](/none/i)){if(_0x4d1c0f(0x5dc)==='zSKyz')return this['_enemy']['allowCollapse']();else _0x5d7761+=_0x2e485c,_0x4972a1+=_0x546264;}else{if(_0x1cdbb7['match'](/horz/i)&&_0x1cdbb7[_0x4d1c0f(0x291)](/vert/i))_0x5d7761+=_0xcf28f[_0x4d1c0f(0x98a)]()?-_0x2e485c:_0x2e485c,_0x4972a1+=_0xcf28f[_0x4d1c0f(0x98a)]()?-_0x546264:_0x546264;else{if(_0x1cdbb7[_0x4d1c0f(0x291)](/horz/i)){if(_0x4d1c0f(0xb17)!==_0x4d1c0f(0x94d))_0x5d7761+=_0xcf28f[_0x4d1c0f(0x98a)]()?-_0x2e485c:_0x2e485c,_0x4972a1+=_0x546264;else{if(_0x2fa62d[_0x4d1c0f(0x6c0)][_0x4d1c0f(0x658)][_0x4d1c0f(0xc97)][_0x4d1c0f(0x9d3)])return;this[_0x4d1c0f(0x792)]=new _0x128cee(),_0x5afb2f[_0x4d1c0f(0x3a5)](this[_0x4d1c0f(0x792)]);for(const _0x4ab043 of this[_0x4d1c0f(0xc1e)]){const _0x57ceb5=new _0x4c6633();this[_0x4d1c0f(0x792)][_0x4d1c0f(0x5b6)](_0x57ceb5),_0x57ceb5[_0x4d1c0f(0xaed)](_0x4ab043);}}}else _0x1cdbb7['match'](/vert/i)&&(_0x5d7761+=_0x2e485c,_0x4972a1+=_0xcf28f[_0x4d1c0f(0x98a)]()?-_0x546264:_0x546264);}}_0xcf28f[_0x4d1c0f(0x8ca)](_0x5d7761,_0x4972a1,_0x34367b,_0x1e1876,_0x2c3f8c,_0x4285c3),_0xcf28f[_0x4d1c0f(0x8c4)](_0x16ce73);}if(_0x4b1488)_0x9fa8ea['setWaitMode']('battleMove');}),PluginManager['registerCommand'](pluginData[_0x45cef8(0xd00)],_0x45cef8(0xad6),_0x37de63=>{const _0x5e22a8=_0x45cef8;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x5e22a8(0xc02)]())return;VisuMZ[_0x5e22a8(0x8b3)](_0x37de63,_0x37de63);const _0x4edcd7=VisuMZ[_0x5e22a8(0xce7)](_0x37de63['Targets']);let _0x337932=_0x37de63['Direction'][_0x5e22a8(0x291)](/back/i);for(const _0x829fb6 of _0x4edcd7){if(!_0x829fb6)continue;if(_0x37de63[_0x5e22a8(0xa9c)][_0x5e22a8(0x291)](/rand/i))_0x337932=Math[_0x5e22a8(0xa4d)](0x2);_0x829fb6['setBattlerFlip'](!!_0x337932);}}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0xca4),_0x549925=>{const _0x13f4b4=_0x45cef8;if(!SceneManager[_0x13f4b4(0xc83)]())return;if(!$gameSystem[_0x13f4b4(0xc02)]())return;VisuMZ[_0x13f4b4(0x8b3)](_0x549925,_0x549925);const _0x3c97c3=VisuMZ[_0x13f4b4(0xce7)](_0x549925[_0x13f4b4(0x2d1)]);let _0x4191ed=_0x549925['Point'];const _0x325b48=_0x549925[_0x13f4b4(0x648)];for(const _0x297a8c of _0x3c97c3){if(_0x13f4b4(0xa48)!==_0x13f4b4(0x1f7)){if(!_0x297a8c)continue;let _0x17df6d=_0x297a8c[_0x13f4b4(0x231)]()[_0x13f4b4(0x3c6)],_0x1a0edb=_0x297a8c[_0x13f4b4(0x231)]()[_0x13f4b4(0x987)];if(_0x4191ed[_0x13f4b4(0x291)](/home/i))_0x17df6d=_0x297a8c[_0x13f4b4(0x231)]()[_0x13f4b4(0x883)],_0x1a0edb=_0x297a8c[_0x13f4b4(0x231)]()[_0x13f4b4(0xabb)];else{if(_0x4191ed[_0x13f4b4(0x291)](/center/i))_0x17df6d=Graphics[_0x13f4b4(0xa5d)]/0x2,_0x1a0edb=Graphics[_0x13f4b4(0xb42)]/0x2;else _0x4191ed[_0x13f4b4(0x291)](/point (\d+), (\d+)/i)&&(_0x17df6d=Number(RegExp['$1']),_0x1a0edb=Number(RegExp['$2']));}_0x297a8c[_0x13f4b4(0x35f)](Math[_0x13f4b4(0x365)](_0x17df6d),Math[_0x13f4b4(0x365)](_0x1a0edb),!!_0x325b48);}else{this[_0x13f4b4(0x524)]=new _0x23a5f9();const _0x1e6097=_0x4f2746['_scene'],_0x269415=_0x1e6097['children'][_0x13f4b4(0xac5)](_0x1e6097[_0x13f4b4(0xadc)]);_0x1e6097['addChildAt'](this['_borderPortraitSprite'],_0x269415),this['_borderPortraitSprite'][_0x13f4b4(0xaca)]['x']=0.5,this[_0x13f4b4(0x524)]['anchor']['y']=0x1;const _0x4cd078=_0xf4f6d7[_0x13f4b4(0x6c0)][_0x13f4b4(0x658)][_0x13f4b4(0x5be)][_0x13f4b4(0x2df)];this['_borderPortraitSprite'][_0x13f4b4(0x4bb)]['x']=_0x4cd078,this[_0x13f4b4(0x524)][_0x13f4b4(0x4bb)]['y']=_0x4cd078,this[_0x13f4b4(0x524)]['y']=this['y']+this['height'],this['_borderPortraitDuration']=0x0;}}}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x86b),_0x137f86=>{const _0xffca20=_0x45cef8;if(!SceneManager[_0xffca20(0xc83)]())return;if(!$gameSystem[_0xffca20(0xc02)]())return;VisuMZ[_0xffca20(0x8b3)](_0x137f86,_0x137f86);const _0x384b72=VisuMZ[_0xffca20(0xce7)](_0x137f86[_0xffca20(0x794)]),_0x232737=VisuMZ['CreateActionSequenceTargets'](_0x137f86[_0xffca20(0x6e0)]),_0x4c5dc2=_0x232737[_0xffca20(0x4a9)](_0x54445a=>_0x54445a&&_0x54445a[_0xffca20(0x231)]()?_0x54445a['battler']()[_0xffca20(0x3c6)]:0x0)/(_0x232737[_0xffca20(0xcc5)]||0x1),_0x48e2fc=_0x232737[_0xffca20(0x4a9)](_0x160108=>_0x160108&&_0x160108['battler']()?_0x160108[_0xffca20(0x231)]()[_0xffca20(0x987)]:0x0)/(_0x232737[_0xffca20(0xcc5)]||0x1),_0x3dc666=_0x137f86['FaceAway'];for(const _0x35ccd7 of _0x384b72){if(!_0x35ccd7)continue;_0x35ccd7[_0xffca20(0x35f)](Math[_0xffca20(0x365)](_0x4c5dc2),Math[_0xffca20(0x365)](_0x48e2fc),!!_0x3dc666);}}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x37d),_0x2e78d6=>{const _0x475933=_0x45cef8;if(!SceneManager[_0x475933(0xc83)]())return;VisuMZ[_0x475933(0x8b3)](_0x2e78d6,_0x2e78d6);const _0x6a99f=$gameTemp[_0x475933(0xaf3)](),_0x2f8821=VisuMZ[_0x475933(0xce7)](_0x2e78d6['Targets']),_0x3bd71f=_0x2e78d6[_0x475933(0x385)],_0x473dae=_0x2e78d6['Duration'],_0x38db30=_0x2e78d6[_0x475933(0x94a)],_0x1394a3=_0x2e78d6[_0x475933(0x256)];if(!_0x6a99f)return;for(const _0x97eca0 of _0x2f8821){if(!_0x97eca0)continue;_0x97eca0[_0x475933(0x449)](_0x3bd71f,_0x473dae,_0x38db30);}if(_0x1394a3)_0x6a99f[_0x475933(0x625)](_0x475933(0x6e7));}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],'ActSeq_Movement_HomeReset',_0x843f14=>{const _0x412bab=_0x45cef8;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x412bab(0x8b3)](_0x843f14,_0x843f14);const _0x530439=$gameTemp[_0x412bab(0xaf3)]();if(!_0x530439)return;const _0x5c624e=VisuMZ['CreateActionSequenceTargets'](_0x843f14['Targets']);for(const _0x1613d7 of _0x5c624e){if(_0x412bab(0x382)!==_0x412bab(0x382))_0x6339d3[_0x412bab(0x6c0)]['Window_BattleLog_performMiss'][_0x412bab(0xa07)](this,_0x356ff9),this[_0x412bab(0x5d7)]();else{if(!_0x1613d7)continue;_0x1613d7[_0x412bab(0x697)]();}}BattleManager[_0x412bab(0x8af)]&&BattleManager[_0x412bab(0x8af)][_0x412bab(0xd06)]();if(_0x843f14[_0x412bab(0x22b)])_0x530439[_0x412bab(0x625)](_0x412bab(0x307));}),PluginManager[_0x45cef8(0x456)](pluginData['name'],_0x45cef8(0x775),_0x56cad3=>{const _0x1e198f=_0x45cef8;if(!SceneManager[_0x1e198f(0xc83)]())return;VisuMZ[_0x1e198f(0x8b3)](_0x56cad3,_0x56cad3);const _0x1a05dc=$gameTemp['getLastPluginCommandInterpreter'](),_0x42a4be=VisuMZ[_0x1e198f(0xce7)](_0x56cad3[_0x1e198f(0x2d1)]),_0x2cc4e6=_0x56cad3[_0x1e198f(0x385)],_0xdcb310=_0x56cad3[_0x1e198f(0x690)],_0x5c76d3=_0x56cad3[_0x1e198f(0x58e)];if(!_0x1a05dc)return;for(const _0x152bd6 of _0x42a4be){if(_0x1e198f(0x288)!=='LSzuw'){if(!_0x152bd6)continue;_0x152bd6[_0x1e198f(0x4ce)](_0x2cc4e6,_0xdcb310);}else return this[_0x1e198f(0xca0)]()&&this['currentAction']()['item']()&&this[_0x1e198f(0xca0)]()[_0x1e198f(0xa88)]();}if(_0x5c76d3)_0x1a05dc[_0x1e198f(0x625)](_0x1e198f(0x496));}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x4f7),_0x1dbca3=>{const _0x55bf28=_0x45cef8;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x55bf28(0xc02)]())return;VisuMZ['ConvertParams'](_0x1dbca3,_0x1dbca3);const _0x4dbb1d=$gameTemp[_0x55bf28(0xaf3)](),_0x408356=VisuMZ['CreateActionSequenceTargets'](_0x1dbca3['Targets']),_0x107d56=_0x1dbca3['DistanceAdjust'],_0x36b935=_0x1dbca3[_0x55bf28(0xbbf)],_0x443e14=_0x1dbca3[_0x55bf28(0x882)],_0x3795d0=_0x1dbca3[_0x55bf28(0x690)],_0x14c6ba=_0x1dbca3['FaceDirection'],_0x17ef21=_0x1dbca3[_0x55bf28(0x94a)],_0x2e704f=_0x1dbca3['MotionType'],_0x14bcd2=_0x1dbca3['WaitForMovement'];if(!_0x4dbb1d)return;for(const _0x2631f6 of _0x408356){if(!_0x2631f6)continue;let _0x41edc8=_0x36b935,_0x2a5c08=_0x443e14;if(_0x107d56['match'](/horz/i))_0x41edc8*=_0x2631f6[_0x55bf28(0x98a)]()?-0x1:0x1;if(_0x107d56['match'](/vert/i))_0x2a5c08*=_0x2631f6[_0x55bf28(0x98a)]()?-0x1:0x1;_0x2631f6[_0x55bf28(0x9ba)](_0x41edc8,_0x2a5c08,_0x3795d0,_0x14c6ba,_0x17ef21),_0x2631f6[_0x55bf28(0x8c4)](_0x2e704f);}if(_0x14bcd2)_0x4dbb1d[_0x55bf28(0x625)](_0x55bf28(0x307));}),PluginManager['registerCommand'](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x72d),_0x4f926f=>{const _0x1fecd0=_0x45cef8;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x1fecd0(0xc02)]())return;VisuMZ['ConvertParams'](_0x4f926f,_0x4f926f);const _0x2f6577=$gameTemp[_0x1fecd0(0xaf3)](),_0x4c93b7=VisuMZ[_0x1fecd0(0xce7)](_0x4f926f[_0x1fecd0(0x2d1)]),_0x195340=_0x4f926f['Destination'],_0x11f3b0=_0x4f926f['OffsetAdjust'],_0x3e77b8=_0x4f926f['OffsetX'],_0xd5564f=_0x4f926f[_0x1fecd0(0x372)],_0x7228f4=_0x4f926f['Duration'],_0x29dae0=_0x4f926f['FaceDirection'],_0x23880b=_0x4f926f[_0x1fecd0(0x94a)],_0x2b60c4=_0x4f926f[_0x1fecd0(0x77b)],_0x5da2d7=_0x4f926f[_0x1fecd0(0x22b)];if(!_0x2f6577)return;for(const _0x3a4c64 of _0x4c93b7){if(_0x1fecd0(0x849)!==_0x1fecd0(0x849))_0x4b5811=_0x1439f7['battler']()['_homeX'],_0x293891=_0x38de10['battler']()[_0x1fecd0(0xabb)];else{if(!_0x3a4c64)continue;let _0x3e2281=_0x3a4c64[_0x1fecd0(0x231)]()['_baseX'],_0x1c8667=_0x3a4c64[_0x1fecd0(0x231)]()['_baseY'];if(_0x195340[_0x1fecd0(0x291)](/home/i)){if(_0x1fecd0(0x2b9)===_0x1fecd0(0x2b9))_0x3e2281=_0x3a4c64[_0x1fecd0(0x231)]()[_0x1fecd0(0x883)],_0x1c8667=_0x3a4c64[_0x1fecd0(0x231)]()[_0x1fecd0(0xabb)];else{if(_0x155a79[_0x1fecd0(0xc83)]()){const _0x709525=this[_0x1fecd0(0x231)]();_0x709525&&(_0x709525['forceMotion'](_0x314f98),[_0x1fecd0(0xaff),_0x1fecd0(0x4c5),_0x1fecd0(0x929)][_0x1fecd0(0x2b1)](_0x448fdd)&&this[_0x1fecd0(0x630)]());}this[_0x1fecd0(0xad0)]();}}else{if(_0x195340[_0x1fecd0(0x291)](/center/i))_0x3e2281=Graphics[_0x1fecd0(0xa5d)]/0x2,_0x1c8667=Graphics['boxHeight']/0x2;else _0x195340['match'](/point (\d+), (\d+)/i)&&(_0x1fecd0(0xb07)===_0x1fecd0(0xb07)?(_0x3e2281=Number(RegExp['$1']),_0x1c8667=Number(RegExp['$2'])):this[_0x1fecd0(0x6ff)]());}if(_0x11f3b0[_0x1fecd0(0x291)](/none/i))_0x1fecd0(0x661)!==_0x1fecd0(0x661)?(_0x4f224d[_0x1fecd0(0x6c0)]['Scene_Battle_update'][_0x1fecd0(0xa07)](this),this['updateOnceParallelInterpreters']()):(_0x3e2281+=_0x3e77b8,_0x1c8667+=_0xd5564f);else{if(_0x11f3b0[_0x1fecd0(0x291)](/horz/i)&&_0x11f3b0[_0x1fecd0(0x291)](/vert/i)){if('zuHtl'!=='UUtHU')_0x3e2281+=_0x3a4c64[_0x1fecd0(0x98a)]()?-_0x3e77b8:_0x3e77b8,_0x1c8667+=_0x3a4c64[_0x1fecd0(0x98a)]()?-_0xd5564f:_0xd5564f;else{if(!_0x15dbc2[_0x1fecd0(0xc83)]())return;const _0x450f6f=this[_0x1fecd0(0x231)]();if(!_0x450f6f)return;let _0x60b8a8=this[_0x1fecd0(0x98a)]()?_0x450f6f[_0x1fecd0(0xb25)]:_0x450f6f[_0x1fecd0(0x7fc)][_0x1fecd0(0xb25)];_0x60b8a8&&_0x60b8a8[_0x1fecd0(0x74e)](0x0);}}else{if(_0x11f3b0['match'](/horz/i))'CbHZi'!==_0x1fecd0(0x9f8)?(_0x3e2281+=_0x3a4c64[_0x1fecd0(0x98a)]()?-_0x3e77b8:_0x3e77b8,_0x1c8667+=_0xd5564f):_0x5cdfcf[_0x1fecd0(0x3a7)][_0x1fecd0(0x2a2)]<1.19&&(_0x4c3e54(_0x51e135['format'](_0x1fecd0(0x9a3))),_0x286b16[_0x1fecd0(0xa50)]());else _0x11f3b0['match'](/vert/i)&&(_0x1fecd0(0xac2)!==_0x1fecd0(0xbb3)?(_0x3e2281+=_0x3e77b8,_0x1c8667+=_0x3a4c64['isActor']()?-_0xd5564f:_0xd5564f):this['battleCorePreBattleCommonEvent']());}}_0x3a4c64['moveBattlerToPoint'](_0x3e2281,_0x1c8667,_0x7228f4,_0x29dae0,_0x23880b,-0x1),_0x3a4c64[_0x1fecd0(0x8c4)](_0x2b60c4);}}if(_0x5da2d7)_0x2f6577[_0x1fecd0(0x625)](_0x1fecd0(0x307));}),PluginManager[_0x45cef8(0x456)](pluginData['name'],_0x45cef8(0xb7d),_0x50ff46=>{const _0x24fbce=_0x45cef8;if(!SceneManager[_0x24fbce(0xc83)]())return;if(!$gameSystem[_0x24fbce(0xc02)]())return;VisuMZ[_0x24fbce(0x8b3)](_0x50ff46,_0x50ff46);const _0x204c17=$gameTemp['getLastPluginCommandInterpreter'](),_0x44607d=VisuMZ[_0x24fbce(0xce7)](_0x50ff46[_0x24fbce(0x794)]),_0x156d56=VisuMZ['CreateActionSequenceTargets'](_0x50ff46['Targets2']),_0x9b3c16=_0x50ff46[_0x24fbce(0xc77)];let _0x33af52=_0x50ff46[_0x24fbce(0xcc8)];const _0x4d9ee9=_0x50ff46[_0x24fbce(0xb1d)],_0x3c241c=_0x50ff46[_0x24fbce(0x900)],_0x4278ea=_0x50ff46['OffsetY'],_0xd6f9d5=_0x50ff46[_0x24fbce(0x690)],_0x4182aa=_0x50ff46[_0x24fbce(0x201)],_0x20203a=_0x50ff46[_0x24fbce(0x94a)],_0x3782cc=_0x50ff46['MotionType'],_0x535c44=_0x50ff46[_0x24fbce(0x22b)],_0x3fafe2=Math[_0x24fbce(0x582)](..._0x156d56['map'](_0x4ef852=>_0x4ef852['battler']()[_0x24fbce(0x3c6)]-_0x4ef852[_0x24fbce(0x231)]()[_0x24fbce(0x48f)]()/0x2)),_0xbcfac9=Math[_0x24fbce(0x2ce)](..._0x156d56[_0x24fbce(0x4a9)](_0x26557c=>_0x26557c[_0x24fbce(0x231)]()[_0x24fbce(0x3c6)]+_0x26557c[_0x24fbce(0x231)]()[_0x24fbce(0x48f)]()/0x2)),_0x4f503a=Math[_0x24fbce(0x582)](..._0x156d56[_0x24fbce(0x4a9)](_0x2e21b9=>_0x2e21b9[_0x24fbce(0x231)]()['_baseY']-_0x2e21b9[_0x24fbce(0x231)]()[_0x24fbce(0x2e5)]())),_0xafa87a=Math[_0x24fbce(0x2ce)](..._0x156d56[_0x24fbce(0x4a9)](_0x5ca980=>_0x5ca980[_0x24fbce(0x231)]()['_baseY'])),_0x26a02e=_0x156d56[_0x24fbce(0x4db)](_0x2acc1e=>_0x2acc1e['isActor']())['length'],_0x5524d5=_0x156d56[_0x24fbce(0x4db)](_0x555da0=>_0x555da0[_0x24fbce(0x724)]())[_0x24fbce(0xcc5)];let _0x1afaac=0x0,_0x223237=0x0;if(_0x9b3c16[_0x24fbce(0x291)](/front/i))_0x24fbce(0x7d6)===_0x24fbce(0x9f3)?(_0x14854a[_0x24fbce(0x3cf)][_0x24fbce(0x9cf)][_0x24fbce(0xa07)](this),this[_0x24fbce(0x48a)][_0x24fbce(0x47a)]=_0x2e016b['BattleCore'][_0x24fbce(0x658)][_0x24fbce(0xc97)][_0x24fbce(0x9ab)]):_0x1afaac=_0x26a02e>=_0x5524d5?_0x3fafe2:_0xbcfac9;else{if(_0x9b3c16[_0x24fbce(0x291)](/middle/i))_0x1afaac=(_0x3fafe2+_0xbcfac9)/0x2,_0x33af52=-0x1;else _0x9b3c16[_0x24fbce(0x291)](/back/i)&&(_0x1afaac=_0x26a02e>=_0x5524d5?_0xbcfac9:_0x3fafe2);}if(_0x9b3c16[_0x24fbce(0x291)](/head/i))_0x223237=_0x4f503a;else{if(_0x9b3c16[_0x24fbce(0x291)](/center/i)){if(_0x24fbce(0xb00)===_0x24fbce(0xb00))_0x223237=(_0x4f503a+_0xafa87a)/0x2;else{if(!this['_actor']['hasSkill'](_0x33c650['id']))return![];}}else _0x9b3c16[_0x24fbce(0x291)](/base/i)&&(_0x223237=_0xafa87a);}if(!_0x204c17)return;for(const _0x869622 of _0x44607d){if(_0x24fbce(0x24f)!==_0x24fbce(0x4ea)){if(!_0x869622)continue;let _0x4ff2a2=_0x1afaac,_0x371d84=_0x223237;if(_0x4d9ee9[_0x24fbce(0x291)](/none/i))_0x4ff2a2+=_0x3c241c,_0x371d84+=_0x4278ea;else{if(_0x4d9ee9[_0x24fbce(0x291)](/horz/i)&&_0x4d9ee9['match'](/vert/i))_0x4ff2a2+=_0x869622[_0x24fbce(0x98a)]()?-_0x3c241c:_0x3c241c,_0x371d84+=_0x869622['isActor']()?-_0x4278ea:_0x4278ea;else{if(_0x4d9ee9['match'](/horz/i))_0x4ff2a2+=_0x869622[_0x24fbce(0x98a)]()?-_0x3c241c:_0x3c241c,_0x371d84+=_0x4278ea;else _0x4d9ee9[_0x24fbce(0x291)](/vert/i)&&(_0x4ff2a2+=_0x3c241c,_0x371d84+=_0x869622[_0x24fbce(0x98a)]()?-_0x4278ea:_0x4278ea);}}_0x869622[_0x24fbce(0x712)](_0x4ff2a2,_0x371d84,_0xd6f9d5,_0x4182aa,_0x20203a,_0x33af52),_0x869622['requestMotion'](_0x3782cc);}else _0x343119=_0x3da50e['reduce']((_0x4c8dd0,_0x4f4e54)=>_0x4c8dd0*(0x1-_0x4f4e54),_0x1c1a03);}if(_0x535c44)_0x204c17[_0x24fbce(0x625)](_0x24fbce(0x307));}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x364),_0x42b540=>{const _0x22277d=_0x45cef8;if(!SceneManager[_0x22277d(0xc83)]())return;VisuMZ[_0x22277d(0x8b3)](_0x42b540,_0x42b540);const _0xb95f33=$gameTemp[_0x22277d(0xaf3)](),_0x459dae=VisuMZ[_0x22277d(0xce7)](_0x42b540[_0x22277d(0x2d1)]),_0x2c1fca=_0x42b540[_0x22277d(0xb6f)],_0x171b84=_0x42b540[_0x22277d(0x690)],_0x40a29e=_0x42b540[_0x22277d(0x94a)],_0x319812=_0x42b540[_0x22277d(0x326)];if(!_0xb95f33)return;for(const _0x274cac of _0x459dae){if('tYRHm'===_0x22277d(0x662))return this[_0x22277d(0x3f1)];else{if(!_0x274cac)continue;_0x274cac[_0x22277d(0xc30)](_0x2c1fca,_0x171b84,_0x40a29e);}}if(_0x319812)_0xb95f33['setWaitMode']('battleOpacity');}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0xc25),_0x5683f5=>{const _0xcba8e9=_0x45cef8;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xcba8e9(0x8b3)](_0x5683f5,_0x5683f5);const _0x215512=$gameTemp[_0xcba8e9(0xaf3)](),_0x258f4b=VisuMZ['CreateActionSequenceTargets'](_0x5683f5['Targets']),_0x3e8937=_0x5683f5[_0xcba8e9(0x2da)],_0x28cffd=_0x5683f5['ScaleY'],_0x1c5075=_0x5683f5[_0xcba8e9(0x690)],_0x51ed16=_0x5683f5['EasingType'],_0x251ed6=_0x5683f5[_0xcba8e9(0xc0a)];if(!_0x215512)return;for(const _0x264c7f of _0x258f4b){if(!_0x264c7f)continue;_0x264c7f[_0xcba8e9(0x6bc)](_0x3e8937,_0x28cffd,_0x1c5075,_0x51ed16);}if(_0x251ed6)_0x215512['setWaitMode'](_0xcba8e9(0x834));}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x2db),_0x30888e=>{const _0x562575=_0x45cef8;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x562575(0x8b3)](_0x30888e,_0x30888e);const _0x4af7ff=$gameTemp['getLastPluginCommandInterpreter'](),_0x727b22=VisuMZ[_0x562575(0xce7)](_0x30888e[_0x562575(0x2d1)]),_0x45e7f4=_0x30888e[_0x562575(0x85a)],_0x5e4d3d=_0x30888e['SkewY'],_0x231374=_0x30888e[_0x562575(0x690)],_0x54544f=_0x30888e['EasingType'],_0x29cf67=_0x30888e[_0x562575(0x45d)];if(!_0x4af7ff)return;for(const _0x387275 of _0x727b22){if(_0x562575(0x9aa)===_0x562575(0x7a6))_0x1db0d7[_0x562575(0x6c0)]['Game_Action_setGuard'][_0x562575(0xa07)](this);else{if(!_0x387275)continue;_0x387275[_0x562575(0xcb6)](_0x45e7f4,_0x5e4d3d,_0x231374,_0x54544f);}}if(_0x29cf67)_0x4af7ff['setWaitMode']('battleSpriteSkew');}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x98d),_0x4f7454=>{const _0x5ecc60=_0x45cef8;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x4f7454,_0x4f7454);const _0x20c2fb=$gameTemp[_0x5ecc60(0xaf3)](),_0x3cbadc=VisuMZ[_0x5ecc60(0xce7)](_0x4f7454[_0x5ecc60(0x2d1)]),_0x247311=_0x4f7454[_0x5ecc60(0x526)],_0x928d20=_0x4f7454['Duration'],_0x3a2caf=_0x4f7454['EasingType'],_0x484008=_0x4f7454[_0x5ecc60(0x572)],_0x4e6f1e=_0x4f7454[_0x5ecc60(0xca1)];if(!_0x20c2fb)return;for(const _0x32e888 of _0x3cbadc){if(!_0x32e888)continue;_0x32e888[_0x5ecc60(0x286)](_0x247311,_0x928d20,_0x3a2caf,_0x484008);}if(_0x4e6f1e)_0x20c2fb['setWaitMode'](_0x5ecc60(0x521));}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x249),_0x5d4e37=>{const _0x280e7e=_0x45cef8;if(!SceneManager['isSceneBattle']())return;const _0x29bac0=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x29bac0)return;_0x29bac0[_0x280e7e(0x625)](_0x280e7e(0x6e7));}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0xa71),_0x320005=>{const _0x1fd97c=_0x45cef8;if(!SceneManager['isSceneBattle']())return;const _0x2cf537=$gameTemp[_0x1fd97c(0xaf3)]();if(!_0x2cf537)return;_0x2cf537[_0x1fd97c(0x625)](_0x1fd97c(0x496));}),PluginManager['registerCommand'](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x4f1),_0x443e37=>{const _0x1ebefa=_0x45cef8;if(!SceneManager[_0x1ebefa(0xc83)]())return;const _0x286508=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x286508)return;_0x286508[_0x1ebefa(0x625)](_0x1ebefa(0x307));}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x5f2),_0x1ecd3d=>{const _0x17a771=_0x45cef8;if(!SceneManager['isSceneBattle']())return;const _0x2c4716=$gameTemp[_0x17a771(0xaf3)]();if(!_0x2c4716)return;_0x2c4716['setWaitMode']('battleOpacity');}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0xb94),_0x3380dd=>{const _0xf5d810=_0x45cef8;if(!SceneManager[_0xf5d810(0xc83)]())return;const _0x48f4ec=$gameTemp[_0xf5d810(0xaf3)]();if(!_0x48f4ec)return;_0x48f4ec[_0xf5d810(0x625)](_0xf5d810(0x834));}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0xcde),_0x572e91=>{const _0x3ac83e=_0x45cef8;if(!SceneManager[_0x3ac83e(0xc83)]())return;const _0x855ea7=$gameTemp[_0x3ac83e(0xaf3)]();if(!_0x855ea7)return;_0x855ea7[_0x3ac83e(0x625)]('battleSpriteSkew');}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0xaba),_0x3c10dd=>{const _0x1af7f2=_0x45cef8;if(!SceneManager['isSceneBattle']())return;const _0x1c2269=$gameTemp[_0x1af7f2(0xaf3)]();if(!_0x1c2269)return;_0x1c2269['setWaitMode'](_0x1af7f2(0x521));}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x39c),_0x49105e=>{const _0x5c7801=_0x45cef8;if(!SceneManager[_0x5c7801(0xc83)]())return;if(!Imported[_0x5c7801(0x4ad)])return;VisuMZ[_0x5c7801(0x8b3)](_0x49105e,_0x49105e);const _0x612607=$gameTemp[_0x5c7801(0xaf3)](),_0x53094b=_0x49105e[_0x5c7801(0xc2c)];if(!_0x612607)return;const _0x26c34=BattleManager[_0x5c7801(0x78d)];if(!_0x26c34)return;_0x26c34['createActionSequenceProjectile'](_0x49105e);if(_0x53094b)_0x612607[_0x5c7801(0x625)](_0x5c7801(0xad2));}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x9f1),_0x29517a=>{const _0xb25d2f=_0x45cef8;if(!SceneManager[_0xb25d2f(0xc83)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0xb25d2f(0x8b3)](_0x29517a,_0x29517a);const _0x47daa7=$gameTemp[_0xb25d2f(0xaf3)](),_0x28f9fe=_0x29517a['WaitForProjectile'];if(!_0x47daa7)return;const _0x490610=BattleManager[_0xb25d2f(0x78d)];if(!_0x490610)return;_0x490610[_0xb25d2f(0xa1a)](_0x29517a);if(_0x28f9fe)_0x47daa7[_0xb25d2f(0x625)](_0xb25d2f(0xad2));}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],'ActSeq_Projectile_Picture',_0x19cb66=>{const _0x5a5afa=_0x45cef8;if(!SceneManager[_0x5a5afa(0xc83)]())return;if(!Imported[_0x5a5afa(0x4ad)])return;VisuMZ[_0x5a5afa(0x8b3)](_0x19cb66,_0x19cb66);const _0x4e0697=$gameTemp['getLastPluginCommandInterpreter'](),_0x4bb0e7=_0x19cb66[_0x5a5afa(0xc2c)];if(!_0x4e0697)return;const _0x54b835=BattleManager[_0x5a5afa(0x78d)];if(!_0x54b835)return;_0x54b835[_0x5a5afa(0xa1a)](_0x19cb66);if(_0x4bb0e7)_0x4e0697[_0x5a5afa(0x625)](_0x5a5afa(0xad2));}),PluginManager[_0x45cef8(0x456)](pluginData['name'],_0x45cef8(0x722),_0x1a9b45=>{const _0x3570f1=_0x45cef8;if(!SceneManager[_0x3570f1(0xc83)]())return;if(!Imported[_0x3570f1(0xa9b)])return;VisuMZ[_0x3570f1(0x8b3)](_0x1a9b45,_0x1a9b45);const _0x42fc57=$gameTemp[_0x3570f1(0xaf3)](),_0x36d005=_0x1a9b45[_0x3570f1(0x45d)];if(!_0x42fc57)return;$gameScreen[_0x3570f1(0xb5e)](_0x1a9b45[_0x3570f1(0x85a)],_0x1a9b45['SkewY'],_0x1a9b45[_0x3570f1(0x690)],_0x1a9b45[_0x3570f1(0x94a)]);if(_0x36d005)_0x42fc57[_0x3570f1(0x625)](_0x3570f1(0xd04));}),PluginManager['registerCommand'](pluginData[_0x45cef8(0xd00)],'ActSeq_Skew_Reset',_0x10e697=>{const _0x16a561=_0x45cef8;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x16a561(0xa9b)])return;VisuMZ['ConvertParams'](_0x10e697,_0x10e697);const _0x1e60f9=$gameTemp['getLastPluginCommandInterpreter'](),_0x5c4fe9=_0x10e697[_0x16a561(0x45d)];if(!_0x1e60f9)return;$gameScreen[_0x16a561(0xb5e)](0x0,0x0,_0x10e697[_0x16a561(0x690)],_0x10e697[_0x16a561(0x94a)]);if(_0x5c4fe9)_0x1e60f9[_0x16a561(0x625)](_0x16a561(0xd04));}),PluginManager[_0x45cef8(0x456)](pluginData['name'],_0x45cef8(0x53f),_0x23111e=>{const _0x2b8b21=_0x45cef8;if(!SceneManager[_0x2b8b21(0xc83)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x3364ce=$gameTemp[_0x2b8b21(0xaf3)]();if(!_0x3364ce)return;_0x3364ce[_0x2b8b21(0x625)](_0x2b8b21(0xd04));}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x32b),_0x2ed75b=>{const _0x44bf41=_0x45cef8;if(!SceneManager[_0x44bf41(0xc83)]())return;VisuMZ[_0x44bf41(0x8b3)](_0x2ed75b,_0x2ed75b);const _0x1af3de=$gameTemp[_0x44bf41(0xaf3)](),_0x235304=_0x2ed75b[_0x44bf41(0x1f2)],_0x4dd46d=_0x2ed75b[_0x44bf41(0x357)];if(!_0x1af3de)return;BattleManager[_0x44bf41(0x4d6)]=_0x235304,BattleManager[_0x44bf41(0x244)]=BattleManager['_allTargets']?BattleManager['_allTargets'][BattleManager['_targetIndex']]||null:null,BattleManager[_0x44bf41(0x244)]&&_0x4dd46d[_0x44bf41(0x5d3)]()[_0x44bf41(0x7f3)]()!=='UNTITLED'&&_0x1af3de[_0x44bf41(0x408)]([_0x4dd46d]);}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x70d),_0x2f7cc3=>{const _0x21c52c=_0x45cef8;if(!SceneManager[_0x21c52c(0xc83)]())return;VisuMZ[_0x21c52c(0x8b3)](_0x2f7cc3,_0x2f7cc3);const _0x153e2f=$gameTemp[_0x21c52c(0xaf3)](),_0x21aabe=_0x2f7cc3[_0x21c52c(0x357)];if(!_0x153e2f)return;BattleManager['_targetIndex']++,BattleManager[_0x21c52c(0x244)]=BattleManager['_allTargets'][BattleManager[_0x21c52c(0x4d6)]]||null;if(BattleManager[_0x21c52c(0x244)]&&_0x21aabe[_0x21c52c(0x5d3)]()['trim']()!==_0x21c52c(0x391)){if(_0x21c52c(0x5a5)!=='wtmEP')_0x153e2f[_0x21c52c(0x408)]([_0x21aabe]);else{if(!_0x2a27a6[_0x21c52c(0x5cf)]()){const _0x4c1f41=_0x262419[_0x21c52c(0x556)](_0x3a50b4['x'],_0x24c345['y']);if(this[_0x21c52c(0x222)]&&this['_regionBattleback1'][_0x4c1f41])return this[_0x21c52c(0x222)][_0x4c1f41];}return _0x1c766d[_0x21c52c(0x6c0)]['Game_Map_battleback1Name']['call'](this);}}}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x494),_0x548030=>{const _0x1160f3=_0x45cef8;if(!SceneManager[_0x1160f3(0xc83)]())return;VisuMZ[_0x1160f3(0x8b3)](_0x548030,_0x548030);const _0x23b3cd=$gameTemp[_0x1160f3(0xaf3)](),_0x2724e4=_0x548030[_0x1160f3(0x357)];if(!_0x23b3cd)return;BattleManager[_0x1160f3(0x4d6)]--,BattleManager[_0x1160f3(0x244)]=BattleManager[_0x1160f3(0xca8)][BattleManager[_0x1160f3(0x4d6)]]||null,BattleManager['_target']&&_0x2724e4[_0x1160f3(0x5d3)]()[_0x1160f3(0x7f3)]()!==_0x1160f3(0x391)&&_0x23b3cd['command119']([_0x2724e4]);}),PluginManager['registerCommand'](pluginData[_0x45cef8(0xd00)],'ActSeq_Target_RandTarget',_0x2a9090=>{const _0x2299ce=_0x45cef8;if(!SceneManager[_0x2299ce(0xc83)]())return;VisuMZ['ConvertParams'](_0x2a9090,_0x2a9090);const _0x35d30d=$gameTemp[_0x2299ce(0xaf3)](),_0x4a0c70=_0x2a9090[_0x2299ce(0xc40)],_0x1ca29b=_0x2a9090['JumpToLabel'];if(!_0x35d30d)return;const _0x4d2bfb=BattleManager[_0x2299ce(0x4d6)];for(;;){if(_0x2299ce(0x8c5)===_0x2299ce(0x8c5)){BattleManager[_0x2299ce(0x4d6)]=Math[_0x2299ce(0xa4d)](BattleManager['_allTargets'][_0x2299ce(0xcc5)]);if(!_0x4a0c70)break;if(BattleManager[_0x2299ce(0x4d6)]!==_0x4d2bfb)break;if(BattleManager[_0x2299ce(0xca8)][_0x2299ce(0xcc5)]<=0x1){if(_0x2299ce(0x409)===_0x2299ce(0x5fc))_0x1ce985=_0x17499f;else{BattleManager[_0x2299ce(0x4d6)]=0x0;break;}}}else return this['basicGaugesY'](_0x51f7ae)-this[_0x2299ce(0x498)]();}BattleManager[_0x2299ce(0x244)]=BattleManager[_0x2299ce(0xca8)][BattleManager[_0x2299ce(0x4d6)]]||null,BattleManager[_0x2299ce(0x244)]&&_0x1ca29b['toUpperCase']()[_0x2299ce(0x7f3)]()!==_0x2299ce(0x391)&&(_0x2299ce(0x6a9)===_0x2299ce(0xc06)?this[_0x2299ce(0x320)][this[_0x2299ce(0xa45)]]=_0x2b8593:_0x35d30d[_0x2299ce(0x408)]([_0x1ca29b]));}),PluginManager['registerCommand'](pluginData['name'],_0x45cef8(0xae4),_0x54afcd=>{const _0x4127b6=_0x45cef8;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4127b6(0x8b3)](_0x54afcd,_0x54afcd);const _0x2343a8=VisuMZ[_0x4127b6(0xce7)](_0x54afcd[_0x4127b6(0x2d1)]);for(const _0x379454 of _0x2343a8){if(!_0x379454)continue;if(!_0x379454['isActor']())continue;_0x379454[_0x4127b6(0xa6e)]();}}),PluginManager[_0x45cef8(0x456)](pluginData['name'],'ActSeq_Weapon_NextActiveWeapon',_0xa86e4f=>{const _0x13156b=_0x45cef8;if(!SceneManager[_0x13156b(0xc83)]())return;VisuMZ[_0x13156b(0x8b3)](_0xa86e4f,_0xa86e4f);const _0x32ab33=$gameTemp[_0x13156b(0xaf3)]();let _0x6fbe02=![];const _0xf17a05=_0xa86e4f[_0x13156b(0x357)],_0x89f12d=VisuMZ['CreateActionSequenceTargets'](_0xa86e4f['Targets']);for(const _0x1a1202 of _0x89f12d){if(_0x13156b(0xb33)!=='nrMyd'){_0x2d9793['BattleCore']['Game_Action_itemEffectAddAttackState'][_0x13156b(0xa07)](this,_0x3f7bc7,_0x156543);if(!_0x431dc0[_0x13156b(0xc49)]())return;for(const _0x5debca of this[_0x13156b(0x289)]()[_0x13156b(0x26e)]()){if(_0x5debca===_0x2c9f8e[_0x13156b(0xa3c)]()){let _0x4e864d=_0x479733[_0x13156b(0x715)];_0x4e864d*=_0x38d08c['stateRate'](_0x5debca),_0x4e864d*=this['subject']()[_0x13156b(0xb7a)](_0x5debca),_0x4e864d*=this[_0x13156b(0x205)](_0x39d03b),_0xef2367['random']()<_0x4e864d&&(_0x2a8f97[_0x13156b(0x40d)]=!![],this[_0x13156b(0x2ea)](_0x4ebbb0));}}}else{if(!_0x1a1202)continue;if(!_0x1a1202['isActor']())continue;_0x1a1202[_0x13156b(0xc7b)]();if(_0x1a1202[_0x13156b(0x8f9)]()[_0x13156b(0xcc5)]>0x0)_0x6fbe02=!![];else{if(_0x13156b(0x2bd)!=='edXsE')return _0x27e77e[_0x13156b(0x6c0)][_0x13156b(0x658)][_0x13156b(0xc97)]['Shadow'];else _0x1a1202[_0x13156b(0xa6e)]();}}}_0x6fbe02&&_0xf17a05[_0x13156b(0x5d3)]()['trim']()!==_0x13156b(0x391)&&_0x32ab33[_0x13156b(0x408)]([_0xf17a05]);}),PluginManager[_0x45cef8(0x456)](pluginData['name'],_0x45cef8(0x63a),_0x4e7de6=>{const _0x5e2d29=_0x45cef8;if(!SceneManager[_0x5e2d29(0xc83)]())return;VisuMZ[_0x5e2d29(0x8b3)](_0x4e7de6,_0x4e7de6);let _0x10fe3a=_0x4e7de6[_0x5e2d29(0x2fd)];_0x10fe3a--,_0x10fe3a=Math['max'](_0x10fe3a,0x0);const _0x4f7157=VisuMZ[_0x5e2d29(0xce7)](_0x4e7de6[_0x5e2d29(0x2d1)]);for(const _0x425f2b of _0x4f7157){if(!_0x425f2b)continue;if(!_0x425f2b[_0x5e2d29(0x98a)]())continue;_0x425f2b[_0x5e2d29(0x5e7)](_0x10fe3a);}}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0xba8),_0x173077=>{const _0x51200d=_0x45cef8;if(!SceneManager[_0x51200d(0xc83)]())return;if(!Imported[_0x51200d(0xa9b)])return;VisuMZ[_0x51200d(0x8b3)](_0x173077,_0x173077);const _0x95ea88=$gameTemp['getLastPluginCommandInterpreter'](),_0x1e46fd=_0x173077[_0x51200d(0x226)];if(!_0x95ea88)return;$gameScreen[_0x51200d(0x4d5)](_0x173077[_0x51200d(0xc19)],_0x173077[_0x51200d(0x690)],_0x173077['EasingType']);if(_0x1e46fd)_0x95ea88['setWaitMode'](_0x51200d(0x71c));}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0xcfb),_0x2effb1=>{const _0x525e1e=_0x45cef8;if(!SceneManager[_0x525e1e(0xc83)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x525e1e(0x8b3)](_0x2effb1,_0x2effb1);const _0x3c3797=$gameTemp[_0x525e1e(0xaf3)](),_0x20414d=_0x2effb1[_0x525e1e(0x226)];if(!_0x3c3797)return;$gameScreen[_0x525e1e(0x4d5)](0x1,_0x2effb1[_0x525e1e(0x690)],_0x2effb1[_0x525e1e(0x94a)]);if(_0x20414d)_0x3c3797[_0x525e1e(0x625)](_0x525e1e(0x71c));}),PluginManager[_0x45cef8(0x456)](pluginData[_0x45cef8(0xd00)],_0x45cef8(0x1ff),_0x218e60=>{const _0x20ffd1=_0x45cef8;if(!SceneManager[_0x20ffd1(0xc83)]())return;if(!Imported[_0x20ffd1(0xa9b)])return;const _0xa7dc87=$gameTemp['getLastPluginCommandInterpreter']();if(!_0xa7dc87)return;_0xa7dc87['setWaitMode']('battleZoom');}),VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x924)]=Scene_Boot[_0x45cef8(0x3cf)][_0x45cef8(0x2aa)],Scene_Boot[_0x45cef8(0x3cf)][_0x45cef8(0x2aa)]=function(){const _0x1d06b1=_0x45cef8;this[_0x1d06b1(0x3d6)](),this[_0x1d06b1(0x221)](),this[_0x1d06b1(0xa3b)](),this['process_VisuMZ_BattleCore_CreateRegExp'](),VisuMZ[_0x1d06b1(0x6c0)][_0x1d06b1(0x924)][_0x1d06b1(0xa07)](this),this['process_VisuMZ_BattleCore_Notetags'](),this[_0x1d06b1(0xaa3)](),this[_0x1d06b1(0x618)](),this[_0x1d06b1(0x606)]();},Scene_Boot[_0x45cef8(0x3cf)][_0x45cef8(0x2ef)]=function(){const _0x50f90e=_0x45cef8;if(VisuMZ[_0x50f90e(0xade)])return;this[_0x50f90e(0xb61)](),this[_0x50f90e(0x519)](),this[_0x50f90e(0xaa4)]();},Scene_Boot[_0x45cef8(0x3cf)][_0x45cef8(0x3d6)]=function(){const _0x18c45d=_0x45cef8,_0x173284=$dataSystem[_0x18c45d(0xb2a)][_0x18c45d(0xcc5)];for(let _0x52b7ca=0x0;_0x52b7ca<_0x173284;_0x52b7ca++){const _0xcb9502=$dataSystem[_0x18c45d(0x96e)][_0x52b7ca];if(_0xcb9502)continue;$dataSystem['attackMotions'][_0x52b7ca]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot[_0x45cef8(0x3cf)][_0x45cef8(0x221)]=function(){const _0x151e2c=_0x45cef8,_0x2ae0cd=VisuMZ[_0x151e2c(0x6c0)][_0x151e2c(0x658)];_0x2ae0cd['Damage']['PopupPosition']===undefined&&(_0x151e2c(0x751)===_0x151e2c(0x74c)?[0x6c,0x198]['includes'](_0x5bf0dc[_0x151e2c(0xb78)])&&(_0x47bec3+='\x0a',_0x5bc843+=_0x1dfa82[_0x151e2c(0x827)][0x0]):_0x2ae0cd[_0x151e2c(0x28b)][_0x151e2c(0x6c5)]=_0x151e2c(0xcb3));_0x2ae0cd['Actor'][_0x151e2c(0xbe4)]===undefined&&(_0x2ae0cd[_0x151e2c(0x970)][_0x151e2c(0xbe4)]=![]);_0x2ae0cd[_0x151e2c(0xc97)][_0x151e2c(0xbe4)]===undefined&&(_0x2ae0cd['Enemy']['SmoothImage']=!![]);if(_0x2ae0cd[_0x151e2c(0x970)]['PrioritySortActive']===undefined){if(_0x151e2c(0x217)!=='CoSoz'){if([0x6c,0x198][_0x151e2c(0x2b1)](_0x1ccc13[_0x151e2c(0xb78)])){const _0x4faf61=_0x8b7dc1[_0x151e2c(0x827)][0x0];if(_0x4faf61['match'](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}else _0x2ae0cd['Actor'][_0x151e2c(0x9b3)]=![];}_0x2ae0cd[_0x151e2c(0x970)][_0x151e2c(0x9b8)]===undefined&&(_0x2ae0cd[_0x151e2c(0x970)]['PrioritySortActors']=!![]);},VisuMZ['DamageStyles']={},Scene_Boot[_0x45cef8(0x3cf)][_0x45cef8(0xa3b)]=function(){const _0x1609cd=_0x45cef8;for(const _0x2eebae of VisuMZ[_0x1609cd(0x6c0)][_0x1609cd(0x658)]['Damage'][_0x1609cd(0x64c)]){if(!_0x2eebae)continue;const _0x54b336=_0x2eebae[_0x1609cd(0xb21)][_0x1609cd(0x5d3)]()[_0x1609cd(0x7f3)]();VisuMZ['DamageStyles'][_0x54b336]=_0x2eebae;}},VisuMZ['BattleCore'][_0x45cef8(0x32d)]={},Scene_Boot['prototype'][_0x45cef8(0x683)]=function(){const _0x353b15=_0x45cef8,_0xc09dd2=VisuMZ['BattleCore'][_0x353b15(0x32d)],_0x3f3037=_0x353b15(0xb9e),_0x4cff13=[[_0x353b15(0x3bc),_0x353b15(0x52c)],[_0x353b15(0x7e6),_0x353b15(0x57c)]],_0x1b645d=[[_0x353b15(0x64e),_0x353b15(0x447)],['%1Damage%2JS',_0x353b15(0x6cd)]],_0x35ba74=[['',''],[_0x353b15(0x73e),_0x353b15(0xae5)],[_0x353b15(0xbb6),'AS\x20TARGET']];for(const _0x421ab0 of _0x1b645d){if(_0x353b15(0x8ad)!==_0x353b15(0x8ad)){if(this[_0x353b15(0xc74)]())this[_0x353b15(0x66c)]='turn';else this[_0x353b15(0x2ed)][_0x353b15(0xcc5)]>0x0?this[_0x353b15(0x66c)]='turn':this[_0x353b15(0x4e9)]();}else for(const _0x5d13cd of _0x35ba74){for(const _0x3eb56d of _0x4cff13){const _0x17f637=_0x421ab0[0x0]['format'](_0x3eb56d[0x0],_0x5d13cd[0x0]),_0x49f07b=_0x421ab0[0x1][_0x353b15(0x9ec)](_0x3eb56d[0x1],_0x5d13cd[0x1])['trim'](),_0x1a1c4b=new RegExp(_0x3f3037[_0x353b15(0x9ec)](_0x49f07b),'i');_0xc09dd2[_0x17f637]=_0x1a1c4b;}}}const _0x2b9e3b=[[_0x353b15(0xa18),_0x353b15(0x6e2)],[_0x353b15(0x6df),_0x353b15(0x66d)]];for(const _0x4e6cc4 of _0x2b9e3b){if(_0x353b15(0x592)===_0x353b15(0x8d8)){if(this[_0x353b15(0xc7f)][_0x353b15(0x6a6)](_0x596742=>_0x596742[_0x353b15(0x3a4)]()&&_0x596742[_0x353b15(0xa88)]()))return!![];}else for(const _0x3f9eba of _0x4cff13){const _0xce52f7=_0x4e6cc4[0x0][_0x353b15(0x9ec)](_0x3f9eba[0x0]),_0x14920f=_0x4e6cc4[0x1][_0x353b15(0x9ec)](_0x3f9eba[0x1]),_0x2c8a9b=new RegExp(_0x3f3037['format'](_0x14920f),'i');_0xc09dd2[_0xce52f7]=_0x2c8a9b;}}const _0x5080e4=[['%1StartBattleJS',_0x353b15(0x99e)],[_0x353b15(0xcca),'JS\x20%1END\x20BATTLE'],[_0x353b15(0xcdf),_0x353b15(0xce1)],[_0x353b15(0xa1b),_0x353b15(0x4b7)],[_0x353b15(0x881),_0x353b15(0x54f)],[_0x353b15(0x9d2),'JS\x20ESCAPE\x20FAILURE'],[_0x353b15(0x6ed),_0x353b15(0x57a)],[_0x353b15(0x8a9),_0x353b15(0xc67)],[_0x353b15(0x261),'JS\x20%1REGENERATE']];for(const _0x1ecf5d of _0x5080e4){if(_0x353b15(0x5aa)===_0x353b15(0x479)){if(!_0x413dd1[_0x353b15(0x9e2)])return;if(!_0x42a2ea[_0x353b15(0x9e2)][_0x353b15(0x78d)])return;if(!_0x39bb3b[_0x353b15(0x22d)])return;_0x382f69[_0x353b15(0x8b3)](_0x3b3f99,_0x2368e2);const _0x358029=_0x50a060[_0x353b15(0xaf3)](),_0x25a32e=_0x40ad9e['round'](_0x3a50d0[_0x353b15(0xc95)]),_0x4a7c21=_0xd62700[_0x353b15(0x365)](_0x57bad9[_0x353b15(0x31b)]);_0xa99d1a[_0x353b15(0x242)](_0x25a32e,_0x4a7c21,_0x2cdf7d[_0x353b15(0x871)],_0x4099f3[_0x353b15(0xc9b)],_0x4c555f['Mute']),_0x512d9b[_0x353b15(0x8a6)]&&_0x358029&&(_0x4b581d[_0x353b15(0x9e2)][_0x353b15(0x78d)][_0x353b15(0x43a)](),_0x358029['setWaitMode'](_0x353b15(0x227)));}else for(const _0x5383f7 of _0x4cff13){if(_0x353b15(0x594)===_0x353b15(0x594)){const _0x10921e=_0x1ecf5d[0x0][_0x353b15(0x9ec)](_0x5383f7[0x0]),_0x4d2334=_0x1ecf5d[0x1][_0x353b15(0x9ec)](_0x5383f7[0x1]),_0x3cebea=new RegExp(_0x3f3037[_0x353b15(0x9ec)](_0x4d2334),'i');_0xc09dd2[_0x10921e]=_0x3cebea;}else _0x866844[_0x353b15(0x6c0)][_0x353b15(0xb23)]['call'](this);}}},Scene_Boot[_0x45cef8(0x3cf)][_0x45cef8(0xb61)]=function(){const _0x2faf36=_0x45cef8,_0x1b328c=$dataSkills[_0x2faf36(0x9f7)]($dataItems);for(const _0x2058bc of _0x1b328c){if(_0x2faf36(0x294)!==_0x2faf36(0x9a2)){if(!_0x2058bc)continue;VisuMZ[_0x2faf36(0x6c0)][_0x2faf36(0xc2d)](_0x2058bc);}else _0x580df4('%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.'[_0x2faf36(0x9ec)](_0x5cf6ae,_0x1f9b2d)),_0x412bb3[_0x2faf36(0xa50)]();}},Scene_Boot[_0x45cef8(0x3cf)][_0x45cef8(0x519)]=function(){const _0x892582=_0x45cef8,_0x21af2d=$dataActors[_0x892582(0x9f7)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0xe65ce2 of _0x21af2d){if(!_0xe65ce2)continue;VisuMZ[_0x892582(0x6c0)][_0x892582(0x6f8)](_0xe65ce2);}},Scene_Boot[_0x45cef8(0x3cf)][_0x45cef8(0xaa3)]=function(){const _0x30505b=_0x45cef8,_0x19818e=VisuMZ['BattleCore']['Settings']['Mechanics'][_0x30505b(0x5a0)],_0x41a66b=[];for(const _0x3cfb45 of _0x19818e){if(_0x30505b(0x771)!==_0x30505b(0x771)){const _0x249661=_0x4ad8d5['_actionInputIndex'];_0x188758[_0x30505b(0xc7f)][_0x249661]=new _0x478046(_0x48b2aa);}else{const _0x5dfd84=$dataTroops[_0x3cfb45];if(_0x5dfd84)_0x41a66b[_0x30505b(0x287)](JsonEx[_0x30505b(0x5bf)](_0x5dfd84));}}for(const _0x1d56e3 of $dataTroops){if(_0x30505b(0x873)!==_0x30505b(0x64f)){if(!_0x1d56e3)continue;for(const _0x14052d of _0x41a66b){if(_0x14052d['id']===_0x1d56e3['id'])continue;_0x1d56e3[_0x30505b(0x6c2)]=_0x1d56e3[_0x30505b(0x6c2)][_0x30505b(0x9f7)](_0x14052d[_0x30505b(0x6c2)]);}}else for(const _0x5bfd96 of _0x3bcedd){const _0x5189ff=_0x4aafab[0x0][_0x30505b(0x9ec)](_0x5bfd96[0x0]),_0x33f5cd=_0x50e73a[0x1][_0x30505b(0x9ec)](_0x5bfd96[0x1]),_0x270f8f=new _0x217986(_0x42715d[_0x30505b(0x9ec)](_0x33f5cd),'i');_0x987d5[_0x5189ff]=_0x270f8f;}}},Scene_Boot[_0x45cef8(0x3cf)][_0x45cef8(0x618)]=function(){const _0x479749=_0x45cef8,_0x4d27c3=VisuMZ[_0x479749(0x6c0)][_0x479749(0x658)][_0x479749(0xb34)];if(_0x4d27c3[_0x479749(0x969)]>0x0&&$dataCommonEvents[_0x4d27c3[_0x479749(0x969)]]){const _0x4257a0=$dataCommonEvents[_0x4d27c3['BattleStartEvent']],_0x4b39f8=_0x4257a0[_0x479749(0xa0f)]['length']-0x2,_0x593977=_0x4257a0[_0x479749(0xa0f)][_0x4b39f8];if(_0x593977&&_0x593977['code']!==0xe6){const _0x250cd7={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0xf8395d=_0x4257a0[_0x479749(0xa0f)][_0x479749(0x788)]();_0x4257a0[_0x479749(0xa0f)][_0x479749(0x83c)](_0x250cd7),_0x4257a0[_0x479749(0xa0f)][_0x479749(0x83c)](_0xf8395d);}}},Scene_Boot['prototype'][_0x45cef8(0x606)]=function(){const _0x485b91=_0x45cef8;VisuMZ[_0x485b91(0x6c0)][_0x485b91(0xad7)](),VisuMZ['BattleCore'][_0x485b91(0x566)]($dataSkills),VisuMZ[_0x485b91(0x6c0)][_0x485b91(0x566)]($dataItems);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xad7)]=function(){const _0x29a230=_0x45cef8;VisuMZ[_0x29a230(0x6c0)][_0x29a230(0x9c4)]={};for(const _0x108c86 of $dataCommonEvents){if('mKAun'===_0x29a230(0x500))return _0x23e983[_0x29a230(0x56d)]();else{if(!_0x108c86)continue;if(_0x108c86[_0x29a230(0xd00)][_0x29a230(0x291)](/\[(.*)\]/i)){let _0x2fe0b1=String(RegExp['$1'])[_0x29a230(0x332)](/,/g,'')[_0x29a230(0x5d3)]()[_0x29a230(0x7f3)]();VisuMZ[_0x29a230(0x6c0)][_0x29a230(0x9c4)][_0x2fe0b1]=_0x108c86['id'];}}}},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x566)]=function(_0x438c2e){const _0xc5fa2e=_0x45cef8;for(const _0x34813e of _0x438c2e){if(!_0x34813e)continue;VisuMZ[_0xc5fa2e(0x6c0)][_0xc5fa2e(0x992)](_0x34813e);}},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x992)]=function(_0x301efe){const _0x3fe925=_0x45cef8;if(!_0x301efe)return;if(!_0x301efe['effects'])return;VisuMZ['BattleCore']['_commonEventKey']=VisuMZ[_0x3fe925(0x6c0)][_0x3fe925(0x9c4)]||{};const _0x3072b6=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x3b78b1=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x3468ec=[];const _0xd99043=_0x301efe[_0x3fe925(0xbfd)][_0x3fe925(0x291)](_0x3072b6);if(_0xd99043){if(_0x3fe925(0xbac)!==_0x3fe925(0x495)){for(const _0x51ea8f of _0xd99043){_0x51ea8f['match'](_0x3072b6);const _0x257baa=String(RegExp['$1'])[_0x3fe925(0x7e0)](',')[_0x3fe925(0x4a9)](_0x3803b5=>String(_0x3803b5)[_0x3fe925(0x5d3)]()[_0x3fe925(0x7f3)]());_0x3468ec=_0x3468ec[_0x3fe925(0x9f7)](_0x257baa);}!_0x301efe[_0x3fe925(0xbfd)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x301efe[_0x3fe925(0xbfd)]+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}else!this[_0x3fe925(0x266)][_0x3fe925(0xba4)]()&&this['endAction']();}if(_0x301efe[_0x3fe925(0xbfd)]['match'](_0x3b78b1)){if('ayPGO'!==_0x3fe925(0x8f3)){const _0x4d4612=String(RegExp['$1'])[_0x3fe925(0x7e0)](/[\r\n]+/)[_0x3fe925(0x4a9)](_0x2dfee4=>String(_0x2dfee4)[_0x3fe925(0x5d3)]()[_0x3fe925(0x7f3)]());_0x3468ec=_0x3468ec[_0x3fe925(0x9f7)](_0x4d4612);!_0x301efe['note']['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x301efe[_0x3fe925(0xbfd)]+=_0x3fe925(0xbe0));;}else{if(this[_0x3fe925(0x4f6)]<=0x0)return;const _0x643b08=this[_0x3fe925(0x4f6)],_0x42dbab=this[_0x3fe925(0xb14)],_0x12c9b3=this['_floatEasing'];_0x103034[_0x3fe925(0x22d)]?this[_0x3fe925(0x397)]=this[_0x3fe925(0x25c)](this[_0x3fe925(0x397)],this['_targetFloatHeight'],_0x643b08,_0x42dbab,_0x12c9b3):this[_0x3fe925(0x397)]=(this['_floatHeight']*(_0x643b08-0x1)+this[_0x3fe925(0x6e3)])/_0x643b08;this['_floatDuration']--;if(this[_0x3fe925(0x4f6)]<=0x0)this[_0x3fe925(0x830)]();}}for(const _0x154004 of _0x3468ec){if(_0x3fe925(0x3bd)===_0x3fe925(0x3bd)){if(VisuMZ['BattleCore'][_0x3fe925(0x9c4)][_0x154004]){if(_0x3fe925(0xaad)==='PICvk'){const _0x5349ff=VisuMZ['BattleCore'][_0x3fe925(0x9c4)][_0x154004],_0x47ce84={'code':0x2c,'dataId':_0x5349ff,'value1':0x1,'value2':0x0};_0x301efe[_0x3fe925(0x497)][_0x3fe925(0x287)](_0x47ce84);}else return _0x2eb2df['BattleCore'][_0x3fe925(0x617)][_0x3fe925(0xa07)](this);}}else return _0x37b68e[_0x3fe925(0x214)]();}},Scene_Boot['prototype'][_0x45cef8(0xaa4)]=function(){const _0x2851ff=_0x45cef8,_0x5bc338=$dataSkills['concat']($dataItems);for(const _0x5f3791 of _0x5bc338){if(!_0x5f3791)continue;VisuMZ[_0x2851ff(0x6c0)]['Parse_Notetags_Targets'](_0x5f3791);}},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x9fc)]=VisuMZ[_0x45cef8(0x9fc)],VisuMZ[_0x45cef8(0x9fc)]=function(_0x516610){const _0x55bfc4=_0x45cef8;VisuMZ[_0x55bfc4(0x6c0)][_0x55bfc4(0x9fc)]&&VisuMZ[_0x55bfc4(0x6c0)][_0x55bfc4(0x9fc)]['call'](this,_0x516610),VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x516610);},VisuMZ[_0x45cef8(0x6c0)]['ParseClassNotetags']=VisuMZ[_0x45cef8(0x95d)],VisuMZ[_0x45cef8(0x95d)]=function(_0x5dcd26){const _0x5cc647=_0x45cef8;if(VisuMZ[_0x5cc647(0x6c0)][_0x5cc647(0x95d)]){if(_0x5cc647(0x4ae)===_0x5cc647(0x8e8)){if(this[_0x5cc647(0x8e2)]===_0x529680)return;this[_0x5cc647(0x9f5)](),this[_0x5cc647(0xb85)]();}else VisuMZ[_0x5cc647(0x6c0)]['ParseClassNotetags'][_0x5cc647(0xa07)](this,_0x5dcd26);}VisuMZ[_0x5cc647(0x6c0)]['Parse_Notetags_TraitObjects'](_0x5dcd26);},VisuMZ['BattleCore'][_0x45cef8(0x7c3)]=VisuMZ[_0x45cef8(0x7c3)],VisuMZ[_0x45cef8(0x7c3)]=function(_0x32c7ae){const _0x392313=_0x45cef8;VisuMZ[_0x392313(0x6c0)]['ParseSkillNotetags']&&VisuMZ[_0x392313(0x6c0)][_0x392313(0x7c3)][_0x392313(0xa07)](this,_0x32c7ae),VisuMZ['BattleCore'][_0x392313(0xc2d)](_0x32c7ae),VisuMZ['BattleCore'][_0x392313(0x8ef)](_0x32c7ae);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x299)]=VisuMZ[_0x45cef8(0x299)],VisuMZ['ParseItemNotetags']=function(_0x36836b){const _0x1f4b30=_0x45cef8;VisuMZ['BattleCore'][_0x1f4b30(0x299)]&&('Evice'!=='uoUps'?VisuMZ['BattleCore'][_0x1f4b30(0x299)][_0x1f4b30(0xa07)](this,_0x36836b):(this[_0x1f4b30(0x339)](),this[_0x1f4b30(0x605)]())),VisuMZ[_0x1f4b30(0x6c0)][_0x1f4b30(0xc2d)](_0x36836b),VisuMZ['BattleCore'][_0x1f4b30(0x8ef)](_0x36836b);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x419)]=VisuMZ[_0x45cef8(0x419)],VisuMZ['ParseWeaponNotetags']=function(_0x5114b7){const _0x47ac9c=_0x45cef8;VisuMZ[_0x47ac9c(0x6c0)][_0x47ac9c(0x419)]&&(_0x47ac9c(0x99d)===_0x47ac9c(0x838)?_0x1dbec1['setValue'](_0x411491[_0x47ac9c(0xa1c)],!![]):VisuMZ['BattleCore']['ParseWeaponNotetags'][_0x47ac9c(0xa07)](this,_0x5114b7)),VisuMZ['BattleCore'][_0x47ac9c(0x6f8)](_0x5114b7);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xacf)]=VisuMZ[_0x45cef8(0xacf)],VisuMZ[_0x45cef8(0xacf)]=function(_0x1ae8f7){const _0x44eb23=_0x45cef8;VisuMZ[_0x44eb23(0x6c0)][_0x44eb23(0xacf)]&&VisuMZ[_0x44eb23(0x6c0)]['ParseArmorNotetags'][_0x44eb23(0xa07)](this,_0x1ae8f7),VisuMZ[_0x44eb23(0x6c0)][_0x44eb23(0x6f8)](_0x1ae8f7);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xa0b)]=VisuMZ[_0x45cef8(0xa0b)],VisuMZ[_0x45cef8(0xa0b)]=function(_0x208c90){const _0x2aa22a=_0x45cef8;if(VisuMZ[_0x2aa22a(0x6c0)][_0x2aa22a(0xa0b)]){if('CQPjo'===_0x2aa22a(0x729)){return _0x1cec3e[_0x2aa22a(0x6c0)]['Game_Actor_makeActionList']['call'](this);;}else VisuMZ[_0x2aa22a(0x6c0)][_0x2aa22a(0xa0b)][_0x2aa22a(0xa07)](this,_0x208c90);}VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x208c90);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x260)]=VisuMZ[_0x45cef8(0x260)],VisuMZ[_0x45cef8(0x260)]=function(_0x4b9f29){const _0x16a8c5=_0x45cef8;if(VisuMZ['BattleCore']['ParseStateNotetags']){if(_0x16a8c5(0x27d)!=='rJXMr'){_0x2d33cd['changeAtbCastTime'](_0x2997e5);if(_0x43023f)_0x22bc3b[_0x16a8c5(0x862)]();}else VisuMZ[_0x16a8c5(0x6c0)][_0x16a8c5(0x260)][_0x16a8c5(0xa07)](this,_0x4b9f29);}VisuMZ[_0x16a8c5(0x6c0)][_0x16a8c5(0x6f8)](_0x4b9f29);},VisuMZ['BattleCore'][_0x45cef8(0xc2d)]=function(_0x20fa44){const _0x363b9b=_0x45cef8,_0x313e8a=[_0x363b9b(0x1f3),_0x363b9b(0x401),_0x363b9b(0x7cf),_0x363b9b(0x563),_0x363b9b(0xbc3),_0x363b9b(0x9e9),_0x363b9b(0x5f9),_0x363b9b(0x60e)];for(const _0x3510e7 of _0x313e8a){VisuMZ[_0x363b9b(0x6c0)][_0x363b9b(0x8da)](_0x20fa44,_0x3510e7);}const _0x1ae878=_0x20fa44[_0x363b9b(0xbfd)];_0x1ae878['match'](/<ALWAYS CRITICAL/i)&&('WkwIg'==='iwvNH'?this[_0x363b9b(0x231)]()[_0x363b9b(0x5f7)]():_0x20fa44['damage'][_0x363b9b(0x766)]=!![]),_0x1ae878[_0x363b9b(0x291)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x363b9b(0x4a2)!=='nrpBA'?_0x20fa44[_0x363b9b(0xb84)]=Math[_0x363b9b(0x2ce)](0x1,Number(RegExp['$1'])):_0x90c7f3[_0x363b9b(0xa04)]=_0x7035b2[_0x363b9b(0x4d4)]()),_0x1ae878[_0x363b9b(0x291)](/<TARGET:[ ](.*)>/i)&&(_0x20fa44['scope']=String(RegExp['$1'])['toUpperCase']()[_0x363b9b(0x7f3)]());},VisuMZ['BattleCore'][_0x45cef8(0x6f8)]=function(_0x348942){const _0x3cab4=_0x45cef8,_0xdab6e=[_0x3cab4(0x36f),_0x3cab4(0x836),_0x3cab4(0x6f4),'PostDamageAsUserJS',_0x3cab4(0x216),_0x3cab4(0x97c),_0x3cab4(0xd0f),'PostDamageAsTargetJS',_0x3cab4(0xbc3),_0x3cab4(0x9e9),_0x3cab4(0x5f9),_0x3cab4(0x60e),'PreStartBattleJS',_0x3cab4(0xc2f),'PreEndBattleJS',_0x3cab4(0x77e),_0x3cab4(0xcdf),_0x3cab4(0xa1b),_0x3cab4(0x881),'EscapeFailureJS',_0x3cab4(0x493),_0x3cab4(0xa5a),_0x3cab4(0x41a),_0x3cab4(0x626),'PreRegenerateJS','PostRegenerateJS'];for(const _0x50d2da of _0xdab6e){VisuMZ['BattleCore'][_0x3cab4(0x8da)](_0x348942,_0x50d2da);}},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x8ef)]=function(_0x915332){const _0x1ef858=_0x45cef8,_0x4c8329=_0x915332[_0x1ef858(0xbfd)];if(_0x4c8329[_0x1ef858(0x291)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){if(_0x1ef858(0x7c5)!==_0x1ef858(0x8d2)){const _0x46e043=String(RegExp['$1']),_0x36cb15=VisuMZ['BattleCore'][_0x1ef858(0x554)](_0x915332,'Targets');VisuMZ[_0x1ef858(0x6c0)][_0x1ef858(0x97a)](_0x46e043,_0x36cb15);}else this[_0x1ef858(0x369)]=(this[_0x1ef858(0x369)]+0x1)%0x4;}if(_0x4c8329[_0x1ef858(0x291)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x131e2f=String(RegExp['$1']),_0xd884e6=VisuMZ[_0x1ef858(0x6c0)]['createKeyJS'](_0x915332,_0x1ef858(0x23c));VisuMZ[_0x1ef858(0x6c0)][_0x1ef858(0x845)](_0x131e2f,_0xd884e6);}},VisuMZ['BattleCore']['JS']={},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x8da)]=function(_0x37d655,_0x599dbf){const _0x133591=_0x45cef8,_0x2e8a97=_0x37d655[_0x133591(0xbfd)];if(_0x2e8a97['match'](VisuMZ[_0x133591(0x6c0)][_0x133591(0x32d)][_0x599dbf])){const _0x2fbb8f=RegExp['$1'],_0x238d02=_0x133591(0x3dd)[_0x133591(0x9ec)](_0x2fbb8f),_0x3e80b7=VisuMZ[_0x133591(0x6c0)][_0x133591(0x554)](_0x37d655,_0x599dbf);VisuMZ[_0x133591(0x6c0)]['JS'][_0x3e80b7]=new Function(_0x238d02);}},VisuMZ['BattleCore'][_0x45cef8(0x554)]=function(_0xbebd74,_0x1f19ff){const _0x5b25a2=_0x45cef8;if(VisuMZ['createKeyJS'])return VisuMZ[_0x5b25a2(0x554)](_0xbebd74,_0x1f19ff);let _0x3f26bf='';if($dataActors[_0x5b25a2(0x2b1)](_0xbebd74))_0x3f26bf='Actor-%1-%2'[_0x5b25a2(0x9ec)](_0xbebd74['id'],_0x1f19ff);if($dataClasses[_0x5b25a2(0x2b1)](_0xbebd74))_0x3f26bf='Class-%1-%2'[_0x5b25a2(0x9ec)](_0xbebd74['id'],_0x1f19ff);if($dataSkills[_0x5b25a2(0x2b1)](_0xbebd74))_0x3f26bf='Skill-%1-%2'[_0x5b25a2(0x9ec)](_0xbebd74['id'],_0x1f19ff);if($dataItems[_0x5b25a2(0x2b1)](_0xbebd74))_0x3f26bf=_0x5b25a2(0x868)[_0x5b25a2(0x9ec)](_0xbebd74['id'],_0x1f19ff);if($dataWeapons['includes'](_0xbebd74))_0x3f26bf=_0x5b25a2(0xb05)[_0x5b25a2(0x9ec)](_0xbebd74['id'],_0x1f19ff);if($dataArmors[_0x5b25a2(0x2b1)](_0xbebd74))_0x3f26bf=_0x5b25a2(0x3b3)[_0x5b25a2(0x9ec)](_0xbebd74['id'],_0x1f19ff);if($dataEnemies['includes'](_0xbebd74))_0x3f26bf=_0x5b25a2(0x354)['format'](_0xbebd74['id'],_0x1f19ff);if($dataStates[_0x5b25a2(0x2b1)](_0xbebd74))_0x3f26bf='State-%1-%2'[_0x5b25a2(0x9ec)](_0xbebd74['id'],_0x1f19ff);return _0x3f26bf;},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x97a)]=function(_0x598c7e,_0x5eb877){const _0x1d9d6e=_0x45cef8,_0x5b8445=_0x1d9d6e(0x2a0)[_0x1d9d6e(0x9ec)](_0x598c7e);VisuMZ['BattleCore']['JS'][_0x5eb877]=new Function(_0x5b8445);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x845)]=function(_0x34ed2e,_0x35b883){const _0x358d79=_0x45cef8,_0x5c01af=_0x358d79(0x9ad)[_0x358d79(0x9ec)](_0x34ed2e);VisuMZ[_0x358d79(0x6c0)]['JS'][_0x35b883]=new Function(_0x5c01af);},TextManager[_0x45cef8(0x506)]=VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x658)][_0x45cef8(0x8f7)][_0x45cef8(0xcbd)],TextManager[_0x45cef8(0xba2)]=VisuMZ[_0x45cef8(0x6c0)]['Settings'][_0x45cef8(0x3a6)][_0x45cef8(0x539)],TextManager[_0x45cef8(0xbbc)]=VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x658)][_0x45cef8(0x3a6)]['StyleName'],TextManager[_0x45cef8(0x39d)]=VisuMZ[_0x45cef8(0x6c0)]['Settings'][_0x45cef8(0x933)][_0x45cef8(0xb21)],ColorManager[_0x45cef8(0xc44)]=function(_0x3c67f1){const _0x7e38da=_0x45cef8;return _0x3c67f1=String(_0x3c67f1),_0x3c67f1['match'](/#(.*)/i)?_0x7e38da(0x8f5)[_0x7e38da(0x9ec)](String(RegExp['$1'])):this[_0x7e38da(0x73f)](Number(_0x3c67f1));},DataManager[_0x45cef8(0x1ee)]=function(_0x160ae9){const _0x1c27a1=_0x45cef8;if(_0x160ae9[_0x1c27a1(0xbfd)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){if(_0x1c27a1(0x82f)!==_0x1c27a1(0x82f))return _0x5063[_0x1c27a1(0x6c0)][_0x1c27a1(0x462)][_0x1c27a1(0xa07)](this,_0x3ca167);else{const _0x3725e3=String(RegExp['$1'])[_0x1c27a1(0x5d3)]()['trim']();if(_0x3725e3===_0x1c27a1(0x809))return _0x1c27a1(0x809);if(VisuMZ['DamageStyles'][_0x3725e3])return _0x3725e3;}}const _0x5a60a6=VisuMZ['BattleCore'][_0x1c27a1(0x658)][_0x1c27a1(0x28b)][_0x1c27a1(0x902)]['toUpperCase']()[_0x1c27a1(0x7f3)]();if(VisuMZ[_0x1c27a1(0xa6b)][_0x5a60a6])return _0x5a60a6;return _0x1c27a1(0x809);},DataManager[_0x45cef8(0xa8e)]=function(_0x18a8cd){const _0x3c8e9d=_0x45cef8;_0x18a8cd=_0x18a8cd[_0x3c8e9d(0x5d3)]()[_0x3c8e9d(0x7f3)](),this[_0x3c8e9d(0x27c)]=this[_0x3c8e9d(0x27c)]||{};if(this[_0x3c8e9d(0x27c)][_0x18a8cd])return this[_0x3c8e9d(0x27c)][_0x18a8cd];for(let _0x3e734b=0x1;_0x3e734b<0x64;_0x3e734b++){if(!$dataSystem[_0x3c8e9d(0xbda)][_0x3e734b])continue;let _0x1a0a09=$dataSystem[_0x3c8e9d(0xbda)][_0x3e734b][_0x3c8e9d(0x5d3)]()[_0x3c8e9d(0x7f3)]();_0x1a0a09=_0x1a0a09[_0x3c8e9d(0x332)](/\x1I\[(\d+)\]/gi,''),_0x1a0a09=_0x1a0a09[_0x3c8e9d(0x332)](/\\I\[(\d+)\]/gi,''),this['_stypeIDs'][_0x1a0a09]=_0x3e734b;}return this[_0x3c8e9d(0x27c)][_0x18a8cd]||0x0;},DataManager[_0x45cef8(0x533)]=function(_0x1b13dc){const _0x11dffe=_0x45cef8;_0x1b13dc=_0x1b13dc[_0x11dffe(0x5d3)]()['trim'](),this['_skillIDs']=this[_0x11dffe(0xa36)]||{};if(this['_skillIDs'][_0x1b13dc])return this[_0x11dffe(0xa36)][_0x1b13dc];for(const _0x2334b2 of $dataSkills){if(_0x11dffe(0xb36)!=='ohFiv'){if(!_0x2334b2)continue;this[_0x11dffe(0xa36)][_0x2334b2['name']['toUpperCase']()[_0x11dffe(0x7f3)]()]=_0x2334b2['id'];}else _0x3b7e35=_0x59d449>=_0x4c39b?_0x220a78:_0x51040c;}return this[_0x11dffe(0xa36)][_0x1b13dc]||0x0;},DataManager[_0x45cef8(0xc62)]=function(_0xca7174){const _0x4c106b=_0x45cef8;_0xca7174=_0xca7174[_0x4c106b(0x5d3)]()[_0x4c106b(0x7f3)](),this['_enemyIDs']=this[_0x4c106b(0x34d)]||{};if(this[_0x4c106b(0x34d)][_0xca7174])return this[_0x4c106b(0x34d)][_0xca7174];for(const _0x3d8e1a of $dataEnemies){if(!_0x3d8e1a)continue;this[_0x4c106b(0x34d)][_0x3d8e1a[_0x4c106b(0xd00)][_0x4c106b(0x5d3)]()['trim']()]=_0x3d8e1a['id'];}return this['_enemyIDs'][_0xca7174]||0x0;},DataManager[_0x45cef8(0x590)]=function(_0x40bc1b){const _0x1f2a5b=_0x45cef8;_0x40bc1b=_0x40bc1b[_0x1f2a5b(0x5d3)]()[_0x1f2a5b(0x7f3)](),this[_0x1f2a5b(0x8dd)]=this[_0x1f2a5b(0x8dd)]||{};if(this[_0x1f2a5b(0x8dd)][_0x40bc1b])return this[_0x1f2a5b(0x8dd)][_0x40bc1b];for(let _0x34748d=0x1;_0x34748d<0x64;_0x34748d++){if('Cppml'!=='Cppml'){const _0x5586df=this['_commandNameWindow'],_0x55e67a=_0x524491[_0x1f2a5b(0x916)](),_0x2cf55a=_0x182be3['x']+_0x1affff[_0x1f2a5b(0x74d)](_0x470a9c[_0x1f2a5b(0x639)]/0x2)+_0x55e67a;_0x5586df['x']=_0x5586df[_0x1f2a5b(0x639)]/-0x2+_0x2cf55a,_0x5586df['y']=_0x52725c[_0x1f2a5b(0x74d)](_0x205f1e[_0x1f2a5b(0xa2a)]/0x2);}else{if(!$dataSystem[_0x1f2a5b(0xb2a)][_0x34748d])continue;let _0x53e086=$dataSystem['weaponTypes'][_0x34748d]['toUpperCase']()[_0x1f2a5b(0x7f3)]();_0x53e086=_0x53e086[_0x1f2a5b(0x332)](/\x1I\[(\d+)\]/gi,''),_0x53e086=_0x53e086[_0x1f2a5b(0x332)](/\\I\[(\d+)\]/gi,''),this[_0x1f2a5b(0x8dd)][_0x53e086]=_0x34748d;}}return this['_wtypeIDs'][_0x1f2a5b(0xbc9)]=0x0,this[_0x1f2a5b(0x8dd)][_0x40bc1b]||0x0;},DataManager[_0x45cef8(0x7d7)]=function(_0x2db674){const _0x7b89d=_0x45cef8,_0x937dd8=_0x7b89d(0x3d9);let _0x50ee2b=_0x2db674[_0x7b89d(0x9e3)],_0x2bd629=_0x2db674[_0x7b89d(0xd00)];const _0x2db1d6=_0x2db674[_0x7b89d(0xbfd)];_0x2db1d6[_0x7b89d(0x291)](/<DISPLAY ICON: (\d+)>/i)&&('ipnYd'!==_0x7b89d(0xb55)?_0x50ee2b=Number(RegExp['$1']):this[_0x7b89d(0x800)]());if(_0x2db1d6[_0x7b89d(0x291)](/<DISPLAY TEXT: (.*)>/i)){if('fAXTZ'!=='fQHKz')_0x2bd629=String(RegExp['$1']);else{if(_0x220fc0[_0x7b89d(0x463)]()[_0x7b89d(0xbaa)]>0x0)return!![];this[_0x7b89d(0x581)]='';}}return _0x937dd8['format'](_0x50ee2b,_0x2bd629);},DataManager[_0x45cef8(0x7ef)]=function(_0x131617){const _0xc579a1=_0x45cef8;return _0x131617[_0xc579a1(0xbfd)][_0xc579a1(0x291)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x131617['name'];},DataManager[_0x45cef8(0x4ed)]=function(_0x494605){const _0x2295ce=_0x45cef8;return _0x494605[_0x2295ce(0xbfd)]['match'](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x494605[_0x2295ce(0x9e3)];},DataManager['swapEnemyIDs']=function(_0x1661b3){const _0x1efde1=_0x45cef8,_0x9e0269=$dataEnemies[_0x1661b3];if(_0x9e0269){if('okHCj'!==_0x1efde1(0x6cb)){if(_0x9e0269[_0x1efde1(0xbfd)][_0x1efde1(0x291)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){if(_0x1efde1(0x98e)!=='dkYbt'){const _0x348fc2=String(RegExp['$1'])[_0x1efde1(0x7e0)](/[\r\n]+/)['remove'](''),_0x310056=this[_0x1efde1(0x921)](_0x348fc2);_0x1661b3=this[_0x1efde1(0xc62)](_0x310056)||_0x1661b3,_0x1661b3=DataManager['swapEnemyIDs'](_0x1661b3);}else this[_0x1efde1(0x348)]()?(this[_0x1efde1(0x350)][_0x1efde1(0xd10)](),this[_0x1efde1(0x518)][_0x1efde1(0x939)](),this[_0x1efde1(0x5c3)][_0x1efde1(0x64b)]()):_0x5e74d9['BattleCore']['Scene_Battle_onActorCancel'][_0x1efde1(0xa07)](this),this['cancelTargetSelectionVisibility']();}}else this['_mainSprite'][_0x1efde1(0xaaa)]=_0x422ac9[_0x1efde1(0xb81)](_0x318b36),this['_mainSprite'][_0x1efde1(0xaaa)][_0x1efde1(0x879)](this[_0x1efde1(0x8d6)][_0x1efde1(0xb9b)](this));}return _0x1661b3;},DataManager[_0x45cef8(0x921)]=function(_0x500bd5){const _0x38d270=_0x45cef8;let _0x5174e6=0x0;const _0x47f3a2={};for(const _0x3011ac of _0x500bd5){if(_0x38d270(0x899)!==_0x38d270(0xbbd)){if(_0x3011ac[_0x38d270(0x291)](/(.*):[ ](\d+)/i)){const _0x55c31b=String(RegExp['$1'])['trim'](),_0x46f9b2=Number(RegExp['$2']);_0x47f3a2[_0x55c31b]=_0x46f9b2,_0x5174e6+=_0x46f9b2;}else{if(_0x3011ac[_0x38d270(0x291)](/(.*):[ ](\d+\.?\d+)/i)){if(_0x38d270(0xacb)!==_0x38d270(0xc1f)){const _0x215550=String(RegExp['$1'])['trim'](),_0x576d1e=Number(RegExp['$2']);_0x47f3a2[_0x215550]=_0x576d1e,_0x5174e6+=_0x576d1e;}else this[_0x38d270(0x433)](_0x30d2b4,_0xde93a3,_0x2fb6ff);}else _0x3011ac!==''&&('bXjjv'!==_0x38d270(0x3d0)?(_0x47f3a2[_0x3011ac]=0x1,_0x5174e6++):_0x1df229[_0x38d270(0x6f2)](_0x37963b[_0x38d270(0x23f)]||'',_0x5b1653[_0x38d270(0x874)]||0x0));}}else{const _0x18a11b=this[_0x38d270(0x619)](this[_0x38d270(0x6b4)]);this[_0x38d270(0x302)](this[_0x38d270(0x532)],_0x18a11b),this[_0x38d270(0x726)]();}}if(_0x5174e6<=0x0)return'';let _0x477683=Math[_0x38d270(0x3aa)]()*_0x5174e6;for(const _0xaff9d1 in _0x47f3a2){_0x477683-=_0x47f3a2[_0xaff9d1];if(_0x477683<=0x0)return _0xaff9d1;}return'';},DataManager[_0x45cef8(0x3a9)]=function(_0x28e06e){const _0x34afb6=_0x45cef8;if(!_0x28e06e)return![];if(!VisuMZ[_0x34afb6(0x6c0)][_0x34afb6(0x658)][_0x34afb6(0xa95)][_0x34afb6(0x7a0)])return![];if(_0x28e06e[_0x34afb6(0xbfd)][_0x34afb6(0x291)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x28e06e['note'][_0x34afb6(0x291)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x136f8c of _0x28e06e[_0x34afb6(0x497)]){if(!_0x136f8c)continue;if(_0x136f8c['code']===Game_Action[_0x34afb6(0x68d)])return!![];}return![];},DataManager[_0x45cef8(0x9b6)]=function(_0x4cb22b){const _0x27959f=_0x45cef8,_0x3946ba=$dataTroops[_0x4cb22b];if(!_0x3946ba)return'';let _0x411c3d='';_0x411c3d+=_0x3946ba[_0x27959f(0xd00)];for(const _0x3a25fa of _0x3946ba[_0x27959f(0x6c2)]){for(const _0x255b4b of _0x3a25fa[_0x27959f(0xa0f)]){[0x6c,0x198][_0x27959f(0x2b1)](_0x255b4b[_0x27959f(0xb78)])&&(_0x411c3d+='\x0a',_0x411c3d+=_0x255b4b[_0x27959f(0x827)][0x0]);}}return _0x411c3d;},ConfigManager['autoBattleAtStart']=ConfigManager['autoBattleAtStart']??![],ConfigManager['autoBattleUseSkills']=ConfigManager[_0x45cef8(0x84d)]??![],ConfigManager[_0x45cef8(0x39d)]=ConfigManager[_0x45cef8(0x39d)]??!![],VisuMZ['BattleCore']['ConfigManager_makeData']=ConfigManager[_0x45cef8(0x6b8)],ConfigManager[_0x45cef8(0x6b8)]=function(){const _0x3612d5=_0x45cef8,_0x77db5e=VisuMZ[_0x3612d5(0x6c0)][_0x3612d5(0x909)][_0x3612d5(0xa07)](this);return _0x77db5e[_0x3612d5(0xccb)]=this[_0x3612d5(0xccb)],_0x77db5e[_0x3612d5(0x84d)]=this[_0x3612d5(0x84d)],_0x77db5e['visualHpGauge']=this['visualHpGauge'],_0x77db5e;},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x784)]=ConfigManager['applyData'],ConfigManager[_0x45cef8(0x6b0)]=function(_0xff89cb){const _0x51bb7c=_0x45cef8;VisuMZ[_0x51bb7c(0x6c0)][_0x51bb7c(0x784)][_0x51bb7c(0xa07)](this,_0xff89cb);_0x51bb7c(0xccb)in _0xff89cb?this[_0x51bb7c(0xccb)]=_0xff89cb[_0x51bb7c(0xccb)]:this[_0x51bb7c(0xccb)]=![];_0x51bb7c(0x84d)in _0xff89cb?this['autoBattleUseSkills']=_0xff89cb[_0x51bb7c(0x84d)]:_0x51bb7c(0x528)===_0x51bb7c(0x24a)?(this['_skillWindow'][_0x51bb7c(0x5ba)](),this[_0x51bb7c(0xce3)][_0x51bb7c(0x5ba)]()):this['autoBattleUseSkills']=![];if(_0x51bb7c(0x39d)in _0xff89cb)this[_0x51bb7c(0x39d)]=_0xff89cb['visualHpGauge'];else{if(_0x51bb7c(0x815)===_0x51bb7c(0x815))this[_0x51bb7c(0x39d)]=!![];else return this[_0x51bb7c(0x222)][_0xf9610b];}},VisuMZ['BattleCore'][_0x45cef8(0x8b2)]=BattleManager[_0x45cef8(0x55a)],BattleManager[_0x45cef8(0x55a)]=function(){const _0x309eb7=_0x45cef8;VisuMZ[_0x309eb7(0x6c0)][_0x309eb7(0x8b2)][_0x309eb7(0xa07)](this),this[_0x309eb7(0x2ed)]=[];},BattleManager[_0x45cef8(0x58c)]=function(){const _0x492068=_0x45cef8;if(!SceneManager[_0x492068(0xc83)]())return;const _0x34c2e8=SceneManager[_0x492068(0x9e2)][_0x492068(0x350)];if(_0x34c2e8)_0x34c2e8[_0x492068(0xcc0)]();},BattleManager[_0x45cef8(0x8cc)]=function(){const _0x4775a4=_0x45cef8;if(BattleManager[_0x4775a4(0xc74)]())return _0x4775a4(0x776);return _0x4775a4(0xb8a);},BattleManager[_0x45cef8(0x737)]=function(_0x3f470c){const _0x4289b5=_0x45cef8;return _0x3f470c=_0x3f470c[_0x4289b5(0x5d3)]()['trim'](),this[_0x4289b5(0x8cc)]()===_0x3f470c;},BattleManager['isDTB']=function(){const _0xe57a11=_0x45cef8;return this[_0xe57a11(0x737)]('DTB');},BattleManager['isTurnBased']=function(){const _0x3acbbb=_0x45cef8;return this[_0x3acbbb(0x777)]();},BattleManager['isTickBased']=function(){return!this['isTurnBased']();},BattleManager[_0x45cef8(0xbfb)]=function(){const _0x3ba693=_0x45cef8;return!this[_0x3ba693(0x3f8)]()&&!this[_0x3ba693(0xced)]();},BattleManager[_0x45cef8(0x315)]=function(_0x486492){const _0x5e60ce=_0x45cef8;$gameParty[_0x5e60ce(0x315)](_0x486492),$gameTroop['processBattleCoreJS'](_0x486492);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x655)]=BattleManager['startBattle'],BattleManager[_0x45cef8(0xcee)]=function(){const _0x357461=_0x45cef8;this[_0x357461(0x9a7)]=![],this[_0x357461(0x448)]=ConfigManager[_0x357461(0xccb)],this['processBattleCoreJS'](_0x357461(0xb5b)),VisuMZ[_0x357461(0x6c0)][_0x357461(0x655)][_0x357461(0xa07)](this),this[_0x357461(0x315)](_0x357461(0xc2f));},BattleManager[_0x45cef8(0x4aa)]=function(_0x4a3513){const _0x5c826d=_0x45cef8,_0x4917f6=VisuMZ['BattleCore']['Settings'][_0x5c826d(0xb34)];_0x4a3513!==_0x5c826d(0x77d)&&_0x4917f6[_0x5c826d(0x4f9)]&&VisuMZ[_0x5c826d(0x6c0)][_0x5c826d(0x922)](_0x4917f6[_0x5c826d(0x4f9)])&&$gameTemp[_0x5c826d(0x7e1)](_0x4917f6['BattleEndEvent']);const _0x49f2fd=_0x5c826d(0x213)['format'](_0x4a3513);if(_0x4917f6[_0x49f2fd]&&VisuMZ[_0x5c826d(0x6c0)][_0x5c826d(0x922)](_0x4917f6[_0x49f2fd])){if(_0x5c826d(0x370)===_0x5c826d(0x50a)){let _0x57f097=0x0;return this['_battler']&&!this[_0x5c826d(0xa87)][_0x5c826d(0xa2d)]()&&(_0x57f097-=this[_0x5c826d(0x397)],_0x57f097-=this['_jumpHeight']),_0x57f097;}else $gameTemp[_0x5c826d(0x7e1)](_0x4917f6[_0x49f2fd]);}},VisuMZ[_0x45cef8(0x6c0)]['BattleManager_checkBattleEnd']=BattleManager[_0x45cef8(0x3f2)],BattleManager[_0x45cef8(0x3f2)]=function(){const _0x30059a=_0x45cef8;if(this[_0x30059a(0x66c)]===_0x30059a(0x76f)){if(_0x30059a(0x765)===_0x30059a(0xcef))this[_0x30059a(0x800)]();else{if($gameTemp[_0x30059a(0x8be)]())return![];}}return VisuMZ['BattleCore'][_0x30059a(0xa76)][_0x30059a(0xa07)](this);},VisuMZ['BattleCore']['BattleManager_processVictory']=BattleManager[_0x45cef8(0x3d5)],BattleManager[_0x45cef8(0x3d5)]=function(){const _0x5cfd6d=_0x45cef8;this[_0x5cfd6d(0x315)](_0x5cfd6d(0xcdf)),VisuMZ[_0x5cfd6d(0x6c0)][_0x5cfd6d(0xafc)][_0x5cfd6d(0xa07)](this),this[_0x5cfd6d(0x4aa)]('Victory');},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x4ff)]=BattleManager['processDefeat'],BattleManager[_0x45cef8(0xc6b)]=function(){const _0x3d6982=_0x45cef8;this['processBattleCoreJS'](_0x3d6982(0xa1b)),VisuMZ['BattleCore']['BattleManager_processDefeat'][_0x3d6982(0xa07)](this),this[_0x3d6982(0x4aa)](_0x3d6982(0x6ae));},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xab0)]=BattleManager['endBattle'],BattleManager[_0x45cef8(0x2e3)]=function(_0x456b31){const _0x243ecd=_0x45cef8;this['_endBattle']=!![],this['_autoBattle']=![],this['processBattleCoreJS'](_0x243ecd(0x8fc)),VisuMZ[_0x243ecd(0x6c0)][_0x243ecd(0xab0)][_0x243ecd(0xa07)](this,_0x456b31),this[_0x243ecd(0x315)](_0x243ecd(0x77e));},VisuMZ['BattleCore'][_0x45cef8(0xaec)]=BattleManager[_0x45cef8(0x5fb)],BattleManager[_0x45cef8(0x5fb)]=function(){const _0x433556=_0x45cef8;if(this[_0x433556(0x3f8)]())this[_0x433556(0x315)](_0x433556(0x493));VisuMZ[_0x433556(0x6c0)][_0x433556(0xaec)]['call'](this);if(this[_0x433556(0x3f8)]())this[_0x433556(0x315)](_0x433556(0xa5a));},VisuMZ[_0x45cef8(0x6c0)]['BattleManager_startAction']=BattleManager[_0x45cef8(0xb2e)],BattleManager[_0x45cef8(0xb2e)]=function(){const _0x541f90=_0x45cef8,_0x4a6c93=this[_0x541f90(0x8af)]['currentAction'](),_0x110e79=this['_subject'];if(_0x4a6c93&&_0x4a6c93[_0x541f90(0x289)]()===_0x110e79){if(_0x541f90(0x3ea)===_0x541f90(0xc14)){_0x177ec0[_0x541f90(0x3cf)]['callUpdateHelp'][_0x541f90(0xa07)](this);if(this[_0x541f90(0xc3c)])this[_0x541f90(0x91d)]();}else _0x4a6c93[_0x541f90(0x716)](_0x541f90(0xbc3));}VisuMZ[_0x541f90(0x6c0)][_0x541f90(0xc07)][_0x541f90(0xa07)](this),_0x4a6c93&&_0x4a6c93[_0x541f90(0x289)]()===_0x110e79&&_0x4a6c93[_0x541f90(0x716)](_0x541f90(0x9e9));},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x63f)]=BattleManager['endAction'],BattleManager[_0x45cef8(0x8ce)]=function(){const _0x54e141=_0x45cef8,_0x96461=this[_0x54e141(0x79c)],_0x223470=this[_0x54e141(0x8af)];if(_0x96461&&_0x96461!==this[_0x54e141(0xae9)]&&_0x96461['subject']()===_0x223470){if('IDrih'!==_0x54e141(0x259)){const _0xc63081=_0x27c2b0(_0x56befc['$1'])[_0x54e141(0x7e0)](/[\r\n]+/)[_0x54e141(0xcad)]('');_0xc8cb3b[_0x54e141(0x475)]=_0x1a5d86[_0x54e141(0x921)](_0xc63081);}else _0x96461[_0x54e141(0x716)]('PreEndActionJS');}if(this[_0x54e141(0x8af)])'NBPJB'===_0x54e141(0x47f)?_0x425190=_0x5923ba>=_0x4cc3b7?_0x2e1d06:_0x5ab05e:VisuMZ[_0x54e141(0x6c0)][_0x54e141(0x63f)][_0x54e141(0xa07)](this);else{if(_0x54e141(0x53d)!==_0x54e141(0x4cc))this[_0x54e141(0x66c)]=_0x54e141(0x76f);else return![];}_0x96461&&_0x96461!==this['_lastAction']&&_0x96461[_0x54e141(0x289)]()===_0x223470&&_0x96461[_0x54e141(0x716)](_0x54e141(0x60e)),this[_0x54e141(0x8b1)](this[_0x54e141(0x7de)]()),this[_0x54e141(0xae9)]=this[_0x54e141(0x79c)];},BattleManager[_0x45cef8(0x8b1)]=function(_0x5589bc){const _0xec49cf=_0x45cef8;for(const _0x1123c8 of _0x5589bc){if(!_0x1123c8)continue;if(!_0x1123c8[_0xec49cf(0x231)]())continue;_0x1123c8[_0xec49cf(0x231)]()[_0xec49cf(0x5f7)]();}},BattleManager[_0x45cef8(0x53e)]=function(){const _0x41baa8=_0x45cef8;!this[_0x41baa8(0x266)][_0x41baa8(0xba4)]()&&this[_0x41baa8(0x8ce)]();},Game_Battler[_0x45cef8(0x3cf)]['onAllActionsEnd']=function(){const _0x2425e8=_0x45cef8;this[_0x2425e8(0xca6)]();if(Imported[_0x2425e8(0x687)]){if(_0x2425e8(0x90b)!==_0x2425e8(0x8bc)){const _0x542122=VisuMZ['SkillsStatesCore'][_0x2425e8(0x658)]['States'];if(_0x542122&&_0x542122['ActionEndUpdate']===![]){if('lzDUY'===_0x2425e8(0x413)){const _0x1fad7b=_0x23cf49['battler']();this[_0x2425e8(0x287)](_0x2425e8(0xc0d),[_0x24f347],_0x322d2a,_0x53031f),this['push'](_0x2425e8(0x34e),_0x385f84,_0x1fad7b[_0x2425e8(0x883)],_0x1fad7b[_0x2425e8(0xabb)],_0x4601b3,![],_0x2425e8(0x278)),this['push'](_0x2425e8(0x8c4),[_0x21d539],_0x2425e8(0xc46)),this['push']('waitForMovement'),this[_0x2425e8(0x287)](_0x2425e8(0x8c4),[_0x1e6989],_0x2425e8(0xbcf));}else this[_0x2425e8(0x407)](0x1);}}else{const _0x245cc9=this[_0x2425e8(0x6e8)]();if(_0x2c9443&&['xp',_0x2425e8(0x4b4)]['includes'](_0x245cc9))this[_0x2425e8(0xbbe)](_0x539304);else _0x1c7e28&&['border']['includes'](_0x245cc9)&&(this[_0x2425e8(0x4c1)](_0x902b55),this['showHelpWindow']());_0x4979c0[_0x2425e8(0x6c0)][_0x2425e8(0x440)][_0x2425e8(0xa07)](this,_0x466f62),_0x5ed88f&&_0x3d0020['aliveMembers']()[_0x2425e8(0xcc5)]>0x0&&_0x10a5b9[_0x2425e8(0x231)]()&&_0x50e725[_0x2425e8(0x231)]()['stepForward']();}}else{if('sKoPB'===_0x2425e8(0x51c))this[_0x2425e8(0x407)](0x1);else{const _0x2c87be=this[_0x2425e8(0xa87)];_0x546b4e['BattleCore'][_0x2425e8(0x3af)][_0x2425e8(0xa07)](this,_0xf850ce),this['setupHpGaugeSprite'](_0x159529);if(_0x2c87be!==_0x159c5e)this['updateShadowScale']();}}this[_0x2425e8(0x25d)]();},BattleManager[_0x45cef8(0x5ec)]=function(){const _0x1bc3d0=_0x45cef8;this[_0x1bc3d0(0x84f)]=VisuMZ[_0x1bc3d0(0x6c0)][_0x1bc3d0(0x658)][_0x1bc3d0(0xb34)]['CalcEscapeRatioJS'][_0x1bc3d0(0xa07)](this);},VisuMZ['BattleCore'][_0x45cef8(0xb79)]=BattleManager[_0x45cef8(0x223)],BattleManager['onEscapeSuccess']=function(){const _0x3b279e=_0x45cef8;this[_0x3b279e(0x315)](_0x3b279e(0x881)),BattleManager['_spriteset'][_0x3b279e(0x6d7)](),VisuMZ[_0x3b279e(0x6c0)][_0x3b279e(0xb79)][_0x3b279e(0xa07)](this),this['processPostBattleCommonEvents'](_0x3b279e(0x8a7));},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x4dd)]=BattleManager[_0x45cef8(0x6dc)],BattleManager[_0x45cef8(0x6dc)]=function(){const _0x567950=_0x45cef8;this['processBattleCoreJS']('EscapeFailureJS');const _0x22fede=this['_escapeRatio'];VisuMZ['BattleCore'][_0x567950(0x4dd)][_0x567950(0xa07)](this),this[_0x567950(0x84f)]=_0x22fede+VisuMZ['BattleCore'][_0x567950(0x658)][_0x567950(0xb34)][_0x567950(0xa62)][_0x567950(0xa07)](this),this[_0x567950(0x4aa)](_0x567950(0x77d));},BattleManager[_0x45cef8(0xb4c)]=function(){const _0x1b25fc=_0x45cef8;let _0x2c430c=![];if(this[_0x1b25fc(0x931)]())for(const _0x11822f of $gameTroop['enemyNames']()){if(_0x1b25fc(0x9c0)==='lCecK')this[_0x1b25fc(0x266)][_0x1b25fc(0x287)](_0x1b25fc(0x4b8),TextManager[_0x1b25fc(0x95e)]['format'](_0x11822f)),this[_0x1b25fc(0x266)][_0x1b25fc(0x287)](_0x1b25fc(0xcfe)),_0x2c430c=!![];else{if(!this[_0x1b25fc(0xa87)])return;this[_0x1b25fc(0xb5f)]=this[_0x1b25fc(0xa87)][_0x1b25fc(0x6a2)](),this[_0x1b25fc(0x516)]=this[_0x1b25fc(0xa87)][_0x1b25fc(0xa78)]();}}if(this[_0x1b25fc(0x99f)])_0x1b25fc(0xc04)===_0x1b25fc(0x41c)?this[_0x1b25fc(0x5e1)](_0x1b25fc(0x636)):(this[_0x1b25fc(0x266)]['push'](_0x1b25fc(0x4b8),TextManager[_0x1b25fc(0x5ac)][_0x1b25fc(0x9ec)]($gameParty[_0x1b25fc(0xd00)]())),this[_0x1b25fc(0x266)]['push'](_0x1b25fc(0xcfe)));else this[_0x1b25fc(0xa96)]&&(this[_0x1b25fc(0x266)]['push']('addText',TextManager['surprise'][_0x1b25fc(0x9ec)]($gameParty['name']())),this[_0x1b25fc(0x266)][_0x1b25fc(0x287)](_0x1b25fc(0xcfe)));if(_0x2c430c){if(_0x1b25fc(0x5af)!==_0x1b25fc(0xa91))this[_0x1b25fc(0x266)][_0x1b25fc(0x287)]('wait'),this[_0x1b25fc(0x266)][_0x1b25fc(0x287)](_0x1b25fc(0x6db));else return _0x1bc406[_0x1b25fc(0x96a)]()['aliveMembers']();}this[_0x1b25fc(0xc74)]()&&this['isSkipPartyCommandWindow']()&&(this[_0x1b25fc(0x62e)]=![]);},BattleManager[_0x45cef8(0x931)]=function(){const _0x347ae3=_0x45cef8;if(BattleManager[_0x347ae3(0x448)])return![];return VisuMZ[_0x347ae3(0x6c0)][_0x347ae3(0x658)]['Enemy'][_0x347ae3(0xa22)];},VisuMZ['BattleCore']['BattleManager_startInput']=BattleManager[_0x45cef8(0x4e9)],BattleManager['startInput']=function(){const _0x59f2fb=_0x45cef8;VisuMZ[_0x59f2fb(0x6c0)][_0x59f2fb(0x968)][_0x59f2fb(0xa07)](this),this[_0x59f2fb(0x777)]()&&this['isSkipPartyCommandWindow']()&&!this[_0x59f2fb(0xa96)]&&$gameParty[_0x59f2fb(0x736)]()&&this[_0x59f2fb(0x800)]();},BattleManager['isSkipPartyCommandWindow']=function(){const _0x22f179=_0x45cef8;return VisuMZ[_0x22f179(0x6c0)][_0x22f179(0x658)]['PartyCmd'][_0x22f179(0x8f6)];},BattleManager[_0x45cef8(0x5ed)]=function(){const _0x41ea9a=_0x45cef8;if(this[_0x41ea9a(0xc75)]()){if(_0x41ea9a(0x23b)===_0x41ea9a(0x7b5)){const _0x115cda=this[_0x41ea9a(0x6e8)]();['xp','portrait','border']['includes'](_0x115cda)&&this[_0x41ea9a(0x5c3)][_0x41ea9a(0x5ba)](),(_0x115cda===_0x41ea9a(0x6b2)||this[_0x41ea9a(0x857)]())&&(this[_0x41ea9a(0x8e1)][_0x41ea9a(0x5ba)](),this[_0x41ea9a(0xce3)]['close']());}else this[_0x41ea9a(0x800)]();}},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xa30)]=Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x7f2)],Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x7f2)]=function(){const _0x48677d=_0x45cef8;VisuMZ[_0x48677d(0x6c0)][_0x48677d(0xa30)][_0x48677d(0xa07)](this);if(BattleManager[_0x48677d(0xc74)]()&&BattleManager[_0x48677d(0x62e)]){if(_0x48677d(0x920)!==_0x48677d(0x920))return this[_0x48677d(0xca0)]()&&this['currentAction']()['item']()&&!this[_0x48677d(0xca0)]()[_0x48677d(0xa88)]();else BattleManager[_0x48677d(0x62e)]=![],this[_0x48677d(0xb4e)]();}},BattleManager[_0x45cef8(0xa33)]=function(_0x4e5873,_0x3448ce){const _0x4af94c=_0x45cef8;this[_0x4af94c(0x79c)]['_reflectionTarget']=_0x3448ce,this[_0x4af94c(0x266)][_0x4af94c(0x764)](_0x3448ce),this[_0x4af94c(0x266)][_0x4af94c(0xcb0)](_0x4e5873,this['_action']),this[_0x4af94c(0x79c)][_0x4af94c(0x43c)](_0x4e5873),this[_0x4af94c(0x266)][_0x4af94c(0x4d8)](_0x4e5873,_0x4e5873);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x42e)]=BattleManager['makeActionOrders'],BattleManager['makeActionOrders']=function(){const _0x3994a4=_0x45cef8;VisuMZ['BattleCore']['BattleManager_makeActionOrders'][_0x3994a4(0xa07)](this),this[_0x3994a4(0x43b)]=this[_0x3994a4(0x43b)]['filter'](_0x3e9b33=>_0x3e9b33&&_0x3e9b33['isAppeared']());},VisuMZ[_0x45cef8(0x6c0)]['BattleManager_updatePhase']=BattleManager[_0x45cef8(0x74a)],BattleManager[_0x45cef8(0x74a)]=function(_0x24abc6){const _0x1b6853=_0x45cef8;if(this[_0x1b6853(0x66c)]===_0x1b6853(0x3f9))this[_0x1b6853(0x6ff)]();else this[_0x1b6853(0x66c)]===_0x1b6853(0x5c0)?this['updateForceAction']():'Jtkgn'!==_0x1b6853(0x55c)?(_0x50724a[_0x1b6853(0x6c0)]['Game_Battler_onBattleEnd'][_0x1b6853(0xa07)](this),this[_0x1b6853(0xb74)]()):VisuMZ['BattleCore'][_0x1b6853(0x5bb)][_0x1b6853(0xa07)](this,_0x24abc6);},BattleManager[_0x45cef8(0xac1)]=function(){const _0x17559e=_0x45cef8;this[_0x17559e(0xca8)]=this[_0x17559e(0xc35)][_0x17559e(0xa4c)](0x0),this[_0x17559e(0x4d6)]=0x0,this[_0x17559e(0x244)]=this['_allTargets'][0x0]||null,this['_phase']=_0x17559e(0x3f9);},BattleManager[_0x45cef8(0x6ff)]=function(){const _0x49856a=_0x45cef8;!this[_0x49856a(0x983)]()&&!this[_0x49856a(0x266)][_0x49856a(0xba4)]()&&('jiBbQ'!=='uLyMu'?this['_phase']=_0x49856a(0x9da):!this[_0x49856a(0x983)]()&&!this[_0x49856a(0x266)]['isBusy']()&&(this[_0x49856a(0x66c)]='action'));},BattleManager['forceAction']=function(_0x30739c){const _0x1af259=_0x45cef8;this[_0x1af259(0x43b)][_0x1af259(0xcad)](_0x30739c);if(_0x30739c===this[_0x1af259(0x8af)])return;const _0x42309b=JsonEx['makeDeepCopy'](_0x30739c[_0x1af259(0xca0)]());this[_0x1af259(0x2ed)]['push']([_0x30739c,_0x42309b]);},BattleManager[_0x45cef8(0xc8e)]=function(){},BattleManager[_0x45cef8(0x6d8)]=function(){const _0x190158=_0x45cef8;if(this[_0x190158(0xc74)]())this['_phase']=_0x190158(0x76f);else{if(this['_forcedBattlers'][_0x190158(0xcc5)]>0x0){if(_0x190158(0x889)===_0x190158(0x889))this[_0x190158(0x66c)]=_0x190158(0x76f);else{if(_0x1a46a4['isTpb']()&&this[_0x190158(0x7c6)]===_0x190158(0x740))return this[_0x190158(0x75d)]()?this[_0x190158(0xca0)]()&&this[_0x190158(0xca0)]()[_0x190158(0x3a4)]()&&!this[_0x190158(0xca0)]()[_0x190158(0x9c6)]():this['currentAction']()&&this[_0x190158(0xca0)]()[_0x190158(0x3a4)]()&&!this[_0x190158(0xca0)]()[_0x190158(0xa88)]();return![];}}else{if(_0x190158(0x875)!==_0x190158(0x875)){const _0x497339=_0x1722e1['BattleCore'][_0x190158(0x658)][_0x190158(0xc97)];let _0x31e15d=![];_0x2d3502['isSideView']()?_0x31e15d=_0x497339['SideviewSelect']:_0x31e15d=_0x497339[_0x190158(0xb08)],this[_0x190158(0xbe6)](_0x31e15d?this[_0x190158(0x468)]()-0x1:0x0);}else this['startInput']();}}},BattleManager[_0x45cef8(0x34c)]=function(){const _0x167bd6=_0x45cef8,_0x5dd61d=this[_0x167bd6(0x8af)];_0x5dd61d&&this['isTpb']()&&_0x5dd61d[_0x167bd6(0x6bd)](_0x167bd6(0xa8c));for(;;){const _0x43770d=this[_0x167bd6(0x935)]();if(!_0x43770d)return null;if(_0x43770d[_0x167bd6(0x982)]()&&_0x43770d[_0x167bd6(0xa9a)]()){if(_0x167bd6(0x3b0)!==_0x167bd6(0x808))return _0x43770d;else _0x171a29[_0x167bd6(0x6c0)]['Scene_Battle_startActorCommandSelection'][_0x167bd6(0xa07)](this),_0x301db7[_0x167bd6(0xc74)]()&&_0x547c17[_0x167bd6(0x62e)]&&(_0xbb84b['_tpbNeedsPartyCommand']=![],this[_0x167bd6(0xb4e)]());}}},BattleManager[_0x45cef8(0x935)]=function(){const _0xd60d18=_0x45cef8;if(this[_0xd60d18(0x2ed)][_0xd60d18(0xcc5)]>0x0){const _0x10f6dc=this[_0xd60d18(0x2ed)][_0xd60d18(0x817)](),_0x454658=_0x10f6dc[0x0];return _0x454658['_actions']=_0x454658[_0xd60d18(0xc7f)]||[],_0x454658['_actions'][0x0]=_0x10f6dc[0x1],_0x454658;}else return this[_0xd60d18(0x43b)][_0xd60d18(0x817)]();},VisuMZ['BattleCore'][_0x45cef8(0xb56)]=Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x5c0)],Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x5c0)]=function(_0xcd71c6,_0x4e6f4d){const _0x9760f6=_0x45cef8;VisuMZ[_0x9760f6(0x6c0)][_0x9760f6(0xb56)][_0x9760f6(0xa07)](this,_0xcd71c6,_0x4e6f4d),this[_0x9760f6(0xc7f)][this[_0x9760f6(0xc7f)][_0x9760f6(0xcc5)]-0x1][_0x9760f6(0x20d)]=!![];},Game_Interpreter[_0x45cef8(0x3cf)][_0x45cef8(0xcf5)]=function(_0x261649){const _0x4ba9d0=_0x45cef8;return this[_0x4ba9d0(0x65b)](_0x261649[0x0],_0x261649[0x1],_0x230685=>{const _0x3ddfa1=_0x4ba9d0;if(!_0x230685[_0x3ddfa1(0x31f)]()){if(_0x3ddfa1(0x3d7)!==_0x3ddfa1(0x3d7)){if(!_0x1c3a5e['isSceneBattle']())return;const _0x3498f3=_0x5d4c0a['_logWindow'];_0x3498f3['refresh']();}else _0x230685[_0x3ddfa1(0x5c0)](_0x261649[0x2],_0x261649[0x3]),BattleManager[_0x3ddfa1(0x5c0)](_0x230685);}}),!![];},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x4ca)]=Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x443)],Game_Battler['prototype'][_0x45cef8(0x443)]=function(){const _0x88524b=_0x45cef8;VisuMZ[_0x88524b(0x6c0)][_0x88524b(0x4ca)][_0x88524b(0xa07)](this);if(this['_actions'][_0x88524b(0xcc5)]<=0x0){if('lVTPr'===_0x88524b(0xcbf)){const _0x208a51=_0x288352[_0x428d1b[_0x88524b(0x969)]],_0x246276=_0x208a51['list']['length']-0x2,_0x17d672=_0x208a51[_0x88524b(0xa0f)][_0x246276];if(_0x17d672&&_0x17d672['code']!==0xe6){const _0x3f00ba={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x538809=_0x208a51['list']['pop']();_0x208a51[_0x88524b(0xa0f)][_0x88524b(0x83c)](_0x3f00ba),_0x208a51[_0x88524b(0xa0f)][_0x88524b(0x83c)](_0x538809);}}else this['_speed']=Number[_0x88524b(0xb01)];}},VisuMZ['BattleCore']['BattleManager_selectNextCommand']=BattleManager[_0x45cef8(0x800)],BattleManager[_0x45cef8(0x800)]=function(){const _0x51a94c=_0x45cef8;if(this[_0x51a94c(0xc74)]())_0x51a94c(0x2ae)!==_0x51a94c(0x2ae)?_0x5b6b8a=_0xd24542>=_0x557594?_0x3c135a:_0x532fd3:this[_0x51a94c(0xcd1)]();else{if(_0x51a94c(0x2c7)!==_0x51a94c(0x848))VisuMZ['BattleCore'][_0x51a94c(0xb23)]['call'](this);else{const _0x19f6fa=_0x36fd5b['$1'][_0x51a94c(0x7e0)](',')[_0x51a94c(0x4a9)](_0x29b05b=>_0x1948ea(_0x29b05b));this[_0x51a94c(0x8b7)](),this[_0x51a94c(0x6e5)](_0x19f6fa);}}},BattleManager[_0x45cef8(0xcd1)]=function(){const _0x58b713=_0x45cef8;if(this[_0x58b713(0xb40)]){if(this['_currentActor'][_0x58b713(0x800)]())return;this[_0x58b713(0x621)](),this['checkTpbInputClose'](),!this[_0x58b713(0x8af)]&&!this[_0x58b713(0xb40)]&&SceneManager[_0x58b713(0x9e2)]['updateBattleProcess']();}else{if(!this[_0x58b713(0x8af)]){if(_0x58b713(0x264)===_0x58b713(0x264))this['selectNextActor']();else return this[_0x58b713(0x3a4)]()[_0x58b713(0xbfd)][_0x58b713(0x291)](/<JS TARGETS>/i);}}},BattleManager[_0x45cef8(0x9eb)]=function(){const _0x5e07d8=_0x45cef8;if(!this[_0x5e07d8(0xc75)]()||this[_0x5e07d8(0x252)]()){this[_0x5e07d8(0xa04)]&&(!$gameParty['battleMembers']()[_0x5e07d8(0x2b1)](this[_0x5e07d8(0xa04)])&&(this[_0x5e07d8(0xa04)]=null));if(!this['_tpbSceneChangeCacheActor'])this[_0x5e07d8(0x6b6)](),this['_currentActor']=null,this[_0x5e07d8(0x486)]=![];else{if('jKCxu'!==_0x5e07d8(0xc8b)){if(!_0x413035['isSceneBattle']())return;if(!_0x107b77[_0x5e07d8(0xa9b)])return;_0x563630[_0x5e07d8(0x8b3)](_0x371c38,_0x3e8d1a);const _0x255a4b=_0x5e0ec8['getLastPluginCommandInterpreter'](),_0x38031f=_0x4d25e9[_0x5e07d8(0x45d)];if(!_0x255a4b)return;_0x389133[_0x5e07d8(0xb5e)](0x0,0x0,_0xc6da13['Duration'],_0x3e5029[_0x5e07d8(0x94a)]);if(_0x38031f)_0x255a4b[_0x5e07d8(0x625)](_0x5e07d8(0xd04));}else this[_0x5e07d8(0x7fb)]();}}},BattleManager['revertTpbCachedActor']=function(){const _0x3e0db7=_0x45cef8;!$gameParty[_0x3e0db7(0x2c2)]()[_0x3e0db7(0x2b1)](this[_0x3e0db7(0xa04)])&&(this[_0x3e0db7(0xa04)]=null),this[_0x3e0db7(0xa04)]?(this[_0x3e0db7(0xb40)]=this['_tpbSceneChangeCacheActor'],this['_currentActor'][_0x3e0db7(0x7c6)]=_0x3e0db7(0x444),this[_0x3e0db7(0x486)]=!![],this[_0x3e0db7(0xa04)]=null):(this[_0x3e0db7(0x6b6)](),this['_currentActor']=null,this[_0x3e0db7(0x486)]=![]);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x77c)]=BattleManager[_0x45cef8(0x8a2)],BattleManager[_0x45cef8(0x8a2)]=function(){const _0x104eb6=_0x45cef8;if(this[_0x104eb6(0x66c)]===_0x104eb6(0x3f9))return this[_0x104eb6(0x7d3)]();else{if(_0x104eb6(0x88e)===_0x104eb6(0x951)){if(!_0xc45b72[_0x104eb6(0xc83)]())return;_0x2c25e5[_0x104eb6(0x8b3)](_0x1197d0,_0x2ab019),_0x10fb2c[_0x104eb6(0x9e2)]['setVisibleUI'](_0x30c9f2[_0x104eb6(0x8ff)]);}else return VisuMZ['BattleCore'][_0x104eb6(0x77c)][_0x104eb6(0xa07)](this);}},BattleManager[_0x45cef8(0x7d3)]=function(){return this['isActiveTpb']();},VisuMZ['BattleCore'][_0x45cef8(0x9d1)]=BattleManager[_0x45cef8(0x6b6)],BattleManager[_0x45cef8(0x6b6)]=function(){const _0x20d57c=_0x45cef8;this['isTpb']()&&this[_0x20d57c(0x66c)]==='battleEnd'&&(this[_0x20d57c(0xb40)]=null),VisuMZ[_0x20d57c(0x6c0)][_0x20d57c(0x9d1)][_0x20d57c(0xa07)](this);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xb5a)]=BattleManager['inputtingAction'],BattleManager[_0x45cef8(0xa46)]=function(){const _0x101444=_0x45cef8,_0x1894d8=this[_0x101444(0xb40)];if(_0x1894d8&&!_0x1894d8[_0x101444(0xa46)]()){const _0xc96fab=_0x1894d8['_actionInputIndex'];_0x1894d8['_actions'][_0xc96fab]=new Game_Action(_0x1894d8);}return VisuMZ[_0x101444(0x6c0)]['BattleManager_inputtingAction'][_0x101444(0xa07)](this);},VisuMZ[_0x45cef8(0x6c0)]['BattleManager_checkSubstitute']=BattleManager[_0x45cef8(0x254)],BattleManager[_0x45cef8(0x254)]=function(_0x1c476a){const _0x391c93=_0x45cef8;if(this['_action'][_0x391c93(0x842)]())return![];return VisuMZ['BattleCore']['BattleManager_checkSubstitute'][_0x391c93(0xa07)](this,_0x1c476a);},SceneManager[_0x45cef8(0xc83)]=function(){const _0x30c535=_0x45cef8;return this[_0x30c535(0x9e2)]&&this[_0x30c535(0x9e2)][_0x30c535(0x8e2)]===Scene_Battle;},SceneManager[_0x45cef8(0xc26)]=function(){const _0x4bfc25=_0x45cef8;return Spriteset_Battle[_0x4bfc25(0x3cf)][_0x4bfc25(0x79b)]();},SceneManager['isPreviousSceneBattleTransitionable']=function(){const _0x49341e=_0x45cef8;if(SceneManager[_0x49341e(0x719)](Scene_Options))return!![];return![];},SceneManager[_0x45cef8(0x9bd)]=function(){const _0x4aacf7=_0x45cef8;if(SceneManager[_0x4aacf7(0xc69)](Scene_Options))return!![];return![];},SceneManager[_0x45cef8(0x49b)]=function(_0x56c6d0){const _0x4687dc=_0x45cef8;if(!SceneManager[_0x4687dc(0xc83)]())return!![];const _0x5a4121=[_0x4687dc(0x75b),_0x4687dc(0xc36)];return _0x5a4121[_0x4687dc(0x2b1)](_0x56c6d0[_0x4687dc(0xd00)]);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x672)]=SceneManager['push'],SceneManager[_0x45cef8(0x287)]=function(_0x30c753){const _0x37a5c7=_0x45cef8;if(!SceneManager[_0x37a5c7(0x49b)](_0x30c753))return this[_0x37a5c7(0x22a)](_0x30c753);VisuMZ[_0x37a5c7(0x6c0)][_0x37a5c7(0x672)][_0x37a5c7(0xa07)](this,_0x30c753);},SceneManager[_0x45cef8(0x22a)]=function(_0x3381d4){const _0x46e93a=_0x45cef8;if(!$gameTemp[_0x46e93a(0x797)]())return;if(this[_0x46e93a(0xa05)])return;this['_displayBattleCoreTransitionErrorMsg']=!![];let _0x208e8b='';_0x208e8b+='VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing',_0x208e8b+='\x20to\x20%1\x20midbattle.'[_0x46e93a(0x9ec)](_0x3381d4[_0x46e93a(0xd00)]),alert(_0x208e8b);},VisuMZ[_0x45cef8(0x6c0)]['Game_Temp_requestAnimation']=Game_Temp[_0x45cef8(0x3cf)][_0x45cef8(0xc5f)],Game_Temp[_0x45cef8(0x3cf)][_0x45cef8(0xc5f)]=function(_0x23dee7,_0x19498f,_0x497296){const _0x52ce0c=_0x45cef8;_0x23dee7=_0x23dee7[_0x52ce0c(0x4db)]((_0x5aeab2,_0x2272fd,_0x2a598b)=>_0x2a598b['indexOf'](_0x5aeab2)===_0x2272fd),SceneManager['isSceneBattle']()&&SceneManager['isBattleFlipped']()&&(_0x52ce0c(0xb02)===_0x52ce0c(0x6ee)?(_0x5057ca['BattleCore']['Scene_Battle_onActorOk'][_0x52ce0c(0xa07)](this),this[_0x52ce0c(0x9e8)]()):_0x497296=!_0x497296),VisuMZ[_0x52ce0c(0x6c0)][_0x52ce0c(0x64d)]['call'](this,_0x23dee7,_0x19498f,_0x497296),SceneManager[_0x52ce0c(0xc83)]()&&(_0x52ce0c(0xc8d)!==_0x52ce0c(0x206)?BattleManager[_0x52ce0c(0x78d)]['processAnimationRequests']():_0x329cc8[_0x52ce0c(0xc97)][_0x52ce0c(0xbe4)]=!![]);},Game_Temp[_0x45cef8(0x3cf)][_0x45cef8(0x5ae)]=function(_0x1e3089){const _0x42e25c=_0x45cef8;this[_0x42e25c(0xa8a)]=_0x1e3089;},Game_Temp[_0x45cef8(0x3cf)]['getLastPluginCommandInterpreter']=function(){const _0xcef55d=_0x45cef8;return this[_0xcef55d(0xa8a)];},Game_Temp[_0x45cef8(0x3cf)][_0x45cef8(0x55e)]=function(){const _0x1177b1=_0x45cef8;this[_0x1177b1(0x30f)]=undefined;},Game_Temp[_0x45cef8(0x3cf)][_0x45cef8(0x938)]=function(_0x1f3fbc){const _0x1292f6=_0x45cef8;$gameMap&&$dataMap&&$dataMap[_0x1292f6(0xbfd)]&&(_0x1292f6(0x40f)!==_0x1292f6(0xc76)?this[_0x1292f6(0x8c7)]($dataMap[_0x1292f6(0xbfd)]):_0xab5d00+=_0x46dca5(_0x4f5a74['$1']));const _0x5b5aa6=$dataTroops[_0x1f3fbc];if(_0x5b5aa6){let _0x128fb2=DataManager[_0x1292f6(0x9b6)](_0x5b5aa6['id']);this['parseForcedGameTroopSettingsBattleCore'](_0x128fb2);}},Game_Temp[_0x45cef8(0x3cf)][_0x45cef8(0x8c7)]=function(_0x398e38){const _0x3404a8=_0x45cef8;if(!_0x398e38)return;if(_0x398e38[_0x3404a8(0x291)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*)>/i)){if(_0x3404a8(0x758)==='wUjch')_0x310580['reserveCommonEvent'](_0x29942c[_0x28cae6]);else{const _0xa06175=String(RegExp['$1']);if(_0xa06175['match'](/DEFAULT/i))this[_0x3404a8(0x30f)]=_0x3404a8(0x991);else{if(_0xa06175[_0x3404a8(0x291)](/LIST/i))this[_0x3404a8(0x30f)]='list';else{if(_0xa06175[_0x3404a8(0x291)](/XP/i)){if('LXIDT'===_0x3404a8(0xc78))this[_0x3404a8(0x30f)]='xp';else{const _0x5af9ec=this['commandName'](_0x38d39a);if(_0x5af9ec[_0x3404a8(0x291)](/\\I\[(\d+)\]/i)){const _0x2ed4a9=this[_0x3404a8(0x745)](_0x2c55c2),_0x37b9e8=this[_0x3404a8(0x574)](_0x5af9ec)[_0x3404a8(0x639)];return _0x37b9e8<=_0x2ed4a9[_0x3404a8(0x639)]?_0x3404a8(0x911):_0x3404a8(0x980);}}}else{if(_0xa06175[_0x3404a8(0x291)](/PORTRAIT/i))this[_0x3404a8(0x30f)]=_0x3404a8(0x4b4);else{if(_0xa06175[_0x3404a8(0x291)](/BORDER/i))this[_0x3404a8(0x30f)]=_0x3404a8(0x6b2);else{if(_0xa06175['match'](/(?:SIDEVIEW UI|SIDEVIEW)/i)){if(_0x3404a8(0x36e)!==_0x3404a8(0x5d5)){if(Imported[_0x3404a8(0xbd1)]){if('ktKfn'!==_0x3404a8(0x786))this[_0x3404a8(0x30f)]='sideview_ui';else{_0xa1f3ee[_0x3404a8(0x6c0)]['Game_Enemy_transform'][_0x3404a8(0xa07)](this,_0x47c5fe),this[_0x3404a8(0x35d)](),this[_0x3404a8(0x8e3)]();const _0x2c2d5f=this[_0x3404a8(0x231)]();if(_0x2c2d5f)_0x2c2d5f[_0x3404a8(0xb59)](this);}}else{if(_0x3404a8(0x837)===_0x3404a8(0x9d9)){const _0x1e5ce8=_0x161ed6['format'](_0x48a2e6[_0x3404a8(0xd00)](),_0x1aff6e[_0x3404a8(0xcfa)](_0x3d67d9));this['push'](_0x3404a8(0xa65)),this[_0x3404a8(0x287)](_0x3404a8(0xc8f)),this['push'](_0x3404a8(0x4b8),_0x1e5ce8),this['push'](_0x3404a8(0xcfe));}else this[_0x3404a8(0x30f)]=_0x3404a8(0x991);}}else{if(_0x2835c5[_0x3404a8(0x291)](/(.*):[ ](\d+)/i)){const _0x256a6a=_0x4c62aa(_0x20c2c0['$1'])[_0x3404a8(0x7f3)](),_0x54a36c=_0x59a53d(_0x550098['$2']);_0x5b184a[_0x256a6a]=_0x54a36c,_0xe1e8e9+=_0x54a36c;}else{if(_0x16bf63['match'](/(.*):[ ](\d+\.?\d+)/i)){const _0x4eb2df=_0x56adec(_0x23fe58['$1'])[_0x3404a8(0x7f3)](),_0x2a55b8=_0x389e2e(_0x34f0b4['$2']);_0x5d444d[_0x4eb2df]=_0x2a55b8,_0x7cef67+=_0x2a55b8;}else _0x2ed5ce!==''&&(_0x3a00e3[_0x4e654f]=0x1,_0x54fa81++);}}}}}}}}}}},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x472)]=Game_System[_0x45cef8(0x3cf)]['initialize'],Game_System[_0x45cef8(0x3cf)]['initialize']=function(){const _0x306159=_0x45cef8;VisuMZ[_0x306159(0x6c0)][_0x306159(0x472)]['call'](this),this[_0x306159(0x93f)]();},Game_System[_0x45cef8(0x3cf)][_0x45cef8(0x93f)]=function(){const _0x1041ff=_0x45cef8;this['_defeatedEnemies']=this[_0x1041ff(0x29f)]||[];},Game_System['prototype'][_0x45cef8(0x321)]=function(){const _0x1c3122=_0x45cef8;if(this['_defeatedEnemies']===undefined)this['initBattleCore']();return this[_0x1c3122(0x29f)];},Game_System[_0x45cef8(0x3cf)]['registerDefeatedEnemy']=function(_0x10c370){const _0x3b66f0=_0x45cef8;if(this['_defeatedEnemies']===undefined)this['initBattleCore']();if(!_0x10c370)return;if(this[_0x3b66f0(0x29f)][_0x3b66f0(0x2b1)](_0x10c370))return;this[_0x3b66f0(0x29f)][_0x3b66f0(0x287)](_0x10c370),this[_0x3b66f0(0x29f)][_0x3b66f0(0x52a)]((_0x1d383a,_0x355b8b)=>_0x1d383a-_0x355b8b);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x417)]=Game_BattlerBase[_0x45cef8(0x3cf)]['addNewState'],Game_BattlerBase['prototype']['addNewState']=function(_0x5dd17e){const _0x292d4b=_0x45cef8,_0x1e2d38=this['isAlive'](),_0x209265=this[_0x292d4b(0x50d)]();VisuMZ[_0x292d4b(0x6c0)]['Game_BattlerBase_addNewState'][_0x292d4b(0xa07)](this,_0x5dd17e),this[_0x292d4b(0x724)]()&&_0x1e2d38&&this[_0x292d4b(0x61e)]()&&(this[_0x292d4b(0xb2c)]=!this[_0x292d4b(0x284)](),$gameSystem[_0x292d4b(0xa37)](this[_0x292d4b(0xbce)]())),SceneManager[_0x292d4b(0xc83)]()&&_0x209265!==this[_0x292d4b(0x50d)]()&&(_0x292d4b(0x241)!==_0x292d4b(0x957)?this['battler']()&&('axZbf'!=='scKxa'?this[_0x292d4b(0x231)]()[_0x292d4b(0x5f7)]():_0x16e771=_0x39c62a>=_0x21c349?_0x333401:_0x24def4):(_0x23a13b[_0x292d4b(0x4bb)]['x']=this[_0x292d4b(0x3fb)](),_0x2cf28d[_0x292d4b(0x4bb)]['y']=this[_0x292d4b(0x816)]()));},Game_Enemy['prototype'][_0x45cef8(0x284)]=function(){const _0x5e2e8e=_0x45cef8;return $gameSystem[_0x5e2e8e(0x321)]()[_0x5e2e8e(0x2b1)](this[_0x5e2e8e(0x843)]);},VisuMZ['BattleCore'][_0x45cef8(0xc3d)]=Game_BattlerBase[_0x45cef8(0x3cf)][_0x45cef8(0x4ac)],Game_BattlerBase[_0x45cef8(0x3cf)]['eraseState']=function(_0x481fa2){const _0xf3907d=_0x45cef8;VisuMZ[_0xf3907d(0x6c0)]['Game_BattlerBase_eraseState']['call'](this,_0x481fa2),this[_0xf3907d(0x724)]()&&_0x481fa2===this[_0xf3907d(0xa3c)]()&&this[_0xf3907d(0xa9a)]()&&('JUaoR'===_0xf3907d(0x414)?(_0x2425d2[_0xf3907d(0x3cf)]['performAction']['call'](this,_0x54cb27),this[_0xf3907d(0x285)](_0x14c69c)):this[_0xf3907d(0xb2c)]=![]),!this[_0xf3907d(0xce4)]&&!this[_0xf3907d(0xa52)]&&SceneManager['isSceneBattle']()&&this['requestMotionRefresh']();},VisuMZ['BattleCore'][_0x45cef8(0x529)]=Game_Action[_0x45cef8(0x3cf)]['clear'],Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0x6db)]=function(){const _0x1c21c2=_0x45cef8;VisuMZ[_0x1c21c2(0x6c0)][_0x1c21c2(0x529)][_0x1c21c2(0xa07)](this),this['_armorPenetration']={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x1c21c2(0x45b)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x1c21c2(0x80a)]=_0x1c21c2(0x991);},Game_Action['prototype'][_0x45cef8(0xafd)]=function(_0x430970,_0x51b179){const _0x1f6ace=_0x45cef8;return VisuMZ[_0x1f6ace(0x6c0)][_0x1f6ace(0x658)][_0x1f6ace(0x28b)][_0x1f6ace(0xb5c)][_0x1f6ace(0xa07)](this,_0x430970,_0x51b179);},Game_Action['prototype']['applyVariance']=function(_0x3632de,_0x2322ee){const _0x519eda=_0x45cef8;return VisuMZ[_0x519eda(0x6c0)]['Settings'][_0x519eda(0x28b)]['VarianceFormulaJS'][_0x519eda(0xa07)](this,_0x3632de,_0x2322ee);},Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0x584)]=function(_0x1fac25,_0x294aac){const _0x4326c2=_0x45cef8;return VisuMZ[_0x4326c2(0x6c0)][_0x4326c2(0x658)][_0x4326c2(0x28b)][_0x4326c2(0xbab)]['call'](this,_0x1fac25,_0x294aac);},VisuMZ['BattleCore'][_0x45cef8(0xa49)]=Game_Action[_0x45cef8(0x3cf)]['itemHit'],Game_Action[_0x45cef8(0x3cf)]['itemHit']=function(_0x517ad1){const _0x10e0e0=_0x45cef8,_0x303f55=this[_0x10e0e0(0x3a4)]()[_0x10e0e0(0xbfd)];if(_0x303f55[_0x10e0e0(0x291)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x303f55[_0x10e0e0(0x291)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0xbf9dea=VisuMZ[_0x10e0e0(0x6c0)][_0x10e0e0(0xa49)][_0x10e0e0(0xa07)](this,_0x517ad1);return _0xbf9dea=this[_0x10e0e0(0x45b)][_0x10e0e0(0x70a)]*_0xbf9dea+this[_0x10e0e0(0x45b)]['hitFlat'],_0xbf9dea;}}},Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0x52d)]=function(_0x421ea1){const _0x1b74e5=_0x45cef8;if(!this[_0x1b74e5(0x3a4)]()[_0x1b74e5(0x8fa)]['critical'])return 0x0;let _0x621468=VisuMZ['BattleCore']['Settings']['Damage'][_0x1b74e5(0xb3d)][_0x1b74e5(0xa07)](this,_0x421ea1);return _0x621468=this['_multipliers'][_0x1b74e5(0xccc)]*_0x621468+this[_0x1b74e5(0x45b)][_0x1b74e5(0xbe2)],_0x621468;},Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0xa24)]=function(_0x13b7e3){const _0xd370e9=_0x45cef8;return _0x13b7e3=VisuMZ[_0xd370e9(0x6c0)][_0xd370e9(0x658)][_0xd370e9(0x28b)][_0xd370e9(0x793)][_0xd370e9(0xa07)](this,_0x13b7e3),_0x13b7e3=this['_multipliers'][_0xd370e9(0xc43)]*_0x13b7e3+this['_multipliers'][_0xd370e9(0x6e9)],_0x13b7e3;},VisuMZ['BattleCore'][_0x45cef8(0x462)]=Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0xaa2)],Game_Action[_0x45cef8(0x3cf)]['evalDamageFormula']=function(_0x59e0cc){const _0x567ec3=_0x45cef8;if(this[_0x567ec3(0x80a)]!==_0x567ec3(0x991))return this[_0x567ec3(0x601)](_0x59e0cc);else return DataManager[_0x567ec3(0x1ee)](this[_0x567ec3(0x3a4)]())===_0x567ec3(0x809)?VisuMZ[_0x567ec3(0x6c0)][_0x567ec3(0x462)][_0x567ec3(0xa07)](this,_0x59e0cc):this[_0x567ec3(0xc1d)](_0x59e0cc);},Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0x3c0)]=function(_0x4229d6){const _0x2f0bef=_0x45cef8;this[_0x2f0bef(0x80a)]=_0x4229d6;},Game_Action['prototype'][_0x45cef8(0x601)]=function(_0x1d0049){const _0x121e9a=_0x45cef8,_0x3564d5=this['item'](),_0x573816=_0x3564d5['damage'][_0x121e9a(0x4dc)];_0x3564d5[_0x121e9a(0x8fa)][_0x121e9a(0x4dc)]=this['_customDamageFormula'];let _0x4140da=VisuMZ[_0x121e9a(0x6c0)][_0x121e9a(0x462)][_0x121e9a(0xa07)](this,_0x1d0049);return _0x3564d5[_0x121e9a(0x8fa)][_0x121e9a(0x4dc)]=_0x573816,_0x4140da;},Game_Action['prototype']['damageStyle']=function(){const _0x216fd9=_0x45cef8;if(this[_0x216fd9(0x3a4)]()[_0x216fd9(0xbfd)][_0x216fd9(0x291)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x49965c=String(RegExp['$1'])[_0x216fd9(0x5d3)]()[_0x216fd9(0x7f3)]();return _0x49965c;}return'MANUAL';},Game_Action[_0x45cef8(0x3cf)]['evalDamageFormulaBattleCore']=function(_0x533c52){const _0x8762f5=_0x45cef8,_0x2243a8=DataManager[_0x8762f5(0x1ee)](this['item']()),_0x142e7d=VisuMZ[_0x8762f5(0xa6b)][_0x2243a8];try{if(_0x8762f5(0x44b)===_0x8762f5(0x44b))return _0x142e7d['Formula'][_0x8762f5(0xa07)](this,_0x533c52);else{if(!this['_battler'])return![];if(this[_0x8762f5(0x587)]>0x0)return!![];return _0x4012a4[_0x8762f5(0x6c0)]['Sprite_Battler_isMoving']['call'](this);}}catch(_0x3dba06){if(_0x8762f5(0x3e3)!==_0x8762f5(0x2de)){if($gameTemp[_0x8762f5(0x797)]())console[_0x8762f5(0x541)](_0x3dba06);return VisuMZ['BattleCore'][_0x8762f5(0x462)][_0x8762f5(0xa07)](this);}else return![];}},Game_Action[_0x45cef8(0x3cf)]['applyArmorModifiers']=function(_0x4c62bb,_0x463bf1){const _0x51b10b=_0x45cef8;if(this[_0x51b10b(0x5f4)]())return _0x463bf1;const _0x58a63b=this[_0x51b10b(0x289)](),_0xc8d6ae=_0x4c62bb;let _0x1b7dbd=[],_0xd1dc4d=[];_0x1b7dbd[_0x51b10b(0x287)](this[_0x51b10b(0xa25)][_0x51b10b(0xb62)],this[_0x51b10b(0xa25)][_0x51b10b(0xbd3)]),_0xd1dc4d[_0x51b10b(0x287)](this[_0x51b10b(0xa25)]['arPenRate'],this['_armorPenetration']['arRedRate']);const _0x58c283=this[_0x51b10b(0xcec)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x1138a8=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x25f02c=this[_0x51b10b(0xcec)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x3c147e=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;_0x1b7dbd=_0x1b7dbd[_0x51b10b(0x9f7)](_0xc8d6ae[_0x51b10b(0x2bc)]()[_0x51b10b(0x4a9)](_0x33bab3=>_0x33bab3&&_0x33bab3[_0x51b10b(0xbfd)][_0x51b10b(0x291)](_0x58c283)?Number(RegExp['$1']):0x0)),_0xd1dc4d=_0xd1dc4d[_0x51b10b(0x9f7)](_0xc8d6ae[_0x51b10b(0x2bc)]()[_0x51b10b(0x4a9)](_0x3284d4=>_0x3284d4&&_0x3284d4['note'][_0x51b10b(0x291)](_0x1138a8)?Number(RegExp['$1'])/0x64:0x0)),_0x1b7dbd=_0x1b7dbd[_0x51b10b(0x9f7)](_0x58a63b[_0x51b10b(0x2bc)]()[_0x51b10b(0x4a9)](_0xa7e87c=>_0xa7e87c&&_0xa7e87c[_0x51b10b(0xbfd)][_0x51b10b(0x291)](_0x25f02c)?Number(RegExp['$1']):0x0)),_0xd1dc4d=_0xd1dc4d[_0x51b10b(0x9f7)](_0x58a63b[_0x51b10b(0x2bc)]()[_0x51b10b(0x4a9)](_0xe94fdf=>_0xe94fdf&&_0xe94fdf[_0x51b10b(0xbfd)][_0x51b10b(0x291)](_0x3c147e)?Number(RegExp['$1'])/0x64:0x0));this['item']()[_0x51b10b(0xbfd)]['match'](_0x25f02c)&&(_0x51b10b(0x616)==='TJSYh'?_0x1b7dbd[_0x51b10b(0x287)](Number(RegExp['$1'])):this[_0x51b10b(0xbbe)](_0x2741ca));if(this[_0x51b10b(0x3a4)]()[_0x51b10b(0xbfd)][_0x51b10b(0x291)](_0x3c147e)){if('Agouo'===_0x51b10b(0xbb0)){const _0x15bcd7=this[_0x51b10b(0x8af)][_0x51b10b(0xca0)](),_0x469faa=this[_0x51b10b(0x8af)];_0x15bcd7&&_0x15bcd7[_0x51b10b(0x289)]()===_0x469faa&&_0x15bcd7[_0x51b10b(0x716)](_0x51b10b(0xbc3)),_0x51f096[_0x51b10b(0x6c0)][_0x51b10b(0xc07)]['call'](this),_0x15bcd7&&_0x15bcd7[_0x51b10b(0x289)]()===_0x469faa&&_0x15bcd7[_0x51b10b(0x716)]('PostStartActionJS');}else _0xd1dc4d[_0x51b10b(0x287)](Number(RegExp['$1']));}return _0x463bf1=_0x1b7dbd[_0x51b10b(0xbd9)]((_0x1531cc,_0x19682f)=>_0x1531cc-_0x19682f,_0x463bf1),_0x463bf1>0x0&&(_0x463bf1=_0xd1dc4d['reduce']((_0x5dff8b,_0x5063a9)=>_0x5dff8b*(0x1-_0x5063a9),_0x463bf1)),_0x463bf1;},VisuMZ['BattleCore'][_0x45cef8(0x9b2)]=Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0x544)],Game_Action[_0x45cef8(0x3cf)]['executeDamage']=function(_0x5f3dfc,_0x399f98){const _0x476140=_0x45cef8;_0x399f98=_0x399f98*this[_0x476140(0x45b)][_0x476140(0x466)],_0x399f98+=this['_multipliers']['damageFlat']*(_0x399f98>=0x0?0x1:-0x1),_0x399f98=this[_0x476140(0x54d)](_0x476140(0x2b3),_0x5f3dfc,_0x399f98,![]),_0x399f98=this[_0x476140(0x5c5)](_0x399f98),_0x399f98=Math[_0x476140(0x365)](_0x399f98),this[_0x476140(0x3e8)]=_0x399f98,this['_totalValue']=this['_totalValue']||0x0,this[_0x476140(0xc57)]+=_0x399f98,VisuMZ[_0x476140(0x6c0)]['Game_Action_executeDamage'][_0x476140(0xa07)](this,_0x5f3dfc,_0x399f98),this[_0x476140(0x54d)](_0x476140(0xba7),_0x5f3dfc,_0x399f98,!![]);},Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0x5c5)]=function(_0x20b6b5){const _0x50b7e0=_0x45cef8;if(this[_0x50b7e0(0xae3)]())return _0x20b6b5;return _0x20b6b5=this['applySoftDamageCap'](_0x20b6b5),_0x20b6b5=this['applyHardDamageCap'](_0x20b6b5),_0x20b6b5;},Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0xae3)]=function(){const _0x5c3ca3=_0x45cef8,_0x6cd413=/<BYPASS DAMAGE CAP>/i;if(this['item']()[_0x5c3ca3(0xbfd)][_0x5c3ca3(0x291)](_0x6cd413))return!![];if(this[_0x5c3ca3(0x289)]()[_0x5c3ca3(0x2bc)]()[_0x5c3ca3(0x6a6)](_0x372720=>_0x372720&&_0x372720[_0x5c3ca3(0xbfd)][_0x5c3ca3(0x291)](_0x6cd413)))return!![];return!VisuMZ[_0x5c3ca3(0x6c0)][_0x5c3ca3(0x658)][_0x5c3ca3(0x28b)][_0x5c3ca3(0xa84)];},Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0x312)]=function(_0x5958e0){const _0xea5975=_0x45cef8;if(!VisuMZ['BattleCore'][_0xea5975(0x658)]['Damage'][_0xea5975(0x3f4)])return _0x5958e0;const _0x5ee65d=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0xea5975(0x3a4)]()[_0xea5975(0xbfd)][_0xea5975(0x291)](_0x5ee65d))return _0x5958e0;if(this['subject']()['traitObjects']()[_0xea5975(0x6a6)](_0x1223a2=>_0x1223a2&&_0x1223a2[_0xea5975(0xbfd)][_0xea5975(0x291)](_0x5ee65d)))return _0x5958e0;const _0x344be6=_0x5958e0<0x0?-0x1:0x1;_0x5958e0=Math[_0xea5975(0x319)](_0x5958e0);let _0x2b0a15=this['subject']()[_0xea5975(0x5ea)]();this[_0xea5975(0x3a4)]()[_0xea5975(0xbfd)]['match'](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x2b0a15+=Number(RegExp['$1'])/0x64);_0x2b0a15=_0x2b0a15[_0xea5975(0xbca)](0.01,0x1);const _0x165e89=this[_0xea5975(0xbdc)](),_0x582228=_0x2b0a15*_0x165e89;if(_0x5958e0>_0x582228&&_0x165e89>_0x582228){_0x5958e0-=_0x582228;const _0x1effb1=VisuMZ[_0xea5975(0x6c0)][_0xea5975(0x658)]['Damage']['DefaultSoftScaler'],_0xa3bb83=Math['max'](0x1-_0x5958e0/((_0x165e89-_0x582228)*_0x1effb1+_0x5958e0),0.01);_0x5958e0*=_0xa3bb83,_0x5958e0+=_0x582228;}return _0x5958e0*_0x344be6;},Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0xbdc)]=function(){const _0x46d8db=_0x45cef8;return this[_0x46d8db(0x3a4)]()[_0x46d8db(0xbfd)][_0x46d8db(0x291)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):_0x46d8db(0x314)===_0x46d8db(0xb3a)?_0xdd65a8[_0x46d8db(0x321)]()[_0x46d8db(0x2b1)](this['_enemyId']):this[_0x46d8db(0x289)]()[_0x46d8db(0x3cc)]();},Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0x68b)]=function(_0x23d7fa){const _0x47fbe4=_0x45cef8;console[_0x47fbe4(0x541)](_0x23d7fa);let _0xaa9818=this[_0x47fbe4(0xbdc)]();return _0x23d7fa[_0x47fbe4(0xbca)](-_0xaa9818,_0xaa9818);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xa43)]=Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0x43c)],Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0x43c)]=function(_0x4c2f88){const _0xff8a9=_0x45cef8;this[_0xff8a9(0x54d)](_0xff8a9(0x2ee),_0x4c2f88,0x0,!![]),VisuMZ[_0xff8a9(0x6c0)][_0xff8a9(0xa43)]['call'](this,_0x4c2f88),this[_0xff8a9(0x54d)](_0xff8a9(0x7c9),_0x4c2f88,this[_0xff8a9(0x3e8)]||0x0,!![]),this[_0xff8a9(0xaf7)](_0x4c2f88);},Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0x54d)]=function(_0x43440c,_0x34af7c,_0x1c3e47,_0x5057fd){const _0x4ac093=_0x45cef8;if(this[_0x4ac093(0xa52)]||this[_0x4ac093(0xce4)])return;_0x1c3e47=_0x1c3e47||0x0;const _0x1a0e7c=_0x1c3e47,_0x5a6c2e=VisuMZ[_0x4ac093(0x6c0)][_0x4ac093(0x658)][_0x4ac093(0xb34)],_0x5996ab=_0x43440c['format']('');if(_0x5a6c2e[_0x5996ab]){if('Urbjf'===_0x4ac093(0x6b3)){_0x1c3e47=_0x5a6c2e[_0x5996ab][_0x4ac093(0xa07)](this,_0x1c3e47,_0x34af7c);if(_0x5057fd)_0x1c3e47=_0x1a0e7c;}else this[_0x4ac093(0x5e1)]('abnormal');}let _0x4cebd9=VisuMZ['BattleCore'][_0x4ac093(0x554)](this[_0x4ac093(0x3a4)](),_0x43440c[_0x4ac093(0x9ec)](''));if(VisuMZ[_0x4ac093(0x6c0)]['JS'][_0x4cebd9]){_0x1c3e47=VisuMZ[_0x4ac093(0x6c0)]['JS'][_0x4cebd9][_0x4ac093(0xa07)](this,this[_0x4ac093(0x289)](),_0x34af7c,this[_0x4ac093(0x3a4)](),_0x1c3e47);if(_0x5057fd)_0x1c3e47=_0x1a0e7c;}for(const _0x5c9c14 of this[_0x4ac093(0x289)]()[_0x4ac093(0x2bc)]()){if(!_0x5c9c14)continue;_0x4cebd9=VisuMZ[_0x4ac093(0x6c0)]['createKeyJS'](_0x5c9c14,_0x43440c['format'](_0x4ac093(0x73e)));if(VisuMZ[_0x4ac093(0x6c0)]['JS'][_0x4cebd9]){_0x1c3e47=VisuMZ['BattleCore']['JS'][_0x4cebd9][_0x4ac093(0xa07)](this,this[_0x4ac093(0x289)](),_0x34af7c,_0x5c9c14,_0x1c3e47);if(_0x5057fd)_0x1c3e47=_0x1a0e7c;}}for(const _0x4d75e7 of _0x34af7c[_0x4ac093(0x2bc)]()){if(!_0x4d75e7)continue;_0x4cebd9=VisuMZ[_0x4ac093(0x6c0)][_0x4ac093(0x554)](_0x4d75e7,_0x43440c[_0x4ac093(0x9ec)](_0x4ac093(0xbb6)));if(VisuMZ[_0x4ac093(0x6c0)]['JS'][_0x4cebd9]){_0x1c3e47=VisuMZ[_0x4ac093(0x6c0)]['JS'][_0x4cebd9]['call'](this,this['subject'](),_0x34af7c,_0x4d75e7,_0x1c3e47);if(_0x5057fd)_0x1c3e47=_0x1a0e7c;}}return _0x1c3e47;},Game_Action[_0x45cef8(0x3cf)]['actionBattleCoreJS']=function(_0x3b2c66){const _0x1511a2=_0x45cef8,_0x58f673=this[_0x1511a2(0xc57)]||0x0,_0x21a87f=VisuMZ['BattleCore'][_0x1511a2(0x658)][_0x1511a2(0xb34)],_0x1799a7=_0x3b2c66[_0x1511a2(0x9ec)]('');_0x21a87f[_0x1799a7]&&_0x21a87f[_0x1799a7]['call'](this,_0x58f673);let _0x67ffc7=VisuMZ[_0x1511a2(0x6c0)][_0x1511a2(0x554)](this['item'](),_0x3b2c66);VisuMZ[_0x1511a2(0x6c0)]['JS'][_0x67ffc7]&&VisuMZ['BattleCore']['JS'][_0x67ffc7][_0x1511a2(0xa07)](this,this[_0x1511a2(0x289)](),this[_0x1511a2(0x289)](),this[_0x1511a2(0x3a4)](),_0x58f673);for(const _0xa49997 of this[_0x1511a2(0x289)]()['traitObjects']()){if(_0x1511a2(0x738)===_0x1511a2(0x738)){if(!_0xa49997)continue;_0x67ffc7=VisuMZ[_0x1511a2(0x6c0)][_0x1511a2(0x554)](_0xa49997,_0x3b2c66),VisuMZ[_0x1511a2(0x6c0)]['JS'][_0x67ffc7]&&(_0x1511a2(0xb1b)!==_0x1511a2(0x9e7)?VisuMZ[_0x1511a2(0x6c0)]['JS'][_0x67ffc7][_0x1511a2(0xa07)](this,this[_0x1511a2(0x289)](),this['subject'](),_0xa49997,_0x58f673):_0x5b3b15=!_0x55de08);}else this[_0x1511a2(0x95c)]()?_0x5c6b1f[_0x1511a2(0x6c0)][_0x1511a2(0xc56)]['call'](this):(this[_0x1511a2(0x55d)]=!this[_0x1511a2(0x7f5)]['isHidden'](),!this[_0x1511a2(0x55d)]&&(this[_0x1511a2(0xbc0)]=0x0));}},Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0x5d9)]=function(){const _0xe81ba3=_0x45cef8;return VisuMZ[_0xe81ba3(0x6c0)][_0xe81ba3(0x658)][_0xe81ba3(0xb34)][_0xe81ba3(0x211)]['call'](this);},Game_Action[_0x45cef8(0x3cf)]['allowRandomSpeed']=function(){const _0x2ee0c9=_0x45cef8;return VisuMZ[_0x2ee0c9(0x6c0)]['Settings'][_0x2ee0c9(0xb34)][_0x2ee0c9(0x399)];},Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0x8f1)]=function(){const _0xe7cdae=_0x45cef8;return this[_0xe7cdae(0x3a4)]()[_0xe7cdae(0xbfd)][_0xe7cdae(0x291)](/<JS TARGETS>/i);},Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0x847)]=function(){const _0x5e0d61=_0x45cef8;if(!this[_0x5e0d61(0xc60)]&&this['subject']()[_0x5e0d61(0x6ba)]())return![];if(this[_0x5e0d61(0x8f1)]())return!![];return typeof this['item']()[_0x5e0d61(0xa27)]==='string';},VisuMZ[_0x45cef8(0x6c0)]['Game_Action_isForOpponent']=Game_Action[_0x45cef8(0x3cf)]['isForOpponent'],Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0x852)]=function(){const _0x33064c=_0x45cef8;if(this[_0x33064c(0x847)]()&&!this[_0x33064c(0x8f1)]())return this[_0x33064c(0x734)]();else{if('vrZKT'!==_0x33064c(0x247))return VisuMZ[_0x33064c(0x6c0)][_0x33064c(0xc53)]['call'](this);else{if(_0x3e1522[_0x33064c(0xc69)](_0x29815d))return!![];return![];}}},Game_Action[_0x45cef8(0x3cf)]['isForOpponentBattleCore']=function(){const _0x59a653=_0x45cef8,_0x5592c1=this[_0x59a653(0x3a4)]()[_0x59a653(0xa27)];return _0x5592c1['match'](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ['BattleCore'][_0x45cef8(0x5ca)]=Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0x842)],Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0x842)]=function(){const _0x27f99b=_0x45cef8;return this[_0x27f99b(0x847)]()&&!this['isCustomBattleScope']()?this[_0x27f99b(0xd0a)]():VisuMZ[_0x27f99b(0x6c0)][_0x27f99b(0x5ca)][_0x27f99b(0xa07)](this);},Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0xd0a)]=function(){const _0x2031b0=_0x45cef8,_0x498d61=this[_0x2031b0(0x3a4)]()[_0x2031b0(0xa27)];return _0x498d61[_0x2031b0(0x291)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ['BattleCore'][_0x45cef8(0xa03)]=Game_Action[_0x45cef8(0x3cf)]['isForRandom'],Game_Action[_0x45cef8(0x3cf)]['isForRandom']=function(){const _0x18fdc2=_0x45cef8;if(this[_0x18fdc2(0x847)]()&&!this[_0x18fdc2(0x8f1)]())return this['isForRandomBattleCore']();else{if(_0x18fdc2(0xae7)==='nvljx')_0x3850d5[_0x18fdc2(0x6c0)]['ParseItemNotetags']&&_0xa627a8[_0x18fdc2(0x6c0)][_0x18fdc2(0x299)][_0x18fdc2(0xa07)](this,_0x2396b3),_0x1ec2b7[_0x18fdc2(0x6c0)][_0x18fdc2(0xc2d)](_0x1eb5ec),_0x520662['BattleCore'][_0x18fdc2(0x8ef)](_0x5977db);else return VisuMZ['BattleCore'][_0x18fdc2(0xa03)][_0x18fdc2(0xa07)](this);}},Game_Action[_0x45cef8(0x3cf)]['isForRandomBattleCore']=function(){const _0x453bfd=_0x45cef8,_0x1dd2e4=this['item']()[_0x453bfd(0xa27)];return _0x1dd2e4['match'](/(?:RAND|RANDOM)/i);},VisuMZ['BattleCore'][_0x45cef8(0x87c)]=Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0xc1b)],Game_Action['prototype']['needsSelection']=function(){const _0x26172d=_0x45cef8;return this['isBattleCoreTargetScope']()&&!this[_0x26172d(0x8f1)]()?this[_0x26172d(0x4d1)]():VisuMZ['BattleCore'][_0x26172d(0x87c)]['call'](this);},Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0x4d1)]=function(){const _0x4f3163=_0x45cef8,_0x5f296c=this[_0x4f3163(0x3a4)]()[_0x4f3163(0xa27)];if(_0x5f296c[_0x4f3163(0x291)](/RANDOM/i))return![];if(_0x5f296c[_0x4f3163(0x291)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x5f296c['match'](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ[_0x4f3163(0x6c0)][_0x4f3163(0x87c)][_0x4f3163(0xa07)](this);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x9dc)]=Game_Action[_0x45cef8(0x3cf)]['makeTargets'],Game_Action['prototype'][_0x45cef8(0x49a)]=function(){const _0x507237=_0x45cef8;let _0x288f5b=[];if(this[_0x507237(0x847)]())_0x288f5b=this['makeTargetsBattleCore']();else{if(_0x507237(0x8c2)!==_0x507237(0x8c2)){if(!_0x27ea8c[_0x507237(0x6c0)][_0x507237(0x658)][_0x507237(0xcbb)][_0x507237(0xb4a)])return;_0x9008cf[_0x507237(0x6c0)][_0x507237(0x97f)][_0x507237(0xa07)](this,_0x3d9add);}else _0x288f5b=VisuMZ[_0x507237(0x6c0)][_0x507237(0x9dc)][_0x507237(0xa07)](this);}return _0x288f5b=this['applyTargetFilters'](_0x288f5b),_0x288f5b;},Game_Action['prototype'][_0x45cef8(0xa7f)]=function(){const _0x399240=_0x45cef8;let _0x3c5ce4=[];const _0x3eae42=String(this[_0x399240(0x3a4)]()['scope']),_0x38789f=VisuMZ[_0x399240(0x6c0)][_0x399240(0x554)](this[_0x399240(0x3a4)](),_0x399240(0x2d1));if(VisuMZ[_0x399240(0x6c0)]['JS'][_0x38789f]){_0x3c5ce4=VisuMZ[_0x399240(0x6c0)][_0x399240(0x9dc)][_0x399240(0xa07)](this);const _0x559cc8=VisuMZ['BattleCore'][_0x399240(0x554)](this[_0x399240(0x3a4)](),'Targets');return _0x3c5ce4=VisuMZ[_0x399240(0x6c0)]['JS'][_0x559cc8][_0x399240(0xa07)](this,this[_0x399240(0x289)](),_0x3c5ce4),this[_0x399240(0x83e)](_0x3c5ce4);}if(_0x3eae42[_0x399240(0x291)](/(\d+) RANDOM ANY/i)){let _0x484af6=Number(RegExp['$1']);while(_0x484af6--){const _0x3986ee=Math[_0x399240(0xa4d)](0x2)===0x0?this['opponentsUnit']():this['friendsUnit']();_0x3c5ce4['push'](_0x3986ee[_0x399240(0xa64)]());}return this[_0x399240(0x83e)](_0x3c5ce4);}if(_0x3eae42['match'](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){if('hoamj'!==_0x399240(0x913))return this[_0x399240(0x84b)]()['anchorX'];else{let _0x495e7a=Number(RegExp['$1']);while(_0x495e7a--){if(_0x399240(0xa12)!==_0x399240(0x2b8))_0x3c5ce4[_0x399240(0x287)](this[_0x399240(0x96a)]()[_0x399240(0xa64)]());else return 0x0;}return this['repeatTargets'](_0x3c5ce4);}}if(_0x3eae42['match'](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x616e37=Number(RegExp['$1']);while(_0x616e37--){_0x3c5ce4[_0x399240(0x287)](this[_0x399240(0xa15)]()[_0x399240(0xa64)]());}return this['repeatTargets'](_0x3c5ce4);}if(_0x3eae42[_0x399240(0x291)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x399240(0xb76)!=='EeRrX'?(_0x3c5ce4[_0x399240(0x287)](...this[_0x399240(0xa15)]()[_0x399240(0x214)]()[_0x399240(0x4db)](_0x2a81a0=>_0x2a81a0!==this['subject']())),this[_0x399240(0x83e)](_0x3c5ce4)):_0x55dcb5(_0x2b1bf3['$1']);return VisuMZ['BattleCore'][_0x399240(0x9dc)][_0x399240(0xa07)](this);},Game_Action['prototype'][_0x45cef8(0xb26)]=function(_0x5ca59e){const _0x43f1a4=_0x45cef8,_0x3ae337=[];for(let _0x16e21e=0x0;_0x16e21e<this[_0x43f1a4(0x5b8)]();_0x16e21e++){_0x3ae337[_0x43f1a4(0x287)](_0x5ca59e[_0x43f1a4(0xa64)]());}return _0x3ae337;},Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0xc82)]=function(_0x51b45b){const _0x721038=_0x45cef8;if(!this[_0x721038(0x3a4)]())return _0x51b45b;const _0x3e5bdd=this[_0x721038(0x3a4)]()['note'];return _0x3e5bdd['match'](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0x51b45b[_0x721038(0xcad)](this[_0x721038(0x289)]()),_0x51b45b;},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x4ee)]=Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0x1de)],Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0x1de)]=function(_0x4120ef,_0x409a38){const _0x5d819f=_0x45cef8;VisuMZ[_0x5d819f(0x6c0)][_0x5d819f(0x4ee)]['call'](this,_0x4120ef,_0x409a38);if(!_0x4120ef[_0x5d819f(0xc49)]())return;for(const _0x46aea9 of this[_0x5d819f(0x289)]()['attackStates']()){if('YxgBI'!==_0x5d819f(0x1dc))return this[_0x5d819f(0x4eb)]();else{if(_0x46aea9===_0x4120ef[_0x5d819f(0xa3c)]()){let _0x1ecbb4=_0x409a38[_0x5d819f(0x715)];_0x1ecbb4*=_0x4120ef[_0x5d819f(0x85f)](_0x46aea9),_0x1ecbb4*=this[_0x5d819f(0x289)]()['attackStatesRate'](_0x46aea9),_0x1ecbb4*=this['lukEffectRate'](_0x4120ef);if(Math['random']()<_0x1ecbb4){if(_0x5d819f(0x823)===_0x5d819f(0x6fa)){if(!_0x2e289e['isSceneBattle']())return;if(!_0x5e41fd['VisuMZ_2_BattleSystemSTB'])return;if(!_0x36705d['isSTB']())return;_0x4f225c['ConvertParams'](_0xdd84cd,_0x476146);const _0x1314e6=_0x11de74[_0x5d819f(0x5a2)];_0x2d3f4f[_0x5d819f(0x8af)]&&_0x3e2511['_subject'][_0x5d819f(0xb30)](_0x1314e6);}else _0x4120ef[_0x5d819f(0x40d)]=!![],this['makeSuccess'](_0x4120ef);}}}}},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x6d5)]=Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0xa13)],Game_Action[_0x45cef8(0x3cf)]['itemEffectAddNormalState']=function(_0x46452a,_0x48ba64){const _0x429148=_0x45cef8;VisuMZ['BattleCore']['Game_Action_itemEffectAddNormalState'][_0x429148(0xa07)](this,_0x46452a,_0x48ba64);if(!_0x46452a[_0x429148(0xc49)]())return;if(_0x48ba64[_0x429148(0x9c9)]!==_0x46452a[_0x429148(0xa3c)]())return;let _0x3c2d10=_0x48ba64['value1'];!this[_0x429148(0x5f4)]()&&(_0x429148(0x7db)===_0x429148(0x9f4)?(this['_lines']['push'](_0x5ef653),this[_0x429148(0x807)](),this[_0x429148(0x5d7)]()):(_0x3c2d10*=_0x46452a[_0x429148(0x85f)](_0x48ba64[_0x429148(0x9c9)]),_0x3c2d10*=this['lukEffectRate'](_0x46452a)));if(Math[_0x429148(0x3aa)]()<_0x3c2d10){if('EMcOI'!==_0x429148(0xad8))return this[_0x429148(0x318)]&&this['_actor'][_0x429148(0x4a4)]();else _0x46452a[_0x429148(0x40d)]=!![],this[_0x429148(0x2ea)](_0x46452a);}},VisuMZ['BattleCore'][_0x45cef8(0x575)]=Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0x41e)],Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0x41e)]=function(){const _0x1ced47=_0x45cef8;VisuMZ[_0x1ced47(0x6c0)][_0x1ced47(0x575)][_0x1ced47(0xa07)](this),this[_0x1ced47(0x9d6)](),this[_0x1ced47(0x907)]();},Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0x9d6)]=function(){const _0x418c64=_0x45cef8;if(!SceneManager['isSceneBattle']())return;const _0x22fd88=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0xd04f42=this[_0x418c64(0x3a4)]()[_0x418c64(0xbfd)][_0x418c64(0x291)](_0x22fd88);if(_0xd04f42)for(const _0x197051 of _0xd04f42){if('JEDJx'===_0x418c64(0xc13)){if(!_0x197051)continue;_0x197051[_0x418c64(0x291)](_0x22fd88);const _0xfc7d99=String(RegExp['$1'])[_0x418c64(0x7e0)](',')[_0x418c64(0x4a9)](_0xb9baf7=>String(_0xb9baf7)[_0x418c64(0x7f3)]()),_0x3b1ff5=_0xfc7d99[_0x418c64(0x4a9)](_0x5b6bb9=>DataManager[_0x418c64(0xb50)](_0x5b6bb9));for(const _0x14a2e9 of _0x3b1ff5){if(_0x418c64(0x918)!==_0x418c64(0x918))return this[_0x418c64(0x7c8)]()&&this[_0x418c64(0x21f)]()[_0x418c64(0x291)](/\$/i);else{const _0x1e2437=$dataCommonEvents[_0x14a2e9];if(_0x1e2437){if('qYydC'!=='qYydC'){if(_0x3a3c91[_0x418c64(0x448)])return![];return _0x41c79c[_0x418c64(0x6c0)][_0x418c64(0x658)][_0x418c64(0xc97)][_0x418c64(0xa22)];}else $gameTemp[_0x418c64(0x7e1)](_0x14a2e9);}}}}else _0x33e8cf[_0x418c64(0x3b1)](_0x418c64(0x2f4),this[_0x418c64(0xb4e)][_0x418c64(0xb9b)](this));}},DataManager[_0x45cef8(0xb50)]=function(_0x1ea840){const _0x5b4a1c=_0x45cef8;_0x1ea840=_0x1ea840[_0x5b4a1c(0x5d3)]()[_0x5b4a1c(0x7f3)](),this['_commonEventIDs']=this['_commonEventIDs']||{};if(this[_0x5b4a1c(0xc3a)][_0x1ea840])return this[_0x5b4a1c(0xc3a)][_0x1ea840];for(const _0x5d316a of $dataCommonEvents){if(!_0x5d316a)continue;let _0x269e47=_0x5d316a['name'];_0x269e47=_0x269e47['replace'](/\x1I\[(\d+)\]/gi,''),_0x269e47=_0x269e47['replace'](/\\I\[(\d+)\]/gi,''),this[_0x5b4a1c(0xc3a)][_0x269e47['toUpperCase']()[_0x5b4a1c(0x7f3)]()]=_0x5d316a['id'];}return this[_0x5b4a1c(0xc3a)][_0x1ea840]||0x0;},Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0x907)]=function(){const _0x1acadd=_0x45cef8;if(!SceneManager[_0x1acadd(0xc83)]())return;const _0x3fec0a=VisuMZ[_0x1acadd(0x6c0)][_0x1acadd(0x658)][_0x1acadd(0xb34)];if(_0x3fec0a['SwitchCritical']){if(_0x1acadd(0x3ce)!=='HfoLA')$gameSwitches['setValue'](_0x3fec0a['SwitchCritical'],![]);else{if(this[_0x1acadd(0x29f)]===_0x3cfaf1)this[_0x1acadd(0x93f)]();if(!_0x5de4de)return;if(this[_0x1acadd(0x29f)][_0x1acadd(0x2b1)](_0x5a1437))return;this[_0x1acadd(0x29f)][_0x1acadd(0x287)](_0x4eef54),this['_defeatedEnemies'][_0x1acadd(0x52a)]((_0x3630de,_0x34d158)=>_0x3630de-_0x34d158);}}if(_0x3fec0a[_0x1acadd(0xa1c)]){if(_0x1acadd(0x8ba)===_0x1acadd(0x8ba))$gameSwitches[_0x1acadd(0x83a)](_0x3fec0a['SwitchMissEvade'],![]);else{const _0x5cf48b=this[_0x1acadd(0x6e8)]();if(['xp']['includes'](_0x5cf48b)&&!_0x5e9f87[_0x1acadd(0xc02)]()){this['setCursorRect'](0x0,0x0,0x0,0x0);return;}_0xce53e8['prototype']['refreshCursor'][_0x1acadd(0xa07)](this);}}if(_0x3fec0a[_0x1acadd(0x7d2)]){if('ePoIg'!==_0x1acadd(0x431))$gameVariables[_0x1acadd(0x83a)](_0x3fec0a[_0x1acadd(0x7d2)],0x0);else return _0x17cd0e[_0x1acadd(0x6c0)][_0x1acadd(0x87c)][_0x1acadd(0xa07)](this);}_0x3fec0a[_0x1acadd(0x694)]&&(_0x1acadd(0xb0f)===_0x1acadd(0xb0f)?$gameVariables[_0x1acadd(0x83a)](_0x3fec0a[_0x1acadd(0x694)],0x0):this[_0x1acadd(0x43f)]());},Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0xaf7)]=function(_0x17fca9){const _0x5c7e75=_0x45cef8;if(!SceneManager[_0x5c7e75(0xc83)]())return;if(!_0x17fca9)return;const _0x8082d=_0x17fca9[_0x5c7e75(0x238)](),_0x18d895=VisuMZ[_0x5c7e75(0x6c0)][_0x5c7e75(0x658)][_0x5c7e75(0xb34)];_0x18d895[_0x5c7e75(0xa38)]&&_0x8082d['critical']&&$gameSwitches[_0x5c7e75(0x83a)](_0x18d895[_0x5c7e75(0xa38)],!![]);_0x18d895[_0x5c7e75(0xa1c)]&&(_0x8082d[_0x5c7e75(0x961)]||_0x8082d[_0x5c7e75(0x34b)])&&$gameSwitches[_0x5c7e75(0x83a)](_0x18d895[_0x5c7e75(0xa1c)],!![]);if(_0x18d895[_0x5c7e75(0x7d2)]){if(_0x5c7e75(0x93b)===_0x5c7e75(0x93b)){let _0x411956=$gameVariables['value'](_0x18d895[_0x5c7e75(0x7d2)]);if(_0x8082d[_0x5c7e75(0x3de)]>0x0){if(_0x5c7e75(0x78c)===_0x5c7e75(0x78c))_0x411956+=Math[_0x5c7e75(0x319)](_0x8082d[_0x5c7e75(0x3de)]);else{let _0xb25d44=0x0;this['_baseLineStack'][_0x5c7e75(0xcc5)]>0x0&&(_0xb25d44=this[_0x5c7e75(0x9f0)][this[_0x5c7e75(0x9f0)][_0x5c7e75(0xcc5)]-0x1]),this[_0x5c7e75(0x1e4)]['length']>_0xb25d44?this[_0x5c7e75(0xcfe)]():this[_0x5c7e75(0x5d7)]();}}$gameVariables['setValue'](_0x18d895[_0x5c7e75(0x7d2)],_0x411956);}else return _0x930c39[_0x4a0b87];}if(_0x18d895['VariableHeal']){if('aMJls'!==_0x5c7e75(0xaa1))this[_0x5c7e75(0x553)]();else{let _0xf74451=$gameVariables[_0x5c7e75(0x28c)](_0x18d895[_0x5c7e75(0x694)]);_0x8082d[_0x5c7e75(0x3de)]<0x0&&(_0xf74451+=Math['abs'](_0x8082d[_0x5c7e75(0x3de)])),$gameVariables['setValue'](_0x18d895['VariableHeal'],_0xf74451);}}},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x5e2)]=Game_BattlerBase[_0x45cef8(0x3cf)]['initMembers'],Game_BattlerBase[_0x45cef8(0x3cf)][_0x45cef8(0x55a)]=function(){const _0x334fbf=_0x45cef8;VisuMZ['BattleCore'][_0x334fbf(0x5e2)][_0x334fbf(0xa07)](this),this[_0x334fbf(0xbd8)]();},Game_BattlerBase['prototype'][_0x45cef8(0xbd8)]=function(){const _0x290cb5=_0x45cef8;this[_0x290cb5(0x54b)]=![];},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x4f3)]=Game_BattlerBase[_0x45cef8(0x3cf)][_0x45cef8(0x807)],Game_BattlerBase[_0x45cef8(0x3cf)]['refresh']=function(){const _0x891151=_0x45cef8;this[_0x891151(0x76d)]={},VisuMZ[_0x891151(0x6c0)][_0x891151(0x4f3)]['call'](this);},Game_BattlerBase[_0x45cef8(0x3cf)][_0x45cef8(0x5e6)]=function(_0x40b16f){return this['_cache']=this['_cache']||{},this['_cache'][_0x40b16f]!==undefined;},Game_BattlerBase['prototype'][_0x45cef8(0x3cc)]=function(){const _0x768f9b=_0x45cef8;if(this[_0x768f9b(0x76d)][_0x768f9b(0x3cc)]!==undefined)return this[_0x768f9b(0x76d)][_0x768f9b(0x3cc)];const _0x423512=/<DAMAGE CAP:[ ](\d+)>/i,_0x5dd029=this[_0x768f9b(0x2bc)]()['map'](_0x5579f4=>_0x5579f4&&_0x5579f4['note'][_0x768f9b(0x291)](_0x423512)?Number(RegExp['$1']):0x0);let _0x14498a=_0x5dd029['length']>0x0?Math[_0x768f9b(0x2ce)](..._0x5dd029):0x0;if(_0x14498a<=0x0)_0x14498a=VisuMZ['BattleCore'][_0x768f9b(0x658)][_0x768f9b(0x28b)][_0x768f9b(0xaf2)];return this[_0x768f9b(0x76d)][_0x768f9b(0x3cc)]=_0x14498a,this[_0x768f9b(0x76d)]['hardDamageCap'];},Game_BattlerBase[_0x45cef8(0x3cf)][_0x45cef8(0x5ea)]=function(){const _0x2f51dc=_0x45cef8;if(this[_0x2f51dc(0x76d)][_0x2f51dc(0x437)]!==undefined)return this[_0x2f51dc(0x76d)][_0x2f51dc(0x437)];let _0x782a91=VisuMZ[_0x2f51dc(0x6c0)][_0x2f51dc(0x658)]['Damage'][_0x2f51dc(0x700)];const _0x10360c=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x5ad9ca=this[_0x2f51dc(0x2bc)]()[_0x2f51dc(0x4a9)](_0x1d57aa=>_0x1d57aa&&_0x1d57aa[_0x2f51dc(0xbfd)]['match'](_0x10360c)?Number(RegExp['$1'])/0x64:0x0);return _0x782a91=_0x5ad9ca[_0x2f51dc(0xbd9)]((_0x5aa30e,_0x27eb39)=>_0x5aa30e+_0x27eb39,_0x782a91),this[_0x2f51dc(0x76d)][_0x2f51dc(0x437)]=_0x782a91,this[_0x2f51dc(0x76d)]['softDamageCap']['clamp'](0.01,0x1);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x275)]=Game_BattlerBase[_0x45cef8(0x3cf)][_0x45cef8(0x88c)],Game_BattlerBase[_0x45cef8(0x3cf)][_0x45cef8(0x88c)]=function(){const _0x5d2a7b=_0x45cef8;VisuMZ[_0x5d2a7b(0x6c0)][_0x5d2a7b(0x275)][_0x5d2a7b(0xa07)](this),SceneManager['isSceneBattle']()&&(_0x5d2a7b(0x200)===_0x5d2a7b(0x637)?_0x5624c5[_0x5d2a7b(0x6c0)][_0x5d2a7b(0x299)][_0x5d2a7b(0xa07)](this,_0x27bddb):this['requestMotion']('dead'));},Game_BattlerBase['prototype'][_0x45cef8(0x231)]=function(){const _0x1b5847=_0x45cef8;if(!SceneManager[_0x1b5847(0xc83)]())return null;if(!SceneManager[_0x1b5847(0x9e2)]['_spriteset'])return null;return SceneManager[_0x1b5847(0x9e2)][_0x1b5847(0x78d)][_0x1b5847(0x3d3)](this);},Game_BattlerBase['prototype']['svBattlerAnchorX']=function(){const _0x203824=_0x45cef8;return VisuMZ[_0x203824(0x6c0)]['Settings'][_0x203824(0x970)][_0x203824(0xb9a)];},Game_BattlerBase[_0x45cef8(0x3cf)]['svBattlerAnchorY']=function(){const _0x2b7680=_0x45cef8;return VisuMZ[_0x2b7680(0x6c0)][_0x2b7680(0x658)][_0x2b7680(0x970)]['AnchorY'];},Game_BattlerBase['prototype'][_0x45cef8(0x245)]=function(){const _0x19b00c=_0x45cef8;return this[_0x19b00c(0x98a)]&&this[_0x19b00c(0x98a)]()?VisuMZ[_0x19b00c(0x6c0)][_0x19b00c(0x658)]['Actor'][_0x19b00c(0x954)]:VisuMZ[_0x19b00c(0x6c0)][_0x19b00c(0x658)][_0x19b00c(0xc97)]['Shadow'];},Game_BattlerBase['prototype'][_0x45cef8(0x40b)]=function(){return!![];},Game_BattlerBase[_0x45cef8(0x3cf)][_0x45cef8(0x640)]=function(){return 0x0;},Game_BattlerBase[_0x45cef8(0x3cf)]['battleUIOffsetY']=function(){return 0x0;},Game_BattlerBase[_0x45cef8(0x3cf)]['createBattleUIOffsetX']=function(_0x963043){const _0x163c89=_0x45cef8;if(!_0x963043)return 0x0;let _0x193c63=0x0;const _0xff7c68=_0x963043[_0x163c89(0xbfd)];if(_0xff7c68['match'](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)){if(_0x163c89(0x3f5)===_0x163c89(0x269)){if(this['_forcedBattlers'][_0x163c89(0xcc5)]>0x0){const _0x3ed7be=this[_0x163c89(0x2ed)][_0x163c89(0x817)](),_0x30c1fd=_0x3ed7be[0x0];return _0x30c1fd['_actions']=_0x30c1fd['_actions']||[],_0x30c1fd[_0x163c89(0xc7f)][0x0]=_0x3ed7be[0x1],_0x30c1fd;}else return this[_0x163c89(0x43b)][_0x163c89(0x817)]();}else _0x193c63+=Number(RegExp['$1']);}if(_0xff7c68['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x163c89(0x60c)===_0x163c89(0x204))return _0x11ed7b['prototype']['isOkEnabled'][_0x163c89(0xa07)](this)&&this[_0x163c89(0x5c1)]();else _0x193c63+=Number(RegExp['$1']);}return _0x193c63;},Game_BattlerBase['prototype']['createBattleUIOffsetY']=function(_0x1b26cc){const _0xe57969=_0x45cef8;if(!_0x1b26cc)return 0x0;let _0x35cc5d=0x0;const _0x43b7ab=_0x1b26cc[_0xe57969(0xbfd)];return _0x43b7ab['match'](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x35cc5d+=Number(RegExp['$1'])),_0x43b7ab[_0xe57969(0x291)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x35cc5d+=Number(RegExp['$2'])),_0x35cc5d;},VisuMZ['BattleCore'][_0x45cef8(0x33a)]=Game_BattlerBase['prototype']['isStateResist'],Game_BattlerBase[_0x45cef8(0x3cf)][_0x45cef8(0x9c2)]=function(_0x2ab351){const _0x23aa12=_0x45cef8;if(_0x2ab351===this[_0x23aa12(0xa3c)]()&&this[_0x23aa12(0xc49)]())return!![];return VisuMZ['BattleCore']['Game_BattlerBase_isStateResist'][_0x23aa12(0xa07)](this,_0x2ab351);},Game_BattlerBase[_0x45cef8(0x3cf)]['isImmortal']=function(){const _0x5cec94=_0x45cef8;return this[_0x5cec94(0x54b)];},Game_BattlerBase[_0x45cef8(0x3cf)][_0x45cef8(0x82a)]=function(_0x590304){const _0x3358a2=_0x45cef8;_0x590304?this[_0x3358a2(0x8bb)]():this[_0x3358a2(0x67b)]();},Game_BattlerBase[_0x45cef8(0x3cf)][_0x45cef8(0x8bb)]=function(){const _0x2f6a72=_0x45cef8;if(this[_0x2f6a72(0x61e)]())return;this[_0x2f6a72(0x54b)]=!![],this[_0x2f6a72(0x40d)]=![];},Game_BattlerBase[_0x45cef8(0x3cf)][_0x45cef8(0x67b)]=function(){const _0x5ae935=_0x45cef8,_0xf9e0f1=this[_0x5ae935(0xa9a)]();this[_0x5ae935(0x54b)]=![],_0xf9e0f1&&this[_0x5ae935(0x40d)]&&this[_0x5ae935(0x88c)](),this[_0x5ae935(0x40d)]=![],this['refresh'](),this[_0x5ae935(0x61e)]()&&_0xf9e0f1&&(this['performCollapse'](),this[_0x5ae935(0x339)]());},VisuMZ[_0x45cef8(0x6c0)]['Game_Action_numRepeats']=Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0x59d)],Game_Action[_0x45cef8(0x3cf)]['numRepeats']=function(){const _0x54b1bd=_0x45cef8;if(this['item']())return'UGfAg'!==_0x54b1bd(0xaac)?_0x411813[_0x54b1bd(0x6c0)]['Game_Action_isForRandom'][_0x54b1bd(0xa07)](this):VisuMZ[_0x54b1bd(0x6c0)]['Game_Action_numRepeats']['call'](this);else{if(_0x54b1bd(0x435)===_0x54b1bd(0x435))return 0x0;else this[_0x54b1bd(0x4c3)]=_0x17a99e,this[_0x54b1bd(0xa79)]=_0x5398e6,this[_0x54b1bd(0x587)]=_0x5a6daf,this[_0x54b1bd(0x5f6)]=_0x50dd44,this['_homeEasing']=_0x23361a,_0x4383de<=0x0&&this[_0x54b1bd(0x8bf)]();}},VisuMZ['BattleCore']['Game_Action_setAttack']=Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0xc73)],Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0xc73)]=function(){const _0x40deab=_0x45cef8;this['subject']()&&this['subject']()[_0x40deab(0x7ba)]()?VisuMZ[_0x40deab(0x6c0)][_0x40deab(0x317)]['call'](this):this['clear']();},VisuMZ['BattleCore']['Game_BattlerBase_canAttack']=Game_BattlerBase[_0x45cef8(0x3cf)][_0x45cef8(0x7ba)],Game_BattlerBase[_0x45cef8(0x3cf)][_0x45cef8(0x7ba)]=function(){const _0xb24ba3=_0x45cef8;if(!this[_0xb24ba3(0x7fd)]())return![];return VisuMZ[_0xb24ba3(0x6c0)][_0xb24ba3(0x386)]['call'](this);},Game_BattlerBase[_0x45cef8(0x3cf)][_0x45cef8(0x7fd)]=function(){const _0x2ef0f7=_0x45cef8;for(const _0x1290ca of this['traitObjects']()){if(!_0x1290ca)continue;if(_0x1290ca[_0x2ef0f7(0xbfd)]['match'](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x45cef8(0x6c0)]['Game_Action_setGuard']=Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0x98c)],Game_Action[_0x45cef8(0x3cf)][_0x45cef8(0x98c)]=function(){const _0x63e194=_0x45cef8;this[_0x63e194(0x289)]()['canGuard']()&&('glJia'!=='glJia'?(this[_0x63e194(0x5d8)]=new _0x26570b(),_0x2ef507[_0x63e194(0x3d2)]?this['addChild'](this['_uiContainer']):this[_0x63e194(0x69f)][_0x63e194(0x5b6)](this['_uiContainer']),_0x1eeb6d['_scene']['_uiContainer']=this[_0x63e194(0x5d8)]):VisuMZ['BattleCore']['Game_Action_setGuard'][_0x63e194(0xa07)](this));},VisuMZ[_0x45cef8(0x6c0)]['Game_BattlerBase_canGuard']=Game_BattlerBase[_0x45cef8(0x3cf)]['canGuard'],Game_BattlerBase[_0x45cef8(0x3cf)][_0x45cef8(0xba9)]=function(){const _0x190ac8=_0x45cef8;if(!this[_0x190ac8(0x274)]())return![];return VisuMZ[_0x190ac8(0x6c0)][_0x190ac8(0xb60)][_0x190ac8(0xa07)](this);},Game_BattlerBase[_0x45cef8(0x3cf)][_0x45cef8(0x274)]=function(){const _0x25040b=_0x45cef8;for(const _0x5b0f97 of this[_0x25040b(0x2bc)]()){if(!_0x5b0f97)continue;if(_0x5b0f97[_0x25040b(0xbfd)][_0x25040b(0x291)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase['prototype'][_0x45cef8(0x4a4)]=function(){const _0x579226=_0x45cef8;for(const _0x305d5e of this[_0x579226(0x2bc)]()){if('QAbqp'==='QAbqp'){if(!_0x305d5e)continue;if(_0x305d5e[_0x579226(0xbfd)][_0x579226(0x291)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}else this['parseForcedGameTroopSettingsBattleCore'](_0x5abd3f['note']);}return!![];},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x599)]=function(){const _0x49961f=_0x45cef8;return VisuMZ[_0x49961f(0x6c0)][_0x49961f(0x658)]['Mechanics'][_0x49961f(0x399)];},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x340)]=Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0xbf5)],Game_Battler['prototype']['regenerateAll']=function(){const _0x13e353=_0x45cef8;if(SceneManager['isSceneBattle']()){if(BattleManager[_0x13e353(0xc74)]()){if('cQKIn'===_0x13e353(0x5a4)){if(this[_0x13e353(0x8d4)]()<=0x0)return;}else return _0xb61a06[_0x13e353(0x6b4)]?this['targetDistortionSpritePosition'](_0xd2b46d):_0x1eb015[_0x13e353(0x6c0)][_0x13e353(0x50b)][_0x13e353(0xa07)](this,_0x59fc3e);}else{if($gameTroop[_0x13e353(0x8d4)]()<=0x0)return;}}if(SceneManager[_0x13e353(0xc83)]()&&BattleManager[_0x13e353(0xc74)]()&&this[_0x13e353(0x42f)]===Graphics['frameCount'])return;this[_0x13e353(0x42f)]=Graphics[_0x13e353(0x91f)],SceneManager['isSceneBattle']()&&this['processBattleCoreJS'](_0x13e353(0x1f0)),VisuMZ[_0x13e353(0x6c0)][_0x13e353(0x340)][_0x13e353(0xa07)](this),SceneManager[_0x13e353(0xc83)]()&&(_0x13e353(0x2e8)!==_0x13e353(0x78e)?(this['regenerateAllBattleCore'](),this[_0x13e353(0x315)](_0x13e353(0x779))):this[_0x13e353(0x6b4)][_0x13e353(0x5b6)](this[_0x13e353(0xbef)]));},Game_Battler[_0x45cef8(0x3cf)]['regenerateAllBattleCore']=function(){const _0x182e16=_0x45cef8;if(SceneManager[_0x182e16(0xc83)]())for(const _0x2f564b of this['traitObjects']()){if(!_0x2f564b)continue;this[_0x182e16(0x6f5)](_0x2f564b);}},Game_Battler[_0x45cef8(0x3cf)]['onRegeneratePlayStateAnimation']=function(_0x310b48){const _0x45ac2f=_0x45cef8;if(!Imported[_0x45ac2f(0x22d)])return;if(!SceneManager[_0x45ac2f(0xc83)]())return;if(this['isDead']())return;if(this[_0x45ac2f(0x4a1)]())return;if(_0x310b48[_0x45ac2f(0xbfd)][_0x45ac2f(0x291)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){if(_0x45ac2f(0x258)!==_0x45ac2f(0x258)){const _0x51952d=_0x3174d9(_0x1c2194['$1']);_0x51952d!==_0x2b1f4e[_0x473e25]['version']&&(_0x5b37b7('%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.'[_0x45ac2f(0x9ec)](_0x19ab2d,_0x51952d)),_0x10f27f['exit']());}else{const _0x2b9dff=Number(RegExp['$1']);$gameTemp[_0x45ac2f(0xaf6)]([this],_0x2b9dff,![],![]);}}},VisuMZ['BattleCore'][_0x45cef8(0x5ab)]=Game_Battler['prototype'][_0x45cef8(0x381)],Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x381)]=function(){const _0x204217=_0x45cef8;this['processBattleCoreJS'](_0x204217(0x493)),VisuMZ[_0x204217(0x6c0)][_0x204217(0x5ab)][_0x204217(0xa07)](this),this[_0x204217(0x315)]('PostStartTurnJS');},VisuMZ['BattleCore']['Game_Battler_onTurnEnd']=Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x7e9)],Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x7e9)]=function(){const _0xc8e7fd=_0x45cef8;this[_0xc8e7fd(0x315)]('PreEndTurnJS'),VisuMZ[_0xc8e7fd(0x6c0)][_0xc8e7fd(0x926)][_0xc8e7fd(0xa07)](this),this['processBattleCoreJS'](_0xc8e7fd(0x626));},Game_Battler['prototype'][_0x45cef8(0x315)]=function(_0x50b43c){const _0x2be89f=_0x45cef8;if(this[_0x2be89f(0xa52)]||this[_0x2be89f(0xce4)])return;const _0x1dc6a7=VisuMZ[_0x2be89f(0x6c0)][_0x2be89f(0x658)][_0x2be89f(0xb34)];if(_0x1dc6a7[_0x50b43c])_0x1dc6a7[_0x50b43c][_0x2be89f(0xa07)](this);for(const _0x15a615 of this[_0x2be89f(0x2bc)]()){if(!_0x15a615)continue;key=VisuMZ[_0x2be89f(0x6c0)][_0x2be89f(0x554)](_0x15a615,_0x50b43c);if(VisuMZ[_0x2be89f(0x6c0)]['JS'][key]){if(_0x2be89f(0xc93)===_0x2be89f(0x9de))return!this[_0x2be89f(0x3f8)]();else VisuMZ['BattleCore']['JS'][key]['call'](this,this,this,_0x15a615,0x0);}}},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x75d)]=function(){const _0x68eb8=_0x45cef8;return VisuMZ[_0x68eb8(0x6c0)][_0x68eb8(0x658)][_0x68eb8(0x970)][_0x68eb8(0xcff)]||![];},Game_Battler[_0x45cef8(0x3cf)]['isChanting']=function(){const _0x2d26ee=_0x45cef8;if(this[_0x2d26ee(0xaa8)]()){if(_0x2d26ee(0x4cd)!==_0x2d26ee(0x9ea)){if(this[_0x2d26ee(0x75d)]()){if(_0x2d26ee(0xcf1)!=='WyeHN'){if(this[_0x2d26ee(0xc7f)][_0x2d26ee(0x6a6)](_0x47d6a5=>_0x47d6a5[_0x2d26ee(0x3a4)]()&&_0x47d6a5['isMagical']()))return!![];}else _0x3b8835[_0x2d26ee(0x28b)][_0x2d26ee(0x6c5)]=_0x2d26ee(0xcb3);}else{if(this[_0x2d26ee(0xc7f)]['some'](_0x292c77=>_0x292c77[_0x2d26ee(0x3a4)]()&&_0x292c77[_0x2d26ee(0xa88)]()))return!![];}}else this[_0x2d26ee(0xbd0)]=this[_0x2d26ee(0xb19)]()[_0x2d26ee(0xd00)](),this[_0x2d26ee(0x807)]();}if(BattleManager['isTpb']()&&this[_0x2d26ee(0x7c6)]===_0x2d26ee(0x740)){if(_0x2d26ee(0x799)===_0x2d26ee(0x799))return this[_0x2d26ee(0x75d)]()?this[_0x2d26ee(0xca0)]()&&this[_0x2d26ee(0xca0)]()[_0x2d26ee(0x3a4)]()&&this[_0x2d26ee(0xca0)]()[_0x2d26ee(0x9c6)]():this[_0x2d26ee(0xca0)]()&&this[_0x2d26ee(0xca0)]()[_0x2d26ee(0x3a4)]()&&this[_0x2d26ee(0xca0)]()[_0x2d26ee(0xa88)]();else{if(!this[_0x2d26ee(0x3a4)]()['damage'][_0x2d26ee(0x766)])return 0x0;let _0x1668d0=_0x9b5acb[_0x2d26ee(0x6c0)]['Settings'][_0x2d26ee(0x28b)][_0x2d26ee(0xb3d)][_0x2d26ee(0xa07)](this,_0x59b65e);return _0x1668d0=this[_0x2d26ee(0x45b)][_0x2d26ee(0xccc)]*_0x1668d0+this['_multipliers'][_0x2d26ee(0xbe2)],_0x1668d0;}}return![];},Game_Battler[_0x45cef8(0x3cf)]['isCharging']=function(){const _0x8e4ade=_0x45cef8;if(BattleManager[_0x8e4ade(0xc74)]()&&this[_0x8e4ade(0x7c6)]===_0x8e4ade(0x740)){if(this['chantStyle']()){if(_0x8e4ade(0xcb5)===_0x8e4ade(0x993))_0xb58eb9=_0x5b8489[_0x8e4ade(0x332)](/\x1I\[(\d+)\]/gi,''),_0x4aafa1=_0x383765[_0x8e4ade(0x332)](/\\I\[(\d+)\]/gi,'');else return this[_0x8e4ade(0xca0)]()&&this['currentAction']()[_0x8e4ade(0x3a4)]()&&!this['currentAction']()[_0x8e4ade(0x9c6)]();}else{if(_0x8e4ade(0x3ee)===_0x8e4ade(0x3ee))return this['currentAction']()&&this[_0x8e4ade(0xca0)]()[_0x8e4ade(0x3a4)]()&&!this[_0x8e4ade(0xca0)]()[_0x8e4ade(0xa88)]();else _0x4d4d7d[_0x8e4ade(0x55e)](),_0x574f12['applyForcedGameTroopSettingsBattleCore'](_0x379fcc),_0x7f5e5c[_0x8e4ade(0x6c0)][_0x8e4ade(0x61b)][_0x8e4ade(0xa07)](this,_0x43074e),this[_0x8e4ade(0xb47)]();}}return![];},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xccd)]=Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x234)],Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x234)]=function(){const _0x3622c5=_0x45cef8;VisuMZ[_0x3622c5(0x6c0)][_0x3622c5(0xccd)]['call'](this),this[_0x3622c5(0xbe1)]=[];},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x789)]=function(){const _0x21de41=_0x45cef8;if(!this[_0x21de41(0xbe1)])this[_0x21de41(0x234)]();return this['_damagePopupArray']['length']>0x0;},Game_Battler['prototype'][_0x45cef8(0xba1)]=function(){const _0x23644d=_0x45cef8;if(!SceneManager[_0x23644d(0xc83)]())return;if(!this[_0x23644d(0xbe1)])this['clearDamagePopup']();this[_0x23644d(0x2d2)]();const _0x39965a=this[_0x23644d(0x231)]();if(_0x39965a)_0x39965a[_0x23644d(0x61f)]();},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x2d2)]=function(){const _0x2108d8=_0x45cef8,_0x1154e0=this['result']();if(_0x1154e0[_0x2108d8(0x961)]||_0x1154e0[_0x2108d8(0x34b)]){if(_0x2108d8(0xc48)===_0x2108d8(0xc48)){const _0x47123f=JsonEx[_0x2108d8(0x5bf)](_0x1154e0);_0x47123f[_0x2108d8(0xa99)]=![],_0x47123f[_0x2108d8(0x5eb)]=0x0,this['_damagePopupArray'][_0x2108d8(0x287)](_0x47123f);}else this[_0x2108d8(0x287)]('performJump',[_0x50ef7b],_0x12e7eb,_0x5f2c84),this[_0x2108d8(0x287)]('performMoveToTargets',_0x414898,_0x2841f1,_0x2108d8(0x585),_0x213fc1,!![],'Linear',!![]),this[_0x2108d8(0x287)](_0x2108d8(0x8c4),[_0x2eb702],_0x2108d8(0xbcf)),this['push'](_0x2108d8(0x9a0));}if(_0x1154e0[_0x2108d8(0xa99)]){const _0x47e288=JsonEx[_0x2108d8(0x5bf)](_0x1154e0);_0x47e288[_0x2108d8(0x961)]=![],_0x47e288[_0x2108d8(0x34b)]=![],_0x47e288[_0x2108d8(0x5eb)]=0x0,this['_damagePopupArray']['push'](_0x47e288);}if(_0x1154e0[_0x2108d8(0x5eb)]!==0x0){if('CFqdZ'==='CFqdZ'){const _0x25d603=JsonEx[_0x2108d8(0x5bf)](_0x1154e0);_0x25d603[_0x2108d8(0x961)]=![],_0x25d603[_0x2108d8(0x34b)]=![],_0x25d603[_0x2108d8(0xa99)]=![],this['_damagePopupArray'][_0x2108d8(0x287)](_0x25d603);}else{if(!_0x35d370[_0x2108d8(0x6c0)][_0x2108d8(0x658)][_0x2108d8(0xcbb)][_0x2108d8(0x446)])return;_0x3e2355[_0x2108d8(0x6c0)]['Window_BattleLog_displayTpDamage'][_0x2108d8(0xa07)](this,_0x37ff37);}}},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x455)]=function(){const _0x5d6a96=_0x45cef8;if(!this[_0x5d6a96(0xbe1)])this[_0x5d6a96(0x234)]();if(VisuMZ[_0x5d6a96(0x6c0)]['Settings'][_0x5d6a96(0x28b)]['NewPopupBottom']){if(_0x5d6a96(0xb8c)!==_0x5d6a96(0x240))return this['_damagePopupArray']['shift']();else _0xdc7ff5[_0x5d6a96(0x6c0)][_0x5d6a96(0x658)][_0x5d6a96(0x3a6)][_0x5d6a96(0x679)]&&(this[_0x5d6a96(0x7c1)](),this[_0x5d6a96(0x86e)]());}else return this['_damagePopupArray'][_0x5d6a96(0x788)]();},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0xa70)]=function(_0x366d41,_0x150598){const _0x16b686=_0x45cef8;if(!SceneManager[_0x16b686(0xc83)]())return;if(!this['battler']())return;if(_0x366d41[_0x16b686(0xcc5)]<=0x0)return;_0x150598=_0x150598||{},_0x150598[_0x16b686(0x73f)]=_0x150598[_0x16b686(0x73f)]||_0x16b686(0x29b),_0x150598['flashColor']=_0x150598[_0x16b686(0xceb)]||[0x0,0x0,0x0,0x0],_0x150598['flashDuration']=_0x150598[_0x16b686(0x2f7)]||0x0,this['battler']()['setupTextPopup'](_0x366d41,_0x150598);},Game_Battler['prototype'][_0x45cef8(0x9c5)]=function(_0x12cc62,_0x43e20f,_0x40d5f6){const _0x58aa95=_0x45cef8;if(!SceneManager[_0x58aa95(0xc83)]())return;if(!this[_0x58aa95(0x231)]())return;if(_0x43e20f['length']<=0x0)return;_0x40d5f6=_0x40d5f6||{},_0x40d5f6[_0x58aa95(0x73f)]=_0x40d5f6['textColor']||_0x58aa95(0x29b),_0x40d5f6[_0x58aa95(0xceb)]=_0x40d5f6[_0x58aa95(0xceb)]||[0x0,0x0,0x0,0x0],_0x40d5f6[_0x58aa95(0x2f7)]=_0x40d5f6[_0x58aa95(0x2f7)]||0x0,this['battler']()['setupIconTextPopup'](_0x12cc62,_0x43e20f,_0x40d5f6);},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0xa68)]=function(){const _0xabf664=_0x45cef8;if(this[_0xabf664(0x4a1)]())return![];if(this[_0xabf664(0xa9a)]()&&this[_0xabf664(0x608)]())return!![];if(this[_0xabf664(0x724)]()&&this['hasSvBattler']()){if(this['isDead']()&&this['allowCollapse']())return![];}else{if(this[_0xabf664(0x61e)]())return![];}return!![];},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x988)]=Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x54c)],Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x54c)]=function(){const _0x2d8057=_0x45cef8;VisuMZ[_0x2d8057(0x6c0)][_0x2d8057(0x988)][_0x2d8057(0xa07)](this),this[_0x2d8057(0xad0)]();},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x290)]=function(){return!![];},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0xa2d)]=function(){return![];},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xac3)]=Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x210)],Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x210)]=function(_0x217999){const _0x580275=_0x45cef8;VisuMZ[_0x580275(0x6c0)][_0x580275(0xac3)][_0x580275(0xa07)](this,_0x217999),this[_0x580275(0xc12)](_0x217999),this[_0x580275(0x234)]();},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0xc12)]=function(_0x5d4844){const _0x5ac2f0=_0x45cef8;this[_0x5ac2f0(0x6a8)](![]),this['_forcedHomeX']=undefined,this[_0x5ac2f0(0xcb4)]=undefined;},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x59b)]=Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x4fe)],Game_Battler['prototype'][_0x45cef8(0x4fe)]=function(){const _0x5b61f2=_0x45cef8;VisuMZ[_0x5b61f2(0x6c0)][_0x5b61f2(0x59b)][_0x5b61f2(0xa07)](this),this[_0x5b61f2(0xb74)]();},Game_Battler['prototype'][_0x45cef8(0xb74)]=function(){const _0x5da095=_0x45cef8;this[_0x5da095(0x271)]=undefined,this[_0x5da095(0xcb4)]=undefined;},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x44a)]=Game_Battler['prototype'][_0x45cef8(0xcb1)],Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0xcb1)]=function(_0x479510){const _0x3a061e=_0x45cef8;VisuMZ['BattleCore']['Game_Battler_performActionStart'][_0x3a061e(0xa07)](this,_0x479510);if(!_0x479510[_0x3a061e(0x3a2)]()){if('ygOwt'===_0x3a061e(0x4b0)){if(!_0x1bb5c5[_0x3a061e(0xc02)]())return;this[_0x3a061e(0x5c2)]=_0x2377e3;const _0x59f2b9=this[_0x3a061e(0x231)]();if(_0x59f2b9)_0x59f2b9[_0x3a061e(0xbed)]();}else{const _0x2a8327=this[_0x3a061e(0x231)]();_0x2a8327&&_0x2a8327[_0x3a061e(0x668)]();}}this[_0x3a061e(0x6a8)](![]);},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x697)]=function(){const _0xe9de9b=_0x45cef8,_0x85617b=this[_0xe9de9b(0x480)];this[_0xe9de9b(0x480)]=![];if(BattleManager[_0xe9de9b(0x56d)]()&&this[_0xe9de9b(0x660)]()){const _0x175a4b=this['battler']();if(_0x175a4b&&_0x85617b)_0x175a4b['stepForward']();return;}const _0x4d6795=this[_0xe9de9b(0x231)]();if(_0x4d6795)_0x4d6795['stepBack']();this['setBattlerFlip'](![]),this[_0xe9de9b(0x339)]();},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x285)]=function(_0x1fe306){const _0x36be55=_0x45cef8;if(_0x1fe306[_0x36be55(0x8cf)]()){if(_0x36be55(0x87b)!==_0x36be55(0x87b)){const _0x58128b=_0x5d5005['BattleCore'][_0x36be55(0x658)][_0x36be55(0x28b)];this[_0x36be55(0x43e)]=_0x58128b['CriticalColor'][_0x36be55(0xa4c)](0x0),this[_0x36be55(0x675)]=_0x58128b[_0x36be55(0x8d3)];}else this['performAttack']();}else{if(_0x1fe306[_0x36be55(0x3a2)]()){if(_0x36be55(0xb49)===_0x36be55(0xb49))this[_0x36be55(0x8c4)](_0x36be55(0x663));else{this[_0x36be55(0x287)](_0x36be55(0xb37),_0x4acb6b);if(!_0x256aa3['BattleCore'][_0x36be55(0x658)][_0x36be55(0xcbb)][_0x36be55(0x774)])return;this[_0x36be55(0x287)](_0x36be55(0x4b8),_0x175c83[_0x36be55(0x92e)][_0x36be55(0x9ec)](_0x31e935[_0x36be55(0xd00)]()));}}else{if(_0x1fe306[_0x36be55(0x9c6)]())_0x36be55(0x36d)!=='rezMC'?this[_0x36be55(0x8c4)]('spell'):_0xc32a51[_0x36be55(0x287)](_0x36be55(0x79f),_0x3d7eae,_0x2a69fa,!![]);else{if(_0x1fe306['isSkill']()){if([0x1,0x2,0x5,0x6][_0x36be55(0x2b1)](_0x1fe306[_0x36be55(0x3a4)]()['damage']['type'])){if(_0x36be55(0xa1e)===_0x36be55(0xc28))return!![];else this[_0x36be55(0x633)]();}else this[_0x36be55(0x8c4)](_0x36be55(0x5f5));}else _0x1fe306['isItem']()&&this[_0x36be55(0x8c4)]('item');}}}},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x2cc)]=function(){return $dataSystem['attackMotions'][0x0];},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x8f8)]=function(){const _0x3f3a5a=_0x45cef8,_0x1a8957=this[_0x3f3a5a(0x2cc)]();return _0x1a8957?_0x1a8957['weaponImageId']:0x0;},Game_Battler[_0x45cef8(0x3cf)]['performSubstitute']=function(_0x58cdf6){const _0x57b60c=_0x45cef8;if(!$gameSystem[_0x57b60c(0xc02)]())return;const _0x53314e=this[_0x57b60c(0x231)](),_0xd9fa25=_0x58cdf6[_0x57b60c(0x231)]();if(!_0x53314e||!_0xd9fa25)return;const _0x46c8b7=_0xd9fa25[_0x57b60c(0x3c6)],_0x1fac78=_0xd9fa25[_0x57b60c(0x987)];this[_0x57b60c(0x712)](_0x46c8b7,_0x1fac78,0x0,![],_0x57b60c(0x278),-0x1),_0x53314e[_0x57b60c(0xb39)]();const _0x158dc8=VisuMZ['BattleCore'][_0x57b60c(0x658)]['ActionSequence'];let _0x2912ee=(_0xd9fa25[_0x57b60c(0x639)]+_0x53314e[_0x57b60c(0x639)])/0x2;_0x2912ee*=this['isActor']()?0x1:-0x1;let _0x4ee0a7=_0x158dc8['StepDistanceY']*(this[_0x57b60c(0x98a)]()?0x1:-0x1);_0x58cdf6[_0x57b60c(0x9ba)](_0x2912ee,_0x4ee0a7,0x0,![],_0x57b60c(0x278)),_0xd9fa25['updatePosition']();},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x8c4)]=function(_0x2103e6){const _0x308424=_0x45cef8;if(SceneManager[_0x308424(0xc83)]()){if('hNgKl'===_0x308424(0x6c9))this[_0x308424(0x8c4)](_0x308424(0x8fa));else{const _0x46a782=this[_0x308424(0x231)]();if(_0x46a782){if(_0x308424(0x721)!==_0x308424(0x955)){_0x46a782[_0x308424(0x947)](_0x2103e6);if(['swing',_0x308424(0x4c5),'missile'][_0x308424(0x2b1)](_0x2103e6)){if(_0x308424(0xb72)!=='DsDEM'){let _0x46f7d3=0x0;return _0x46f7d3;}else this[_0x308424(0x630)]();}}else this[_0x308424(0x5e1)]('chant');}}}this[_0x308424(0xad0)]();},Game_Battler['prototype']['performWeaponAnimation']=function(){},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0xc16)]=function(_0x6225b3){const _0x2b5cfd=_0x45cef8;if(SceneManager[_0x2b5cfd(0xc83)]()){if('FAxPq'===_0x2b5cfd(0x21c)){const _0x2df15=this[_0x2b5cfd(0x231)]();if(_0x2df15)_0x2df15['forceWeaponAnimation'](_0x6225b3);}else _0x1f50ec[_0x2b5cfd(0x7e1)](_0x577de2['BattleEndEvent']);}},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x974)]=function(){const _0x1fe28d=_0x45cef8;if(SceneManager['isSceneBattle']()){const _0x4c01b8=this[_0x1fe28d(0x8f8)]();this[_0x1fe28d(0xc16)](_0x4c01b8);}},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x54e)]=function(_0x3fbaeb,_0x2c4ea9){const _0x2121eb=_0x45cef8;if(!_0x3fbaeb)return;if(!_0x3fbaeb[_0x2121eb(0x3a4)]())return;if(_0x3fbaeb[_0x2121eb(0x8cf)]())return;if(_0x3fbaeb[_0x2121eb(0x3a2)]())return;if(_0x3fbaeb['isItem']())return;let _0x2f9a47=0x0;const _0x587bcf=VisuMZ[_0x2121eb(0x6c0)][_0x2121eb(0x658)]['ActionSequence'],_0x996702=_0x3fbaeb[_0x2121eb(0x3a4)]()[_0x2121eb(0xbfd)];if(_0x996702[_0x2121eb(0x291)](/<CAST ANIMATION: (\d+)>/i))_0x2f9a47=Number(RegExp['$1']);else{if(_0x996702[_0x2121eb(0x291)](/<NO CAST ANIMATION>/i))return;else{if(_0x3fbaeb['isCertainHit']())_0x2f9a47=_0x587bcf[_0x2121eb(0x373)];else{if(_0x3fbaeb[_0x2121eb(0xcec)]()){if(_0x2121eb(0xa75)===_0x2121eb(0xa75))_0x2f9a47=_0x587bcf[_0x2121eb(0x5fd)];else return _0x193443[_0x2121eb(0x6c0)][_0x2121eb(0x658)]['Enemy']['SmoothImage'];}else _0x3fbaeb[_0x2121eb(0x9c6)]()&&(_0x2f9a47=_0x587bcf[_0x2121eb(0xd08)]);}}}_0x2f9a47>0x0&&$gameTemp[_0x2121eb(0xc5f)]([this],_0x2f9a47,!!_0x2c4ea9);},Game_Battler['prototype'][_0x45cef8(0xb37)]=function(){const _0x2e244e=_0x45cef8;SoundManager[_0x2e244e(0x2fb)]();let _0x81d7a7=VisuMZ[_0x2e244e(0x6c0)][_0x2e244e(0x658)][_0x2e244e(0xa95)][_0x2e244e(0xa31)];if(_0x81d7a7>0x0){if(Imported['VisuMZ_0_CoreEngine'])$gameTemp[_0x2e244e(0xaf6)]([this],_0x81d7a7);else{if(_0x2e244e(0x812)!==_0x2e244e(0x812))return 0x0;else $gameTemp['requestAnimation']([this],_0x81d7a7);}}},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xb20)]=Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x5e8)],Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x5e8)]=function(){const _0x207822=_0x45cef8;VisuMZ[_0x207822(0x6c0)][_0x207822(0xb20)][_0x207822(0xa07)](this),this[_0x207822(0xcd6)]();},VisuMZ[_0x45cef8(0x6c0)]['Game_Battler_performMiss']=Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x452)],Game_Battler['prototype']['performMiss']=function(){const _0xf631c0=_0x45cef8;VisuMZ[_0xf631c0(0x6c0)][_0xf631c0(0x88a)][_0xf631c0(0xa07)](this),this['performFlinch']();},VisuMZ[_0x45cef8(0x6c0)]['Game_Battler_performEvasion']=Game_Battler['prototype'][_0x45cef8(0x21b)],Game_Battler[_0x45cef8(0x3cf)]['performEvasion']=function(){const _0x12ef76=_0x45cef8;VisuMZ['BattleCore'][_0x12ef76(0x895)][_0x12ef76(0xa07)](this),this['performFlinch']();},Game_Battler['prototype'][_0x45cef8(0xcd6)]=function(){const _0x3a87ab=_0x45cef8;if(!$gameSystem[_0x3a87ab(0xc02)]())return;if(this[_0x3a87ab(0x480)])return;this['_flinched']=!![];const _0x2524e2=this['battler']();if(_0x2524e2)_0x2524e2[_0x3a87ab(0xc22)]();},Game_Battler['prototype'][_0x45cef8(0x339)]=function(){const _0x1dc9f1=_0x45cef8;if(this[_0x1dc9f1(0x61e)]()&&this[_0x1dc9f1(0x89e)]!=='dead'){if(_0x1dc9f1(0x87a)==='wltEH')this[_0x1dc9f1(0x78d)][_0x1dc9f1(0x3b2)]();else{this[_0x1dc9f1(0x8c4)](_0x1dc9f1(0x711));return;}}if(this[_0x1dc9f1(0x61e)]()&&this[_0x1dc9f1(0x89e)]===_0x1dc9f1(0x711))return;if(!!this[_0x1dc9f1(0x390)])return;if(this[_0x1dc9f1(0x724)]()){if(!this[_0x1dc9f1(0x228)]()&&this!==BattleManager[_0x1dc9f1(0x8af)]){if(this[_0x1dc9f1(0x231)]())this['battler']()['refreshMotion']();}this[_0x1dc9f1(0xad0)]();return;}if(this[_0x1dc9f1(0x89e)]==='victory')return;if(this[_0x1dc9f1(0x89e)]===_0x1dc9f1(0x520)&&!BattleManager[_0x1dc9f1(0x660)]())return;if(this[_0x1dc9f1(0x89e)]==='guard'&&!BattleManager[_0x1dc9f1(0x660)]())return;this[_0x1dc9f1(0x54c)]();if(this[_0x1dc9f1(0x231)]()&&BattleManager[_0x1dc9f1(0x660)]()){this['battler']()['refreshMotion'](),this[_0x1dc9f1(0xad0)]();return;}},Game_Enemy['prototype'][_0x45cef8(0x228)]=function(){const _0x2c60cc=_0x45cef8;if(!this[_0x2c60cc(0x7c8)]())return![];const _0x404ec5=this[_0x2c60cc(0x231)]();if(!_0x404ec5)return![];const _0x2d905e=_0x404ec5[_0x2c60cc(0x7fc)];if(!_0x2d905e)return![];const _0x343ddc=_0x2d905e[_0x2c60cc(0x9c1)];return _0x343ddc&&!_0x343ddc[_0x2c60cc(0x1f1)];},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0xbfc)]=function(){const _0x5db383=_0x45cef8;return this[_0x5db383(0x5c2)];},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x6a8)]=function(_0x2443ea){const _0x56fe1e=_0x45cef8;if(!$gameSystem[_0x56fe1e(0xc02)]())return;this[_0x56fe1e(0x5c2)]=_0x2443ea;const _0x78084b=this['battler']();if(_0x78084b)_0x78084b[_0x56fe1e(0xbed)]();},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x35f)]=function(_0x5e278a,_0x5e8858,_0x43b127){const _0x243d56=_0x45cef8;if(!$gameSystem[_0x243d56(0xc02)]())return;const _0x386049=this['battler']();if(!_0x386049)return;if(_0x5e278a===_0x386049[_0x243d56(0x3c6)])return;let _0x54c26a=![];if(this[_0x243d56(0x98a)]()){if(_0x243d56(0xc51)!==_0x243d56(0xc51)){if(!_0x4ce8b5[_0x243d56(0xc02)]())return![];return![];}else{if(_0x5e278a>_0x386049[_0x243d56(0x3c6)])_0x54c26a=!![];if(_0x5e278a<_0x386049[_0x243d56(0x3c6)])_0x54c26a=![];}}else{if(this[_0x243d56(0x724)]()){if(_0x5e278a>_0x386049[_0x243d56(0x3c6)])_0x54c26a=![];if(_0x5e278a<_0x386049[_0x243d56(0x3c6)])_0x54c26a=!![];}};this[_0x243d56(0x6a8)](_0x43b127?!_0x54c26a:_0x54c26a),_0x386049[_0x243d56(0xbed)]();},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x9ba)]=function(_0x179011,_0x1ee81e,_0x4099af,_0x15e7ff,_0x51f4b4){const _0x3c0d72=_0x45cef8;if(!$gameSystem[_0x3c0d72(0xc02)]())return;const _0xc4ed7c=this[_0x3c0d72(0x231)]();if(!_0xc4ed7c)return;if(_0x15e7ff)this[_0x3c0d72(0x35f)](_0x179011+_0xc4ed7c[_0x3c0d72(0x3c6)],_0x1ee81e+_0xc4ed7c[_0x3c0d72(0x987)],![]);_0x179011+=_0xc4ed7c[_0x3c0d72(0x3c6)]-_0xc4ed7c[_0x3c0d72(0x883)],_0x1ee81e+=_0xc4ed7c[_0x3c0d72(0x987)]-_0xc4ed7c['_homeY'],_0xc4ed7c[_0x3c0d72(0x2b5)](_0x179011,_0x1ee81e,_0x4099af);if(Imported[_0x3c0d72(0x22d)])_0xc4ed7c['setMoveEasingType'](_0x51f4b4||_0x3c0d72(0x278));},Game_Battler['prototype'][_0x45cef8(0x712)]=function(_0x5b3adc,_0x4852df,_0x1c1a4f,_0x4400de,_0xfbc40,_0xc19aa4){const _0x456fce=_0x45cef8;if(!$gameSystem['isSideView']())return;const _0x3a7c96=this[_0x456fce(0x231)]();if(!_0x3a7c96)return;if(_0x5b3adc===Infinity||_0x4852df===Infinity)return;if(isNaN(_0x5b3adc)||isNaN(_0x4852df))return;_0xc19aa4=_0xc19aa4||0x0;if(_0xc19aa4>0x0){if(_0x456fce(0x5d1)!==_0x456fce(0x5d1)){let _0x31232c=_0x2462c4['x'],_0x1a4cb0=_0x336ae8['y'],_0x5cc140=_0x5ba7ed[_0x456fce(0xa2a)],_0x51ab1a=_0x5f189e[_0x456fce(0x6b4)][_0x456fce(0x4bb)]['y'];_0x46aa58['x']=_0x1e3c40[_0x456fce(0x3c6)]+_0x171f85[_0x456fce(0x95f)](),_0x562a72['y']=_0x443c3d[_0x456fce(0x987)]+_0x1a0c14[_0x456fce(0x81d)](),_0x1c2cc7[_0x456fce(0xa2a)]*=_0x51ab1a;let _0x40a588=_0x531037['BattleCore'][_0x456fce(0x50b)][_0x456fce(0xa07)](this,_0x849ab9);return _0x115838['x']=_0x31232c,_0x47c255['y']=_0x1a4cb0,_0x4cd103[_0x456fce(0xa2a)]=_0x5cc140,_0x40a588;}else{if(_0x3a7c96['_baseX']>_0x5b3adc)_0x5b3adc+=_0x3a7c96['width']/0x2+_0xc19aa4;if(_0x3a7c96[_0x456fce(0x3c6)]<_0x5b3adc)_0x5b3adc-=_0x3a7c96[_0x456fce(0x639)]/0x2+_0xc19aa4;}}if(_0x4400de)this[_0x456fce(0x35f)](_0x5b3adc,_0x4852df,![]);_0x5b3adc-=_0x3a7c96[_0x456fce(0x883)],_0x4852df-=_0x3a7c96['_homeY'],_0x3a7c96[_0x456fce(0x2b5)](_0x5b3adc,_0x4852df,_0x1c1a4f);if(Imported['VisuMZ_0_CoreEngine'])_0x3a7c96[_0x456fce(0x5e0)](_0xfbc40||_0x456fce(0x278));},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0xab2)]=function(_0x10c66a,_0x169c53,_0x5bea8e,_0x38ca09,_0x4d7f62){const _0x6a907d=_0x45cef8;if(!$gameSystem['isSideView']())return;const _0x1a0257=this[_0x6a907d(0x231)]();if(!_0x1a0257)return;if(_0x38ca09)this[_0x6a907d(0x35f)](_0x10c66a+_0x1a0257[_0x6a907d(0x3c6)],_0x169c53+_0x1a0257['_baseY'],![]);_0x10c66a+=_0x1a0257[_0x6a907d(0x883)],_0x169c53+=_0x1a0257[_0x6a907d(0xabb)],_0x1a0257[_0x6a907d(0x93a)](_0x10c66a,_0x169c53,_0x5bea8e,_0x4d7f62),this['_forcedHomeX']=_0x10c66a,this[_0x6a907d(0xcb4)]=_0x169c53;},Game_Battler['prototype']['moveBattlerHomeToPoint']=function(_0x35e71b,_0x23a122,_0x22def3,_0x2d947f,_0x505057,_0x100b30){const _0x2e70b1=_0x45cef8;if(!$gameSystem[_0x2e70b1(0xc02)]())return;const _0x19d619=this[_0x2e70b1(0x231)]();if(!_0x19d619)return;_0x100b30=_0x100b30||0x0;if(_0x100b30>0x0){if(_0x19d619['_baseX']>_0x35e71b)_0x35e71b+=_0x19d619['width']/0x2+_0x100b30;if(_0x19d619[_0x2e70b1(0x3c6)]<_0x35e71b)_0x35e71b-=_0x19d619[_0x2e70b1(0x639)]/0x2+_0x100b30;}if(_0x2d947f)this[_0x2e70b1(0x35f)](_0x35e71b,_0x23a122,![]);_0x19d619['startHomeMove'](_0x35e71b,_0x23a122,_0x22def3,_0x505057),this[_0x2e70b1(0x271)]=_0x35e71b,this[_0x2e70b1(0xcb4)]=_0x23a122;},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x449)]=function(_0x4648ba,_0x1e808f,_0x30cd1e){const _0x470a92=_0x45cef8;if(!$gameSystem[_0x470a92(0xc02)]())return;const _0x4ff375=this[_0x470a92(0x231)]();if(!_0x4ff375)return;_0x4ff375[_0x470a92(0x2d7)](_0x4648ba,_0x1e808f,_0x30cd1e);},Game_Battler['prototype'][_0x45cef8(0x4ce)]=function(_0x42e2b7,_0x5c0980){const _0x38bc66=_0x45cef8;if(!$gameSystem['isSideView']())return;const _0x1252d1=this[_0x38bc66(0x231)]();if(!_0x1252d1)return;_0x1252d1[_0x38bc66(0xab4)](_0x42e2b7,_0x5c0980);},Game_Battler[_0x45cef8(0x3cf)]['spinBattler']=function(_0x53ba6d,_0x1f8689,_0x425070,_0x5c6a7b){const _0x4045e9=_0x45cef8;if(!$gameSystem[_0x4045e9(0xc02)]())return;const _0x304420=this[_0x4045e9(0x231)]();if(!_0x304420)return;_0x304420['startSpin'](_0x53ba6d,_0x1f8689,_0x425070,_0x5c6a7b);},Game_Battler[_0x45cef8(0x3cf)]['skewBattler']=function(_0x498552,_0x20698f,_0x546f52,_0x159e6c){const _0x532034=_0x45cef8;if(!$gameSystem[_0x532034(0xc02)]())return;const _0x4329f5=this[_0x532034(0x231)]();if(!_0x4329f5)return;this[_0x532034(0x98a)]()&&(_0x498552*=-0x1,_0x20698f*=-0x1),_0x4329f5['startSkew'](_0x498552,_0x20698f,_0x546f52,_0x159e6c);},Game_Battler['prototype']['growBattler']=function(_0x11955d,_0x2e5f7c,_0x9112f1,_0x44282e){const _0x211cab=_0x45cef8;if(!$gameSystem[_0x211cab(0xc02)]())return;const _0x2c1677=this[_0x211cab(0x231)]();if(!_0x2c1677)return;_0x2c1677[_0x211cab(0xa60)](_0x11955d,_0x2e5f7c,_0x9112f1,_0x44282e);},Game_Battler['prototype'][_0x45cef8(0xc30)]=function(_0x260fed,_0x2a45ea,_0x2adace){const _0xd91bdb=_0x45cef8;if(!$gameSystem[_0xd91bdb(0xc02)]())return;const _0x5efcf5=this['battler']();if(!_0x5efcf5)return;_0x5efcf5[_0xd91bdb(0xba0)](_0x260fed,_0x2a45ea,_0x2adace);},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0xad0)]=function(){const _0x1a3e71=_0x45cef8,_0x4af041=!!this[_0x1a3e71(0x390)];this[_0x1a3e71(0x390)]=undefined,_0x4af041&&(this[_0x1a3e71(0x339)](),this[_0x1a3e71(0x605)]());},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x605)]=function(){const _0x55f100=_0x45cef8;if(!SceneManager[_0x55f100(0xc83)]())return;const _0x1228f3=this['battler']();if(!_0x1228f3)return;let _0x17674b=this[_0x55f100(0x98a)]()?_0x1228f3[_0x55f100(0xb25)]:_0x1228f3['_svBattlerSprite'][_0x55f100(0xb25)];_0x17674b&&_0x17674b['setup'](0x0);},Game_Battler['prototype'][_0x45cef8(0xb89)]=function(_0x4eac2f,_0x307174,_0x3c8376){const _0x533275=_0x45cef8;if(this['isEnemy']()&&!this['hasSvBattler']())return;let _0x952583=0x0,_0x4c43d4=0x0;_0x4eac2f[_0x533275(0x291)](/ATTACK[ ](\d+)/i)&&(_0x4c43d4=Number(RegExp['$1']),_0x4c43d4--);if(this[_0x533275(0x98a)]()){if(_0x533275(0xb95)!==_0x533275(0x6dd)){const _0x3a038d=this[_0x533275(0x8f9)]();_0x952583=_0x3a038d[_0x4c43d4]?_0x3a038d[_0x4c43d4]['wtypeId']:0x0;}else for(const _0x2a7447 of this[_0x533275(0x666)]()){if(_0x2a7447)_0x2a7447[_0x533275(0x315)](_0x2d0b1d);}}else this[_0x533275(0x724)]()&&(_0x952583=this[_0x533275(0x84b)]()[_0x533275(0x84c)]||0x0);const _0x163403=$dataSystem['attackMotions'][_0x952583];_0x4eac2f[_0x533275(0x291)](/attack/i)&&(_0x4eac2f=['thrust',_0x533275(0xaff),_0x533275(0x929)][_0x163403[_0x533275(0x4cf)]]||_0x533275(0xaff)),this[_0x533275(0x390)]={'motionType':_0x4eac2f,'weaponImageId':_0x307174?_0x163403[_0x533275(0x607)]:0x0,'pattern':_0x3c8376};},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x6c4)]=function(_0x3079f0){const _0x400eda=_0x45cef8;if(!_0x3079f0)return![];return _0x3079f0[_0x400eda(0xa15)]()===this[_0x400eda(0xa15)]();},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x7c2)]=function(_0x52d837){const _0x4a7ed1=_0x45cef8;if(!_0x52d837)return![];return _0x52d837['opponentsUnit']()===this[_0x4a7ed1(0xa15)]();},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x3eb)]=function(){return![];},Game_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x3eb)]=function(){const _0x29a55c=_0x45cef8;return this[_0x29a55c(0x311)]()[_0x29a55c(0x291)](/\$/i);},Game_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0x3eb)]=function(){const _0x235cba=_0x45cef8;return this['hasSvBattler']()&&this[_0x235cba(0x21f)]()['match'](/\$/i);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x739)]=Game_Actor['prototype'][_0x45cef8(0x74e)],Game_Actor[_0x45cef8(0x3cf)]['setup']=function(_0x4ce93b){const _0x20a268=_0x45cef8;VisuMZ[_0x20a268(0x6c0)][_0x20a268(0x739)]['call'](this,_0x4ce93b),this[_0x20a268(0x6ad)]();},Game_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x6ad)]=function(){const _0x367ba7=_0x45cef8;this[_0x367ba7(0x76b)]='',this[_0x367ba7(0x4d4)]()&&this[_0x367ba7(0x4d4)]()[_0x367ba7(0xbfd)][_0x367ba7(0x291)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x367ba7(0x76b)]=String(RegExp['$1']));},Game_Actor['prototype'][_0x45cef8(0x4d7)]=function(){const _0x77809e=_0x45cef8;if(this[_0x77809e(0xc9f)]()!=='')return this[_0x77809e(0xc9f)]();else{if(Imported[_0x77809e(0x453)]&&this[_0x77809e(0x527)]()!=='')return this['getMenuImage']();}return'';},Game_Actor['prototype'][_0x45cef8(0xc9f)]=function(){const _0xdc281d=_0x45cef8;if(this[_0xdc281d(0x76b)]===undefined)this['initBattlePortrait']();return this[_0xdc281d(0x76b)];},Game_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x892)]=function(_0x1bd807){const _0x5b07fd=_0x45cef8;if(this[_0x5b07fd(0x76b)]===undefined)this[_0x5b07fd(0x6ad)]();this[_0x5b07fd(0x76b)]=_0x1bd807;if(SceneManager[_0x5b07fd(0xc83)]()&&$gameParty[_0x5b07fd(0x2c2)]()[_0x5b07fd(0x2b1)](this)){const _0x1fe450=SceneManager['_scene'][_0x5b07fd(0x350)];if(_0x1fe450)_0x1fe450[_0x5b07fd(0x3d8)](this);}},Game_Actor[_0x45cef8(0x3cf)][_0x45cef8(0xada)]=function(){return!![];},Game_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x89d)]=function(){const _0x516452=_0x45cef8;if(!this[_0x516452(0x6ba)]()&&BattleManager[_0x516452(0x448)])return!![];return Game_Battler[_0x516452(0x3cf)]['isAutoBattle']['call'](this);},VisuMZ[_0x45cef8(0x6c0)]['Game_Actor_makeActionList']=Game_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x27a)],Game_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x27a)]=function(){const _0x514299=_0x45cef8;if(BattleManager[_0x514299(0x448)]&&!ConfigManager['autoBattleUseSkills']){if(_0x514299(0x1ef)!=='hgdsi'){const _0x2b0f6a=_0x1973e2(_0x4b88da['$1']);_0x4044e9[_0x514299(0xaf6)]([this],_0x2b0f6a,![],![]);}else return this[_0x514299(0xaea)]();}else{return VisuMZ[_0x514299(0x6c0)]['Game_Actor_makeActionList'][_0x514299(0xa07)](this);;}},Game_Actor['prototype'][_0x45cef8(0xaea)]=function(){const _0x52b4f4=_0x45cef8,_0x1a7984=[],_0x367791=new Game_Action(this);return _0x367791[_0x52b4f4(0xc73)](),_0x1a7984['push'](_0x367791),_0x1a7984;},Game_Actor['prototype'][_0x45cef8(0x538)]=function(){const _0x4c913e=_0x45cef8;if(this[_0x4c913e(0x752)]()['note']['match'](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)){if(_0x4c913e(0x208)===_0x4c913e(0x208))return String(RegExp['$1'])['split'](/[\r\n]+/);else _0x1b32e0[_0x4c913e(0x6c0)][_0x4c913e(0x39a)][_0x4c913e(0xa07)](this,_0x3d8ba0,_0x2ea8b8),this[_0x4c913e(0x5d7)]();}else{if(_0x4c913e(0x4fb)===_0x4c913e(0x46b))this[_0x4c913e(0x2a9)]=0x0,this[_0x4c913e(0xa39)]();else return VisuMZ[_0x4c913e(0x6c0)][_0x4c913e(0x658)][_0x4c913e(0x4d0)][_0x4c913e(0x26d)];}},Game_Actor[_0x45cef8(0x3cf)]['svBattlerAnchorX']=function(){const _0xabe419=_0x45cef8;if(this[_0xabe419(0x76d)]['svAnchorX']!==undefined)return this['_cache'][_0xabe419(0xb2b)];return this['actor']()[_0xabe419(0xbfd)]['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0xabe419(0x76d)]['svAnchorX']=eval(RegExp['$1']),this[_0xabe419(0x76d)][_0xabe419(0x9be)]=eval(RegExp['$2'])):this[_0xabe419(0x76d)][_0xabe419(0xb2b)]=Game_Battler[_0xabe419(0x3cf)][_0xabe419(0x4bc)]['call'](this),this[_0xabe419(0x76d)][_0xabe419(0xb2b)];},Game_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x622)]=function(){const _0x34b531=_0x45cef8;if(this[_0x34b531(0x76d)][_0x34b531(0x9be)]!==undefined)return this['_cache']['svAnchorY'];return this['actor']()[_0x34b531(0xbfd)][_0x34b531(0x291)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?_0x34b531(0x8b0)!==_0x34b531(0x8b0)?this[_0x34b531(0x397)]=this[_0x34b531(0x25c)](this[_0x34b531(0x397)],this[_0x34b531(0x6e3)],_0x525e68,_0x552ab0,_0x5d0d02):(this[_0x34b531(0x76d)][_0x34b531(0xb2b)]=eval(RegExp['$1']),this[_0x34b531(0x76d)][_0x34b531(0x9be)]=eval(RegExp['$2'])):this[_0x34b531(0x76d)]['svAnchorY']=Game_Battler[_0x34b531(0x3cf)]['svBattlerAnchorY'][_0x34b531(0xa07)](this),this[_0x34b531(0x76d)][_0x34b531(0x9be)];},Game_Actor[_0x45cef8(0x3cf)]['svBattlerShadowVisible']=function(){const _0x42689b=_0x45cef8;if(this[_0x42689b(0x76d)][_0x42689b(0x405)]!==undefined)return this[_0x42689b(0x76d)][_0x42689b(0x405)];if(this[_0x42689b(0x4d4)]()[_0x42689b(0xbfd)][_0x42689b(0x291)](/<SIDEVIEW SHOW SHADOW>/i))this[_0x42689b(0x76d)][_0x42689b(0x405)]=!![];else this['actor']()['note'][_0x42689b(0x291)](/<SIDEVIEW HIDE SHADOW>/i)?this['_cache'][_0x42689b(0x405)]=![]:this[_0x42689b(0x76d)][_0x42689b(0x405)]=Game_Battler[_0x42689b(0x3cf)]['svBattlerShadowVisible'][_0x42689b(0xa07)](this);return this['_cache'][_0x42689b(0x405)];},Game_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x40b)]=function(){const _0x37fbc3=_0x45cef8;return VisuMZ['BattleCore']['Settings'][_0x37fbc3(0x970)][_0x37fbc3(0xbe4)];},Game_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x630)]=function(){const _0x378fdd=_0x45cef8,_0x4f0872=this[_0x378fdd(0x8f9)](),_0x287211=_0x4f0872[0x0]?_0x4f0872[0x0][_0x378fdd(0x84c)]:0x0,_0x452e8c=$dataSystem[_0x378fdd(0x96e)][_0x287211];if(_0x452e8c){if(_0x378fdd(0xacc)!==_0x378fdd(0xad5))this[_0x378fdd(0xc16)](_0x452e8c[_0x378fdd(0x607)]);else{const _0x55b6ff=this[_0x378fdd(0x318)][_0x378fdd(0x5cd)]();if(_0x55b6ff){const _0x4fce67=this[_0x378fdd(0x7ce)](_0x378fdd(0xa7c),_0x55b6ff['id']);this[_0x378fdd(0x309)](_0x4fce67||0x0);}}}},Game_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x8a3)]=function(_0x4183e8){const _0x3268aa=_0x45cef8;Game_Battler[_0x3268aa(0x3cf)][_0x3268aa(0x8a3)]['call'](this,_0x4183e8),this[_0x3268aa(0x285)](_0x4183e8);},Game_Actor[_0x45cef8(0x3cf)]['getAttackMotion']=function(){const _0x14dcc6=_0x45cef8,_0x542537=this['weapons'](),_0x5932e8=_0x542537[0x0]?_0x542537[0x0][_0x14dcc6(0x84c)]:0x0;return $dataSystem[_0x14dcc6(0x96e)][_0x5932e8];},Game_Actor['prototype'][_0x45cef8(0x949)]=function(_0x2ecaf3){const _0x599a9a=_0x45cef8;_0x2ecaf3=_0x2ecaf3||0x1,_0x2ecaf3--;const _0x3b1512=this['weapons']();return _0x3b1512[_0x2ecaf3]?_0x3b1512[_0x2ecaf3][_0x599a9a(0xc91)]:0x0;},Game_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x338)]=function(_0x4a0f0d){const _0x1c2900=_0x45cef8;_0x4a0f0d=_0x4a0f0d||0x1,_0x4a0f0d--;const _0xbb9940=this[_0x1c2900(0x8f9)](),_0x1b07bc=_0xbb9940[_0x4a0f0d]?_0xbb9940[_0x4a0f0d]['wtypeId']:0x0;return $dataSystem[_0x1c2900(0x96e)][_0x1b07bc];},Game_Actor[_0x45cef8(0x3cf)]['performAttackSlot']=function(_0x3f7bac){const _0x3b4d2c=_0x45cef8;_0x3f7bac=_0x3f7bac||0x1,_0x3f7bac--;const _0x3594c8=this['weapons'](),_0x48016e=_0x3594c8[_0x3f7bac]?_0x3594c8[_0x3f7bac][_0x3b4d2c(0x84c)]:0x0,_0x4667d2=$dataSystem[_0x3b4d2c(0x96e)][_0x48016e];if(_0x4667d2){if(_0x4667d2['type']===0x0)this[_0x3b4d2c(0x8c4)]('thrust');else{if(_0x4667d2[_0x3b4d2c(0x4cf)]===0x1)_0x3b4d2c(0x887)!==_0x3b4d2c(0x898)?this[_0x3b4d2c(0x8c4)](_0x3b4d2c(0xaff)):this['updateForceAction']();else _0x4667d2[_0x3b4d2c(0x4cf)]===0x2&&(_0x3b4d2c(0x4fa)!==_0x3b4d2c(0x4fa)?_0x269efa[_0x3b4d2c(0x38e)](_0x11a27c):this[_0x3b4d2c(0x8c4)](_0x3b4d2c(0x929)));}this['startWeaponAnimation'](_0x4667d2[_0x3b4d2c(0x607)]);}},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x5e7)]=function(_0x3c256f){const _0x9b1167=_0x45cef8;this['_activeWeaponSlot']=_0x3c256f||0x0,this[_0x9b1167(0x76d)]={};},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0xc7b)]=function(){const _0x4f4496=_0x45cef8;this[_0x4f4496(0x99b)]=this[_0x4f4496(0x99b)]||0x0,this[_0x4f4496(0x99b)]++,this['_cache']={};},Game_Battler[_0x45cef8(0x3cf)][_0x45cef8(0xa6e)]=function(){const _0x122344=_0x45cef8;this[_0x122344(0x99b)]=undefined,this[_0x122344(0x76d)]={};},VisuMZ[_0x45cef8(0x6c0)]['Game_Actor_equips']=Game_Actor[_0x45cef8(0x3cf)]['equips'],Game_Actor['prototype'][_0x45cef8(0x34f)]=function(){const _0x3dcaf9=_0x45cef8;let _0x594d7f=VisuMZ[_0x3dcaf9(0x6c0)]['Game_Actor_equips']['call'](this);if(this[_0x3dcaf9(0x89b)])return _0x594d7f;if(this[_0x3dcaf9(0x99b)]!==undefined){if(_0x3dcaf9(0x85b)===_0x3dcaf9(0x85b)){this[_0x3dcaf9(0x89b)]=!![];const _0x4b63bd=this[_0x3dcaf9(0xce9)]();for(let _0x5464c9=0x0;_0x5464c9<_0x4b63bd[_0x3dcaf9(0xcc5)];_0x5464c9++){if(_0x4b63bd[_0x5464c9]===0x1&&this['_activeWeaponSlot']!==_0x5464c9){if('loOtP'!=='GFHRt')_0x594d7f[_0x5464c9]=null;else{const _0x540e90=_0x28bc29[_0x3dcaf9(0xbfd)];if(_0x540e90[_0x3dcaf9(0x291)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return _0x1bfcdc(_0x3130cf['$1'])*0.01;else{if(_0x540e90[_0x3dcaf9(0x291)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return _0x1187a7(_0x1ddf48['$1'])||0x0;}}}}this[_0x3dcaf9(0x89b)]=undefined;}else{const _0xb86ad9=_0x4a4482[_0x3dcaf9(0x3cf)][_0x3dcaf9(0x6e8)]();[_0x3dcaf9(0x991),_0x3dcaf9(0xa0f),'portrait',_0x3dcaf9(0x6b2)][_0x3dcaf9(0x2b1)](_0xb86ad9)&&(this[_0x3dcaf9(0xbc0)]=0x0);}}return _0x594d7f;},Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x7b7)]=function(_0x18c67c){const _0x4e172a=_0x45cef8;if(_0x18c67c[_0x4e172a(0x98a)]())return _0x18c67c['weapons']()[_0x4e172a(0xcc5)]||0x1;else{if(_0x4e172a(0xb4f)===_0x4e172a(0x844)){const _0x3428a0=_0x2a3d74[_0x4e172a(0x3a4)]();this[_0x4e172a(0x287)](_0x4e172a(0x253),_0xfae0e2,[_0x438716],_0x3428a0[_0x4e172a(0xc91)]);}else return 0x1;}},Window_BattleLog['prototype'][_0x45cef8(0xb1a)]=function(_0x1f4532,_0x300429){const _0x206cbb=_0x45cef8;_0x1f4532&&_0x1f4532[_0x206cbb(0x98a)]()&&_0x1f4532[_0x206cbb(0x5e7)](_0x300429),this[_0x206cbb(0x5d7)]();},Window_BattleLog['prototype'][_0x45cef8(0xa3a)]=function(_0x342f29){const _0x129462=_0x45cef8;_0x342f29&&_0x342f29[_0x129462(0x98a)]()&&_0x342f29[_0x129462(0xa6e)](),this[_0x129462(0x5d7)]();},Game_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x640)]=function(){const _0x53f169=_0x45cef8;let _0x1e2022=_0x53f169(0x640);if(this[_0x53f169(0x5e6)](_0x1e2022))return this['_cache'][_0x1e2022];return this['_cache'][_0x1e2022]=this[_0x53f169(0x806)](this['actor']()),this['_cache'][_0x1e2022];},Game_Actor[_0x45cef8(0x3cf)]['battleUIOffsetY']=function(){const _0x3433b0=_0x45cef8;let _0x43ea47=_0x3433b0(0x7ae);if(this[_0x3433b0(0x5e6)](_0x43ea47))return this['_cache'][_0x43ea47];return this[_0x3433b0(0x76d)][_0x43ea47]=this['createBattleUIOffsetY'](this[_0x3433b0(0x4d4)]()),this[_0x3433b0(0x76d)][_0x43ea47];},VisuMZ[_0x45cef8(0x6c0)]['Game_Enemy_setup']=Game_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0x74e)],Game_Enemy[_0x45cef8(0x3cf)]['setup']=function(_0x793d74,_0x1b3acb,_0x59dd40){const _0x2f3f8c=_0x45cef8;_0x793d74=DataManager[_0x2f3f8c(0xc55)](_0x793d74),VisuMZ['BattleCore'][_0x2f3f8c(0xaae)]['call'](this,_0x793d74,_0x1b3acb,_0x59dd40),Imported['VisuMZ_1_ElementStatusCore']&&(_0x2f3f8c(0x641)!=='nBgWM'?_0x49670a+=_0x4b79cb['abs'](_0xfe62e0[_0x2f3f8c(0x3de)]):this['initElementStatusCore']()),this[_0x2f3f8c(0x35d)](),this[_0x2f3f8c(0x8e3)](),Imported[_0x2f3f8c(0xc21)]&&this[_0x2f3f8c(0x387)]();},Game_Enemy[_0x45cef8(0x3cf)]['clearBattleCoreData']=function(){const _0xcf6265=_0x45cef8,_0x4a9ea7=VisuMZ[_0xcf6265(0x6c0)]['Settings'][_0xcf6265(0xc97)];this[_0xcf6265(0x6e1)]=_0x4a9ea7[_0xcf6265(0x540)],this[_0xcf6265(0x638)]={};},Game_Enemy[_0x45cef8(0x3cf)]['setupBattleCoreData']=function(){const _0x143b7d=_0x45cef8,_0x52df9d=VisuMZ[_0x143b7d(0x6c0)][_0x143b7d(0x658)][_0x143b7d(0xc97)],_0x493444=this[_0x143b7d(0xb19)]()['note'];this[_0x143b7d(0x638)]={'name':'','wtypeId':_0x52df9d[_0x143b7d(0x3e0)],'collapse':_0x52df9d[_0x143b7d(0xa80)],'motionIdle':_0x52df9d[_0x143b7d(0x6fe)],'width':_0x52df9d['Width']||0x40,'height':_0x52df9d[_0x143b7d(0x385)]||0x40,'anchorX':_0x52df9d[_0x143b7d(0xb9a)]||0x0,'anchorY':_0x52df9d[_0x143b7d(0x87f)]||0x0,'shadow':_0x52df9d[_0x143b7d(0x954)]};if(_0x493444['match'](/<ATTACK ANIMATION:[ ](\d+)>/i)){if(_0x143b7d(0x956)===_0x143b7d(0x6d3)){if(!_0xfb4790)return 0x0;let _0x34b3de=0x0;const _0x2e2f57=_0x3420bb[_0x143b7d(0xbfd)];return _0x2e2f57[_0x143b7d(0x291)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x34b3de+=_0x547c5d(_0x3fca3c['$1'])),_0x2e2f57['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x34b3de+=_0x1676ee(_0x473664['$2'])),_0x34b3de;}else this['_attackAnimationId']=Number(RegExp['$1']);}const _0x334c5d=this[_0x143b7d(0x638)];if(_0x493444['match'](/<SIDEVIEW BATTLER: (.*)>/i))_0x334c5d[_0x143b7d(0xd00)]=String(RegExp['$1']);else{if(_0x493444[_0x143b7d(0x291)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x228227=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x143b7d(0xcad)]('');_0x334c5d[_0x143b7d(0xd00)]=DataManager[_0x143b7d(0x921)](_0x228227);}}_0x493444[_0x143b7d(0x291)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x334c5d[_0x143b7d(0x859)]=eval(RegExp['$1']),_0x334c5d[_0x143b7d(0xb0a)]=eval(RegExp['$2']));if(_0x493444[_0x143b7d(0x291)](/<SIDEVIEW COLLAPSE>/i)){if(_0x143b7d(0x502)!=='pDGmb'){this[_0x143b7d(0xbd0)]=this['enemy']()[_0x143b7d(0xd00)]();const _0x510b37=this[_0x143b7d(0x574)](this[_0x143b7d(0xbd0)])[_0x143b7d(0x639)],_0x4caa1e=_0xf84db4[_0x143b7d(0x365)]((this['innerWidth']-_0x510b37)/0x2);this[_0x143b7d(0x72b)](this[_0x143b7d(0xbd0)],_0x4caa1e,0x0,_0x510b37+0x8);}else _0x334c5d[_0x143b7d(0x366)]=!![];}else{if(_0x493444[_0x143b7d(0x291)](/<SIDEVIEW NO COLLAPSE>/i)){if('LxPpK'==='LxPpK')_0x334c5d[_0x143b7d(0x366)]=![];else{const _0xccd13b=_0xbc4a48[0x0][_0x143b7d(0x9ec)](_0x4fc1b3[0x0],_0x29594e[0x0]),_0x4158b9=_0x2e5357[0x1][_0x143b7d(0x9ec)](_0xa18d1f[0x1],_0x554917[0x1])[_0x143b7d(0x7f3)](),_0x44dfdd=new _0x1c2b5a(_0x47e80f[_0x143b7d(0x9ec)](_0x4158b9),'i');_0x2c5c18[_0xccd13b]=_0x44dfdd;}}}if(_0x493444[_0x143b7d(0x291)](/<SIDEVIEW SHOW SHADOW>/i))_0x334c5d['shadow']=!![];else _0x493444[_0x143b7d(0x291)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x334c5d[_0x143b7d(0x2d9)]=![]);if(_0x493444[_0x143b7d(0x291)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x143b7d(0x218)!=='leHRD'?this[_0x143b7d(0x4e8)][_0x143b7d(0x5b6)](new _0x2f9f21()):_0x334c5d[_0x143b7d(0x475)]=String(RegExp['$1'])[_0x143b7d(0xa5b)]()[_0x143b7d(0x7f3)]();else{if(_0x493444[_0x143b7d(0x291)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x25c656=String(RegExp['$1'])[_0x143b7d(0x7e0)](/[\r\n]+/)[_0x143b7d(0xcad)]('');_0x334c5d[_0x143b7d(0x475)]=DataManager['processRandomizedData'](_0x25c656);}}_0x493444[_0x143b7d(0x291)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x334c5d[_0x143b7d(0x639)]=Number(RegExp['$1']),_0x334c5d['height']=Number(RegExp['$2']));if(_0x493444[_0x143b7d(0x291)](/<SIDEVIEW WEAPON: (.*)>/i))_0x334c5d[_0x143b7d(0x84c)]=DataManager[_0x143b7d(0x590)](RegExp['$1']);else{if(_0x493444[_0x143b7d(0x291)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){if(_0x143b7d(0x4b2)===_0x143b7d(0x4b2)){const _0x1ec901=String(RegExp['$1'])[_0x143b7d(0x7e0)](/[\r\n]+/)[_0x143b7d(0xcad)](''),_0xd4b5c6=DataManager['processRandomizedData'](_0x1ec901);_0x334c5d[_0x143b7d(0x84c)]=DataManager[_0x143b7d(0x590)](_0xd4b5c6);}else{const _0x31187d=_0x544130[_0x143b7d(0xa46)](),_0x422dbf=this[_0x143b7d(0x5c3)][_0x143b7d(0x46c)]();_0x31187d['setSkill'](_0x422dbf),_0x343903[_0x143b7d(0x4d4)]()[_0x143b7d(0xc6c)](_0x1ba695[_0x422dbf]),this[_0x143b7d(0x47c)]();}}}if(Imported[_0x143b7d(0xc21)]){if('FDFFr'==='FDFFr'){const _0x33928e=this[_0x143b7d(0x9b0)]();for(const _0x51fd22 of _0x33928e){const _0x223a60=this[_0x143b7d(0x684)](_0x51fd22)[_0x143b7d(0xb21)][_0x143b7d(0x5d3)]()[_0x143b7d(0x7f3)](),_0x286db3=_0x51fd22['toUpperCase']()[_0x143b7d(0x7f3)]();if(_0x493444[_0x143b7d(0x291)](VisuMZ['ElementStatusCore']['RegExp'][_0x143b7d(0x9bb)['format'](_0x286db3,_0x223a60)]))_0x143b7d(0xcda)===_0x143b7d(0x32e)?_0x430d36=!_0x226254:_0x334c5d[_0x143b7d(0xd00)]=String(RegExp['$1']);else{if(_0x493444[_0x143b7d(0x291)](VisuMZ[_0x143b7d(0x71a)][_0x143b7d(0x32d)]['SvBattlerMass-%1-%2'[_0x143b7d(0x9ec)](_0x286db3,_0x223a60)])){const _0x1b64cb=String(RegExp['$1'])[_0x143b7d(0x7e0)](/[\r\n]+/)[_0x143b7d(0xcad)]('');_0x334c5d[_0x143b7d(0xd00)]=DataManager[_0x143b7d(0x921)](_0x1b64cb);}}if(_0x493444[_0x143b7d(0x291)](VisuMZ['ElementStatusCore'][_0x143b7d(0x32d)][_0x143b7d(0x70e)[_0x143b7d(0x9ec)](_0x286db3,_0x223a60)])){if(_0x143b7d(0xb4b)===_0x143b7d(0xb4b))_0x334c5d[_0x143b7d(0x84c)]=DataManager[_0x143b7d(0x590)](RegExp['$1']);else return _0x2c8901[_0x143b7d(0x6c0)]['Window_SkillList_maxCols'][_0x143b7d(0xa07)](this);}else{if(_0x493444[_0x143b7d(0x291)](VisuMZ[_0x143b7d(0x71a)][_0x143b7d(0x32d)][_0x143b7d(0x2fe)['format'](_0x286db3,_0x223a60)])){if(_0x143b7d(0x7e4)===_0x143b7d(0xbd5))this[_0x143b7d(0x9cd)]();else{const _0x44d4ec=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x143b7d(0xcad)](''),_0x348be8=DataManager[_0x143b7d(0x921)](_0x44d4ec);_0x334c5d['wtypeId']=DataManager[_0x143b7d(0x590)](_0x348be8);}}}if(_0x493444['match'](VisuMZ['ElementStatusCore']['RegExp'][_0x143b7d(0x37c)[_0x143b7d(0x9ec)](_0x286db3,_0x223a60)])){if('pRBka'!==_0x143b7d(0x604)){let _0x5402a4=_0x1127b9['BattleCore'][_0x143b7d(0x2c5)][_0x143b7d(0xa07)](this),_0x4f5851=_0x42f138[_0x143b7d(0x6c0)][_0x143b7d(0x658)][_0x143b7d(0x28b)][_0x143b7d(0x1ea)]||0x0;return _0x284e37[_0x143b7d(0x365)](_0x5402a4+_0x4f5851);}else _0x334c5d[_0x143b7d(0x475)]=String(RegExp['$1'])[_0x143b7d(0xa5b)]()[_0x143b7d(0x7f3)]();}else{if(_0x493444[_0x143b7d(0x291)](VisuMZ['ElementStatusCore'][_0x143b7d(0x32d)]['SvMotionIdleMass-%1-%2'['format'](_0x286db3,_0x223a60)])){const _0x4f8753=String(RegExp['$1'])[_0x143b7d(0x7e0)](/[\r\n]+/)[_0x143b7d(0xcad)]('');_0x334c5d[_0x143b7d(0x475)]=DataManager[_0x143b7d(0x921)](_0x4f8753);}}}}else _0x5f3bbc+=_0x4baf2b,_0x6e1120+=_0x12db31;}},Game_Enemy['prototype'][_0x45cef8(0x9ef)]=function(){const _0x3cf45b=_0x45cef8;return this[_0x3cf45b(0x6e1)]||0x0;},Game_Enemy['prototype'][_0x45cef8(0x272)]=function(){const _0x111e33=_0x45cef8;return this[_0x111e33(0x9ef)]();},Game_Enemy['prototype']['attackAnimationIdSlot']=function(_0x2ef293){const _0x5b6624=_0x45cef8;return this[_0x5b6624(0x9ef)]();},Game_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0x290)]=function(){const _0x4563be=_0x45cef8;if(this[_0x4563be(0xb19)]()[_0x4563be(0xbfd)][_0x4563be(0x291)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x4563be(0x3cf)]['canBattlerMove'][_0x4563be(0xa07)](this);},Game_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0xa2d)]=function(){const _0x1e58d7=_0x45cef8;if(this['enemy']()['note'][_0x1e58d7(0x291)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy['prototype']['skills']=function(){const _0x12ee89=_0x45cef8,_0x43f17b=[];for(const _0x52bfd1 of this[_0x12ee89(0xb19)]()[_0x12ee89(0x872)]){if(_0x12ee89(0x5e4)!=='EEmTr')this[_0x12ee89(0x287)](_0x12ee89(0x36a)),this[_0x12ee89(0x287)](_0x12ee89(0xa65)),this[_0x12ee89(0x287)](_0x12ee89(0xc8f)),this[_0x12ee89(0x287)](_0x12ee89(0x4b8),_0x594ce0[_0x12ee89(0xa10)][_0x12ee89(0x9ec)](_0x1c4a53[_0x12ee89(0xd00)]())),this[_0x12ee89(0x287)](_0x12ee89(0xcfe));else{const _0x48b5b1=$dataSkills[_0x52bfd1[_0x12ee89(0x6c7)]];if(_0x48b5b1&&!_0x43f17b[_0x12ee89(0x2b1)](_0x48b5b1))_0x43f17b[_0x12ee89(0x287)](_0x48b5b1);}}return _0x43f17b;},Game_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0x640)]=function(){const _0x29da1a=_0x45cef8;let _0x4995a5='battleUIOffsetX';if(this[_0x29da1a(0x5e6)](_0x4995a5))return this[_0x29da1a(0x76d)][_0x4995a5];return this[_0x29da1a(0x76d)][_0x4995a5]=this[_0x29da1a(0x806)](this[_0x29da1a(0xb19)]()),this[_0x29da1a(0x76d)][_0x4995a5];},Game_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0x7ae)]=function(){const _0x3ff30c=_0x45cef8;let _0x2b87e5=_0x3ff30c(0x7ae);if(this[_0x3ff30c(0x5e6)](_0x2b87e5))return this[_0x3ff30c(0x76d)][_0x2b87e5];return this[_0x3ff30c(0x76d)][_0x2b87e5]=this[_0x3ff30c(0x742)](this[_0x3ff30c(0xb19)]()),this['_cache'][_0x2b87e5];},Game_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0x84b)]=function(){const _0x1550eb=_0x45cef8;if(this[_0x1550eb(0x638)]!==undefined)return this['_svBattlerData'];return this['setupBattleCoreData'](),this[_0x1550eb(0x638)];},Game_Enemy[_0x45cef8(0x3cf)]['hasSvBattler']=function(){const _0x3d7703=_0x45cef8;return this[_0x3d7703(0x84b)]()['name']!=='';},Game_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0x21f)]=function(){const _0x3bb4ab=_0x45cef8;return this[_0x3bb4ab(0x84b)]()[_0x3bb4ab(0xd00)];},Game_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0x40b)]=function(){const _0x5c61f7=_0x45cef8;if(this[_0x5c61f7(0x7c8)]())return VisuMZ[_0x5c61f7(0x6c0)][_0x5c61f7(0x658)][_0x5c61f7(0x970)][_0x5c61f7(0xbe4)];else{if(_0x5c61f7(0xb86)===_0x5c61f7(0x96b))_0x534fd5+=_0x335144,_0x2cb491+=_0x5796cd[_0x5c61f7(0x98a)]()?-_0xc6ea05:_0x504971;else return VisuMZ[_0x5c61f7(0x6c0)][_0x5c61f7(0x658)][_0x5c61f7(0xc97)]['SmoothImage'];}},Game_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0x8a3)]=function(_0x3ad592){const _0x5b1c99=_0x45cef8;Game_Battler['prototype'][_0x5b1c99(0x8a3)][_0x5b1c99(0xa07)](this,_0x3ad592);if(this[_0x5b1c99(0x7c8)]())this[_0x5b1c99(0x285)](_0x3ad592);},Game_Enemy[_0x45cef8(0x3cf)]['performAttack']=function(){const _0x56e5ed=_0x45cef8,_0x40dd33=this['svBattlerData']()[_0x56e5ed(0x84c)]||0x0,_0x3ddc5a=$dataSystem['attackMotions'][_0x40dd33];if(_0x3ddc5a){if(_0x3ddc5a[_0x56e5ed(0x4cf)]===0x0)this['requestMotion'](_0x56e5ed(0x4c5));else{if(_0x3ddc5a[_0x56e5ed(0x4cf)]===0x1)_0x56e5ed(0x46a)!==_0x56e5ed(0x46a)?(this['_activeWeaponSlot']=_0x76431e||0x0,this[_0x56e5ed(0x76d)]={}):this['requestMotion'](_0x56e5ed(0xaff));else{if(_0x3ddc5a['type']===0x2){if('FkHEA'===_0x56e5ed(0x44d)){if(!_0x347674[_0x56e5ed(0xc83)]())return;if(!_0x339c50[_0x56e5ed(0xa9b)])return;_0x18380f[_0x56e5ed(0x8b3)](_0x22845d,_0x1fb36f);const _0x454fbc=_0xe7d1a2['battleCameraData']();_0x454fbc[_0x56e5ed(0x51f)]=_0x423449[_0x56e5ed(0x32a)];}else this[_0x56e5ed(0x8c4)](_0x56e5ed(0x929));}}}}},Game_Enemy[_0x45cef8(0x3cf)]['performWeaponAnimation']=function(){const _0x44d07b=_0x45cef8,_0x4219c6=this[_0x44d07b(0x84b)]()[_0x44d07b(0x84c)]||0x0,_0x51e98a=$dataSystem[_0x44d07b(0x96e)][_0x4219c6];_0x51e98a&&this[_0x44d07b(0xc16)](_0x51e98a[_0x44d07b(0x607)]);},Game_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0x2cc)]=function(){const _0x21ac2a=_0x45cef8,_0xd6e347=this[_0x21ac2a(0x84b)]()[_0x21ac2a(0x84c)]||0x0;return $dataSystem[_0x21ac2a(0x96e)][_0xd6e347];},Game_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0x338)]=function(_0x472bda){const _0xdb06e7=_0x45cef8;return this[_0xdb06e7(0x2cc)]();},Game_Enemy[_0x45cef8(0x3cf)]['performDamage']=function(){const _0x58aca3=_0x45cef8;Game_Battler['prototype'][_0x58aca3(0x5e8)]['call'](this),this[_0x58aca3(0xada)]()&&this[_0x58aca3(0x7c8)]()&&this['requestMotion'](_0x58aca3(0x8fa)),SoundManager[_0x58aca3(0x30a)]();},Game_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0x21b)]=function(){const _0x20bbfe=_0x45cef8;Game_Battler['prototype']['performEvasion'][_0x20bbfe(0xa07)](this),this[_0x20bbfe(0x8c4)](_0x20bbfe(0xc46));},Game_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0xbd6)]=function(){const _0x252931=_0x45cef8;Game_Battler[_0x252931(0x3cf)][_0x252931(0xbd6)][_0x252931(0xa07)](this),this['requestMotion'](_0x252931(0xc46));},Game_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0x48d)]=function(){const _0x4b5c23=_0x45cef8;Game_Battler[_0x4b5c23(0x3cf)][_0x4b5c23(0x48d)][_0x4b5c23(0xa07)](this),this['performAttack']();},Game_Enemy['prototype'][_0x45cef8(0x95c)]=function(){const _0x3c4fc3=_0x45cef8;if(this[_0x3c4fc3(0x7c8)]()){if(this[_0x3c4fc3(0x48c)]()>=0x1)return!![];return this[_0x3c4fc3(0x84b)]()[_0x3c4fc3(0x366)];}else return!![];},Game_Enemy[_0x45cef8(0x3cf)]['svBattlerAnchorX']=function(){const _0x366628=_0x45cef8;return this[_0x366628(0x84b)]()[_0x366628(0x859)];},Game_Enemy['prototype'][_0x45cef8(0x622)]=function(){const _0x5711bc=_0x45cef8;return this['svBattlerData']()[_0x5711bc(0xb0a)];},Game_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0x245)]=function(){const _0x3b8696=_0x45cef8;return this[_0x3b8696(0x84b)]()[_0x3b8696(0x2d9)];},VisuMZ['BattleCore'][_0x45cef8(0xa7d)]=Game_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0x3b4)],Game_Enemy['prototype'][_0x45cef8(0x3b4)]=function(_0x191852){const _0x2720a7=_0x45cef8;VisuMZ['BattleCore'][_0x2720a7(0xa7d)][_0x2720a7(0xa07)](this,_0x191852),this[_0x2720a7(0x35d)](),this[_0x2720a7(0x8e3)]();const _0x2c5c60=this[_0x2720a7(0x231)]();if(_0x2c5c60)_0x2c5c60[_0x2720a7(0xb59)](this);},Game_Unit[_0x45cef8(0x3cf)][_0x45cef8(0x315)]=function(_0x2b15df){const _0xe4aa6=_0x45cef8;for(const _0xc957f9 of this['members']()){if(_0xe4aa6(0x445)!==_0xe4aa6(0x943)){if(_0xc957f9)_0xc957f9[_0xe4aa6(0x315)](_0x2b15df);}else this[_0xe4aa6(0x5b5)](),_0x480c09[_0xe4aa6(0x6c0)][_0xe4aa6(0xc45)][_0xe4aa6(0xa07)](this);}},Game_Unit[_0x45cef8(0x3cf)][_0x45cef8(0xa64)]=function(){const _0x2f4fff=_0x45cef8,_0x3adc51=this[_0x2f4fff(0x214)]();return _0x3adc51[Math[_0x2f4fff(0xa4d)](_0x3adc51[_0x2f4fff(0xcc5)])];},VisuMZ[_0x45cef8(0x6c0)]['Game_Party_addActor']=Game_Party[_0x45cef8(0x3cf)][_0x45cef8(0x4e7)],Game_Party[_0x45cef8(0x3cf)][_0x45cef8(0x4e7)]=function(_0xe9985b){const _0x15085a=_0x45cef8;VisuMZ[_0x15085a(0x6c0)][_0x15085a(0x6d4)][_0x15085a(0xa07)](this,_0xe9985b),BattleManager['refreshStatusWindow']();},VisuMZ['BattleCore'][_0x45cef8(0x906)]=Game_Party['prototype'][_0x45cef8(0xa61)],Game_Party[_0x45cef8(0x3cf)][_0x45cef8(0xa61)]=function(_0x2a9eb0){const _0x2815e7=_0x45cef8;VisuMZ[_0x2815e7(0x6c0)][_0x2815e7(0x906)]['call'](this,_0x2a9eb0),BattleManager['refreshStatusWindow']();},VisuMZ[_0x45cef8(0x6c0)]['Game_Troop_setup']=Game_Troop[_0x45cef8(0x3cf)][_0x45cef8(0x74e)],Game_Troop['prototype'][_0x45cef8(0x74e)]=function(_0x2aed71){const _0x55018b=_0x45cef8;$gameTemp[_0x55018b(0x55e)](),$gameTemp['applyForcedGameTroopSettingsBattleCore'](_0x2aed71),VisuMZ['BattleCore'][_0x55018b(0x61b)]['call'](this,_0x2aed71),this['extendTroopMembers']();},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xab7)]=Game_Troop['prototype']['expTotal'],Game_Troop['prototype']['expTotal']=function(){const _0x20ec84=_0x45cef8;let _0x15c2d5=VisuMZ[_0x20ec84(0x6c0)][_0x20ec84(0xab7)][_0x20ec84(0xa07)](this);if(this[_0x20ec84(0x49c)]){if(_0x20ec84(0x7d9)!==_0x20ec84(0x7d9)){if(this['contentsOpacity']>0x0)this[_0x20ec84(0x569)]-=0x10;}else _0x15c2d5*=this[_0x20ec84(0x49c)]();}return Math[_0x20ec84(0xc7c)](_0x15c2d5);},Game_Troop[_0x45cef8(0x3cf)][_0x45cef8(0x49c)]=function(){return 0x1;},Game_Troop[_0x45cef8(0x3cf)][_0x45cef8(0xb47)]=function(){const _0x11a989=_0x45cef8,_0x25e1a1=this['troop']()[_0x11a989(0xd00)]||'';if(_0x25e1a1[_0x11a989(0x291)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){if(_0x11a989(0x70c)!=='ssQyU'){const _0x415d57=RegExp['$1'][_0x11a989(0x7e0)](',')[_0x11a989(0x4a9)](_0x33731c=>Number(_0x33731c));this[_0x11a989(0x8b7)](),this[_0x11a989(0x6e5)](_0x415d57);}else _0x468fda['BattleCore']['Game_Battler_forceAction'][_0x11a989(0xa07)](this,_0x4ce0dd,_0x57112b),this[_0x11a989(0xc7f)][this[_0x11a989(0xc7f)][_0x11a989(0xcc5)]-0x1][_0x11a989(0x20d)]=!![];}},Game_Troop['prototype'][_0x45cef8(0x8b7)]=function(){const _0x5eb21d=_0x45cef8;let _0x11a2f0='Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest'+'\x0a';_0x11a2f0+=_0x5eb21d(0x316);if(Imported[_0x5eb21d(0xb24)]){if('jKNKE'!==_0x5eb21d(0x940))return _0x5e0a38[_0x5eb21d(0x3be)];else{if(VisuMZ[_0x5eb21d(0xca5)][_0x5eb21d(0x2a2)]<1.11){if(_0x5eb21d(0x56c)===_0x5eb21d(0x411))return;else alert(_0x11a2f0[_0x5eb21d(0x9ec)](_0x5eb21d(0xc5b))),SceneManager[_0x5eb21d(0xa50)]();}}}Imported[_0x5eb21d(0x6a4)]&&(_0x5eb21d(0x501)!=='CKTNL'?VisuMZ[_0x5eb21d(0x3a7)][_0x5eb21d(0x2a2)]<1.19&&(alert(_0x11a2f0[_0x5eb21d(0x9ec)](_0x5eb21d(0x9a3))),SceneManager[_0x5eb21d(0xa50)]()):_0x1cd6b4=_0x331d83['x']+_0x13e6f4[_0x5eb21d(0x4e6)]+0x8),Imported[_0x5eb21d(0xd0c)]&&(_0x5eb21d(0xbc5)===_0x5eb21d(0xbc5)?VisuMZ['BattleSystemSTB'][_0x5eb21d(0x2a2)]<1.15&&(_0x5eb21d(0x68e)==='AmMKs'?(alert(_0x11a2f0[_0x5eb21d(0x9ec)](_0x5eb21d(0xc79))),SceneManager[_0x5eb21d(0xa50)]()):this[_0x5eb21d(0x66c)]=_0x5eb21d(0x9da)):(_0x2e911c+=_0x8d5754['isActor']()?-_0xdc26d6:_0x3b350c,_0x100a55+=_0x9343d2));},Game_Troop['prototype'][_0x45cef8(0x6e5)]=function(_0xc1528a){const _0x28a031=_0x45cef8;this['_namesCount']={};for(const _0x4706e0 of this[_0x28a031(0x666)]()){if(!_0x4706e0)continue;_0x4706e0['setLetter']('');}for(const _0x5a8532 of _0xc1528a){const _0x565fab=$dataTroops[_0x5a8532];if(_0x565fab)this[_0x28a031(0x741)](_0x565fab);}this[_0x28a031(0x7d5)]();},Game_Troop[_0x45cef8(0x3cf)]['addExtendedTroopMembers']=function(_0x41b85b){const _0x33fcd5=_0x45cef8;for(const _0x5057e2 of _0x41b85b['members']){if($dataEnemies[_0x5057e2['enemyId']]){const _0x213eb5=_0x5057e2[_0x33fcd5(0xbce)],_0x281bda=_0x5057e2['x'],_0x12db92=_0x5057e2['y'],_0x31fce6=new Game_Enemy(_0x213eb5,_0x281bda,_0x12db92);_0x5057e2['hidden']&&('CPkIw'===_0x33fcd5(0x45c)?(_0xd593d5+=_0x17b512[_0x33fcd5(0x98a)]()?-_0x3b3b7b:_0xde61e,_0x1f37bd+=_0x4b5c9f[_0x33fcd5(0x98a)]()?-_0x30f405:_0x54070d):_0x31fce6[_0x33fcd5(0x939)]()),this['_enemies'][_0x33fcd5(0x287)](_0x31fce6);}}},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x7ac)]=Game_Map['prototype'][_0x45cef8(0x7b1)],Game_Map[_0x45cef8(0x3cf)]['setupBattleback']=function(){const _0x3b7ce3=_0x45cef8;VisuMZ['BattleCore'][_0x3b7ce3(0x7ac)][_0x3b7ce3(0xa07)](this),this[_0x3b7ce3(0xc7d)]();},Game_Map['prototype']['setupBattlebackBattleCore']=function(){const _0x497a0d=_0x45cef8;this['_regionBattleback1']={},this['_regionBattleback2']={};if(!$dataMap)return;const _0x369862=$dataMap['note'];if(!_0x369862)return;const _0x394e45=_0x369862['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x394e45)for(const _0x2549d3 of _0x394e45){if(_0x497a0d(0x995)!==_0x497a0d(0x543)){_0x2549d3[_0x497a0d(0x291)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x155e7e=Number(RegExp['$1']),_0x5b61e8=Number(RegExp['$2']),_0x93ad28=_0x5b61e8===0x1?this[_0x497a0d(0x222)]:this[_0x497a0d(0x8aa)],_0x6095ff=String(RegExp['$3']);_0x93ad28[_0x155e7e]=_0x6095ff;}else return this[_0x497a0d(0xd01)];}},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x3ab)]=Game_Map['prototype'][_0x45cef8(0x644)],Game_Map[_0x45cef8(0x3cf)][_0x45cef8(0x644)]=function(){const _0x1235fb=_0x45cef8;if(!BattleManager[_0x1235fb(0x5cf)]()){const _0xb0f060=$gamePlayer[_0x1235fb(0x556)]($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this[_0x1235fb(0x222)][_0xb0f060])return this[_0x1235fb(0x222)][_0xb0f060];}return VisuMZ[_0x1235fb(0x6c0)][_0x1235fb(0x3ab)]['call'](this);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xcf8)]=Game_Map[_0x45cef8(0x3cf)]['battleback2Name'],Game_Map[_0x45cef8(0x3cf)]['battleback2Name']=function(){const _0x4d0ac8=_0x45cef8;if(!BattleManager[_0x4d0ac8(0x5cf)]()){if(_0x4d0ac8(0xaef)!==_0x4d0ac8(0x896)){const _0x263057=$gamePlayer[_0x4d0ac8(0x556)]($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this[_0x4d0ac8(0x8aa)][_0x263057])return _0x4d0ac8(0x811)==='vUoEI'?!_0x44e952[_0x4d0ac8(0xc02)]()&&this['_battler']&&this[_0x4d0ac8(0xa87)]['isActor']():this[_0x4d0ac8(0x8aa)][_0x263057];}else this['_requestRefresh']=![],_0x506cc9['BattleCore']['Window_BattleLog_refresh'][_0x4d0ac8(0xa07)](this);}return VisuMZ[_0x4d0ac8(0x6c0)][_0x4d0ac8(0xcf8)]['call'](this);},VisuMZ[_0x45cef8(0x6c0)]['Game_Map_encounterList']=Game_Map['prototype'][_0x45cef8(0xc5a)],Game_Map['prototype'][_0x45cef8(0xc5a)]=function(){const _0x4c4e45=_0x45cef8;let _0x525f33=JsonEx[_0x4c4e45(0x5bf)](VisuMZ['BattleCore']['Game_Map_encounterList'][_0x4c4e45(0xa07)](this));return VisuMZ[_0x4c4e45(0x6c0)][_0x4c4e45(0xaab)](_0x525f33);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xaab)]=function(_0x181ed8){const _0x3c4909=_0x45cef8;var _0x2cc2e5,_0xc4ce80,_0x2bb9f1;for(_0x2bb9f1=_0x181ed8[_0x3c4909(0xcc5)]-0x1;_0x2bb9f1>0x0;_0x2bb9f1--){_0x2cc2e5=Math[_0x3c4909(0x74d)](Math[_0x3c4909(0x3aa)]()*(_0x2bb9f1+0x1)),_0xc4ce80=_0x181ed8[_0x2bb9f1],_0x181ed8[_0x2bb9f1]=_0x181ed8[_0x2cc2e5],_0x181ed8[_0x2cc2e5]=_0xc4ce80;}return _0x181ed8;},VisuMZ['BattleCore'][_0x45cef8(0xb57)]=Game_Interpreter[_0x45cef8(0x3cf)][_0x45cef8(0x6a5)],Game_Interpreter[_0x45cef8(0x3cf)][_0x45cef8(0x6a5)]=function(_0x51fb97){const _0x55803c=_0x45cef8;return $gameTemp[_0x55803c(0x5ae)](this),VisuMZ['BattleCore']['Game_Interpreter_PluginCommand'][_0x55803c(0xa07)](this,_0x51fb97);},VisuMZ['BattleCore'][_0x45cef8(0x9cb)]=Game_Interpreter['prototype']['updateWaitMode'],Game_Interpreter[_0x45cef8(0x3cf)]['updateWaitMode']=function(){const _0x399f89=_0x45cef8;if(SceneManager[_0x399f89(0xc83)]()){if(_0x399f89(0xa90)===_0x399f89(0xa90))switch(this[_0x399f89(0x581)]){case _0x399f89(0x7bf):if(Imported['VisuMZ_3_ActSeqCamera']){if(_0x399f89(0xc8c)===_0x399f89(0xc8c)){if($gameScreen['battleCameraData']()['angleDuration']>0x0)return!![];this['_waitMode']='';}else this[_0x399f89(0x5a1)]=new _0x1be786(),this[_0x399f89(0x69f)]['addChild'](this[_0x399f89(0x5a1)]);}break;case _0x399f89(0x227):if(BattleManager[_0x399f89(0x78d)][_0x399f89(0x2d6)]())return!![];this['_waitMode']='';break;case'battleCamera':if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x399f89(0x463)]()[_0x399f89(0x546)]>0x0)return!![];if($gameScreen[_0x399f89(0x463)]()[_0x399f89(0x2e0)]>0x0)return!![];this[_0x399f89(0x581)]='';}break;case'battleEffect':if(BattleManager['_spriteset'][_0x399f89(0xa92)]())return!![];this[_0x399f89(0x581)]='';break;case _0x399f89(0x6e7):if(BattleManager[_0x399f89(0x78d)][_0x399f89(0x69b)]())return!![];this[_0x399f89(0x581)]='';break;case _0x399f89(0x496):if(BattleManager[_0x399f89(0x78d)]['isAnyoneJumping']())return!![];this[_0x399f89(0x581)]='';break;case _0x399f89(0x65a):if(BattleManager[_0x399f89(0x266)][_0x399f89(0xba4)]())return!![];this['_waitMode']='';break;case'battleMove':if(BattleManager[_0x399f89(0x78d)][_0x399f89(0x1e9)]())return!![];this[_0x399f89(0x581)]='';break;case _0x399f89(0xa20):if(BattleManager[_0x399f89(0x78d)][_0x399f89(0x688)]())return!![];this[_0x399f89(0x581)]='';break;case _0x399f89(0x834):if(BattleManager[_0x399f89(0x78d)][_0x399f89(0x8ae)]())return!![];this['_waitMode']='';break;case _0x399f89(0xba6):if(BattleManager[_0x399f89(0x78d)][_0x399f89(0x1fc)]())return!![];this[_0x399f89(0x581)]='';break;case _0x399f89(0xad2):if(Imported['VisuMZ_3_ActSeqProjectiles']){if(BattleManager[_0x399f89(0x78d)][_0x399f89(0x400)]())return!![];this[_0x399f89(0x581)]='';}break;case _0x399f89(0xd04):if(Imported[_0x399f89(0xa9b)]){if($gameScreen[_0x399f89(0x463)]()[_0x399f89(0x310)]>0x0)return!![];this[_0x399f89(0x581)]='';}break;case'battleSpin':if(BattleManager[_0x399f89(0x78d)]['isAnyoneSpinning']())return!![];this['_waitMode']='';break;case _0x399f89(0x71c):if(Imported[_0x399f89(0xa9b)]){if($gameScreen[_0x399f89(0x463)]()[_0x399f89(0xbaa)]>0x0)return!![];this[_0x399f89(0x581)]='';}break;case _0x399f89(0x512):if(Imported[_0x399f89(0x279)]){if(_0x399f89(0x58d)!==_0x399f89(0x58d)){const _0x106c7c=_0x5561d5[_0x399f89(0x98a)]()?_0x3abf97[_0x399f89(0x1d9)]:_0x13bf68[_0x399f89(0xb0e)];_0x106c7c&&_0x4a1f54[_0x399f89(0x6c0)][_0x399f89(0x658)][_0x399f89(0xcbb)][_0x399f89(0x507)]&&(this['push'](_0x399f89(0x5d4)),this[_0x399f89(0x287)]('popBaseLine'),this[_0x399f89(0x287)](_0x399f89(0xc8f)),this['push']('addText',_0x106c7c[_0x399f89(0x9ec)](_0x10b76e[_0x399f89(0xd00)]())),this['push']('wait')),_0x292c7a['id']===_0x493814['deathStateId']()&&this[_0x399f89(0x287)](_0x399f89(0xa2b),_0x23a5f8);}else{if(BattleManager[_0x399f89(0x78d)][_0x399f89(0x1d6)]){if(BattleManager['_spriteset'][_0x399f89(0x1d6)]())return!![];this[_0x399f89(0x581)]='battleInjectAni';}else{if(_0x399f89(0x1d8)!=='NiVtx'){if(!this[_0x399f89(0xb19)]())return;_0x5d601f[_0x399f89(0xc26)]()?this['x']=_0x4588e4[_0x399f89(0xa5d)]-this['enemy']()[_0x399f89(0x231)]()['_baseX']:this['x']=this[_0x399f89(0xb19)]()['battler']()[_0x399f89(0x3c6)];this['x']-=_0x4acf2e[_0x399f89(0x365)](this[_0x399f89(0x639)]/0x2),this['y']=this['enemy']()['battler']()[_0x399f89(0x987)]-_0x596f6d[_0x399f89(0x365)](this['lineHeight']()*1.5);const _0x225f91=_0x5a3993[_0x399f89(0x6c0)][_0x399f89(0x658)][_0x399f89(0xc97)];this['x']+=_0x225f91[_0x399f89(0x2b2)]||0x0,this['y']+=_0x225f91['NameOffsetY']||0x0;}else this[_0x399f89(0x581)]='';}break;}}break;case _0x399f89(0xaa0):if(Imported['VisuMZ_3_ActSeqImpact']){if(_0x399f89(0x893)===_0x399f89(0x893)){if(BattleManager[_0x399f89(0x78d)][_0x399f89(0xa09)]())return!![];this[_0x399f89(0x581)]='';}else _0x3d6081=!![];}break;}else return this[_0x399f89(0x3a8)]()[_0x399f89(0x6a6)](_0x3fc49f=>_0x3fc49f[_0x399f89(0x8f2)]());}return VisuMZ['BattleCore'][_0x399f89(0x9cb)]['call'](this);},VisuMZ['BattleCore'][_0x45cef8(0x5c7)]=Game_Interpreter['prototype']['command301'],Game_Interpreter['prototype']['command301']=function(_0x32e551){const _0x3841f7=_0x45cef8;if(!$gameParty['inBattle']()){if(_0x3841f7(0xc71)===_0x3841f7(0xc71))return this['command301_PreBattleEvent'](_0x32e551);else{_0x3da4d2[_0x3841f7(0x291)](_0x15e380);const _0x2e0802=_0x5b3528(_0x18d8ba['$1'])['split'](',')[_0x3841f7(0x4a9)](_0x11c313=>_0x480566(_0x11c313)['toUpperCase']()[_0x3841f7(0x7f3)]());_0x5d2228=_0x2c4711[_0x3841f7(0x9f7)](_0x2e0802);}}else{if(_0x3841f7(0x80b)==='PwbUG')_0x3e7752[_0x3841f7(0x7e1)](_0x5b1069);else return VisuMZ[_0x3841f7(0x6c0)]['Game_Interpreter_command301']['call'](this,_0x32e551);}},Game_Interpreter['prototype'][_0x45cef8(0x418)]=function(_0x30d85c){const _0x22f232=_0x45cef8;return VisuMZ[_0x22f232(0x6c0)][_0x22f232(0x5c7)]['call'](this,_0x30d85c),BattleManager['setEventCallback'](_0x25af9a=>{const _0x4c0675=_0x22f232;if(_0x4c0675(0x330)!==_0x4c0675(0x330)){const _0x53cf60=_0x46877c(_0xfa1016['$1'])[_0x4c0675(0x7e0)](/[\r\n]+/)[_0x4c0675(0xcad)]('');_0x4c64a3['name']=_0x117c04[_0x4c0675(0x921)](_0x53cf60);}else this[_0x4c0675(0x320)][this[_0x4c0675(0xa45)]]=_0x25af9a;}),!![];},VisuMZ['BattleCore'][_0x45cef8(0x922)]=function(_0x434cf4){const _0x25186a=$dataCommonEvents[_0x434cf4];if(!_0x25186a)return![];if(_0x25186a['list']['length']<=0x1)return![];return!![];},Game_Interpreter[_0x45cef8(0x3cf)][_0x45cef8(0xcd8)]=function(_0x2625c3){const _0x12ed2b=_0x45cef8,_0x4c396b=VisuMZ[_0x12ed2b(0x6c0)][_0x12ed2b(0x658)][_0x12ed2b(0xb34)],_0xbc8f66=_0x4c396b[_0x12ed2b(0x969)],_0x592c6a=$dataCommonEvents[_0xbc8f66];if(_0x592c6a&&VisuMZ['BattleCore'][_0x12ed2b(0x922)](_0xbc8f66)){if('PBRUi'===_0x12ed2b(0x2f6)){const _0x588d9a=this[_0x12ed2b(0xac0)]()?this[_0x12ed2b(0x576)]:0x0,_0x47f072=_0x592c6a[_0x12ed2b(0xa0f)];this[_0x12ed2b(0x325)](_0x47f072,_0x588d9a),this['_list']=JsonEx[_0x12ed2b(0x5bf)](this[_0x12ed2b(0xcf4)]);const _0x338eec={'code':0xbc3,'indent':this[_0x12ed2b(0xa45)],'parameters':JsonEx['makeDeepCopy'](_0x2625c3)};return this[_0x12ed2b(0xcf4)][_0x12ed2b(0x914)](this[_0x12ed2b(0x304)]+0x1,0x0,_0x338eec),!![];}else{_0x39aba4-=_0x7991a;const _0x5c8bcb=_0x19ce70['BattleCore'][_0x12ed2b(0x658)][_0x12ed2b(0x28b)]['DefaultSoftScaler'],_0x141d9c=_0x2a68c6['max'](0x1-_0x17abef/((_0xac4862-_0x1ecc0a)*_0x5c8bcb+_0x583bed),0.01);_0x1f7ba7*=_0x141d9c,_0xb9d2fc+=_0x3c62da;}}else return VisuMZ['BattleCore'][_0x12ed2b(0x5c7)][_0x12ed2b(0xa07)](this,_0x2625c3);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x691)]=BattleManager[_0x45cef8(0x1f5)],BattleManager[_0x45cef8(0x1f5)]=function(){const _0x5c0d14=_0x45cef8;VisuMZ[_0x5c0d14(0x6c0)][_0x5c0d14(0x691)]['call'](this),this[_0x5c0d14(0x728)]();},BattleManager['onEncounterBattleCore']=function(){const _0x11e965=_0x45cef8,_0x1baa58=VisuMZ[_0x11e965(0x6c0)]['Settings'][_0x11e965(0xb34)],_0x522892=_0x1baa58[_0x11e965(0x969)];_0x522892&&VisuMZ['BattleCore'][_0x11e965(0x922)](_0x522892)&&(this['_battleCoreBattleStartEvent']=!![],$gameTemp[_0x11e965(0x7e1)](_0x1baa58['BattleStartEvent']),$gameMap[_0x11e965(0x536)](),$gameMap[_0x11e965(0x92b)][_0x11e965(0xb73)]=!![]);if(_0x1baa58['DefeatEvent']>0x0){if(_0x11e965(0x37f)!==_0x11e965(0x37f))return this[_0x11e965(0x84b)]()[_0x11e965(0x2d9)];else this[_0x11e965(0xa2e)]=!![];}},VisuMZ[_0x45cef8(0x6c0)]['Scene_Map_updateCallMenu']=Scene_Map[_0x45cef8(0x3cf)][_0x45cef8(0x3fc)],Scene_Map[_0x45cef8(0x3cf)]['updateCallMenu']=function(){const _0x2440da=_0x45cef8;if(BattleManager[_0x2440da(0x4ba)])return;VisuMZ['BattleCore']['Scene_Map_updateCallMenu'][_0x2440da(0xa07)](this);},VisuMZ['BattleCore'][_0x45cef8(0x72e)]=Scene_Map[_0x45cef8(0x3cf)][_0x45cef8(0x3df)],Scene_Map['prototype'][_0x45cef8(0x3df)]=function(){const _0x41c175=_0x45cef8;BattleManager[_0x41c175(0x4ba)]?this[_0x41c175(0x56e)]():'gxNxt'!==_0x41c175(0xc96)?VisuMZ[_0x41c175(0x6c0)][_0x41c175(0x72e)][_0x41c175(0xa07)](this):this['requestMotion'](_0x41c175(0x929));},Scene_Map[_0x45cef8(0x3cf)]['battleCorePreBattleCommonEvent']=function(){this['_active']=!![];},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x32c)]=SceneManager['isSceneChanging'],SceneManager[_0x45cef8(0xb71)]=function(){const _0x12e893=_0x45cef8;if(BattleManager[_0x12e893(0x4ba)])return![];return VisuMZ[_0x12e893(0x6c0)]['SceneManager_isSceneChanging'][_0x12e893(0xa07)](this);},VisuMZ[_0x45cef8(0x6c0)]['Game_Interpreter_terminate']=Game_Interpreter[_0x45cef8(0x3cf)]['terminate'],Game_Interpreter[_0x45cef8(0x3cf)][_0x45cef8(0x6a0)]=function(){const _0x4e79c5=_0x45cef8;VisuMZ[_0x4e79c5(0x6c0)][_0x4e79c5(0x62c)][_0x4e79c5(0xa07)](this),this[_0x4e79c5(0xb73)]&&(this['_preBattleCommonEvent']=undefined,SceneManager[_0x4e79c5(0x9e2)][_0x4e79c5(0x649)]());},Scene_Map[_0x45cef8(0x3cf)][_0x45cef8(0x649)]=function(){const _0x68598=_0x45cef8;BattleManager[_0x68598(0x4ba)]=undefined,BattleManager[_0x68598(0x9ed)]=!![],this[_0x68598(0xc98)]();},VisuMZ['BattleCore']['Scene_Map_initializeAfter']=Scene_Map[_0x45cef8(0x3cf)]['initialize'],Scene_Map[_0x45cef8(0x3cf)]['initialize']=function(){const _0x79f033=_0x45cef8;VisuMZ[_0x79f033(0x6c0)][_0x79f033(0x709)][_0x79f033(0xa07)](this);if(BattleManager[_0x79f033(0x9ed)]){if(_0x79f033(0x2c9)!==_0x79f033(0x531))this[_0x79f033(0x824)]=!![],BattleManager[_0x79f033(0x9ed)]=undefined;else{if(this['isTurnBased']())this['processBattleCoreJS'](_0x79f033(0x493));_0x48e2f9[_0x79f033(0x6c0)][_0x79f033(0xaec)][_0x79f033(0xa07)](this);if(this[_0x79f033(0x3f8)]())this[_0x79f033(0x315)](_0x79f033(0xa5a));}}},VisuMZ['BattleCore']['Scene_Map_initialize']=Scene_Map[_0x45cef8(0x3cf)]['initialize'],Scene_Map['prototype'][_0x45cef8(0x754)]=function(){const _0x303a7a=_0x45cef8;VisuMZ[_0x303a7a(0x6c0)]['Scene_Map_initialize']['call'](this),$gameTemp[_0x303a7a(0x55e)]();},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xc47)]=Scene_ItemBase['prototype']['applyItem'],Scene_ItemBase[_0x45cef8(0x3cf)][_0x45cef8(0x5ad)]=function(){const _0x1773e5=_0x45cef8;VisuMZ['BattleCore'][_0x1773e5(0xc47)][_0x1773e5(0xa07)](this);if(this[_0x1773e5(0x3a4)]()[_0x1773e5(0xbfd)][_0x1773e5(0x291)](/<BYPASS AUTO ACTION SEQUENCE>/i)){if(_0x1773e5(0xa98)!==_0x1773e5(0x53a))return;else{if(this[_0x1773e5(0x6e8)]()===_0x1773e5(0x6b2))return this[_0x1773e5(0x239)]();else return this[_0x1773e5(0x857)]()?this[_0x1773e5(0xb18)]():_0x18155d[_0x1773e5(0x6c0)]['Scene_Battle_skillWindowRect'][_0x1773e5(0xa07)](this);}}this['item']()[_0x1773e5(0xbfd)][_0x1773e5(0x291)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x1773e5(0x23e)]=[]);if(DataManager['checkAutoCustomActionSequenceNotetagEffect'](this['item']())){if(_0x1773e5(0xbdd)===_0x1773e5(0x40c))return _0x153833[_0x1773e5(0x6c0)][_0x1773e5(0x658)][_0x1773e5(0xcbb)]['MaxLines'];else $gameTemp[_0x1773e5(0x23e)]=[];}},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x769)]=Scene_Options['prototype'][_0x45cef8(0x669)],Scene_Options[_0x45cef8(0x3cf)][_0x45cef8(0x669)]=function(){const _0x32b94e=_0x45cef8;let _0x555045=VisuMZ[_0x32b94e(0x6c0)][_0x32b94e(0x769)][_0x32b94e(0xa07)](this);const _0x5d88f9=VisuMZ['BattleCore'][_0x32b94e(0x658)];if(_0x5d88f9[_0x32b94e(0x3a6)][_0x32b94e(0x679)]&&_0x5d88f9[_0x32b94e(0x3a6)][_0x32b94e(0x8e6)])_0x555045+=0x2;if(_0x5d88f9[_0x32b94e(0x933)][_0x32b94e(0x679)]&&_0x5d88f9[_0x32b94e(0x933)][_0x32b94e(0x8e6)])_0x555045+=0x1;return _0x555045;},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xd03)]=Scene_Battle[_0x45cef8(0x3cf)]['initialize'],Scene_Battle['prototype'][_0x45cef8(0x754)]=function(){const _0x961f5d=_0x45cef8;VisuMZ[_0x961f5d(0x6c0)][_0x961f5d(0xd03)][_0x961f5d(0xa07)](this),this[_0x961f5d(0x81c)]();},VisuMZ[_0x45cef8(0x6c0)]['Scene_Battle_start']=Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x5da)],Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x5da)]=function(){const _0x30b1c9=_0x45cef8;if(SceneManager[_0x30b1c9(0x61d)]())Scene_Message[_0x30b1c9(0x3cf)][_0x30b1c9(0x5da)]['call'](this),this[_0x30b1c9(0x78d)]&&this[_0x30b1c9(0x78d)][_0x30b1c9(0x3b2)](),BattleManager[_0x30b1c9(0xa04)]&&BattleManager[_0x30b1c9(0x7fb)]();else{if('PBMCt'!==_0x30b1c9(0x851))VisuMZ[_0x30b1c9(0x6c0)]['Scene_Battle_start'][_0x30b1c9(0xa07)](this),$gameTroop[_0x30b1c9(0xc70)]();else{if(!_0x5dcbe4[_0x30b1c9(0xc83)]())return;const _0x598e38=_0x4bd11a[_0x30b1c9(0xaf3)]();if(!_0x598e38)return;_0x598e38[_0x30b1c9(0x625)](_0x30b1c9(0xba6));}}},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xccf)]=Scene_Battle['prototype'][_0x45cef8(0xc98)],Scene_Battle['prototype'][_0x45cef8(0xc98)]=function(){const _0x25b6eb=_0x45cef8;SceneManager[_0x25b6eb(0x9bd)]()?Scene_Message[_0x25b6eb(0x3cf)][_0x25b6eb(0xc98)][_0x25b6eb(0xa07)](this):_0x25b6eb(0x67f)!=='zNIAp'?(this[_0x25b6eb(0x4b5)]=new _0x54bc06(),this['_mainSprite'][_0x25b6eb(0xaca)]['x']=0.5,this[_0x25b6eb(0x4b5)]['anchor']['y']=0x1,this['addChild'](this[_0x25b6eb(0x4b5)]),this[_0x25b6eb(0xa19)]()):VisuMZ['BattleCore']['Scene_Battle_stop'][_0x25b6eb(0xa07)](this);},VisuMZ['BattleCore'][_0x45cef8(0xa69)]=Scene_Battle[_0x45cef8(0x3cf)]['terminate'],Scene_Battle[_0x45cef8(0x3cf)]['terminate']=function(){const _0x126620=_0x45cef8;SceneManager[_0x126620(0x9bd)]()?_0x126620(0xc5e)!=='MvbOC'?(_0xe75ba6=_0x3765b7(_0xe6e69b['$1']),_0x3f42d8=_0x51e35a(_0x29c9ef['$2'])):Scene_Message[_0x126620(0x3cf)]['terminate'][_0x126620(0xa07)](this):_0x126620(0x8ac)!==_0x126620(0x8ac)?(this[_0x126620(0x7fc)][_0x126620(0xc29)][_0x126620(0x4bb)]['x']=-0x1/(this['scale']['x']||0.001),this[_0x126620(0x7fc)][_0x126620(0xc29)][_0x126620(0x4bb)]['y']=0x1/(this[_0x126620(0x4bb)]['y']||0.001)):VisuMZ[_0x126620(0x6c0)][_0x126620(0xa69)][_0x126620(0xa07)](this),this[_0x126620(0x81c)]();},Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x81e)]=function(){const _0xc3239a=_0x45cef8;if(ConfigManager[_0xc3239a(0xb1f)]&&ConfigManager['uiInputPosition']!==undefined)return ConfigManager['uiInputPosition'];else{if(this['battleLayoutStyle']()===_0xc3239a(0x6b2)){if(_0xc3239a(0xa8b)!==_0xc3239a(0xa8b)){if(this[_0xc3239a(0x7b0)])_0x22752a=_0x2cb426['max'](0x0,this[_0xc3239a(0x7b0)][_0xc3239a(0xa2a)]-0x4);}else return![];}else{return Scene_Message['prototype'][_0xc3239a(0x81e)]['call'](this);;}}},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xa0e)]=Scene_Battle[_0x45cef8(0x3cf)]['createAllWindows'],Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x298)]=function(){const _0x3f37b4=_0x45cef8;this[_0x3f37b4(0xab5)](),VisuMZ[_0x3f37b4(0x6c0)][_0x3f37b4(0xa0e)][_0x3f37b4(0xa07)](this),this[_0x3f37b4(0x273)]();},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x4f4)]=Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0xbf8)],Scene_Battle['prototype']['createCancelButton']=function(){const _0x24e380=_0x45cef8;VisuMZ[_0x24e380(0x6c0)][_0x24e380(0x4f4)]['call'](this),this['battleLayoutStyle']()===_0x24e380(0x6b2)&&this[_0x24e380(0x553)]();},Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0xbc4)]=function(_0x50c283){const _0x4ff1b4=_0x45cef8;if(_0x50c283)this['_windowLayer']['x']=(Graphics[_0x4ff1b4(0x639)]-Graphics['boxWidth'])/0x2,this[_0x4ff1b4(0xadc)]['y']=(Graphics['height']-Graphics['boxHeight'])/0x2;else{if(_0x4ff1b4(0x571)!==_0x4ff1b4(0x25f))this['_windowLayer']['x']=Graphics[_0x4ff1b4(0x639)]*0xa,this[_0x4ff1b4(0xadc)]['y']=Graphics[_0x4ff1b4(0xa2a)]*0xa;else{const _0x2be696=this[_0x4ff1b4(0xc3c)];_0x2be696[_0x4ff1b4(0x894)](_0x529d88,0x0,_0x3465e8['y'],_0x2be696[_0x4ff1b4(0x277)],_0x4ff1b4(0xace));}}},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x29c)]=Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x800)],Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x800)]=function(){const _0x4d6ff5=_0x45cef8,_0xfe60e1=BattleManager['actor']();VisuMZ['BattleCore'][_0x4d6ff5(0x29c)][_0x4d6ff5(0xa07)](this);if(_0xfe60e1){if(_0xfe60e1===BattleManager[_0x4d6ff5(0x4d4)]())return;if(_0xfe60e1===BattleManager['_subject'])return;if(_0xfe60e1[_0x4d6ff5(0x231)]())_0xfe60e1[_0x4d6ff5(0x231)]()['stepBack']();}},VisuMZ[_0x45cef8(0x6c0)]['Scene_Battle_selectPreviousCommand']=Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x829)],Scene_Battle['prototype'][_0x45cef8(0x829)]=function(){const _0x3a7ec9=_0x45cef8,_0xedd0ce=BattleManager[_0x3a7ec9(0x4d4)]();if(_0xedd0ce&&_0xedd0ce[_0x3a7ec9(0x231)])_0xedd0ce[_0x3a7ec9(0x231)]()[_0x3a7ec9(0x6b7)]();VisuMZ[_0x3a7ec9(0x6c0)][_0x3a7ec9(0x5d2)][_0x3a7ec9(0xa07)](this);},VisuMZ['BattleCore']['Scene_Battle_logWindowRect']=Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x653)],Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x653)]=function(){const _0xff89c6=_0x45cef8;if(VisuMZ[_0xff89c6(0x6c0)]['Settings'][_0xff89c6(0xcbb)][_0xff89c6(0x82d)]){if(_0xff89c6(0x973)===_0xff89c6(0xc89)){const _0x3ec66c=[];for(let _0x46b89c=0x0;_0x46b89c<this['numTargets']();_0x46b89c++){_0x3ec66c[_0xff89c6(0x287)](_0x40e83d['trueRandomTarget']());}return _0x3ec66c;}else return VisuMZ[_0xff89c6(0x6c0)][_0xff89c6(0x658)][_0xff89c6(0xcbb)]['BattleLogRectJS']['call'](this);}return VisuMZ[_0xff89c6(0x6c0)]['Scene_Battle_logWindowRect'][_0xff89c6(0xa07)](this);},VisuMZ['BattleCore'][_0x45cef8(0x403)]=Scene_Battle['prototype'][_0x45cef8(0x4df)],Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x4df)]=function(){const _0x4d4ad3=_0x45cef8;VisuMZ[_0x4d4ad3(0x6c0)][_0x4d4ad3(0x403)]['call'](this),this[_0x4d4ad3(0x31a)]();},Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x31a)]=function(){const _0xb8a886=_0x45cef8,_0x70fc6c=this[_0xb8a886(0x83b)];_0x70fc6c['setHandler'](_0xb8a886(0x506),this[_0xb8a886(0xa4f)][_0xb8a886(0xb9b)](this)),_0x70fc6c['setHandler']('options',this[_0xb8a886(0xa86)][_0xb8a886(0xb9b)](this));const _0x56f328=this[_0xb8a886(0x6e8)]();switch(_0x56f328){case'xp':case'portrait':return this[_0xb8a886(0x83b)][_0xb8a886(0x5de)](0x1);break;}},Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0xa4f)]=function(){const _0x1895b5=_0x45cef8;BattleManager[_0x1895b5(0x448)]=!![],$gameParty[_0x1895b5(0xca3)](),this[_0x1895b5(0x800)](),BattleManager['isTpb']()&&('ZJYpJ'!=='srToX'?BattleManager[_0x1895b5(0x486)]=![]:_0x1bc32f[_0x1895b5(0x4ba)]?this[_0x1895b5(0x56e)]():_0x53daae[_0x1895b5(0x6c0)]['Scene_Map_launchBattle'][_0x1895b5(0xa07)](this));},Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0xa86)]=function(){const _0x4a0a6d=_0x45cef8;if(this[_0x4a0a6d(0xc05)]())_0x4a0a6d(0xa8d)!==_0x4a0a6d(0xa8d)?_0x2b7e03?this['setup'](_0x2dc340[_0x4a0a6d(0xa0f)],0x0):this[_0x4a0a6d(0x6a0)]():(this[_0x4a0a6d(0x478)]=!![],this[_0x4a0a6d(0x266)][_0x4a0a6d(0x287)](_0x4a0a6d(0x4b8),VisuMZ['BattleCore'][_0x4a0a6d(0x658)][_0x4a0a6d(0x8f7)]['ActiveTpbOptionsMessage']));else{if(_0x4a0a6d(0xc0b)!=='EjnDm')this[_0x4a0a6d(0x337)]();else{const _0x46dbe8=_0x59a003[_0x4a0a6d(0x6c0)][_0x4a0a6d(0x658)][_0x4a0a6d(0x5be)];if(_0x46dbe8['StatusWindowAttachmentBack']){const _0x88b568=new _0x499535();_0x88b568[_0x4a0a6d(0xaaa)]=_0xaff754['loadSystem'](_0x46dbe8['StatusWindowAttachmentBack']),_0x88b568['x']=_0x46dbe8[_0x4a0a6d(0x93c)]||0x0,_0x88b568['y']=_0x46dbe8[_0x4a0a6d(0x7c0)]||0x0,this[_0x4a0a6d(0x6be)](_0x88b568),this[_0x4a0a6d(0x1fb)]=_0x88b568;}if(_0x46dbe8[_0x4a0a6d(0x8c1)]){const _0x53f693=new _0x30eb95();_0x53f693[_0x4a0a6d(0xaaa)]=_0x182bc6[_0x4a0a6d(0x804)](_0x46dbe8[_0x4a0a6d(0x8c1)]),_0x53f693['x']=_0x46dbe8[_0x4a0a6d(0x5e5)]||0x0,_0x53f693['y']=_0x46dbe8[_0x4a0a6d(0x864)]||0x0,this['addChild'](_0x53f693),this[_0x4a0a6d(0x75a)]=_0x53f693;}}}},Scene_Battle['prototype']['isQueueOptionsMenu']=function(){return BattleManager['isActiveTpb']();},Scene_Battle[_0x45cef8(0x3cf)]['callOptions']=function(){const _0x489b53=_0x45cef8;this['_callSceneOptions']=![],this[_0x489b53(0x78d)][_0x489b53(0x3b2)](),this['_windowLayer']['visible']=![];if(BattleManager['isBattleTest']())($dataSystem['battleback1Name']||$dataSystem[_0x489b53(0xc3f)])&&SceneManager[_0x489b53(0x1f4)]();else($gameMap[_0x489b53(0x644)]()||$gameMap[_0x489b53(0xc3f)]())&&SceneManager[_0x489b53(0x1f4)]();SceneManager[_0x489b53(0x287)](Scene_Options),BattleManager[_0x489b53(0xc74)]()&&(BattleManager[_0x489b53(0xa04)]=BattleManager['actor']());},VisuMZ[_0x45cef8(0x6c0)]['Scene_Battle_updateBattleProcess']=Scene_Battle[_0x45cef8(0x3cf)]['updateBattleProcess'],Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0xcc9)]=function(){const _0xc0f770=_0x45cef8;VisuMZ[_0xc0f770(0x6c0)][_0xc0f770(0x801)]['call'](this);if(this[_0xc0f770(0x478)]&&!BattleManager['_subject'])this[_0xc0f770(0x337)]();},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xafe)]=Scene_Battle[_0x45cef8(0x3cf)]['update'],Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x3b2)]=function(){const _0xb0b165=_0x45cef8;VisuMZ[_0xb0b165(0x6c0)]['Scene_Battle_update'][_0xb0b165(0xa07)](this),this['updateOnceParallelInterpreters']();},Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x273)]=function(){const _0x7953d4=_0x45cef8,_0x534e76=this['autoBattleWindowRect']();this['_autoBattleWindow']=new Window_AutoBattleCancel(_0x534e76),this[_0x7953d4(0x485)]['hide'](),this[_0x7953d4(0x5b6)](this[_0x7953d4(0x485)]);},Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x46f)]=function(){const _0x5cac3b=_0x45cef8;return VisuMZ[_0x5cac3b(0x6c0)][_0x5cac3b(0x658)][_0x5cac3b(0x3a6)][_0x5cac3b(0x685)]['call'](this);},Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x81c)]=function(){const _0x3f9767=_0x45cef8;this[_0x3f9767(0xae6)]=[];},Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x235)]=function(){const _0x31a0db=_0x45cef8;if(!this['_onceParallelInterpreters'])return;for(const _0x4ca813 of this[_0x31a0db(0xae6)]){_0x4ca813&&_0x4ca813[_0x31a0db(0x3b2)]();}},Scene_Battle['prototype']['playOnceParallelInterpreter']=function(_0x1da73e){const _0x4023fa=_0x45cef8,_0x36eef7=$dataCommonEvents[_0x1da73e];if(!_0x36eef7)return;const _0x2ffa67=new Game_BattleOnceParallelInterpreter();this[_0x4023fa(0x8d1)](_0x2ffa67),_0x2ffa67[_0x4023fa(0x9b7)](_0x1da73e);},Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x8d1)]=function(_0x9e86d){const _0x351e68=_0x45cef8;this[_0x351e68(0xae6)]=this[_0x351e68(0xae6)]||[],this[_0x351e68(0xae6)][_0x351e68(0x287)](_0x9e86d);},Scene_Battle[_0x45cef8(0x3cf)]['removeOnceParallelInterpreter']=function(_0x5e0968){const _0x31cc11=_0x45cef8;this[_0x31cc11(0xae6)]=this[_0x31cc11(0xae6)]||[],this[_0x31cc11(0xae6)]['remove'](_0x5e0968);},Game_Troop['prototype'][_0x45cef8(0xc70)]=function(){const _0x3fcb9b=_0x45cef8;for(const _0xffa5a6 of this[_0x3fcb9b(0x71d)]()[_0x3fcb9b(0x6c2)]){if(!this[_0x3fcb9b(0x92c)](_0xffa5a6))continue;SceneManager['_scene'][_0x3fcb9b(0x86c)](_0xffa5a6);}},Game_Troop[_0x45cef8(0x3cf)][_0x45cef8(0x92c)]=function(_0x18c2a6){const _0x52018c=_0x45cef8;if(!_0x18c2a6)return;for(const _0x5499c5 of _0x18c2a6[_0x52018c(0xa0f)]){if(_0x52018c(0xbb7)===_0x52018c(0xc3b)){this[_0x52018c(0x8c4)](_0x52018c(0x711));return;}else{if([0x6c,0x198][_0x52018c(0x2b1)](_0x5499c5[_0x52018c(0xb78)])){const _0x341f42=_0x5499c5[_0x52018c(0x827)][0x0];if(_0x341f42[_0x52018c(0x291)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}}return![];},Scene_Battle['prototype'][_0x45cef8(0x86c)]=function(_0x1ed9af){const _0x3c0124=_0x45cef8;if(!_0x1ed9af)return;const _0x2c851f=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0x2c851f),_0x2c851f[_0x3c0124(0x2ca)](_0x1ed9af);};function Game_BattleOnceParallelInterpreter(){const _0x5ba0e0=_0x45cef8;this[_0x5ba0e0(0x754)](...arguments);}Game_BattleOnceParallelInterpreter[_0x45cef8(0x3cf)]=Object[_0x45cef8(0x558)](Game_Interpreter[_0x45cef8(0x3cf)]),Game_BattleOnceParallelInterpreter['prototype'][_0x45cef8(0x8e2)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter['prototype'][_0x45cef8(0x9b7)]=function(_0x3c756b){const _0x594dfa=_0x45cef8,_0x1316a9=$dataCommonEvents[_0x3c756b];_0x1316a9?this[_0x594dfa(0x74e)](_0x1316a9['list'],0x0):this['terminate']();},Game_BattleOnceParallelInterpreter['prototype'][_0x45cef8(0x6a0)]=function(){const _0x1967ff=_0x45cef8;if(!SceneManager['isSceneBattle']())return;SceneManager[_0x1967ff(0x9e2)][_0x1967ff(0x477)](this),Game_Interpreter[_0x1967ff(0x3cf)][_0x1967ff(0x6a0)][_0x1967ff(0xa07)](this);},Game_BattleOnceParallelInterpreter[_0x45cef8(0x3cf)]['setTroopPage']=function(_0x1f5224){const _0x59d0e6=_0x45cef8;_0x1f5224?this['setup'](_0x1f5224[_0x59d0e6(0xa0f)],0x0):_0x59d0e6(0x8d5)===_0x59d0e6(0xae0)?_0xbcdfbc[_0x59d0e6(0xd00)]=_0x55d316(_0x2a50c4['$1']):this[_0x59d0e6(0x6a0)]();},Scene_Battle[_0x45cef8(0x3cf)]['isPartyCommandWindowDisabled']=function(){const _0x52a083=_0x45cef8;return VisuMZ['BattleCore'][_0x52a083(0x658)][_0x52a083(0x8f7)][_0x52a083(0x2a1)];},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x8f0)]=Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x863)],Scene_Battle['prototype'][_0x45cef8(0x863)]=function(){const _0x3002a6=_0x45cef8;if(this[_0x3002a6(0xb7f)]())this['onDisabledPartyCommandSelection']();else{if(_0x3002a6(0x9d4)===_0x3002a6(0xb8b)){const _0x38b94c=this[_0x3002a6(0x6e8)]();['xp',_0x3002a6(0x4b4),_0x3002a6(0x6b2)][_0x3002a6(0x2b1)](_0x38b94c)&&this[_0x3002a6(0x5c3)][_0x3002a6(0x535)](),this['okTargetSelectionVisibility']();}else VisuMZ['BattleCore'][_0x3002a6(0x8f0)][_0x3002a6(0xa07)](this);}},Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0xc00)]=function(){const _0x15c613=_0x45cef8;if(BattleManager[_0x15c613(0x777)]()){if(_0x15c613(0x80c)===_0x15c613(0x423)){if(!_0x39ee63['isSceneBattle']())return;if(!_0x4b760a[_0x15c613(0x3ca)])return;if(!_0x4d1143[_0x15c613(0x8af)])return;_0x2866fd['ConvertParams'](_0x497edf,_0x44ac8a);const _0x3003a7=_0x5a7b74[_0x15c613(0x6a7)];_0x4e6040[_0x15c613(0x83a)](_0x3003a7,_0x3ac6c7['_subject'][_0x15c613(0x959)]());}else this['selectNextCommand']();}else{if(BattleManager['isTpb']()){if('HOtEv'!==_0x15c613(0xa4e))VisuMZ[_0x15c613(0x6c0)][_0x15c613(0x8f0)][_0x15c613(0xa07)](this);else return _0x3a5daa(_0x359994['$1'])*0.01;}}},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x6f6)]=Scene_Battle['prototype'][_0x45cef8(0xc0f)],Scene_Battle['prototype']['commandFight']=function(){const _0x2a32cc=_0x45cef8;if(BattleManager[_0x2a32cc(0xc74)]())_0x2a32cc(0xbc8)===_0x2a32cc(0xc11)?this[_0x2a32cc(0x5e1)](_0x2a32cc(0x375)):(this[_0x2a32cc(0xa6c)](),this[_0x2a32cc(0x7f2)]());else{if(_0x2a32cc(0x68c)!==_0x2a32cc(0x68c)){if(this['_battleLayoutStyle'])return this[_0x2a32cc(0x3f1)];return this[_0x2a32cc(0x3f1)]=_0x6d909[_0x2a32cc(0x9e2)][_0x2a32cc(0x6e8)](),this[_0x2a32cc(0x3f1)];}else VisuMZ[_0x2a32cc(0x6c0)]['Scene_Battle_commandFight']['call'](this);}},Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0xa6c)]=function(){const _0x137f0e=_0x45cef8;if(!VisuMZ[_0x137f0e(0x6c0)]['TpbActiveChangeEnabled'])return;if(Imported[_0x137f0e(0x6a4)]&&BattleManager[_0x137f0e(0xb45)]())return;const _0x336319=$gameParty[_0x137f0e(0x214)]()[_0x137f0e(0x4db)](_0x14c827=>_0x14c827[_0x137f0e(0x557)]()&&_0x14c827['canInput']());BattleManager[_0x137f0e(0xb40)]=_0x336319[0x0]||null,BattleManager[_0x137f0e(0xb40)]&&BattleManager[_0x137f0e(0xb40)]['setActionState']('inputting');},VisuMZ[_0x45cef8(0x6c0)]['Scene_Battle_createActorCommandWindow']=Scene_Battle['prototype'][_0x45cef8(0x358)],Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x358)]=function(){const _0x4c97c0=_0x45cef8;VisuMZ[_0x4c97c0(0x6c0)][_0x4c97c0(0x72f)][_0x4c97c0(0xa07)](this),this[_0x4c97c0(0x6ab)]();},Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x6ab)]=function(){const _0x2fa97b=_0x45cef8,_0x25fcf5=this[_0x2fa97b(0x5c3)];_0x25fcf5[_0x2fa97b(0x3b1)]('escape',this[_0x2fa97b(0x9a9)]['bind'](this)),_0x25fcf5[_0x2fa97b(0x3b1)](_0x2fa97b(0x506),this[_0x2fa97b(0x509)]['bind'](this)),_0x25fcf5[_0x2fa97b(0x3b1)](_0x2fa97b(0xa7c),this['actorCommandSingleSkill'][_0x2fa97b(0xb9b)](this));if(BattleManager[_0x2fa97b(0xc74)]()){if(this[_0x2fa97b(0xb7f)]())delete _0x25fcf5[_0x2fa97b(0xa5e)]['cancel'];else{if('IqXbU'!=='SzPdx')_0x25fcf5['setHandler'](_0x2fa97b(0x2f4),this[_0x2fa97b(0xb4e)]['bind'](this));else{if(_0x3d0bc4['isTpb']())return _0x2fa97b(0x776);return _0x2fa97b(0xb8a);}}}},Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x9a9)]=function(){const _0x21a4fa=_0x45cef8;this[_0x21a4fa(0x9bc)]();},Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x509)]=function(){const _0x5a9620=_0x45cef8;BattleManager[_0x5a9620(0x4d4)]()[_0x5a9620(0x6da)](),BattleManager[_0x5a9620(0x621)](),BattleManager[_0x5a9620(0xc01)](),this['changeInputWindow']();},Scene_Battle['prototype'][_0x45cef8(0xbae)]=function(){const _0x52bc6f=_0x45cef8,_0xd8c87=BattleManager[_0x52bc6f(0xa46)](),_0x4b1c6b=this[_0x52bc6f(0x5c3)][_0x52bc6f(0x46c)]();_0xd8c87[_0x52bc6f(0xa57)](_0x4b1c6b),BattleManager['actor']()[_0x52bc6f(0xc6c)]($dataSkills[_0x4b1c6b]),this['onSelectAction']();},Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0xb4e)]=function(){const _0x3555cc=_0x45cef8;this['tpbActorSwitchConditionsMet']()?this['performTpbActiveCheckSwitch']():this[_0x3555cc(0x283)]();},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xa29)]=![],Scene_Battle['prototype'][_0x45cef8(0x1e8)]=function(){const _0x1d38f5=_0x45cef8;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x1d38f5(0xb45)]()){if(_0x1d38f5(0x51e)!==_0x1d38f5(0x303))return![];else{if(!this[_0x1d38f5(0x87d)])return;this[_0x1d38f5(0xa87)]!==this[_0x1d38f5(0x87d)][_0x1d38f5(0xa87)]&&this['setup'](this[_0x1d38f5(0x87d)][_0x1d38f5(0xa87)]);}}else{if(_0x1d38f5(0xb96)==='hYRUt'){_0x2c3ce3=_0x3d80c9||0x1,_0x48728e--;const _0x1e05db=this[_0x1d38f5(0x8f9)]();return _0x1e05db[_0x3315e6]?_0x1e05db[_0x2942f6][_0x1d38f5(0xc91)]:0x0;}else{if(!VisuMZ[_0x1d38f5(0x6c0)][_0x1d38f5(0xa29)])return![];const _0x30983c=$gameParty['aliveMembers']()[_0x1d38f5(0x4db)](_0x377502=>_0x377502['isTpbCharged']()&&_0x377502['canInput']());return _0x30983c[_0x1d38f5(0xcc5)]>0x0&&BattleManager[_0x1d38f5(0x4d4)]()!==_0x30983c[_0x30983c['length']-0x1];}}},Scene_Battle[_0x45cef8(0x3cf)]['performTpbActiveCheckSwitch']=function(){const _0x5617ec=_0x45cef8,_0x4c77d7=BattleManager[_0x5617ec(0x4d4)](),_0x3c6f8b=_0x4c77d7[_0x5617ec(0x231)]();if(_0x3c6f8b)_0x3c6f8b[_0x5617ec(0x6b7)]();const _0x263f1a=$gameParty[_0x5617ec(0x214)]()[_0x5617ec(0x4db)](_0x24ca8f=>_0x24ca8f['isTpbCharged']()&&_0x24ca8f[_0x5617ec(0x736)]()),_0x18218b=_0x263f1a[_0x5617ec(0xac5)](_0x4c77d7),_0x23bcf9=_0x263f1a[_0x18218b+0x1];BattleManager[_0x5617ec(0xb40)]=_0x23bcf9||null;if(_0x23bcf9)_0x23bcf9[_0x5617ec(0x6bd)](_0x5617ec(0x2a8));_0x4c77d7[_0x5617ec(0x6bd)](_0x5617ec(0xa8c)),this[_0x5617ec(0x2af)]();},Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x283)]=function(){const _0x11771b=_0x45cef8;this[_0x11771b(0x83b)]['setup'](),this['_actorCommandWindow'][_0x11771b(0x5ba)]();if(!VisuMZ[_0x11771b(0x6c0)][_0x11771b(0xa29)])return;if(Imported[_0x11771b(0x6a4)]&&BattleManager[_0x11771b(0xb45)]())return;if(BattleManager[_0x11771b(0xb40)]){if(_0x11771b(0xc66)!=='zUKUS')_0x2a1e86['BattleCore'][_0x11771b(0x832)]['call'](this,_0xdffa58),this[_0x11771b(0xa9f)](_0x5bcf47);else{BattleManager[_0x11771b(0xb40)]['setActionState'](_0x11771b(0xa8c));const _0x2d79f4=BattleManager['_currentActor'][_0x11771b(0x231)]();if(_0x2d79f4)_0x2d79f4['stepBack']();}}BattleManager[_0x11771b(0xb40)]=null;},VisuMZ['BattleCore']['Scene_Battle_createHelpWindow']=Scene_Battle['prototype'][_0x45cef8(0x5b3)],Scene_Battle['prototype'][_0x45cef8(0x5b3)]=function(){const _0x1f60a2=_0x45cef8;VisuMZ[_0x1f60a2(0x6c0)][_0x1f60a2(0x750)][_0x1f60a2(0xa07)](this),this[_0x1f60a2(0x404)]();},Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x404)]=function(){const _0x2cd903=_0x45cef8;this[_0x2cd903(0x5c3)]['setHelpWindow'](this[_0x2cd903(0x652)]),this[_0x2cd903(0x83b)]['setHelpWindow'](this['_helpWindow']);},Scene_Battle['prototype']['battleLayoutStyle']=function(){const _0x10133c=_0x45cef8;if($gameTemp['_forcedBattleLayout']!==undefined)return _0x10133c(0xb8f)!=='MgKpi'?_0x260a8b[_0x10133c(0x344)]-_0x5b3879['spriteId']:$gameTemp[_0x10133c(0x30f)];if(this[_0x10133c(0x3f1)]){if('yCuAs'==='LkBYC')_0x3783b2['_subject'][_0x10133c(0xa15)]()[_0x10133c(0x296)](_0x66b53e);else return this['_battleLayoutStyle'];}return this['_battleLayoutStyle']=VisuMZ['BattleCore']['Settings'][_0x10133c(0x5be)]['Style']['toLowerCase']()[_0x10133c(0x7f3)](),this[_0x10133c(0x3f1)]===_0x10133c(0xb6a)&&!Imported['VisuMZ_3_SideviewBattleUI']&&(this[_0x10133c(0x3f1)]=_0x10133c(0x991)),this['_battleLayoutStyle'];},VisuMZ[_0x45cef8(0x6c0)]['Scene_Battle_windowAreaHeight']=Scene_Battle[_0x45cef8(0x3cf)]['windowAreaHeight'],Scene_Battle[_0x45cef8(0x3cf)]['windowAreaHeight']=function(){const _0x20bc10=_0x45cef8,_0x17b462=this['battleLayoutStyle']();switch(_0x17b462){case _0x20bc10(0xa0f):return this[_0x20bc10(0x7f0)](Math['max'](0x1,$gameParty[_0x20bc10(0x822)]()),!![]);break;default:return VisuMZ['BattleCore'][_0x20bc10(0x88f)][_0x20bc10(0xa07)](this);break;}},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xbfe)]=Scene_Battle['prototype'][_0x45cef8(0x701)],Scene_Battle[_0x45cef8(0x3cf)]['helpWindowRect']=function(){const _0x7d95a6=_0x45cef8,_0x55bf17=this[_0x7d95a6(0x6e8)]();switch(_0x55bf17){case _0x7d95a6(0x6b2):return this[_0x7d95a6(0x3db)]();break;case _0x7d95a6(0x991):case _0x7d95a6(0xa0f):case'xp':case _0x7d95a6(0x4b4):default:return VisuMZ[_0x7d95a6(0x6c0)][_0x7d95a6(0xbfe)][_0x7d95a6(0xa07)](this);break;}},Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x89c)]=function(){const _0x2e8f5e=_0x45cef8,_0x3e85fd=this[_0x2e8f5e(0x6e8)]();switch(_0x3e85fd){case'xp':case _0x2e8f5e(0x4b4):return this[_0x2e8f5e(0x7f8)]();break;case _0x2e8f5e(0x6b2):return this['statusWindowRectBorderStyle']();break;case _0x2e8f5e(0x991):case _0x2e8f5e(0xa0f):default:return this[_0x2e8f5e(0x92a)]();break;}},VisuMZ['BattleCore'][_0x45cef8(0xd0d)]=Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x910)],Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x910)]=function(){const _0x29629f=_0x45cef8,_0x434c1d=this['battleLayoutStyle']();switch(_0x434c1d){case'xp':case _0x29629f(0x4b4):return this[_0x29629f(0x635)]();break;case _0x29629f(0x6b2):return this[_0x29629f(0x1d7)]();case _0x29629f(0x991):case'list':default:return this[_0x29629f(0x6c8)]();break;}},Scene_Battle[_0x45cef8(0x3cf)]['partyCommandWindowRectDefaultStyle']=function(){const _0x400fd7=_0x45cef8,_0x1da87f=VisuMZ[_0x400fd7(0x6c0)][_0x400fd7(0x658)][_0x400fd7(0x5be)],_0x4baaec=_0x1da87f[_0x400fd7(0x8eb)]||0xc0,_0x4d2ed0=this[_0x400fd7(0x56f)](),_0x4d4486=this['isRightInputMode']()?Graphics['boxWidth']-_0x4baaec:0x0,_0x292b77=Graphics['boxHeight']-_0x4d2ed0;return new Rectangle(_0x4d4486,_0x292b77,_0x4baaec,_0x4d2ed0);},Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0xa2c)]=function(){return this['partyCommandWindowRect']();},VisuMZ[_0x45cef8(0x6c0)]['Scene_Battle_updateStatusWindowPosition']=Scene_Battle['prototype'][_0x45cef8(0xcf0)],Scene_Battle['prototype'][_0x45cef8(0xcf0)]=function(){const _0x4e67f8=_0x45cef8,_0x56426a=this[_0x4e67f8(0x6e8)]();switch(_0x56426a){case'xp':case'portrait':case _0x4e67f8(0x6b2):break;case _0x4e67f8(0x991):case _0x4e67f8(0xa0f):default:VisuMZ[_0x4e67f8(0x6c0)][_0x4e67f8(0x5a6)][_0x4e67f8(0xa07)](this);break;}},VisuMZ[_0x45cef8(0x6c0)]['Scene_Battle_startActorSelection']=Scene_Battle['prototype'][_0x45cef8(0xc86)],Scene_Battle[_0x45cef8(0x3cf)]['startActorSelection']=function(){const _0x1da785=_0x45cef8;VisuMZ[_0x1da785(0x6c0)][_0x1da785(0x602)]['call'](this),this[_0x1da785(0x9ac)]();},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x88b)]=Scene_Battle[_0x45cef8(0x3cf)]['startEnemySelection'],Scene_Battle['prototype'][_0x45cef8(0x897)]=function(){const _0xa9f73=_0x45cef8;VisuMZ[_0xa9f73(0x6c0)]['Scene_Battle_startEnemySelection']['call'](this),this[_0xa9f73(0x282)]['autoSelect'](),this['makeTargetSelectionMoreVisible']();},Scene_Battle['prototype'][_0x45cef8(0x9ac)]=function(){const _0x1afc12=_0x45cef8,_0x39fe1a=this[_0x1afc12(0x6e8)]();['xp','portrait',_0x1afc12(0x6b2)]['includes'](_0x39fe1a)&&(_0x1afc12(0x351)!==_0x1afc12(0x351)?this['x']=this['enemy']()[_0x1afc12(0x231)]()[_0x1afc12(0x3c6)]:this[_0x1afc12(0x5c3)][_0x1afc12(0x5ba)]()),(_0x39fe1a==='border'||this[_0x1afc12(0x857)]())&&(this[_0x1afc12(0x8e1)][_0x1afc12(0x5ba)](),this['_itemWindow']['close']());},VisuMZ['BattleCore'][_0x45cef8(0x977)]=Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0xbf6)],Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0xbf6)]=function(){const _0xd0ecc6=_0x45cef8;VisuMZ[_0xd0ecc6(0x6c0)][_0xd0ecc6(0x977)][_0xd0ecc6(0xa07)](this),this[_0xd0ecc6(0x9e8)]();},Scene_Battle[_0x45cef8(0x3cf)]['isNonSubmenuCancel']=function(){const _0x527c81=_0x45cef8;return['attack',_0x527c81(0x663),_0x527c81(0xa7c)]['includes'](this[_0x527c81(0x5c3)][_0x527c81(0x6fd)]());},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x37a)]=Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x925)],Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x925)]=function(){const _0x50e68a=_0x45cef8;this[_0x50e68a(0x348)]()?(this[_0x50e68a(0x350)][_0x50e68a(0xd10)](),this[_0x50e68a(0x518)]['hide'](),this[_0x50e68a(0x5c3)][_0x50e68a(0x64b)]()):VisuMZ[_0x50e68a(0x6c0)][_0x50e68a(0x37a)][_0x50e68a(0xa07)](this),this['cancelTargetSelectionVisibility']();},VisuMZ[_0x45cef8(0x6c0)]['Scene_Battle_onEnemyOk']=Scene_Battle['prototype'][_0x45cef8(0x2d3)],Scene_Battle[_0x45cef8(0x3cf)]['onEnemyOk']=function(){const _0x14d90e=_0x45cef8;VisuMZ['BattleCore'][_0x14d90e(0x650)][_0x14d90e(0xa07)](this),this[_0x14d90e(0x9e8)]();},VisuMZ['BattleCore'][_0x45cef8(0x424)]=Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x2fa)],Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x2fa)]=function(){const _0x5d9272=_0x45cef8;this[_0x5d9272(0x348)]()?(this[_0x5d9272(0x350)][_0x5d9272(0xd10)](),this[_0x5d9272(0x282)][_0x5d9272(0x939)](),this[_0x5d9272(0x5c3)][_0x5d9272(0x64b)]()):_0x5d9272(0x28e)!==_0x5d9272(0x406)?VisuMZ[_0x5d9272(0x6c0)]['Scene_Battle_onEnemyCancel'][_0x5d9272(0xa07)](this):(_0x2611c7['BattleCore'][_0x5d9272(0x388)][_0x5d9272(0xa07)](this),this['bitmap']&&(this[_0x5d9272(0xaaa)][_0x5d9272(0xc52)]=_0x19d309['BattleCore'][_0x5d9272(0x658)][_0x5d9272(0x970)][_0x5d9272(0xbe4)])),this['cancelTargetSelectionVisibility']();},Scene_Battle[_0x45cef8(0x3cf)]['okTargetSelectionVisibility']=function(){const _0x498f53=_0x45cef8,_0x38c24c=this[_0x498f53(0x6e8)]();if(_0x38c24c===_0x498f53(0x6b2)||this[_0x498f53(0x857)]()){if(_0x498f53(0x1e2)!=='jBPKg'){this[_0x498f53(0x8e1)]['open']();if(this['_skillWindow'][_0x498f53(0x6ea)]){if(_0x498f53(0x207)!==_0x498f53(0x854))this[_0x498f53(0x8e1)][_0x498f53(0xd10)]();else{if(!(_0x1bc562[_0x498f53(0x6c0)][_0x498f53(0x658)][_0x498f53(0x4d0)][_0x498f53(0xa1d)]??!![]))return;const _0x26826f=this['commandSymbol'](_0x401879);if(![_0x498f53(0x71e),_0x498f53(0x663),_0x498f53(0xa7c)][_0x498f53(0x2b1)](_0x26826f))return;const _0x54e73a=this[_0x498f53(0x745)](_0x41dc72);let _0x4804b8=null;if(_0x26826f===_0x498f53(0x71e))_0x4804b8=_0x123d01[this['_actor'][_0x498f53(0x202)]()];else _0x26826f===_0x498f53(0x663)?_0x4804b8=_0x4a650f[this['_actor'][_0x498f53(0xa23)]()]:_0x4804b8=_0x19579f[this['_list'][_0x387f28][_0x498f53(0x628)]];this[_0x498f53(0x203)](this[_0x498f53(0x318)],_0x4804b8,_0x54e73a['x'],_0x54e73a['y'],_0x54e73a[_0x498f53(0x639)]);}}this[_0x498f53(0xce3)][_0x498f53(0x535)]();if(this[_0x498f53(0xce3)][_0x498f53(0x6ea)]){if(_0x498f53(0xcc6)!=='xAIxf')this[_0x498f53(0xce3)][_0x498f53(0xd10)]();else return 0x1*this['_growY'];}}else return _0x4d302f[_0x498f53(0x6c0)]['Game_Action_numRepeats'][_0x498f53(0xa07)](this);}},Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x94e)]=function(){const _0x4e19ee=_0x45cef8,_0x328f0d=this[_0x4e19ee(0x6e8)]();['xp',_0x4e19ee(0x4b4),_0x4e19ee(0x6b2)]['includes'](_0x328f0d)&&('nihtx'!==_0x4e19ee(0xb04)?this[_0x4e19ee(0x5c3)][_0x4e19ee(0x535)]():this[_0x4e19ee(0x7fc)][_0x4e19ee(0x5f7)]()),this[_0x4e19ee(0x9e8)]();},Scene_Battle[_0x45cef8(0x3cf)]['statusWindowRectDefaultStyle']=function(){const _0x2cf328=_0x45cef8,_0x3e8ab2=VisuMZ['BattleCore'][_0x2cf328(0x658)][_0x2cf328(0x5be)],_0x565624=Window_BattleStatus[_0x2cf328(0x3cf)][_0x2cf328(0x81f)](),_0x244188=Graphics['boxWidth']-(_0x3e8ab2[_0x2cf328(0x8eb)]||0xc0),_0xb1dce=this[_0x2cf328(0x56f)]()+_0x565624,_0x50689f=this[_0x2cf328(0x81e)]()?0x0:Graphics[_0x2cf328(0xa5d)]-_0x244188,_0xe443a9=Graphics[_0x2cf328(0xb42)]-_0xb1dce+_0x565624;return new Rectangle(_0x50689f,_0xe443a9,_0x244188,_0xb1dce);},Scene_Battle['prototype'][_0x45cef8(0x7f8)]=function(){const _0x15e155=_0x45cef8,_0x9bd71=Window_BattleStatus[_0x15e155(0x3cf)]['extraHeight'](),_0x33ea74=Graphics[_0x15e155(0xa5d)],_0x708643=this[_0x15e155(0x56f)]()+_0x9bd71,_0x190af4=0x0,_0x926311=Graphics[_0x15e155(0xb42)]-_0x708643+_0x9bd71;return new Rectangle(_0x190af4,_0x926311,_0x33ea74,_0x708643);},Scene_Battle[_0x45cef8(0x3cf)]['partyCommandWindowRectXPStyle']=function(){const _0x2d2fad=_0x45cef8,_0x540e94=Graphics[_0x2d2fad(0xa5d)]/0x2,_0x4a0050=this[_0x2d2fad(0x7f0)](VisuMZ['BattleCore'][_0x2d2fad(0x658)][_0x2d2fad(0x5be)][_0x2d2fad(0x88d)],!![]),_0x321fbd=Math[_0x2d2fad(0x365)]((Graphics[_0x2d2fad(0xa5d)]-_0x540e94)/0x2),_0x3109cf=Graphics[_0x2d2fad(0xb42)]-_0x4a0050-this[_0x2d2fad(0x7f8)]()[_0x2d2fad(0xa2a)];return new Rectangle(_0x321fbd,_0x3109cf,_0x540e94,_0x4a0050);},Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x3db)]=function(){const _0x4b1c8e=_0x45cef8,_0x4c1744=Graphics[_0x4b1c8e(0x639)],_0x435be4=Math[_0x4b1c8e(0x365)]((Graphics['boxWidth']-_0x4c1744)/0x2),_0x7c0ca7=this[_0x4b1c8e(0x5b1)](),_0x2ddcb9=(Graphics[_0x4b1c8e(0xa2a)]-Graphics['boxHeight'])/-0x2;return new Rectangle(_0x435be4,_0x2ddcb9,_0x4c1744,_0x7c0ca7);},Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x4c7)]=function(){const _0x9afb04=_0x45cef8,_0xf46035=Graphics[_0x9afb04(0x639)],_0x179641=Math[_0x9afb04(0x365)]((Graphics['boxWidth']-_0xf46035)/0x2),_0x33b31e=this['calcWindowHeight'](0x4,!![]),_0x21b61f=Graphics[_0x9afb04(0xb42)]-_0x33b31e+(Graphics['height']-Graphics['boxHeight'])/0x2;return new Rectangle(_0x179641,_0x21b61f,_0xf46035,_0x33b31e);},Scene_Battle['prototype'][_0x45cef8(0x1d7)]=function(){const _0x3c224a=_0x45cef8,_0x80efc6=Math[_0x3c224a(0x74d)](Graphics[_0x3c224a(0x639)]/0x3),_0x2c67a5=this['isRightInputMode']()?(Graphics[_0x3c224a(0x639)]+Graphics[_0x3c224a(0xa5d)])/0x2-_0x80efc6:(Graphics[_0x3c224a(0x639)]-Graphics[_0x3c224a(0xa5d)])/-0x2,_0x4cd3b4=this[_0x3c224a(0x3db)](),_0x59dbd8=_0x4cd3b4['y']+_0x4cd3b4[_0x3c224a(0xa2a)],_0x7122bc=this[_0x3c224a(0x4c7)](),_0x50aed6=_0x7122bc['y']-_0x59dbd8;return new Rectangle(_0x2c67a5,_0x59dbd8,_0x80efc6,_0x50aed6);},Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x239)]=function(){const _0x182d61=_0x45cef8,_0x1223a4=Math[_0x182d61(0xc7c)](Graphics[_0x182d61(0x639)]/0x3),_0x4b3327=Math[_0x182d61(0x365)]((Graphics[_0x182d61(0xa5d)]-_0x1223a4)/0x2),_0xeee890=this[_0x182d61(0x1d7)](),_0x10c341=_0xeee890['y'],_0x19671b=_0xeee890[_0x182d61(0xa2a)];return new Rectangle(_0x4b3327,_0x10c341,_0x1223a4,_0x19671b);},Scene_Battle[_0x45cef8(0x3cf)]['repositionCancelButtonBorderStyle']=function(){const _0x35ca69=_0x45cef8;this['_cancelButton']['y']=this['_helpWindow']['y']+this[_0x35ca69(0x652)][_0x35ca69(0xa2a)];if(this[_0x35ca69(0x81e)]()){if(this[_0x35ca69(0x6e8)]()===_0x35ca69(0x6b2))this[_0x35ca69(0x2cf)]['x']=0x8;else{if('aViiT'!==_0x35ca69(0x7d0)){if(_0x19a655['isDTB']())this['selectNextCommand']();else _0x3999f4[_0x35ca69(0xc74)]()&&_0x1c79e1[_0x35ca69(0x6c0)][_0x35ca69(0x8f0)][_0x35ca69(0xa07)](this);}else this[_0x35ca69(0x2cf)]['x']=-this[_0x35ca69(0x2cf)][_0x35ca69(0x639)]-0x4;}}else this[_0x35ca69(0x2cf)]['x']=Graphics[_0x35ca69(0x639)]-(Graphics['width']-Graphics[_0x35ca69(0xa5d)])/0x2-this['_cancelButton']['width']-0x4;},VisuMZ['BattleCore'][_0x45cef8(0x6fb)]=Scene_Battle[_0x45cef8(0x3cf)]['skillWindowRect'],Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x212)]=function(){const _0x4f924d=_0x45cef8;if(this[_0x4f924d(0x6e8)]()===_0x4f924d(0x6b2))return this['skillItemWindowRectBorderStyle']();else{if(this[_0x4f924d(0x857)]()){if(_0x4f924d(0x250)===_0x4f924d(0xb51)){if(!_0x26fbd0[_0x4f924d(0x5cf)]()){const _0x4adda7=_0x49d3f3[_0x4f924d(0x556)](_0x360633['x'],_0x395e02['y']);if(this['_regionBattleback1']&&this[_0x4f924d(0x8aa)][_0x4adda7])return this[_0x4f924d(0x8aa)][_0x4adda7];}return _0x321a7f[_0x4f924d(0x6c0)][_0x4f924d(0xcf8)][_0x4f924d(0xa07)](this);}else return this[_0x4f924d(0xb18)]();}else{if('wMHGm'==='wMHGm')return VisuMZ[_0x4f924d(0x6c0)]['Scene_Battle_skillWindowRect'][_0x4f924d(0xa07)](this);else _0x1f6a78[_0x4f924d(0x287)]('clearActiveWeaponSet',_0x559d99);}}},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xc18)]=Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0xc58)],Scene_Battle['prototype'][_0x45cef8(0xc58)]=function(){const _0x129c43=_0x45cef8;if(this[_0x129c43(0x6e8)]()===_0x129c43(0x6b2))return this[_0x129c43(0x239)]();else return this[_0x129c43(0x857)]()?this[_0x129c43(0xb18)]():VisuMZ['BattleCore'][_0x129c43(0xc18)]['call'](this);},Scene_Battle['prototype'][_0x45cef8(0x857)]=function(){const _0x1c3572=_0x45cef8;return VisuMZ[_0x1c3572(0x6c0)][_0x1c3572(0x658)][_0x1c3572(0x5be)][_0x1c3572(0x6af)];},Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0xb18)]=function(){const _0x59f077=_0x45cef8,_0xdaed28=Sprite_Button[_0x59f077(0x3cf)][_0x59f077(0x442)]()*0x2+0x4;let _0xa64010=Graphics[_0x59f077(0xa5d)]-_0xdaed28;Imported[_0x59f077(0x22d)]&&SceneManager[_0x59f077(0x2a6)]()&&(_0xa64010+=_0xdaed28);const _0x5b5b1f=this[_0x59f077(0x611)](),_0xe5c83c=Graphics[_0x59f077(0xb42)]-_0x5b5b1f-this[_0x59f077(0x89c)]()['height']+Window_BattleStatus['prototype']['extraHeight'](),_0x4c69d3=0x0;return new Rectangle(_0x4c69d3,_0x5b5b1f,_0xa64010,_0xe5c83c);},Scene_Battle[_0x45cef8(0x3cf)][_0x45cef8(0xab5)]=function(){const _0x54de2e=_0x45cef8;if(!VisuMZ[_0x54de2e(0x6c0)][_0x54de2e(0x658)][_0x54de2e(0xc97)]['NameLegacy'])return;this[_0x54de2e(0x792)]=new Sprite(),this[_0x54de2e(0x792)]['x']=this[_0x54de2e(0xadc)]['x'],this['_enemyNameContainer']['y']=this[_0x54de2e(0xadc)]['y'];const _0x215c6a=this[_0x54de2e(0x8e0)]['indexOf'](this[_0x54de2e(0xadc)]);this[_0x54de2e(0x302)](this[_0x54de2e(0x792)],_0x215c6a);for(let _0xbfd9e1=0x0;_0xbfd9e1<0x8;_0xbfd9e1++){const _0x53d27a=new Window_EnemyName(_0xbfd9e1);this[_0x54de2e(0x792)]['addChild'](_0x53d27a);}},Sprite_Battler[_0x45cef8(0x3be)]=VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x658)]['Actor'][_0x45cef8(0x347)],VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x5b9)]=Sprite_Battler['prototype'][_0x45cef8(0x55a)],Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x55a)]=function(){const _0x43bcff=_0x45cef8;VisuMZ['BattleCore']['Sprite_Battler_initMembers'][_0x43bcff(0xa07)](this),this[_0x43bcff(0xbd8)]();if(this[_0x43bcff(0x8e2)]===Sprite_Enemy)this[_0x43bcff(0x367)]();this[_0x43bcff(0x994)]();},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0xbd8)]=function(){const _0x8697ae=_0x45cef8;this[_0x8697ae(0x3c6)]=0x0,this[_0x8697ae(0x987)]=0x0,this[_0x8697ae(0x397)]=0x0,this[_0x8697ae(0x6e3)]=0x0,this[_0x8697ae(0x4f6)]=0x0,this[_0x8697ae(0xb14)]=0x0,this[_0x8697ae(0x705)]=_0x8697ae(0x278),this['_jumpHeight']=0x0,this[_0x8697ae(0x2b0)]=0x0,this[_0x8697ae(0x6f9)]=0x0,this[_0x8697ae(0xcc4)]=0x0,this[_0x8697ae(0xb31)]=0xff,this[_0x8697ae(0x664)]=0x0,this['_opacityWholeDuration']=0x0,this[_0x8697ae(0xab9)]=_0x8697ae(0x278),this[_0x8697ae(0x60a)]=0x0,this[_0x8697ae(0xcf3)]=0x0,this[_0x8697ae(0xb41)]=0x0,this[_0x8697ae(0x2e6)]=0x0,this[_0x8697ae(0xcdc)]=_0x8697ae(0x278),this[_0x8697ae(0x4bd)]=!![],this['_skewX']=0x0,this[_0x8697ae(0xb58)]=0x0,this[_0x8697ae(0xadf)]=0x0,this[_0x8697ae(0x9bf)]=0x0,this[_0x8697ae(0x44c)]=0x0,this[_0x8697ae(0xaee)]=0x0,this[_0x8697ae(0x3f0)]=_0x8697ae(0x278),this[_0x8697ae(0x58f)]=0x1,this[_0x8697ae(0x53c)]=0x1,this['_targetGrowX']=0x1,this[_0x8697ae(0x265)]=0x1,this[_0x8697ae(0x471)]=0x0,this[_0x8697ae(0xc6f)]=0x0,this[_0x8697ae(0x1e5)]=_0x8697ae(0x278),this['_flipScaleX']=0x1,this[_0x8697ae(0x4c3)]=0x0,this[_0x8697ae(0xa79)]=0x0,this[_0x8697ae(0x587)]=0x0,this[_0x8697ae(0x5f6)]=0x0,this['_homeEasing']='Linear';},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x367)]=function(){const _0x151d05=_0x45cef8;this['_shadowSprite']=new Sprite(),this['_shadowSprite'][_0x151d05(0xaaa)]=ImageManager[_0x151d05(0x804)]('Shadow2'),this[_0x151d05(0x532)]['bitmap']['smooth']=VisuMZ[_0x151d05(0x6c0)][_0x151d05(0x658)][_0x151d05(0x970)][_0x151d05(0xbe4)],this['_shadowSprite'][_0x151d05(0xaca)]['x']=0.5,this[_0x151d05(0x532)][_0x151d05(0xaca)]['y']=0.5,this[_0x151d05(0x532)]['y']=-0x2,this[_0x151d05(0x532)][_0x151d05(0xbf1)]=![],this[_0x151d05(0x5b6)](this['_shadowSprite']);},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x994)]=function(){const _0xfeaf9=_0x45cef8;this['_distortionSprite']=new Sprite(),this[_0xfeaf9(0x6b4)][_0xfeaf9(0xaca)]['x']=0.5,this[_0xfeaf9(0x6b4)][_0xfeaf9(0xaca)]['y']=0.5,this[_0xfeaf9(0x5b6)](this['_distortionSprite']);},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0xa19)]=function(){const _0x54ca76=_0x45cef8;if(!this[_0x54ca76(0x6b4)])return;if(this[_0x54ca76(0x532)]){if('vTCvX'!==_0x54ca76(0x63d))_0x3881f4[_0x54ca76(0x83a)](_0x2e96be['SwitchMissEvade'],![]);else{const _0x2801c0=this[_0x54ca76(0x619)](this['_distortionSprite']);this[_0x54ca76(0x302)](this[_0x54ca76(0x532)],_0x2801c0),this[_0x54ca76(0x726)]();}}this[_0x54ca76(0x7fc)]&&this[_0x54ca76(0x6b4)][_0x54ca76(0x5b6)](this['_svBattlerSprite']);if(this[_0x54ca76(0xb25)]){if(_0x54ca76(0x99a)==='csFHA')return this['_immortal'];else this[_0x54ca76(0x6b4)][_0x54ca76(0x5b6)](this[_0x54ca76(0xb25)]);}this[_0x54ca76(0x4b5)]&&this['_distortionSprite']['addChild'](this[_0x54ca76(0x4b5)]);if(this[_0x54ca76(0xbef)]){if('ndhPt'===_0x54ca76(0x422)){const _0x498a5a=_0x11f131['enemyId'],_0xe05f9e=_0x30f960['x'],_0xc7c754=_0x26b667['y'],_0x4a45b1=new _0x4dd685(_0x498a5a,_0xe05f9e,_0xc7c754);_0x256d29[_0x54ca76(0x953)]&&_0x4a45b1[_0x54ca76(0x939)](),this[_0x54ca76(0xa41)][_0x54ca76(0x287)](_0x4a45b1);}else this[_0x54ca76(0x6b4)][_0x54ca76(0x5b6)](this[_0x54ca76(0xbef)]);}if(this[_0x54ca76(0xc24)]){if('TdIoi'===_0x54ca76(0xaa9))this['_distortionSprite'][_0x54ca76(0x5b6)](this[_0x54ca76(0xc24)]);else{const _0x3c3cd8=this['itemLineRect'](_0x16e7c3),_0x9a611b=this[_0x54ca76(0x574)](_0x5072e1)[_0x54ca76(0x639)];return _0x9a611b<=_0x3c3cd8[_0x54ca76(0x639)]?'iconText':_0x54ca76(0x980);}}},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x726)]=function(){const _0x51f1f5=_0x45cef8;if(!this['_shadowSprite'])return;if(this[_0x51f1f5(0xa87)]&&this[_0x51f1f5(0xa87)]['svBattlerShadowVisible']()){const _0x154ef2=this[_0x51f1f5(0x532)][_0x51f1f5(0xaaa)];this[_0x51f1f5(0x532)]['setFrame'](0x0,0x0,_0x154ef2[_0x51f1f5(0x639)],_0x154ef2[_0x51f1f5(0xa2a)]);}else this['_shadowSprite'][_0x51f1f5(0x2dd)](0x0,0x0,0x0,0x0);},Sprite_Battler['prototype'][_0x45cef8(0xbb2)]=function(){const _0x43bb31=_0x45cef8;if(SceneManager[_0x43bb31(0xc83)]()){if(_0x43bb31(0x341)===_0x43bb31(0x459)){if(!_0x505497[_0x43bb31(0xc02)]())return;const _0x717ee9=this[_0x43bb31(0x231)](),_0x111b45=_0x4af56a['battler']();if(!_0x717ee9||!_0x111b45)return;const _0x3aaf41=_0x111b45[_0x43bb31(0x3c6)],_0x45558c=_0x111b45[_0x43bb31(0x987)];this[_0x43bb31(0x712)](_0x3aaf41,_0x45558c,0x0,![],_0x43bb31(0x278),-0x1),_0x717ee9['updatePosition']();const _0x1f4aef=_0x2f32a0[_0x43bb31(0x6c0)][_0x43bb31(0x658)]['ActionSequence'];let _0x719c3b=(_0x111b45['width']+_0x717ee9['width'])/0x2;_0x719c3b*=this[_0x43bb31(0x98a)]()?0x1:-0x1;let _0x2bd2d8=_0x1f4aef[_0x43bb31(0x2dc)]*(this[_0x43bb31(0x98a)]()?0x1:-0x1);_0x56291c[_0x43bb31(0x9ba)](_0x719c3b,_0x2bd2d8,0x0,![],'Linear'),_0x111b45['updatePosition']();}else return SceneManager[_0x43bb31(0x9e2)][_0x43bb31(0x78d)][_0x43bb31(0x63c)];}else return this[_0x43bb31(0xd01)];},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0xa70)]=function(_0x49f504,_0x53805e){const _0x8fa3dd=_0x45cef8;if(!this['_battler'][_0x8fa3dd(0xada)]())return;const _0x34b6e8=VisuMZ[_0x8fa3dd(0x6c0)][_0x8fa3dd(0x658)][_0x8fa3dd(0x28b)],_0x4897b5=new Sprite_Damage();_0x4897b5[_0x8fa3dd(0x9df)]=_0x34b6e8[_0x8fa3dd(0x4c6)],this[_0x8fa3dd(0xca2)](_0x4897b5),_0x4897b5[_0x8fa3dd(0xa70)](_0x49f504,_0x53805e),this[_0x8fa3dd(0x696)](_0x4897b5);},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x9c5)]=function(_0x5480b8,_0x30ec0d,_0x41dda7){const _0x330fae=_0x45cef8;if(!this[_0x330fae(0xa87)]['isSpriteVisible']())return;const _0x339027=VisuMZ['BattleCore']['Settings'][_0x330fae(0x28b)],_0x287c30=new Sprite_Damage();_0x287c30[_0x330fae(0x9df)]=_0x339027[_0x330fae(0x4c6)],this[_0x330fae(0xca2)](_0x287c30),_0x287c30['setupIconTextPopup'](_0x5480b8,_0x30ec0d,_0x41dda7),this['addDamageSprite'](_0x287c30);},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x61f)]=function(){const _0x191a3b=_0x45cef8;if(!this[_0x191a3b(0xa87)]['isDamagePopupRequested']())return;while(this['_battler'][_0x191a3b(0x789)]()){this[_0x191a3b(0xa87)][_0x191a3b(0xada)]()&&this[_0x191a3b(0x767)]();}this['_battler'][_0x191a3b(0x234)](),this['_battler'][_0x191a3b(0xca6)]();},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x767)]=function(){const _0x27ee09=_0x45cef8,_0x416bd2=VisuMZ[_0x27ee09(0x6c0)][_0x27ee09(0x658)][_0x27ee09(0x28b)],_0x4ddf7f=new Sprite_Damage();_0x4ddf7f[_0x27ee09(0x9df)]=_0x416bd2[_0x27ee09(0x4c6)],this['sortDamageSprites'](_0x4ddf7f),_0x4ddf7f[_0x27ee09(0x74e)](this[_0x27ee09(0xa87)]),_0x4ddf7f[_0x27ee09(0x5f0)](this['_battler']),this[_0x27ee09(0x696)](_0x4ddf7f);},Sprite_Battler[_0x45cef8(0x3cf)]['addDamageSprite']=function(_0x5a1828){const _0x5173a4=_0x45cef8;this['_damages'][_0x5173a4(0x287)](_0x5a1828);if(this['isShownOnBattlePortrait']()){if(_0x5173a4(0xa74)!==_0x5173a4(0xc9d)){const _0x97a720=SceneManager[_0x5173a4(0x9e2)]['_statusWindow'];if(_0x97a720)_0x97a720['addDamageSprite'](_0x5a1828,this[_0x5173a4(0xa87)]);}else _0x214057+=_0x311894['isActor']()?-_0x49dc6b:_0x281a95,_0x1c7f52+=_0x2a3a13[_0x5173a4(0x98a)]()?-_0x472039:_0x5d9f91;}else{if('RTHji'!==_0x5173a4(0x678))this['_forcedBattleLayout']=_0x5173a4(0xa0f);else{this[_0x5173a4(0xbb2)]()[_0x5173a4(0x5b6)](_0x5a1828);if(SceneManager[_0x5173a4(0xc26)]())_0x5a1828['scale']['x']=-0x1;}}},Sprite_Battler[_0x45cef8(0x3cf)]['isShownOnBattlePortrait']=function(){const _0x2eb086=_0x45cef8;return!$gameSystem[_0x2eb086(0xc02)]()&&this['_battler']&&this[_0x2eb086(0xa87)][_0x2eb086(0x98a)]();},Sprite_Battler[_0x45cef8(0x3cf)]['sortDamageSprites']=function(_0x4cc783){const _0x168e71=_0x45cef8;this[_0x168e71(0xbc1)](_0x4cc783,!![]);const _0x5bfde0=VisuMZ[_0x168e71(0x6c0)][_0x168e71(0x658)][_0x168e71(0x28b)],_0xf7dbf4=SceneManager[_0x168e71(0xc26)]()?-0x1:0x1;if(_0x5bfde0[_0x168e71(0x243)])for(const _0x1f8d96 of this[_0x168e71(0xa55)]){_0x1f8d96['x']+=_0x5bfde0[_0x168e71(0x7be)]*_0xf7dbf4,_0x1f8d96['y']+=_0x5bfde0[_0x168e71(0xce2)];}else{const _0x1260af=this['_damages'][this[_0x168e71(0xa55)][_0x168e71(0xcc5)]-0x1];_0x1260af&&(_0x4cc783['x']=_0x1260af['x']+_0x5bfde0['PopupShiftX']*_0xf7dbf4,_0x4cc783['y']=_0x1260af['y']+_0x5bfde0[_0x168e71(0xce2)]);}},Sprite_Battler[_0x45cef8(0x3cf)]['alignBattleCoreDamageSprite']=function(_0xcdb858,_0x2022d9){const _0x5b4ee4=_0x45cef8,_0x240963=SceneManager[_0x5b4ee4(0xc26)]()?-0x1:0x1;let _0x469215=this[_0x5b4ee4(0x3c6)];_0x469215+=this['extraPositionX']();let _0x4c7d25=this[_0x5b4ee4(0x987)];const _0x317356=this[_0x5b4ee4(0x6b4)][_0x5b4ee4(0x4bb)]['y'];_0x4c7d25+=this[_0x5b4ee4(0x81d)]();const _0x123030=SceneManager[_0x5b4ee4(0x9e2)]['_statusWindow'];if(_0x123030&&this[_0x5b4ee4(0xd01)]===_0x123030){_0x469215+=_0x123030['x']-this[_0x5b4ee4(0x492)]();const _0xe1d712=_0x123030[_0x5b4ee4(0x473)]()*0x3/0x4;_0x4c7d25=_0x123030['y']+_0xe1d712,_0x4c7d25=Math['min'](_0x4c7d25,_0x123030['y']+this['y']-this[_0x5b4ee4(0xa2a)]+_0xe1d712);}_0xcdb858['x']=Math[_0x5b4ee4(0x365)](_0x469215+this[_0x5b4ee4(0x492)]()*_0x240963),_0xcdb858['y']=Math[_0x5b4ee4(0x365)](_0x4c7d25+this[_0x5b4ee4(0x534)]());},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x2c5)]=Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x492)],Sprite_Battler['prototype'][_0x45cef8(0x492)]=function(){const _0xaf60b0=_0x45cef8;let _0x4c98e4=VisuMZ[_0xaf60b0(0x6c0)][_0xaf60b0(0x2c5)][_0xaf60b0(0xa07)](this),_0xcbd8e1=VisuMZ[_0xaf60b0(0x6c0)]['Settings'][_0xaf60b0(0x28b)]['PopupOffsetX']||0x0;return Math[_0xaf60b0(0x365)](_0x4c98e4+_0xcbd8e1);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x7a3)]=Sprite_Battler['prototype'][_0x45cef8(0x534)],Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x534)]=function(){const _0xfee34b=_0x45cef8;let _0x413805=VisuMZ[_0xfee34b(0x6c0)][_0xfee34b(0x7a3)][_0xfee34b(0xa07)](this);switch(VisuMZ[_0xfee34b(0x6c0)][_0xfee34b(0x658)]['Damage'][_0xfee34b(0x6c5)]){case'head':_0x413805-=this['height']*this[_0xfee34b(0x4bb)]['y'];break;case'center':_0x413805-=this[_0xfee34b(0xa2a)]*this[_0xfee34b(0x4bb)]['y']*0.5;break;}let _0x1244b8=VisuMZ[_0xfee34b(0x6c0)]['Settings'][_0xfee34b(0x28b)][_0xfee34b(0x24e)]||0x0;return Math[_0xfee34b(0x365)](_0x413805+_0x1244b8);},Sprite_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x492)]=function(){const _0x17de22=_0x45cef8;return Sprite_Battler[_0x17de22(0x3cf)]['damageOffsetX']['call'](this);},Sprite_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x534)]=function(){const _0x49d5b9=_0x45cef8;return Sprite_Battler[_0x49d5b9(0x3cf)]['damageOffsetY']['call'](this);},Sprite_Battler['prototype']['destroyDamageSprite']=function(_0x4e9c14){const _0x154f74=_0x45cef8;this[_0x154f74(0x3da)]()?SceneManager[_0x154f74(0x9e2)][_0x154f74(0x350)][_0x154f74(0xa7a)](_0x4e9c14):(this['damageContainer']()[_0x154f74(0x92d)](_0x4e9c14),this[_0x154f74(0xa55)][_0x154f74(0xcad)](_0x4e9c14),_0x4e9c14[_0x154f74(0xbf9)]());},VisuMZ['BattleCore'][_0x45cef8(0x362)]=Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x942)],Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x942)]=function(_0x28aef5,_0x519e4b){const _0x1c2923=_0x45cef8,_0x597ace=VisuMZ['BattleCore'][_0x1c2923(0x658)];if(this['constructor']===Sprite_Actor)_0x28aef5+=_0x597ace[_0x1c2923(0x970)][_0x1c2923(0x900)]||0x0,_0x519e4b+=_0x597ace[_0x1c2923(0x970)][_0x1c2923(0x372)]||0x0;else{if(this[_0x1c2923(0x8e2)]===Sprite_Enemy){if(_0x1c2923(0x748)!==_0x1c2923(0x748))return this[_0x1c2923(0x3a8)]()[_0x1c2923(0x6a6)](_0x80ee38=>_0x80ee38[_0x1c2923(0xca7)]());else _0x28aef5+=_0x597ace[_0x1c2923(0xc97)][_0x1c2923(0x900)]||0x0,_0x519e4b+=_0x597ace['Enemy']['OffsetY']||0x0;}}if(this[_0x1c2923(0xa87)]){if('ERdvg'!==_0x1c2923(0x37b))_0x28aef5=this['_battler']['_forcedHomeX']??_0x28aef5,_0x519e4b=this[_0x1c2923(0xa87)][_0x1c2923(0xcb4)]??_0x519e4b;else{const _0x20deab=_0x525bff[_0x1c2923(0x6c0)][_0x1c2923(0x658)]['BattleLayout'];_0x20deab[_0x1c2923(0x615)]?this[_0x1c2923(0xb7e)]=_0x1b2e6a['loadSystem'](_0x20deab['StatusWindowSkinFilename']):_0x1f3efd[_0x1c2923(0x3cf)][_0x1c2923(0x59f)][_0x1c2923(0xa07)](this);}}VisuMZ[_0x1c2923(0x6c0)][_0x1c2923(0x362)]['call'](this,_0x28aef5,_0x519e4b),this[_0x1c2923(0x4c3)]=this[_0x1c2923(0x883)],this[_0x1c2923(0xa79)]=this[_0x1c2923(0xabb)],this[_0x1c2923(0x587)]=0x0,this[_0x1c2923(0x5f6)]=0x0,this[_0x1c2923(0x2f3)]=_0x1c2923(0x278);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x930)]=Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x3b2)],Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x3b2)]=function(){const _0x215800=_0x45cef8;VisuMZ[_0x215800(0x6c0)][_0x215800(0x930)][_0x215800(0xa07)](this),!this[_0x215800(0xa87)]&&this[_0x215800(0x856)]&&(this['_hpGaugeSprite'][_0x215800(0xbf1)]=![]);},VisuMZ[_0x45cef8(0x6c0)]['Sprite_Battler_updateMain']=Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x410)],Sprite_Battler['prototype']['updateMain']=function(){const _0x46b64d=_0x45cef8;this[_0x46b64d(0xc9a)](),this[_0x46b64d(0x98f)](),this['updateSpin'](),this[_0x46b64d(0xbed)](),VisuMZ[_0x46b64d(0x6c0)][_0x46b64d(0x380)][_0x46b64d(0xa07)](this),this[_0x46b64d(0x481)]();if(this['constructor']===Sprite_Enemy)this[_0x46b64d(0x522)]();},VisuMZ['BattleCore'][_0x45cef8(0xcae)]=Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0xb39)],Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0xb39)]=function(){const _0xb09888=_0x45cef8;this[_0xb09888(0x7f9)](),VisuMZ[_0xb09888(0x6c0)][_0xb09888(0xcae)][_0xb09888(0xa07)](this),this['updatePositionBattleCore'](),this[_0xb09888(0x6c6)]();},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x93a)]=function(_0x1a5a47,_0xeb2241,_0x28260b,_0x25bb10){const _0x3748fe=_0x45cef8;(this[_0x3748fe(0x4c3)]!==_0x1a5a47||this[_0x3748fe(0xa79)]!==_0xeb2241)&&(this[_0x3748fe(0x4c3)]=_0x1a5a47,this['_targetHomeY']=_0xeb2241,this['_homeDuration']=_0x28260b,this['_homeWholeDuration']=_0x28260b,this[_0x3748fe(0x2f3)]=_0x25bb10,_0x28260b<=0x0&&this[_0x3748fe(0x8bf)]());},Sprite_Battler[_0x45cef8(0x3cf)]['updateHomeMove']=function(){const _0x90984b=_0x45cef8;if(this[_0x90984b(0x587)]<=0x0)return;const _0x2708f0=this[_0x90984b(0x587)],_0x7a151d=this['_homeWholeDuration'],_0x4b5857=this['_homeEasing'];Imported[_0x90984b(0x22d)]?(this[_0x90984b(0x883)]=this[_0x90984b(0x25c)](this[_0x90984b(0x883)],this[_0x90984b(0x4c3)],_0x2708f0,_0x7a151d,_0x4b5857),this[_0x90984b(0xabb)]=this['applyEasing'](this[_0x90984b(0xabb)],this[_0x90984b(0xa79)],_0x2708f0,_0x7a151d,_0x4b5857)):(this[_0x90984b(0x883)]=(this[_0x90984b(0x883)]*(_0x2708f0-0x1)+this['_targetHomeX'])/_0x2708f0,this[_0x90984b(0xabb)]=(this[_0x90984b(0xabb)]*(_0x2708f0-0x1)+this['_targetHomeY'])/_0x2708f0);this[_0x90984b(0x587)]--;if(this[_0x90984b(0x587)]<=0x0)this['onHomeMoveEnd']();},Sprite_Battler[_0x45cef8(0x3cf)]['onHomeMoveEnd']=function(){const _0x3c551d=_0x45cef8;this['_homeX']=this['_targetHomeX'],this[_0x3c551d(0xabb)]=this[_0x3c551d(0xa79)];},Sprite_Battler['prototype'][_0x45cef8(0x9d7)]=function(){const _0x5f00ed=_0x45cef8;this['_baseX']=this['x'],this['_baseY']=this['y'],this[_0x5f00ed(0xb93)](),this[_0x5f00ed(0x84e)](),this['x']+=this[_0x5f00ed(0x95f)](),this['y']+=this['extraPositionY'](),this['y']+=this[_0x5f00ed(0x4a5)](),this['x']=Math[_0x5f00ed(0x74d)](this['x']),this['y']=Math[_0x5f00ed(0x74d)](this['y']);},Sprite_Battler['prototype'][_0x45cef8(0x95f)]=function(){let _0x3e47b9=0x0;return _0x3e47b9;},Sprite_Battler[_0x45cef8(0x3cf)]['extraPositionY']=function(){const _0x12983f=_0x45cef8;let _0x296b0a=0x0;return this[_0x12983f(0xa87)]&&!this[_0x12983f(0xa87)]['isBattlerGrounded']()&&(_0x296b0a-=this[_0x12983f(0x397)],_0x296b0a-=this[_0x12983f(0xb9c)]),_0x296b0a;},Sprite_Battler['prototype'][_0x45cef8(0x4a5)]=function(){const _0x2d776e=_0x45cef8;let _0x4db4fe=0x0;if(this[_0x2d776e(0x6b4)]&&this['constructor']!==Sprite_SvEnemy){const _0x447a02=this['_distortionSprite'][_0x2d776e(0x4bb)]['y'];_0x4db4fe-=(_0x447a02-0x1)*this[_0x2d776e(0xa2a)];}return _0x4db4fe;},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0xbed)]=function(){const _0x4bb86b=_0x45cef8,_0x22b4f8=this[_0x4bb86b(0xa87)]&&this['_battler'][_0x4bb86b(0xbfc)]();this[_0x4bb86b(0xcc3)]=(_0x22b4f8?-0x1:0x1)*Math[_0x4bb86b(0x319)](this[_0x4bb86b(0x4bb)]['x']);},Sprite_Battler['prototype'][_0x45cef8(0x2d7)]=function(_0x510cc3,_0x18e2c3,_0x5836a6){const _0x4cd9fe=_0x45cef8;if(!this['canMove']())return;if(this[_0x4cd9fe(0x6e3)]===_0x510cc3)return;this[_0x4cd9fe(0x6e3)]=_0x510cc3,this[_0x4cd9fe(0x4f6)]=_0x18e2c3,this[_0x4cd9fe(0xb14)]=_0x18e2c3,this['_floatEasing']=_0x5836a6||_0x4cd9fe(0x278);if(_0x18e2c3<=0x0)this[_0x4cd9fe(0x397)]=_0x510cc3;},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0xb93)]=function(){const _0x154aa8=_0x45cef8;if(this[_0x154aa8(0x4f6)]<=0x0)return;const _0x572bc6=this[_0x154aa8(0x4f6)],_0xdf841c=this[_0x154aa8(0xb14)],_0x111d78=this[_0x154aa8(0x705)];Imported['VisuMZ_0_CoreEngine']?this[_0x154aa8(0x397)]=this['applyEasing'](this[_0x154aa8(0x397)],this['_targetFloatHeight'],_0x572bc6,_0xdf841c,_0x111d78):'pHeCu'!=='pHeCu'?this[_0x154aa8(0x287)](_0x154aa8(0xbd6),_0x5de365):this['_floatHeight']=(this['_floatHeight']*(_0x572bc6-0x1)+this[_0x154aa8(0x6e3)])/_0x572bc6;this[_0x154aa8(0x4f6)]--;if(this[_0x154aa8(0x4f6)]<=0x0)this[_0x154aa8(0x830)]();},Sprite_Battler['prototype'][_0x45cef8(0x830)]=function(){const _0x5d7bed=_0x45cef8;this[_0x5d7bed(0x397)]=this[_0x5d7bed(0x6e3)];},Sprite_Battler['prototype']['isFloating']=function(){const _0xc3a4a9=_0x45cef8;return this[_0xc3a4a9(0x4f6)]>0x0;},Sprite_Battler['prototype']['startJump']=function(_0x2079a9,_0x129e07){const _0xd252d3=_0x45cef8;if(!this[_0xd252d3(0x3cd)]())return;if(_0x129e07<=0x0)return;this[_0xd252d3(0x2b0)]=_0x2079a9,this[_0xd252d3(0x6f9)]=_0x129e07,this[_0xd252d3(0xcc4)]=_0x129e07;},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x84e)]=function(){const _0x142f71=_0x45cef8;if(this['_jumpDuration']<=0x0)return;const _0x59c1ad=this[_0x142f71(0xcc4)]-this['_jumpDuration'],_0x3f8fe9=this[_0x142f71(0xcc4)]/0x2,_0x4396a2=this[_0x142f71(0x2b0)],_0x5f0f53=-_0x4396a2/Math[_0x142f71(0x699)](_0x3f8fe9,0x2);this[_0x142f71(0xb9c)]=_0x5f0f53*Math[_0x142f71(0x699)](_0x59c1ad-_0x3f8fe9,0x2)+_0x4396a2,this[_0x142f71(0x6f9)]--;if(this[_0x142f71(0x6f9)]<=0x0)return this[_0x142f71(0x328)]();},Sprite_Battler[_0x45cef8(0x3cf)]['onJumpEnd']=function(){const _0x5a5595=_0x45cef8;this[_0x5a5595(0xb9c)]=0x0;},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x8f2)]=function(){const _0x19d056=_0x45cef8;return this[_0x19d056(0x6f9)]>0x0;},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0xba0)]=function(_0x5bb183,_0x50875f,_0x4d6779){const _0x3b85a5=_0x45cef8;if(this['_targetOpacity']===_0x5bb183)return;this[_0x3b85a5(0xb31)]=_0x5bb183,this[_0x3b85a5(0x664)]=_0x50875f,this['_opacityWholeDuration']=_0x50875f,this[_0x3b85a5(0xab9)]=_0x4d6779||_0x3b85a5(0x278);if(_0x50875f<=0x0)this[_0x3b85a5(0xbc0)]=_0x5bb183;},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x6c6)]=function(){const _0x5557b5=_0x45cef8;if(this['constructor'][_0x5557b5(0xd00)]===_0x5557b5(0x7cc))return;if(this[_0x5557b5(0x664)]<=0x0)return;const _0xb708e0=this[_0x5557b5(0x664)],_0x5ce079=this['_opacityWholeDuration'],_0x31c420=this[_0x5557b5(0xab9)];Imported[_0x5557b5(0x22d)]?_0x5557b5(0x5cb)==='AMOQf'?(this[_0x5557b5(0xba3)][_0x5557b5(0xcad)](_0x19d1cc),this[_0x5557b5(0x24d)](_0x5dd358)?this[_0x5557b5(0x7b3)]()['removeChild'](_0x250015):this[_0x5557b5(0x292)][_0x5557b5(0x92d)](_0x3efa18)):this[_0x5557b5(0xbc0)]=this[_0x5557b5(0x25c)](this[_0x5557b5(0xbc0)],this[_0x5557b5(0xb31)],_0xb708e0,_0x5ce079,_0x31c420):this['opacity']=(this[_0x5557b5(0xbc0)]*(_0xb708e0-0x1)+this['_targetOpacity'])/_0xb708e0;this[_0x5557b5(0x664)]--;if(this[_0x5557b5(0x664)]<=0x0)this[_0x5557b5(0x2b6)]();},Sprite_Battler['prototype'][_0x45cef8(0x2b6)]=function(){const _0x3ff8ad=_0x45cef8;this[_0x3ff8ad(0xbc0)]=this[_0x3ff8ad(0xb31)];},Sprite_Battler[_0x45cef8(0x3cf)]['isChangingOpacity']=function(){const _0x27c161=_0x45cef8;return this[_0x27c161(0x664)]>0x0;},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x522)]=function(){const _0x3f13a5=_0x45cef8;this['_shadowSprite']['visible']=this[_0x3f13a5(0xa87)][_0x3f13a5(0x7c8)](),this[_0x3f13a5(0x723)]();},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x723)]=function(){const _0x9a2928=_0x45cef8;if(!this['_shadowSprite'])return;this[_0x9a2928(0x532)]['y']=this[_0x9a2928(0x987)]-this['y']-0x2;},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x4ec)]=function(){const _0x85fcef=_0x45cef8;if(!this['_battler'])return;this[_0x85fcef(0xb5f)]=this[_0x85fcef(0xa87)][_0x85fcef(0x6a2)](),this[_0x85fcef(0x516)]=this[_0x85fcef(0xa87)][_0x85fcef(0xa78)]();},Game_BattlerBase[_0x45cef8(0x3cf)]['battlerShadowScaleX']=function(){const _0x5c9c78=_0x45cef8,_0x1663c0=this[_0x5c9c78(0x98a)]()?this['actor']():this[_0x5c9c78(0xb19)]();if(_0x1663c0){const _0x5a03d9=_0x1663c0[_0x5c9c78(0xbfd)];if(_0x5a03d9[_0x5c9c78(0x291)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i)){if(_0x5c9c78(0x77a)===_0x5c9c78(0x7ee))_0x2b7f51=_0x5759c2(_0x2802ef['$1']);else return Number(RegExp['$1'])*0.01;}else{if(_0x5a03d9[_0x5c9c78(0x291)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x45cef8(0x3cf)][_0x45cef8(0xa78)]=function(){const _0x47aeb5=_0x45cef8,_0x551884=this[_0x47aeb5(0x98a)]()?this[_0x47aeb5(0x4d4)]():this[_0x47aeb5(0xb19)]();if(_0x551884){if('BKrDe'!==_0x47aeb5(0x371)){const _0x1506c6=_0xaaa7dd[_0x5a40c5];if(_0x1506c6)this[_0x47aeb5(0x741)](_0x1506c6);}else{const _0x2cf017=_0x551884[_0x47aeb5(0xbfd)];if(_0x2cf017[_0x47aeb5(0x291)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x2cf017[_0x47aeb5(0x291)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i)){if(_0x47aeb5(0x986)===_0x47aeb5(0x986))return Number(RegExp['$1'])||0x0;else _0x9469ee[_0x47aeb5(0xb3c)](_0x30276d);}}}}return 0x1;},Sprite_Battler['prototype']['updateScale']=function(){const _0x21dfc0=_0x45cef8;if(this[_0x21dfc0(0x8e2)]===Sprite_SvEnemy)return;this[_0x21dfc0(0x9f5)](),this[_0x21dfc0(0xb85)]();},Sprite_Battler['prototype'][_0x45cef8(0xb85)]=function(){const _0x51bd8a=_0x45cef8,_0x1d55aa=this[_0x51bd8a(0x6b4)];if(_0x1d55aa){if(_0x51bd8a(0xbf7)!==_0x51bd8a(0xbf7))return _0x425c56[_0x51bd8a(0x214)]()[_0x51bd8a(0x4db)](_0x49c46a=>_0x49c46a!==_0x77cafd);else _0x1d55aa[_0x51bd8a(0x4bb)]['x']=this[_0x51bd8a(0x3fb)](),_0x1d55aa[_0x51bd8a(0x4bb)]['y']=this[_0x51bd8a(0x816)]();}},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x3fb)]=function(){const _0x4d166f=_0x45cef8;let _0x50fffb=0x1;return _0x50fffb*=this[_0x4d166f(0xcc3)],_0x50fffb*=this[_0x4d166f(0x58f)],_0x50fffb;},Sprite_Battler[_0x45cef8(0x3cf)]['mainSpriteScaleY']=function(){const _0x506fbe=_0x45cef8;return 0x1*this[_0x506fbe(0x53c)];},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x48f)]=function(){const _0x3c9a03=_0x45cef8;return this[_0x3c9a03(0x639)]*this[_0x3c9a03(0x3fb)]();},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x2e5)]=function(){const _0x18f145=_0x45cef8;return this[_0x18f145(0xa2a)]*this[_0x18f145(0x816)]();},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0xa60)]=function(_0x3a919c,_0x1bdc50,_0x38a094,_0x5b5239){const _0x4c370d=_0x45cef8;if(!this[_0x4c370d(0x3cd)]())return;if(!this[_0x4c370d(0x6b4)])return;if(this[_0x4c370d(0x86a)]===_0x3a919c&&this['_targetGrowY']===_0x1bdc50)return;this[_0x4c370d(0x86a)]=_0x3a919c,this[_0x4c370d(0x265)]=_0x1bdc50,this['_growDuration']=_0x38a094,this[_0x4c370d(0xc6f)]=_0x38a094,this[_0x4c370d(0x1e5)]=_0x5b5239||_0x4c370d(0x278),_0x38a094<=0x0&&(this[_0x4c370d(0x58f)]=this[_0x4c370d(0x86a)],this[_0x4c370d(0x53c)]=this[_0x4c370d(0x265)]);},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x9f5)]=function(){const _0x3d8e46=_0x45cef8;if(this['_growDuration']<=0x0)return;if(!this[_0x3d8e46(0x6b4)])return;const _0x2cbe4d=this[_0x3d8e46(0x471)],_0x11eeb1=this[_0x3d8e46(0xc6f)],_0x206218=this[_0x3d8e46(0x1e5)];Imported[_0x3d8e46(0x22d)]?(this[_0x3d8e46(0x58f)]=this['applyEasing'](this[_0x3d8e46(0x58f)],this[_0x3d8e46(0x86a)],_0x2cbe4d,_0x11eeb1,_0x206218),this[_0x3d8e46(0x53c)]=this[_0x3d8e46(0x25c)](this['_growY'],this[_0x3d8e46(0x265)],_0x2cbe4d,_0x11eeb1,_0x206218)):(this[_0x3d8e46(0x58f)]=(this['_growX']*(_0x2cbe4d-0x1)+this[_0x3d8e46(0x86a)])/_0x2cbe4d,this['_growY']=(this[_0x3d8e46(0x53c)]*(_0x2cbe4d-0x1)+this['_targetGrowY'])/_0x2cbe4d);this[_0x3d8e46(0x471)]--;if(this[_0x3d8e46(0x471)]<=0x0)this[_0x3d8e46(0xaa6)]();},Sprite_Battler[_0x45cef8(0x3cf)]['onGrowEnd']=function(){const _0x42e1eb=_0x45cef8;this['_growX']=this['_targetGrowX'],this[_0x42e1eb(0x53c)]=this[_0x42e1eb(0x265)];},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0xca7)]=function(){return this['_growDuration']>0x0;},Sprite_Battler[_0x45cef8(0x3cf)]['startSkew']=function(_0x1148a3,_0x5b9461,_0x297910,_0x35e30e){const _0x2aa76d=_0x45cef8;if(!this[_0x2aa76d(0x3cd)]())return;if(!this[_0x2aa76d(0x6b4)])return;if(this[_0x2aa76d(0xadf)]===_0x1148a3&&this[_0x2aa76d(0x9bf)]===_0x5b9461)return;this[_0x2aa76d(0xadf)]=_0x1148a3,this['_targetSkewY']=_0x5b9461,this[_0x2aa76d(0x44c)]=_0x297910,this[_0x2aa76d(0xaee)]=_0x297910,this[_0x2aa76d(0x3f0)]=_0x35e30e||_0x2aa76d(0x278),_0x297910<=0x0&&(this[_0x2aa76d(0x6b4)][_0x2aa76d(0x55b)]['x']=this[_0x2aa76d(0xadf)],this[_0x2aa76d(0x6b4)][_0x2aa76d(0x55b)]['y']=this[_0x2aa76d(0x9bf)]);},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x98f)]=function(){const _0x573130=_0x45cef8;if(this['_skewDuration']<=0x0)return;if(!this[_0x573130(0x6b4)])return;const _0x13119e=this[_0x573130(0x44c)],_0x58db8f=this[_0x573130(0xaee)],_0x2076c7=this[_0x573130(0x3f0)],_0x33ea33=this[_0x573130(0x6b4)];Imported['VisuMZ_0_CoreEngine']?_0x573130(0x42c)==='yvExY'?this[_0x573130(0x29f)]=this[_0x573130(0x29f)]||[]:(_0x33ea33[_0x573130(0x55b)]['x']=this[_0x573130(0x25c)](_0x33ea33[_0x573130(0x55b)]['x'],this[_0x573130(0xadf)],_0x13119e,_0x58db8f,_0x2076c7),_0x33ea33[_0x573130(0x55b)]['y']=this[_0x573130(0x25c)](_0x33ea33[_0x573130(0x55b)]['y'],this[_0x573130(0x9bf)],_0x13119e,_0x58db8f,_0x2076c7)):(_0x33ea33[_0x573130(0x55b)]['x']=(_0x33ea33['skew']['x']*(_0x13119e-0x1)+this['_targetSkewX'])/_0x13119e,_0x33ea33[_0x573130(0x55b)]['y']=(_0x33ea33[_0x573130(0x55b)]['y']*(_0x13119e-0x1)+this[_0x573130(0x9bf)])/_0x13119e);this['_skewDuration']--;if(this[_0x573130(0x44c)]<=0x0)this[_0x573130(0x66b)]();},Sprite_Battler[_0x45cef8(0x3cf)]['onSkewEnd']=function(){const _0x8bd43=_0x45cef8;this[_0x8bd43(0x6b4)]['skew']['x']=this[_0x8bd43(0xadf)],this[_0x8bd43(0x6b4)][_0x8bd43(0x55b)]['y']=this[_0x8bd43(0x9bf)];},Sprite_Battler['prototype']['isSkewing']=function(){const _0x4447da=_0x45cef8;return this[_0x4447da(0x44c)]>0x0;},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x67c)]=function(_0x16682,_0x569749,_0x4e1302,_0x231c34){const _0x187916=_0x45cef8;if(!this['canMove']())return;if(!this[_0x187916(0x6b4)])return;if(this[_0x187916(0xcf3)]===_0x16682)return;this[_0x187916(0xcf3)]=_0x16682,this['_angleDuration']=_0x569749,this['_angleWholeDuration']=_0x569749,this[_0x187916(0xcdc)]=_0x4e1302||'Linear',this[_0x187916(0x4bd)]=_0x231c34;this['_angleRevertOnFinish']===undefined&&(this[_0x187916(0x4bd)]=!![]);if(_0x569749<=0x0){if('FpoPP'!==_0x187916(0x67e)){this[_0x187916(0x60a)]=_0x16682;if(this[_0x187916(0x4bd)]){if(_0x187916(0x21d)!==_0x187916(0xc94))this[_0x187916(0xcf3)]=0x0,this[_0x187916(0x60a)]=0x0;else return this['height']*this[_0x187916(0x816)]();}}else this[_0x187916(0x686)]['x']=this['x'],this[_0x187916(0x686)]['y']=this['y'];}},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0xc63)]=function(){const _0x3520e8=_0x45cef8;this[_0x3520e8(0xa97)](),this[_0x3520e8(0xabf)]();},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0xa97)]=function(){const _0x1ca498=_0x45cef8;if(this[_0x1ca498(0xb41)]<=0x0)return;const _0x1308a4=this['_angleDuration'],_0x31380c=this[_0x1ca498(0x2e6)],_0x467258=this[_0x1ca498(0xcdc)];Imported['VisuMZ_0_CoreEngine']?this['_currentAngle']=this[_0x1ca498(0x25c)](this['_currentAngle'],this[_0x1ca498(0xcf3)],_0x1308a4,_0x31380c,_0x467258):this[_0x1ca498(0x60a)]=(this[_0x1ca498(0x60a)]*(_0x1308a4-0x1)+this[_0x1ca498(0xcf3)])/_0x1308a4;this[_0x1ca498(0xb41)]--;if(this[_0x1ca498(0xb41)]<=0x0)this[_0x1ca498(0x7e5)]();},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x7e5)]=function(){const _0x2d9350=_0x45cef8;this[_0x2d9350(0x60a)]=this[_0x2d9350(0xcf3)],this[_0x2d9350(0x4bd)]&&(_0x2d9350(0x4c9)!=='NLKkj'?(_0x3fe6a7['prototype'][_0x2d9350(0x5e8)][_0x2d9350(0xa07)](this),this[_0x2d9350(0xada)]()&&this[_0x2d9350(0x7c8)]()&&this[_0x2d9350(0x8c4)](_0x2d9350(0x8fa)),_0x176ae9[_0x2d9350(0x30a)]()):(this[_0x2d9350(0xcf3)]=0x0,this[_0x2d9350(0x60a)]=0x0));},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x733)]=function(){const _0x3c35e9=_0x45cef8;return this[_0x3c35e9(0xb41)]>0x0;},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0xabf)]=function(){const _0x1702cc=_0x45cef8;if(!this[_0x1702cc(0x6b4)])return;const _0x286354=this['_currentAngle'],_0x4a19d0=this[_0x1702cc(0x4bb)]['x'],_0x17836d=this[_0x1702cc(0xa87)][_0x1702cc(0x98a)]()?-0x1:0x1;this[_0x1702cc(0x6b4)]['angle']=_0x286354*_0x4a19d0*_0x17836d;const _0x15ed5c=this[_0x1702cc(0x6b4)]['scale']['y'];this['_distortionSprite']['y']=this[_0x1702cc(0xa2a)]*-0.5*(0x2-_0x15ed5c),this[_0x1702cc(0x6b4)]['y']=Math[_0x1702cc(0xc7c)](this['_distortionSprite']['y']);const _0x157229=[this['_mainSprite'],this['_svBattlerSprite'],this[_0x1702cc(0xc24)]];for(const _0x3157c0 of _0x157229){if(!_0x3157c0)continue;_0x3157c0['y']=this['height']*0.5;}this[_0x1702cc(0x532)]&&(this[_0x1702cc(0xb5f)]=this[_0x1702cc(0xb5f)]??0x1,this[_0x1702cc(0x516)]=this[_0x1702cc(0x516)]??0x1,this[_0x1702cc(0x532)]['scale']['x']=this[_0x1702cc(0x6b4)][_0x1702cc(0x4bb)]['x']*this[_0x1702cc(0xb5f)],this['_shadowSprite'][_0x1702cc(0x4bb)]['y']=this['_distortionSprite'][_0x1702cc(0x4bb)]['y']*this[_0x1702cc(0x516)]);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xb52)]=Sprite_Actor[_0x45cef8(0x3cf)][_0x45cef8(0xaf9)],Sprite_Actor[_0x45cef8(0x3cf)]['createStateSprite']=function(){const _0x164e2d=_0x45cef8;VisuMZ[_0x164e2d(0x6c0)][_0x164e2d(0xb52)][_0x164e2d(0xa07)](this),VisuMZ['BattleCore'][_0x164e2d(0x658)][_0x164e2d(0x933)][_0x164e2d(0x395)]&&this[_0x164e2d(0x3b6)]();},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xb0d)]=Sprite_Enemy['prototype'][_0x45cef8(0x65f)],Sprite_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0x65f)]=function(){const _0x449e66=_0x45cef8;VisuMZ[_0x449e66(0x6c0)][_0x449e66(0x658)]['HpGauge'][_0x449e66(0xbe9)]&&this['createHpGaugeSprite'](),VisuMZ[_0x449e66(0x6c0)]['Sprite_Enemy_createStateIconSprite']['call'](this);},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x3b6)]=function(){const _0x341eb1=_0x45cef8;if(!ConfigManager['visualHpGauge'])return;if(this[_0x341eb1(0x8e2)]===Sprite_SvEnemy)return;const _0x57e3d6=VisuMZ[_0x341eb1(0x6c0)][_0x341eb1(0x658)][_0x341eb1(0x933)],_0x1fee5d=new Sprite_HpGauge();_0x1fee5d[_0x341eb1(0xaca)]['x']=_0x57e3d6[_0x341eb1(0xb9a)],_0x1fee5d[_0x341eb1(0xaca)]['y']=_0x57e3d6[_0x341eb1(0x87f)],_0x1fee5d[_0x341eb1(0x4bb)]['x']=_0x1fee5d[_0x341eb1(0x4bb)]['y']=_0x57e3d6['Scale'],this[_0x341eb1(0x856)]=_0x1fee5d,this[_0x341eb1(0x5b6)](this['_hpGaugeSprite']),Spriteset_Battle[_0x341eb1(0x3d2)]&&BattleManager[_0x341eb1(0x3a5)](this['_hpGaugeSprite']);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x3af)]=Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0xb59)],Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0xb59)]=function(_0x455108){const _0x5c682b=_0x45cef8,_0x1efb31=this['_battler'];VisuMZ[_0x5c682b(0x6c0)][_0x5c682b(0x3af)]['call'](this,_0x455108),this[_0x5c682b(0xab8)](_0x455108);if(_0x1efb31!==_0x455108)this[_0x5c682b(0x4ec)]();},Sprite_Battler['prototype'][_0x45cef8(0xab8)]=function(_0x13c654){const _0x5a66e1=_0x45cef8;if(!_0x13c654)return;if(!this['_hpGaugeSprite'])return;if(_0x13c654[_0x5a66e1(0x98a)]()){}else{if(_0x13c654[_0x5a66e1(0x724)]()){if(this[_0x5a66e1(0x8e2)]===Sprite_SvEnemy&&!_0x13c654[_0x5a66e1(0x7c8)]())return;}}this[_0x5a66e1(0x856)][_0x5a66e1(0x74e)](_0x13c654,'hp');},Sprite_Battler[_0x45cef8(0x3cf)]['hasStaticSvBattler']=function(){const _0x5a46d4=_0x45cef8;return this[_0x5a46d4(0xa87)]&&this[_0x5a46d4(0xa87)][_0x5a46d4(0x3eb)]();},Sprite_Battler['prototype'][_0x45cef8(0xaa7)]=function(){const _0x225c9a=_0x45cef8,_0x2e6fdf=this['_mainSprite']['bitmap'];if(!_0x2e6fdf)return;const _0x823fbc=_0x2e6fdf[_0x225c9a(0x639)];let _0x1fbe66=_0x2e6fdf['height'];if(this[_0x225c9a(0xa87)][_0x225c9a(0x61e)]()){if(this['_frame'])_0x1fbe66=Math['max'](0x0,this['_frame'][_0x225c9a(0xa2a)]-0x4);}this[_0x225c9a(0x4b5)]['setFrame'](0x0,0x0,_0x823fbc,_0x1fbe66),this[_0x225c9a(0x2dd)](0x0,0x0,_0x823fbc,_0x1fbe66);},Sprite_Battler[_0x45cef8(0x3cf)]['updateHpGaugePosition']=function(){const _0x1bfdf2=_0x45cef8;if(!this[_0x1bfdf2(0xa87)])return;if(!this[_0x1bfdf2(0x856)])return;const _0xa82580=VisuMZ[_0x1bfdf2(0x6c0)][_0x1bfdf2(0x658)]['HpGauge'],_0x1465aa=this[_0x1bfdf2(0x856)];_0x1465aa[_0x1bfdf2(0xbf1)]=this['isVisualHpGaugeDisplayed']();const _0x23d667=_0xa82580[_0x1bfdf2(0x900)],_0x34e29e=_0xa82580[_0x1bfdf2(0x372)];_0x1465aa['x']=_0x23d667,_0x1465aa['x']+=this[_0x1bfdf2(0xa87)][_0x1bfdf2(0x640)](),_0x1465aa['y']=-this[_0x1bfdf2(0xa2a)]+_0x34e29e,_0x1465aa['y']+=this[_0x1bfdf2(0xa87)]['battleUIOffsetY'](),Spriteset_Battle[_0x1bfdf2(0x3d2)]&&SceneManager[_0x1bfdf2(0x9e2)][_0x1bfdf2(0x78d)]&&(_0x1465aa['x']+=this['x'],_0x1465aa['y']+=this['y']);},Sprite_Battler[_0x45cef8(0x3cf)]['isVisualHpGaugeDisplayed']=function(){const _0x8dd694=_0x45cef8;if(!this[_0x8dd694(0xa87)])return![];if(this[_0x8dd694(0xa87)][_0x8dd694(0x98a)]())return!![];if(this[_0x8dd694(0xa87)]['isHidden']())return![];if(this[_0x8dd694(0xbc0)]<=0x0)return![];const _0x197274=this[_0x8dd694(0xa87)][_0x8dd694(0xb19)]()[_0x8dd694(0xbfd)];if(_0x197274['match'](/<SHOW HP GAUGE>/i))return!![];if(_0x197274[_0x8dd694(0x291)](/<HIDE HP GAUGE>/i))return![];const _0x572a9b=VisuMZ['BattleCore']['Settings'][_0x8dd694(0x933)];if(_0x572a9b[_0x8dd694(0x1eb)]){if(_0x572a9b[_0x8dd694(0x61a)]&&BattleManager['isBattleTest']())return!![];if(this[_0x8dd694(0xa87)][_0x8dd694(0xb2c)])return![];return this[_0x8dd694(0xa87)][_0x8dd694(0x284)]();}return!![];},VisuMZ[_0x45cef8(0x6c0)]['Sprite_Battler_isMoving']=Sprite_Battler['prototype'][_0x45cef8(0x233)],Sprite_Battler['prototype'][_0x45cef8(0x233)]=function(){const _0x4ec1f7=_0x45cef8;if(!this[_0x4ec1f7(0xa87)])return![];if(this[_0x4ec1f7(0x587)]>0x0)return!![];return VisuMZ[_0x4ec1f7(0x6c0)][_0x4ec1f7(0x967)]['call'](this);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x4e0)]=Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x2b5)],Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x2b5)]=function(_0xa72be9,_0x449587,_0x54e6a3){const _0x38c26c=_0x45cef8;this[_0x38c26c(0x3cd)]()&&(_0x38c26c(0x421)===_0x38c26c(0x421)?VisuMZ[_0x38c26c(0x6c0)][_0x38c26c(0x4e0)][_0x38c26c(0xa07)](this,_0xa72be9,_0x449587,_0x54e6a3):(this[_0x38c26c(0x315)]('BattleDefeatJS'),_0x323b25[_0x38c26c(0x6c0)][_0x38c26c(0x4ff)]['call'](this),this[_0x38c26c(0x4aa)](_0x38c26c(0x6ae))));},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0x3cd)]=function(){const _0x35a443=_0x45cef8;if(this[_0x35a443(0xa87)]&&this[_0x35a443(0xa87)]['isDead']())return![];if(this['_battler']&&!this[_0x35a443(0xa87)][_0x35a443(0x290)]())return![];return $gameSystem[_0x35a443(0xc02)]();},Sprite_Battler['prototype']['stepForward']=function(){},Sprite_Battler[_0x45cef8(0x3cf)]['stepBack']=function(){const _0x39a951=_0x45cef8;this[_0x39a951(0x2b5)](0x0,0x0,0xc);},Sprite_Battler[_0x45cef8(0x3cf)]['retreat']=function(){},Sprite_Battler[_0x45cef8(0x3cf)][_0x45cef8(0xc22)]=function(){const _0x543445=_0x45cef8,_0x348ee7=VisuMZ['BattleCore'][_0x543445(0x658)]['Actor'],_0x512a8b=this[_0x543445(0xa87)]&&this['_battler']['isActor']()?0x1:-0x1,_0x246197=this[_0x543445(0x3c6)]-this['_homeX']+_0x512a8b*_0x348ee7[_0x543445(0x79a)],_0x15f13a=this[_0x543445(0x987)]-this[_0x543445(0xabb)]+_0x512a8b*_0x348ee7[_0x543445(0x598)],_0xfc8c52=_0x348ee7[_0x543445(0x2be)];this[_0x543445(0x2b5)](_0x246197,_0x15f13a,_0xfc8c52);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x783)]=Sprite_Actor[_0x45cef8(0x3cf)]['initMembers'],Sprite_Actor['prototype'][_0x45cef8(0x55a)]=function(){const _0x456a0f=_0x45cef8;VisuMZ['BattleCore'][_0x456a0f(0x783)][_0x456a0f(0xa07)](this),this['attachSpritesToDistortionSprite']();},Sprite_Actor['prototype'][_0x45cef8(0x97e)]=function(){const _0x5e7d2=_0x45cef8;return this['_distortionSprite']||this[_0x5e7d2(0x4b5)]||this;},VisuMZ['BattleCore']['Sprite_Actor_moveToStartPosition']=Sprite_Actor['prototype']['moveToStartPosition'],Sprite_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x20b)]=function(){},Sprite_Actor[_0x45cef8(0x3cf)][_0x45cef8(0xb87)]=function(_0x1df47b){const _0x576680=_0x45cef8;if(SceneManager['isPreviousSceneBattleTransitionable']())return;if(!_0x1df47b)return;if(!_0x1df47b['canMove']())return;VisuMZ[_0x576680(0x6c0)]['Sprite_Actor_moveToStartPosition']['call'](this);},VisuMZ['BattleCore'][_0x45cef8(0x1fa)]=Sprite_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x3ed)],Sprite_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x3ed)]=function(_0x302c16){const _0x478cf3=_0x45cef8;VisuMZ[_0x478cf3(0x6c0)][_0x478cf3(0x658)][_0x478cf3(0x970)]['HomePosJS']?VisuMZ[_0x478cf3(0x6c0)]['Settings'][_0x478cf3(0x970)][_0x478cf3(0xa77)][_0x478cf3(0xa07)](this,_0x302c16):_0x478cf3(0x996)!==_0x478cf3(0x996)?(_0x35337e=_0x3adf8e*this[_0x478cf3(0x45b)][_0x478cf3(0x466)],_0x40642b+=this['_multipliers']['damageFlat']*(_0x47baed>=0x0?0x1:-0x1),_0x26196c=this[_0x478cf3(0x54d)]('PreDamage%1JS',_0x1aaca5,_0x432444,![]),_0x5c6754=this[_0x478cf3(0x5c5)](_0x335a73),_0x53c233=_0x2a8e17[_0x478cf3(0x365)](_0x5c9094),this['_executedValue']=_0x43bd8a,this[_0x478cf3(0xc57)]=this[_0x478cf3(0xc57)]||0x0,this['_totalValue']+=_0x279f26,_0x56097f[_0x478cf3(0x6c0)]['Game_Action_executeDamage']['call'](this,_0x23f91f,_0x3db053),this['applyBattleCoreJS']('PostDamage%1JS',_0x47aa41,_0x744f28,!![])):VisuMZ[_0x478cf3(0x6c0)][_0x478cf3(0x1fa)]['call'](this,_0x302c16);},VisuMZ['BattleCore'][_0x45cef8(0x85e)]=Sprite_Actor['prototype'][_0x45cef8(0xb59)],Sprite_Actor['prototype'][_0x45cef8(0xb59)]=function(_0x421647){const _0x9669a9=_0x45cef8;VisuMZ[_0x9669a9(0x6c0)][_0x9669a9(0x85e)]['call'](this,_0x421647),this[_0x9669a9(0x958)](_0x421647);},Sprite_Actor['prototype'][_0x45cef8(0x958)]=function(_0x486e73){const _0x221593=_0x45cef8;if(!_0x486e73)return;if(!this['_mainSprite'])return;this[_0x221593(0x4b5)][_0x221593(0xaca)]['x']=this[_0x221593(0x318)]['svBattlerAnchorX'](),this[_0x221593(0x4b5)][_0x221593(0xaca)]['y']=this[_0x221593(0x318)][_0x221593(0x622)](),this['updateShadowVisibility']();},VisuMZ[_0x45cef8(0x6c0)]['Sprite_Actor_update']=Sprite_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x3b2)],Sprite_Actor[_0x45cef8(0x3cf)]['update']=function(){const _0x45ebdb=_0x45cef8;VisuMZ[_0x45ebdb(0x6c0)][_0x45ebdb(0x28a)][_0x45ebdb(0xa07)](this);if(this[_0x45ebdb(0x318)]){if(_0x45ebdb(0xc6a)!=='YiUFm'){if(this[_0x45ebdb(0x4a1)]())return![];if(this[_0x45ebdb(0xa9a)]()&&this[_0x45ebdb(0x608)]())return!![];if(this[_0x45ebdb(0x724)]()&&this[_0x45ebdb(0x7c8)]()){if(this[_0x45ebdb(0x61e)]()&&this[_0x45ebdb(0x95c)]())return![];}else{if(this[_0x45ebdb(0x61e)]())return![];}return!![];}else this['updateStateSprite'](),this[_0x45ebdb(0x886)]();}},VisuMZ['BattleCore'][_0x45cef8(0xb13)]=Sprite_Actor[_0x45cef8(0x3cf)][_0x45cef8(0xb0b)],Sprite_Actor[_0x45cef8(0x3cf)][_0x45cef8(0xb0b)]=function(){const _0x4fae5c=_0x45cef8;VisuMZ[_0x4fae5c(0x6c0)][_0x4fae5c(0xb13)]['call'](this);if(this[_0x4fae5c(0x4b5)]&&this[_0x4fae5c(0x4b5)][_0x4fae5c(0xaaa)]&&this[_0x4fae5c(0xa87)]){if(this[_0x4fae5c(0x4b5)][_0x4fae5c(0xaaa)][_0x4fae5c(0xc52)]!==this[_0x4fae5c(0xa87)][_0x4fae5c(0x40b)]()){if(_0x4fae5c(0x8a4)===_0x4fae5c(0x80f))return _0x101bd3[_0x4fae5c(0x6c0)][_0x4fae5c(0x658)]['Damage']['GuardFormulaJS'][_0x4fae5c(0xa07)](this,_0x557d55,_0x363761);else this[_0x4fae5c(0x4b5)]['bitmap'][_0x4fae5c(0xc52)]=this[_0x4fae5c(0xa87)]['battlerSmoothImage']();}}},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x436)]=Sprite_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x522)],Sprite_Actor[_0x45cef8(0x3cf)]['updateShadow']=function(){const _0x2ab762=_0x45cef8;VisuMZ[_0x2ab762(0x6c0)][_0x2ab762(0x436)][_0x2ab762(0xa07)](this),this[_0x2ab762(0x60b)]();},Sprite_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x60b)]=function(){const _0x4078c5=_0x45cef8;if(!this[_0x4078c5(0x4b5)])return;if(!this['_shadowSprite'])return;this['updateShadowVisibility'](),this[_0x4078c5(0x723)]();},Sprite_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x627)]=function(){const _0x8b6124=_0x45cef8;this[_0x8b6124(0xc29)][_0x8b6124(0x4bb)]['x']=0x1/(this[_0x8b6124(0x4bb)]['x']||0.001),this['_stateSprite']['scale']['y']=0x1/(this['scale']['y']||0.001);},Sprite_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x886)]=function(){const _0x34b958=_0x45cef8;if(!$gameSystem['isSideView']()&&this['constructor']===Sprite_Actor){if('ENSSY'!==_0x34b958(0x6bf))_0x3dd0b7&&_0x115cf7['isActor']()&&_0x392ae7[_0x34b958(0x5e7)](_0x4b8d73),this[_0x34b958(0x5d7)]();else{const _0x7fec7b=Scene_Battle[_0x34b958(0x3cf)][_0x34b958(0x6e8)]();['default',_0x34b958(0xa0f),_0x34b958(0x4b4),_0x34b958(0x6b2)][_0x34b958(0x2b1)](_0x7fec7b)&&(this[_0x34b958(0xbc0)]=0x0);}}},Sprite_Actor['prototype'][_0x45cef8(0x5f7)]=function(){const _0x2bafd=_0x45cef8,_0x2bc10a=this[_0x2bafd(0x318)];if(_0x2bc10a){const _0x28ef42=_0x2bc10a[_0x2bafd(0x50d)]();if(_0x2bc10a[_0x2bafd(0x660)]()||_0x2bc10a[_0x2bafd(0x6b1)]()){if('wLTox'!==_0x2bafd(0x912)){if(this[_0x2bafd(0x95c)]())_0xe2efbc[_0x2bafd(0x6c0)][_0x2bafd(0x4d9)][_0x2bafd(0xa07)](this);}else this[_0x2bafd(0x5e1)](_0x2bafd(0xbcf));}else{if(_0x28ef42===0x3){if(_0x2bafd(0xc59)!==_0x2bafd(0xc59)){const _0x491a84=_0x2df095[_0x2bafd(0x6c0)][_0x2bafd(0x658)][_0x2bafd(0x5be)],_0x4d5de2=_0x491a84[_0x2bafd(0x8eb)]||0xc0,_0x44ab02=this[_0x2bafd(0x56f)](),_0x4fe5e8=this['isRightInputMode']()?_0x228aa4['boxWidth']-_0x4d5de2:0x0,_0x17b8a7=_0x13f8a1['boxHeight']-_0x44ab02;return new _0x43f669(_0x4fe5e8,_0x17b8a7,_0x4d5de2,_0x44ab02);}else this[_0x2bafd(0x5e1)](_0x2bafd(0x711));}else{if(_0x28ef42===0x2)this[_0x2bafd(0x5e1)](_0x2bafd(0x713));else{if(this[_0x2bafd(0x5fe)])this[_0x2bafd(0x5e1)](_0x2bafd(0x520));else{if(_0x2bc10a[_0x2bafd(0x4af)]())this[_0x2bafd(0x5e1)](_0x2bafd(0xcfe));else{if(_0x2bc10a[_0x2bafd(0x55f)]())this['startMotion']('chant');else{if(_0x2bc10a[_0x2bafd(0x3a2)]()||_0x2bc10a[_0x2bafd(0x952)]()){if(_0x2bafd(0x67a)===_0x2bafd(0x67a))this[_0x2bafd(0x5e1)](_0x2bafd(0x663));else{if(!_0x170791[_0x2bafd(0x279)])return;const _0x450fb6=_0x209ea1[_0x2bafd(0x9e2)][_0x2bafd(0x78d)];if(!_0x450fb6)return;if(_0x5ee91f['ActSeqImpact']['version']<=1.04){_0x4e1c35(_0x2bafd(0x603)),_0x55205b[_0x2bafd(0xa50)]();return;}_0x288329[_0x2bafd(0x8b3)](_0x5d1fa2,_0x41a17d);const _0x3b8741=_0x1d4c46[_0x2bafd(0x474)];_0x450fb6[_0x2bafd(0x2f5)](_0x3b8741);}}else{if(_0x28ef42===0x1)_0x2bafd(0x656)!==_0x2bafd(0x656)?(_0x11e3db[_0x2bafd(0x6c0)][_0x2bafd(0x7ac)]['call'](this),this[_0x2bafd(0xc7d)]()):this[_0x2bafd(0x5e1)](_0x2bafd(0x636));else{if(_0x2bc10a['isDying']())this[_0x2bafd(0x5e1)](_0x2bafd(0x375));else{if(_0x2bc10a[_0x2bafd(0xbdf)]())this[_0x2bafd(0x5e1)](_0x2bafd(0xbcf));else _0x2bc10a[_0x2bafd(0xca0)]()?this[_0x2bafd(0x5e1)](_0x2bafd(0xcfe)):'Mwadp'===_0x2bafd(0x368)?this['startMotion']('walk'):(_0x24281f=(_0x404197+_0x35c7a7)/0x2,_0x10e140=-0x1);}}}}}}}}}}},Sprite_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x476)]=function(){const _0x226c8a=_0x45cef8,_0x2dbb22=0xa,_0x14a98c=0x12c*_0x2dbb22,_0x3448f5=0x1e*_0x2dbb22;this[_0x226c8a(0x2b5)](_0x14a98c,0x0,_0x3448f5);},Sprite_Actor[_0x45cef8(0x3cf)][_0x45cef8(0xacd)]=function(){const _0x375718=_0x45cef8;Sprite_Battler[_0x375718(0x3cf)][_0x375718(0xacd)]['call'](this);},Sprite_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x4e4)]=function(){const _0x344fb0=_0x45cef8;return Sprite_Battler[_0x344fb0(0x3be)];},Sprite_Weapon[_0x45cef8(0x3cf)][_0x45cef8(0xc10)]=function(){const _0x37c06f=_0x45cef8;return Sprite_Battler[_0x37c06f(0x3be)];},Sprite_Actor['prototype'][_0x45cef8(0x85d)]=function(){},Sprite_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x470)]=function(){},Sprite_Actor[_0x45cef8(0x3cf)][_0x45cef8(0xb64)]=function(){const _0x3fea86=_0x45cef8;if(this[_0x3fea86(0x9c1)]&&++this['_motionCount']>=this[_0x3fea86(0x4e4)]()){if(this[_0x3fea86(0x9c1)]['loop'])this[_0x3fea86(0x369)]=(this[_0x3fea86(0x369)]+0x1)%0x4;else this[_0x3fea86(0x369)]<0x2?this[_0x3fea86(0x369)]++:this['refreshMotion']();this[_0x3fea86(0x48b)]=0x0;}},Sprite_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x947)]=function(_0x11c7c2){const _0x2a7949=_0x45cef8;if(_0x11c7c2===_0x2a7949(0x91c))this[_0x2a7949(0x941)]=!![];if(this[_0x2a7949(0xa87)]&&this[_0x2a7949(0xa87)][_0x2a7949(0x61e)]()){if('clniR'!==_0x2a7949(0xc38))_0x4f44ff[_0x2a7949(0x21a)](_0x164a38);else{this[_0x2a7949(0x9c1)]=Sprite_Actor[_0x2a7949(0x833)][_0x2a7949(0x711)];return;}}const _0x11fa0a=Sprite_Actor[_0x2a7949(0x833)][_0x11c7c2];this[_0x2a7949(0x9c1)]=_0x11fa0a,this[_0x2a7949(0x48b)]=0x0,this['_pattern']=0x0;},Sprite_Actor[_0x45cef8(0x3cf)][_0x45cef8(0xa67)]=function(_0x129397){const _0x2a416f=_0x45cef8;if(this['hasStaticSvBattler']())return;this['adjustWeaponSpriteOffset'](),this['_weaponSprite'][_0x2a416f(0x74e)](_0x129397),this[_0x2a416f(0x318)]['clearWeaponAnimation']();},Sprite_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x9d5)]=function(){const _0x56a313=_0x45cef8;let _0x44001b=-0x10,_0x110ecb=this[_0x56a313(0xa2a)]*0.5;const _0x5bd5f2=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x5c861b=this[_0x56a313(0xa87)][_0x56a313(0x2bc)]()[_0x56a313(0x4a9)](_0x143894=>_0x143894&&_0x143894[_0x56a313(0xbfd)][_0x56a313(0x291)](_0x5bd5f2)?Number(RegExp['$1']):0x0),_0x2acbc6=this[_0x56a313(0xa87)]['traitObjects']()['map'](_0x24fb71=>_0x24fb71&&_0x24fb71['note'][_0x56a313(0x291)](_0x5bd5f2)?Number(RegExp['$2']):0x0);_0x44001b=_0x5c861b[_0x56a313(0xbd9)]((_0x58f921,_0x30c38d)=>_0x58f921+_0x30c38d,_0x44001b),_0x110ecb=_0x2acbc6['reduce']((_0x58b884,_0x2b9870)=>_0x58b884+_0x2b9870,_0x110ecb),this['_weaponSprite']['x']=_0x44001b,this[_0x56a313(0xb25)]['y']=_0x110ecb,this['_weaponSprite'][_0x56a313(0x3b2)]();},Sprite_Weapon[_0x45cef8(0x3cf)][_0x45cef8(0x74e)]=function(_0x5c1be2){const _0x12a3b9=_0x45cef8;this[_0x12a3b9(0xa53)]=_0x5c1be2,this[_0x12a3b9(0x596)]=-0x1,this[_0x12a3b9(0x369)]=0x0,this[_0x12a3b9(0x90a)](),this[_0x12a3b9(0x3ba)]();},Sprite_Actor[_0x45cef8(0x3cf)][_0x45cef8(0xbc7)]=function(){},Sprite_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x668)]=function(){const _0x286f50=_0x45cef8,_0x26482e=VisuMZ[_0x286f50(0x6c0)][_0x286f50(0x658)][_0x286f50(0xa95)],_0x3c8780=_0x26482e[_0x286f50(0x81b)],_0x4e3ad5=_0x26482e[_0x286f50(0x2dc)],_0x46403e=_0x26482e[_0x286f50(0x8c9)];this[_0x286f50(0x2b5)](-_0x3c8780,-_0x4e3ad5,_0x46403e);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xc45)]=Sprite_Actor[_0x45cef8(0x3cf)]['updateFrame'],Sprite_Actor['prototype']['updateFrame']=function(){const _0x456edf=_0x45cef8;this['hasStaticSvBattler']()?this['updateStaticSvBattlerFrames']():(this[_0x456edf(0x5b5)](),VisuMZ[_0x456edf(0x6c0)]['Sprite_Actor_updateFrame'][_0x456edf(0xa07)](this));},Sprite_Actor[_0x45cef8(0x3cf)]['applyFreezeMotionFrames']=function(){const _0x47a353=_0x45cef8;if(this[_0x47a353(0xa87)]&&this['_battler'][_0x47a353(0x390)]){if('TGhIl'!==_0x47a353(0x731)){if(!_0x4efe3c[_0x47a353(0x6c0)][_0x47a353(0x658)][_0x47a353(0x5be)][_0x47a353(0xb48)])return![];if(_0x541e8c[_0x47a353(0xc9f)]())return!![];return _0x4b61e7['VisuMZ_1_MainMenuCore']&&_0x18727c[_0x47a353(0x527)]();}else{const _0x145a78=this[_0x47a353(0xa87)]['_freezeMotionData'];this['_motion']=Sprite_Actor[_0x47a353(0x833)][_0x145a78[_0x47a353(0x376)]],this[_0x47a353(0x369)]=_0x145a78[_0x47a353(0x246)];const _0x56695a=this[_0x47a353(0xb25)];_0x56695a['freezeFrame'](_0x145a78[_0x47a353(0x607)],_0x145a78['pattern']),this[_0x47a353(0x9d5)]();}}},Sprite_Weapon[_0x45cef8(0x3cf)][_0x45cef8(0x237)]=function(_0x2e5bd4,_0x1c039e){const _0x39d24b=_0x45cef8;this[_0x39d24b(0xa53)]=_0x2e5bd4,this[_0x39d24b(0x596)]=-Infinity,this['_pattern']=_0x1c039e,this[_0x39d24b(0x90a)](),this['updateFrame']();},Sprite_Enemy['prototype'][_0x45cef8(0x55a)]=function(){const _0x3be15c=_0x45cef8;Sprite_Battler[_0x3be15c(0x3cf)][_0x3be15c(0x55a)]['call'](this),this[_0x3be15c(0x7f5)]=null,this[_0x3be15c(0x55d)]=![],this[_0x3be15c(0xc64)]='',this[_0x3be15c(0xa72)]=0x0,this['_effectType']=null,this[_0x3be15c(0xcba)]=0x0,this[_0x3be15c(0x38d)]=0x0,this['createMainSprite'](),this[_0x3be15c(0x65f)]();},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x6ca)]=Sprite_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0x3b2)],Sprite_Enemy[_0x45cef8(0x3cf)]['update']=function(){const _0x3dda16=_0x45cef8;VisuMZ[_0x3dda16(0x6c0)][_0x3dda16(0x6ca)][_0x3dda16(0xa07)](this),this['updateShadowVisibility']();},Sprite_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0x2a4)]=function(){const _0x4ce9c8=_0x45cef8;this[_0x4ce9c8(0x4b5)]=new Sprite(),this[_0x4ce9c8(0x4b5)][_0x4ce9c8(0xaca)]['x']=0.5,this['_mainSprite'][_0x4ce9c8(0xaca)]['y']=0x1,this[_0x4ce9c8(0x5b6)](this[_0x4ce9c8(0x4b5)]),this[_0x4ce9c8(0xa19)]();},Sprite_Enemy[_0x45cef8(0x3cf)]['mainSprite']=function(){const _0x531678=_0x45cef8;return this[_0x531678(0x6b4)]||this[_0x531678(0x4b5)]||this;},Sprite_Enemy['prototype'][_0x45cef8(0x90a)]=function(_0x24ba9e){const _0x42679f=_0x45cef8;this[_0x42679f(0xaaa)]=new Bitmap(0x1,0x1);if(this['hasSvBattler']()){const _0x3f8368=this[_0x42679f(0x7f5)]['svBattlerData']();this[_0x42679f(0xaaa)]=new Bitmap(_0x3f8368[_0x42679f(0x639)],_0x3f8368[_0x42679f(0xa2a)]),this[_0x42679f(0x4b5)][_0x42679f(0xaaa)]=new Bitmap(0x1,0x1);}else $gameSystem[_0x42679f(0xc02)]()?(this[_0x42679f(0x4b5)]['bitmap']=ImageManager[_0x42679f(0x821)](_0x24ba9e),this[_0x42679f(0x4b5)]['bitmap'][_0x42679f(0x879)](this['createEmptyBitmap'][_0x42679f(0xb9b)](this))):(this[_0x42679f(0x4b5)][_0x42679f(0xaaa)]=ImageManager[_0x42679f(0xb81)](_0x24ba9e),this[_0x42679f(0x4b5)]['bitmap'][_0x42679f(0x879)](this[_0x42679f(0x8d6)][_0x42679f(0xb9b)](this)));},Sprite_Enemy[_0x45cef8(0x3cf)]['createEmptyBitmap']=function(){const _0x509bd1=_0x45cef8,_0x6d5487=this[_0x509bd1(0x4b5)][_0x509bd1(0xaaa)];_0x6d5487&&(_0x509bd1(0xabc)===_0x509bd1(0xabc)?this[_0x509bd1(0xaaa)]=new Bitmap(_0x6d5487[_0x509bd1(0x639)],_0x6d5487['height']):(_0x15a0b7+=_0x59517e[_0x509bd1(0xc97)]['OffsetX']||0x0,_0x5d33a2+=_0x13518d[_0x509bd1(0xc97)]['OffsetY']||0x0));},VisuMZ[_0x45cef8(0x6c0)]['Sprite_Enemy_setHue']=Sprite_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0xb83)],Sprite_Enemy[_0x45cef8(0x3cf)]['setHue']=function(_0x21d24d){const _0x51c82d=_0x45cef8;this[_0x51c82d(0x4b5)]&&this[_0x51c82d(0x4b5)][_0x51c82d(0xb83)](_0x21d24d);},VisuMZ['BattleCore'][_0x45cef8(0xc56)]=Sprite_Enemy['prototype']['initVisibility'],Sprite_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0x54a)]=function(){const _0x30be5a=_0x45cef8;this['allowCollapse']()?VisuMZ[_0x30be5a(0x6c0)][_0x30be5a(0xc56)][_0x30be5a(0xa07)](this):(this[_0x30be5a(0x55d)]=!this[_0x30be5a(0x7f5)][_0x30be5a(0x4a1)](),!this[_0x30be5a(0x55d)]&&(_0x30be5a(0x20c)!==_0x30be5a(0xb82)?this[_0x30be5a(0xbc0)]=0x0:this[_0x30be5a(0x4b5)]['setFrame'](0x0,0x0,this[_0x30be5a(0x4b5)][_0x30be5a(0x639)],this[_0x30be5a(0xcba)])));},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x4d9)]=Sprite_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0xabd)],Sprite_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0xabd)]=function(){const _0xc8782a=_0x45cef8;if(this[_0xc8782a(0x95c)]())VisuMZ[_0xc8782a(0x6c0)][_0xc8782a(0x4d9)]['call'](this);},Sprite_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0x3ba)]=function(){const _0x40f601=_0x45cef8;Sprite_Battler[_0x40f601(0x3cf)][_0x40f601(0x3ba)][_0x40f601(0xa07)](this);const _0x2b1914=this[_0x40f601(0x97e)]()||this;if(!_0x2b1914)return;!_0x2b1914['bitmap']&&(_0x2b1914[_0x40f601(0xaaa)]=new Bitmap(this[_0x40f601(0x639)],this['height']));if(this['_effectType']===_0x40f601(0x57b)){if('TIpYt'!==_0x40f601(0xb1e)){let _0x3c264f=_0xd9167b(_0x3a6eff['$1']);while(_0x3c264f--){const _0x5156ec=_0x4b4d3e[_0x40f601(0xa4d)](0x2)===0x0?this[_0x40f601(0x96a)]():this['friendsUnit']();_0x1f132c[_0x40f601(0x287)](_0x5156ec[_0x40f601(0xa64)]());}return this[_0x40f601(0x83e)](_0x338417);}else this[_0x40f601(0x4b5)]['setFrame'](0x0,0x0,this[_0x40f601(0x4b5)][_0x40f601(0x639)],this[_0x40f601(0xcba)]);}else _0x2b1914[_0x40f601(0x2dd)](0x0,0x0,_0x2b1914['bitmap'][_0x40f601(0x639)],this[_0x40f601(0xaaa)][_0x40f601(0xa2a)]);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x49d)]=Sprite_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0x514)],Sprite_Enemy[_0x45cef8(0x3cf)]['updateBossCollapse']=function(){const _0x2a0c02=_0x45cef8;if(this[_0x2a0c02(0x95c)]())VisuMZ[_0x2a0c02(0x6c0)][_0x2a0c02(0x49d)][_0x2a0c02(0xa07)](this);},Sprite_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0x233)]=function(){const _0x188d59=_0x45cef8;return Sprite_Battler[_0x188d59(0x3cf)][_0x188d59(0x233)][_0x188d59(0xa07)](this);},VisuMZ[_0x45cef8(0x6c0)]['Sprite_Enemy_updateStateSprite']=Sprite_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0x627)],Sprite_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0x627)]=function(){const _0x1cf1b6=_0x45cef8;VisuMZ[_0x1cf1b6(0x6c0)]['Sprite_Enemy_updateStateSprite'][_0x1cf1b6(0xa07)](this),this[_0x1cf1b6(0x60d)]();},Sprite_Enemy['prototype']['updateStateSpriteBattleCore']=function(){const _0x20955b=_0x45cef8,_0x356269=VisuMZ[_0x20955b(0x6c0)][_0x20955b(0x658)][_0x20955b(0xc97)];if(_0x356269['NameAttachStateIcon']&&!_0x356269[_0x20955b(0x9d3)]){if(_0x20955b(0x420)===_0x20955b(0x420)){this[_0x20955b(0x928)]['opacity']=0x0;return;}else{if(!_0x12b72d['SkillsStatesCore'][_0x20955b(0x579)](this[_0x20955b(0x318)],_0x1a3bcf))return!![];if(!_0x54df66[_0x20955b(0x469)][_0x20955b(0x73d)](this['_actor'],_0x22499a))return!![];if(!_0x33a74e[_0x20955b(0x469)][_0x20955b(0x345)](this['_actor'],_0xb8837e))return!![];}}this[_0x20955b(0x928)]['x']=0x0,this[_0x20955b(0x928)]['x']+=this[_0x20955b(0xa87)]['battleUIOffsetX'](),this[_0x20955b(0x928)]['y']=-this[_0x20955b(0xaaa)][_0x20955b(0xa2a)]-this[_0x20955b(0x928)]['height']-0x4,this[_0x20955b(0x928)]['y']+=this[_0x20955b(0xa87)]['battleUIOffsetY'](),this[_0x20955b(0x928)]['scale']['x']=0x1/(this[_0x20955b(0x4bb)]['x']||0.001),this[_0x20955b(0x928)]['scale']['y']=0x1/(this['scale']['y']||0.001),this[_0x20955b(0x7c8)]()&&(this[_0x20955b(0x7fc)][_0x20955b(0xc29)]['scale']['x']=-0x1/(this['scale']['x']||0.001),this[_0x20955b(0x7fc)][_0x20955b(0xc29)][_0x20955b(0x4bb)]['y']=0x1/(this['scale']['y']||0.001));},VisuMZ['BattleCore'][_0x45cef8(0x430)]=Sprite_Enemy[_0x45cef8(0x3cf)]['setBattler'],Sprite_Enemy['prototype'][_0x45cef8(0xb59)]=function(_0x437da7){const _0x274b63=_0x45cef8;VisuMZ[_0x274b63(0x6c0)][_0x274b63(0x430)][_0x274b63(0xa07)](this,_0x437da7),this['setSvBattlerSprite'](_0x437da7);},Sprite_Enemy['prototype'][_0x45cef8(0x2bf)]=function(_0x135c3a){const _0x39818f=_0x45cef8;!this[_0x39818f(0x7fc)]&&(this[_0x39818f(0x7fc)]=new Sprite_SvEnemy(_0x135c3a),this[_0x39818f(0xa19)]()),this['_svBattlerSprite']['setBattler'](_0x135c3a);},Sprite_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0x7c8)]=function(){const _0x3be5b4=_0x45cef8;return this[_0x3be5b4(0x7f5)]&&this[_0x3be5b4(0x7f5)][_0x3be5b4(0x7c8)]();},Sprite_Enemy['prototype'][_0x45cef8(0x95c)]=function(){const _0x38789b=_0x45cef8;return this[_0x38789b(0x7c8)]()?this['_enemy'][_0x38789b(0x95c)]():!![];},Sprite_Enemy['prototype'][_0x45cef8(0x5f7)]=function(){const _0x276729=_0x45cef8;if(this[_0x276729(0x7c8)]()){if(_0x276729(0x8b9)!=='hZnzM'){if(!_0x5c27d5[_0x276729(0xc83)]())return;if(!_0x136116['VisuMZ_1_ElementStatusCore'])return;const _0x5defcc=_0x2d7b40[_0x276729(0x79c)];if(!_0x5defcc)return;_0x5defcc[_0x276729(0x8d0)]();}else this[_0x276729(0x7fc)][_0x276729(0x5f7)]();}},Sprite_Enemy['prototype'][_0x45cef8(0x947)]=function(_0x4d8a6f){const _0x523c56=_0x45cef8;if(this['hasSvBattler']())this[_0x523c56(0x7fc)]['forceMotion'](_0x4d8a6f);},Sprite_Enemy['prototype']['forceWeaponAnimation']=function(_0x30aae1){const _0x52760d=_0x45cef8;if(this[_0x52760d(0x7c8)]())this['_svBattlerSprite']['forceWeaponAnimation'](_0x30aae1);},Sprite_Enemy[_0x45cef8(0x3cf)][_0x45cef8(0x668)]=function(){const _0xf29c0a=_0x45cef8,_0x242d41=VisuMZ[_0xf29c0a(0x6c0)][_0xf29c0a(0x658)]['ActionSequence'],_0x5eb13d=_0x242d41[_0xf29c0a(0x81b)],_0x118051=_0x242d41[_0xf29c0a(0x2dc)],_0x349fb1=_0x242d41[_0xf29c0a(0x8c9)];this['startMove'](_0x5eb13d,_0x118051,_0x349fb1);};function Sprite_SvEnemy(){const _0x405b77=_0x45cef8;this[_0x405b77(0x754)](...arguments);}Sprite_SvEnemy['prototype']=Object[_0x45cef8(0x558)](Sprite_Actor[_0x45cef8(0x3cf)]),Sprite_SvEnemy[_0x45cef8(0x3cf)][_0x45cef8(0x8e2)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x45cef8(0x3cf)][_0x45cef8(0x754)]=function(_0x326358){const _0x6a2275=_0x45cef8;Sprite_Actor[_0x6a2275(0x3cf)][_0x6a2275(0x754)][_0x6a2275(0xa07)](this,_0x326358),this[_0x6a2275(0x4bb)]['x']=-0x1,this[_0x6a2275(0xc29)][_0x6a2275(0x4bb)]['x']=-0x1;},Sprite_SvEnemy[_0x45cef8(0x3cf)][_0x45cef8(0x367)]=function(){},Sprite_SvEnemy[_0x45cef8(0x3cf)][_0x45cef8(0x20b)]=function(){},Sprite_SvEnemy['prototype'][_0x45cef8(0x3ed)]=function(_0x3b9b68){},Sprite_SvEnemy['prototype']['updateShadow']=function(){},Sprite_SvEnemy[_0x45cef8(0x3cf)][_0x45cef8(0x723)]=function(){},Sprite_SvEnemy[_0x45cef8(0x3cf)][_0x45cef8(0x627)]=function(){this['_stateSprite']['visible']=![];},Sprite_SvEnemy[_0x45cef8(0x3cf)][_0x45cef8(0xb0b)]=function(){const _0x47dc93=_0x45cef8;Sprite_Battler[_0x47dc93(0x3cf)]['updateBitmap'][_0x47dc93(0xa07)](this);const _0x219ad7=this['_actor'][_0x47dc93(0x21f)]();if(this[_0x47dc93(0xc64)]!==_0x219ad7){if('NqNWN'!==_0x47dc93(0x4c4))return!![];else this[_0x47dc93(0xc64)]=_0x219ad7,this[_0x47dc93(0x4b5)][_0x47dc93(0xaaa)]=ImageManager['loadSvActor'](_0x219ad7);}if(this[_0x47dc93(0x4b5)]&&this['_mainSprite'][_0x47dc93(0xaaa)]&&this['_battler']){if('Wjqaf'!==_0x47dc93(0x7ab)){if(!_0x5284e3[_0x47dc93(0xc02)]())return;const _0x184055=this[_0x47dc93(0x231)]();if(!_0x184055)return;_0x184055[_0x47dc93(0xba0)](_0x2469ea,_0x35ffd2,_0x1063a6);}else{if(this['_mainSprite'][_0x47dc93(0xaaa)]['smooth']!==this[_0x47dc93(0xa87)][_0x47dc93(0x40b)]()){if(_0x47dc93(0x2a7)===_0x47dc93(0x2a7))this['_mainSprite']['bitmap'][_0x47dc93(0xc52)]=this[_0x47dc93(0xa87)]['battlerSmoothImage']();else{this[_0x47dc93(0x75c)](_0x19f557)[_0x47dc93(0x291)](/\\I\[(\d+)\]/i);const _0x33e21d=_0x3a06cc(_0x96f64f['$1'])||0x0,_0x374cb5=this['itemLineRect'](_0x20c309),_0x33661b=_0x374cb5['x']+_0x10bedd[_0x47dc93(0x74d)]((_0x374cb5[_0x47dc93(0x639)]-_0x36aac6[_0x47dc93(0x927)])/0x2),_0x80f0cd=_0x374cb5['y']+(_0x374cb5[_0x47dc93(0xa2a)]-_0x3d9838[_0x47dc93(0x34a)])/0x2;this[_0x47dc93(0x8a8)](_0x33e21d,_0x33661b,_0x80f0cd);}}}}},Sprite_SvEnemy['prototype'][_0x45cef8(0x476)]=function(){},Sprite_SvEnemy[_0x45cef8(0x3cf)][_0x45cef8(0x2b5)]=function(_0x2fc6da,_0x32b777,_0x31133d){const _0x307fc4=_0x45cef8;if(this[_0x307fc4(0xd01)])this[_0x307fc4(0xd01)][_0x307fc4(0x2b5)](_0x2fc6da,_0x32b777,_0x31133d);},Sprite_SvEnemy['prototype'][_0x45cef8(0x5f7)]=function(){const _0x1ff589=_0x45cef8,_0x5b92a8=this[_0x1ff589(0x318)];if(_0x5b92a8){if(_0x1ff589(0xcd0)!==_0x1ff589(0x577)){const _0x1548d7=_0x5b92a8['stateMotionIndex']();if(_0x5b92a8[_0x1ff589(0x660)]()||_0x5b92a8[_0x1ff589(0x6b1)]())_0x1ff589(0x56a)!==_0x1ff589(0x56a)?(this[_0x1ff589(0x60a)]=_0x46f2ee,this[_0x1ff589(0x4bd)]&&(this['_targetAngle']=0x0,this[_0x1ff589(0x60a)]=0x0)):this[_0x1ff589(0x5e1)](_0x1ff589(0xbcf));else{if(_0x1548d7===0x3){if(_0x1ff589(0x83d)!=='UHtbk')return _0x48421b;else this[_0x1ff589(0x5e1)](_0x1ff589(0x711));}else{if(_0x1548d7===0x2)this[_0x1ff589(0x5e1)](_0x1ff589(0x713));else{if(_0x5b92a8['isChanting']()){if(_0x1ff589(0x583)!==_0x1ff589(0x583))return _0x27fa16['BattleCore'][_0x1ff589(0x658)]['PartyCmd'][_0x1ff589(0x960)];else this['startMotion'](_0x1ff589(0x36b));}else{if(_0x5b92a8[_0x1ff589(0x3a2)]()||_0x5b92a8[_0x1ff589(0x952)]()){if(_0x1ff589(0x634)===_0x1ff589(0x634))this[_0x1ff589(0x5e1)](_0x1ff589(0x663));else return _0x408925[_0x1ff589(0xa15)]()[_0x1ff589(0x214)]()[_0x1ff589(0x4db)](_0x5254b5=>_0x5254b5!==_0x5a60c3);}else{if(_0x1548d7===0x1){if('ZEnAV'!=='RxdJa')this[_0x1ff589(0x5e1)](_0x1ff589(0x636));else return this[_0x1ff589(0x22a)](_0x309772);}else{if(_0x5b92a8[_0x1ff589(0x6d0)]())this[_0x1ff589(0x5e1)](_0x1ff589(0x375));else{if(_0x5b92a8[_0x1ff589(0xbdf)]())this['startMotion'](_0x1ff589(0xbcf));else{if(_0x1ff589(0xa3d)!==_0x1ff589(0xa6f))this[_0x1ff589(0x5e1)](_0x5b92a8[_0x1ff589(0x84b)]()[_0x1ff589(0x475)]||_0x1ff589(0xbcf));else{if(!_0x2c9727[_0x1ff589(0xc83)]())return;_0x27cde7[_0x1ff589(0x8b3)](_0x541aa1,_0x3e48cc);const _0x746620=_0x52d3c7[_0x1ff589(0xaf3)](),_0x543553=_0x1736c4[_0x1ff589(0x1f2)],_0x36323b=_0xdeff4c[_0x1ff589(0x357)];if(!_0x746620)return;_0x3cb0ad[_0x1ff589(0x4d6)]=_0x543553,_0x5e3c6c[_0x1ff589(0x244)]=_0x34c0ec[_0x1ff589(0xca8)]?_0x636049['_allTargets'][_0x5b71cf['_targetIndex']]||null:null,_0x20a3e8['_target']&&_0x36323b[_0x1ff589(0x5d3)]()[_0x1ff589(0x7f3)]()!==_0x1ff589(0x391)&&_0x746620[_0x1ff589(0x408)]([_0x36323b]);}}}}}}}}}}else{const _0x4c3287=new _0x250292();this[_0x1ff589(0x792)][_0x1ff589(0x5b6)](_0x4c3287),_0x4c3287['linkSprite'](_0x12f593);}}},Sprite_SvEnemy['prototype'][_0x45cef8(0x51a)]=function(){const _0x477c99=_0x45cef8;if(this[_0x477c99(0xd01)])return this[_0x477c99(0xd01)][_0x477c99(0x877)]===0x0&&this[_0x477c99(0xd01)][_0x477c99(0x6aa)]===0x0;else{if(_0x477c99(0x28d)===_0x477c99(0x28d))return!![];else{if(!_0x61c308['isSceneBattle']())return![];if(!_0x402f0e)return![];if(!_0x5399f6[_0x477c99(0x3a4)]())return![];if(_0x428883[_0x477c99(0x3a4)]()[_0x477c99(0xbfd)][_0x477c99(0x291)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(_0x36a314['checkAutoCustomActionSequenceNotetagEffect'](_0x5c7874[_0x477c99(0x3a4)]()))return!![];return![];}}},Sprite_SvEnemy[_0x45cef8(0x3cf)][_0x45cef8(0xbed)]=function(){},VisuMZ['BattleCore'][_0x45cef8(0x50b)]=Sprite_Animation[_0x45cef8(0x3cf)]['targetSpritePosition'],Sprite_Animation[_0x45cef8(0x3cf)][_0x45cef8(0x94b)]=function(_0x54cc0b){const _0x12983a=_0x45cef8;if(_0x54cc0b[_0x12983a(0x6b4)])return this[_0x12983a(0x781)](_0x54cc0b);else{if(_0x12983a(0x236)===_0x12983a(0x236))return VisuMZ['BattleCore'][_0x12983a(0x50b)]['call'](this,_0x54cc0b);else this[_0x12983a(0xca8)]=this['_targets'][_0x12983a(0xa4c)](0x0),this[_0x12983a(0x4d6)]=0x0,this['_target']=this['_allTargets'][0x0]||null,this['_phase']='custom';}},Sprite_Animation[_0x45cef8(0x3cf)][_0x45cef8(0x781)]=function(_0x595cca){const _0x150030=_0x45cef8;let _0x128473=_0x595cca['x'],_0xcefbb9=_0x595cca['y'],_0x1a16aa=_0x595cca[_0x150030(0xa2a)],_0x347f0d=_0x595cca[_0x150030(0x6b4)][_0x150030(0x4bb)]['y'];_0x595cca['x']=_0x595cca[_0x150030(0x3c6)]+_0x595cca[_0x150030(0x95f)](),_0x595cca['y']=_0x595cca[_0x150030(0x987)]+_0x595cca[_0x150030(0x81d)](),_0x595cca[_0x150030(0xa2a)]*=_0x347f0d;let _0xe8a9d4=VisuMZ['BattleCore'][_0x150030(0x50b)][_0x150030(0xa07)](this,_0x595cca);return _0x595cca['x']=_0x128473,_0x595cca['y']=_0xcefbb9,_0x595cca['height']=_0x1a16aa,_0xe8a9d4;},VisuMZ['BattleCore'][_0x45cef8(0x978)]=Sprite_AnimationMV[_0x45cef8(0x3cf)]['updatePosition'],Sprite_AnimationMV[_0x45cef8(0x3cf)]['updatePosition']=function(){const _0x569543=_0x45cef8;VisuMZ['BattleCore']['Sprite_AnimationMV_updatePosition'][_0x569543(0xa07)](this);if(this[_0x569543(0x50c)]['position']===0x3){if(_0x569543(0x6d9)!==_0x569543(0x6d9))_0x4f92a2=(_0x549b0c+_0x3cb87a)/0x2,_0x3718ab=-0x1;else{if(this['x']===0x0)this['x']=Math['round'](Graphics[_0x569543(0x639)]/0x2);if(this['y']===0x0)this['y']=Math[_0x569543(0x365)](Graphics[_0x569543(0xa2a)]/0x2);}}else{if(_0x569543(0x8fb)===_0x569543(0x4b9))_0x1e0076[_0x569543(0x970)][_0x569543(0x9b8)]=!![];else{if(this['battleStatusSprite'])return;const _0x4f33e6=(Imported[_0x569543(0x22d)]?VisuMZ[_0x569543(0x8e7)]['Settings']['UI'][_0x569543(0x45e)]:0x4)*0x2,_0x300a5c=(Graphics[_0x569543(0x639)]-(Graphics[_0x569543(0xa5d)]+_0x4f33e6))/0x2;if(_0x300a5c!==0x0)this['x']+=_0x300a5c;}}},Sprite_Damage[_0x45cef8(0x3cf)][_0x45cef8(0x5f0)]=function(_0x14a51d){const _0x17c861=_0x45cef8,_0x49860e=_0x14a51d[_0x17c861(0x455)]()||_0x14a51d[_0x17c861(0x238)]();if(_0x49860e['missed']||_0x49860e[_0x17c861(0x34b)])this['_colorType']=0x0,this[_0x17c861(0xa39)]();else{if(_0x49860e[_0x17c861(0xa99)])this[_0x17c861(0x2a9)]=_0x49860e['hpDamage']>=0x0?0x0:0x1,this['createDigits'](_0x49860e[_0x17c861(0x3de)]);else _0x14a51d[_0x17c861(0xa9a)]()&&_0x49860e[_0x17c861(0x5eb)]!==0x0&&(this['_colorType']=_0x49860e[_0x17c861(0x5eb)]>=0x0?0x2:0x3,this[_0x17c861(0x78b)](_0x49860e[_0x17c861(0x5eb)]));}_0x49860e[_0x17c861(0x766)]&&this[_0x17c861(0x8df)]();},Sprite_Damage[_0x45cef8(0x3cf)][_0x45cef8(0x74e)]=function(_0x3ac980){},Sprite_Damage[_0x45cef8(0x3cf)]['createDigits']=function(_0x5a8e5c){const _0xceb7b0=_0x45cef8;let _0x3597fc=this['createString'](_0x5a8e5c);const _0x4445f3=this[_0xceb7b0(0x47a)](),_0xcf9134=Math[_0xceb7b0(0x74d)](_0x4445f3*0.75);for(let _0x1d0a48=0x0;_0x1d0a48<_0x3597fc[_0xceb7b0(0xcc5)];_0x1d0a48++){const _0x2c0cc4=this['createChildSprite'](_0xcf9134,_0x4445f3);_0x2c0cc4[_0xceb7b0(0xaaa)][_0xceb7b0(0x894)](_0x3597fc[_0x1d0a48],0x0,0x0,_0xcf9134,_0x4445f3,_0xceb7b0(0xace)),_0x2c0cc4['x']=(_0x1d0a48-(_0x3597fc[_0xceb7b0(0xcc5)]-0x1)/0x2)*_0xcf9134,_0x2c0cc4['dy']=-_0x1d0a48;}},Sprite_Damage[_0x45cef8(0x3cf)][_0x45cef8(0xa00)]=function(_0x35ee1e){const _0xdc26be=_0x45cef8;let _0x45e0cc=Math[_0xdc26be(0x319)](_0x35ee1e)['toString']();this[_0xdc26be(0x3a1)]()&&(_0xdc26be(0xcd7)!==_0xdc26be(0xcd7)?this['push']('clearActiveWeaponSet',_0xbf848c):_0x45e0cc=VisuMZ['GroupDigits'](_0x45e0cc));const _0x244968=VisuMZ['BattleCore'][_0xdc26be(0x658)]['Damage'];let _0x1d7af5='',_0x34251b='';switch(this[_0xdc26be(0x2a9)]){case 0x0:_0x1d7af5=_0x244968['hpDamageFmt']||_0xdc26be(0x3c2),_0x34251b=TextManager['hp'];if(_0x35ee1e===0x0)_0x1d7af5='%1';break;case 0x1:_0x1d7af5=_0x244968[_0xdc26be(0xb9f)]||_0xdc26be(0x8e9),_0x34251b=TextManager['hp'];break;case 0x2:_0x1d7af5=_0x244968[_0xdc26be(0x70f)]||_0xdc26be(0x9dd),_0x34251b=TextManager['mp'];break;case 0x3:_0x1d7af5=_0x244968[_0xdc26be(0xb28)]||_0xdc26be(0x8ed),_0x34251b=TextManager['mp'];break;}return _0x1d7af5[_0xdc26be(0x9ec)](_0x45e0cc,_0x34251b)[_0xdc26be(0x7f3)]();},Sprite_Damage[_0x45cef8(0x3cf)][_0x45cef8(0x3a1)]=function(){const _0x58ada8=_0x45cef8;if(Imported[_0x58ada8(0x22d)]){if(_0x58ada8(0x78f)!==_0x58ada8(0xb91))return VisuMZ[_0x58ada8(0x8e7)]['Settings'][_0x58ada8(0x3e5)][_0x58ada8(0x620)];else _0x26c103['BattleCore'][_0x58ada8(0x88b)][_0x58ada8(0xa07)](this),this[_0x58ada8(0x282)]['autoSelect'](),this[_0x58ada8(0x9ac)]();}else{if(_0x58ada8(0x614)===_0x58ada8(0x720))_0x17921c+=_0x5dab2e/0x2;else return![];}},Sprite_Damage[_0x45cef8(0x3cf)]['setupCriticalEffect']=function(){const _0x139523=_0x45cef8,_0x4198df=VisuMZ[_0x139523(0x6c0)][_0x139523(0x658)][_0x139523(0x28b)];this[_0x139523(0x43e)]=_0x4198df[_0x139523(0xb65)]['slice'](0x0),this[_0x139523(0x675)]=_0x4198df[_0x139523(0x8d3)];},Sprite_Damage[_0x45cef8(0x3cf)]['setupTextPopup']=function(_0x330285,_0x45de07){const _0x1ea8ce=_0x45cef8;this[_0x1ea8ce(0x43e)]=_0x45de07[_0x1ea8ce(0xceb)]||[0x0,0x0,0x0,0x0],this[_0x1ea8ce(0x43e)]=JsonEx[_0x1ea8ce(0x5bf)](this[_0x1ea8ce(0x43e)]),this[_0x1ea8ce(0x675)]=_0x45de07[_0x1ea8ce(0x2f7)]||0x0;const _0x5241b5=this[_0x1ea8ce(0x47a)](),_0x53cce3=Math[_0x1ea8ce(0x74d)](_0x5241b5*0x1e),_0x13aa61=this['createChildSprite'](_0x53cce3,_0x5241b5);_0x13aa61[_0x1ea8ce(0xaaa)][_0x1ea8ce(0x73f)]=ColorManager[_0x1ea8ce(0xc44)](_0x45de07[_0x1ea8ce(0x73f)]),_0x13aa61[_0x1ea8ce(0xaaa)]['drawText'](_0x330285,0x0,0x0,_0x53cce3,_0x5241b5,'center'),_0x13aa61['dy']=0x0;},Sprite_Damage['prototype'][_0x45cef8(0x9c5)]=function(_0x40e64d,_0x189ba2,_0x5c7012){const _0x384f01=_0x45cef8,_0x4f1308=Math[_0x384f01(0x2ce)](this[_0x384f01(0x47a)](),ImageManager['iconHeight']),_0xdd2ce1=Math[_0x384f01(0x74d)](_0x4f1308*0x1e),_0x4b3872=this[_0x384f01(0x215)](_0xdd2ce1,_0x4f1308),_0x452343=ImageManager[_0x384f01(0x927)]/0x2,_0x7f0795=_0x4b3872[_0x384f01(0xaaa)]['measureTextWidth'](_0x189ba2+'\x20');_0x4b3872[_0x384f01(0xaaa)][_0x384f01(0x73f)]=ColorManager['getColor'](_0x5c7012[_0x384f01(0x73f)]),_0x4b3872[_0x384f01(0xaaa)]['drawText'](_0x189ba2,_0x452343,0x0,_0xdd2ce1-_0x452343,_0x4f1308,'center');const _0x2113ed=Math['round']((_0x4f1308-ImageManager[_0x384f01(0x34a)])/0x2),_0x337bab=_0xdd2ce1/0x2-ImageManager[_0x384f01(0x927)]-_0x7f0795/0x2+_0x452343/0x2,_0x4f663d=ImageManager[_0x384f01(0x804)](_0x384f01(0x9ca)),_0x401f95=ImageManager[_0x384f01(0x927)],_0x2a1cb3=ImageManager[_0x384f01(0x34a)],_0x4c5105=_0x40e64d%0x10*_0x401f95,_0x4c0a0f=Math[_0x384f01(0x74d)](_0x40e64d/0x10)*_0x2a1cb3;_0x4b3872[_0x384f01(0xaaa)][_0x384f01(0x415)](_0x4f663d,_0x4c5105,_0x4c0a0f,_0x401f95,_0x2a1cb3,_0x337bab,_0x2113ed),this['_flashColor']=_0x5c7012[_0x384f01(0xceb)]||[0x0,0x0,0x0,0x0],this[_0x384f01(0x43e)]=JsonEx['makeDeepCopy'](this[_0x384f01(0x43e)]),this[_0x384f01(0x675)]=_0x5c7012[_0x384f01(0x2f7)]||0x0,_0x4b3872['dy']=0x0;},VisuMZ['BattleCore']['Sprite_Damage_createChildSprite']=Sprite_Damage[_0x45cef8(0x3cf)][_0x45cef8(0x215)],Sprite_Damage[_0x45cef8(0x3cf)][_0x45cef8(0x215)]=function(_0x3d6bcd,_0x477b10){const _0x108f7f=_0x45cef8;return _0x477b10=Math[_0x108f7f(0x365)](_0x477b10*1.2),VisuMZ[_0x108f7f(0x6c0)][_0x108f7f(0x30e)][_0x108f7f(0xa07)](this,_0x3d6bcd,_0x477b10);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x950)]=Sprite_StateIcon[_0x45cef8(0x3cf)][_0x45cef8(0x3ba)],Sprite_StateIcon[_0x45cef8(0x3cf)][_0x45cef8(0x3ba)]=function(){const _0x1c1f4e=_0x45cef8;VisuMZ[_0x1c1f4e(0x6c0)][_0x1c1f4e(0x950)][_0x1c1f4e(0xa07)](this),this[_0x1c1f4e(0xbc0)]=this[_0x1c1f4e(0x56b)]>0x0?0xff:0x0;},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x388)]=Sprite_Weapon['prototype']['loadBitmap'],Sprite_Weapon[_0x45cef8(0x3cf)][_0x45cef8(0x90a)]=function(){const _0x4b347f=_0x45cef8;VisuMZ['BattleCore'][_0x4b347f(0x388)][_0x4b347f(0xa07)](this),this['bitmap']&&(this['bitmap'][_0x4b347f(0xc52)]=VisuMZ[_0x4b347f(0x6c0)]['Settings'][_0x4b347f(0x970)][_0x4b347f(0xbe4)]);};function Sprite_HpGauge(){this['initialize'](...arguments);}function _0x46f7(){const _0x1c8b04=['enemyId','walk','_text','VisuMZ_3_SideviewBattleUI','TxqMd','arRedFlat','weatherType','UlHFs','performMagicEvasion','displaySubstitute','initMembersBattleCore','reduce','skillTypes','ActSeq_Motion_RefreshMotion','getHardDamageCap','tjqIT','Window_BattleLog_performReflection','isUndecided','<CUSTOM\x20ACTION\x20SEQUENCE>','_damagePopupArray','criticalHitFlat','battleEffect','SmoothImage','checkShowHideBattleNotetags','forceSelect','animationBaseDelay','playCancel','ShowEnemyGauge','FocusY','ActSeq_Set_FinishAction','ActSeq_Camera_Reset','updateFlip','priority','_injectAnimationSprite','loadPicture','visible','alive\x20battlers\x20not\x20user','wjzBR','DamageFlat','regenerateAll','onActorOk','ASaTO','createCancelButton','destroy','oVQqk','isTeamBased','isBattlerFlipped','note','Scene_Battle_helpWindowRect','CFWEA','onDisabledPartyCommandSelection','selectNextActor','isSideView','position','EeNuQ','isQueueOptionsMenu','ppgHu','BattleManager_startAction','auto','buffAdd','WaitForScale','qWDOG','commandNameWindowCenter','performJump','_createCursorArea','commandFight','animationWait','eNAzF','onBattleStartBattleCore','JEDJx','qwHFC','ActSeq_Impact_TimeScale','startWeaponAnimation','ActSeq_Impact_BlueRedInvert','Scene_Battle_itemWindowRect','Scale','FlashColor','needsSelection','VPbIR','evalDamageFormulaBattleCore','_enemySprites','PFkDO','weatherPower','VisuMZ_1_ElementStatusCore','stepFlinch','battleCamera','_dragonbonesSpriteContainer','ActSeq_Movement_Scale','isBattleFlipped','DeJAL','TRwUH','_stateSprite','loadBattleback1','ActSeq_Impact_Desaturate','WaitForProjectile','Parse_Notetags_Action','ConvertCount','PostStartBattleJS','changeBattlerOpacity','ActSeq_BattleLog_PopBaseLine','KLCIs','aeMEf','ActSeq_Mechanics_PtbAlterCost','_targets','Scene_Party','gainTp','clniR','physical','_commonEventIDs','olluu','_commandNameWindow','Game_BattlerBase_eraseState','alive\x20opponents\x20not\x20target','battleback2Name','ForceRandom','getItemDamageAmountLabelBattleCore','VfmPW','criticalDmgRate','getColor','Sprite_Actor_updateFrame','evade','Scene_ItemBase_applyItem','TxeLG','isImmortal','alive\x20actors','ActSeq_Mechanics_StbExtraAction','TpbGaugeOffsetX','WaitCount','ActionSkillMsg1','CmdIconOptions','OoOqm','ZKGfm','smooth','Game_Action_isForOpponent','isAnyoneJumping','swapEnemyIDs','Sprite_Enemy_initVisibility','_totalValue','itemWindowRect','EDmgX','encounterList','BTB','AGI','isAtbChargingState','MvbOC','requestAnimation','_forcing','ActSeq_Mechanics_AnalyzeWeakness','getEnemyIdWithName','updateSpin','_battlerName','Fwahp','zUKUS','JS\x20%1END\x20TURN','fCIkh','isNextScene','YiUFm','processDefeat','setLastBattleSkill','PYjYg','UNUsI','_growWholeDuration','onBattleStartOnceParallels','zPegq','startInjectAnimation','setAttack','isTpb','isPartyTpbInputtable','VzQbc','TargetLocation','LXIDT','STB','VisuMZ_2_HorrorEffects','nextActiveWeaponSlot','ceil','setupBattlebackBattleCore','okButtonText','_actions','backColor','ZwNeB','applyTargetFilters','isSceneBattle','debuffAdd','addGuardCommand','startActorSelection','CqTGe','placeActorName','vWiqU','aIPOK','jKCxu','dfGpr','aTybs','processForcedAction','pushBaseLine','createBattleFieldBattleCore','animationId','isStatusAffected','gUUZk','KDVEB','pointX','GBWEe','Enemy','stop','dulfI','updateScale','Mirror','clearRect','jtACV','506658XorbwM','getBattlePortrait','currentAction','WaitForSpin','sortDamageSprites','makeActions','ActSeq_Movement_FacePoint','BattleSystemBTB','clearResult','isGrowing','_allTargets','BKaQo','TP_Flat','uCHdz','canAddSkillCommand','remove','Sprite_Battler_updatePosition','isCommandEnabled','displayReflectionPlayBack','performActionStart','MotionAni','base','_forcedHomeY','rCstn','skewBattler','_ptbActionCost','SMSvs','updateBattlebackBitmap1','_effectDuration','BattleLog','ydsre','CmdTextAutoBattle','NameAlwaysVisible','fGoMI','requestRefresh','updateCancel','rgFOd','_flipScaleX','_jumpWholeDuration','length','wytME','CriticalDmgFlat','MeleeDistance','updateBattleProcess','%1EndBattleJS','autoBattleAtStart','criticalHitRate','Game_Battler_clearDamagePopup','iZzFX','Scene_Battle_stop','QRujR','selectNextCommandTpb','magicSkills','_baseTexture','msZAl','findIndex','performFlinch','jKtIG','command301_PreBattleEvent','description','RhFeC','isForRandomBattleCore','_angleEasing','NMvCd','ActSeq_Movement_WaitForSkew','BattleVictoryJS','adjustPosition_ScaleUp','JS\x20BATTLE\x20VICTORY','PopupShiftY','_itemWindow','_tempActor','puiWm','alive\x20opponents','CreateActionSequenceTargets','processBorderActor','equipSlots','refreshCursor','flashColor','isPhysical','isTickBased','startBattle','LdnTc','updateStatusWindowPosition','xOwmT','effect','_targetAngle','_list','command339','redraw','ActSeq_Camera_Clamp','Game_Map_battleback2Name','Window_BattleLog_displayTpDamage','param','ActSeq_Zoom_Reset','ARRAYNUM','targetObjects','wait','ChantStyle','name','parent','FlashDuration','Scene_Battle_initialize','battleSkew','WaitForAngle','performActionEnd','reverse','CastMagical','dogiA','isForFriendBattleCore','Wave','VisuMZ_2_BattleSystemSTB','Scene_Battle_partyCommandWindowRect','VisuMZ_2_PartySystem','PreDamageAsTargetJS','show','isAnyoneInjectAniPrepping','partyCommandWindowRectBorderStyle','NiVtx','message1','useItem','dVdhR','YxgBI','ShowFailure','itemEffectAddAttackState','VisuMZ_4_BreakShields','ShowWeapon','VNOvE','nwWrR','CommandAddAutoBattle','_lines','_growEasing','StateIconOffsetX','Elements','tpbActorSwitchConditionsMet','isAnyoneMoving','PopupOffsetX','RequiresDefeat','BoostPoints','ActionItemMsg','getDamageStyle','hgdsi','PreRegenerateJS','loop','Index','PreApplyJS','snapForBackground','onEncounter','setBattleImpactTimeScale','ECwSZ','unchanged','StateIconOffsetY','Sprite_Actor_setActorHome','_backAttachmentSprite','isAnyoneSkewing','Spriteset_Battle_createBattleField','ActSeq_Inject_WaitForInjectAni','ActSeq_Zoom_WaitForZoom','UUYVd','FaceDirection','attackSkillId','drawSkillCost','ZplHp','lukEffectRate','xZePB','Umwuu','yTsvv','_drawTextOutline','drawItemImage','moveToStartPosition','bnGva','_forceAction','ActSeq_Animation_PlayAtCoordinate','_emptyBitmap','onBattleStart','CalcActionSpeedJS','skillWindowRect','%1Event','aliveMembers','createChildSprite','PreApplyAsTargetJS','CoSoz','leHRD','setBattlerMotionTrailData','changeCtbChargeTime','performEvasion','FAxPq','hHYaZ','uwUCn','svBattlerName','ILZIV','process_VisuMZ_BattleCore_PluginParams','_regionBattleback1','onEscapeSuccess','UWboN','MAT','WaitForZoom','battleAnimation','isDuringNonLoopingMotion','zeCUD','displayBattleCoreTransitionErrorMsg','WaitForMovement','FkkES','VisuMZ_0_CoreEngine','ZKGRE','qYLSs','isTriggered','battler','PxbOs','isMoving','clearDamagePopup','updateOnceParallelInterpreters','SsbAS','freezeFrame','result','skillItemWindowRectBorderStyle','WaitForNewLine','GOWCc','CommandVisible','Scene_Battle_start','_commonEventQueue','Text','ZFqdY','JsClV','requestPointAnimation','NewPopupBottom','_target','svBattlerShadowVisible','pattern','UogAh','VisuMZ_2_WeaponSwapSystem','ActSeq_Movement_WaitForFloat','aMXqf','setBattleAngle','gFskf','isAnimationShownOnBattlePortrait','PopupOffsetY','HjkDI','Ceohr','waitForEffect','needsActorInputCancel','showAnimation','checkSubstitute','alphabetic','WaitForFloat','KAsBo','BiBBf','IDrih','front\x20base','cGjDM','applyEasing','removeBuffsAuto','Frame','YbpdI','ParseStateNotetags','%1RegenerateJS','UtaWc','drawItemBackground','wbxpf','_targetGrowY','_logWindow','innerHeight','substitute','YRBcC','oGDTi','isPTB','ActSeq_Motion_MotionType','BattleCmdList','attackStates','addDebuff','CounterPlayback','_forcedHomeX','attackAnimationId2','createAutoBattleWindow','canGuardBattleCore','Game_BattlerBase_die','dimColor1','innerWidth','Linear','VisuMZ_3_ActSeqImpact','makeActionList','createUIContainer','_stypeIDs','rJXMr','addWeaponSwapCommand','globalAlpha','aFicq','compareEnemySprite','_enemyWindow','processActorCommandCancelTPB','hasBeenDefeatedBefore','performActionMotions','spinBattler','push','KbGhI','subject','Sprite_Actor_update','Damage','value','XrhGg','LvODr','jsScaleUp','canBattlerMove','match','_animationContainer','mvWsm','GeQPb','user','gainCurrentActionsFTB','placeStateIcon','createAllWindows','ParseItemNotetags','HelpFight','#ffffff','Scene_Battle_selectNextCommand','gainStoredBoostPoints','rCzux','_defeatedEnemies','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','DisablePartyCmd','version','removeHorrorEffect','createMainSprite','_battlerContainer','isSideButtonLayout','jUhQX','inputting','_colorType','onDatabaseLoaded','SOFtf','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','ActSeq_Impact_ZoomBlurTargetCenter','BNbHY','changeInputWindow','_jumpMaxHeight','includes','NameOffsetX','PreDamage%1JS','jsScaleDown','startMove','onOpacityEnd','ActSeq_Camera_FocusPoint','NnFtn','JsdDy','_lineHeight','addSingleSkillCommands','traitObjects','edXsE','FlinchDuration','setSvBattlerSprite','chbRg','Window_BattleStatus_initialize','battleMembers','ActSeq_Mechanics_BoostPointsChange','HelpSkillType','Sprite_Battler_damageOffsetX','ActSeq_Animation_ShowAnimation','JdGxK','ActSeq_Mechanics_StbExploit','OOKcr','setTroopPage','ActSeq_Mechanics_BreakShieldChange','getAttackMotion','ZTyAP','max','_cancelButton','isBorderStylePortraitShown','Targets','createSeparateDamagePopups','onEnemyOk','addAutoBattleCommands','getConfigValue','isAnimationPlaying','startFloat','FniFE','shadow','ScaleX','ActSeq_Movement_Skew','StepDistanceY','setFrame','UfjKY','PortraitScaleBorderStyle','cameraOffsetDuration','MDF','_battleCoreForcedElements','endBattle','alive\x20friends\x20not\x20target','mainSpriteHeight','_angleWholeDuration','isATB','ACteq','performRecovery','makeSuccess','ujFmX','isDebuffAffected','_forcedBattlers','PreApply%1JS','process_VisuMZ_BattleCore_Notetags','ARRAYJSON','Window_BattleLog_displayFailure','COMBAT\x20LOG','_homeEasing','cancel','setupNegativeImpactFilter','PBRUi','flashDuration','isSkill','isAlwaysHidden','onEnemyCancel','playReflection','WaitForEffect','SlotID','SvWeaponMass-%1-%2','freezeTime','setupZoomBlurImpactFilter','tFzSc','addChildAt','jTZcK','_index','XpBam','YDFeV','battleMove','SideviewSelect','select','playEnemyDamage','ArPenFlat','IWMga','ITEM','Sprite_Damage_createChildSprite','_forcedBattleLayout','skewDuration','battlerName','applySoftDamageCap','STYPES','fwScA','processBattleCoreJS','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','Game_Action_setAttack','_actor','abs','createPartyCommandWindowBattleCore','pointY','checkShowHideSwitchNotetags','rFfpS','occasion','isDeathStateAffected','_branch','getDefeatedEnemies','left','Sprite_Battleback_adjustPosition','sIiBg','setupChild','WaitForOpacity','ActSeq_BattleLog_Clear','onJumpEnd','_opacityWholeDuration','Setting','ActSeq_Target_CurrentIndex','SceneManager_isSceneChanging','RegExp','RFXde','addMeleeReturnActionSet','gKXhT','ActSeq_Mechanics_BtbGain','replace','ActSeq_Horror_NoiseRemove','_drawTextBody','zZFbQ','XPActorDefaultHeight','callOptions','getAttackMotionSlot','requestMotionRefresh','Game_BattlerBase_isStateResist','setupActionSet','deadMembers','ZXjCw','dead\x20enemies','NEuvZ','Game_Battler_regenerateAll','NlGXJ','addCustomCommands','addEscapeCommand','spriteId','CheckVisibleSkillNotetags','Window_BattleLog_clear','MotionSpeed','isNonSubmenuCancel','Mute','iconHeight','evaded','getNextSubject','_enemyIDs','performMoveToPoint','equips','_statusWindow','GtCBX','ALL\x20SKILLS','setBattleCameraPoint','Enemy-%1-%2','Window_BattleLog_pushBaseLine','ActSeq_Mechanics_Multipliers','JumpToLabel','createActorCommandWindow','rowSpacing','messageSpeed','BackColor','ArPenRate','clearBattleCoreData','delay','setBattlerFacePoint','IXaOP','TpGaugeOffsetY','Sprite_Battler_setHome','commandStyle','ActSeq_Movement_Opacity','round','collapse','createShadowSprite','Mwadp','_pattern','fnordRemovedStates','chant','Utnwo','svzxk','RbZMB','PreApplyAsUserJS','AssmD','BKrDe','OffsetY','CastCertain','JjnIr','dying','motionType','Filename','PARTY','FhXoq','Scene_Battle_onActorCancel','jUaSV','SvMotionIdleSolo-%1-%2','ActSeq_Movement_Float','removeAnimationFromContainer','oRGgh','Sprite_Battler_updateMain','startTpbTurn','fUCsQ','iyjGe','IDied','Height','Game_BattlerBase_canAttack','recoverAll','Sprite_Weapon_loadBitmap','mainFontSize','addSingleSkillCommand','BravePoints','frontviewSpriteY','_shake','removeState','Intensity','_freezeMotionData','UNTITLED','Immortal','ActSeq_Element_NullElements','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','ShowActorGauge','performAttackSlot','_floatHeight','DEF','AllowRandomSpeed','Window_BattleLog_performAction','_updateCursorArea','ActSeq_Projectile_Animation','visualHpGauge','GroupDigits','nRjRG','ActSeq_Movement_HomeMoveToPoint','useDigitGrouping','isGuard','KAQnM','item','addChildToUiContainer','AutoBattle','BattleSystemCTB','battlerSprites','checkAutoCustomActionSequenceNotetagEffect','random','Game_Map_battleback1Name','cmbnh','exqSC','drawItemStyleIcon','Sprite_Battler_setBattler','ZxFgL','setHandler','update','Armor-%1-%2','transform','ActSeq_Impact_ShockwavePoint','createHpGaugeSprite','noise','VckRf','ActSeq_Mechanics_ArmorPenetration','updateFrame','GpvBf','Pre','LRfoJ','_motionSpeed','VisuMZ_2_DragonbonesUnion','setCustomDamageFormula','dTPRf','-%1','offsetY','ActSeq_Set_SetupAction','AgIex','_baseX','clone','ActSeq_Motion_FreezeMotionFrame','SKILLS','VisuMZ_3_BoostAction','AqbRm','hardDamageCap','canMove','Dzsrp','prototype','xbeUz','frameVisible','ANTI_TINT_UI','findTargetSprite','commandNameWindowDrawText','processVictory','process_VisuMZ_BattleCore_Failsafes','NUkUN','refreshActorPortrait','\x5cI[%1]%2','isShownOnBattlePortrait','helpWindowRectBorderStyle','YRcwC','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','hpDamage','launchBattle','WtypeId','createBattleFieldContainer','VGtjI','ptIwL','drawEnemyName','QoL','1590414QJzwXP','createAttachmentSprites','_executedValue','MpGaugeOffsetX','ntPxJ','hasStaticSvBattler','TextAlign','setActorHome','PjLpQ','ActSeq_Movement_BattleStep','_skewEasing','_battleLayoutStyle','checkBattleEnd','basicGaugesY','EnableSoftCap','SmFQP','voTJx','createLowerLayer','isTurnBased','custom','popupDamage','mainSpriteScaleX','updateCallMenu','BrjEJ','CmdIconAutoBattle','DefaultStyle','isAnyProjectilePresent','PostApplyJS','float','Scene_Battle_createPartyCommandWindow','createHelpWindowBattleCore','svShadow','nKtyY','removeStatesAuto','command119','NXsQe','drawActorFace','battlerSmoothImage','sZivE','_deathStateApplied','makeCommandList','vLlmE','updateMain','TlLtH','ActSeq_Horror_TVRemove','VVKPo','vjkCd','blt','DHGIc','Game_BattlerBase_addNewState','command3011','ParseWeaponNotetags','PreEndTurnJS','canAlterActionCostPTB','bwKJW','slices','applyGlobal','cfnic','UPgPp','fDKBt','THNQv','ZUzbv','Scene_Battle_onEnemyCancel','ActSeq_Impact_TimeStop','ActSeq_Mechanics_DeathBreak','clearWeaponAnimation','logActionList','lhXWY','addSkillTypeCommand','isChangingOpacity','BaWJT','isEscapeCommandEnabled','BattleManager_makeActionOrders','_lastRegenFrameCount','Sprite_Enemy_setBattler','fIUdv','setHalfActionsPTB','targetActionSet','current\x20target','rSylg','Sprite_Actor_updateShadow','softDamageCap','yplmG','refreshDimmerBitmap','updatePointAnimations','_actionBattlers','apply','getHalfActionsPTB','_flashColor','autoSelectPriority','Window_ActorCommand_setup','isBTB','blockWidth','makeSpeed','charged','KXxfw','ShowTpDmg','JS\x20%1APPLY\x20%2','_autoBattle','floatBattler','Game_Battler_performActionStart','YljMu','_skewDuration','DHkUC','createAnimationContainer','_dimmerSprite','makeBattleCommand','ActSeq_Horror_NoiseCreate','performMiss','VisuMZ_1_MainMenuCore','showEnemyAttackAnimation','getNextDamagePopup','registerCommand','isFloating','Window_BattleLog_performCounter','FUrwX','uJsxs','_multipliers','fepCx','WaitForSkew','BoxMargin','getItemDamageAmountTextOriginal','setupFont','hasSkill','Game_Action_evalDamageFormula','battleCameraData','ActSeq_Mechanics_Immortal','isOkEnabled','damageRate','fillRect','maxItems','SkillsStatesCore','uVjhN','nzwGS','currentExt','CriticalHitFlat','command283','autoBattleWindowRect','setupWeaponAnimation','_growDuration','Game_System_initialize','lineHeight','Enable','motionIdle','retreat','removeOnceParallelInterpreter','_callSceneOptions','bRPmi','fontSize','_back2Sprite','onSelectAction','xlIYx','addedStateObjects','ceVvD','_flinched','updateHpGaugePosition','displayAction','move','Window_BattleLog_performActionEnd','_autoBattleWindow','_inputting','ActSeq_Impact_MotionTrailCreate','ShowAddedBuff','createWeather','contents','_motionCount','collapseType','performCounter','setupRgbSplitImpactFilter','mainSpriteWidth','gainHalfActionsPTB','ActSeq_Mechanics_EtbAction','damageOffsetX','PreStartTurnJS','ActSeq_Target_PrevTarget','IAGUY','battleJump','effects','gaugeLineHeight','Radius','makeTargets','checkSceneBattleTransitionable','expRate','Sprite_Enemy_updateBossCollapse','qQZfA','resize','alive\x20battlers\x20not\x20target','isHidden','NCJbH','CJIdI','canUseItemCommand','extraPositionScaledY','AswFk','Window_BattleLog_displayActionResults','updateBorderSprite','map','processPostBattleCommonEvents','OUWJS','eraseState','VisuMZ_3_ActSeqProjectiles','ExHAL','isCharging','UpjrP','pgfRO','msbOs','_battleCoreAddedElements','portrait','_mainSprite','validTargets','JS\x20BATTLE\x20DEFEAT','addText','bXzJu','_battleCoreBattleStartEvent','scale','svBattlerAnchorX','_angleRevertOnFinish','ActSeq_Mechanics_EnemyEscape','displayChangedStates','UcaLW','resizeWindowBorderStyle','centerFrontViewSprite','_targetHomeX','NqNWN','thrust','PopupDuration','statusWindowRectBorderStyle','displayCritical','NLKkj','Game_Battler_makeSpeed','drawItemStatusListStyle','dNgeh','oQHEz','jumpBattler','type','ActorCmd','needsSelectionBattleCore','ESCAPE','ActionSkillMsg2','actor','setBattleZoom','_targetIndex','getBattlePortraitFilename','displayActionResults','Sprite_Enemy_updateCollapse','Window_BattleLog_displayEvasion','filter','formula','BattleManager_onEscapeFailure','switchToWeaponType','createPartyCommandWindow','Sprite_Battler_startMove','DistanceAdjust','ActSeq_Mechanics_AtbGauge','AUTO\x20BATTLE','motionSpeed','MepCV','faceWidth','addActor','_cursorSprite','startInput','ozJUl','statusTextAutoBattleStyle','updateShadowScale','battleCommandIcon','Game_Action_itemEffectAddAttackState','Turns','isAutoBattleCommandEnabled','ActSeq_Movement_WaitForMovement','ActSeq_Mechanics_RemoveBuffDebuff','Game_BattlerBase_refresh','Scene_Battle_createCancelButton','Rate','_floatDuration','ActSeq_Movement_MoveBy','uAcFy','BattleEndEvent','qhljM','TEmfl','padding','ActSeq_Camera_WaitForCamera','onBattleEnd','BattleManager_processDefeat','MlVPG','zHlXQ','pDGmb','CheckSkillCommandShowSwitches','_actorSprites','ActSeq_Mechanics_AddState','autoBattle','ShowAddedState','iDbZf','actorCommandAutoBattle','oEgbR','Sprite_Animation_targetSpritePosition','_animation','stateMotionIndex','CmdTextAlign','ActSeq_Mechanics_BreakShieldReset','opacityStart','ActSeq_Mechanics_OnceParallel','battleInjectPrep','isMVAnimation','updateBossCollapse','hfifR','_shadowScaleY','createInnerPortrait','_actorWindow','process_VisuMZ_BattleCore_TraitObject_Notetags','inHomePosition','join','sKoPB','maxTp','JePBn','cameraClamp','escape','battleSpin','updateShadow','TQUtY','_borderPortraitSprite','TextColor','Angle','getMenuImage','tEtJX','Game_Action_clear','sort','removeBuff','PRE-','itemCri','DcHkv','ShowCritical','ActSeq_Impact_MotionBlurTarget','PQDUe','_shadowSprite','getSkillIdWithName','damageOffsetY','open','updateInterpreter','NvVkW','battleCommands','StartName','elRiV','displayFailure','_growY','wScYv','updateAction','ActSeq_Skew_WaitForSkew','AttackAnimation','log','getBattlePortraitOffsetY','ErtsP','executeDamage','wsFSr','cameraDuration','Window_BattleLog_popBaseLine','clearBattleRefreshRequest','drawTextTopAligned','initVisibility','_immortal','clearMotion','applyBattleCoreJS','performCastAnimation','JS\x20ESCAPE\x20SUCCESS','VisuMZ_3_WeaknessDisplay','restore','prev\x20target','repositionCancelButtonBorderStyle','createKeyJS','JQkIY','regionId','isTpbCharged','create','getBattlePortraitOffsetX','initMembers','skew','Jtkgn','_appeared','clearForcedGameTroopSettingsBattleCore','isChanting','NextTurn','isOTB','commandSymbol','PostDamageJS','displayBuffs','uSQSl','BindCommonEventKeysForGroup','addAutoBattleCommand','filterArea','contentsOpacity','mccHN','_iconIndex','EeJKY','isActiveTpb','battleCorePreBattleCommonEvent','windowAreaHeight','ActSeq_Mechanics_DamagePopup','BczMx','RevertAngle','KKgFH','textSizeEx','Game_Action_applyGlobal','_eventId','sSUdQ','setSTBExploited','CheckVisibleBattleNotetags','JS\x20%1START\x20TURN','bossCollapse','POST-','ActSeq_Mechanics_FtbAction','atHyU','wzZZQ','updatePadding','_waitMode','min','yexLq','applyGuard','front\x20center','getInputButtonString','_homeDuration','MessageWait','6979032uYQGYh','_updateCursorFilterArea','ActSeq_Animation_WaitForAnimation','refreshStatusWindow','EICMU','WaitForJump','_growX','getWtypeIdWithName','loadBattleback2','cgFzc','ActSeq_Horror_TVCreate','ZkPoz','ActSeq_Inject_AnimationEnd','_animationCount','mPfvC','FlinchDistanceY','allowRandomSpeed','AddHpGaugeOption','Game_Battler_onBattleEnd','ArRedFlat','numRepeats','FocusX','loadWindowskin','BaseTroopIDs','_weather','Actions','visibilityState','cQKIn','iZLFU','Scene_Battle_updateStatusWindowPosition','ActSeq_Mechanics_PtbFullHalfAction','WEurP','JSON','BWgMC','Game_Battler_startTpbTurn','preemptive','applyItem','setLastPluginCommandInterpreter','KRazC','wFmvx','helpAreaHeight','NameAlwaysHidden','createHelpWindow','canUse','applyFreezeMotionFrames','addChild','isHiddenSkill','numTargets','Sprite_Battler_initMembers','close','BattleManager_updatePhase','TEaIi','FollowTurn','BattleLayout','makeDeepCopy','forceAction','isActionSelectionValid','_isBattlerFlipped','_actorCommandWindow','States','applyDamageCaps','CmdIconEscape','Game_Interpreter_command301','DamageRate','setupBlueRedInvertImpactFilter','Game_Action_isForFriend','MEIiQ','ActionEffect','lastBattleSkill','Window_SkillList_maxCols','isBattleTest','Amp','aptTG','Scene_Battle_selectPreviousCommand','toUpperCase','fnordAddedStates','oroDl','adjustPosition_ScaleToFit','callNextMethod','_uiContainer','speed','start','zTrtS','JBISF','setBattleCameraOffset','setBackgroundType','MaVFU','setMoveEasingType','startMotion','Game_BattlerBase_initMembers','iIoPB','EEmTr','StatusWindowAttachmentFrontOffsetX','checkCacheKey','setActiveWeaponSlot','performDamage','dead\x20battlers','softDamageCapRate','mpDamage','makeEscapeRatio','checkTpbInputOpen','measureTextWidth','index','setupBattleCore','mhp','ActSeq_Movement_WaitForOpacity','addedBuffs','isCertainHit','skill','_homeWholeDuration','refreshMotion','HP_Flat','PreEndActionJS','clearBattlerMotionTrailData','startTurn','uGhmn','CastPhysical','forceEscapeSprite','TcTyx','Override','customDamageFormula','Scene_Battle_startActorSelection','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','pRBka','clearFreezeMotionForWeapons','process_VisuMZ_BattleCore_CommonEventKeys','weaponImageId','isAppeared','Window_PartyCommand_initialize','_currentAngle','updateShadowBattleCore','UBkdW','updateStateSpriteBattleCore','PostEndActionJS','cancelButtonText','ActSeq_Horror_Clear','helpAreaBottom','NameOffsetY','actor%1-portrait','faUCy','StatusWindowSkinFilename','TJSYh','Window_ItemList_maxCols','process_VisuMZ_BattleCore_PreBattleCommonEvent','getChildIndex','BTestBypass','Game_Troop_setup','sortEnemies','isPreviousSceneBattleTransitionable','isDead','setupDamagePopup','DigitGroupingDamageSprites','finishActorInput','svBattlerAnchorY','DFKQo','endAnimation','setWaitMode','PostEndTurnJS','updateStateSprite','ext','actorId','Window_BattleLog_refresh','ForceExploited','Game_Interpreter_terminate','updateWeather','_tpbNeedsPartyCommand','isLearnedSkill','performWeaponAnimation','StatusWindowSkinHide','ApplyImmortal','performAttack','iitCU','partyCommandWindowRectXPStyle','abnormal','Ochcw','_svBattlerData','width','ActSeq_Weapon_SetActiveWeapon','ActSeq_Motion_PerformAction','_damageContainer','vTCvX','ksIiz','BattleManager_endAction','battleUIOffsetX','nBgWM','ChargeRate','Window_BattleEnemy_show','battleback1Name','processRefresh','ActSeq_Impact_ShockwaveCenterTargets','font','FaceAway','battleCoreResumeLaunchBattle','VjFEu','activate','DamageStyleList','Game_Temp_requestAnimation','%1Apply%2JS','nmwPi','Scene_Battle_onEnemyOk','ScaleToFit','_helpWindow','logWindowRect','Window_BattleLog_performActionStart','BattleManager_startBattle','zPbXr','changeAtbChargeTime','Settings','Window_BattleLog_performSubstitute','battlelog','iterateBattler','uFfey','CcARi','kBgvb','createStateIconSprite','isInputting','ytHcL','jIKYZ','guard','_opacityDuration','createEnemyNames','members','AutoMeleeAoE','stepForward','maxCommands','setBattleCameraTargets','onSkewEnd','_phase','JS\x20%1END\x20ACTION','StatusWindowAttachmentBack','SkillItemStandardCols','vrjWh','647965cfjQkz','SceneManager_push','mmp','isAffectedByBreakShield','_flashDuration','text','currentValue','RTHji','AddOption','UdAYa','removeImmortal','startSpin','AutoBattleBgType','ROkuq','zNIAp','dimColor2','maxCols','Cwbdu','process_VisuMZ_BattleCore_CreateRegExp','traitSet','AutoBattleRect','_effectsContainer','VisuMZ_1_SkillsStatesCore','isAnyoneChangingOpacity','addCombatLogCommand','Game_Interpreter_command283','applyHardDamageCap','SmlNP','EFFECT_COMMON_EVENT','AmMKs','addAttackCommand','Duration','BattleManager_onEncounter','_requestRefresh','KYrci','VariableHeal','setCursorRect','addDamageSprite','performActionEndMembers','MAXHP','pow','duration','isAnyoneFloating','dead\x20actors','CmdIconFight','bottom','_battleField','terminate','ActSeq_Impact_MotionBlurScreen','battlerShadowScaleX','bgType','VisuMZ_2_BattleSystemCTB','command357','some','VariableID','setBattlerFlip','ACiFM','_offsetY','createActorCommandWindowBattleCore','gradientFillRect','initBattlePortrait','Defeat','SkillItemMiddleLayout','applyData','isActing','border','Urbjf','_distortionSprite','addGeneralOptions','cancelActorInput','stepBack','makeData','focus','isConfused','setupMotionBlurImpactFilter','growBattler','setActionState','addChildToBack','ENSSY','BattleCore','updateEffectContainers','pages','updateBattlebackBitmap2','isFriendly','PopupPosition','updateOpacity','skillId','partyCommandWindowRectDefaultStyle','eNkrH','Sprite_Enemy_update','gPzOX','_enemyID','JS\x20%1DAMAGE\x20%2','options','HelpEscape','isDying','ActSeq_Element_AddElements','changeBattlebacks','sVxpf','Game_Party_addActor','Game_Action_itemEffectAddNormalState','Formula','processEscape','updateStart','bBxZj','makeAutoBattleActions','clear','onEscapeFailure','upDSt','Yysje','%1EndActionJS','Targets2','_attackAnimationId','JS\x20%1START\x20ACTION','_targetFloatHeight','ShowAddedDebuff','processExtendTroopMembers','commandRemember','battleFloat','battleLayoutStyle','criticalDmgFlat','active','QnggO','HelpAutoBattle','%1StartTurnJS','EcAZI','uiInputPosition','CANhJ','TP_Rate','addTextToCombatLog','ActSeq_Motion_WaitMotionFrame','PreDamageAsUserJS','onRegeneratePlayStateAnimation','Scene_Battle_commandFight','changeAtbCastTime','Parse_Notetags_TraitObjects','_jumpDuration','tPekp','Scene_Battle_skillWindowRect','MpGaugeOffsetY','currentSymbol','MotionIdle','updateCustomActionSequence','DefaultSoftCap','helpWindowRect','isSkewing','IzKsP','wholeActionSet','_floatEasing','pNyoi','ActSeq_Mechanics_CtbOrder','BattlebackScale','Scene_Map_initializeAfter','hitRate','dead\x20friends','UjhxO','ActSeq_Target_NextTarget','SvWeaponSolo-%1-%2','mpDamageFmt','ActionStart','dead','moveBattlerToPoint','sleep','displayType','value1','actionBattleCoreJS','waitCount','Window_BattleLog_performMiss','isPreviousScene','ElementStatusCore','horzCells','battleZoom','troop','attack','kHVbS','iAbXt','JKFCF','ActSeq_ChangeSkew','updateShadowPosition','isEnemy','675613hqLvLU','updateShadowVisibility','alive\x20enemies\x20not\x20target','onEncounterBattleCore','HvRrf','placeTimeGauge','drawTextEx','ATTACK','ActSeq_Movement_MoveToPoint','Scene_Map_launchBattle','Scene_Battle_createActorCommandWindow','OPBDs','TGhIl','ActSeq_Mechanics_CtbSpeed','isSpinning','isForOpponentBattleCore','jdrFY','canInput','isBattleSys','updjY','Game_Actor_setup','isForAll','_createCursorSprite','CopyCombatLog','CheckVisibleSwitchNotetags','AsUser','textColor','casting','addExtendedTroopMembers','createBattleUIOffsetY','ArRedRate','displayTpDamage','itemLineRect','itemTextAlign','ActSeq_BattleLog_WaitForBattleLog','wuMrm','ResetFocus','updatePhase','battleStatusSprite','vNlAL','floor','setup','SbPQv','Scene_Battle_createHelpWindow','ZzJhE','currentClass','gainMp','initialize','textBaseline','_methods','_updateClientArea','mmRKU','Sprite_Enemy_updateStateSprite','_frontAttachmentSprite','Scene_Options','commandName','chantStyle','iTueB','setHorrorEffectSettings','charging','Window_BattleLog_performCollapse','RWhmC','ActSeq_BattleLog_Refresh','displayReflection','zSXvr','critical','createDamageSprite','GXZHV','Scene_Options_maxCommands','VisuMZ_4_CombatLog','_battlePortrait','ActSeq_Mechanics_BoostPointsStoreData','_cache','UhpGb','turn','setHelpWindowItem','aTFQb','ZOEIM','ShowPortraitsBorderStyle','ShowReflect','ActSeq_Movement_Jump','TPB','isDTB','setupShockwaveImpactFilter','PostRegenerateJS','aaVxJ','MotionType','BattleManager_isTpbMainPhase','EscapeFail','PostEndBattleJS','turnOrderChangeOTB','updateWaitMode','targetDistortionSpritePosition','stopInjectAnimation','Sprite_Actor_initMembers','ConfigManager_applyData','stypeId','Lxfnd','waitForAnimation','pop','isDamagePopupRequested','isFastForward','createDigits','YlmTZ','_spriteset','DNMhc','vFYNX','kCYQv','AlphaFilter','_enemyNameContainer','CriticalHitMultiplier','Targets1','updateActors','ActSeq_Movement_HomeMoveToTarget','isPlaytest','YBJBF','lPELn','FlinchDistanceX','isFlipped','_action','waitForNewLine','ShowPopup','applyImmortal','AutoNotetag','MFNDU','autoMeleeSingleTargetActionSet','Sprite_Battler_damageOffsetY','revealNewWeaknesses','_createClientArea','msDcM','HpGaugeOffsetX','ARRAYFUNC','compatibilityVisible','isIncludedInEnemyWindow','Wjqaf','Game_Map_setupBattleback','Reveal','battleUIOffsetY','jsOneForOne','_frame','setupBattleback','ActSeq_Angle_WaitForAngle','battleStatusWindowAnimationContainer','VisuMZ_2_BattleSystemATB','ymTHn','drawItemStyleIconText','getDualWieldTimes','performSubstitute','AutoBattleCancel','canAttack','NUM','ReflectPlayback','Game_Actor_equips','PopupShiftX','battleAngle','StatusWindowAttachmentBackOffsetY','addBattleCoreAutoBattleStartupCommand','isOpponent','ParseSkillNotetags','isForOne','sSToa','_tpbState','SkillItemBorderCols','hasSvBattler','PostApply%1JS','DnjrK','prepareBorderActor','Sprite_SvEnemy','displayCounter','findSymbolExt','PreDamageJS','aViiT','Window_BattleLog_performDamage','VariableDmg','battleCoreTpbMainPhase','lHDeD','makeUniqueNames','uqEsX','battleDisplayText','createBattleField','DWKtn','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','wEnzH','displayEvasion','ShowFacesListStyle','allBattleMembers','TpGaugeOffsetX','split','reserveCommonEvent','gainBravePoints','TimeScale','ltnEe','onAngleEnd','Post','Window_BattleLog_displayMiss','ShowRemovedState','onTurnEnd','STRUCT','fuhoW','worldTransform','faceRect','eMYSR','battleCommandName','calcWindowHeight','animationNextDelay','startActorCommandSelection','trim','ySsEV','_enemy','ActSeq_BattleLog_AddText','_cursorArea','statusWindowRectXPStyle','updateHomeMove','commandStyleCheck','revertTpbCachedActor','_svBattlerSprite','canAttackBattleCore','XPSpriteYLocation','context','selectNextCommand','Scene_Battle_updateBattleProcess','pause','kbiNu','loadSystem','WaitForCamera','createBattleUIOffsetX','refresh','DKYzo','MANUAL','_customDamageFormula','ZqMOS','FZWmb','setupDesaturateImpactFilter','ljdXU','NoStv','AutoBattleOK','mHSTM','sqDpp','gQvBb','pRVbP','muZJO','mainSpriteScaleY','shift','tnNPZ','Buffs','addSkillCommands','StepDistanceX','clearOnceParallelInterpreters','extraPositionY','isRightInputMode','extraHeight','updateHelp','loadSvEnemy','maxBattleMembers','twhkz','_active','PiqNa','actionSplicePoint','parameters','createBorderStylePortraitSprite','selectPreviousCommand','setImmortal','Destination','waSpS','BattleLogRectJS','drawSingleSkillCost','hnIHK','onFloatEnd','createActors','Window_ActorCommand_initialize','MOTIONS','battleGrow','MbTbs','PostApplyAsUserJS','ftrVK','VgqlK','updateEffectsContainer','setValue','_partyCommandWindow','unshift','UHtbk','repeatTargets','ActSeq_BattleLog_UI','GdNlU','4926344CCzcsT','isForFriend','_enemyId','asfli','createCommandVisibleJS','isAnyoneSpinning','isBattleCoreTargetScope','hSSxm','wtaAl','requestDragonbonesAnimation','svBattlerData','wtypeId','autoBattleUseSkills','updateJump','_escapeRatio','ShowRemovedBuff','pfoou','isForOpponent','isFTB','PkzWJ','XvUGs','_hpGaugeSprite','isSkillItemWindowsMiddle','GxrBC','anchorX','SkewX','gDGnA','CriticalDmgRate','setupMotion','Sprite_Actor_setBattler','stateRate','xdFuV','TzaLs','atbInterrupt','startPartyCommandSelection','StatusWindowAttachmentFrontOffsetY','isItemCommandEnabled','ForceDeath','XBuKl','Item-%1-%2','AutoMeleeSolo','_targetGrowX','ActSeq_Movement_FaceTarget','playOnceParallelTroopPage','AttachStateOffsetX','addBattleCoreAutoBattleStyleCommand','7oZuCHL','xCRZS','AnimationID','actions','sMYSD','CombatLogIcon','abjRw','ActSeq_Element_Clear','_offsetX','performMoveToTargets','addLoadListener','ucsmC','xYNJJ','Game_Action_needsSelection','_linkedSprite','origin','AnchorY','ActionCenteredName','EscapeSuccessJS','DistanceY','_homeX','ttaLU','MOBLd','updateStyleOpacity','Hngyf','xHtfh','znsoK','Game_Battler_performMiss','Scene_Battle_startEnemySelection','die','XPActorCommandLines','hdNab','Scene_Battle_windowAreaHeight','isBattleRefreshRequested','DamageDisplay','setBattlePortrait','ixULu','drawText','Game_Battler_performEvasion','bmzUv','startEnemySelection','KnFoA','yvwVv','ZpvGk','_tempEquipCheck','statusWindowRect','isAutoBattle','_motionType','IwAvi','UElmb','ChangeOrderBy','isTpbMainPhase','performAction','olNrG','isBreakStunned','WaitComplete','EscapeSuccess','drawIcon','%1EndTurnJS','_regionBattleback2','_updateFilterArea','PgIZU','keJdt','isAnyoneGrowing','_subject','GmxXF','refreshBattlerMotions','BattleManager_initMembers','ConvertParams','text\x20target','GpRkg','ForceExploiter','checkExtendTroopCompatibility','Window_BattleStatus_drawItemImage','hZnzM','VwTgV','addImmortal','PhnTW','return\x200','isCommonEventReserved','onHomeMoveEnd','isCustomActionSequence','StatusWindowAttachmentFront','BcLze','ActSeq_Horror_GlitchRemove','requestMotion','HsRPo','isSTB','parseForcedGameTroopSettingsBattleCore','resetBreakShield','StepDuration','moveBattlerHomeToPoint','Spriteset_Battle_createLowerLayer','battleSys','tOYSg','endAction','isAttack','clearElementChanges','addOnceParallelInterpreter','DtBBb','CriticalDuration','turnCount','UJZfs','createEmptyBitmap','SEcqH','eEOQg','IconStypeMagic','createJS','TLEDD','MotionFrameWait','_wtypeIDs','isForRandom','setupCriticalEffect','children','_skillWindow','constructor','setupBattleCoreData','Debuffs','cHSTf','AdjustRect','CoreEngine','SKvPT','+%1','removedBuffs','CommandWidth','Window_BattleLog_performRecovery','+%1\x20MP','performSTBExploiter','Parse_Notetags_Targets','Scene_Battle_startPartyCommandSelection','isCustomBattleScope','isJumping','UqdwK','updateAttachedSprites','#%1','SkipPartyCmd','PartyCmd','getAttackWeaponAnimationId','weapons','damage','MXmtK','PreEndBattleJS','changePaintOpacity','ZbtYI','ShowHide','OffsetX','_cacheTextWidth','DefaultDamageStyle','qvstj','NameAlwaysSelectOnly','EVAL','Game_Party_removeActor','resetResultSwitches','ActionCount','ConfigManager_makeData','loadBitmap','PewSF','commandNameWindowDrawBackground','createEffectActionSet','CriticalHitRate','cBrpI','partyCommandWindowRect','iconText','wLTox','hoamj','splice','_createEffectsContainer','windowPadding','pvTPs','wyUXS','avcvy','ARRAYEVAL','Window_BattleLog_popupDamage','victory','updateCommandNameWindow','_createDamageContainer','frameCount','sbSjA','processRandomizedData','CheckMapBattleEventValid','canEscape','Scene_Boot_onDatabaseLoaded','onActorCancel','Game_Battler_onTurnEnd','iconWidth','_stateIconSprite','missile','statusWindowRectDefaultStyle','_interpreter','doesPageHaveOnceParallelStart','removeChild','magicReflection','Window_BattleLog_displayMpDamage','Sprite_Battler_update','isDisplayEmergedEnemies','MzeHQ','HpGauge','drawLineText','getNextSubjectFromPool','_waitCount','HtDPl','applyForcedGameTroopSettingsBattleCore','hide','startHomeMove','eLfLH','StatusWindowAttachmentBackOffsetX','isOpen','vertCells','initBattleCore','jKNKE','_checkOn','setHome','orDwS','bitmapWidth','placeGauge','_borderPortraitTargetX','forceMotion','addFightCommand','attackAnimationIdSlot','EasingType','targetSpritePosition','addBuff','sGmkZ','cancelTargetSelectionVisibility','OydRR','Sprite_StateIcon_updateFrame','dNbHM','isGuardWaiting','hidden','Shadow','XwTrC','pRBTu','URkue','setBattlerBattleCore','toUseBoostPoints','drawItemStatusXPStyle','isOptionsCommandEnabled','allowCollapse','ParseClassNotetags','emerge','extraPositionX','CmdStyle','missed','setupOversaturateImpactFilter','SIVZg','isFightCommandEnabled','displayChangedBuffs','showPortraits','Sprite_Battler_isMoving','BattleManager_startInput','BattleStartEvent','opponentsUnit','xhhBM','qPhCh','alterPriority','attackMotions','compareBattlerSprites','Actor','addShowHpGaugeCommand','COMBATLOG','KKRcH','startAttackWeaponAnimation','updateLink','updateBattlerContainer','Scene_Battle_onActorOk','Sprite_AnimationMV_updatePosition','sGmmZ','createTargetsJS','LUK','PostApplyAsTargetJS','drawItemImageXPStyle','mainSprite','Window_BattleLog_displayCurrentState','icon','showNormalAnimation','isBattleMember','updateEventMain','alterChange','displayCurrentState','wQkog','_baseY','Game_Battler_clearMotion','_padding','isActor','all\x20targets','setGuard','ActSeq_Movement_Spin','rncNq','updateSkew','ClearBattleLog','default','BindCommonEventKeysForObj','gpifn','createDistortionSprite','jGXKK','jUsMH','ActSeqImpact','isClicked','ActSeq_Animation_AttackAnimation','pUzEu','_activeWeaponSlot','kgSbF','FGqkK','JS\x20%1START\x20BATTLE','_preemptive','waitForMovement','counterAttack','KyUOy','CTB','setText','TpbGaugeOffsetY','CastAnimation','_endBattle','addAnimationSpriteToContainer','actorCommandEscape','IFIYq','NameFontSize','makeTargetSelectionMoreVisible','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','HitRate','Window_Options_statusText','getTraitSetKeys','ActionAnimation','Game_Action_executeDamage','PrioritySortActive','ActSeq_Impact_Oversaturate','GUARD','createTroopNote','setCommonEvent','PrioritySortActors','frameDelay','moveBattlerDistance','SvBattlerSolo-%1-%2','commandEscape','isNextSceneBattleTransitionable','svAnchorY','_targetSkewY','lCecK','_motion','isStateResist','ShowMissEvasion','_commonEventKey','setupIconTextPopup','isMagical','drawItemStatus','vcRUI','dataId','IconSet','Game_Interpreter_updateWaitMode','ActSeq_DB_DragonbonesTimeScale','showHelpWindow','filters','resetFontSettings','repositionEnemiesByResolution','BattleManager_cancelActorInput','EscapeFailureJS','NameLegacy','RzcJM','adjustWeaponSpriteOffset','applyGlobalCommonEventNotetags','updatePositionBattleCore','fittingHeight','QzcZs','action','BreakShields','Game_Action_makeTargets','-%1\x20MP','lfFBh','_duration','isMeleeSingleTargetAction','ActSeq_Impact_MotionTrailRemove','_scene','iconIndex','xWwpN','ActSeq_Animation_CastAnimation','jDCNn','UQXrQ','okTargetSelectionVisibility','PostStartActionJS','hECyZ','checkTpbInputClose','format','_battleCoreBattleResumeAfter','alive\x20actors\x20not\x20user','attackAnimationId1','_baseLineStack','ActSeq_Projectile_Icon','itemRect','HeIec','zKtFY','updateGrow','MP_Rate','concat','untlP','addOptionsCommand','StyleON','iwwoB','ParseActorNotetags','gGGBA','Exploited','command236','createString','fight','JzXqB','Game_Action_isForRandom','_tpbSceneChangeCacheActor','_displayBattleCoreTransitionErrorMsg','callOkHandler','call','actionEffect','isAnyoneInjectAnimating','drawItemImagePortraitStyle','ParseEnemyNotetags','OPcSQ','ActSeq_Animation_ChangeBattlePortrait','Scene_Battle_createAllWindows','list','message4','callUpdateHelp','WPfgK','itemEffectAddNormalState','becomeSTBExploited','friendsUnit','CXKok','MP_Flat','%1StartActionJS','attachSpritesToDistortionSprite','createActionSequenceProjectile','BattleDefeatJS','SwitchMissEvade','ShowCosts','vJJgJ','hue','battleOpacity','iWAxl','EmergeText','guardSkillId','applyCritical','_armorPenetration','updateStateIconSprite','scope','glitch','TpbActiveChangeEnabled','height','performCollapse','actorCommandWindowRect','isBattlerGrounded','_canLose','TLvBC','Scene_Battle_startActorCommandSelection','ReflectAnimation','shouldPopupDamage','invokeMagicReflection','statusText','makeTargetSprites','_skillIDs','registerDefeatedEnemy','SwitchCritical','createMiss','clearActiveWeaponSet','process_VisuMZ_BattleCore_DamageStyles','deathStateId','seqyN','adjustPosition','textAlign','status','_enemies','qbdey','Game_Action_apply','bitmapHeight','_indent','inputtingAction','ActSeq_Impact_Negative','rmfey','Game_Action_itemHit','EOaLD','WSzBR','slice','randomInt','rKQlu','commandAutoBattle','exit','4GebZRa','_tempBattler','_weaponImageId','lqeNc','_damages','VisuMZ_2_BattleSystemPTB','setSkill','WaitCount1','tOBaj','PostStartTurnJS','toLowerCase','ResetOffset','boxWidth','_handlers','isBuffAffected','startGrow','removeActor','CalcEscapeRaiseJS','isMeleeMultiTargetAction','trueRandomTarget','popBaseLine','ActSeq_Mechanics_PtbConvert','forceWeaponAnimation','notFocusValid','Scene_Battle_terminate','autoSelectLastSelected','DamageStyles','tpbCommandFight','AutoBattleMsg','clearActiveWeaponSlot','lwOWN','setupTextPopup','ActSeq_Movement_WaitForJump','_battlerHue','waitForFloat','kHdyc','ORmGY','BattleManager_checkBattleEnd','HomePosJS','battlerShadowScaleY','_targetHomeY','removeDamageSprite','CbbyT','singleSkill','Game_Enemy_transform','ActSeq_Mechanics_VariablePopup','makeTargetsBattleCore','AllowCollapse','OfwTf','DualWield','alterActionCostPTB','EnableDamageCap','alterCost','commandOptions','_battler','isMagicSkill','siuDk','_lastPluginCommandInterpreter','pdPww','undecided','XefyS','getStypeIdWithName','_item','ckxsl','iccNy','isEffecting','isCancelled','CommandAddOptions','ActionSequence','_surprise','updateAngleCalculations','QQFtI','hpAffected','isAlive','VisuMZ_3_ActSeqCamera','Direction','textWidth','ActionEnd','createCommandNameWindow','battleInjectAni','aMJls','evalDamageFormula','process_VisuMZ_BattleCore_BaseTroops','process_VisuMZ_BattleCore_jsFunctions','sBPrI','onGrowEnd','updateStaticSvBattlerFrames','isWaiting','TdIoi','bitmap','ShuffleArray','UGfAg','PICvk','Game_Enemy_setup','gaugeX','BattleManager_endBattle','Window_BattleEnemy_initialize','moveBattlerHomeDistance','updateAttachmentSprites','startJump','createEnemyNameContainer','Window_BattleLog_update','Game_Troop_expTotal','setupHpGaugeSprite','_opacityEasing','ActSeq_Movement_WaitForSpin','_homeY','GXNdb','updateCollapse','nameY','applyAngleChange','isOnCurrentMap','prepareCustomActionSequence','qyhwb','Game_Battler_onBattleStart','dORbE','indexOf','autoMeleeMultiTargetActionSet','_back1Sprite','WccyJ','juIqt','anchor','SLNuk','nmsmm','onMoveEnd','center','ParseArmorNotetags','clearFreezeMotion','CgoaE','battleProjectiles','drawItem','MaxLines','YtnQD','ActSeq_Movement_FaceDirection','CreateCommonEventKeys','EMcOI','adjustPosition_1for1','isSpriteVisible','animation','_windowLayer','parse','ParseAllNotetags','_targetSkewX','cWAdO','ActSeq_Set_TargetActionSet','uvicS','isBypassDamageCap','ActSeq_Weapon_ClearActiveWeapon','AS\x20USER','_onceParallelInterpreters','XzgLZ','ConvertActionSequenceTarget','_lastAction','makeActionListAutoAttack','DamageType%1','BattleManager_startTurn','linkSprite','_skewWholeDuration','aJLqi','ActSeq_Mechanics_ActionEffect','_lastEnemy','DefaultHardCap','getLastPluginCommandInterpreter','maxLines','isAutoBattleCommandAdded','requestFauxAnimation','applyResultSwitches','HpGaugeOffsetY','createStateSprite','displayMpDamage','usePremadeActionSequence','BattleManager_processVictory','makeDamageValue','Scene_Battle_update','swing','hOxzA','MIN_SAFE_INTEGER','ULsTm','lastCommandSymbol','sLZUk','Weapon-%1-%2','getFullActionsPTB','eiHhx','FrontViewSelect','AntiTintUiElements','anchorY','updateBitmap','1035608EiDzJp','Sprite_Enemy_createStateIconSprite','message2','YFGqO','isOptionsCommandAdded','WeaponTypeID','adjustFlippedBattlefield','Sprite_Actor_updateBitmap','_floatWholeDuration','OzahP','ActSeq_Animation_ActionAnimation','NVhco','skillItemWindowRectMiddle','enemy','setActiveWeaponSet','CVnDc','putActiveBattlerOnTop','OffsetAdjust','TIpYt','uiMenuStyle','Game_Battler_performDamage','Name','Slot','BattleManager_selectNextCommand','VisuMZ_2_BattleSystemBTB','_weaponSprite','randomTargets','DisplayAction','mpHealingFmt','ActSeq_Inject_AnimationStart','weaponTypes','svAnchorX','_visualHpGauge_JustDied','missle','startAction','coreEngineRepositionEnemies','stbGainInstant','_targetOpacity','jsScaleToFit','nrMyd','Mechanics','ivkrz','cbRdD','performReflection','Window_Options_addGeneralOptions','updatePosition','McZVq','getItemDamageAmountLabelOriginal','changeCtbCastTime','CriticalHitRateJS','invokeAction','updateUiContainerPosition','_currentActor','_angleDuration','boxHeight','Window_BattleLog_displayCritical','drawBackgroundRect','isCTB','ARRAYSTRUCT','extendTroopMembers','ShowPortraits','wZnJe','ShowCurrentState','kEtSe','displayStartMessages','isFrameVisible','actorCommandCancelTPB','YjbbT','getCommonEventIdWithName','EgiTU','Sprite_Actor_createStateSprite','Spriteset_Battle_updateActors','jump','cWQAK','Game_Battler_forceAction','Game_Interpreter_PluginCommand','_skewY','setBattler','BattleManager_inputtingAction','PreStartBattleJS','OverallFormulaJS','CurrentTurn','setBattleSkew','_shadowScaleX','Game_BattlerBase_canGuard','process_VisuMZ_BattleCore_Action_Notetags','arPenFlat','Window_BattleLog_performMagicEvasion','updateMotionCount','CriticalColor','WaitForAnimation','addCommand','ActSeq_Mechanics_StbRemoveExcessActions','kfHUn','sideview_ui','updateVisibility','TmZgt','_borderPortraitDuration','Window_BattleLog_performEvasion','Opacity','drawItemImageListStyle','isSceneChanging','DsDEM','_preBattleCommonEvent','onBattleEndBattleCore','ActSeq_Angle_Reset','hRxHj','bxqqT','code','BattleManager_onEscapeSuccess','attackStatesRate','_makeFontNameText','right','ActSeq_Movement_MoveToTarget','windowskin','isPartyCommandWindowDisabled','createDamageContainer','loadEnemy','Cikqu','setHue','repeats','finalizeScale','CwJFx','moveToStartPositionBattleCore','symbol','freezeMotion','DTB','uJtqo','oThNP','zunAK','<CENTER>%1','MgKpi','JMoBf','yFuhO','displayItemMessage','updateFloat','ActSeq_Movement_WaitForScale','VuTgB','qRKMP','ShowCounter','contains','GkLUe','AnchorX','bind','_jumpHeight','yXFGN','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','hpHealingFmt','startOpacity','startDamagePopup','autoBattleStart','_animationSprites','isBusy','itemHeight','battleSpriteSkew','PostDamage%1JS','ActSeq_Zoom_Scale','canGuard','zoomDuration','GuardFormulaJS','cpYjD','HP_Rate','actorCommandSingleSkill','ActSeq_Mechanics_HpMpTp','DemSv','XVJsS','damageContainer','MDdgy','PAEBC','SSrfL','AsTarget','bpeZI','noSimilarSTypes','HitFlat','FullActions','MAXMP','autoBattleStyle','STFDR','resizeWindowXPStyle','DistanceX','opacity','alignBattleCoreDamageSprite','Aidkb','PreStartActionJS','setVisibleUI','SRKjM','ActSeq_BattleLog_DisplayAction','updateTargetPosition','JYDoL','BARE\x20HANDS','clamp','dragonbonesData','ATK','HelpItem'];_0x46f7=function(){return _0x1c8b04;};return _0x46f7();}Sprite_HpGauge[_0x45cef8(0x3cf)]=Object['create'](Sprite_Gauge['prototype']),Sprite_HpGauge[_0x45cef8(0x3cf)][_0x45cef8(0x8e2)]=Sprite_HpGauge,Sprite_HpGauge['prototype'][_0x45cef8(0x754)]=function(){const _0x49a904=_0x45cef8;Sprite_Gauge['prototype'][_0x49a904(0x754)]['call'](this);},Sprite_HpGauge[_0x45cef8(0x3cf)][_0x45cef8(0xaaf)]=function(){return 0x0;},Sprite_HpGauge[_0x45cef8(0x3cf)][_0x45cef8(0xcf6)]=function(){const _0x39b20d=_0x45cef8;this[_0x39b20d(0xaaa)]['clear']();const _0x1d16e8=this[_0x39b20d(0x677)]();!isNaN(_0x1d16e8)&&this['drawGauge']();};function _0x2a1e(_0x5b9acd,_0x5c613a){const _0x46f72c=_0x46f7();return _0x2a1e=function(_0x2a1e43,_0x290ed2){_0x2a1e43=_0x2a1e43-0x1d6;let _0x4ad6f3=_0x46f72c[_0x2a1e43];return _0x4ad6f3;},_0x2a1e(_0x5b9acd,_0x5c613a);}function Sprite_EnemyName(){const _0x11d2f1=_0x45cef8;this[_0x11d2f1(0x754)](...arguments);}Sprite_EnemyName['prototype']=Object['create'](Sprite_Name[_0x45cef8(0x3cf)]),Sprite_EnemyName[_0x45cef8(0x3cf)][_0x45cef8(0x8e2)]=Sprite_EnemyName,Sprite_EnemyName[_0x45cef8(0x3cf)]['initialize']=function(){const _0x3a520a=_0x45cef8;Sprite_Name[_0x3a520a(0x3cf)][_0x3a520a(0x754)]['call'](this),this['createAttachedSprites']();},Sprite_EnemyName[_0x45cef8(0x3cf)][_0x45cef8(0x55a)]=function(){const _0x2aca4e=_0x45cef8;Sprite_Name['prototype'][_0x2aca4e(0x55a)][_0x2aca4e(0xa07)](this),this[_0x2aca4e(0xbc0)]=0x0,this[_0x2aca4e(0x87d)]=null,this[_0x2aca4e(0xaca)]['x']=0.5,this[_0x2aca4e(0xaca)]['y']=0x0;},Sprite_EnemyName[_0x45cef8(0x3cf)]['createAttachedSprites']=function(){const _0x47289e=_0x45cef8;if(VisuMZ[_0x47289e(0x6c0)][_0x47289e(0x658)][_0x47289e(0xc97)]['NameAttachStateIcon']){if(_0x47289e(0x903)===_0x47289e(0x903))this[_0x47289e(0x928)]=new Sprite_StateIcon(),this[_0x47289e(0x5b6)](this[_0x47289e(0x928)]);else{if(!_0x268988[_0x47289e(0xc83)]())return;_0x1cccdf[_0x47289e(0x8b3)](_0x6a01d4,_0x550fec);const _0x42326e=_0x2e1b9e['getLastPluginCommandInterpreter'](),_0x579d90=_0x48a7b9['CreateActionSequenceTargets'](_0x4f50b6[_0x47289e(0x2d1)]),_0x490be2=_0xdf9827[_0x47289e(0x871)],_0x93aa10=_0x53271c[_0x47289e(0xc9b)];if(!_0x42326e)return;_0x5ef985[_0x47289e(0xc5f)](_0x579d90,_0x490be2,_0x93aa10);if(_0x288f21[_0x47289e(0xb66)])_0x42326e[_0x47289e(0x625)](_0x47289e(0x227));}}},Sprite_EnemyName[_0x45cef8(0x3cf)]['bitmapWidth']=function(){const _0x4ed002=_0x45cef8;return Graphics[_0x4ed002(0xa5d)];},Sprite_EnemyName[_0x45cef8(0x3cf)]['bitmapHeight']=function(){const _0x2a9902=_0x45cef8;return this['_lineHeight']=this[_0x2a9902(0x2ba)]||Window_Base[_0x2a9902(0x3cf)]['lineHeight']()||0x24,this[_0x2a9902(0x2ba)]*0x4;},Sprite_EnemyName[_0x45cef8(0x3cf)]['fontSize']=function(){const _0xd59d89=_0x45cef8;return VisuMZ[_0xd59d89(0x6c0)][_0xd59d89(0x658)]['Enemy'][_0xd59d89(0x9ab)]||$gameSystem[_0xd59d89(0x389)]();},Sprite_EnemyName[_0x45cef8(0x3cf)][_0x45cef8(0xaed)]=function(_0x28cbe7){const _0x4cd750=_0x45cef8;this[_0x4cd750(0x87d)]=_0x28cbe7;},Sprite_EnemyName['prototype'][_0x45cef8(0x3b2)]=function(){const _0x149436=_0x45cef8;Sprite_Name[_0x149436(0x3cf)][_0x149436(0x3b2)]['call'](this),this[_0x149436(0x975)](),this[_0x149436(0xb39)](),this[_0x149436(0x8f4)](),this[_0x149436(0x6c6)]();},Sprite_EnemyName[_0x45cef8(0x3cf)][_0x45cef8(0xcf6)]=function(){const _0x750cbe=_0x45cef8;this['_cacheTextWidth']=undefined;const _0x51144b=this[_0x750cbe(0xd00)](),_0x49cb82=this['bitmapWidth'](),_0x2f696e=Window_Base['prototype']['lineHeight']();this[_0x750cbe(0x460)](),this[_0x750cbe(0xaaa)][_0x750cbe(0x6db)](),this[_0x750cbe(0xaaa)]['drawText'](_0x51144b,0x0,0x0,_0x49cb82,_0x2f696e,_0x750cbe(0xace));},Sprite_EnemyName['prototype'][_0x45cef8(0x975)]=function(){const _0x97b134=_0x45cef8;if(!this['_linkedSprite'])return;this['_battler']!==this[_0x97b134(0x87d)][_0x97b134(0xa87)]&&this[_0x97b134(0x74e)](this[_0x97b134(0x87d)][_0x97b134(0xa87)]);},Sprite_EnemyName[_0x45cef8(0x3cf)]['updatePosition']=function(){const _0x2425f0=_0x45cef8;if(!this[_0x2425f0(0x87d)])return;this['_lineHeight']=this[_0x2425f0(0x2ba)]||Window_Base['prototype'][_0x2425f0(0x473)](),this['x']=Math[_0x2425f0(0x365)](this[_0x2425f0(0x87d)][_0x2425f0(0x3c6)]),this['y']=Math['round'](this[_0x2425f0(0x87d)]['_baseY']-this['_lineHeight']*0.5);const _0x2e5ad6=VisuMZ[_0x2425f0(0x6c0)][_0x2425f0(0x658)]['Enemy'];this['x']+=Math[_0x2425f0(0x365)](_0x2e5ad6['NameOffsetX']||0x0),this['y']+=Math[_0x2425f0(0x365)](_0x2e5ad6[_0x2425f0(0x612)]||0x0);},Sprite_EnemyName[_0x45cef8(0x3cf)][_0x45cef8(0x8f4)]=function(){const _0x3497a8=_0x45cef8;this[_0x3497a8(0xa26)]();},Sprite_EnemyName[_0x45cef8(0x3cf)][_0x45cef8(0xa26)]=function(){const _0x52c1b7=_0x45cef8;if(!this[_0x52c1b7(0x928)])return;this[_0x52c1b7(0xa87)]!==this[_0x52c1b7(0x928)][_0x52c1b7(0xa87)]&&(_0x52c1b7(0x555)===_0x52c1b7(0x555)?this[_0x52c1b7(0x928)][_0x52c1b7(0x74e)](this[_0x52c1b7(0xa87)]):this['_forcedBattleLayout']=_0x52c1b7(0x991));const _0xcac5c=this['textWidth']();this[_0x52c1b7(0x2ba)]=this[_0x52c1b7(0x2ba)]||Window_Base[_0x52c1b7(0x3cf)][_0x52c1b7(0x473)](),this[_0x52c1b7(0x928)]['x']=Math[_0x52c1b7(0x365)]((_0xcac5c+ImageManager['iconWidth'])/0x2)+0x8,this[_0x52c1b7(0x928)]['y']=this['_lineHeight']/0x2;const _0x1160f9=VisuMZ[_0x52c1b7(0x6c0)][_0x52c1b7(0x658)][_0x52c1b7(0xc97)];this[_0x52c1b7(0x928)]['x']+=_0x1160f9[_0x52c1b7(0x86d)]||0x0,this['_stateIconSprite']['y']+=_0x1160f9['AttachStateOffsetY']||0x0;},Sprite_EnemyName[_0x45cef8(0x3cf)][_0x45cef8(0x6c6)]=function(){const _0x5f3c86=_0x45cef8,_0x46394f=this[_0x5f3c86(0x5a3)]();if(_0x46394f&&this[_0x5f3c86(0xbc0)]<0xff)this['opacity']+=0x10;else!_0x46394f&&this[_0x5f3c86(0xbc0)]>0x0&&(this[_0x5f3c86(0xbc0)]-=0x10);},Sprite_EnemyName[_0x45cef8(0x3cf)][_0x45cef8(0x5a3)]=function(){const _0xd25690=_0x45cef8;if(this[_0xd25690(0x2f9)]())return![];else{if(!this[_0xd25690(0xa87)]){if('Qgxsb'===_0xd25690(0xc33))_0x3e6327[_0xd25690(0xd00)]=_0x14717b(_0xd5ab3e['$1']);else return![];}else{if(this['_battler']['isDead']())return![];else{if(!this['_battler'][_0xd25690(0x608)]())return![];else{if(this['compatibilityVisible']()){if(_0xd25690(0xac8)!==_0xd25690(0xac8))_0x12ca75[_0xd25690(0x6c0)]['Settings']['HpGauge']['ShowEnemyGauge']&&this['createHpGaugeSprite'](),_0x59bb53['BattleCore'][_0xd25690(0xb0d)][_0xd25690(0xa07)](this);else return!![];}else{if(this['isAlwaysVisible']()){if('XucMB'===_0xd25690(0x8fe)){if(_0x79363c[_0xd25690(0x6c0)]['Settings'][_0xd25690(0xcbb)][_0xd25690(0x82d)])return _0xcc1195[_0xd25690(0x6c0)]['Settings'][_0xd25690(0xcbb)][_0xd25690(0x82d)][_0xd25690(0xa07)](this);return _0x1439c9[_0xd25690(0x6c0)]['Scene_Battle_logWindowRect'][_0xd25690(0xa07)](this);}else return!![];}else{if(this[_0xd25690(0x7aa)]()){if(_0xd25690(0xc32)===_0xd25690(0xc32))return!![];else _0x5359fb[_0xd25690(0xbe8)](),_0x5b375a['_autoBattle']=![],_0x53b83c['clear'](),_0x559b35[_0xd25690(0x6db)]();}else{if(this[_0xd25690(0xbc0)]>0x0){if('JFxbZ'!=='gdKMh')return![];else{const _0x673251=_0x2ccd4c[_0x2cc16e];if(!_0x673251)return![];if(_0x673251[_0xd25690(0xa0f)][_0xd25690(0xcc5)]<=0x1)return![];return!![];}}}}}}}}}},Sprite_EnemyName[_0x45cef8(0x3cf)][_0x45cef8(0x2f9)]=function(){const _0x1eb9d0=_0x45cef8;return VisuMZ['BattleCore']['Settings'][_0x1eb9d0(0xc97)][_0x1eb9d0(0x5b2)];},Sprite_EnemyName['prototype'][_0x45cef8(0x7a9)]=function(){return![];},Sprite_EnemyName[_0x45cef8(0x3cf)]['isAlwaysVisible']=function(){const _0xbe07fb=_0x45cef8;return VisuMZ['BattleCore'][_0xbe07fb(0x658)][_0xbe07fb(0xc97)][_0xbe07fb(0xcbe)];},Sprite_EnemyName[_0x45cef8(0x3cf)][_0x45cef8(0x7aa)]=function(){const _0x5b2762=_0x45cef8;if(VisuMZ['BattleCore']['Settings'][_0x5b2762(0xc97)][_0x5b2762(0x904)])return this['_battler']['isSelected']();else{if(_0x5b2762(0x860)!==_0x5b2762(0xa0c))return SceneManager[_0x5b2762(0x9e2)][_0x5b2762(0x282)]&&SceneManager[_0x5b2762(0x9e2)][_0x5b2762(0x282)][_0x5b2762(0x6ea)]&&SceneManager['_scene'][_0x5b2762(0x282)][_0x5b2762(0xa41)][_0x5b2762(0x2b1)](this[_0x5b2762(0xa87)]);else _0x5b041e['BattleCore']['ParseArmorNotetags']['call'](this,_0x3d6830);}},Sprite_EnemyName[_0x45cef8(0x3cf)][_0x45cef8(0xa9d)]=function(){const _0xab6c2d=_0x45cef8;if(!this[_0xab6c2d(0xa87)])return 0x0;if(this[_0xab6c2d(0x901)])return this[_0xab6c2d(0x901)];const _0x24d365=this[_0xab6c2d(0xd00)]();return this['setupFont'](),this[_0xab6c2d(0x901)]=this['bitmap'][_0xab6c2d(0x5ee)](_0x24d365)||0x1,this[_0xab6c2d(0x901)];},VisuMZ['BattleCore'][_0x45cef8(0x323)]=Sprite_Battleback[_0x45cef8(0x3cf)][_0x45cef8(0xa3e)],Sprite_Battleback['prototype'][_0x45cef8(0xa3e)]=function(){const _0x511ffa=_0x45cef8,_0x2aebb0=VisuMZ[_0x511ffa(0x6c0)][_0x511ffa(0x658)]['BattlebackScale'];if(!_0x2aebb0)return VisuMZ[_0x511ffa(0x6c0)][_0x511ffa(0x323)][_0x511ffa(0xa07)](this);const _0x631c30=String(_0x2aebb0[_0x511ffa(0x3ff)])||'MZ';switch(_0x631c30){case'MZ':VisuMZ['BattleCore'][_0x511ffa(0x323)][_0x511ffa(0xa07)](this);break;case'1:1':this[_0x511ffa(0xad9)]();break;case _0x511ffa(0x651):this[_0x511ffa(0x5d6)]();break;case'ScaleDown':this['adjustPosition_ScaleDown']();break;case'ScaleUp':this[_0x511ffa(0xce0)]();break;}},Sprite_Battleback[_0x45cef8(0x3cf)][_0x45cef8(0xad9)]=function(){const _0x9ff446=_0x45cef8,_0x3ba4bf=VisuMZ['BattleCore']['Settings'][_0x9ff446(0x708)];if(_0x3ba4bf&&_0x3ba4bf[_0x9ff446(0x7af)]){if('tFzSc'===_0x9ff446(0x301))return _0x3ba4bf[_0x9ff446(0x7af)][_0x9ff446(0xa07)](this);else this[_0x9ff446(0xc16)](_0x2f8f28['weaponImageId']);}this[_0x9ff446(0x639)]=Graphics['width'],this[_0x9ff446(0xa2a)]=Graphics[_0x9ff446(0xa2a)];const _0x193151=0x1;this['scale']['x']=_0x193151,this[_0x9ff446(0x4bb)]['y']=_0x193151,this['x']=0x0,this['y']=0x0;},Sprite_Battleback['prototype'][_0x45cef8(0x5d6)]=function(){const _0x40c36a=_0x45cef8,_0x379e4d=VisuMZ['BattleCore'][_0x40c36a(0x658)][_0x40c36a(0x708)];if(_0x379e4d&&_0x379e4d[_0x40c36a(0xb32)]){if(_0x40c36a(0x937)!==_0x40c36a(0x937)){if(!_0x15c8e2)return;if(!this[_0x40c36a(0x856)])return;if(_0x30a21a[_0x40c36a(0x98a)]()){}else{if(_0x66124['isEnemy']()){if(this[_0x40c36a(0x8e2)]===_0x205fa7&&!_0x4f9e01[_0x40c36a(0x7c8)]())return;}}this['_hpGaugeSprite']['setup'](_0x4448cb,'hp');}else return _0x379e4d[_0x40c36a(0xb32)]['call'](this);}this[_0x40c36a(0x639)]=Graphics[_0x40c36a(0x639)],this['height']=Graphics[_0x40c36a(0xa2a)];const _0x52a226=this['width']/this[_0x40c36a(0xaaa)][_0x40c36a(0x639)],_0x273b7a=this['height']/this[_0x40c36a(0xaaa)][_0x40c36a(0xa2a)],_0x59fd0f=Math[_0x40c36a(0x2ce)](_0x52a226,_0x273b7a);this[_0x40c36a(0x4bb)]['x']=_0x59fd0f,this['scale']['y']=_0x59fd0f,this['x']=(Graphics['width']-this[_0x40c36a(0x639)])/0x2,this['y']=Graphics['height']-this[_0x40c36a(0xa2a)];},Sprite_Battleback[_0x45cef8(0x3cf)]['adjustPosition_ScaleDown']=function(){const _0x347d37=_0x45cef8,_0x41552f=VisuMZ[_0x347d37(0x6c0)][_0x347d37(0x658)][_0x347d37(0x708)];if(_0x41552f&&_0x41552f['jsScaleDown']){if('hhgqN'!==_0x347d37(0x71f))return _0x41552f[_0x347d37(0x2b4)]['call'](this);else this[_0x347d37(0x7f7)]=new _0x5119bf(),this[_0x347d37(0x7f7)][_0x347d37(0x9ce)]=[new _0x53ba4c[(_0x347d37(0x9ce))]['AlphaFilter']()],this['_cursorArea'][_0x347d37(0x568)]=new _0x3299f5(),this[_0x347d37(0x7f7)][_0x347d37(0x483)](this[_0x347d37(0x989)],this[_0x347d37(0x989)]),this[_0x347d37(0x5b6)](this[_0x347d37(0x7f7)]);}this[_0x347d37(0x639)]=Graphics[_0x347d37(0x639)],this[_0x347d37(0xa2a)]=Graphics[_0x347d37(0xa2a)];const _0x5099dd=Math[_0x347d37(0x582)](0x1,this['width']/this[_0x347d37(0xaaa)]['width']),_0x22af51=Math['min'](0x1,this[_0x347d37(0xa2a)]/this['bitmap'][_0x347d37(0xa2a)]),_0x4afe73=Math['max'](_0x5099dd,_0x22af51);this[_0x347d37(0x4bb)]['x']=_0x4afe73,this[_0x347d37(0x4bb)]['y']=_0x4afe73,this['x']=(Graphics[_0x347d37(0x639)]-this[_0x347d37(0x639)])/0x2,this['y']=Graphics[_0x347d37(0xa2a)]-this[_0x347d37(0xa2a)];},Sprite_Battleback['prototype'][_0x45cef8(0xce0)]=function(){const _0xac5c3e=_0x45cef8,_0x37f6cf=VisuMZ[_0xac5c3e(0x6c0)][_0xac5c3e(0x658)][_0xac5c3e(0x708)];if(_0x37f6cf&&_0x37f6cf['jsScaleUp'])return _0x37f6cf[_0xac5c3e(0x28f)][_0xac5c3e(0xa07)](this);this['width']=Graphics[_0xac5c3e(0x639)],this[_0xac5c3e(0xa2a)]=Graphics[_0xac5c3e(0xa2a)];const _0xec78d2=Math[_0xac5c3e(0x2ce)](0x1,this['width']/this['bitmap']['width']),_0x438b2a=Math[_0xac5c3e(0x2ce)](0x1,this[_0xac5c3e(0xa2a)]/this[_0xac5c3e(0xaaa)][_0xac5c3e(0xa2a)]),_0xd9b264=Math[_0xac5c3e(0x2ce)](_0xec78d2,_0x438b2a);this['scale']['x']=_0xd9b264,this[_0xac5c3e(0x4bb)]['y']=_0xd9b264,this['x']=(Graphics[_0xac5c3e(0x639)]-this['width'])/0x2,this['y']=Graphics[_0xac5c3e(0xa2a)]-this[_0xac5c3e(0xa2a)];},Spriteset_Battle[_0x45cef8(0x3d2)]=VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x658)][_0x45cef8(0x5be)][_0x45cef8(0xb09)]??!![],Spriteset_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x79b)]=function(){const _0x3277e7=_0x45cef8;if(!$gameSystem[_0x3277e7(0xc02)]())return![];return![];},Spriteset_Battle[_0x45cef8(0x3cf)][_0x45cef8(0xbe7)]=function(){return 0x0;},Spriteset_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x7f1)]=function(){return 0x0;},VisuMZ['BattleCore'][_0x45cef8(0x8cb)]=Spriteset_Battle['prototype'][_0x45cef8(0x3f7)],Spriteset_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x3f7)]=function(){const _0x4c7953=_0x45cef8;VisuMZ[_0x4c7953(0x6c0)][_0x4c7953(0x8cb)][_0x4c7953(0xa07)](this),this[_0x4c7953(0x489)](),this['createEnemyNames']();},VisuMZ['BattleCore']['Spriteset_Battle_update']=Spriteset_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x3b2)],Spriteset_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x3b2)]=function(){const _0x50dfaf=_0x45cef8;VisuMZ[_0x50dfaf(0x6c0)]['Spriteset_Battle_update'][_0x50dfaf(0xa07)](this),this[_0x50dfaf(0xb3f)](),this[_0x50dfaf(0x62d)]();},Spriteset_Battle[_0x45cef8(0x3cf)]['createWeather']=function(){const _0x322777=_0x45cef8;this['_weather']=new Weather(),this[_0x322777(0x69f)][_0x322777(0x5b6)](this[_0x322777(0x5a1)]);},Spriteset_Battle['prototype'][_0x45cef8(0x62d)]=function(){const _0xd2f5be=_0x45cef8;this[_0xd2f5be(0x5a1)][_0xd2f5be(0x4cf)]=$gameScreen[_0xd2f5be(0xbd4)](),this[_0xd2f5be(0x5a1)]['power']=$gameScreen[_0xd2f5be(0xc20)]();},Game_Interpreter['prototype'][_0x45cef8(0x9ff)]=function(_0x5cedc){const _0x550893=_0x45cef8;$gameScreen['changeWeather'](_0x5cedc[0x0],_0x5cedc[0x1],_0x5cedc[0x2]);if(_0x5cedc[0x3])this[_0x550893(0xcfe)](_0x5cedc[0x2]);return!![];},VisuMZ['BattleCore'][_0x45cef8(0x68a)]=Game_Interpreter[_0x45cef8(0x3cf)][_0x45cef8(0x46e)],Game_Interpreter['prototype'][_0x45cef8(0x46e)]=function(_0x2afda9){const _0x14b25c=_0x45cef8;if(SceneManager['isSceneBattle']())return SceneManager[_0x14b25c(0x9e2)][_0x14b25c(0x78d)][_0x14b25c(0x6d2)](_0x2afda9[0x0],_0x2afda9[0x1]),!![];else{if(_0x14b25c(0xb99)!==_0x14b25c(0x5a8))return VisuMZ[_0x14b25c(0x6c0)][_0x14b25c(0x68a)][_0x14b25c(0xa07)](this,_0x2afda9);else this['autoBattleAtStart']=_0x4c1baa[_0x14b25c(0xccb)];}},Spriteset_Battle[_0x45cef8(0x3cf)]['updateBattlebackBitmap']=function(_0x118016,_0x35dead){const _0x5b768a=_0x45cef8;_0x118016[_0x5b768a(0xaaa)]=_0x35dead;},Spriteset_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x6d2)]=function(_0x2ded5a,_0x54ba0c){const _0x584a2e=_0x45cef8;_0x2ded5a=_0x2ded5a||'',_0x54ba0c=_0x54ba0c||'';_0x2ded5a===''&&_0x54ba0c===''&&(_0x2ded5a=this[_0x584a2e(0xac7)][_0x584a2e(0x644)](),_0x54ba0c=this[_0x584a2e(0x47b)][_0x584a2e(0xc3f)]());const _0x2876b1=ImageManager[_0x584a2e(0xc2a)](_0x2ded5a),_0x258e73=ImageManager[_0x584a2e(0x591)](_0x54ba0c);_0x2876b1['addLoadListener'](this[_0x584a2e(0xcb9)][_0x584a2e(0xb9b)](this,this[_0x584a2e(0xac7)],this[_0x584a2e(0x47b)],_0x2876b1,_0x258e73));},Spriteset_Battle[_0x45cef8(0x3cf)][_0x45cef8(0xcb9)]=function(_0x4f1f66,_0x17d131,_0x6d9dfe,_0x311451){const _0x5260bf=_0x45cef8;_0x311451[_0x5260bf(0x879)](this[_0x5260bf(0x6c3)][_0x5260bf(0xb9b)](this,_0x4f1f66,_0x17d131,_0x6d9dfe,_0x311451));},Spriteset_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x6c3)]=function(_0x5caedd,_0x147e33,_0x34f02a,_0x14773d){const _0x2932e7=_0x45cef8;_0x5caedd[_0x2932e7(0xaaa)]=_0x34f02a,_0x147e33[_0x2932e7(0xaaa)]=_0x14773d,_0x5caedd['adjustPosition'](),_0x147e33['adjustPosition']();},VisuMZ['BattleCore'][_0x45cef8(0x1fd)]=Spriteset_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x7d8)],Spriteset_Battle[_0x45cef8(0x3cf)]['createBattleField']=function(){const _0x5cbbe0=_0x45cef8;VisuMZ['BattleCore'][_0x5cbbe0(0x1fd)][_0x5cbbe0(0xa07)](this),this[_0x5cbbe0(0xc90)]();},Spriteset_Battle[_0x45cef8(0x3cf)]['createBattleFieldBattleCore']=function(){const _0x183033=_0x45cef8;this[_0x183033(0x3e1)](),this[_0x183033(0x27b)](),this[_0x183033(0x44e)](),this[_0x183033(0xb80)](),this['adjustFlippedBattlefield']();},Spriteset_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x3e1)]=function(){const _0x22a026=_0x45cef8;this[_0x22a026(0x2a5)]=new Sprite(),this[_0x22a026(0x69f)][_0x22a026(0x5b6)](this[_0x22a026(0x2a5)]);},Spriteset_Battle['prototype'][_0x45cef8(0x44e)]=function(){const _0x26b249=_0x45cef8;this[_0x26b249(0x292)]=new Sprite(),Spriteset_Battle[_0x26b249(0x3d2)]?this['addChild'](this[_0x26b249(0x292)]):this[_0x26b249(0x69f)][_0x26b249(0x5b6)](this[_0x26b249(0x292)]);},Spriteset_Battle['prototype'][_0x45cef8(0xb80)]=function(){const _0xa3b104=_0x45cef8;this['_damageContainer']=new Sprite(),this['_damageContainer']['x']=this[_0xa3b104(0x69f)]['x'],this['_damageContainer']['y']=this['_battleField']['y'],this['addChild'](this[_0xa3b104(0x63c)]);},Spriteset_Battle[_0x45cef8(0x3cf)][_0x45cef8(0xb12)]=function(){const _0x495643=_0x45cef8;if(!this['isFlipped']())return;this[_0x495643(0x2a5)][_0x495643(0x4bb)]['x']=-0x1,this[_0x495643(0x2a5)]['x']=this[_0x495643(0x69f)][_0x495643(0x639)],this[_0x495643(0x5d8)]['scale']['x']=-0x1,this[_0x495643(0x5d8)]['x']=this[_0x495643(0x69f)][_0x495643(0x639)],this[_0x495643(0x292)][_0x495643(0x4bb)]['x']=-0x1,this[_0x495643(0x292)]['x']=this['_battleField'][_0x495643(0x639)],this[_0x495643(0x63c)][_0x495643(0x4bb)]['x']=-0x1,this['_damageContainer']['x']=this[_0x495643(0x69f)]['x']+this[_0x495643(0x69f)]['width'];},Spriteset_Battle['prototype']['createEnemies']=function(){const _0x4391b7=_0x45cef8;if(Imported[_0x4391b7(0x22d)]&&this[_0x4391b7(0xb2f)]()){if(_0x4391b7(0x335)===_0x4391b7(0x335))this[_0x4391b7(0x9d0)]();else{if(this[_0x4391b7(0x3f1)])return this[_0x4391b7(0x3f1)];return this['_battleLayoutStyle']=_0x2a8ae6[_0x4391b7(0x9e2)][_0x4391b7(0x6e8)](),this['_battleLayoutStyle'];}}const _0x422dc0=$gameTroop[_0x4391b7(0x666)](),_0x322f58=[];for(const _0xde8256 of _0x422dc0){_0x4391b7(0x8d7)===_0x4391b7(0x8d7)?_0x322f58[_0x4391b7(0x287)](new Sprite_Enemy(_0xde8256)):_0x1fe4ba[_0x4391b7(0x52b)](_0x50d7e5);}_0x322f58['sort'](this['compareEnemySprite'][_0x4391b7(0xb9b)](this));for(const _0x1d6c2e of _0x322f58){if(_0x4391b7(0xc81)===_0x4391b7(0xa4b))return _0x5740c8['BattleCore'][_0x4391b7(0x9af)][_0x4391b7(0xa07)](this,_0x141cc5);else this[_0x4391b7(0x2a5)][_0x4391b7(0x5b6)](_0x1d6c2e);}this[_0x4391b7(0xc1e)]=_0x322f58;},Spriteset_Battle['prototype'][_0x45cef8(0x831)]=function(){const _0x308553=_0x45cef8;this['_actorSprites']=[];for(let _0xe76177=0x0;_0xe76177<$gameParty[_0x308553(0x822)]();_0xe76177++){const _0x20a07c=$gameParty['battleMembers']()[_0xe76177],_0xa9a140=new Sprite_Actor();_0xa9a140[_0x308553(0xb87)](_0x20a07c),_0xa9a140['setBattler'](_0x20a07c),_0xa9a140[_0x308553(0x3b2)](),this[_0x308553(0x504)][_0x308553(0x287)](_0xa9a140),this[_0x308553(0x2a5)]['addChild'](_0xa9a140);}},Spriteset_Battle[_0x45cef8(0x3cf)]['createAnimationSprite']=function(_0xfc94ff,_0x5dff63,_0x4a3202,_0x1e6f45){const _0x3da714=_0x45cef8,_0x508cb5=this[_0x3da714(0x513)](_0x5dff63),_0x209dfc=new(_0x508cb5?Sprite_AnimationMV:Sprite_Animation)(),_0x15bb38=this[_0x3da714(0xa35)](_0xfc94ff);this['animationShouldMirror'](_0xfc94ff[0x0])&&(_0x4a3202=!_0x4a3202),_0x209dfc['targetObjects']=_0xfc94ff,_0x209dfc['setup'](_0x15bb38,_0x5dff63,_0x4a3202,_0x1e6f45),this[_0x3da714(0x9a8)](_0x209dfc);},Spriteset_Battle['prototype'][_0x45cef8(0x9a8)]=function(_0x457d4b){const _0x5cc046=_0x45cef8;this['isAnimationShownOnBattlePortrait'](_0x457d4b)?(this['battleStatusWindowAnimationContainer']()[_0x5cc046(0x5b6)](_0x457d4b),_0x457d4b[_0x5cc046(0x74b)]=!![]):this['_animationContainer'][_0x5cc046(0x5b6)](_0x457d4b),this['_animationSprites'][_0x5cc046(0x287)](_0x457d4b);},Spriteset_Battle['prototype']['isAnimationShownOnBattlePortrait']=function(_0x47b228){const _0x380ed0=_0x45cef8;if(!_0x47b228)return![];if(!_0x47b228[_0x380ed0(0x50c)])return![];if(!_0x47b228[_0x380ed0(0xcfd)][0x0])return![];if(_0x47b228[_0x380ed0(0xcfd)][0x0][_0x380ed0(0x98a)]&&!_0x47b228[_0x380ed0(0xcfd)][0x0][_0x380ed0(0x98a)]())return![];if($gameSystem[_0x380ed0(0xc02)]())return![];if(!this[_0x380ed0(0x7b3)]())return![];if(_0x47b228[_0x380ed0(0x8e2)]===Sprite_Animation){if(_0x380ed0(0xc68)===_0x380ed0(0x293)){const _0xe8547b=this[_0x380ed0(0x8f9)](),_0x1a49be=_0xe8547b[0x0]?_0xe8547b[0x0]['wtypeId']:0x0;return _0x22cb44[_0x380ed0(0x96e)][_0x1a49be];}else{if(_0x47b228['_animation'][_0x380ed0(0x714)]!==0x0)return![];}}else{if(_0x47b228['constructor']===Sprite_AnimationMV){if(_0x47b228['_animation'][_0x380ed0(0xc03)]===0x3)return![];}}return!![];const _0x406d02=Window_BattleStatus[_0x380ed0(0x3cf)]['battleLayoutStyle']();return['xp','portrait'][_0x380ed0(0xb98)](_0x406d02);},Spriteset_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x7b3)]=function(){const _0x1bf5f2=_0x45cef8;if(!SceneManager[_0x1bf5f2(0x9e2)])return null;if(!SceneManager[_0x1bf5f2(0x9e2)][_0x1bf5f2(0x350)])return null;if(!SceneManager['_scene']['_statusWindow']['_effectsContainer'])return null;return SceneManager[_0x1bf5f2(0x9e2)][_0x1bf5f2(0x350)][_0x1bf5f2(0x686)];},Spriteset_Battle[_0x45cef8(0x3cf)]['removeAnimation']=function(_0x505fc6){const _0x9d0162=_0x45cef8;this[_0x9d0162(0x37e)](_0x505fc6);for(const _0x12dc7b of _0x505fc6[_0x9d0162(0xcfd)]){_0x9d0162(0xa59)==='tOBaj'?_0x12dc7b[_0x9d0162(0x624)]&&_0x12dc7b['endAnimation']():(_0x59188a['BattleCore'][_0x9d0162(0x42e)][_0x9d0162(0xa07)](this),this[_0x9d0162(0x43b)]=this[_0x9d0162(0x43b)][_0x9d0162(0x4db)](_0x36ab04=>_0x36ab04&&_0x36ab04[_0x9d0162(0x608)]()));}_0x505fc6[_0x9d0162(0xbf9)]();},Spriteset_Battle['prototype'][_0x45cef8(0x37e)]=function(_0xe1107d){const _0x5f384b=_0x45cef8;this[_0x5f384b(0xba3)]['remove'](_0xe1107d),this[_0x5f384b(0x24d)](_0xe1107d)?this['battleStatusWindowAnimationContainer']()[_0x5f384b(0x92d)](_0xe1107d):this[_0x5f384b(0x292)][_0x5f384b(0x92d)](_0xe1107d);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xb53)]=Spriteset_Battle['prototype'][_0x45cef8(0x795)],Spriteset_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x795)]=function(){const _0x2f8382=_0x45cef8;VisuMZ['BattleCore'][_0x2f8382(0xb53)]['call'](this),this[_0x2f8382(0x976)]();},Spriteset_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x976)]=function(){const _0x30a9a1=_0x45cef8;this['_battlerContainer'][_0x30a9a1(0x8e0)][_0x30a9a1(0x52a)](this[_0x30a9a1(0x96f)][_0x30a9a1(0xb9b)](this)),this['putActiveBattlerOnTop']();},Spriteset_Battle['prototype'][_0x45cef8(0x96f)]=function(_0x283bf0,_0x514d5c){const _0x4cfc8b=_0x45cef8;if(VisuMZ[_0x4cfc8b(0x6c0)][_0x4cfc8b(0x658)][_0x4cfc8b(0x970)]['PrioritySortActors']){if('VPbIR'===_0x4cfc8b(0xc1c)){if(_0x283bf0[_0x4cfc8b(0xa87)]&&_0x514d5c['_battler']){if('ggWXd'!=='ggWXd'){if(!_0x31fe81[_0x4cfc8b(0xc83)]())return null;if(!_0x29bfe8[_0x4cfc8b(0x9e2)][_0x4cfc8b(0x78d)])return null;return _0x5e8cdb[_0x4cfc8b(0x9e2)]['_spriteset'][_0x4cfc8b(0x3d3)](this);}else{if(_0x283bf0[_0x4cfc8b(0xa87)][_0x4cfc8b(0x98a)]()&&_0x514d5c[_0x4cfc8b(0xa87)][_0x4cfc8b(0x724)]()){if('YQsxg'!==_0x4cfc8b(0xb8d))return 0x1;else{const _0x4d5ae6=this[_0x4cfc8b(0x318)][_0x4cfc8b(0xbda)]();for(const _0x571d3e of _0x4d5ae6){this[_0x4cfc8b(0x42a)](_0x571d3e);}}}else{if(_0x514d5c['_battler'][_0x4cfc8b(0x98a)]()&&_0x283bf0[_0x4cfc8b(0xa87)][_0x4cfc8b(0x724)]())return'qxgJd'!==_0x4cfc8b(0x735)?-0x1:_0x4190f1[_0x4cfc8b(0x231)]()['_baseY']-_0x3ed7ed[_0x4cfc8b(0x231)]()['_baseY'];}}}}else this[_0x4cfc8b(0x4b5)][_0x4cfc8b(0xaaa)]['smooth']=this['_battler'][_0x4cfc8b(0x40b)]();}if(_0x283bf0[_0x4cfc8b(0x987)]!==_0x514d5c[_0x4cfc8b(0x987)])return _0x283bf0[_0x4cfc8b(0x987)]-_0x514d5c[_0x4cfc8b(0x987)];else{if('eDSjv'==='TFCrG')this[_0x4cfc8b(0x39d)]=!![];else return _0x514d5c[_0x4cfc8b(0x344)]-_0x283bf0[_0x4cfc8b(0x344)];}},Spriteset_Battle[_0x45cef8(0x3cf)][_0x45cef8(0xb1c)]=function(){const _0x41c9e0=_0x45cef8;if(!VisuMZ['BattleCore'][_0x41c9e0(0x658)][_0x41c9e0(0x970)][_0x41c9e0(0x9b3)])return;const _0x31db62=BattleManager[_0x41c9e0(0x8af)];if(_0x31db62){if(_0x41c9e0(0x3e2)!=='VGtjI'){let _0x13d82e=-0x10,_0x40cd2b=this[_0x41c9e0(0xa2a)]*0.5;const _0x4527d8=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0xf85bd=this['_battler'][_0x41c9e0(0x2bc)]()['map'](_0x313c11=>_0x313c11&&_0x313c11[_0x41c9e0(0xbfd)][_0x41c9e0(0x291)](_0x4527d8)?_0x423960(_0x3d74ae['$1']):0x0),_0x3118f9=this['_battler'][_0x41c9e0(0x2bc)]()['map'](_0x3819b6=>_0x3819b6&&_0x3819b6[_0x41c9e0(0xbfd)]['match'](_0x4527d8)?_0x53ec3d(_0x27bf0e['$2']):0x0);_0x13d82e=_0xf85bd[_0x41c9e0(0xbd9)]((_0x4a212d,_0x14a514)=>_0x4a212d+_0x14a514,_0x13d82e),_0x40cd2b=_0x3118f9[_0x41c9e0(0xbd9)]((_0x1578f2,_0x401d24)=>_0x1578f2+_0x401d24,_0x40cd2b),this[_0x41c9e0(0xb25)]['x']=_0x13d82e,this[_0x41c9e0(0xb25)]['y']=_0x40cd2b,this[_0x41c9e0(0xb25)][_0x41c9e0(0x3b2)]();}else{if(_0x31db62['isActor']()&&!$gameSystem[_0x41c9e0(0xc02)]())return;const _0x3dbef7=_0x31db62[_0x41c9e0(0x231)]();if(_0x3dbef7&&_0x31db62[_0x41c9e0(0x98a)]())this['_battlerContainer'][_0x41c9e0(0x5b6)](_0x3dbef7);}}},Spriteset_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x6d7)]=function(){const _0x49c634=_0x45cef8;for(const _0x2ecb3a of $gameParty[_0x49c634(0x214)]()){if('JnzDT'==='JnzDT'){if(!_0x2ecb3a)continue;if(!_0x2ecb3a[_0x49c634(0x231)]())continue;_0x2ecb3a['battler']()[_0x49c634(0x5fe)]=!![],_0x2ecb3a[_0x49c634(0x231)]()[_0x49c634(0x476)]();}else return _0x5916c2[_0x49c634(0x6c0)]['Settings'][_0x49c634(0x8f7)][_0x49c634(0x2a1)];}},Spriteset_Battle['prototype'][_0x45cef8(0x27b)]=function(){const _0x145ee8=_0x45cef8;this[_0x145ee8(0x5d8)]=new Sprite(),Spriteset_Battle[_0x145ee8(0x3d2)]?this[_0x145ee8(0x5b6)](this[_0x145ee8(0x5d8)]):this['_battleField'][_0x145ee8(0x5b6)](this[_0x145ee8(0x5d8)]),SceneManager['_scene'][_0x145ee8(0x5d8)]=this[_0x145ee8(0x5d8)];},Spriteset_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x665)]=function(){const _0x1701f4=_0x45cef8;if(VisuMZ[_0x1701f4(0x6c0)][_0x1701f4(0x658)][_0x1701f4(0xc97)][_0x1701f4(0x9d3)])return;this['_enemyNameContainer']=new Sprite(),BattleManager[_0x1701f4(0x3a5)](this['_enemyNameContainer']);for(const _0x3a6ebb of this['_enemySprites']){const _0x1fad34=new Sprite_EnemyName();this[_0x1701f4(0x792)][_0x1701f4(0x5b6)](_0x1fad34),_0x1fad34['linkSprite'](_0x3a6ebb);}},Spriteset_Battle[_0x45cef8(0x3cf)][_0x45cef8(0xb3f)]=function(){const _0x38b251=_0x45cef8;if(!this[_0x38b251(0x63c)])return;if(!this['_uiContainer'])return;const _0x22825a=Spriteset_Battle[_0x38b251(0x3d2)]?this['_damageContainer']['x']:0x0,_0x33485e=Spriteset_Battle['ANTI_TINT_UI']?this['_damageContainer']['y']:0x0,_0x248618=Imported[_0x38b251(0xa9b)]?this[_0x38b251(0x69f)]['x']:0x0,_0x37e8e7=Imported['VisuMZ_3_ActSeqCamera']?this[_0x38b251(0x69f)]['y']:0x0;this[_0x38b251(0x5d8)]['x']=_0x22825a+_0x248618,this['_uiContainer']['y']=_0x33485e+_0x37e8e7;},BattleManager['addChildToUiContainer']=function(_0x19f716){const _0x14f87b=_0x45cef8;if(!SceneManager[_0x14f87b(0x9e2)]['_uiContainer'])return;SceneManager[_0x14f87b(0x9e2)][_0x14f87b(0x5d8)][_0x14f87b(0x5b6)](_0x19f716);},Spriteset_Battle[_0x45cef8(0x3cf)][_0x45cef8(0xba4)]=function(){return![];},Spriteset_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x69b)]=function(){const _0x409eb2=_0x45cef8;return this[_0x409eb2(0x3a8)]()[_0x409eb2(0x6a6)](_0x565d98=>_0x565d98[_0x409eb2(0x457)]());},Spriteset_Battle['prototype'][_0x45cef8(0xc54)]=function(){const _0x221b7f=_0x45cef8;return this['battlerSprites']()[_0x221b7f(0x6a6)](_0x258e2b=>_0x258e2b['isJumping']());},Spriteset_Battle[_0x45cef8(0x3cf)]['isAnyoneGrowing']=function(){const _0x2ebea0=_0x45cef8;return this[_0x2ebea0(0x3a8)]()[_0x2ebea0(0x6a6)](_0x160295=>_0x160295[_0x2ebea0(0xca7)]());},Spriteset_Battle['prototype']['isAnyoneSkewing']=function(){const _0x89bbc8=_0x45cef8;return this['battlerSprites']()[_0x89bbc8(0x6a6)](_0x2f7487=>_0x2f7487[_0x89bbc8(0x702)]());},Spriteset_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x846)]=function(){const _0x3805d6=_0x45cef8;return this[_0x3805d6(0x3a8)]()['some'](_0x370c65=>_0x370c65[_0x3805d6(0x733)]());},Spriteset_Battle[_0x45cef8(0x3cf)][_0x45cef8(0x688)]=function(){const _0x3c9cbe=_0x45cef8;return this['battlerSprites']()[_0x3c9cbe(0x6a6)](_0x51f041=>_0x51f041[_0x3c9cbe(0x42b)]());},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x617)]=Window_ItemList[_0x45cef8(0x3cf)]['maxCols'],Window_ItemList[_0x45cef8(0x3cf)][_0x45cef8(0x681)]=function(){const _0x16237a=_0x45cef8;if(SceneManager[_0x16237a(0xc83)]()){if(_0x16237a(0x22e)==='ZKGRE'){if(SceneManager[_0x16237a(0x9e2)]['battleLayoutStyle']()===_0x16237a(0x6b2))return VisuMZ[_0x16237a(0x6c0)][_0x16237a(0x658)][_0x16237a(0x5be)][_0x16237a(0x7c7)];else{if('mpugr'==='twyfA'){if(this[_0x16237a(0x8e2)]!==_0x1050f8)return![];if(!_0x2b2663['isSceneBattle']())return![];return _0x11d528[_0x16237a(0x6c0)]['Settings']['BattleLayout']['ShowPortraitsBorderStyle'];}else return VisuMZ['BattleCore'][_0x16237a(0x658)][_0x16237a(0x5be)][_0x16237a(0x66f)];}}else _0x45b3ed=this[_0x16237a(0xa87)][_0x16237a(0x271)]??_0x2a3a22,_0x3c0bd1=this[_0x16237a(0xa87)][_0x16237a(0xcb4)]??_0x3e6b66;}else return VisuMZ[_0x16237a(0x6c0)][_0x16237a(0x617)][_0x16237a(0xa07)](this);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x5ce)]=Window_SkillList[_0x45cef8(0x3cf)][_0x45cef8(0x681)],Window_SkillList[_0x45cef8(0x3cf)][_0x45cef8(0x681)]=function(){const _0x16ef85=_0x45cef8;return SceneManager[_0x16ef85(0xc83)]()?_0x16ef85(0x3dc)==='YRcwC'?SceneManager[_0x16ef85(0x9e2)]['battleLayoutStyle']()===_0x16ef85(0x6b2)?VisuMZ[_0x16ef85(0x6c0)][_0x16ef85(0x658)][_0x16ef85(0x5be)][_0x16ef85(0x7c7)]:VisuMZ[_0x16ef85(0x6c0)][_0x16ef85(0x658)][_0x16ef85(0x5be)][_0x16ef85(0x66f)]:this[_0x16ef85(0x7c8)]()?this['_enemy'][_0x16ef85(0x95c)]():!![]:VisuMZ[_0x16ef85(0x6c0)][_0x16ef85(0x5ce)][_0x16ef85(0xa07)](this);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xb38)]=Window_Options[_0x45cef8(0x3cf)][_0x45cef8(0x6b5)],Window_Options['prototype'][_0x45cef8(0x6b5)]=function(){const _0x7896df=_0x45cef8;VisuMZ['BattleCore'][_0x7896df(0xb38)][_0x7896df(0xa07)](this),this[_0x7896df(0x2d4)](),this[_0x7896df(0x971)]();},Window_Options[_0x45cef8(0x3cf)][_0x45cef8(0x2d4)]=function(){const _0x311bc2=_0x45cef8;VisuMZ[_0x311bc2(0x6c0)]['Settings'][_0x311bc2(0x3a6)][_0x311bc2(0x679)]&&(this[_0x311bc2(0x7c1)](),this['addBattleCoreAutoBattleStyleCommand']());},Window_Options[_0x45cef8(0x3cf)][_0x45cef8(0x971)]=function(){const _0xf15ece=_0x45cef8;if(!VisuMZ[_0xf15ece(0x6c0)][_0xf15ece(0x658)]['HpGauge'][_0xf15ece(0x59a)])return;const _0x5c4ee0=TextManager[_0xf15ece(0x39d)],_0x337cf6=_0xf15ece(0x39d);this[_0xf15ece(0xb67)](_0x5c4ee0,_0x337cf6);},Window_Options[_0x45cef8(0x3cf)][_0x45cef8(0x7c1)]=function(){const _0x464532=_0x45cef8,_0x483766=TextManager[_0x464532(0xba2)],_0x3c95fb=_0x464532(0xccb);this[_0x464532(0xb67)](_0x483766,_0x3c95fb);},Window_Options[_0x45cef8(0x3cf)][_0x45cef8(0x86e)]=function(){const _0x1fe8dd=_0x45cef8,_0x1a83bb=TextManager[_0x1fe8dd(0xbbc)],_0x2caf0e=_0x1fe8dd(0x84d);this[_0x1fe8dd(0xb67)](_0x1a83bb,_0x2caf0e);},VisuMZ[_0x45cef8(0x6c0)]['Window_Options_statusText']=Window_Options[_0x45cef8(0x3cf)][_0x45cef8(0xa34)],Window_Options[_0x45cef8(0x3cf)]['statusText']=function(_0x52cbda){const _0x5b61dd=_0x45cef8,_0x483eea=this[_0x5b61dd(0x562)](_0x52cbda);return _0x483eea==='autoBattleUseSkills'?this[_0x5b61dd(0x4eb)]():VisuMZ[_0x5b61dd(0x6c0)]['Window_Options_statusText']['call'](this,_0x52cbda);},Window_Options[_0x45cef8(0x3cf)][_0x45cef8(0x4eb)]=function(){const _0xc6e46e=_0x45cef8,_0x20732d=VisuMZ[_0xc6e46e(0x6c0)]['Settings']['AutoBattle'],_0x422a37=this[_0xc6e46e(0x2d5)](_0xc6e46e(0x84d));return _0x422a37?_0x20732d[_0xc6e46e(0x9fa)]:_0x20732d['StyleOFF'];},Window_ShopStatus['prototype'][_0x45cef8(0xc41)]=function(){const _0x242b16=_0x45cef8,_0x26cd6c=DataManager[_0x242b16(0x1ee)](this[_0x242b16(0xa8f)]),_0x109f5c=VisuMZ[_0x242b16(0xa6b)][_0x26cd6c];if(!_0x109f5c)return this[_0x242b16(0xb3b)]();const _0x433363=_0x242b16(0xaeb)[_0x242b16(0x9ec)](this[_0x242b16(0xa8f)][_0x242b16(0x8fa)][_0x242b16(0x4cf)]),_0x4d9db8=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this['_item'][_0x242b16(0x8fa)][_0x242b16(0x4cf)]];return _0x109f5c[_0x433363][_0x242b16(0x9ec)](_0x4d9db8);},Window_ShopStatus[_0x45cef8(0x3cf)]['getItemDamageAmountTextBattleCore']=function(){const _0xa13602=_0x45cef8,_0x409b5e=DataManager[_0xa13602(0x1ee)](this[_0xa13602(0xa8f)]),_0x2da176=VisuMZ[_0xa13602(0xa6b)][_0x409b5e];if(!_0x2da176)return this[_0xa13602(0x45f)]();return _0x2da176[_0xa13602(0x891)][_0xa13602(0xa07)](this);},VisuMZ['BattleCore'][_0x45cef8(0x609)]=Window_PartyCommand['prototype'][_0x45cef8(0x754)],Window_PartyCommand[_0x45cef8(0x3cf)]['initialize']=function(_0x400d55){const _0x4856fe=_0x45cef8;VisuMZ[_0x4856fe(0x6c0)][_0x4856fe(0x609)][_0x4856fe(0xa07)](this,_0x400d55),this[_0x4856fe(0xa9f)](_0x400d55);},Window_PartyCommand[_0x45cef8(0x3cf)][_0x45cef8(0xa9f)]=function(_0x426756){const _0x21c8d4=_0x45cef8,_0x7d3a0e=new Rectangle(0x0,0x0,_0x426756[_0x21c8d4(0x639)],_0x426756[_0x21c8d4(0xa2a)]);this[_0x21c8d4(0xc3c)]=new Window_Base(_0x7d3a0e),this['_commandNameWindow'][_0x21c8d4(0xbc0)]=0x0,this[_0x21c8d4(0x5b6)](this[_0x21c8d4(0xc3c)]),this[_0x21c8d4(0x91d)]();},Window_PartyCommand['prototype'][_0x45cef8(0xa11)]=function(){const _0x394f94=_0x45cef8;Window_Command['prototype'][_0x394f94(0xa11)]['call'](this);if(this[_0x394f94(0xc3c)])this[_0x394f94(0x91d)]();},Window_PartyCommand[_0x45cef8(0x3cf)][_0x45cef8(0x91d)]=function(){const _0x578c68=_0x45cef8,_0x5981ec=this[_0x578c68(0xc3c)];_0x5981ec[_0x578c68(0x48a)][_0x578c68(0x6db)]();const _0x5507bf=this[_0x578c68(0x7fa)](this['index']());if(_0x5507bf===_0x578c68(0x980)&&this['maxItems']()>0x0){const _0x289279=this[_0x578c68(0x745)](this[_0x578c68(0x5ef)]());let _0x3fe522=this[_0x578c68(0x75c)](this[_0x578c68(0x5ef)]());_0x3fe522=_0x3fe522[_0x578c68(0x332)](/\\I\[(\d+)\]/gi,''),_0x5981ec[_0x578c68(0x9cf)](),this[_0x578c68(0x90c)](_0x3fe522,_0x289279),this['commandNameWindowDrawText'](_0x3fe522,_0x289279),this[_0x578c68(0xc0c)](_0x3fe522,_0x289279);}},Window_PartyCommand[_0x45cef8(0x3cf)][_0x45cef8(0x90c)]=function(_0x603f8d,_0x3ed9ce){},Window_PartyCommand[_0x45cef8(0x3cf)]['commandNameWindowDrawText']=function(_0x5a71c0,_0x37990f){const _0x556a5b=_0x45cef8,_0x22df49=this['_commandNameWindow'];_0x22df49[_0x556a5b(0x894)](_0x5a71c0,0x0,_0x37990f['y'],_0x22df49[_0x556a5b(0x277)],_0x556a5b(0xace));},Window_PartyCommand['prototype']['commandNameWindowCenter']=function(_0x1c2a3f,_0x23ef01){const _0x367d7c=_0x45cef8,_0x28a4d4=this[_0x367d7c(0xc3c)],_0xf8efb1=$gameSystem['windowPadding'](),_0x28e732=_0x23ef01['x']+Math[_0x367d7c(0x74d)](_0x23ef01[_0x367d7c(0x639)]/0x2)+_0xf8efb1;_0x28a4d4['x']=_0x28a4d4['width']/-0x2+_0x28e732,_0x28a4d4['y']=Math['floor'](_0x23ef01[_0x367d7c(0xa2a)]/0x2);},Window_PartyCommand[_0x45cef8(0x3cf)][_0x45cef8(0x40e)]=function(){const _0x4f9af=_0x45cef8;this[_0x4f9af(0x948)](),this[_0x4f9af(0x567)](),this[_0x4f9af(0x342)](),this[_0x4f9af(0x9f9)](),this['addEscapeCommand']();},Window_PartyCommand[_0x45cef8(0x3cf)][_0x45cef8(0x948)]=function(){const _0x5e8713=_0x45cef8,_0x533b70=this[_0x5e8713(0x363)](),_0x588a3d=VisuMZ['BattleCore']['Settings'][_0x5e8713(0x8f7)][_0x5e8713(0x69d)],_0x2ce692=_0x533b70===_0x5e8713(0x676)?TextManager[_0x5e8713(0xa01)]:_0x5e8713(0x3d9)[_0x5e8713(0x9ec)](_0x588a3d,TextManager[_0x5e8713(0xa01)]),_0x210822=this[_0x5e8713(0x964)]();this[_0x5e8713(0xb67)](_0x2ce692,_0x5e8713(0xa01),_0x210822);},Window_PartyCommand[_0x45cef8(0x3cf)][_0x45cef8(0x964)]=function(){return!![];},Window_PartyCommand[_0x45cef8(0x3cf)][_0x45cef8(0x567)]=function(){const _0x18277b=_0x45cef8;if(!this[_0x18277b(0xaf5)]())return;const _0x61e77b=this[_0x18277b(0x363)](),_0x4c7469=VisuMZ['BattleCore']['Settings'][_0x18277b(0x8f7)][_0x18277b(0x3fe)],_0x56dad0=_0x61e77b===_0x18277b(0x676)?TextManager[_0x18277b(0x506)]:_0x18277b(0x3d9)[_0x18277b(0x9ec)](_0x4c7469,TextManager[_0x18277b(0x506)]),_0x42fc37=this[_0x18277b(0x4f0)]();this['addCommand'](_0x56dad0,_0x18277b(0x506),_0x42fc37);},Window_PartyCommand[_0x45cef8(0x3cf)][_0x45cef8(0xaf5)]=function(){const _0x5361c4=_0x45cef8;return VisuMZ[_0x5361c4(0x6c0)]['Settings'][_0x5361c4(0x8f7)][_0x5361c4(0x1e3)];},Window_PartyCommand[_0x45cef8(0x3cf)][_0x45cef8(0x4f0)]=function(){return!![];},Window_PartyCommand[_0x45cef8(0x3cf)][_0x45cef8(0x342)]=function(){},Window_PartyCommand[_0x45cef8(0x3cf)][_0x45cef8(0x9f9)]=function(){const _0x40f30e=_0x45cef8;if(!this[_0x40f30e(0xb10)]())return;const _0x47cd43=this[_0x40f30e(0x363)](),_0x491e90=VisuMZ['BattleCore']['Settings']['PartyCmd'][_0x40f30e(0xc4f)],_0x545ea7=_0x47cd43===_0x40f30e(0x676)?TextManager['options']:'\x5cI[%1]%2'[_0x40f30e(0x9ec)](_0x491e90,TextManager['options']),_0x4789b4=this['isOptionsCommandEnabled']();this[_0x40f30e(0xb67)](_0x545ea7,_0x40f30e(0x6ce),_0x4789b4);},Window_PartyCommand[_0x45cef8(0x3cf)][_0x45cef8(0xb10)]=function(){const _0x547f6b=_0x45cef8;return VisuMZ[_0x547f6b(0x6c0)]['Settings']['PartyCmd'][_0x547f6b(0xa94)];},Window_PartyCommand[_0x45cef8(0x3cf)][_0x45cef8(0x95b)]=function(){return!![];},Window_PartyCommand[_0x45cef8(0x3cf)][_0x45cef8(0x343)]=function(){const _0x5169f8=_0x45cef8,_0x25b931=this[_0x5169f8(0x363)](),_0x22451b=VisuMZ['BattleCore'][_0x5169f8(0x658)][_0x5169f8(0x8f7)][_0x5169f8(0x5c6)],_0x460a88=_0x25b931===_0x5169f8(0x676)?TextManager[_0x5169f8(0x520)]:_0x5169f8(0x3d9)[_0x5169f8(0x9ec)](_0x22451b,TextManager['escape']),_0x4588f8=this[_0x5169f8(0x42d)]();this['addCommand'](_0x460a88,_0x5169f8(0x520),_0x4588f8);},Window_PartyCommand[_0x45cef8(0x3cf)][_0x45cef8(0x42d)]=function(){const _0x13653d=_0x45cef8;return BattleManager[_0x13653d(0x923)]();},Window_PartyCommand[_0x45cef8(0x3cf)][_0x45cef8(0x746)]=function(){const _0x2cf501=_0x45cef8;return VisuMZ[_0x2cf501(0x6c0)][_0x2cf501(0x658)]['PartyCmd'][_0x2cf501(0x50e)];},Window_PartyCommand[_0x45cef8(0x3cf)]['drawItem']=function(_0x32cc0e){const _0x40bc9b=_0x45cef8,_0x30c782=this[_0x40bc9b(0x7fa)](_0x32cc0e);if(_0x30c782===_0x40bc9b(0x911))_0x40bc9b(0x47d)!==_0x40bc9b(0x47d)?_0xf8a2bc[_0x40bc9b(0xa2b)]():this[_0x40bc9b(0x7b6)](_0x32cc0e);else _0x30c782===_0x40bc9b(0x980)?_0x40bc9b(0xc87)!=='VGmdp'?this[_0x40bc9b(0x3ae)](_0x32cc0e):(_0x49325c[_0x40bc9b(0x6c0)][_0x40bc9b(0x930)][_0x40bc9b(0xa07)](this),!this[_0x40bc9b(0xa87)]&&this[_0x40bc9b(0x856)]&&(this[_0x40bc9b(0x856)][_0x40bc9b(0xbf1)]=![])):Window_Command[_0x40bc9b(0x3cf)][_0x40bc9b(0xad3)]['call'](this,_0x32cc0e);},Window_PartyCommand[_0x45cef8(0x3cf)]['commandStyle']=function(){const _0x5e1e65=_0x45cef8;return VisuMZ[_0x5e1e65(0x6c0)][_0x5e1e65(0x658)][_0x5e1e65(0x8f7)][_0x5e1e65(0x960)];},Window_PartyCommand[_0x45cef8(0x3cf)][_0x45cef8(0x7fa)]=function(_0x14e346){const _0x2f3dbc=_0x45cef8;if(_0x14e346<0x0)return _0x2f3dbc(0x676);const _0x4e3aa7=this[_0x2f3dbc(0x363)]();if(_0x4e3aa7!==_0x2f3dbc(0xc08))return _0x4e3aa7;else{if(this['maxItems']()>0x0){if(_0x2f3dbc(0xc65)===_0x2f3dbc(0x280))_0x913a6c[_0x2f3dbc(0x8fa)][_0x2f3dbc(0x766)]=!![];else{const _0x2976d1=this[_0x2f3dbc(0x75c)](_0x14e346);if(_0x2976d1['match'](/\\I\[(\d+)\]/i)){if(_0x2f3dbc(0x2eb)===_0x2f3dbc(0xb69))_0x2c220c['BattleSystemBTB'][_0x2f3dbc(0x2a2)]<1.11&&(_0x163300(_0x492a13[_0x2f3dbc(0x9ec)](_0x2f3dbc(0xc5b))),_0x56cac5[_0x2f3dbc(0xa50)]());else{const _0x20deb1=this['itemLineRect'](_0x14e346),_0x3903ca=this[_0x2f3dbc(0x574)](_0x2976d1)[_0x2f3dbc(0x639)];if(_0x3903ca<=_0x20deb1[_0x2f3dbc(0x639)]){if(_0x2f3dbc(0x99c)===_0x2f3dbc(0x919))this[_0x2f3dbc(0xbc0)]=0x0;else return'iconText';}else{if(_0x2f3dbc(0x1db)!==_0x2f3dbc(0x1db)){if(!_0xe24258[_0x2f3dbc(0xc83)]())return;if(!this[_0x2f3dbc(0x231)]())return;if(_0x6d7232[_0x2f3dbc(0xcc5)]<=0x0)return;_0x2a0c21=_0x1508fd||{},_0x1b4507['textColor']=_0x266f19['textColor']||'#ffffff',_0x317528[_0x2f3dbc(0xceb)]=_0x419aed[_0x2f3dbc(0xceb)]||[0x0,0x0,0x0,0x0],_0x697a6c['flashDuration']=_0x4fec62['flashDuration']||0x0,this[_0x2f3dbc(0x231)]()['setupTextPopup'](_0xe06aea,_0x4b3113);}else return'icon';}}}}}}return _0x2f3dbc(0x676);},Window_PartyCommand[_0x45cef8(0x3cf)][_0x45cef8(0x7b6)]=function(_0x5e4fc1){const _0x14af51=_0x45cef8,_0x22c0c1=this[_0x14af51(0x745)](_0x5e4fc1),_0x4f352f=this['commandName'](_0x5e4fc1),_0x2d7e69=this[_0x14af51(0x574)](_0x4f352f)[_0x14af51(0x639)];this[_0x14af51(0x8fd)](this['isCommandEnabled'](_0x5e4fc1));const _0x5dac35=this[_0x14af51(0x746)]();if(_0x5dac35===_0x14af51(0xb7c))_0x14af51(0x3bb)===_0x14af51(0x3bb)?this['drawTextEx'](_0x4f352f,_0x22c0c1['x']+_0x22c0c1[_0x14af51(0x639)]-_0x2d7e69,_0x22c0c1['y'],_0x2d7e69):_0x594b1a[_0x14af51(0xa27)]=_0x1f359b(_0x455954['$1'])[_0x14af51(0x5d3)]()[_0x14af51(0x7f3)]();else{if(_0x5dac35===_0x14af51(0xace)){if(_0x14af51(0xa42)!=='PNroS'){const _0x4ef60e=_0x22c0c1['x']+Math[_0x14af51(0x74d)]((_0x22c0c1[_0x14af51(0x639)]-_0x2d7e69)/0x2);this[_0x14af51(0x72b)](_0x4f352f,_0x4ef60e,_0x22c0c1['y'],_0x2d7e69);}else{const _0xbbcd40=_0x564e7f['$1'],_0x29dfbd='\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20'[_0x14af51(0x9ec)](_0xbbcd40),_0x2d490c=_0x2f2dac[_0x14af51(0x6c0)][_0x14af51(0x554)](_0x17eb67,_0x32527e);_0x1dbdea[_0x14af51(0x6c0)]['JS'][_0x2d490c]=new _0x393b45(_0x29dfbd);}}else this['drawTextEx'](_0x4f352f,_0x22c0c1['x'],_0x22c0c1['y'],_0x2d7e69);}},Window_PartyCommand[_0x45cef8(0x3cf)][_0x45cef8(0x3ae)]=function(_0x26f5e1){const _0x517ce3=_0x45cef8;this[_0x517ce3(0x75c)](_0x26f5e1)[_0x517ce3(0x291)](/\\I\[(\d+)\]/i);const _0x470ad5=Number(RegExp['$1'])||0x0,_0x400990=this[_0x517ce3(0x745)](_0x26f5e1),_0x1550fd=_0x400990['x']+Math[_0x517ce3(0x74d)]((_0x400990['width']-ImageManager['iconWidth'])/0x2),_0x49a16b=_0x400990['y']+(_0x400990[_0x517ce3(0xa2a)]-ImageManager[_0x517ce3(0x34a)])/0x2;this[_0x517ce3(0x8a8)](_0x470ad5,_0x1550fd,_0x49a16b);},Window_PartyCommand[_0x45cef8(0x3cf)][_0x45cef8(0x939)]=function(){},Window_PartyCommand[_0x45cef8(0x3cf)][_0x45cef8(0x64b)]=function(){const _0x1d7049=_0x45cef8;Window_Command[_0x1d7049(0x3cf)][_0x1d7049(0x64b)][_0x1d7049(0xa07)](this);const _0x514f30=this[_0x1d7049(0x6e8)]();_0x514f30===_0x1d7049(0x6b2)&&(_0x1d7049(0x9fb)===_0x1d7049(0x9fb)?this['showHelpWindow']():(_0x287a3a[_0x1d7049(0x6c0)][_0x1d7049(0x9fc)]&&_0x2fa991[_0x1d7049(0x6c0)][_0x1d7049(0x9fc)][_0x1d7049(0xa07)](this,_0x3a59fe),_0x4ff289[_0x1d7049(0x6c0)][_0x1d7049(0x6f8)](_0x192254)));},Window_PartyCommand['prototype'][_0x45cef8(0x6e8)]=function(){const _0x234c78=_0x45cef8;if(this['_battleLayoutStyle'])return this[_0x234c78(0x3f1)];return this[_0x234c78(0x3f1)]=SceneManager[_0x234c78(0x9e2)][_0x234c78(0x6e8)](),this['_battleLayoutStyle'];},Window_PartyCommand['prototype']['updateHelp']=function(){const _0x22eadf=_0x45cef8,_0x5046d5=VisuMZ['BattleCore'][_0x22eadf(0x658)][_0x22eadf(0x8f7)],_0x356c78=this[_0x22eadf(0x6fd)]();switch(_0x356c78){case _0x22eadf(0xa01):this[_0x22eadf(0x652)][_0x22eadf(0x9a4)](_0x5046d5[_0x22eadf(0x29a)]);break;case _0x22eadf(0x506):this[_0x22eadf(0x652)][_0x22eadf(0x9a4)](_0x5046d5[_0x22eadf(0x6ec)]);break;case _0x22eadf(0x6ce):this[_0x22eadf(0x652)][_0x22eadf(0x9a4)](_0x5046d5['HelpOptions']);break;case _0x22eadf(0x520):this['_helpWindow'][_0x22eadf(0x9a4)](_0x5046d5[_0x22eadf(0x6cf)]);break;default:this[_0x22eadf(0x652)][_0x22eadf(0x9a4)]('');break;}},VisuMZ[_0x45cef8(0x6c0)]['Window_ActorCommand_initialize']=Window_ActorCommand[_0x45cef8(0x3cf)][_0x45cef8(0x754)],Window_ActorCommand[_0x45cef8(0x3cf)][_0x45cef8(0x754)]=function(_0x2a46df){const _0x4c6f8b=_0x45cef8;VisuMZ[_0x4c6f8b(0x6c0)][_0x4c6f8b(0x832)][_0x4c6f8b(0xa07)](this,_0x2a46df),this['createCommandNameWindow'](_0x2a46df);},Window_ActorCommand[_0x45cef8(0x3cf)]['createCommandNameWindow']=function(_0x5a92cb){const _0x16d59d=_0x45cef8,_0x5c818a=new Rectangle(0x0,0x0,_0x5a92cb[_0x16d59d(0x639)],_0x5a92cb[_0x16d59d(0xa2a)]);this[_0x16d59d(0xc3c)]=new Window_Base(_0x5c818a),this[_0x16d59d(0xc3c)][_0x16d59d(0xbc0)]=0x0,this[_0x16d59d(0x5b6)](this['_commandNameWindow']),this[_0x16d59d(0x91d)]();},Window_ActorCommand[_0x45cef8(0x3cf)][_0x45cef8(0xa11)]=function(){const _0x4e70bd=_0x45cef8;Window_Command[_0x4e70bd(0x3cf)][_0x4e70bd(0xa11)][_0x4e70bd(0xa07)](this);if(this['_commandNameWindow'])this[_0x4e70bd(0x91d)]();},Window_ActorCommand[_0x45cef8(0x3cf)][_0x45cef8(0x91d)]=function(){const _0x4fdfc5=_0x45cef8,_0x4417de=this[_0x4fdfc5(0xc3c)];_0x4417de[_0x4fdfc5(0x48a)]['clear']();const _0x55796f=this[_0x4fdfc5(0x7fa)](this[_0x4fdfc5(0x5ef)]());if(_0x55796f===_0x4fdfc5(0x980)&&this[_0x4fdfc5(0x468)]()>0x0){const _0x4c2ca9=this[_0x4fdfc5(0x745)](this['index']());let _0x56c73c=this[_0x4fdfc5(0x75c)](this['index']());_0x56c73c=_0x56c73c[_0x4fdfc5(0x332)](/\\I\[(\d+)\]/gi,''),_0x4417de[_0x4fdfc5(0x9cf)](),this[_0x4fdfc5(0x90c)](_0x56c73c,_0x4c2ca9),this[_0x4fdfc5(0x3d4)](_0x56c73c,_0x4c2ca9),this[_0x4fdfc5(0xc0c)](_0x56c73c,_0x4c2ca9);}},Window_ActorCommand['prototype'][_0x45cef8(0x90c)]=function(_0x2bdac0,_0xbb4fb5){},Window_ActorCommand[_0x45cef8(0x3cf)][_0x45cef8(0x3d4)]=function(_0x5d38f6,_0x522374){const _0x1bb690=_0x45cef8,_0x2db3c7=this[_0x1bb690(0xc3c)];_0x2db3c7[_0x1bb690(0x894)](_0x5d38f6,0x0,_0x522374['y'],_0x2db3c7[_0x1bb690(0x277)],'center');},Window_ActorCommand['prototype'][_0x45cef8(0xc0c)]=function(_0x126fa4,_0x20dd9e){const _0x1819a2=_0x45cef8,_0x533c59=this['_commandNameWindow'],_0x139c35=$gameSystem[_0x1819a2(0x916)](),_0x2f0d1d=_0x20dd9e['x']+Math[_0x1819a2(0x74d)](_0x20dd9e[_0x1819a2(0x639)]/0x2)+_0x139c35;_0x533c59['x']=_0x533c59['width']/-0x2+_0x2f0d1d,_0x533c59['y']=Math[_0x1819a2(0x74d)](_0x20dd9e[_0x1819a2(0xa2a)]/0x2);},Window_ActorCommand[_0x45cef8(0x3cf)]['makeCommandList']=function(){const _0x3c2123=_0x45cef8;if(!this[_0x3c2123(0x318)])return;const _0x903de9=this['_actor'][_0x3c2123(0x538)]();for(const _0x500044 of _0x903de9){_0x3c2123(0xc99)!==_0x3c2123(0xc99)?(this[_0x3c2123(0x2a9)]=_0x5c6c45[_0x3c2123(0x5eb)]>=0x0?0x2:0x3,this['createDigits'](_0x195d41[_0x3c2123(0x5eb)])):this['makeBattleCommand'](_0x500044['toUpperCase']()[_0x3c2123(0x7f3)]());}},Window_ActorCommand[_0x45cef8(0x3cf)][_0x45cef8(0x450)]=function(_0x105a93){const _0x459427=_0x45cef8;_0x105a93===_0x459427(0x72c)&&this[_0x459427(0x68f)]();[_0x459427(0x313),_0x459427(0x3c9)][_0x459427(0x2b1)](_0x105a93)&&this[_0x459427(0x81a)]();_0x105a93===_0x459427(0x9b5)&&this[_0x459427(0xc85)]();_0x105a93===_0x459427(0x30d)&&this['addItemCommand']();_0x105a93===_0x459427(0x4d2)&&this['addEscapeCommand']();_0x105a93===_0x459427(0x4e3)&&(_0x459427(0x45a)!=='uJsxs'?_0x532f7a[_0x459427(0x6c0)][_0x459427(0x7c3)]['call'](this,_0x2740cf):this[_0x459427(0x567)]());if(_0x105a93[_0x459427(0x291)](/STYPE: (\d+)/i)){const _0x2a66a4=Number(RegExp['$1']);this[_0x459427(0x42a)](_0x2a66a4);}else{if(_0x105a93['match'](/STYPE: (.*)/i)){if(_0x459427(0x26a)==='JcUCO')this[_0x459427(0xafb)](_0x542f5a,_0x49f9aa,_0x2c0e7d);else{const _0x42096b=DataManager[_0x459427(0xa8e)](RegExp['$1']);this[_0x459427(0x42a)](_0x42096b);}}}_0x105a93===_0x459427(0x352)&&this['addSingleSkillCommands']();if(_0x105a93['match'](/SKILL: (\d+)/i)){const _0x33ae79=Number(RegExp['$1']);this[_0x459427(0x38a)]($dataSkills[_0x33ae79]);}else{if(_0x105a93[_0x459427(0x291)](/SKILL: (.*)/i)){if(_0x459427(0xbb1)!==_0x459427(0x884)){const _0x22269c=DataManager['getSkillIdWithName'](RegExp['$1']);this[_0x459427(0x38a)]($dataSkills[_0x22269c]);}else return _0x180c46[_0x459427(0x6c0)][_0x459427(0x658)][_0x459427(0x5be)][_0x459427(0x66f)];}}_0x105a93===_0x459427(0x378)&&Imported[_0x459427(0xd0e)]&&(_0x459427(0x835)==='ojCqR'?(_0x78cabf['BattleCore'][_0x459427(0x761)][_0x459427(0xa07)](this,_0x29a841),this[_0x459427(0x5d7)]()):this['addPartyCommand']()),[_0x459427(0x972),_0x459427(0x2f2)][_0x459427(0x2b1)](_0x105a93)&&Imported[_0x459427(0x76a)]&&this[_0x459427(0x689)](),_0x105a93==='WEAPON\x20SWAP'&&Imported[_0x459427(0x248)]&&this[_0x459427(0x27e)](!![]);},Window_ActorCommand[_0x45cef8(0x3cf)]['addAttackCommand']=function(){const _0x27ef57=_0x45cef8,_0x77ec6e=$dataSkills[this[_0x27ef57(0x318)][_0x27ef57(0x202)]()];if(!_0x77ec6e)return;if(!this['canAddSkillCommand'](_0x77ec6e))return;const _0x52849e=this['commandStyle'](),_0x46cd7b=DataManager[_0x27ef57(0x7ef)](_0x77ec6e),_0x7ea15f=DataManager['battleCommandIcon'](_0x77ec6e),_0x491738=_0x52849e==='text'?_0x46cd7b:_0x27ef57(0x3d9)[_0x27ef57(0x9ec)](_0x7ea15f,_0x46cd7b);this['addCommand'](_0x491738,_0x27ef57(0x71e),this[_0x27ef57(0x318)][_0x27ef57(0x7ba)]());},Window_ActorCommand['prototype'][_0x45cef8(0xc85)]=function(){const _0x2e34d4=_0x45cef8,_0x596da8=$dataSkills[this[_0x2e34d4(0x318)][_0x2e34d4(0xa23)]()];if(!_0x596da8)return;if(!this[_0x2e34d4(0xcac)](_0x596da8))return;const _0xe33ed=this[_0x2e34d4(0x363)](),_0x3f66e1=DataManager[_0x2e34d4(0x7ef)](_0x596da8),_0x1209fe=DataManager['battleCommandIcon'](_0x596da8),_0x1aee7f=_0xe33ed===_0x2e34d4(0x676)?_0x3f66e1:_0x2e34d4(0x3d9)['format'](_0x1209fe,_0x3f66e1);this[_0x2e34d4(0xb67)](_0x1aee7f,_0x2e34d4(0x663),this[_0x2e34d4(0x318)][_0x2e34d4(0xba9)]());},Window_ActorCommand['prototype']['addItemCommand']=function(){const _0x29fd2=_0x45cef8,_0xcf9665=this[_0x29fd2(0x363)](),_0x4cb584=VisuMZ[_0x29fd2(0x6c0)][_0x29fd2(0x658)]['ActorCmd']['CmdIconItem'],_0x46e373=_0xcf9665===_0x29fd2(0x676)?TextManager[_0x29fd2(0x3a4)]:_0x29fd2(0x3d9)['format'](_0x4cb584,TextManager[_0x29fd2(0x3a4)]),_0x30eb8f=this[_0x29fd2(0x865)]();this[_0x29fd2(0xb67)](_0x46e373,'item',_0x30eb8f);},Window_ActorCommand[_0x45cef8(0x3cf)][_0x45cef8(0x865)]=function(){const _0xd0094c=_0x45cef8;return this[_0xd0094c(0x318)]&&this['_actor']['canUseItemCommand']();},Window_ActorCommand[_0x45cef8(0x3cf)][_0x45cef8(0x81a)]=function(){const _0x1d0dbc=_0x45cef8,_0x509080=this['_actor'][_0x1d0dbc(0xbda)]();for(const _0x4a18b9 of _0x509080){'APKUF'!==_0x1d0dbc(0x508)?this[_0x1d0dbc(0x42a)](_0x4a18b9):_0x47de97+=(_0x47a3fb['isEnemy']()?-0x1:0x1)*_0x6a8571['mainSpriteWidth']()/0x2;}},Window_ActorCommand['prototype']['addSkillTypeCommand']=function(_0x3a4de0){const _0xeafc4a=_0x45cef8;let _0x34ecb5=$dataSystem[_0xeafc4a(0xbda)][_0x3a4de0];if(!_0x34ecb5)return;let _0x2deb54=_0x34ecb5;const _0x41b55d=this[_0xeafc4a(0x363)]();if(_0x41b55d===_0xeafc4a(0x676))_0x2deb54=_0x2deb54[_0xeafc4a(0x332)](/\x1I\[(\d+)\]/gi,''),_0x2deb54=_0x2deb54[_0xeafc4a(0x332)](/\\I\[(\d+)\]/gi,'');else{if(!_0x34ecb5['match'](/\\I\[(\d+)\]/i)){if(_0xeafc4a(0x818)===_0xeafc4a(0x818)){const _0x4f3fa7=Imported['VisuMZ_1_SkillsStatesCore']?VisuMZ[_0xeafc4a(0x469)]['Settings']['Skills']:VisuMZ[_0xeafc4a(0x6c0)]['Settings'][_0xeafc4a(0x4d0)],_0x59f5c1=$dataSystem[_0xeafc4a(0xcd2)]['includes'](_0x3a4de0),_0x3ce338=_0x59f5c1?_0x4f3fa7[_0xeafc4a(0x8d9)]:_0x4f3fa7['IconStypeNorm'];_0x2deb54=_0xeafc4a(0x3d9)[_0xeafc4a(0x9ec)](_0x3ce338,_0x34ecb5);}else this[_0xeafc4a(0x754)](...arguments);}}this[_0xeafc4a(0xb67)](_0x2deb54,_0xeafc4a(0x5f5),!![],_0x3a4de0);},Window_ActorCommand[_0x45cef8(0x3cf)][_0x45cef8(0x2bb)]=function(){const _0x1a7e94=_0x45cef8,_0x1fdece=this[_0x1a7e94(0x318)]['skillTypes'](),_0x5a35fb=this['_actor']['skills']();for(const _0x3ca9ad of _0x5a35fb){if(!_0x3ca9ad)continue;if(Imported[_0x1a7e94(0x687)]){if(this[_0x1a7e94(0xbb8)](_0x3ca9ad))continue;if(this['isHiddenSkill'](_0x3ca9ad))continue;}else{if(!_0x1fdece[_0x1a7e94(0x2b1)](_0x3ca9ad[_0x1a7e94(0x785)])){if(_0x1a7e94(0x41f)!==_0x1a7e94(0x6de))continue;else return!![];}}this[_0x1a7e94(0x38a)](_0x3ca9ad);}},Window_ActorCommand[_0x45cef8(0x3cf)][_0x45cef8(0xbb8)]=function(_0x2a16e2){const _0xf47539=_0x45cef8,_0x8b34c0=this[_0xf47539(0x318)][_0xf47539(0xbda)](),_0x248ef2=_0x8b34c0[_0xf47539(0x4db)](_0x1ef968=>DataManager['getSkillTypes'](_0x2a16e2)['includes'](_0x1ef968));return _0x248ef2['length']<=0x0;},Window_ActorCommand[_0x45cef8(0x3cf)][_0x45cef8(0x5b7)]=function(_0x2c5aeb){const _0x295ddb=_0x45cef8;if(Imported[_0x295ddb(0x687)]){if(VisuMZ[_0x295ddb(0x469)]['version']>=1.24){if('IBwrX'!=='Wrwta'){if(this[_0x295ddb(0x318)]){if(!VisuMZ[_0x295ddb(0x469)][_0x295ddb(0x579)](this['_actor'],_0x2c5aeb))return!![];if(!VisuMZ[_0x295ddb(0x469)][_0x295ddb(0x73d)](this['_actor'],_0x2c5aeb))return!![];if(!VisuMZ[_0x295ddb(0x469)][_0x295ddb(0x345)](this[_0x295ddb(0x318)],_0x2c5aeb))return!![];}}else this['showNormalAnimation'](_0x4dae82,_0x2dc429);}else{if(!Window_SkillList[_0x295ddb(0x3cf)][_0x295ddb(0xbe5)][_0x295ddb(0xa07)](this,_0x2c5aeb))return!![];if(!Window_SkillList[_0x295ddb(0x3cf)]['checkShowHideSwitchNotetags']['call'](this,_0x2c5aeb))return!![];if(!Window_SkillList[_0x295ddb(0x3cf)]['checkShowHideSkillNotetags']['call'](this,_0x2c5aeb))return!![];}}return![];},Window_ActorCommand['prototype']['addSingleSkillCommand']=function(_0x4677ab){const _0x1cf479=_0x45cef8;if(!_0x4677ab)return;if(!this[_0x1cf479(0xcac)](_0x4677ab))return;const _0x11be91=this[_0x1cf479(0x363)](),_0x227b6c=DataManager[_0x1cf479(0x7ef)](_0x4677ab),_0x55fcbb=DataManager[_0x1cf479(0x4ed)](_0x4677ab),_0x171186=_0x11be91===_0x1cf479(0x676)?_0x227b6c:'\x5cI[%1]%2'['format'](_0x55fcbb,_0x227b6c),_0x2de298=this[_0x1cf479(0x318)][_0x1cf479(0x5b4)](_0x4677ab);this['addCommand'](_0x171186,_0x1cf479(0xa7c),_0x2de298,_0x4677ab['id']);},Window_ActorCommand['prototype'][_0x45cef8(0xcac)]=function(_0x372ae9){const _0x151f53=_0x45cef8,_0x23754e=_0x372ae9['note'];if(_0x23754e['match'](/<COMMAND REQUIRE LEARN>/i)){if('ILZIV'!==_0x151f53(0x220)){if(this[_0x151f53(0x76d)][_0x151f53(0x3cc)]!==_0x43e372)return this[_0x151f53(0x76d)][_0x151f53(0x3cc)];const _0x4191e8=/<DAMAGE CAP:[ ](\d+)>/i,_0x300825=this[_0x151f53(0x2bc)]()[_0x151f53(0x4a9)](_0xaed2ad=>_0xaed2ad&&_0xaed2ad[_0x151f53(0xbfd)][_0x151f53(0x291)](_0x4191e8)?_0x2b1d18(_0x3c2132['$1']):0x0);let _0xe42fa1=_0x300825[_0x151f53(0xcc5)]>0x0?_0x5d2085[_0x151f53(0x2ce)](..._0x300825):0x0;if(_0xe42fa1<=0x0)_0xe42fa1=_0x2916b2['BattleCore'][_0x151f53(0x658)][_0x151f53(0x28b)][_0x151f53(0xaf2)];return this['_cache']['hardDamageCap']=_0xe42fa1,this[_0x151f53(0x76d)][_0x151f53(0x3cc)];}else{if(!this[_0x151f53(0x318)][_0x151f53(0x62f)](_0x372ae9['id']))return![];}}if(_0x23754e['match'](/<COMMAND REQUIRE ACCESS>/i)){if(_0x151f53(0x224)!==_0x151f53(0x8a0)){if(!this[_0x151f53(0x318)][_0x151f53(0x461)](_0x372ae9['id']))return![];}else{if(this[_0x151f53(0xc7f)][_0x151f53(0x6a6)](_0x1d724f=>_0x1d724f[_0x151f53(0x3a4)]()&&_0x1d724f[_0x151f53(0x9c6)]()))return!![];}}const _0x5a7640=VisuMZ[_0x151f53(0x6c0)]['createKeyJS'](_0x372ae9,_0x151f53(0x23c));if(VisuMZ[_0x151f53(0x6c0)]['JS'][_0x5a7640]){if(!VisuMZ['BattleCore']['JS'][_0x5a7640]['call'](this,this[_0x151f53(0x318)],_0x372ae9))return![];}return VisuMZ[_0x151f53(0x6c0)][_0x151f53(0x503)](_0x372ae9);},VisuMZ[_0x45cef8(0x6c0)]['CheckSkillCommandShowSwitches']=function(_0xb559e7){const _0x553975=_0x45cef8,_0x113061=_0xb559e7[_0x553975(0xbfd)];if(_0x113061[_0x553975(0x291)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x553975(0x9c8)===_0x553975(0x76e))return _0xfa07c6=_0x32b83b(_0x2aca20),_0x8343cb[_0x553975(0x291)](/#(.*)/i)?_0x553975(0x8f5)[_0x553975(0x9ec)](_0x23910f(_0x59f460['$1'])):this[_0x553975(0x73f)](_0x181e3a(_0x3da306));else{const _0x171821=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x540d4f of _0x171821){if(!$gameSwitches[_0x553975(0x28c)](_0x540d4f))return![];}return!![];}}if(_0x113061[_0x553975(0x291)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x57dccb=JSON[_0x553975(0xadd)]('['+RegExp['$1'][_0x553975(0x291)](/\d+/g)+']');for(const _0xdfa9e3 of _0x57dccb){if(_0x553975(0xc42)==='FgALr'){if(!_0x1e3c11['isSceneBattle']())return;if(!_0x5b3587[_0x553975(0xa9b)])return;_0x3045d8[_0x553975(0x8b3)](_0x242081,_0x215aa9);const _0xfa7f10=_0x2ab344[_0x553975(0xaf3)](),_0x59da68=_0x2bc17e[_0x553975(0x226)];if(!_0xfa7f10)return;_0x3c48d0['setBattleZoom'](0x1,_0x65199d[_0x553975(0x690)],_0x1b56d4['EasingType']);if(_0x59da68)_0xfa7f10['setWaitMode'](_0x553975(0x71c));}else{if(!$gameSwitches[_0x553975(0x28c)](_0xdfa9e3))return![];}}return!![];}if(_0x113061['match'](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x623acf=JSON[_0x553975(0xadd)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x5d8f29 of _0x623acf){if($gameSwitches[_0x553975(0x28c)](_0x5d8f29))return!![];}return![];}if(_0x113061[_0x553975(0x291)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('GpRkg'===_0x553975(0x8b5)){const _0x1434fe=JSON[_0x553975(0xadd)]('['+RegExp['$1'][_0x553975(0x291)](/\d+/g)+']');for(const _0x2deb60 of _0x1434fe){if(_0x553975(0x932)!==_0x553975(0x932))this[_0x553975(0x287)](_0x553975(0x5e8),_0x25b767);else{if(!$gameSwitches[_0x553975(0x28c)](_0x2deb60))return!![];}}return![];}else _0xdaca9e[_0x553975(0xa2b)]();}if(_0x113061[_0x553975(0x291)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x1be89b=JSON[_0x553975(0xadd)]('['+RegExp['$1'][_0x553975(0x291)](/\d+/g)+']');for(const _0x3845b8 of _0x1be89b){if(_0x553975(0x4a3)===_0x553975(0x4a3)){if(!$gameSwitches[_0x553975(0x28c)](_0x3845b8))return!![];}else this[_0x553975(0xa2e)]=!![];}return![];}if(_0x113061['match'](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x553975(0x798)!=='YBJBF')this[_0x553975(0x767)]();else{const _0x403b75=JSON['parse']('['+RegExp['$1'][_0x553975(0x291)](/\d+/g)+']');for(const _0x5c1731 of _0x403b75){if($gameSwitches[_0x553975(0x28c)](_0x5c1731))return![];}return!![];}}return!![];},Window_ActorCommand[_0x45cef8(0x3cf)][_0x45cef8(0x343)]=function(){const _0x15a51e=_0x45cef8,_0x1eb028=this[_0x15a51e(0x363)](),_0x42826e=VisuMZ[_0x15a51e(0x6c0)][_0x15a51e(0x658)][_0x15a51e(0x8f7)][_0x15a51e(0x5c6)],_0x48e156=_0x1eb028==='text'?TextManager[_0x15a51e(0x520)]:'\x5cI[%1]%2'[_0x15a51e(0x9ec)](_0x42826e,TextManager[_0x15a51e(0x520)]),_0x2ba984=this['isEscapeCommandEnabled']();this[_0x15a51e(0xb67)](_0x48e156,_0x15a51e(0x520),_0x2ba984);},Window_ActorCommand[_0x45cef8(0x3cf)]['isEscapeCommandEnabled']=function(){const _0x1f048b=_0x45cef8;return BattleManager[_0x1f048b(0x923)]();},Window_ActorCommand[_0x45cef8(0x3cf)][_0x45cef8(0x567)]=function(){const _0x1ed9e9=_0x45cef8,_0x3acc6d=this[_0x1ed9e9(0x363)](),_0x26efa0=VisuMZ[_0x1ed9e9(0x6c0)][_0x1ed9e9(0x658)][_0x1ed9e9(0x8f7)][_0x1ed9e9(0x3fe)],_0x49f6dc=_0x3acc6d===_0x1ed9e9(0x676)?TextManager['autoBattle']:_0x1ed9e9(0x3d9)[_0x1ed9e9(0x9ec)](_0x26efa0,TextManager[_0x1ed9e9(0x506)]),_0x37a08d=this[_0x1ed9e9(0x4f0)]();this[_0x1ed9e9(0xb67)](_0x49f6dc,_0x1ed9e9(0x506),_0x37a08d);},Window_ActorCommand[_0x45cef8(0x3cf)][_0x45cef8(0x4f0)]=function(){return!![];},Window_ActorCommand['prototype']['itemTextAlign']=function(){const _0x4b18cd=_0x45cef8;return VisuMZ[_0x4b18cd(0x6c0)][_0x4b18cd(0x658)][_0x4b18cd(0x4d0)][_0x4b18cd(0x50e)];},Window_ActorCommand[_0x45cef8(0x3cf)][_0x45cef8(0xad3)]=function(_0xd7b396){const _0x403f8d=_0x45cef8,_0x3b5402=this['commandStyleCheck'](_0xd7b396);if(_0x3b5402===_0x403f8d(0x911))this[_0x403f8d(0x7b6)](_0xd7b396);else _0x3b5402==='icon'?this['drawItemStyleIcon'](_0xd7b396):Window_Command[_0x403f8d(0x3cf)][_0x403f8d(0xad3)][_0x403f8d(0xa07)](this,_0xd7b396);this[_0x403f8d(0x82e)](_0xd7b396);},Window_ActorCommand[_0x45cef8(0x3cf)]['commandStyle']=function(){const _0xda6fe0=_0x45cef8;return VisuMZ[_0xda6fe0(0x6c0)][_0xda6fe0(0x658)][_0xda6fe0(0x4d0)][_0xda6fe0(0x960)];},Window_ActorCommand[_0x45cef8(0x3cf)][_0x45cef8(0x7fa)]=function(_0x303d15){const _0x370836=_0x45cef8;if(_0x303d15<0x0)return _0x370836(0x676);const _0x40254c=this['commandStyle']();if(_0x40254c!==_0x370836(0xc08))return _0x40254c;else{if(this[_0x370836(0x468)]()>0x0){const _0x347254=this[_0x370836(0x75c)](_0x303d15);if(_0x347254['match'](/\\I\[(\d+)\]/i)){if(_0x370836(0x64a)==='VjFEu'){const _0x4df7b3=this[_0x370836(0x745)](_0x303d15),_0x56035d=this['textSizeEx'](_0x347254)[_0x370836(0x639)];return _0x56035d<=_0x4df7b3[_0x370836(0x639)]?_0x370836(0x911):_0x370836(0xac4)!==_0x370836(0x429)?_0x370836(0x980):this[_0x370836(0x601)](_0x5adfec);}else{if(!_0x5db84e)return;const _0x5aafc6=new _0x47061c();this[_0x370836(0x8d1)](_0x5aafc6),_0x5aafc6[_0x370836(0x2ca)](_0x7ce6ea);}}}}return _0x370836(0x676);},Window_ActorCommand['prototype'][_0x45cef8(0x7b6)]=function(_0x3b777e){const _0x5145a0=_0x45cef8,_0x11a91c=this[_0x5145a0(0x745)](_0x3b777e),_0x226d94=this[_0x5145a0(0x75c)](_0x3b777e),_0x98812f=this[_0x5145a0(0x574)](_0x226d94)[_0x5145a0(0x639)];this[_0x5145a0(0x8fd)](this[_0x5145a0(0xcaf)](_0x3b777e));const _0x4374e8=this[_0x5145a0(0x746)]();if(_0x4374e8===_0x5145a0(0xb7c))this['drawTextEx'](_0x226d94,_0x11a91c['x']+_0x11a91c['width']-_0x98812f,_0x11a91c['y'],_0x98812f);else{if(_0x4374e8===_0x5145a0(0xace)){if('nWknN'===_0x5145a0(0x30c)){this[_0x5145a0(0x901)]=_0x3e8e9b;const _0x57f361=this[_0x5145a0(0xd00)](),_0x2cf5be=this[_0x5145a0(0x944)](),_0x4e0f87=_0x115c64[_0x5145a0(0x3cf)][_0x5145a0(0x473)]();this[_0x5145a0(0x460)](),this[_0x5145a0(0xaaa)][_0x5145a0(0x6db)](),this['bitmap'][_0x5145a0(0x894)](_0x57f361,0x0,0x0,_0x2cf5be,_0x4e0f87,'center');}else{const _0x5a09ea=_0x11a91c['x']+Math['floor']((_0x11a91c[_0x5145a0(0x639)]-_0x98812f)/0x2);this[_0x5145a0(0x72b)](_0x226d94,_0x5a09ea,_0x11a91c['y'],_0x98812f);}}else this[_0x5145a0(0x72b)](_0x226d94,_0x11a91c['x'],_0x11a91c['y'],_0x98812f);}},Window_ActorCommand['prototype'][_0x45cef8(0x3ae)]=function(_0x52154a){const _0x806c4d=_0x45cef8;this['commandName'](_0x52154a)[_0x806c4d(0x291)](/\\I\[(\d+)\]/i);const _0x39d43d=Number(RegExp['$1'])||0x0,_0x43b360=this[_0x806c4d(0x745)](_0x52154a),_0x3c7ea0=_0x43b360['x']+Math['floor']((_0x43b360[_0x806c4d(0x639)]-ImageManager[_0x806c4d(0x927)])/0x2),_0x1f038a=_0x43b360['y']+(_0x43b360[_0x806c4d(0xa2a)]-ImageManager['iconHeight'])/0x2;this[_0x806c4d(0x8a8)](_0x39d43d,_0x3c7ea0,_0x1f038a);},Window_ActorCommand['prototype'][_0x45cef8(0x82e)]=function(_0x24c34a){const _0x47628e=_0x45cef8;if(!(VisuMZ[_0x47628e(0x6c0)][_0x47628e(0x658)][_0x47628e(0x4d0)][_0x47628e(0xa1d)]??!![]))return;const _0xc370d2=this[_0x47628e(0x562)](_0x24c34a);if(![_0x47628e(0x71e),_0x47628e(0x663),_0x47628e(0xa7c)][_0x47628e(0x2b1)](_0xc370d2))return;const _0x4cb84d=this[_0x47628e(0x745)](_0x24c34a);let _0x3f82f0=null;if(_0xc370d2===_0x47628e(0x71e))_0x3f82f0=$dataSkills[this[_0x47628e(0x318)][_0x47628e(0x202)]()];else{if(_0xc370d2===_0x47628e(0x663)){if('ZXjCw'===_0x47628e(0x33d))_0x3f82f0=$dataSkills[this[_0x47628e(0x318)][_0x47628e(0xa23)]()];else{const _0xaa6b2=_0x13c8ec[_0x47628e(0xbfd)];if(_0xaa6b2['match'](_0xd452eb['BattleCore'][_0x47628e(0x32d)][_0x58c53a])){const _0x12dfbd=_0xbaeda5['$1'],_0x2d083d='\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20'[_0x47628e(0x9ec)](_0x12dfbd),_0x3d9c8a=_0x31f834[_0x47628e(0x6c0)]['createKeyJS'](_0x43f8e8,_0x4e8479);_0x319ed3['BattleCore']['JS'][_0x3d9c8a]=new _0x56a5f3(_0x2d083d);}}}else _0x3f82f0=$dataSkills[this[_0x47628e(0xcf4)][_0x24c34a][_0x47628e(0x628)]];}this['drawSkillCost'](this[_0x47628e(0x318)],_0x3f82f0,_0x4cb84d['x'],_0x4cb84d['y'],_0x4cb84d[_0x47628e(0x639)]);},Window_ActorCommand['prototype'][_0x45cef8(0x203)]=function(_0x2f62d5,_0x1a4075,_0x51371b,_0x306f3a,_0x4f79ed){const _0x26a27b=_0x45cef8;if(!_0x1a4075)return;if(Imported[_0x26a27b(0x687)])Window_Command[_0x26a27b(0x3cf)]['drawSkillCost'][_0x26a27b(0xa07)](this,_0x2f62d5,_0x1a4075,_0x51371b,_0x306f3a,_0x4f79ed);else{if(_0x26a27b(0xa54)!==_0x26a27b(0xa54)){const _0x3f1256=_0x7a4ed5['_scene'][_0x26a27b(0x350)];if(_0x3f1256)_0x3f1256[_0x26a27b(0x696)](_0xfb2099,this[_0x26a27b(0xa87)]);}else Window_SkillList[_0x26a27b(0x3cf)][_0x26a27b(0x203)][_0x26a27b(0xa07)](this,_0x1a4075,_0x51371b,_0x306f3a,_0x4f79ed);}},Window_ActorCommand[_0x45cef8(0x3cf)][_0x45cef8(0x939)]=function(){},Window_ActorCommand[_0x45cef8(0x3cf)]['activate']=function(){const _0x3c7617=_0x45cef8;Window_Command[_0x3c7617(0x3cf)][_0x3c7617(0x64b)][_0x3c7617(0xa07)](this);const _0x5bb0c4=this[_0x3c7617(0x6e8)]();_0x5bb0c4==='border'&&this[_0x3c7617(0x9cd)]();},Window_ActorCommand['prototype']['battleLayoutStyle']=function(){const _0x53ef21=_0x45cef8;if(this[_0x53ef21(0x3f1)])return this['_battleLayoutStyle'];return this[_0x53ef21(0x3f1)]=SceneManager[_0x53ef21(0x9e2)][_0x53ef21(0x6e8)](),this[_0x53ef21(0x3f1)];},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x440)]=Window_ActorCommand['prototype'][_0x45cef8(0x74e)],Window_ActorCommand[_0x45cef8(0x3cf)][_0x45cef8(0x74e)]=function(_0x4220c6){const _0x5df3c8=_0x45cef8,_0xb5d89d=this[_0x5df3c8(0x6e8)]();if(_0x4220c6&&['xp',_0x5df3c8(0x4b4)][_0x5df3c8(0x2b1)](_0xb5d89d))this[_0x5df3c8(0xbbe)](_0x4220c6);else _0x4220c6&&[_0x5df3c8(0x6b2)][_0x5df3c8(0x2b1)](_0xb5d89d)&&('IwAvi'===_0x5df3c8(0x89f)?(this['resizeWindowBorderStyle'](_0x4220c6),this[_0x5df3c8(0x9cd)]()):_0x3cab05[_0x5df3c8(0x939)]());VisuMZ['BattleCore'][_0x5df3c8(0x440)][_0x5df3c8(0xa07)](this,_0x4220c6),_0x4220c6&&$gameTroop['aliveMembers']()[_0x5df3c8(0xcc5)]>0x0&&_0x4220c6[_0x5df3c8(0x231)]()&&(_0x5df3c8(0x3c5)==='AgIex'?_0x4220c6[_0x5df3c8(0x231)]()[_0x5df3c8(0x668)]():(this[_0x5df3c8(0x2a9)]=_0x276267[_0x5df3c8(0x3de)]>=0x0?0x0:0x1,this[_0x5df3c8(0x78b)](_0x4a25ab[_0x5df3c8(0x3de)])));},Window_ActorCommand[_0x45cef8(0x3cf)][_0x45cef8(0xbbe)]=function(_0x204557){const _0x4fec2e=_0x45cef8,_0xb320be=Math[_0x4fec2e(0x365)](Graphics[_0x4fec2e(0xa5d)]/0x3),_0x438f49=Math['round'](Graphics[_0x4fec2e(0xa5d)]/$gameParty['battleMembers']()[_0x4fec2e(0xcc5)]),_0x4a3025=Math[_0x4fec2e(0x582)](_0xb320be,_0x438f49),_0x2677c2=this[_0x4fec2e(0x9d8)](VisuMZ[_0x4fec2e(0x6c0)][_0x4fec2e(0x658)]['BattleLayout'][_0x4fec2e(0x88d)]),_0x1477bb=Math['round'](_0x438f49*_0x204557[_0x4fec2e(0x5ef)]())+Math[_0x4fec2e(0x365)]((_0x438f49-_0x4a3025)/0x2),_0x3a7209=Math[_0x4fec2e(0x365)](SceneManager[_0x4fec2e(0x9e2)][_0x4fec2e(0x350)]['y']-_0x2677c2);this[_0x4fec2e(0x483)](_0x1477bb,_0x3a7209,_0x4a3025,_0x2677c2),this['createContents'](),this[_0x4fec2e(0x5de)](0x1);},Window_ActorCommand[_0x45cef8(0x3cf)]['resizeWindowBorderStyle']=function(_0xe89e10){const _0x4566a1=_0x45cef8,_0x46f0b3=SceneManager[_0x4566a1(0x9e2)][_0x4566a1(0x1d7)]();this[_0x4566a1(0x483)](_0x46f0b3['x'],_0x46f0b3['y'],_0x46f0b3[_0x4566a1(0x639)],_0x46f0b3['height']),this['createContents'](),this[_0x4566a1(0x5de)](0x0);},Window_ActorCommand[_0x45cef8(0x3cf)][_0x45cef8(0x439)]=function(){const _0x12db1f=_0x45cef8;if(this[_0x12db1f(0x44f)]){const _0x162a16=this[_0x12db1f(0x44f)][_0x12db1f(0xaaa)],_0x219fa1=this[_0x12db1f(0x639)]-0x8,_0x38cb7d=this[_0x12db1f(0xa2a)],_0x40bf7c=this[_0x12db1f(0x4fc)],_0x39e57f=ColorManager[_0x12db1f(0x276)](),_0x4387b1=ColorManager[_0x12db1f(0x680)]();this['_dimmerSprite']['x']=0x4,_0x162a16[_0x12db1f(0x49f)](_0x219fa1,_0x38cb7d),_0x162a16[_0x12db1f(0x6ac)](0x0,0x0,_0x219fa1,_0x40bf7c,_0x4387b1,_0x39e57f,!![]),_0x162a16[_0x12db1f(0x467)](0x0,_0x40bf7c,_0x219fa1,_0x38cb7d-_0x40bf7c*0x2,_0x39e57f),_0x162a16[_0x12db1f(0x6ac)](0x0,_0x38cb7d-_0x40bf7c,_0x219fa1,_0x40bf7c,_0x39e57f,_0x4387b1,!![]),this[_0x12db1f(0x44f)][_0x12db1f(0x2dd)](0x0,0x0,_0x219fa1,_0x38cb7d);}},Window_ActorCommand['prototype'][_0x45cef8(0x820)]=function(){const _0x4996b1=_0x45cef8;if(!this['_actor'])return;const _0x4cc6fa=VisuMZ[_0x4996b1(0x6c0)]['Settings'][_0x4996b1(0x4d0)],_0x1b65dd=this['currentSymbol']();switch(_0x1b65dd){case'attack':this[_0x4996b1(0x770)]($dataSkills[this[_0x4996b1(0x318)]['attackSkillId']()]);break;case _0x4996b1(0x663):this[_0x4996b1(0x770)]($dataSkills[this[_0x4996b1(0x318)][_0x4996b1(0xa23)]()]);break;case _0x4996b1(0x5f5):const _0x5c331a=_0x4cc6fa[_0x4996b1(0x2c4)],_0x62ff74=_0x5c331a[_0x4996b1(0x9ec)]($dataSystem[_0x4996b1(0xbda)][this[_0x4996b1(0x46c)]()]);this[_0x4996b1(0x652)][_0x4996b1(0x9a4)](_0x62ff74);break;case'singleSkill':this[_0x4996b1(0x770)]($dataSkills[this[_0x4996b1(0x46c)]()]);break;case _0x4996b1(0x3a4):this['_helpWindow'][_0x4996b1(0x9a4)](_0x4cc6fa[_0x4996b1(0xbcd)]);break;case _0x4996b1(0x520):this[_0x4996b1(0x652)][_0x4996b1(0x9a4)](_0x4cc6fa['HelpEscape']);break;case'autoBattle':this[_0x4996b1(0x652)][_0x4996b1(0x9a4)](_0x4cc6fa[_0x4996b1(0x6ec)]);break;default:this[_0x4996b1(0x652)][_0x4996b1(0x9a4)]('');break;}},Window_ActorCommand['prototype']['selectLast']=function(){const _0x50b87c=_0x45cef8;this[_0x50b87c(0xbe6)](0x0);if(this[_0x50b87c(0x318)]&&ConfigManager[_0x50b87c(0x6e6)]){if(_0x50b87c(0x63e)!==_0x50b87c(0x63e)){if(_0x35b91b[_0x50b87c(0x8be)]())return![];}else{const _0x5b1b10=this[_0x50b87c(0x318)][_0x50b87c(0xb03)]();this['selectSymbol'](_0x5b1b10);if(_0x5b1b10==='skill'){const _0x186f74=this[_0x50b87c(0x318)][_0x50b87c(0x5cd)]();if(_0x186f74){if('KfbkZ'!=='djgrT'){const _0x3f2d25=this['findSymbolExt']('skill',_0x186f74[_0x50b87c(0x785)]);this[_0x50b87c(0x309)](_0x3f2d25||0x0);}else{if(this[_0x50b87c(0x231)]())this[_0x50b87c(0x231)]()['refreshMotion']();}}}else{if(_0x5b1b10===_0x50b87c(0xa7c)){if(_0x50b87c(0x5ff)!=='yBKpe'){const _0x5f3e4c=this[_0x50b87c(0x318)][_0x50b87c(0x5cd)]();if(_0x5f3e4c){const _0x9115e3=this[_0x50b87c(0x7ce)]('singleSkill',_0x5f3e4c['id']);this[_0x50b87c(0x309)](_0x9115e3||0x0);}}else _0x21847f[_0x50b87c(0x6c0)][_0x50b87c(0x547)][_0x50b87c(0xa07)](this),this[_0x50b87c(0x645)](),this[_0x50b87c(0x5d7)]();}}}}},Window_ActorCommand[_0x45cef8(0x3cf)]['findSymbolExt']=function(_0x3edcd9,_0x14b625){const _0x524089=_0x45cef8;return this[_0x524089(0xcf4)][_0x524089(0xcd5)](_0x275e73=>_0x275e73[_0x524089(0xb88)]===_0x3edcd9&&_0x275e73[_0x524089(0x628)]===_0x14b625);},VisuMZ['BattleCore']['Window_BattleStatus_initialize']=Window_BattleStatus[_0x45cef8(0x3cf)][_0x45cef8(0x754)],Window_BattleStatus[_0x45cef8(0x3cf)]['initialize']=function(_0x1bfa83){const _0x5ac01c=_0x45cef8;VisuMZ[_0x5ac01c(0x6c0)][_0x5ac01c(0x2c1)][_0x5ac01c(0xa07)](this,_0x1bfa83),this[_0x5ac01c(0x93f)](),this[_0x5ac01c(0x3e7)]();},Window_BattleStatus[_0x45cef8(0x3cf)][_0x45cef8(0x6e8)]=function(){const _0x54c0d1=_0x45cef8;if(this[_0x54c0d1(0x3f1)])return this[_0x54c0d1(0x3f1)];return this[_0x54c0d1(0x3f1)]=SceneManager['_scene'][_0x54c0d1(0x6e8)](),this[_0x54c0d1(0x3f1)];},Window_BattleStatus[_0x45cef8(0x3cf)]['initBattleCore']=function(){const _0x48527e=_0x45cef8;this[_0x48527e(0x3d1)]=this[_0x48527e(0xb4d)]();const _0x519049=VisuMZ[_0x48527e(0x6c0)][_0x48527e(0x658)]['BattleLayout'];_0x519049[_0x48527e(0x631)]&&(_0x48527e(0x4c0)!=='Vvdqg'?this['opacity']=0x0:_0x410eea[_0x48527e(0x366)]=![]);},Window_BattleStatus[_0x45cef8(0x3cf)]['isFrameVisible']=function(){const _0x2c6018=_0x45cef8,_0x487531=VisuMZ[_0x2c6018(0x6c0)]['Settings']['BattleLayout'];if(_0x487531[_0x2c6018(0x615)]){if(_0x2c6018(0x762)==='RWhmC')return!![];else this[_0x2c6018(0x627)](),this[_0x2c6018(0x886)]();}const _0x4193db=this[_0x2c6018(0x6e8)]();switch(_0x4193db){case _0x2c6018(0xa0f):case _0x2c6018(0x6b2):return!![];break;case _0x2c6018(0x991):case'xp':case _0x2c6018(0x4b4):default:return![];break;}},Window_BattleStatus['prototype']['extraHeight']=function(){const _0x3818ff=_0x45cef8;if(this['isFrameVisible']()){if(_0x3818ff(0x5df)!==_0x3818ff(0x5df)){_0x4fb6f1[_0x3818ff(0x3cf)][_0x3818ff(0x64b)][_0x3818ff(0xa07)](this);const _0x33e516=this[_0x3818ff(0x6e8)]();_0x33e516==='border'&&this[_0x3818ff(0x9cd)]();}else return 0x0;}else return 0xa;},Window_BattleStatus['prototype']['maxCols']=function(){const _0x469df9=_0x45cef8,_0x590939=this[_0x469df9(0x6e8)]();switch(_0x590939){case _0x469df9(0xa0f):return 0x1;break;case'xp':case _0x469df9(0x4b4):return $gameParty['battleMembers']()[_0x469df9(0xcc5)];break;case _0x469df9(0x991):default:return $gameParty['maxBattleMembers']();break;}},Window_BattleStatus[_0x45cef8(0x3cf)][_0x45cef8(0xba5)]=function(){const _0x4ee78c=_0x45cef8,_0x3814a3=this[_0x4ee78c(0x6e8)]();switch(_0x3814a3){case _0x4ee78c(0xa0f):return Window_StatusBase[_0x4ee78c(0x3cf)][_0x4ee78c(0xba5)][_0x4ee78c(0xa07)](this);break;case _0x4ee78c(0x991):case'xp':case'portrait':default:return this[_0x4ee78c(0x267)];break;}},Window_BattleStatus[_0x45cef8(0x3cf)][_0x45cef8(0x359)]=function(){const _0x40d355=_0x45cef8,_0x43df0d=this[_0x40d355(0x6e8)]();switch(_0x43df0d){case _0x40d355(0xa0f):return Window_StatusBase[_0x40d355(0x3cf)][_0x40d355(0x359)][_0x40d355(0xa07)](this);break;case _0x40d355(0x991):case'xp':case'portrait':default:return 0x0;break;}},Window_BattleStatus[_0x45cef8(0x3cf)][_0x45cef8(0x580)]=function(){const _0x4fdc49=_0x45cef8;this[_0x4fdc49(0xb4d)]()?Window_StatusBase[_0x4fdc49(0x3cf)]['updatePadding']['call'](this):this[_0x4fdc49(0x4fc)]=0x8;},Window_BattleStatus[_0x45cef8(0x3cf)]['loadWindowskin']=function(){const _0x28aa49=_0x45cef8,_0x3fe3ea=VisuMZ[_0x28aa49(0x6c0)][_0x28aa49(0x658)][_0x28aa49(0x5be)];if(_0x3fe3ea[_0x28aa49(0x615)]){if(_0x28aa49(0xa4a)==='RuwDZ'){if(!_0x843750[_0x28aa49(0x279)])return;const _0x1f814d=_0x19e600[_0x28aa49(0x9e2)][_0x28aa49(0x78d)];if(!_0x1f814d)return;if(_0x25a134[_0x28aa49(0x997)][_0x28aa49(0x2a2)]<=1.04){_0x5f7a68(_0x28aa49(0x603)),_0x35c455[_0x28aa49(0xa50)]();return;}_0x1f3b0d['ConvertParams'](_0x14e5ba,_0x13b9b0);const _0x3975a5=_0x3a50d5[_0x28aa49(0xaf3)](),_0x267c73=_0x52fe76[_0x28aa49(0x2ce)](0.01,_0x1b5c38[_0x28aa49(0xc19)]);_0x3d4d03['setBattleImpactTimeScale'](_0x267c73,_0x3975a5);}else this[_0x28aa49(0xb7e)]=ImageManager[_0x28aa49(0x804)](_0x3fe3ea[_0x28aa49(0x615)]);}else Window_StatusBase[_0x28aa49(0x3cf)][_0x28aa49(0x59f)][_0x28aa49(0xa07)](this);},Window_BattleStatus[_0x45cef8(0x3cf)]['drawItemBackground']=function(_0x11c760){const _0x2098ea=_0x45cef8,_0x435a38=VisuMZ[_0x2098ea(0x6c0)]['Settings']['BattleLayout'];if(_0x435a38['StatusWindowSelectableBackHide'])return;Window_StatusBase[_0x2098ea(0x3cf)][_0x2098ea(0x263)][_0x2098ea(0xa07)](this,_0x11c760);},Window_BattleStatus[_0x45cef8(0x3cf)][_0x45cef8(0xcc0)]=function(){const _0x4cbca1=_0x45cef8;this[_0x4cbca1(0x692)]=!![];},Window_BattleStatus[_0x45cef8(0x3cf)][_0x45cef8(0x3b2)]=function(){const _0x3448c3=_0x45cef8;Window_StatusBase[_0x3448c3(0x3cf)][_0x3448c3(0x3b2)][_0x3448c3(0xa07)](this),this['updateRefresh'](),this[_0x3448c3(0x6c1)]();if(this['battleLayoutStyle']()===_0x3448c3(0x6b2))this['updateBorderStyle']();},Window_BattleStatus[_0x45cef8(0x3cf)]['updateRefresh']=function(){const _0x7ca350=_0x45cef8;if($gameTemp[_0x7ca350(0x890)]())this['preparePartyRefresh'](),this[_0x7ca350(0x692)]=![],$gameTemp[_0x7ca350(0x548)]();else this['_requestRefresh']&&(this[_0x7ca350(0x692)]=![],this[_0x7ca350(0x807)](),this['updateAttachmentSprites']());},Window_BattleStatus[_0x45cef8(0x3cf)]['show']=function(){const _0xf1ea3d=_0x45cef8;Window_StatusBase[_0xf1ea3d(0x3cf)][_0xf1ea3d(0xd10)][_0xf1ea3d(0xa07)](this);if(!$gameSystem[_0xf1ea3d(0xc02)]())this['refresh']();},Window_BattleStatus[_0x45cef8(0x3cf)]['hide']=function(){const _0x43e500=_0x45cef8;if(this['constructor']===Window_BattleStatus)return;Window_StatusBase[_0x43e500(0x3cf)]['hide'][_0x43e500(0xa07)](this);},Window_BattleStatus['prototype']['drawBackgroundRect']=function(_0x4fc12b){const _0x1783fa=_0x45cef8,_0x541bed=this[_0x1783fa(0x6e8)]();switch(_0x541bed){case'xp':case'portrait':break;case _0x1783fa(0x991):case'list':case _0x1783fa(0x6b2):default:return Window_StatusBase[_0x1783fa(0x3cf)][_0x1783fa(0xb44)]['call'](this,_0x4fc12b);break;}},VisuMZ['BattleCore'][_0x45cef8(0x8b8)]=Window_BattleStatus[_0x45cef8(0x3cf)][_0x45cef8(0x20a)],Window_BattleStatus[_0x45cef8(0x3cf)]['drawItemImage']=function(_0x4aed5a){const _0xa4ea29=_0x45cef8,_0x3536c6=this[_0xa4ea29(0x6e8)]();switch(_0x3536c6){case _0xa4ea29(0xa0f):this[_0xa4ea29(0xb70)](_0x4aed5a);break;case'xp':this[_0xa4ea29(0x97d)](_0x4aed5a);break;case'portrait':this[_0xa4ea29(0xa0a)](_0x4aed5a);break;case _0xa4ea29(0x991):case _0xa4ea29(0x6b2):default:VisuMZ[_0xa4ea29(0x6c0)][_0xa4ea29(0x8b8)][_0xa4ea29(0xa07)](this,_0x4aed5a);break;}},Window_BattleStatus[_0x45cef8(0x3cf)][_0x45cef8(0x9c7)]=function(_0x25710c){const _0x16fb55=_0x45cef8,_0x4b3feb=this[_0x16fb55(0x6e8)]();if(!$gameSystem[_0x16fb55(0xc02)]())this[_0x16fb55(0x4c2)](_0x25710c);switch(_0x4b3feb){case _0x16fb55(0xa0f):this[_0x16fb55(0x4cb)](_0x25710c);break;case'xp':case _0x16fb55(0x4b4):case _0x16fb55(0x991):case _0x16fb55(0x6b2):default:this['drawItemStatusXPStyle'](_0x25710c);break;}},Window_BattleStatus[_0x45cef8(0x3cf)]['refreshCursor']=function(){const _0x111b6e=_0x45cef8,_0x5e5970=this[_0x111b6e(0x6e8)]();if(['xp'][_0x111b6e(0x2b1)](_0x5e5970)&&!$gameSystem[_0x111b6e(0xc02)]()){this[_0x111b6e(0x695)](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x111b6e(0x3cf)][_0x111b6e(0xcea)][_0x111b6e(0xa07)](this);},Window_BattleStatus['prototype'][_0x45cef8(0x4c2)]=function(_0x28f617){const _0x3edec6=_0x45cef8,_0x20a1c7=this[_0x3edec6(0x4d4)](_0x28f617)['battler']();if(!_0x20a1c7)return;const _0x47182d=this[_0x3edec6(0x6e8)](),_0x147626=this['itemRect'](_0x28f617);let _0x38d2fb=Math['round'](_0x147626['x']+_0x147626['width']/0x2)+this[_0x3edec6(0x4fc)];if(['list'][_0x3edec6(0x2b1)](_0x47182d)){if(_0x3edec6(0x90f)!=='cBrpI'){if(!this[_0x3edec6(0xa87)][_0x3edec6(0xada)]())return;const _0x4a8e81=_0x3ef8c9[_0x3edec6(0x6c0)]['Settings'][_0x3edec6(0x28b)],_0xa94e1f=new _0x51a16f();_0xa94e1f[_0x3edec6(0x9df)]=_0x4a8e81['PopupDuration'],this[_0x3edec6(0xca2)](_0xa94e1f),_0xa94e1f[_0x3edec6(0x9c5)](_0xe50f5e,_0x105a9d,_0x5f658d),this[_0x3edec6(0x696)](_0xa94e1f);}else _0x38d2fb=_0x147626[_0x3edec6(0x639)]/$gameParty['battleMembers']()['length'],_0x38d2fb*=_0x28f617,_0x38d2fb+=_0x147626[_0x3edec6(0x639)]/$gameParty['battleMembers']()[_0x3edec6(0xcc5)]/0x2;}let _0x21fb8f=Math[_0x3edec6(0x365)](this[_0x3edec6(0x38c)](_0x28f617,_0x20a1c7,_0x147626));_0x20a1c7['setHome'](_0x38d2fb,_0x21fb8f),this['addChildAt'](_0x20a1c7,0x1),_0x20a1c7[_0x3edec6(0xd10)](),this[_0x3edec6(0x839)](),this[_0x3edec6(0xab3)]();},Window_BattleStatus[_0x45cef8(0x3cf)][_0x45cef8(0x38c)]=function(_0x31630d,_0x2a4873,_0x4c2304){const _0x22f0a1=_0x45cef8,_0x4f38b9=VisuMZ[_0x22f0a1(0x6c0)][_0x22f0a1(0x658)][_0x22f0a1(0x5be)],_0x2618f0=this[_0x22f0a1(0x6e8)]();if(_0x2618f0==='xp'){const _0x449595=_0x4f38b9[_0x22f0a1(0x7fe)];switch(_0x449595[_0x22f0a1(0xa5b)]()[_0x22f0a1(0x7f3)]()){case _0x22f0a1(0x69e):return _0x4c2304[_0x22f0a1(0xa2a)]-_0x2a4873[_0x22f0a1(0x532)][_0x22f0a1(0xa2a)]/0x4;break;case _0x22f0a1(0xace):const _0xb905e6=_0x4f38b9[_0x22f0a1(0x336)];return(_0x4c2304[_0x22f0a1(0xa2a)]+(_0x2a4873[_0x22f0a1(0xa2a)]||_0xb905e6))/0x2;break;case'top':return 0x0;case _0x22f0a1(0xd00):default:return this[_0x22f0a1(0xabe)](_0x4c2304);break;}}else{if(_0x2618f0===_0x22f0a1(0x4b4)){}}return _0x2a4873[_0x22f0a1(0xa2a)];},Sprite_Name['prototype'][_0x45cef8(0xa44)]=function(){return 0x24;},Sprite_Name['prototype'][_0x45cef8(0xcf6)]=function(){const _0xf6573f=_0x45cef8,_0x48c3bf=this[_0xf6573f(0xd00)](),_0x4eea4f=this[_0xf6573f(0x944)](),_0x3bbbf2=this[_0xf6573f(0xa44)]();this['setupFont'](),this[_0xf6573f(0xaaa)][_0xf6573f(0x6db)](),this[_0xf6573f(0xaaa)]['drawTextTopAligned'](_0x48c3bf,0x4,0x0,_0x4eea4f,_0x3bbbf2,_0xf6573f(0x322));},Bitmap['prototype'][_0x45cef8(0x549)]=function(_0x3e1247,_0xfce1a5,_0x3b5162,_0x43e475,_0x13d725,_0x1fbc5f){const _0x5a508b=_0x45cef8,_0x5db2db=this[_0x5a508b(0x7ff)],_0x57628b=_0x5db2db[_0x5a508b(0x27f)];_0x43e475=_0x43e475||0xffffffff;let _0xaca78=_0xfce1a5,_0x2717c1=Math['round'](_0x3b5162+0x18/0x2+this[_0x5a508b(0x47a)]*0.35);_0x1fbc5f===_0x5a508b(0xace)&&(_0xaca78+=_0x43e475/0x2);if(_0x1fbc5f==='right'){if(_0x5a508b(0x65c)==='uFfey')_0xaca78+=_0x43e475;else{if(_0x55cf87>_0x2f6451['_baseX'])_0x347bac=!![];if(_0x16bc7d<_0x72f88c[_0x5a508b(0x3c6)])_0x4d1249=![];}}_0x5db2db['save'](),_0x5db2db[_0x5a508b(0x647)]=this[_0x5a508b(0xb7b)](),_0x5db2db[_0x5a508b(0xa3f)]=_0x1fbc5f,_0x5db2db[_0x5a508b(0x755)]=_0x5a508b(0x255),_0x5db2db['globalAlpha']=0x1,this[_0x5a508b(0x209)](_0x3e1247,_0xaca78,_0x2717c1,_0x43e475),_0x5db2db[_0x5a508b(0x27f)]=_0x57628b,this[_0x5a508b(0x334)](_0x3e1247,_0xaca78,_0x2717c1,_0x43e475),_0x5db2db[_0x5a508b(0x551)](),this[_0x5a508b(0xcd3)][_0x5a508b(0x3b2)]();},Window_BattleStatus[_0x45cef8(0x3cf)]['nameY']=function(_0x1e7b79){const _0x5add9c=_0x45cef8;return this[_0x5add9c(0x3f3)](_0x1e7b79)-this[_0x5add9c(0x498)]();},Window_BattleStatus[_0x45cef8(0x3cf)][_0x45cef8(0xb70)]=function(_0x4b153b){const _0x467690=_0x45cef8;if(!VisuMZ[_0x467690(0x6c0)][_0x467690(0x658)][_0x467690(0x5be)][_0x467690(0x7dd)])return;const _0x2c05f2=this[_0x467690(0x4d4)](_0x4b153b),_0x3ede0b=this[_0x467690(0x9f2)](_0x4b153b);_0x3ede0b[_0x467690(0x639)]=ImageManager[_0x467690(0x4e6)],_0x3ede0b['height']-=0x2,this['drawActorFace'](_0x2c05f2,_0x3ede0b['x']+0x1,_0x3ede0b['y']+0x1,_0x3ede0b[_0x467690(0x639)],_0x3ede0b[_0x467690(0xa2a)]);},Window_BattleStatus[_0x45cef8(0x3cf)][_0x45cef8(0x4cb)]=function(_0x3c6099){const _0x103ae9=_0x45cef8,_0x1ae793=VisuMZ[_0x103ae9(0x6c0)]['Settings'][_0x103ae9(0x5be)],_0x1be140=$dataSystem['optDisplayTp']?0x4:0x3,_0x1c17c3=_0x1be140*0x80+(_0x1be140-0x1)*0x8+0x4,_0x13c5a1=this[_0x103ae9(0x4d4)](_0x3c6099),_0x3588c2=this['itemRect'](_0x3c6099);let _0x5cd849=_0x3588c2['x']+this['padding'];_0x1ae793[_0x103ae9(0x7dd)]?_0x5cd849=_0x3588c2['x']+ImageManager[_0x103ae9(0x4e6)]+0x8:_0x5cd849+=ImageManager[_0x103ae9(0x927)];const _0x5aa821=Math['round'](Math[_0x103ae9(0x582)](_0x3588c2['x']+_0x3588c2[_0x103ae9(0x639)]-_0x1c17c3,_0x5cd849)),_0x12c700=Math['round'](_0x3588c2['y']+(_0x3588c2[_0x103ae9(0xa2a)]-Sprite_Name[_0x103ae9(0x3cf)][_0x103ae9(0xa44)]())/0x2),_0x3b37a1=Math[_0x103ae9(0x365)](_0x5aa821-ImageManager[_0x103ae9(0x927)]/0x2-0x4),_0x525c1e=Math[_0x103ae9(0x365)](_0x3588c2['y']+(_0x3588c2[_0x103ae9(0xa2a)]-ImageManager['iconHeight'])/0x2+ImageManager[_0x103ae9(0x34a)]/0x2);let _0x24182b=_0x5aa821+0x88;const _0x2157f7=_0x12c700;this[_0x103ae9(0x72a)](_0x13c5a1,_0x5aa821-0x4+(_0x1ae793['TpbGaugeOffsetX']||0x0),_0x12c700+(_0x1ae793[_0x103ae9(0x9a5)]||0x0)),this['placeActorName'](_0x13c5a1,_0x5aa821+(_0x1ae793[_0x103ae9(0x2b2)]||0x0),_0x12c700+(_0x1ae793[_0x103ae9(0x612)]||0x0)),this['placeStateIcon'](_0x13c5a1,_0x3b37a1+(_0x1ae793[_0x103ae9(0x1e6)]||0x0),_0x525c1e+(_0x1ae793['StateIconOffsetY']||0x0)),this[_0x103ae9(0x945)](_0x13c5a1,'hp',_0x24182b+0x88*0x0+(_0x1ae793[_0x103ae9(0x7a7)]||0x0),_0x2157f7+(_0x1ae793['HpGaugeOffsetY']||0x0)),this[_0x103ae9(0x945)](_0x13c5a1,'mp',_0x24182b+0x88*0x1+(_0x1ae793[_0x103ae9(0x3e9)]||0x0),_0x2157f7+(_0x1ae793['MpGaugeOffsetY']||0x0));if($dataSystem['optDisplayTp']){if(_0x103ae9(0x89a)==='iavgX'){const _0x3ecedb=this[_0x103ae9(0xa41)][_0x103ae9(0xac5)](this[_0x103ae9(0xaf1)]);this['forceSelect'](_0x3ecedb);}else this[_0x103ae9(0x945)](_0x13c5a1,'tp',_0x24182b+0x88*0x2+(_0x1ae793['TpGaugeOffsetX']||0x0),_0x2157f7+(_0x1ae793[_0x103ae9(0x361)]||0x0));}},Window_BattleStatus[_0x45cef8(0x3cf)]['drawItemImageXPStyle']=function(_0x4dfe01){const _0x434f50=_0x45cef8;if(!$gameSystem[_0x434f50(0xc02)]())return;VisuMZ['BattleCore'][_0x434f50(0x8b8)][_0x434f50(0xa07)](this,_0x4dfe01);},Window_BattleStatus[_0x45cef8(0x3cf)][_0x45cef8(0x95a)]=function(_0x5ce841){const _0x4e5ee9=_0x45cef8,_0x186e41=VisuMZ['BattleCore'][_0x4e5ee9(0x658)][_0x4e5ee9(0x5be)],_0x9a7a1a=this['actor'](_0x5ce841),_0x4596ca=this[_0x4e5ee9(0x9f2)](_0x5ce841),_0x6acf6c=Math['round'](_0x4596ca['x']+(_0x4596ca[_0x4e5ee9(0x639)]-0x80)/0x2),_0x5996d6=this['nameY'](_0x4596ca);let _0x486574=_0x6acf6c-ImageManager[_0x4e5ee9(0x927)]/0x2-0x4,_0x1cfd34=_0x5996d6+ImageManager['iconHeight']/0x2;_0x486574-ImageManager[_0x4e5ee9(0x927)]/0x2<_0x4596ca['x']&&(_0x486574=_0x6acf6c+ImageManager[_0x4e5ee9(0x927)]/0x2-0x4,_0x1cfd34=_0x5996d6-ImageManager['iconHeight']/0x2);const _0x437ab1=_0x6acf6c,_0x39f95e=this[_0x4e5ee9(0x3f3)](_0x4596ca);this[_0x4e5ee9(0x72a)](_0x9a7a1a,_0x6acf6c+(_0x186e41[_0x4e5ee9(0xc4c)]||0x0),_0x5996d6+(_0x186e41[_0x4e5ee9(0x9a5)]||0x0)),this[_0x4e5ee9(0xc88)](_0x9a7a1a,_0x6acf6c+(_0x186e41['NameOffsetX']||0x0),_0x5996d6+(_0x186e41[_0x4e5ee9(0x612)]||0x0)),this[_0x4e5ee9(0x297)](_0x9a7a1a,_0x486574+(_0x186e41[_0x4e5ee9(0x1e6)]||0x0),_0x1cfd34+(_0x186e41[_0x4e5ee9(0x1f9)]||0x0)),this[_0x4e5ee9(0x945)](_0x9a7a1a,'hp',_0x437ab1+(_0x186e41[_0x4e5ee9(0x7a7)]||0x0),_0x39f95e+(_0x186e41[_0x4e5ee9(0xaf8)]||0x0)),this[_0x4e5ee9(0x945)](_0x9a7a1a,'mp',_0x437ab1+(_0x186e41['MpGaugeOffsetX']||0x0),_0x39f95e+this[_0x4e5ee9(0x498)]()+(_0x186e41[_0x4e5ee9(0x6fc)]||0x0)),$dataSystem['optDisplayTp']&&(_0x4e5ee9(0xa21)!=='ICeqW'?this['placeGauge'](_0x9a7a1a,'tp',_0x437ab1+(_0x186e41[_0x4e5ee9(0x7df)]||0x0),_0x39f95e+this[_0x4e5ee9(0x498)]()*0x2+(_0x186e41[_0x4e5ee9(0x361)]||0x0)):_0x1329d9['repeats']=_0x3de27[_0x4e5ee9(0x2ce)](0x1,_0x3fcaf1(_0x4bde7c['$1'])));},Window_BattleStatus[_0x45cef8(0x3cf)][_0x45cef8(0x966)]=function(_0x403571){const _0x1ed097=_0x45cef8;if(!VisuMZ['BattleCore'][_0x1ed097(0x658)][_0x1ed097(0x5be)][_0x1ed097(0xb48)])return![];if(_0x403571['getBattlePortrait']())return!![];return Imported[_0x1ed097(0x453)]&&_0x403571[_0x1ed097(0x527)]();},Game_Actor['prototype'][_0x45cef8(0x559)]=function(){const _0x1e5cf7=_0x45cef8;if(this[_0x1e5cf7(0x4d4)]()[_0x1e5cf7(0xbfd)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i)){if(_0x1e5cf7(0x262)!==_0x1e5cf7(0x855))return Number(RegExp['$1']);else{_0x36ca1b('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),_0xe41c31[_0x1e5cf7(0xa50)]();return;}}else{if(this[_0x1e5cf7(0x4d4)]()[_0x1e5cf7(0xbfd)][_0x1e5cf7(0x291)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x45cef8(0x3cf)][_0x45cef8(0x542)]=function(){const _0x28d751=_0x45cef8;if(this[_0x28d751(0x4d4)]()[_0x28d751(0xbfd)][_0x28d751(0x291)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x28d751(0x4d4)]()[_0x28d751(0xbfd)][_0x28d751(0x291)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus['prototype'][_0x45cef8(0xa0a)]=function(_0x1381a5){const _0x253858=_0x45cef8,_0x510766=this[_0x253858(0x4d4)](_0x1381a5);if(this['showPortraits'](_0x510766)){const _0x189f0b=_0x253858(0x613)['format'](_0x510766[_0x253858(0x629)]()),_0x511417=this[_0x253858(0x517)](_0x189f0b,Sprite),_0x1b2b91=_0x510766[_0x253858(0x4d7)]();_0x1b2b91!==''?_0x511417[_0x253858(0xaaa)]=ImageManager[_0x253858(0xbf0)](_0x1b2b91):_0x253858(0x706)!==_0x253858(0x96c)?_0x511417['bitmap']=ImageManager[_0x253858(0x20f)]:(this[_0x253858(0x4b5)][_0x253858(0xaaa)]=_0x275354[_0x253858(0x821)](_0x59ae42),this[_0x253858(0x4b5)]['bitmap'][_0x253858(0x879)](this[_0x253858(0x8d6)]['bind'](this)));const _0x3e33e8=this[_0x253858(0x9f2)](_0x1381a5);_0x511417[_0x253858(0xaca)]['x']=0.5,_0x511417[_0x253858(0xaca)]['y']=0x1;let _0x2c245c=Math['round'](_0x3e33e8['x']+_0x3e33e8[_0x253858(0x639)]/0x2)+this[_0x253858(0x4fc)];_0x2c245c+=_0x510766['getBattlePortraitOffsetX']();let _0x5a9733=Math[_0x253858(0x365)](this[_0x253858(0xa2a)]);_0x5a9733+=_0x510766[_0x253858(0x542)](),_0x511417['move'](_0x2c245c,_0x5a9733);const _0x3b7b15=VisuMZ['BattleCore']['Settings']['BattleLayout']['PortraitScale'];_0x511417[_0x253858(0x4bb)]['x']=_0x3b7b15,_0x511417[_0x253858(0x4bb)]['y']=_0x3b7b15,_0x511417[_0x253858(0xd10)]();}else{const _0x560187=this[_0x253858(0x7ed)](_0x1381a5);this[_0x253858(0x40a)](_0x510766,_0x560187['x'],_0x560187['y'],_0x560187[_0x253858(0x639)],_0x560187[_0x253858(0xa2a)]);}},Window_BattleStatus[_0x45cef8(0x3cf)][_0x45cef8(0x517)]=function(_0x43932b,_0x4a8cd0){const _0x45baaa=_0x45cef8,_0x2ec79b=this['_additionalSprites'];if(_0x2ec79b[_0x43932b])return _0x2ec79b[_0x43932b];else{if(_0x45baaa(0xb35)!=='ivkrz')_0xedd778[_0x45baaa(0x3cf)][_0x45baaa(0xacd)][_0x45baaa(0xa07)](this);else{const _0xfe957f=new _0x4a8cd0();return _0x2ec79b[_0x43932b]=_0xfe957f,this[_0x45baaa(0x6be)](_0xfe957f),this[_0x45baaa(0x6be)](this[_0x45baaa(0x7f7)]),_0xfe957f;}}},Window_BattleStatus[_0x45cef8(0x3cf)]['_createClientArea']=function(){const _0x3952b0=_0x45cef8;this[_0x3952b0(0xc0e)](),this[_0x3952b0(0x915)](),Window_StatusBase['prototype']['_createClientArea'][_0x3952b0(0xa07)](this),this['_createDamageContainer']();},Window_BattleStatus[_0x45cef8(0x3cf)]['_createCursorArea']=function(){const _0x5efd38=_0x45cef8;this['_cursorArea']=new Sprite(),this[_0x5efd38(0x7f7)][_0x5efd38(0x9ce)]=[new PIXI['filters'][(_0x5efd38(0x791))]()],this[_0x5efd38(0x7f7)][_0x5efd38(0x568)]=new Rectangle(),this[_0x5efd38(0x7f7)]['move'](this[_0x5efd38(0x989)],this[_0x5efd38(0x989)]),this['addChild'](this[_0x5efd38(0x7f7)]);},Window_BattleStatus[_0x45cef8(0x3cf)][_0x45cef8(0x915)]=function(){const _0x24ba3e=_0x45cef8;this['_effectsContainer']=new Sprite(),this['addChild'](this[_0x24ba3e(0x686)]);},Window_BattleStatus[_0x45cef8(0x3cf)][_0x45cef8(0x839)]=function(){const _0x2f8431=_0x45cef8;if(this[_0x2f8431(0x686)]){if(_0x2f8431(0x65d)===_0x2f8431(0x65d))this[_0x2f8431(0x5b6)](this['_effectsContainer']);else{const _0x4c8900=_0x178e88(_0x55788b['$1']);this[_0x2f8431(0x42a)](_0x4c8900);}}},Window_BattleStatus[_0x45cef8(0x3cf)][_0x45cef8(0x91e)]=function(){const _0x17fea7=_0x45cef8;this[_0x17fea7(0x63c)]=new Sprite(),this['addChild'](this['_damageContainer']);},Window_BattleStatus[_0x45cef8(0x3cf)][_0x45cef8(0x73b)]=function(){const _0x375d08=_0x45cef8;this[_0x375d08(0x4e8)]=new Sprite();for(let _0x308243=0x0;_0x308243<0x9;_0x308243++){_0x375d08(0x379)!=='FhXoq'?this[_0x375d08(0x30f)]=_0x375d08(0x4b4):this[_0x375d08(0x4e8)][_0x375d08(0x5b6)](new Sprite());}this[_0x375d08(0x7f7)][_0x375d08(0x5b6)](this[_0x375d08(0x4e8)]);},Window_BattleStatus['prototype'][_0x45cef8(0x757)]=function(){const _0x237aad=_0x45cef8;Window_StatusBase[_0x237aad(0x3cf)][_0x237aad(0x757)][_0x237aad(0xa07)](this),this[_0x237aad(0x39b)]();},Window_BattleStatus['prototype'][_0x45cef8(0x39b)]=function(){const _0x240c5a=_0x45cef8,_0x243c60=this[_0x240c5a(0x989)];this['_cursorArea'][_0x240c5a(0x483)](_0x243c60,_0x243c60),this[_0x240c5a(0x7f7)]['x']=_0x243c60-this[_0x240c5a(0x87e)]['x'],this[_0x240c5a(0x7f7)]['y']=_0x243c60-this[_0x240c5a(0x87e)]['y'],this['innerWidth']>0x0&&this[_0x240c5a(0x267)]>0x0?this[_0x240c5a(0x7f7)][_0x240c5a(0xbf1)]=this[_0x240c5a(0x93d)]():this['_cursorArea'][_0x240c5a(0xbf1)]=![];},Window_BattleStatus[_0x45cef8(0x3cf)][_0x45cef8(0x8ab)]=function(){const _0xdeeb92=_0x45cef8;Window_StatusBase['prototype'][_0xdeeb92(0x8ab)][_0xdeeb92(0xa07)](this),this['_updateCursorFilterArea']();},Window_BattleStatus[_0x45cef8(0x3cf)][_0x45cef8(0x58a)]=function(){const _0x3fdf20=_0x45cef8,_0x274ab1=this[_0x3fdf20(0x7f7)][_0x3fdf20(0x7ec)][_0x3fdf20(0x43c)](new Point(0x0,0x0)),_0x8e69ce=this['_cursorArea'][_0x3fdf20(0x568)];_0x8e69ce['x']=_0x274ab1['x']+this[_0x3fdf20(0x87e)]['x'],_0x8e69ce['y']=_0x274ab1['y']+this[_0x3fdf20(0x87e)]['y'],_0x8e69ce['width']=this[_0x3fdf20(0x277)],_0x8e69ce['height']=this['innerHeight'];},Window_BattleStatus[_0x45cef8(0x3cf)][_0x45cef8(0x3d8)]=function(_0x1071dd){const _0x15b94a=_0x45cef8;if(this['battleLayoutStyle']()!==_0x15b94a(0x4b4))return;this[_0x15b94a(0xa0a)](_0x1071dd[_0x15b94a(0x5ef)]());},Window_BattleStatus['prototype'][_0x45cef8(0x696)]=function(_0x50e469,_0x547cb1){const _0x4406f0=_0x45cef8;if(!this[_0x4406f0(0x63c)])return;if(!_0x50e469)return;if(!_0x547cb1)return;const _0x345803=this[_0x4406f0(0x9f2)](_0x547cb1['index']());_0x345803['x']+=_0x345803[_0x4406f0(0x639)]/0x2+this['padding'],_0x50e469['x']=_0x345803['x'],_0x50e469['y']=_0x345803['y'],this[_0x4406f0(0x63c)][_0x4406f0(0x5b6)](_0x50e469);},Window_BattleStatus[_0x45cef8(0x3cf)]['removeDamageSprite']=function(_0x2263f5){const _0x208e0c=_0x45cef8;if(!this['_damageContainer'])return;if(!_0x2263f5)return;this[_0x208e0c(0x63c)]['removeChild'](_0x2263f5);},Window_BattleStatus[_0x45cef8(0x3cf)]['updateBorderStyle']=function(){const _0x5d7689=_0x45cef8;if(!this[_0x5d7689(0x2d0)]())return;if(!this['_borderPortraitSprite'])this[_0x5d7689(0x828)]();this['prepareBorderActor'](),this['updateBorderSprite']();},Window_BattleStatus['prototype']['isBorderStylePortraitShown']=function(){const _0x4eb45d=_0x45cef8;if(this[_0x4eb45d(0x8e2)]!==Window_BattleStatus)return![];if(!SceneManager[_0x4eb45d(0xc83)]())return![];return VisuMZ[_0x4eb45d(0x6c0)][_0x4eb45d(0x658)][_0x4eb45d(0x5be)][_0x4eb45d(0x773)];},Window_BattleStatus['prototype'][_0x45cef8(0x828)]=function(){const _0x70bdae=_0x45cef8;this[_0x70bdae(0x524)]=new Sprite();const _0x13ba7c=SceneManager[_0x70bdae(0x9e2)],_0x26f8d0=_0x13ba7c[_0x70bdae(0x8e0)][_0x70bdae(0xac5)](_0x13ba7c[_0x70bdae(0xadc)]);_0x13ba7c[_0x70bdae(0x302)](this[_0x70bdae(0x524)],_0x26f8d0),this['_borderPortraitSprite'][_0x70bdae(0xaca)]['x']=0.5,this[_0x70bdae(0x524)][_0x70bdae(0xaca)]['y']=0x1;const _0x5045a2=VisuMZ['BattleCore']['Settings']['BattleLayout'][_0x70bdae(0x2df)];this['_borderPortraitSprite'][_0x70bdae(0x4bb)]['x']=_0x5045a2,this['_borderPortraitSprite'][_0x70bdae(0x4bb)]['y']=_0x5045a2,this['_borderPortraitSprite']['y']=this['y']+this[_0x70bdae(0xa2a)],this['_borderPortraitDuration']=0x0;},Window_BattleStatus['prototype'][_0x45cef8(0x7cb)]=function(){const _0x2d19c3=_0x45cef8;this['_borderPortraitSprite'][_0x2d19c3(0xbf1)]=BattleManager[_0x2d19c3(0x660)]();const _0x1bdcfe=BattleManager[_0x2d19c3(0x4d4)]();if(_0x1bdcfe===this['_borderPortraitSprite'][_0x2d19c3(0x4d4)])return;this['_borderPortraitSprite']['actor']=_0x1bdcfe||this[_0x2d19c3(0x524)]['actor'];if(!_0x1bdcfe)return;else{if(_0x1bdcfe[_0x2d19c3(0x4d7)]()===''){this[_0x2d19c3(0x524)][_0x2d19c3(0xaaa)]=ImageManager[_0x2d19c3(0x20f)];return;}else{if(_0x2d19c3(0x5bc)===_0x2d19c3(0x33f))_0x5384c7[_0x2d19c3(0x486)]=![];else{const _0x57a588=ImageManager[_0x2d19c3(0xbf0)](_0x1bdcfe[_0x2d19c3(0x4d7)]());_0x57a588[_0x2d19c3(0x879)](this[_0x2d19c3(0xce8)][_0x2d19c3(0xb9b)](this,_0x57a588));}}}},Window_BattleStatus[_0x45cef8(0x3cf)][_0x45cef8(0xce8)]=function(_0x203bf3){const _0x8cbd5d=_0x45cef8;this['_borderPortraitDuration']=0x14,this[_0x8cbd5d(0x524)][_0x8cbd5d(0xaaa)]=_0x203bf3;SceneManager['_scene'][_0x8cbd5d(0x81e)]()?_0x8cbd5d(0xcce)!==_0x8cbd5d(0xcce)?this['requestMotion'](_0x8cbd5d(0xaff)):(this[_0x8cbd5d(0x524)]['x']=0x0,this['_borderPortraitTargetX']=Math[_0x8cbd5d(0xc7c)](_0x203bf3[_0x8cbd5d(0x639)]/0x2)):(this[_0x8cbd5d(0x524)]['x']=this[_0x8cbd5d(0x639)],this['_borderPortraitTargetX']=this[_0x8cbd5d(0x639)]*0x3/0x4);this['_borderPortraitSprite'][_0x8cbd5d(0xbc0)]=0x0,this['_borderPortraitSprite']['y']=this['y']+this['height'];const _0x44cae3=BattleManager[_0x8cbd5d(0x4d4)]();_0x44cae3&&(_0x8cbd5d(0x2c0)===_0x8cbd5d(0xa7b)?(_0x4ce9e8[_0x8cbd5d(0x3cf)][_0x8cbd5d(0xbd6)][_0x8cbd5d(0xa07)](this),this[_0x8cbd5d(0x8c4)](_0x8cbd5d(0xc46))):(this[_0x8cbd5d(0x946)]+=_0x44cae3[_0x8cbd5d(0x559)](),this[_0x8cbd5d(0x524)]['y']+=_0x44cae3[_0x8cbd5d(0x542)]()));},Window_BattleStatus['prototype'][_0x45cef8(0x4a8)]=function(){const _0x5c6a26=_0x45cef8;if(this[_0x5c6a26(0xb6d)]>0x0){if('XpBam'===_0x5c6a26(0x305)){const _0x348efc=this['_borderPortraitDuration'],_0x5cbe6b=this[_0x5c6a26(0x524)];_0x5cbe6b['x']=(_0x5cbe6b['x']*(_0x348efc-0x1)+this[_0x5c6a26(0x946)])/_0x348efc,_0x5cbe6b[_0x5c6a26(0xbc0)]=(_0x5cbe6b['opacity']*(_0x348efc-0x1)+0xff)/_0x348efc,this[_0x5c6a26(0xb6d)]--;}else return _0x3b034b['weapons']()[_0x5c6a26(0xcc5)]||0x1;}},Window_BattleStatus['prototype']['updateEffectContainers']=function(){const _0x1f06cc=_0x45cef8;return;if(this['_effectsContainer']){if('CYOyK'===_0x1f06cc(0x80e))return this[_0x1f06cc(0x289)]()[_0x1f06cc(0x3cc)]();else this[_0x1f06cc(0x686)]['x']=this['x'],this['_effectsContainer']['y']=this['y'];}this[_0x1f06cc(0x63c)]&&(this[_0x1f06cc(0x63c)]['x']=this['x'],this['_damageContainer']['y']=this['y']);},Window_BattleStatus[_0x45cef8(0x3cf)]['createAttachmentSprites']=function(){const _0x3efd92=_0x45cef8,_0x33e63e=VisuMZ[_0x3efd92(0x6c0)]['Settings'][_0x3efd92(0x5be)];if(_0x33e63e[_0x3efd92(0x66e)]){const _0x34fefe=new Sprite();_0x34fefe[_0x3efd92(0xaaa)]=ImageManager['loadSystem'](_0x33e63e[_0x3efd92(0x66e)]),_0x34fefe['x']=_0x33e63e[_0x3efd92(0x93c)]||0x0,_0x34fefe['y']=_0x33e63e[_0x3efd92(0x7c0)]||0x0,this[_0x3efd92(0x6be)](_0x34fefe),this[_0x3efd92(0x1fb)]=_0x34fefe;}if(_0x33e63e['StatusWindowAttachmentFront']){if(_0x3efd92(0x840)!=='BwEYH'){const _0x160bcf=new Sprite();_0x160bcf[_0x3efd92(0xaaa)]=ImageManager[_0x3efd92(0x804)](_0x33e63e[_0x3efd92(0x8c1)]),_0x160bcf['x']=_0x33e63e[_0x3efd92(0x5e5)]||0x0,_0x160bcf['y']=_0x33e63e[_0x3efd92(0x864)]||0x0,this[_0x3efd92(0x5b6)](_0x160bcf),this[_0x3efd92(0x75a)]=_0x160bcf;}else{const _0x2f614c=_0x4aa789['indexOf'](_0x523222[_0x3efd92(0x5d3)]()[_0x3efd92(0x7f3)]());_0x2f614c>=0x0&&_0x2f614c<=0x7&&_0x5ba943['addBuff'](_0x2f614c,_0x5aadca);}}},Window_BattleStatus['prototype'][_0x45cef8(0xab3)]=function(){const _0x430ec9=_0x45cef8;if(this['_frontAttachmentSprite']){if(_0x430ec9(0x7d4)===_0x430ec9(0x565)){const _0x3a339b=new _0x133462(_0x2d542d);this[_0x430ec9(0x792)][_0x430ec9(0x5b6)](_0x3a339b);}else this[_0x430ec9(0x5b6)](this[_0x430ec9(0x75a)]);}this[_0x430ec9(0x1fb)]&&this[_0x430ec9(0x6be)](this[_0x430ec9(0x1fb)]);},Window_BattleActor[_0x45cef8(0x3cf)]['isOkEnabled']=function(){const _0x438ce9=_0x45cef8;return Window_BattleStatus['prototype'][_0x438ce9(0x465)][_0x438ce9(0xa07)](this)&&this[_0x438ce9(0x5c1)]();},Window_BattleActor[_0x45cef8(0x3cf)][_0x45cef8(0x5c1)]=function(){const _0x1ffc8b=_0x45cef8,_0x22a9bd=BattleManager[_0x1ffc8b(0xa46)](),_0x418772=this['actor'](this[_0x1ffc8b(0x5ef)]());if(!_0x22a9bd)return!![];if(!_0x22a9bd[_0x1ffc8b(0x3a4)]())return!![];const _0x2f0e38=_0x22a9bd['item']()['note'];if(_0x2f0e38[_0x1ffc8b(0x291)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x1ffc8b(0xbf3)!==_0x1ffc8b(0xbf3))this[_0x1ffc8b(0x3b6)]();else{if(_0x418772===BattleManager[_0x1ffc8b(0x4d4)]())return![];}}return!![];},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xab1)]=Window_BattleEnemy['prototype'][_0x45cef8(0x754)],Window_BattleEnemy['prototype'][_0x45cef8(0x754)]=function(_0x1bb886){const _0xffc60a=_0x45cef8;this[_0xffc60a(0xaf1)]=null,VisuMZ[_0xffc60a(0x6c0)]['Window_BattleEnemy_initialize'][_0xffc60a(0xa07)](this,_0x1bb886);},Window_BattleEnemy['prototype']['maxCols']=function(){const _0x4d8f27=_0x45cef8;return this[_0x4d8f27(0x468)]();},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x643)]=Window_BattleEnemy[_0x45cef8(0x3cf)][_0x45cef8(0xd10)],Window_BattleEnemy['prototype'][_0x45cef8(0xd10)]=function(){const _0x376265=_0x45cef8;VisuMZ[_0x376265(0x6c0)][_0x376265(0x643)][_0x376265(0xa07)](this),this['y']=Graphics[_0x376265(0xa2a)]*0xa;},Window_BattleEnemy[_0x45cef8(0x3cf)][_0x45cef8(0x4b6)]=function(){const _0x3922b4=_0x45cef8;return $gameTroop['aliveMembers']()[_0x3922b4(0xa4c)](0x0);},Window_BattleEnemy[_0x45cef8(0x3cf)][_0x45cef8(0x807)]=function(){const _0x12e180=_0x45cef8;this[_0x12e180(0xa41)]=this['validTargets'](),this[_0x12e180(0x61c)](),Window_Selectable[_0x12e180(0x3cf)][_0x12e180(0x807)][_0x12e180(0xa07)](this);},Window_BattleEnemy[_0x45cef8(0x3cf)][_0x45cef8(0x61c)]=function(){const _0x5544b2=_0x45cef8;this[_0x5544b2(0xa41)][_0x5544b2(0x52a)]((_0x286439,_0x49e012)=>{const _0x50849d=_0x5544b2;if(_0x50849d(0x573)!==_0x50849d(0x573))_0x51c054--;else{if(_0x286439[_0x50849d(0x231)]()['_baseX']===_0x49e012[_0x50849d(0x231)]()[_0x50849d(0x3c6)])return _0x286439['battler']()[_0x50849d(0x987)]-_0x49e012['battler']()[_0x50849d(0x987)];else{if(_0x50849d(0x82c)===_0x50849d(0xca9)){if(this['_targetOpacity']===_0x433b02)return;this[_0x50849d(0xb31)]=_0x269732,this[_0x50849d(0x664)]=_0xb6dbba,this[_0x50849d(0x329)]=_0x28ccdd,this[_0x50849d(0xab9)]=_0x17e954||'Linear';if(_0x7c418e<=0x0)this[_0x50849d(0xbc0)]=_0x58f01a;}else return _0x286439[_0x50849d(0x231)]()[_0x50849d(0x3c6)]-_0x49e012[_0x50849d(0x231)]()['_baseX'];}}}),SceneManager[_0x5544b2(0xc26)]()&&(_0x5544b2(0x515)==='HPgTG'?_0x1babd8=_0x585043>=_0x1ea2a4?_0x5e2d1f:_0xa743f7:this[_0x5544b2(0xa41)][_0x5544b2(0xd07)]());},Window_BattleEnemy[_0x45cef8(0x3cf)]['autoSelect']=function(){const _0x52b68e=_0x45cef8,_0x352be3=VisuMZ[_0x52b68e(0x6c0)][_0x52b68e(0x658)][_0x52b68e(0xc97)];_0x352be3['LastSelected']?this[_0x52b68e(0xa6a)]():this[_0x52b68e(0x43f)]();},Window_BattleEnemy['prototype'][_0x45cef8(0xa6a)]=function(){const _0xf769d8=_0x45cef8;if(this[_0xf769d8(0xaf1)]&&this[_0xf769d8(0xa41)][_0xf769d8(0x2b1)](this[_0xf769d8(0xaf1)])){const _0x1c7b03=this[_0xf769d8(0xa41)][_0xf769d8(0xac5)](this['_lastEnemy']);this['forceSelect'](_0x1c7b03);}else this[_0xf769d8(0x43f)]();},Window_BattleEnemy[_0x45cef8(0x3cf)][_0x45cef8(0x43f)]=function(){const _0x5686cb=_0x45cef8,_0x2d20ff=VisuMZ[_0x5686cb(0x6c0)][_0x5686cb(0x658)][_0x5686cb(0xc97)];let _0x12c515=![];if($gameSystem[_0x5686cb(0xc02)]()){if(_0x5686cb(0x4ab)!==_0x5686cb(0x4ab)){const _0x444f17=this[_0x5686cb(0x6b4)][_0x5686cb(0x4bb)]['y'];_0x1ee1c1-=(_0x444f17-0x1)*this[_0x5686cb(0xa2a)];}else _0x12c515=_0x2d20ff[_0x5686cb(0x308)];}else _0x12c515=_0x2d20ff[_0x5686cb(0xb08)];this[_0x5686cb(0xbe6)](_0x12c515?this[_0x5686cb(0x468)]()-0x1:0x0);},Window_BattleEnemy[_0x45cef8(0x3cf)]['callOkHandler']=function(){const _0x1adf7a=_0x45cef8;Window_Selectable['prototype'][_0x1adf7a(0xa06)][_0x1adf7a(0xa07)](this),this['_lastEnemy']=this[_0x1adf7a(0xb19)]();},Window_BattleItem[_0x45cef8(0x3cf)][_0x45cef8(0x2b1)]=function(_0x1898d5){const _0x57316c=_0x45cef8;if(!_0x1898d5)return![];return _0x1898d5[_0x57316c(0x31e)]===0x0||_0x1898d5[_0x57316c(0x31e)]===0x1;};function Window_AutoBattleCancel(){const _0x57af33=_0x45cef8;this[_0x57af33(0x754)](...arguments);}Window_AutoBattleCancel['prototype']=Object[_0x45cef8(0x558)](Window_Base['prototype']),Window_AutoBattleCancel[_0x45cef8(0x3cf)]['constructor']=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x45cef8(0x3cf)]['initialize']=function(_0x43923c){const _0x3d97c6=_0x45cef8;Window_Base[_0x3d97c6(0x3cf)][_0x3d97c6(0x754)][_0x3d97c6(0xa07)](this,_0x43923c),this['setBackgroundType'](this[_0x3d97c6(0x6a3)]()),this['refresh']();},Window_AutoBattleCancel[_0x45cef8(0x3cf)][_0x45cef8(0x6a3)]=function(){const _0x1f58a4=_0x45cef8;return VisuMZ['BattleCore'][_0x1f58a4(0x658)]['AutoBattle'][_0x1f58a4(0x67d)];},Window_AutoBattleCancel[_0x45cef8(0x3cf)]['refresh']=function(){const _0x418c18=_0x45cef8;this['contents'][_0x418c18(0x6db)]();const _0x256d3c=VisuMZ[_0x418c18(0x6c0)][_0x418c18(0x658)][_0x418c18(0x3a6)][_0x418c18(0xa6d)],_0x47fa5e=_0x256d3c[_0x418c18(0x9ec)](this[_0x418c18(0xc7e)](),this['cancelButtonText']()),_0x147d9c=this[_0x418c18(0x574)](_0x47fa5e)[_0x418c18(0x639)],_0x25cfb6=Math['floor']((this[_0x418c18(0x277)]-_0x147d9c)/0x2);this['drawTextEx'](_0x47fa5e,_0x25cfb6,0x0,_0x147d9c);},Window_AutoBattleCancel[_0x45cef8(0x3cf)][_0x45cef8(0xc7e)]=function(){const _0xf8c59=_0x45cef8;if(Imported[_0xf8c59(0x22d)]){if(_0xf8c59(0x3ac)===_0xf8c59(0x3ac))return TextManager[_0xf8c59(0x586)]('ok');else this[_0xf8c59(0x30f)]='xp';}else return VisuMZ[_0xf8c59(0x6c0)]['Settings'][_0xf8c59(0x3a6)][_0xf8c59(0x810)];},Window_AutoBattleCancel[_0x45cef8(0x3cf)][_0x45cef8(0x60f)]=function(){const _0x53d946=_0x45cef8;return Imported[_0x53d946(0x22d)]?TextManager[_0x53d946(0x586)]('cancel'):VisuMZ[_0x53d946(0x6c0)][_0x53d946(0x658)][_0x53d946(0x3a6)][_0x53d946(0x7b9)];},Window_AutoBattleCancel[_0x45cef8(0x3cf)][_0x45cef8(0x3b2)]=function(){const _0x53f699=_0x45cef8;Window_Base[_0x53f699(0x3cf)][_0x53f699(0x3b2)]['call'](this),this[_0x53f699(0xb6b)](),this[_0x53f699(0xcc1)]();},Window_AutoBattleCancel[_0x45cef8(0x3cf)][_0x45cef8(0xb6b)]=function(){const _0x134971=_0x45cef8;this[_0x134971(0xbf1)]=BattleManager[_0x134971(0x448)];},Window_AutoBattleCancel[_0x45cef8(0x3cf)][_0x45cef8(0xcc1)]=function(){const _0x29291b=_0x45cef8;if(!BattleManager[_0x29291b(0x448)])return;(Input[_0x29291b(0x230)]('ok')||Input[_0x29291b(0x230)]('cancel')||TouchInput[_0x29291b(0x998)]()||TouchInput[_0x29291b(0xa93)]())&&(SoundManager['playCancel'](),BattleManager[_0x29291b(0x448)]=![],Input[_0x29291b(0x6db)](),TouchInput[_0x29291b(0x6db)]());};function Window_EnemyName(){this['initialize'](...arguments);}Window_EnemyName['prototype']=Object[_0x45cef8(0x558)](Window_StatusBase[_0x45cef8(0x3cf)]),Window_EnemyName[_0x45cef8(0x3cf)]['constructor']=Window_EnemyName,Window_EnemyName[_0x45cef8(0x3cf)][_0x45cef8(0x754)]=function(_0x19cef1){const _0x1d8f7f=_0x45cef8;this[_0x1d8f7f(0x6cc)]=_0x19cef1,this[_0x1d8f7f(0xbd0)]='';const _0x277082=new Rectangle(0x0,0x0,Graphics[_0x1d8f7f(0xa5d)],this[_0x1d8f7f(0x473)]()*0x4);Window_StatusBase[_0x1d8f7f(0x3cf)][_0x1d8f7f(0x754)]['call'](this,_0x277082),this[_0x1d8f7f(0x5de)](0x2),this[_0x1d8f7f(0x569)]=0x0;},Window_EnemyName[_0x45cef8(0x3cf)]['updatePadding']=function(){this['padding']=0x0;},Window_EnemyName['prototype'][_0x45cef8(0xb19)]=function(){const _0x5e5029=_0x45cef8;return $gameTroop[_0x5e5029(0x666)]()[this[_0x5e5029(0x6cc)]];},Window_EnemyName[_0x45cef8(0x3cf)][_0x45cef8(0x3b2)]=function(){const _0x4046d7=_0x45cef8;Window_StatusBase['prototype']['update']['call'](this),this[_0x4046d7(0xb19)]()&&this[_0x4046d7(0xb19)]()[_0x4046d7(0xd00)]()!==this[_0x4046d7(0xbd0)]&&(_0x4046d7(0x94f)!==_0x4046d7(0x94f)?_0x51499a+=_0x1e045f(_0x591592['$2']):(this[_0x4046d7(0xbd0)]=this[_0x4046d7(0xb19)]()[_0x4046d7(0xd00)](),this[_0x4046d7(0x807)]())),this[_0x4046d7(0x6c6)](),this[_0x4046d7(0xb39)]();},Window_EnemyName[_0x45cef8(0x3cf)][_0x45cef8(0x6c6)]=function(){const _0x340978=_0x45cef8;if(!this[_0x340978(0xb19)]()){if(this['contentsOpacity']>0x0)this[_0x340978(0x569)]-=0x10;}else{if(this[_0x340978(0xb19)]()['isDead']()){if(_0x340978(0x623)===_0x340978(0x867)){this[_0x340978(0x48a)][_0x340978(0x6db)]();const _0x5df103=_0x2db0d9[_0x340978(0x6c0)][_0x340978(0x658)][_0x340978(0x3a6)][_0x340978(0xa6d)],_0x219dfb=_0x5df103['format'](this[_0x340978(0xc7e)](),this[_0x340978(0x60f)]()),_0x5ad3ee=this['textSizeEx'](_0x219dfb)[_0x340978(0x639)],_0x204529=_0x1d9aec[_0x340978(0x74d)]((this[_0x340978(0x277)]-_0x5ad3ee)/0x2);this[_0x340978(0x72b)](_0x219dfb,_0x204529,0x0,_0x5ad3ee);}else{if(this['contentsOpacity']>0x0)this[_0x340978(0x569)]-=0x10;}}else{if(SceneManager['_scene']['_enemyWindow']&&SceneManager[_0x340978(0x9e2)][_0x340978(0x282)][_0x340978(0x6ea)]&&SceneManager['_scene'][_0x340978(0x282)][_0x340978(0xa41)][_0x340978(0x2b1)](this[_0x340978(0xb19)]())){if(this['contentsOpacity']<0xff)this[_0x340978(0x569)]+=0x10;}else{if(this[_0x340978(0x569)]>0x0){if(_0x340978(0xaa5)!==_0x340978(0x790))this[_0x340978(0x569)]-=0x10;else return this[_0x340978(0x847)]()&&!this[_0x340978(0x8f1)]()?this[_0x340978(0xcdb)]():_0x17b868['BattleCore'][_0x340978(0xa03)]['call'](this);}}}}},Window_EnemyName[_0x45cef8(0x3cf)]['updatePosition']=function(){const _0x57ab63=_0x45cef8;if(!this[_0x57ab63(0xb19)]())return;SceneManager[_0x57ab63(0xc26)]()?this['x']=Graphics[_0x57ab63(0xa5d)]-this[_0x57ab63(0xb19)]()[_0x57ab63(0x231)]()[_0x57ab63(0x3c6)]:this['x']=this['enemy']()[_0x57ab63(0x231)]()['_baseX'];this['x']-=Math[_0x57ab63(0x365)](this['width']/0x2),this['y']=this[_0x57ab63(0xb19)]()['battler']()[_0x57ab63(0x987)]-Math['round'](this['lineHeight']()*1.5);const _0x33a2b3=VisuMZ['BattleCore'][_0x57ab63(0x658)][_0x57ab63(0xc97)];this['x']+=_0x33a2b3[_0x57ab63(0x2b2)]||0x0,this['y']+=_0x33a2b3[_0x57ab63(0x612)]||0x0;},Window_EnemyName['prototype']['resetFontSettings']=function(){const _0x3461b9=_0x45cef8;Window_Base['prototype']['resetFontSettings'][_0x3461b9(0xa07)](this),this[_0x3461b9(0x48a)]['fontSize']=VisuMZ[_0x3461b9(0x6c0)]['Settings']['Enemy'][_0x3461b9(0x9ab)];},Window_EnemyName[_0x45cef8(0x3cf)][_0x45cef8(0x807)]=function(){const _0x4f65ec=_0x45cef8;Window_StatusBase[_0x4f65ec(0x3cf)]['refresh'][_0x4f65ec(0xa07)](this),this[_0x4f65ec(0x48a)]['clear']();if(!this[_0x4f65ec(0xb19)]())return;this['drawEnemyName']();},Window_EnemyName[_0x45cef8(0x3cf)][_0x45cef8(0x3e4)]=function(){const _0x55061b=_0x45cef8;this[_0x55061b(0xbd0)]=this[_0x55061b(0xb19)]()[_0x55061b(0xd00)]();const _0x185b35=this[_0x55061b(0x574)](this[_0x55061b(0xbd0)])[_0x55061b(0x639)],_0x390042=Math[_0x55061b(0x365)]((this[_0x55061b(0x277)]-_0x185b35)/0x2);this['drawTextEx'](this[_0x55061b(0xbd0)],_0x390042,0x0,_0x185b35+0x8);},Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0xaf4)]=function(){const _0x952e2=_0x45cef8;return VisuMZ[_0x952e2(0x6c0)]['Settings'][_0x952e2(0xcbb)][_0x952e2(0xad4)];},Window_BattleLog['prototype'][_0x45cef8(0x35a)]=function(){const _0x18d68f=_0x45cef8;return VisuMZ[_0x18d68f(0x6c0)][_0x18d68f(0x658)][_0x18d68f(0xcbb)][_0x18d68f(0x588)];},Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0xc80)]=function(){const _0x1873a4=_0x45cef8;return VisuMZ[_0x1873a4(0x6c0)]['Settings'][_0x1873a4(0xcbb)][_0x1873a4(0x35b)];},Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x78a)]=function(){return![];},Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0xa08)]=function(_0x2372ee,_0x4e1b9a){const _0x28d546=_0x45cef8;this[_0x28d546(0x83c)](_0x28d546(0x826)),BattleManager[_0x28d546(0xb3e)](_0x2372ee,_0x4e1b9a),this[_0x28d546(0x5d7)]();},Window_BattleLog[_0x45cef8(0x3cf)]['actionSplicePoint']=function(){this['callNextMethod']();},Window_BattleLog['prototype'][_0x45cef8(0x287)]=function(_0x2c2b97){const _0x351e4b=_0x45cef8,_0x3eb2b7=Array['prototype'][_0x351e4b(0xa4c)][_0x351e4b(0xa07)](arguments,0x1),_0xe12d9e={'name':_0x2c2b97,'params':_0x3eb2b7},_0x5566b8=this[_0x351e4b(0x756)][_0x351e4b(0x4a9)](_0x3e0958=>_0x3e0958[_0x351e4b(0xd00)])[_0x351e4b(0xac5)]('actionSplicePoint');if(_0x5566b8>=0x0)this['_methods'][_0x351e4b(0x914)](_0x5566b8,0x0,_0xe12d9e);else{if(_0x351e4b(0x7ca)!==_0x351e4b(0x9e6))this[_0x351e4b(0x756)][_0x351e4b(0x287)](_0xe12d9e);else{if(!_0x33c5f5[_0x351e4b(0xc83)]())return;if(!_0x5cc1f7[_0x351e4b(0xa9b)])return;_0x309f8d[_0x351e4b(0x8b3)](_0x2878b0,_0x5bd2c5);const _0x150369=_0x29cb06[_0x351e4b(0xaf3)](),_0x4fc45d=_0x47294b['WaitForCamera'];_0x42a824['setBattleCameraPoint'](_0x639278[_0x351e4b(0x59e)],_0x1db286[_0x351e4b(0xbea)],_0x228b48[_0x351e4b(0x690)],_0x45aa60[_0x351e4b(0x94a)]);if(_0x4fc45d)_0x150369['setWaitMode'](_0x351e4b(0xc23));}}},Window_BattleLog['prototype'][_0x45cef8(0x83c)]=function(_0x3ee078){const _0x5698f6=_0x45cef8,_0x406600=Array[_0x5698f6(0x3cf)][_0x5698f6(0xa4c)]['call'](arguments,0x1);this[_0x5698f6(0x756)]['unshift']({'name':_0x3ee078,'params':_0x406600});},Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x428)]=function(){const _0x206bc6=_0x45cef8;if(!$gameTemp[_0x206bc6(0x797)]())return;console[_0x206bc6(0x541)](this[_0x206bc6(0x756)][_0x206bc6(0x4a9)](_0x414d82=>_0x414d82[_0x206bc6(0xd00)])[_0x206bc6(0x51b)]('\x0a'));},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x62a)]=Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x807)],Window_BattleLog['prototype'][_0x45cef8(0x807)]=function(){const _0x323872=_0x45cef8;this[_0x323872(0x692)]=!![];},VisuMZ['BattleCore']['Window_BattleLog_update']=Window_BattleLog['prototype'][_0x45cef8(0x3b2)],Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x3b2)]=function(){const _0x1afec6=_0x45cef8;VisuMZ['BattleCore'][_0x1afec6(0xab6)]['call'](this);if(this[_0x1afec6(0x692)])this[_0x1afec6(0x645)]();},Window_BattleLog['prototype'][_0x45cef8(0x645)]=function(){const _0x23223b=_0x45cef8;this[_0x23223b(0x692)]=![],VisuMZ[_0x23223b(0x6c0)]['Window_BattleLog_refresh'][_0x23223b(0xa07)](this);},Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x934)]=function(_0x279ea4){const _0x3d08e4=_0x45cef8;let _0x5de690=VisuMZ[_0x3d08e4(0x6c0)][_0x3d08e4(0x658)][_0x3d08e4(0xcbb)][_0x3d08e4(0x3ec)]['toLowerCase']()[_0x3d08e4(0x7f3)](),_0xe9ee16=this[_0x3d08e4(0x1e4)][_0x279ea4];if(_0xe9ee16[_0x3d08e4(0x291)](/<LEFT>/i))_0x5de690='left';else{if(_0xe9ee16[_0x3d08e4(0x291)](/<CENTER>/i)){if(_0x3d08e4(0x870)===_0x3d08e4(0x870))_0x5de690=_0x3d08e4(0xace);else{this[_0x3d08e4(0xa55)]['push'](_0x2df70d);if(this[_0x3d08e4(0x3da)]()){const _0x3dca11=_0x37a3ec[_0x3d08e4(0x9e2)][_0x3d08e4(0x350)];if(_0x3dca11)_0x3dca11['addDamageSprite'](_0x49f2f6,this['_battler']);}else{this['damageContainer']()[_0x3d08e4(0x5b6)](_0x16a412);if(_0x23a1a5['isBattleFlipped']())_0x2ddde9[_0x3d08e4(0x4bb)]['x']=-0x1;}}}else _0xe9ee16[_0x3d08e4(0x291)](/<RIGHT>/i)&&(_0x5de690=_0x3d08e4(0xb7c));}_0xe9ee16=_0xe9ee16['replace'](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0xe9ee16=_0xe9ee16[_0x3d08e4(0x332)](/\\I\[0\]/gi,'');const _0x26f9b8=this['lineRect'](_0x279ea4);this[_0x3d08e4(0x48a)][_0x3d08e4(0xc9c)](_0x26f9b8['x'],_0x26f9b8['y'],_0x26f9b8['width'],_0x26f9b8[_0x3d08e4(0xa2a)]);const _0x289c4f=this[_0x3d08e4(0x574)](_0xe9ee16)[_0x3d08e4(0x639)];let _0x681a6b=_0x26f9b8['x'];if(_0x5de690===_0x3d08e4(0xace))_0x681a6b+=(_0x26f9b8[_0x3d08e4(0x639)]-_0x289c4f)/0x2;else{if(_0x5de690===_0x3d08e4(0xb7c)){if('yuYfp'===_0x3d08e4(0x5b0)){if(!_0x23aea1['isSideView']())return;const _0x3cab44=this[_0x3d08e4(0x231)]();if(!_0x3cab44)return;if(_0x19813c)this['setBattlerFacePoint'](_0x26fb29+_0x3cab44[_0x3d08e4(0x3c6)],_0x931559+_0x3cab44['_baseY'],![]);_0x254669+=_0x3cab44['_baseX']-_0x3cab44[_0x3d08e4(0x883)],_0x478922+=_0x3cab44[_0x3d08e4(0x987)]-_0x3cab44[_0x3d08e4(0xabb)],_0x3cab44[_0x3d08e4(0x2b5)](_0x5dc01e,_0x39d5f0,_0x5cdf41);if(_0x19c012['VisuMZ_0_CoreEngine'])_0x3cab44[_0x3d08e4(0x5e0)](_0x11dbac||_0x3d08e4(0x278));}else _0x681a6b+=_0x26f9b8[_0x3d08e4(0x639)]-_0x289c4f;}}this[_0x3d08e4(0x72b)](_0xe9ee16,_0x681a6b,_0x26f9b8['y'],_0x289c4f+0x8);},Window_BattleLog['prototype']['addText']=function(_0x3739a9){const _0x344ba3=_0x45cef8;this[_0x344ba3(0x1e4)][_0x344ba3(0x287)](_0x3739a9),this[_0x344ba3(0x807)](),this[_0x344ba3(0x5d7)]();},Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x780)]=function(){const _0x5d0285=_0x45cef8;let _0x26c1bc=![];switch(this[_0x5d0285(0x581)]){case _0x5d0285(0xcf2):_0x26c1bc=this[_0x5d0285(0x78d)][_0x5d0285(0xa92)]();break;case'movement':_0x26c1bc=this[_0x5d0285(0x78d)][_0x5d0285(0x1e9)]();break;case _0x5d0285(0xadb):_0x26c1bc=this['_spriteset'][_0x5d0285(0x2d6)]();break;case _0x5d0285(0x402):_0x26c1bc=this['_spriteset']['isAnyoneFloating']();break;case _0x5d0285(0xb54):_0x26c1bc=this[_0x5d0285(0x78d)][_0x5d0285(0xc54)]();break;case _0x5d0285(0xbc0):_0x26c1bc=this[_0x5d0285(0x78d)][_0x5d0285(0x688)]();break;}return!_0x26c1bc&&('KsDSo'===_0x5d0285(0xb6c)?_0x2d5963['addLoadListener'](this['updateBattlebackBitmap2']['bind'](this,_0x4d8615,_0x1634bc,_0x4ef781,_0x5538a7)):this[_0x5d0285(0x581)]=''),_0x26c1bc;},Window_BattleLog[_0x45cef8(0x3cf)]['waitForAnimation']=function(){const _0x21acbd=_0x45cef8;this[_0x21acbd(0x625)](_0x21acbd(0xadb));},Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0xa73)]=function(){const _0x120054=_0x45cef8;this[_0x120054(0x625)]('float');},Window_BattleLog['prototype']['waitForJump']=function(){const _0x4d91cb=_0x45cef8;this[_0x4d91cb(0x625)](_0x4d91cb(0xb54));},Window_BattleLog[_0x45cef8(0x3cf)]['waitForOpacity']=function(){const _0x38440c=_0x45cef8;this[_0x38440c(0x625)](_0x38440c(0xbc0));},Window_BattleLog['prototype'][_0x45cef8(0x5fb)]=function(){const _0x2e5952=_0x45cef8,_0x9bcac9=VisuMZ[_0x2e5952(0x6c0)][_0x2e5952(0x658)][_0x2e5952(0xcbb)];if(!_0x9bcac9['StartTurnShow'])return;this[_0x2e5952(0x287)](_0x2e5952(0x4b8),_0x9bcac9['StartTurnMsg']['format']($gameTroop[_0x2e5952(0x8d4)]())),this[_0x2e5952(0x287)](_0x2e5952(0x717),_0x9bcac9['StartTurnWait']),this[_0x2e5952(0x287)]('clear');},Window_BattleLog['prototype'][_0x45cef8(0xb2e)]=function(_0x3ce64d,_0x4cb16c,_0x457648){const _0x236ff8=_0x45cef8;this[_0x236ff8(0x8c0)](_0x4cb16c)?BattleManager['prepareCustomActionSequence']():this[_0x236ff8(0xafb)](_0x3ce64d,_0x4cb16c,_0x457648);},Window_BattleLog['prototype']['isCustomActionSequence']=function(_0x3fd76c){const _0x479f0c=_0x45cef8;if(!SceneManager[_0x479f0c(0xc83)]())return![];if(!_0x3fd76c)return![];if(!_0x3fd76c[_0x479f0c(0x3a4)]())return![];if(_0x3fd76c[_0x479f0c(0x3a4)]()[_0x479f0c(0xbfd)][_0x479f0c(0x291)](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x479f0c(0x7a1)!==_0x479f0c(0x7a1))_0x3c5596['addBuff'](_0x170c50,_0x1b57df);else return!![];}if(DataManager[_0x479f0c(0x3a9)](_0x3fd76c['item']())){if(_0x479f0c(0xbb4)!=='PAEBC'){if(!_0x339eb6[_0x479f0c(0xc83)]())return;if(!_0x51cf64[_0x479f0c(0xc21)])return;_0x30e857[_0x479f0c(0x8b3)](_0x47dd80,_0x1ee078);const _0x465c8d=_0x387af5[_0x479f0c(0x79c)],_0x22ebe=_0x32e220[_0x479f0c(0x1e7)];if(!_0x465c8d)return;_0x465c8d[_0x479f0c(0x4b3)]=_0x22ebe;}else return!![];}return![];},Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0xafb)]=function(_0x3d0a7d,_0x356df1,_0x183de6){const _0x616ea6=_0x45cef8,_0x300d03=_0x356df1['item']();this['setupActionSet'](_0x3d0a7d,_0x356df1,_0x183de6),this[_0x616ea6(0x90d)](_0x3d0a7d,_0x356df1,_0x183de6),this['finishActionSet'](_0x3d0a7d,_0x356df1,_0x183de6);},Window_BattleLog['prototype']['displayAction']=function(_0xc65c3c,_0xfd9afd){const _0x259c03=_0x45cef8,_0x5f0810=VisuMZ[_0x259c03(0x6c0)][_0x259c03(0x658)]['BattleLog'];_0x5f0810[_0x259c03(0x880)]&&(_0x259c03(0xb77)===_0x259c03(0xb77)?this[_0x259c03(0x287)](_0x259c03(0x4b8),_0x259c03(0xb8e)[_0x259c03(0x9ec)](DataManager[_0x259c03(0x7d7)](_0xfd9afd))):(_0x339619+=_0x5f41f3[_0x259c03(0x98a)]()?-_0x4bbf2e:_0x5b1ebb,_0x24beac+=_0x585fc3[_0x259c03(0x98a)]()?-_0x5449f4:_0x18f8ea));if(DataManager[_0x259c03(0x2f8)](_0xfd9afd)){if(_0x259c03(0x772)!==_0x259c03(0x772))_0x2b8929=_0x4414b6[_0x259c03(0x4db)]((_0x49df50,_0xb4908,_0x3d2552)=>_0x3d2552[_0x259c03(0xac5)](_0x49df50)===_0xb4908),_0x33e6dd[_0x259c03(0xc83)]()&&_0xdc4b2[_0x259c03(0xc26)]()&&(_0x3cf7c0=!_0x340f5c),_0x3ec123[_0x259c03(0x6c0)]['Game_Temp_requestAnimation']['call'](this,_0x19ae55,_0x8d3257,_0x53ba31),_0x5d3ec0[_0x259c03(0xc83)]()&&_0x3d3b07[_0x259c03(0x78d)]['processAnimationRequests']();else{if(_0x5f0810[_0x259c03(0xc4e)])this[_0x259c03(0xb92)](_0xfd9afd[_0x259c03(0x1d9)],_0xc65c3c,_0xfd9afd);if(_0x5f0810[_0x259c03(0x4d3)])this[_0x259c03(0xb92)](_0xfd9afd[_0x259c03(0xb0e)],_0xc65c3c,_0xfd9afd);}}else{if(_0x5f0810[_0x259c03(0x1ed)])this[_0x259c03(0xb92)](TextManager[_0x259c03(0x1da)],_0xc65c3c,_0xfd9afd);}},Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x33b)]=function(_0x215401,_0x580be0,_0x46231b){const _0xf245f8=_0x45cef8,_0x3d4084=_0x580be0['item']();this[_0xf245f8(0x482)](_0x215401,_0x3d4084),this[_0xf245f8(0x287)](_0xf245f8(0x79f),_0x215401,_0x46231b,!![]),this['push']('performActionStart',_0x215401,_0x580be0),this[_0xf245f8(0x287)]('waitForMovement'),this[_0xf245f8(0x287)](_0xf245f8(0x54e),_0x215401,_0x580be0),this['push'](_0xf245f8(0x787));},Window_BattleLog[_0x45cef8(0x3cf)]['createEffectActionSet']=function(_0x23f2d1,_0x565d6d,_0x99401a){const _0x4dd7c1=_0x45cef8;if(this[_0x4dd7c1(0x9e0)](_0x565d6d)){if('TQUtY'===_0x4dd7c1(0x523))this[_0x4dd7c1(0x7a2)](_0x23f2d1,_0x565d6d,_0x99401a);else return _0x5d0c83[_0x4dd7c1(0x6c0)]['Settings'][_0x4dd7c1(0x4d0)][_0x4dd7c1(0x960)];}else{if(this['isMeleeMultiTargetAction'](_0x565d6d)){if('EDdMG'!==_0x4dd7c1(0x814))this['autoMeleeMultiTargetActionSet'](_0x23f2d1,_0x565d6d,_0x99401a);else{if(this[_0x4dd7c1(0x66c)]==='turn'){if(_0x34fb61[_0x4dd7c1(0x8be)]())return![];}return _0x2a0b7b[_0x4dd7c1(0x6c0)][_0x4dd7c1(0xa76)][_0x4dd7c1(0xa07)](this);}}else{if(_0x565d6d[_0x4dd7c1(0x8de)]()){if('VVCmo'===_0x4dd7c1(0x963)){if(_0x853159['SkillsStatesCore'][_0x4dd7c1(0x2a2)]>=1.24){if(this[_0x4dd7c1(0x318)]){if(!_0x882c9a[_0x4dd7c1(0x469)][_0x4dd7c1(0x579)](this['_actor'],_0x1c54f8))return!![];if(!_0xe26c33['SkillsStatesCore'][_0x4dd7c1(0x73d)](this[_0x4dd7c1(0x318)],_0x1f5b4d))return!![];if(!_0x2f9a91[_0x4dd7c1(0x469)][_0x4dd7c1(0x345)](this[_0x4dd7c1(0x318)],_0x42799c))return!![];}}else{if(!_0x22e5b4[_0x4dd7c1(0x3cf)][_0x4dd7c1(0xbe5)][_0x4dd7c1(0xa07)](this,_0x1c56ed))return!![];if(!_0x4ce516[_0x4dd7c1(0x3cf)][_0x4dd7c1(0x31c)][_0x4dd7c1(0xa07)](this,_0x446d57))return!![];if(!_0x13b8e8[_0x4dd7c1(0x3cf)]['checkShowHideSkillNotetags'][_0x4dd7c1(0xa07)](this,_0x107434))return!![];}}else this[_0x4dd7c1(0x433)](_0x23f2d1,_0x565d6d,_0x99401a);}else this[_0x4dd7c1(0x704)](_0x23f2d1,_0x565d6d,_0x99401a);}}},Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x32f)]=function(_0x2b40a8,_0x12b47d,_0x50dad5,_0x2b98f7){const _0x5f379e=_0x45cef8;if(_0x12b47d){if('TzaLs'===_0x5f379e(0x861)){const _0x59763c=_0x2b40a8[_0x5f379e(0x231)]();this[_0x5f379e(0x287)](_0x5f379e(0xc0d),[_0x2b40a8],_0x50dad5,_0x2b98f7),this['push'](_0x5f379e(0x34e),_0x2b40a8,_0x59763c[_0x5f379e(0x883)],_0x59763c[_0x5f379e(0xabb)],_0x2b98f7,![],_0x5f379e(0x278)),this[_0x5f379e(0x287)](_0x5f379e(0x8c4),[_0x2b40a8],'evade'),this[_0x5f379e(0x287)]('waitForMovement'),this[_0x5f379e(0x287)](_0x5f379e(0x8c4),[_0x2b40a8],_0x5f379e(0xbcf));}else{const _0x10d204=this[_0x5f379e(0x935)]();if(!_0x10d204)return null;if(_0x10d204['isBattleMember']()&&_0x10d204['isAlive']())return _0x10d204;}}},Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x9e0)]=function(_0x28b590){const _0x412a74=_0x45cef8;if(!_0x28b590[_0x412a74(0xcec)]())return![];if(!_0x28b590[_0x412a74(0x7c4)]())return![];if(!_0x28b590[_0x412a74(0x852)]())return![];return VisuMZ[_0x412a74(0x6c0)]['Settings']['ActionSequence'][_0x412a74(0x869)];},Window_BattleLog['prototype'][_0x45cef8(0x7a2)]=function(_0x540ce1,_0x21df64,_0x55e1ed){const _0x4a5067=_0x45cef8,_0x3697c8=_0x540ce1[_0x4a5067(0x2cc)]()[_0x4a5067(0x4cf)]<0x2,_0x84999d=0x14,_0x522036=0x30;if(_0x3697c8){if(_0x4a5067(0xc8a)!==_0x4a5067(0x4b1))this['push'](_0x4a5067(0xc0d),[_0x540ce1],_0x522036,_0x84999d),this[_0x4a5067(0x287)](_0x4a5067(0x878),_0x540ce1,_0x55e1ed,_0x4a5067(0x25a),_0x84999d,!![],_0x4a5067(0x278),!![]),this[_0x4a5067(0x287)](_0x4a5067(0x8c4),[_0x540ce1],'walk'),this[_0x4a5067(0x287)](_0x4a5067(0x9a0));else{if(this['actor']()['note'][_0x4a5067(0x291)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return _0xf36b2f(_0x5adb94['$1']);else{if(this[_0x4a5067(0x4d4)]()[_0x4a5067(0xbfd)][_0x4a5067(0x291)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return _0x3ddda9(_0x58462f['$2']);}return 0x0;}}let _0x360657=_0x21df64['isAttack']()?this[_0x4a5067(0x7b7)](_0x540ce1):0x1;for(let _0x2418d2=0x0;_0x2418d2<_0x360657;_0x2418d2++){if('iUZKw'===_0x4a5067(0xb9d))_0x4bb3ab[_0x4a5067(0x6c0)][_0x4a5067(0xb6e)][_0x4a5067(0xa07)](this,_0x5589e6),this[_0x4a5067(0x5d7)]();else{_0x21df64['isAttack']()&&_0x540ce1[_0x4a5067(0x98a)]()&&('XhIfL'!==_0x4a5067(0x5db)?this[_0x4a5067(0x287)](_0x4a5067(0xb1a),_0x540ce1,_0x2418d2):this['visible']=_0x58c072[_0x4a5067(0x448)]);if(_0x21df64[_0x4a5067(0x3a4)]()['animationId']<0x0){if(_0x4a5067(0x9fd)!=='ELjEU')this[_0x4a5067(0x433)](_0x540ce1,_0x21df64,_0x55e1ed);else return this[_0x4a5067(0xcd8)](_0x20d009);}else this[_0x4a5067(0x704)](_0x540ce1,_0x21df64,_0x55e1ed);}}_0x21df64[_0x4a5067(0x8cf)]()&&_0x540ce1['isActor']()&&this[_0x4a5067(0x287)](_0x4a5067(0xa3a),_0x540ce1),this[_0x4a5067(0x287)](_0x4a5067(0x79f),_0x540ce1,_0x55e1ed,![]),this[_0x4a5067(0x32f)](_0x540ce1,_0x3697c8,_0x522036,_0x84999d);},Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0xa63)]=function(_0x18e960){const _0x281f74=_0x45cef8;if(!_0x18e960[_0x281f74(0xcec)]())return![];if(!_0x18e960[_0x281f74(0x73a)]())return![];if(!_0x18e960[_0x281f74(0x852)]())return![];return VisuMZ[_0x281f74(0x6c0)][_0x281f74(0x658)][_0x281f74(0xa95)][_0x281f74(0x667)];},Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0xac6)]=function(_0x402577,_0x1985b5,_0x15765c){const _0x8de113=_0x45cef8,_0x14ff4e=_0x402577[_0x8de113(0x2cc)]()[_0x8de113(0x4cf)]<0x2,_0x282ee3=0x14,_0x5bce9f=0x30;_0x14ff4e&&(this[_0x8de113(0x287)](_0x8de113(0xc0d),[_0x402577],_0x5bce9f,_0x282ee3),this[_0x8de113(0x287)](_0x8de113(0x878),_0x402577,_0x15765c,_0x8de113(0x585),_0x282ee3,!![],_0x8de113(0x278),!![]),this[_0x8de113(0x287)](_0x8de113(0x8c4),[_0x402577],_0x8de113(0xbcf)),this['push'](_0x8de113(0x9a0)));let _0x28992f=_0x1985b5[_0x8de113(0x8cf)]()?this[_0x8de113(0x7b7)](_0x402577):0x1;for(let _0x3d9ed0=0x0;_0x3d9ed0<_0x28992f;_0x3d9ed0++){_0x1985b5[_0x8de113(0x8cf)]()&&_0x402577[_0x8de113(0x98a)]()&&this['push'](_0x8de113(0xb1a),_0x402577,_0x3d9ed0),this[_0x8de113(0x704)](_0x402577,_0x1985b5,_0x15765c);}_0x1985b5['isAttack']()&&_0x402577[_0x8de113(0x98a)]()&&this['push'](_0x8de113(0xa3a),_0x402577),this[_0x8de113(0x287)](_0x8de113(0x79f),_0x402577,_0x15765c,![]),this[_0x8de113(0x32f)](_0x402577,_0x14ff4e,_0x5bce9f,_0x282ee3);},Window_BattleLog['prototype'][_0x45cef8(0x433)]=function(_0x17cfbf,_0x45ed5d,_0x33ae28){const _0x1b2870=_0x45cef8,_0x51169c=_0x45ed5d[_0x1b2870(0x3a4)]();for(const _0x537d04 of _0x33ae28){if(_0x1b2870(0xd09)!==_0x1b2870(0x888)){if(!_0x537d04)continue;this['push'](_0x1b2870(0x8a3),_0x17cfbf,_0x45ed5d),this[_0x1b2870(0x287)](_0x1b2870(0x717),Sprite_Battler['_motionSpeed']),this[_0x1b2870(0x287)](_0x1b2870(0x253),_0x17cfbf,[_0x537d04],_0x51169c[_0x1b2870(0xc91)]),this['push'](_0x1b2870(0x717),0x18),this['push'](_0x1b2870(0xa08),_0x17cfbf,_0x537d04);}else return _0x5463ee[_0x1b2870(0x6c0)][_0x1b2870(0x658)][_0x1b2870(0x5be)][_0x1b2870(0x66f)];}},Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x704)]=function(_0x1e63fb,_0x55c7bf,_0x264289){const _0x2408de=_0x45cef8,_0x1ebb6c=_0x55c7bf[_0x2408de(0x3a4)]();this[_0x2408de(0x287)](_0x2408de(0x8a3),_0x1e63fb,_0x55c7bf),this[_0x2408de(0x287)](_0x2408de(0x717),Sprite_Battler['_motionSpeed']),this['push'](_0x2408de(0x253),_0x1e63fb,_0x264289[_0x2408de(0x3c7)](),_0x1ebb6c[_0x2408de(0xc91)]),this[_0x2408de(0x287)](_0x2408de(0x787));for(const _0xae2bec of _0x264289){if(!_0xae2bec)continue;this[_0x2408de(0x287)](_0x2408de(0xa08),_0x1e63fb,_0xae2bec);}},Window_BattleLog[_0x45cef8(0x3cf)]['finishActionSet']=function(_0x1300d8,_0x27743b,_0x580dbe){const _0x4dc214=_0x45cef8,_0x35c1b1=_0x27743b[_0x4dc214(0x3a4)]();this[_0x4dc214(0x287)](_0x4dc214(0x79f),_0x1300d8,_0x580dbe,![]),this[_0x4dc214(0x287)]('waitForNewLine'),this['push'](_0x4dc214(0x251)),this[_0x4dc214(0x287)](_0x4dc214(0x6db)),this[_0x4dc214(0x287)]('performActionEnd',_0x1300d8),this[_0x4dc214(0x287)](_0x4dc214(0x9a0));},Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x8ce)]=function(_0x4aea7c){},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x97f)]=Window_BattleLog['prototype'][_0x45cef8(0x985)],Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x985)]=function(_0x499d2d){const _0x2ab2ef=_0x45cef8;if(!VisuMZ['BattleCore'][_0x2ab2ef(0x658)]['BattleLog']['ShowCurrentState'])return;VisuMZ['BattleCore'][_0x2ab2ef(0x97f)][_0x2ab2ef(0xa07)](this,_0x499d2d);},Window_BattleLog['prototype'][_0x45cef8(0x7cd)]=function(_0x59713a){const _0x5dedaf=_0x45cef8;this[_0x5dedaf(0x287)]('performCounter',_0x59713a);VisuMZ[_0x5dedaf(0x6c0)][_0x5dedaf(0x658)]['ActionSequence'][_0x5dedaf(0x270)]&&this[_0x5dedaf(0x287)](_0x5dedaf(0x253),_0x59713a,[BattleManager[_0x5dedaf(0x8af)]],-0x1);if(!VisuMZ['BattleCore'][_0x5dedaf(0x658)][_0x5dedaf(0xcbb)][_0x5dedaf(0xb97)])return;this[_0x5dedaf(0x287)](_0x5dedaf(0x4b8),TextManager[_0x5dedaf(0x9a1)][_0x5dedaf(0x9ec)](_0x59713a['name']()));},Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x764)]=function(_0x564962){const _0xbd9a4b=_0x45cef8;this[_0xbd9a4b(0x287)](_0xbd9a4b(0xb37),_0x564962);if(!VisuMZ['BattleCore'][_0xbd9a4b(0x658)]['BattleLog']['ShowReflect'])return;this[_0xbd9a4b(0x287)](_0xbd9a4b(0x4b8),TextManager[_0xbd9a4b(0x92e)][_0xbd9a4b(0x9ec)](_0x564962[_0xbd9a4b(0xd00)]()));},Window_BattleLog['prototype']['displayReflectionPlayBack']=function(_0x905a18,_0x124850){const _0x2731ca=_0x45cef8;if(VisuMZ[_0x2731ca(0x6c0)]['Settings'][_0x2731ca(0xa95)][_0x2731ca(0x7bc)]){if(_0x2731ca(0x22c)===_0x2731ca(0x306))return _0x239733[_0x2731ca(0x3cf)]['damageOffsetY']['call'](this);else{const _0x1510ac=_0x124850[_0x2731ca(0x3a4)]();this[_0x2731ca(0x287)](_0x2731ca(0x253),_0x905a18,[_0x905a18],_0x1510ac[_0x2731ca(0xc91)]);}}},Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0xbd7)]=function(_0x552b59,_0x128d79){const _0x4f901a=_0x45cef8;this[_0x4f901a(0x287)](_0x4f901a(0x7b8),_0x552b59,_0x128d79);if(!VisuMZ[_0x4f901a(0x6c0)]['Settings']['BattleLog']['ShowSubstitute'])return;const _0x13a868=_0x552b59[_0x4f901a(0xd00)](),_0x1f8b49=TextManager[_0x4f901a(0x268)][_0x4f901a(0x9ec)](_0x13a868,_0x128d79[_0x4f901a(0xd00)]());this[_0x4f901a(0x287)](_0x4f901a(0x4b8),_0x1f8b49);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x4a7)]=Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x4d8)],Window_BattleLog[_0x45cef8(0x3cf)]['displayActionResults']=function(_0x2a916a,_0x9fd372){const _0x1dd732=_0x45cef8;VisuMZ[_0x1dd732(0x6c0)]['Window_BattleLog_displayActionResults'][_0x1dd732(0xa07)](this,_0x2a916a,_0x9fd372);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x2f1)]=Window_BattleLog['prototype']['displayFailure'],Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x53b)]=function(_0x4d47ca){const _0xbc3da3=_0x45cef8;if(!VisuMZ[_0xbc3da3(0x6c0)]['Settings'][_0xbc3da3(0xcbb)][_0xbc3da3(0x1dd)])return;VisuMZ['BattleCore']['Window_BattleLog_displayFailure'][_0xbc3da3(0xa07)](this,_0x4d47ca);},VisuMZ[_0x45cef8(0x6c0)]['Window_BattleLog_displayCritical']=Window_BattleLog['prototype']['displayCritical'],Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x4c8)]=function(_0x33d7ca){const _0x4c7089=_0x45cef8;if(!VisuMZ[_0x4c7089(0x6c0)][_0x4c7089(0x658)][_0x4c7089(0xcbb)][_0x4c7089(0x52f)])return;VisuMZ[_0x4c7089(0x6c0)][_0x4c7089(0xb43)][_0x4c7089(0xa07)](this,_0x33d7ca);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x7e7)]=Window_BattleLog[_0x45cef8(0x3cf)]['displayMiss'],Window_BattleLog[_0x45cef8(0x3cf)]['displayMiss']=function(_0x4646cc){const _0x360ff1=_0x45cef8;if(!VisuMZ['BattleCore']['Settings']['BattleLog'][_0x360ff1(0x9c3)]){if(_0x360ff1(0x383)!==_0x360ff1(0x383))return _0x35d978=_0x16a8f2[_0x360ff1(0x5d3)]()[_0x360ff1(0x7f3)](),this[_0x360ff1(0x8cc)]()===_0x121946;else this[_0x360ff1(0x287)](_0x360ff1(0x452),_0x4646cc);}else VisuMZ[_0x360ff1(0x6c0)]['Window_BattleLog_displayMiss']['call'](this,_0x4646cc);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x4da)]=Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x7dc)],Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x7dc)]=function(_0x5dbbe0){const _0x3c0915=_0x45cef8;!VisuMZ[_0x3c0915(0x6c0)][_0x3c0915(0x658)]['BattleLog'][_0x3c0915(0x9c3)]?_0x5dbbe0[_0x3c0915(0x238)]()[_0x3c0915(0xc39)]?_0x3c0915(0x416)!==_0x3c0915(0xb90)?this[_0x3c0915(0x287)](_0x3c0915(0x21b),_0x5dbbe0):_0x19e8a1[_0x3c0915(0x633)]():this[_0x3c0915(0x287)](_0x3c0915(0xbd6),_0x5dbbe0):_0x3c0915(0x2ab)!==_0x3c0915(0x24c)?VisuMZ[_0x3c0915(0x6c0)][_0x3c0915(0x4da)][_0x3c0915(0xa07)](this,_0x5dbbe0):(this[_0x3c0915(0x292)]=new _0x1692e1(),_0x43f574[_0x3c0915(0x3d2)]?this[_0x3c0915(0x5b6)](this[_0x3c0915(0x292)]):this['_battleField'][_0x3c0915(0x5b6)](this[_0x3c0915(0x292)]));},Window_BattleLog[_0x45cef8(0x3cf)]['displayHpDamage']=function(_0x293d79){const _0x478854=_0x45cef8;_0x293d79[_0x478854(0x238)]()[_0x478854(0xa99)]&&(_0x293d79['result']()[_0x478854(0x3de)]>0x0&&!_0x293d79['result']()['drain']&&(_0x478854(0x75e)!=='iTueB'?this[_0x478854(0xb40)]=null:this[_0x478854(0x287)](_0x478854(0x5e8),_0x293d79)),_0x293d79[_0x478854(0x238)]()['hpDamage']<0x0&&this[_0x478854(0x287)](_0x478854(0x2e9),_0x293d79),VisuMZ[_0x478854(0x6c0)][_0x478854(0x658)]['BattleLog']['ShowHpDmg']&&this['push']('addText',this['makeHpDamageText'](_0x293d79)));},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x92f)]=Window_BattleLog['prototype'][_0x45cef8(0xafa)],Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0xafa)]=function(_0x3f62e0){const _0x2d3916=_0x45cef8;if(!VisuMZ[_0x2d3916(0x6c0)][_0x2d3916(0x658)][_0x2d3916(0xcbb)]['ShowMpDmg'])return;VisuMZ[_0x2d3916(0x6c0)][_0x2d3916(0x92f)][_0x2d3916(0xa07)](this,_0x3f62e0);},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xcf9)]=Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x744)],Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x744)]=function(_0x548bf2){const _0x272760=_0x45cef8;if(!VisuMZ[_0x272760(0x6c0)][_0x272760(0x658)][_0x272760(0xcbb)][_0x272760(0x446)])return;VisuMZ['BattleCore'][_0x272760(0xcf9)][_0x272760(0xa07)](this,_0x548bf2);},Window_BattleLog['prototype']['displayAffectedStatus']=function(_0x5dfad0){const _0x3e6703=_0x45cef8;_0x5dfad0['result']()[_0x3e6703(0xc92)]()&&(this[_0x3e6703(0x287)]('pushBaseLine'),this[_0x3e6703(0x4bf)](_0x5dfad0),this['displayChangedBuffs'](_0x5dfad0),this[_0x3e6703(0x287)](_0x3e6703(0x79d)));},Window_BattleLog[_0x45cef8(0x3cf)]['displayAddedStates']=function(_0x23eba9){const _0x5aceb0=_0x45cef8,_0x3b66a1=_0x23eba9[_0x5aceb0(0x238)](),_0x12c174=_0x3b66a1[_0x5aceb0(0x47e)]();for(const _0x4170f5 of _0x12c174){if(_0x5aceb0(0xae2)!=='AzZZQ'){const _0x5036c6=_0x23eba9[_0x5aceb0(0x98a)]()?_0x4170f5[_0x5aceb0(0x1d9)]:_0x4170f5[_0x5aceb0(0xb0e)];_0x5036c6&&VisuMZ[_0x5aceb0(0x6c0)][_0x5aceb0(0x658)][_0x5aceb0(0xcbb)][_0x5aceb0(0x507)]&&(this[_0x5aceb0(0x287)](_0x5aceb0(0x5d4)),this[_0x5aceb0(0x287)](_0x5aceb0(0xa65)),this[_0x5aceb0(0x287)](_0x5aceb0(0xc8f)),this['push'](_0x5aceb0(0x4b8),_0x5036c6[_0x5aceb0(0x9ec)](_0x23eba9[_0x5aceb0(0xd00)]())),this[_0x5aceb0(0x287)](_0x5aceb0(0xcfe))),_0x4170f5['id']===_0x23eba9[_0x5aceb0(0xa3c)]()&&this[_0x5aceb0(0x287)](_0x5aceb0(0xa2b),_0x23eba9);}else _0x7e8282['BattleCore'][_0x5aceb0(0x7e7)][_0x5aceb0(0xa07)](this,_0x2b3460);}},Window_BattleLog['prototype']['fnordAddedStates']=function(){},Window_BattleLog[_0x45cef8(0x3cf)]['displayRemovedStates']=function(_0x5b8e68){const _0x327635=_0x45cef8;if(!VisuMZ[_0x327635(0x6c0)]['Settings'][_0x327635(0xcbb)][_0x327635(0x7e8)])return;const _0x3d2957=_0x5b8e68[_0x327635(0x238)](),_0x182ab9=_0x3d2957['removedStateObjects']();for(const _0x3379b8 of _0x182ab9){_0x3379b8[_0x327635(0xa10)]&&(this[_0x327635(0x287)]('fnordRemovedStates'),this[_0x327635(0x287)](_0x327635(0xa65)),this[_0x327635(0x287)](_0x327635(0xc8f)),this[_0x327635(0x287)](_0x327635(0x4b8),_0x3379b8['message4']['format'](_0x5b8e68['name']())),this[_0x327635(0x287)](_0x327635(0xcfe)));}},Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x36a)]=function(){},Window_BattleLog['prototype'][_0x45cef8(0x965)]=function(_0xd6fbee){const _0x15815e=_0x45cef8,_0x4bd354=VisuMZ[_0x15815e(0x6c0)]['Settings'][_0x15815e(0xcbb)],_0x3cb4e4=_0xd6fbee['result']();if(_0x4bd354[_0x15815e(0x488)])this[_0x15815e(0x564)](_0xd6fbee,_0x3cb4e4[_0x15815e(0x5f3)],TextManager[_0x15815e(0xc09)]);if(_0x4bd354[_0x15815e(0x6e4)])this[_0x15815e(0x564)](_0xd6fbee,_0x3cb4e4['addedDebuffs'],TextManager[_0x15815e(0xc84)]);if(_0x4bd354[_0x15815e(0x850)])this['displayBuffs'](_0xd6fbee,_0x3cb4e4[_0x15815e(0x8ea)],TextManager['buffRemove']);},Window_BattleLog[_0x45cef8(0x3cf)]['displayBuffs']=function(_0x4054ec,_0x250236,_0x38a4e8){const _0x418346=_0x45cef8;for(const _0x192dc5 of _0x250236){if(_0x418346(0xc27)!==_0x418346(0x31d)){const _0x24add1=_0x38a4e8[_0x418346(0x9ec)](_0x4054ec['name'](),TextManager['param'](_0x192dc5));this[_0x418346(0x287)](_0x418346(0xa65)),this[_0x418346(0x287)](_0x418346(0xc8f)),this[_0x418346(0x287)](_0x418346(0x4b8),_0x24add1),this['push'](_0x418346(0xcfe));}else return this[_0x418346(0xd01)]?this[_0x418346(0xd01)][_0x418346(0x877)]===0x0&&this[_0x418346(0xd01)]['_offsetY']===0x0:!![];}},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x346)]=Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x6db)],Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x6db)]=function(){const _0x1eedc8=_0x45cef8;VisuMZ[_0x1eedc8(0x6c0)][_0x1eedc8(0x346)]['call'](this),this[_0x1eedc8(0x5d7)]();},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x355)]=Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0xc8f)],Window_BattleLog['prototype']['pushBaseLine']=function(){const _0x3f133c=_0x45cef8;VisuMZ[_0x3f133c(0x6c0)]['Window_BattleLog_pushBaseLine'][_0x3f133c(0xa07)](this),this[_0x3f133c(0x5d7)]();},VisuMZ['BattleCore'][_0x45cef8(0x547)]=Window_BattleLog[_0x45cef8(0x3cf)]['popBaseLine'],Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0xa65)]=function(){const _0x4e6f42=_0x45cef8;VisuMZ[_0x4e6f42(0x6c0)]['Window_BattleLog_popBaseLine'][_0x4e6f42(0xa07)](this),this[_0x4e6f42(0x645)](),this[_0x4e6f42(0x5d7)]();},VisuMZ['BattleCore'][_0x45cef8(0x91b)]=Window_BattleLog['prototype'][_0x45cef8(0x3fa)],Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x3fa)]=function(_0x25bd20){const _0x52f697=_0x45cef8;VisuMZ[_0x52f697(0x6c0)]['Window_BattleLog_popupDamage'][_0x52f697(0xa07)](this,_0x25bd20),this[_0x52f697(0x5d7)]();},Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x79d)]=function(){const _0x8b0d15=_0x45cef8;let _0x45a725=0x0;this['_baseLineStack'][_0x8b0d15(0xcc5)]>0x0&&(_0x45a725=this[_0x8b0d15(0x9f0)][this['_baseLineStack'][_0x8b0d15(0xcc5)]-0x1]),this[_0x8b0d15(0x1e4)]['length']>_0x45a725?'LXEgd'!==_0x8b0d15(0x597)?this['wait']():(_0x46f2b9[_0x8b0d15(0x6c0)][_0x8b0d15(0x28a)]['call'](this),this[_0x8b0d15(0x318)]&&(this['updateStateSprite'](),this['updateStyleOpacity']())):this[_0x8b0d15(0x5d7)]();},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x654)]=Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0xcb1)],Window_BattleLog['prototype']['performActionStart']=function(_0x127b2b,_0xb49b75){const _0x27f84b=_0x45cef8;VisuMZ['BattleCore'][_0x27f84b(0x654)][_0x27f84b(0xa07)](this,_0x127b2b,_0xb49b75),this[_0x27f84b(0x5d7)]();},VisuMZ[_0x45cef8(0x6c0)]['Window_BattleLog_performAction']=Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x8a3)],Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x8a3)]=function(_0x3442e8,_0x2eadea){const _0x2e1d31=_0x45cef8;VisuMZ[_0x2e1d31(0x6c0)][_0x2e1d31(0x39a)][_0x2e1d31(0xa07)](this,_0x3442e8,_0x2eadea),this['callNextMethod']();},VisuMZ[_0x45cef8(0x6c0)]['Window_BattleLog_performActionEnd']=Window_BattleLog['prototype'][_0x45cef8(0xd06)],Window_BattleLog[_0x45cef8(0x3cf)]['performActionEnd']=function(_0x4ad9d0){const _0x976494=_0x45cef8;VisuMZ['BattleCore'][_0x976494(0x484)][_0x976494(0xa07)](this,_0x4ad9d0);for(const _0x414cf3 of BattleManager[_0x976494(0x7de)]()){if(!_0x414cf3)continue;if(_0x414cf3[_0x976494(0x61e)]())continue;_0x414cf3['performActionEndMembers']();}this['callNextMethod']();},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x7d1)]=Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x5e8)],Window_BattleLog['prototype'][_0x45cef8(0x5e8)]=function(_0x19ea53){const _0x5f4cc7=_0x45cef8;VisuMZ['BattleCore'][_0x5f4cc7(0x7d1)]['call'](this,_0x19ea53),this[_0x5f4cc7(0x5d7)]();},VisuMZ['BattleCore'][_0x45cef8(0x718)]=Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x452)],Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x452)]=function(_0xcc9fce){const _0x213951=_0x45cef8;VisuMZ[_0x213951(0x6c0)][_0x213951(0x718)]['call'](this,_0xcc9fce),this['callNextMethod']();},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x8ec)]=Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x2e9)],Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x2e9)]=function(_0x28cebe){const _0x499786=_0x45cef8;VisuMZ[_0x499786(0x6c0)]['Window_BattleLog_performRecovery'][_0x499786(0xa07)](this,_0x28cebe),this[_0x499786(0x5d7)]();},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xb6e)]=Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x21b)],Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x21b)]=function(_0x4e6720){const _0x53e2f6=_0x45cef8;VisuMZ[_0x53e2f6(0x6c0)]['Window_BattleLog_performEvasion'][_0x53e2f6(0xa07)](this,_0x4e6720),this['callNextMethod']();},VisuMZ['BattleCore'][_0x45cef8(0xb63)]=Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0xbd6)],Window_BattleLog['prototype'][_0x45cef8(0xbd6)]=function(_0xe5e19a){const _0x1fecaf=_0x45cef8;VisuMZ[_0x1fecaf(0x6c0)][_0x1fecaf(0xb63)][_0x1fecaf(0xa07)](this,_0xe5e19a),this['callNextMethod']();},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x458)]=Window_BattleLog['prototype']['performCounter'],Window_BattleLog['prototype'][_0x45cef8(0x48d)]=function(_0x285031){const _0x9371c6=_0x45cef8;VisuMZ['BattleCore'][_0x9371c6(0x458)]['call'](this,_0x285031),this[_0x9371c6(0x5d7)]();},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0xbde)]=Window_BattleLog[_0x45cef8(0x3cf)]['performReflection'],Window_BattleLog['prototype']['performReflection']=function(_0x13693d){const _0x223ee7=_0x45cef8;VisuMZ[_0x223ee7(0x6c0)][_0x223ee7(0xbde)]['call'](this,_0x13693d),this['callNextMethod']();},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x659)]=Window_BattleLog['prototype'][_0x45cef8(0x7b8)],Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x7b8)]=function(_0x3c16eb,_0x490624){const _0x57570f=_0x45cef8;VisuMZ[_0x57570f(0x6c0)][_0x57570f(0x659)][_0x57570f(0xa07)](this,_0x3c16eb,_0x490624),this[_0x57570f(0x5d7)]();},VisuMZ[_0x45cef8(0x6c0)][_0x45cef8(0x761)]=Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0xa2b)],Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0xa2b)]=function(_0x280d22){const _0x4f159e=_0x45cef8;VisuMZ[_0x4f159e(0x6c0)][_0x4f159e(0x761)][_0x4f159e(0xa07)](this,_0x280d22),this[_0x4f159e(0x5d7)]();},Window_BattleLog['prototype'][_0x45cef8(0x54e)]=function(_0x1f7bf9,_0x4f3406){const _0x18fad9=_0x45cef8;_0x1f7bf9[_0x18fad9(0x54e)](_0x4f3406),this[_0x18fad9(0x5d7)]();},Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0x454)]=function(_0x1b9bbb,_0x221588){const _0x5e16ef=_0x45cef8,_0x388852=_0x1b9bbb['attackAnimationId1']();_0x388852<=0x0?SoundManager['playEnemyAttack']():_0x5e16ef(0xcb8)===_0x5e16ef(0xcb8)?this[_0x5e16ef(0x981)](_0x221588,_0x388852):(_0x3fc1f0+=_0x300de6,_0x441352+=_0x581759[_0x5e16ef(0x98a)]()?-_0x416e7e:_0x2fdb6f);},Window_BattleLog[_0x45cef8(0x3cf)]['applyImmortal']=function(_0x4d8113,_0x5e930d,_0x28bf91){const _0x4b63c8=[_0x4d8113]['concat'](_0x5e930d);for(const _0x1c7279 of _0x4b63c8){if(!_0x1c7279)continue;_0x1c7279['setImmortal'](_0x28bf91);}this['callNextMethod']();},Window_BattleLog[_0x45cef8(0x3cf)]['waitCount']=function(_0x56ea10){const _0x3abfb6=_0x45cef8;this[_0x3abfb6(0x936)]=_0x56ea10;},Window_BattleLog['prototype']['requestMotion']=function(_0x4c8110,_0x5ef389){const _0x56a982=_0x45cef8;for(const _0x49ae78 of _0x4c8110){if(!_0x49ae78)continue;_0x49ae78[_0x56a982(0x8c4)](_0x5ef389);}this['callNextMethod']();},Window_BattleLog['prototype'][_0x45cef8(0x34e)]=function(_0x3f6c67,_0xcd8a80,_0x63fc72,_0x8c44f4,_0x4bf3a5,_0x38e6d5){_0x3f6c67['moveBattlerToPoint'](_0xcd8a80,_0x63fc72,_0x8c44f4,_0x4bf3a5,_0x38e6d5,-0x1),this['callNextMethod']();},Window_BattleLog['prototype'][_0x45cef8(0x878)]=function(_0x57677b,_0x1311d3,_0x79fa55,_0x38b9eb,_0x4642f8,_0x493bd2,_0x8c92ed){const _0x11fa55=_0x45cef8,_0x1780f8=Math['min'](..._0x1311d3['map'](_0xf2c819=>_0xf2c819[_0x11fa55(0x231)]()[_0x11fa55(0x3c6)]-_0xf2c819[_0x11fa55(0x231)]()['mainSpriteWidth']()/0x2)),_0x44c886=Math[_0x11fa55(0x2ce)](..._0x1311d3[_0x11fa55(0x4a9)](_0x100572=>_0x100572[_0x11fa55(0x231)]()[_0x11fa55(0x3c6)]+_0x100572[_0x11fa55(0x231)]()['mainSpriteWidth']()/0x2)),_0x415c16=Math['min'](..._0x1311d3[_0x11fa55(0x4a9)](_0x3e1482=>_0x3e1482[_0x11fa55(0x231)]()[_0x11fa55(0x987)]-_0x3e1482[_0x11fa55(0x231)]()['mainSpriteHeight']())),_0x24f33e=Math[_0x11fa55(0x2ce)](..._0x1311d3['map'](_0x3f212a=>_0x3f212a[_0x11fa55(0x231)]()['_baseY'])),_0x41b3f3=_0x1311d3[_0x11fa55(0x4db)](_0x324077=>_0x324077['isActor']())[_0x11fa55(0xcc5)],_0x4935ce=_0x1311d3[_0x11fa55(0x4db)](_0x282992=>_0x282992['isEnemy']())[_0x11fa55(0xcc5)];let _0x30e1f8=0x0,_0x17b84c=0x0;if(_0x79fa55['match'](/front/i))_0x30e1f8=_0x41b3f3>=_0x4935ce?_0x1780f8:_0x44c886;else{if(_0x79fa55[_0x11fa55(0x291)](/middle/i))_0x30e1f8=(_0x1780f8+_0x44c886)/0x2,_0x8c92ed=-0x1;else _0x79fa55[_0x11fa55(0x291)](/back/i)&&(_0x30e1f8=_0x41b3f3>=_0x4935ce?_0x44c886:_0x1780f8);}if(_0x79fa55[_0x11fa55(0x291)](/head/i))_0x17b84c=_0x415c16;else{if(_0x79fa55['match'](/center/i)){if(_0x11fa55(0x232)===_0x11fa55(0x232))_0x17b84c=(_0x415c16+_0x24f33e)/0x2;else{if(_0x277b4f['uiMenuStyle']&&_0x473438[_0x11fa55(0x6ef)]!==_0x2f5a7c)return _0x13ba62['uiInputPosition'];else{if(this[_0x11fa55(0x6e8)]()===_0x11fa55(0x6b2))return![];else{return _0x280018['prototype'][_0x11fa55(0x81e)][_0x11fa55(0xa07)](this);;}}}}else _0x79fa55[_0x11fa55(0x291)](/base/i)&&(_0x17b84c=_0x24f33e);}_0x57677b['moveBattlerToPoint'](_0x30e1f8,_0x17b84c,_0x38b9eb,_0x4642f8,_0x493bd2,_0x8c92ed),this[_0x11fa55(0x5d7)]();},Window_BattleLog[_0x45cef8(0x3cf)][_0x45cef8(0xc0d)]=function(_0x133922,_0x2a6c30,_0x5b8bac){const _0x254798=_0x45cef8;for(const _0x2e4c45 of _0x133922){if(_0x254798(0x374)!==_0x254798(0x57f)){if(!_0x2e4c45)continue;_0x2e4c45[_0x254798(0x4ce)](_0x2a6c30,_0x5b8bac);}else{if(this[_0x254798(0xc9f)]()!=='')return this[_0x254798(0xc9f)]();else{if(_0x2ec016[_0x254798(0x453)]&&this['getMenuImage']()!=='')return this['getMenuImage']();}return'';}}this['callNextMethod']();};