//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.64;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.64] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   JS: 1:1:
 *   JS: 1:1:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param Battleback:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScale Up:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0x5507dd=_0x38a5;(function(_0x2f5a76,_0x4a0e93){const _0x4ac59d=_0x38a5,_0x437151=_0x2f5a76();while(!![]){try{const _0x116de8=-parseInt(_0x4ac59d(0x2ca))/0x1+parseInt(_0x4ac59d(0x9f7))/0x2+parseInt(_0x4ac59d(0x98f))/0x3*(-parseInt(_0x4ac59d(0x1c0))/0x4)+-parseInt(_0x4ac59d(0x617))/0x5+-parseInt(_0x4ac59d(0x444))/0x6*(-parseInt(_0x4ac59d(0x90c))/0x7)+parseInt(_0x4ac59d(0x36f))/0x8+parseInt(_0x4ac59d(0x4cf))/0x9;if(_0x116de8===_0x4a0e93)break;else _0x437151['push'](_0x437151['shift']());}catch(_0x49fb8d){_0x437151['push'](_0x437151['shift']());}}}(_0x6ddf,0xcf1c5));var label=_0x5507dd(0x8af),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x5507dd(0x1b4)](function(_0x15ff1b){const _0xd1e1a6=_0x5507dd;return _0x15ff1b['status']&&_0x15ff1b[_0xd1e1a6(0x4d9)][_0xd1e1a6(0x351)]('['+label+']');})[0x0];VisuMZ[label][_0x5507dd(0x32e)]=VisuMZ[label][_0x5507dd(0x32e)]||{},VisuMZ['ConvertParams']=function(_0xad236b,_0x304335){const _0x44fd84=_0x5507dd;for(const _0xd236c1 in _0x304335){if(_0xd236c1['match'](/(.*):(.*)/i)){const _0x296a17=String(RegExp['$1']),_0x398c63=String(RegExp['$2'])[_0x44fd84(0x5d6)]()['trim']();let _0x518640,_0x242832,_0x27ff0e;switch(_0x398c63){case'NUM':_0x518640=_0x304335[_0xd236c1]!==''?Number(_0x304335[_0xd236c1]):0x0;break;case _0x44fd84(0x948):_0x242832=_0x304335[_0xd236c1]!==''?JSON[_0x44fd84(0x929)](_0x304335[_0xd236c1]):[],_0x518640=_0x242832[_0x44fd84(0x4d2)](_0x554fc8=>Number(_0x554fc8));break;case _0x44fd84(0x7e9):_0x518640=_0x304335[_0xd236c1]!==''?eval(_0x304335[_0xd236c1]):null;break;case _0x44fd84(0x274):_0x242832=_0x304335[_0xd236c1]!==''?JSON[_0x44fd84(0x929)](_0x304335[_0xd236c1]):[],_0x518640=_0x242832['map'](_0x138103=>eval(_0x138103));break;case _0x44fd84(0x5c1):_0x518640=_0x304335[_0xd236c1]!==''?JSON[_0x44fd84(0x929)](_0x304335[_0xd236c1]):'';break;case _0x44fd84(0x96b):_0x242832=_0x304335[_0xd236c1]!==''?JSON[_0x44fd84(0x929)](_0x304335[_0xd236c1]):[],_0x518640=_0x242832[_0x44fd84(0x4d2)](_0x15e40e=>JSON[_0x44fd84(0x929)](_0x15e40e));break;case _0x44fd84(0x3c1):_0x518640=_0x304335[_0xd236c1]!==''?new Function(JSON[_0x44fd84(0x929)](_0x304335[_0xd236c1])):new Function(_0x44fd84(0x362));break;case _0x44fd84(0x947):_0x242832=_0x304335[_0xd236c1]!==''?JSON[_0x44fd84(0x929)](_0x304335[_0xd236c1]):[],_0x518640=_0x242832['map'](_0x3219ae=>new Function(JSON['parse'](_0x3219ae)));break;case _0x44fd84(0x9f6):_0x518640=_0x304335[_0xd236c1]!==''?String(_0x304335[_0xd236c1]):'';break;case _0x44fd84(0x984):_0x242832=_0x304335[_0xd236c1]!==''?JSON['parse'](_0x304335[_0xd236c1]):[],_0x518640=_0x242832[_0x44fd84(0x4d2)](_0x180eb3=>String(_0x180eb3));break;case _0x44fd84(0x5f0):_0x27ff0e=_0x304335[_0xd236c1]!==''?JSON['parse'](_0x304335[_0xd236c1]):{},_0xad236b[_0x296a17]={},VisuMZ[_0x44fd84(0x8fb)](_0xad236b[_0x296a17],_0x27ff0e);continue;case'ARRAYSTRUCT':_0x242832=_0x304335[_0xd236c1]!==''?JSON['parse'](_0x304335[_0xd236c1]):[],_0x518640=_0x242832[_0x44fd84(0x4d2)](_0x7c03b6=>VisuMZ[_0x44fd84(0x8fb)]({},JSON[_0x44fd84(0x929)](_0x7c03b6)));break;default:continue;}_0xad236b[_0x296a17]=_0x518640;}}return _0xad236b;},(_0x567bdf=>{const _0x2a6c48=_0x5507dd,_0x1ae3df=_0x567bdf[_0x2a6c48(0x55f)];for(const _0x5bc3dc of dependencies){if(!Imported[_0x5bc3dc]){alert('%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.'['format'](_0x1ae3df,_0x5bc3dc)),SceneManager['exit']();break;}}const _0x1e9fe6=_0x567bdf[_0x2a6c48(0x4d9)];if(_0x1e9fe6[_0x2a6c48(0x1f2)](/\[Version[ ](.*?)\]/i)){const _0x3ad5d5=Number(RegExp['$1']);_0x3ad5d5!==VisuMZ[label]['version']&&(alert(_0x2a6c48(0x5db)[_0x2a6c48(0x5d0)](_0x1ae3df,_0x3ad5d5)),SceneManager[_0x2a6c48(0x26a)]());}if(_0x1e9fe6[_0x2a6c48(0x1f2)](/\[Tier[ ](\d+)\]/i)){const _0x5abdd2=Number(RegExp['$1']);_0x5abdd2<tier?(alert(_0x2a6c48(0x626)[_0x2a6c48(0x5d0)](_0x1ae3df,_0x5abdd2,tier)),SceneManager[_0x2a6c48(0x26a)]()):tier=Math['max'](_0x5abdd2,tier);}VisuMZ[_0x2a6c48(0x8fb)](VisuMZ[label][_0x2a6c48(0x32e)],_0x567bdf[_0x2a6c48(0x645)]);})(pluginData),VisuMZ['CreateActionSequenceTargets']=function(_0x373128){const _0x3b590e=_0x5507dd;let _0x4c2660=[];for(const _0x1083c7 of _0x373128){_0x4c2660=_0x4c2660[_0x3b590e(0x2ee)](VisuMZ['ConvertActionSequenceTarget'](_0x1083c7));}return _0x4c2660['filter'](_0x68419a=>_0x68419a);},VisuMZ[_0x5507dd(0x50f)]=function(_0x934acd){const _0x2d3278=_0x5507dd,_0x3d6afc=BattleManager[_0x2d3278(0x304)]()[_0x2d3278(0x1b4)](_0x896189=>_0x896189&&_0x896189[_0x2d3278(0x704)]()),_0x1df987=BattleManager[_0x2d3278(0x1bb)],_0x36f7b3=BattleManager['_target'],_0x146daa=BattleManager[_0x2d3278(0x91b)]?BattleManager[_0x2d3278(0x91b)]['slice'](0x0):_0x3d6afc;_0x934acd=_0x934acd[_0x2d3278(0x5c8)]()[_0x2d3278(0x48c)]();if(_0x934acd==='user')return[_0x1df987];else{if(_0x934acd===_0x2d3278(0x232))return[_0x36f7b3];else{if(_0x934acd==='prev\x20target'){if(_0x36f7b3){const _0x329e18=_0x146daa[_0x2d3278(0x33f)](_0x36f7b3);return _0x329e18>=0x0?[_0x146daa[_0x329e18-0x1]||_0x36f7b3]:[_0x36f7b3];}}else{if(_0x934acd===_0x2d3278(0x440)){if(_0x36f7b3){const _0x17f717=_0x146daa[_0x2d3278(0x33f)](_0x36f7b3);return _0x17f717>=0x0?[_0x146daa[_0x17f717+0x1]||_0x36f7b3]:[_0x36f7b3];}}else{if(_0x934acd==='all\x20targets')return _0x146daa;else{if(_0x934acd==='focus')return[_0x1df987]['concat'](_0x146daa);else{if(_0x934acd==='not\x20focus')return _0x3d6afc[_0x2d3278(0x1b4)](_0x25976b=>_0x25976b!==_0x1df987&&!_0x146daa['includes'](_0x25976b)&&_0x25976b[_0x2d3278(0x4f6)]());}}}}}}if(_0x1df987){if(_0x934acd===_0x2d3278(0x985))return _0x1df987['friendsUnit']()[_0x2d3278(0x682)]();else{if(_0x934acd===_0x2d3278(0x695))return _0x1df987[_0x2d3278(0x4b8)]()[_0x2d3278(0x682)]()[_0x2d3278(0x1b4)](_0x3eadf9=>_0x3eadf9!==_0x1df987);else{if(_0x934acd==='alive\x20friends\x20not\x20target')return _0x1df987[_0x2d3278(0x4b8)]()['aliveMembers']()[_0x2d3278(0x1b4)](_0x40e4eb=>_0x40e4eb!==_0x36f7b3);else{if(_0x934acd===_0x2d3278(0x53f))return _0x1df987[_0x2d3278(0x4b8)]()['deadMembers']();else{if(_0x934acd['match'](/FRIEND INDEX (\d+)/i)){const _0x27d142=Number(RegExp['$1']);return[_0x1df987[_0x2d3278(0x4b8)]()['members']()[_0x27d142]];}}}}}if(_0x934acd===_0x2d3278(0x1b7))return _0x1df987['opponentsUnit']()[_0x2d3278(0x682)]();else{if(_0x934acd==='alive\x20opponents\x20not\x20target')return _0x1df987[_0x2d3278(0x442)]()[_0x2d3278(0x682)]()[_0x2d3278(0x1b4)](_0x292c55=>_0x292c55!==_0x36f7b3);else{if(_0x934acd===_0x2d3278(0xa29))return _0x1df987[_0x2d3278(0x442)]()['deadMembers']();else{if(_0x934acd['match'](/OPPONENT INDEX (\d+)/i)){const _0x413dd0=Number(RegExp['$1']);return[_0x1df987[_0x2d3278(0x442)]()[_0x2d3278(0x29b)]()[_0x413dd0]];}}}}}if(_0x934acd==='alive\x20actors')return $gameParty[_0x2d3278(0x682)]();else{if(_0x934acd===_0x2d3278(0x698))return $gameParty[_0x2d3278(0x682)]()[_0x2d3278(0x1b4)](_0x379944=>_0x379944!==_0x1df987);else{if(_0x934acd===_0x2d3278(0x711))return $gameParty['aliveMembers']()[_0x2d3278(0x1b4)](_0x48dc8a=>_0x48dc8a!==_0x36f7b3);else{if(_0x934acd===_0x2d3278(0x7bd))return $gameParty['deadMembers']();else{if(_0x934acd[_0x2d3278(0x1f2)](/ACTOR INDEX (\d+)/i)){const _0x538104=Number(RegExp['$1']);return[$gameParty[_0x2d3278(0x29b)]()[_0x538104]];}else{if(_0x934acd[_0x2d3278(0x1f2)](/ACTOR ID (\d+)/i)){const _0x200ef9=Number(RegExp['$1']);return[$gameActors[_0x2d3278(0x914)](_0x200ef9)];}}}}}}if(_0x934acd===_0x2d3278(0x2b4))return $gameTroop[_0x2d3278(0x682)]();else{if(_0x934acd===_0x2d3278(0x82b))return $gameTroop[_0x2d3278(0x682)]()[_0x2d3278(0x1b4)](_0x459f58=>_0x459f58!==_0x1df987);else{if(_0x934acd===_0x2d3278(0x2ea))return $gameTroop[_0x2d3278(0x682)]()[_0x2d3278(0x1b4)](_0x3033b4=>_0x3033b4!==_0x36f7b3);else{if(_0x934acd==='dead\x20enemies')return $gameTroop['deadMembers']();else{if(_0x934acd[_0x2d3278(0x1f2)](/ENEMY INDEX (\d+)/i)){const _0x5f5bab=Number(RegExp['$1']);return[$gameTroop['members']()[_0x5f5bab]];}else{if(_0x934acd[_0x2d3278(0x1f2)](/ENEMY ID (\d+)/i)){const _0x3626df=Number(RegExp['$1']);return $gameTroop[_0x2d3278(0x682)]()[_0x2d3278(0x1b4)](_0x53710a=>_0x53710a[_0x2d3278(0x4a0)]()===_0x3626df);}}}}}}if(_0x934acd===_0x2d3278(0x282))return _0x3d6afc[_0x2d3278(0x1b4)](_0x2a7403=>_0x2a7403[_0x2d3278(0x8d4)]());else{if(_0x934acd===_0x2d3278(0x88c))return _0x3d6afc[_0x2d3278(0x1b4)](_0x421788=>_0x421788['isAlive']()&&_0x421788!==_0x1df987);else{if(_0x934acd===_0x2d3278(0x8c7))return _0x3d6afc[_0x2d3278(0x1b4)](_0x4f40ee=>_0x4f40ee[_0x2d3278(0x8d4)]()&&_0x4f40ee!==_0x36f7b3);else{if(_0x934acd===_0x2d3278(0x2e2))return _0x3d6afc[_0x2d3278(0x1b4)](_0x16ef26=>_0x16ef26[_0x2d3278(0x45e)]());}}}return[];},PluginManager[_0x5507dd(0x44e)](pluginData['name'],_0x5507dd(0x7fd),_0x4d7aa0=>{const _0x174b08=_0x5507dd;if(!SceneManager[_0x174b08(0x4dc)]())return;VisuMZ['ConvertParams'](_0x4d7aa0,_0x4d7aa0);const _0x27f509=$gameTemp[_0x174b08(0x38e)](),_0x2fa44f=BattleManager[_0x174b08(0x804)],_0xb89bc5=BattleManager[_0x174b08(0x1bb)],_0x5b4614=BattleManager['_allTargets']?BattleManager[_0x174b08(0x91b)][_0x174b08(0x6f6)](0x0):[],_0x3ef36a=BattleManager[_0x174b08(0x5f6)];if(!_0x27f509||!_0x2fa44f||!_0xb89bc5)return;if(!_0x2fa44f['item']())return;if(_0x4d7aa0[_0x174b08(0x7b2)])_0x3ef36a[_0x174b08(0x407)](_0xb89bc5,_0x2fa44f['item']());_0x4d7aa0['ApplyImmortal']&&_0x3ef36a[_0x174b08(0x47f)](_0x174b08(0x9e8),_0xb89bc5,_0x5b4614,!![]);if(_0x4d7aa0[_0x174b08(0x470)])_0x3ef36a[_0x174b08(0x47f)]('performActionStart',_0xb89bc5,_0x2fa44f);if(_0x4d7aa0[_0x174b08(0x2be)])_0x3ef36a[_0x174b08(0x47f)]('waitForMovement');if(_0x4d7aa0[_0x174b08(0x285)])_0x3ef36a['push']('performCastAnimation',_0xb89bc5,_0x2fa44f);if(_0x4d7aa0[_0x174b08(0x2ec)])_0x3ef36a[_0x174b08(0x47f)](_0x174b08(0x46c));_0x27f509[_0x174b08(0x7ff)](_0x174b08(0x618));}),PluginManager['registerCommand'](pluginData['name'],_0x5507dd(0x868),_0x1334b3=>{const _0x1793da=_0x5507dd;if(!SceneManager[_0x1793da(0x4dc)]())return;VisuMZ[_0x1793da(0x8fb)](_0x1334b3,_0x1334b3);const _0x14da2b=$gameTemp[_0x1793da(0x38e)](),_0xaa7923=BattleManager[_0x1793da(0x804)],_0x4383e8=BattleManager[_0x1793da(0x1bb)],_0x4017e9=BattleManager['_allTargets']?BattleManager[_0x1793da(0x91b)][_0x1793da(0x6f6)](0x0):[],_0x38611b=BattleManager[_0x1793da(0x5f6)],_0x29ae51=_0x1334b3['DualWield']??![];if(!_0x14da2b||!_0xaa7923||!_0x4383e8)return;if(!_0xaa7923[_0x1793da(0x92a)]())return;let _0x30bc68=_0x29ae51?_0x38611b[_0x1793da(0x7eb)](_0x4383e8):0x1;for(let _0x3e042a=0x0;_0x3e042a<_0x30bc68;_0x3e042a++){_0x29ae51&&_0x4383e8[_0x1793da(0x8ed)]()&&_0x38611b[_0x1793da(0x47f)]('setActiveWeaponSet',_0x4383e8,_0x3e042a);if(_0x1334b3['PerformAction'])_0x38611b[_0x1793da(0x47f)](_0x1793da(0x60d),_0x4383e8,_0xaa7923);if(_0x1334b3[_0x1793da(0xa36)]>0x0)_0x38611b[_0x1793da(0x47f)]('waitCount',_0x1334b3[_0x1793da(0xa36)]);if(_0x1334b3[_0x1793da(0xa26)])_0x38611b[_0x1793da(0x47f)](_0x1793da(0x569),_0x4383e8,_0x4017e9,_0xaa7923['item']()[_0x1793da(0x6a6)]);if(_0x1334b3['WaitForAnimation'])_0x38611b[_0x1793da(0x47f)](_0x1793da(0x46c));for(const _0x53e87 of _0x4017e9){if(!_0x53e87)continue;if(_0x1334b3[_0x1793da(0x718)])_0x38611b[_0x1793da(0x47f)](_0x1793da(0x2cc),_0x4383e8,_0x53e87);}}_0x29ae51&&_0x4383e8[_0x1793da(0x8ed)]()&&_0x38611b[_0x1793da(0x47f)](_0x1793da(0x230),_0x4383e8);if(_0x1334b3['ApplyImmortal'])_0x38611b[_0x1793da(0x47f)]('applyImmortal',_0x4383e8,_0x4017e9,![]);_0x14da2b[_0x1793da(0x7ff)]('battlelog');}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x367),_0x371f6b=>{const _0x237fed=_0x5507dd;if(!SceneManager[_0x237fed(0x4dc)]())return;VisuMZ[_0x237fed(0x8fb)](_0x371f6b,_0x371f6b);const _0x294f59=$gameTemp[_0x237fed(0x38e)](),_0x14b427=BattleManager[_0x237fed(0x804)],_0x5743a7=BattleManager[_0x237fed(0x1bb)],_0x3047e4=BattleManager['_allTargets']?BattleManager[_0x237fed(0x91b)][_0x237fed(0x6f6)](0x0):[],_0x1b2dce=BattleManager[_0x237fed(0x5f6)],_0x38a99a=_0x371f6b[_0x237fed(0x1d7)]??![];if(!_0x294f59||!_0x14b427||!_0x5743a7)return;if(!_0x14b427['item']())return;let _0x5f2366=_0x38a99a?_0x1b2dce[_0x237fed(0x7eb)](_0x5743a7):0x1;for(let _0x5b9b37=0x0;_0x5b9b37<_0x5f2366;_0x5b9b37++){for(const _0x4cbad6 of _0x3047e4){if(!_0x4cbad6)continue;_0x38a99a&&_0x5743a7[_0x237fed(0x8ed)]()&&_0x1b2dce[_0x237fed(0x47f)](_0x237fed(0x207),_0x5743a7,_0x5b9b37);if(_0x371f6b['PerformAction'])_0x1b2dce[_0x237fed(0x47f)]('performAction',_0x5743a7,_0x14b427);if(_0x371f6b['WaitCount1']>0x0)_0x1b2dce[_0x237fed(0x47f)](_0x237fed(0x388),_0x371f6b[_0x237fed(0x2dc)]);if(_0x371f6b[_0x237fed(0xa26)])_0x1b2dce[_0x237fed(0x47f)](_0x237fed(0x569),_0x5743a7,[_0x4cbad6],_0x14b427[_0x237fed(0x92a)]()[_0x237fed(0x6a6)]);if(_0x371f6b[_0x237fed(0x48a)]>0x0)_0x1b2dce[_0x237fed(0x47f)](_0x237fed(0x388),_0x371f6b[_0x237fed(0x48a)]);if(_0x371f6b['ActionEffect'])_0x1b2dce[_0x237fed(0x47f)](_0x237fed(0x2cc),_0x5743a7,_0x4cbad6);}}_0x38a99a&&_0x5743a7[_0x237fed(0x8ed)]()&&_0x1b2dce[_0x237fed(0x47f)]('clearActiveWeaponSet',_0x5743a7);if(_0x371f6b[_0x237fed(0x854)])_0x1b2dce['push'](_0x237fed(0x9e8),_0x5743a7,_0x3047e4,![]);_0x294f59[_0x237fed(0x7ff)]('battlelog');}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x69d),_0x14c907=>{const _0x1f76f4=_0x5507dd;if(!SceneManager[_0x1f76f4(0x4dc)]())return;VisuMZ[_0x1f76f4(0x8fb)](_0x14c907,_0x14c907);const _0x315d78=$gameTemp[_0x1f76f4(0x38e)](),_0x2e36ca=BattleManager[_0x1f76f4(0x804)],_0x5e4c79=BattleManager[_0x1f76f4(0x1bb)],_0xa879cf=BattleManager['_allTargets']?BattleManager['_allTargets'][_0x1f76f4(0x6f6)](0x0):[],_0x35cb02=BattleManager[_0x1f76f4(0x5f6)];if(!_0x315d78||!_0x2e36ca||!_0x5e4c79)return;if(!_0x2e36ca[_0x1f76f4(0x92a)]())return;if(_0x14c907[_0x1f76f4(0x854)])_0x35cb02[_0x1f76f4(0x47f)](_0x1f76f4(0x9e8),_0x5e4c79,_0xa879cf,![]);if(_0x14c907['WaitForNewLine'])_0x35cb02[_0x1f76f4(0x47f)](_0x1f76f4(0x721));if(_0x14c907[_0x1f76f4(0x26e)])_0x35cb02['push']('waitForEffect');if(_0x14c907[_0x1f76f4(0x219)])_0x35cb02[_0x1f76f4(0x47f)]('clear');if(_0x14c907[_0x1f76f4(0x7e3)])_0x35cb02[_0x1f76f4(0x47f)]('performActionEnd',_0x5e4c79);if(_0x14c907[_0x1f76f4(0x2be)])_0x35cb02[_0x1f76f4(0x47f)](_0x1f76f4(0x851));_0x315d78[_0x1f76f4(0x7ff)](_0x1f76f4(0x618));}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x302),_0x4c2756=>{const _0x174d6b=_0x5507dd;if(!SceneManager[_0x174d6b(0x4dc)]())return;if(!Imported[_0x174d6b(0x703)])return;VisuMZ[_0x174d6b(0x8fb)](_0x4c2756,_0x4c2756);const _0x59655c=$gameTemp['getLastPluginCommandInterpreter'](),_0x1ca613=_0x4c2756[_0x174d6b(0x26f)];if(!_0x59655c)return;$gameScreen[_0x174d6b(0x856)](_0x4c2756[_0x174d6b(0x589)],_0x4c2756['Duration'],_0x4c2756[_0x174d6b(0x813)]);if(_0x1ca613)_0x59655c[_0x174d6b(0x7ff)](_0x174d6b(0x772));}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x4ee),_0xde21ae=>{const _0x2e5a49=_0x5507dd;if(!SceneManager[_0x2e5a49(0x4dc)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x2e5a49(0x8fb)](_0xde21ae,_0xde21ae);const _0x4f7a0a=$gameTemp[_0x2e5a49(0x38e)](),_0x4dc937=_0xde21ae[_0x2e5a49(0x26f)];if(!_0x4f7a0a)return;$gameScreen[_0x2e5a49(0x856)](0x0,_0xde21ae[_0x2e5a49(0x203)],_0xde21ae[_0x2e5a49(0x813)]);if(_0x4dc937)_0x4f7a0a[_0x2e5a49(0x7ff)](_0x2e5a49(0x772));}),PluginManager[_0x5507dd(0x44e)](pluginData['name'],'ActSeq_Angle_WaitForAngle',_0x3fb885=>{const _0x31a50d=_0x5507dd;if(!SceneManager[_0x31a50d(0x4dc)]())return;if(!Imported[_0x31a50d(0x703)])return;const _0x92c0dc=$gameTemp[_0x31a50d(0x38e)]();if(!_0x92c0dc)return;_0x92c0dc[_0x31a50d(0x7ff)](_0x31a50d(0x772));}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x21d),_0x1e8e8c=>{const _0x4bb3db=_0x5507dd;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4bb3db(0x8fb)](_0x1e8e8c,_0x1e8e8c);const _0x15057a=$gameTemp[_0x4bb3db(0x38e)](),_0x3f7678=BattleManager[_0x4bb3db(0x804)],_0x277ce4=BattleManager[_0x4bb3db(0x1bb)],_0x630057=VisuMZ[_0x4bb3db(0x5eb)](_0x1e8e8c[_0x4bb3db(0x5ed)]),_0x309af9=_0x1e8e8c[_0x4bb3db(0x736)],_0x2960da=BattleManager[_0x4bb3db(0x5f6)];if(!_0x15057a||!_0x3f7678||!_0x277ce4)return;if(!_0x3f7678['item']())return;let _0x3984cf=_0x3f7678[_0x4bb3db(0x92a)]()['animationId'];if(_0x3984cf<0x0)_0x3984cf=_0x277ce4[_0x4bb3db(0x746)]();$gameTemp[_0x4bb3db(0x5e7)](_0x630057,_0x3984cf,_0x309af9),_0x1e8e8c[_0x4bb3db(0x2ec)]&&_0x15057a['setWaitMode']('battleAnimation');}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x8fa),_0x3353e9=>{const _0x41a500=_0x5507dd;if(!SceneManager[_0x41a500(0x4dc)]())return;VisuMZ[_0x41a500(0x8fb)](_0x3353e9,_0x3353e9);const _0x2527be=$gameTemp['getLastPluginCommandInterpreter'](),_0x12a96c=BattleManager[_0x41a500(0x1bb)],_0x447f29=VisuMZ[_0x41a500(0x5eb)](_0x3353e9[_0x41a500(0x5ed)]),_0x503ae4=_0x3353e9['Mirror'],_0x2b90dd=BattleManager['_logWindow'];if(!_0x2527be||!_0x12a96c)return;const _0x3e644c=_0x12a96c[_0x41a500(0x746)]();$gameTemp['requestAnimation'](_0x447f29,_0x3e644c,_0x503ae4),_0x3353e9[_0x41a500(0x2ec)]&&_0x2527be[_0x41a500(0x7ff)](_0x41a500(0x2a4));}),PluginManager['registerCommand'](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x225),_0x3f9929=>{const _0xea4e31=_0x5507dd;if(!SceneManager[_0xea4e31(0x4dc)]())return;VisuMZ[_0xea4e31(0x8fb)](_0x3f9929,_0x3f9929);const _0xcd4e41=_0x48ab90[_0xea4e31(0x320)](_0x3f9929[_0xea4e31(0x2b8)]);if(_0xcd4e41<=0x0)return;const _0xaf80b3=$gameTemp[_0xea4e31(0x38e)](),_0x48ab90=BattleManager[_0xea4e31(0x1bb)],_0x9e46b6=VisuMZ[_0xea4e31(0x5eb)](_0x3f9929[_0xea4e31(0x5ed)]),_0x50ed3b=_0x3f9929[_0xea4e31(0x736)],_0x1ef02d=BattleManager[_0xea4e31(0x5f6)];if(!_0xaf80b3||!_0x48ab90)return;$gameTemp[_0xea4e31(0x5e7)](_0x9e46b6,_0xcd4e41,_0x50ed3b),_0x3f9929[_0xea4e31(0x2ec)]&&_0xaf80b3[_0xea4e31(0x7ff)](_0xea4e31(0x2a4));}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],'ActSeq_Animation_CastAnimation',_0x5dfee9=>{const _0x1cba45=_0x5507dd;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1cba45(0x8fb)](_0x5dfee9,_0x5dfee9);const _0x112e95=$gameTemp['getLastPluginCommandInterpreter'](),_0x29729f=BattleManager['_action'],_0x171a84=_0x5dfee9[_0x1cba45(0x736)],_0x3438fa=VisuMZ['CreateActionSequenceTargets'](_0x5dfee9['Targets']);if(!_0x112e95||!_0x29729f)return;if(!_0x29729f['item']())return;for(const _0x11da6c of _0x3438fa){if(!_0x11da6c)continue;_0x11da6c[_0x1cba45(0x82d)](_0x29729f,_0x171a84);}if(_0x5dfee9['WaitForAnimation'])_0x112e95['setWaitMode'](_0x1cba45(0x2a4));}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x1ac),_0x2260dc=>{const _0x3410cc=_0x5507dd;VisuMZ[_0x3410cc(0x8fb)](_0x2260dc,_0x2260dc);const _0x470a67=$gameTemp[_0x3410cc(0x38e)](),_0x105bd5=VisuMZ[_0x3410cc(0x5eb)](_0x2260dc[_0x3410cc(0x5ed)]),_0x5b2c34=_0x2260dc[_0x3410cc(0x1c5)];if(!_0x5b2c34)return;for(const _0x1464ec of _0x105bd5){if(!_0x1464ec)continue;if(!_0x1464ec[_0x3410cc(0x8ed)]())continue;_0x1464ec[_0x3410cc(0x2ef)](_0x5b2c34);}}),PluginManager['registerCommand'](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x460),_0x3e9371=>{const _0x241f9c=_0x5507dd;if(!SceneManager[_0x241f9c(0x590)])return;if(!SceneManager[_0x241f9c(0x590)][_0x241f9c(0x3c4)])return;if(!Imported['VisuMZ_0_CoreEngine'])return;VisuMZ['ConvertParams'](_0x3e9371,_0x3e9371);const _0x164ccf=$gameTemp[_0x241f9c(0x38e)](),_0x1c29e7=Math[_0x241f9c(0x95e)](_0x3e9371['pointX']),_0x407615=Math[_0x241f9c(0x95e)](_0x3e9371[_0x241f9c(0xa13)]);$gameTemp[_0x241f9c(0x6f8)](_0x1c29e7,_0x407615,_0x3e9371[_0x241f9c(0x766)],_0x3e9371['Mirror'],_0x3e9371[_0x241f9c(0x512)]),_0x3e9371[_0x241f9c(0x63e)]&&_0x164ccf&&(SceneManager[_0x241f9c(0x590)][_0x241f9c(0x3c4)]['updatePointAnimations'](),_0x164ccf[_0x241f9c(0x7ff)](_0x241f9c(0x2a4)));}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x706),_0x230c1c=>{const _0x54b526=_0x5507dd;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x54b526(0x8fb)](_0x230c1c,_0x230c1c);const _0x20d015=$gameTemp[_0x54b526(0x38e)](),_0x4dd447=VisuMZ[_0x54b526(0x5eb)](_0x230c1c[_0x54b526(0x5ed)]),_0x47c998=_0x230c1c[_0x54b526(0x766)],_0x3ee93c=_0x230c1c[_0x54b526(0x736)];if(!_0x20d015)return;$gameTemp[_0x54b526(0x5e7)](_0x4dd447,_0x47c998,_0x3ee93c);if(_0x230c1c[_0x54b526(0x2ec)])_0x20d015['setWaitMode']('battleAnimation');}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x62e),_0x2135bd=>{const _0x2688fd=_0x5507dd;if(!SceneManager[_0x2688fd(0x4dc)]())return;const _0x42f659=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x42f659)return;_0x42f659['setWaitMode']('battleAnimation');}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x9b4),_0x3cd2a4=>{const _0x22f02d=_0x5507dd;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x22f02d(0x8fb)](_0x3cd2a4,_0x3cd2a4);const _0x1f2066=BattleManager[_0x22f02d(0x5f6)],_0x1dd7a6=_0x3cd2a4[_0x22f02d(0x7a5)]&&Imported[_0x22f02d(0x398)];_0x1f2066[_0x22f02d(0x8c3)](_0x3cd2a4[_0x22f02d(0x623)]),_0x1dd7a6&&Imported[_0x22f02d(0x398)]&&$gameSystem[_0x22f02d(0x93f)](_0x3cd2a4[_0x22f02d(0x623)]||'',_0x3cd2a4[_0x22f02d(0x515)]||0x0);}),PluginManager['registerCommand'](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x6dc),_0x195436=>{const _0x2a6068=_0x5507dd;if(!SceneManager[_0x2a6068(0x4dc)]())return;const _0x38e6e0=BattleManager['_logWindow'];_0x38e6e0['clear']();}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],'ActSeq_BattleLog_DisplayAction',_0x3398e7=>{const _0x3b6539=_0x5507dd;if(!SceneManager[_0x3b6539(0x4dc)]())return;const _0x5753b1=$gameTemp[_0x3b6539(0x38e)](),_0x3b51b5=BattleManager[_0x3b6539(0x804)],_0x2c93b7=BattleManager[_0x3b6539(0x1bb)],_0x27daa6=BattleManager['_logWindow'];if(!_0x5753b1||!_0x3b51b5||!_0x2c93b7)return;if(!_0x3b51b5[_0x3b6539(0x92a)]())return;_0x27daa6[_0x3b6539(0x407)](_0x2c93b7,_0x3b51b5[_0x3b6539(0x92a)]()),_0x5753b1['setWaitMode'](_0x3b6539(0x618));}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],'ActSeq_BattleLog_PopBaseLine',_0x4bc035=>{const _0x5ef9fb=_0x5507dd;if(!SceneManager['isSceneBattle']())return;const _0x25daf1=BattleManager[_0x5ef9fb(0x5f6)];_0x25daf1[_0x5ef9fb(0x82c)]();}),PluginManager['registerCommand'](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x9af),_0x5478f2=>{const _0x394520=_0x5507dd;if(!SceneManager['isSceneBattle']())return;const _0x1f87fc=BattleManager['_logWindow'];_0x1f87fc[_0x394520(0x23b)]();}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x4f3),_0x5914db=>{const _0x26ad49=_0x5507dd;if(!SceneManager[_0x26ad49(0x4dc)]())return;const _0x203892=BattleManager[_0x26ad49(0x5f6)];_0x203892[_0x26ad49(0x62f)]();}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x826),_0x3f2a6d=>{const _0x15b220=_0x5507dd;if(!SceneManager[_0x15b220(0x4dc)]())return;VisuMZ[_0x15b220(0x8fb)](_0x3f2a6d,_0x3f2a6d),SceneManager['_scene'][_0x15b220(0x89e)](_0x3f2a6d['ShowHide']);}),PluginManager['registerCommand'](pluginData[_0x5507dd(0x55f)],'ActSeq_BattleLog_WaitForBattleLog',_0x1aa1c0=>{const _0x2d5f66=_0x5507dd;if(!SceneManager[_0x2d5f66(0x4dc)]())return;const _0xb1674=$gameTemp['getLastPluginCommandInterpreter']();_0xb1674[_0x2d5f66(0x7ff)](_0x2d5f66(0x618));}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x84a),_0x28c9a4=>{const _0x5dd916=_0x5507dd;if(!SceneManager[_0x5dd916(0x4dc)]())return;const _0x32d6d3=$gameTemp[_0x5dd916(0x38e)](),_0x248851=BattleManager[_0x5dd916(0x5f6)];_0x248851[_0x5dd916(0x721)](),_0x32d6d3['setWaitMode'](_0x5dd916(0x618));}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x60b),_0x1f53de=>{const _0x373f27=_0x5507dd;if(!SceneManager[_0x373f27(0x4dc)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x373f27(0x8fb)](_0x1f53de,_0x1f53de);const _0x1c1e41=$gameScreen[_0x373f27(0x1ca)]();_0x1c1e41['cameraClamp']=_0x1f53de[_0x373f27(0x20d)];}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],'ActSeq_Camera_FocusPoint',_0x5b6700=>{const _0x15ed3d=_0x5507dd;if(!SceneManager[_0x15ed3d(0x4dc)]())return;if(!Imported[_0x15ed3d(0x703)])return;VisuMZ['ConvertParams'](_0x5b6700,_0x5b6700);const _0x42c309=$gameTemp[_0x15ed3d(0x38e)](),_0x1639dc=_0x5b6700[_0x15ed3d(0x34d)];$gameScreen['setBattleCameraPoint'](_0x5b6700[_0x15ed3d(0x291)],_0x5b6700[_0x15ed3d(0x667)],_0x5b6700[_0x15ed3d(0x203)],_0x5b6700[_0x15ed3d(0x813)]);if(_0x1639dc)_0x42c309[_0x15ed3d(0x7ff)]('battleCamera');}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x498),_0x35fc61=>{const _0x1690be=_0x5507dd;if(!SceneManager[_0x1690be(0x4dc)]())return;if(!Imported[_0x1690be(0x703)])return;VisuMZ['ConvertParams'](_0x35fc61,_0x35fc61);const _0x3aee2d=$gameTemp['getLastPluginCommandInterpreter'](),_0x1f8b05=VisuMZ[_0x1690be(0x5eb)](_0x35fc61[_0x1690be(0x5ed)]),_0x2998b8=_0x35fc61[_0x1690be(0x34d)];$gameScreen['setBattleCameraTargets'](_0x1f8b05,_0x35fc61['Duration'],_0x35fc61[_0x1690be(0x813)]);if(_0x2998b8)_0x3aee2d[_0x1690be(0x7ff)](_0x1690be(0x6ee));}),PluginManager['registerCommand'](pluginData['name'],_0x5507dd(0x873),_0x45468b=>{const _0x24e307=_0x5507dd;if(!SceneManager[_0x24e307(0x4dc)]())return;if(!Imported[_0x24e307(0x703)])return;VisuMZ['ConvertParams'](_0x45468b,_0x45468b);const _0x4b0019=$gameTemp['getLastPluginCommandInterpreter'](),_0x5b6e8d=_0x45468b[_0x24e307(0x34d)];$gameScreen[_0x24e307(0x9ed)](_0x45468b[_0x24e307(0x812)],_0x45468b[_0x24e307(0x88e)],_0x45468b['Duration'],_0x45468b[_0x24e307(0x813)]);if(_0x5b6e8d)_0x4b0019[_0x24e307(0x7ff)]('battleCamera');}),PluginManager['registerCommand'](pluginData[_0x5507dd(0x55f)],'ActSeq_Camera_Reset',_0x35bc4d=>{const _0x1ee309=_0x5507dd;if(!SceneManager[_0x1ee309(0x4dc)]())return;if(!Imported[_0x1ee309(0x703)])return;VisuMZ[_0x1ee309(0x8fb)](_0x35bc4d,_0x35bc4d);const _0xe129c6=$gameTemp[_0x1ee309(0x38e)](),_0x57d0db=_0x35bc4d[_0x1ee309(0x739)],_0x1408f7=_0x35bc4d[_0x1ee309(0x1e0)],_0x5c97d8=_0x35bc4d['WaitForCamera'];if(_0x57d0db){const _0xc623e0=Math['round'](Graphics[_0x1ee309(0x4fa)]/0x2),_0x369b22=Math[_0x1ee309(0x95e)](Graphics[_0x1ee309(0x80e)]/0x2);$gameScreen[_0x1ee309(0x800)](_0xc623e0,_0x369b22,_0x35bc4d[_0x1ee309(0x203)],_0x35bc4d[_0x1ee309(0x813)]);}_0x1408f7&&$gameScreen[_0x1ee309(0x9ed)](0x0,0x0,_0x35bc4d[_0x1ee309(0x203)],_0x35bc4d[_0x1ee309(0x813)]);if(_0x5c97d8)_0xe129c6[_0x1ee309(0x7ff)](_0x1ee309(0x6ee));}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],'ActSeq_Camera_WaitForCamera',_0x3cb542=>{const _0x6031aa=_0x5507dd;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x6031aa(0x703)])return;const _0x258983=$gameTemp[_0x6031aa(0x38e)]();if(!_0x258983)return;_0x258983['setWaitMode']('battleCamera');}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_DB_DragonbonesMotionAni',_0x39cedf=>{const _0x265de4=_0x5507dd;if(!SceneManager[_0x265de4(0x4dc)]())return;if(!Imported[_0x265de4(0x423)])return;VisuMZ[_0x265de4(0x8fb)](_0x39cedf,_0x39cedf);const _0x1d23f5=VisuMZ[_0x265de4(0x5eb)](_0x39cedf[_0x265de4(0x5ed)]),_0x5ac176=_0x39cedf[_0x265de4(0x81e)]['toLowerCase']()[_0x265de4(0x48c)]();for(const _0x1eb395 of _0x1d23f5){if(!_0x1eb395)continue;_0x1eb395[_0x265de4(0x510)](_0x5ac176);}}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],'ActSeq_DB_DragonbonesTimeScale',_0x3cdfd0=>{const _0x5dd64c=_0x5507dd;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5dd64c(0x423)])return;VisuMZ[_0x5dd64c(0x8fb)](_0x3cdfd0,_0x3cdfd0);const _0x110837=VisuMZ[_0x5dd64c(0x5eb)](_0x3cdfd0[_0x5dd64c(0x5ed)]),_0xc49a59=_0x3cdfd0[_0x5dd64c(0x2b2)];for(const _0x2a95e5 of _0x110837){if(!_0x2a95e5)continue;_0x2a95e5[_0x5dd64c(0x8be)]()[_0x5dd64c(0x89f)]=_0xc49a59;}}),PluginManager['registerCommand'](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x87e),_0x5fa326=>{const _0x360fdb=_0x5507dd;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x360fdb(0x9d6)])return;VisuMZ[_0x360fdb(0x8fb)](_0x5fa326,_0x5fa326);const _0x541b8f=BattleManager[_0x360fdb(0x804)],_0x16b5e4=_0x5fa326[_0x360fdb(0x579)];if(!_0x541b8f)return;_0x541b8f[_0x360fdb(0x649)]=_0x16b5e4;}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x7f1),_0x2cd4b0=>{const _0x20706d=_0x5507dd;if(!SceneManager[_0x20706d(0x4dc)]())return;if(!Imported[_0x20706d(0x9d6)])return;const _0x18130d=BattleManager['_action'];if(!_0x18130d)return;_0x18130d[_0x20706d(0x6fe)]();}),PluginManager[_0x5507dd(0x44e)](pluginData['name'],_0x5507dd(0x32f),_0x233b7c=>{const _0x11584b=_0x5507dd;if(!SceneManager[_0x11584b(0x4dc)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ['ConvertParams'](_0x233b7c,_0x233b7c);const _0x9d4d19=BattleManager[_0x11584b(0x804)],_0x2df54c=_0x233b7c[_0x11584b(0x579)];if(!_0x9d4d19)return;_0x9d4d19['_battleCoreForcedElements']=_0x2df54c;}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],'ActSeq_Element_NullElements',_0x37962b=>{const _0x14f3af=_0x5507dd;if(!SceneManager[_0x14f3af(0x4dc)]())return;if(!Imported[_0x14f3af(0x9d6)])return;const _0x31330e=BattleManager[_0x14f3af(0x804)];if(!_0x31330e)return;_0x31330e['_battleCoreNoElement']=!![];}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x90f),_0x4d3b88=>{const _0x24b26f=_0x5507dd;if(!Imported[_0x24b26f(0x836)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x24b26f(0x8fb)](_0x4d3b88,_0x4d3b88);const _0x49e4e0=VisuMZ[_0x24b26f(0x5eb)](_0x4d3b88[_0x24b26f(0x5ed)]);for(const _0x337e55 of _0x49e4e0){if(!_0x337e55)continue;_0x337e55[_0x24b26f(0x810)](_0x24b26f(0x3ef)),_0x337e55[_0x24b26f(0x810)]('glitch'),_0x337e55[_0x24b26f(0x810)]('tv'),_0x337e55[_0x24b26f(0x33e)]();}$gamePlayer['refresh']();}),PluginManager[_0x5507dd(0x44e)](pluginData['name'],_0x5507dd(0x675),_0x1885d2=>{const _0x22c015=_0x5507dd;if(!Imported[_0x22c015(0x836)])return;if(!SceneManager[_0x22c015(0x4dc)]())return;VisuMZ['ConvertParams'](_0x1885d2,_0x1885d2);const _0x5c7ef8=VisuMZ[_0x22c015(0x5eb)](_0x1885d2[_0x22c015(0x5ed)]),_0xa61e86=_0x22c015(0x622);_0x1885d2[_0x22c015(0x70a)]=Math[_0x22c015(0x199)](_0x1885d2[_0x22c015(0x56d)]/0x2),_0x1885d2[_0x22c015(0x336)]=_0x1885d2[_0x22c015(0x56d)],_0x1885d2['refreshRequest']=!![];for(const _0x3e1357 of _0x5c7ef8){if(!_0x3e1357)continue;_0x3e1357[_0x22c015(0x8fc)](_0xa61e86,_0x1885d2);}$gamePlayer[_0x22c015(0x62f)]();}),PluginManager['registerCommand'](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x36d),_0x638065=>{const _0x2e307e=_0x5507dd;if(!Imported[_0x2e307e(0x836)])return;if(!SceneManager[_0x2e307e(0x4dc)]())return;VisuMZ[_0x2e307e(0x8fb)](_0x638065,_0x638065);const _0xda9d23=VisuMZ[_0x2e307e(0x5eb)](_0x638065[_0x2e307e(0x5ed)]);for(const _0x343050 of _0xda9d23){if(!_0x343050)continue;_0x343050['removeHorrorEffect'](_0x2e307e(0x622));}$gamePlayer[_0x2e307e(0x62f)]();}),PluginManager['registerCommand'](pluginData['name'],_0x5507dd(0x883),_0xee62a1=>{const _0x14fb1d=_0x5507dd;if(!Imported[_0x14fb1d(0x836)])return;if(!SceneManager[_0x14fb1d(0x4dc)]())return;VisuMZ[_0x14fb1d(0x8fb)](_0xee62a1,_0xee62a1);const _0x40dd5b=VisuMZ[_0x14fb1d(0x5eb)](_0xee62a1[_0x14fb1d(0x5ed)]),_0x5baba1=_0x14fb1d(0x3ef);for(const _0x2d1377 of _0x40dd5b){if(!_0x2d1377)continue;_0x2d1377[_0x14fb1d(0x8fc)](_0x5baba1,_0xee62a1);}$gamePlayer[_0x14fb1d(0x62f)]();}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],'ActSeq_Horror_NoiseRemove',_0x517b1f=>{const _0x25dd8e=_0x5507dd;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x25dd8e(0x4dc)]())return;VisuMZ[_0x25dd8e(0x8fb)](_0x517b1f,_0x517b1f);const _0x377c23=VisuMZ['CreateActionSequenceTargets'](_0x517b1f[_0x25dd8e(0x5ed)]);for(const _0x4f1351 of _0x377c23){if(!_0x4f1351)continue;_0x4f1351['removeHorrorEffect'](_0x25dd8e(0x3ef));}$gamePlayer['refresh']();}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0xa11),_0x461104=>{const _0x566bf9=_0x5507dd;if(!Imported[_0x566bf9(0x836)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x566bf9(0x8fb)](_0x461104,_0x461104);const _0xd1d3ca=VisuMZ['CreateActionSequenceTargets'](_0x461104[_0x566bf9(0x5ed)]),_0x2c1ffb='tv';for(const _0x3191c9 of _0xd1d3ca){if(!_0x3191c9)continue;_0x3191c9[_0x566bf9(0x8fc)](_0x2c1ffb,_0x461104);}$gamePlayer[_0x566bf9(0x62f)]();}),PluginManager['registerCommand'](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x4ca),_0x45814b=>{const _0x1a83e2=_0x5507dd;if(!Imported[_0x1a83e2(0x836)])return;if(!SceneManager[_0x1a83e2(0x4dc)]())return;VisuMZ[_0x1a83e2(0x8fb)](_0x45814b,_0x45814b);const _0x44a8ba=VisuMZ[_0x1a83e2(0x5eb)](_0x45814b[_0x1a83e2(0x5ed)]);for(const _0x5297a1 of _0x44a8ba){if(!_0x5297a1)continue;_0x5297a1[_0x1a83e2(0x810)]('tv');}$gamePlayer[_0x1a83e2(0x62f)]();}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x3af),_0x31daca=>{const _0x5ba43f=_0x5507dd;if(!Imported[_0x5ba43f(0x656)])return;const _0x4eac24=SceneManager[_0x5ba43f(0x590)][_0x5ba43f(0x3c4)];if(!_0x4eac24)return;if(VisuMZ[_0x5ba43f(0x1b6)]['version']<=1.04){alert(_0x5ba43f(0x6d1)),SceneManager[_0x5ba43f(0x26a)]();return;}VisuMZ[_0x5ba43f(0x8fb)](_0x31daca,_0x31daca);const _0x25154e=_0x31daca[_0x5ba43f(0x3fa)];_0x4eac24['setupBlueRedInvertImpactFilter'](_0x25154e);}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],'ActSeq_Impact_ColorBreak',_0x536b27=>{const _0x157f55=_0x5507dd;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x40e111=SceneManager[_0x157f55(0x590)][_0x157f55(0x3c4)];if(!_0x40e111)return;VisuMZ[_0x157f55(0x8fb)](_0x536b27,_0x536b27);const _0xc58512=_0x536b27['Intensity']||0x1,_0x4e4327=_0x536b27[_0x157f55(0x203)]||0x1,_0x45362f=_0x536b27[_0x157f55(0x813)]||_0x157f55(0x6cf);_0x40e111['setupRgbSplitImpactFilter'](_0xc58512,_0x4e4327,_0x45362f);}),PluginManager['registerCommand'](pluginData['name'],_0x5507dd(0x7c8),_0xb425f5=>{const _0x2058d7=_0x5507dd;if(!Imported[_0x2058d7(0x656)])return;const _0x4e2feb=SceneManager[_0x2058d7(0x590)][_0x2058d7(0x3c4)];if(!_0x4e2feb)return;if(VisuMZ['ActSeqImpact']['version']<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ['ConvertParams'](_0xb425f5,_0xb425f5);const _0x3da1a6=_0xb425f5[_0x2058d7(0x3fa)];_0x4e2feb['setupDesaturateImpactFilter'](_0x3da1a6);}),PluginManager['registerCommand'](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x9e4),_0x1ae38d=>{const _0x4fb29e=_0x5507dd;if(!SceneManager[_0x4fb29e(0x4dc)]())return;if(!Imported[_0x4fb29e(0x656)])return;const _0x331da9=SceneManager['_scene'][_0x4fb29e(0x3c4)];if(!_0x331da9)return;VisuMZ[_0x4fb29e(0x8fb)](_0x1ae38d,_0x1ae38d);const _0x54c2eb=Number(_0x1ae38d[_0x4fb29e(0x589)])||0x0,_0x10af8f=Number(_0x1ae38d[_0x4fb29e(0x49d)]),_0x2aba72=_0x1ae38d[_0x4fb29e(0x203)]||0x1,_0x3fff29=_0x1ae38d[_0x4fb29e(0x813)]||_0x4fb29e(0x6cf);_0x331da9[_0x4fb29e(0x234)](_0x54c2eb,_0x10af8f,_0x2aba72,_0x3fff29);}),PluginManager['registerCommand'](pluginData['name'],_0x5507dd(0x85b),_0x215cc7=>{const _0x3bb74a=_0x5507dd;if(!SceneManager[_0x3bb74a(0x4dc)]())return;if(!Imported[_0x3bb74a(0x656)])return;const _0x2be40d=SceneManager[_0x3bb74a(0x590)]['_spriteset'];if(!_0x2be40d)return;VisuMZ['ConvertParams'](_0x215cc7,_0x215cc7);const _0x1d9769=Number(_0x215cc7[_0x3bb74a(0x589)])||0x0,_0xc2967c=Number(_0x215cc7[_0x3bb74a(0x49d)]),_0x5f512e=_0x215cc7[_0x3bb74a(0x203)]||0x1,_0x1c6f4c=_0x215cc7['EasingType']||_0x3bb74a(0x6cf),_0x31aec4=VisuMZ['CreateActionSequenceTargets'](_0x215cc7[_0x3bb74a(0x5ed)]);for(const _0x2782b7 of _0x31aec4){if(!_0x2782b7)continue;if(!_0x2782b7[_0x3bb74a(0x9f8)]())continue;_0x2782b7[_0x3bb74a(0x9f8)]()[_0x3bb74a(0x234)](_0x1d9769,_0xc2967c,_0x5f512e,_0x1c6f4c);}}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x284),_0x494e07=>{const _0x32ab5b=_0x5507dd;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x32ab5b(0x656)])return;VisuMZ[_0x32ab5b(0x8fb)](_0x494e07,_0x494e07);const _0x5e240a={'delay':_0x494e07[_0x32ab5b(0x469)],'duration':_0x494e07[_0x32ab5b(0x6e3)],'hue':_0x494e07[_0x32ab5b(0x7d7)],'opacityStart':_0x494e07[_0x32ab5b(0x692)],'tone':_0x494e07[_0x32ab5b(0x3e6)],'visible':!![]},_0x2cbe1f=VisuMZ[_0x32ab5b(0x5eb)](_0x494e07[_0x32ab5b(0x5ed)]);for(const _0x669141 of _0x2cbe1f){if(!_0x669141)continue;_0x669141[_0x32ab5b(0x4a2)](_0x5e240a);}}),PluginManager[_0x5507dd(0x44e)](pluginData['name'],_0x5507dd(0x6d6),_0x41c92d=>{const _0x2f3610=_0x5507dd;if(!SceneManager[_0x2f3610(0x4dc)]())return;if(!Imported[_0x2f3610(0x656)])return;VisuMZ[_0x2f3610(0x8fb)](_0x41c92d,_0x41c92d);const _0x21a7c8=VisuMZ[_0x2f3610(0x5eb)](_0x41c92d['Targets']);for(const _0x2bb2bd of _0x21a7c8){if(!_0x2bb2bd)continue;_0x2bb2bd[_0x2f3610(0x606)]();}}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x315),_0x5be1c9=>{const _0x44108a=_0x5507dd;if(!Imported[_0x44108a(0x656)])return;const _0x5b49bb=SceneManager[_0x44108a(0x590)][_0x44108a(0x3c4)];if(!_0x5b49bb)return;if(VisuMZ[_0x44108a(0x1b6)][_0x44108a(0x6fc)]<=1.04){alert(_0x44108a(0x6d1)),SceneManager[_0x44108a(0x26a)]();return;}VisuMZ['ConvertParams'](_0x5be1c9,_0x5be1c9);const _0x45272f=_0x5be1c9[_0x44108a(0x3fa)];_0x5b49bb[_0x44108a(0x2af)](_0x45272f);}),PluginManager[_0x5507dd(0x44e)](pluginData['name'],_0x5507dd(0x4ce),_0x96c223=>{const _0x1eaaa0=_0x5507dd;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x403c3c=SceneManager[_0x1eaaa0(0x590)][_0x1eaaa0(0x3c4)];if(!_0x403c3c)return;if(VisuMZ[_0x1eaaa0(0x1b6)][_0x1eaaa0(0x6fc)]<=1.04){alert(_0x1eaaa0(0x6d1)),SceneManager[_0x1eaaa0(0x26a)]();return;}VisuMZ[_0x1eaaa0(0x8fb)](_0x96c223,_0x96c223);const _0x3cdaea=_0x96c223[_0x1eaaa0(0x3fa)];_0x403c3c[_0x1eaaa0(0x8f1)](_0x3cdaea);}),PluginManager[_0x5507dd(0x44e)](pluginData['name'],'ActSeq_Impact_ShockwavePoint',_0x3a67c3=>{const _0xf7e3a9=_0x5507dd;if(!Imported[_0xf7e3a9(0x656)])return;const _0x334db8=SceneManager[_0xf7e3a9(0x590)]['_spriteset'];if(!_0x334db8)return;VisuMZ[_0xf7e3a9(0x8fb)](_0x3a67c3,_0x3a67c3);const _0x1c0977=_0x3a67c3['X']||0x0,_0x2bbe99=_0x3a67c3['Y']||0x0,_0x39d8e8=_0x3a67c3['Amp']||0x0,_0x134dbc=_0x3a67c3[_0xf7e3a9(0x83f)]||0x0,_0x1b7b1c=_0x3a67c3[_0xf7e3a9(0x203)]||0x1;_0x334db8['setupShockwaveImpactFilter'](_0x1c0977,_0x2bbe99,_0x39d8e8,_0x134dbc,_0x1b7b1c);}),PluginManager[_0x5507dd(0x44e)](pluginData['name'],_0x5507dd(0x603),_0x16b577=>{const _0xdaf9b5=_0x5507dd;if(!SceneManager[_0xdaf9b5(0x4dc)]())return;if(!Imported[_0xdaf9b5(0x656)])return;const _0x2f7035=SceneManager[_0xdaf9b5(0x590)][_0xdaf9b5(0x3c4)];if(!_0x2f7035)return;VisuMZ[_0xdaf9b5(0x8fb)](_0x16b577,_0x16b577);const _0x5b5ebe=VisuMZ[_0xdaf9b5(0x5eb)](_0x16b577['Targets']),_0x4c2061=_0x16b577[_0xdaf9b5(0x3ad)],_0x4b9558=_0x16b577['OffsetX']||0x0,_0xb625bd=_0x16b577[_0xdaf9b5(0x88e)]||0x0,_0x167090=_0x16b577[_0xdaf9b5(0x200)]||0x0,_0x563a40=_0x16b577[_0xdaf9b5(0x83f)]||0x0,_0x154441=_0x16b577['Duration']||0x1;for(const _0x51375a of _0x5b5ebe){if(!_0x51375a)continue;if(!_0x51375a[_0xdaf9b5(0x9f8)]())continue;const _0x9e17b7=_0x51375a['battler']();let _0xf13de=_0x9e17b7['_baseX'],_0x2ca2c9=_0x9e17b7[_0xdaf9b5(0x6c3)];_0xf13de+=(Graphics[_0xdaf9b5(0x4fa)]-Graphics[_0xdaf9b5(0x8e0)])/0x2,_0x2ca2c9+=(Graphics['height']-Graphics['boxHeight'])/0x2;if(_0x4c2061[_0xdaf9b5(0x1f2)](/front/i))_0xf13de+=(_0x51375a[_0xdaf9b5(0x890)]()?0x1:-0x1)*_0x9e17b7[_0xdaf9b5(0x5c4)]()/0x2;else _0x4c2061[_0xdaf9b5(0x1f2)](/back/i)&&(_0xf13de+=(_0x51375a[_0xdaf9b5(0x890)]()?-0x1:0x1)*_0x9e17b7[_0xdaf9b5(0x5c4)]()/0x2);if(_0x4c2061[_0xdaf9b5(0x1f2)](/head/i))_0x2ca2c9-=_0x9e17b7[_0xdaf9b5(0x6ba)]();else _0x4c2061[_0xdaf9b5(0x1f2)](/center/i)&&(_0x2ca2c9-=_0x9e17b7['mainSpriteHeight']()/0x2);_0xf13de+=_0x4b9558,_0x2ca2c9+=_0xb625bd,_0x2f7035[_0xdaf9b5(0x57a)](_0xf13de,_0x2ca2c9,_0x167090,_0x563a40,_0x154441);}}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x8cd),_0x245c29=>{const _0x530ae1=_0x5507dd;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x530ae1(0x656)])return;const _0x5ee579=SceneManager[_0x530ae1(0x590)]['_spriteset'];if(!_0x5ee579)return;VisuMZ[_0x530ae1(0x8fb)](_0x245c29,_0x245c29);const _0x57c7d2=VisuMZ[_0x530ae1(0x5eb)](_0x245c29[_0x530ae1(0x5ed)]),_0x45ba7c=_0x245c29[_0x530ae1(0x3ad)],_0x4b9b25=_0x245c29[_0x530ae1(0x812)]||0x0,_0x1f097b=_0x245c29[_0x530ae1(0x88e)]||0x0,_0x4ba4e7=_0x245c29[_0x530ae1(0x200)]||0x0,_0x154117=_0x245c29[_0x530ae1(0x83f)]||0x0,_0x1ec4fa=_0x245c29[_0x530ae1(0x203)]||0x1,_0xeac7ed=Math[_0x530ae1(0x71c)](..._0x57c7d2[_0x530ae1(0x4d2)](_0x2dee0d=>_0x2dee0d[_0x530ae1(0x9f8)]()[_0x530ae1(0x67b)]-_0x2dee0d[_0x530ae1(0x9f8)]()[_0x530ae1(0x5c4)]()/0x2)),_0x28701a=Math['max'](..._0x57c7d2['map'](_0x1ac893=>_0x1ac893['battler']()['_baseX']+_0x1ac893[_0x530ae1(0x9f8)]()['mainSpriteWidth']()/0x2)),_0x14b6fc=Math['min'](..._0x57c7d2[_0x530ae1(0x4d2)](_0x549602=>_0x549602[_0x530ae1(0x9f8)]()[_0x530ae1(0x6c3)]-_0x549602[_0x530ae1(0x9f8)]()['mainSpriteHeight']())),_0x8715d1=Math[_0x530ae1(0x741)](..._0x57c7d2['map'](_0x481eae=>_0x481eae[_0x530ae1(0x9f8)]()['_baseY'])),_0x343343=_0x57c7d2[_0x530ae1(0x1b4)](_0x150661=>_0x150661['isActor']())[_0x530ae1(0x77e)],_0x3d4bf3=_0x57c7d2[_0x530ae1(0x1b4)](_0x5d5bcb=>_0x5d5bcb[_0x530ae1(0x890)]())['length'];let _0x1791b2=0x0,_0x2fae74=0x0;if(_0x45ba7c['match'](/front/i))_0x1791b2=_0x343343>=_0x3d4bf3?_0xeac7ed:_0x28701a;else{if(_0x45ba7c[_0x530ae1(0x1f2)](/middle/i))_0x1791b2=(_0xeac7ed+_0x28701a)/0x2,melee=-0x1;else _0x45ba7c['match'](/back/i)&&(_0x1791b2=_0x343343>=_0x3d4bf3?_0x28701a:_0xeac7ed);}if(_0x45ba7c[_0x530ae1(0x1f2)](/head/i))_0x2fae74=_0x14b6fc;else{if(_0x45ba7c['match'](/center/i))_0x2fae74=(_0x14b6fc+_0x8715d1)/0x2;else _0x45ba7c[_0x530ae1(0x1f2)](/base/i)&&(_0x2fae74=_0x8715d1);}_0x1791b2+=(Graphics[_0x530ae1(0x4fa)]-Graphics[_0x530ae1(0x8e0)])/0x2,_0x2fae74+=(Graphics[_0x530ae1(0x80e)]-Graphics[_0x530ae1(0x38c)])/0x2,_0x1791b2+=_0x4b9b25,_0x2fae74+=_0x1f097b,_0x5ee579[_0x530ae1(0x57a)](_0x1791b2,_0x2fae74,_0x4ba4e7,_0x154117,_0x1ec4fa);}),PluginManager[_0x5507dd(0x44e)](pluginData['name'],_0x5507dd(0x5c3),_0xedfb25=>{const _0x22e223=_0x5507dd;if(!Imported[_0x22e223(0x656)])return;const _0x449c83=SceneManager[_0x22e223(0x590)][_0x22e223(0x3c4)];if(!_0x449c83)return;if(VisuMZ[_0x22e223(0x1b6)]['version']<=1.04){alert(_0x22e223(0x6d1)),SceneManager[_0x22e223(0x26a)]();return;}VisuMZ['ConvertParams'](_0xedfb25,_0xedfb25);const _0x1ee755=$gameTemp[_0x22e223(0x38e)](),_0x601ac7=Math[_0x22e223(0x741)](0.01,_0xedfb25[_0x22e223(0x6b4)]);$gameTemp['setBattleImpactTimeScale'](_0x601ac7,_0x1ee755);}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],'ActSeq_Impact_TimeStop',_0x51c0ac=>{const _0x542bd4=_0x5507dd;if(!Imported[_0x542bd4(0x656)])return;const _0x3fd6d7=SceneManager[_0x542bd4(0x590)][_0x542bd4(0x3c4)];if(!_0x3fd6d7)return;if(VisuMZ[_0x542bd4(0x1b6)][_0x542bd4(0x6fc)]<=1.04){alert(_0x542bd4(0x6d1)),SceneManager[_0x542bd4(0x26a)]();return;}VisuMZ[_0x542bd4(0x8fb)](_0x51c0ac,_0x51c0ac);const _0x42f49c=$gameTemp['getLastPluginCommandInterpreter'](),_0x306b2f=_0x51c0ac['ms']||0x1;VisuMZ[_0x542bd4(0x1b6)][_0x542bd4(0x492)](_0x306b2f,_0x42f49c);}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],'ActSeq_Impact_ZoomBlurPoint',_0xf4a588=>{const _0x4ae2bd=_0x5507dd;if(!Imported[_0x4ae2bd(0x656)])return;const _0x5765c7=SceneManager[_0x4ae2bd(0x590)]['_spriteset'];if(!_0x5765c7)return;VisuMZ[_0x4ae2bd(0x8fb)](_0xf4a588,_0xf4a588);const _0x59d4ea=_0xf4a588['X']||0x0,_0x26eaeb=_0xf4a588['Y']||0x0,_0x3914f4=_0xf4a588[_0x4ae2bd(0x795)]||0x0,_0x54ca74=_0xf4a588['Radius']||0x0,_0x397568=_0xf4a588[_0x4ae2bd(0x203)]||0x1,_0x33c45d=_0xf4a588[_0x4ae2bd(0x813)]||_0x4ae2bd(0x6cf);_0x5765c7[_0x4ae2bd(0x36a)](_0x3914f4,_0x59d4ea,_0x26eaeb,_0x54ca74,_0x397568,_0x33c45d);}),PluginManager['registerCommand'](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x42a),_0x4d8a1e=>{const _0x5cca79=_0x5507dd;if(!Imported[_0x5cca79(0x656)])return;const _0x42b83d=SceneManager[_0x5cca79(0x590)][_0x5cca79(0x3c4)];if(!_0x42b83d)return;VisuMZ[_0x5cca79(0x8fb)](_0x4d8a1e,_0x4d8a1e);const _0x22e81e=VisuMZ['CreateActionSequenceTargets'](_0x4d8a1e[_0x5cca79(0x5ed)]),_0x1b4575=_0x4d8a1e[_0x5cca79(0x3ad)],_0x16c5f4=_0x4d8a1e[_0x5cca79(0x812)]||0x0,_0x4f0463=_0x4d8a1e[_0x5cca79(0x88e)]||0x0,_0x41f2ae=_0x4d8a1e[_0x5cca79(0x795)]||0x0,_0x2a8ff0=_0x4d8a1e['Radius']||0x0,_0xcb7a32=_0x4d8a1e[_0x5cca79(0x203)]||0x1,_0x4d3c0a=_0x4d8a1e['EasingType']||_0x5cca79(0x6cf),_0xe48753=Math[_0x5cca79(0x71c)](..._0x22e81e[_0x5cca79(0x4d2)](_0x565ab4=>_0x565ab4[_0x5cca79(0x9f8)]()[_0x5cca79(0x67b)]-_0x565ab4[_0x5cca79(0x9f8)]()['mainSpriteWidth']()/0x2)),_0x5674d3=Math[_0x5cca79(0x741)](..._0x22e81e[_0x5cca79(0x4d2)](_0x33ea3b=>_0x33ea3b[_0x5cca79(0x9f8)]()[_0x5cca79(0x67b)]+_0x33ea3b[_0x5cca79(0x9f8)]()[_0x5cca79(0x5c4)]()/0x2)),_0x29ced3=Math[_0x5cca79(0x71c)](..._0x22e81e[_0x5cca79(0x4d2)](_0x12f4da=>_0x12f4da[_0x5cca79(0x9f8)]()['_baseY']-_0x12f4da[_0x5cca79(0x9f8)]()[_0x5cca79(0x6ba)]())),_0x672fac=Math[_0x5cca79(0x741)](..._0x22e81e[_0x5cca79(0x4d2)](_0x49f56a=>_0x49f56a[_0x5cca79(0x9f8)]()[_0x5cca79(0x6c3)])),_0x232707=_0x22e81e[_0x5cca79(0x1b4)](_0x15020e=>_0x15020e[_0x5cca79(0x8ed)]())[_0x5cca79(0x77e)],_0x49f151=_0x22e81e[_0x5cca79(0x1b4)](_0x29bad1=>_0x29bad1[_0x5cca79(0x890)]())[_0x5cca79(0x77e)];let _0x5ae13c=0x0,_0x1f5702=0x0;if(_0x1b4575['match'](/front/i))_0x5ae13c=_0x232707>=_0x49f151?_0xe48753:_0x5674d3;else{if(_0x1b4575[_0x5cca79(0x1f2)](/middle/i))_0x5ae13c=(_0xe48753+_0x5674d3)/0x2,melee=-0x1;else _0x1b4575[_0x5cca79(0x1f2)](/back/i)&&(_0x5ae13c=_0x232707>=_0x49f151?_0x5674d3:_0xe48753);}if(_0x1b4575['match'](/head/i))_0x1f5702=_0x29ced3;else{if(_0x1b4575[_0x5cca79(0x1f2)](/center/i))_0x1f5702=(_0x29ced3+_0x672fac)/0x2;else _0x1b4575[_0x5cca79(0x1f2)](/base/i)&&(_0x1f5702=_0x672fac);}_0x5ae13c+=(Graphics[_0x5cca79(0x4fa)]-Graphics[_0x5cca79(0x8e0)])/0x2,_0x1f5702+=(Graphics['height']-Graphics[_0x5cca79(0x38c)])/0x2,_0x5ae13c+=_0x16c5f4,_0x1f5702+=_0x4f0463,_0x42b83d['setupZoomBlurImpactFilter'](_0x41f2ae,_0x5ae13c,_0x1f5702,_0x2a8ff0,_0xcb7a32,_0x4d3c0a);}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x228),_0x21b61f=>{const _0x50a500=_0x5507dd;if(!Imported[_0x50a500(0x656)])return;const _0x32556e=SceneManager[_0x50a500(0x590)][_0x50a500(0x3c4)];if(!_0x32556e)return;if(VisuMZ[_0x50a500(0x1b6)][_0x50a500(0x6fc)]<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x50a500(0x26a)]();return;}VisuMZ['ConvertParams'](_0x21b61f,_0x21b61f);const _0x4200fe=VisuMZ[_0x50a500(0x5eb)](_0x21b61f[_0x50a500(0x5ed)]),_0xcef6a7={'filename':_0x21b61f[_0x50a500(0x1c5)],'horzCells':_0x21b61f['horzCells']||0x1,'vertCells':_0x21b61f[_0x50a500(0x427)]||0x1,'frameDelay':_0x21b61f['frameDelay']||0x1,'smooth':_0x21b61f[_0x50a500(0x30d)]||![],'anchorX':_0x21b61f[_0x50a500(0x802)]||0x0,'anchorY':_0x21b61f['anchorY']||0x0,'offsetX':_0x21b61f[_0x50a500(0x1e2)]||0x0,'offsetY':_0x21b61f['offsetY']||0x0};for(const _0x2bfe49 of _0x4200fe){if(!_0x2bfe49)continue;if(!_0x2bfe49[_0x50a500(0x9f8)]())continue;_0x2bfe49[_0x50a500(0x9f8)]()[_0x50a500(0x318)](_0xcef6a7);}const _0x842537=$gameTemp[_0x50a500(0x38e)]();_0x842537&&_0x842537[_0x50a500(0x7ff)](_0x50a500(0x1f8));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Inject_AnimationEnd',_0x5add54=>{const _0x55788b=_0x5507dd;if(!Imported[_0x55788b(0x656)])return;const _0x3ddcec=SceneManager[_0x55788b(0x590)][_0x55788b(0x3c4)];if(!_0x3ddcec)return;if(VisuMZ[_0x55788b(0x1b6)][_0x55788b(0x6fc)]<=1.05){alert(_0x55788b(0x6d1)),SceneManager['exit']();return;}VisuMZ[_0x55788b(0x8fb)](_0x5add54,_0x5add54);const _0x49d44f=VisuMZ[_0x55788b(0x5eb)](_0x5add54[_0x55788b(0x5ed)]);for(const _0x20ad75 of _0x49d44f){if(!_0x20ad75)continue;if(!_0x20ad75[_0x55788b(0x9f8)]())continue;_0x20ad75[_0x55788b(0x9f8)]()[_0x55788b(0x5a3)]();}}),PluginManager['registerCommand'](pluginData['name'],_0x5507dd(0x8b5),_0x324f6b=>{const _0x1b98a2=_0x5507dd;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0xd82388=SceneManager[_0x1b98a2(0x590)][_0x1b98a2(0x3c4)];if(!_0xd82388)return;if(VisuMZ['ActSeqImpact'][_0x1b98a2(0x6fc)]<=1.05){alert(_0x1b98a2(0x6d1)),SceneManager[_0x1b98a2(0x26a)]();return;}VisuMZ[_0x1b98a2(0x8fb)](_0x324f6b,_0x324f6b);const _0x4f166a=VisuMZ['CreateActionSequenceTargets'](_0x324f6b[_0x1b98a2(0x5ed)]),_0x24c50c=_0x324f6b[_0x1b98a2(0x432)];for(const _0xbf93f4 of _0x4f166a){if(!_0xbf93f4)continue;if(!_0xbf93f4[_0x1b98a2(0x9f8)]())continue;_0xbf93f4[_0x1b98a2(0x9f8)]()[_0x1b98a2(0x64e)](_0x24c50c);}}),PluginManager['registerCommand'](pluginData['name'],_0x5507dd(0x2a8),_0x3afe5f=>{const _0x23623a=_0x5507dd;if(!SceneManager[_0x23623a(0x4dc)]())return;const _0x7d83ba=$gameTemp[_0x23623a(0x38e)]();if(!_0x7d83ba)return;_0x7d83ba['setWaitMode'](_0x23623a(0x363));}),PluginManager[_0x5507dd(0x44e)](pluginData['name'],_0x5507dd(0x4d5),_0x2c5819=>{const _0x152626=_0x5507dd;if(!SceneManager[_0x152626(0x4dc)]())return;VisuMZ[_0x152626(0x8fb)](_0x2c5819,_0x2c5819);const _0xb3c47d=$gameTemp[_0x152626(0x38e)](),_0xff4233=BattleManager[_0x152626(0x804)],_0x6b865d=BattleManager['_subject'],_0x3c8eed=BattleManager[_0x152626(0x5f6)];if(!_0xb3c47d||!_0xff4233||!_0x6b865d)return;if(!_0xff4233[_0x152626(0x92a)]())return;const _0x3cbd17=VisuMZ[_0x152626(0x5eb)](_0x2c5819['Targets']);for(const _0x6896f0 of _0x3cbd17){if(!_0x6896f0)continue;_0x3c8eed[_0x152626(0x47f)](_0x152626(0x2cc),_0x6b865d,_0x6896f0);}_0xb3c47d[_0x152626(0x7ff)](_0x152626(0x618));}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x843),_0x230003=>{const _0x7f5426=_0x5507dd;if(!SceneManager[_0x7f5426(0x4dc)]())return;VisuMZ[_0x7f5426(0x8fb)](_0x230003,_0x230003);const _0x5a44db=[_0x7f5426(0x94c),_0x7f5426(0x663),'ATK','DEF','MAT','MDF','AGI',_0x7f5426(0x5e8)],_0x38566c=_0x230003[_0x7f5426(0x97a)],_0x24d8af=_0x230003[_0x7f5426(0x2ff)],_0x2adef2=_0x230003['Turns'],_0x2d8af8=VisuMZ['CreateActionSequenceTargets'](_0x230003[_0x7f5426(0x5ed)]);for(const _0x1f0538 of _0x2d8af8){if(!_0x1f0538)continue;for(const _0x3385a1 of _0x38566c){const _0x464600=_0x5a44db[_0x7f5426(0x33f)](_0x3385a1[_0x7f5426(0x5d6)]()[_0x7f5426(0x48c)]());_0x464600>=0x0&&_0x464600<=0x7&&_0x1f0538[_0x7f5426(0x797)](_0x464600,_0x2adef2);}for(const _0x63e284 of _0x24d8af){const _0x3382c7=_0x5a44db[_0x7f5426(0x33f)](_0x63e284[_0x7f5426(0x5d6)]()[_0x7f5426(0x48c)]());_0x3382c7>=0x0&&_0x3382c7<=0x7&&_0x1f0538[_0x7f5426(0x709)](_0x3382c7,_0x2adef2);}}}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x74e),_0x3efd78=>{const _0x2bf86e=_0x5507dd;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x3efd78,_0x3efd78);const _0x277d57=_0x3efd78['States'],_0x8fd8f4=VisuMZ[_0x2bf86e(0x5eb)](_0x3efd78[_0x2bf86e(0x5ed)]);for(const _0x42a55a of _0x8fd8f4){if(!_0x42a55a)continue;for(const _0x589e7a of _0x277d57){_0x42a55a[_0x2bf86e(0x760)](_0x589e7a);}}}),PluginManager[_0x5507dd(0x44e)](pluginData['name'],_0x5507dd(0x6d7),_0x45728b=>{const _0x486a5f=_0x5507dd;if(!SceneManager[_0x486a5f(0x4dc)]())return;VisuMZ[_0x486a5f(0x8fb)](_0x45728b,_0x45728b);const _0x480280=BattleManager['_action'],_0x31bb7f={'arPenRate':_0x45728b['ArPenRate'],'arPenFlat':_0x45728b[_0x486a5f(0x580)],'arRedRate':_0x45728b[_0x486a5f(0x967)],'arRedFlat':_0x45728b[_0x486a5f(0x57c)]};_0x480280[_0x486a5f(0x7f0)]=_0x31bb7f;}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x522),_0x5d1566=>{const _0x531f4f=_0x5507dd;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x531f4f(0x9fa)])return;VisuMZ[_0x531f4f(0x8fb)](_0x5d1566,_0x5d1566);const _0x32e705=VisuMZ[_0x531f4f(0x5eb)](_0x5d1566[_0x531f4f(0x5ed)]),_0x457348=_0x5d1566[_0x531f4f(0x2f4)]||0x1;for(const _0x46e8fa of _0x32e705){if(!_0x46e8fa)continue;if(!_0x46e8fa[_0x531f4f(0x890)]())continue;_0x46e8fa[_0x531f4f(0x72a)](_0x457348);}}),PluginManager[_0x5507dd(0x44e)](pluginData['name'],'ActSeq_Mechanics_AtbGauge',_0x13509c=>{const _0x2e7bc1=_0x5507dd;if(!SceneManager[_0x2e7bc1(0x4dc)]())return;if(!Imported[_0x2e7bc1(0x496)])return;if(!BattleManager[_0x2e7bc1(0x1d8)]())return;VisuMZ[_0x2e7bc1(0x8fb)](_0x13509c,_0x13509c);const _0x315dd8=VisuMZ[_0x2e7bc1(0x5eb)](_0x13509c[_0x2e7bc1(0x5ed)]),_0x1b1777=_0x13509c[_0x2e7bc1(0x215)],_0x581772=_0x13509c[_0x2e7bc1(0x215)],_0x177dbd=_0x13509c[_0x2e7bc1(0x689)];for(const _0x1f70ef of _0x315dd8){if(!_0x1f70ef)continue;if(_0x1f70ef['isAtbChargingState']())_0x1f70ef[_0x2e7bc1(0x61a)](_0x1b1777);else{if(_0x1f70ef[_0x2e7bc1(0x3c0)]()){_0x1f70ef['changeAtbCastTime'](_0x581772);if(_0x177dbd)_0x1f70ef[_0x2e7bc1(0x494)]();}}}}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],'ActSeq_Mechanics_BoostPointsChange',_0xaa8b9d=>{const _0x49f525=_0x5507dd;if(!SceneManager[_0x49f525(0x4dc)]())return;if(!Imported[_0x49f525(0x441)])return;VisuMZ[_0x49f525(0x8fb)](_0xaa8b9d,_0xaa8b9d);const _0x329af1=VisuMZ[_0x49f525(0x5eb)](_0xaa8b9d[_0x49f525(0x5ed)]),_0x50b12a=_0xaa8b9d['BoostPoints'];for(const _0x26262f of _0x329af1){if(!_0x26262f)continue;_0x26262f[_0x49f525(0x9f2)](_0x50b12a);}}),PluginManager['registerCommand'](pluginData['name'],_0x5507dd(0x73a),_0x32f943=>{const _0x13eb63=_0x5507dd;if(!SceneManager[_0x13eb63(0x4dc)]())return;if(!Imported[_0x13eb63(0x441)])return;if(!BattleManager[_0x13eb63(0x1bb)])return;VisuMZ[_0x13eb63(0x8fb)](_0x32f943,_0x32f943);const _0x1e8fb8=_0x32f943['VariableID'];$gameVariables[_0x13eb63(0xa01)](_0x1e8fb8,BattleManager[_0x13eb63(0x1bb)][_0x13eb63(0x3a9)]());}),PluginManager['registerCommand'](pluginData[_0x5507dd(0x55f)],'ActSeq_Mechanics_BreakShieldChange',_0x39ed02=>{const _0x1abd92=_0x5507dd;if(!SceneManager[_0x1abd92(0x4dc)]())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ[_0x1abd92(0x8fb)](_0x39ed02,_0x39ed02);const _0x2bcf62=VisuMZ[_0x1abd92(0x5eb)](_0x39ed02[_0x1abd92(0x5ed)]),_0x117913=_0x39ed02[_0x1abd92(0x24e)];for(const _0x44abfe of _0x2bcf62){if(!_0x44abfe)continue;if(_0x44abfe[_0x1abd92(0x461)]())continue;if(!_0x44abfe['isAffectedByBreakShield']())continue;_0x44abfe[_0x1abd92(0x8f0)](_0x117913);}}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x878),_0x212262=>{const _0x45f4e0=_0x5507dd;if(!SceneManager[_0x45f4e0(0x4dc)]())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ[_0x45f4e0(0x8fb)](_0x212262,_0x212262);const _0x52ccc0=VisuMZ['CreateActionSequenceTargets'](_0x212262[_0x45f4e0(0x5ed)]);for(const _0x30b506 of _0x52ccc0){if(!_0x30b506)continue;if(_0x30b506[_0x45f4e0(0x461)]())continue;if(!_0x30b506[_0x45f4e0(0x2c2)]())continue;_0x30b506['resetBreakShield']();}}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x3a1),_0x56e9b9=>{const _0x52b3e8=_0x5507dd;if(!SceneManager[_0x52b3e8(0x4dc)]())return;if(!Imported['VisuMZ_2_BattleSystemBTB'])return;if(!BattleManager[_0x52b3e8(0x951)]())return;VisuMZ[_0x52b3e8(0x8fb)](_0x56e9b9,_0x56e9b9);const _0x1bfcce=VisuMZ[_0x52b3e8(0x5eb)](_0x56e9b9[_0x52b3e8(0x5ed)]),_0x347257=_0x56e9b9[_0x52b3e8(0x915)];for(const _0x52cf3d of _0x1bfcce){if(!_0x52cf3d)continue;_0x52cf3d[_0x52b3e8(0x806)](_0x347257);}}),PluginManager[_0x5507dd(0x44e)](pluginData['name'],_0x5507dd(0x76e),_0x3a6701=>{const _0xa5ddfe=_0x5507dd;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xa5ddfe(0x8fb)](_0x3a6701,_0x3a6701);const _0x17ed9e=$gameTemp[_0xa5ddfe(0x38e)](),_0x1d2671=BattleManager['_action'],_0xf67643=BattleManager[_0xa5ddfe(0x1bb)];if(!_0x17ed9e||!_0x1d2671||!_0xf67643)return;if(!_0x1d2671[_0xa5ddfe(0x92a)]())return;const _0x1614e9=VisuMZ[_0xa5ddfe(0x5eb)](_0x3a6701[_0xa5ddfe(0x5ed)]);for(const _0x3d4966 of _0x1614e9){if(!_0x3d4966)continue;_0x3a6701[_0xa5ddfe(0x531)]&&(_0x3d4966['removeImmortal'](),_0x3d4966[_0xa5ddfe(0x760)](_0x3d4966[_0xa5ddfe(0x40b)]())),_0x3d4966[_0xa5ddfe(0x9bd)]()&&_0x3d4966[_0xa5ddfe(0x2f2)]();}_0x17ed9e[_0xa5ddfe(0x7ff)](_0xa5ddfe(0x1be));}),PluginManager['registerCommand'](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x1b0),_0x4c1437=>{const _0x16dcf3=_0x5507dd;if(!SceneManager[_0x16dcf3(0x4dc)]())return;if(!Imported[_0x16dcf3(0x7fc)])return;if(!BattleManager[_0x16dcf3(0x902)]())return;VisuMZ['ConvertParams'](_0x4c1437,_0x4c1437);const _0x1723b4=VisuMZ[_0x16dcf3(0x5eb)](_0x4c1437[_0x16dcf3(0x5ed)]),_0x2e839e=_0x4c1437[_0x16dcf3(0x643)];for(const _0x21e6dc of _0x1723b4){if(!_0x21e6dc)continue;_0x21e6dc['changeTurnOrderByCTB'](_0x2e839e);}}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x58f),_0x2017e5=>{const _0x15c7d3=_0x5507dd;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;if(!BattleManager[_0x15c7d3(0x902)]())return;VisuMZ[_0x15c7d3(0x8fb)](_0x2017e5,_0x2017e5);const _0x597a56=VisuMZ[_0x15c7d3(0x5eb)](_0x2017e5[_0x15c7d3(0x5ed)]),_0x573290=_0x2017e5[_0x15c7d3(0x215)],_0x15f347=_0x2017e5[_0x15c7d3(0x215)];for(const _0x5f431d of _0x597a56){if(!_0x5f431d)continue;if(_0x5f431d[_0x15c7d3(0x5b8)]===_0x15c7d3(0x31a))_0x5f431d[_0x15c7d3(0x360)](_0x573290);else _0x5f431d[_0x15c7d3(0x5b8)]==='casting'&&_0x5f431d[_0x15c7d3(0x8a6)](_0x15f347);}}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x83c),_0x308c57=>{const _0x840275=_0x5507dd;if(!SceneManager[_0x840275(0x4dc)]())return;VisuMZ['ConvertParams'](_0x308c57,_0x308c57);const _0x2c1f5d=BattleManager['_action'];if(!_0x2c1f5d)return;let _0x114af2=_0x308c57['Formula'];_0x2c1f5d[_0x840275(0x859)](_0x114af2);}),PluginManager[_0x5507dd(0x44e)](pluginData['name'],_0x5507dd(0x93b),_0x1249b8=>{const _0x1921d8=_0x5507dd;if(!SceneManager[_0x1921d8(0x4dc)]())return;VisuMZ['ConvertParams'](_0x1249b8,_0x1249b8);const _0x1b7568=VisuMZ['CreateActionSequenceTargets'](_0x1249b8['Targets']);for(const _0x15dfb4 of _0x1b7568){if(!_0x15dfb4)continue;if(_0x15dfb4[_0x1921d8(0x2db)]())_0x15dfb4[_0x1921d8(0x685)]();}}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],'ActSeq_Mechanics_DeathBreak',_0x4a6c57=>{const _0x28a64d=_0x5507dd;if(!SceneManager[_0x28a64d(0x4dc)]())return;VisuMZ[_0x28a64d(0x8fb)](_0x4a6c57,_0x4a6c57);const _0x341324=$gameTemp['getLastPluginCommandInterpreter'](),_0x5854e0=BattleManager[_0x28a64d(0x1bb)],_0x30361a=_0x4a6c57[_0x28a64d(0x7e1)];if(!_0x341324)return;if(!_0x5854e0)return;_0x5854e0&&_0x5854e0[_0x28a64d(0x45e)]()&&_0x30361a[_0x28a64d(0x5d6)]()[_0x28a64d(0x48c)]()!=='UNTITLED'&&_0x341324[_0x28a64d(0x5b4)]([_0x30361a]);}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x60f),_0x1ab12d=>{const _0x517666=_0x5507dd;if(!SceneManager[_0x517666(0x4dc)]())return;VisuMZ[_0x517666(0x8fb)](_0x1ab12d,_0x1ab12d);const _0x1150e1=VisuMZ[_0x517666(0x5eb)](_0x1ab12d[_0x517666(0x5ed)]);for(const _0xc3ce94 of _0x1150e1){if(!_0xc3ce94)continue;if(!_0xc3ce94[_0x517666(0x890)]())continue;_0xc3ce94[_0x517666(0x6f3)]();}}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x90e),_0x4055e9=>{const _0x143a95=_0x5507dd;if(!SceneManager[_0x143a95(0x4dc)]())return;if(!Imported[_0x143a95(0x8b0)])return;if(!BattleManager[_0x143a95(0x4eb)]())return;VisuMZ['ConvertParams'](_0x4055e9,_0x4055e9);const _0x481799=_0x4055e9['ActionCount'];BattleManager[_0x143a95(0x1bb)]&&BattleManager['_subject']['friendsUnit']()[_0x143a95(0x638)](_0x481799);}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x3e8),_0x5559d1=>{const _0xc79ae3=_0x5507dd;if(!SceneManager[_0xc79ae3(0x4dc)]())return;if(!Imported[_0xc79ae3(0x4a3)])return;if(!BattleManager[_0xc79ae3(0x966)]())return;VisuMZ[_0xc79ae3(0x8fb)](_0x5559d1,_0x5559d1);const _0x12e543=_0x5559d1[_0xc79ae3(0x5ab)];BattleManager[_0xc79ae3(0x1bb)]&&BattleManager[_0xc79ae3(0x1bb)][_0xc79ae3(0x4b8)]()[_0xc79ae3(0x25b)](_0x12e543);}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],'ActSeq_Mechanics_HpMpTp',_0x50ed43=>{const _0x5db5e1=_0x5507dd;if(!SceneManager[_0x5db5e1(0x4dc)]())return;VisuMZ[_0x5db5e1(0x8fb)](_0x50ed43,_0x50ed43);const _0x44d5e8=VisuMZ[_0x5db5e1(0x5eb)](_0x50ed43[_0x5db5e1(0x5ed)]),_0x1df6e5=_0x50ed43[_0x5db5e1(0x365)],_0x892739=_0x50ed43[_0x5db5e1(0x852)],_0x36d2dd=_0x50ed43[_0x5db5e1(0x521)],_0x453809=_0x50ed43[_0x5db5e1(0x995)],_0x523538=_0x50ed43[_0x5db5e1(0x68b)],_0x3025fc=_0x50ed43['TP_Flat'],_0x217374=_0x50ed43['ShowPopup'];for(const _0xf1b245 of _0x44d5e8){if(!_0xf1b245)continue;const _0x18fcd9=_0xf1b245[_0x5db5e1(0x8d4)](),_0x342b22=Math[_0x5db5e1(0x95e)](_0x1df6e5*_0xf1b245[_0x5db5e1(0x342)]+_0x892739),_0x4ac116=Math[_0x5db5e1(0x95e)](_0x36d2dd*_0xf1b245[_0x5db5e1(0xa09)]+_0x453809),_0x1d9d82=Math['round'](_0x523538*_0xf1b245[_0x5db5e1(0x323)]()+_0x3025fc);if(_0x342b22!==0x0)_0xf1b245[_0x5db5e1(0x66c)](_0x342b22);if(_0x4ac116!==0x0)_0xf1b245[_0x5db5e1(0x9b9)](_0x4ac116);if(_0x1d9d82!==0x0)_0xf1b245[_0x5db5e1(0x259)](_0x1d9d82);if(_0x217374)_0xf1b245['startDamagePopup']();_0x18fcd9&&_0xf1b245[_0x5db5e1(0x45e)]()&&_0xf1b245['performCollapse']();}}),PluginManager['registerCommand'](pluginData[_0x5507dd(0x55f)],'ActSeq_Mechanics_Immortal',_0x5eddec=>{const _0x26ba9b=_0x5507dd;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x26ba9b(0x8fb)](_0x5eddec,_0x5eddec);const _0x41aae4=VisuMZ[_0x26ba9b(0x5eb)](_0x5eddec['Targets']);for(const _0x578203 of _0x41aae4){if(!_0x578203)continue;_0x578203[_0x26ba9b(0x6b1)](_0x5eddec[_0x26ba9b(0x7cc)]);}}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],'ActSeq_Mechanics_Multipliers',_0x5270cf=>{const _0x3f6fdd=_0x5507dd;if(!SceneManager[_0x3f6fdd(0x4dc)]())return;VisuMZ[_0x3f6fdd(0x8fb)](_0x5270cf,_0x5270cf);const _0x526087=BattleManager[_0x3f6fdd(0x804)],_0x1f8797={'criticalHitRate':_0x5270cf[_0x3f6fdd(0x5f9)],'criticalHitFlat':_0x5270cf[_0x3f6fdd(0x471)],'criticalDmgRate':_0x5270cf['CriticalDmgRate'],'criticalDmgFlat':_0x5270cf[_0x3f6fdd(0x80b)],'damageRate':_0x5270cf[_0x3f6fdd(0x4d7)],'damageFlat':_0x5270cf[_0x3f6fdd(0xa08)],'hitRate':_0x5270cf['HitRate'],'hitFlat':_0x5270cf['HitFlat']};_0x526087['_multipliers']=_0x1f8797;}),PluginManager[_0x5507dd(0x44e)](pluginData['name'],_0x5507dd(0x924),_0x43a66b=>{const _0x41ec83=_0x5507dd;if(!SceneManager[_0x41ec83(0x4dc)]())return;VisuMZ[_0x41ec83(0x8fb)](_0x43a66b,_0x43a66b);const _0x58177f=_0x43a66b[_0x41ec83(0x1ff)];SceneManager[_0x41ec83(0x590)]['playOnceParallelInterpreter'](_0x58177f);}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],'ActSeq_Mechanics_OtbOrder',_0x3f2729=>{const _0x5233dc=_0x5507dd;if(!SceneManager[_0x5233dc(0x4dc)]())return;if(!Imported[_0x5233dc(0x808)])return;if(!BattleManager[_0x5233dc(0x79b)]())return;VisuMZ['ConvertParams'](_0x3f2729,_0x3f2729);const _0x3d54b3=VisuMZ[_0x5233dc(0x5eb)](_0x3f2729[_0x5233dc(0x5ed)]);for(const _0x3fe0e8 of _0x3d54b3){if(!_0x3fe0e8)continue;let _0x40af6d=_0x3f2729[_0x5233dc(0xa2b)],_0x54db7a=_0x3f2729[_0x5233dc(0x611)],_0x32dfd6=_0x3f2729[_0x5233dc(0x7a3)];BattleManager[_0x5233dc(0x5a9)]['includes'](_0x3fe0e8)?_0x40af6d+=_0x32dfd6:_0x54db7a+=_0x32dfd6,BattleManager[_0x5233dc(0x34b)](_0x3fe0e8,-_0x40af6d,![]),BattleManager[_0x5233dc(0x34b)](_0x3fe0e8,-_0x54db7a,!![]);}}),PluginManager[_0x5507dd(0x44e)](pluginData['name'],_0x5507dd(0x942),_0x257943=>{const _0x2688e7=_0x5507dd;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x2688e7(0x5d5)]())return;VisuMZ['ConvertParams'](_0x257943,_0x257943);const _0x231d7c=BattleManager[_0x2688e7(0x1bb)][_0x2688e7(0x4b8)](),_0xdf3546=_0x257943[_0x2688e7(0x6ac)],_0x118c50=_0x257943[_0x2688e7(0x408)]||_0x2688e7(0x906),_0x3e8e2a=_0x257943[_0x2688e7(0x1d6)]||'unchanged',_0x2f9291=_0x257943['alterCost']||0x0,_0xfdcf5b=_0x257943[_0x2688e7(0x922)]||0x0;(_0x231d7c['canAlterActionCostPTB']()||_0xdf3546)&&(_0xdf3546&&(_0x231d7c[_0x2688e7(0x5c2)]=_0x231d7c['_ptbActionCost']||{},_0x231d7c[_0x2688e7(0x5c2)][_0x2688e7(0x9c3)]=0x0),_0x231d7c['alterActionCostPTB'](_0x118c50,_0x3e8e2a,_0x2f9291,_0xfdcf5b));}),PluginManager[_0x5507dd(0x44e)](pluginData['name'],_0x5507dd(0x345),_0x16eadb=>{const _0x4c6071=_0x5507dd;if(!SceneManager[_0x4c6071(0x4dc)]())return;if(!Imported[_0x4c6071(0x539)])return;if(!BattleManager[_0x4c6071(0x5d5)]())return;VisuMZ[_0x4c6071(0x8fb)](_0x16eadb,_0x16eadb);const _0x56cbfe=BattleManager[_0x4c6071(0x1bb)][_0x4c6071(0x4b8)]();let _0x4c1ae6=Math[_0x4c6071(0x741)](_0x16eadb[_0x4c6071(0x5d4)],0x0),_0x521608=_0x56cbfe['getFullActionsPTB'](),_0x2854d2=_0x56cbfe[_0x4c6071(0x9e5)]();while(_0x4c1ae6--){if(_0x521608<=0x0&&_0x2854d2<=0x0)break;else _0x521608>0x0?(_0x521608--,_0x2854d2++):_0x2854d2--;}_0x56cbfe[_0x4c6071(0x9d2)](_0x521608),_0x56cbfe[_0x4c6071(0x294)](_0x2854d2);}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x665),_0x2656c0=>{const _0x5c39e2=_0x5507dd;if(!SceneManager[_0x5c39e2(0x4dc)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x5c39e2(0x5d5)]())return;VisuMZ[_0x5c39e2(0x8fb)](_0x2656c0,_0x2656c0);const _0xb60ae5=BattleManager[_0x5c39e2(0x1bb)]['friendsUnit']();let _0x527055=_0x2656c0[_0x5c39e2(0x380)],_0x386b59=_0x2656c0['HalfActions'];_0xb60ae5[_0x5c39e2(0x668)](_0x527055),_0xb60ae5[_0x5c39e2(0x9c0)](_0x386b59);}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],'ActSeq_Mechanics_RemoveBuffDebuff',_0x56c08a=>{const _0x2103b1=_0x5507dd;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2103b1(0x8fb)](_0x56c08a,_0x56c08a);const _0x389168=[_0x2103b1(0x94c),'MAXMP',_0x2103b1(0x2bd),_0x2103b1(0x4a1),_0x2103b1(0x98b),_0x2103b1(0x2c3),_0x2103b1(0x476),_0x2103b1(0x5e8)],_0xbce55d=_0x56c08a[_0x2103b1(0x97a)],_0x298a18=_0x56c08a['Debuffs'],_0x490f2d=VisuMZ[_0x2103b1(0x5eb)](_0x56c08a[_0x2103b1(0x5ed)]);for(const _0x590e5e of _0x490f2d){if(!_0x590e5e)continue;for(const _0x4df3b2 of _0xbce55d){const _0xce7b6b=_0x389168[_0x2103b1(0x33f)](_0x4df3b2[_0x2103b1(0x5d6)]()[_0x2103b1(0x48c)]());_0xce7b6b>=0x0&&_0xce7b6b<=0x7&&_0x590e5e[_0x2103b1(0x841)](_0xce7b6b)&&_0x590e5e['removeBuff'](_0xce7b6b);}for(const _0x222694 of _0x298a18){const _0x5cd178=_0x389168[_0x2103b1(0x33f)](_0x222694[_0x2103b1(0x5d6)]()[_0x2103b1(0x48c)]());_0x5cd178>=0x0&&_0x5cd178<=0x7&&_0x590e5e[_0x2103b1(0x759)](_0x5cd178)&&_0x590e5e['removeBuff'](_0x5cd178);}}}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x2e4),_0x19df2c=>{const _0x56eab1=_0x5507dd;if(!SceneManager[_0x56eab1(0x4dc)]())return;VisuMZ[_0x56eab1(0x8fb)](_0x19df2c,_0x19df2c);const _0x23da87=_0x19df2c['States'],_0x23562f=VisuMZ[_0x56eab1(0x5eb)](_0x19df2c[_0x56eab1(0x5ed)]);for(const _0x3b7819 of _0x23562f){if(!_0x3b7819)continue;for(const _0x14a01e of _0x23da87){_0x3b7819['removeState'](_0x14a01e);}}}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x237),_0x196169=>{const _0x5cf6f8=_0x5507dd;if(!SceneManager[_0x5cf6f8(0x4dc)]())return;if(!Imported[_0x5cf6f8(0x366)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x5cf6f8(0x8fb)](_0x196169,_0x196169);const _0x1737f2=_0x196169[_0x5cf6f8(0x7da)],_0x15ddde=VisuMZ[_0x5cf6f8(0x5eb)](_0x196169[_0x5cf6f8(0x5ed)]),_0x118c04=_0x196169[_0x5cf6f8(0x76d)],_0x2f982d=_0x196169[_0x5cf6f8(0x1f6)],_0x1cf7a6=_0x196169[_0x5cf6f8(0x870)],_0x2714c5=BattleManager[_0x5cf6f8(0x804)];if(_0x1737f2)for(const _0x4b085c of _0x15ddde){if(!_0x4b085c)continue;if(_0x4b085c===user)continue;if(_0x118c04)_0x4b085c[_0x5cf6f8(0x1c3)](![]);_0x4b085c['becomeSTBExploited'](BattleManager['_subject'],_0x2714c5);}if(_0x2f982d&&BattleManager[_0x5cf6f8(0x1bb)]){if(_0x1cf7a6)BattleManager[_0x5cf6f8(0x1bb)][_0x5cf6f8(0x1c3)](![]);const _0x140bd6=_0x15ddde[0x0];BattleManager['performSTBExploiter'](_0x140bd6,_0x2714c5);}}),PluginManager[_0x5507dd(0x44e)](pluginData['name'],_0x5507dd(0x47d),_0x217080=>{const _0x5bb71a=_0x5507dd;if(!SceneManager[_0x5bb71a(0x4dc)]())return;if(!Imported[_0x5bb71a(0x366)])return;if(!BattleManager[_0x5bb71a(0xa2e)]())return;VisuMZ['ConvertParams'](_0x217080,_0x217080);const _0x4cfcb9=_0x217080[_0x5bb71a(0x905)];BattleManager[_0x5bb71a(0x1bb)]&&BattleManager[_0x5bb71a(0x1bb)]['stbGainInstant'](_0x4cfcb9);}),PluginManager[_0x5507dd(0x44e)](pluginData['name'],_0x5507dd(0x3b7),_0x288a9b=>{const _0x340c1c=_0x5507dd;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x340c1c(0x366)])return;if(!BattleManager[_0x340c1c(0xa2e)]())return;VisuMZ[_0x340c1c(0x8fb)](_0x288a9b,_0x288a9b);let _0x2ca025=_0x288a9b['Actions'];if(BattleManager['_subject']){BattleManager[_0x340c1c(0x1bb)][_0x340c1c(0x37d)]=BattleManager[_0x340c1c(0x1bb)][_0x340c1c(0x37d)]||[];while(_0x2ca025--){if(BattleManager[_0x340c1c(0x1bb)]['_actions']['length']<=0x0)break;BattleManager[_0x340c1c(0x1bb)][_0x340c1c(0x37d)][_0x340c1c(0x97f)]();}}}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],'ActSeq_Mechanics_SwapWeapon',_0xfe5a7f=>{const _0xaf8179=_0x5507dd;if(!SceneManager[_0xaf8179(0x4dc)]())return;if(!Imported['VisuMZ_2_WeaponSwapSystem'])return;VisuMZ['ConvertParams'](_0xfe5a7f,_0xfe5a7f);const _0x395c33=VisuMZ['CreateActionSequenceTargets'](_0xfe5a7f['Targets']),_0x41f808=_0xfe5a7f[_0xaf8179(0x55c)];for(const _0x4abc89 of _0x395c33){if(!_0x4abc89)continue;if(!_0x4abc89[_0xaf8179(0x8ed)]())continue;_0x4abc89[_0xaf8179(0x7e6)](_0x41f808);}}),PluginManager['registerCommand'](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x753),_0x240306=>{const _0x218655=_0x5507dd;if(!SceneManager[_0x218655(0x4dc)]())return;VisuMZ['ConvertParams'](_0x240306,_0x240306);const _0x5bde37=VisuMZ[_0x218655(0x5eb)](_0x240306[_0x218655(0x5ed)]),_0x1dace4=_0x240306['Text'],_0x2ebe05={'textColor':ColorManager[_0x218655(0x437)](_0x240306[_0x218655(0x347)]),'flashColor':_0x240306[_0x218655(0x24b)],'flashDuration':_0x240306[_0x218655(0x370)]};for(const _0x389d60 of _0x5bde37){if(!_0x389d60)continue;_0x389d60['setupTextPopup'](_0x1dace4,_0x2ebe05);}}),PluginManager['registerCommand'](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x658),_0xc6674=>{const _0xabd37d=_0x5507dd;if(!SceneManager[_0xabd37d(0x4dc)]())return;VisuMZ['ConvertParams'](_0xc6674,_0xc6674);const _0x211a8a=VisuMZ[_0xabd37d(0x5eb)](_0xc6674['Targets']);let _0x5609fc=$gameVariables[_0xabd37d(0x5a7)](_0xc6674['Variable']);Imported[_0xabd37d(0x72e)]&&_0xc6674[_0xabd37d(0x83a)]&&(_0x5609fc=VisuMZ[_0xabd37d(0x599)](_0x5609fc));const _0x479097=String(_0x5609fc),_0x36458a={'textColor':ColorManager[_0xabd37d(0x437)](_0xc6674['TextColor']),'flashColor':_0xc6674[_0xabd37d(0x24b)],'flashDuration':_0xc6674[_0xabd37d(0x370)]};for(const _0x2e4c66 of _0x211a8a){if(!_0x2e4c66)continue;_0x2e4c66['setupTextPopup'](_0x479097,_0x36458a);}}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x3ee),_0x60cd43=>{const _0x293d01=_0x5507dd;if(!SceneManager[_0x293d01(0x4dc)]())return;const _0x37f832=$gameTemp[_0x293d01(0x38e)]();if(!_0x37f832)return;_0x37f832['setWaitMode'](_0x293d01(0x1be));}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],'ActSeq_Motion_ClearFreezeFrame',_0x2ce1a5=>{const _0x405933=_0x5507dd;if(!SceneManager[_0x405933(0x4dc)]())return;VisuMZ[_0x405933(0x8fb)](_0x2ce1a5,_0x2ce1a5);const _0x6e19e0=VisuMZ[_0x405933(0x5eb)](_0x2ce1a5[_0x405933(0x5ed)]);for(const _0x23e6e5 of _0x6e19e0){if(!_0x23e6e5)continue;_0x23e6e5[_0x405933(0x688)]();}}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],'ActSeq_Motion_FreezeMotionFrame',_0x42d6e0=>{const _0x1ec93f=_0x5507dd;if(!SceneManager[_0x1ec93f(0x4dc)]())return;VisuMZ[_0x1ec93f(0x8fb)](_0x42d6e0,_0x42d6e0);const _0xf95224=VisuMZ[_0x1ec93f(0x5eb)](_0x42d6e0[_0x1ec93f(0x5ed)]),_0x1313f1=_0x42d6e0['MotionType']['toLowerCase']()['trim']();let _0x25ef29=_0x42d6e0['ShowWeapon'];const _0x39af64=_0x42d6e0['Frame'];!['attack',_0x1ec93f(0x474),_0x1ec93f(0x2ba),_0x1ec93f(0x8cb)][_0x1ec93f(0x351)](_0x1313f1)&&(_0x25ef29=![]);for(const _0x4a6a82 of _0xf95224){if(!_0x4a6a82)continue;_0x4a6a82[_0x1ec93f(0x651)](_0x1313f1,_0x25ef29,_0x39af64);}}),PluginManager['registerCommand'](pluginData['name'],_0x5507dd(0x5a5),_0x442c27=>{const _0x3bb47e=_0x5507dd;if(!SceneManager[_0x3bb47e(0x4dc)]())return;VisuMZ[_0x3bb47e(0x8fb)](_0x442c27,_0x442c27);const _0x1ca3fe=VisuMZ[_0x3bb47e(0x5eb)](_0x442c27[_0x3bb47e(0x5ed)]),_0x19974c=_0x442c27[_0x3bb47e(0x1fd)][_0x3bb47e(0x5c8)]()[_0x3bb47e(0x48c)](),_0x19d1e9=_0x442c27[_0x3bb47e(0x241)];for(const _0x3cf48c of _0x1ca3fe){if(!_0x3cf48c)continue;if(_0x19974c['match'](/ATTACK[ ](\d+)/i))_0x3cf48c[_0x3bb47e(0x725)](Number(RegExp['$1']));else _0x19974c==='attack'?_0x3cf48c[_0x3bb47e(0x224)]():_0x3cf48c['requestMotion'](_0x19974c);if(!_0x19d1e9)_0x3cf48c[_0x3bb47e(0x71d)](0x0);else{if(_0x19d1e9&&[_0x3bb47e(0x474),_0x3bb47e(0x2ba),'missle'][_0x3bb47e(0x351)](_0x19974c)){}}}}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],'ActSeq_Motion_PerformAction',_0x30ea4f=>{const _0x156ec1=_0x5507dd;if(!SceneManager[_0x156ec1(0x4dc)]())return;VisuMZ[_0x156ec1(0x8fb)](_0x30ea4f,_0x30ea4f);const _0x1f770d=BattleManager[_0x156ec1(0x804)];if(!_0x1f770d)return;if(!_0x1f770d['item']())return;const _0x5e17d7=VisuMZ['CreateActionSequenceTargets'](_0x30ea4f[_0x156ec1(0x5ed)]);for(const _0x55a5f9 of _0x5e17d7){if(!_0x55a5f9)continue;_0x55a5f9['performAction'](_0x1f770d);}}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x273),_0x36c4dd=>{const _0x1970f5=_0x5507dd;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1970f5(0x8fb)](_0x36c4dd,_0x36c4dd);const _0x3950c5=VisuMZ['CreateActionSequenceTargets'](_0x36c4dd[_0x1970f5(0x5ed)]);for(const _0x546ae4 of _0x3950c5){if(!_0x546ae4)continue;if(!_0x546ae4[_0x1970f5(0x9f8)]())continue;_0x546ae4[_0x1970f5(0x9f8)]()[_0x1970f5(0x24a)]();}}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x7ed),_0x4c5ee9=>{const _0x1a4e76=_0x5507dd;if(!SceneManager[_0x1a4e76(0x4dc)]())return;VisuMZ['ConvertParams'](_0x4c5ee9,_0x4c5ee9);const _0x2e098f=$gameTemp['getLastPluginCommandInterpreter'](),_0x1fb26e=_0x4c5ee9[_0x1a4e76(0x37c)]*Sprite_Battler[_0x1a4e76(0x729)];_0x2e098f['wait'](_0x1fb26e);}),PluginManager['registerCommand'](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x332),_0x10d655=>{const _0x8c7d49=_0x5507dd;if(!SceneManager[_0x8c7d49(0x4dc)]())return;VisuMZ[_0x8c7d49(0x8fb)](_0x10d655,_0x10d655);const _0x2891c0=$gameTemp[_0x8c7d49(0x38e)](),_0x1da541=BattleManager[_0x8c7d49(0x804)];if(!_0x2891c0||!_0x1da541)return;if(!_0x1da541[_0x8c7d49(0x92a)]())return;const _0x3ea949=VisuMZ[_0x8c7d49(0x5eb)](_0x10d655['Targets']);for(const _0x20c0d9 of _0x3ea949){if(!_0x20c0d9)continue;_0x20c0d9[_0x8c7d49(0x1bd)](_0x1da541);}if(_0x10d655['WaitForMovement'])_0x2891c0[_0x8c7d49(0x7ff)]('battleMove');}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x45f),_0x3e0634=>{const _0x2f822b=_0x5507dd;if(!SceneManager[_0x2f822b(0x4dc)]())return;if(!$gameSystem[_0x2f822b(0x577)]())return;VisuMZ[_0x2f822b(0x8fb)](_0x3e0634,_0x3e0634);const _0x2637cb=$gameTemp[_0x2f822b(0x38e)](),_0x427390=VisuMZ[_0x2f822b(0x5eb)](_0x3e0634[_0x2f822b(0x5ed)]),_0x563c4b=_0x3e0634['DistanceAdjust'],_0x5ba7eb=_0x3e0634[_0x2f822b(0x308)],_0x47964e=_0x3e0634[_0x2f822b(0x749)],_0x10b591=_0x3e0634[_0x2f822b(0x203)],_0x4dc53b=_0x3e0634['FaceDirection'],_0x37291f=_0x3e0634[_0x2f822b(0x813)],_0x1b1711=_0x3e0634[_0x2f822b(0x1fd)],_0x32d56b=_0x3e0634[_0x2f822b(0x2be)];if(!_0x2637cb)return;for(const _0xb8de4 of _0x427390){if(!_0xb8de4)continue;let _0x12dec1=_0x5ba7eb,_0xe61b0e=_0x47964e;if(_0x563c4b[_0x2f822b(0x1f2)](/horz/i))_0x12dec1*=_0xb8de4[_0x2f822b(0x8ed)]()?-0x1:0x1;if(_0x563c4b['match'](/vert/i))_0xe61b0e*=_0xb8de4[_0x2f822b(0x8ed)]()?-0x1:0x1;_0xb8de4[_0x2f822b(0x2e0)](_0x12dec1,_0xe61b0e,_0x10b591,_0x4dc53b,_0x37291f),_0xb8de4[_0x2f822b(0xa18)](_0x1b1711);}if(_0x32d56b)_0x2637cb['setWaitMode']('battleMove');}),PluginManager[_0x5507dd(0x44e)](pluginData['name'],'ActSeq_Movement_HomeMoveToPoint',_0x490aea=>{const _0x14408a=_0x5507dd;if(!SceneManager[_0x14408a(0x4dc)]())return;if(!$gameSystem[_0x14408a(0x577)]())return;VisuMZ[_0x14408a(0x8fb)](_0x490aea,_0x490aea);const _0x3f1570=$gameTemp[_0x14408a(0x38e)](),_0x7844a6=VisuMZ[_0x14408a(0x5eb)](_0x490aea[_0x14408a(0x5ed)]),_0xa3d37=_0x490aea[_0x14408a(0x31d)],_0x19f4a5=_0x490aea[_0x14408a(0x216)],_0x50827d=_0x490aea[_0x14408a(0x812)],_0x20a20b=_0x490aea[_0x14408a(0x88e)],_0x53de73=_0x490aea['Duration'],_0x8913e4=_0x490aea[_0x14408a(0x68d)],_0x5c191c=_0x490aea[_0x14408a(0x813)],_0x358d40=_0x490aea[_0x14408a(0x1fd)],_0x340835=_0x490aea[_0x14408a(0x2be)];if(!_0x3f1570)return;for(const _0x12aec8 of _0x7844a6){if(!_0x12aec8)continue;let _0xbd9fc5=_0x12aec8[_0x14408a(0x9f8)]()[_0x14408a(0x67b)],_0x478fc8=_0x12aec8[_0x14408a(0x9f8)]()[_0x14408a(0x6c3)];if(_0xa3d37[_0x14408a(0x1f2)](/home/i))_0xbd9fc5=_0x12aec8[_0x14408a(0x9f8)]()['_homeX'],_0x478fc8=_0x12aec8[_0x14408a(0x9f8)]()[_0x14408a(0x7b6)];else{if(_0xa3d37[_0x14408a(0x1f2)](/center/i))_0xbd9fc5=Graphics[_0x14408a(0x8e0)]/0x2,_0x478fc8=Graphics['boxHeight']/0x2;else _0xa3d37[_0x14408a(0x1f2)](/point (\d+), (\d+)/i)&&(_0xbd9fc5=Number(RegExp['$1']),_0x478fc8=Number(RegExp['$2']));}if(_0x19f4a5[_0x14408a(0x1f2)](/none/i))_0xbd9fc5+=_0x50827d,_0x478fc8+=_0x20a20b;else{if(_0x19f4a5[_0x14408a(0x1f2)](/horz/i)&&_0x19f4a5[_0x14408a(0x1f2)](/vert/i))_0xbd9fc5+=_0x12aec8[_0x14408a(0x8ed)]()?-_0x50827d:_0x50827d,_0x478fc8+=_0x12aec8[_0x14408a(0x8ed)]()?-_0x20a20b:_0x20a20b;else{if(_0x19f4a5[_0x14408a(0x1f2)](/horz/i))_0xbd9fc5+=_0x12aec8[_0x14408a(0x8ed)]()?-_0x50827d:_0x50827d,_0x478fc8+=_0x20a20b;else _0x19f4a5[_0x14408a(0x1f2)](/vert/i)&&(_0xbd9fc5+=_0x50827d,_0x478fc8+=_0x12aec8[_0x14408a(0x8ed)]()?-_0x20a20b:_0x20a20b);}}_0x12aec8[_0x14408a(0x7e2)](_0xbd9fc5,_0x478fc8,_0x53de73,_0x8913e4,_0x5c191c,-0x1),_0x12aec8[_0x14408a(0xa18)](_0x358d40);}if(_0x340835)_0x3f1570[_0x14408a(0x7ff)](_0x14408a(0x51c));}),PluginManager['registerCommand'](pluginData['name'],_0x5507dd(0x2fd),_0x25b35c=>{const _0x48247c=_0x5507dd;if(!SceneManager[_0x48247c(0x4dc)]())return;if(!$gameSystem[_0x48247c(0x577)]())return;VisuMZ[_0x48247c(0x8fb)](_0x25b35c,_0x25b35c);const _0x525f24=$gameTemp['getLastPluginCommandInterpreter'](),_0xdaa443=VisuMZ[_0x48247c(0x5eb)](_0x25b35c[_0x48247c(0x233)]),_0x3ebf8c=VisuMZ[_0x48247c(0x5eb)](_0x25b35c[_0x48247c(0x737)]),_0x1fd359=_0x25b35c['TargetLocation'];let _0x3cc4ca=_0x25b35c[_0x48247c(0x59c)];const _0x34585d=_0x25b35c['OffsetAdjust'],_0x48b6e5=_0x25b35c[_0x48247c(0x812)],_0x229fdd=_0x25b35c['OffsetY'],_0x45c0cd=_0x25b35c[_0x48247c(0x203)],_0x4a36c2=_0x25b35c[_0x48247c(0x68d)],_0x3b8660=_0x25b35c[_0x48247c(0x813)],_0x9be09f=_0x25b35c['MotionType'],_0x233555=_0x25b35c[_0x48247c(0x2be)],_0x126302=Math[_0x48247c(0x71c)](..._0x3ebf8c[_0x48247c(0x4d2)](_0x416a4b=>_0x416a4b[_0x48247c(0x9f8)]()[_0x48247c(0x67b)]-_0x416a4b[_0x48247c(0x9f8)]()[_0x48247c(0x5c4)]()/0x2)),_0x3c7135=Math[_0x48247c(0x741)](..._0x3ebf8c[_0x48247c(0x4d2)](_0x6e030e=>_0x6e030e['battler']()[_0x48247c(0x67b)]+_0x6e030e['battler']()[_0x48247c(0x5c4)]()/0x2)),_0x17b270=Math[_0x48247c(0x71c)](..._0x3ebf8c[_0x48247c(0x4d2)](_0x5ef341=>_0x5ef341['battler']()[_0x48247c(0x6c3)]-_0x5ef341['battler']()[_0x48247c(0x6ba)]())),_0x74ab1c=Math['max'](..._0x3ebf8c[_0x48247c(0x4d2)](_0x4d9598=>_0x4d9598[_0x48247c(0x9f8)]()[_0x48247c(0x6c3)])),_0x2168e3=_0x3ebf8c['filter'](_0x4c00e8=>_0x4c00e8[_0x48247c(0x8ed)]())[_0x48247c(0x77e)],_0x33096d=_0x3ebf8c[_0x48247c(0x1b4)](_0x1d80ce=>_0x1d80ce[_0x48247c(0x890)]())[_0x48247c(0x77e)];let _0x58b145=0x0,_0x7a37fb=0x0;if(_0x1fd359['match'](/front/i))_0x58b145=_0x2168e3>=_0x33096d?_0x126302:_0x3c7135;else{if(_0x1fd359[_0x48247c(0x1f2)](/middle/i))_0x58b145=(_0x126302+_0x3c7135)/0x2,_0x3cc4ca=-0x1;else _0x1fd359['match'](/back/i)&&(_0x58b145=_0x2168e3>=_0x33096d?_0x3c7135:_0x126302);}if(_0x1fd359['match'](/head/i))_0x7a37fb=_0x17b270;else{if(_0x1fd359[_0x48247c(0x1f2)](/center/i))_0x7a37fb=(_0x17b270+_0x74ab1c)/0x2;else _0x1fd359[_0x48247c(0x1f2)](/base/i)&&(_0x7a37fb=_0x74ab1c);}if(!_0x525f24)return;for(const _0x27e824 of _0xdaa443){if(!_0x27e824)continue;let _0x23f5c5=_0x58b145,_0x5c376f=_0x7a37fb;if(_0x34585d['match'](/none/i))_0x23f5c5+=_0x48b6e5,_0x5c376f+=_0x229fdd;else{if(_0x34585d[_0x48247c(0x1f2)](/horz/i)&&_0x34585d[_0x48247c(0x1f2)](/vert/i))_0x23f5c5+=_0x27e824['isActor']()?-_0x48b6e5:_0x48b6e5,_0x5c376f+=_0x27e824[_0x48247c(0x8ed)]()?-_0x229fdd:_0x229fdd;else{if(_0x34585d[_0x48247c(0x1f2)](/horz/i))_0x23f5c5+=_0x27e824['isActor']()?-_0x48b6e5:_0x48b6e5,_0x5c376f+=_0x229fdd;else _0x34585d[_0x48247c(0x1f2)](/vert/i)&&(_0x23f5c5+=_0x48b6e5,_0x5c376f+=_0x27e824[_0x48247c(0x8ed)]()?-_0x229fdd:_0x229fdd);}}_0x27e824[_0x48247c(0x7e2)](_0x23f5c5,_0x5c376f,_0x45c0cd,_0x4a36c2,_0x3b8660,_0x3cc4ca),_0x27e824[_0x48247c(0xa18)](_0x9be09f);}if(_0x233555)_0x525f24['setWaitMode'](_0x48247c(0x51c));}),PluginManager[_0x5507dd(0x44e)](pluginData['name'],_0x5507dd(0x2e8),_0x363cd5=>{const _0x311ec6=_0x5507dd;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x311ec6(0x577)]())return;VisuMZ['ConvertParams'](_0x363cd5,_0x363cd5);const _0x388b91=VisuMZ['CreateActionSequenceTargets'](_0x363cd5[_0x311ec6(0x5ed)]);let _0x1aa3d5=_0x363cd5['Direction'][_0x311ec6(0x1f2)](/back/i);for(const _0x1d45f7 of _0x388b91){if(!_0x1d45f7)continue;if(_0x363cd5[_0x311ec6(0x2d0)]['match'](/rand/i))_0x1aa3d5=Math[_0x311ec6(0x52b)](0x2);_0x1d45f7[_0x311ec6(0x36b)](!!_0x1aa3d5);}}),PluginManager[_0x5507dd(0x44e)](pluginData['name'],_0x5507dd(0x954),_0x43570e=>{const _0x38e079=_0x5507dd;if(!SceneManager[_0x38e079(0x4dc)]())return;if(!$gameSystem[_0x38e079(0x577)]())return;VisuMZ[_0x38e079(0x8fb)](_0x43570e,_0x43570e);const _0x4b1258=VisuMZ[_0x38e079(0x5eb)](_0x43570e[_0x38e079(0x5ed)]);let _0x420f48=_0x43570e[_0x38e079(0x3ea)];const _0x32105d=_0x43570e[_0x38e079(0x400)];for(const _0x50f8a3 of _0x4b1258){if(!_0x50f8a3)continue;let _0xcec9a1=_0x50f8a3['battler']()['_baseX'],_0x1ee8bb=_0x50f8a3[_0x38e079(0x9f8)]()[_0x38e079(0x6c3)];if(_0x420f48[_0x38e079(0x1f2)](/home/i))_0xcec9a1=_0x50f8a3[_0x38e079(0x9f8)]()[_0x38e079(0x99f)],_0x1ee8bb=_0x50f8a3[_0x38e079(0x9f8)]()[_0x38e079(0x7b6)];else{if(_0x420f48['match'](/center/i))_0xcec9a1=Graphics[_0x38e079(0x8e0)]/0x2,_0x1ee8bb=Graphics[_0x38e079(0x38c)]/0x2;else _0x420f48['match'](/point (\d+), (\d+)/i)&&(_0xcec9a1=Number(RegExp['$1']),_0x1ee8bb=Number(RegExp['$2']));}_0x50f8a3['setBattlerFacePoint'](Math['round'](_0xcec9a1),Math[_0x38e079(0x95e)](_0x1ee8bb),!!_0x32105d);}}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x1e8),_0x10c773=>{const _0x26f77c=_0x5507dd;if(!SceneManager[_0x26f77c(0x4dc)]())return;if(!$gameSystem[_0x26f77c(0x577)]())return;VisuMZ[_0x26f77c(0x8fb)](_0x10c773,_0x10c773);const _0xb030fe=VisuMZ[_0x26f77c(0x5eb)](_0x10c773[_0x26f77c(0x233)]),_0x1223ac=VisuMZ[_0x26f77c(0x5eb)](_0x10c773[_0x26f77c(0x737)]),_0x45afc4=_0x1223ac[_0x26f77c(0x4d2)](_0x3922c9=>_0x3922c9&&_0x3922c9[_0x26f77c(0x9f8)]()?_0x3922c9[_0x26f77c(0x9f8)]()[_0x26f77c(0x67b)]:0x0)/(_0x1223ac[_0x26f77c(0x77e)]||0x1),_0x112264=_0x1223ac[_0x26f77c(0x4d2)](_0x266b24=>_0x266b24&&_0x266b24['battler']()?_0x266b24[_0x26f77c(0x9f8)]()[_0x26f77c(0x6c3)]:0x0)/(_0x1223ac[_0x26f77c(0x77e)]||0x1),_0x6a28b7=_0x10c773[_0x26f77c(0x400)];for(const _0x1600ea of _0xb030fe){if(!_0x1600ea)continue;_0x1600ea['setBattlerFacePoint'](Math['round'](_0x45afc4),Math['round'](_0x112264),!!_0x6a28b7);}}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0xa35),_0x5acdcf=>{const _0xcfe31d=_0x5507dd;if(!SceneManager[_0xcfe31d(0x4dc)]())return;VisuMZ[_0xcfe31d(0x8fb)](_0x5acdcf,_0x5acdcf);const _0xeab2d=$gameTemp[_0xcfe31d(0x38e)](),_0x2bff61=VisuMZ[_0xcfe31d(0x5eb)](_0x5acdcf[_0xcfe31d(0x5ed)]),_0x4c80f0=_0x5acdcf[_0xcfe31d(0x894)],_0x9c16f2=_0x5acdcf[_0xcfe31d(0x203)],_0x7b0b69=_0x5acdcf[_0xcfe31d(0x813)],_0x1548b6=_0x5acdcf[_0xcfe31d(0x98c)];if(!_0xeab2d)return;for(const _0x35391f of _0x2bff61){if(!_0x35391f)continue;_0x35391f['floatBattler'](_0x4c80f0,_0x9c16f2,_0x7b0b69);}if(_0x1548b6)_0xeab2d[_0xcfe31d(0x7ff)](_0xcfe31d(0x803));}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x86f),_0x489fa7=>{const _0x49719d=_0x5507dd;if(!SceneManager[_0x49719d(0x4dc)]())return;VisuMZ[_0x49719d(0x8fb)](_0x489fa7,_0x489fa7);const _0x176e6e=$gameTemp[_0x49719d(0x38e)]();if(!_0x176e6e)return;const _0x5c3dc4=VisuMZ[_0x49719d(0x5eb)](_0x489fa7[_0x49719d(0x5ed)]);for(const _0x39e9c3 of _0x5c3dc4){if(!_0x39e9c3)continue;_0x39e9c3['performActionEndMembers']();}BattleManager[_0x49719d(0x1bb)]&&BattleManager[_0x49719d(0x1bb)]['performActionEnd']();if(_0x489fa7[_0x49719d(0x2be)])_0x176e6e[_0x49719d(0x7ff)](_0x49719d(0x51c));}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x6b0),_0x325b64=>{const _0x103005=_0x5507dd;if(!SceneManager[_0x103005(0x4dc)]())return;VisuMZ[_0x103005(0x8fb)](_0x325b64,_0x325b64);const _0x5ec0df=$gameTemp[_0x103005(0x38e)](),_0x4acfda=VisuMZ[_0x103005(0x5eb)](_0x325b64[_0x103005(0x5ed)]),_0x1aa5aa=_0x325b64[_0x103005(0x894)],_0x531a62=_0x325b64[_0x103005(0x203)],_0x1d7b94=_0x325b64['WaitForJump'];if(!_0x5ec0df)return;for(const _0xd8d0f0 of _0x4acfda){if(!_0xd8d0f0)continue;_0xd8d0f0[_0x103005(0x6aa)](_0x1aa5aa,_0x531a62);}if(_0x1d7b94)_0x5ec0df[_0x103005(0x7ff)](_0x103005(0x631));}),PluginManager['registerCommand'](pluginData[_0x5507dd(0x55f)],'ActSeq_Movement_MoveBy',_0x661309=>{const _0x4946ac=_0x5507dd;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x4946ac(0x577)]())return;VisuMZ[_0x4946ac(0x8fb)](_0x661309,_0x661309);const _0x4175ff=$gameTemp[_0x4946ac(0x38e)](),_0x46cbc2=VisuMZ[_0x4946ac(0x5eb)](_0x661309[_0x4946ac(0x5ed)]),_0x33371a=_0x661309[_0x4946ac(0x4ac)],_0x2643b8=_0x661309[_0x4946ac(0x308)],_0x40556b=_0x661309[_0x4946ac(0x749)],_0x3e4928=_0x661309['Duration'],_0x4118a6=_0x661309[_0x4946ac(0x68d)],_0x478d5a=_0x661309['EasingType'],_0xb441c=_0x661309[_0x4946ac(0x1fd)],_0x5b5b2c=_0x661309[_0x4946ac(0x2be)];if(!_0x4175ff)return;for(const _0x106e99 of _0x46cbc2){if(!_0x106e99)continue;let _0x39ba11=_0x2643b8,_0x1af698=_0x40556b;if(_0x33371a['match'](/horz/i))_0x39ba11*=_0x106e99[_0x4946ac(0x8ed)]()?-0x1:0x1;if(_0x33371a['match'](/vert/i))_0x1af698*=_0x106e99[_0x4946ac(0x8ed)]()?-0x1:0x1;_0x106e99[_0x4946ac(0x54f)](_0x39ba11,_0x1af698,_0x3e4928,_0x4118a6,_0x478d5a),_0x106e99[_0x4946ac(0xa18)](_0xb441c);}if(_0x5b5b2c)_0x4175ff[_0x4946ac(0x7ff)]('battleMove');}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x602),_0x135c46=>{const _0x341e07=_0x5507dd;if(!SceneManager[_0x341e07(0x4dc)]())return;if(!$gameSystem[_0x341e07(0x577)]())return;VisuMZ[_0x341e07(0x8fb)](_0x135c46,_0x135c46);const _0x3a717a=$gameTemp[_0x341e07(0x38e)](),_0x401f0a=VisuMZ[_0x341e07(0x5eb)](_0x135c46['Targets']),_0x4b45a2=_0x135c46['Destination'],_0x19b040=_0x135c46[_0x341e07(0x216)],_0x3c8be7=_0x135c46[_0x341e07(0x812)],_0x13998e=_0x135c46[_0x341e07(0x88e)],_0x403ff4=_0x135c46[_0x341e07(0x203)],_0x2f5c04=_0x135c46[_0x341e07(0x68d)],_0x4a5fea=_0x135c46[_0x341e07(0x813)],_0x58917e=_0x135c46['MotionType'],_0x25de04=_0x135c46['WaitForMovement'];if(!_0x3a717a)return;for(const _0x169f3b of _0x401f0a){if(!_0x169f3b)continue;let _0x5978a9=_0x169f3b[_0x341e07(0x9f8)]()[_0x341e07(0x67b)],_0xbf2346=_0x169f3b[_0x341e07(0x9f8)]()[_0x341e07(0x6c3)];if(_0x4b45a2['match'](/home/i))_0x5978a9=_0x169f3b['battler']()[_0x341e07(0x99f)],_0xbf2346=_0x169f3b[_0x341e07(0x9f8)]()[_0x341e07(0x7b6)];else{if(_0x4b45a2[_0x341e07(0x1f2)](/center/i))_0x5978a9=Graphics['boxWidth']/0x2,_0xbf2346=Graphics['boxHeight']/0x2;else _0x4b45a2[_0x341e07(0x1f2)](/point (\d+), (\d+)/i)&&(_0x5978a9=Number(RegExp['$1']),_0xbf2346=Number(RegExp['$2']));}if(_0x19b040[_0x341e07(0x1f2)](/none/i))_0x5978a9+=_0x3c8be7,_0xbf2346+=_0x13998e;else{if(_0x19b040[_0x341e07(0x1f2)](/horz/i)&&_0x19b040[_0x341e07(0x1f2)](/vert/i))_0x5978a9+=_0x169f3b[_0x341e07(0x8ed)]()?-_0x3c8be7:_0x3c8be7,_0xbf2346+=_0x169f3b['isActor']()?-_0x13998e:_0x13998e;else{if(_0x19b040[_0x341e07(0x1f2)](/horz/i))_0x5978a9+=_0x169f3b[_0x341e07(0x8ed)]()?-_0x3c8be7:_0x3c8be7,_0xbf2346+=_0x13998e;else _0x19b040[_0x341e07(0x1f2)](/vert/i)&&(_0x5978a9+=_0x3c8be7,_0xbf2346+=_0x169f3b['isActor']()?-_0x13998e:_0x13998e);}}_0x169f3b[_0x341e07(0xa22)](_0x5978a9,_0xbf2346,_0x403ff4,_0x2f5c04,_0x4a5fea,-0x1),_0x169f3b['requestMotion'](_0x58917e);}if(_0x25de04)_0x3a717a['setWaitMode']('battleMove');}),PluginManager['registerCommand'](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x472),_0x289f4d=>{const _0x1e05af=_0x5507dd;if(!SceneManager[_0x1e05af(0x4dc)]())return;if(!$gameSystem[_0x1e05af(0x577)]())return;VisuMZ[_0x1e05af(0x8fb)](_0x289f4d,_0x289f4d);const _0x578a6b=$gameTemp[_0x1e05af(0x38e)](),_0x75306d=VisuMZ[_0x1e05af(0x5eb)](_0x289f4d[_0x1e05af(0x233)]),_0x36499d=VisuMZ['CreateActionSequenceTargets'](_0x289f4d[_0x1e05af(0x737)]),_0x177917=_0x289f4d[_0x1e05af(0x3ad)];let _0x3f3dc1=_0x289f4d[_0x1e05af(0x59c)];const _0xf23c43=_0x289f4d[_0x1e05af(0x216)],_0x2a6043=_0x289f4d[_0x1e05af(0x812)],_0x5c03c6=_0x289f4d['OffsetY'],_0x1b52c2=_0x289f4d[_0x1e05af(0x203)],_0x158f53=_0x289f4d[_0x1e05af(0x68d)],_0x4550fe=_0x289f4d[_0x1e05af(0x813)],_0x2e764e=_0x289f4d[_0x1e05af(0x1fd)],_0x2b3872=_0x289f4d[_0x1e05af(0x2be)],_0x259349=Math[_0x1e05af(0x71c)](..._0x36499d[_0x1e05af(0x4d2)](_0x167316=>_0x167316[_0x1e05af(0x9f8)]()[_0x1e05af(0x67b)]-_0x167316['battler']()['mainSpriteWidth']()/0x2)),_0x20f5d7=Math[_0x1e05af(0x741)](..._0x36499d[_0x1e05af(0x4d2)](_0x26164b=>_0x26164b[_0x1e05af(0x9f8)]()['_baseX']+_0x26164b['battler']()[_0x1e05af(0x5c4)]()/0x2)),_0x528abb=Math[_0x1e05af(0x71c)](..._0x36499d[_0x1e05af(0x4d2)](_0x285b7b=>_0x285b7b[_0x1e05af(0x9f8)]()[_0x1e05af(0x6c3)]-_0x285b7b[_0x1e05af(0x9f8)]()[_0x1e05af(0x6ba)]())),_0x20d17b=Math[_0x1e05af(0x741)](..._0x36499d[_0x1e05af(0x4d2)](_0x2718ac=>_0x2718ac[_0x1e05af(0x9f8)]()[_0x1e05af(0x6c3)])),_0x1f1a65=_0x36499d[_0x1e05af(0x1b4)](_0x590e90=>_0x590e90[_0x1e05af(0x8ed)]())['length'],_0x4aef5f=_0x36499d['filter'](_0x2c6c63=>_0x2c6c63[_0x1e05af(0x890)]())['length'];let _0x904c7f=0x0,_0x53237a=0x0;if(_0x177917[_0x1e05af(0x1f2)](/front/i))_0x904c7f=_0x1f1a65>=_0x4aef5f?_0x259349:_0x20f5d7;else{if(_0x177917[_0x1e05af(0x1f2)](/middle/i))_0x904c7f=(_0x259349+_0x20f5d7)/0x2,_0x3f3dc1=-0x1;else _0x177917[_0x1e05af(0x1f2)](/back/i)&&(_0x904c7f=_0x1f1a65>=_0x4aef5f?_0x20f5d7:_0x259349);}if(_0x177917[_0x1e05af(0x1f2)](/head/i))_0x53237a=_0x528abb;else{if(_0x177917[_0x1e05af(0x1f2)](/center/i))_0x53237a=(_0x528abb+_0x20d17b)/0x2;else _0x177917[_0x1e05af(0x1f2)](/base/i)&&(_0x53237a=_0x20d17b);}if(!_0x578a6b)return;for(const _0x2cfd6a of _0x75306d){if(!_0x2cfd6a)continue;let _0xedfe9d=_0x904c7f,_0x2ff94b=_0x53237a;if(_0xf23c43[_0x1e05af(0x1f2)](/none/i))_0xedfe9d+=_0x2a6043,_0x2ff94b+=_0x5c03c6;else{if(_0xf23c43[_0x1e05af(0x1f2)](/horz/i)&&_0xf23c43['match'](/vert/i))_0xedfe9d+=_0x2cfd6a[_0x1e05af(0x8ed)]()?-_0x2a6043:_0x2a6043,_0x2ff94b+=_0x2cfd6a[_0x1e05af(0x8ed)]()?-_0x5c03c6:_0x5c03c6;else{if(_0xf23c43['match'](/horz/i))_0xedfe9d+=_0x2cfd6a[_0x1e05af(0x8ed)]()?-_0x2a6043:_0x2a6043,_0x2ff94b+=_0x5c03c6;else _0xf23c43[_0x1e05af(0x1f2)](/vert/i)&&(_0xedfe9d+=_0x2a6043,_0x2ff94b+=_0x2cfd6a[_0x1e05af(0x8ed)]()?-_0x5c03c6:_0x5c03c6);}}_0x2cfd6a[_0x1e05af(0xa22)](_0xedfe9d,_0x2ff94b,_0x1b52c2,_0x158f53,_0x4550fe,_0x3f3dc1),_0x2cfd6a['requestMotion'](_0x2e764e);}if(_0x2b3872)_0x578a6b[_0x1e05af(0x7ff)](_0x1e05af(0x51c));}),PluginManager['registerCommand'](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x5f1),_0x520c57=>{const _0x18cbd4=_0x5507dd;if(!SceneManager[_0x18cbd4(0x4dc)]())return;VisuMZ[_0x18cbd4(0x8fb)](_0x520c57,_0x520c57);const _0x51f46b=$gameTemp[_0x18cbd4(0x38e)](),_0x39eda1=VisuMZ[_0x18cbd4(0x5eb)](_0x520c57[_0x18cbd4(0x5ed)]),_0x17c8a8=_0x520c57['Opacity'],_0xc40816=_0x520c57[_0x18cbd4(0x203)],_0x5d9bf1=_0x520c57[_0x18cbd4(0x813)],_0x4ad4a1=_0x520c57[_0x18cbd4(0x8f4)];if(!_0x51f46b)return;for(const _0x5b031 of _0x39eda1){if(!_0x5b031)continue;_0x5b031[_0x18cbd4(0x927)](_0x17c8a8,_0xc40816,_0x5d9bf1);}if(_0x4ad4a1)_0x51f46b[_0x18cbd4(0x7ff)](_0x18cbd4(0x38d));}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x24f),_0xb2c5bf=>{const _0xc1173b=_0x5507dd;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xc1173b(0x8fb)](_0xb2c5bf,_0xb2c5bf);const _0x2e9ea7=$gameTemp[_0xc1173b(0x38e)](),_0x3f3c0c=VisuMZ[_0xc1173b(0x5eb)](_0xb2c5bf['Targets']),_0xfcd601=_0xb2c5bf[_0xc1173b(0x694)],_0x5e8493=_0xb2c5bf[_0xc1173b(0x714)],_0x58d2ee=_0xb2c5bf[_0xc1173b(0x203)],_0xcdc312=_0xb2c5bf[_0xc1173b(0x813)],_0x11b549=_0xb2c5bf[_0xc1173b(0x7bc)];if(!_0x2e9ea7)return;for(const _0x1fc54c of _0x3f3c0c){if(!_0x1fc54c)continue;_0x1fc54c[_0xc1173b(0x614)](_0xfcd601,_0x5e8493,_0x58d2ee,_0xcdc312);}if(_0x11b549)_0x2e9ea7[_0xc1173b(0x7ff)](_0xc1173b(0x506));}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x395),_0x2b9726=>{const _0x109140=_0x5507dd;if(!SceneManager[_0x109140(0x4dc)]())return;VisuMZ[_0x109140(0x8fb)](_0x2b9726,_0x2b9726);const _0x1ab670=$gameTemp[_0x109140(0x38e)](),_0x1f84c4=VisuMZ['CreateActionSequenceTargets'](_0x2b9726[_0x109140(0x5ed)]),_0x256ebf=_0x2b9726[_0x109140(0x9e6)],_0x4cc57a=_0x2b9726[_0x109140(0x5d2)],_0x873a0f=_0x2b9726['Duration'],_0x12cd08=_0x2b9726[_0x109140(0x813)],_0x5cb1d3=_0x2b9726[_0x109140(0x887)];if(!_0x1ab670)return;for(const _0x56acfc of _0x1f84c4){if(!_0x56acfc)continue;_0x56acfc[_0x109140(0x5ff)](_0x256ebf,_0x4cc57a,_0x873a0f,_0x12cd08);}if(_0x5cb1d3)_0x1ab670[_0x109140(0x7ff)](_0x109140(0x85f));}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x568),_0x24d8d0=>{const _0x2a5231=_0x5507dd;if(!SceneManager[_0x2a5231(0x4dc)]())return;VisuMZ['ConvertParams'](_0x24d8d0,_0x24d8d0);const _0x5dbb64=$gameTemp[_0x2a5231(0x38e)](),_0x57286e=VisuMZ[_0x2a5231(0x5eb)](_0x24d8d0[_0x2a5231(0x5ed)]),_0x3b6228=_0x24d8d0['Angle'],_0x2fc6d0=_0x24d8d0[_0x2a5231(0x203)],_0x3df5ab=_0x24d8d0[_0x2a5231(0x813)],_0x262d7a=_0x24d8d0['RevertAngle'],_0x58a4ee=_0x24d8d0['WaitForSpin'];if(!_0x5dbb64)return;for(const _0x3949fd of _0x57286e){if(!_0x3949fd)continue;_0x3949fd[_0x2a5231(0x555)](_0x3b6228,_0x2fc6d0,_0x3df5ab,_0x262d7a);}if(_0x58a4ee)_0x5dbb64[_0x2a5231(0x7ff)](_0x2a5231(0x809));}),PluginManager['registerCommand'](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x7c1),_0x510c97=>{const _0x6ba9d4=_0x5507dd;if(!SceneManager['isSceneBattle']())return;const _0x4ef882=$gameTemp[_0x6ba9d4(0x38e)]();if(!_0x4ef882)return;_0x4ef882[_0x6ba9d4(0x7ff)](_0x6ba9d4(0x803));}),PluginManager[_0x5507dd(0x44e)](pluginData['name'],_0x5507dd(0x447),_0x1cdbf3=>{const _0x5a96a9=_0x5507dd;if(!SceneManager[_0x5a96a9(0x4dc)]())return;const _0x270b9c=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x270b9c)return;_0x270b9c['setWaitMode']('battleJump');}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x923),_0x2c297c=>{const _0x4bde51=_0x5507dd;if(!SceneManager[_0x4bde51(0x4dc)]())return;const _0x1ac1e8=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x1ac1e8)return;_0x1ac1e8[_0x4bde51(0x7ff)](_0x4bde51(0x51c));}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x68f),_0x2c36da=>{const _0x2716a7=_0x5507dd;if(!SceneManager[_0x2716a7(0x4dc)]())return;const _0x5d70e6=$gameTemp[_0x2716a7(0x38e)]();if(!_0x5d70e6)return;_0x5d70e6[_0x2716a7(0x7ff)](_0x2716a7(0x38d));}),PluginManager[_0x5507dd(0x44e)](pluginData['name'],_0x5507dd(0x87f),_0x3a5ec7=>{const _0x2cde7a=_0x5507dd;if(!SceneManager[_0x2cde7a(0x4dc)]())return;const _0xac5c92=$gameTemp[_0x2cde7a(0x38e)]();if(!_0xac5c92)return;_0xac5c92[_0x2cde7a(0x7ff)]('battleGrow');}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],'ActSeq_Movement_WaitForSkew',_0xad2476=>{const _0x7dc171=_0x5507dd;if(!SceneManager[_0x7dc171(0x4dc)]())return;const _0x206cc8=$gameTemp[_0x7dc171(0x38e)]();if(!_0x206cc8)return;_0x206cc8[_0x7dc171(0x7ff)]('battleSpriteSkew');}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x9a8),_0x5b950b=>{const _0x39f489=_0x5507dd;if(!SceneManager[_0x39f489(0x4dc)]())return;const _0xce0449=$gameTemp['getLastPluginCommandInterpreter']();if(!_0xce0449)return;_0xce0449[_0x39f489(0x7ff)]('battleSpin');}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0xa06),_0x3dc565=>{const _0x48134d=_0x5507dd;if(!SceneManager[_0x48134d(0x4dc)]())return;if(!Imported[_0x48134d(0x2b3)])return;VisuMZ['ConvertParams'](_0x3dc565,_0x3dc565);const _0x17b3c2=$gameTemp[_0x48134d(0x38e)](),_0x52e13b=_0x3dc565['WaitForProjectile'];if(!_0x17b3c2)return;const _0x2409e2=BattleManager[_0x48134d(0x3c4)];if(!_0x2409e2)return;_0x2409e2[_0x48134d(0x671)](_0x3dc565);if(_0x52e13b)_0x17b3c2[_0x48134d(0x7ff)]('battleProjectiles');}),PluginManager[_0x5507dd(0x44e)](pluginData['name'],'ActSeq_Projectile_Icon',_0x6ce320=>{const _0x1e3745=_0x5507dd;if(!SceneManager[_0x1e3745(0x4dc)]())return;if(!Imported[_0x1e3745(0x2b3)])return;VisuMZ[_0x1e3745(0x8fb)](_0x6ce320,_0x6ce320);const _0x1f9ae7=$gameTemp[_0x1e3745(0x38e)](),_0x20cb39=_0x6ce320[_0x1e3745(0x49c)];if(!_0x1f9ae7)return;const _0x4db784=BattleManager['_spriteset'];if(!_0x4db784)return;_0x4db784[_0x1e3745(0x671)](_0x6ce320);if(_0x20cb39)_0x1f9ae7[_0x1e3745(0x7ff)]('battleProjectiles');}),PluginManager[_0x5507dd(0x44e)](pluginData['name'],'ActSeq_Projectile_Picture',_0x4cb585=>{const _0x26b6c1=_0x5507dd;if(!SceneManager[_0x26b6c1(0x4dc)]())return;if(!Imported[_0x26b6c1(0x2b3)])return;VisuMZ[_0x26b6c1(0x8fb)](_0x4cb585,_0x4cb585);const _0x5bff9d=$gameTemp[_0x26b6c1(0x38e)](),_0x21fedd=_0x4cb585[_0x26b6c1(0x49c)];if(!_0x5bff9d)return;const _0x5b6828=BattleManager['_spriteset'];if(!_0x5b6828)return;_0x5b6828[_0x26b6c1(0x671)](_0x4cb585);if(_0x21fedd)_0x5bff9d['setWaitMode'](_0x26b6c1(0x83b));}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x29c),_0x4b1d03=>{const _0x2a9623=_0x5507dd;if(!SceneManager[_0x2a9623(0x4dc)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x2a9623(0x8fb)](_0x4b1d03,_0x4b1d03);const _0x552da2=$gameTemp[_0x2a9623(0x38e)](),_0x582f3e=_0x4b1d03[_0x2a9623(0x887)];if(!_0x552da2)return;$gameScreen[_0x2a9623(0x83e)](_0x4b1d03[_0x2a9623(0x9e6)],_0x4b1d03['SkewY'],_0x4b1d03[_0x2a9623(0x203)],_0x4b1d03[_0x2a9623(0x813)]);if(_0x582f3e)_0x552da2[_0x2a9623(0x7ff)]('battleSkew');}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x1a9),_0x2610a7=>{const _0xeafb19=_0x5507dd;if(!SceneManager[_0xeafb19(0x4dc)]())return;if(!Imported[_0xeafb19(0x703)])return;VisuMZ['ConvertParams'](_0x2610a7,_0x2610a7);const _0x3cb649=$gameTemp[_0xeafb19(0x38e)](),_0x3e188=_0x2610a7[_0xeafb19(0x887)];if(!_0x3cb649)return;$gameScreen['setBattleSkew'](0x0,0x0,_0x2610a7[_0xeafb19(0x203)],_0x2610a7['EasingType']);if(_0x3e188)_0x3cb649[_0xeafb19(0x7ff)](_0xeafb19(0x687));}),PluginManager[_0x5507dd(0x44e)](pluginData['name'],'ActSeq_Skew_WaitForSkew',_0x12b1c7=>{const _0x556a3a=_0x5507dd;if(!SceneManager[_0x556a3a(0x4dc)]())return;if(!Imported[_0x556a3a(0x703)])return;const _0x28c3a6=$gameTemp[_0x556a3a(0x38e)]();if(!_0x28c3a6)return;_0x28c3a6[_0x556a3a(0x7ff)](_0x556a3a(0x687));}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x270),_0x3b7cc1=>{const _0x43d1ce=_0x5507dd;if(!SceneManager[_0x43d1ce(0x4dc)]())return;VisuMZ['ConvertParams'](_0x3b7cc1,_0x3b7cc1);const _0x4b8cf4=$gameTemp['getLastPluginCommandInterpreter'](),_0x47886b=_0x3b7cc1[_0x43d1ce(0x627)],_0x549720=_0x3b7cc1[_0x43d1ce(0x7e1)];if(!_0x4b8cf4)return;BattleManager[_0x43d1ce(0x969)]=_0x47886b,BattleManager[_0x43d1ce(0xa20)]=BattleManager[_0x43d1ce(0x91b)]?BattleManager['_allTargets'][BattleManager[_0x43d1ce(0x969)]]||null:null,BattleManager['_target']&&_0x549720[_0x43d1ce(0x5d6)]()['trim']()!==_0x43d1ce(0x8ba)&&_0x4b8cf4[_0x43d1ce(0x5b4)]([_0x549720]);}),PluginManager['registerCommand'](pluginData['name'],_0x5507dd(0x316),_0x3ac112=>{const _0x154c22=_0x5507dd;if(!SceneManager[_0x154c22(0x4dc)]())return;VisuMZ['ConvertParams'](_0x3ac112,_0x3ac112);const _0x354d37=$gameTemp[_0x154c22(0x38e)](),_0x135a62=_0x3ac112[_0x154c22(0x7e1)];if(!_0x354d37)return;BattleManager[_0x154c22(0x969)]++,BattleManager[_0x154c22(0xa20)]=BattleManager['_allTargets'][BattleManager[_0x154c22(0x969)]]||null,BattleManager[_0x154c22(0xa20)]&&_0x135a62['toUpperCase']()[_0x154c22(0x48c)]()!=='UNTITLED'&&_0x354d37[_0x154c22(0x5b4)]([_0x135a62]);}),PluginManager['registerCommand'](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x4ea),_0x311940=>{const _0x2257e9=_0x5507dd;if(!SceneManager[_0x2257e9(0x4dc)]())return;VisuMZ[_0x2257e9(0x8fb)](_0x311940,_0x311940);const _0x48dfa3=$gameTemp[_0x2257e9(0x38e)](),_0xf53c39=_0x311940[_0x2257e9(0x7e1)];if(!_0x48dfa3)return;BattleManager[_0x2257e9(0x969)]--,BattleManager[_0x2257e9(0xa20)]=BattleManager[_0x2257e9(0x91b)][BattleManager[_0x2257e9(0x969)]]||null,BattleManager[_0x2257e9(0xa20)]&&_0xf53c39['toUpperCase']()['trim']()!==_0x2257e9(0x8ba)&&_0x48dfa3['command119']([_0xf53c39]);}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],'ActSeq_Target_RandTarget',_0x3c57bd=>{const _0x2c6175=_0x5507dd;if(!SceneManager[_0x2c6175(0x4dc)]())return;VisuMZ['ConvertParams'](_0x3c57bd,_0x3c57bd);const _0x25f945=$gameTemp[_0x2c6175(0x38e)](),_0x2e2fe0=_0x3c57bd[_0x2c6175(0x932)],_0x517d60=_0x3c57bd[_0x2c6175(0x7e1)];if(!_0x25f945)return;const _0x4d9443=BattleManager[_0x2c6175(0x969)];for(;;){BattleManager[_0x2c6175(0x969)]=Math[_0x2c6175(0x52b)](BattleManager[_0x2c6175(0x91b)][_0x2c6175(0x77e)]);if(!_0x2e2fe0)break;if(BattleManager[_0x2c6175(0x969)]!==_0x4d9443)break;if(BattleManager[_0x2c6175(0x91b)][_0x2c6175(0x77e)]<=0x1){BattleManager[_0x2c6175(0x969)]=0x0;break;}}BattleManager[_0x2c6175(0xa20)]=BattleManager[_0x2c6175(0x91b)][BattleManager['_targetIndex']]||null,BattleManager['_target']&&_0x517d60[_0x2c6175(0x5d6)]()['trim']()!==_0x2c6175(0x8ba)&&_0x25f945[_0x2c6175(0x5b4)]([_0x517d60]);}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x63d),_0x3e2b10=>{const _0x3a31af=_0x5507dd;if(!SceneManager[_0x3a31af(0x4dc)]())return;VisuMZ[_0x3a31af(0x8fb)](_0x3e2b10,_0x3e2b10);const _0x87726e=VisuMZ[_0x3a31af(0x5eb)](_0x3e2b10[_0x3a31af(0x5ed)]);for(const _0x4badec of _0x87726e){if(!_0x4badec)continue;if(!_0x4badec['isActor']())continue;_0x4badec[_0x3a31af(0x19f)]();}}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x6ec),_0x10664a=>{const _0x446d18=_0x5507dd;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x10664a,_0x10664a);const _0x3a2761=$gameTemp['getLastPluginCommandInterpreter']();let _0x3d2165=![];const _0x2e85e9=_0x10664a[_0x446d18(0x7e1)],_0x181d32=VisuMZ['CreateActionSequenceTargets'](_0x10664a['Targets']);for(const _0x22a8c0 of _0x181d32){if(!_0x22a8c0)continue;if(!_0x22a8c0[_0x446d18(0x8ed)]())continue;_0x22a8c0[_0x446d18(0x44a)](),_0x22a8c0['weapons']()[_0x446d18(0x77e)]>0x0?_0x3d2165=!![]:_0x22a8c0[_0x446d18(0x19f)]();}_0x3d2165&&_0x2e85e9[_0x446d18(0x5d6)]()[_0x446d18(0x48c)]()!=='UNTITLED'&&_0x3a2761[_0x446d18(0x5b4)]([_0x2e85e9]);}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x66b),_0x50cfe2=>{const _0x280d8b=_0x5507dd;if(!SceneManager[_0x280d8b(0x4dc)]())return;VisuMZ['ConvertParams'](_0x50cfe2,_0x50cfe2);let _0x5b79d7=_0x50cfe2[_0x280d8b(0x719)];_0x5b79d7--,_0x5b79d7=Math[_0x280d8b(0x741)](_0x5b79d7,0x0);const _0x24991b=VisuMZ[_0x280d8b(0x5eb)](_0x50cfe2['Targets']);for(const _0x3a22c9 of _0x24991b){if(!_0x3a22c9)continue;if(!_0x3a22c9[_0x280d8b(0x8ed)]())continue;_0x3a22c9[_0x280d8b(0x958)](_0x5b79d7);}}),PluginManager[_0x5507dd(0x44e)](pluginData['name'],_0x5507dd(0x8b2),_0xceecf1=>{const _0x19e8de=_0x5507dd;if(!SceneManager[_0x19e8de(0x4dc)]())return;if(!Imported[_0x19e8de(0x703)])return;VisuMZ[_0x19e8de(0x8fb)](_0xceecf1,_0xceecf1);const _0x2b8cfe=$gameTemp[_0x19e8de(0x38e)](),_0x50ff2e=_0xceecf1[_0x19e8de(0x260)];if(!_0x2b8cfe)return;$gameScreen[_0x19e8de(0x4e4)](_0xceecf1[_0x19e8de(0x6b4)],_0xceecf1['Duration'],_0xceecf1[_0x19e8de(0x813)]);if(_0x50ff2e)_0x2b8cfe[_0x19e8de(0x7ff)](_0x19e8de(0x527));}),PluginManager['registerCommand'](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x242),_0x455f09=>{const _0x1a3dfa=_0x5507dd;if(!SceneManager[_0x1a3dfa(0x4dc)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x1a3dfa(0x8fb)](_0x455f09,_0x455f09);const _0xa12f89=$gameTemp[_0x1a3dfa(0x38e)](),_0x34db8a=_0x455f09[_0x1a3dfa(0x260)];if(!_0xa12f89)return;$gameScreen[_0x1a3dfa(0x4e4)](0x1,_0x455f09[_0x1a3dfa(0x203)],_0x455f09[_0x1a3dfa(0x813)]);if(_0x34db8a)_0xa12f89[_0x1a3dfa(0x7ff)](_0x1a3dfa(0x527));}),PluginManager[_0x5507dd(0x44e)](pluginData[_0x5507dd(0x55f)],_0x5507dd(0x296),_0x3b8c5b=>{const _0x18d80b=_0x5507dd;if(!SceneManager[_0x18d80b(0x4dc)]())return;if(!Imported[_0x18d80b(0x703)])return;const _0x2fa35c=$gameTemp[_0x18d80b(0x38e)]();if(!_0x2fa35c)return;_0x2fa35c['setWaitMode'](_0x18d80b(0x527));}),VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x404)]=Scene_Boot[_0x5507dd(0x832)][_0x5507dd(0x1ed)],Scene_Boot[_0x5507dd(0x832)][_0x5507dd(0x1ed)]=function(){const _0x111493=_0x5507dd;this[_0x111493(0x4b9)](),this[_0x111493(0x435)](),this[_0x111493(0x742)](),this[_0x111493(0x9e7)](),VisuMZ['BattleCore']['Scene_Boot_onDatabaseLoaded'][_0x111493(0x542)](this),this['process_VisuMZ_BattleCore_Notetags'](),this[_0x111493(0x9c7)](),this[_0x111493(0x6ff)](),this[_0x111493(0x2a9)]();},Scene_Boot['prototype'][_0x5507dd(0x5b6)]=function(){const _0x2d9798=_0x5507dd;if(VisuMZ[_0x2d9798(0x50b)])return;this[_0x2d9798(0x9c8)](),this[_0x2d9798(0x653)](),this[_0x2d9798(0x99a)]();},Scene_Boot['prototype'][_0x5507dd(0x4b9)]=function(){const _0x3e45eb=_0x5507dd,_0x172cee=$dataSystem[_0x3e45eb(0xa00)]['length'];for(let _0x2f8662=0x0;_0x2f8662<_0x172cee;_0x2f8662++){const _0xe646e=$dataSystem[_0x3e45eb(0x463)][_0x2f8662];if(_0xe646e)continue;$dataSystem[_0x3e45eb(0x463)][_0x2f8662]=JsonEx[_0x3e45eb(0x4b7)]($dataSystem[_0x3e45eb(0x463)][0x0]);}},Scene_Boot[_0x5507dd(0x832)][_0x5507dd(0x435)]=function(){const _0x468a86=_0x5507dd,_0x4d720c=VisuMZ['BattleCore'][_0x468a86(0x32e)];_0x4d720c[_0x468a86(0x5bc)][_0x468a86(0x1d0)]===undefined&&(_0x4d720c[_0x468a86(0x5bc)][_0x468a86(0x1d0)]='base'),_0x4d720c['Actor'][_0x468a86(0x256)]===undefined&&(_0x4d720c[_0x468a86(0x9cb)][_0x468a86(0x256)]=![]),_0x4d720c[_0x468a86(0x77b)][_0x468a86(0x256)]===undefined&&(_0x4d720c[_0x468a86(0x77b)]['SmoothImage']=!![]),_0x4d720c[_0x468a86(0x9cb)][_0x468a86(0x19b)]===undefined&&(_0x4d720c[_0x468a86(0x9cb)]['PrioritySortActive']=![]),_0x4d720c[_0x468a86(0x9cb)][_0x468a86(0x4c1)]===undefined&&(_0x4d720c[_0x468a86(0x9cb)][_0x468a86(0x4c1)]=!![]);},VisuMZ[_0x5507dd(0x4fe)]={},Scene_Boot[_0x5507dd(0x832)][_0x5507dd(0x742)]=function(){const _0x4a4688=_0x5507dd;for(const _0x52c104 of VisuMZ[_0x4a4688(0x8af)][_0x4a4688(0x32e)][_0x4a4688(0x5bc)][_0x4a4688(0x394)]){if(!_0x52c104)continue;const _0x572d3c=_0x52c104[_0x4a4688(0x5fa)][_0x4a4688(0x5d6)]()[_0x4a4688(0x48c)]();VisuMZ[_0x4a4688(0x4fe)][_0x572d3c]=_0x52c104;}},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x9e3)]={},Scene_Boot[_0x5507dd(0x832)]['process_VisuMZ_BattleCore_CreateRegExp']=function(){const _0x55d4ef=_0x5507dd,_0x3f4141=VisuMZ[_0x55d4ef(0x8af)][_0x55d4ef(0x9e3)],_0x2449c9=_0x55d4ef(0x70d),_0x5482d7=[[_0x55d4ef(0x214),_0x55d4ef(0x1b2)],[_0x55d4ef(0x574),_0x55d4ef(0x1f7)]],_0x32142b=[[_0x55d4ef(0x46e),_0x55d4ef(0x2d6)],[_0x55d4ef(0x303),_0x55d4ef(0x544)]],_0x38573e=[['',''],[_0x55d4ef(0x7e0),_0x55d4ef(0x51b)],[_0x55d4ef(0x51d),_0x55d4ef(0x20a)]];for(const _0x1d8dc5 of _0x32142b){for(const _0x33f2d5 of _0x38573e){for(const _0x5a1287 of _0x5482d7){const _0x379b70=_0x1d8dc5[0x0][_0x55d4ef(0x5d0)](_0x5a1287[0x0],_0x33f2d5[0x0]),_0x1aefa9=_0x1d8dc5[0x1]['format'](_0x5a1287[0x1],_0x33f2d5[0x1])[_0x55d4ef(0x48c)](),_0x5005a9=new RegExp(_0x2449c9[_0x55d4ef(0x5d0)](_0x1aefa9),'i');_0x3f4141[_0x379b70]=_0x5005a9;}}}const _0x3f9fd5=[[_0x55d4ef(0x4d0),_0x55d4ef(0x4fb)],['%1EndActionJS',_0x55d4ef(0x426)]];for(const _0x481426 of _0x3f9fd5){for(const _0xccd19b of _0x5482d7){const _0x1a9ae5=_0x481426[0x0][_0x55d4ef(0x5d0)](_0xccd19b[0x0]),_0x5c2139=_0x481426[0x1][_0x55d4ef(0x5d0)](_0xccd19b[0x1]),_0x673ed5=new RegExp(_0x2449c9[_0x55d4ef(0x5d0)](_0x5c2139),'i');_0x3f4141[_0x1a9ae5]=_0x673ed5;}}const _0x266798=[[_0x55d4ef(0x8c1),_0x55d4ef(0x811)],['%1EndBattleJS','JS\x20%1END\x20BATTLE'],[_0x55d4ef(0x79f),_0x55d4ef(0x88d)],[_0x55d4ef(0x2f9),'JS\x20BATTLE\x20DEFEAT'],['EscapeSuccessJS',_0x55d4ef(0x30f)],[_0x55d4ef(0xa04),'JS\x20ESCAPE\x20FAILURE'],[_0x55d4ef(0xa15),_0x55d4ef(0x65d)],['%1EndTurnJS',_0x55d4ef(0x281)],[_0x55d4ef(0xa02),_0x55d4ef(0x4cb)]];for(const _0x70d257 of _0x266798){for(const _0x76cdac of _0x5482d7){const _0xaee6b4=_0x70d257[0x0]['format'](_0x76cdac[0x0]),_0x5a136d=_0x70d257[0x1][_0x55d4ef(0x5d0)](_0x76cdac[0x1]),_0x1657d2=new RegExp(_0x2449c9[_0x55d4ef(0x5d0)](_0x5a136d),'i');_0x3f4141[_0xaee6b4]=_0x1657d2;}}},Scene_Boot[_0x5507dd(0x832)][_0x5507dd(0x9c8)]=function(){const _0x59b56f=_0x5507dd,_0x1ee244=$dataSkills[_0x59b56f(0x2ee)]($dataItems);for(const _0x3936f0 of _0x1ee244){if(!_0x3936f0)continue;VisuMZ['BattleCore'][_0x59b56f(0x385)](_0x3936f0);}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_TraitObject_Notetags']=function(){const _0x44d08d=_0x5507dd,_0x2e5889=$dataActors[_0x44d08d(0x2ee)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x2cd164 of _0x2e5889){if(!_0x2cd164)continue;VisuMZ[_0x44d08d(0x8af)]['Parse_Notetags_TraitObjects'](_0x2cd164);}},Scene_Boot[_0x5507dd(0x832)][_0x5507dd(0x9c7)]=function(){const _0x3ad018=_0x5507dd,_0x24ad23=VisuMZ['BattleCore'][_0x3ad018(0x32e)][_0x3ad018(0x2dd)][_0x3ad018(0x403)],_0x1d7893=[];for(const _0x3f15a3 of _0x24ad23){const _0x560509=$dataTroops[_0x3f15a3];if(_0x560509)_0x1d7893[_0x3ad018(0x47f)](JsonEx[_0x3ad018(0x4b7)](_0x560509));}for(const _0x528650 of $dataTroops){if(!_0x528650)continue;for(const _0x684eba of _0x1d7893){if(_0x684eba['id']===_0x528650['id'])continue;_0x528650['pages']=_0x528650[_0x3ad018(0x34f)][_0x3ad018(0x2ee)](_0x684eba['pages']);}}},Scene_Boot[_0x5507dd(0x832)][_0x5507dd(0x6ff)]=function(){const _0x24585f=_0x5507dd,_0x4a3105=VisuMZ[_0x24585f(0x8af)][_0x24585f(0x32e)][_0x24585f(0x2dd)];if(_0x4a3105[_0x24585f(0x59f)]>0x0&&$dataCommonEvents[_0x4a3105['BattleStartEvent']]){const _0x393f66=$dataCommonEvents[_0x4a3105[_0x24585f(0x59f)]],_0x2adfce=_0x393f66[_0x24585f(0x784)]['length']-0x2,_0x58fd09=_0x393f66['list'][_0x2adfce];if(_0x58fd09&&_0x58fd09['code']!==0xe6){const _0x21475e={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x306a85=_0x393f66[_0x24585f(0x784)]['pop']();_0x393f66[_0x24585f(0x784)][_0x24585f(0x696)](_0x21475e),_0x393f66[_0x24585f(0x784)][_0x24585f(0x696)](_0x306a85);}}},Scene_Boot[_0x5507dd(0x832)][_0x5507dd(0x2a9)]=function(){const _0x479cc9=_0x5507dd;VisuMZ[_0x479cc9(0x8af)][_0x479cc9(0x311)](),VisuMZ['BattleCore'][_0x479cc9(0x1da)]($dataSkills),VisuMZ[_0x479cc9(0x8af)][_0x479cc9(0x1da)]($dataItems);},VisuMZ[_0x5507dd(0x8af)]['CreateCommonEventKeys']=function(){const _0x13fc08=_0x5507dd;VisuMZ['BattleCore'][_0x13fc08(0x8ce)]={};for(const _0x97f3d2 of $dataCommonEvents){if(!_0x97f3d2)continue;if(_0x97f3d2[_0x13fc08(0x55f)][_0x13fc08(0x1f2)](/\[(.*)\]/i)){let _0x44a0f7=String(RegExp['$1'])[_0x13fc08(0x684)](/,/g,'')[_0x13fc08(0x5d6)]()['trim']();VisuMZ['BattleCore'][_0x13fc08(0x8ce)][_0x44a0f7]=_0x97f3d2['id'];}}},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x1da)]=function(_0x48e32a){const _0x1553f5=_0x5507dd;for(const _0x16c810 of _0x48e32a){if(!_0x16c810)continue;VisuMZ['BattleCore'][_0x1553f5(0xa03)](_0x16c810);}},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0xa03)]=function(_0x1cd1e0){const _0x1c9d03=_0x5507dd;if(!_0x1cd1e0)return;if(!_0x1cd1e0[_0x1c9d03(0x368)])return;VisuMZ['BattleCore'][_0x1c9d03(0x8ce)]=VisuMZ[_0x1c9d03(0x8af)][_0x1c9d03(0x8ce)]||{};const _0x557c23=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x954c0a=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0xae19d1=[];const _0x2072f0=_0x1cd1e0[_0x1c9d03(0x6a3)][_0x1c9d03(0x1f2)](_0x557c23);if(_0x2072f0){for(const _0x3c68b6 of _0x2072f0){_0x3c68b6[_0x1c9d03(0x1f2)](_0x557c23);const _0x5efbab=String(RegExp['$1'])[_0x1c9d03(0x2ed)](',')[_0x1c9d03(0x4d2)](_0x5805a0=>String(_0x5805a0)[_0x1c9d03(0x5d6)]()['trim']());_0xae19d1=_0xae19d1[_0x1c9d03(0x2ee)](_0x5efbab);}!_0x1cd1e0[_0x1c9d03(0x6a3)][_0x1c9d03(0x1f2)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x1cd1e0['note']+=_0x1c9d03(0x4df));;}if(_0x1cd1e0[_0x1c9d03(0x6a3)][_0x1c9d03(0x1f2)](_0x954c0a)){const _0x1c4265=String(RegExp['$1'])[_0x1c9d03(0x2ed)](/[\r\n]+/)['map'](_0x348b2a=>String(_0x348b2a)[_0x1c9d03(0x5d6)]()[_0x1c9d03(0x48c)]());_0xae19d1=_0xae19d1[_0x1c9d03(0x2ee)](_0x1c4265);!_0x1cd1e0[_0x1c9d03(0x6a3)][_0x1c9d03(0x1f2)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x1cd1e0[_0x1c9d03(0x6a3)]+=_0x1c9d03(0x4df));;}for(const _0x164bc6 of _0xae19d1){if(VisuMZ[_0x1c9d03(0x8af)][_0x1c9d03(0x8ce)][_0x164bc6]){const _0x5ee16e=VisuMZ[_0x1c9d03(0x8af)][_0x1c9d03(0x8ce)][_0x164bc6],_0x6226d4={'code':0x2c,'dataId':_0x5ee16e,'value1':0x1,'value2':0x0};_0x1cd1e0[_0x1c9d03(0x368)]['push'](_0x6226d4);}}},Scene_Boot[_0x5507dd(0x832)][_0x5507dd(0x99a)]=function(){const _0x22410d=_0x5507dd,_0x1083c2=$dataSkills[_0x22410d(0x2ee)]($dataItems);for(const _0x1dc578 of _0x1083c2){if(!_0x1dc578)continue;VisuMZ[_0x22410d(0x8af)]['Parse_Notetags_Targets'](_0x1dc578);}},VisuMZ['BattleCore'][_0x5507dd(0x6c8)]=VisuMZ['ParseActorNotetags'],VisuMZ[_0x5507dd(0x6c8)]=function(_0x298fe5){const _0x9b9ac1=_0x5507dd;VisuMZ[_0x9b9ac1(0x8af)]['ParseActorNotetags']&&VisuMZ[_0x9b9ac1(0x8af)][_0x9b9ac1(0x6c8)][_0x9b9ac1(0x542)](this,_0x298fe5),VisuMZ[_0x9b9ac1(0x8af)]['Parse_Notetags_TraitObjects'](_0x298fe5);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x822)]=VisuMZ[_0x5507dd(0x822)],VisuMZ[_0x5507dd(0x822)]=function(_0x4fbafd){const _0x557111=_0x5507dd;VisuMZ['BattleCore'][_0x557111(0x822)]&&VisuMZ[_0x557111(0x8af)][_0x557111(0x822)][_0x557111(0x542)](this,_0x4fbafd),VisuMZ[_0x557111(0x8af)][_0x557111(0x374)](_0x4fbafd);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x6b8)]=VisuMZ[_0x5507dd(0x6b8)],VisuMZ['ParseSkillNotetags']=function(_0x2c2591){const _0xd40cd5=_0x5507dd;VisuMZ['BattleCore'][_0xd40cd5(0x6b8)]&&VisuMZ[_0xd40cd5(0x8af)][_0xd40cd5(0x6b8)][_0xd40cd5(0x542)](this,_0x2c2591),VisuMZ[_0xd40cd5(0x8af)]['Parse_Notetags_Action'](_0x2c2591),VisuMZ['BattleCore'][_0xd40cd5(0x3e2)](_0x2c2591);},VisuMZ['BattleCore'][_0x5507dd(0x950)]=VisuMZ['ParseItemNotetags'],VisuMZ['ParseItemNotetags']=function(_0x50bd57){const _0x3c4af1=_0x5507dd;VisuMZ[_0x3c4af1(0x8af)]['ParseItemNotetags']&&VisuMZ[_0x3c4af1(0x8af)][_0x3c4af1(0x950)][_0x3c4af1(0x542)](this,_0x50bd57),VisuMZ[_0x3c4af1(0x8af)]['Parse_Notetags_Action'](_0x50bd57),VisuMZ[_0x3c4af1(0x8af)]['Parse_Notetags_Targets'](_0x50bd57);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x92f)]=VisuMZ[_0x5507dd(0x92f)],VisuMZ[_0x5507dd(0x92f)]=function(_0x48ec55){const _0xe2cb37=_0x5507dd;VisuMZ[_0xe2cb37(0x8af)][_0xe2cb37(0x92f)]&&VisuMZ[_0xe2cb37(0x8af)]['ParseWeaponNotetags'][_0xe2cb37(0x542)](this,_0x48ec55),VisuMZ[_0xe2cb37(0x8af)][_0xe2cb37(0x374)](_0x48ec55);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x62b)]=VisuMZ[_0x5507dd(0x62b)],VisuMZ[_0x5507dd(0x62b)]=function(_0x219340){const _0x336d80=_0x5507dd;VisuMZ[_0x336d80(0x8af)]['ParseArmorNotetags']&&VisuMZ[_0x336d80(0x8af)][_0x336d80(0x62b)][_0x336d80(0x542)](this,_0x219340),VisuMZ[_0x336d80(0x8af)][_0x336d80(0x374)](_0x219340);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x30e)]=VisuMZ[_0x5507dd(0x30e)],VisuMZ[_0x5507dd(0x30e)]=function(_0x562b68){const _0x4678dc=_0x5507dd;VisuMZ[_0x4678dc(0x8af)][_0x4678dc(0x30e)]&&VisuMZ['BattleCore'][_0x4678dc(0x30e)][_0x4678dc(0x542)](this,_0x562b68),VisuMZ[_0x4678dc(0x8af)][_0x4678dc(0x374)](_0x562b68);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x4a5)]=VisuMZ[_0x5507dd(0x4a5)],VisuMZ['ParseStateNotetags']=function(_0x394edf){const _0x278fa4=_0x5507dd;VisuMZ[_0x278fa4(0x8af)][_0x278fa4(0x4a5)]&&VisuMZ[_0x278fa4(0x8af)]['ParseStateNotetags']['call'](this,_0x394edf),VisuMZ[_0x278fa4(0x8af)][_0x278fa4(0x374)](_0x394edf);},VisuMZ['BattleCore'][_0x5507dd(0x385)]=function(_0x281d9e){const _0x3fa6bc=_0x5507dd,_0xd741d0=[_0x3fa6bc(0x3eb),_0x3fa6bc(0x5e0),_0x3fa6bc(0xa0f),'PostDamageJS',_0x3fa6bc(0x3ec),_0x3fa6bc(0x791),_0x3fa6bc(0x6ef),_0x3fa6bc(0x482)];for(const _0x11adca of _0xd741d0){VisuMZ[_0x3fa6bc(0x8af)][_0x3fa6bc(0x874)](_0x281d9e,_0x11adca);}const _0x573e42=_0x281d9e[_0x3fa6bc(0x6a3)];_0x573e42[_0x3fa6bc(0x1f2)](/<ALWAYS CRITICAL/i)&&(_0x281d9e[_0x3fa6bc(0x5ca)]['critical']=!![]),_0x573e42[_0x3fa6bc(0x1f2)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x281d9e[_0x3fa6bc(0x378)]=Math['max'](0x1,Number(RegExp['$1']))),_0x573e42[_0x3fa6bc(0x1f2)](/<TARGET:[ ](.*)>/i)&&(_0x281d9e[_0x3fa6bc(0x7c4)]=String(RegExp['$1'])[_0x3fa6bc(0x5d6)]()[_0x3fa6bc(0x48c)]());},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x374)]=function(_0x3439e6){const _0x27405a=_0x5507dd,_0x2c2740=[_0x27405a(0x767),_0x27405a(0x6c2),_0x27405a(0x6c7),_0x27405a(0x65f),_0x27405a(0x63f),_0x27405a(0x5dd),'PreDamageAsTargetJS',_0x27405a(0x9d8),_0x27405a(0x3ec),_0x27405a(0x791),_0x27405a(0x6ef),_0x27405a(0x482),'PreStartBattleJS',_0x27405a(0x2d2),'PreEndBattleJS',_0x27405a(0x3dc),_0x27405a(0x79f),_0x27405a(0x2f9),_0x27405a(0x907),_0x27405a(0xa04),_0x27405a(0x64c),_0x27405a(0x750),_0x27405a(0x8b3),_0x27405a(0x6c6),_0x27405a(0x6bb),_0x27405a(0x56e)];for(const _0x10e0fd of _0x2c2740){VisuMZ['BattleCore'][_0x27405a(0x874)](_0x3439e6,_0x10e0fd);}},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x3e2)]=function(_0x7ad2fa){const _0x2f446f=_0x5507dd,_0x34a626=_0x7ad2fa['note'];if(_0x34a626['match'](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x27c05b=String(RegExp['$1']),_0x264fef=VisuMZ[_0x2f446f(0x8af)][_0x2f446f(0x54b)](_0x7ad2fa,_0x2f446f(0x5ed));VisuMZ[_0x2f446f(0x8af)][_0x2f446f(0x455)](_0x27c05b,_0x264fef);}if(_0x34a626[_0x2f446f(0x1f2)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x4302ac=String(RegExp['$1']),_0x56f246=VisuMZ[_0x2f446f(0x8af)][_0x2f446f(0x54b)](_0x7ad2fa,'CommandVisible');VisuMZ[_0x2f446f(0x8af)]['createCommandVisibleJS'](_0x4302ac,_0x56f246);}},VisuMZ[_0x5507dd(0x8af)]['JS']={},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x874)]=function(_0x1581b8,_0x37c65e){const _0x4e5665=_0x5507dd,_0x347f07=_0x1581b8['note'];if(_0x347f07[_0x4e5665(0x1f2)](VisuMZ[_0x4e5665(0x8af)]['RegExp'][_0x37c65e])){const _0x4c1ed4=RegExp['$1'],_0x5ad62b='\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20'[_0x4e5665(0x5d0)](_0x4c1ed4),_0x571175=VisuMZ[_0x4e5665(0x8af)][_0x4e5665(0x54b)](_0x1581b8,_0x37c65e);VisuMZ[_0x4e5665(0x8af)]['JS'][_0x571175]=new Function(_0x5ad62b);}},VisuMZ[_0x5507dd(0x8af)]['createKeyJS']=function(_0xb53b14,_0x24b2ab){const _0x11c43e=_0x5507dd;if(VisuMZ[_0x11c43e(0x54b)])return VisuMZ[_0x11c43e(0x54b)](_0xb53b14,_0x24b2ab);let _0x16d981='';if($dataActors[_0x11c43e(0x351)](_0xb53b14))_0x16d981=_0x11c43e(0x9ea)[_0x11c43e(0x5d0)](_0xb53b14['id'],_0x24b2ab);if($dataClasses[_0x11c43e(0x351)](_0xb53b14))_0x16d981=_0x11c43e(0x66a)[_0x11c43e(0x5d0)](_0xb53b14['id'],_0x24b2ab);if($dataSkills['includes'](_0xb53b14))_0x16d981=_0x11c43e(0x384)[_0x11c43e(0x5d0)](_0xb53b14['id'],_0x24b2ab);if($dataItems['includes'](_0xb53b14))_0x16d981=_0x11c43e(0x298)[_0x11c43e(0x5d0)](_0xb53b14['id'],_0x24b2ab);if($dataWeapons[_0x11c43e(0x351)](_0xb53b14))_0x16d981=_0x11c43e(0x8b7)[_0x11c43e(0x5d0)](_0xb53b14['id'],_0x24b2ab);if($dataArmors[_0x11c43e(0x351)](_0xb53b14))_0x16d981=_0x11c43e(0x910)[_0x11c43e(0x5d0)](_0xb53b14['id'],_0x24b2ab);if($dataEnemies[_0x11c43e(0x351)](_0xb53b14))_0x16d981=_0x11c43e(0x2de)['format'](_0xb53b14['id'],_0x24b2ab);if($dataStates[_0x11c43e(0x351)](_0xb53b14))_0x16d981=_0x11c43e(0x61f)[_0x11c43e(0x5d0)](_0xb53b14['id'],_0x24b2ab);return _0x16d981;},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x455)]=function(_0x5f0cde,_0x5656b2){const _0x4ccc72=_0x5507dd,_0x5aa5cb=_0x4ccc72(0x39f)[_0x4ccc72(0x5d0)](_0x5f0cde);VisuMZ[_0x4ccc72(0x8af)]['JS'][_0x5656b2]=new Function(_0x5aa5cb);},VisuMZ['BattleCore'][_0x5507dd(0x41b)]=function(_0x322505,_0x55aae7){const _0x56552b=_0x5507dd,_0x232672='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20'[_0x56552b(0x5d0)](_0x322505);VisuMZ[_0x56552b(0x8af)]['JS'][_0x55aae7]=new Function(_0x232672);},TextManager['autoBattle']=VisuMZ[_0x5507dd(0x8af)]['Settings'][_0x5507dd(0x80f)][_0x5507dd(0x73d)],TextManager[_0x5507dd(0x673)]=VisuMZ['BattleCore'][_0x5507dd(0x32e)][_0x5507dd(0xa24)][_0x5507dd(0x5e6)],TextManager[_0x5507dd(0x8a4)]=VisuMZ['BattleCore'][_0x5507dd(0x32e)][_0x5507dd(0xa24)][_0x5507dd(0x587)],TextManager[_0x5507dd(0x47a)]=VisuMZ['BattleCore']['Settings'][_0x5507dd(0x1b3)][_0x5507dd(0x5fa)],ColorManager[_0x5507dd(0x437)]=function(_0x50c2e2){const _0x1c7d6a=_0x5507dd;return _0x50c2e2=String(_0x50c2e2),_0x50c2e2[_0x1c7d6a(0x1f2)](/#(.*)/i)?_0x1c7d6a(0x743)[_0x1c7d6a(0x5d0)](String(RegExp['$1'])):this[_0x1c7d6a(0x4cd)](Number(_0x50c2e2));},DataManager[_0x5507dd(0x8da)]=function(_0x448dd3){const _0x177dfe=_0x5507dd;if(_0x448dd3['note']['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x24ef45=String(RegExp['$1'])[_0x177dfe(0x5d6)]()[_0x177dfe(0x48c)]();if(_0x24ef45==='MANUAL')return _0x177dfe(0x513);if(VisuMZ[_0x177dfe(0x4fe)][_0x24ef45])return _0x24ef45;}const _0x55aa11=VisuMZ['BattleCore'][_0x177dfe(0x32e)][_0x177dfe(0x5bc)][_0x177dfe(0x356)]['toUpperCase']()['trim']();if(VisuMZ[_0x177dfe(0x4fe)][_0x55aa11])return _0x55aa11;return _0x177dfe(0x513);},DataManager['getStypeIdWithName']=function(_0x55674b){const _0x2c110b=_0x5507dd;_0x55674b=_0x55674b[_0x2c110b(0x5d6)]()[_0x2c110b(0x48c)](),this[_0x2c110b(0x448)]=this[_0x2c110b(0x448)]||{};if(this[_0x2c110b(0x448)][_0x55674b])return this[_0x2c110b(0x448)][_0x55674b];for(let _0x3a5902=0x1;_0x3a5902<0x64;_0x3a5902++){if(!$dataSystem[_0x2c110b(0x3e9)][_0x3a5902])continue;let _0xe9fae7=$dataSystem[_0x2c110b(0x3e9)][_0x3a5902][_0x2c110b(0x5d6)]()['trim']();_0xe9fae7=_0xe9fae7[_0x2c110b(0x684)](/\x1I\[(\d+)\]/gi,''),_0xe9fae7=_0xe9fae7[_0x2c110b(0x684)](/\\I\[(\d+)\]/gi,''),this[_0x2c110b(0x448)][_0xe9fae7]=_0x3a5902;}return this[_0x2c110b(0x448)][_0x55674b]||0x0;},DataManager[_0x5507dd(0x35a)]=function(_0x16ca24){const _0x5d6183=_0x5507dd;_0x16ca24=_0x16ca24['toUpperCase']()[_0x5d6183(0x48c)](),this[_0x5d6183(0x6e7)]=this[_0x5d6183(0x6e7)]||{};if(this[_0x5d6183(0x6e7)][_0x16ca24])return this['_skillIDs'][_0x16ca24];for(const _0xc0236 of $dataSkills){if(!_0xc0236)continue;this[_0x5d6183(0x6e7)][_0xc0236[_0x5d6183(0x55f)][_0x5d6183(0x5d6)]()[_0x5d6183(0x48c)]()]=_0xc0236['id'];}return this[_0x5d6183(0x6e7)][_0x16ca24]||0x0;},DataManager[_0x5507dd(0x58d)]=function(_0x2bea87){const _0x186d64=_0x5507dd;_0x2bea87=_0x2bea87[_0x186d64(0x5d6)]()[_0x186d64(0x48c)](),this[_0x186d64(0x3dd)]=this[_0x186d64(0x3dd)]||{};if(this[_0x186d64(0x3dd)][_0x2bea87])return this[_0x186d64(0x3dd)][_0x2bea87];for(const _0x4d926a of $dataEnemies){if(!_0x4d926a)continue;this['_enemyIDs'][_0x4d926a[_0x186d64(0x55f)][_0x186d64(0x5d6)]()[_0x186d64(0x48c)]()]=_0x4d926a['id'];}return this[_0x186d64(0x3dd)][_0x2bea87]||0x0;},DataManager[_0x5507dd(0x37a)]=function(_0x524ac2){const _0x1fea80=_0x5507dd;_0x524ac2=_0x524ac2[_0x1fea80(0x5d6)]()['trim'](),this[_0x1fea80(0x4e3)]=this[_0x1fea80(0x4e3)]||{};if(this[_0x1fea80(0x4e3)][_0x524ac2])return this[_0x1fea80(0x4e3)][_0x524ac2];for(let _0x3beefe=0x1;_0x3beefe<0x64;_0x3beefe++){if(!$dataSystem['weaponTypes'][_0x3beefe])continue;let _0x68c47=$dataSystem['weaponTypes'][_0x3beefe][_0x1fea80(0x5d6)]()[_0x1fea80(0x48c)]();_0x68c47=_0x68c47[_0x1fea80(0x684)](/\x1I\[(\d+)\]/gi,''),_0x68c47=_0x68c47[_0x1fea80(0x684)](/\\I\[(\d+)\]/gi,''),this[_0x1fea80(0x4e3)][_0x68c47]=_0x3beefe;}return this['_wtypeIDs'][_0x1fea80(0x8bf)]=0x0,this[_0x1fea80(0x4e3)][_0x524ac2]||0x0;},DataManager[_0x5507dd(0x51a)]=function(_0x4615){const _0x2612c5=_0x5507dd,_0x346fd1=_0x2612c5(0x2d1);let _0x7a793d=_0x4615[_0x2612c5(0x5e3)],_0x49f33d=_0x4615['name'];const _0x52b956=_0x4615['note'];return _0x52b956[_0x2612c5(0x1f2)](/<DISPLAY ICON: (\d+)>/i)&&(_0x7a793d=Number(RegExp['$1'])),_0x52b956[_0x2612c5(0x1f2)](/<DISPLAY TEXT: (.*)>/i)&&(_0x49f33d=String(RegExp['$1'])),_0x346fd1[_0x2612c5(0x5d0)](_0x7a793d,_0x49f33d);},DataManager[_0x5507dd(0x943)]=function(_0x4c9bf4){const _0x430fd7=_0x5507dd;return _0x4c9bf4[_0x430fd7(0x6a3)][_0x430fd7(0x1f2)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x4c9bf4['name'];},DataManager[_0x5507dd(0x9be)]=function(_0x2bbaf2){const _0x1677f3=_0x5507dd;return _0x2bbaf2[_0x1677f3(0x6a3)][_0x1677f3(0x1f2)](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x2bbaf2[_0x1677f3(0x5e3)];},DataManager[_0x5507dd(0x45a)]=function(_0x32e603){const _0x4f0ba9=_0x5507dd,_0x25ccf1=$dataEnemies[_0x32e603];if(_0x25ccf1){if(_0x25ccf1['note']['match'](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x16db43=String(RegExp['$1'])[_0x4f0ba9(0x2ed)](/[\r\n]+/)[_0x4f0ba9(0x9ff)](''),_0x14e57c=this[_0x4f0ba9(0x3bd)](_0x16db43);_0x32e603=this[_0x4f0ba9(0x58d)](_0x14e57c)||_0x32e603,_0x32e603=DataManager[_0x4f0ba9(0x45a)](_0x32e603);}}return _0x32e603;},DataManager['processRandomizedData']=function(_0x5eb036){const _0x58a2c0=_0x5507dd;let _0xca98c9=0x0;const _0x44b311={};for(const _0x26ce5b of _0x5eb036){if(_0x26ce5b[_0x58a2c0(0x1f2)](/(.*):[ ](\d+)/i)){const _0x5ae56a=String(RegExp['$1'])[_0x58a2c0(0x48c)](),_0x58d054=Number(RegExp['$2']);_0x44b311[_0x5ae56a]=_0x58d054,_0xca98c9+=_0x58d054;}else{if(_0x26ce5b[_0x58a2c0(0x1f2)](/(.*):[ ](\d+\.?\d+)/i)){const _0x2764d0=String(RegExp['$1'])[_0x58a2c0(0x48c)](),_0x5e0f2c=Number(RegExp['$2']);_0x44b311[_0x2764d0]=_0x5e0f2c,_0xca98c9+=_0x5e0f2c;}else _0x26ce5b!==''&&(_0x44b311[_0x26ce5b]=0x1,_0xca98c9++);}}if(_0xca98c9<=0x0)return'';let _0x298d72=Math[_0x58a2c0(0x858)]()*_0xca98c9;for(const _0x216aaa in _0x44b311){_0x298d72-=_0x44b311[_0x216aaa];if(_0x298d72<=0x0)return _0x216aaa;}return'';},DataManager[_0x5507dd(0x3f2)]=function(_0x3080a4){const _0xd4390a=_0x5507dd;if(!_0x3080a4)return![];if(!VisuMZ['BattleCore'][_0xd4390a(0x32e)][_0xd4390a(0x431)][_0xd4390a(0x9b1)])return![];if(_0x3080a4[_0xd4390a(0x6a3)][_0xd4390a(0x1f2)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x3080a4[_0xd4390a(0x6a3)][_0xd4390a(0x1f2)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x489524 of _0x3080a4[_0xd4390a(0x368)]){if(!_0x489524)continue;if(_0x489524[_0xd4390a(0x674)]===Game_Action['EFFECT_COMMON_EVENT'])return!![];}return![];},DataManager[_0x5507dd(0x848)]=function(_0x2e685d){const _0x284f15=_0x5507dd,_0x225e3d=$dataTroops[_0x2e685d];if(!_0x225e3d)return'';let _0x4c5be4='';_0x4c5be4+=_0x225e3d[_0x284f15(0x55f)];for(const _0x36c4b9 of _0x225e3d[_0x284f15(0x34f)]){for(const _0x8c2b3c of _0x36c4b9[_0x284f15(0x784)]){[0x6c,0x198][_0x284f15(0x351)](_0x8c2b3c[_0x284f15(0x674)])&&(_0x4c5be4+='\x0a',_0x4c5be4+=_0x8c2b3c['parameters'][0x0]);}}return _0x4c5be4;},ConfigManager[_0x5507dd(0x8e3)]=ConfigManager[_0x5507dd(0x8e3)]??![],ConfigManager[_0x5507dd(0x4e1)]=ConfigManager[_0x5507dd(0x4e1)]??![],ConfigManager[_0x5507dd(0x47a)]=ConfigManager[_0x5507dd(0x47a)]??!![],VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x58a)]=ConfigManager['makeData'],ConfigManager['makeData']=function(){const _0x9f46f3=_0x5507dd,_0x3d3796=VisuMZ[_0x9f46f3(0x8af)][_0x9f46f3(0x58a)][_0x9f46f3(0x542)](this);return _0x3d3796[_0x9f46f3(0x8e3)]=this[_0x9f46f3(0x8e3)],_0x3d3796['autoBattleUseSkills']=this[_0x9f46f3(0x4e1)],_0x3d3796[_0x9f46f3(0x47a)]=this[_0x9f46f3(0x47a)],_0x3d3796;},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x3d4)]=ConfigManager[_0x5507dd(0x4b6)],ConfigManager['applyData']=function(_0x857df9){const _0x1cb17e=_0x5507dd;VisuMZ[_0x1cb17e(0x8af)][_0x1cb17e(0x3d4)][_0x1cb17e(0x542)](this,_0x857df9),_0x1cb17e(0x8e3)in _0x857df9?this[_0x1cb17e(0x8e3)]=_0x857df9[_0x1cb17e(0x8e3)]:this[_0x1cb17e(0x8e3)]=![],_0x1cb17e(0x4e1)in _0x857df9?this[_0x1cb17e(0x4e1)]=_0x857df9[_0x1cb17e(0x4e1)]:this[_0x1cb17e(0x4e1)]=![],_0x1cb17e(0x47a)in _0x857df9?this[_0x1cb17e(0x47a)]=_0x857df9[_0x1cb17e(0x47a)]:this[_0x1cb17e(0x47a)]=!![];},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x9c1)]=BattleManager[_0x5507dd(0x844)],BattleManager[_0x5507dd(0x844)]=function(){const _0x1a0b74=_0x5507dd;VisuMZ[_0x1a0b74(0x8af)][_0x1a0b74(0x9c1)]['call'](this),this[_0x1a0b74(0x6dd)]=[];},BattleManager[_0x5507dd(0x415)]=function(){const _0x5052b9=_0x5507dd;if(!SceneManager['isSceneBattle']())return;const _0x506e29=SceneManager['_scene'][_0x5052b9(0x713)];if(_0x506e29)_0x506e29[_0x5052b9(0x46f)]();},BattleManager[_0x5507dd(0x652)]=function(){const _0x3cad18=_0x5507dd;if(BattleManager[_0x3cad18(0x240)]())return _0x3cad18(0x41a);return'DTB';},BattleManager[_0x5507dd(0x7d5)]=function(_0x573d3b){const _0x1d16a7=_0x5507dd;return _0x573d3b=_0x573d3b[_0x1d16a7(0x5d6)]()['trim'](),this[_0x1d16a7(0x652)]()===_0x573d3b;},BattleManager[_0x5507dd(0x92b)]=function(){const _0x34e686=_0x5507dd;return this[_0x34e686(0x7d5)](_0x34e686(0x2da));},BattleManager[_0x5507dd(0x222)]=function(){const _0xcf230c=_0x5507dd;return this[_0xcf230c(0x92b)]();},BattleManager[_0x5507dd(0x3d9)]=function(){const _0x4cc88a=_0x5507dd;return!this[_0x4cc88a(0x222)]();},BattleManager[_0x5507dd(0x705)]=function(){const _0xeb967a=_0x5507dd;return!this[_0xeb967a(0x222)]()&&!this[_0xeb967a(0x3d9)]();},BattleManager[_0x5507dd(0x357)]=function(_0x480e19){const _0x248ad1=_0x5507dd;$gameParty[_0x248ad1(0x357)](_0x480e19),$gameTroop[_0x248ad1(0x357)](_0x480e19);},VisuMZ['BattleCore'][_0x5507dd(0x6a9)]=BattleManager['startBattle'],BattleManager[_0x5507dd(0x4e8)]=function(){const _0x15a3c7=_0x5507dd;this[_0x15a3c7(0x6fa)]=![],this['_autoBattle']=ConfigManager[_0x15a3c7(0x8e3)],this['processBattleCoreJS'](_0x15a3c7(0x901)),VisuMZ['BattleCore'][_0x15a3c7(0x6a9)][_0x15a3c7(0x542)](this),this[_0x15a3c7(0x357)](_0x15a3c7(0x2d2));},BattleManager[_0x5507dd(0x6c4)]=function(_0x22e8cb){const _0x5e2e76=_0x5507dd,_0x64e3ed=VisuMZ[_0x5e2e76(0x8af)]['Settings'][_0x5e2e76(0x2dd)];_0x22e8cb!=='EscapeFail'&&_0x64e3ed[_0x5e2e76(0x98e)]&&VisuMZ[_0x5e2e76(0x8af)][_0x5e2e76(0x87d)](_0x64e3ed[_0x5e2e76(0x98e)])&&$gameTemp[_0x5e2e76(0x81f)](_0x64e3ed[_0x5e2e76(0x98e)]);const _0x46951c=_0x5e2e76(0x646)[_0x5e2e76(0x5d0)](_0x22e8cb);_0x64e3ed[_0x46951c]&&VisuMZ[_0x5e2e76(0x8af)]['CheckMapBattleEventValid'](_0x64e3ed[_0x46951c])&&$gameTemp[_0x5e2e76(0x81f)](_0x64e3ed[_0x46951c]);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x571)]=BattleManager[_0x5507dd(0x7ef)],BattleManager[_0x5507dd(0x7ef)]=function(){const _0x1d099e=_0x5507dd;if(this[_0x1d099e(0x960)]===_0x1d099e(0x252)){if($gameTemp['isCommonEventReserved']())return![];}return VisuMZ[_0x1d099e(0x8af)]['BattleManager_checkBattleEnd']['call'](this);},VisuMZ[_0x5507dd(0x8af)]['BattleManager_processVictory']=BattleManager[_0x5507dd(0x2d9)],BattleManager[_0x5507dd(0x2d9)]=function(){const _0x2d4493=_0x5507dd;this[_0x2d4493(0x357)](_0x2d4493(0x79f)),VisuMZ[_0x2d4493(0x8af)][_0x2d4493(0x9f5)][_0x2d4493(0x542)](this),this['processPostBattleCommonEvents'](_0x2d4493(0x2a2));},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x72f)]=BattleManager['processDefeat'],BattleManager['processDefeat']=function(){const _0x35c6c4=_0x5507dd;this['processBattleCoreJS']('BattleDefeatJS'),VisuMZ['BattleCore'][_0x35c6c4(0x72f)][_0x35c6c4(0x542)](this),this[_0x35c6c4(0x6c4)](_0x35c6c4(0x266));},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x38f)]=BattleManager['endBattle'],BattleManager[_0x5507dd(0x2f0)]=function(_0xb3c7cf){const _0x15ff42=_0x5507dd;this[_0x15ff42(0x6fa)]=!![],this[_0x15ff42(0x805)]=![],this[_0x15ff42(0x357)](_0x15ff42(0x816)),VisuMZ[_0x15ff42(0x8af)][_0x15ff42(0x38f)][_0x15ff42(0x542)](this,_0xb3c7cf),this['processBattleCoreJS']('PostEndBattleJS');},VisuMZ['BattleCore'][_0x5507dd(0x7ac)]=BattleManager[_0x5507dd(0x700)],BattleManager[_0x5507dd(0x700)]=function(){const _0x18dcfc=_0x5507dd;if(this[_0x18dcfc(0x222)]())this['processBattleCoreJS']('PreStartTurnJS');VisuMZ['BattleCore'][_0x18dcfc(0x7ac)][_0x18dcfc(0x542)](this);if(this['isTurnBased']())this[_0x18dcfc(0x357)](_0x18dcfc(0x750));},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x1e4)]=BattleManager['startAction'],BattleManager[_0x5507dd(0x243)]=function(){const _0x1d1c59=_0x5507dd,_0x335e0c=this[_0x1d1c59(0x1bb)][_0x1d1c59(0x946)](),_0x51138=this[_0x1d1c59(0x1bb)];_0x335e0c&&_0x335e0c[_0x1d1c59(0x860)]()===_0x51138&&_0x335e0c[_0x1d1c59(0x94b)](_0x1d1c59(0x3ec)),VisuMZ[_0x1d1c59(0x8af)]['BattleManager_startAction'][_0x1d1c59(0x542)](this),_0x335e0c&&_0x335e0c[_0x1d1c59(0x860)]()===_0x51138&&_0x335e0c['actionBattleCoreJS'](_0x1d1c59(0x791));},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x27c)]=BattleManager[_0x5507dd(0x5ea)],BattleManager[_0x5507dd(0x5ea)]=function(){const _0x1ccacd=_0x5507dd,_0x5d0073=this[_0x1ccacd(0x804)],_0x38f124=this[_0x1ccacd(0x1bb)];_0x5d0073&&_0x5d0073!==this[_0x1ccacd(0x466)]&&_0x5d0073[_0x1ccacd(0x860)]()===_0x38f124&&_0x5d0073[_0x1ccacd(0x94b)](_0x1ccacd(0x6ef)),this['_subject']?VisuMZ[_0x1ccacd(0x8af)]['BattleManager_endAction'][_0x1ccacd(0x542)](this):this['_phase']='turn',_0x5d0073&&_0x5d0073!==this['_lastAction']&&_0x5d0073[_0x1ccacd(0x860)]()===_0x38f124&&_0x5d0073[_0x1ccacd(0x94b)]('PostEndActionJS'),this[_0x1ccacd(0x42b)](this[_0x1ccacd(0x304)]()),this['_lastAction']=this[_0x1ccacd(0x804)];},BattleManager[_0x5507dd(0x42b)]=function(_0x12abb1){const _0xd6bb2d=_0x5507dd;for(const _0x39b5a9 of _0x12abb1){if(!_0x39b5a9)continue;if(!_0x39b5a9[_0xd6bb2d(0x9f8)]())continue;_0x39b5a9['battler']()[_0xd6bb2d(0x24a)]();}},BattleManager[_0x5507dd(0x4da)]=function(){const _0xac7169=_0x5507dd;!this[_0xac7169(0x5f6)]['isBusy']()&&this[_0xac7169(0x5ea)]();},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x8f5)]=function(){const _0x411b46=_0x5507dd;this[_0x411b46(0x97e)]();if(Imported[_0x411b46(0x41e)]){const _0x4bd235=VisuMZ[_0x411b46(0x715)][_0x411b46(0x32e)][_0x411b46(0x959)];_0x4bd235&&_0x4bd235[_0x411b46(0x6d3)]===![]&&this['removeStatesAuto'](0x1);}else this['removeStatesAuto'](0x1);this[_0x411b46(0x53d)]();},BattleManager['makeEscapeRatio']=function(){const _0x274c86=_0x5507dd;this[_0x274c86(0x5bd)]=VisuMZ['BattleCore']['Settings']['Mechanics'][_0x274c86(0x801)][_0x274c86(0x542)](this);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x453)]=BattleManager[_0x5507dd(0x81a)],BattleManager[_0x5507dd(0x81a)]=function(){const _0xb6a5be=_0x5507dd;this[_0xb6a5be(0x357)](_0xb6a5be(0x907)),BattleManager[_0xb6a5be(0x3c4)][_0xb6a5be(0x22c)](),VisuMZ['BattleCore']['BattleManager_onEscapeSuccess'][_0xb6a5be(0x542)](this),this[_0xb6a5be(0x6c4)](_0xb6a5be(0x6b3));},VisuMZ[_0x5507dd(0x8af)]['BattleManager_onEscapeFailure']=BattleManager['onEscapeFailure'],BattleManager[_0x5507dd(0x864)]=function(){const _0x45d8d6=_0x5507dd;this[_0x45d8d6(0x357)](_0x45d8d6(0xa04));const _0xe816fc=this[_0x45d8d6(0x5bd)];VisuMZ[_0x45d8d6(0x8af)][_0x45d8d6(0x1dc)][_0x45d8d6(0x542)](this),this[_0x45d8d6(0x5bd)]=_0xe816fc+VisuMZ[_0x45d8d6(0x8af)]['Settings']['Mechanics'][_0x45d8d6(0x340)]['call'](this),this[_0x45d8d6(0x6c4)]('EscapeFail');},BattleManager['displayStartMessages']=function(){const _0x5dc0a8=_0x5507dd;let _0x141fac=![];if(this['isDisplayEmergedEnemies']())for(const _0x1c0f13 of $gameTroop[_0x5dc0a8(0x2c0)]()){this[_0x5dc0a8(0x5f6)][_0x5dc0a8(0x47f)](_0x5dc0a8(0x8c3),TextManager[_0x5dc0a8(0x38a)][_0x5dc0a8(0x5d0)](_0x1c0f13)),this[_0x5dc0a8(0x5f6)][_0x5dc0a8(0x47f)](_0x5dc0a8(0x9ca)),_0x141fac=!![];}if(this['_preemptive'])this[_0x5dc0a8(0x5f6)][_0x5dc0a8(0x47f)](_0x5dc0a8(0x8c3),TextManager['preemptive'][_0x5dc0a8(0x5d0)]($gameParty[_0x5dc0a8(0x55f)]())),this[_0x5dc0a8(0x5f6)][_0x5dc0a8(0x47f)](_0x5dc0a8(0x9ca));else this[_0x5dc0a8(0x2d3)]&&(this[_0x5dc0a8(0x5f6)][_0x5dc0a8(0x47f)]('addText',TextManager['surprise'][_0x5dc0a8(0x5d0)]($gameParty[_0x5dc0a8(0x55f)]())),this['_logWindow'][_0x5dc0a8(0x47f)]('wait'));_0x141fac&&(this['_logWindow']['push']('wait'),this[_0x5dc0a8(0x5f6)][_0x5dc0a8(0x47f)](_0x5dc0a8(0x9dc))),this[_0x5dc0a8(0x240)]()&&this['isSkipPartyCommandWindow']()&&(this[_0x5dc0a8(0x605)]=![]);},BattleManager[_0x5507dd(0x745)]=function(){const _0x20895d=_0x5507dd;if(BattleManager[_0x20895d(0x805)])return![];return VisuMZ[_0x20895d(0x8af)]['Settings'][_0x20895d(0x77b)]['EmergeText'];},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x6e6)]=BattleManager[_0x5507dd(0x830)],BattleManager[_0x5507dd(0x830)]=function(){const _0x3b1a18=_0x5507dd;VisuMZ['BattleCore'][_0x3b1a18(0x6e6)]['call'](this),this[_0x3b1a18(0x92b)]()&&this[_0x3b1a18(0x7d3)]()&&!this[_0x3b1a18(0x2d3)]&&$gameParty[_0x3b1a18(0x613)]()&&this[_0x3b1a18(0x6a2)]();},BattleManager[_0x5507dd(0x7d3)]=function(){const _0x2bcd05=_0x5507dd;return VisuMZ['BattleCore'][_0x2bcd05(0x32e)][_0x2bcd05(0x80f)]['SkipPartyCmd'];},BattleManager[_0x5507dd(0x80c)]=function(){const _0x3533a2=_0x5507dd;this[_0x3533a2(0x328)]()&&this['selectNextCommand']();},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x73b)]=Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x49e)],Scene_Battle['prototype'][_0x5507dd(0x49e)]=function(){const _0x1e9644=_0x5507dd;VisuMZ['BattleCore']['Scene_Battle_startActorCommandSelection'][_0x1e9644(0x542)](this),BattleManager[_0x1e9644(0x240)]()&&BattleManager['_tpbNeedsPartyCommand']&&(BattleManager['_tpbNeedsPartyCommand']=![],this[_0x1e9644(0x931)]());},BattleManager[_0x5507dd(0x518)]=function(_0xde7d27,_0xbc4f0d){const _0x815112=_0x5507dd;this[_0x815112(0x804)][_0x815112(0x392)]=_0xbc4f0d,this[_0x815112(0x5f6)][_0x815112(0x8ec)](_0xbc4f0d),this['_logWindow']['displayReflectionPlayBack'](_0xde7d27,this['_action']),this['_action'][_0x815112(0x9b3)](_0xde7d27),this[_0x815112(0x5f6)][_0x815112(0x835)](_0xde7d27,_0xde7d27);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x758)]=BattleManager[_0x5507dd(0x928)],BattleManager['makeActionOrders']=function(){const _0x4a93f4=_0x5507dd;VisuMZ[_0x4a93f4(0x8af)][_0x4a93f4(0x758)]['call'](this),this['_actionBattlers']=this[_0x4a93f4(0x5a9)][_0x4a93f4(0x1b4)](_0x4a9ec0=>_0x4a9ec0&&_0x4a9ec0[_0x4a93f4(0x704)]());},VisuMZ['BattleCore'][_0x5507dd(0x8a3)]=BattleManager['updatePhase'],BattleManager[_0x5507dd(0x625)]=function(_0x1f5601){const _0x256d50=_0x5507dd;if(this[_0x256d50(0x960)]===_0x256d50(0x280))this[_0x256d50(0x33a)]();else this[_0x256d50(0x960)]===_0x256d50(0x4db)?this['updateForceAction']():VisuMZ[_0x256d50(0x8af)]['BattleManager_updatePhase'][_0x256d50(0x542)](this,_0x1f5601);},BattleManager['prepareCustomActionSequence']=function(){const _0x43abc0=_0x5507dd;this['_allTargets']=this['_targets'][_0x43abc0(0x6f6)](0x0),this[_0x43abc0(0x969)]=0x0,this[_0x43abc0(0xa20)]=this[_0x43abc0(0x91b)][0x0]||null,this[_0x43abc0(0x960)]='custom';},BattleManager[_0x5507dd(0x33a)]=function(){const _0xbaf17e=_0x5507dd;!this[_0xbaf17e(0x84d)]()&&!this['_logWindow'][_0xbaf17e(0x1bc)]()&&(this[_0xbaf17e(0x960)]=_0xbaf17e(0xa07));},BattleManager[_0x5507dd(0x4db)]=function(_0x2f2a1e){const _0x25d219=_0x5507dd;this[_0x25d219(0x5a9)]['remove'](_0x2f2a1e);if(_0x2f2a1e===this[_0x25d219(0x1bb)])return;const _0x59e985=JsonEx[_0x25d219(0x4b7)](_0x2f2a1e['currentAction']());this[_0x25d219(0x6dd)][_0x25d219(0x47f)]([_0x2f2a1e,_0x59e985]);},BattleManager[_0x5507dd(0x559)]=function(){},BattleManager[_0x5507dd(0x86e)]=function(){const _0x2ee60f=_0x5507dd;if(this[_0x2ee60f(0x240)]())this[_0x2ee60f(0x960)]=_0x2ee60f(0x252);else this['_forcedBattlers']['length']>0x0?this[_0x2ee60f(0x960)]=_0x2ee60f(0x252):this[_0x2ee60f(0x830)]();},BattleManager['getNextSubject']=function(){const _0x13fd1b=_0x5507dd,_0x1244b9=this[_0x13fd1b(0x1bb)];_0x1244b9&&this[_0x13fd1b(0x240)]()&&_0x1244b9[_0x13fd1b(0x3f4)](_0x13fd1b(0x97b));for(;;){const _0x3d515b=this[_0x13fd1b(0x9ad)]();if(!_0x3d515b)return null;if(_0x3d515b[_0x13fd1b(0x1e5)]()&&_0x3d515b[_0x13fd1b(0x8d4)]())return _0x3d515b;}},BattleManager['getNextSubjectFromPool']=function(){const _0x2cebdd=_0x5507dd;if(this['_forcedBattlers'][_0x2cebdd(0x77e)]>0x0){const _0x595f6a=this['_forcedBattlers']['shift'](),_0x1aa169=_0x595f6a[0x0];return _0x1aa169[_0x2cebdd(0x37d)]=_0x1aa169[_0x2cebdd(0x37d)]||[],_0x1aa169[_0x2cebdd(0x37d)][0x0]=_0x595f6a[0x1],_0x1aa169;}else return this['_actionBattlers'][_0x2cebdd(0x97f)]();},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x6e8)]=Game_Battler['prototype'][_0x5507dd(0x4db)],Game_Battler[_0x5507dd(0x832)]['forceAction']=function(_0x461e40,_0x460565){const _0x5d2a40=_0x5507dd;VisuMZ[_0x5d2a40(0x8af)][_0x5d2a40(0x6e8)][_0x5d2a40(0x542)](this,_0x461e40,_0x460565),this['_actions'][this[_0x5d2a40(0x37d)][_0x5d2a40(0x77e)]-0x1][_0x5d2a40(0x799)]=!![];},Game_Interpreter[_0x5507dd(0x832)][_0x5507dd(0x417)]=function(_0x3da922){const _0x58c9a1=_0x5507dd;return this[_0x58c9a1(0x500)](_0x3da922[0x0],_0x3da922[0x1],_0x58b424=>{const _0x21d3f2=_0x58c9a1;!_0x58b424[_0x21d3f2(0x9bd)]()&&(_0x58b424[_0x21d3f2(0x4db)](_0x3da922[0x2],_0x3da922[0x3]),BattleManager[_0x21d3f2(0x4db)](_0x58b424));}),!![];},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0xa27)]=Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x3cc)],Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x3cc)]=function(){const _0x272397=_0x5507dd;VisuMZ[_0x272397(0x8af)]['Game_Battler_makeSpeed']['call'](this),this[_0x272397(0x37d)][_0x272397(0x77e)]<=0x0&&(this[_0x272397(0x4ae)]=Number[_0x272397(0x7a1)]);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x93d)]=BattleManager[_0x5507dd(0x6a2)],BattleManager[_0x5507dd(0x6a2)]=function(){const _0x20b300=_0x5507dd;this[_0x20b300(0x240)]()?this['selectNextCommandTpb']():VisuMZ[_0x20b300(0x8af)]['BattleManager_selectNextCommand']['call'](this);},BattleManager['selectNextCommandTpb']=function(){const _0x380f9d=_0x5507dd;if(this[_0x380f9d(0x823)]){if(this['_currentActor'][_0x380f9d(0x6a2)]())return;this[_0x380f9d(0x98a)](),this[_0x380f9d(0x33b)](),!this[_0x380f9d(0x1bb)]&&!this[_0x380f9d(0x823)]&&SceneManager['_scene']['updateBattleProcess']();}else!this['_subject']&&this[_0x380f9d(0x287)]();},BattleManager[_0x5507dd(0x33b)]=function(){const _0x474444=_0x5507dd;(!this[_0x474444(0x328)]()||this[_0x474444(0x1df)]())&&(this[_0x474444(0x99b)]&&(!$gameParty[_0x474444(0x1a3)]()['includes'](this[_0x474444(0x99b)])&&(this[_0x474444(0x99b)]=null)),!this[_0x474444(0x99b)]?(this['cancelActorInput'](),this[_0x474444(0x823)]=null,this[_0x474444(0x50c)]=![]):this[_0x474444(0x940)]());},BattleManager[_0x5507dd(0x940)]=function(){const _0x2a14cc=_0x5507dd;!$gameParty[_0x2a14cc(0x1a3)]()[_0x2a14cc(0x351)](this[_0x2a14cc(0x99b)])&&(this[_0x2a14cc(0x99b)]=null),this['_tpbSceneChangeCacheActor']?(this[_0x2a14cc(0x823)]=this[_0x2a14cc(0x99b)],this[_0x2a14cc(0x823)][_0x2a14cc(0x5b8)]='charged',this[_0x2a14cc(0x50c)]=!![],this['_tpbSceneChangeCacheActor']=null):(this['cancelActorInput'](),this[_0x2a14cc(0x823)]=null,this[_0x2a14cc(0x50c)]=![]);},VisuMZ['BattleCore']['BattleManager_isTpbMainPhase']=BattleManager[_0x5507dd(0x5b1)],BattleManager[_0x5507dd(0x5b1)]=function(){const _0x22c641=_0x5507dd;return this[_0x22c641(0x960)]==='custom'?this[_0x22c641(0x321)]():VisuMZ['BattleCore'][_0x22c641(0x49a)][_0x22c641(0x542)](this);},BattleManager['battleCoreTpbMainPhase']=function(){const _0x1ce2ab=_0x5507dd;return this[_0x1ce2ab(0x9fe)]();},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x2b0)]=BattleManager[_0x5507dd(0x3d7)],BattleManager[_0x5507dd(0x3d7)]=function(){const _0x3cde4e=_0x5507dd;this[_0x3cde4e(0x240)]()&&this[_0x3cde4e(0x960)]===_0x3cde4e(0x201)&&(this['_currentActor']=null),VisuMZ['BattleCore'][_0x3cde4e(0x2b0)][_0x3cde4e(0x542)](this);},VisuMZ['BattleCore']['BattleManager_inputtingAction']=BattleManager[_0x5507dd(0x40d)],BattleManager[_0x5507dd(0x40d)]=function(){const _0x2c17ca=_0x5507dd,_0xc68b87=this[_0x2c17ca(0x823)];if(_0xc68b87&&!_0xc68b87['inputtingAction']()){const _0x5bfaf8=_0xc68b87[_0x2c17ca(0x84e)];_0xc68b87[_0x2c17ca(0x37d)][_0x5bfaf8]=new Game_Action(_0xc68b87);}return VisuMZ['BattleCore'][_0x2c17ca(0x991)][_0x2c17ca(0x542)](this);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x8b6)]=BattleManager['checkSubstitute'],BattleManager['checkSubstitute']=function(_0x41d93d){const _0x386f34=_0x5507dd;if(this['_action'][_0x386f34(0x637)]())return![];return VisuMZ[_0x386f34(0x8af)][_0x386f34(0x8b6)][_0x386f34(0x542)](this,_0x41d93d);},SceneManager[_0x5507dd(0x4dc)]=function(){const _0x5d0c28=_0x5507dd;return this['_scene']&&this[_0x5d0c28(0x590)][_0x5d0c28(0x2fa)]===Scene_Battle;},SceneManager[_0x5507dd(0x5e2)]=function(){return Spriteset_Battle['prototype']['isFlipped']();},SceneManager[_0x5507dd(0x499)]=function(){const _0x169836=_0x5507dd;if(SceneManager[_0x169836(0x32b)](Scene_Options))return!![];return![];},SceneManager[_0x5507dd(0x3f3)]=function(){const _0x8ddd55=_0x5507dd;if(SceneManager[_0x8ddd55(0x3f8)](Scene_Options))return!![];return![];},SceneManager[_0x5507dd(0x409)]=function(_0x278c82){const _0xcecf58=_0x5507dd;if(!SceneManager[_0xcecf58(0x4dc)]())return!![];const _0x5e17d8=[_0xcecf58(0x3c3),_0xcecf58(0x702)];return _0x5e17d8[_0xcecf58(0x351)](_0x278c82[_0xcecf58(0x55f)]);},VisuMZ[_0x5507dd(0x8af)]['SceneManager_push']=SceneManager[_0x5507dd(0x47f)],SceneManager[_0x5507dd(0x47f)]=function(_0x47aee3){const _0x3f8846=_0x5507dd;if(!SceneManager[_0x3f8846(0x409)](_0x47aee3))return this[_0x3f8846(0x630)](_0x47aee3);VisuMZ[_0x3f8846(0x8af)][_0x3f8846(0x3fb)]['call'](this,_0x47aee3);},SceneManager[_0x5507dd(0x630)]=function(_0x53f377){const _0x105a30=_0x5507dd;if(!$gameTemp['isPlaytest']())return;if(this['_displayBattleCoreTransitionErrorMsg'])return;this['_displayBattleCoreTransitionErrorMsg']=!![];let _0x41922a='';_0x41922a+=_0x105a30(0x32a),_0x41922a+=_0x105a30(0x2bc)[_0x105a30(0x5d0)](_0x53f377['name']),alert(_0x41922a);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x85e)]=Game_Temp['prototype'][_0x5507dd(0x5e7)],Game_Temp[_0x5507dd(0x832)]['requestAnimation']=function(_0x1bc3a,_0x15957a,_0x49f0a6){const _0x18b6d7=_0x5507dd;_0x1bc3a=_0x1bc3a['filter']((_0x4e6e56,_0x927403,_0x4a0c63)=>_0x4a0c63[_0x18b6d7(0x33f)](_0x4e6e56)===_0x927403),SceneManager[_0x18b6d7(0x4dc)]()&&SceneManager[_0x18b6d7(0x5e2)]()&&(_0x49f0a6=!_0x49f0a6),VisuMZ[_0x18b6d7(0x8af)]['Game_Temp_requestAnimation'][_0x18b6d7(0x542)](this,_0x1bc3a,_0x15957a,_0x49f0a6),SceneManager[_0x18b6d7(0x4dc)]()&&BattleManager[_0x18b6d7(0x3c4)]['processAnimationRequests']();},Game_Temp[_0x5507dd(0x832)][_0x5507dd(0x95c)]=function(_0x344010){const _0x477f6c=_0x5507dd;this[_0x477f6c(0x1fa)]=_0x344010;},Game_Temp[_0x5507dd(0x832)][_0x5507dd(0x38e)]=function(){const _0x6502dc=_0x5507dd;return this[_0x6502dc(0x1fa)];},Game_Temp[_0x5507dd(0x832)]['clearForcedGameTroopSettingsBattleCore']=function(){this['_forcedBattleLayout']=undefined;},Game_Temp[_0x5507dd(0x832)][_0x5507dd(0x77d)]=function(_0x298b13){const _0x37b0d0=_0x5507dd;$gameMap&&$dataMap&&$dataMap[_0x37b0d0(0x6a3)]&&this['parseForcedGameTroopSettingsBattleCore']($dataMap[_0x37b0d0(0x6a3)]);const _0x4306ac=$dataTroops[_0x298b13];if(_0x4306ac){let _0x39ca2b=DataManager[_0x37b0d0(0x848)](_0x4306ac['id']);this[_0x37b0d0(0x283)](_0x39ca2b);}},Game_Temp[_0x5507dd(0x832)]['parseForcedGameTroopSettingsBattleCore']=function(_0x99fef1){const _0x320dfb=_0x5507dd;if(!_0x99fef1)return;if(_0x99fef1[_0x320dfb(0x1f2)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*)>/i)){const _0xd43267=String(RegExp['$1']);if(_0xd43267[_0x320dfb(0x1f2)](/DEFAULT/i))this[_0x320dfb(0x1ef)]=_0x320dfb(0x92e);else{if(_0xd43267[_0x320dfb(0x1f2)](/LIST/i))this[_0x320dfb(0x1ef)]=_0x320dfb(0x784);else{if(_0xd43267[_0x320dfb(0x1f2)](/XP/i))this[_0x320dfb(0x1ef)]='xp';else{if(_0xd43267['match'](/PORTRAIT/i))this[_0x320dfb(0x1ef)]=_0x320dfb(0x8ac);else{if(_0xd43267['match'](/BORDER/i))this[_0x320dfb(0x1ef)]=_0x320dfb(0x67e);else _0xd43267[_0x320dfb(0x1f2)](/(?:SIDEVIEW UI|SIDEVIEW)/i)&&(Imported[_0x320dfb(0x903)]?this[_0x320dfb(0x1ef)]=_0x320dfb(0x6d5):this[_0x320dfb(0x1ef)]=_0x320dfb(0x92e));}}}}}},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x344)]=Game_System['prototype'][_0x5507dd(0x2aa)],Game_System['prototype'][_0x5507dd(0x2aa)]=function(){const _0x3ffff4=_0x5507dd;VisuMZ[_0x3ffff4(0x8af)][_0x3ffff4(0x344)][_0x3ffff4(0x542)](this),this[_0x3ffff4(0x9b8)]();},Game_System[_0x5507dd(0x832)][_0x5507dd(0x9b8)]=function(){const _0x1edd67=_0x5507dd;this[_0x1edd67(0x648)]=this[_0x1edd67(0x648)]||[];},Game_System[_0x5507dd(0x832)]['getDefeatedEnemies']=function(){const _0x6f14b2=_0x5507dd;if(this[_0x6f14b2(0x648)]===undefined)this[_0x6f14b2(0x9b8)]();return this[_0x6f14b2(0x648)];},Game_System[_0x5507dd(0x832)][_0x5507dd(0x4d3)]=function(_0x171288){const _0x4bd586=_0x5507dd;if(this[_0x4bd586(0x648)]===undefined)this[_0x4bd586(0x9b8)]();if(!_0x171288)return;if(this['_defeatedEnemies']['includes'](_0x171288))return;this[_0x4bd586(0x648)][_0x4bd586(0x47f)](_0x171288),this[_0x4bd586(0x648)][_0x4bd586(0x49b)]((_0x3362bd,_0x19cb66)=>_0x3362bd-_0x19cb66);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x84b)]=Game_BattlerBase[_0x5507dd(0x832)][_0x5507dd(0x41d)],Game_BattlerBase[_0x5507dd(0x832)][_0x5507dd(0x41d)]=function(_0x1bda63){const _0x350377=_0x5507dd,_0x521258=this[_0x350377(0x8d4)](),_0x5b649f=this['stateMotionIndex']();VisuMZ['BattleCore']['Game_BattlerBase_addNewState'][_0x350377(0x542)](this,_0x1bda63),this[_0x350377(0x890)]()&&_0x521258&&this[_0x350377(0x45e)]()&&(this['_visualHpGauge_JustDied']=!this[_0x350377(0x538)](),$gameSystem[_0x350377(0x4d3)](this['enemyId']())),SceneManager[_0x350377(0x4dc)]()&&_0x5b649f!==this['stateMotionIndex']()&&(this[_0x350377(0x9f8)]()&&this[_0x350377(0x9f8)]()['refreshMotion']());},Game_Enemy[_0x5507dd(0x832)][_0x5507dd(0x538)]=function(){const _0x3020d6=_0x5507dd;return $gameSystem[_0x3020d6(0x3a4)]()['includes'](this['_enemyId']);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x76f)]=Game_BattlerBase[_0x5507dd(0x832)]['eraseState'],Game_BattlerBase['prototype']['eraseState']=function(_0x3579c6){const _0x5c8237=_0x5507dd;VisuMZ[_0x5c8237(0x8af)][_0x5c8237(0x76f)][_0x5c8237(0x542)](this,_0x3579c6),this['isEnemy']()&&_0x3579c6===this['deathStateId']()&&this['isAlive']()&&(this['_visualHpGauge_JustDied']=![]),!this[_0x5c8237(0x9a1)]&&!this[_0x5c8237(0x3fd)]&&SceneManager[_0x5c8237(0x4dc)]()&&this[_0x5c8237(0x21b)]();},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x727)]=Game_Action['prototype'][_0x5507dd(0x9dc)],Game_Action[_0x5507dd(0x832)][_0x5507dd(0x9dc)]=function(){const _0x155e5f=_0x5507dd;VisuMZ[_0x155e5f(0x8af)][_0x155e5f(0x727)][_0x155e5f(0x542)](this),this[_0x155e5f(0x7f0)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x155e5f(0x657)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x155e5f(0x9d1)]=_0x155e5f(0x92e);},Game_Action[_0x5507dd(0x832)]['makeDamageValue']=function(_0x262e6d,_0x154969){const _0x4e0bb1=_0x5507dd;return VisuMZ[_0x4e0bb1(0x8af)][_0x4e0bb1(0x32e)][_0x4e0bb1(0x5bc)][_0x4e0bb1(0x22e)][_0x4e0bb1(0x542)](this,_0x262e6d,_0x154969);},Game_Action[_0x5507dd(0x832)]['applyVariance']=function(_0x5a2802,_0x11738f){const _0x2a5c39=_0x5507dd;return VisuMZ[_0x2a5c39(0x8af)][_0x2a5c39(0x32e)][_0x2a5c39(0x5bc)][_0x2a5c39(0x908)][_0x2a5c39(0x542)](this,_0x5a2802,_0x11738f);},Game_Action[_0x5507dd(0x832)][_0x5507dd(0x8ca)]=function(_0x2a7323,_0x57abf5){const _0x20d3f9=_0x5507dd;return VisuMZ[_0x20d3f9(0x8af)][_0x20d3f9(0x32e)]['Damage']['GuardFormulaJS'][_0x20d3f9(0x542)](this,_0x2a7323,_0x57abf5);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x677)]=Game_Action['prototype'][_0x5507dd(0x762)],Game_Action[_0x5507dd(0x832)][_0x5507dd(0x762)]=function(_0x1ede57){const _0x2ca556=_0x5507dd,_0x2bd576=this[_0x2ca556(0x92a)]()[_0x2ca556(0x6a3)];if(_0x2bd576[_0x2ca556(0x1f2)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x2bd576[_0x2ca556(0x1f2)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x409a07=VisuMZ[_0x2ca556(0x8af)][_0x2ca556(0x677)][_0x2ca556(0x542)](this,_0x1ede57);return _0x409a07=this[_0x2ca556(0x657)][_0x2ca556(0x70f)]*_0x409a07+this[_0x2ca556(0x657)][_0x2ca556(0x3bc)],_0x409a07;}}},Game_Action[_0x5507dd(0x832)][_0x5507dd(0x789)]=function(_0x9627b1){const _0x5eb03f=_0x5507dd;if(!this[_0x5eb03f(0x92a)]()['damage'][_0x5eb03f(0x8f7)])return 0x0;let _0x33fde6=VisuMZ[_0x5eb03f(0x8af)][_0x5eb03f(0x32e)]['Damage'][_0x5eb03f(0x620)][_0x5eb03f(0x542)](this,_0x9627b1);return _0x33fde6=this[_0x5eb03f(0x657)][_0x5eb03f(0x6bd)]*_0x33fde6+this[_0x5eb03f(0x657)][_0x5eb03f(0x831)],_0x33fde6;},Game_Action[_0x5507dd(0x832)][_0x5507dd(0x7df)]=function(_0x571592){const _0x4bd11c=_0x5507dd;return _0x571592=VisuMZ[_0x4bd11c(0x8af)][_0x4bd11c(0x32e)][_0x4bd11c(0x5bc)][_0x4bd11c(0x40f)][_0x4bd11c(0x542)](this,_0x571592),_0x571592=this[_0x4bd11c(0x657)][_0x4bd11c(0x2fe)]*_0x571592+this[_0x4bd11c(0x657)]['criticalDmgFlat'],_0x571592;},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x655)]=Game_Action['prototype'][_0x5507dd(0x87c)],Game_Action[_0x5507dd(0x832)]['evalDamageFormula']=function(_0x491bee){const _0x5e9eda=_0x5507dd;if(this['_customDamageFormula']!=='default')return this['customDamageFormula'](_0x491bee);else return DataManager[_0x5e9eda(0x8da)](this[_0x5e9eda(0x92a)]())==='MANUAL'?VisuMZ[_0x5e9eda(0x8af)]['Game_Action_evalDamageFormula'][_0x5e9eda(0x542)](this,_0x491bee):this[_0x5e9eda(0x278)](_0x491bee);},Game_Action[_0x5507dd(0x832)][_0x5507dd(0x859)]=function(_0x48b192){this['_customDamageFormula']=_0x48b192;},Game_Action[_0x5507dd(0x832)][_0x5507dd(0x6a5)]=function(_0x30b557){const _0x464dec=_0x5507dd,_0xe46747=this[_0x464dec(0x92a)](),_0x4f16b1=_0xe46747[_0x464dec(0x5ca)][_0x464dec(0x317)];_0xe46747['damage'][_0x464dec(0x317)]=this['_customDamageFormula'];let _0x651fd9=VisuMZ['BattleCore'][_0x464dec(0x655)][_0x464dec(0x542)](this,_0x30b557);return _0xe46747['damage'][_0x464dec(0x317)]=_0x4f16b1,_0x651fd9;},Game_Action[_0x5507dd(0x832)][_0x5507dd(0x4c5)]=function(){const _0x753411=_0x5507dd;if(this[_0x753411(0x92a)]()[_0x753411(0x6a3)][_0x753411(0x1f2)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x341aef=String(RegExp['$1'])[_0x753411(0x5d6)]()[_0x753411(0x48c)]();return _0x341aef;}return _0x753411(0x513);},Game_Action['prototype'][_0x5507dd(0x278)]=function(_0x54abe6){const _0x113b23=_0x5507dd,_0x11f271=DataManager['getDamageStyle'](this[_0x113b23(0x92a)]()),_0x2d2095=VisuMZ[_0x113b23(0x4fe)][_0x11f271];try{return _0x2d2095['Formula'][_0x113b23(0x542)](this,_0x54abe6);}catch(_0x426e38){if($gameTemp[_0x113b23(0x9d0)]())console[_0x113b23(0x79e)](_0x426e38);return VisuMZ['BattleCore']['Game_Action_evalDamageFormula'][_0x113b23(0x542)](this);}},Game_Action[_0x5507dd(0x832)][_0x5507dd(0x846)]=function(_0x5709ba,_0x1ad5c4){const _0x3a6bb2=_0x5507dd;if(this['isCertainHit']())return _0x1ad5c4;const _0x42714d=this[_0x3a6bb2(0x860)](),_0x5442aa=_0x5709ba;let _0x5ad94c=[],_0x5608ae=[];_0x5ad94c[_0x3a6bb2(0x47f)](this[_0x3a6bb2(0x7f0)]['arPenFlat'],this[_0x3a6bb2(0x7f0)][_0x3a6bb2(0x40a)]),_0x5608ae[_0x3a6bb2(0x47f)](this['_armorPenetration']['arPenRate'],this[_0x3a6bb2(0x7f0)]['arRedRate']);const _0x16d3af=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x23c3a2=this[_0x3a6bb2(0x7ca)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x544cc4=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x28d8af=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x5ad94c=_0x5ad94c[_0x3a6bb2(0x2ee)](_0x5442aa['traitObjects']()[_0x3a6bb2(0x4d2)](_0x157b0f=>_0x157b0f&&_0x157b0f[_0x3a6bb2(0x6a3)][_0x3a6bb2(0x1f2)](_0x16d3af)?Number(RegExp['$1']):0x0)),_0x5608ae=_0x5608ae[_0x3a6bb2(0x2ee)](_0x5442aa[_0x3a6bb2(0x249)]()[_0x3a6bb2(0x4d2)](_0x4959b0=>_0x4959b0&&_0x4959b0['note'][_0x3a6bb2(0x1f2)](_0x23c3a2)?Number(RegExp['$1'])/0x64:0x0)),_0x5ad94c=_0x5ad94c[_0x3a6bb2(0x2ee)](_0x42714d[_0x3a6bb2(0x249)]()[_0x3a6bb2(0x4d2)](_0x206df6=>_0x206df6&&_0x206df6[_0x3a6bb2(0x6a3)][_0x3a6bb2(0x1f2)](_0x544cc4)?Number(RegExp['$1']):0x0)),_0x5608ae=_0x5608ae[_0x3a6bb2(0x2ee)](_0x42714d[_0x3a6bb2(0x249)]()['map'](_0x2064f7=>_0x2064f7&&_0x2064f7[_0x3a6bb2(0x6a3)]['match'](_0x28d8af)?Number(RegExp['$1'])/0x64:0x0)),this[_0x3a6bb2(0x92a)]()[_0x3a6bb2(0x6a3)][_0x3a6bb2(0x1f2)](_0x544cc4)&&_0x5ad94c[_0x3a6bb2(0x47f)](Number(RegExp['$1'])),this[_0x3a6bb2(0x92a)]()['note'][_0x3a6bb2(0x1f2)](_0x28d8af)&&_0x5608ae[_0x3a6bb2(0x47f)](Number(RegExp['$1'])),_0x1ad5c4=_0x5ad94c[_0x3a6bb2(0x8db)]((_0x4896db,_0x1fa36f)=>_0x4896db-_0x1fa36f,_0x1ad5c4),_0x1ad5c4>0x0&&(_0x1ad5c4=_0x5608ae[_0x3a6bb2(0x8db)]((_0x2c8168,_0x11785d)=>_0x2c8168*(0x1-_0x11785d),_0x1ad5c4)),_0x1ad5c4;},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x5a8)]=Game_Action['prototype'][_0x5507dd(0x828)],Game_Action[_0x5507dd(0x832)][_0x5507dd(0x828)]=function(_0x5f4028,_0x5c6ad9){const _0x43bdbb=_0x5507dd;_0x5c6ad9=_0x5c6ad9*this[_0x43bdbb(0x657)][_0x43bdbb(0x8bb)],_0x5c6ad9+=this['_multipliers'][_0x43bdbb(0x9dd)]*(_0x5c6ad9>=0x0?0x1:-0x1),_0x5c6ad9=this[_0x43bdbb(0x6da)]('PreDamage%1JS',_0x5f4028,_0x5c6ad9,![]),_0x5c6ad9=this['applyDamageCaps'](_0x5c6ad9),_0x5c6ad9=Math[_0x43bdbb(0x95e)](_0x5c6ad9),this[_0x43bdbb(0x6f5)]=_0x5c6ad9,this[_0x43bdbb(0x312)]=this['_totalValue']||0x0,this[_0x43bdbb(0x312)]+=_0x5c6ad9,VisuMZ[_0x43bdbb(0x8af)][_0x43bdbb(0x5a8)][_0x43bdbb(0x542)](this,_0x5f4028,_0x5c6ad9),this[_0x43bdbb(0x6da)](_0x43bdbb(0x61b),_0x5f4028,_0x5c6ad9,!![]);},Game_Action[_0x5507dd(0x832)]['applyDamageCaps']=function(_0x2e1c30){const _0x3b8f25=_0x5507dd;if(this[_0x3b8f25(0x786)]())return _0x2e1c30;return _0x2e1c30=this[_0x3b8f25(0x898)](_0x2e1c30),_0x2e1c30=this[_0x3b8f25(0x1d2)](_0x2e1c30),_0x2e1c30;},Game_Action[_0x5507dd(0x832)][_0x5507dd(0x786)]=function(){const _0x41f820=_0x5507dd,_0x271281=/<BYPASS DAMAGE CAP>/i;if(this[_0x41f820(0x92a)]()[_0x41f820(0x6a3)][_0x41f820(0x1f2)](_0x271281))return!![];if(this[_0x41f820(0x860)]()['traitObjects']()[_0x41f820(0x372)](_0x30f479=>_0x30f479&&_0x30f479[_0x41f820(0x6a3)]['match'](_0x271281)))return!![];return!VisuMZ[_0x41f820(0x8af)][_0x41f820(0x32e)][_0x41f820(0x5bc)]['EnableDamageCap'];},Game_Action[_0x5507dd(0x832)]['applySoftDamageCap']=function(_0x4b3b2c){const _0x4ba21c=_0x5507dd;if(!VisuMZ[_0x4ba21c(0x8af)][_0x4ba21c(0x32e)][_0x4ba21c(0x5bc)][_0x4ba21c(0x295)])return _0x4b3b2c;const _0x402a64=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x4ba21c(0x92a)]()[_0x4ba21c(0x6a3)][_0x4ba21c(0x1f2)](_0x402a64))return _0x4b3b2c;if(this[_0x4ba21c(0x860)]()[_0x4ba21c(0x249)]()['some'](_0x4154b6=>_0x4154b6&&_0x4154b6['note'][_0x4ba21c(0x1f2)](_0x402a64)))return _0x4b3b2c;const _0x3b6149=_0x4b3b2c<0x0?-0x1:0x1;_0x4b3b2c=Math[_0x4ba21c(0x7f9)](_0x4b3b2c);let _0x40d56f=this[_0x4ba21c(0x860)]()[_0x4ba21c(0x71f)]();this['item']()[_0x4ba21c(0x6a3)][_0x4ba21c(0x1f2)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x40d56f+=Number(RegExp['$1'])/0x64);_0x40d56f=_0x40d56f[_0x4ba21c(0x290)](0.01,0x1);const _0x3e7dae=this[_0x4ba21c(0x7f6)](),_0x3b010c=_0x40d56f*_0x3e7dae;if(_0x4b3b2c>_0x3b010c&&_0x3e7dae>_0x3b010c){_0x4b3b2c-=_0x3b010c;const _0x4c8b6f=VisuMZ[_0x4ba21c(0x8af)][_0x4ba21c(0x32e)][_0x4ba21c(0x5bc)]['DefaultSoftScaler'],_0x2b7426=Math[_0x4ba21c(0x741)](0x1-_0x4b3b2c/((_0x3e7dae-_0x3b010c)*_0x4c8b6f+_0x4b3b2c),0.01);_0x4b3b2c*=_0x2b7426,_0x4b3b2c+=_0x3b010c;}return _0x4b3b2c*_0x3b6149;},Game_Action[_0x5507dd(0x832)][_0x5507dd(0x7f6)]=function(){const _0x45fd71=_0x5507dd;return this[_0x45fd71(0x92a)]()['note'][_0x45fd71(0x1f2)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0x45fd71(0x860)]()[_0x45fd71(0x313)]();},Game_Action[_0x5507dd(0x832)][_0x5507dd(0x1d2)]=function(_0xe73f28){const _0x1e2a57=_0x5507dd;console['log'](_0xe73f28);let _0x318905=this[_0x1e2a57(0x7f6)]();return _0xe73f28[_0x1e2a57(0x290)](-_0x318905,_0x318905);},VisuMZ['BattleCore']['Game_Action_apply']=Game_Action[_0x5507dd(0x832)][_0x5507dd(0x9b3)],Game_Action[_0x5507dd(0x832)][_0x5507dd(0x9b3)]=function(_0xe6f807){const _0x1236ef=_0x5507dd;this[_0x1236ef(0x6da)](_0x1236ef(0x40e),_0xe6f807,0x0,!![]),VisuMZ[_0x1236ef(0x8af)][_0x1236ef(0x262)][_0x1236ef(0x542)](this,_0xe6f807),this[_0x1236ef(0x6da)](_0x1236ef(0x29e),_0xe6f807,this[_0x1236ef(0x6f5)]||0x0,!![]),this[_0x1236ef(0x8c4)](_0xe6f807);},Game_Action[_0x5507dd(0x832)][_0x5507dd(0x6da)]=function(_0x30c208,_0x4cb3df,_0x3f2e2f,_0x295bc7){const _0x30a40a=_0x5507dd;if(this[_0x30a40a(0x3fd)]||this[_0x30a40a(0x9a1)])return;_0x3f2e2f=_0x3f2e2f||0x0;const _0x33eb39=_0x3f2e2f,_0x5135cc=VisuMZ[_0x30a40a(0x8af)][_0x30a40a(0x32e)][_0x30a40a(0x2dd)],_0x27fcf5=_0x30c208['format']('');if(_0x5135cc[_0x27fcf5]){_0x3f2e2f=_0x5135cc[_0x27fcf5][_0x30a40a(0x542)](this,_0x3f2e2f,_0x4cb3df);if(_0x295bc7)_0x3f2e2f=_0x33eb39;}let _0x41e9e2=VisuMZ[_0x30a40a(0x8af)][_0x30a40a(0x54b)](this['item'](),_0x30c208[_0x30a40a(0x5d0)](''));if(VisuMZ[_0x30a40a(0x8af)]['JS'][_0x41e9e2]){_0x3f2e2f=VisuMZ[_0x30a40a(0x8af)]['JS'][_0x41e9e2][_0x30a40a(0x542)](this,this[_0x30a40a(0x860)](),_0x4cb3df,this[_0x30a40a(0x92a)](),_0x3f2e2f);if(_0x295bc7)_0x3f2e2f=_0x33eb39;}for(const _0x7c0936 of this[_0x30a40a(0x860)]()[_0x30a40a(0x249)]()){if(!_0x7c0936)continue;_0x41e9e2=VisuMZ[_0x30a40a(0x8af)]['createKeyJS'](_0x7c0936,_0x30c208[_0x30a40a(0x5d0)](_0x30a40a(0x7e0)));if(VisuMZ['BattleCore']['JS'][_0x41e9e2]){_0x3f2e2f=VisuMZ[_0x30a40a(0x8af)]['JS'][_0x41e9e2][_0x30a40a(0x542)](this,this[_0x30a40a(0x860)](),_0x4cb3df,_0x7c0936,_0x3f2e2f);if(_0x295bc7)_0x3f2e2f=_0x33eb39;}}for(const _0xa8791 of _0x4cb3df[_0x30a40a(0x249)]()){if(!_0xa8791)continue;_0x41e9e2=VisuMZ[_0x30a40a(0x8af)]['createKeyJS'](_0xa8791,_0x30c208[_0x30a40a(0x5d0)]('AsTarget'));if(VisuMZ[_0x30a40a(0x8af)]['JS'][_0x41e9e2]){_0x3f2e2f=VisuMZ[_0x30a40a(0x8af)]['JS'][_0x41e9e2][_0x30a40a(0x542)](this,this[_0x30a40a(0x860)](),_0x4cb3df,_0xa8791,_0x3f2e2f);if(_0x295bc7)_0x3f2e2f=_0x33eb39;}}return _0x3f2e2f;},Game_Action[_0x5507dd(0x832)][_0x5507dd(0x94b)]=function(_0x568b62){const _0x3340ca=_0x5507dd,_0xa36ee=this['_totalValue']||0x0,_0x3f8282=VisuMZ[_0x3340ca(0x8af)][_0x3340ca(0x32e)][_0x3340ca(0x2dd)],_0x26736c=_0x568b62[_0x3340ca(0x5d0)]('');_0x3f8282[_0x26736c]&&_0x3f8282[_0x26736c][_0x3340ca(0x542)](this,_0xa36ee);let _0x130295=VisuMZ[_0x3340ca(0x8af)]['createKeyJS'](this[_0x3340ca(0x92a)](),_0x568b62);VisuMZ[_0x3340ca(0x8af)]['JS'][_0x130295]&&VisuMZ[_0x3340ca(0x8af)]['JS'][_0x130295][_0x3340ca(0x542)](this,this[_0x3340ca(0x860)](),this[_0x3340ca(0x860)](),this[_0x3340ca(0x92a)](),_0xa36ee);for(const _0x32fd01 of this['subject']()[_0x3340ca(0x249)]()){if(!_0x32fd01)continue;_0x130295=VisuMZ['BattleCore']['createKeyJS'](_0x32fd01,_0x568b62),VisuMZ['BattleCore']['JS'][_0x130295]&&VisuMZ[_0x3340ca(0x8af)]['JS'][_0x130295]['call'](this,this['subject'](),this[_0x3340ca(0x860)](),_0x32fd01,_0xa36ee);}},Game_Action[_0x5507dd(0x832)][_0x5507dd(0x78e)]=function(){const _0x1a1e58=_0x5507dd;return VisuMZ[_0x1a1e58(0x8af)]['Settings'][_0x1a1e58(0x2dd)]['CalcActionSpeedJS'][_0x1a1e58(0x542)](this);},Game_Action[_0x5507dd(0x832)][_0x5507dd(0x69a)]=function(){const _0x15d108=_0x5507dd;return VisuMZ[_0x15d108(0x8af)][_0x15d108(0x32e)][_0x15d108(0x2dd)][_0x15d108(0x55b)];},Game_Action[_0x5507dd(0x832)]['isCustomBattleScope']=function(){const _0x2731f9=_0x5507dd;return this[_0x2731f9(0x92a)]()[_0x2731f9(0x6a3)][_0x2731f9(0x1f2)](/<JS TARGETS>/i);},Game_Action[_0x5507dd(0x832)]['isBattleCoreTargetScope']=function(){const _0x415862=_0x5507dd;if(!this[_0x415862(0x595)]&&this[_0x415862(0x860)]()[_0x415862(0x79c)]())return![];if(this[_0x415862(0xa32)]())return!![];return typeof this[_0x415862(0x92a)]()[_0x415862(0x7c4)]==='string';},VisuMZ['BattleCore'][_0x5507dd(0x2a3)]=Game_Action[_0x5507dd(0x832)][_0x5507dd(0x6b7)],Game_Action[_0x5507dd(0x832)]['isForOpponent']=function(){const _0x1e13c5=_0x5507dd;return this[_0x1e13c5(0x452)]()&&!this[_0x1e13c5(0xa32)]()?this['isForOpponentBattleCore']():VisuMZ[_0x1e13c5(0x8af)][_0x1e13c5(0x2a3)][_0x1e13c5(0x542)](this);},Game_Action[_0x5507dd(0x832)]['isForOpponentBattleCore']=function(){const _0x41fe62=_0x5507dd,_0x24de81=this[_0x41fe62(0x92a)]()['scope'];return _0x24de81[_0x41fe62(0x1f2)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x286)]=Game_Action[_0x5507dd(0x832)][_0x5507dd(0x637)],Game_Action[_0x5507dd(0x832)]['isForFriend']=function(){const _0x28cee4=_0x5507dd;return this[_0x28cee4(0x452)]()&&!this[_0x28cee4(0xa32)]()?this[_0x28cee4(0x95f)]():VisuMZ[_0x28cee4(0x8af)][_0x28cee4(0x286)][_0x28cee4(0x542)](this);},Game_Action[_0x5507dd(0x832)]['isForFriendBattleCore']=function(){const _0x2d1b19=_0x5507dd,_0x27258f=this[_0x2d1b19(0x92a)]()['scope'];return _0x27258f[_0x2d1b19(0x1f2)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x3d0)]=Game_Action[_0x5507dd(0x832)][_0x5507dd(0x783)],Game_Action[_0x5507dd(0x832)][_0x5507dd(0x783)]=function(){const _0x346736=_0x5507dd;return this['isBattleCoreTargetScope']()&&!this[_0x346736(0xa32)]()?this[_0x346736(0x888)]():VisuMZ[_0x346736(0x8af)][_0x346736(0x3d0)]['call'](this);},Game_Action[_0x5507dd(0x832)][_0x5507dd(0x888)]=function(){const _0x30356f=_0x5507dd,_0x3ff57c=this[_0x30356f(0x92a)]()['scope'];return _0x3ff57c[_0x30356f(0x1f2)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x771)]=Game_Action[_0x5507dd(0x832)][_0x5507dd(0x7dd)],Game_Action[_0x5507dd(0x832)][_0x5507dd(0x7dd)]=function(){const _0x4d44a1=_0x5507dd;return this[_0x4d44a1(0x452)]()&&!this[_0x4d44a1(0xa32)]()?this['needsSelectionBattleCore']():VisuMZ[_0x4d44a1(0x8af)][_0x4d44a1(0x771)][_0x4d44a1(0x542)](this);},Game_Action[_0x5507dd(0x832)][_0x5507dd(0x9f9)]=function(){const _0x460e9f=_0x5507dd,_0xe6d940=this['item']()['scope'];if(_0xe6d940[_0x460e9f(0x1f2)](/RANDOM/i))return![];if(_0xe6d940[_0x460e9f(0x1f2)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0xe6d940[_0x460e9f(0x1f2)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ[_0x460e9f(0x8af)][_0x460e9f(0x771)]['call'](this);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x483)]=Game_Action[_0x5507dd(0x832)][_0x5507dd(0x28b)],Game_Action[_0x5507dd(0x832)]['makeTargets']=function(){const _0x2b5be9=_0x5507dd;let _0x483da9=[];return this['isBattleCoreTargetScope']()?_0x483da9=this[_0x2b5be9(0x9da)]():_0x483da9=VisuMZ['BattleCore'][_0x2b5be9(0x483)][_0x2b5be9(0x542)](this),_0x483da9=this[_0x2b5be9(0x855)](_0x483da9),_0x483da9;},Game_Action['prototype'][_0x5507dd(0x9da)]=function(){const _0x56bae0=_0x5507dd;let _0x3ab3c1=[];const _0x59c084=String(this[_0x56bae0(0x92a)]()['scope']),_0x2b401d=VisuMZ[_0x56bae0(0x8af)][_0x56bae0(0x54b)](this[_0x56bae0(0x92a)](),'Targets');if(VisuMZ['BattleCore']['JS'][_0x2b401d]){_0x3ab3c1=VisuMZ[_0x56bae0(0x8af)][_0x56bae0(0x483)][_0x56bae0(0x542)](this);const _0x31030b=VisuMZ[_0x56bae0(0x8af)][_0x56bae0(0x54b)](this[_0x56bae0(0x92a)](),_0x56bae0(0x5ed));return _0x3ab3c1=VisuMZ[_0x56bae0(0x8af)]['JS'][_0x31030b][_0x56bae0(0x542)](this,this[_0x56bae0(0x860)](),_0x3ab3c1),this[_0x56bae0(0x993)](_0x3ab3c1);}if(_0x59c084[_0x56bae0(0x1f2)](/(\d+) RANDOM ANY/i)){let _0x3940b5=Number(RegExp['$1']);while(_0x3940b5--){const _0x28a883=Math[_0x56bae0(0x52b)](0x2)===0x0?this[_0x56bae0(0x442)]():this[_0x56bae0(0x4b8)]();_0x3ab3c1[_0x56bae0(0x47f)](_0x28a883[_0x56bae0(0x55e)]());}return this['repeatTargets'](_0x3ab3c1);}if(_0x59c084[_0x56bae0(0x1f2)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x2ea9c4=Number(RegExp['$1']);while(_0x2ea9c4--){_0x3ab3c1[_0x56bae0(0x47f)](this[_0x56bae0(0x442)]()['trueRandomTarget']());}return this[_0x56bae0(0x993)](_0x3ab3c1);}if(_0x59c084[_0x56bae0(0x1f2)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x2b00d4=Number(RegExp['$1']);while(_0x2b00d4--){_0x3ab3c1[_0x56bae0(0x47f)](this[_0x56bae0(0x4b8)]()[_0x56bae0(0x55e)]());}return this['repeatTargets'](_0x3ab3c1);}if(_0x59c084['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x3ab3c1[_0x56bae0(0x47f)](...this[_0x56bae0(0x4b8)]()[_0x56bae0(0x682)]()[_0x56bae0(0x1b4)](_0x2f3056=>_0x2f3056!==this['subject']())),this[_0x56bae0(0x993)](_0x3ab3c1);return VisuMZ[_0x56bae0(0x8af)][_0x56bae0(0x483)][_0x56bae0(0x542)](this);},Game_Action[_0x5507dd(0x832)][_0x5507dd(0x8ee)]=function(_0x3cb3e4){const _0x5562ce=_0x5507dd,_0x4c24e1=[];for(let _0x509bc3=0x0;_0x509bc3<this[_0x5562ce(0x9e1)]();_0x509bc3++){_0x4c24e1[_0x5562ce(0x47f)](_0x3cb3e4[_0x5562ce(0x55e)]());}return _0x4c24e1;},Game_Action[_0x5507dd(0x832)][_0x5507dd(0x855)]=function(_0x6427af){const _0x4d5c58=_0x5507dd;if(!this['item']())return _0x6427af;const _0x1cdb00=this[_0x4d5c58(0x92a)]()[_0x4d5c58(0x6a3)];return _0x1cdb00['match'](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0x6427af[_0x4d5c58(0x9ff)](this[_0x4d5c58(0x860)]()),_0x6427af;},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x8eb)]=Game_Action[_0x5507dd(0x832)]['itemEffectAddAttackState'],Game_Action[_0x5507dd(0x832)][_0x5507dd(0x1ae)]=function(_0x308b51,_0x6be6a6){const _0x4a1dc1=_0x5507dd;VisuMZ['BattleCore'][_0x4a1dc1(0x8eb)]['call'](this,_0x308b51,_0x6be6a6);if(!_0x308b51[_0x4a1dc1(0x7f2)]())return;for(const _0x3d892b of this[_0x4a1dc1(0x860)]()[_0x4a1dc1(0x3ff)]()){if(_0x3d892b===_0x308b51[_0x4a1dc1(0x40b)]()){let _0x581e98=_0x6be6a6[_0x4a1dc1(0x8dd)];_0x581e98*=_0x308b51[_0x4a1dc1(0x9a7)](_0x3d892b),_0x581e98*=this[_0x4a1dc1(0x860)]()['attackStatesRate'](_0x3d892b),_0x581e98*=this[_0x4a1dc1(0x4b3)](_0x308b51),Math[_0x4a1dc1(0x858)]()<_0x581e98&&(_0x308b51[_0x4a1dc1(0x6ad)]=!![],this[_0x4a1dc1(0x945)](_0x308b51));}}},VisuMZ['BattleCore'][_0x5507dd(0x7e5)]=Game_Action[_0x5507dd(0x832)]['itemEffectAddNormalState'],Game_Action['prototype'][_0x5507dd(0x8e8)]=function(_0x31518b,_0x82a00a){const _0x2eb4c3=_0x5507dd;VisuMZ[_0x2eb4c3(0x8af)][_0x2eb4c3(0x7e5)][_0x2eb4c3(0x542)](this,_0x31518b,_0x82a00a);if(!_0x31518b[_0x2eb4c3(0x7f2)]())return;if(_0x82a00a[_0x2eb4c3(0x563)]!==_0x31518b['deathStateId']())return;let _0x5ef020=_0x82a00a[_0x2eb4c3(0x8dd)];!this['isCertainHit']()&&(_0x5ef020*=_0x31518b['stateRate'](_0x82a00a[_0x2eb4c3(0x563)]),_0x5ef020*=this[_0x2eb4c3(0x4b3)](_0x31518b)),Math[_0x2eb4c3(0x858)]()<_0x5ef020&&(_0x31518b[_0x2eb4c3(0x6ad)]=!![],this['makeSuccess'](_0x31518b));},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x1c9)]=Game_Action[_0x5507dd(0x832)]['applyGlobal'],Game_Action[_0x5507dd(0x832)]['applyGlobal']=function(){const _0x47addb=_0x5507dd;VisuMZ['BattleCore']['Game_Action_applyGlobal'][_0x47addb(0x542)](this),this[_0x47addb(0x335)](),this['resetResultSwitches']();},Game_Action[_0x5507dd(0x832)]['applyGlobalCommonEventNotetags']=function(){const _0x599652=_0x5507dd;if(!SceneManager[_0x599652(0x4dc)]())return;const _0x5d2b70=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x1d9397=this[_0x599652(0x92a)]()[_0x599652(0x6a3)][_0x599652(0x1f2)](_0x5d2b70);if(_0x1d9397)for(const _0x3dd0a5 of _0x1d9397){if(!_0x3dd0a5)continue;_0x3dd0a5[_0x599652(0x1f2)](_0x5d2b70);const _0x21bd4f=String(RegExp['$1'])[_0x599652(0x2ed)](',')[_0x599652(0x4d2)](_0x4f67ad=>String(_0x4f67ad)[_0x599652(0x48c)]()),_0x7a98c5=_0x21bd4f[_0x599652(0x4d2)](_0x5a1ab8=>DataManager['getCommonEventIdWithName'](_0x5a1ab8));for(const _0x6d8cc3 of _0x7a98c5){const _0x1c6008=$dataCommonEvents[_0x6d8cc3];_0x1c6008&&$gameTemp[_0x599652(0x81f)](_0x6d8cc3);}}},DataManager[_0x5507dd(0x820)]=function(_0x1d4ef1){const _0x1ba3a6=_0x5507dd;_0x1d4ef1=_0x1d4ef1[_0x1ba3a6(0x5d6)]()[_0x1ba3a6(0x48c)](),this[_0x1ba3a6(0x983)]=this[_0x1ba3a6(0x983)]||{};if(this[_0x1ba3a6(0x983)][_0x1d4ef1])return this[_0x1ba3a6(0x983)][_0x1d4ef1];for(const _0x2823da of $dataCommonEvents){if(!_0x2823da)continue;let _0x45e9fb=_0x2823da['name'];_0x45e9fb=_0x45e9fb['replace'](/\x1I\[(\d+)\]/gi,''),_0x45e9fb=_0x45e9fb[_0x1ba3a6(0x684)](/\\I\[(\d+)\]/gi,''),this[_0x1ba3a6(0x983)][_0x45e9fb[_0x1ba3a6(0x5d6)]()['trim']()]=_0x2823da['id'];}return this[_0x1ba3a6(0x983)][_0x1d4ef1]||0x0;},Game_Action[_0x5507dd(0x832)][_0x5507dd(0x39e)]=function(){const _0x222b0b=_0x5507dd;if(!SceneManager['isSceneBattle']())return;const _0x473931=VisuMZ[_0x222b0b(0x8af)][_0x222b0b(0x32e)][_0x222b0b(0x2dd)];_0x473931[_0x222b0b(0x3b0)]&&$gameSwitches[_0x222b0b(0xa01)](_0x473931['SwitchCritical'],![]),_0x473931[_0x222b0b(0x2f8)]&&$gameSwitches[_0x222b0b(0xa01)](_0x473931[_0x222b0b(0x2f8)],![]),_0x473931[_0x222b0b(0x818)]&&$gameVariables['setValue'](_0x473931['VariableDmg'],0x0),_0x473931[_0x222b0b(0x6f1)]&&$gameVariables[_0x222b0b(0xa01)](_0x473931[_0x222b0b(0x6f1)],0x0);},Game_Action[_0x5507dd(0x832)][_0x5507dd(0x8c4)]=function(_0x482b74){const _0x22e7d5=_0x5507dd;if(!SceneManager['isSceneBattle']())return;if(!_0x482b74)return;const _0x5b6a80=_0x482b74[_0x22e7d5(0x3d8)](),_0x348ac2=VisuMZ['BattleCore']['Settings'][_0x22e7d5(0x2dd)];_0x348ac2[_0x22e7d5(0x3b0)]&&_0x5b6a80['critical']&&$gameSwitches[_0x22e7d5(0xa01)](_0x348ac2['SwitchCritical'],!![]);_0x348ac2[_0x22e7d5(0x2f8)]&&(_0x5b6a80[_0x22e7d5(0x75a)]||_0x5b6a80[_0x22e7d5(0x5b0)])&&$gameSwitches['setValue'](_0x348ac2[_0x22e7d5(0x2f8)],!![]);if(_0x348ac2[_0x22e7d5(0x818)]){let _0xc6eb3b=$gameVariables[_0x22e7d5(0x5a7)](_0x348ac2[_0x22e7d5(0x818)]);_0x5b6a80[_0x22e7d5(0x6e0)]>0x0&&(_0xc6eb3b+=Math[_0x22e7d5(0x7f9)](_0x5b6a80[_0x22e7d5(0x6e0)])),$gameVariables[_0x22e7d5(0xa01)](_0x348ac2[_0x22e7d5(0x818)],_0xc6eb3b);}if(_0x348ac2['VariableHeal']){let _0x15d571=$gameVariables[_0x22e7d5(0x5a7)](_0x348ac2[_0x22e7d5(0x6f1)]);_0x5b6a80[_0x22e7d5(0x6e0)]<0x0&&(_0x15d571+=Math['abs'](_0x5b6a80[_0x22e7d5(0x6e0)])),$gameVariables[_0x22e7d5(0xa01)](_0x348ac2[_0x22e7d5(0x6f1)],_0x15d571);}},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x7a6)]=Game_BattlerBase[_0x5507dd(0x832)]['initMembers'],Game_BattlerBase[_0x5507dd(0x832)]['initMembers']=function(){const _0x2af485=_0x5507dd;VisuMZ[_0x2af485(0x8af)][_0x2af485(0x7a6)][_0x2af485(0x542)](this),this[_0x2af485(0x987)]();},Game_BattlerBase[_0x5507dd(0x832)]['initMembersBattleCore']=function(){const _0x947dd6=_0x5507dd;this[_0x947dd6(0x454)]=![];},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x430)]=Game_BattlerBase[_0x5507dd(0x832)][_0x5507dd(0x62f)],Game_BattlerBase['prototype'][_0x5507dd(0x62f)]=function(){const _0x102728=_0x5507dd;this['_cache']={},VisuMZ[_0x102728(0x8af)]['Game_BattlerBase_refresh'][_0x102728(0x542)](this);},Game_BattlerBase[_0x5507dd(0x832)][_0x5507dd(0x253)]=function(_0x324379){const _0x35e7d5=_0x5507dd;return this[_0x35e7d5(0x57b)]=this[_0x35e7d5(0x57b)]||{},this[_0x35e7d5(0x57b)][_0x324379]!==undefined;},Game_BattlerBase[_0x5507dd(0x832)][_0x5507dd(0x313)]=function(){const _0x45f53f=_0x5507dd;if(this['_cache'][_0x45f53f(0x313)]!==undefined)return this[_0x45f53f(0x57b)][_0x45f53f(0x313)];const _0x3b7a5f=/<DAMAGE CAP:[ ](\d+)>/i,_0x5dcb2d=this['traitObjects']()[_0x45f53f(0x4d2)](_0x181a40=>_0x181a40&&_0x181a40['note'][_0x45f53f(0x1f2)](_0x3b7a5f)?Number(RegExp['$1']):0x0);let _0x3d11e5=_0x5dcb2d[_0x45f53f(0x77e)]>0x0?Math[_0x45f53f(0x741)](..._0x5dcb2d):0x0;if(_0x3d11e5<=0x0)_0x3d11e5=VisuMZ[_0x45f53f(0x8af)][_0x45f53f(0x32e)][_0x45f53f(0x5bc)]['DefaultHardCap'];return this['_cache'][_0x45f53f(0x313)]=_0x3d11e5,this[_0x45f53f(0x57b)][_0x45f53f(0x313)];},Game_BattlerBase['prototype'][_0x5507dd(0x71f)]=function(){const _0x4aa570=_0x5507dd;if(this[_0x4aa570(0x57b)]['softDamageCap']!==undefined)return this[_0x4aa570(0x57b)][_0x4aa570(0x21c)];let _0x37d935=VisuMZ[_0x4aa570(0x8af)][_0x4aa570(0x32e)][_0x4aa570(0x5bc)][_0x4aa570(0x467)];const _0xdfb603=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0xdbab37=this[_0x4aa570(0x249)]()[_0x4aa570(0x4d2)](_0x25ca40=>_0x25ca40&&_0x25ca40['note'][_0x4aa570(0x1f2)](_0xdfb603)?Number(RegExp['$1'])/0x64:0x0);return _0x37d935=_0xdbab37['reduce']((_0x4ca543,_0x1ef838)=>_0x4ca543+_0x1ef838,_0x37d935),this[_0x4aa570(0x57b)][_0x4aa570(0x21c)]=_0x37d935,this[_0x4aa570(0x57b)][_0x4aa570(0x21c)]['clamp'](0.01,0x1);},VisuMZ[_0x5507dd(0x8af)]['Game_BattlerBase_die']=Game_BattlerBase[_0x5507dd(0x832)][_0x5507dd(0x2df)],Game_BattlerBase[_0x5507dd(0x832)][_0x5507dd(0x2df)]=function(){const _0x4840ab=_0x5507dd;VisuMZ[_0x4840ab(0x8af)][_0x4840ab(0x944)][_0x4840ab(0x542)](this),SceneManager[_0x4840ab(0x4dc)]()&&this['requestMotion'](_0x4840ab(0x5cc));},Game_BattlerBase[_0x5507dd(0x832)][_0x5507dd(0x9f8)]=function(){const _0x5dc9e2=_0x5507dd;if(!SceneManager[_0x5dc9e2(0x4dc)]())return null;if(!SceneManager[_0x5dc9e2(0x590)][_0x5dc9e2(0x3c4)])return null;return SceneManager[_0x5dc9e2(0x590)][_0x5dc9e2(0x3c4)][_0x5dc9e2(0x2d8)](this);},Game_BattlerBase[_0x5507dd(0x832)][_0x5507dd(0x56b)]=function(){const _0x43f223=_0x5507dd;return VisuMZ['BattleCore'][_0x43f223(0x32e)][_0x43f223(0x9cb)][_0x43f223(0x6ae)];},Game_BattlerBase[_0x5507dd(0x832)]['svBattlerAnchorY']=function(){const _0x234228=_0x5507dd;return VisuMZ[_0x234228(0x8af)][_0x234228(0x32e)]['Actor'][_0x234228(0x5d8)];},Game_BattlerBase[_0x5507dd(0x832)][_0x5507dd(0x27d)]=function(){const _0x3d6a07=_0x5507dd;return this[_0x3d6a07(0x8ed)]&&this[_0x3d6a07(0x8ed)]()?VisuMZ['BattleCore']['Settings'][_0x3d6a07(0x9cb)][_0x3d6a07(0x84f)]:VisuMZ[_0x3d6a07(0x8af)][_0x3d6a07(0x32e)]['Enemy'][_0x3d6a07(0x84f)];},Game_BattlerBase[_0x5507dd(0x832)][_0x5507dd(0x6d4)]=function(){return!![];},Game_BattlerBase['prototype'][_0x5507dd(0x3b4)]=function(){return 0x0;},Game_BattlerBase[_0x5507dd(0x832)][_0x5507dd(0x4c0)]=function(){return 0x0;},Game_BattlerBase['prototype'][_0x5507dd(0x3f7)]=function(_0x3929ee){const _0x4e9391=_0x5507dd;if(!_0x3929ee)return 0x0;let _0x5916e6=0x0;const _0x961476=_0x3929ee[_0x4e9391(0x6a3)];return _0x961476[_0x4e9391(0x1f2)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x5916e6+=Number(RegExp['$1'])),_0x961476[_0x4e9391(0x1f2)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x5916e6+=Number(RegExp['$1'])),_0x5916e6;},Game_BattlerBase[_0x5507dd(0x832)][_0x5507dd(0x1a0)]=function(_0x819ae9){const _0x526388=_0x5507dd;if(!_0x819ae9)return 0x0;let _0x47ce8a=0x0;const _0x44c812=_0x819ae9[_0x526388(0x6a3)];return _0x44c812[_0x526388(0x1f2)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x47ce8a+=Number(RegExp['$1'])),_0x44c812[_0x526388(0x1f2)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x47ce8a+=Number(RegExp['$2'])),_0x47ce8a;},VisuMZ[_0x5507dd(0x8af)]['Game_BattlerBase_isStateResist']=Game_BattlerBase[_0x5507dd(0x832)][_0x5507dd(0x615)],Game_BattlerBase[_0x5507dd(0x832)][_0x5507dd(0x615)]=function(_0x57ce6b){const _0x39b1cd=_0x5507dd;if(_0x57ce6b===this[_0x39b1cd(0x40b)]()&&this[_0x39b1cd(0x7f2)]())return!![];return VisuMZ[_0x39b1cd(0x8af)][_0x39b1cd(0x3b6)][_0x39b1cd(0x542)](this,_0x57ce6b);},Game_BattlerBase[_0x5507dd(0x832)][_0x5507dd(0x7f2)]=function(){const _0x530cf0=_0x5507dd;return this[_0x530cf0(0x454)];},Game_BattlerBase[_0x5507dd(0x832)][_0x5507dd(0x6b1)]=function(_0x5a1185){const _0x30acfe=_0x5507dd;_0x5a1185?this[_0x30acfe(0x275)]():this[_0x30acfe(0x82e)]();},Game_BattlerBase[_0x5507dd(0x832)][_0x5507dd(0x275)]=function(){const _0x2ce2f9=_0x5507dd;if(this['isDead']())return;this[_0x2ce2f9(0x454)]=!![],this['_deathStateApplied']=![];},Game_BattlerBase[_0x5507dd(0x832)]['removeImmortal']=function(){const _0x2e1f98=_0x5507dd,_0x4a43ab=this['isAlive']();this[_0x2e1f98(0x454)]=![],_0x4a43ab&&this[_0x2e1f98(0x6ad)]&&this[_0x2e1f98(0x2df)](),this['_deathStateApplied']=![],this[_0x2e1f98(0x62f)](),this['isDead']()&&_0x4a43ab&&(this['performCollapse'](),this[_0x2e1f98(0x21b)]());},VisuMZ['BattleCore']['Game_Action_numRepeats']=Game_Action[_0x5507dd(0x832)][_0x5507dd(0x59a)],Game_Action[_0x5507dd(0x832)][_0x5507dd(0x59a)]=function(){const _0x11e965=_0x5507dd;return this[_0x11e965(0x92a)]()?VisuMZ[_0x11e965(0x8af)]['Game_Action_numRepeats'][_0x11e965(0x542)](this):0x0;},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x348)]=Game_Action[_0x5507dd(0x832)][_0x5507dd(0x4b5)],Game_Action[_0x5507dd(0x832)][_0x5507dd(0x4b5)]=function(){const _0x1cd2a9=_0x5507dd;this[_0x1cd2a9(0x860)]()&&this[_0x1cd2a9(0x860)]()[_0x1cd2a9(0x770)]()?VisuMZ[_0x1cd2a9(0x8af)][_0x1cd2a9(0x348)][_0x1cd2a9(0x542)](this):this[_0x1cd2a9(0x9dc)]();},VisuMZ['BattleCore'][_0x5507dd(0x7fa)]=Game_BattlerBase[_0x5507dd(0x832)][_0x5507dd(0x770)],Game_BattlerBase[_0x5507dd(0x832)][_0x5507dd(0x770)]=function(){const _0x3840b5=_0x5507dd;if(!this[_0x3840b5(0x59d)]())return![];return VisuMZ['BattleCore']['Game_BattlerBase_canAttack'][_0x3840b5(0x542)](this);},Game_BattlerBase[_0x5507dd(0x832)][_0x5507dd(0x59d)]=function(){const _0xe51a6a=_0x5507dd;for(const _0xa4536a of this[_0xe51a6a(0x249)]()){if(!_0xa4536a)continue;if(_0xa4536a['note'][_0xe51a6a(0x1f2)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x5507dd(0x8af)]['Game_Action_setGuard']=Game_Action[_0x5507dd(0x832)][_0x5507dd(0x386)],Game_Action[_0x5507dd(0x832)][_0x5507dd(0x386)]=function(){const _0x35aabb=_0x5507dd;this['subject']()[_0x35aabb(0x42f)]()&&VisuMZ['BattleCore'][_0x35aabb(0x8fe)]['call'](this);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x91e)]=Game_BattlerBase[_0x5507dd(0x832)][_0x5507dd(0x42f)],Game_BattlerBase[_0x5507dd(0x832)][_0x5507dd(0x42f)]=function(){const _0x3dee7f=_0x5507dd;if(!this[_0x3dee7f(0x63c)]())return![];return VisuMZ[_0x3dee7f(0x8af)]['Game_BattlerBase_canGuard'][_0x3dee7f(0x542)](this);},Game_BattlerBase[_0x5507dd(0x832)][_0x5507dd(0x63c)]=function(){const _0x294fd5=_0x5507dd;for(const _0x2e02ac of this['traitObjects']()){if(!_0x2e02ac)continue;if(_0x2e02ac[_0x294fd5(0x6a3)][_0x294fd5(0x1f2)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x5507dd(0x832)][_0x5507dd(0x550)]=function(){const _0x47f822=_0x5507dd;for(const _0x3f3ea7 of this[_0x47f822(0x249)]()){if(!_0x3f3ea7)continue;if(_0x3f3ea7[_0x47f822(0x6a3)][_0x47f822(0x1f2)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x69a)]=function(){const _0x480c05=_0x5507dd;return VisuMZ[_0x480c05(0x8af)]['Settings'][_0x480c05(0x2dd)]['AllowRandomSpeed'];},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x824)]=Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x8f8)],Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x8f8)]=function(){const _0x289336=_0x5507dd;if(SceneManager['isSceneBattle']()){if(BattleManager[_0x289336(0x240)]()){if(this[_0x289336(0x635)]()<=0x0)return;}else{if($gameTroop['turnCount']()<=0x0)return;}}if(SceneManager[_0x289336(0x4dc)]()&&BattleManager[_0x289336(0x240)]()&&this[_0x289336(0x5e1)]===Graphics[_0x289336(0x8d6)])return;this[_0x289336(0x5e1)]=Graphics[_0x289336(0x8d6)],SceneManager[_0x289336(0x4dc)]()&&this[_0x289336(0x357)](_0x289336(0x6bb)),VisuMZ[_0x289336(0x8af)][_0x289336(0x824)][_0x289336(0x542)](this),SceneManager[_0x289336(0x4dc)]()&&(this['regenerateAllBattleCore'](),this[_0x289336(0x357)](_0x289336(0x56e)));},Game_Battler['prototype'][_0x5507dd(0x647)]=function(){const _0x430794=_0x5507dd;if(SceneManager[_0x430794(0x4dc)]())for(const _0x4c5369 of this['traitObjects']()){if(!_0x4c5369)continue;this[_0x430794(0x3d1)](_0x4c5369);}},Game_Battler['prototype'][_0x5507dd(0x3d1)]=function(_0x15bc0f){const _0x491918=_0x5507dd;if(!Imported[_0x491918(0x72e)])return;if(!SceneManager[_0x491918(0x4dc)]())return;if(this[_0x491918(0x45e)]())return;if(this[_0x491918(0x871)]())return;if(_0x15bc0f[_0x491918(0x6a3)][_0x491918(0x1f2)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x127a57=Number(RegExp['$1']);$gameTemp[_0x491918(0x2c9)]([this],_0x127a57,![],![]);}},VisuMZ[_0x5507dd(0x8af)]['Game_Battler_startTpbTurn']=Game_Battler[_0x5507dd(0x832)]['startTpbTurn'],Game_Battler['prototype'][_0x5507dd(0x775)]=function(){const _0x128fd6=_0x5507dd;this[_0x128fd6(0x357)]('PreStartTurnJS'),VisuMZ[_0x128fd6(0x8af)][_0x128fd6(0x231)][_0x128fd6(0x542)](this),this[_0x128fd6(0x357)]('PostStartTurnJS');},VisuMZ['BattleCore'][_0x5507dd(0x25d)]=Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x23d)],Game_Battler[_0x5507dd(0x832)]['onTurnEnd']=function(){const _0x33870e=_0x5507dd;this['processBattleCoreJS'](_0x33870e(0x8b3)),VisuMZ[_0x33870e(0x8af)][_0x33870e(0x25d)][_0x33870e(0x542)](this),this[_0x33870e(0x357)]('PostEndTurnJS');},Game_Battler['prototype'][_0x5507dd(0x357)]=function(_0x4253b8){const _0x11695f=_0x5507dd;if(this['_tempBattler']||this[_0x11695f(0x9a1)])return;const _0x209d1a=VisuMZ[_0x11695f(0x8af)][_0x11695f(0x32e)][_0x11695f(0x2dd)];if(_0x209d1a[_0x4253b8])_0x209d1a[_0x4253b8][_0x11695f(0x542)](this);for(const _0x5b9a92 of this[_0x11695f(0x249)]()){if(!_0x5b9a92)continue;key=VisuMZ[_0x11695f(0x8af)][_0x11695f(0x54b)](_0x5b9a92,_0x4253b8),VisuMZ['BattleCore']['JS'][key]&&VisuMZ[_0x11695f(0x8af)]['JS'][key]['call'](this,this,this,_0x5b9a92,0x0);}},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x43a)]=function(){const _0x3eafc9=_0x5507dd;return VisuMZ[_0x3eafc9(0x8af)][_0x3eafc9(0x32e)][_0x3eafc9(0x9cb)][_0x3eafc9(0x7b4)]||![];},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x379)]=function(){const _0x12e404=_0x5507dd;if(this[_0x12e404(0x5e9)]()){if(this[_0x12e404(0x43a)]()){if(this[_0x12e404(0x37d)]['some'](_0x1e6dc9=>_0x1e6dc9['item']()&&_0x1e6dc9['isMagical']()))return!![];}else{if(this[_0x12e404(0x37d)][_0x12e404(0x372)](_0x2d04b7=>_0x2d04b7['item']()&&_0x2d04b7[_0x12e404(0x198)]()))return!![];}}if(BattleManager['isTpb']()&&this['_tpbState']===_0x12e404(0x20b))return this['chantStyle']()?this['currentAction']()&&this[_0x12e404(0x946)]()[_0x12e404(0x92a)]()&&this[_0x12e404(0x946)]()[_0x12e404(0x32c)]():this[_0x12e404(0x946)]()&&this[_0x12e404(0x946)]()[_0x12e404(0x92a)]()&&this[_0x12e404(0x946)]()['isMagicSkill']();return![];},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x533)]=function(){const _0x4fbe43=_0x5507dd;if(BattleManager[_0x4fbe43(0x240)]()&&this[_0x4fbe43(0x5b8)]===_0x4fbe43(0x20b))return this[_0x4fbe43(0x43a)]()?this[_0x4fbe43(0x946)]()&&this[_0x4fbe43(0x946)]()[_0x4fbe43(0x92a)]()&&!this[_0x4fbe43(0x946)]()['isMagical']():this[_0x4fbe43(0x946)]()&&this[_0x4fbe43(0x946)]()[_0x4fbe43(0x92a)]()&&!this[_0x4fbe43(0x946)]()['isMagicSkill']();return![];},VisuMZ['BattleCore']['Game_Battler_clearDamagePopup']=Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x56c)],Game_Battler[_0x5507dd(0x832)]['clearDamagePopup']=function(){const _0x267d6c=_0x5507dd;VisuMZ[_0x267d6c(0x8af)][_0x267d6c(0x6e4)][_0x267d6c(0x542)](this),this[_0x267d6c(0x765)]=[];},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x429)]=function(){const _0x4a9f42=_0x5507dd;if(!this[_0x4a9f42(0x765)])this['clearDamagePopup']();return this[_0x4a9f42(0x765)]['length']>0x0;},Game_Battler[_0x5507dd(0x832)]['startDamagePopup']=function(){const _0x3e60e9=_0x5507dd;if(!SceneManager[_0x3e60e9(0x4dc)]())return;if(!this[_0x3e60e9(0x765)])this[_0x3e60e9(0x56c)]();this[_0x3e60e9(0x986)]();const _0x2459ad=this[_0x3e60e9(0x9f8)]();if(_0x2459ad)_0x2459ad['setupDamagePopup']();},Game_Battler['prototype']['createSeparateDamagePopups']=function(){const _0x4753d1=_0x5507dd,_0x368cb7=this[_0x4753d1(0x3d8)]();if(_0x368cb7[_0x4753d1(0x75a)]||_0x368cb7[_0x4753d1(0x5b0)]){const _0x28f932=JsonEx[_0x4753d1(0x4b7)](_0x368cb7);_0x28f932[_0x4753d1(0x6f0)]=![],_0x28f932['mpDamage']=0x0,this[_0x4753d1(0x765)][_0x4753d1(0x47f)](_0x28f932);}if(_0x368cb7['hpAffected']){const _0x12bdab=JsonEx[_0x4753d1(0x4b7)](_0x368cb7);_0x12bdab[_0x4753d1(0x75a)]=![],_0x12bdab[_0x4753d1(0x5b0)]=![],_0x12bdab['mpDamage']=0x0,this[_0x4753d1(0x765)][_0x4753d1(0x47f)](_0x12bdab);}if(_0x368cb7[_0x4753d1(0x989)]!==0x0){const _0x439eda=JsonEx[_0x4753d1(0x4b7)](_0x368cb7);_0x439eda[_0x4753d1(0x75a)]=![],_0x439eda['evaded']=![],_0x439eda[_0x4753d1(0x6f0)]=![],this[_0x4753d1(0x765)][_0x4753d1(0x47f)](_0x439eda);}},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x7ad)]=function(){const _0x5534c1=_0x5507dd;if(!this[_0x5534c1(0x765)])this[_0x5534c1(0x56c)]();return VisuMZ[_0x5534c1(0x8af)][_0x5534c1(0x32e)][_0x5534c1(0x5bc)][_0x5534c1(0x642)]?this[_0x5534c1(0x765)][_0x5534c1(0x97f)]():this[_0x5534c1(0x765)]['pop']();},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x2bf)]=function(_0x405a82,_0xd26dcc){const _0x22947a=_0x5507dd;if(!SceneManager[_0x22947a(0x4dc)]())return;if(!this['battler']())return;if(_0x405a82[_0x22947a(0x77e)]<=0x0)return;_0xd26dcc=_0xd26dcc||{},_0xd26dcc[_0x22947a(0x4cd)]=_0xd26dcc[_0x22947a(0x4cd)]||_0x22947a(0x552),_0xd26dcc[_0x22947a(0x866)]=_0xd26dcc[_0x22947a(0x866)]||[0x0,0x0,0x0,0x0],_0xd26dcc['flashDuration']=_0xd26dcc[_0x22947a(0x8e2)]||0x0,this[_0x22947a(0x9f8)]()[_0x22947a(0x2bf)](_0x405a82,_0xd26dcc);},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0xa0d)]=function(_0x3b2e03,_0x288110,_0x133938){const _0x162a46=_0x5507dd;if(!SceneManager[_0x162a46(0x4dc)]())return;if(!this[_0x162a46(0x9f8)]())return;if(_0x288110['length']<=0x0)return;_0x133938=_0x133938||{},_0x133938[_0x162a46(0x4cd)]=_0x133938['textColor']||_0x162a46(0x552),_0x133938[_0x162a46(0x866)]=_0x133938[_0x162a46(0x866)]||[0x0,0x0,0x0,0x0],_0x133938[_0x162a46(0x8e2)]=_0x133938[_0x162a46(0x8e2)]||0x0,this[_0x162a46(0x9f8)]()[_0x162a46(0xa0d)](_0x3b2e03,_0x288110,_0x133938);},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x4f6)]=function(){const _0x16450b=_0x5507dd;if(this['isHidden']())return![];if(this['isAlive']()&&this[_0x16450b(0x704)]())return!![];if(this[_0x16450b(0x890)]()&&this[_0x16450b(0x77a)]()){if(this[_0x16450b(0x45e)]()&&this['allowCollapse']())return![];}else{if(this[_0x16450b(0x45e)]())return![];}return!![];},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x75b)]=Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x9a2)],Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x9a2)]=function(){const _0x93dda2=_0x5507dd;VisuMZ['BattleCore']['Game_Battler_clearMotion'][_0x93dda2(0x542)](this),this[_0x93dda2(0x688)]();},Game_Battler[_0x5507dd(0x832)]['canBattlerMove']=function(){return!![];},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x349)]=function(){return![];},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x300)]=Game_Battler['prototype'][_0x5507dd(0x69f)],Game_Battler[_0x5507dd(0x832)]['onBattleStart']=function(_0x49d35f){const _0x1f8681=_0x5507dd;VisuMZ[_0x1f8681(0x8af)][_0x1f8681(0x300)][_0x1f8681(0x542)](this,_0x49d35f),this[_0x1f8681(0x58e)](_0x49d35f);},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x58e)]=function(_0x2f3f79){const _0x53da3a=_0x5507dd;this['setBattlerFlip'](![]),this[_0x53da3a(0x94a)]=undefined,this[_0x53da3a(0x1d4)]=undefined;},VisuMZ['BattleCore']['Game_Battler_onBattleEnd']=Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x265)],Game_Battler[_0x5507dd(0x832)]['onBattleEnd']=function(){const _0x2f6528=_0x5507dd;VisuMZ[_0x2f6528(0x8af)][_0x2f6528(0x1a2)][_0x2f6528(0x542)](this),this[_0x2f6528(0x7bb)]();},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x7bb)]=function(){const _0x1f5078=_0x5507dd;this[_0x1f5078(0x94a)]=undefined,this['_forcedHomeY']=undefined;},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x8ef)]=Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x1bd)],Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x1bd)]=function(_0x3973ef){const _0xd6f9bd=_0x5507dd;VisuMZ['BattleCore'][_0xd6f9bd(0x8ef)][_0xd6f9bd(0x542)](this,_0x3973ef);if(!_0x3973ef[_0xd6f9bd(0x80d)]()){const _0x169d77=this[_0xd6f9bd(0x9f8)]();_0x169d77&&_0x169d77['stepForward']();}this[_0xd6f9bd(0x36b)](![]);},Game_Battler[_0x5507dd(0x832)]['performActionEndMembers']=function(){const _0x5e477d=_0x5507dd,_0x5c9ece=this['_flinched'];this[_0x5e477d(0x557)]=![];if(BattleManager[_0x5e477d(0x9fe)]()&&this['isInputting']()){const _0x124c2d=this[_0x5e477d(0x9f8)]();if(_0x124c2d&&_0x5c9ece)_0x124c2d[_0x5e477d(0x480)]();return;}const _0x29ddee=this[_0x5e477d(0x9f8)]();if(_0x29ddee)_0x29ddee['stepBack']();this[_0x5e477d(0x36b)](![]),this[_0x5e477d(0x21b)]();},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x4e2)]=function(_0x46ed10){const _0x267c7d=_0x5507dd;if(_0x46ed10['isAttack']())this[_0x267c7d(0x224)]();else{if(_0x46ed10['isGuard']())this[_0x267c7d(0xa18)]('guard');else{if(_0x46ed10[_0x267c7d(0x32c)]())this[_0x267c7d(0xa18)](_0x267c7d(0x9d4));else{if(_0x46ed10[_0x267c7d(0x650)]())_0x46ed10[_0x267c7d(0x92a)]()['damage']['type']>0x0?this[_0x267c7d(0x224)]():this[_0x267c7d(0xa18)](_0x267c7d(0x491));else _0x46ed10[_0x267c7d(0x21a)]()&&this['requestMotion']('item');}}}},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x3ac)]=function(){const _0x4346dc=_0x5507dd;return $dataSystem[_0x4346dc(0x463)][0x0];},Game_Battler[_0x5507dd(0x832)]['getAttackWeaponAnimationId']=function(){const _0x2b7c0a=this['getAttackMotion']();return _0x2b7c0a?_0x2b7c0a['weaponImageId']:0x0;},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x213)]=function(_0xf1d3c9){const _0x322edf=_0x5507dd;if(!$gameSystem['isSideView']())return;const _0x1761df=this['battler'](),_0x3ee28b=_0xf1d3c9[_0x322edf(0x9f8)]();if(!_0x1761df||!_0x3ee28b)return;const _0x55f7a4=_0x3ee28b[_0x322edf(0x67b)],_0x29381d=_0x3ee28b[_0x322edf(0x6c3)];this['moveBattlerToPoint'](_0x55f7a4,_0x29381d,0x0,![],_0x322edf(0x6cf),-0x1),_0x1761df['updatePosition']();const _0x449173=VisuMZ[_0x322edf(0x8af)]['Settings']['ActionSequence'];let _0x5618a3=(_0x3ee28b[_0x322edf(0x4fa)]+_0x1761df[_0x322edf(0x4fa)])/0x2;_0x5618a3*=this[_0x322edf(0x8ed)]()?0x1:-0x1;let _0x59028f=_0x449173[_0x322edf(0x5b2)]*(this[_0x322edf(0x8ed)]()?0x1:-0x1);_0xf1d3c9[_0x322edf(0x54f)](_0x5618a3,_0x59028f,0x0,![],_0x322edf(0x6cf)),_0x3ee28b[_0x322edf(0x558)]();},Game_Battler['prototype'][_0x5507dd(0xa18)]=function(_0x13a8a4){const _0x3b3451=_0x5507dd;if(SceneManager[_0x3b3451(0x4dc)]()){const _0x1f1dcd=this[_0x3b3451(0x9f8)]();_0x1f1dcd&&(_0x1f1dcd[_0x3b3451(0x8c8)](_0x13a8a4),[_0x3b3451(0x2ba),'thrust',_0x3b3451(0x8cb)][_0x3b3451(0x351)](_0x13a8a4)&&this[_0x3b3451(0x514)]());}this[_0x3b3451(0x688)]();},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x514)]=function(){},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x71d)]=function(_0x3a472f){const _0x4c1158=_0x5507dd;if(SceneManager[_0x4c1158(0x4dc)]()){const _0x35c996=this[_0x4c1158(0x9f8)]();if(_0x35c996)_0x35c996[_0x4c1158(0x1e7)](_0x3a472f);}},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x8bc)]=function(){const _0x1acd32=_0x5507dd;if(SceneManager[_0x1acd32(0x4dc)]()){const _0x57b322=this[_0x1acd32(0x529)]();this[_0x1acd32(0x71d)](_0x57b322);}},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x82d)]=function(_0x2c5cb4,_0x449b5c){const _0x37dcbd=_0x5507dd;if(!_0x2c5cb4)return;if(!_0x2c5cb4[_0x37dcbd(0x92a)]())return;if(_0x2c5cb4[_0x37dcbd(0x551)]())return;if(_0x2c5cb4[_0x37dcbd(0x80d)]())return;if(_0x2c5cb4[_0x37dcbd(0x21a)]())return;let _0x27b148=0x0;const _0x560a56=VisuMZ[_0x37dcbd(0x8af)][_0x37dcbd(0x32e)][_0x37dcbd(0x431)],_0x44899c=_0x2c5cb4['item']()[_0x37dcbd(0x6a3)];if(_0x44899c['match'](/<CAST ANIMATION: (\d+)>/i))_0x27b148=Number(RegExp['$1']);else{if(_0x44899c[_0x37dcbd(0x1f2)](/<NO CAST ANIMATION>/i))return;else{if(_0x2c5cb4[_0x37dcbd(0x8d5)]())_0x27b148=_0x560a56[_0x37dcbd(0x1b8)];else{if(_0x2c5cb4[_0x37dcbd(0x7ca)]())_0x27b148=_0x560a56[_0x37dcbd(0x5d3)];else _0x2c5cb4[_0x37dcbd(0x32c)]()&&(_0x27b148=_0x560a56[_0x37dcbd(0x20c)]);}}}_0x27b148>0x0&&$gameTemp[_0x37dcbd(0x5e7)]([this],_0x27b148,!!_0x449b5c);},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x8ae)]=function(){const _0x58a597=_0x5507dd;SoundManager[_0x58a597(0x7b3)]();let _0x336f5f=VisuMZ[_0x58a597(0x8af)][_0x58a597(0x32e)][_0x58a597(0x431)]['ReflectAnimation'];_0x336f5f>0x0&&(Imported[_0x58a597(0x72e)]?$gameTemp[_0x58a597(0x2c9)]([this],_0x336f5f):$gameTemp[_0x58a597(0x5e7)]([this],_0x336f5f));},VisuMZ['BattleCore'][_0x5507dd(0xa19)]=Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x6fb)],Game_Battler[_0x5507dd(0x832)]['performDamage']=function(){const _0x2b0ae1=_0x5507dd;VisuMZ[_0x2b0ae1(0x8af)][_0x2b0ae1(0xa19)][_0x2b0ae1(0x542)](this),this[_0x2b0ae1(0x3bb)]();},VisuMZ['BattleCore'][_0x5507dd(0x5cb)]=Game_Battler[_0x5507dd(0x832)]['performMiss'],Game_Battler[_0x5507dd(0x832)]['performMiss']=function(){const _0x59f650=_0x5507dd;VisuMZ['BattleCore'][_0x59f650(0x5cb)][_0x59f650(0x542)](this),this['performFlinch']();},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x39a)]=Game_Battler[_0x5507dd(0x832)]['performEvasion'],Game_Battler['prototype'][_0x5507dd(0x37e)]=function(){const _0x11546f=_0x5507dd;VisuMZ[_0x11546f(0x8af)][_0x11546f(0x39a)][_0x11546f(0x542)](this),this['performFlinch']();},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x3bb)]=function(){const _0x5b9019=_0x5507dd;if(!$gameSystem[_0x5b9019(0x577)]())return;if(this['_flinched'])return;this[_0x5b9019(0x557)]=!![];const _0x3a21c7=this['battler']();if(_0x3a21c7)_0x3a21c7['stepFlinch']();},Game_Battler['prototype'][_0x5507dd(0x21b)]=function(){const _0x3f34f4=_0x5507dd;if(this['isDead']()&&this[_0x3f34f4(0x324)]!==_0x3f34f4(0x5cc)){this['requestMotion'](_0x3f34f4(0x5cc));return;}if(this['isDead']()&&this['_motionType']===_0x3f34f4(0x5cc))return;if(!!this['_freezeMotionData'])return;if(this[_0x3f34f4(0x890)]()){if(!this[_0x3f34f4(0x974)]()&&this!==BattleManager[_0x3f34f4(0x1bb)]){if(this[_0x3f34f4(0x9f8)]())this[_0x3f34f4(0x9f8)]()[_0x3f34f4(0x24a)]();}this['clearFreezeMotion']();return;}if(this[_0x3f34f4(0x324)]==='victory')return;if(this[_0x3f34f4(0x324)]==='escape'&&!BattleManager[_0x3f34f4(0x43f)]())return;if(this['_motionType']===_0x3f34f4(0x716)&&!BattleManager[_0x3f34f4(0x43f)]())return;this['clearMotion']();if(this[_0x3f34f4(0x9f8)]()&&BattleManager[_0x3f34f4(0x43f)]()){this[_0x3f34f4(0x9f8)]()[_0x3f34f4(0x24a)](),this[_0x3f34f4(0x688)]();return;}},Game_Enemy[_0x5507dd(0x832)]['isDuringNonLoopingMotion']=function(){const _0x24ed09=_0x5507dd;if(!this['hasSvBattler']())return![];const _0x310271=this[_0x24ed09(0x9f8)]();if(!_0x310271)return![];const _0x35fe89=_0x310271['_svBattlerSprite'];if(!_0x35fe89)return![];const _0x1670d7=_0x35fe89[_0x24ed09(0x35b)];return _0x1670d7&&!_0x1670d7[_0x24ed09(0x5e5)];},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x99d)]=function(){const _0x5b2653=_0x5507dd;return this[_0x5b2653(0x838)];},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x36b)]=function(_0x67d241){const _0xd944f0=_0x5507dd;if(!$gameSystem[_0xd944f0(0x577)]())return;this[_0xd944f0(0x838)]=_0x67d241;const _0x56ad9f=this['battler']();if(_0x56ad9f)_0x56ad9f['updateFlip']();},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x1c2)]=function(_0x5a5c64,_0x415a52,_0x12f971){const _0x7911da=_0x5507dd;if(!$gameSystem[_0x7911da(0x577)]())return;const _0x519d02=this[_0x7911da(0x9f8)]();if(!_0x519d02)return;if(_0x5a5c64===_0x519d02['_baseX'])return;let _0x30cd5a=![];if(this[_0x7911da(0x8ed)]()){if(_0x5a5c64>_0x519d02[_0x7911da(0x67b)])_0x30cd5a=!![];if(_0x5a5c64<_0x519d02['_baseX'])_0x30cd5a=![];}else{if(this[_0x7911da(0x890)]()){if(_0x5a5c64>_0x519d02[_0x7911da(0x67b)])_0x30cd5a=![];if(_0x5a5c64<_0x519d02[_0x7911da(0x67b)])_0x30cd5a=!![];}};this['setBattlerFlip'](_0x12f971?!_0x30cd5a:_0x30cd5a),_0x519d02[_0x7911da(0x1af)]();},Game_Battler['prototype'][_0x5507dd(0x54f)]=function(_0x470f3f,_0x227d6a,_0x2a62b2,_0x12d0f9,_0x54114d){const _0x5ea1f0=_0x5507dd;if(!$gameSystem[_0x5ea1f0(0x577)]())return;const _0x41a7cb=this[_0x5ea1f0(0x9f8)]();if(!_0x41a7cb)return;if(_0x12d0f9)this[_0x5ea1f0(0x1c2)](_0x470f3f+_0x41a7cb[_0x5ea1f0(0x67b)],_0x227d6a+_0x41a7cb['_baseY'],![]);_0x470f3f+=_0x41a7cb[_0x5ea1f0(0x67b)]-_0x41a7cb[_0x5ea1f0(0x99f)],_0x227d6a+=_0x41a7cb[_0x5ea1f0(0x6c3)]-_0x41a7cb[_0x5ea1f0(0x7b6)],_0x41a7cb[_0x5ea1f0(0x39b)](_0x470f3f,_0x227d6a,_0x2a62b2);if(Imported['VisuMZ_0_CoreEngine'])_0x41a7cb[_0x5ea1f0(0x202)](_0x54114d||'Linear');},Game_Battler[_0x5507dd(0x832)]['moveBattlerToPoint']=function(_0x224d9f,_0x12e61d,_0x278740,_0xee407c,_0x32f958,_0x2b0f41){const _0xef8dbb=_0x5507dd;if(!$gameSystem[_0xef8dbb(0x577)]())return;const _0x224336=this['battler']();if(!_0x224336)return;if(_0x224d9f===Infinity||_0x12e61d===Infinity)return;if(isNaN(_0x224d9f)||isNaN(_0x12e61d))return;_0x2b0f41=_0x2b0f41||0x0;if(_0x2b0f41>0x0){if(_0x224336['_baseX']>_0x224d9f)_0x224d9f+=_0x224336[_0xef8dbb(0x4fa)]/0x2+_0x2b0f41;if(_0x224336[_0xef8dbb(0x67b)]<_0x224d9f)_0x224d9f-=_0x224336[_0xef8dbb(0x4fa)]/0x2+_0x2b0f41;}if(_0xee407c)this[_0xef8dbb(0x1c2)](_0x224d9f,_0x12e61d,![]);_0x224d9f-=_0x224336[_0xef8dbb(0x99f)],_0x12e61d-=_0x224336[_0xef8dbb(0x7b6)],_0x224336[_0xef8dbb(0x39b)](_0x224d9f,_0x12e61d,_0x278740);if(Imported[_0xef8dbb(0x72e)])_0x224336['setMoveEasingType'](_0x32f958||_0xef8dbb(0x6cf));},Game_Battler['prototype'][_0x5507dd(0x2e0)]=function(_0x34e500,_0x4b7a1d,_0x3d0f38,_0x32a76c,_0x251a50){const _0x42ffd5=_0x5507dd;if(!$gameSystem[_0x42ffd5(0x577)]())return;const _0x1ddaf3=this['battler']();if(!_0x1ddaf3)return;if(_0x32a76c)this[_0x42ffd5(0x1c2)](_0x34e500+_0x1ddaf3['_baseX'],_0x4b7a1d+_0x1ddaf3[_0x42ffd5(0x6c3)],![]);_0x34e500+=_0x1ddaf3[_0x42ffd5(0x99f)],_0x4b7a1d+=_0x1ddaf3[_0x42ffd5(0x7b6)],_0x1ddaf3[_0x42ffd5(0x61e)](_0x34e500,_0x4b7a1d,_0x3d0f38,_0x251a50),this['_forcedHomeX']=_0x34e500,this[_0x42ffd5(0x1d4)]=_0x4b7a1d;},Game_Battler['prototype'][_0x5507dd(0x7e2)]=function(_0x2b0f5d,_0x205b19,_0x44bd08,_0x6de978,_0x5c0213,_0x923939){const _0x4805f3=_0x5507dd;if(!$gameSystem['isSideView']())return;const _0x398b9a=this[_0x4805f3(0x9f8)]();if(!_0x398b9a)return;_0x923939=_0x923939||0x0;if(_0x923939>0x0){if(_0x398b9a[_0x4805f3(0x67b)]>_0x2b0f5d)_0x2b0f5d+=_0x398b9a[_0x4805f3(0x4fa)]/0x2+_0x923939;if(_0x398b9a[_0x4805f3(0x67b)]<_0x2b0f5d)_0x2b0f5d-=_0x398b9a[_0x4805f3(0x4fa)]/0x2+_0x923939;}if(_0x6de978)this[_0x4805f3(0x1c2)](_0x2b0f5d,_0x205b19,![]);_0x398b9a['startHomeMove'](_0x2b0f5d,_0x205b19,_0x44bd08,_0x5c0213),this[_0x4805f3(0x94a)]=_0x2b0f5d,this['_forcedHomeY']=_0x205b19;},Game_Battler['prototype']['floatBattler']=function(_0x60d76b,_0x410640,_0x4b8a82){const _0xde97e2=_0x5507dd;if(!$gameSystem['isSideView']())return;const _0x1a441f=this[_0xde97e2(0x9f8)]();if(!_0x1a441f)return;_0x1a441f[_0xde97e2(0x8e7)](_0x60d76b,_0x410640,_0x4b8a82);},Game_Battler['prototype'][_0x5507dd(0x6aa)]=function(_0xe9c158,_0x456391){const _0x3efab5=_0x5507dd;if(!$gameSystem[_0x3efab5(0x577)]())return;const _0x4c93c2=this[_0x3efab5(0x9f8)]();if(!_0x4c93c2)return;_0x4c93c2['startJump'](_0xe9c158,_0x456391);},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x555)]=function(_0x2c7611,_0x4815f3,_0x21644b,_0x292c59){const _0x129fd8=_0x5507dd;if(!$gameSystem[_0x129fd8(0x577)]())return;const _0x24113f=this['battler']();if(!_0x24113f)return;_0x24113f[_0x129fd8(0x6e1)](_0x2c7611,_0x4815f3,_0x21644b,_0x292c59);},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x5ff)]=function(_0x2e2d6d,_0x1643e1,_0x7ee95d,_0x4ba30a){const _0x569e4f=_0x5507dd;if(!$gameSystem[_0x569e4f(0x577)]())return;const _0x10248e=this[_0x569e4f(0x9f8)]();if(!_0x10248e)return;this[_0x569e4f(0x8ed)]()&&(_0x2e2d6d*=-0x1,_0x1643e1*=-0x1),_0x10248e[_0x569e4f(0x979)](_0x2e2d6d,_0x1643e1,_0x7ee95d,_0x4ba30a);},Game_Battler['prototype'][_0x5507dd(0x614)]=function(_0x2ae402,_0x5228c0,_0x15b595,_0x407312){const _0x4ef222=_0x5507dd;if(!$gameSystem[_0x4ef222(0x577)]())return;const _0x410cc6=this[_0x4ef222(0x9f8)]();if(!_0x410cc6)return;_0x410cc6[_0x4ef222(0x3ab)](_0x2ae402,_0x5228c0,_0x15b595,_0x407312);},Game_Battler[_0x5507dd(0x832)]['changeBattlerOpacity']=function(_0x8837ad,_0x37f706,_0x327820){const _0x4e963c=_0x5507dd;if(!$gameSystem[_0x4e963c(0x577)]())return;const _0x2cddf8=this['battler']();if(!_0x2cddf8)return;_0x2cddf8[_0x4e963c(0x850)](_0x8837ad,_0x37f706,_0x327820);},Game_Battler['prototype'][_0x5507dd(0x688)]=function(){const _0x438c09=_0x5507dd,_0x45b47b=!!this[_0x438c09(0x74f)];this[_0x438c09(0x74f)]=undefined,_0x45b47b&&(this[_0x438c09(0x21b)](),this[_0x438c09(0x69e)]());},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x69e)]=function(){const _0x4ee92c=_0x5507dd;if(!SceneManager[_0x4ee92c(0x4dc)]())return;const _0x572630=this['battler']();if(!_0x572630)return;let _0x474120=this[_0x4ee92c(0x8ed)]()?_0x572630[_0x4ee92c(0x208)]:_0x572630['_svBattlerSprite'][_0x4ee92c(0x208)];_0x474120&&_0x474120[_0x4ee92c(0x3d3)](0x0);},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x651)]=function(_0x367da9,_0x17e292,_0x52a240){const _0x4d26e8=_0x5507dd;if(this['isEnemy']()&&!this[_0x4d26e8(0x77a)]())return;let _0x534d32=0x0,_0x3beba1=0x0;_0x367da9[_0x4d26e8(0x1f2)](/ATTACK[ ](\d+)/i)&&(_0x3beba1=Number(RegExp['$1']),_0x3beba1--);if(this[_0x4d26e8(0x8ed)]()){const _0x13afd1=this[_0x4d26e8(0x86b)]();_0x534d32=_0x13afd1[_0x3beba1]?_0x13afd1[_0x3beba1][_0x4d26e8(0x9fd)]:0x0;}else this[_0x4d26e8(0x890)]()&&(_0x534d32=this[_0x4d26e8(0x5fe)]()[_0x4d26e8(0x9fd)]||0x0);const _0x4a23dd=$dataSystem[_0x4d26e8(0x463)][_0x534d32];_0x367da9[_0x4d26e8(0x1f2)](/attack/i)&&(_0x367da9=['thrust','swing',_0x4d26e8(0x8cb)][_0x4a23dd[_0x4d26e8(0x5a1)]]||'swing'),this['_freezeMotionData']={'motionType':_0x367da9,'weaponImageId':_0x17e292?_0x4a23dd[_0x4d26e8(0x612)]:0x0,'pattern':_0x52a240};},Game_Battler[_0x5507dd(0x832)]['isFriendly']=function(_0x2e3051){const _0xb51fb9=_0x5507dd;if(!_0x2e3051)return![];return _0x2e3051['friendsUnit']()===this[_0xb51fb9(0x4b8)]();},Game_Battler['prototype'][_0x5507dd(0x5d1)]=function(_0xb2fd37){const _0x35d557=_0x5507dd;if(!_0xb2fd37)return![];return _0xb2fd37[_0x35d557(0x442)]()===this[_0x35d557(0x4b8)]();},Game_Battler[_0x5507dd(0x832)][_0x5507dd(0x464)]=function(){return![];},Game_Actor['prototype'][_0x5507dd(0x464)]=function(){const _0x232fbb=_0x5507dd;return this[_0x232fbb(0x39d)]()[_0x232fbb(0x1f2)](/\$/i);},Game_Enemy[_0x5507dd(0x832)][_0x5507dd(0x464)]=function(){return this['hasSvBattler']()&&this['svBattlerName']()['match'](/\$/i);},VisuMZ['BattleCore']['Game_Actor_setup']=Game_Actor['prototype'][_0x5507dd(0x3d3)],Game_Actor[_0x5507dd(0x832)]['setup']=function(_0x5d3e3a){const _0x17d505=_0x5507dd;VisuMZ[_0x17d505(0x8af)][_0x17d505(0x78b)][_0x17d505(0x542)](this,_0x5d3e3a),this['initBattlePortrait']();},Game_Actor[_0x5507dd(0x832)][_0x5507dd(0x419)]=function(){const _0x5a44ed=_0x5507dd;this[_0x5a44ed(0x607)]='',this[_0x5a44ed(0x914)]()&&this['actor']()['note']['match'](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x5a44ed(0x607)]=String(RegExp['$1']));},Game_Actor[_0x5507dd(0x832)][_0x5507dd(0x58b)]=function(){const _0xd69135=_0x5507dd;if(this[_0xd69135(0xa14)]()!=='')return this['getBattlePortrait']();else{if(Imported[_0xd69135(0x6f4)]&&this[_0xd69135(0x6b5)]()!=='')return this[_0xd69135(0x6b5)]();}return'';},Game_Actor[_0x5507dd(0x832)][_0x5507dd(0xa14)]=function(){const _0xa9533a=_0x5507dd;if(this[_0xa9533a(0x607)]===undefined)this[_0xa9533a(0x419)]();return this[_0xa9533a(0x607)];},Game_Actor['prototype']['setBattlePortrait']=function(_0x3070dd){const _0x121fed=_0x5507dd;if(this[_0x121fed(0x607)]===undefined)this['initBattlePortrait']();this[_0x121fed(0x607)]=_0x3070dd;if(SceneManager['isSceneBattle']()&&$gameParty[_0x121fed(0x1a3)]()['includes'](this)){const _0x578b62=SceneManager[_0x121fed(0x590)]['_statusWindow'];if(_0x578b62)_0x578b62[_0x121fed(0x1c8)](this);}},Game_Actor[_0x5507dd(0x832)][_0x5507dd(0x4a9)]=function(){return!![];},Game_Actor['prototype']['isAutoBattle']=function(){const _0x1c06a1=_0x5507dd;if(!this[_0x1c06a1(0x79c)]()&&BattleManager[_0x1c06a1(0x805)])return!![];return Game_Battler['prototype'][_0x1c06a1(0x3ca)][_0x1c06a1(0x542)](this);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x3be)]=Game_Actor[_0x5507dd(0x832)][_0x5507dd(0x85a)],Game_Actor[_0x5507dd(0x832)][_0x5507dd(0x85a)]=function(){const _0x14afe3=_0x5507dd;if(BattleManager[_0x14afe3(0x805)]&&!ConfigManager['autoBattleUseSkills'])return this[_0x14afe3(0x7ee)]();else{return VisuMZ['BattleCore'][_0x14afe3(0x3be)][_0x14afe3(0x542)](this);;}},Game_Actor[_0x5507dd(0x832)][_0x5507dd(0x7ee)]=function(){const _0x14897f=_0x5507dd,_0x2310d2=[],_0x3f0a48=new Game_Action(this);return _0x3f0a48[_0x14897f(0x4b5)](),_0x2310d2[_0x14897f(0x47f)](_0x3f0a48),_0x2310d2;},Game_Actor[_0x5507dd(0x832)][_0x5507dd(0x51e)]=function(){const _0x46c9f1=_0x5507dd;return this['currentClass']()[_0x46c9f1(0x6a3)][_0x46c9f1(0x1f2)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])[_0x46c9f1(0x2ed)](/[\r\n]+/):VisuMZ[_0x46c9f1(0x8af)][_0x46c9f1(0x32e)][_0x46c9f1(0x5ce)]['BattleCmdList'];},Game_Actor['prototype']['svBattlerAnchorX']=function(){const _0x4a0d8a=_0x5507dd;if(this[_0x4a0d8a(0x57b)][_0x4a0d8a(0x82f)]!==undefined)return this[_0x4a0d8a(0x57b)]['svAnchorX'];return this[_0x4a0d8a(0x914)]()[_0x4a0d8a(0x6a3)][_0x4a0d8a(0x1f2)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x4a0d8a(0x57b)][_0x4a0d8a(0x82f)]=eval(RegExp['$1']),this[_0x4a0d8a(0x57b)][_0x4a0d8a(0x8bd)]=eval(RegExp['$2'])):this[_0x4a0d8a(0x57b)][_0x4a0d8a(0x82f)]=Game_Battler[_0x4a0d8a(0x832)][_0x4a0d8a(0x56b)]['call'](this),this['_cache'][_0x4a0d8a(0x82f)];},Game_Actor[_0x5507dd(0x832)][_0x5507dd(0x458)]=function(){const _0x4e5058=_0x5507dd;if(this[_0x4e5058(0x57b)][_0x4e5058(0x8bd)]!==undefined)return this[_0x4e5058(0x57b)]['svAnchorY'];return this[_0x4e5058(0x914)]()[_0x4e5058(0x6a3)][_0x4e5058(0x1f2)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x4e5058(0x57b)][_0x4e5058(0x82f)]=eval(RegExp['$1']),this[_0x4e5058(0x57b)]['svAnchorY']=eval(RegExp['$2'])):this[_0x4e5058(0x57b)][_0x4e5058(0x8bd)]=Game_Battler['prototype'][_0x4e5058(0x458)][_0x4e5058(0x542)](this),this[_0x4e5058(0x57b)][_0x4e5058(0x8bd)];},Game_Actor[_0x5507dd(0x832)]['svBattlerShadowVisible']=function(){const _0x51aa77=_0x5507dd;if(this[_0x51aa77(0x57b)][_0x51aa77(0x4e7)]!==undefined)return this[_0x51aa77(0x57b)][_0x51aa77(0x4e7)];if(this[_0x51aa77(0x914)]()[_0x51aa77(0x6a3)][_0x51aa77(0x1f2)](/<SIDEVIEW SHOW SHADOW>/i))this['_cache'][_0x51aa77(0x4e7)]=!![];else this['actor']()[_0x51aa77(0x6a3)][_0x51aa77(0x1f2)](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x51aa77(0x57b)][_0x51aa77(0x4e7)]=![]:this[_0x51aa77(0x57b)]['svShadow']=Game_Battler[_0x51aa77(0x832)][_0x51aa77(0x27d)][_0x51aa77(0x542)](this);return this[_0x51aa77(0x57b)][_0x51aa77(0x4e7)];},Game_Actor[_0x5507dd(0x832)][_0x5507dd(0x6d4)]=function(){const _0x4f4edf=_0x5507dd;return VisuMZ['BattleCore'][_0x4f4edf(0x32e)][_0x4f4edf(0x9cb)][_0x4f4edf(0x256)];},Game_Actor[_0x5507dd(0x832)][_0x5507dd(0x514)]=function(){const _0x493865=_0x5507dd,_0xcfff4b=this[_0x493865(0x86b)](),_0x28f297=_0xcfff4b[0x0]?_0xcfff4b[0x0][_0x493865(0x9fd)]:0x0,_0x47c8ce=$dataSystem[_0x493865(0x463)][_0x28f297];_0x47c8ce&&this[_0x493865(0x71d)](_0x47c8ce[_0x493865(0x612)]);},Game_Actor[_0x5507dd(0x832)]['performAction']=function(_0x4f5d29){const _0x408154=_0x5507dd;Game_Battler['prototype'][_0x408154(0x60d)][_0x408154(0x542)](this,_0x4f5d29),this[_0x408154(0x4e2)](_0x4f5d29);},Game_Actor[_0x5507dd(0x832)]['getAttackMotion']=function(){const _0x52f3fc=_0x5507dd,_0x23d340=this[_0x52f3fc(0x86b)](),_0x3fec51=_0x23d340[0x0]?_0x23d340[0x0][_0x52f3fc(0x9fd)]:0x0;return $dataSystem['attackMotions'][_0x3fec51];},Game_Actor[_0x5507dd(0x832)][_0x5507dd(0x320)]=function(_0x4d012a){const _0x271f39=_0x5507dd;_0x4d012a=_0x4d012a||0x1,_0x4d012a--;const _0x37dd1b=this[_0x271f39(0x86b)]();return _0x37dd1b[_0x4d012a]?_0x37dd1b[_0x4d012a][_0x271f39(0x6a6)]:0x0;},Game_Actor[_0x5507dd(0x832)]['getAttackMotionSlot']=function(_0x6bedfc){const _0x52ce6c=_0x5507dd;_0x6bedfc=_0x6bedfc||0x1,_0x6bedfc--;const _0x250e87=this[_0x52ce6c(0x86b)](),_0x52c053=_0x250e87[_0x6bedfc]?_0x250e87[_0x6bedfc][_0x52ce6c(0x9fd)]:0x0;return $dataSystem['attackMotions'][_0x52c053];},Game_Actor[_0x5507dd(0x832)][_0x5507dd(0x725)]=function(_0x572a61){const _0xb7199b=_0x5507dd;_0x572a61=_0x572a61||0x1,_0x572a61--;const _0x41c9e0=this[_0xb7199b(0x86b)](),_0x5ce9c4=_0x41c9e0[_0x572a61]?_0x41c9e0[_0x572a61]['wtypeId']:0x0,_0x231d9e=$dataSystem[_0xb7199b(0x463)][_0x5ce9c4];if(_0x231d9e){if(_0x231d9e[_0xb7199b(0x5a1)]===0x0)this['requestMotion'](_0xb7199b(0x474));else{if(_0x231d9e[_0xb7199b(0x5a1)]===0x1)this['requestMotion'](_0xb7199b(0x2ba));else _0x231d9e[_0xb7199b(0x5a1)]===0x2&&this[_0xb7199b(0xa18)](_0xb7199b(0x8cb));}this[_0xb7199b(0x71d)](_0x231d9e['weaponImageId']);}},Game_Battler['prototype'][_0x5507dd(0x958)]=function(_0x20a642){const _0x258f0f=_0x5507dd;this['_activeWeaponSlot']=_0x20a642||0x0,this[_0x258f0f(0x57b)]={};},Game_Battler[_0x5507dd(0x832)]['nextActiveWeaponSlot']=function(){const _0x2172d1=_0x5507dd;this[_0x2172d1(0xa25)]=this[_0x2172d1(0xa25)]||0x0,this['_activeWeaponSlot']++,this[_0x2172d1(0x57b)]={};},Game_Battler['prototype'][_0x5507dd(0x19f)]=function(){const _0x3ef60f=_0x5507dd;this['_activeWeaponSlot']=undefined,this[_0x3ef60f(0x57b)]={};},VisuMZ['BattleCore'][_0x5507dd(0x2e3)]=Game_Actor[_0x5507dd(0x832)]['equips'],Game_Actor[_0x5507dd(0x832)]['equips']=function(){const _0x442cde=_0x5507dd;let _0x2edb57=VisuMZ[_0x442cde(0x8af)][_0x442cde(0x2e3)][_0x442cde(0x542)](this);if(this[_0x442cde(0x38b)])return _0x2edb57;if(this[_0x442cde(0xa25)]!==undefined){this[_0x442cde(0x38b)]=!![];const _0x2670e3=this[_0x442cde(0x22d)]();for(let _0x32586a=0x0;_0x32586a<_0x2670e3['length'];_0x32586a++){_0x2670e3[_0x32586a]===0x1&&this['_activeWeaponSlot']!==_0x32586a&&(_0x2edb57[_0x32586a]=null);}this['_tempEquipCheck']=undefined;}return _0x2edb57;},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x7eb)]=function(_0x556c0a){const _0x180780=_0x5507dd;return _0x556c0a[_0x180780(0x8ed)]()?_0x556c0a[_0x180780(0x86b)]()['length']||0x1:0x1;},Window_BattleLog['prototype'][_0x5507dd(0x207)]=function(_0x2ffe12,_0x3c85aa){const _0x19b7b8=_0x5507dd;_0x2ffe12&&_0x2ffe12['isActor']()&&_0x2ffe12['setActiveWeaponSlot'](_0x3c85aa),this[_0x19b7b8(0x34e)]();},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x230)]=function(_0x440069){const _0x5c5bb0=_0x5507dd;_0x440069&&_0x440069[_0x5c5bb0(0x8ed)]()&&_0x440069[_0x5c5bb0(0x19f)](),this['callNextMethod']();},Game_Actor[_0x5507dd(0x832)]['battleUIOffsetX']=function(){const _0x811a43=_0x5507dd;let _0x2db225=_0x811a43(0x3b4);if(this[_0x811a43(0x253)](_0x2db225))return this['_cache'][_0x2db225];return this[_0x811a43(0x57b)][_0x2db225]=this[_0x811a43(0x3f7)](this[_0x811a43(0x914)]()),this[_0x811a43(0x57b)][_0x2db225];},Game_Actor[_0x5507dd(0x832)][_0x5507dd(0x4c0)]=function(){const _0xa715c3=_0x5507dd;let _0x18bcf5='battleUIOffsetY';if(this['checkCacheKey'](_0x18bcf5))return this[_0xa715c3(0x57b)][_0x18bcf5];return this['_cache'][_0x18bcf5]=this[_0xa715c3(0x1a0)](this[_0xa715c3(0x914)]()),this[_0xa715c3(0x57b)][_0x18bcf5];},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x973)]=Game_Enemy['prototype']['setup'],Game_Enemy[_0x5507dd(0x832)]['setup']=function(_0x42365d,_0x25a268,_0x5c0a81){const _0x4c1b72=_0x5507dd;_0x42365d=DataManager[_0x4c1b72(0x45a)](_0x42365d),VisuMZ[_0x4c1b72(0x8af)][_0x4c1b72(0x973)][_0x4c1b72(0x542)](this,_0x42365d,_0x25a268,_0x5c0a81),Imported['VisuMZ_1_ElementStatusCore']&&this[_0x4c1b72(0x7e8)](),this[_0x4c1b72(0x34c)](),this[_0x4c1b72(0x371)](),Imported[_0x4c1b72(0x9d6)]&&this[_0x4c1b72(0x1bf)]();},Game_Enemy[_0x5507dd(0x832)]['clearBattleCoreData']=function(){const _0x11a493=_0x5507dd,_0xc7ead8=VisuMZ['BattleCore']['Settings'][_0x11a493(0x77b)];this[_0x11a493(0x42d)]=_0xc7ead8[_0x11a493(0x488)],this[_0x11a493(0x790)]={};},Game_Enemy['prototype']['setupBattleCoreData']=function(){const _0x451640=_0x5507dd,_0x4bff34=VisuMZ[_0x451640(0x8af)][_0x451640(0x32e)]['Enemy'],_0x1e16c3=this[_0x451640(0x7f3)]()[_0x451640(0x6a3)];this['_svBattlerData']={'name':'','wtypeId':_0x4bff34[_0x451640(0x8c2)],'collapse':_0x4bff34[_0x451640(0x885)],'motionIdle':_0x4bff34[_0x451640(0x406)],'width':_0x4bff34[_0x451640(0x7f5)]||0x40,'height':_0x4bff34[_0x451640(0x894)]||0x40,'anchorX':_0x4bff34['AnchorX']||0x0,'anchorY':_0x4bff34['AnchorY']||0x0,'shadow':_0x4bff34[_0x451640(0x84f)]};_0x1e16c3[_0x451640(0x1f2)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this['_attackAnimationId']=Number(RegExp['$1']));const _0x1a5082=this[_0x451640(0x790)];if(_0x1e16c3[_0x451640(0x1f2)](/<SIDEVIEW BATTLER: (.*)>/i))_0x1a5082[_0x451640(0x55f)]=String(RegExp['$1']);else{if(_0x1e16c3['match'](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x2e157c=String(RegExp['$1'])[_0x451640(0x2ed)](/[\r\n]+/)[_0x451640(0x9ff)]('');_0x1a5082[_0x451640(0x55f)]=DataManager[_0x451640(0x3bd)](_0x2e157c);}}_0x1e16c3[_0x451640(0x1f2)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x1a5082['anchorX']=eval(RegExp['$1']),_0x1a5082[_0x451640(0x9ae)]=eval(RegExp['$2']));if(_0x1e16c3['match'](/<SIDEVIEW COLLAPSE>/i))_0x1a5082['collapse']=!![];else _0x1e16c3[_0x451640(0x1f2)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x1a5082[_0x451640(0x865)]=![]);if(_0x1e16c3[_0x451640(0x1f2)](/<SIDEVIEW SHOW SHADOW>/i))_0x1a5082[_0x451640(0x9c6)]=!![];else _0x1e16c3['match'](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x1a5082['shadow']=![]);if(_0x1e16c3[_0x451640(0x1f2)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x1a5082[_0x451640(0x936)]=String(RegExp['$1'])[_0x451640(0x5c8)]()[_0x451640(0x48c)]();else{if(_0x1e16c3[_0x451640(0x1f2)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0xe05937=String(RegExp['$1'])[_0x451640(0x2ed)](/[\r\n]+/)[_0x451640(0x9ff)]('');_0x1a5082[_0x451640(0x936)]=DataManager[_0x451640(0x3bd)](_0xe05937);}}_0x1e16c3[_0x451640(0x1f2)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x1a5082[_0x451640(0x4fa)]=Number(RegExp['$1']),_0x1a5082[_0x451640(0x80e)]=Number(RegExp['$2']));if(_0x1e16c3[_0x451640(0x1f2)](/<SIDEVIEW WEAPON: (.*)>/i))_0x1a5082['wtypeId']=DataManager[_0x451640(0x37a)](RegExp['$1']);else{if(_0x1e16c3[_0x451640(0x1f2)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x350805=String(RegExp['$1'])[_0x451640(0x2ed)](/[\r\n]+/)[_0x451640(0x9ff)](''),_0x15fda1=DataManager[_0x451640(0x3bd)](_0x350805);_0x1a5082[_0x451640(0x9fd)]=DataManager[_0x451640(0x37a)](_0x15fda1);}}if(Imported[_0x451640(0x9d6)]){const _0x54ad54=this[_0x451640(0x391)]();for(const _0x11dcb9 of _0x54ad54){const _0x7f8c0b=this[_0x451640(0x6de)](_0x11dcb9)[_0x451640(0x5fa)][_0x451640(0x5d6)]()[_0x451640(0x48c)](),_0x3c6782=_0x11dcb9[_0x451640(0x5d6)]()[_0x451640(0x48c)]();if(_0x1e16c3[_0x451640(0x1f2)](VisuMZ[_0x451640(0x977)][_0x451640(0x9e3)]['SvBattlerSolo-%1-%2'[_0x451640(0x5d0)](_0x3c6782,_0x7f8c0b)]))_0x1a5082[_0x451640(0x55f)]=String(RegExp['$1']);else{if(_0x1e16c3[_0x451640(0x1f2)](VisuMZ['ElementStatusCore']['RegExp'][_0x451640(0x1fb)[_0x451640(0x5d0)](_0x3c6782,_0x7f8c0b)])){const _0x1885ed=String(RegExp['$1'])[_0x451640(0x2ed)](/[\r\n]+/)['remove']('');_0x1a5082[_0x451640(0x55f)]=DataManager['processRandomizedData'](_0x1885ed);}}if(_0x1e16c3['match'](VisuMZ['ElementStatusCore'][_0x451640(0x9e3)]['SvWeaponSolo-%1-%2'[_0x451640(0x5d0)](_0x3c6782,_0x7f8c0b)]))_0x1a5082[_0x451640(0x9fd)]=DataManager['getWtypeIdWithName'](RegExp['$1']);else{if(_0x1e16c3['match'](VisuMZ[_0x451640(0x977)]['RegExp'][_0x451640(0x3ba)['format'](_0x3c6782,_0x7f8c0b)])){const _0x4b6f1c=String(RegExp['$1'])[_0x451640(0x2ed)](/[\r\n]+/)['remove'](''),_0x544216=DataManager[_0x451640(0x3bd)](_0x4b6f1c);_0x1a5082[_0x451640(0x9fd)]=DataManager[_0x451640(0x37a)](_0x544216);}}if(_0x1e16c3[_0x451640(0x1f2)](VisuMZ['ElementStatusCore'][_0x451640(0x9e3)][_0x451640(0x64b)[_0x451640(0x5d0)](_0x3c6782,_0x7f8c0b)]))_0x1a5082[_0x451640(0x936)]=String(RegExp['$1'])[_0x451640(0x5c8)]()['trim']();else{if(_0x1e16c3[_0x451640(0x1f2)](VisuMZ[_0x451640(0x977)][_0x451640(0x9e3)][_0x451640(0x7ea)[_0x451640(0x5d0)](_0x3c6782,_0x7f8c0b)])){const _0x3cb5be=String(RegExp['$1'])[_0x451640(0x2ed)](/[\r\n]+/)[_0x451640(0x9ff)]('');_0x1a5082[_0x451640(0x936)]=DataManager[_0x451640(0x3bd)](_0x3cb5be);}}}}},Game_Enemy[_0x5507dd(0x832)][_0x5507dd(0x746)]=function(){return this['_attackAnimationId']||0x0;},Game_Enemy['prototype'][_0x5507dd(0x5f5)]=function(){const _0x378505=_0x5507dd;return this[_0x378505(0x746)]();},Game_Enemy['prototype'][_0x5507dd(0x320)]=function(_0x51cf03){return this['attackAnimationId1']();},Game_Enemy[_0x5507dd(0x832)][_0x5507dd(0x23c)]=function(){const _0x50516d=_0x5507dd;if(this[_0x50516d(0x7f3)]()[_0x50516d(0x6a3)]['match'](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x50516d(0x832)]['canBattlerMove'][_0x50516d(0x542)](this);},Game_Enemy[_0x5507dd(0x832)][_0x5507dd(0x349)]=function(){const _0x3516fe=_0x5507dd;if(this[_0x3516fe(0x7f3)]()[_0x3516fe(0x6a3)][_0x3516fe(0x1f2)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy['prototype'][_0x5507dd(0x314)]=function(){const _0x1ec627=_0x5507dd,_0x368f1e=[];for(const _0x340141 of this[_0x1ec627(0x7f3)]()[_0x1ec627(0x815)]){const _0x11db0f=$dataSkills[_0x340141[_0x1ec627(0x3c2)]];if(_0x11db0f&&!_0x368f1e['includes'](_0x11db0f))_0x368f1e[_0x1ec627(0x47f)](_0x11db0f);}return _0x368f1e;},Game_Enemy[_0x5507dd(0x832)][_0x5507dd(0x3b4)]=function(){const _0x1ae39d=_0x5507dd;let _0x267f76=_0x1ae39d(0x3b4);if(this['checkCacheKey'](_0x267f76))return this[_0x1ae39d(0x57b)][_0x267f76];return this[_0x1ae39d(0x57b)][_0x267f76]=this[_0x1ae39d(0x3f7)](this[_0x1ae39d(0x7f3)]()),this['_cache'][_0x267f76];},Game_Enemy[_0x5507dd(0x832)][_0x5507dd(0x4c0)]=function(){const _0x49f175=_0x5507dd;let _0x25bf54=_0x49f175(0x4c0);if(this['checkCacheKey'](_0x25bf54))return this[_0x49f175(0x57b)][_0x25bf54];return this[_0x49f175(0x57b)][_0x25bf54]=this[_0x49f175(0x1a0)](this[_0x49f175(0x7f3)]()),this[_0x49f175(0x57b)][_0x25bf54];},Game_Enemy[_0x5507dd(0x832)][_0x5507dd(0x5fe)]=function(){const _0x55d1c0=_0x5507dd;if(this[_0x55d1c0(0x790)]!==undefined)return this['_svBattlerData'];return this[_0x55d1c0(0x371)](),this[_0x55d1c0(0x790)];},Game_Enemy[_0x5507dd(0x832)][_0x5507dd(0x77a)]=function(){const _0x5e36d1=_0x5507dd;return this[_0x5e36d1(0x5fe)]()[_0x5e36d1(0x55f)]!=='';},Game_Enemy['prototype'][_0x5507dd(0x31f)]=function(){const _0x410f7b=_0x5507dd;return this['svBattlerData']()[_0x410f7b(0x55f)];},Game_Enemy[_0x5507dd(0x832)]['battlerSmoothImage']=function(){const _0x829e0c=_0x5507dd;return this[_0x829e0c(0x77a)]()?VisuMZ[_0x829e0c(0x8af)]['Settings'][_0x829e0c(0x9cb)][_0x829e0c(0x256)]:VisuMZ[_0x829e0c(0x8af)][_0x829e0c(0x32e)]['Enemy'][_0x829e0c(0x256)];},Game_Enemy['prototype']['performAction']=function(_0x345756){const _0x58e85a=_0x5507dd;Game_Battler[_0x58e85a(0x832)]['performAction'][_0x58e85a(0x542)](this,_0x345756);if(this[_0x58e85a(0x77a)]())this[_0x58e85a(0x4e2)](_0x345756);},Game_Enemy['prototype'][_0x5507dd(0x224)]=function(){const _0x328984=_0x5507dd,_0x455c3d=this[_0x328984(0x5fe)]()[_0x328984(0x9fd)]||0x0,_0x464469=$dataSystem['attackMotions'][_0x455c3d];if(_0x464469){if(_0x464469['type']===0x0)this[_0x328984(0xa18)](_0x328984(0x474));else{if(_0x464469['type']===0x1)this[_0x328984(0xa18)](_0x328984(0x2ba));else _0x464469[_0x328984(0x5a1)]===0x2&&this[_0x328984(0xa18)](_0x328984(0x8cb));}}},Game_Enemy[_0x5507dd(0x832)][_0x5507dd(0x514)]=function(){const _0x51d8ac=_0x5507dd,_0x57b8e5=this['svBattlerData']()['wtypeId']||0x0,_0x15b916=$dataSystem[_0x51d8ac(0x463)][_0x57b8e5];_0x15b916&&this['startWeaponAnimation'](_0x15b916[_0x51d8ac(0x612)]);},Game_Enemy[_0x5507dd(0x832)][_0x5507dd(0x3ac)]=function(){const _0x49f229=_0x5507dd,_0x5d0527=this[_0x49f229(0x5fe)]()[_0x49f229(0x9fd)]||0x0;return $dataSystem['attackMotions'][_0x5d0527];},Game_Enemy['prototype'][_0x5507dd(0x597)]=function(_0x290b1f){return this['getAttackMotion']();},Game_Enemy[_0x5507dd(0x832)][_0x5507dd(0x6fb)]=function(){const _0x4fc4ad=_0x5507dd;Game_Battler[_0x4fc4ad(0x832)][_0x4fc4ad(0x6fb)][_0x4fc4ad(0x542)](this),this['isSpriteVisible']()&&this['hasSvBattler']()&&this[_0x4fc4ad(0xa18)](_0x4fc4ad(0x5ca)),SoundManager['playEnemyDamage']();},Game_Enemy['prototype'][_0x5507dd(0x37e)]=function(){const _0x4ef24c=_0x5507dd;Game_Battler[_0x4ef24c(0x832)]['performEvasion'][_0x4ef24c(0x542)](this),this[_0x4ef24c(0xa18)]('evade');},Game_Enemy[_0x5507dd(0x832)][_0x5507dd(0x8c5)]=function(){const _0x35f016=_0x5507dd;Game_Battler[_0x35f016(0x832)][_0x35f016(0x8c5)][_0x35f016(0x542)](this),this[_0x35f016(0xa18)](_0x35f016(0x478));},Game_Enemy[_0x5507dd(0x832)][_0x5507dd(0x5b7)]=function(){const _0x1e2462=_0x5507dd;Game_Battler['prototype'][_0x1e2462(0x5b7)][_0x1e2462(0x542)](this),this[_0x1e2462(0x224)]();},Game_Enemy[_0x5507dd(0x832)][_0x5507dd(0x393)]=function(){const _0x50b8dd=_0x5507dd;if(this['hasSvBattler']()){if(this[_0x50b8dd(0x53e)]()>=0x1)return!![];return this['svBattlerData']()[_0x50b8dd(0x865)];}else return!![];},Game_Enemy[_0x5507dd(0x832)][_0x5507dd(0x56b)]=function(){const _0x310a89=_0x5507dd;return this[_0x310a89(0x5fe)]()['anchorX'];},Game_Enemy[_0x5507dd(0x832)][_0x5507dd(0x458)]=function(){const _0x351455=_0x5507dd;return this[_0x351455(0x5fe)]()['anchorY'];},Game_Enemy[_0x5507dd(0x832)][_0x5507dd(0x27d)]=function(){const _0x1ec483=_0x5507dd;return this[_0x1ec483(0x5fe)]()[_0x1ec483(0x9c6)];},VisuMZ[_0x5507dd(0x8af)]['Game_Enemy_transform']=Game_Enemy[_0x5507dd(0x832)][_0x5507dd(0x893)],Game_Enemy[_0x5507dd(0x832)][_0x5507dd(0x893)]=function(_0x1a9dcb){const _0x33994b=_0x5507dd;VisuMZ[_0x33994b(0x8af)][_0x33994b(0x6cc)]['call'](this,_0x1a9dcb),this[_0x33994b(0x34c)](),this['setupBattleCoreData']();const _0x2be2b1=this[_0x33994b(0x9f8)]();if(_0x2be2b1)_0x2be2b1[_0x33994b(0x45b)](this);},Game_Unit[_0x5507dd(0x832)][_0x5507dd(0x357)]=function(_0x39cda6){const _0x178033=_0x5507dd;for(const _0x53db10 of this['members']()){if(_0x53db10)_0x53db10[_0x178033(0x357)](_0x39cda6);}},Game_Unit[_0x5507dd(0x832)][_0x5507dd(0x55e)]=function(){const _0x373fa6=_0x5507dd,_0x395465=this[_0x373fa6(0x682)]();return _0x395465[Math[_0x373fa6(0x52b)](_0x395465[_0x373fa6(0x77e)])];},VisuMZ['BattleCore'][_0x5507dd(0x48d)]=Game_Party[_0x5507dd(0x832)][_0x5507dd(0x629)],Game_Party[_0x5507dd(0x832)][_0x5507dd(0x629)]=function(_0x1dcac1){const _0x580a1e=_0x5507dd;VisuMZ[_0x580a1e(0x8af)][_0x580a1e(0x48d)][_0x580a1e(0x542)](this,_0x1dcac1),BattleManager[_0x580a1e(0x415)]();},VisuMZ[_0x5507dd(0x8af)]['Game_Party_removeActor']=Game_Party[_0x5507dd(0x832)][_0x5507dd(0x355)],Game_Party[_0x5507dd(0x832)][_0x5507dd(0x355)]=function(_0x284d77){const _0x500abe=_0x5507dd;VisuMZ[_0x500abe(0x8af)]['Game_Party_removeActor'][_0x500abe(0x542)](this,_0x284d77),BattleManager['refreshStatusWindow']();},VisuMZ['BattleCore'][_0x5507dd(0x3b3)]=Game_Troop['prototype'][_0x5507dd(0x3d3)],Game_Troop[_0x5507dd(0x832)]['setup']=function(_0x33cdfd){const _0x4984d4=_0x5507dd;$gameTemp[_0x4984d4(0x5a2)](),$gameTemp[_0x4984d4(0x77d)](_0x33cdfd),VisuMZ['BattleCore']['Game_Troop_setup'][_0x4984d4(0x542)](this,_0x33cdfd);},VisuMZ[_0x5507dd(0x8af)]['Game_Troop_expTotal']=Game_Troop[_0x5507dd(0x832)][_0x5507dd(0x8c0)],Game_Troop[_0x5507dd(0x832)][_0x5507dd(0x8c0)]=function(){const _0x2e72c3=_0x5507dd;let _0x447f26=VisuMZ[_0x2e72c3(0x8af)][_0x2e72c3(0x477)][_0x2e72c3(0x542)](this);return this[_0x2e72c3(0x64f)]&&(_0x447f26*=this[_0x2e72c3(0x64f)]()),Math[_0x2e72c3(0x199)](_0x447f26);},Game_Troop[_0x5507dd(0x832)][_0x5507dd(0x64f)]=function(){return 0x1;},VisuMZ[_0x5507dd(0x8af)]['Game_Map_setupBattleback']=Game_Map['prototype'][_0x5507dd(0x4ab)],Game_Map[_0x5507dd(0x832)][_0x5507dd(0x4ab)]=function(){const _0x2aae4f=_0x5507dd;VisuMZ['BattleCore'][_0x2aae4f(0x325)][_0x2aae4f(0x542)](this),this[_0x2aae4f(0x94f)]();},Game_Map['prototype']['setupBattlebackBattleCore']=function(){const _0x45a632=_0x5507dd;this[_0x45a632(0x4f8)]={},this['_regionBattleback2']={};if(!$dataMap)return;const _0x149fbc=$dataMap[_0x45a632(0x6a3)];if(!_0x149fbc)return;const _0x73f2f4=_0x149fbc[_0x45a632(0x1f2)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x73f2f4)for(const _0x163353 of _0x73f2f4){_0x163353[_0x45a632(0x1f2)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x441356=Number(RegExp['$1']),_0xe917d2=Number(RegExp['$2']),_0x14e9dc=_0xe917d2===0x1?this[_0x45a632(0x4f8)]:this[_0x45a632(0x3f6)],_0x43273f=String(RegExp['$3']);_0x14e9dc[_0x441356]=_0x43273f;}},VisuMZ[_0x5507dd(0x8af)]['Game_Map_battleback1Name']=Game_Map[_0x5507dd(0x832)][_0x5507dd(0x4f0)],Game_Map[_0x5507dd(0x832)][_0x5507dd(0x4f0)]=function(){const _0x232868=_0x5507dd;if(!BattleManager['isBattleTest']()){const _0x2d4635=$gamePlayer[_0x232868(0x543)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x232868(0x4f8)]&&this[_0x232868(0x4f8)][_0x2d4635])return this[_0x232868(0x4f8)][_0x2d4635];}return VisuMZ[_0x232868(0x8af)][_0x232868(0x81d)][_0x232868(0x542)](this);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x25c)]=Game_Map[_0x5507dd(0x832)][_0x5507dd(0x268)],Game_Map[_0x5507dd(0x832)][_0x5507dd(0x268)]=function(){const _0x330919=_0x5507dd;if(!BattleManager[_0x330919(0x935)]()){const _0x35aaa8=$gamePlayer[_0x330919(0x543)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x330919(0x4f8)]&&this['_regionBattleback2'][_0x35aaa8])return this[_0x330919(0x3f6)][_0x35aaa8];}return VisuMZ[_0x330919(0x8af)][_0x330919(0x25c)][_0x330919(0x542)](this);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x62a)]=Game_Map[_0x5507dd(0x832)][_0x5507dd(0x9fb)],Game_Map[_0x5507dd(0x832)][_0x5507dd(0x9fb)]=function(){const _0x4e66ac=_0x5507dd;let _0x20078f=JsonEx[_0x4e66ac(0x4b7)](VisuMZ[_0x4e66ac(0x8af)][_0x4e66ac(0x62a)][_0x4e66ac(0x542)](this));return VisuMZ['BattleCore'][_0x4e66ac(0x639)](_0x20078f);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x639)]=function(_0x44a2a5){const _0x4e784a=_0x5507dd;var _0x1f97f5,_0x1f1d14,_0x2dc532;for(_0x2dc532=_0x44a2a5[_0x4e784a(0x77e)]-0x1;_0x2dc532>0x0;_0x2dc532--){_0x1f97f5=Math[_0x4e784a(0x8fd)](Math['random']()*(_0x2dc532+0x1)),_0x1f1d14=_0x44a2a5[_0x2dc532],_0x44a2a5[_0x2dc532]=_0x44a2a5[_0x1f97f5],_0x44a2a5[_0x1f97f5]=_0x1f1d14;}return _0x44a2a5;},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x27b)]=Game_Interpreter[_0x5507dd(0x832)][_0x5507dd(0x410)],Game_Interpreter[_0x5507dd(0x832)][_0x5507dd(0x410)]=function(_0x589d0c){const _0x544358=_0x5507dd;return $gameTemp[_0x544358(0x95c)](this),VisuMZ[_0x544358(0x8af)][_0x544358(0x27b)]['call'](this,_0x589d0c);},VisuMZ['BattleCore']['Game_Interpreter_updateWaitMode']=Game_Interpreter[_0x5507dd(0x832)]['updateWaitMode'],Game_Interpreter['prototype']['updateWaitMode']=function(){const _0x24b4bf=_0x5507dd;if(SceneManager[_0x24b4bf(0x4dc)]())switch(this[_0x24b4bf(0x4e9)]){case _0x24b4bf(0x772):if(Imported[_0x24b4bf(0x703)]){if($gameScreen[_0x24b4bf(0x1ca)]()[_0x24b4bf(0x731)]>0x0)return!![];this[_0x24b4bf(0x4e9)]='';}break;case'battleAnimation':if(BattleManager[_0x24b4bf(0x3c4)][_0x24b4bf(0x676)]())return!![];this[_0x24b4bf(0x4e9)]='';break;case _0x24b4bf(0x6ee):if(Imported[_0x24b4bf(0x703)]){if($gameScreen[_0x24b4bf(0x1ca)]()[_0x24b4bf(0x64d)]>0x0)return!![];if($gameScreen[_0x24b4bf(0x1ca)]()['cameraOffsetDuration']>0x0)return!![];this[_0x24b4bf(0x4e9)]='';}break;case _0x24b4bf(0x1be):if(BattleManager[_0x24b4bf(0x3c4)][_0x24b4bf(0x1de)]())return!![];this[_0x24b4bf(0x4e9)]='';break;case _0x24b4bf(0x803):if(BattleManager[_0x24b4bf(0x3c4)]['isAnyoneFloating']())return!![];this[_0x24b4bf(0x4e9)]='';break;case _0x24b4bf(0x631):if(BattleManager['_spriteset']['isAnyoneJumping']())return!![];this[_0x24b4bf(0x4e9)]='';break;case _0x24b4bf(0x618):if(BattleManager[_0x24b4bf(0x5f6)]['isBusy']())return!![];this['_waitMode']='';break;case _0x24b4bf(0x51c):if(BattleManager['_spriteset'][_0x24b4bf(0x67f)]())return!![];this[_0x24b4bf(0x4e9)]='';break;case _0x24b4bf(0x38d):if(BattleManager[_0x24b4bf(0x3c4)][_0x24b4bf(0x3a8)]())return!![];this[_0x24b4bf(0x4e9)]='';break;case'battleGrow':if(BattleManager[_0x24b4bf(0x3c4)][_0x24b4bf(0x971)]())return!![];this[_0x24b4bf(0x4e9)]='';break;case _0x24b4bf(0x85f):if(BattleManager['_spriteset']['isAnyoneSkewing']())return!![];this[_0x24b4bf(0x4e9)]='';break;case'battleProjectiles':if(Imported[_0x24b4bf(0x2b3)]){if(BattleManager[_0x24b4bf(0x3c4)][_0x24b4bf(0x6b9)]())return!![];this[_0x24b4bf(0x4e9)]='';}break;case _0x24b4bf(0x687):if(Imported[_0x24b4bf(0x703)]){if($gameScreen['battleCameraData']()[_0x24b4bf(0x4de)]>0x0)return!![];this[_0x24b4bf(0x4e9)]='';}break;case _0x24b4bf(0x809):if(BattleManager[_0x24b4bf(0x3c4)]['isAnyoneSpinning']())return!![];this[_0x24b4bf(0x4e9)]='';break;case _0x24b4bf(0x527):if(Imported[_0x24b4bf(0x703)]){if($gameScreen[_0x24b4bf(0x1ca)]()[_0x24b4bf(0x588)]>0x0)return!![];this['_waitMode']='';}break;case _0x24b4bf(0x1f8):if(Imported[_0x24b4bf(0x656)]){if(BattleManager['_spriteset'][_0x24b4bf(0x664)]){if(BattleManager['_spriteset']['isAnyoneInjectAniPrepping']())return!![];this[_0x24b4bf(0x4e9)]='battleInjectAni';}else this[_0x24b4bf(0x4e9)]='';break;}break;case _0x24b4bf(0x363):if(Imported[_0x24b4bf(0x656)]){if(BattleManager['_spriteset']['isAnyoneInjectAnimating']())return!![];this[_0x24b4bf(0x4e9)]='';}break;}return VisuMZ[_0x24b4bf(0x8af)][_0x24b4bf(0x570)]['call'](this);},VisuMZ['BattleCore']['Game_Interpreter_command301']=Game_Interpreter['prototype']['command301'],Game_Interpreter['prototype'][_0x5507dd(0x525)]=function(_0x518eae){const _0x34943a=_0x5507dd;return!$gameParty[_0x34943a(0x276)]()?this[_0x34943a(0x65c)](_0x518eae):VisuMZ['BattleCore'][_0x34943a(0x594)]['call'](this,_0x518eae);},Game_Interpreter['prototype'][_0x5507dd(0x744)]=function(_0x5393d5){const _0x5d4e10=_0x5507dd;return VisuMZ[_0x5d4e10(0x8af)]['Game_Interpreter_command301']['call'](this,_0x5393d5),BattleManager[_0x5d4e10(0x79d)](_0x3ea3f7=>{this['_branch'][this['_indent']]=_0x3ea3f7;}),!![];},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x87d)]=function(_0x387980){const _0xaa8c18=_0x5507dd,_0x2616e4=$dataCommonEvents[_0x387980];if(!_0x2616e4)return![];if(_0x2616e4[_0xaa8c18(0x784)]['length']<=0x1)return![];return!![];},Game_Interpreter[_0x5507dd(0x832)][_0x5507dd(0x65c)]=function(_0x24d89a){const _0x7421f7=_0x5507dd,_0x29eeec=VisuMZ['BattleCore'][_0x7421f7(0x32e)][_0x7421f7(0x2dd)],_0x3d068d=_0x29eeec['BattleStartEvent'],_0x26b2a4=$dataCommonEvents[_0x3d068d];if(_0x26b2a4&&VisuMZ['BattleCore']['CheckMapBattleEventValid'](_0x3d068d)){const _0xd2665=this[_0x7421f7(0x511)]()?this[_0x7421f7(0x6e9)]:0x0,_0x3624e4=_0x26b2a4[_0x7421f7(0x784)];this[_0x7421f7(0x2e6)](_0x3624e4,_0xd2665),this[_0x7421f7(0x3f0)]=JsonEx[_0x7421f7(0x4b7)](this['_list']);const _0x432d6d={'code':0xbc3,'indent':this['_indent'],'parameters':JsonEx['makeDeepCopy'](_0x24d89a)};return this[_0x7421f7(0x3f0)]['splice'](this[_0x7421f7(0x99e)]+0x1,0x0,_0x432d6d),!![];}else return VisuMZ[_0x7421f7(0x8af)][_0x7421f7(0x594)][_0x7421f7(0x542)](this,_0x24d89a);},VisuMZ['BattleCore'][_0x5507dd(0x994)]=BattleManager[_0x5507dd(0x95a)],BattleManager[_0x5507dd(0x95a)]=function(){const _0x5a6af2=_0x5507dd;VisuMZ[_0x5a6af2(0x8af)][_0x5a6af2(0x994)]['call'](this),this[_0x5a6af2(0x39c)]();},BattleManager[_0x5507dd(0x39c)]=function(){const _0x74651e=_0x5507dd,_0x4c9e8d=VisuMZ[_0x74651e(0x8af)][_0x74651e(0x32e)]['Mechanics'],_0xbf6fed=_0x4c9e8d['BattleStartEvent'];_0xbf6fed&&VisuMZ[_0x74651e(0x8af)][_0x74651e(0x87d)](_0xbf6fed)&&(this[_0x74651e(0x47e)]=!![],$gameTemp[_0x74651e(0x81f)](_0x4c9e8d[_0x74651e(0x59f)]),$gameMap['updateInterpreter'](),$gameMap['_interpreter'][_0x74651e(0x31e)]=!![]),_0x4c9e8d[_0x74651e(0x3a6)]>0x0&&(this[_0x74651e(0x926)]=!![]);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x7c9)]=Scene_Map['prototype'][_0x5507dd(0xa1b)],Scene_Map[_0x5507dd(0x832)][_0x5507dd(0xa1b)]=function(){const _0x90f92a=_0x5507dd;if(BattleManager[_0x90f92a(0x47e)])return;VisuMZ[_0x90f92a(0x8af)][_0x90f92a(0x7c9)][_0x90f92a(0x542)](this);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x1f3)]=Scene_Map[_0x5507dd(0x832)][_0x5507dd(0x206)],Scene_Map[_0x5507dd(0x832)][_0x5507dd(0x206)]=function(){const _0x4d7e07=_0x5507dd;BattleManager[_0x4d7e07(0x47e)]?this[_0x4d7e07(0x459)]():VisuMZ[_0x4d7e07(0x8af)][_0x4d7e07(0x1f3)][_0x4d7e07(0x542)](this);},Scene_Map[_0x5507dd(0x832)]['battleCorePreBattleCommonEvent']=function(){const _0x52510b=_0x5507dd;this[_0x52510b(0x405)]=!![];},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x788)]=SceneManager[_0x5507dd(0x1ea)],SceneManager[_0x5507dd(0x1ea)]=function(){const _0x4e2612=_0x5507dd;if(BattleManager[_0x4e2612(0x47e)])return![];return VisuMZ[_0x4e2612(0x8af)][_0x4e2612(0x788)][_0x4e2612(0x542)](this);},VisuMZ[_0x5507dd(0x8af)]['Game_Interpreter_terminate']=Game_Interpreter['prototype'][_0x5507dd(0x29f)],Game_Interpreter[_0x5507dd(0x832)][_0x5507dd(0x29f)]=function(){const _0x31b1df=_0x5507dd;VisuMZ[_0x31b1df(0x8af)]['Game_Interpreter_terminate'][_0x31b1df(0x542)](this),this[_0x31b1df(0x31e)]&&(this['_preBattleCommonEvent']=undefined,SceneManager['_scene'][_0x31b1df(0x4d6)]());},Scene_Map[_0x5507dd(0x832)]['battleCoreResumeLaunchBattle']=function(){const _0x19693f=_0x5507dd;BattleManager[_0x19693f(0x47e)]=undefined,BattleManager[_0x19693f(0x1f4)]=!![],this[_0x19693f(0x6e2)]();},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x210)]=Scene_Map[_0x5507dd(0x832)][_0x5507dd(0x2aa)],Scene_Map[_0x5507dd(0x832)][_0x5507dd(0x2aa)]=function(){const _0x4ecca2=_0x5507dd;VisuMZ[_0x4ecca2(0x8af)][_0x4ecca2(0x210)][_0x4ecca2(0x542)](this),BattleManager[_0x4ecca2(0x1f4)]&&(this[_0x4ecca2(0x405)]=!![],BattleManager['_battleCoreBattleResumeAfter']=undefined);},VisuMZ[_0x5507dd(0x8af)]['Scene_Map_initialize']=Scene_Map[_0x5507dd(0x832)][_0x5507dd(0x2aa)],Scene_Map['prototype'][_0x5507dd(0x2aa)]=function(){const _0x36dde9=_0x5507dd;VisuMZ['BattleCore']['Scene_Map_initialize'][_0x36dde9(0x542)](this),$gameTemp[_0x36dde9(0x5a2)]();},VisuMZ[_0x5507dd(0x8af)]['Scene_ItemBase_applyItem']=Scene_ItemBase['prototype'][_0x5507dd(0x343)],Scene_ItemBase[_0x5507dd(0x832)][_0x5507dd(0x343)]=function(){const _0x50bb67=_0x5507dd;VisuMZ[_0x50bb67(0x8af)][_0x50bb67(0x2e7)][_0x50bb67(0x542)](this);if(this[_0x50bb67(0x92a)]()[_0x50bb67(0x6a3)][_0x50bb67(0x1f2)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this[_0x50bb67(0x92a)]()[_0x50bb67(0x6a3)][_0x50bb67(0x1f2)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x50bb67(0x43d)]=[]),DataManager['checkAutoCustomActionSequenceNotetagEffect'](this[_0x50bb67(0x92a)]())&&($gameTemp[_0x50bb67(0x43d)]=[]);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x74b)]=Scene_Options[_0x5507dd(0x832)][_0x5507dd(0x258)],Scene_Options[_0x5507dd(0x832)][_0x5507dd(0x258)]=function(){const _0x2ca4b4=_0x5507dd;let _0x1c283e=VisuMZ[_0x2ca4b4(0x8af)][_0x2ca4b4(0x74b)][_0x2ca4b4(0x542)](this);const _0x2d4446=VisuMZ['BattleCore'][_0x2ca4b4(0x32e)];if(_0x2d4446[_0x2ca4b4(0xa24)][_0x2ca4b4(0x2ae)]&&_0x2d4446[_0x2ca4b4(0xa24)]['AdjustRect'])_0x1c283e+=0x2;if(_0x2d4446[_0x2ca4b4(0x1b3)][_0x2ca4b4(0x2ae)]&&_0x2d4446['HpGauge']['AdjustRect'])_0x1c283e+=0x1;return _0x1c283e;},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x481)]=Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x2aa)],Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x2aa)]=function(){const _0x51ea85=_0x5507dd;VisuMZ[_0x51ea85(0x8af)][_0x51ea85(0x481)][_0x51ea85(0x542)](this),this[_0x51ea85(0x3e4)]();},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x9a4)]=Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x52f)],Scene_Battle['prototype'][_0x5507dd(0x52f)]=function(){const _0x49fcb6=_0x5507dd;SceneManager[_0x49fcb6(0x499)]()?(Scene_Message['prototype']['start']['call'](this),this['_spriteset']&&this[_0x49fcb6(0x3c4)][_0x49fcb6(0x3ce)](),BattleManager[_0x49fcb6(0x99b)]&&BattleManager[_0x49fcb6(0x940)]()):(VisuMZ[_0x49fcb6(0x8af)][_0x49fcb6(0x9a4)][_0x49fcb6(0x542)](this),$gameTroop['onBattleStartOnceParallels']());},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x29a)]=Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x6e2)],Scene_Battle[_0x5507dd(0x832)]['stop']=function(){const _0x1fd219=_0x5507dd;SceneManager[_0x1fd219(0x3f3)]()?Scene_Message[_0x1fd219(0x832)][_0x1fd219(0x6e2)]['call'](this):VisuMZ[_0x1fd219(0x8af)][_0x1fd219(0x29a)]['call'](this);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x44b)]=Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x29f)],Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x29f)]=function(){const _0x195461=_0x5507dd;SceneManager['isNextSceneBattleTransitionable']()?Scene_Message['prototype'][_0x195461(0x29f)][_0x195461(0x542)](this):VisuMZ[_0x195461(0x8af)][_0x195461(0x44b)]['call'](this),this[_0x195461(0x3e4)]();},Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x89c)]=function(){const _0x4b1070=_0x5507dd;if(ConfigManager['uiMenuStyle']&&ConfigManager[_0x4b1070(0x982)]!==undefined)return ConfigManager[_0x4b1070(0x982)];else{if(this[_0x4b1070(0x475)]()===_0x4b1070(0x67e))return![];else{return Scene_Message['prototype'][_0x4b1070(0x89c)][_0x4b1070(0x542)](this);;}}},VisuMZ['BattleCore'][_0x5507dd(0x857)]=Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x37f)],Scene_Battle['prototype'][_0x5507dd(0x37f)]=function(){const _0x3bd0cf=_0x5507dd;this[_0x3bd0cf(0x6d8)](),VisuMZ[_0x3bd0cf(0x8af)]['Scene_Battle_createAllWindows'][_0x3bd0cf(0x542)](this),this[_0x3bd0cf(0x93e)]();},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x373)]=Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x2e9)],Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x2e9)]=function(){const _0x599bc2=_0x5507dd;VisuMZ['BattleCore']['Scene_Battle_createCancelButton']['call'](this),this[_0x599bc2(0x475)]()==='border'&&this['repositionCancelButtonBorderStyle']();},Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x89e)]=function(_0x1f48c2){const _0x5aa56a=_0x5507dd;_0x1f48c2?(this[_0x5aa56a(0x4a8)]['x']=(Graphics['width']-Graphics[_0x5aa56a(0x8e0)])/0x2,this[_0x5aa56a(0x4a8)]['y']=(Graphics[_0x5aa56a(0x80e)]-Graphics[_0x5aa56a(0x38c)])/0x2):(this[_0x5aa56a(0x4a8)]['x']=Graphics[_0x5aa56a(0x4fa)]*0xa,this[_0x5aa56a(0x4a8)]['y']=Graphics[_0x5aa56a(0x80e)]*0xa);},VisuMZ['BattleCore']['Scene_Battle_selectNextCommand']=Scene_Battle[_0x5507dd(0x832)]['selectNextCommand'],Scene_Battle['prototype'][_0x5507dd(0x6a2)]=function(){const _0x41bfe6=_0x5507dd,_0x9896e5=BattleManager[_0x41bfe6(0x914)]();VisuMZ[_0x41bfe6(0x8af)][_0x41bfe6(0x853)][_0x41bfe6(0x542)](this);if(_0x9896e5){if(_0x9896e5===BattleManager[_0x41bfe6(0x914)]())return;if(_0x9896e5===BattleManager[_0x41bfe6(0x1bb)])return;if(_0x9896e5[_0x41bfe6(0x9f8)]())_0x9896e5[_0x41bfe6(0x9f8)]()['stepBack']();}},VisuMZ['BattleCore'][_0x5507dd(0x255)]=Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x299)],Scene_Battle[_0x5507dd(0x832)]['selectPreviousCommand']=function(){const _0x109c55=_0x5507dd,_0x47fc9f=BattleManager['actor']();if(_0x47fc9f&&_0x47fc9f[_0x109c55(0x9f8)])_0x47fc9f[_0x109c55(0x9f8)]()[_0x109c55(0x4af)]();VisuMZ['BattleCore'][_0x109c55(0x255)][_0x109c55(0x542)](this);},VisuMZ[_0x5507dd(0x8af)]['Scene_Battle_logWindowRect']=Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x608)],Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x608)]=function(){const _0x149608=_0x5507dd;if(VisuMZ[_0x149608(0x8af)][_0x149608(0x32e)]['BattleLog'][_0x149608(0x5ac)])return VisuMZ['BattleCore'][_0x149608(0x32e)]['BattleLog'][_0x149608(0x5ac)][_0x149608(0x542)](this);return VisuMZ[_0x149608(0x8af)][_0x149608(0x75c)][_0x149608(0x542)](this);},VisuMZ['BattleCore']['Scene_Battle_createPartyCommandWindow']=Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x9ee)],Scene_Battle[_0x5507dd(0x832)]['createPartyCommandWindow']=function(){const _0x174cd9=_0x5507dd;VisuMZ[_0x174cd9(0x8af)][_0x174cd9(0x45c)][_0x174cd9(0x542)](this),this[_0x174cd9(0x4bf)]();},Scene_Battle[_0x5507dd(0x832)]['createPartyCommandWindowBattleCore']=function(){const _0x59e7c5=_0x5507dd,_0x2fccba=this['_partyCommandWindow'];_0x2fccba[_0x59e7c5(0x96c)](_0x59e7c5(0x42e),this[_0x59e7c5(0x47b)][_0x59e7c5(0x9f4)](this)),_0x2fccba[_0x59e7c5(0x96c)](_0x59e7c5(0x895),this[_0x59e7c5(0x220)][_0x59e7c5(0x9f4)](this));const _0x1b50a4=this[_0x59e7c5(0x475)]();switch(_0x1b50a4){case'xp':case _0x59e7c5(0x8ac):return this['_partyCommandWindow'][_0x59e7c5(0x504)](0x1);break;}},Scene_Battle['prototype']['commandAutoBattle']=function(){const _0x49b5d4=_0x5507dd;BattleManager[_0x49b5d4(0x805)]=!![],$gameParty[_0x49b5d4(0x1fe)](),this[_0x49b5d4(0x6a2)](),BattleManager['isTpb']()&&(BattleManager['_inputting']=![]);},Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x220)]=function(){const _0x1a52ea=_0x5507dd;this[_0x1a52ea(0x9bf)]()?(this['_callSceneOptions']=!![],this['_logWindow'][_0x1a52ea(0x47f)]('addText',VisuMZ[_0x1a52ea(0x8af)]['Settings'][_0x1a52ea(0x80f)]['ActiveTpbOptionsMessage'])):this[_0x1a52ea(0x1a4)]();},Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x9bf)]=function(){const _0x5329ab=_0x5507dd;return BattleManager[_0x5329ab(0x9fe)]();},Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x1a4)]=function(){const _0x466aaf=_0x5507dd;this[_0x466aaf(0x438)]=![],this['_spriteset']['update'](),this[_0x466aaf(0x4a8)][_0x466aaf(0x2ac)]=![];if(BattleManager[_0x466aaf(0x935)]())($dataSystem[_0x466aaf(0x4f0)]||$dataSystem[_0x466aaf(0x268)])&&SceneManager[_0x466aaf(0x9b7)]();else($gameMap['battleback1Name']()||$gameMap[_0x466aaf(0x268)]())&&SceneManager[_0x466aaf(0x9b7)]();SceneManager[_0x466aaf(0x47f)](Scene_Options),BattleManager['isTpb']()&&(BattleManager[_0x466aaf(0x99b)]=BattleManager['actor']());},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x8df)]=Scene_Battle[_0x5507dd(0x832)]['updateBattleProcess'],Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0xa1c)]=function(){const _0x4ce735=_0x5507dd;VisuMZ['BattleCore']['Scene_Battle_updateBattleProcess'][_0x4ce735(0x542)](this);if(this[_0x4ce735(0x438)]&&!BattleManager[_0x4ce735(0x1bb)])this[_0x4ce735(0x1a4)]();},VisuMZ[_0x5507dd(0x8af)]['Scene_Battle_update']=Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x3ce)],Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x3ce)]=function(){const _0x5f2fef=_0x5507dd;VisuMZ[_0x5f2fef(0x8af)]['Scene_Battle_update'][_0x5f2fef(0x542)](this),this[_0x5f2fef(0x938)]();},Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x93e)]=function(){const _0x424c46=_0x5507dd,_0x420de1=this[_0x424c46(0x2ab)]();this[_0x424c46(0x90b)]=new Window_AutoBattleCancel(_0x420de1),this[_0x424c46(0x90b)]['hide'](),this['addChild'](this[_0x424c46(0x90b)]);},Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x2ab)]=function(){const _0xb26a52=_0x5507dd;return VisuMZ[_0xb26a52(0x8af)][_0xb26a52(0x32e)][_0xb26a52(0xa24)][_0xb26a52(0x680)]['call'](this);},Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x3e4)]=function(){this['_onceParallelInterpreters']=[];},Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x938)]=function(){const _0x5e020b=_0x5507dd;if(!this[_0x5e020b(0x70c)])return;for(const _0x4f8167 of this[_0x5e020b(0x70c)]){_0x4f8167&&_0x4f8167[_0x5e020b(0x3ce)]();}},Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x36e)]=function(_0x2bf3d5){const _0x5fe92d=_0x5507dd,_0xf0cbe8=$dataCommonEvents[_0x2bf3d5];if(!_0xf0cbe8)return;const _0x2858d4=new Game_BattleOnceParallelInterpreter();this[_0x5fe92d(0x428)](_0x2858d4),_0x2858d4[_0x5fe92d(0x7c0)](_0x2bf3d5);},Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x428)]=function(_0x321950){const _0x15490d=_0x5507dd;this[_0x15490d(0x70c)]=this[_0x15490d(0x70c)]||[],this['_onceParallelInterpreters']['push'](_0x321950);},Scene_Battle['prototype'][_0x5507dd(0x876)]=function(_0x4758da){const _0x3f9eda=_0x5507dd;this[_0x3f9eda(0x70c)]=this['_onceParallelInterpreters']||[],this[_0x3f9eda(0x70c)][_0x3f9eda(0x9ff)](_0x4758da);},Game_Troop[_0x5507dd(0x832)][_0x5507dd(0x7a0)]=function(){const _0x3af998=_0x5507dd;for(const _0x4620f2 of this[_0x3af998(0x1d9)]()[_0x3af998(0x34f)]){if(!this[_0x3af998(0x2b7)](_0x4620f2))continue;SceneManager[_0x3af998(0x590)][_0x3af998(0x310)](_0x4620f2);}},Game_Troop['prototype']['doesPageHaveOnceParallelStart']=function(_0x4648c6){const _0x2774f0=_0x5507dd;if(!_0x4648c6)return;for(const _0x46dc60 of _0x4648c6[_0x2774f0(0x784)]){if([0x6c,0x198][_0x2774f0(0x351)](_0x46dc60[_0x2774f0(0x674)])){const _0x197226=_0x46dc60[_0x2774f0(0x645)][0x0];if(_0x197226[_0x2774f0(0x1f2)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle[_0x5507dd(0x832)]['playOnceParallelTroopPage']=function(_0x588c5f){const _0x16ea29=_0x5507dd;if(!_0x588c5f)return;const _0x4c8219=new Game_BattleOnceParallelInterpreter();this[_0x16ea29(0x428)](_0x4c8219),_0x4c8219[_0x16ea29(0x484)](_0x588c5f);};function Game_BattleOnceParallelInterpreter(){this['initialize'](...arguments);}Game_BattleOnceParallelInterpreter[_0x5507dd(0x832)]=Object[_0x5507dd(0x8d1)](Game_Interpreter[_0x5507dd(0x832)]),Game_BattleOnceParallelInterpreter[_0x5507dd(0x832)]['constructor']=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x5507dd(0x832)]['setCommonEvent']=function(_0x3c1be0){const _0x44f74e=_0x5507dd,_0x4d3d66=$dataCommonEvents[_0x3c1be0];_0x4d3d66?this[_0x44f74e(0x3d3)](_0x4d3d66[_0x44f74e(0x784)],0x0):this[_0x44f74e(0x29f)]();},Game_BattleOnceParallelInterpreter['prototype']['terminate']=function(){const _0x4ba9c4=_0x5507dd;if(!SceneManager[_0x4ba9c4(0x4dc)]())return;SceneManager[_0x4ba9c4(0x590)][_0x4ba9c4(0x876)](this),Game_Interpreter['prototype']['terminate']['call'](this);},Game_BattleOnceParallelInterpreter[_0x5507dd(0x832)][_0x5507dd(0x484)]=function(_0x3e3fae){const _0x39e0c0=_0x5507dd;_0x3e3fae?this['setup'](_0x3e3fae['list'],0x0):this[_0x39e0c0(0x29f)]();},Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x82a)]=function(){const _0xe5c56=_0x5507dd;return VisuMZ[_0xe5c56(0x8af)][_0xe5c56(0x32e)][_0xe5c56(0x80f)]['DisablePartyCmd'];},VisuMZ['BattleCore'][_0x5507dd(0x6be)]=Scene_Battle[_0x5507dd(0x832)]['startPartyCommandSelection'],Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x27e)]=function(){const _0x2dffff=_0x5507dd;this[_0x2dffff(0x82a)]()?this[_0x2dffff(0x52a)]():VisuMZ[_0x2dffff(0x8af)][_0x2dffff(0x6be)][_0x2dffff(0x542)](this);},Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x52a)]=function(){const _0x38e211=_0x5507dd;if(BattleManager[_0x38e211(0x92b)]())this[_0x38e211(0x6a2)]();else BattleManager[_0x38e211(0x240)]()&&VisuMZ['BattleCore']['Scene_Battle_startPartyCommandSelection']['call'](this);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x7a2)]=Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x976)],Scene_Battle[_0x5507dd(0x832)]['commandFight']=function(){const _0xde5de5=_0x5507dd;BattleManager[_0xde5de5(0x240)]()?(this[_0xde5de5(0x849)](),this[_0xde5de5(0x49e)]()):VisuMZ[_0xde5de5(0x8af)]['Scene_Battle_commandFight'][_0xde5de5(0x542)](this);},Scene_Battle['prototype'][_0x5507dd(0x849)]=function(){const _0x11cc8c=_0x5507dd;if(!VisuMZ['BattleCore']['TpbActiveChangeEnabled'])return;if(Imported[_0x11cc8c(0x7fc)]&&BattleManager['isCTB']())return;const _0x4b09ac=$gameParty[_0x11cc8c(0x682)]()[_0x11cc8c(0x1b4)](_0x5b8838=>_0x5b8838[_0x11cc8c(0x195)]()&&_0x5b8838[_0x11cc8c(0x613)]());BattleManager[_0x11cc8c(0x823)]=_0x4b09ac[0x0]||null,BattleManager[_0x11cc8c(0x823)]&&BattleManager[_0x11cc8c(0x823)][_0x11cc8c(0x3f4)](_0x11cc8c(0x834));},VisuMZ[_0x5507dd(0x8af)]['Scene_Battle_createActorCommandWindow']=Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x1ba)],Scene_Battle[_0x5507dd(0x832)]['createActorCommandWindow']=function(){const _0x2f3c5e=_0x5507dd;VisuMZ['BattleCore']['Scene_Battle_createActorCommandWindow'][_0x2f3c5e(0x542)](this),this[_0x2f3c5e(0x4bb)]();},Scene_Battle[_0x5507dd(0x832)]['createActorCommandWindowBattleCore']=function(){const _0x321688=_0x5507dd,_0x10832b=this[_0x321688(0x545)];_0x10832b[_0x321688(0x96c)]('escape',this[_0x321688(0x584)]['bind'](this)),_0x10832b['setHandler'](_0x321688(0x42e),this[_0x321688(0x81b)][_0x321688(0x9f4)](this)),_0x10832b[_0x321688(0x96c)](_0x321688(0x9eb),this[_0x321688(0x896)][_0x321688(0x9f4)](this)),BattleManager['isTpb']()&&(this['isPartyCommandWindowDisabled']()?delete _0x10832b[_0x321688(0x35c)]['cancel']:_0x10832b[_0x321688(0x96c)](_0x321688(0x7cb),this[_0x321688(0x931)][_0x321688(0x9f4)](this)));},Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x584)]=function(){const _0x4c73df=_0x5507dd;this[_0x4c73df(0x327)]();},Scene_Battle['prototype']['actorCommandAutoBattle']=function(){const _0x34e669=_0x5507dd;BattleManager[_0x34e669(0x914)]()[_0x34e669(0x19d)](),BattleManager[_0x34e669(0x98a)](),BattleManager[_0x34e669(0x287)](),this[_0x34e669(0x6a1)]();},Scene_Battle['prototype']['actorCommandSingleSkill']=function(){const _0x303dd7=_0x5507dd,_0x4c85e1=BattleManager[_0x303dd7(0x40d)]();_0x4c85e1[_0x303dd7(0x2fc)](this[_0x303dd7(0x545)][_0x303dd7(0x78f)]()),this[_0x303dd7(0x717)]();},Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x931)]=function(){const _0x11510c=_0x5507dd;this[_0x11510c(0x8d8)]()?this['performTpbActiveCheckSwitch']():this[_0x11510c(0x96d)]();},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x9ec)]=![],Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x8d8)]=function(){const _0x1422d2=_0x5507dd;if(Imported[_0x1422d2(0x7fc)]&&BattleManager[_0x1422d2(0x902)]())return![];else{if(!VisuMZ[_0x1422d2(0x8af)][_0x1422d2(0x9ec)])return![];const _0x38133b=$gameParty[_0x1422d2(0x682)]()['filter'](_0xb47aaa=>_0xb47aaa['isTpbCharged']()&&_0xb47aaa[_0x1422d2(0x613)]());return _0x38133b[_0x1422d2(0x77e)]>0x0&&BattleManager[_0x1422d2(0x914)]()!==_0x38133b[_0x38133b[_0x1422d2(0x77e)]-0x1];}},Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x738)]=function(){const _0x1c55f7=_0x5507dd,_0x13735c=BattleManager[_0x1c55f7(0x914)](),_0x390d89=_0x13735c[_0x1c55f7(0x9f8)]();if(_0x390d89)_0x390d89[_0x1c55f7(0x4af)]();const _0x3c239e=$gameParty[_0x1c55f7(0x682)]()[_0x1c55f7(0x1b4)](_0x2697af=>_0x2697af[_0x1c55f7(0x195)]()&&_0x2697af[_0x1c55f7(0x613)]()),_0xb4e6d=_0x3c239e[_0x1c55f7(0x33f)](_0x13735c),_0x524794=_0x3c239e[_0xb4e6d+0x1];BattleManager[_0x1c55f7(0x823)]=_0x524794||null;if(_0x524794)_0x524794['setActionState']('inputting');_0x13735c[_0x1c55f7(0x3f4)](_0x1c55f7(0x97b)),this['changeInputWindow']();},Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x96d)]=function(){const _0x14ba45=_0x5507dd;this[_0x14ba45(0x8ff)][_0x14ba45(0x3d3)](),this[_0x14ba45(0x545)]['close']();if(!VisuMZ[_0x14ba45(0x8af)][_0x14ba45(0x9ec)])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x14ba45(0x902)]())return;if(BattleManager[_0x14ba45(0x823)]){BattleManager[_0x14ba45(0x823)][_0x14ba45(0x3f4)](_0x14ba45(0x97b));const _0x52344c=BattleManager[_0x14ba45(0x823)]['battler']();if(_0x52344c)_0x52344c[_0x14ba45(0x4af)]();}BattleManager['_currentActor']=null;},VisuMZ[_0x5507dd(0x8af)]['Scene_Battle_createHelpWindow']=Scene_Battle['prototype'][_0x5507dd(0x8b1)],Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x8b1)]=function(){const _0x4aa158=_0x5507dd;VisuMZ[_0x4aa158(0x8af)]['Scene_Battle_createHelpWindow'][_0x4aa158(0x542)](this),this['createHelpWindowBattleCore']();},Scene_Battle[_0x5507dd(0x832)]['createHelpWindowBattleCore']=function(){const _0xbb526b=_0x5507dd;this[_0xbb526b(0x545)][_0xbb526b(0x5b5)](this[_0xbb526b(0x28f)]),this['_partyCommandWindow'][_0xbb526b(0x5b5)](this[_0xbb526b(0x28f)]);},Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x475)]=function(){const _0x32d9cd=_0x5507dd;if($gameTemp[_0x32d9cd(0x1ef)]!==undefined)return $gameTemp[_0x32d9cd(0x1ef)];if(this['_battleLayoutStyle'])return this[_0x32d9cd(0x1cb)];return this[_0x32d9cd(0x1cb)]=VisuMZ[_0x32d9cd(0x8af)][_0x32d9cd(0x32e)]['BattleLayout'][_0x32d9cd(0x5be)][_0x32d9cd(0x5c8)]()[_0x32d9cd(0x48c)](),this[_0x32d9cd(0x1cb)]==='sideview_ui'&&!Imported[_0x32d9cd(0x903)]&&(this['_battleLayoutStyle']=_0x32d9cd(0x92e)),this[_0x32d9cd(0x1cb)];},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x5d7)]=Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x397)],Scene_Battle['prototype']['windowAreaHeight']=function(){const _0x4578da=_0x5507dd,_0x188102=this[_0x4578da(0x475)]();switch(_0x188102){case _0x4578da(0x784):return this['calcWindowHeight'](Math['max'](0x1,$gameParty[_0x4578da(0x7b8)]()),!![]);break;default:return VisuMZ[_0x4578da(0x8af)][_0x4578da(0x5d7)][_0x4578da(0x542)](this);break;}},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x720)]=Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x227)],Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x227)]=function(){const _0x4f752c=_0x5507dd,_0x2e502e=this[_0x4f752c(0x475)]();switch(_0x2e502e){case _0x4f752c(0x67e):return this[_0x4f752c(0x339)]();break;case _0x4f752c(0x92e):case _0x4f752c(0x784):case'xp':case'portrait':default:return VisuMZ['BattleCore'][_0x4f752c(0x720)][_0x4f752c(0x542)](this);break;}},Scene_Battle['prototype']['statusWindowRect']=function(){const _0x9814f9=_0x5507dd,_0x38f33d=this[_0x9814f9(0x475)]();switch(_0x38f33d){case'xp':case _0x9814f9(0x8ac):return this[_0x9814f9(0x358)]();break;case _0x9814f9(0x67e):return this[_0x9814f9(0x52c)]();break;case _0x9814f9(0x92e):case _0x9814f9(0x784):default:return this['statusWindowRectDefaultStyle']();break;}},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x634)]=Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x8b9)],Scene_Battle[_0x5507dd(0x832)]['partyCommandWindowRect']=function(){const _0x1fc2de=_0x5507dd,_0x34063d=this[_0x1fc2de(0x475)]();switch(_0x34063d){case'xp':case _0x1fc2de(0x8ac):return this[_0x1fc2de(0x764)]();break;case _0x1fc2de(0x67e):return this['partyCommandWindowRectBorderStyle']();case _0x1fc2de(0x92e):case'list':default:return this[_0x1fc2de(0x67d)]();break;}},Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x67d)]=function(){const _0x20fff8=_0x5507dd,_0x46e63d=VisuMZ[_0x20fff8(0x8af)][_0x20fff8(0x32e)][_0x20fff8(0x7b7)],_0xb674d7=_0x46e63d['CommandWidth']||0xc0,_0x5efba9=this['windowAreaHeight'](),_0xfc2524=this[_0x20fff8(0x89c)]()?Graphics[_0x20fff8(0x8e0)]-_0xb674d7:0x0,_0x4375ea=Graphics[_0x20fff8(0x38c)]-_0x5efba9;return new Rectangle(_0xfc2524,_0x4375ea,_0xb674d7,_0x5efba9);},Scene_Battle[_0x5507dd(0x832)]['actorCommandWindowRect']=function(){const _0x3a522b=_0x5507dd;return this[_0x3a522b(0x8b9)]();},VisuMZ['BattleCore'][_0x5507dd(0x4bc)]=Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x27f)],Scene_Battle[_0x5507dd(0x832)]['updateStatusWindowPosition']=function(){const _0x9ba8c=_0x5507dd,_0x12c9b0=this[_0x9ba8c(0x475)]();switch(_0x12c9b0){case'xp':case'portrait':case _0x9ba8c(0x67e):break;case _0x9ba8c(0x92e):case _0x9ba8c(0x784):default:VisuMZ[_0x9ba8c(0x8af)][_0x9ba8c(0x4bc)][_0x9ba8c(0x542)](this);break;}},VisuMZ['BattleCore']['Scene_Battle_startActorSelection']=Scene_Battle[_0x5507dd(0x832)]['startActorSelection'],Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x9a5)]=function(){const _0x374605=_0x5507dd;VisuMZ[_0x374605(0x8af)][_0x374605(0x6c0)][_0x374605(0x542)](this),this['makeTargetSelectionMoreVisible']();},VisuMZ['BattleCore'][_0x5507dd(0x7d9)]=Scene_Battle[_0x5507dd(0x832)]['startEnemySelection'],Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0xa30)]=function(){const _0x1db16f=_0x5507dd;VisuMZ['BattleCore']['Scene_Battle_startEnemySelection'][_0x1db16f(0x542)](this),this[_0x1db16f(0x728)][_0x1db16f(0x4d1)](),this['makeTargetSelectionMoreVisible']();},Scene_Battle['prototype']['makeTargetSelectionMoreVisible']=function(){const _0x480f52=_0x5507dd,_0x4b913e=this['battleLayoutStyle']();['xp',_0x480f52(0x8ac),'border'][_0x480f52(0x351)](_0x4b913e)&&this[_0x480f52(0x545)]['close'](),(_0x4b913e===_0x480f52(0x67e)||this[_0x480f52(0x9a3)]())&&(this['_skillWindow'][_0x480f52(0x541)](),this[_0x480f52(0x54d)][_0x480f52(0x541)]());},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x9b0)]=Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x389)],Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x389)]=function(){const _0x1a5d36=_0x5507dd;VisuMZ[_0x1a5d36(0x8af)][_0x1a5d36(0x9b0)][_0x1a5d36(0x542)](this),this['okTargetSelectionVisibility']();},Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x244)]=function(){const _0x238440=_0x5507dd;return['attack',_0x238440(0x716),_0x238440(0x9eb)][_0x238440(0x351)](this['_actorCommandWindow'][_0x238440(0x9b6)]());},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x4ed)]=Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x8a5)],Scene_Battle['prototype']['onActorCancel']=function(){const _0x236e81=_0x5507dd;this[_0x236e81(0x244)]()?(this[_0x236e81(0x713)]['show'](),this[_0x236e81(0x197)][_0x236e81(0xa1a)](),this[_0x236e81(0x545)]['activate']()):VisuMZ['BattleCore'][_0x236e81(0x4ed)][_0x236e81(0x542)](this),this[_0x236e81(0x1b9)]();},VisuMZ['BattleCore'][_0x5507dd(0x4c2)]=Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x1dd)],Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x1dd)]=function(){const _0x2d56e6=_0x5507dd;VisuMZ['BattleCore'][_0x2d56e6(0x4c2)]['call'](this),this['okTargetSelectionVisibility']();},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x412)]=Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x683)],Scene_Battle[_0x5507dd(0x832)]['onEnemyCancel']=function(){const _0x11fdf5=_0x5507dd;this['isNonSubmenuCancel']()?(this[_0x11fdf5(0x713)][_0x11fdf5(0x59e)](),this[_0x11fdf5(0x728)][_0x11fdf5(0xa1a)](),this[_0x11fdf5(0x545)][_0x11fdf5(0x1c6)]()):VisuMZ[_0x11fdf5(0x8af)][_0x11fdf5(0x412)][_0x11fdf5(0x542)](this),this[_0x11fdf5(0x1b9)]();},Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x662)]=function(){const _0x5a6468=_0x5507dd,_0x59e89d=this[_0x5a6468(0x475)]();(_0x59e89d===_0x5a6468(0x67e)||this[_0x5a6468(0x9a3)]())&&(this['_skillWindow'][_0x5a6468(0x6ce)](),this[_0x5a6468(0x547)][_0x5a6468(0x465)]&&this[_0x5a6468(0x547)][_0x5a6468(0x59e)](),this['_itemWindow']['open'](),this[_0x5a6468(0x54d)]['active']&&this['_itemWindow'][_0x5a6468(0x59e)]());},Scene_Battle['prototype']['cancelTargetSelectionVisibility']=function(){const _0x1dbd87=_0x5507dd,_0x2eb0f2=this[_0x1dbd87(0x475)]();['xp','portrait','border'][_0x1dbd87(0x351)](_0x2eb0f2)&&this[_0x1dbd87(0x545)][_0x1dbd87(0x6ce)](),this['okTargetSelectionVisibility']();},Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x53a)]=function(){const _0x5f3c64=_0x5507dd,_0x4c34bb=VisuMZ['BattleCore'][_0x5f3c64(0x32e)][_0x5f3c64(0x7b7)],_0x23ee4a=Window_BattleStatus[_0x5f3c64(0x832)][_0x5f3c64(0x9e2)](),_0x2d4c3b=Graphics[_0x5f3c64(0x8e0)]-(_0x4c34bb[_0x5f3c64(0x272)]||0xc0),_0x3282ba=this[_0x5f3c64(0x397)]()+_0x23ee4a,_0x185974=this['isRightInputMode']()?0x0:Graphics[_0x5f3c64(0x8e0)]-_0x2d4c3b,_0x29b721=Graphics[_0x5f3c64(0x38c)]-_0x3282ba+_0x23ee4a;return new Rectangle(_0x185974,_0x29b721,_0x2d4c3b,_0x3282ba);},Scene_Battle['prototype'][_0x5507dd(0x358)]=function(){const _0x181917=_0x5507dd,_0x1599bc=Window_BattleStatus[_0x181917(0x832)][_0x181917(0x9e2)](),_0x1351c3=Graphics[_0x181917(0x8e0)],_0x502e44=this[_0x181917(0x397)]()+_0x1599bc,_0x1e520f=0x0,_0x308add=Graphics[_0x181917(0x38c)]-_0x502e44+_0x1599bc;return new Rectangle(_0x1e520f,_0x308add,_0x1351c3,_0x502e44);},Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x764)]=function(){const _0x47f5ba=_0x5507dd,_0xb70634=Graphics[_0x47f5ba(0x8e0)]/0x2,_0x2abed5=this[_0x47f5ba(0xa0c)](VisuMZ['BattleCore']['Settings']['BattleLayout']['XPActorCommandLines'],!![]),_0x4bfd4f=Math[_0x47f5ba(0x95e)]((Graphics[_0x47f5ba(0x8e0)]-_0xb70634)/0x2),_0x4e2dd3=Graphics[_0x47f5ba(0x38c)]-_0x2abed5-this[_0x47f5ba(0x358)]()[_0x47f5ba(0x80e)];return new Rectangle(_0x4bfd4f,_0x4e2dd3,_0xb70634,_0x2abed5);},Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x339)]=function(){const _0x4fa8b2=_0x5507dd,_0x1ace7d=Graphics[_0x4fa8b2(0x4fa)],_0x661145=Math[_0x4fa8b2(0x95e)]((Graphics[_0x4fa8b2(0x8e0)]-_0x1ace7d)/0x2),_0x52f42e=this['helpAreaHeight'](),_0xb6ac09=(Graphics['height']-Graphics[_0x4fa8b2(0x38c)])/-0x2;return new Rectangle(_0x661145,_0xb6ac09,_0x1ace7d,_0x52f42e);},Scene_Battle['prototype']['statusWindowRectBorderStyle']=function(){const _0x3d2108=_0x5507dd,_0x391440=Graphics['width'],_0x324eb8=Math['round']((Graphics[_0x3d2108(0x8e0)]-_0x391440)/0x2),_0x38b0de=this[_0x3d2108(0xa0c)](0x4,!![]),_0x763301=Graphics[_0x3d2108(0x38c)]-_0x38b0de+(Graphics['height']-Graphics[_0x3d2108(0x38c)])/0x2;return new Rectangle(_0x324eb8,_0x763301,_0x391440,_0x38b0de);},Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x904)]=function(){const _0xccd0ed=_0x5507dd,_0xe895f3=Math[_0xccd0ed(0x8fd)](Graphics[_0xccd0ed(0x4fa)]/0x3),_0x5193f4=this[_0xccd0ed(0x89c)]()?(Graphics[_0xccd0ed(0x4fa)]+Graphics[_0xccd0ed(0x8e0)])/0x2-_0xe895f3:(Graphics['width']-Graphics[_0xccd0ed(0x8e0)])/-0x2,_0x1bb52d=this['helpWindowRectBorderStyle'](),_0x1ad7a5=_0x1bb52d['y']+_0x1bb52d[_0xccd0ed(0x80e)],_0x5c0830=this[_0xccd0ed(0x52c)](),_0x4fe2ce=_0x5c0830['y']-_0x1ad7a5;return new Rectangle(_0x5193f4,_0x1ad7a5,_0xe895f3,_0x4fe2ce);},Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x9aa)]=function(){const _0x24173a=_0x5507dd,_0x3c829e=Math[_0x24173a(0x199)](Graphics[_0x24173a(0x4fa)]/0x3),_0x2977c9=Math['round']((Graphics[_0x24173a(0x8e0)]-_0x3c829e)/0x2),_0x54003c=this[_0x24173a(0x904)](),_0x47510c=_0x54003c['y'],_0x2ad641=_0x54003c[_0x24173a(0x80e)];return new Rectangle(_0x2977c9,_0x47510c,_0x3c829e,_0x2ad641);},Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x619)]=function(){const _0x48bf13=_0x5507dd;this[_0x48bf13(0x6d9)]['y']=this['_helpWindow']['y']+this[_0x48bf13(0x28f)]['height'],this[_0x48bf13(0x89c)]()?this['battleLayoutStyle']()===_0x48bf13(0x67e)?this[_0x48bf13(0x6d9)]['x']=0x8:this[_0x48bf13(0x6d9)]['x']=-this[_0x48bf13(0x6d9)][_0x48bf13(0x4fa)]-0x4:this[_0x48bf13(0x6d9)]['x']=Graphics[_0x48bf13(0x4fa)]-(Graphics[_0x48bf13(0x4fa)]-Graphics[_0x48bf13(0x8e0)])/0x2-this[_0x48bf13(0x6d9)][_0x48bf13(0x4fa)]-0x4;},VisuMZ['BattleCore']['Scene_Battle_skillWindowRect']=Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x84c)],Scene_Battle[_0x5507dd(0x832)]['skillWindowRect']=function(){const _0x6c932b=_0x5507dd;if(this[_0x6c932b(0x475)]()===_0x6c932b(0x67e))return this[_0x6c932b(0x9aa)]();else return this[_0x6c932b(0x9a3)]()?this[_0x6c932b(0x23e)]():VisuMZ[_0x6c932b(0x8af)][_0x6c932b(0x4b4)][_0x6c932b(0x542)](this);},VisuMZ[_0x5507dd(0x8af)]['Scene_Battle_itemWindowRect']=Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x1f9)],Scene_Battle['prototype']['itemWindowRect']=function(){const _0x103a1e=_0x5507dd;if(this[_0x103a1e(0x475)]()===_0x103a1e(0x67e))return this[_0x103a1e(0x9aa)]();else return this[_0x103a1e(0x9a3)]()?this['skillItemWindowRectMiddle']():VisuMZ[_0x103a1e(0x8af)][_0x103a1e(0x7e4)][_0x103a1e(0x542)](this);},Scene_Battle[_0x5507dd(0x832)][_0x5507dd(0x9a3)]=function(){const _0x31cfa1=_0x5507dd;return VisuMZ['BattleCore'][_0x31cfa1(0x32e)][_0x31cfa1(0x7b7)]['SkillItemMiddleLayout'];},Scene_Battle[_0x5507dd(0x832)]['skillItemWindowRectMiddle']=function(){const _0x166061=_0x5507dd,_0x51cd18=Sprite_Button[_0x166061(0x832)]['blockWidth']()*0x2+0x4;let _0x27bd97=Graphics[_0x166061(0x8e0)]-_0x51cd18;Imported['VisuMZ_0_CoreEngine']&&SceneManager[_0x166061(0x7d2)]()&&(_0x27bd97+=_0x51cd18);const _0x183faf=this[_0x166061(0x33d)](),_0x1bff7b=Graphics[_0x166061(0x38c)]-_0x183faf-this['statusWindowRect']()['height']+Window_BattleStatus[_0x166061(0x832)][_0x166061(0x9e2)](),_0x1d33ae=0x0;return new Rectangle(_0x1d33ae,_0x183faf,_0x27bd97,_0x1bff7b);},Scene_Battle['prototype']['createEnemyNameContainer']=function(){const _0x26d969=_0x5507dd;if(!VisuMZ[_0x26d969(0x8af)][_0x26d969(0x32e)]['Enemy'][_0x26d969(0x7cf)])return;this['_enemyNameContainer']=new Sprite(),this['_enemyNameContainer']['x']=this[_0x26d969(0x4a8)]['x'],this[_0x26d969(0x8c9)]['y']=this['_windowLayer']['y'];const _0x51b61f=this['children']['indexOf'](this['_windowLayer']);this[_0x26d969(0x6a7)](this['_enemyNameContainer'],_0x51b61f);for(let _0x166ad2=0x0;_0x166ad2<0x8;_0x166ad2++){const _0x42a7f1=new Window_EnemyName(_0x166ad2);this['_enemyNameContainer']['addChild'](_0x42a7f1);}},Sprite_Battler[_0x5507dd(0x729)]=VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x32e)]['Actor'][_0x5507dd(0x825)],VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x334)]=Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x844)],Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x844)]=function(){const _0x59e826=_0x5507dd;VisuMZ[_0x59e826(0x8af)][_0x59e826(0x334)][_0x59e826(0x542)](this),this[_0x59e826(0x987)]();if(this[_0x59e826(0x2fa)]===Sprite_Enemy)this[_0x59e826(0x46b)]();this[_0x59e826(0x205)]();},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x987)]=function(){const _0x11166a=_0x5507dd;this[_0x11166a(0x67b)]=0x0,this[_0x11166a(0x6c3)]=0x0,this[_0x11166a(0x697)]=0x0,this[_0x11166a(0x1f1)]=0x0,this[_0x11166a(0x4e5)]=0x0,this[_0x11166a(0x91a)]=0x0,this[_0x11166a(0x7bf)]=_0x11166a(0x6cf),this[_0x11166a(0x30b)]=0x0,this[_0x11166a(0x479)]=0x0,this[_0x11166a(0x1a6)]=0x0,this[_0x11166a(0x269)]=0x0,this[_0x11166a(0x369)]=0xff,this[_0x11166a(0x2ce)]=0x0,this['_opacityWholeDuration']=0x0,this[_0x11166a(0x740)]=_0x11166a(0x6cf),this[_0x11166a(0x1aa)]=0x0,this[_0x11166a(0x96a)]=0x0,this[_0x11166a(0x6a0)]=0x0,this[_0x11166a(0x754)]=0x0,this[_0x11166a(0x71b)]='Linear',this['_angleRevertOnFinish']=!![],this[_0x11166a(0x528)]=0x0,this[_0x11166a(0x968)]=0x0,this[_0x11166a(0x26c)]=0x0,this['_targetSkewY']=0x0,this['_skewDuration']=0x0,this[_0x11166a(0x3db)]=0x0,this['_skewEasing']=_0x11166a(0x6cf),this[_0x11166a(0x53c)]=0x1,this[_0x11166a(0x4c8)]=0x1,this[_0x11166a(0x3e5)]=0x1,this[_0x11166a(0x592)]=0x1,this['_growDuration']=0x0,this[_0x11166a(0x585)]=0x0,this[_0x11166a(0x2fb)]='Linear',this[_0x11166a(0x75f)]=0x1,this[_0x11166a(0x96e)]=0x0,this[_0x11166a(0x2d4)]=0x0,this[_0x11166a(0x4c3)]=0x0,this['_homeWholeDuration']=0x0,this['_homeEasing']=_0x11166a(0x6cf);},Sprite_Battler['prototype'][_0x5507dd(0x46b)]=function(){const _0xe5818a=_0x5507dd;this[_0xe5818a(0x5f4)]=new Sprite(),this['_shadowSprite'][_0xe5818a(0x257)]=ImageManager[_0xe5818a(0x6eb)](_0xe5818a(0x669)),this[_0xe5818a(0x5f4)]['bitmap']['smooth']=VisuMZ[_0xe5818a(0x8af)][_0xe5818a(0x32e)][_0xe5818a(0x9cb)]['SmoothImage'],this['_shadowSprite']['anchor']['x']=0.5,this['_shadowSprite'][_0xe5818a(0x26b)]['y']=0.5,this[_0xe5818a(0x5f4)]['y']=-0x2,this[_0xe5818a(0x5f4)][_0xe5818a(0x2ac)]=![],this[_0xe5818a(0x83d)](this[_0xe5818a(0x5f4)]);},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x205)]=function(){const _0xe95528=_0x5507dd;this[_0xe95528(0x8e6)]=new Sprite(),this[_0xe95528(0x8e6)][_0xe95528(0x26b)]['x']=0.5,this[_0xe95528(0x8e6)][_0xe95528(0x26b)]['y']=0.5,this[_0xe95528(0x83d)](this[_0xe95528(0x8e6)]);},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x957)]=function(){const _0x36ddf7=_0x5507dd;if(!this[_0x36ddf7(0x8e6)])return;if(this[_0x36ddf7(0x5f4)]){const _0x1d26a5=this['getChildIndex'](this[_0x36ddf7(0x8e6)]);this[_0x36ddf7(0x6a7)](this[_0x36ddf7(0x5f4)],_0x1d26a5),this[_0x36ddf7(0x963)]();}this[_0x36ddf7(0x5c5)]&&this[_0x36ddf7(0x8e6)][_0x36ddf7(0x83d)](this[_0x36ddf7(0x5c5)]),this[_0x36ddf7(0x208)]&&this[_0x36ddf7(0x8e6)]['addChild'](this[_0x36ddf7(0x208)]),this['_mainSprite']&&this[_0x36ddf7(0x8e6)][_0x36ddf7(0x83d)](this[_0x36ddf7(0x1ec)]),this[_0x36ddf7(0x60a)]&&this[_0x36ddf7(0x8e6)]['addChild'](this['_injectAnimationSprite']),this['_dragonbonesSpriteContainer']&&this['_distortionSprite'][_0x36ddf7(0x83d)](this[_0x36ddf7(0x8a0)]);},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x963)]=function(){const _0x2b743d=_0x5507dd;if(!this[_0x2b743d(0x5f4)])return;if(this['_battler']&&this[_0x2b743d(0x861)][_0x2b743d(0x27d)]()){const _0x29a125=this['_shadowSprite'][_0x2b743d(0x257)];this[_0x2b743d(0x5f4)]['setFrame'](0x0,0x0,_0x29a125['width'],_0x29a125['height']);}else this['_shadowSprite'][_0x2b743d(0x57d)](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x5af)]=function(){const _0x269972=_0x5507dd;return SceneManager[_0x269972(0x4dc)]()?SceneManager[_0x269972(0x590)][_0x269972(0x3c4)]['_damageContainer']:this[_0x269972(0x46d)];},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x2bf)]=function(_0x28f883,_0x3d414e){const _0x44fa6b=_0x5507dd;if(!this[_0x44fa6b(0x861)]['isSpriteVisible']())return;const _0x3ef939=VisuMZ[_0x44fa6b(0x8af)][_0x44fa6b(0x32e)][_0x44fa6b(0x5bc)],_0x446646=new Sprite_Damage();_0x446646[_0x44fa6b(0x1a5)]=_0x3ef939['PopupDuration'],this['sortDamageSprites'](_0x446646),_0x446646[_0x44fa6b(0x2bf)](_0x28f883,_0x3d414e),this[_0x44fa6b(0x889)](_0x446646);},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0xa0d)]=function(_0x18f4a5,_0x5d1fbe,_0x514e9b){const _0x1b5ad1=_0x5507dd;if(!this[_0x1b5ad1(0x861)]['isSpriteVisible']())return;const _0x2c3be2=VisuMZ[_0x1b5ad1(0x8af)][_0x1b5ad1(0x32e)]['Damage'],_0x1ac066=new Sprite_Damage();_0x1ac066[_0x1b5ad1(0x1a5)]=_0x2c3be2['PopupDuration'],this[_0x1b5ad1(0x773)](_0x1ac066),_0x1ac066['setupIconTextPopup'](_0x18f4a5,_0x5d1fbe,_0x514e9b),this[_0x1b5ad1(0x889)](_0x1ac066);},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x3b5)]=function(){const _0x359ca3=_0x5507dd;if(!this[_0x359ca3(0x861)][_0x359ca3(0x429)]())return;while(this[_0x359ca3(0x861)]['isDamagePopupRequested']()){this['_battler'][_0x359ca3(0x4a9)]()&&this['createDamageSprite']();}this[_0x359ca3(0x861)][_0x359ca3(0x56c)](),this['_battler'][_0x359ca3(0x97e)]();},Sprite_Battler[_0x5507dd(0x832)]['createDamageSprite']=function(){const _0x61d910=_0x5507dd,_0x385f51=VisuMZ['BattleCore']['Settings'][_0x61d910(0x5bc)],_0xe2a0cc=new Sprite_Damage();_0xe2a0cc[_0x61d910(0x1a5)]=_0x385f51['PopupDuration'],this[_0x61d910(0x773)](_0xe2a0cc),_0xe2a0cc['setup'](this['_battler']),_0xe2a0cc['setupBattleCore'](this[_0x61d910(0x861)]),this[_0x61d910(0x889)](_0xe2a0cc);},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x889)]=function(_0x47781e){const _0x462203=_0x5507dd;this['_damages']['push'](_0x47781e);if(this[_0x462203(0x9ce)]())SceneManager['_scene']['_statusWindow'][_0x462203(0x889)](_0x47781e,this[_0x462203(0x861)]);else{this[_0x462203(0x5af)]()['addChild'](_0x47781e);if(SceneManager[_0x462203(0x5e2)]())_0x47781e[_0x462203(0x540)]['x']=-0x1;}},Sprite_Battler[_0x5507dd(0x832)]['isShownOnBattlePortrait']=function(){const _0x453520=_0x5507dd;return!$gameSystem[_0x453520(0x577)]()&&this[_0x453520(0x861)]&&this[_0x453520(0x861)][_0x453520(0x8ed)]();},Sprite_Battler['prototype'][_0x5507dd(0x773)]=function(_0x19db39){const _0x4754ec=_0x5507dd;this[_0x4754ec(0x621)](_0x19db39,!![]);const _0x4be5c6=VisuMZ[_0x4754ec(0x8af)]['Settings'][_0x4754ec(0x5bc)],_0x1568f1=SceneManager['isBattleFlipped']()?-0x1:0x1;if(_0x4be5c6[_0x4754ec(0x642)])for(const _0x2e2b6d of this['_damages']){_0x2e2b6d['x']+=_0x4be5c6[_0x4754ec(0x1eb)]*_0x1568f1,_0x2e2b6d['y']+=_0x4be5c6[_0x4754ec(0x4c4)];}else{const _0x3ab387=this['_damages'][this[_0x4754ec(0x502)]['length']-0x1];_0x3ab387&&(_0x19db39['x']=_0x3ab387['x']+_0x4be5c6[_0x4754ec(0x1eb)]*_0x1568f1,_0x19db39['y']=_0x3ab387['y']+_0x4be5c6['PopupShiftY']);}},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x621)]=function(_0x1df92f,_0x1d1b1b){const _0x5daac5=_0x5507dd,_0xd1c007=SceneManager['isBattleFlipped']()?-0x1:0x1;let _0xe850dd=this[_0x5daac5(0x67b)];_0xe850dd+=this['extraPositionX']();let _0x4d00d8=this[_0x5daac5(0x6c3)];const _0xda401=this[_0x5daac5(0x8e6)]['scale']['y'];_0x4d00d8+=this[_0x5daac5(0x556)]();const _0x379a34=SceneManager['_scene'][_0x5daac5(0x713)];if(_0x379a34&&this[_0x5daac5(0x46d)]===_0x379a34){_0xe850dd+=_0x379a34['x']-this[_0x5daac5(0x601)]();const _0x587299=_0x379a34['lineHeight']()*0x3/0x4;_0x4d00d8=_0x379a34['y']+_0x587299,_0x4d00d8=Math['min'](_0x4d00d8,_0x379a34['y']+this['y']-this[_0x5daac5(0x80e)]+_0x587299);}_0x1df92f['x']=Math[_0x5daac5(0x95e)](_0xe850dd+this[_0x5daac5(0x601)]()*_0xd1c007),_0x1df92f['y']=Math[_0x5daac5(0x95e)](_0x4d00d8+this[_0x5daac5(0x236)]());},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x7a8)]=Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x601)],Sprite_Battler['prototype'][_0x5507dd(0x601)]=function(){const _0x5011cf=_0x5507dd;let _0x496b51=VisuMZ['BattleCore'][_0x5011cf(0x7a8)][_0x5011cf(0x542)](this),_0x29f5b4=VisuMZ[_0x5011cf(0x8af)][_0x5011cf(0x32e)][_0x5011cf(0x5bc)][_0x5011cf(0x5fd)]||0x0;return Math[_0x5011cf(0x95e)](_0x496b51+_0x29f5b4);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x7a7)]=Sprite_Battler['prototype'][_0x5507dd(0x236)],Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x236)]=function(){const _0x2b95bc=_0x5507dd;let _0x3037af=VisuMZ[_0x2b95bc(0x8af)][_0x2b95bc(0x7a7)][_0x2b95bc(0x542)](this);switch(VisuMZ[_0x2b95bc(0x8af)]['Settings'][_0x2b95bc(0x5bc)][_0x2b95bc(0x1d0)]){case'head':_0x3037af-=this[_0x2b95bc(0x80e)]*this['scale']['y'];break;case'center':_0x3037af-=this[_0x2b95bc(0x80e)]*this[_0x2b95bc(0x540)]['y']*0.5;break;}let _0x5b220c=VisuMZ[_0x2b95bc(0x8af)][_0x2b95bc(0x32e)]['Damage'][_0x2b95bc(0x3b2)]||0x0;return Math[_0x2b95bc(0x95e)](_0x3037af+_0x5b220c);},Sprite_Actor[_0x5507dd(0x832)][_0x5507dd(0x601)]=function(){const _0x2f3799=_0x5507dd;return Sprite_Battler[_0x2f3799(0x832)]['damageOffsetX'][_0x2f3799(0x542)](this);},Sprite_Actor['prototype']['damageOffsetY']=function(){const _0x22588f=_0x5507dd;return Sprite_Battler[_0x22588f(0x832)][_0x22588f(0x236)][_0x22588f(0x542)](this);},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x90d)]=function(_0x5813b0){const _0x5525f9=_0x5507dd;this[_0x5525f9(0x9ce)]()?SceneManager['_scene'][_0x5525f9(0x713)][_0x5525f9(0x734)](_0x5813b0):(this[_0x5525f9(0x5af)]()['removeChild'](_0x5813b0),this['_damages']['remove'](_0x5813b0),_0x5813b0[_0x5525f9(0x4dd)]());},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x346)]=Sprite_Battler['prototype'][_0x5507dd(0x41f)],Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x41f)]=function(_0x4619da,_0x19a07b){const _0x30cf92=_0x5507dd,_0x3825ea=VisuMZ[_0x30cf92(0x8af)][_0x30cf92(0x32e)];if(this['constructor']===Sprite_Actor)_0x4619da+=_0x3825ea[_0x30cf92(0x9cb)][_0x30cf92(0x812)]||0x0,_0x19a07b+=_0x3825ea[_0x30cf92(0x9cb)]['OffsetY']||0x0;else this[_0x30cf92(0x2fa)]===Sprite_Enemy&&(_0x4619da+=_0x3825ea[_0x30cf92(0x77b)][_0x30cf92(0x812)]||0x0,_0x19a07b+=_0x3825ea[_0x30cf92(0x77b)][_0x30cf92(0x88e)]||0x0);this[_0x30cf92(0x861)]&&(_0x4619da=this['_battler'][_0x30cf92(0x94a)]??_0x4619da,_0x19a07b=this['_battler'][_0x30cf92(0x1d4)]??_0x19a07b),VisuMZ[_0x30cf92(0x8af)][_0x30cf92(0x346)][_0x30cf92(0x542)](this,_0x4619da,_0x19a07b),this[_0x30cf92(0x96e)]=this['_homeX'],this[_0x30cf92(0x2d4)]=this[_0x30cf92(0x7b6)],this[_0x30cf92(0x4c3)]=0x0,this[_0x30cf92(0x756)]=0x0,this['_homeEasing']=_0x30cf92(0x6cf);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x3df)]=Sprite_Battler['prototype'][_0x5507dd(0x3ce)],Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x3ce)]=function(){const _0x46463a=_0x5507dd;VisuMZ[_0x46463a(0x8af)][_0x46463a(0x3df)][_0x46463a(0x542)](this),!this[_0x46463a(0x861)]&&this[_0x46463a(0x65b)]&&(this['_hpGaugeSprite']['visible']=![]);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x68c)]=Sprite_Battler[_0x5507dd(0x832)]['updateMain'],Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x486)]=function(){const _0x211b1a=_0x5507dd;this[_0x211b1a(0x509)](),this[_0x211b1a(0x980)](),this[_0x211b1a(0x1db)](),this[_0x211b1a(0x1af)](),VisuMZ[_0x211b1a(0x8af)][_0x211b1a(0x68c)][_0x211b1a(0x542)](this),this[_0x211b1a(0x769)]();if(this[_0x211b1a(0x2fa)]===Sprite_Enemy)this['updateShadow']();},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x7c2)]=Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x558)],Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x558)]=function(){const _0x5a9f28=_0x5507dd;this[_0x5a9f28(0x793)](),VisuMZ[_0x5a9f28(0x8af)][_0x5a9f28(0x7c2)][_0x5a9f28(0x542)](this),this[_0x5a9f28(0x9ac)](),this[_0x5a9f28(0x641)]();},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x61e)]=function(_0x2f4fc8,_0x12453b,_0xab43cd,_0x14492e){const _0x17d32b=_0x5507dd;(this[_0x17d32b(0x96e)]!==_0x2f4fc8||this[_0x17d32b(0x2d4)]!==_0x12453b)&&(this[_0x17d32b(0x96e)]=_0x2f4fc8,this[_0x17d32b(0x2d4)]=_0x12453b,this[_0x17d32b(0x4c3)]=_0xab43cd,this[_0x17d32b(0x756)]=_0xab43cd,this[_0x17d32b(0x87b)]=_0x14492e,_0xab43cd<=0x0&&this[_0x17d32b(0x46a)]());},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x793)]=function(){const _0x44fc2b=_0x5507dd;if(this['_homeDuration']<=0x0)return;const _0xebd633=this[_0x44fc2b(0x4c3)],_0x2a3a70=this[_0x44fc2b(0x756)],_0x522590=this[_0x44fc2b(0x87b)];Imported[_0x44fc2b(0x72e)]?(this[_0x44fc2b(0x99f)]=this[_0x44fc2b(0x8e4)](this[_0x44fc2b(0x99f)],this['_targetHomeX'],_0xebd633,_0x2a3a70,_0x522590),this['_homeY']=this[_0x44fc2b(0x8e4)](this[_0x44fc2b(0x7b6)],this['_targetHomeY'],_0xebd633,_0x2a3a70,_0x522590)):(this[_0x44fc2b(0x99f)]=(this[_0x44fc2b(0x99f)]*(_0xebd633-0x1)+this[_0x44fc2b(0x96e)])/_0xebd633,this[_0x44fc2b(0x7b6)]=(this[_0x44fc2b(0x7b6)]*(_0xebd633-0x1)+this[_0x44fc2b(0x2d4)])/_0xebd633);this[_0x44fc2b(0x4c3)]--;if(this[_0x44fc2b(0x4c3)]<=0x0)this[_0x44fc2b(0x46a)]();},Sprite_Battler['prototype']['onHomeMoveEnd']=function(){const _0x1f7c69=_0x5507dd;this[_0x1f7c69(0x99f)]=this[_0x1f7c69(0x96e)],this[_0x1f7c69(0x7b6)]=this[_0x1f7c69(0x2d4)];},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x9ac)]=function(){const _0x483d4d=_0x5507dd;this['_baseX']=this['x'],this[_0x483d4d(0x6c3)]=this['y'],this[_0x483d4d(0x3a7)](),this['updateJump'](),this['x']+=this['extraPositionX'](),this['y']+=this[_0x483d4d(0x556)](),this['y']+=this[_0x483d4d(0x218)](),this['x']=Math[_0x483d4d(0x8fd)](this['x']),this['y']=Math[_0x483d4d(0x8fd)](this['y']);},Sprite_Battler['prototype'][_0x5507dd(0x43c)]=function(){let _0x590d67=0x0;return _0x590d67;},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x556)]=function(){const _0x50b240=_0x5507dd;let _0x5c7237=0x0;return this[_0x50b240(0x861)]&&!this[_0x50b240(0x861)]['isBattlerGrounded']()&&(_0x5c7237-=this['_floatHeight'],_0x5c7237-=this[_0x50b240(0x30b)]),_0x5c7237;},Sprite_Battler[_0x5507dd(0x832)]['extraPositionScaledY']=function(){const _0x5193cd=_0x5507dd;let _0x530e0c=0x0;if(this['_distortionSprite']&&this[_0x5193cd(0x2fa)]!==Sprite_SvEnemy){const _0x559547=this[_0x5193cd(0x8e6)][_0x5193cd(0x540)]['y'];_0x530e0c-=(_0x559547-0x1)*this[_0x5193cd(0x80e)];}return _0x530e0c;},Sprite_Battler[_0x5507dd(0x832)]['updateFlip']=function(){const _0x3ea5b8=_0x5507dd,_0x4b4582=this[_0x3ea5b8(0x861)]&&this[_0x3ea5b8(0x861)][_0x3ea5b8(0x99d)]();this[_0x3ea5b8(0x75f)]=(_0x4b4582?-0x1:0x1)*Math[_0x3ea5b8(0x7f9)](this[_0x3ea5b8(0x540)]['x']);},Sprite_Battler[_0x5507dd(0x832)]['startFloat']=function(_0x4a83cc,_0x2c1eaa,_0x54b16e){const _0x437437=_0x5507dd;if(!this[_0x437437(0x992)]())return;if(this['_targetFloatHeight']===_0x4a83cc)return;this[_0x437437(0x1f1)]=_0x4a83cc,this[_0x437437(0x4e5)]=_0x2c1eaa,this[_0x437437(0x91a)]=_0x2c1eaa,this[_0x437437(0x7bf)]=_0x54b16e||'Linear';if(_0x2c1eaa<=0x0)this[_0x437437(0x697)]=_0x4a83cc;},Sprite_Battler['prototype']['updateFloat']=function(){const _0x281f1f=_0x5507dd;if(this['_floatDuration']<=0x0)return;const _0x5322f5=this[_0x281f1f(0x4e5)],_0x55ec39=this[_0x281f1f(0x91a)],_0x399b77=this[_0x281f1f(0x7bf)];Imported[_0x281f1f(0x72e)]?this[_0x281f1f(0x697)]=this[_0x281f1f(0x8e4)](this[_0x281f1f(0x697)],this[_0x281f1f(0x1f1)],_0x5322f5,_0x55ec39,_0x399b77):this[_0x281f1f(0x697)]=(this[_0x281f1f(0x697)]*(_0x5322f5-0x1)+this['_targetFloatHeight'])/_0x5322f5;this[_0x281f1f(0x4e5)]--;if(this[_0x281f1f(0x4e5)]<=0x0)this[_0x281f1f(0x95d)]();},Sprite_Battler['prototype'][_0x5507dd(0x95d)]=function(){const _0xc76503=_0x5507dd;this[_0xc76503(0x697)]=this['_targetFloatHeight'];},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x925)]=function(){return this['_floatDuration']>0x0;},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x4b2)]=function(_0x4d2ed7,_0xde95b6){const _0x29af4d=_0x5507dd;if(!this['canMove']())return;if(_0xde95b6<=0x0)return;this[_0x29af4d(0x479)]=_0x4d2ed7,this[_0x29af4d(0x1a6)]=_0xde95b6,this[_0x29af4d(0x269)]=_0xde95b6;},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x8b8)]=function(){const _0x6ab956=_0x5507dd;if(this['_jumpDuration']<=0x0)return;const _0x3322b7=this[_0x6ab956(0x269)]-this[_0x6ab956(0x1a6)],_0x506413=this[_0x6ab956(0x269)]/0x2,_0x184cc7=this[_0x6ab956(0x479)],_0x2e51e6=-_0x184cc7/Math[_0x6ab956(0x48b)](_0x506413,0x2);this[_0x6ab956(0x30b)]=_0x2e51e6*Math[_0x6ab956(0x48b)](_0x3322b7-_0x506413,0x2)+_0x184cc7,this['_jumpDuration']--;if(this[_0x6ab956(0x1a6)]<=0x0)return this[_0x6ab956(0x5fc)]();},Sprite_Battler[_0x5507dd(0x832)]['onJumpEnd']=function(){this['_jumpHeight']=0x0;},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x5a6)]=function(){const _0x135d7b=_0x5507dd;return this[_0x135d7b(0x1a6)]>0x0;},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x850)]=function(_0x2a6684,_0x314057,_0x4d4640){const _0x5e23f2=_0x5507dd;if(this['_targetOpacity']===_0x2a6684)return;this[_0x5e23f2(0x369)]=_0x2a6684,this['_opacityDuration']=_0x314057,this[_0x5e23f2(0x916)]=_0x314057,this[_0x5e23f2(0x740)]=_0x4d4640||_0x5e23f2(0x6cf);if(_0x314057<=0x0)this[_0x5e23f2(0x411)]=_0x2a6684;},Sprite_Battler['prototype']['updateOpacity']=function(){const _0x4c8eee=_0x5507dd;if(this[_0x4c8eee(0x2fa)][_0x4c8eee(0x55f)]==='Sprite_SvEnemy')return;if(this[_0x4c8eee(0x2ce)]<=0x0)return;const _0x1ea131=this[_0x4c8eee(0x2ce)],_0x5932a5=this[_0x4c8eee(0x916)],_0x24101a=this[_0x4c8eee(0x740)];Imported[_0x4c8eee(0x72e)]?this[_0x4c8eee(0x411)]=this[_0x4c8eee(0x8e4)](this[_0x4c8eee(0x411)],this[_0x4c8eee(0x369)],_0x1ea131,_0x5932a5,_0x24101a):this[_0x4c8eee(0x411)]=(this[_0x4c8eee(0x411)]*(_0x1ea131-0x1)+this[_0x4c8eee(0x369)])/_0x1ea131;this[_0x4c8eee(0x2ce)]--;if(this[_0x4c8eee(0x2ce)]<=0x0)this[_0x4c8eee(0x57e)]();},Sprite_Battler['prototype'][_0x5507dd(0x57e)]=function(){const _0x3c58b8=_0x5507dd;this[_0x3c58b8(0x411)]=this[_0x3c58b8(0x369)];},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x516)]=function(){const _0x52d0a6=_0x5507dd;return this[_0x52d0a6(0x2ce)]>0x0;},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x576)]=function(){const _0x246ca9=_0x5507dd;this[_0x246ca9(0x5f4)][_0x246ca9(0x2ac)]=this['_battler'][_0x246ca9(0x77a)](),this[_0x246ca9(0x7e7)]();},Sprite_Battler['prototype']['updateShadowPosition']=function(){const _0x35a43a=_0x5507dd;if(!this[_0x35a43a(0x5f4)])return;this['_shadowSprite']['y']=this[_0x35a43a(0x6c3)]-this['y']-0x2;},Sprite_Battler[_0x5507dd(0x832)]['updateShadowScale']=function(){const _0x5f5034=_0x5507dd;if(!this[_0x5f5034(0x861)])return;this['_shadowScaleX']=this['_battler'][_0x5f5034(0x4a6)](),this[_0x5f5034(0x71a)]=this['_battler']['battlerShadowScaleY']();},Game_BattlerBase['prototype'][_0x5507dd(0x4a6)]=function(){const _0x26e127=_0x5507dd,_0x5f17d7=this['isActor']()?this[_0x26e127(0x914)]():this['enemy']();if(_0x5f17d7){const _0x451d8e=_0x5f17d7[_0x26e127(0x6a3)];if(_0x451d8e[_0x26e127(0x1f2)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x451d8e[_0x26e127(0x1f2)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x5507dd(0x832)][_0x5507dd(0x3a0)]=function(){const _0xe90b07=_0x5507dd,_0xb27b89=this[_0xe90b07(0x8ed)]()?this['actor']():this[_0xe90b07(0x7f3)]();if(_0xb27b89){const _0x14ca22=_0xb27b89['note'];if(_0x14ca22[_0xe90b07(0x1f2)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x14ca22[_0xe90b07(0x1f2)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x5507dd(0x832)]['updateScale']=function(){const _0x2dbbee=_0x5507dd;if(this[_0x2dbbee(0x2fa)]===Sprite_SvEnemy)return;this[_0x2dbbee(0x1cc)](),this[_0x2dbbee(0x4fd)]();},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x4fd)]=function(){const _0x9d5ee0=_0x5507dd,_0x140be5=this[_0x9d5ee0(0x8e6)];_0x140be5&&(_0x140be5[_0x9d5ee0(0x540)]['x']=this[_0x9d5ee0(0x28d)](),_0x140be5['scale']['y']=this[_0x9d5ee0(0x34a)]());},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x28d)]=function(){const _0x17fc6c=_0x5507dd;let _0x5e0969=0x1;return _0x5e0969*=this[_0x17fc6c(0x75f)],_0x5e0969*=this[_0x17fc6c(0x53c)],_0x5e0969;},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x34a)]=function(){return 0x1*this['_growY'];},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x5c4)]=function(){const _0x3fea48=_0x5507dd;return this[_0x3fea48(0x4fa)]*this['mainSpriteScaleX']();},Sprite_Battler['prototype'][_0x5507dd(0x6ba)]=function(){return this['height']*this['mainSpriteScaleY']();},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x3ab)]=function(_0x25ae33,_0xeb1cf3,_0x2f990d,_0x25221d){const _0xefa4a3=_0x5507dd;if(!this[_0xefa4a3(0x992)]())return;if(!this[_0xefa4a3(0x8e6)])return;if(this['_targetGrowX']===_0x25ae33&&this[_0xefa4a3(0x592)]===_0xeb1cf3)return;this['_targetGrowX']=_0x25ae33,this['_targetGrowY']=_0xeb1cf3,this[_0xefa4a3(0xa21)]=_0x2f990d,this[_0xefa4a3(0x585)]=_0x2f990d,this[_0xefa4a3(0x2fb)]=_0x25221d||_0xefa4a3(0x6cf),_0x2f990d<=0x0&&(this[_0xefa4a3(0x53c)]=this[_0xefa4a3(0x3e5)],this[_0xefa4a3(0x4c8)]=this['_targetGrowY']);},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x1cc)]=function(){const _0xd5e0b8=_0x5507dd;if(this['_growDuration']<=0x0)return;if(!this[_0xd5e0b8(0x8e6)])return;const _0x3f0c62=this[_0xd5e0b8(0xa21)],_0x317d11=this['_growWholeDuration'],_0x55948e=this['_growEasing'];Imported[_0xd5e0b8(0x72e)]?(this['_growX']=this['applyEasing'](this[_0xd5e0b8(0x53c)],this[_0xd5e0b8(0x3e5)],_0x3f0c62,_0x317d11,_0x55948e),this[_0xd5e0b8(0x4c8)]=this[_0xd5e0b8(0x8e4)](this[_0xd5e0b8(0x4c8)],this[_0xd5e0b8(0x592)],_0x3f0c62,_0x317d11,_0x55948e)):(this[_0xd5e0b8(0x53c)]=(this[_0xd5e0b8(0x53c)]*(_0x3f0c62-0x1)+this[_0xd5e0b8(0x3e5)])/_0x3f0c62,this[_0xd5e0b8(0x4c8)]=(this[_0xd5e0b8(0x4c8)]*(_0x3f0c62-0x1)+this[_0xd5e0b8(0x592)])/_0x3f0c62);this['_growDuration']--;if(this[_0xd5e0b8(0xa21)]<=0x0)this[_0xd5e0b8(0xa0e)]();},Sprite_Battler['prototype'][_0x5507dd(0xa0e)]=function(){const _0xb273d6=_0x5507dd;this[_0xb273d6(0x53c)]=this['_targetGrowX'],this[_0xb273d6(0x4c8)]=this['_targetGrowY'];},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0xa0a)]=function(){return this['_growDuration']>0x0;},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x979)]=function(_0x4d2391,_0x52e016,_0x3657db,_0x3bb8b2){const _0x4fac5c=_0x5507dd;if(!this[_0x4fac5c(0x992)]())return;if(!this[_0x4fac5c(0x8e6)])return;if(this[_0x4fac5c(0x26c)]===_0x4d2391&&this[_0x4fac5c(0x6fd)]===_0x52e016)return;this[_0x4fac5c(0x26c)]=_0x4d2391,this[_0x4fac5c(0x6fd)]=_0x52e016,this[_0x4fac5c(0x7ce)]=_0x3657db,this[_0x4fac5c(0x3db)]=_0x3657db,this[_0x4fac5c(0x8d2)]=_0x3bb8b2||_0x4fac5c(0x6cf),_0x3657db<=0x0&&(this[_0x4fac5c(0x8e6)][_0x4fac5c(0x3cb)]['x']=this[_0x4fac5c(0x26c)],this[_0x4fac5c(0x8e6)][_0x4fac5c(0x3cb)]['y']=this[_0x4fac5c(0x6fd)]);},Sprite_Battler[_0x5507dd(0x832)]['updateSkew']=function(){const _0x29b883=_0x5507dd;if(this[_0x29b883(0x7ce)]<=0x0)return;if(!this[_0x29b883(0x8e6)])return;const _0x2b1bb3=this[_0x29b883(0x7ce)],_0x49d2d7=this['_skewWholeDuration'],_0x41901c=this['_skewEasing'],_0x487364=this[_0x29b883(0x8e6)];Imported['VisuMZ_0_CoreEngine']?(_0x487364[_0x29b883(0x3cb)]['x']=this[_0x29b883(0x8e4)](_0x487364[_0x29b883(0x3cb)]['x'],this[_0x29b883(0x26c)],_0x2b1bb3,_0x49d2d7,_0x41901c),_0x487364[_0x29b883(0x3cb)]['y']=this['applyEasing'](_0x487364['skew']['y'],this[_0x29b883(0x6fd)],_0x2b1bb3,_0x49d2d7,_0x41901c)):(_0x487364[_0x29b883(0x3cb)]['x']=(_0x487364[_0x29b883(0x3cb)]['x']*(_0x2b1bb3-0x1)+this[_0x29b883(0x26c)])/_0x2b1bb3,_0x487364[_0x29b883(0x3cb)]['y']=(_0x487364['skew']['y']*(_0x2b1bb3-0x1)+this[_0x29b883(0x6fd)])/_0x2b1bb3);this[_0x29b883(0x7ce)]--;if(this[_0x29b883(0x7ce)]<=0x0)this['onSkewEnd']();},Sprite_Battler['prototype']['onSkewEnd']=function(){const _0x348686=_0x5507dd;this[_0x348686(0x8e6)][_0x348686(0x3cb)]['x']=this['_targetSkewX'],this[_0x348686(0x8e6)][_0x348686(0x3cb)]['y']=this['_targetSkewY'];},Sprite_Battler['prototype'][_0x5507dd(0x331)]=function(){const _0x488707=_0x5507dd;return this[_0x488707(0x7ce)]>0x0;},Sprite_Battler['prototype']['startSpin']=function(_0x126ae0,_0x533930,_0x2a43a2,_0x1988fb){const _0x1fbdbc=_0x5507dd;if(!this[_0x1fbdbc(0x992)]())return;if(!this['_distortionSprite'])return;if(this[_0x1fbdbc(0x96a)]===_0x126ae0)return;this[_0x1fbdbc(0x96a)]=_0x126ae0,this[_0x1fbdbc(0x6a0)]=_0x533930,this[_0x1fbdbc(0x754)]=_0x533930,this[_0x1fbdbc(0x71b)]=_0x2a43a2||_0x1fbdbc(0x6cf),this['_angleRevertOnFinish']=_0x1988fb,this[_0x1fbdbc(0x7aa)]===undefined&&(this[_0x1fbdbc(0x7aa)]=!![]),_0x533930<=0x0&&(this[_0x1fbdbc(0x1aa)]=_0x126ae0,this['_angleRevertOnFinish']&&(this[_0x1fbdbc(0x96a)]=0x0,this[_0x1fbdbc(0x1aa)]=0x0));},Sprite_Battler['prototype']['updateSpin']=function(){const _0x2d424b=_0x5507dd;this[_0x2d424b(0x561)](),this[_0x2d424b(0x869)]();},Sprite_Battler[_0x5507dd(0x832)]['updateAngleCalculations']=function(){const _0x35a4e1=_0x5507dd;if(this['_angleDuration']<=0x0)return;const _0x4fae8a=this['_angleDuration'],_0x48cb84=this[_0x35a4e1(0x754)],_0x4c668b=this[_0x35a4e1(0x71b)];Imported[_0x35a4e1(0x72e)]?this[_0x35a4e1(0x1aa)]=this[_0x35a4e1(0x8e4)](this['_currentAngle'],this['_targetAngle'],_0x4fae8a,_0x48cb84,_0x4c668b):this[_0x35a4e1(0x1aa)]=(this[_0x35a4e1(0x1aa)]*(_0x4fae8a-0x1)+this[_0x35a4e1(0x96a)])/_0x4fae8a;this[_0x35a4e1(0x6a0)]--;if(this['_angleDuration']<=0x0)this['onAngleEnd']();},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x4e6)]=function(){const _0x3c14e1=_0x5507dd;this[_0x3c14e1(0x1aa)]=this[_0x3c14e1(0x96a)],this[_0x3c14e1(0x7aa)]&&(this[_0x3c14e1(0x96a)]=0x0,this[_0x3c14e1(0x1aa)]=0x0);},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x761)]=function(){return this['_angleDuration']>0x0;},Sprite_Battler[_0x5507dd(0x832)]['applyAngleChange']=function(){const _0x30299c=_0x5507dd;if(!this[_0x30299c(0x8e6)])return;const _0x51219a=this[_0x30299c(0x1aa)],_0x5a9b9=this['scale']['x'],_0x1ac8ab=this[_0x30299c(0x861)]['isActor']()?-0x1:0x1;this[_0x30299c(0x8e6)]['angle']=_0x51219a*_0x5a9b9*_0x1ac8ab;const _0x263eb6=this['_distortionSprite'][_0x30299c(0x540)]['y'];this['_distortionSprite']['y']=this[_0x30299c(0x80e)]*-0.5*(0x2-_0x263eb6),this[_0x30299c(0x8e6)]['y']=Math[_0x30299c(0x199)](this[_0x30299c(0x8e6)]['y']);const _0x2fd94d=[this[_0x30299c(0x1ec)],this[_0x30299c(0x5c5)],this['_dragonbonesSpriteContainer']];for(const _0x53d4c2 of _0x2fd94d){if(!_0x53d4c2)continue;_0x53d4c2['y']=this[_0x30299c(0x80e)]*0.5;}this[_0x30299c(0x5f4)]&&(this[_0x30299c(0x5a0)]=this[_0x30299c(0x5a0)]??0x1,this[_0x30299c(0x71a)]=this[_0x30299c(0x71a)]??0x1,this[_0x30299c(0x5f4)]['scale']['x']=this[_0x30299c(0x8e6)][_0x30299c(0x540)]['x']*this[_0x30299c(0x5a0)],this[_0x30299c(0x5f4)]['scale']['y']=this[_0x30299c(0x8e6)][_0x30299c(0x540)]['y']*this['_shadowScaleY']);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x445)]=Sprite_Actor[_0x5507dd(0x832)][_0x5507dd(0x845)],Sprite_Actor['prototype'][_0x5507dd(0x845)]=function(){const _0x6ef77f=_0x5507dd;VisuMZ[_0x6ef77f(0x8af)]['Sprite_Actor_createStateSprite'][_0x6ef77f(0x542)](this),VisuMZ[_0x6ef77f(0x8af)][_0x6ef77f(0x32e)][_0x6ef77f(0x1b3)][_0x6ef77f(0x7ab)]&&this[_0x6ef77f(0x6d0)]();},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x508)]=Sprite_Enemy[_0x5507dd(0x832)][_0x5507dd(0x6f2)],Sprite_Enemy[_0x5507dd(0x832)]['createStateIconSprite']=function(){const _0x5a9d32=_0x5507dd;VisuMZ[_0x5a9d32(0x8af)][_0x5a9d32(0x32e)]['HpGauge'][_0x5a9d32(0x2f6)]&&this[_0x5a9d32(0x6d0)](),VisuMZ['BattleCore']['Sprite_Enemy_createStateIconSprite']['call'](this);},Sprite_Battler['prototype'][_0x5507dd(0x6d0)]=function(){const _0x2e053d=_0x5507dd;if(!ConfigManager[_0x2e053d(0x47a)])return;if(this[_0x2e053d(0x2fa)]===Sprite_SvEnemy)return;const _0x5a5f0a=VisuMZ['BattleCore']['Settings'][_0x2e053d(0x1b3)],_0x193835=new Sprite_HpGauge();_0x193835[_0x2e053d(0x26b)]['x']=_0x5a5f0a[_0x2e053d(0x6ae)],_0x193835['anchor']['y']=_0x5a5f0a[_0x2e053d(0x5d8)],_0x193835[_0x2e053d(0x540)]['x']=_0x193835[_0x2e053d(0x540)]['y']=_0x5a5f0a['Scale'],this['_hpGaugeSprite']=_0x193835,this['addChild'](this[_0x2e053d(0x65b)]),Spriteset_Battle[_0x2e053d(0x862)]&&BattleManager[_0x2e053d(0x263)](this['_hpGaugeSprite']);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x6cb)]=Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x45b)],Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x45b)]=function(_0x1e1495){const _0x4b6aa=_0x5507dd,_0x2b296c=this['_battler'];VisuMZ[_0x4b6aa(0x8af)][_0x4b6aa(0x6cb)][_0x4b6aa(0x542)](this,_0x1e1495),this[_0x4b6aa(0x610)](_0x1e1495);if(_0x2b296c!==_0x1e1495)this[_0x4b6aa(0x350)]();},Sprite_Battler[_0x5507dd(0x832)]['setupHpGaugeSprite']=function(_0x86bf8c){const _0x4ddb3d=_0x5507dd;if(!_0x86bf8c)return;if(!this['_hpGaugeSprite'])return;if(_0x86bf8c[_0x4ddb3d(0x8ed)]()){}else{if(_0x86bf8c[_0x4ddb3d(0x890)]()){if(this['constructor']===Sprite_SvEnemy&&!_0x86bf8c[_0x4ddb3d(0x77a)]())return;}}this[_0x4ddb3d(0x65b)][_0x4ddb3d(0x3d3)](_0x86bf8c,'hp');},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x464)]=function(){const _0x11235b=_0x5507dd;return this[_0x11235b(0x861)]&&this[_0x11235b(0x861)][_0x11235b(0x464)]();},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x575)]=function(){const _0x3cfbd1=_0x5507dd,_0x2a7849=this[_0x3cfbd1(0x1ec)][_0x3cfbd1(0x257)];if(!_0x2a7849)return;const _0x3437d9=_0x2a7849[_0x3cfbd1(0x4fa)];let _0x28e889=_0x2a7849[_0x3cfbd1(0x80e)];if(this[_0x3cfbd1(0x861)][_0x3cfbd1(0x45e)]()){if(this['_frame'])_0x28e889=Math[_0x3cfbd1(0x741)](0x0,this[_0x3cfbd1(0x632)][_0x3cfbd1(0x80e)]-0x4);}this[_0x3cfbd1(0x1ec)][_0x3cfbd1(0x57d)](0x0,0x0,_0x3437d9,_0x28e889),this[_0x3cfbd1(0x57d)](0x0,0x0,_0x3437d9,_0x28e889);},Sprite_Battler[_0x5507dd(0x832)]['updateHpGaugePosition']=function(){const _0x17d6e0=_0x5507dd;if(!this[_0x17d6e0(0x861)])return;if(!this['_hpGaugeSprite'])return;const _0x438ade=VisuMZ['BattleCore'][_0x17d6e0(0x32e)][_0x17d6e0(0x1b3)],_0x518c8d=this[_0x17d6e0(0x65b)];_0x518c8d[_0x17d6e0(0x2ac)]=this[_0x17d6e0(0x439)]();const _0x3dacb4=_0x438ade[_0x17d6e0(0x812)],_0x2c976d=_0x438ade[_0x17d6e0(0x88e)];_0x518c8d['x']=_0x3dacb4,_0x518c8d['x']+=this['_battler'][_0x17d6e0(0x3b4)](),_0x518c8d['y']=-this['height']+_0x2c976d,_0x518c8d['y']+=this[_0x17d6e0(0x861)]['battleUIOffsetY'](),Spriteset_Battle[_0x17d6e0(0x862)]&&SceneManager[_0x17d6e0(0x590)][_0x17d6e0(0x3c4)]&&(_0x518c8d['x']+=this['x'],_0x518c8d['y']+=this['y']);},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x439)]=function(){const _0x443486=_0x5507dd;if(!this[_0x443486(0x861)])return![];if(this[_0x443486(0x861)][_0x443486(0x8ed)]())return!![];if(this[_0x443486(0x861)][_0x443486(0x871)]())return![];if(this['opacity']<=0x0)return![];const _0x28a598=this[_0x443486(0x861)][_0x443486(0x7f3)]()[_0x443486(0x6a3)];if(_0x28a598[_0x443486(0x1f2)](/<SHOW HP GAUGE>/i))return!![];if(_0x28a598[_0x443486(0x1f2)](/<HIDE HP GAUGE>/i))return![];const _0x539011=VisuMZ[_0x443486(0x8af)][_0x443486(0x32e)]['HpGauge'];if(_0x539011[_0x443486(0x1b1)]){if(_0x539011[_0x443486(0x306)]&&BattleManager['isBattleTest']())return!![];if(this[_0x443486(0x861)][_0x443486(0x1e6)])return![];return this['_battler'][_0x443486(0x538)]();}return!![];},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x600)]=Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x586)],Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x586)]=function(){const _0x3b0b5d=_0x5507dd;if(!this[_0x3b0b5d(0x861)])return![];if(this['_homeDuration']>0x0)return!![];return VisuMZ[_0x3b0b5d(0x8af)][_0x3b0b5d(0x600)][_0x3b0b5d(0x542)](this);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x953)]=Sprite_Battler['prototype'][_0x5507dd(0x39b)],Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x39b)]=function(_0x1cba88,_0x270f34,_0x327d79){const _0x12d4ec=_0x5507dd;this[_0x12d4ec(0x992)]()&&VisuMZ[_0x12d4ec(0x8af)]['Sprite_Battler_startMove'][_0x12d4ec(0x542)](this,_0x1cba88,_0x270f34,_0x327d79);},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x992)]=function(){const _0x19e011=_0x5507dd;if(this['_battler']&&this['_battler']['isDead']())return![];if(this[_0x19e011(0x861)]&&!this[_0x19e011(0x861)][_0x19e011(0x23c)]())return![];return $gameSystem[_0x19e011(0x577)]();},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x480)]=function(){},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x4af)]=function(){const _0x328299=_0x5507dd;this[_0x328299(0x39b)](0x0,0x0,0xc);},Sprite_Battler[_0x5507dd(0x832)][_0x5507dd(0x4f5)]=function(){},Sprite_Battler[_0x5507dd(0x832)]['stepFlinch']=function(){const _0x57b5d7=_0x5507dd,_0x2ab2c5=VisuMZ[_0x57b5d7(0x8af)]['Settings'][_0x57b5d7(0x9cb)],_0x3531c1=this['_battler']&&this[_0x57b5d7(0x861)]['isActor']()?0x1:-0x1,_0x4ba390=this[_0x57b5d7(0x67b)]-this[_0x57b5d7(0x99f)]+_0x3531c1*_0x2ab2c5['FlinchDistanceX'],_0x2db7b5=this[_0x57b5d7(0x6c3)]-this[_0x57b5d7(0x7b6)]+_0x3531c1*_0x2ab2c5['FlinchDistanceY'],_0x34da30=_0x2ab2c5[_0x57b5d7(0x76a)];this[_0x57b5d7(0x39b)](_0x4ba390,_0x2db7b5,_0x34da30);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0xa16)]=Sprite_Actor['prototype']['initMembers'],Sprite_Actor[_0x5507dd(0x832)][_0x5507dd(0x844)]=function(){const _0x36dce3=_0x5507dd;VisuMZ[_0x36dce3(0x8af)][_0x36dce3(0xa16)][_0x36dce3(0x542)](this),this[_0x36dce3(0x957)]();},Sprite_Actor[_0x5507dd(0x832)][_0x5507dd(0x6af)]=function(){return this['_distortionSprite']||this['_mainSprite']||this;},VisuMZ['BattleCore'][_0x5507dd(0x3ae)]=Sprite_Actor[_0x5507dd(0x832)][_0x5507dd(0xa28)],Sprite_Actor[_0x5507dd(0x832)][_0x5507dd(0xa28)]=function(){},Sprite_Actor[_0x5507dd(0x832)][_0x5507dd(0x47c)]=function(_0xd26438){const _0x238ade=_0x5507dd;if(SceneManager[_0x238ade(0x499)]())return;if(!_0xd26438)return;if(!_0xd26438[_0x238ade(0x992)]())return;VisuMZ['BattleCore'][_0x238ade(0x3ae)][_0x238ade(0x542)](this);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x9bc)]=Sprite_Actor['prototype'][_0x5507dd(0x75d)],Sprite_Actor[_0x5507dd(0x832)][_0x5507dd(0x75d)]=function(_0x5879b6){const _0x2a8032=_0x5507dd;VisuMZ[_0x2a8032(0x8af)][_0x2a8032(0x32e)][_0x2a8032(0x9cb)][_0x2a8032(0x751)]?VisuMZ['BattleCore'][_0x2a8032(0x32e)][_0x2a8032(0x9cb)][_0x2a8032(0x751)][_0x2a8032(0x542)](this,_0x5879b6):VisuMZ['BattleCore']['Sprite_Actor_setActorHome'][_0x2a8032(0x542)](this,_0x5879b6);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x78c)]=Sprite_Actor[_0x5507dd(0x832)][_0x5507dd(0x45b)],Sprite_Actor[_0x5507dd(0x832)][_0x5507dd(0x45b)]=function(_0x58d516){const _0x1226ae=_0x5507dd;VisuMZ[_0x1226ae(0x8af)]['Sprite_Actor_setBattler'][_0x1226ae(0x542)](this,_0x58d516),this[_0x1226ae(0x598)](_0x58d516);},Sprite_Actor['prototype']['setBattlerBattleCore']=function(_0x29bc0e){const _0x47c067=_0x5507dd;if(!_0x29bc0e)return;if(!this[_0x47c067(0x1ec)])return;this[_0x47c067(0x1ec)]['anchor']['x']=this['_actor']['svBattlerAnchorX'](),this[_0x47c067(0x1ec)][_0x47c067(0x26b)]['y']=this[_0x47c067(0x414)]['svBattlerAnchorY'](),this[_0x47c067(0x963)]();},VisuMZ[_0x5507dd(0x8af)]['Sprite_Actor_update']=Sprite_Actor[_0x5507dd(0x832)][_0x5507dd(0x3ce)],Sprite_Actor[_0x5507dd(0x832)]['update']=function(){const _0x5f3a16=_0x5507dd;VisuMZ['BattleCore'][_0x5f3a16(0x81c)][_0x5f3a16(0x542)](this),this[_0x5f3a16(0x414)]&&(this[_0x5f3a16(0x9d7)](),this['updateStyleOpacity']());},VisuMZ['BattleCore'][_0x5507dd(0x40c)]=Sprite_Actor[_0x5507dd(0x832)]['updateBitmap'],Sprite_Actor[_0x5507dd(0x832)][_0x5507dd(0x67a)]=function(){const _0x20222e=_0x5507dd;VisuMZ[_0x20222e(0x8af)][_0x20222e(0x40c)][_0x20222e(0x542)](this),this[_0x20222e(0x1ec)]&&this[_0x20222e(0x1ec)][_0x20222e(0x257)]&&this[_0x20222e(0x861)]&&(this[_0x20222e(0x1ec)][_0x20222e(0x257)]['smooth']!==this[_0x20222e(0x861)][_0x20222e(0x6d4)]()&&(this['_mainSprite'][_0x20222e(0x257)]['smooth']=this[_0x20222e(0x861)]['battlerSmoothImage']()));},VisuMZ['BattleCore'][_0x5507dd(0x4ff)]=Sprite_Actor[_0x5507dd(0x832)][_0x5507dd(0x576)],Sprite_Actor[_0x5507dd(0x832)][_0x5507dd(0x576)]=function(){const _0x389345=_0x5507dd;VisuMZ[_0x389345(0x8af)][_0x389345(0x4ff)][_0x389345(0x542)](this),this[_0x389345(0x879)]();},Sprite_Actor[_0x5507dd(0x832)][_0x5507dd(0x879)]=function(){const _0x517646=_0x5507dd;if(!this['_mainSprite'])return;if(!this['_shadowSprite'])return;this[_0x517646(0x963)](),this[_0x517646(0x7e7)]();},Sprite_Actor[_0x5507dd(0x832)]['updateStateSprite']=function(){const _0x39af4f=_0x5507dd;this[_0x39af4f(0x776)][_0x39af4f(0x540)]['x']=0x1/(this[_0x39af4f(0x540)]['x']||0.001),this['_stateSprite']['scale']['y']=0x1/(this[_0x39af4f(0x540)]['y']||0.001);},Sprite_Actor[_0x5507dd(0x832)][_0x5507dd(0x3fc)]=function(){const _0x24ad74=_0x5507dd;if(!$gameSystem[_0x24ad74(0x577)]()&&this[_0x24ad74(0x2fa)]===Sprite_Actor){const _0x70cb51=Scene_Battle[_0x24ad74(0x832)]['battleLayoutStyle']();[_0x24ad74(0x92e),_0x24ad74(0x784),_0x24ad74(0x8ac),'border'][_0x24ad74(0x351)](_0x70cb51)&&(this[_0x24ad74(0x411)]=0x0);}},Sprite_Actor[_0x5507dd(0x832)][_0x5507dd(0x24a)]=function(){const _0x31d73f=_0x5507dd,_0x5269e2=this[_0x31d73f(0x414)];if(_0x5269e2){const _0x314602=_0x5269e2['stateMotionIndex']();if(_0x5269e2[_0x31d73f(0x43f)]()||_0x5269e2[_0x31d73f(0x535)]())this[_0x31d73f(0x6ab)](_0x31d73f(0x78a));else{if(_0x314602===0x3)this[_0x31d73f(0x6ab)](_0x31d73f(0x5cc));else{if(_0x314602===0x2)this[_0x31d73f(0x6ab)]('sleep');else{if(this['forceEscapeSprite'])this[_0x31d73f(0x6ab)](_0x31d73f(0x6f3));else{if(_0x5269e2[_0x31d73f(0x533)]())this[_0x31d73f(0x6ab)](_0x31d73f(0x9ca));else{if(_0x5269e2[_0x31d73f(0x379)]())this[_0x31d73f(0x6ab)](_0x31d73f(0x87a));else{if(_0x5269e2[_0x31d73f(0x80d)]()||_0x5269e2[_0x31d73f(0x501)]())this[_0x31d73f(0x6ab)](_0x31d73f(0x716));else{if(_0x314602===0x1)this['startMotion']('abnormal');else{if(_0x5269e2[_0x31d73f(0x20f)]())this['startMotion'](_0x31d73f(0x7ae));else{if(_0x5269e2['isUndecided']())this[_0x31d73f(0x6ab)](_0x31d73f(0x78a));else _0x5269e2[_0x31d73f(0x946)]()?this[_0x31d73f(0x6ab)](_0x31d73f(0x9ca)):this['startMotion']('walk');}}}}}}}}}}},Sprite_Actor[_0x5507dd(0x832)][_0x5507dd(0x4f5)]=function(){const _0x165431=_0x5507dd,_0x502c74=0xa,_0x5d101c=0x12c*_0x502c74,_0x260d18=0x1e*_0x502c74;this[_0x165431(0x39b)](_0x5d101c,0x0,_0x260d18);},Sprite_Actor[_0x5507dd(0x832)]['onMoveEnd']=function(){const _0x199b53=_0x5507dd;Sprite_Battler[_0x199b53(0x832)][_0x199b53(0x644)][_0x199b53(0x542)](this);},Sprite_Actor['prototype'][_0x5507dd(0x7d4)]=function(){const _0x390a59=_0x5507dd;return Sprite_Battler[_0x390a59(0x729)];},Sprite_Weapon['prototype']['animationWait']=function(){const _0x203adf=_0x5507dd;return Sprite_Battler[_0x203adf(0x729)];},Sprite_Actor['prototype'][_0x5507dd(0x23f)]=function(){},Sprite_Actor[_0x5507dd(0x832)][_0x5507dd(0x6f7)]=function(){},Sprite_Actor[_0x5507dd(0x832)]['updateMotionCount']=function(){const _0x525a3e=_0x5507dd;if(this['_motion']&&++this[_0x525a3e(0x975)]>=this['motionSpeed']()){if(this[_0x525a3e(0x35b)][_0x525a3e(0x5e5)])this[_0x525a3e(0x3e7)]=(this[_0x525a3e(0x3e7)]+0x1)%0x4;else this[_0x525a3e(0x3e7)]<0x2?this[_0x525a3e(0x3e7)]++:this['refreshMotion']();this[_0x525a3e(0x975)]=0x0;}},Sprite_Actor[_0x5507dd(0x832)][_0x5507dd(0x8c8)]=function(_0x5acc40){const _0x39ec27=_0x5507dd;if(_0x5acc40===_0x39ec27(0x965))this[_0x39ec27(0x28a)]=!![];if(this['_battler']&&this[_0x39ec27(0x861)][_0x39ec27(0x45e)]()){this[_0x39ec27(0x35b)]=Sprite_Actor[_0x39ec27(0x62d)]['dead'];return;}const _0x271d1e=Sprite_Actor[_0x39ec27(0x62d)][_0x5acc40];this[_0x39ec27(0x35b)]=_0x271d1e,this[_0x39ec27(0x975)]=0x0,this['_pattern']=0x0;},Sprite_Actor[_0x5507dd(0x832)][_0x5507dd(0x1e7)]=function(_0x3c4e59){const _0x1af4ff=_0x5507dd;if(this[_0x1af4ff(0x464)]())return;this['adjustWeaponSpriteOffset'](),this[_0x1af4ff(0x208)]['setup'](_0x3c4e59),this['_actor'][_0x1af4ff(0x97c)]();},Sprite_Actor[_0x5507dd(0x832)]['adjustWeaponSpriteOffset']=function(){const _0x486282=_0x5507dd;let _0x4449f1=-0x10,_0x186265=this[_0x486282(0x80e)]*0.5;const _0x90db7b=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x27c464=this['_battler'][_0x486282(0x249)]()[_0x486282(0x4d2)](_0x538c66=>_0x538c66&&_0x538c66[_0x486282(0x6a3)][_0x486282(0x1f2)](_0x90db7b)?Number(RegExp['$1']):0x0),_0xb9d632=this[_0x486282(0x861)][_0x486282(0x249)]()['map'](_0x58917d=>_0x58917d&&_0x58917d[_0x486282(0x6a3)][_0x486282(0x1f2)](_0x90db7b)?Number(RegExp['$2']):0x0);_0x4449f1=_0x27c464['reduce']((_0x2a2fa5,_0x43fde1)=>_0x2a2fa5+_0x43fde1,_0x4449f1),_0x186265=_0xb9d632['reduce']((_0x5b3633,_0x26d109)=>_0x5b3633+_0x26d109,_0x186265),this[_0x486282(0x208)]['x']=_0x4449f1,this['_weaponSprite']['y']=_0x186265,this[_0x486282(0x208)][_0x486282(0x3ce)]();},Sprite_Weapon[_0x5507dd(0x832)]['setup']=function(_0x2ac719){const _0x25eec2=_0x5507dd;this[_0x25eec2(0x863)]=_0x2ac719,this[_0x25eec2(0x9c4)]=-0x1,this[_0x25eec2(0x3e7)]=0x0,this['loadBitmap'](),this['updateFrame']();},Sprite_Actor['prototype'][_0x5507dd(0x7cd)]=function(){},Sprite_Actor[_0x5507dd(0x832)]['stepForward']=function(){const _0x306222=_0x5507dd,_0x3d737b=VisuMZ['BattleCore']['Settings'][_0x306222(0x431)],_0x2767dc=_0x3d737b[_0x306222(0x36c)],_0x7ed347=_0x3d737b[_0x306222(0x5b2)],_0x59d472=_0x3d737b[_0x306222(0x377)];this[_0x306222(0x39b)](-_0x2767dc,-_0x7ed347,_0x59d472);},VisuMZ['BattleCore']['Sprite_Actor_updateFrame']=Sprite_Actor[_0x5507dd(0x832)][_0x5507dd(0x4f1)],Sprite_Actor[_0x5507dd(0x832)][_0x5507dd(0x4f1)]=function(){const _0x1fd220=_0x5507dd;this['hasStaticSvBattler']()?this[_0x1fd220(0x575)]():(this['applyFreezeMotionFrames'](),VisuMZ[_0x1fd220(0x8af)][_0x1fd220(0x72b)]['call'](this));},Sprite_Actor['prototype'][_0x5507dd(0x473)]=function(){const _0x1d749a=_0x5507dd;if(this[_0x1d749a(0x861)]&&this[_0x1d749a(0x861)]['_freezeMotionData']){const _0x718ca4=this['_battler'][_0x1d749a(0x74f)];this[_0x1d749a(0x35b)]=Sprite_Actor[_0x1d749a(0x62d)][_0x718ca4[_0x1d749a(0x86d)]],this['_pattern']=_0x718ca4['pattern'];const _0x15d2e5=this[_0x1d749a(0x208)];_0x15d2e5[_0x1d749a(0x9bb)](_0x718ca4['weaponImageId'],_0x718ca4['pattern']),this[_0x1d749a(0x73f)]();}},Sprite_Weapon[_0x5507dd(0x832)]['freezeFrame']=function(_0x17eb98,_0x2b5a20){const _0x5c50cf=_0x5507dd;this['_weaponImageId']=_0x17eb98,this[_0x5c50cf(0x9c4)]=-Infinity,this[_0x5c50cf(0x3e7)]=_0x2b5a20,this[_0x5c50cf(0x9c5)](),this['updateFrame']();},Sprite_Enemy[_0x5507dd(0x832)][_0x5507dd(0x844)]=function(){const _0x21db6d=_0x5507dd;Sprite_Battler[_0x21db6d(0x832)][_0x21db6d(0x844)][_0x21db6d(0x542)](this),this[_0x21db6d(0x999)]=null,this['_appeared']=![],this[_0x21db6d(0x5f2)]='',this[_0x21db6d(0x54a)]=0x0,this[_0x21db6d(0x9d3)]=null,this[_0x21db6d(0x7dc)]=0x0,this[_0x21db6d(0x4ef)]=0x0,this[_0x21db6d(0x33c)](),this[_0x21db6d(0x6f2)]();},VisuMZ['BattleCore'][_0x5507dd(0x972)]=Sprite_Enemy[_0x5507dd(0x832)][_0x5507dd(0x3ce)],Sprite_Enemy[_0x5507dd(0x832)][_0x5507dd(0x3ce)]=function(){const _0x48ee1d=_0x5507dd;VisuMZ['BattleCore']['Sprite_Enemy_update'][_0x48ee1d(0x542)](this),this[_0x48ee1d(0x963)]();},Sprite_Enemy[_0x5507dd(0x832)][_0x5507dd(0x33c)]=function(){const _0x4a9eec=_0x5507dd;this[_0x4a9eec(0x1ec)]=new Sprite(),this[_0x4a9eec(0x1ec)]['anchor']['x']=0.5,this[_0x4a9eec(0x1ec)][_0x4a9eec(0x26b)]['y']=0x1,this[_0x4a9eec(0x83d)](this[_0x4a9eec(0x1ec)]),this[_0x4a9eec(0x957)]();},Sprite_Enemy['prototype'][_0x5507dd(0x6af)]=function(){const _0x19c441=_0x5507dd;return this[_0x19c441(0x8e6)]||this[_0x19c441(0x1ec)]||this;},Sprite_Enemy[_0x5507dd(0x832)][_0x5507dd(0x9c5)]=function(_0x25fb66){const _0x2de562=_0x5507dd;this['bitmap']=new Bitmap(0x1,0x1);if(this[_0x2de562(0x77a)]()){const _0x634102=this[_0x2de562(0x999)][_0x2de562(0x5fe)]();this[_0x2de562(0x257)]=new Bitmap(_0x634102[_0x2de562(0x4fa)],_0x634102['height']),this[_0x2de562(0x1ec)][_0x2de562(0x257)]=new Bitmap(0x1,0x1);}else $gameSystem[_0x2de562(0x577)]()?(this[_0x2de562(0x1ec)]['bitmap']=ImageManager[_0x2de562(0x640)](_0x25fb66),this[_0x2de562(0x1ec)][_0x2de562(0x257)][_0x2de562(0x292)](this['createEmptyBitmap'][_0x2de562(0x9f4)](this))):(this[_0x2de562(0x1ec)][_0x2de562(0x257)]=ImageManager[_0x2de562(0x881)](_0x25fb66),this[_0x2de562(0x1ec)][_0x2de562(0x257)][_0x2de562(0x292)](this[_0x2de562(0x5ec)][_0x2de562(0x9f4)](this)));},Sprite_Enemy[_0x5507dd(0x832)][_0x5507dd(0x5ec)]=function(){const _0x4668ee=_0x5507dd,_0x308922=this[_0x4668ee(0x1ec)][_0x4668ee(0x257)];_0x308922&&(this['bitmap']=new Bitmap(_0x308922['width'],_0x308922[_0x4668ee(0x80e)]));},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x1a7)]=Sprite_Enemy['prototype']['setHue'],Sprite_Enemy['prototype']['setHue']=function(_0x2b929a){const _0x29304e=_0x5507dd;this[_0x29304e(0x1ec)]&&this[_0x29304e(0x1ec)]['setHue'](_0x2b929a);},VisuMZ['BattleCore'][_0x5507dd(0x2c8)]=Sprite_Enemy[_0x5507dd(0x832)]['initVisibility'],Sprite_Enemy[_0x5507dd(0x832)]['initVisibility']=function(){const _0x25b0c8=_0x5507dd;this[_0x25b0c8(0x393)]()?VisuMZ[_0x25b0c8(0x8af)]['Sprite_Enemy_initVisibility']['call'](this):(this[_0x25b0c8(0x5da)]=!this[_0x25b0c8(0x999)]['isHidden'](),!this[_0x25b0c8(0x5da)]&&(this[_0x25b0c8(0x411)]=0x0));},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x289)]=Sprite_Enemy[_0x5507dd(0x832)][_0x5507dd(0x4f2)],Sprite_Enemy['prototype'][_0x5507dd(0x4f2)]=function(){const _0x24b977=_0x5507dd;if(this[_0x24b977(0x393)]())VisuMZ[_0x24b977(0x8af)][_0x24b977(0x289)][_0x24b977(0x542)](this);},Sprite_Enemy['prototype']['updateFrame']=function(){const _0x54b2f6=_0x5507dd;Sprite_Battler['prototype'][_0x54b2f6(0x4f1)]['call'](this);const _0x5cae02=this['mainSprite']()||this;if(!_0x5cae02)return;!_0x5cae02[_0x54b2f6(0x257)]&&(_0x5cae02['bitmap']=new Bitmap(this[_0x54b2f6(0x4fa)],this[_0x54b2f6(0x80e)])),this[_0x54b2f6(0x9d3)]==='bossCollapse'?this[_0x54b2f6(0x1ec)][_0x54b2f6(0x57d)](0x0,0x0,this[_0x54b2f6(0x1ec)]['width'],this[_0x54b2f6(0x7dc)]):_0x5cae02[_0x54b2f6(0x57d)](0x0,0x0,_0x5cae02[_0x54b2f6(0x257)][_0x54b2f6(0x4fa)],this['bitmap'][_0x54b2f6(0x80e)]);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x4b0)]=Sprite_Enemy[_0x5507dd(0x832)][_0x5507dd(0x3c8)],Sprite_Enemy[_0x5507dd(0x832)][_0x5507dd(0x3c8)]=function(){const _0x1a49ea=_0x5507dd;if(this[_0x1a49ea(0x393)]())VisuMZ[_0x1a49ea(0x8af)]['Sprite_Enemy_updateBossCollapse'][_0x1a49ea(0x542)](this);},Sprite_Enemy[_0x5507dd(0x832)][_0x5507dd(0x586)]=function(){const _0x2da310=_0x5507dd;return Sprite_Battler[_0x2da310(0x832)][_0x2da310(0x586)]['call'](this);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x21f)]=Sprite_Enemy[_0x5507dd(0x832)][_0x5507dd(0x9d7)],Sprite_Enemy[_0x5507dd(0x832)][_0x5507dd(0x9d7)]=function(){const _0x5dbe24=_0x5507dd;VisuMZ['BattleCore'][_0x5dbe24(0x21f)][_0x5dbe24(0x542)](this),this[_0x5dbe24(0x536)]();},Sprite_Enemy[_0x5507dd(0x832)][_0x5507dd(0x536)]=function(){const _0x55a0ef=_0x5507dd,_0x31d052=VisuMZ[_0x55a0ef(0x8af)]['Settings'][_0x55a0ef(0x77b)];if(_0x31d052[_0x55a0ef(0x91f)]&&!_0x31d052[_0x55a0ef(0x7cf)]){this[_0x55a0ef(0x93a)]['opacity']=0x0;return;}this[_0x55a0ef(0x93a)]['x']=0x0,this['_stateIconSprite']['x']+=this[_0x55a0ef(0x861)]['battleUIOffsetX'](),this[_0x55a0ef(0x93a)]['y']=-this[_0x55a0ef(0x257)][_0x55a0ef(0x80e)]-this[_0x55a0ef(0x93a)][_0x55a0ef(0x80e)]-0x4,this[_0x55a0ef(0x93a)]['y']+=this['_battler']['battleUIOffsetY'](),this['_stateIconSprite'][_0x55a0ef(0x540)]['x']=0x1/(this[_0x55a0ef(0x540)]['x']||0.001),this[_0x55a0ef(0x93a)]['scale']['y']=0x1/(this['scale']['y']||0.001),this[_0x55a0ef(0x77a)]()&&(this[_0x55a0ef(0x5c5)][_0x55a0ef(0x776)][_0x55a0ef(0x540)]['x']=-0x1/(this[_0x55a0ef(0x540)]['x']||0.001),this[_0x55a0ef(0x5c5)]['_stateSprite'][_0x55a0ef(0x540)]['y']=0x1/(this[_0x55a0ef(0x540)]['y']||0.001));},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x6cd)]=Sprite_Enemy[_0x5507dd(0x832)][_0x5507dd(0x45b)],Sprite_Enemy['prototype']['setBattler']=function(_0x2e1a41){const _0x268f8c=_0x5507dd;VisuMZ[_0x268f8c(0x8af)]['Sprite_Enemy_setBattler']['call'](this,_0x2e1a41),this[_0x268f8c(0x996)](_0x2e1a41);},Sprite_Enemy[_0x5507dd(0x832)][_0x5507dd(0x996)]=function(_0x1297d1){const _0x454aa7=_0x5507dd;!this['_svBattlerSprite']&&(this[_0x454aa7(0x5c5)]=new Sprite_SvEnemy(_0x1297d1),this[_0x454aa7(0x957)]()),this['_svBattlerSprite']['setBattler'](_0x1297d1);},Sprite_Enemy[_0x5507dd(0x832)][_0x5507dd(0x77a)]=function(){const _0x5662a6=_0x5507dd;return this[_0x5662a6(0x999)]&&this[_0x5662a6(0x999)][_0x5662a6(0x77a)]();},Sprite_Enemy[_0x5507dd(0x832)][_0x5507dd(0x393)]=function(){const _0x5da47b=_0x5507dd;return this[_0x5da47b(0x77a)]()?this['_enemy'][_0x5da47b(0x393)]():!![];},Sprite_Enemy['prototype'][_0x5507dd(0x24a)]=function(){const _0x43198c=_0x5507dd;this[_0x43198c(0x77a)]()&&this[_0x43198c(0x5c5)][_0x43198c(0x24a)]();},Sprite_Enemy[_0x5507dd(0x832)][_0x5507dd(0x8c8)]=function(_0x58d5a4){const _0x515afc=_0x5507dd;if(this['hasSvBattler']())this['_svBattlerSprite'][_0x515afc(0x8c8)](_0x58d5a4);},Sprite_Enemy[_0x5507dd(0x832)][_0x5507dd(0x1e7)]=function(_0x5f0e5b){const _0x2d3c27=_0x5507dd;if(this[_0x2d3c27(0x77a)]())this[_0x2d3c27(0x5c5)][_0x2d3c27(0x1e7)](_0x5f0e5b);},Sprite_Enemy[_0x5507dd(0x832)][_0x5507dd(0x480)]=function(){const _0x3361ef=_0x5507dd,_0x8c07b3=VisuMZ[_0x3361ef(0x8af)][_0x3361ef(0x32e)][_0x3361ef(0x431)],_0x10151e=_0x8c07b3['StepDistanceX'],_0x53fee6=_0x8c07b3[_0x3361ef(0x5b2)],_0x331ebb=_0x8c07b3[_0x3361ef(0x377)];this[_0x3361ef(0x39b)](_0x10151e,_0x53fee6,_0x331ebb);};function _0x38a5(_0x2d3efa,_0xfbe9e3){const _0x6ddfd=_0x6ddf();return _0x38a5=function(_0x38a540,_0x5c19af){_0x38a540=_0x38a540-0x195;let _0x3072f9=_0x6ddfd[_0x38a540];return _0x3072f9;},_0x38a5(_0x2d3efa,_0xfbe9e3);}function Sprite_SvEnemy(){const _0xd2b926=_0x5507dd;this[_0xd2b926(0x2aa)](...arguments);}function _0x6ddf(){const _0x4516bd=['Window_ItemList_maxCols','_distortionSprite','startFloat','itemEffectAddNormalState','drawIcon','waitForJump','Game_Action_itemEffectAddAttackState','displayReflection','isActor','randomTargets','Game_Battler_performActionStart','alterBreakShield','setupOversaturateImpactFilter','ALL\x20SKILLS','_animationContainer','WaitForOpacity','onAllActionsEnd','jump','critical','regenerateAll','StatusWindowAttachmentFrontOffsetY','ActSeq_Animation_AttackAnimation','ConvertParams','setHorrorEffectSettings','floor','Game_Action_setGuard','_partyCommandWindow','effect','PreStartBattleJS','isCTB','VisuMZ_3_SideviewBattleUI','partyCommandWindowRectBorderStyle','Actions','unchanged','EscapeSuccessJS','VarianceFormulaJS','addOptionsCommand','join','_autoBattleWindow','1547fCuGaA','destroyDamageSprite','ActSeq_Mechanics_EtbAction','ActSeq_Horror_Clear','Armor-%1-%2','resize','_item','drawItemBackground','actor','BravePoints','_opacityWholeDuration','createDamageContainer','setupBattleCore','resetFontSettings','_floatWholeDuration','_allTargets','TpbGaugeOffsetX','validTargets','Game_BattlerBase_canGuard','NameAttachStateIcon','isFightCommandEnabled','_backAttachmentSprite','alterPriority','ActSeq_Movement_WaitForMovement','ActSeq_Mechanics_OnceParallel','isFloating','_canLose','changeBattlerOpacity','makeActionOrders','parse','item','isDTB','targetDistortionSpritePosition','setCursorRect','default','ParseWeaponNotetags','placeActorName','actorCommandCancelTPB','ForceRandom','AUTO\x20BATTLE','iconWidth','isBattleTest','motionIdle','children','updateOnceParallelInterpreters','Window_BattleLog_update','_stateIconSprite','ActSeq_Mechanics_DamagePopup','fontSize','BattleManager_selectNextCommand','createAutoBattleWindow','addTextToCombatLog','revertTpbCachedActor','Window_BattleLog_displayMpDamage','ActSeq_Mechanics_PtbAlterCost','battleCommandName','Game_BattlerBase_die','makeSuccess','currentAction','ARRAYFUNC','ARRAYNUM','createDigits','_forcedHomeX','actionBattleCoreJS','MAXHP','auto','MpGaugeOffsetY','setupBattlebackBattleCore','ParseItemNotetags','isBTB','reverse','Sprite_Battler_startMove','ActSeq_Movement_FacePoint','adjustPosition_ScaleToFit','sleep','attachSpritesToDistortionSprite','setActiveWeaponSlot','States','onEncounter','getItemDamageAmountLabelBattleCore','setLastPluginCommandInterpreter','onFloatEnd','round','isForFriendBattleCore','_phase','+%1','targetSpritePosition','updateShadowVisibility','updateBattlebackBitmap1','victory','isFTB','ArRedRate','_skewY','_targetIndex','_targetAngle','ARRAYJSON','setHandler','processActorCommandCancelTPB','_targetHomeX','CheckVisibleSwitchNotetags','ShowPortraits','isAnyoneGrowing','Sprite_Enemy_update','Game_Enemy_setup','isDuringNonLoopingMotion','_motionCount','commandFight','ElementStatusCore','setupActionSet','startSkew','Buffs','undecided','clearWeaponAnimation','Window_BattleLog_performCounter','clearResult','shift','updateSkew','StateIconOffsetX','uiInputPosition','_commonEventIDs','ARRAYSTR','alive\x20friends','createSeparateDamagePopups','initMembersBattleCore','battleStatusWindowAnimationContainer','mpDamage','finishActorInput','MAT','WaitForFloat','drawGauge','BattleEndEvent','3351KNbrDN','worldTransform','BattleManager_inputtingAction','canMove','repeatTargets','BattleManager_onEncounter','MP_Flat','setSvBattlerSprite','IconStypeMagic','AutoBattleCancel','_enemy','process_VisuMZ_BattleCore_jsFunctions','_tpbSceneChangeCacheActor','AttachStateOffsetY','isBattlerFlipped','_index','_homeX','adjustPosition_1for1','_tempActor','clearMotion','isSkillItemWindowsMiddle','Scene_Battle_start','startActorSelection','_effectsContainer','stateRate','ActSeq_Movement_WaitForSpin','StatusWindowSkinHide','skillItemWindowRectBorderStyle','_updateClientArea','updatePositionBattleCore','getNextSubjectFromPool','anchorY','ActSeq_BattleLog_PushBaseLine','Scene_Battle_onActorOk','AutoNotetag','ShowPortraitsBorderStyle','apply','ActSeq_BattleLog_AddText','isAutoBattleCommandAdded','currentSymbol','snapForBackground','initBattleCore','gainMp','center','freezeFrame','Sprite_Actor_setActorHome','isDeathStateAffected','battleCommandIcon','isQueueOptionsMenu','gainHalfActionsPTB','BattleManager_initMembers','adjustPosition_ScaleDown','priority','_animationCount','loadBitmap','shadow','process_VisuMZ_BattleCore_BaseTroops','process_VisuMZ_BattleCore_Action_Notetags','actionSplicePoint','wait','Actor','CommandAddAutoBattle','invokeAction','isShownOnBattlePortrait','updateBattlebackBitmap','isPlaytest','_customDamageFormula','setFullActionsPTB','_effectType','spell','SkillItemStandardCols','VisuMZ_1_ElementStatusCore','updateStateSprite','PostDamageAsTargetJS','SkillItemBorderCols','makeTargetsBattleCore','Window_BattleLog_performAction','clear','damageFlat','-%1\x20MP','statusTextAutoBattleStyle','compatibilityVisible','numTargets','extraHeight','RegExp','ActSeq_Impact_MotionBlurScreen','getHalfActionsPTB','SkewX','process_VisuMZ_BattleCore_CreateRegExp','applyImmortal','forceSelect','Actor-%1-%2','singleSkill','TpbActiveChangeEnabled','setBattleCameraOffset','createPartyCommandWindow','blt','checkShowHideSkillNotetags','performMoveToTargets','gainStoredBoostPoints','Sprite_Animation_targetSpritePosition','bind','BattleManager_processVictory','STR','1178040IMxnTq','battler','needsSelectionBattleCore','VisuMZ_3_WeaknessDisplay','encounterList','addCommand','wtypeId','isActiveTpb','remove','weaponTypes','setValue','%1RegenerateJS','BindCommonEventKeysForObj','EscapeFailureJS','canEscape','ActSeq_Projectile_Animation','action','DamageFlat','mmp','isGrowing','displayBuffs','calcWindowHeight','setupIconTextPopup','onGrowEnd','PreDamageJS','battlerSprites','ActSeq_Horror_TVCreate','_createCursorArea','pointY','getBattlePortrait','%1StartTurnJS','Sprite_Actor_initMembers','targetObjects','requestMotion','Game_Battler_performDamage','hide','updateCallMenu','updateBattleProcess','drawItemImage','showPortraits','removeChild','_target','_growDuration','moveBattlerToPoint','addShowHpGaugeCommand','AutoBattle','_activeWeaponSlot','ActionAnimation','Game_Battler_makeSpeed','moveToStartPosition','dead\x20opponents','displayTpDamage','CurrentTurn','HelpFight','isUndecided','isSTB','_actorSprites','startEnemySelection','drawText','isCustomBattleScope','processBorderActor','performMiss','ActSeq_Movement_Float','WaitCount','isTpbCharged','_battleField','_actorWindow','isMagicSkill','ceil','commandStyle','PrioritySortActive','Game_Interpreter_command283','makeAutoBattleActions','makeBattleCommand','clearActiveWeaponSlot','createBattleUIOffsetY','counterAttack','Game_Battler_onBattleEnd','battleMembers','callOptions','_duration','_jumpDuration','Sprite_Enemy_setHue','context','ActSeq_Skew_Reset','_currentAngle','ScaleUp','ActSeq_Animation_ChangeBattlePortrait','CommandAddOptions','itemEffectAddAttackState','updateFlip','ActSeq_Mechanics_CtbOrder','RequiresDefeat','PRE-','HpGauge','filter','rowSpacing','ActSeqImpact','alive\x20opponents','CastCertain','cancelTargetSelectionVisibility','createActorCommandWindow','_subject','isBusy','performActionStart','battleEffect','recoverAll','2712FkHWgz','resizeWindowBorderStyle','setBattlerFacePoint','setSTBExploited','Window_BattleLog_displayMiss','Filename','activate','_methods','refreshActorPortrait','Game_Action_applyGlobal','battleCameraData','_battleLayoutStyle','updateGrow','addAnimationSpriteToContainer','Window_BattleLog_displayEvasion','_waitCount','PopupPosition','updateUiContainerPosition','applyHardDamageCap','Window_BattleLog_performActionStart','_forcedHomeY','Window_ActorCommand_initialize','alterType','DualWield','isATB','troop','BindCommonEventKeysForGroup','updateSpin','BattleManager_onEscapeFailure','onEnemyOk','isEffecting','needsActorInputCancel','ResetOffset','substitute','offsetX','SideviewSelect','BattleManager_startAction','isBattleMember','_visualHpGauge_JustDied','forceWeaponAnimation','ActSeq_Movement_FaceTarget','Window_BattleLog_performMiss','isSceneChanging','PopupShiftX','_mainSprite','onDatabaseLoaded','_cacheTextWidth','_forcedBattleLayout','addSingleSkillCommands','_targetFloatHeight','match','Scene_Map_launchBattle','_battleCoreBattleResumeAfter','autoMeleeMultiTargetActionSet','Exploiter','POST-','battleInjectPrep','itemWindowRect','_lastPluginCommandInterpreter','SvBattlerMass-%1-%2','useItem','MotionType','makeActions','CommonEventID','Amp','battleEnd','setMoveEasingType','Duration','addGeneralOptions','createDistortionSprite','launchBattle','setActiveWeaponSet','_weaponSprite','_text','AS\x20TARGET','casting','CastMagical','Setting','StatusWindowAttachmentBackOffsetY','isDying','Scene_Map_initializeAfter','_commandNameWindow','StyleOFF','performSubstitute','Pre','ChargeRate','OffsetAdjust','autoSelectPriority','extraPositionScaledY','ClearBattleLog','isItem','requestMotionRefresh','softDamageCap','ActSeq_Animation_ActionAnimation','CmdStyle','Sprite_Enemy_updateStateSprite','commandOptions','NameOffsetY','isTurnBased','autoSelectLastSelected','performAttack','ActSeq_Animation_AttackAnimation2','1:1','helpWindowRect','ActSeq_Inject_AnimationStart','callUpdateHelp','drawSkillCost','isAnyoneJumping','processEscape','equipSlots','OverallFormulaJS','linkSprite','clearActiveWeaponSet','Game_Battler_startTpbTurn','current\x20target','Targets1','setupMotionBlurImpactFilter','inHomePosition','damageOffsetY','ActSeq_Mechanics_StbExploit','maxLines','frameVisible','canUse','pushBaseLine','canBattlerMove','onTurnEnd','skillItemWindowRectMiddle','setupMotion','isTpb','ShowWeapon','ActSeq_Zoom_Reset','startAction','isNonSubmenuCancel','addAutoBattleCommand','commandStyleCheck','front\x20base','clearBattleRefreshRequest','traitObjects','refreshMotion','FlashColor','isSelected','createAnimationSprite','BreakShields','ActSeq_Movement_Scale','alphabetic','placeStateIcon','turn','checkCacheKey','updateBattlebackBitmap2','Scene_Battle_selectPreviousCommand','SmoothImage','bitmap','maxCommands','gainTp','drawItemStatusXPStyle','gainCurrentActionsFTB','Game_Map_battleback2Name','Game_Battler_onTurnEnd','usePremadeActionSequence','isCommandEnabled','WaitForZoom','noSimilarSTypes','Game_Action_apply','addChildToUiContainer','displayFailure','onBattleEnd','Defeat','loadBattleback1','battleback2Name','_jumpWholeDuration','exit','anchor','_targetSkewX','guardSkillId','WaitForEffect','WaitForAngle','ActSeq_Target_CurrentIndex','param','CommandWidth','ActSeq_Motion_RefreshMotion','ARRAYEVAL','addImmortal','inBattle','prepareBorderActor','evalDamageFormulaBattleCore','_createClientArea','_borderPortraitDuration','Game_Interpreter_PluginCommand','BattleManager_endAction','svBattlerShadowVisible','startPartyCommandSelection','updateStatusWindowPosition','custom','JS\x20%1END\x20TURN','alive\x20battlers','parseForcedGameTroopSettingsBattleCore','ActSeq_Impact_MotionTrailCreate','CastAnimation','Game_Action_isForFriend','selectNextActor','TpGaugeOffsetY','Sprite_Enemy_updateCollapse','_checkOn','makeTargets','actorId','mainSpriteScaleX','contains','_helpWindow','clamp','FocusX','addLoadListener','isHiddenSkill','setHalfActionsPTB','EnableSoftCap','ActSeq_Zoom_WaitForZoom','drain','Item-%1-%2','selectPreviousCommand','Scene_Battle_stop','members','ActSeq_ChangeSkew','drawTextTopAligned','PostApply%1JS','terminate','cancelButtonText','removedStateObjects','Victory','Game_Action_isForOpponent','battleAnimation','Window_BattleStatus_initialize','endAnimation','actor%1-portrait','ActSeq_Inject_WaitForInjectAni','process_VisuMZ_BattleCore_CommonEventKeys','initialize','autoBattleWindowRect','visible','StartTurnShow','AddOption','setupNegativeImpactFilter','BattleManager_cancelActorInput','Window_BattleLog_performDamage','TimeScale','VisuMZ_3_ActSeqProjectiles','alive\x20enemies','DamageType%1','restore','doesPageHaveOnceParallelStart','Slot','isOpen','swing','Skills','\x20to\x20%1\x20midbattle.','ATK','WaitForMovement','setupTextPopup','enemyNames','filterArea','isAffectedByBreakShield','MDF','createBattleField','_back1Sprite','TpbGaugeOffsetY','command283','Sprite_Enemy_initVisibility','requestFauxAnimation','430708nePYBb','ScaleToFit','actionEffect','dimColor2','_opacityDuration','AttachStateOffsetX','Direction','\x5cI[%1]%2','PostStartBattleJS','_surprise','_targetHomeY','_additionalSprites','JS\x20%1APPLY\x20%2','isFastForward','findTargetSprite','processVictory','DTB','shouldPopupDamage','WaitCount1','Mechanics','Enemy-%1-%2','die','moveBattlerHomeDistance','displayMiss','dead\x20battlers','Game_Actor_equips','ActSeq_Mechanics_RemoveState','_weather','setupChild','Scene_ItemBase_applyItem','ActSeq_Movement_FaceDirection','createCancelButton','alive\x20enemies\x20not\x20target','updateVisibility','WaitForAnimation','split','concat','setBattlePortrait','endBattle','_battlerContainer','performCollapse','repositionEnemiesByResolution','Reveal','COMBAT\x20LOG','ShowEnemyGauge','Sprite_StateIcon_updateFrame','SwitchMissEvade','BattleDefeatJS','constructor','_growEasing','setSkill','ActSeq_Movement_HomeMoveToTarget','criticalDmgRate','Debuffs','Game_Battler_onBattleStart','fnordAddedStates','ActSeq_ChangeAngle','%1Damage%2JS','allBattleMembers','HpGaugeOffsetY','BTestBypass','CoreEngine','DistanceX','CmdIconAutoBattle','isAnyoneFloating','_jumpHeight','Window_BattleLog_performEvasion','smooth','ParseEnemyNotetags','JS\x20ESCAPE\x20SUCCESS','playOnceParallelTroopPage','CreateCommonEventKeys','_totalValue','hardDamageCap','skills','ActSeq_Impact_Negative','ActSeq_Target_NextTarget','formula','startInjectAnimation','DefaultStyle','charging','+%1\x20MP','_emptyBitmap','Destination','_preBattleCommonEvent','svBattlerName','attackAnimationIdSlot','battleCoreTpbMainPhase','bitmapHeight','maxTp','_motionType','Game_Map_setupBattleback','createInnerPortrait','commandEscape','isPartyTpbInputtable','removeAnimationFromContainer','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','isPreviousScene','isMagical','buffRemove','Settings','ActSeq_Element_ForceElements','windowPadding','isSkewing','ActSeq_Movement_BattleStep','isCustomActionSequence','Sprite_Battler_initMembers','applyGlobalCommonEventNotetags','sliceMax','attackSkillId','isMeleeMultiTargetAction','helpWindowRectBorderStyle','updateCustomActionSequence','checkTpbInputClose','createMainSprite','helpAreaBottom','clearHorrorEffects','indexOf','CalcEscapeRaiseJS','_drawTextOutline','mhp','applyItem','Game_System_initialize','ActSeq_Mechanics_PtbConvert','Sprite_Battler_setHome','TextColor','Game_Action_setAttack','isBattlerGrounded','mainSpriteScaleY','turnOrderChangeOTB','clearBattleCoreData','WaitForCamera','callNextMethod','pages','updateShadowScale','includes','isFlipped','addSingleSkillCommand','loadWindowskin','removeActor','DefaultDamageStyle','processBattleCoreJS','statusWindowRectXPStyle','drawItemImageXPStyle','getSkillIdWithName','_motion','_handlers','power','AntiTintUiElements','ActionSkillMsg1','changeCtbChargeTime','adjustPosition_ScaleUp','return\x200','battleInjectAni','gaugeLineHeight','HP_Rate','VisuMZ_2_BattleSystemSTB','ActSeq_Set_TargetActionSet','effects','_targetOpacity','setupZoomBlurImpactFilter','setBattlerFlip','StepDistanceX','ActSeq_Horror_GlitchRemove','playOnceParallelInterpreter','1690840aDmkYY','FlashDuration','setupBattleCoreData','some','Scene_Battle_createCancelButton','Parse_Notetags_TraitObjects','drawItemImagePortraitStyle','drawActorFace','StepDuration','repeats','isChanting','getWtypeIdWithName','createEnemyNames','MotionFrameWait','_actions','performEvasion','createAllWindows','FullActions','_damageContainer','wholeActionSet','movement','Skill-%1-%2','Parse_Notetags_Action','setGuard','adjustPosition','waitCount','onActorOk','emerge','_tempEquipCheck','boxHeight','battleOpacity','getLastPluginCommandInterpreter','BattleManager_endBattle','_linkedSprite','getTraitSetKeys','_reflectionTarget','allowCollapse','DamageStyleList','ActSeq_Movement_Skew','textWidth','windowAreaHeight','VisuMZ_4_CombatLog','itemLineRect','Game_Battler_performEvasion','startMove','onEncounterBattleCore','battlerName','resetResultSwitches','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','battlerShadowScaleY','ActSeq_Mechanics_BtbGain','getBattlePortraitOffsetY','Sprite_Damage_createChildSprite','getDefeatedEnemies','_padding','DefeatEvent','updateFloat','isAnyoneChangingOpacity','toUseBoostPoints','top','startGrow','getAttackMotion','TargetLocation','Sprite_Actor_moveToStartPosition','ActSeq_Impact_BlueRedInvert','SwitchCritical','_uiContainer','PopupOffsetY','Game_Troop_setup','battleUIOffsetX','setupDamagePopup','Game_BattlerBase_isStateResist','ActSeq_Mechanics_StbRemoveExcessActions','setHelpWindowItem','isAnyoneSkewing','SvWeaponMass-%1-%2','performFlinch','hitFlat','processRandomizedData','Game_Actor_makeActionList','CounterPlayback','isAtbCastingState','FUNC','skillId','Scene_Options','_spriteset','_lastEnemy','_animationSprites','createBattleFieldContainer','updateBossCollapse','drawLineText','isAutoBattle','skew','makeSpeed','createContents','update','COMBATLOG','Game_Action_isForRandom','onRegeneratePlayStateAnimation','clearRect','setup','ConfigManager_applyData','Window_BattleLog_displayActionResults','displayCurrentState','cancelActorInput','result','isTickBased','Window_BattleLog_displayFailure','_skewWholeDuration','PostEndBattleJS','_enemyIDs','_baseTexture','Sprite_Battler_update','isOptionsCommandEnabled','_updateCursorArea','Parse_Notetags_Targets','FrontViewSelect','clearOnceParallelInterpreters','_targetGrowX','tone','_pattern','ActSeq_Mechanics_FtbAction','skillTypes','Point','PreApplyJS','PreStartActionJS','displayMpDamage','ActSeq_Mechanics_WaitForEffect','noise','_list','Spriteset_Battle_update','checkAutoCustomActionSequenceNotetagEffect','isNextSceneBattleTransitionable','setActionState','drawItem','_regionBattleback2','createBattleUIOffsetX','isNextScene','_enemies','Enable','SceneManager_push','updateStyleOpacity','_tempBattler','visibilityState','attackStates','FaceAway','drawItemStyleIconText','_createDamageContainer','BaseTroopIDs','Scene_Boot_onDatabaseLoaded','_active','MotionIdle','displayAction','alterChange','checkSceneBattleTransitionable','arRedFlat','deathStateId','Sprite_Actor_updateBitmap','inputtingAction','PreApply%1JS','CriticalHitMultiplier','command357','opacity','Scene_Battle_onEnemyCancel','_cursorSprite','_actor','refreshStatusWindow','CmdIconEscape','command339','StartTurnMsg','initBattlePortrait','TPB','createCommandVisibleJS','addedBuffs','addNewState','VisuMZ_1_SkillsStatesCore','setHome','callOkHandler','IconSet','getItemDamageAmountTextOriginal','VisuMZ_2_DragonbonesUnion','getStypeIdWithName','message1','JS\x20%1END\x20ACTION','vertCells','addOnceParallelInterpreter','isDamagePopupRequested','ActSeq_Impact_ZoomBlurTargetCenter','refreshBattlerMotions','centerFrontViewSprite','_attackAnimationId','autoBattle','canGuard','Game_BattlerBase_refresh','ActionSequence','pause','updateBorderStyle','spriteId','process_VisuMZ_BattleCore_PluginParams','Window_BattleEnemy_initialize','getColor','_callSceneOptions','isVisualHpGaugeDisplayed','chantStyle','message4','extraPositionX','_commonEventQueue','_animation','isInputting','text\x20target','VisuMZ_3_BoostAction','opponentsUnit','_cursorArea','16572BDLQdj','Sprite_Actor_createStateSprite','textAlign','ActSeq_Movement_WaitForJump','_stypeIDs','right','nextActiveWeaponSlot','Scene_Battle_terminate','DigitGroupingDamageSprites','_offsetX','registerCommand','isStatusAffected','updateLink','origin','isBattleCoreTargetScope','BattleManager_onEscapeSuccess','_immortal','createTargetsJS','NameOffsetX','left','svBattlerAnchorY','battleCorePreBattleCommonEvent','swapEnemyIDs','setBattler','Scene_Battle_createPartyCommandWindow','isTriggered','isDead','ActSeq_Movement_HomeMoveBy','ActSeq_Animation_PlayAtCoordinate','isBreakStunned','setupFont','attackMotions','hasStaticSvBattler','active','_lastAction','DefaultSoftCap','Spriteset_Battle_updateActors','delay','onHomeMoveEnd','createShadowSprite','waitForAnimation','parent','%1Apply%2JS','requestRefresh','ActionStart','CriticalHitFlat','ActSeq_Movement_MoveToTarget','applyFreezeMotionFrames','thrust','battleLayoutStyle','AGI','Game_Troop_expTotal','evade','_jumpMaxHeight','visualHpGauge','commandAutoBattle','moveToStartPositionBattleCore','ActSeq_Mechanics_StbExtraAction','_battleCoreBattleStartEvent','push','stepForward','Scene_Battle_initialize','PostEndActionJS','Game_Action_makeTargets','setTroopPage','Window_Options_addGeneralOptions','updateMain','_enemySprites','AttackAnimation','makeHpDamageText','WaitCount2','pow','trim','Game_Party_addActor','Window_BattleLog_popupDamage','text','isItemCommandEnabled','skill','freezeTime','putActiveBattlerOnTop','atbInterrupt','displayHpDamage','VisuMZ_2_BattleSystemATB','mpDamageFmt','ActSeq_Camera_FocusTarget','isPreviousSceneBattleTransitionable','BattleManager_isTpbMainPhase','sort','WaitForProjectile','Rate','startActorCommandSelection','buffAdd','enemyId','DEF','setBattlerMotionTrailData','VisuMZ_2_BattleSystemFTB','Sprite_Battleback_adjustPosition','ParseStateNotetags','battlerShadowScaleX','loadPicture','_windowLayer','isSpriteVisible','commandSymbol','setupBattleback','DistanceAdjust','QoL','_speed','stepBack','Sprite_Enemy_updateBossCollapse','icon','startJump','lukEffectRate','Scene_Battle_skillWindowRect','setAttack','applyData','makeDeepCopy','friendsUnit','process_VisuMZ_BattleCore_Failsafes','weatherPower','createActorCommandWindowBattleCore','Scene_Battle_updateStatusWindowPosition','font','itemTextAlign','createPartyCommandWindowBattleCore','battleUIOffsetY','PrioritySortActors','Scene_Battle_onEnemyOk','_homeDuration','PopupShiftY','damageStyle','frontviewSpriteY','updatePadding','_growY','isLearnedSkill','ActSeq_Horror_TVRemove','JS\x20%1REGENERATE','Window_BattleLog_displayCurrentState','textColor','ActSeq_Impact_Oversaturate','20531016FUctJH','%1StartActionJS','autoSelect','map','registerDefeatedEnemy','_baseLineStack','ActSeq_Mechanics_ActionEffect','battleCoreResumeLaunchBattle','DamageRate','getItemDamageAmountLabelOriginal','description','updateAction','forceAction','isSceneBattle','destroy','skewDuration','<CUSTOM\x20ACTION\x20SEQUENCE>','messageSpeed','autoBattleUseSkills','performActionMotions','_wtypeIDs','setBattleZoom','_floatDuration','onAngleEnd','svShadow','startBattle','_waitMode','ActSeq_Target_PrevTarget','isETB','fillRect','Scene_Battle_onActorCancel','ActSeq_Angle_Reset','_shake','battleback1Name','updateFrame','updateCollapse','ActSeq_BattleLog_Refresh','GUARD','retreat','notFocusValid','Window_BattleStatus_drawItemImage','_regionBattleback1','AutoBattleOK','width','JS\x20%1START\x20ACTION','isOkEnabled','finalizeScale','DamageStyles','Sprite_Actor_updateShadow','iterateBattler','isGuardWaiting','_damages','drawItemStyleIcon','setBackgroundType','addBattleCoreAutoBattleStartupCommand','battleGrow','PortraitScale','Sprite_Enemy_createStateIconSprite','updateScale','_borderPortraitTargetX','ParseAllNotetags','_inputting','performJump','faceWidth','ConvertActionSequenceTarget','requestDragonbonesAnimation','isOnCurrentMap','Mute','MANUAL','performWeaponAnimation','CombatLogIcon','isChangingOpacity','changeBattlebacks','invokeMagicReflection','StatusWindowSelectableBackHide','battleDisplayText','AS\x20USER','battleMove','AsTarget','battleCommands','isForAll','isAnimationShownOnBattlePortrait','MP_Rate','ActSeq_Mechanics_AnalyzeWeakness','adjustFlippedBattlefield','filters','command301','performRecovery','battleZoom','_skewX','getAttackWeaponAnimationId','onDisabledPartyCommandSelection','randomInt','statusWindowRectBorderStyle','padding','waitForFloat','start','fittingHeight','ForceDeath','displayChangedBuffs','isCharging','nameY','isActing','updateStateSpriteBattleCore','position','hasBeenDefeatedBefore','VisuMZ_2_BattleSystemPTB','statusWindowRectDefaultStyle','_requestRefresh','_growX','removeBuffsAuto','collapseType','dead\x20friends','scale','close','call','regionId','JS\x20%1DAMAGE\x20%2','_actorCommandWindow','ShowRemovedState','_skillWindow','magicSkills','AutoBattleMsg','_battlerHue','createKeyJS','okButtonText','_itemWindow','createMiss','moveBattlerDistance','canUseItemCommand','isAttack','#ffffff','currentValue','getBattlePortraitOffsetX','spinBattler','extraPositionY','_flinched','updatePosition','processForcedAction','isBorderStylePortraitShown','AllowRandomSpeed','WeaponTypeID','HpGaugeOffsetX','trueRandomTarget','name','<CENTER>%1','updateAngleCalculations','autoMeleeSingleTargetActionSet','dataId','_lineHeight','getSkillTypes','performActionEnd','HelpOptions','ActSeq_Movement_Spin','showAnimation','addedDebuffs','svBattlerAnchorX','clearDamagePopup','slices','PostRegenerateJS','updateBorderSprite','Game_Interpreter_updateWaitMode','BattleManager_checkBattleEnd','commandName','_flashColor','Post','updateStaticSvBattlerFrames','updateShadow','isSideView','ShowCurrentState','Elements','setupShockwaveImpactFilter','_cache','ArRedFlat','setFrame','onOpacityEnd','itemHeight','ArPenFlat','ShowHpDmg','_createEffectsContainer','SKILLS','actorCommandEscape','_growWholeDuration','isMoving','StyleName','zoomDuration','Angle','ConfigManager_makeData','getBattlePortraitFilename','updateAttachedSprites','getEnemyIdWithName','onBattleStartBattleCore','ActSeq_Mechanics_CtbSpeed','_scene','coreEngineRepositionEnemies','_targetGrowY','AutoMeleeSolo','Game_Interpreter_command301','_forcing','forceEscapeSprite','getAttackMotionSlot','setBattlerBattleCore','GroupDigits','numRepeats','createChildSprite','MeleeDistance','canAttackBattleCore','show','BattleStartEvent','_shadowScaleX','type','clearForcedGameTroopSettingsBattleCore','stopInjectAnimation','ShowCounter','ActSeq_Motion_MotionType','isJumping','value','Game_Action_executeDamage','_actionBattlers','bgType','ActionCount','BattleLogRectJS','addAutoBattleCommands','createEnemies','damageContainer','evaded','isTpbMainPhase','StepDistanceY','addedStateObjects','command119','setHelpWindow','process_VisuMZ_BattleCore_Notetags','performCounter','_tpbState','StatusWindowSkinFilename','removeAnimation','processRefresh','Damage','_escapeRatio','Style','displayReflectionPlayBack','showHelpWindow','JSON','_ptbActionCost','ActSeq_Impact_TimeScale','mainSpriteWidth','_svBattlerSprite','animation','StatusWindowAttachmentFrontOffsetX','toLowerCase','CmdIconFight','damage','Game_Battler_performMiss','dead','iconHeight','ActorCmd','updateWaitMode','format','isOpponent','SkewY','CastPhysical','ConvertCount','isPTB','toUpperCase','Scene_Battle_windowAreaHeight','AnchorY','addAttackCommand','_appeared','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','dimColor1','PostApplyAsTargetJS','BattleLog','toString','PostApplyJS','_lastRegenFrameCount','isBattleFlipped','iconIndex','ShowAddedState','loop','StartName','requestAnimation','LUK','isWaiting','endAction','CreateActionSequenceTargets','createEmptyBitmap','Targets','compareEnemySprite','displayCritical','STRUCT','ActSeq_Movement_Opacity','_battlerName','loadBattleback2','_shadowSprite','attackAnimationId2','_logWindow','NameAlwaysVisible','playCancel','CriticalHitRate','Name','isForOne','onJumpEnd','PopupOffsetX','svBattlerData','skewBattler','Sprite_Battler_isMoving','damageOffsetX','ActSeq_Movement_MoveToPoint','ActSeq_Impact_ShockwaveEachTargets','isAnyoneSpinning','_tpbNeedsPartyCommand','clearBattlerMotionTrailData','_battlePortrait','logWindowRect','TpGaugeOffsetX','_injectAnimationSprite','ActSeq_Camera_Clamp','finishActionSet','performAction','drawBackgroundRect','ActSeq_Mechanics_EnemyEscape','setupHpGaugeSprite','NextTurn','weaponImageId','canInput','growBattler','isStateResist','StatusWindowAttachmentBack','8278210Cjblye','battlelog','repositionCancelButtonBorderStyle','changeAtbChargeTime','PostDamage%1JS','textSizeEx','ShowAddedDebuff','startHomeMove','State-%1-%2','CriticalHitRateJS','alignBattleCoreDamageSprite','glitch','Text','addGuardCommand','updatePhase','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','Index','measureTextWidth','addActor','Game_Map_encounterList','ParseArmorNotetags','innerWidth','MOTIONS','ActSeq_Animation_WaitForAnimation','refresh','displayBattleCoreTransitionErrorMsg','battleJump','_frame','VisuMZ_2_WeaponSwapSystem','Scene_Battle_partyCommandWindowRect','turnCount','updateActors','isForFriend','gainCurrentActionsETB','ShuffleArray','waitForOpacity','Window_BattleLog_refresh','canGuardBattleCore','ActSeq_Weapon_ClearActiveWeapon','WaitComplete','PreApplyAsTargetJS','loadSvEnemy','updateOpacity','NewPopupBottom','ChangeOrderBy','onMoveEnd','parameters','%1Event','regenerateAllBattleCore','_defeatedEnemies','_battleCoreAddedElements','_drawTextBody','SvMotionIdleSolo-%1-%2','PreStartTurnJS','cameraDuration','pauseInjectAnimation','expRate','isSkill','freezeMotion','battleSys','process_VisuMZ_BattleCore_TraitObject_Notetags','innerHeight','Game_Action_evalDamageFormula','VisuMZ_3_ActSeqImpact','_multipliers','ActSeq_Mechanics_VariablePopup','displayItemMessage','addCustomCommands','_hpGaugeSprite','command301_PreBattleEvent','JS\x20%1START\x20TURN','Window_BattleLog_performActionEnd','PostDamageAsUserJS','attack','addBattleCoreAutoBattleStyleCommand','okTargetSelectionVisibility','MAXMP','isAnyoneInjectAniPrepping','ActSeq_Mechanics_PtbFullHalfAction','ShowTpDmg','FocusY','gainFullActionsPTB','Shadow2','Class-%1-%2','ActSeq_Weapon_SetActiveWeapon','gainHp','setText','ESCAPE','updateCommandNameWindow','basicGaugesY','createActionSequenceProjectile','Window_BattleLog_performSubstitute','autoBattleStart','code','ActSeq_Horror_GlitchCreate','isAnimationPlaying','Game_Action_itemHit','refreshDimmerBitmap','displayAddedStates','updateBitmap','_baseX','stypeId','partyCommandWindowRectDefaultStyle','border','isAnyoneMoving','AutoBattleRect','HelpEscape','aliveMembers','onEnemyCancel','replace','startDamagePopup','targetActionSet','battleSkew','clearFreezeMotion','Interrupt','Window_ActorCommand_setup','TP_Rate','Sprite_Battler_updateMain','FaceDirection','animationNextDelay','ActSeq_Movement_WaitForOpacity','drawEnemyName','getConfigValue','opacityStart','HelpSkillType','ScaleX','alive\x20friends\x20not\x20user','unshift','_floatHeight','alive\x20actors\x20not\x20user','HelpItem','allowRandomSpeed','isAlwaysHidden','addFightCommand','ActSeq_Set_FinishAction','clearFreezeMotionForWeapons','onBattleStart','_angleDuration','changeInputWindow','selectNextCommand','note','Window_BattleLog_pushBaseLine','customDamageFormula','animationId','addChildAt','drawTextEx','BattleManager_startBattle','jumpBattler','startMotion','Override','_deathStateApplied','AnchorX','mainSprite','ActSeq_Movement_Jump','setImmortal','Window_PartyCommand_initialize','EscapeSuccess','Scale','getMenuImage','displayType','isForOpponent','ParseSkillNotetags','isAnyProjectilePresent','mainSpriteHeight','PreRegenerateJS','refreshCursor','criticalHitRate','Scene_Battle_startPartyCommandSelection','_makeFontNameText','Scene_Battle_startActorSelection','showNormalAnimation','PostApplyAsUserJS','_baseY','processPostBattleCommonEvents','bottom','PostEndTurnJS','PreDamageAsUserJS','ParseActorNotetags','isAlwaysVisible','compareBattlerSprites','Sprite_Battler_setBattler','Game_Enemy_transform','Sprite_Enemy_setBattler','open','Linear','createHpGaugeSprite','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','createWeather','ActionEndUpdate','battlerSmoothImage','sideview_ui','ActSeq_Impact_MotionTrailRemove','ActSeq_Mechanics_ArmorPenetration','createEnemyNameContainer','_cancelButton','applyBattleCoreJS','placeTimeGauge','ActSeq_BattleLog_Clear','_forcedBattlers','traitSet','updateBattlerContainer','hpDamage','startSpin','stop','duration','Game_Battler_clearDamagePopup','Window_BattleLog_popBaseLine','BattleManager_startInput','_skillIDs','Game_Battler_forceAction','_eventId','isCancelled','loadSystem','ActSeq_Weapon_NextActiveWeapon','CheckVisibleBattleNotetags','battleCamera','PreEndActionJS','hpAffected','VariableHeal','createStateIconSprite','escape','VisuMZ_1_MainMenuCore','_executedValue','slice','setupWeaponAnimation','requestPointAnimation','addSkillCommands','_endBattle','performDamage','version','_targetSkewY','clearElementChanges','process_VisuMZ_BattleCore_PreBattleCommonEvent','startTurn','logActionList','Scene_Party','VisuMZ_3_ActSeqCamera','isAppeared','isTeamBased','ActSeq_Animation_ShowAnimation','ShowMissEvasion','displayAffectedStatus','addDebuff','sliceMin','waitForEffect','_onceParallelInterpreters','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','makeTargetSprites','hitRate','changeWeather','alive\x20actors\x20not\x20target','XPSpriteYLocation','_statusWindow','ScaleY','SkillsStatesCore','guard','onSelectAction','ActionEffect','SlotID','_shadowScaleY','_angleEasing','min','startWeaponAnimation','stateMotionIndex','softDamageCapRate','Scene_Battle_helpWindowRect','waitForNewLine','MessageWait','displaySubstitute','createBattleFieldBattleCore','performAttackSlot','ShowFacesListStyle','Game_Action_clear','_enemyWindow','_motionSpeed','revealNewWeaknesses','Sprite_Actor_updateFrame','NameFontSize','ITEM','VisuMZ_0_CoreEngine','BattleManager_processDefeat','contents','angleDuration','-%1','createAttachmentSprites','removeDamageSprite','Window_BattleLog_performRecovery','Mirror','Targets2','performTpbActiveCheckSwitch','ResetFocus','ActSeq_Mechanics_BoostPointsStoreData','Scene_Battle_startActorCommandSelection','addItemCommand','CmdTextAutoBattle','_lines','adjustWeaponSpriteOffset','_opacityEasing','max','process_VisuMZ_BattleCore_DamageStyles','#%1','command3011','isDisplayEmergedEnemies','attackAnimationId1','itemRect','_updateFilterArea','DistanceY','message2','Scene_Options_maxCommands','_enemyID','occasion','ActSeq_Mechanics_AddState','_freezeMotionData','PostStartTurnJS','HomePosJS','hasSkill','ActSeq_Mechanics_TextPopup','_angleWholeDuration','gradientFillRect','_homeWholeDuration','_back2Sprite','BattleManager_makeActionOrders','isDebuffAffected','missed','Game_Battler_clearMotion','Scene_Battle_logWindowRect','setActorHome','XPActorCommandLines','_flipScaleX','addState','isSpinning','itemHit','isAutoBattleCommandEnabled','partyCommandWindowRectXPStyle','_damagePopupArray','AnimationID','PreApplyAsUserJS','createLowerLayer','updateHpGaugePosition','FlinchDuration','Window_Options_statusText','changePaintOpacity','ForceExploited','ActSeq_Mechanics_Collapse','Game_BattlerBase_eraseState','canAttack','Game_Action_needsSelection','battleAngle','sortDamageSprites','showEnemyAttackAnimation','startTpbTurn','_stateSprite','addChildToBack','Window_BattleLog_clear','abnormal','hasSvBattler','Enemy','physical','applyForcedGameTroopSettingsBattleCore','length','maxCols','command236','Sprite_AnimationMV_updatePosition','statusText','isForRandom','list','setupCriticalEffect','isBypassDamageCap','ShowRemovedBuff','SceneManager_isSceneChanging','itemCri','walk','Game_Actor_setup','Sprite_Actor_setBattler','displayRemovedStates','speed','currentExt','_svBattlerData','PostStartActionJS','CmdIconOptions','updateHomeMove','CheckSkillCommandShowSwitches','Strength','drawItemImageListStyle','addBuff','updateCancel','_forceAction','move','isOTB','isConfused','setEventCallback','log','BattleVictoryJS','onBattleStartOnceParallels','MIN_SAFE_INTEGER','Scene_Battle_commandFight','FollowTurn','globalAlpha','CopyCombatLog','Game_BattlerBase_initMembers','Sprite_Battler_damageOffsetY','Sprite_Battler_damageOffsetX','commandNameWindowDrawText','_angleRevertOnFinish','ShowActorGauge','BattleManager_startTurn','getNextDamagePopup','dying','createActors','HelpAutoBattle','Sprite_Weapon_loadBitmap','DisplayAction','playReflection','ChantStyle','iconText','_homeY','BattleLayout','maxBattleMembers','optDisplayTp','addSkillTypeCommand','onBattleEndBattleCore','WaitForScale','dead\x20actors','_dimmerSprite','_floatEasing','setCommonEvent','ActSeq_Movement_WaitForFloat','Sprite_Battler_updatePosition','contentsOpacity','scope','NameAlwaysSelectOnly','ShowMpDmg','MpGaugeOffsetX','ActSeq_Impact_Desaturate','Scene_Map_updateCallMenu','isPhysical','cancel','Immortal','updateTargetPosition','_skewDuration','NameLegacy','getInputButtonString','performMoveToPoint','isSideButtonLayout','isSkipPartyCommandWindow','motionSpeed','isBattleSys','ReflectPlayback','hue','Window_BattleLog_performMagicEvasion','Scene_Battle_startEnemySelection','Exploited','ShowCritical','_effectDuration','needsSelection','bitmapWidth','applyCritical','AsUser','JumpToLabel','moveBattlerHomeToPoint','ActionEnd','Scene_Battle_itemWindowRect','Game_Action_itemEffectAddNormalState','switchToWeaponType','updateShadowPosition','initElementStatusCore','EVAL','SvMotionIdleMass-%1-%2','getDualWieldTimes','STYPES','ActSeq_Motion_WaitMotionFrame','makeActionListAutoAttack','checkBattleEnd','_armorPenetration','ActSeq_Element_Clear','isImmortal','enemy','Spriteset_Battle_createBattleField','Width','getHardDamageCap','_flashDuration','MaxLines','abs','Game_BattlerBase_canAttack','ActionItemMsg','VisuMZ_2_BattleSystemCTB','ActSeq_Set_SetupAction','_updateCursorFilterArea','setWaitMode','setBattleCameraPoint','CalcEscapeRatioJS','anchorX','battleFloat','_action','_autoBattle','gainBravePoints','placeGauge','VisuMZ_2_BattleSystemOTB','battleSpin','_borderPortraitSprite','CriticalDmgFlat','checkTpbInputOpen','isGuard','height','PartyCmd','removeHorrorEffect','JS\x20%1START\x20BATTLE','OffsetX','EasingType','Window_BattleEnemy_show','actions','PreEndBattleJS','maxItems','VariableDmg','popupDamage','onEscapeSuccess','actorCommandAutoBattle','Sprite_Actor_update','Game_Map_battleback1Name','MotionAni','reserveCommonEvent','getCommonEventIdWithName','Window_SkillList_maxCols','ParseClassNotetags','_currentActor','Game_Battler_regenerateAll','MotionSpeed','ActSeq_BattleLog_UI','_colorType','executeDamage','displayEvasion','isPartyCommandWindowDisabled','alive\x20enemies\x20not\x20user','popBaseLine','performCastAnimation','removeImmortal','svAnchorX','startInput','criticalHitFlat','prototype','DamageDisplay','inputting','displayActionResults','VisuMZ_2_HorrorEffects','windowskin','_isBattlerFlipped','_frontAttachmentSprite','DigitGrouping','battleProjectiles','ActSeq_Mechanics_CustomDmgFormula','addChild','setBattleSkew','Wave','StateIconOffsetY','isBuffAffected','updateEffectContainers','ActSeq_Mechanics_AddBuffDebuff','initMembers','createStateSprite','applyArmorModifiers','index','createTroopNote','tpbCommandFight','ActSeq_BattleLog_WaitForNewLine','Game_BattlerBase_addNewState','skillWindowRect','updateEventMain','_actionInputIndex','Shadow','startOpacity','waitForMovement','HP_Flat','Scene_Battle_selectNextCommand','ApplyImmortal','applyTargetFilters','setBattleAngle','Scene_Battle_createAllWindows','random','setCustomDamageFormula','makeActionList','ActSeq_Impact_MotionBlurTarget','Window_BattleLog_performReflection','updateWeather','Game_Temp_requestAnimation','battleSpriteSkew','subject','_battler','ANTI_TINT_UI','_weaponImageId','onEscapeFailure','collapse','flashColor','commandNameWindowCenter','ActSeq_Set_WholeActionSet','applyAngleChange','updateRefresh','weapons','fnordRemovedStates','motionType','updateStart','ActSeq_Movement_HomeReset','ForceExploiter','isHidden','performActionEndMembers','ActSeq_Camera_Offset','createJS','checkShowHideSwitchNotetags','removeOnceParallelInterpreter','isIncludedInEnemyWindow','ActSeq_Mechanics_BreakShieldReset','updateShadowBattleCore','chant','_homeEasing','evalDamageFormula','CheckMapBattleEventValid','ActSeq_Element_AddElements','ActSeq_Movement_WaitForScale','isFrameVisible','loadEnemy','canAddSkillCommand','ActSeq_Horror_NoiseCreate','IconStypeNorm','AllowCollapse','Window_BattleLog_displayTpDamage','WaitForSkew','isForRandomBattleCore','addDamageSprite','createAnimationContainer','CmdTextAlign','alive\x20battlers\x20not\x20user','JS\x20BATTLE\x20VICTORY','OffsetY','Window_BattleLog_displayCritical','isEnemy','playEnemyAttack','addEscapeCommand','transform','Height','options','actorCommandSingleSkill','updateHelp','applySoftDamageCap','createString','commandNameWindowDrawBackground','PortraitScaleBorderStyle','isRightInputMode','lineHeight','setVisibleUI','timeScale','_dragonbonesSpriteContainer','StatusWindowAttachmentFront','front\x20center','BattleManager_updatePhase','autoBattleStyle','onActorCancel','changeCtbCastTime','VisuMZ_2_PartySystem','save','createUIContainer','WEAPON\x20SWAP','fight','portrait','removedBuffs','performReflection','BattleCore','VisuMZ_2_BattleSystemETB','createHelpWindow','ActSeq_Zoom_Scale','PreEndTurnJS','StatusWindowAttachmentBackOffsetX','ActSeq_Inject_AnimationPauseResume','BattleManager_checkSubstitute','Weapon-%1-%2','updateJump','partyCommandWindowRect','UNTITLED','damageRate','startAttackWeaponAnimation','svAnchorY','dragonbonesData','BARE\x20HANDS','expTotal','%1StartBattleJS','WtypeId','addText','applyResultSwitches','performMagicEvasion','clone','alive\x20battlers\x20not\x20target','forceMotion','_enemyNameContainer','applyGuard','missile','isOptionsCommandAdded','ActSeq_Impact_ShockwaveCenterTargets','_commonEventKey','updateAttachmentSprites','CriticalDuration','create','_skewEasing','isEscapeCommandEnabled','isAlive','isCertainHit','frameCount','addPartyCommand','tpbActorSwitchConditionsMet','isMeleeSingleTargetAction','getDamageStyle','reduce','createAttachedSprites','value1','resizeWindowXPStyle','Scene_Battle_updateBattleProcess','boxWidth','checkShowHideBattleNotetags','flashDuration','autoBattleAtStart','applyEasing'];_0x6ddf=function(){return _0x4516bd;};return _0x6ddf();}Sprite_SvEnemy['prototype']=Object['create'](Sprite_Actor[_0x5507dd(0x832)]),Sprite_SvEnemy[_0x5507dd(0x832)]['constructor']=Sprite_SvEnemy,Sprite_SvEnemy[_0x5507dd(0x832)][_0x5507dd(0x2aa)]=function(_0x2c7a56){const _0x3889bc=_0x5507dd;Sprite_Actor[_0x3889bc(0x832)][_0x3889bc(0x2aa)][_0x3889bc(0x542)](this,_0x2c7a56),this['scale']['x']=-0x1,this['_stateSprite']['scale']['x']=-0x1;},Sprite_SvEnemy['prototype'][_0x5507dd(0x46b)]=function(){},Sprite_SvEnemy[_0x5507dd(0x832)][_0x5507dd(0xa28)]=function(){},Sprite_SvEnemy[_0x5507dd(0x832)]['setActorHome']=function(_0x60755d){},Sprite_SvEnemy[_0x5507dd(0x832)][_0x5507dd(0x576)]=function(){},Sprite_SvEnemy[_0x5507dd(0x832)]['updateShadowPosition']=function(){},Sprite_SvEnemy[_0x5507dd(0x832)][_0x5507dd(0x9d7)]=function(){const _0x43b84f=_0x5507dd;this[_0x43b84f(0x776)][_0x43b84f(0x2ac)]=![];},Sprite_SvEnemy['prototype'][_0x5507dd(0x67a)]=function(){const _0x1fa7cc=_0x5507dd;Sprite_Battler[_0x1fa7cc(0x832)][_0x1fa7cc(0x67a)][_0x1fa7cc(0x542)](this);const _0x973bd8=this[_0x1fa7cc(0x414)]['svBattlerName']();this[_0x1fa7cc(0x5f2)]!==_0x973bd8&&(this['_battlerName']=_0x973bd8,this[_0x1fa7cc(0x1ec)]['bitmap']=ImageManager['loadSvActor'](_0x973bd8)),this[_0x1fa7cc(0x1ec)]&&this[_0x1fa7cc(0x1ec)][_0x1fa7cc(0x257)]&&this[_0x1fa7cc(0x861)]&&(this[_0x1fa7cc(0x1ec)][_0x1fa7cc(0x257)][_0x1fa7cc(0x30d)]!==this[_0x1fa7cc(0x861)][_0x1fa7cc(0x6d4)]()&&(this[_0x1fa7cc(0x1ec)][_0x1fa7cc(0x257)]['smooth']=this['_battler'][_0x1fa7cc(0x6d4)]()));},Sprite_SvEnemy[_0x5507dd(0x832)][_0x5507dd(0x4f5)]=function(){},Sprite_SvEnemy[_0x5507dd(0x832)][_0x5507dd(0x39b)]=function(_0x199911,_0x5cb6a0,_0x3968bd){const _0x22f7d3=_0x5507dd;if(this[_0x22f7d3(0x46d)])this['parent']['startMove'](_0x199911,_0x5cb6a0,_0x3968bd);},Sprite_SvEnemy[_0x5507dd(0x832)]['refreshMotion']=function(){const _0x959365=_0x5507dd,_0xcac3c1=this[_0x959365(0x414)];if(_0xcac3c1){const _0x50ae75=_0xcac3c1[_0x959365(0x71e)]();if(_0xcac3c1[_0x959365(0x43f)]()||_0xcac3c1['isActing']())this['startMotion'](_0x959365(0x78a));else{if(_0x50ae75===0x3)this[_0x959365(0x6ab)](_0x959365(0x5cc));else{if(_0x50ae75===0x2)this[_0x959365(0x6ab)](_0x959365(0x956));else{if(_0xcac3c1['isChanting']())this['startMotion'](_0x959365(0x87a));else{if(_0xcac3c1['isGuard']()||_0xcac3c1['isGuardWaiting']())this[_0x959365(0x6ab)](_0x959365(0x716));else{if(_0x50ae75===0x1)this[_0x959365(0x6ab)](_0x959365(0x779));else{if(_0xcac3c1[_0x959365(0x20f)]())this[_0x959365(0x6ab)](_0x959365(0x7ae));else _0xcac3c1[_0x959365(0xa2d)]()?this[_0x959365(0x6ab)](_0x959365(0x78a)):this['startMotion'](_0xcac3c1[_0x959365(0x5fe)]()[_0x959365(0x936)]||_0x959365(0x78a));}}}}}}}},Sprite_SvEnemy['prototype'][_0x5507dd(0x235)]=function(){const _0x8d1829=_0x5507dd;return this['parent']?this[_0x8d1829(0x46d)][_0x8d1829(0x44d)]===0x0&&this['parent']['_offsetY']===0x0:!![];},Sprite_SvEnemy[_0x5507dd(0x832)][_0x5507dd(0x1af)]=function(){},VisuMZ['BattleCore'][_0x5507dd(0x9f3)]=Sprite_Animation[_0x5507dd(0x832)][_0x5507dd(0x962)],Sprite_Animation['prototype'][_0x5507dd(0x962)]=function(_0x4207a4){const _0x5ce159=_0x5507dd;return _0x4207a4[_0x5ce159(0x8e6)]?this[_0x5ce159(0x92c)](_0x4207a4):VisuMZ['BattleCore'][_0x5ce159(0x9f3)][_0x5ce159(0x542)](this,_0x4207a4);},Sprite_Animation['prototype']['targetDistortionSpritePosition']=function(_0x4f2cfb){const _0xc78376=_0x5507dd;let _0xac3432=_0x4f2cfb['x'],_0x422bab=_0x4f2cfb['y'],_0x4109a8=_0x4f2cfb[_0xc78376(0x80e)],_0x4fdfd0=_0x4f2cfb[_0xc78376(0x8e6)]['scale']['y'];_0x4f2cfb['x']=_0x4f2cfb[_0xc78376(0x67b)]+_0x4f2cfb['extraPositionX'](),_0x4f2cfb['y']=_0x4f2cfb[_0xc78376(0x6c3)]+_0x4f2cfb[_0xc78376(0x556)](),_0x4f2cfb[_0xc78376(0x80e)]*=_0x4fdfd0;let _0x4dbf74=VisuMZ[_0xc78376(0x8af)][_0xc78376(0x9f3)][_0xc78376(0x542)](this,_0x4f2cfb);return _0x4f2cfb['x']=_0xac3432,_0x4f2cfb['y']=_0x422bab,_0x4f2cfb[_0xc78376(0x80e)]=_0x4109a8,_0x4dbf74;},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x781)]=Sprite_AnimationMV[_0x5507dd(0x832)][_0x5507dd(0x558)],Sprite_AnimationMV[_0x5507dd(0x832)][_0x5507dd(0x558)]=function(){const _0x25c2f9=_0x5507dd;VisuMZ['BattleCore'][_0x25c2f9(0x781)][_0x25c2f9(0x542)](this);if(this[_0x25c2f9(0x43e)][_0x25c2f9(0x537)]===0x3){if(this['x']===0x0)this['x']=Math[_0x25c2f9(0x95e)](Graphics[_0x25c2f9(0x4fa)]/0x2);if(this['y']===0x0)this['y']=Math[_0x25c2f9(0x95e)](Graphics[_0x25c2f9(0x80e)]/0x2);}},Sprite_Damage[_0x5507dd(0x832)][_0x5507dd(0x918)]=function(_0xb5555b){const _0x515252=_0x5507dd,_0x347071=_0xb5555b['getNextDamagePopup']()||_0xb5555b[_0x515252(0x3d8)]();if(_0x347071[_0x515252(0x75a)]||_0x347071[_0x515252(0x5b0)])this['_colorType']=0x0,this[_0x515252(0x54e)]();else{if(_0x347071[_0x515252(0x6f0)])this[_0x515252(0x827)]=_0x347071['hpDamage']>=0x0?0x0:0x1,this[_0x515252(0x949)](_0x347071[_0x515252(0x6e0)]);else _0xb5555b['isAlive']()&&_0x347071[_0x515252(0x989)]!==0x0&&(this[_0x515252(0x827)]=_0x347071['mpDamage']>=0x0?0x2:0x3,this['createDigits'](_0x347071[_0x515252(0x989)]));}_0x347071[_0x515252(0x8f7)]&&this[_0x515252(0x785)]();},Sprite_Damage[_0x5507dd(0x832)][_0x5507dd(0x3d3)]=function(_0x551a72){},Sprite_Damage['prototype'][_0x5507dd(0x949)]=function(_0x177026){const _0x1aab98=_0x5507dd;let _0x1e65f9=this[_0x1aab98(0x899)](_0x177026);const _0x33ec78=this[_0x1aab98(0x93c)](),_0x58c4e5=Math[_0x1aab98(0x8fd)](_0x33ec78*0.75);for(let _0x1832bf=0x0;_0x1832bf<_0x1e65f9[_0x1aab98(0x77e)];_0x1832bf++){const _0x1d07e9=this['createChildSprite'](_0x58c4e5,_0x33ec78);_0x1d07e9[_0x1aab98(0x257)][_0x1aab98(0xa31)](_0x1e65f9[_0x1832bf],0x0,0x0,_0x58c4e5,_0x33ec78,'center'),_0x1d07e9['x']=(_0x1832bf-(_0x1e65f9['length']-0x1)/0x2)*_0x58c4e5,_0x1d07e9['dy']=-_0x1832bf;}},Sprite_Damage[_0x5507dd(0x832)][_0x5507dd(0x899)]=function(_0x4358df){const _0x13a41f=_0x5507dd;let _0x46dc89=Math[_0x13a41f(0x7f9)](_0x4358df)[_0x13a41f(0x5df)]();this['useDigitGrouping']()&&(_0x46dc89=VisuMZ['GroupDigits'](_0x46dc89));const _0x34ad1d=VisuMZ[_0x13a41f(0x8af)]['Settings']['Damage'];let _0x20aa9a='',_0x4d5844='';switch(this[_0x13a41f(0x827)]){case 0x0:_0x20aa9a=_0x34ad1d['hpDamageFmt']||_0x13a41f(0x732),_0x4d5844=TextManager['hp'];if(_0x4358df===0x0)_0x20aa9a='%1';break;case 0x1:_0x20aa9a=_0x34ad1d['hpHealingFmt']||_0x13a41f(0x961),_0x4d5844=TextManager['hp'];break;case 0x2:_0x20aa9a=_0x34ad1d[_0x13a41f(0x497)]||_0x13a41f(0x9de),_0x4d5844=TextManager['mp'];break;case 0x3:_0x20aa9a=_0x34ad1d['mpHealingFmt']||_0x13a41f(0x31b),_0x4d5844=TextManager['mp'];break;}return _0x20aa9a['format'](_0x46dc89,_0x4d5844)['trim']();},Sprite_Damage['prototype']['useDigitGrouping']=function(){const _0x198dbf=_0x5507dd;return Imported[_0x198dbf(0x72e)]?VisuMZ[_0x198dbf(0x307)][_0x198dbf(0x32e)][_0x198dbf(0x4ad)][_0x198dbf(0x44c)]:![];},Sprite_Damage['prototype'][_0x5507dd(0x785)]=function(){const _0x51530e=_0x5507dd,_0xe7bebe=VisuMZ['BattleCore'][_0x51530e(0x32e)]['Damage'];this['_flashColor']=_0xe7bebe['CriticalColor']['slice'](0x0),this['_flashDuration']=_0xe7bebe[_0x51530e(0x8d0)];},Sprite_Damage[_0x5507dd(0x832)][_0x5507dd(0x2bf)]=function(_0x5ce883,_0x3afd54){const _0x11bacf=_0x5507dd;this[_0x11bacf(0x573)]=_0x3afd54[_0x11bacf(0x866)]||[0x0,0x0,0x0,0x0],this[_0x11bacf(0x573)]=JsonEx['makeDeepCopy'](this['_flashColor']),this[_0x11bacf(0x7f7)]=_0x3afd54[_0x11bacf(0x8e2)]||0x0;const _0x2c777e=this[_0x11bacf(0x93c)](),_0x2b3cfb=Math[_0x11bacf(0x8fd)](_0x2c777e*0x1e),_0x2d7974=this[_0x11bacf(0x59b)](_0x2b3cfb,_0x2c777e);_0x2d7974[_0x11bacf(0x257)][_0x11bacf(0x4cd)]=ColorManager[_0x11bacf(0x437)](_0x3afd54[_0x11bacf(0x4cd)]),_0x2d7974['bitmap'][_0x11bacf(0xa31)](_0x5ce883,0x0,0x0,_0x2b3cfb,_0x2c777e,'center'),_0x2d7974['dy']=0x0;},Sprite_Damage[_0x5507dd(0x832)][_0x5507dd(0xa0d)]=function(_0x4e2089,_0x51ccac,_0x11aa3c){const _0x28c3c1=_0x5507dd,_0x14a4db=Math['max'](this[_0x28c3c1(0x93c)](),ImageManager[_0x28c3c1(0x5cd)]),_0x3b61fb=Math[_0x28c3c1(0x8fd)](_0x14a4db*0x1e),_0x7573d7=this[_0x28c3c1(0x59b)](_0x3b61fb,_0x14a4db),_0x5e6f39=ImageManager[_0x28c3c1(0x934)]/0x2,_0x1528c4=_0x7573d7['bitmap']['measureTextWidth'](_0x51ccac+'\x20');_0x7573d7[_0x28c3c1(0x257)][_0x28c3c1(0x4cd)]=ColorManager[_0x28c3c1(0x437)](_0x11aa3c[_0x28c3c1(0x4cd)]),_0x7573d7['bitmap'][_0x28c3c1(0xa31)](_0x51ccac,_0x5e6f39,0x0,_0x3b61fb-_0x5e6f39,_0x14a4db,_0x28c3c1(0x9ba));const _0x516597=Math['round']((_0x14a4db-ImageManager[_0x28c3c1(0x5cd)])/0x2),_0x5be0df=_0x3b61fb/0x2-ImageManager[_0x28c3c1(0x934)]-_0x1528c4/0x2+_0x5e6f39/0x2,_0x252b2c=ImageManager[_0x28c3c1(0x6eb)](_0x28c3c1(0x421)),_0x301735=ImageManager[_0x28c3c1(0x934)],_0x17b9cd=ImageManager['iconHeight'],_0x53d8da=_0x4e2089%0x10*_0x301735,_0x41f06e=Math['floor'](_0x4e2089/0x10)*_0x17b9cd;_0x7573d7[_0x28c3c1(0x257)][_0x28c3c1(0x9ef)](_0x252b2c,_0x53d8da,_0x41f06e,_0x301735,_0x17b9cd,_0x5be0df,_0x516597),this['_flashColor']=_0x11aa3c[_0x28c3c1(0x866)]||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx[_0x28c3c1(0x4b7)](this['_flashColor']),this[_0x28c3c1(0x7f7)]=_0x11aa3c[_0x28c3c1(0x8e2)]||0x0,_0x7573d7['dy']=0x0;},VisuMZ['BattleCore'][_0x5507dd(0x3a3)]=Sprite_Damage[_0x5507dd(0x832)][_0x5507dd(0x59b)],Sprite_Damage[_0x5507dd(0x832)]['createChildSprite']=function(_0x11fd2d,_0x2e95d7){const _0x1a4a50=_0x5507dd;return _0x2e95d7=Math[_0x1a4a50(0x95e)](_0x2e95d7*1.2),VisuMZ[_0x1a4a50(0x8af)]['Sprite_Damage_createChildSprite']['call'](this,_0x11fd2d,_0x2e95d7);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x2f7)]=Sprite_StateIcon[_0x5507dd(0x832)][_0x5507dd(0x4f1)],Sprite_StateIcon['prototype'][_0x5507dd(0x4f1)]=function(){const _0x6a39a0=_0x5507dd;VisuMZ['BattleCore'][_0x6a39a0(0x2f7)]['call'](this),this[_0x6a39a0(0x411)]=this['_iconIndex']>0x0?0xff:0x0;},VisuMZ[_0x5507dd(0x8af)]['Sprite_Weapon_loadBitmap']=Sprite_Weapon[_0x5507dd(0x832)][_0x5507dd(0x9c5)],Sprite_Weapon[_0x5507dd(0x832)][_0x5507dd(0x9c5)]=function(){const _0x555285=_0x5507dd;VisuMZ[_0x555285(0x8af)][_0x555285(0x7b1)][_0x555285(0x542)](this),this[_0x555285(0x257)]&&(this['bitmap'][_0x555285(0x30d)]=VisuMZ[_0x555285(0x8af)][_0x555285(0x32e)][_0x555285(0x9cb)][_0x555285(0x256)]);};function Sprite_HpGauge(){const _0x452084=_0x5507dd;this[_0x452084(0x2aa)](...arguments);}Sprite_HpGauge[_0x5507dd(0x832)]=Object['create'](Sprite_Gauge[_0x5507dd(0x832)]),Sprite_HpGauge[_0x5507dd(0x832)][_0x5507dd(0x2fa)]=Sprite_HpGauge,Sprite_HpGauge[_0x5507dd(0x832)][_0x5507dd(0x2aa)]=function(){const _0x503b13=_0x5507dd;Sprite_Gauge['prototype'][_0x503b13(0x2aa)]['call'](this);},Sprite_HpGauge['prototype']['gaugeX']=function(){return 0x0;},Sprite_HpGauge['prototype']['redraw']=function(){const _0x274b30=_0x5507dd;this[_0x274b30(0x257)][_0x274b30(0x9dc)]();const _0x3e3629=this[_0x274b30(0x553)]();!isNaN(_0x3e3629)&&this[_0x274b30(0x98d)]();};function Sprite_EnemyName(){const _0x263797=_0x5507dd;this[_0x263797(0x2aa)](...arguments);}Sprite_EnemyName[_0x5507dd(0x832)]=Object[_0x5507dd(0x8d1)](Sprite_Name[_0x5507dd(0x832)]),Sprite_EnemyName['prototype'][_0x5507dd(0x2fa)]=Sprite_EnemyName,Sprite_EnemyName[_0x5507dd(0x832)][_0x5507dd(0x2aa)]=function(){const _0x28bacd=_0x5507dd;Sprite_Name['prototype'][_0x28bacd(0x2aa)][_0x28bacd(0x542)](this),this['createAttachedSprites']();},Sprite_EnemyName['prototype']['initMembers']=function(){const _0x3a43ac=_0x5507dd;Sprite_Name['prototype'][_0x3a43ac(0x844)]['call'](this),this[_0x3a43ac(0x411)]=0x0,this[_0x3a43ac(0x390)]=null,this['anchor']['x']=0.5,this[_0x3a43ac(0x26b)]['y']=0x0;},Sprite_EnemyName[_0x5507dd(0x832)][_0x5507dd(0x8dc)]=function(){const _0x323ebf=_0x5507dd;VisuMZ[_0x323ebf(0x8af)][_0x323ebf(0x32e)][_0x323ebf(0x77b)]['NameAttachStateIcon']&&(this[_0x323ebf(0x93a)]=new Sprite_StateIcon(),this[_0x323ebf(0x83d)](this[_0x323ebf(0x93a)]));},Sprite_EnemyName[_0x5507dd(0x832)][_0x5507dd(0x7de)]=function(){const _0x43ca6e=_0x5507dd;return Graphics[_0x43ca6e(0x8e0)];},Sprite_EnemyName['prototype'][_0x5507dd(0x322)]=function(){const _0x56463f=_0x5507dd;return this[_0x56463f(0x564)]=this['_lineHeight']||Window_Base[_0x56463f(0x832)][_0x56463f(0x89d)]()||0x24,this[_0x56463f(0x564)]*0x4;},Sprite_EnemyName['prototype']['fontSize']=function(){const _0x5c91ff=_0x5507dd;return VisuMZ[_0x5c91ff(0x8af)][_0x5c91ff(0x32e)][_0x5c91ff(0x77b)][_0x5c91ff(0x72c)]||$gameSystem['mainFontSize']();},Sprite_EnemyName['prototype'][_0x5507dd(0x22f)]=function(_0x1b5506){const _0x279fd2=_0x5507dd;this[_0x279fd2(0x390)]=_0x1b5506;},Sprite_EnemyName['prototype'][_0x5507dd(0x3ce)]=function(){const _0x5ce5f4=_0x5507dd;Sprite_Name['prototype'][_0x5ce5f4(0x3ce)][_0x5ce5f4(0x542)](this),this['updateLink'](),this[_0x5ce5f4(0x558)](),this[_0x5ce5f4(0x58c)](),this[_0x5ce5f4(0x641)]();},Sprite_EnemyName[_0x5507dd(0x832)]['redraw']=function(){const _0x5bdc26=_0x5507dd;this[_0x5bdc26(0x1ee)]=undefined;const _0x16174e=this[_0x5bdc26(0x55f)](),_0x1bf988=this['bitmapWidth'](),_0x460b07=Window_Base[_0x5bdc26(0x832)]['lineHeight']();this[_0x5bdc26(0x462)](),this['bitmap'][_0x5bdc26(0x9dc)](),this['bitmap'][_0x5bdc26(0xa31)](_0x16174e,0x0,0x0,_0x1bf988,_0x460b07,_0x5bdc26(0x9ba));},Sprite_EnemyName['prototype'][_0x5507dd(0x450)]=function(){const _0x390376=_0x5507dd;if(!this[_0x390376(0x390)])return;this['_battler']!==this['_linkedSprite'][_0x390376(0x861)]&&this['setup'](this[_0x390376(0x390)][_0x390376(0x861)]);},Sprite_EnemyName[_0x5507dd(0x832)][_0x5507dd(0x558)]=function(){const _0x5b39db=_0x5507dd;if(!this[_0x5b39db(0x390)])return;this[_0x5b39db(0x564)]=this[_0x5b39db(0x564)]||Window_Base['prototype'][_0x5b39db(0x89d)](),this['x']=this['_linkedSprite'][_0x5b39db(0x67b)],this['y']=this[_0x5b39db(0x390)][_0x5b39db(0x6c3)]-this[_0x5b39db(0x564)]*0.5;const _0x2b97f1=VisuMZ[_0x5b39db(0x8af)][_0x5b39db(0x32e)][_0x5b39db(0x77b)];this['x']+=_0x2b97f1[_0x5b39db(0x456)]||0x0,this['y']+=_0x2b97f1['NameOffsetY']||0x0;},Sprite_EnemyName[_0x5507dd(0x832)][_0x5507dd(0x58c)]=function(){this['updateStateIconSprite']();},Sprite_EnemyName['prototype']['updateStateIconSprite']=function(){const _0x119711=_0x5507dd;if(!this[_0x119711(0x93a)])return;this[_0x119711(0x861)]!==this[_0x119711(0x93a)][_0x119711(0x861)]&&this[_0x119711(0x93a)]['setup'](this[_0x119711(0x861)]);const _0x3f7b83=this[_0x119711(0x396)]();this[_0x119711(0x564)]=this[_0x119711(0x564)]||Window_Base['prototype'][_0x119711(0x89d)](),this['_stateIconSprite']['x']=Math[_0x119711(0x95e)]((_0x3f7b83+ImageManager[_0x119711(0x934)])/0x2)+0x8,this['_stateIconSprite']['y']=this['_lineHeight']/0x2;const _0x1894af=VisuMZ[_0x119711(0x8af)]['Settings'][_0x119711(0x77b)];this[_0x119711(0x93a)]['x']+=_0x1894af[_0x119711(0x2cf)]||0x0,this['_stateIconSprite']['y']+=_0x1894af[_0x119711(0x99c)]||0x0;},Sprite_EnemyName['prototype'][_0x5507dd(0x641)]=function(){const _0x5832bc=_0x5507dd,_0x58ddd7=this[_0x5832bc(0x3fe)]();if(_0x58ddd7&&this[_0x5832bc(0x411)]<0xff)this['opacity']+=0x10;else!_0x58ddd7&&this[_0x5832bc(0x411)]>0x0&&(this[_0x5832bc(0x411)]-=0x10);},Sprite_EnemyName[_0x5507dd(0x832)][_0x5507dd(0x3fe)]=function(){const _0x590cd8=_0x5507dd;if(this[_0x590cd8(0x69b)]())return![];else{if(!this[_0x590cd8(0x861)])return![];else{if(this['_battler'][_0x590cd8(0x45e)]())return![];else{if(!this[_0x590cd8(0x861)]['isAppeared']())return![];else{if(this[_0x590cd8(0x9e0)]())return!![];else{if(this['isAlwaysVisible']())return!![];else{if(this[_0x590cd8(0x877)]())return!![];else{if(this['opacity']>0x0)return![];}}}}}}}},Sprite_EnemyName[_0x5507dd(0x832)][_0x5507dd(0x69b)]=function(){return VisuMZ['BattleCore']['Settings']['Enemy']['NameAlwaysHidden'];},Sprite_EnemyName[_0x5507dd(0x832)][_0x5507dd(0x9e0)]=function(){return![];},Sprite_EnemyName[_0x5507dd(0x832)][_0x5507dd(0x6c9)]=function(){const _0x30c036=_0x5507dd;return VisuMZ[_0x30c036(0x8af)][_0x30c036(0x32e)]['Enemy'][_0x30c036(0x5f7)];},Sprite_EnemyName[_0x5507dd(0x832)]['isIncludedInEnemyWindow']=function(){const _0x3fb88b=_0x5507dd;return VisuMZ[_0x3fb88b(0x8af)][_0x3fb88b(0x32e)]['Enemy'][_0x3fb88b(0x7c5)]?this[_0x3fb88b(0x861)][_0x3fb88b(0x24c)]():SceneManager['_scene']['_enemyWindow']&&SceneManager['_scene']['_enemyWindow']['active']&&SceneManager['_scene']['_enemyWindow'][_0x3fb88b(0x3f9)]['includes'](this['_battler']);},Sprite_EnemyName[_0x5507dd(0x832)][_0x5507dd(0x396)]=function(){const _0x86b3e=_0x5507dd;if(!this[_0x86b3e(0x861)])return 0x0;if(this[_0x86b3e(0x1ee)])return this[_0x86b3e(0x1ee)];const _0x4ddd5a=this['name']();return this[_0x86b3e(0x462)](),this['_cacheTextWidth']=this[_0x86b3e(0x257)][_0x86b3e(0x628)](_0x4ddd5a)||0x1,this[_0x86b3e(0x1ee)];},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x4a4)]=Sprite_Battleback[_0x5507dd(0x832)][_0x5507dd(0x387)],Sprite_Battleback[_0x5507dd(0x832)][_0x5507dd(0x387)]=function(){const _0x25c8c4=_0x5507dd,_0x5e8bf4=VisuMZ[_0x25c8c4(0x8af)][_0x25c8c4(0x32e)]['Battleback'];if(!_0x5e8bf4)return VisuMZ[_0x25c8c4(0x8af)]['Sprite_Battleback_adjustPosition'][_0x25c8c4(0x542)](this);const _0x39ba25=String(_0x5e8bf4[_0x25c8c4(0x319)])||'MZ';switch(_0x39ba25){case'MZ':VisuMZ[_0x25c8c4(0x8af)][_0x25c8c4(0x4a4)][_0x25c8c4(0x542)](this);break;case _0x25c8c4(0x226):this[_0x25c8c4(0x9a0)]();break;case _0x25c8c4(0x2cb):this['adjustPosition_ScaleToFit']();break;case'ScaleDown':this[_0x25c8c4(0x9c2)]();break;case _0x25c8c4(0x1ab):this[_0x25c8c4(0x361)]();break;}},Sprite_Battleback[_0x5507dd(0x832)][_0x5507dd(0x9a0)]=function(){const _0x1791ee=_0x5507dd;this[_0x1791ee(0x4fa)]=Graphics['width'],this[_0x1791ee(0x80e)]=Graphics[_0x1791ee(0x80e)];const _0x5b2f8b=0x1;this[_0x1791ee(0x540)]['x']=_0x5b2f8b,this['scale']['y']=_0x5b2f8b,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x5507dd(0x832)][_0x5507dd(0x955)]=function(){const _0x2bdd1f=_0x5507dd;this[_0x2bdd1f(0x4fa)]=Graphics[_0x2bdd1f(0x4fa)],this[_0x2bdd1f(0x80e)]=Graphics[_0x2bdd1f(0x80e)];const _0x21b27c=this[_0x2bdd1f(0x4fa)]/this[_0x2bdd1f(0x257)]['width'],_0x57cc31=this[_0x2bdd1f(0x80e)]/this['bitmap'][_0x2bdd1f(0x80e)],_0x545ddf=Math[_0x2bdd1f(0x741)](_0x21b27c,_0x57cc31);this[_0x2bdd1f(0x540)]['x']=_0x545ddf,this['scale']['y']=_0x545ddf,this['x']=(Graphics['width']-this[_0x2bdd1f(0x4fa)])/0x2,this['y']=Graphics[_0x2bdd1f(0x80e)]-this[_0x2bdd1f(0x80e)];},Sprite_Battleback[_0x5507dd(0x832)][_0x5507dd(0x9c2)]=function(){const _0x1922c5=_0x5507dd;this['width']=Graphics['width'],this[_0x1922c5(0x80e)]=Graphics['height'];const _0x2bbb65=Math[_0x1922c5(0x71c)](0x1,this[_0x1922c5(0x4fa)]/this[_0x1922c5(0x257)][_0x1922c5(0x4fa)]),_0x2924ee=Math[_0x1922c5(0x71c)](0x1,this[_0x1922c5(0x80e)]/this[_0x1922c5(0x257)]['height']),_0x3ac51f=Math[_0x1922c5(0x741)](_0x2bbb65,_0x2924ee);this[_0x1922c5(0x540)]['x']=_0x3ac51f,this[_0x1922c5(0x540)]['y']=_0x3ac51f,this['x']=(Graphics[_0x1922c5(0x4fa)]-this[_0x1922c5(0x4fa)])/0x2,this['y']=Graphics['height']-this[_0x1922c5(0x80e)];},Sprite_Battleback[_0x5507dd(0x832)]['adjustPosition_ScaleUp']=function(){const _0x576e00=_0x5507dd;this[_0x576e00(0x4fa)]=Graphics[_0x576e00(0x4fa)],this[_0x576e00(0x80e)]=Graphics[_0x576e00(0x80e)];const _0x87776b=Math[_0x576e00(0x741)](0x1,this['width']/this[_0x576e00(0x257)][_0x576e00(0x4fa)]),_0xbf301d=Math['max'](0x1,this[_0x576e00(0x80e)]/this[_0x576e00(0x257)][_0x576e00(0x80e)]),_0x8fc798=Math[_0x576e00(0x741)](_0x87776b,_0xbf301d);this['scale']['x']=_0x8fc798,this[_0x576e00(0x540)]['y']=_0x8fc798,this['x']=(Graphics['width']-this[_0x576e00(0x4fa)])/0x2,this['y']=Graphics[_0x576e00(0x80e)]-this[_0x576e00(0x80e)];},Spriteset_Battle['ANTI_TINT_UI']=VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x32e)][_0x5507dd(0x7b7)][_0x5507dd(0x35e)]??!![],Spriteset_Battle['prototype']['isFlipped']=function(){const _0x157b3a=_0x5507dd;if(!$gameSystem[_0x157b3a(0x577)]())return![];return![];},Spriteset_Battle['prototype']['animationBaseDelay']=function(){return 0x0;},Spriteset_Battle['prototype'][_0x5507dd(0x68e)]=function(){return 0x0;},VisuMZ[_0x5507dd(0x8af)]['Spriteset_Battle_createLowerLayer']=Spriteset_Battle[_0x5507dd(0x832)]['createLowerLayer'],Spriteset_Battle[_0x5507dd(0x832)][_0x5507dd(0x768)]=function(){const _0x1efdf8=_0x5507dd;VisuMZ[_0x1efdf8(0x8af)]['Spriteset_Battle_createLowerLayer'][_0x1efdf8(0x542)](this),this[_0x1efdf8(0x6d2)](),this[_0x1efdf8(0x37b)]();},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x3f1)]=Spriteset_Battle['prototype'][_0x5507dd(0x3ce)],Spriteset_Battle[_0x5507dd(0x832)][_0x5507dd(0x3ce)]=function(){const _0x47c1f2=_0x5507dd;VisuMZ['BattleCore'][_0x47c1f2(0x3f1)][_0x47c1f2(0x542)](this),this[_0x47c1f2(0x1d1)](),this[_0x47c1f2(0x85d)]();},Spriteset_Battle[_0x5507dd(0x832)][_0x5507dd(0x6d2)]=function(){const _0x4bc475=_0x5507dd;this[_0x4bc475(0x2e5)]=new Weather(),this[_0x4bc475(0x196)][_0x4bc475(0x83d)](this[_0x4bc475(0x2e5)]);},Spriteset_Battle[_0x5507dd(0x832)]['updateWeather']=function(){const _0x3d7996=_0x5507dd;this[_0x3d7996(0x2e5)][_0x3d7996(0x5a1)]=$gameScreen['weatherType'](),this['_weather'][_0x3d7996(0x35d)]=$gameScreen[_0x3d7996(0x4ba)]();},Game_Interpreter[_0x5507dd(0x832)][_0x5507dd(0x780)]=function(_0x5b9077){const _0x1bbbf1=_0x5507dd;$gameScreen[_0x1bbbf1(0x710)](_0x5b9077[0x0],_0x5b9077[0x1],_0x5b9077[0x2]);if(_0x5b9077[0x3])this[_0x1bbbf1(0x9ca)](_0x5b9077[0x2]);return!![];},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x19c)]=Game_Interpreter[_0x5507dd(0x832)][_0x5507dd(0x2c7)],Game_Interpreter[_0x5507dd(0x832)][_0x5507dd(0x2c7)]=function(_0x32736d){const _0x13687a=_0x5507dd;return SceneManager[_0x13687a(0x4dc)]()?(SceneManager[_0x13687a(0x590)][_0x13687a(0x3c4)][_0x13687a(0x517)](_0x32736d[0x0],_0x32736d[0x1]),!![]):VisuMZ[_0x13687a(0x8af)][_0x13687a(0x19c)]['call'](this,_0x32736d);},Spriteset_Battle['prototype'][_0x5507dd(0x9cf)]=function(_0x3102ea,_0x3db401){const _0x3ab135=_0x5507dd;_0x3102ea[_0x3ab135(0x257)]=_0x3db401;},Spriteset_Battle['prototype'][_0x5507dd(0x517)]=function(_0x464f58,_0x2c4752){const _0x11de32=_0x5507dd;_0x464f58=_0x464f58||'',_0x2c4752=_0x2c4752||'';_0x464f58===''&&_0x2c4752===''&&(_0x464f58=this[_0x11de32(0x2c5)][_0x11de32(0x4f0)](),_0x2c4752=this['_back2Sprite'][_0x11de32(0x268)]());const _0x502779=ImageManager[_0x11de32(0x267)](_0x464f58),_0x22ddeb=ImageManager[_0x11de32(0x5f3)](_0x2c4752);_0x502779[_0x11de32(0x292)](this[_0x11de32(0x964)][_0x11de32(0x9f4)](this,this['_back1Sprite'],this[_0x11de32(0x757)],_0x502779,_0x22ddeb));},Spriteset_Battle['prototype'][_0x5507dd(0x964)]=function(_0x133ad0,_0x129b51,_0x5ead77,_0x4826d2){const _0x3b46fb=_0x5507dd;_0x4826d2[_0x3b46fb(0x292)](this[_0x3b46fb(0x254)]['bind'](this,_0x133ad0,_0x129b51,_0x5ead77,_0x4826d2));},Spriteset_Battle[_0x5507dd(0x832)][_0x5507dd(0x254)]=function(_0x550037,_0x52a174,_0x12fe38,_0x4723ff){const _0x4b3e76=_0x5507dd;_0x550037[_0x4b3e76(0x257)]=_0x12fe38,_0x52a174['bitmap']=_0x4723ff,_0x550037[_0x4b3e76(0x387)](),_0x52a174['adjustPosition']();},VisuMZ['BattleCore'][_0x5507dd(0x7f4)]=Spriteset_Battle['prototype'][_0x5507dd(0x2c4)],Spriteset_Battle[_0x5507dd(0x832)][_0x5507dd(0x2c4)]=function(){const _0x16e023=_0x5507dd;VisuMZ['BattleCore'][_0x16e023(0x7f4)]['call'](this),this[_0x16e023(0x724)]();},Spriteset_Battle['prototype'][_0x5507dd(0x724)]=function(){const _0x27e6d0=_0x5507dd;this[_0x27e6d0(0x3c7)](),this['createUIContainer'](),this[_0x27e6d0(0x88a)](),this[_0x27e6d0(0x917)](),this[_0x27e6d0(0x523)]();},Spriteset_Battle['prototype'][_0x5507dd(0x3c7)]=function(){const _0x12bc78=_0x5507dd;this[_0x12bc78(0x2f1)]=new Sprite(),this[_0x12bc78(0x196)][_0x12bc78(0x83d)](this[_0x12bc78(0x2f1)]);},Spriteset_Battle[_0x5507dd(0x832)][_0x5507dd(0x88a)]=function(){const _0x5d891d=_0x5507dd;this[_0x5d891d(0x8f3)]=new Sprite(),Spriteset_Battle['ANTI_TINT_UI']?this['addChild'](this[_0x5d891d(0x8f3)]):this[_0x5d891d(0x196)][_0x5d891d(0x83d)](this[_0x5d891d(0x8f3)]);},Spriteset_Battle['prototype'][_0x5507dd(0x917)]=function(){const _0x56c1fe=_0x5507dd;this['_damageContainer']=new Sprite(),this[_0x56c1fe(0x381)]['x']=this[_0x56c1fe(0x196)]['x'],this['_damageContainer']['y']=this['_battleField']['y'],this[_0x56c1fe(0x83d)](this[_0x56c1fe(0x381)]);},Spriteset_Battle[_0x5507dd(0x832)][_0x5507dd(0x523)]=function(){const _0x54a5f6=_0x5507dd;if(!this[_0x54a5f6(0x352)]())return;this['_battlerContainer'][_0x54a5f6(0x540)]['x']=-0x1,this[_0x54a5f6(0x2f1)]['x']=this[_0x54a5f6(0x196)][_0x54a5f6(0x4fa)],this['_uiContainer']['scale']['x']=-0x1,this[_0x54a5f6(0x3b1)]['x']=this['_battleField'][_0x54a5f6(0x4fa)],this[_0x54a5f6(0x8f3)][_0x54a5f6(0x540)]['x']=-0x1,this['_animationContainer']['x']=this['_battleField'][_0x54a5f6(0x4fa)],this['_damageContainer'][_0x54a5f6(0x540)]['x']=-0x1,this[_0x54a5f6(0x381)]['x']=this[_0x54a5f6(0x196)]['x']+this[_0x54a5f6(0x196)][_0x54a5f6(0x4fa)];},Spriteset_Battle[_0x5507dd(0x832)][_0x5507dd(0x5ae)]=function(){const _0x228b0a=_0x5507dd;Imported[_0x228b0a(0x72e)]&&this[_0x228b0a(0x591)]()&&this[_0x228b0a(0x2f3)]();const _0x534d97=$gameTroop[_0x228b0a(0x29b)](),_0x2e272b=[];for(const _0x29cba9 of _0x534d97){_0x2e272b['push'](new Sprite_Enemy(_0x29cba9));}_0x2e272b['sort'](this[_0x228b0a(0x5ee)][_0x228b0a(0x9f4)](this));for(const _0x478010 of _0x2e272b){this[_0x228b0a(0x2f1)][_0x228b0a(0x83d)](_0x478010);}this[_0x228b0a(0x487)]=_0x2e272b;},Spriteset_Battle[_0x5507dd(0x832)][_0x5507dd(0x7af)]=function(){const _0x426ff0=_0x5507dd;this[_0x426ff0(0xa2f)]=[];for(let _0x4a0172=0x0;_0x4a0172<$gameParty['maxBattleMembers']();_0x4a0172++){const _0x151ab7=$gameParty[_0x426ff0(0x1a3)]()[_0x4a0172],_0x1095c1=new Sprite_Actor();_0x1095c1[_0x426ff0(0x47c)](_0x151ab7),_0x1095c1[_0x426ff0(0x45b)](_0x151ab7),_0x1095c1[_0x426ff0(0x3ce)](),this[_0x426ff0(0xa2f)][_0x426ff0(0x47f)](_0x1095c1),this[_0x426ff0(0x2f1)]['addChild'](_0x1095c1);}},Spriteset_Battle[_0x5507dd(0x832)][_0x5507dd(0x24d)]=function(_0x1a7ce5,_0x6bbac0,_0x420a83,_0x1e09b1){const _0x287bef=_0x5507dd,_0x371a7f=this['isMVAnimation'](_0x6bbac0),_0x4d02be=new(_0x371a7f?Sprite_AnimationMV:Sprite_Animation)(),_0x5b677a=this[_0x287bef(0x70e)](_0x1a7ce5);this['animationShouldMirror'](_0x1a7ce5[0x0])&&(_0x420a83=!_0x420a83),_0x4d02be[_0x287bef(0xa17)]=_0x1a7ce5,_0x4d02be['setup'](_0x5b677a,_0x6bbac0,_0x420a83,_0x1e09b1),this['addAnimationSpriteToContainer'](_0x4d02be);},Spriteset_Battle['prototype'][_0x5507dd(0x1cd)]=function(_0x1db79c){const _0x1df681=_0x5507dd;this['isAnimationShownOnBattlePortrait'](_0x1db79c)?this[_0x1df681(0x988)]()['addChild'](_0x1db79c):this[_0x1df681(0x8f3)]['addChild'](_0x1db79c),this[_0x1df681(0x3c6)]['push'](_0x1db79c);},Spriteset_Battle[_0x5507dd(0x832)][_0x5507dd(0x520)]=function(_0x850b52){const _0x44fbbb=_0x5507dd;if(!_0x850b52)return![];if(!_0x850b52[_0x44fbbb(0x43e)])return![];if(!_0x850b52[_0x44fbbb(0xa17)][0x0])return![];if(_0x850b52[_0x44fbbb(0xa17)][0x0][_0x44fbbb(0x8ed)]&&!_0x850b52['targetObjects'][0x0]['isActor']())return![];if($gameSystem['isSideView']())return![];if(!this[_0x44fbbb(0x988)]())return![];if(_0x850b52['constructor']===Sprite_Animation){if(_0x850b52['_animation'][_0x44fbbb(0x6b6)]!==0x0)return![];}else{if(_0x850b52[_0x44fbbb(0x2fa)]===Sprite_AnimationMV){if(_0x850b52[_0x44fbbb(0x43e)][_0x44fbbb(0x537)]===0x3)return![];}}return!![];const _0x1e44bc=Window_BattleStatus[_0x44fbbb(0x832)][_0x44fbbb(0x475)]();return['xp',_0x44fbbb(0x8ac)][_0x44fbbb(0x28e)](_0x1e44bc);},Spriteset_Battle[_0x5507dd(0x832)][_0x5507dd(0x988)]=function(){const _0x22e498=_0x5507dd;if(!SceneManager[_0x22e498(0x590)])return null;if(!SceneManager['_scene'][_0x22e498(0x713)])return null;if(!SceneManager[_0x22e498(0x590)][_0x22e498(0x713)][_0x22e498(0x9a6)])return null;return SceneManager[_0x22e498(0x590)][_0x22e498(0x713)][_0x22e498(0x9a6)];},Spriteset_Battle['prototype'][_0x5507dd(0x5ba)]=function(_0x27239b){const _0x12c31e=_0x5507dd;this[_0x12c31e(0x329)](_0x27239b);for(const _0x39526d of _0x27239b['targetObjects']){_0x39526d[_0x12c31e(0x2a6)]&&_0x39526d['endAnimation']();}_0x27239b['destroy']();},Spriteset_Battle[_0x5507dd(0x832)]['removeAnimationFromContainer']=function(_0x3f1c63){const _0x39641a=_0x5507dd;this[_0x39641a(0x3c6)][_0x39641a(0x9ff)](_0x3f1c63),this[_0x39641a(0x520)](_0x3f1c63)?this[_0x39641a(0x988)]()[_0x39641a(0xa1f)](_0x3f1c63):this['_animationContainer']['removeChild'](_0x3f1c63);},VisuMZ['BattleCore'][_0x5507dd(0x468)]=Spriteset_Battle[_0x5507dd(0x832)][_0x5507dd(0x636)],Spriteset_Battle[_0x5507dd(0x832)][_0x5507dd(0x636)]=function(){const _0x574449=_0x5507dd;VisuMZ[_0x574449(0x8af)][_0x574449(0x468)][_0x574449(0x542)](this),this[_0x574449(0x6df)]();},Spriteset_Battle[_0x5507dd(0x832)][_0x5507dd(0x6df)]=function(){const _0x4cf4e8=_0x5507dd;this['_battlerContainer'][_0x4cf4e8(0x937)][_0x4cf4e8(0x49b)](this['compareBattlerSprites'][_0x4cf4e8(0x9f4)](this)),this[_0x4cf4e8(0x493)]();},Spriteset_Battle['prototype'][_0x5507dd(0x6ca)]=function(_0x8bfcab,_0x2a3be9){const _0x2f9625=_0x5507dd;if(VisuMZ['BattleCore']['Settings'][_0x2f9625(0x9cb)][_0x2f9625(0x4c1)]){if(_0x8bfcab['_battler']&&_0x2a3be9[_0x2f9625(0x861)]){if(_0x8bfcab['_battler']['isActor']()&&_0x2a3be9[_0x2f9625(0x861)][_0x2f9625(0x890)]())return 0x1;else{if(_0x2a3be9[_0x2f9625(0x861)][_0x2f9625(0x8ed)]()&&_0x8bfcab[_0x2f9625(0x861)][_0x2f9625(0x890)]())return-0x1;}}}return _0x8bfcab[_0x2f9625(0x6c3)]!==_0x2a3be9[_0x2f9625(0x6c3)]?_0x8bfcab['_baseY']-_0x2a3be9[_0x2f9625(0x6c3)]:_0x2a3be9[_0x2f9625(0x434)]-_0x8bfcab[_0x2f9625(0x434)];},Spriteset_Battle[_0x5507dd(0x832)][_0x5507dd(0x493)]=function(){const _0xd2650=_0x5507dd;if(!VisuMZ[_0xd2650(0x8af)][_0xd2650(0x32e)][_0xd2650(0x9cb)]['PrioritySortActive'])return;const _0x46db73=BattleManager['_subject'];if(_0x46db73){if(_0x46db73[_0xd2650(0x8ed)]()&&!$gameSystem[_0xd2650(0x577)]())return;const _0x538018=_0x46db73['battler']();if(_0x538018&&_0x46db73[_0xd2650(0x8ed)]())this['_battlerContainer'][_0xd2650(0x83d)](_0x538018);}},Spriteset_Battle['prototype'][_0x5507dd(0x22c)]=function(){const _0xeef68f=_0x5507dd;for(const _0x3868c2 of $gameParty['aliveMembers']()){if(!_0x3868c2)continue;if(!_0x3868c2[_0xeef68f(0x9f8)]())continue;_0x3868c2[_0xeef68f(0x9f8)]()[_0xeef68f(0x596)]=!![],_0x3868c2[_0xeef68f(0x9f8)]()[_0xeef68f(0x4f5)]();}},Spriteset_Battle[_0x5507dd(0x832)][_0x5507dd(0x8a9)]=function(){const _0x1d2b8b=_0x5507dd;this[_0x1d2b8b(0x3b1)]=new Sprite(),Spriteset_Battle['ANTI_TINT_UI']?this['addChild'](this[_0x1d2b8b(0x3b1)]):this[_0x1d2b8b(0x196)][_0x1d2b8b(0x83d)](this[_0x1d2b8b(0x3b1)]),SceneManager[_0x1d2b8b(0x590)][_0x1d2b8b(0x3b1)]=this['_uiContainer'];},Spriteset_Battle[_0x5507dd(0x832)][_0x5507dd(0x37b)]=function(){const _0x5a1526=_0x5507dd;if(VisuMZ['BattleCore']['Settings']['Enemy'][_0x5a1526(0x7cf)])return;this[_0x5a1526(0x8c9)]=new Sprite(),BattleManager[_0x5a1526(0x263)](this['_enemyNameContainer']);for(const _0x146ceb of this[_0x5a1526(0x487)]){const _0x7a3766=new Sprite_EnemyName();this[_0x5a1526(0x8c9)]['addChild'](_0x7a3766),_0x7a3766['linkSprite'](_0x146ceb);}},Spriteset_Battle[_0x5507dd(0x832)][_0x5507dd(0x1d1)]=function(){const _0x14e921=_0x5507dd;if(!this[_0x14e921(0x381)])return;if(!this[_0x14e921(0x3b1)])return;const _0xa9a19d=Spriteset_Battle[_0x14e921(0x862)]?this['_damageContainer']['x']:0x0,_0x1b4cf3=Spriteset_Battle['ANTI_TINT_UI']?this[_0x14e921(0x381)]['y']:0x0,_0x23f780=Imported[_0x14e921(0x703)]?this['_battleField']['x']:0x0,_0x3739ee=Imported['VisuMZ_3_ActSeqCamera']?this[_0x14e921(0x196)]['y']:0x0;this['_uiContainer']['x']=_0xa9a19d+_0x23f780,this[_0x14e921(0x3b1)]['y']=_0x1b4cf3+_0x3739ee;},BattleManager[_0x5507dd(0x263)]=function(_0x40848c){const _0x1205e7=_0x5507dd;if(!SceneManager[_0x1205e7(0x590)]['_uiContainer'])return;SceneManager[_0x1205e7(0x590)][_0x1205e7(0x3b1)][_0x1205e7(0x83d)](_0x40848c);},Spriteset_Battle[_0x5507dd(0x832)]['isBusy']=function(){return![];},Spriteset_Battle[_0x5507dd(0x832)][_0x5507dd(0x30a)]=function(){const _0x4dd80c=_0x5507dd;return this[_0x4dd80c(0xa10)]()[_0x4dd80c(0x372)](_0x1664b2=>_0x1664b2[_0x4dd80c(0x925)]());},Spriteset_Battle[_0x5507dd(0x832)][_0x5507dd(0x22b)]=function(){const _0x396243=_0x5507dd;return this[_0x396243(0xa10)]()[_0x396243(0x372)](_0x36578e=>_0x36578e[_0x396243(0x5a6)]());},Spriteset_Battle[_0x5507dd(0x832)][_0x5507dd(0x971)]=function(){const _0x31c167=_0x5507dd;return this[_0x31c167(0xa10)]()['some'](_0x347cd6=>_0x347cd6[_0x31c167(0xa0a)]());},Spriteset_Battle[_0x5507dd(0x832)][_0x5507dd(0x3b9)]=function(){const _0x6d1e88=_0x5507dd;return this['battlerSprites']()[_0x6d1e88(0x372)](_0x96f534=>_0x96f534[_0x6d1e88(0x331)]());},Spriteset_Battle[_0x5507dd(0x832)][_0x5507dd(0x604)]=function(){const _0x137c9b=_0x5507dd;return this[_0x137c9b(0xa10)]()[_0x137c9b(0x372)](_0x3e0a0f=>_0x3e0a0f[_0x137c9b(0x761)]());},Spriteset_Battle[_0x5507dd(0x832)]['isAnyoneChangingOpacity']=function(){const _0x4dce0b=_0x5507dd;return this['battlerSprites']()[_0x4dce0b(0x372)](_0x78e418=>_0x78e418[_0x4dce0b(0x516)]());},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x8e5)]=Window_ItemList[_0x5507dd(0x832)][_0x5507dd(0x77f)],Window_ItemList[_0x5507dd(0x832)][_0x5507dd(0x77f)]=function(){const _0x363d0c=_0x5507dd;return SceneManager[_0x363d0c(0x4dc)]()?SceneManager['_scene']['battleLayoutStyle']()===_0x363d0c(0x67e)?VisuMZ[_0x363d0c(0x8af)][_0x363d0c(0x32e)][_0x363d0c(0x7b7)]['SkillItemBorderCols']:VisuMZ[_0x363d0c(0x8af)][_0x363d0c(0x32e)]['BattleLayout'][_0x363d0c(0x9d5)]:VisuMZ['BattleCore'][_0x363d0c(0x8e5)][_0x363d0c(0x542)](this);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x821)]=Window_SkillList['prototype'][_0x5507dd(0x77f)],Window_SkillList[_0x5507dd(0x832)][_0x5507dd(0x77f)]=function(){const _0x4461c6=_0x5507dd;return SceneManager[_0x4461c6(0x4dc)]()?SceneManager[_0x4461c6(0x590)]['battleLayoutStyle']()==='border'?VisuMZ[_0x4461c6(0x8af)][_0x4461c6(0x32e)][_0x4461c6(0x7b7)][_0x4461c6(0x9d9)]:VisuMZ[_0x4461c6(0x8af)]['Settings']['BattleLayout'][_0x4461c6(0x9d5)]:VisuMZ[_0x4461c6(0x8af)][_0x4461c6(0x821)][_0x4461c6(0x542)](this);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x485)]=Window_Options[_0x5507dd(0x832)]['addGeneralOptions'],Window_Options[_0x5507dd(0x832)][_0x5507dd(0x204)]=function(){const _0x2b5d22=_0x5507dd;VisuMZ['BattleCore'][_0x2b5d22(0x485)][_0x2b5d22(0x542)](this),this[_0x2b5d22(0x5ad)](),this[_0x2b5d22(0xa23)]();},Window_Options[_0x5507dd(0x832)][_0x5507dd(0x5ad)]=function(){const _0x16d761=_0x5507dd;VisuMZ[_0x16d761(0x8af)]['Settings'][_0x16d761(0xa24)][_0x16d761(0x2ae)]&&(this[_0x16d761(0x505)](),this[_0x16d761(0x661)]());},Window_Options[_0x5507dd(0x832)][_0x5507dd(0xa23)]=function(){const _0x5b4642=_0x5507dd;if(!VisuMZ[_0x5b4642(0x8af)]['Settings']['HpGauge']['AddHpGaugeOption'])return;const _0x31e4c6=TextManager[_0x5b4642(0x47a)],_0x404117=_0x5b4642(0x47a);this[_0x5b4642(0x9fc)](_0x31e4c6,_0x404117);},Window_Options[_0x5507dd(0x832)][_0x5507dd(0x505)]=function(){const _0x1df893=_0x5507dd,_0x50372f=TextManager[_0x1df893(0x673)],_0x185b92=_0x1df893(0x8e3);this['addCommand'](_0x50372f,_0x185b92);},Window_Options['prototype'][_0x5507dd(0x661)]=function(){const _0x1dbe10=_0x5507dd,_0x27b1c4=TextManager[_0x1dbe10(0x8a4)],_0x592815=_0x1dbe10(0x4e1);this[_0x1dbe10(0x9fc)](_0x27b1c4,_0x592815);},VisuMZ['BattleCore'][_0x5507dd(0x76b)]=Window_Options[_0x5507dd(0x832)][_0x5507dd(0x782)],Window_Options[_0x5507dd(0x832)][_0x5507dd(0x782)]=function(_0x3ee36c){const _0x27af77=_0x5507dd,_0xd539c7=this[_0x27af77(0x4aa)](_0x3ee36c);return _0xd539c7===_0x27af77(0x4e1)?this[_0x27af77(0x9df)]():VisuMZ[_0x27af77(0x8af)]['Window_Options_statusText']['call'](this,_0x3ee36c);},Window_Options[_0x5507dd(0x832)][_0x5507dd(0x9df)]=function(){const _0x15d618=_0x5507dd,_0x3a8a2f=VisuMZ[_0x15d618(0x8af)]['Settings'][_0x15d618(0xa24)],_0x4bf4af=this[_0x15d618(0x691)](_0x15d618(0x4e1));return _0x4bf4af?_0x3a8a2f['StyleON']:_0x3a8a2f[_0x15d618(0x212)];},Window_ShopStatus['prototype'][_0x5507dd(0x95b)]=function(){const _0x42c7c2=_0x5507dd,_0xff682a=DataManager[_0x42c7c2(0x8da)](this['_item']),_0xc6da21=VisuMZ[_0x42c7c2(0x4fe)][_0xff682a];if(!_0xc6da21)return this[_0x42c7c2(0x4d8)]();const _0x161057=_0x42c7c2(0x2b5)[_0x42c7c2(0x5d0)](this[_0x42c7c2(0x912)][_0x42c7c2(0x5ca)][_0x42c7c2(0x5a1)]),_0x465096=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this['_item']['damage']['type']];return _0xc6da21[_0x161057][_0x42c7c2(0x5d0)](_0x465096);},Window_ShopStatus[_0x5507dd(0x832)]['getItemDamageAmountTextBattleCore']=function(){const _0x2a564a=_0x5507dd,_0x469768=DataManager[_0x2a564a(0x8da)](this['_item']),_0x4f3b1e=VisuMZ['DamageStyles'][_0x469768];if(!_0x4f3b1e)return this[_0x2a564a(0x422)]();return _0x4f3b1e[_0x2a564a(0x833)][_0x2a564a(0x542)](this);},VisuMZ['BattleCore'][_0x5507dd(0x6b2)]=Window_PartyCommand[_0x5507dd(0x832)]['initialize'],Window_PartyCommand[_0x5507dd(0x832)][_0x5507dd(0x2aa)]=function(_0x17390c){const _0x3cfbee=_0x5507dd;VisuMZ[_0x3cfbee(0x8af)][_0x3cfbee(0x6b2)][_0x3cfbee(0x542)](this,_0x17390c),this['createCommandNameWindow'](_0x17390c);},Window_PartyCommand[_0x5507dd(0x832)]['createCommandNameWindow']=function(_0x19e191){const _0x223136=_0x5507dd,_0xbbd09=new Rectangle(0x0,0x0,_0x19e191[_0x223136(0x4fa)],_0x19e191[_0x223136(0x80e)]);this[_0x223136(0x211)]=new Window_Base(_0xbbd09),this[_0x223136(0x211)]['opacity']=0x0,this[_0x223136(0x83d)](this[_0x223136(0x211)]),this[_0x223136(0x66f)]();},Window_PartyCommand['prototype'][_0x5507dd(0x229)]=function(){const _0xb3d49b=_0x5507dd;Window_Command[_0xb3d49b(0x832)][_0xb3d49b(0x229)]['call'](this);if(this[_0xb3d49b(0x211)])this[_0xb3d49b(0x66f)]();},Window_PartyCommand[_0x5507dd(0x832)]['updateCommandNameWindow']=function(){const _0x4ac90c=_0x5507dd,_0x46747f=this[_0x4ac90c(0x211)];_0x46747f['contents'][_0x4ac90c(0x9dc)]();const _0x45d0da=this[_0x4ac90c(0x246)](this[_0x4ac90c(0x847)]());if(_0x45d0da===_0x4ac90c(0x4b1)&&this[_0x4ac90c(0x817)]()>0x0){const _0x160597=this[_0x4ac90c(0x399)](this[_0x4ac90c(0x847)]());let _0x43858f=this[_0x4ac90c(0x572)](this['index']());_0x43858f=_0x43858f['replace'](/\\I\[(\d+)\]/gi,''),_0x46747f[_0x4ac90c(0x919)](),this[_0x4ac90c(0x89a)](_0x43858f,_0x160597),this[_0x4ac90c(0x7a9)](_0x43858f,_0x160597),this[_0x4ac90c(0x867)](_0x43858f,_0x160597);}},Window_PartyCommand[_0x5507dd(0x832)]['commandNameWindowDrawBackground']=function(_0xcafd7,_0x200a3d){},Window_PartyCommand[_0x5507dd(0x832)][_0x5507dd(0x7a9)]=function(_0xa3cebb,_0x559204){const _0x4f4f71=_0x5507dd,_0x4ed4fe=this[_0x4f4f71(0x211)];_0x4ed4fe[_0x4f4f71(0xa31)](_0xa3cebb,0x0,_0x559204['y'],_0x4ed4fe[_0x4f4f71(0x62c)],_0x4f4f71(0x9ba));},Window_PartyCommand[_0x5507dd(0x832)][_0x5507dd(0x867)]=function(_0x22558a,_0x449dbe){const _0x122768=_0x5507dd,_0x1e3014=this[_0x122768(0x211)],_0x13b685=$gameSystem[_0x122768(0x330)](),_0x1477fd=_0x449dbe['x']+Math['floor'](_0x449dbe['width']/0x2)+_0x13b685;_0x1e3014['x']=_0x1e3014[_0x122768(0x4fa)]/-0x2+_0x1477fd,_0x1e3014['y']=Math[_0x122768(0x8fd)](_0x449dbe['height']/0x2);},Window_PartyCommand[_0x5507dd(0x832)]['makeCommandList']=function(){const _0x45c308=_0x5507dd;this['addFightCommand'](),this['addAutoBattleCommand'](),this[_0x45c308(0x65a)](),this['addOptionsCommand'](),this['addEscapeCommand']();},Window_PartyCommand[_0x5507dd(0x832)][_0x5507dd(0x69c)]=function(){const _0x134aa9=_0x5507dd,_0x36dd7b=this[_0x134aa9(0x19a)](),_0x339e97=VisuMZ[_0x134aa9(0x8af)][_0x134aa9(0x32e)][_0x134aa9(0x80f)][_0x134aa9(0x5c9)],_0x249045=_0x36dd7b==='text'?TextManager[_0x134aa9(0x8ab)]:_0x134aa9(0x2d1)[_0x134aa9(0x5d0)](_0x339e97,TextManager['fight']),_0x23d963=this[_0x134aa9(0x920)]();this[_0x134aa9(0x9fc)](_0x249045,'fight',_0x23d963);},Window_PartyCommand[_0x5507dd(0x832)]['isFightCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x5507dd(0x832)][_0x5507dd(0x245)]=function(){const _0x881aae=_0x5507dd;if(!this[_0x881aae(0x9b5)]())return;const _0x666bc8=this[_0x881aae(0x19a)](),_0x479dd5=VisuMZ[_0x881aae(0x8af)]['Settings'][_0x881aae(0x80f)][_0x881aae(0x309)],_0x110b78=_0x666bc8==='text'?TextManager[_0x881aae(0x42e)]:_0x881aae(0x2d1)['format'](_0x479dd5,TextManager[_0x881aae(0x42e)]),_0x3754f0=this[_0x881aae(0x763)]();this[_0x881aae(0x9fc)](_0x110b78,_0x881aae(0x42e),_0x3754f0);},Window_PartyCommand['prototype'][_0x5507dd(0x9b5)]=function(){const _0x3b6eb1=_0x5507dd;return VisuMZ[_0x3b6eb1(0x8af)][_0x3b6eb1(0x32e)][_0x3b6eb1(0x80f)][_0x3b6eb1(0x9cc)];},Window_PartyCommand['prototype'][_0x5507dd(0x763)]=function(){return!![];},Window_PartyCommand[_0x5507dd(0x832)][_0x5507dd(0x65a)]=function(){},Window_PartyCommand[_0x5507dd(0x832)][_0x5507dd(0x909)]=function(){const _0x1d54c4=_0x5507dd;if(!this[_0x1d54c4(0x8cc)]())return;const _0x38635f=this[_0x1d54c4(0x19a)](),_0x17eb72=VisuMZ[_0x1d54c4(0x8af)][_0x1d54c4(0x32e)][_0x1d54c4(0x80f)][_0x1d54c4(0x792)],_0x4b54a8=_0x38635f===_0x1d54c4(0x48f)?TextManager[_0x1d54c4(0x895)]:_0x1d54c4(0x2d1)['format'](_0x17eb72,TextManager[_0x1d54c4(0x895)]),_0x12f1b6=this['isOptionsCommandEnabled']();this[_0x1d54c4(0x9fc)](_0x4b54a8,'options',_0x12f1b6);},Window_PartyCommand['prototype'][_0x5507dd(0x8cc)]=function(){const _0x398975=_0x5507dd;return VisuMZ['BattleCore'][_0x398975(0x32e)]['PartyCmd'][_0x398975(0x1ad)];},Window_PartyCommand[_0x5507dd(0x832)][_0x5507dd(0x3e0)]=function(){return!![];},Window_PartyCommand[_0x5507dd(0x832)][_0x5507dd(0x892)]=function(){const _0x13279d=_0x5507dd,_0x1d2b56=this['commandStyle'](),_0x183548=VisuMZ[_0x13279d(0x8af)]['Settings'][_0x13279d(0x80f)][_0x13279d(0x416)],_0x501553=_0x1d2b56===_0x13279d(0x48f)?TextManager[_0x13279d(0x6f3)]:'\x5cI[%1]%2'[_0x13279d(0x5d0)](_0x183548,TextManager['escape']),_0x36babe=this[_0x13279d(0x8d3)]();this['addCommand'](_0x501553,'escape',_0x36babe);},Window_PartyCommand[_0x5507dd(0x832)][_0x5507dd(0x8d3)]=function(){const _0x1d4640=_0x5507dd;return BattleManager[_0x1d4640(0xa05)]();},Window_PartyCommand['prototype'][_0x5507dd(0x4be)]=function(){const _0x94366e=_0x5507dd;return VisuMZ['BattleCore']['Settings'][_0x94366e(0x80f)][_0x94366e(0x88b)];},Window_PartyCommand[_0x5507dd(0x832)][_0x5507dd(0x3f5)]=function(_0x320848){const _0x33df86=_0x5507dd,_0x43d146=this[_0x33df86(0x246)](_0x320848);if(_0x43d146===_0x33df86(0x7b5))this[_0x33df86(0x401)](_0x320848);else _0x43d146===_0x33df86(0x4b1)?this[_0x33df86(0x503)](_0x320848):Window_Command['prototype'][_0x33df86(0x3f5)][_0x33df86(0x542)](this,_0x320848);},Window_PartyCommand[_0x5507dd(0x832)]['commandStyle']=function(){const _0x509d09=_0x5507dd;return VisuMZ[_0x509d09(0x8af)][_0x509d09(0x32e)][_0x509d09(0x80f)]['CmdStyle'];},Window_PartyCommand['prototype'][_0x5507dd(0x246)]=function(_0x7e399){const _0x3d8b89=_0x5507dd;if(_0x7e399<0x0)return _0x3d8b89(0x48f);const _0x742f2d=this[_0x3d8b89(0x19a)]();if(_0x742f2d!==_0x3d8b89(0x94d))return _0x742f2d;else{if(this['maxItems']()>0x0){const _0x26a561=this[_0x3d8b89(0x572)](_0x7e399);if(_0x26a561[_0x3d8b89(0x1f2)](/\\I\[(\d+)\]/i)){const _0x34e281=this['itemLineRect'](_0x7e399),_0xa3e9c=this['textSizeEx'](_0x26a561)[_0x3d8b89(0x4fa)];return _0xa3e9c<=_0x34e281['width']?_0x3d8b89(0x7b5):'icon';}}}return _0x3d8b89(0x48f);},Window_PartyCommand[_0x5507dd(0x832)][_0x5507dd(0x401)]=function(_0x192701){const _0x154b2b=_0x5507dd,_0x5eb40e=this[_0x154b2b(0x399)](_0x192701),_0x4c353d=this['commandName'](_0x192701),_0x30c47c=this[_0x154b2b(0x61c)](_0x4c353d)[_0x154b2b(0x4fa)];this[_0x154b2b(0x76c)](this[_0x154b2b(0x25f)](_0x192701));const _0x2d50a6=this['itemTextAlign']();if(_0x2d50a6===_0x154b2b(0x449))this[_0x154b2b(0x6a8)](_0x4c353d,_0x5eb40e['x']+_0x5eb40e[_0x154b2b(0x4fa)]-_0x30c47c,_0x5eb40e['y'],_0x30c47c);else{if(_0x2d50a6==='center'){const _0x1588f5=_0x5eb40e['x']+Math['floor']((_0x5eb40e[_0x154b2b(0x4fa)]-_0x30c47c)/0x2);this[_0x154b2b(0x6a8)](_0x4c353d,_0x1588f5,_0x5eb40e['y'],_0x30c47c);}else this[_0x154b2b(0x6a8)](_0x4c353d,_0x5eb40e['x'],_0x5eb40e['y'],_0x30c47c);}},Window_PartyCommand['prototype'][_0x5507dd(0x503)]=function(_0x5a919d){const _0x390058=_0x5507dd;this[_0x390058(0x572)](_0x5a919d)[_0x390058(0x1f2)](/\\I\[(\d+)\]/i);const _0x2af0a4=Number(RegExp['$1'])||0x0,_0x4b3ab4=this[_0x390058(0x399)](_0x5a919d),_0x14a58d=_0x4b3ab4['x']+Math[_0x390058(0x8fd)]((_0x4b3ab4[_0x390058(0x4fa)]-ImageManager[_0x390058(0x934)])/0x2),_0x13d306=_0x4b3ab4['y']+(_0x4b3ab4['height']-ImageManager[_0x390058(0x5cd)])/0x2;this[_0x390058(0x8e9)](_0x2af0a4,_0x14a58d,_0x13d306);},Window_PartyCommand[_0x5507dd(0x832)][_0x5507dd(0xa1a)]=function(){},Window_PartyCommand[_0x5507dd(0x832)][_0x5507dd(0x1c6)]=function(){const _0x2f6ed1=_0x5507dd;Window_Command[_0x2f6ed1(0x832)][_0x2f6ed1(0x1c6)][_0x2f6ed1(0x542)](this);const _0x1d48b6=this[_0x2f6ed1(0x475)]();_0x1d48b6===_0x2f6ed1(0x67e)&&this[_0x2f6ed1(0x5c0)]();},Window_PartyCommand[_0x5507dd(0x832)][_0x5507dd(0x475)]=function(){const _0x55cded=_0x5507dd;if(this[_0x55cded(0x1cb)])return this[_0x55cded(0x1cb)];return this[_0x55cded(0x1cb)]=SceneManager[_0x55cded(0x590)][_0x55cded(0x475)](),this[_0x55cded(0x1cb)];},Window_PartyCommand['prototype'][_0x5507dd(0x897)]=function(){const _0xeb1d3a=_0x5507dd,_0x941b17=VisuMZ[_0xeb1d3a(0x8af)][_0xeb1d3a(0x32e)][_0xeb1d3a(0x80f)],_0x451a00=this[_0xeb1d3a(0x9b6)]();switch(_0x451a00){case _0xeb1d3a(0x8ab):this[_0xeb1d3a(0x28f)]['setText'](_0x941b17[_0xeb1d3a(0xa2c)]);break;case _0xeb1d3a(0x42e):this[_0xeb1d3a(0x28f)][_0xeb1d3a(0x66d)](_0x941b17[_0xeb1d3a(0x7b0)]);break;case _0xeb1d3a(0x895):this[_0xeb1d3a(0x28f)]['setText'](_0x941b17[_0xeb1d3a(0x567)]);break;case _0xeb1d3a(0x6f3):this[_0xeb1d3a(0x28f)][_0xeb1d3a(0x66d)](_0x941b17[_0xeb1d3a(0x681)]);break;default:this[_0xeb1d3a(0x28f)][_0xeb1d3a(0x66d)]('');break;}},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x1d5)]=Window_ActorCommand[_0x5507dd(0x832)]['initialize'],Window_ActorCommand['prototype'][_0x5507dd(0x2aa)]=function(_0x2002b6){const _0x105f5f=_0x5507dd;VisuMZ[_0x105f5f(0x8af)][_0x105f5f(0x1d5)][_0x105f5f(0x542)](this,_0x2002b6),this['createCommandNameWindow'](_0x2002b6);},Window_ActorCommand[_0x5507dd(0x832)]['createCommandNameWindow']=function(_0x21c66d){const _0xf814a=_0x5507dd,_0x418c65=new Rectangle(0x0,0x0,_0x21c66d[_0xf814a(0x4fa)],_0x21c66d[_0xf814a(0x80e)]);this['_commandNameWindow']=new Window_Base(_0x418c65),this[_0xf814a(0x211)]['opacity']=0x0,this[_0xf814a(0x83d)](this[_0xf814a(0x211)]),this[_0xf814a(0x66f)]();},Window_ActorCommand[_0x5507dd(0x832)][_0x5507dd(0x229)]=function(){const _0x27d2a5=_0x5507dd;Window_Command[_0x27d2a5(0x832)][_0x27d2a5(0x229)][_0x27d2a5(0x542)](this);if(this[_0x27d2a5(0x211)])this[_0x27d2a5(0x66f)]();},Window_ActorCommand[_0x5507dd(0x832)][_0x5507dd(0x66f)]=function(){const _0x136472=_0x5507dd,_0x55a9a7=this[_0x136472(0x211)];_0x55a9a7[_0x136472(0x730)][_0x136472(0x9dc)]();const _0x5651fa=this[_0x136472(0x246)](this[_0x136472(0x847)]());if(_0x5651fa===_0x136472(0x4b1)&&this[_0x136472(0x817)]()>0x0){const _0x2a501a=this[_0x136472(0x399)](this[_0x136472(0x847)]());let _0x169e60=this[_0x136472(0x572)](this[_0x136472(0x847)]());_0x169e60=_0x169e60[_0x136472(0x684)](/\\I\[(\d+)\]/gi,''),_0x55a9a7[_0x136472(0x919)](),this[_0x136472(0x89a)](_0x169e60,_0x2a501a),this[_0x136472(0x7a9)](_0x169e60,_0x2a501a),this[_0x136472(0x867)](_0x169e60,_0x2a501a);}},Window_ActorCommand[_0x5507dd(0x832)]['commandNameWindowDrawBackground']=function(_0x341161,_0x5e1f79){},Window_ActorCommand[_0x5507dd(0x832)]['commandNameWindowDrawText']=function(_0x1c91f9,_0x1fb7f2){const _0x35f19b=_0x5507dd,_0x26f710=this[_0x35f19b(0x211)];_0x26f710[_0x35f19b(0xa31)](_0x1c91f9,0x0,_0x1fb7f2['y'],_0x26f710['innerWidth'],'center');},Window_ActorCommand['prototype'][_0x5507dd(0x867)]=function(_0x71957e,_0x39eb67){const _0x53397b=_0x5507dd,_0x78c7f5=this['_commandNameWindow'],_0x11d4db=$gameSystem[_0x53397b(0x330)](),_0x486621=_0x39eb67['x']+Math['floor'](_0x39eb67['width']/0x2)+_0x11d4db;_0x78c7f5['x']=_0x78c7f5[_0x53397b(0x4fa)]/-0x2+_0x486621,_0x78c7f5['y']=Math[_0x53397b(0x8fd)](_0x39eb67[_0x53397b(0x80e)]/0x2);},Window_ActorCommand[_0x5507dd(0x832)]['makeCommandList']=function(){const _0x412197=_0x5507dd;if(!this['_actor'])return;const _0x1cd940=this[_0x412197(0x414)][_0x412197(0x51e)]();for(const _0x4eef98 of _0x1cd940){this[_0x412197(0x19e)](_0x4eef98['toUpperCase']()[_0x412197(0x48c)]());}},Window_ActorCommand[_0x5507dd(0x832)][_0x5507dd(0x19e)]=function(_0x4418ff){const _0xcf76a1=_0x5507dd;_0x4418ff==='ATTACK'&&this[_0xcf76a1(0x5d9)]();[_0xcf76a1(0x7ec),_0xcf76a1(0x583)]['includes'](_0x4418ff)&&this[_0xcf76a1(0x6f9)]();_0x4418ff===_0xcf76a1(0x4f4)&&this['addGuardCommand']();_0x4418ff===_0xcf76a1(0x72d)&&this['addItemCommand']();_0x4418ff===_0xcf76a1(0x66e)&&this['addEscapeCommand']();_0x4418ff===_0xcf76a1(0x933)&&this[_0xcf76a1(0x245)]();if(_0x4418ff[_0xcf76a1(0x1f2)](/STYPE: (\d+)/i)){const _0x19a06e=Number(RegExp['$1']);this[_0xcf76a1(0x7ba)](_0x19a06e);}else{if(_0x4418ff[_0xcf76a1(0x1f2)](/STYPE: (.*)/i)){const _0x58e881=DataManager[_0xcf76a1(0x424)](RegExp['$1']);this[_0xcf76a1(0x7ba)](_0x58e881);}}_0x4418ff===_0xcf76a1(0x8f2)&&this[_0xcf76a1(0x1f0)]();if(_0x4418ff[_0xcf76a1(0x1f2)](/SKILL: (\d+)/i)){const _0x5ee034=Number(RegExp['$1']);this[_0xcf76a1(0x353)]($dataSkills[_0x5ee034]);}else{if(_0x4418ff[_0xcf76a1(0x1f2)](/SKILL: (.*)/i)){const _0x110f72=DataManager[_0xcf76a1(0x35a)](RegExp['$1']);this[_0xcf76a1(0x353)]($dataSkills[_0x110f72]);}}_0x4418ff==='PARTY'&&Imported[_0xcf76a1(0x8a7)]&&this[_0xcf76a1(0x8d7)](),[_0xcf76a1(0x3cf),_0xcf76a1(0x2f5)][_0xcf76a1(0x351)](_0x4418ff)&&Imported[_0xcf76a1(0x398)]&&this['addCombatLogCommand'](),_0x4418ff===_0xcf76a1(0x8aa)&&Imported[_0xcf76a1(0x633)]&&this['addWeaponSwapCommand'](!![]);},Window_ActorCommand[_0x5507dd(0x832)][_0x5507dd(0x5d9)]=function(){const _0x22bdfc=_0x5507dd,_0x306137=$dataSkills[this[_0x22bdfc(0x414)]['attackSkillId']()];if(!_0x306137)return;if(!this[_0x22bdfc(0x882)](_0x306137))return;const _0x1d2245=this[_0x22bdfc(0x19a)](),_0x2fe6ab=DataManager[_0x22bdfc(0x943)](_0x306137),_0x1e62e3=DataManager[_0x22bdfc(0x9be)](_0x306137),_0x33db61=_0x1d2245===_0x22bdfc(0x48f)?_0x2fe6ab:_0x22bdfc(0x2d1)['format'](_0x1e62e3,_0x2fe6ab);this[_0x22bdfc(0x9fc)](_0x33db61,_0x22bdfc(0x660),this[_0x22bdfc(0x414)][_0x22bdfc(0x770)]());},Window_ActorCommand['prototype'][_0x5507dd(0x624)]=function(){const _0x486463=_0x5507dd,_0x364bcb=$dataSkills[this[_0x486463(0x414)][_0x486463(0x26d)]()];if(!_0x364bcb)return;if(!this[_0x486463(0x882)](_0x364bcb))return;const _0x1b08b6=this['commandStyle'](),_0x3b3177=DataManager[_0x486463(0x943)](_0x364bcb),_0x596c82=DataManager[_0x486463(0x9be)](_0x364bcb),_0x2df4dd=_0x1b08b6===_0x486463(0x48f)?_0x3b3177:'\x5cI[%1]%2'[_0x486463(0x5d0)](_0x596c82,_0x3b3177);this[_0x486463(0x9fc)](_0x2df4dd,'guard',this['_actor'][_0x486463(0x42f)]());},Window_ActorCommand[_0x5507dd(0x832)][_0x5507dd(0x73c)]=function(){const _0x4dbc34=_0x5507dd,_0x211025=this[_0x4dbc34(0x19a)](),_0x2bb6a2=VisuMZ[_0x4dbc34(0x8af)][_0x4dbc34(0x32e)]['ActorCmd']['CmdIconItem'],_0x7a24f=_0x211025===_0x4dbc34(0x48f)?TextManager[_0x4dbc34(0x92a)]:_0x4dbc34(0x2d1)[_0x4dbc34(0x5d0)](_0x2bb6a2,TextManager['item']),_0x124419=this[_0x4dbc34(0x490)]();this[_0x4dbc34(0x9fc)](_0x7a24f,'item',_0x124419);},Window_ActorCommand[_0x5507dd(0x832)][_0x5507dd(0x490)]=function(){const _0x4b30d0=_0x5507dd;return this[_0x4b30d0(0x414)]&&this[_0x4b30d0(0x414)]['canUseItemCommand']();},Window_ActorCommand['prototype'][_0x5507dd(0x6f9)]=function(){const _0x5621c4=_0x5507dd,_0x3eab27=this[_0x5621c4(0x414)][_0x5621c4(0x3e9)]();for(const _0x933ba4 of _0x3eab27){this['addSkillTypeCommand'](_0x933ba4);}},Window_ActorCommand[_0x5507dd(0x832)][_0x5507dd(0x7ba)]=function(_0x5e4090){const _0x5f1af9=_0x5507dd;let _0x58f7c9=$dataSystem[_0x5f1af9(0x3e9)][_0x5e4090];if(!_0x58f7c9)return;let _0x5179b1=_0x58f7c9;const _0x1930d4=this[_0x5f1af9(0x19a)]();if(_0x1930d4===_0x5f1af9(0x48f))_0x5179b1=_0x5179b1[_0x5f1af9(0x684)](/\x1I\[(\d+)\]/gi,''),_0x5179b1=_0x5179b1['replace'](/\\I\[(\d+)\]/gi,'');else{if(!_0x58f7c9[_0x5f1af9(0x1f2)](/\\I\[(\d+)\]/i)){const _0x4ccaab=Imported['VisuMZ_1_SkillsStatesCore']?VisuMZ[_0x5f1af9(0x715)][_0x5f1af9(0x32e)][_0x5f1af9(0x2bb)]:VisuMZ[_0x5f1af9(0x8af)][_0x5f1af9(0x32e)][_0x5f1af9(0x5ce)],_0x4666a8=$dataSystem[_0x5f1af9(0x548)][_0x5f1af9(0x351)](_0x5e4090),_0x333d76=_0x4666a8?_0x4ccaab[_0x5f1af9(0x997)]:_0x4ccaab[_0x5f1af9(0x884)];_0x5179b1=_0x5f1af9(0x2d1)[_0x5f1af9(0x5d0)](_0x333d76,_0x58f7c9);}}this['addCommand'](_0x5179b1,'skill',!![],_0x5e4090);},Window_ActorCommand[_0x5507dd(0x832)][_0x5507dd(0x1f0)]=function(){const _0x11a445=_0x5507dd,_0x501820=this[_0x11a445(0x414)][_0x11a445(0x3e9)](),_0x58f02b=this['_actor']['skills']();for(const _0x374783 of _0x58f02b){if(!_0x374783)continue;if(Imported[_0x11a445(0x41e)]){if(this[_0x11a445(0x261)](_0x374783))continue;if(this['isHiddenSkill'](_0x374783))continue;}else{if(!_0x501820[_0x11a445(0x351)](_0x374783[_0x11a445(0x67c)]))continue;}this[_0x11a445(0x353)](_0x374783);}},Window_ActorCommand['prototype'][_0x5507dd(0x261)]=function(_0x21e59c){const _0x3a369a=_0x5507dd,_0x29b5d6=this[_0x3a369a(0x414)]['skillTypes'](),_0x5328fb=_0x29b5d6[_0x3a369a(0x1b4)](_0x57fbc0=>DataManager[_0x3a369a(0x565)](_0x21e59c)[_0x3a369a(0x351)](_0x57fbc0));return _0x5328fb[_0x3a369a(0x77e)]<=0x0;},Window_ActorCommand[_0x5507dd(0x832)][_0x5507dd(0x293)]=function(_0x27a83b){const _0x18e748=_0x5507dd;if(Imported['VisuMZ_1_SkillsStatesCore']){if(VisuMZ['SkillsStatesCore'][_0x18e748(0x6fc)]>=1.24){if(this['_actor']){if(!VisuMZ[_0x18e748(0x715)][_0x18e748(0x6ed)](this[_0x18e748(0x414)],_0x27a83b))return!![];if(!VisuMZ['SkillsStatesCore'][_0x18e748(0x96f)](this[_0x18e748(0x414)],_0x27a83b))return!![];if(!VisuMZ['SkillsStatesCore']['CheckVisibleSkillNotetags'](this[_0x18e748(0x414)],_0x27a83b))return!![];}}else{if(!Window_SkillList[_0x18e748(0x832)][_0x18e748(0x8e1)][_0x18e748(0x542)](this,_0x27a83b))return!![];if(!Window_SkillList['prototype'][_0x18e748(0x875)][_0x18e748(0x542)](this,_0x27a83b))return!![];if(!Window_SkillList[_0x18e748(0x832)][_0x18e748(0x9f0)][_0x18e748(0x542)](this,_0x27a83b))return!![];}}return![];},Window_ActorCommand[_0x5507dd(0x832)]['addSingleSkillCommand']=function(_0x4d5df2){const _0x3793ba=_0x5507dd;if(!_0x4d5df2)return;if(!this[_0x3793ba(0x882)](_0x4d5df2))return;const _0x2c63c3=this[_0x3793ba(0x19a)](),_0x3a226b=DataManager[_0x3793ba(0x943)](_0x4d5df2),_0x4bed68=DataManager[_0x3793ba(0x9be)](_0x4d5df2),_0x13ecde=_0x2c63c3==='text'?_0x3a226b:_0x3793ba(0x2d1)['format'](_0x4bed68,_0x3a226b),_0x2de31e=this[_0x3793ba(0x414)][_0x3793ba(0x23a)](_0x4d5df2);this[_0x3793ba(0x9fc)](_0x13ecde,_0x3793ba(0x9eb),_0x2de31e,_0x4d5df2['id']);},Window_ActorCommand[_0x5507dd(0x832)][_0x5507dd(0x882)]=function(_0x2cc9ed){const _0x24c4c0=_0x5507dd,_0x112fa6=_0x2cc9ed[_0x24c4c0(0x6a3)];if(_0x112fa6['match'](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x24c4c0(0x414)][_0x24c4c0(0x4c9)](_0x2cc9ed['id']))return![];}if(_0x112fa6['match'](/<COMMAND REQUIRE ACCESS>/i)){if(!this['_actor'][_0x24c4c0(0x752)](_0x2cc9ed['id']))return![];}const _0x1a8012=VisuMZ[_0x24c4c0(0x8af)][_0x24c4c0(0x54b)](_0x2cc9ed,'CommandVisible');if(VisuMZ[_0x24c4c0(0x8af)]['JS'][_0x1a8012]){if(!VisuMZ['BattleCore']['JS'][_0x1a8012][_0x24c4c0(0x542)](this,this[_0x24c4c0(0x414)],_0x2cc9ed))return![];}return VisuMZ['BattleCore']['CheckSkillCommandShowSwitches'](_0x2cc9ed);},VisuMZ['BattleCore'][_0x5507dd(0x794)]=function(_0x9cb6f9){const _0x60a667=_0x5507dd,_0x289aeb=_0x9cb6f9['note'];if(_0x289aeb[_0x60a667(0x1f2)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x42d677=JSON['parse']('['+RegExp['$1'][_0x60a667(0x1f2)](/\d+/g)+']');for(const _0x35a139 of _0x42d677){if(!$gameSwitches[_0x60a667(0x5a7)](_0x35a139))return![];}return!![];}if(_0x289aeb[_0x60a667(0x1f2)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x1a6cd0=JSON[_0x60a667(0x929)]('['+RegExp['$1'][_0x60a667(0x1f2)](/\d+/g)+']');for(const _0x49ef92 of _0x1a6cd0){if(!$gameSwitches['value'](_0x49ef92))return![];}return!![];}if(_0x289aeb[_0x60a667(0x1f2)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x1f5f74=JSON[_0x60a667(0x929)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x3c9335 of _0x1f5f74){if($gameSwitches['value'](_0x3c9335))return!![];}return![];}if(_0x289aeb[_0x60a667(0x1f2)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x60fbb1=JSON[_0x60a667(0x929)]('['+RegExp['$1'][_0x60a667(0x1f2)](/\d+/g)+']');for(const _0x557f9e of _0x60fbb1){if(!$gameSwitches[_0x60a667(0x5a7)](_0x557f9e))return!![];}return![];}if(_0x289aeb[_0x60a667(0x1f2)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x4fbb21=JSON[_0x60a667(0x929)]('['+RegExp['$1'][_0x60a667(0x1f2)](/\d+/g)+']');for(const _0x52dfd1 of _0x4fbb21){if(!$gameSwitches[_0x60a667(0x5a7)](_0x52dfd1))return!![];}return![];}if(_0x289aeb[_0x60a667(0x1f2)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x1b3e43=JSON[_0x60a667(0x929)]('['+RegExp['$1'][_0x60a667(0x1f2)](/\d+/g)+']');for(const _0x2d097c of _0x1b3e43){if($gameSwitches[_0x60a667(0x5a7)](_0x2d097c))return![];}return!![];}return!![];},Window_ActorCommand[_0x5507dd(0x832)][_0x5507dd(0x892)]=function(){const _0x2d8215=_0x5507dd,_0x5c5414=this[_0x2d8215(0x19a)](),_0x45f87d=VisuMZ[_0x2d8215(0x8af)]['Settings'][_0x2d8215(0x80f)][_0x2d8215(0x416)],_0x440f97=_0x5c5414==='text'?TextManager['escape']:_0x2d8215(0x2d1)[_0x2d8215(0x5d0)](_0x45f87d,TextManager[_0x2d8215(0x6f3)]),_0x39d1c=this['isEscapeCommandEnabled']();this[_0x2d8215(0x9fc)](_0x440f97,_0x2d8215(0x6f3),_0x39d1c);},Window_ActorCommand[_0x5507dd(0x832)][_0x5507dd(0x8d3)]=function(){const _0x37ba9b=_0x5507dd;return BattleManager[_0x37ba9b(0xa05)]();},Window_ActorCommand[_0x5507dd(0x832)][_0x5507dd(0x245)]=function(){const _0x4bf9d5=_0x5507dd,_0xdd8f61=this[_0x4bf9d5(0x19a)](),_0x455cb5=VisuMZ[_0x4bf9d5(0x8af)][_0x4bf9d5(0x32e)][_0x4bf9d5(0x80f)][_0x4bf9d5(0x309)],_0x269644=_0xdd8f61===_0x4bf9d5(0x48f)?TextManager[_0x4bf9d5(0x42e)]:'\x5cI[%1]%2'[_0x4bf9d5(0x5d0)](_0x455cb5,TextManager['autoBattle']),_0x44fa9b=this[_0x4bf9d5(0x763)]();this[_0x4bf9d5(0x9fc)](_0x269644,_0x4bf9d5(0x42e),_0x44fa9b);},Window_ActorCommand['prototype'][_0x5507dd(0x763)]=function(){return!![];},Window_ActorCommand[_0x5507dd(0x832)][_0x5507dd(0x4be)]=function(){const _0xc94d44=_0x5507dd;return VisuMZ[_0xc94d44(0x8af)][_0xc94d44(0x32e)][_0xc94d44(0x5ce)][_0xc94d44(0x88b)];},Window_ActorCommand[_0x5507dd(0x832)]['drawItem']=function(_0x123a63){const _0x60d3d2=_0x5507dd,_0x354ac2=this[_0x60d3d2(0x246)](_0x123a63);if(_0x354ac2===_0x60d3d2(0x7b5))this['drawItemStyleIconText'](_0x123a63);else _0x354ac2===_0x60d3d2(0x4b1)?this[_0x60d3d2(0x503)](_0x123a63):Window_Command['prototype'][_0x60d3d2(0x3f5)][_0x60d3d2(0x542)](this,_0x123a63);this['drawSingleSkillCost'](_0x123a63);},Window_ActorCommand[_0x5507dd(0x832)]['commandStyle']=function(){const _0x4e8090=_0x5507dd;return VisuMZ[_0x4e8090(0x8af)]['Settings'][_0x4e8090(0x5ce)][_0x4e8090(0x21e)];},Window_ActorCommand[_0x5507dd(0x832)][_0x5507dd(0x246)]=function(_0x493c30){const _0x5539c1=_0x5507dd;if(_0x493c30<0x0)return _0x5539c1(0x48f);const _0xc92575=this[_0x5539c1(0x19a)]();if(_0xc92575!=='auto')return _0xc92575;else{if(this['maxItems']()>0x0){const _0x16b9b0=this['commandName'](_0x493c30);if(_0x16b9b0[_0x5539c1(0x1f2)](/\\I\[(\d+)\]/i)){const _0x2fa1a0=this[_0x5539c1(0x399)](_0x493c30),_0x1ec561=this['textSizeEx'](_0x16b9b0)[_0x5539c1(0x4fa)];return _0x1ec561<=_0x2fa1a0[_0x5539c1(0x4fa)]?_0x5539c1(0x7b5):_0x5539c1(0x4b1);}}}return _0x5539c1(0x48f);},Window_ActorCommand[_0x5507dd(0x832)][_0x5507dd(0x401)]=function(_0x692e0d){const _0x5b446e=_0x5507dd,_0x5ee14d=this[_0x5b446e(0x399)](_0x692e0d),_0x5c001d=this[_0x5b446e(0x572)](_0x692e0d),_0x36ad97=this[_0x5b446e(0x61c)](_0x5c001d)[_0x5b446e(0x4fa)];this[_0x5b446e(0x76c)](this[_0x5b446e(0x25f)](_0x692e0d));const _0x4cc9d3=this[_0x5b446e(0x4be)]();if(_0x4cc9d3===_0x5b446e(0x449))this['drawTextEx'](_0x5c001d,_0x5ee14d['x']+_0x5ee14d[_0x5b446e(0x4fa)]-_0x36ad97,_0x5ee14d['y'],_0x36ad97);else{if(_0x4cc9d3==='center'){const _0x2aba07=_0x5ee14d['x']+Math['floor']((_0x5ee14d[_0x5b446e(0x4fa)]-_0x36ad97)/0x2);this[_0x5b446e(0x6a8)](_0x5c001d,_0x2aba07,_0x5ee14d['y'],_0x36ad97);}else this[_0x5b446e(0x6a8)](_0x5c001d,_0x5ee14d['x'],_0x5ee14d['y'],_0x36ad97);}},Window_ActorCommand[_0x5507dd(0x832)][_0x5507dd(0x503)]=function(_0x26a07c){const _0x257c05=_0x5507dd;this['commandName'](_0x26a07c)[_0x257c05(0x1f2)](/\\I\[(\d+)\]/i);const _0x1f5cfb=Number(RegExp['$1'])||0x0,_0x4cf31f=this[_0x257c05(0x399)](_0x26a07c),_0x25dc31=_0x4cf31f['x']+Math['floor']((_0x4cf31f[_0x257c05(0x4fa)]-ImageManager[_0x257c05(0x934)])/0x2),_0x135db3=_0x4cf31f['y']+(_0x4cf31f[_0x257c05(0x80e)]-ImageManager[_0x257c05(0x5cd)])/0x2;this[_0x257c05(0x8e9)](_0x1f5cfb,_0x25dc31,_0x135db3);},Window_ActorCommand[_0x5507dd(0x832)]['drawSingleSkillCost']=function(_0x35d7f5){const _0xe53189=_0x5507dd;if(!(VisuMZ[_0xe53189(0x8af)][_0xe53189(0x32e)][_0xe53189(0x5ce)]['ShowCosts']??!![]))return;const _0x2717ff=this[_0xe53189(0x4aa)](_0x35d7f5);if(!['attack',_0xe53189(0x716),_0xe53189(0x9eb)][_0xe53189(0x351)](_0x2717ff))return;const _0x2d3f41=this[_0xe53189(0x399)](_0x35d7f5);let _0x5dc008=null;if(_0x2717ff===_0xe53189(0x660))_0x5dc008=$dataSkills[this[_0xe53189(0x414)][_0xe53189(0x337)]()];else _0x2717ff===_0xe53189(0x716)?_0x5dc008=$dataSkills[this[_0xe53189(0x414)][_0xe53189(0x26d)]()]:_0x5dc008=$dataSkills[this['_list'][_0x35d7f5]['ext']];this[_0xe53189(0x22a)](this['_actor'],_0x5dc008,_0x2d3f41['x'],_0x2d3f41['y'],_0x2d3f41[_0xe53189(0x4fa)]);},Window_ActorCommand[_0x5507dd(0x832)][_0x5507dd(0x22a)]=function(_0x182136,_0x15a662,_0x599ff5,_0x57744e,_0x27bbf0){const _0x11e6d0=_0x5507dd;if(!_0x15a662)return;Imported['VisuMZ_1_SkillsStatesCore']?Window_Command[_0x11e6d0(0x832)]['drawSkillCost'][_0x11e6d0(0x542)](this,_0x182136,_0x15a662,_0x599ff5,_0x57744e,_0x27bbf0):Window_SkillList[_0x11e6d0(0x832)][_0x11e6d0(0x22a)][_0x11e6d0(0x542)](this,_0x15a662,_0x599ff5,_0x57744e,_0x27bbf0);},Window_ActorCommand[_0x5507dd(0x832)][_0x5507dd(0xa1a)]=function(){},Window_ActorCommand[_0x5507dd(0x832)][_0x5507dd(0x1c6)]=function(){const _0x14a77a=_0x5507dd;Window_Command[_0x14a77a(0x832)]['activate']['call'](this);const _0x368250=this[_0x14a77a(0x475)]();_0x368250===_0x14a77a(0x67e)&&this[_0x14a77a(0x5c0)]();},Window_ActorCommand[_0x5507dd(0x832)][_0x5507dd(0x475)]=function(){const _0x431358=_0x5507dd;if(this[_0x431358(0x1cb)])return this[_0x431358(0x1cb)];return this['_battleLayoutStyle']=SceneManager[_0x431358(0x590)]['battleLayoutStyle'](),this[_0x431358(0x1cb)];},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x68a)]=Window_ActorCommand[_0x5507dd(0x832)][_0x5507dd(0x3d3)],Window_ActorCommand[_0x5507dd(0x832)][_0x5507dd(0x3d3)]=function(_0x4e033a){const _0x45027a=_0x5507dd,_0x3b44fd=this[_0x45027a(0x475)]();if(_0x4e033a&&['xp',_0x45027a(0x8ac)][_0x45027a(0x351)](_0x3b44fd))this['resizeWindowXPStyle'](_0x4e033a);else _0x4e033a&&[_0x45027a(0x67e)][_0x45027a(0x351)](_0x3b44fd)&&(this[_0x45027a(0x1c1)](_0x4e033a),this['showHelpWindow']());VisuMZ[_0x45027a(0x8af)]['Window_ActorCommand_setup']['call'](this,_0x4e033a),_0x4e033a&&$gameTroop[_0x45027a(0x682)]()[_0x45027a(0x77e)]>0x0&&_0x4e033a[_0x45027a(0x9f8)]()&&_0x4e033a[_0x45027a(0x9f8)]()[_0x45027a(0x480)]();},Window_ActorCommand[_0x5507dd(0x832)][_0x5507dd(0x8de)]=function(_0x3a10c3){const _0x11f02f=_0x5507dd,_0x34ee6d=Math[_0x11f02f(0x95e)](Graphics[_0x11f02f(0x8e0)]/0x3),_0xa75bbb=Math[_0x11f02f(0x95e)](Graphics[_0x11f02f(0x8e0)]/$gameParty[_0x11f02f(0x1a3)]()[_0x11f02f(0x77e)]),_0x2548db=Math[_0x11f02f(0x71c)](_0x34ee6d,_0xa75bbb),_0x1bea43=this[_0x11f02f(0x530)](VisuMZ[_0x11f02f(0x8af)][_0x11f02f(0x32e)]['BattleLayout'][_0x11f02f(0x75e)]),_0x22a2b2=_0xa75bbb*_0x3a10c3['index']()+(_0xa75bbb-_0x2548db)/0x2,_0x2a2c6b=SceneManager['_scene'][_0x11f02f(0x713)]['y']-_0x1bea43;this[_0x11f02f(0x79a)](_0x22a2b2,_0x2a2c6b,_0x2548db,_0x1bea43),this[_0x11f02f(0x3cd)](),this[_0x11f02f(0x504)](0x1);},Window_ActorCommand[_0x5507dd(0x832)][_0x5507dd(0x1c1)]=function(_0x350491){const _0x18ae4b=_0x5507dd,_0x5f0b1e=SceneManager[_0x18ae4b(0x590)][_0x18ae4b(0x904)]();this[_0x18ae4b(0x79a)](_0x5f0b1e['x'],_0x5f0b1e['y'],_0x5f0b1e[_0x18ae4b(0x4fa)],_0x5f0b1e[_0x18ae4b(0x80e)]),this[_0x18ae4b(0x3cd)](),this[_0x18ae4b(0x504)](0x0);},Window_ActorCommand['prototype'][_0x5507dd(0x678)]=function(){const _0x559f9f=_0x5507dd;if(this['_dimmerSprite']){const _0x17939f=this[_0x559f9f(0x7be)][_0x559f9f(0x257)],_0xff8c98=this['width']-0x8,_0x5d96b9=this['height'],_0x4ce4f3=this['padding'],_0x457755=ColorManager[_0x559f9f(0x5dc)](),_0x37b625=ColorManager[_0x559f9f(0x2cd)]();this[_0x559f9f(0x7be)]['x']=0x4,_0x17939f[_0x559f9f(0x911)](_0xff8c98,_0x5d96b9),_0x17939f[_0x559f9f(0x755)](0x0,0x0,_0xff8c98,_0x4ce4f3,_0x37b625,_0x457755,!![]),_0x17939f[_0x559f9f(0x4ec)](0x0,_0x4ce4f3,_0xff8c98,_0x5d96b9-_0x4ce4f3*0x2,_0x457755),_0x17939f[_0x559f9f(0x755)](0x0,_0x5d96b9-_0x4ce4f3,_0xff8c98,_0x4ce4f3,_0x457755,_0x37b625,!![]),this[_0x559f9f(0x7be)][_0x559f9f(0x57d)](0x0,0x0,_0xff8c98,_0x5d96b9);}},Window_ActorCommand[_0x5507dd(0x832)][_0x5507dd(0x897)]=function(){const _0x1ad980=_0x5507dd;if(!this[_0x1ad980(0x414)])return;const _0x1f64d0=VisuMZ[_0x1ad980(0x8af)][_0x1ad980(0x32e)][_0x1ad980(0x5ce)],_0x3a5d84=this[_0x1ad980(0x9b6)]();switch(_0x3a5d84){case _0x1ad980(0x660):this[_0x1ad980(0x3b8)]($dataSkills[this['_actor']['attackSkillId']()]);break;case _0x1ad980(0x716):this['setHelpWindowItem']($dataSkills[this[_0x1ad980(0x414)][_0x1ad980(0x26d)]()]);break;case _0x1ad980(0x491):const _0x505577=_0x1f64d0[_0x1ad980(0x693)],_0x23108a=_0x505577[_0x1ad980(0x5d0)]($dataSystem[_0x1ad980(0x3e9)][this[_0x1ad980(0x78f)]()]);this[_0x1ad980(0x28f)][_0x1ad980(0x66d)](_0x23108a);break;case'singleSkill':this[_0x1ad980(0x3b8)]($dataSkills[this[_0x1ad980(0x78f)]()]);break;case'item':this[_0x1ad980(0x28f)][_0x1ad980(0x66d)](_0x1f64d0[_0x1ad980(0x699)]);break;case _0x1ad980(0x6f3):this[_0x1ad980(0x28f)][_0x1ad980(0x66d)](_0x1f64d0[_0x1ad980(0x681)]);break;case'autoBattle':this[_0x1ad980(0x28f)][_0x1ad980(0x66d)](_0x1f64d0[_0x1ad980(0x7b0)]);break;default:this[_0x1ad980(0x28f)][_0x1ad980(0x66d)]('');break;}},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x2a5)]=Window_BattleStatus[_0x5507dd(0x832)][_0x5507dd(0x2aa)],Window_BattleStatus[_0x5507dd(0x832)][_0x5507dd(0x2aa)]=function(_0x5e75fd){const _0x2fc8f0=_0x5507dd;VisuMZ[_0x2fc8f0(0x8af)][_0x2fc8f0(0x2a5)][_0x2fc8f0(0x542)](this,_0x5e75fd),this[_0x2fc8f0(0x9b8)](),this[_0x2fc8f0(0x733)]();},Window_BattleStatus[_0x5507dd(0x832)][_0x5507dd(0x475)]=function(){const _0x268833=_0x5507dd;if(this[_0x268833(0x1cb)])return this['_battleLayoutStyle'];return this[_0x268833(0x1cb)]=SceneManager['_scene']['battleLayoutStyle'](),this[_0x268833(0x1cb)];},Window_BattleStatus['prototype']['initBattleCore']=function(){const _0x31b81a=_0x5507dd;this[_0x31b81a(0x239)]=this[_0x31b81a(0x880)]();const _0x4fb1c0=VisuMZ['BattleCore'][_0x31b81a(0x32e)][_0x31b81a(0x7b7)];_0x4fb1c0[_0x31b81a(0x9a9)]&&(this[_0x31b81a(0x411)]=0x0);},Window_BattleStatus['prototype'][_0x5507dd(0x880)]=function(){const _0x4d52f1=_0x5507dd,_0x556c04=VisuMZ['BattleCore'][_0x4d52f1(0x32e)][_0x4d52f1(0x7b7)];if(_0x556c04[_0x4d52f1(0x5b9)])return!![];const _0x29b404=this[_0x4d52f1(0x475)]();switch(_0x29b404){case _0x4d52f1(0x784):case _0x4d52f1(0x67e):return!![];break;case'default':case'xp':case'portrait':default:return![];break;}},Window_BattleStatus[_0x5507dd(0x832)]['extraHeight']=function(){const _0x521d67=_0x5507dd;return this[_0x521d67(0x880)]()?0x0:0xa;},Window_BattleStatus['prototype'][_0x5507dd(0x77f)]=function(){const _0x32cb11=_0x5507dd,_0x70e923=this[_0x32cb11(0x475)]();switch(_0x70e923){case _0x32cb11(0x784):return 0x1;break;case'xp':case _0x32cb11(0x8ac):return $gameParty[_0x32cb11(0x1a3)]()[_0x32cb11(0x77e)];break;case'default':default:return $gameParty[_0x32cb11(0x7b8)]();break;}},Window_BattleStatus['prototype'][_0x5507dd(0x57f)]=function(){const _0x3f9b25=_0x5507dd,_0x14cb6c=this['battleLayoutStyle']();switch(_0x14cb6c){case'list':return Window_StatusBase[_0x3f9b25(0x832)][_0x3f9b25(0x57f)][_0x3f9b25(0x542)](this);break;case _0x3f9b25(0x92e):case'xp':case'portrait':default:return this['innerHeight'];break;}},Window_BattleStatus['prototype'][_0x5507dd(0x1b5)]=function(){const _0x10fe43=_0x5507dd,_0x21ad26=this['battleLayoutStyle']();switch(_0x21ad26){case'list':return Window_StatusBase[_0x10fe43(0x832)][_0x10fe43(0x1b5)][_0x10fe43(0x542)](this);break;case _0x10fe43(0x92e):case'xp':case _0x10fe43(0x8ac):default:return 0x0;break;}},Window_BattleStatus[_0x5507dd(0x832)][_0x5507dd(0x4c7)]=function(){const _0x103ad9=_0x5507dd;this[_0x103ad9(0x880)]()?Window_StatusBase['prototype'][_0x103ad9(0x4c7)][_0x103ad9(0x542)](this):this[_0x103ad9(0x52d)]=0x8;},Window_BattleStatus['prototype']['loadWindowskin']=function(){const _0x34a47f=_0x5507dd,_0x42f6c3=VisuMZ['BattleCore'][_0x34a47f(0x32e)][_0x34a47f(0x7b7)];_0x42f6c3[_0x34a47f(0x5b9)]?this[_0x34a47f(0x837)]=ImageManager['loadSystem'](_0x42f6c3[_0x34a47f(0x5b9)]):Window_StatusBase['prototype'][_0x34a47f(0x354)][_0x34a47f(0x542)](this);},Window_BattleStatus[_0x5507dd(0x832)][_0x5507dd(0x913)]=function(_0x522cd6){const _0x32d306=_0x5507dd,_0x22f9b8=VisuMZ[_0x32d306(0x8af)][_0x32d306(0x32e)][_0x32d306(0x7b7)];if(_0x22f9b8[_0x32d306(0x519)])return;Window_StatusBase[_0x32d306(0x832)]['drawItemBackground'][_0x32d306(0x542)](this,_0x522cd6);},Window_BattleStatus['prototype'][_0x5507dd(0x46f)]=function(){const _0x236fcf=_0x5507dd;this[_0x236fcf(0x53b)]=!![];},Window_BattleStatus[_0x5507dd(0x832)][_0x5507dd(0x3ce)]=function(){const _0x4ed061=_0x5507dd;Window_StatusBase[_0x4ed061(0x832)][_0x4ed061(0x3ce)][_0x4ed061(0x542)](this),this[_0x4ed061(0x86a)](),this[_0x4ed061(0x842)]();if(this[_0x4ed061(0x475)]()===_0x4ed061(0x67e))this[_0x4ed061(0x433)]();},Window_BattleStatus[_0x5507dd(0x832)][_0x5507dd(0x86a)]=function(){const _0x3de559=_0x5507dd;if($gameTemp['isBattleRefreshRequested']())this['preparePartyRefresh'](),this['_requestRefresh']=![],$gameTemp[_0x3de559(0x248)]();else this[_0x3de559(0x53b)]&&(this[_0x3de559(0x53b)]=![],this[_0x3de559(0x62f)](),this[_0x3de559(0x8cf)]());},Window_BattleStatus[_0x5507dd(0x832)]['show']=function(){const _0x4465bc=_0x5507dd;Window_StatusBase[_0x4465bc(0x832)]['show']['call'](this);if(!$gameSystem['isSideView']())this[_0x4465bc(0x62f)]();},Window_BattleStatus[_0x5507dd(0x832)][_0x5507dd(0xa1a)]=function(){const _0x328e17=_0x5507dd;if(this['constructor']===Window_BattleStatus)return;Window_StatusBase[_0x328e17(0x832)][_0x328e17(0xa1a)]['call'](this);},Window_BattleStatus['prototype'][_0x5507dd(0x60e)]=function(_0x41953d){const _0x2b8f61=_0x5507dd,_0x195e15=this[_0x2b8f61(0x475)]();switch(_0x195e15){case'xp':case _0x2b8f61(0x8ac):break;case _0x2b8f61(0x92e):case _0x2b8f61(0x784):case _0x2b8f61(0x67e):default:return Window_StatusBase[_0x2b8f61(0x832)][_0x2b8f61(0x60e)]['call'](this,_0x41953d);break;}},VisuMZ['BattleCore'][_0x5507dd(0x4f7)]=Window_BattleStatus[_0x5507dd(0x832)][_0x5507dd(0xa1d)],Window_BattleStatus[_0x5507dd(0x832)][_0x5507dd(0xa1d)]=function(_0x464408){const _0x346598=_0x5507dd,_0x4783aa=this[_0x346598(0x475)]();switch(_0x4783aa){case'list':this[_0x346598(0x796)](_0x464408);break;case'xp':this[_0x346598(0x359)](_0x464408);break;case _0x346598(0x8ac):this[_0x346598(0x375)](_0x464408);break;case _0x346598(0x92e):case _0x346598(0x67e):default:VisuMZ[_0x346598(0x8af)][_0x346598(0x4f7)][_0x346598(0x542)](this,_0x464408);break;}},Window_BattleStatus[_0x5507dd(0x832)]['drawItemStatus']=function(_0x1b2124){const _0x120091=_0x5507dd,_0x116ec0=this[_0x120091(0x475)]();if(!$gameSystem[_0x120091(0x577)]())this[_0x120091(0x42c)](_0x1b2124);switch(_0x116ec0){case'list':this['drawItemStatusListStyle'](_0x1b2124);break;case'xp':case _0x120091(0x8ac):case _0x120091(0x92e):case _0x120091(0x67e):default:this[_0x120091(0x25a)](_0x1b2124);break;}},Window_BattleStatus[_0x5507dd(0x832)][_0x5507dd(0x6bc)]=function(){const _0x37a046=_0x5507dd,_0x539a65=this['battleLayoutStyle']();if(['xp'][_0x37a046(0x351)](_0x539a65)&&!$gameSystem[_0x37a046(0x577)]()){this[_0x37a046(0x92d)](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x37a046(0x832)][_0x37a046(0x6bc)][_0x37a046(0x542)](this);},Window_BattleStatus['prototype'][_0x5507dd(0x42c)]=function(_0x52ffe6){const _0x3d1b8d=_0x5507dd,_0x7edf4d=this[_0x3d1b8d(0x914)](_0x52ffe6)[_0x3d1b8d(0x9f8)]();if(!_0x7edf4d)return;const _0x5cd6d6=this[_0x3d1b8d(0x475)](),_0x19398c=this[_0x3d1b8d(0x747)](_0x52ffe6);let _0x1a39dc=Math[_0x3d1b8d(0x95e)](_0x19398c['x']+_0x19398c['width']/0x2)+this[_0x3d1b8d(0x52d)];[_0x3d1b8d(0x784)][_0x3d1b8d(0x351)](_0x5cd6d6)&&(_0x1a39dc=_0x19398c[_0x3d1b8d(0x4fa)]/$gameParty['battleMembers']()[_0x3d1b8d(0x77e)],_0x1a39dc*=_0x52ffe6,_0x1a39dc+=_0x19398c[_0x3d1b8d(0x4fa)]/$gameParty['battleMembers']()[_0x3d1b8d(0x77e)]/0x2);let _0x39af36=Math[_0x3d1b8d(0x95e)](this[_0x3d1b8d(0x4c6)](_0x52ffe6,_0x7edf4d,_0x19398c));_0x7edf4d[_0x3d1b8d(0x41f)](_0x1a39dc,_0x39af36),this['addChildAt'](_0x7edf4d,0x1),_0x7edf4d[_0x3d1b8d(0x59e)](),this['updateEffectsContainer'](),this[_0x3d1b8d(0x8cf)]();},Window_BattleStatus['prototype'][_0x5507dd(0x4c6)]=function(_0xeeedd1,_0x3ac651,_0x301469){const _0x4715a3=_0x5507dd,_0x28b1ae=VisuMZ['BattleCore'][_0x4715a3(0x32e)]['BattleLayout'],_0x36f251=this[_0x4715a3(0x475)]();if(_0x36f251==='xp'){const _0x1b69db=_0x28b1ae[_0x4715a3(0x712)];switch(_0x1b69db[_0x4715a3(0x5c8)]()[_0x4715a3(0x48c)]()){case _0x4715a3(0x6c5):return _0x301469[_0x4715a3(0x80e)]-_0x3ac651['_shadowSprite']['height']/0x4;break;case'center':const _0x202b69=_0x28b1ae['XPActorDefaultHeight'];return(_0x301469[_0x4715a3(0x80e)]+(_0x3ac651[_0x4715a3(0x80e)]||_0x202b69))/0x2;break;case _0x4715a3(0x3aa):return 0x0;case _0x4715a3(0x55f):default:return this['nameY'](_0x301469);break;}}else{if(_0x36f251==='portrait'){}}return _0x3ac651[_0x4715a3(0x80e)];},Sprite_Name['prototype']['bitmapHeight']=function(){return 0x24;},Sprite_Name[_0x5507dd(0x832)]['redraw']=function(){const _0x39f52c=_0x5507dd,_0x35a0da=this['name'](),_0x3d2a04=this[_0x39f52c(0x7de)](),_0x1865f2=this[_0x39f52c(0x322)]();this[_0x39f52c(0x462)](),this[_0x39f52c(0x257)][_0x39f52c(0x9dc)](),this[_0x39f52c(0x257)][_0x39f52c(0x29d)](_0x35a0da,0x0,0x0,_0x3d2a04,_0x1865f2,_0x39f52c(0x457));},Bitmap[_0x5507dd(0x832)]['drawTextTopAligned']=function(_0x4a2fef,_0x14ef94,_0x53737b,_0x161cc2,_0x34bc54,_0x3eed63){const _0x5562e6=_0x5507dd,_0x302878=this[_0x5562e6(0x1a8)],_0x27ebca=_0x302878[_0x5562e6(0x7a4)];_0x161cc2=_0x161cc2||0xffffffff;let _0x4e1e3a=_0x14ef94,_0x44f295=Math[_0x5562e6(0x95e)](_0x53737b+0x18/0x2+this[_0x5562e6(0x93c)]*0.35);_0x3eed63===_0x5562e6(0x9ba)&&(_0x4e1e3a+=_0x161cc2/0x2),_0x3eed63===_0x5562e6(0x449)&&(_0x4e1e3a+=_0x161cc2),_0x302878[_0x5562e6(0x8a8)](),_0x302878[_0x5562e6(0x4bd)]=this[_0x5562e6(0x6bf)](),_0x302878[_0x5562e6(0x446)]=_0x3eed63,_0x302878['textBaseline']=_0x5562e6(0x250),_0x302878[_0x5562e6(0x7a4)]=0x1,this[_0x5562e6(0x341)](_0x4a2fef,_0x4e1e3a,_0x44f295,_0x161cc2),_0x302878[_0x5562e6(0x7a4)]=_0x27ebca,this[_0x5562e6(0x64a)](_0x4a2fef,_0x4e1e3a,_0x44f295,_0x161cc2),_0x302878[_0x5562e6(0x2b6)](),this[_0x5562e6(0x3de)][_0x5562e6(0x3ce)]();},Window_BattleStatus['prototype'][_0x5507dd(0x534)]=function(_0x18f6f9){const _0x285b2b=_0x5507dd;return this[_0x285b2b(0x670)](_0x18f6f9)-this[_0x285b2b(0x364)]();},Window_BattleStatus[_0x5507dd(0x832)][_0x5507dd(0x796)]=function(_0x1f12d3){const _0x390839=_0x5507dd;if(!VisuMZ[_0x390839(0x8af)][_0x390839(0x32e)][_0x390839(0x7b7)][_0x390839(0x726)])return;const _0x2e145d=this['actor'](_0x1f12d3),_0x45bb9f=this[_0x390839(0x747)](_0x1f12d3);_0x45bb9f[_0x390839(0x4fa)]=ImageManager[_0x390839(0x50e)],_0x45bb9f[_0x390839(0x80e)]-=0x2,this[_0x390839(0x376)](_0x2e145d,_0x45bb9f['x']+0x1,_0x45bb9f['y']+0x1,_0x45bb9f['width'],_0x45bb9f[_0x390839(0x80e)]);},Window_BattleStatus[_0x5507dd(0x832)]['drawItemStatusListStyle']=function(_0x369bbb){const _0xfcaead=_0x5507dd,_0x15f0aa=VisuMZ['BattleCore'][_0xfcaead(0x32e)][_0xfcaead(0x7b7)],_0x5bc508=$dataSystem['optDisplayTp']?0x4:0x3,_0x55deb6=_0x5bc508*0x80+(_0x5bc508-0x1)*0x8+0x4,_0x594d19=this[_0xfcaead(0x914)](_0x369bbb),_0x1e9d35=this[_0xfcaead(0x747)](_0x369bbb);let _0x16512e=_0x1e9d35['x']+this['padding'];_0x15f0aa[_0xfcaead(0x726)]?_0x16512e=_0x1e9d35['x']+ImageManager[_0xfcaead(0x50e)]+0x8:_0x16512e+=ImageManager[_0xfcaead(0x934)];const _0xe6e46f=Math[_0xfcaead(0x95e)](Math[_0xfcaead(0x71c)](_0x1e9d35['x']+_0x1e9d35['width']-_0x55deb6,_0x16512e)),_0x34b803=Math[_0xfcaead(0x95e)](_0x1e9d35['y']+(_0x1e9d35[_0xfcaead(0x80e)]-Sprite_Name['prototype']['bitmapHeight']())/0x2),_0x4ae1b3=Math[_0xfcaead(0x95e)](_0xe6e46f-ImageManager[_0xfcaead(0x934)]/0x2-0x4),_0x4d050b=Math[_0xfcaead(0x95e)](_0x1e9d35['y']+(_0x1e9d35[_0xfcaead(0x80e)]-ImageManager[_0xfcaead(0x5cd)])/0x2+ImageManager[_0xfcaead(0x5cd)]/0x2);let _0x408170=_0xe6e46f+0x88;const _0x1b1c5a=_0x34b803;this['placeTimeGauge'](_0x594d19,_0xe6e46f-0x4+(_0x15f0aa[_0xfcaead(0x91c)]||0x0),_0x34b803+(_0x15f0aa[_0xfcaead(0x2c6)]||0x0)),this[_0xfcaead(0x930)](_0x594d19,_0xe6e46f+(_0x15f0aa['NameOffsetX']||0x0),_0x34b803+(_0x15f0aa[_0xfcaead(0x221)]||0x0)),this[_0xfcaead(0x251)](_0x594d19,_0x4ae1b3+(_0x15f0aa[_0xfcaead(0x981)]||0x0),_0x4d050b+(_0x15f0aa[_0xfcaead(0x840)]||0x0)),this[_0xfcaead(0x807)](_0x594d19,'hp',_0x408170+0x88*0x0+(_0x15f0aa[_0xfcaead(0x55d)]||0x0),_0x1b1c5a+(_0x15f0aa[_0xfcaead(0x305)]||0x0)),this[_0xfcaead(0x807)](_0x594d19,'mp',_0x408170+0x88*0x1+(_0x15f0aa[_0xfcaead(0x7c7)]||0x0),_0x1b1c5a+(_0x15f0aa[_0xfcaead(0x94e)]||0x0)),$dataSystem[_0xfcaead(0x7b9)]&&this[_0xfcaead(0x807)](_0x594d19,'tp',_0x408170+0x88*0x2+(_0x15f0aa['TpGaugeOffsetX']||0x0),_0x1b1c5a+(_0x15f0aa[_0xfcaead(0x288)]||0x0));},Window_BattleStatus[_0x5507dd(0x832)][_0x5507dd(0x359)]=function(_0xa4037){const _0x150e78=_0x5507dd;if(!$gameSystem[_0x150e78(0x577)]())return;VisuMZ[_0x150e78(0x8af)][_0x150e78(0x4f7)][_0x150e78(0x542)](this,_0xa4037);},Window_BattleStatus[_0x5507dd(0x832)]['drawItemStatusXPStyle']=function(_0x529d92){const _0x1e832a=_0x5507dd,_0x3c1337=VisuMZ['BattleCore'][_0x1e832a(0x32e)][_0x1e832a(0x7b7)],_0x544401=this[_0x1e832a(0x914)](_0x529d92),_0x14ffa4=this['itemRect'](_0x529d92),_0x138b0c=Math[_0x1e832a(0x95e)](_0x14ffa4['x']+(_0x14ffa4[_0x1e832a(0x4fa)]-0x80)/0x2),_0xe561ba=this[_0x1e832a(0x534)](_0x14ffa4);let _0xec5a77=_0x138b0c-ImageManager[_0x1e832a(0x934)]/0x2-0x4,_0x126997=_0xe561ba+ImageManager['iconHeight']/0x2;_0xec5a77-ImageManager[_0x1e832a(0x934)]/0x2<_0x14ffa4['x']&&(_0xec5a77=_0x138b0c+ImageManager[_0x1e832a(0x934)]/0x2-0x4,_0x126997=_0xe561ba-ImageManager['iconHeight']/0x2);const _0xe39ec9=_0x138b0c,_0x458c78=this[_0x1e832a(0x670)](_0x14ffa4);this[_0x1e832a(0x6db)](_0x544401,_0x138b0c+(_0x3c1337[_0x1e832a(0x91c)]||0x0),_0xe561ba+(_0x3c1337['TpbGaugeOffsetY']||0x0)),this['placeActorName'](_0x544401,_0x138b0c+(_0x3c1337[_0x1e832a(0x456)]||0x0),_0xe561ba+(_0x3c1337[_0x1e832a(0x221)]||0x0)),this[_0x1e832a(0x251)](_0x544401,_0xec5a77+(_0x3c1337[_0x1e832a(0x981)]||0x0),_0x126997+(_0x3c1337[_0x1e832a(0x840)]||0x0)),this[_0x1e832a(0x807)](_0x544401,'hp',_0xe39ec9+(_0x3c1337[_0x1e832a(0x55d)]||0x0),_0x458c78+(_0x3c1337[_0x1e832a(0x305)]||0x0)),this['placeGauge'](_0x544401,'mp',_0xe39ec9+(_0x3c1337[_0x1e832a(0x7c7)]||0x0),_0x458c78+this[_0x1e832a(0x364)]()+(_0x3c1337[_0x1e832a(0x94e)]||0x0)),$dataSystem[_0x1e832a(0x7b9)]&&this[_0x1e832a(0x807)](_0x544401,'tp',_0xe39ec9+(_0x3c1337[_0x1e832a(0x609)]||0x0),_0x458c78+this['gaugeLineHeight']()*0x2+(_0x3c1337[_0x1e832a(0x288)]||0x0));},Window_BattleStatus['prototype'][_0x5507dd(0xa1e)]=function(_0x1893a9){const _0x2f026e=_0x5507dd;if(!VisuMZ[_0x2f026e(0x8af)][_0x2f026e(0x32e)][_0x2f026e(0x7b7)][_0x2f026e(0x970)])return![];if(_0x1893a9[_0x2f026e(0xa14)]())return!![];return Imported[_0x2f026e(0x6f4)]&&_0x1893a9[_0x2f026e(0x6b5)]();},Game_Actor[_0x5507dd(0x832)][_0x5507dd(0x554)]=function(){const _0x5dcb4c=_0x5507dd;if(this[_0x5dcb4c(0x914)]()[_0x5dcb4c(0x6a3)][_0x5dcb4c(0x1f2)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x5dcb4c(0x914)]()[_0x5dcb4c(0x6a3)][_0x5dcb4c(0x1f2)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x5507dd(0x832)][_0x5507dd(0x3a2)]=function(){const _0x55fd3b=_0x5507dd;if(this[_0x55fd3b(0x914)]()[_0x55fd3b(0x6a3)][_0x55fd3b(0x1f2)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x55fd3b(0x914)]()[_0x55fd3b(0x6a3)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x5507dd(0x832)][_0x5507dd(0x375)]=function(_0x5cc958){const _0x35cdf1=_0x5507dd,_0x1ddf32=this['actor'](_0x5cc958);if(this[_0x35cdf1(0xa1e)](_0x1ddf32)){const _0x47f999=_0x35cdf1(0x2a7)[_0x35cdf1(0x5d0)](_0x1ddf32[_0x35cdf1(0x28c)]()),_0x4f6dad=this['createInnerPortrait'](_0x47f999,Sprite),_0x428e97=_0x1ddf32[_0x35cdf1(0x58b)]();_0x428e97!==''?_0x4f6dad[_0x35cdf1(0x257)]=ImageManager[_0x35cdf1(0x4a7)](_0x428e97):_0x4f6dad['bitmap']=ImageManager[_0x35cdf1(0x31c)];const _0x4b1eeb=this[_0x35cdf1(0x747)](_0x5cc958);_0x4f6dad['anchor']['x']=0.5,_0x4f6dad[_0x35cdf1(0x26b)]['y']=0x1;let _0x362ec0=Math[_0x35cdf1(0x95e)](_0x4b1eeb['x']+_0x4b1eeb[_0x35cdf1(0x4fa)]/0x2)+this[_0x35cdf1(0x52d)];_0x362ec0+=_0x1ddf32[_0x35cdf1(0x554)]();let _0xa39470=Math['round'](this[_0x35cdf1(0x80e)]);_0xa39470+=_0x1ddf32[_0x35cdf1(0x3a2)](),_0x4f6dad[_0x35cdf1(0x79a)](_0x362ec0,_0xa39470);const _0x400bfd=VisuMZ[_0x35cdf1(0x8af)][_0x35cdf1(0x32e)][_0x35cdf1(0x7b7)][_0x35cdf1(0x507)];_0x4f6dad[_0x35cdf1(0x540)]['x']=_0x400bfd,_0x4f6dad[_0x35cdf1(0x540)]['y']=_0x400bfd,_0x4f6dad[_0x35cdf1(0x59e)]();}else{const _0x2dc88d=this['faceRect'](_0x5cc958);this['drawActorFace'](_0x1ddf32,_0x2dc88d['x'],_0x2dc88d['y'],_0x2dc88d['width'],_0x2dc88d[_0x35cdf1(0x80e)]);}},Window_BattleStatus[_0x5507dd(0x832)][_0x5507dd(0x326)]=function(_0x3a14ff,_0x56d937){const _0x31e539=_0x5507dd,_0x217e5f=this[_0x31e539(0x2d5)];if(_0x217e5f[_0x3a14ff])return _0x217e5f[_0x3a14ff];else{const _0xb1af91=new _0x56d937();return _0x217e5f[_0x3a14ff]=_0xb1af91,this[_0x31e539(0x777)](_0xb1af91),this['addChildToBack'](this['_cursorArea']),_0xb1af91;}},Window_BattleStatus[_0x5507dd(0x832)]['_createClientArea']=function(){const _0x18a67c=_0x5507dd;this[_0x18a67c(0xa12)](),this[_0x18a67c(0x582)](),Window_StatusBase[_0x18a67c(0x832)][_0x18a67c(0x279)][_0x18a67c(0x542)](this),this['_createDamageContainer']();},Window_BattleStatus[_0x5507dd(0x832)]['_createCursorArea']=function(){const _0xb44422=_0x5507dd;this[_0xb44422(0x443)]=new Sprite(),this[_0xb44422(0x443)][_0xb44422(0x524)]=[new PIXI['filters']['AlphaFilter']()],this[_0xb44422(0x443)]['filterArea']=new Rectangle(),this[_0xb44422(0x443)][_0xb44422(0x79a)](this[_0xb44422(0x3a5)],this['_padding']),this[_0xb44422(0x83d)](this[_0xb44422(0x443)]);},Window_BattleStatus[_0x5507dd(0x832)]['_createEffectsContainer']=function(){const _0x298f76=_0x5507dd;this[_0x298f76(0x9a6)]=new Sprite(),this[_0x298f76(0x83d)](this[_0x298f76(0x9a6)]);},Window_BattleStatus[_0x5507dd(0x832)]['updateEffectsContainer']=function(){const _0x1efe9d=_0x5507dd;this[_0x1efe9d(0x9a6)]&&this[_0x1efe9d(0x83d)](this['_effectsContainer']);},Window_BattleStatus[_0x5507dd(0x832)][_0x5507dd(0x402)]=function(){const _0x1cd4a8=_0x5507dd;this['_damageContainer']=new Sprite(),this[_0x1cd4a8(0x83d)](this[_0x1cd4a8(0x381)]);},Window_BattleStatus['prototype']['_createCursorSprite']=function(){const _0x2062c5=_0x5507dd;this[_0x2062c5(0x413)]=new Sprite();for(let _0xe718d8=0x0;_0xe718d8<0x9;_0xe718d8++){this[_0x2062c5(0x413)]['addChild'](new Sprite());}this[_0x2062c5(0x443)][_0x2062c5(0x83d)](this['_cursorSprite']);},Window_BattleStatus[_0x5507dd(0x832)][_0x5507dd(0x9ab)]=function(){const _0x5ca9bf=_0x5507dd;Window_StatusBase['prototype'][_0x5ca9bf(0x9ab)][_0x5ca9bf(0x542)](this),this[_0x5ca9bf(0x3e1)]();},Window_BattleStatus[_0x5507dd(0x832)][_0x5507dd(0x3e1)]=function(){const _0x14a8a2=_0x5507dd,_0x2ef85c=this['_padding'];this[_0x14a8a2(0x443)][_0x14a8a2(0x79a)](_0x2ef85c,_0x2ef85c),this[_0x14a8a2(0x443)]['x']=_0x2ef85c-this[_0x14a8a2(0x451)]['x'],this['_cursorArea']['y']=_0x2ef85c-this['origin']['y'],this[_0x14a8a2(0x62c)]>0x0&&this[_0x14a8a2(0x654)]>0x0?this[_0x14a8a2(0x443)][_0x14a8a2(0x2ac)]=this[_0x14a8a2(0x2b9)]():this[_0x14a8a2(0x443)]['visible']=![];},Window_BattleStatus[_0x5507dd(0x832)]['_updateFilterArea']=function(){const _0x5020b5=_0x5507dd;Window_StatusBase[_0x5020b5(0x832)][_0x5020b5(0x748)][_0x5020b5(0x542)](this),this[_0x5020b5(0x7fe)]();},Window_BattleStatus[_0x5507dd(0x832)][_0x5507dd(0x7fe)]=function(){const _0x5b0c61=_0x5507dd,_0x2734ea=this[_0x5b0c61(0x443)][_0x5b0c61(0x990)][_0x5b0c61(0x9b3)](new Point(0x0,0x0)),_0x3c69a8=this['_cursorArea'][_0x5b0c61(0x2c1)];_0x3c69a8['x']=_0x2734ea['x']+this['origin']['x'],_0x3c69a8['y']=_0x2734ea['y']+this['origin']['y'],_0x3c69a8[_0x5b0c61(0x4fa)]=this[_0x5b0c61(0x62c)],_0x3c69a8[_0x5b0c61(0x80e)]=this['innerHeight'];},Window_BattleStatus[_0x5507dd(0x832)]['refreshActorPortrait']=function(_0x3141ea){const _0x33b61f=_0x5507dd;if(this[_0x33b61f(0x475)]()!==_0x33b61f(0x8ac))return;this['drawItemImagePortraitStyle'](_0x3141ea[_0x33b61f(0x847)]());},Window_BattleStatus['prototype'][_0x5507dd(0x889)]=function(_0x2c1bb6,_0x2d7f6e){const _0x2e0e22=_0x5507dd;if(!this[_0x2e0e22(0x381)])return;if(!_0x2c1bb6)return;if(!_0x2d7f6e)return;const _0x2d290b=this[_0x2e0e22(0x747)](_0x2d7f6e[_0x2e0e22(0x847)]());_0x2d290b['x']+=_0x2d290b['width']/0x2+this[_0x2e0e22(0x52d)],_0x2c1bb6['x']=_0x2d290b['x'],_0x2c1bb6['y']=_0x2d290b['y'],this[_0x2e0e22(0x381)][_0x2e0e22(0x83d)](_0x2c1bb6);},Window_BattleStatus[_0x5507dd(0x832)][_0x5507dd(0x734)]=function(_0x17c459){const _0xfc8d63=_0x5507dd;if(!this[_0xfc8d63(0x381)])return;if(!_0x17c459)return;this[_0xfc8d63(0x381)][_0xfc8d63(0xa1f)](_0x17c459);},Window_BattleStatus['prototype'][_0x5507dd(0x433)]=function(){const _0x1191dc=_0x5507dd;if(!this[_0x1191dc(0x55a)]())return;if(!this[_0x1191dc(0x80a)])this['createBorderStylePortraitSprite']();this[_0x1191dc(0x277)](),this['updateBorderSprite']();},Window_BattleStatus[_0x5507dd(0x832)][_0x5507dd(0x55a)]=function(){const _0x4cb690=_0x5507dd;if(this[_0x4cb690(0x2fa)]!==Window_BattleStatus)return![];if(!SceneManager[_0x4cb690(0x4dc)]())return![];return VisuMZ[_0x4cb690(0x8af)]['Settings']['BattleLayout'][_0x4cb690(0x9b2)];},Window_BattleStatus[_0x5507dd(0x832)]['createBorderStylePortraitSprite']=function(){const _0x28cc3f=_0x5507dd;this[_0x28cc3f(0x80a)]=new Sprite();const _0x548e60=SceneManager['_scene'],_0x3fc027=_0x548e60[_0x28cc3f(0x937)][_0x28cc3f(0x33f)](_0x548e60[_0x28cc3f(0x4a8)]);_0x548e60[_0x28cc3f(0x6a7)](this[_0x28cc3f(0x80a)],_0x3fc027),this[_0x28cc3f(0x80a)]['anchor']['x']=0.5,this[_0x28cc3f(0x80a)][_0x28cc3f(0x26b)]['y']=0x1;const _0x3c7737=VisuMZ[_0x28cc3f(0x8af)]['Settings']['BattleLayout'][_0x28cc3f(0x89b)];this[_0x28cc3f(0x80a)][_0x28cc3f(0x540)]['x']=_0x3c7737,this[_0x28cc3f(0x80a)][_0x28cc3f(0x540)]['y']=_0x3c7737,this[_0x28cc3f(0x80a)]['y']=this['y']+this[_0x28cc3f(0x80e)],this[_0x28cc3f(0x27a)]=0x0;},Window_BattleStatus[_0x5507dd(0x832)][_0x5507dd(0x277)]=function(){const _0x2bf44a=_0x5507dd;this[_0x2bf44a(0x80a)][_0x2bf44a(0x2ac)]=BattleManager['isInputting']();const _0x461c90=BattleManager[_0x2bf44a(0x914)]();if(_0x461c90===this[_0x2bf44a(0x80a)][_0x2bf44a(0x914)])return;this[_0x2bf44a(0x80a)][_0x2bf44a(0x914)]=_0x461c90||this[_0x2bf44a(0x80a)][_0x2bf44a(0x914)];if(!_0x461c90)return;else{if(_0x461c90[_0x2bf44a(0x58b)]()===''){this['_borderPortraitSprite'][_0x2bf44a(0x257)]=ImageManager['_emptyBitmap'];return;}else{const _0x18773d=ImageManager[_0x2bf44a(0x4a7)](_0x461c90['getBattlePortraitFilename']());_0x18773d[_0x2bf44a(0x292)](this[_0x2bf44a(0xa33)][_0x2bf44a(0x9f4)](this,_0x18773d));}}},Window_BattleStatus[_0x5507dd(0x832)]['processBorderActor']=function(_0x4d9de6){const _0xb2b58a=_0x5507dd;this[_0xb2b58a(0x27a)]=0x14,this[_0xb2b58a(0x80a)][_0xb2b58a(0x257)]=_0x4d9de6;SceneManager[_0xb2b58a(0x590)][_0xb2b58a(0x89c)]()?(this['_borderPortraitSprite']['x']=0x0,this[_0xb2b58a(0x50a)]=Math[_0xb2b58a(0x199)](_0x4d9de6[_0xb2b58a(0x4fa)]/0x2)):(this['_borderPortraitSprite']['x']=this[_0xb2b58a(0x4fa)],this[_0xb2b58a(0x50a)]=this[_0xb2b58a(0x4fa)]*0x3/0x4);this[_0xb2b58a(0x80a)]['opacity']=0x0,this[_0xb2b58a(0x80a)]['y']=this['y']+this['height'];const _0x5bf380=BattleManager[_0xb2b58a(0x914)]();_0x5bf380&&(this[_0xb2b58a(0x50a)]+=_0x5bf380[_0xb2b58a(0x554)](),this[_0xb2b58a(0x80a)]['y']+=_0x5bf380[_0xb2b58a(0x3a2)]());},Window_BattleStatus[_0x5507dd(0x832)][_0x5507dd(0x56f)]=function(){const _0xc1701d=_0x5507dd;if(this[_0xc1701d(0x27a)]>0x0){const _0x3c90bc=this['_borderPortraitDuration'],_0xdf258f=this[_0xc1701d(0x80a)];_0xdf258f['x']=(_0xdf258f['x']*(_0x3c90bc-0x1)+this[_0xc1701d(0x50a)])/_0x3c90bc,_0xdf258f[_0xc1701d(0x411)]=(_0xdf258f[_0xc1701d(0x411)]*(_0x3c90bc-0x1)+0xff)/_0x3c90bc,this['_borderPortraitDuration']--;}},Window_BattleStatus[_0x5507dd(0x832)]['updateEffectContainers']=function(){const _0x4b34b8=_0x5507dd;return;this[_0x4b34b8(0x9a6)]&&(this[_0x4b34b8(0x9a6)]['x']=this['x'],this['_effectsContainer']['y']=this['y']),this[_0x4b34b8(0x381)]&&(this[_0x4b34b8(0x381)]['x']=this['x'],this['_damageContainer']['y']=this['y']);},Window_BattleStatus[_0x5507dd(0x832)][_0x5507dd(0x733)]=function(){const _0x3a1464=_0x5507dd,_0x44526d=VisuMZ[_0x3a1464(0x8af)]['Settings'][_0x3a1464(0x7b7)];if(_0x44526d[_0x3a1464(0x616)]){const _0x32fca9=new Sprite();_0x32fca9['bitmap']=ImageManager[_0x3a1464(0x6eb)](_0x44526d[_0x3a1464(0x616)]),_0x32fca9['x']=_0x44526d[_0x3a1464(0x8b4)]||0x0,_0x32fca9['y']=_0x44526d[_0x3a1464(0x20e)]||0x0,this[_0x3a1464(0x777)](_0x32fca9),this[_0x3a1464(0x921)]=_0x32fca9;}if(_0x44526d[_0x3a1464(0x8a1)]){const _0x2e5c79=new Sprite();_0x2e5c79['bitmap']=ImageManager[_0x3a1464(0x6eb)](_0x44526d[_0x3a1464(0x8a1)]),_0x2e5c79['x']=_0x44526d[_0x3a1464(0x5c7)]||0x0,_0x2e5c79['y']=_0x44526d[_0x3a1464(0x8f9)]||0x0,this[_0x3a1464(0x83d)](_0x2e5c79),this[_0x3a1464(0x839)]=_0x2e5c79;}},Window_BattleStatus[_0x5507dd(0x832)]['updateAttachmentSprites']=function(){const _0x77c473=_0x5507dd;this[_0x77c473(0x839)]&&this[_0x77c473(0x83d)](this[_0x77c473(0x839)]),this['_backAttachmentSprite']&&this[_0x77c473(0x777)](this[_0x77c473(0x921)]);},Window_BattleActor[_0x5507dd(0x832)]['isOkEnabled']=function(){const _0x4d121f=_0x5507dd;return Window_BattleStatus[_0x4d121f(0x832)][_0x4d121f(0x4fc)][_0x4d121f(0x542)](this)&&this['isActionSelectionValid']();},Window_BattleActor[_0x5507dd(0x832)]['isActionSelectionValid']=function(){const _0x2af28c=_0x5507dd,_0x4e5ba3=BattleManager[_0x2af28c(0x40d)](),_0x4702f1=this[_0x2af28c(0x914)](this[_0x2af28c(0x847)]());if(!_0x4e5ba3)return!![];if(!_0x4e5ba3['item']())return!![];const _0x4a94c6=_0x4e5ba3[_0x2af28c(0x92a)]()[_0x2af28c(0x6a3)];if(_0x4a94c6[_0x2af28c(0x1f2)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x4702f1===BattleManager[_0x2af28c(0x914)]())return![];}return!![];},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x436)]=Window_BattleEnemy['prototype']['initialize'],Window_BattleEnemy[_0x5507dd(0x832)]['initialize']=function(_0x212860){const _0x57388a=_0x5507dd;this[_0x57388a(0x3c5)]=null,VisuMZ[_0x57388a(0x8af)][_0x57388a(0x436)][_0x57388a(0x542)](this,_0x212860);},Window_BattleEnemy[_0x5507dd(0x832)]['maxCols']=function(){return this['maxItems']();},VisuMZ[_0x5507dd(0x8af)]['Window_BattleEnemy_show']=Window_BattleEnemy['prototype'][_0x5507dd(0x59e)],Window_BattleEnemy['prototype'][_0x5507dd(0x59e)]=function(){const _0x37950a=_0x5507dd;VisuMZ[_0x37950a(0x8af)][_0x37950a(0x814)][_0x37950a(0x542)](this),this['y']=Graphics['height']*0xa;},Window_BattleEnemy[_0x5507dd(0x832)][_0x5507dd(0x91d)]=function(){const _0x2fc2d5=_0x5507dd;return $gameTroop[_0x2fc2d5(0x682)]()[_0x2fc2d5(0x6f6)](0x0);},Window_BattleEnemy[_0x5507dd(0x832)][_0x5507dd(0x62f)]=function(){const _0x19bb3c=_0x5507dd;this[_0x19bb3c(0x3f9)]=this['validTargets'](),this['sortEnemies'](),Window_Selectable['prototype'][_0x19bb3c(0x62f)]['call'](this);},Window_BattleEnemy['prototype']['sortEnemies']=function(){const _0x4fe335=_0x5507dd;this['_enemies']['sort']((_0x25e363,_0x4edc7c)=>{const _0x91e0fa=_0x38a5;return _0x25e363[_0x91e0fa(0x9f8)]()[_0x91e0fa(0x67b)]===_0x4edc7c[_0x91e0fa(0x9f8)]()[_0x91e0fa(0x67b)]?_0x25e363['battler']()[_0x91e0fa(0x6c3)]-_0x4edc7c[_0x91e0fa(0x9f8)]()['_baseY']:_0x25e363[_0x91e0fa(0x9f8)]()['_baseX']-_0x4edc7c[_0x91e0fa(0x9f8)]()[_0x91e0fa(0x67b)];}),SceneManager[_0x4fe335(0x5e2)]()&&this[_0x4fe335(0x3f9)][_0x4fe335(0x952)]();},Window_BattleEnemy['prototype'][_0x5507dd(0x4d1)]=function(){const _0x398fd2=_0x5507dd,_0x46372b=VisuMZ['BattleCore'][_0x398fd2(0x32e)][_0x398fd2(0x77b)];_0x46372b['LastSelected']?this[_0x398fd2(0x223)]():this[_0x398fd2(0x217)]();},Window_BattleEnemy[_0x5507dd(0x832)]['autoSelectLastSelected']=function(){const _0x48b14e=_0x5507dd;if(this[_0x48b14e(0x3c5)]&&this[_0x48b14e(0x3f9)][_0x48b14e(0x351)](this[_0x48b14e(0x3c5)])){const _0x2f347b=this[_0x48b14e(0x3f9)]['indexOf'](this['_lastEnemy']);this[_0x48b14e(0x9e9)](_0x2f347b);}else this[_0x48b14e(0x217)]();},Window_BattleEnemy['prototype'][_0x5507dd(0x217)]=function(){const _0x305831=_0x5507dd,_0x5975a8=VisuMZ['BattleCore']['Settings'][_0x305831(0x77b)];let _0x286139=![];$gameSystem[_0x305831(0x577)]()?_0x286139=_0x5975a8[_0x305831(0x1e3)]:_0x286139=_0x5975a8[_0x305831(0x3e3)],this['forceSelect'](_0x286139?this[_0x305831(0x817)]()-0x1:0x0);},Window_BattleEnemy[_0x5507dd(0x832)]['callOkHandler']=function(){const _0x2db632=_0x5507dd;Window_Selectable['prototype'][_0x2db632(0x420)][_0x2db632(0x542)](this),this[_0x2db632(0x3c5)]=this[_0x2db632(0x7f3)]();},Window_BattleItem[_0x5507dd(0x832)][_0x5507dd(0x351)]=function(_0x4d8d3f){const _0x2b3082=_0x5507dd;if(!_0x4d8d3f)return![];return _0x4d8d3f[_0x2b3082(0x74d)]===0x0||_0x4d8d3f[_0x2b3082(0x74d)]===0x1;};function Window_AutoBattleCancel(){const _0x3845a4=_0x5507dd;this[_0x3845a4(0x2aa)](...arguments);}Window_AutoBattleCancel[_0x5507dd(0x832)]=Object['create'](Window_Base[_0x5507dd(0x832)]),Window_AutoBattleCancel[_0x5507dd(0x832)][_0x5507dd(0x2fa)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x5507dd(0x832)][_0x5507dd(0x2aa)]=function(_0x406ffa){const _0x3a0e12=_0x5507dd;Window_Base[_0x3a0e12(0x832)][_0x3a0e12(0x2aa)][_0x3a0e12(0x542)](this,_0x406ffa),this[_0x3a0e12(0x504)](this[_0x3a0e12(0x5aa)]()),this[_0x3a0e12(0x62f)]();},Window_AutoBattleCancel[_0x5507dd(0x832)][_0x5507dd(0x5aa)]=function(){const _0x333fa8=_0x5507dd;return VisuMZ['BattleCore'][_0x333fa8(0x32e)][_0x333fa8(0xa24)]['AutoBattleBgType'];},Window_AutoBattleCancel['prototype'][_0x5507dd(0x62f)]=function(){const _0x49fcfa=_0x5507dd;this[_0x49fcfa(0x730)][_0x49fcfa(0x9dc)]();const _0x102b64=VisuMZ['BattleCore'][_0x49fcfa(0x32e)][_0x49fcfa(0xa24)][_0x49fcfa(0x549)],_0x29a1a7=_0x102b64[_0x49fcfa(0x5d0)](this[_0x49fcfa(0x54c)](),this[_0x49fcfa(0x2a0)]()),_0x1d5098=this[_0x49fcfa(0x61c)](_0x29a1a7)[_0x49fcfa(0x4fa)],_0x34805f=Math['floor']((this[_0x49fcfa(0x62c)]-_0x1d5098)/0x2);this[_0x49fcfa(0x6a8)](_0x29a1a7,_0x34805f,0x0,_0x1d5098);},Window_AutoBattleCancel[_0x5507dd(0x832)]['okButtonText']=function(){const _0x44dfb6=_0x5507dd;return Imported[_0x44dfb6(0x72e)]?TextManager[_0x44dfb6(0x7d0)]('ok'):VisuMZ[_0x44dfb6(0x8af)]['Settings'][_0x44dfb6(0xa24)][_0x44dfb6(0x4f9)];},Window_AutoBattleCancel[_0x5507dd(0x832)]['cancelButtonText']=function(){const _0x3369b7=_0x5507dd;return Imported[_0x3369b7(0x72e)]?TextManager['getInputButtonString'](_0x3369b7(0x7cb)):VisuMZ[_0x3369b7(0x8af)][_0x3369b7(0x32e)][_0x3369b7(0xa24)][_0x3369b7(0x998)];},Window_AutoBattleCancel[_0x5507dd(0x832)]['update']=function(){const _0x590875=_0x5507dd;Window_Base[_0x590875(0x832)][_0x590875(0x3ce)]['call'](this),this[_0x590875(0x2eb)](),this[_0x590875(0x798)]();},Window_AutoBattleCancel[_0x5507dd(0x832)][_0x5507dd(0x2eb)]=function(){const _0x545519=_0x5507dd;this[_0x545519(0x2ac)]=BattleManager[_0x545519(0x805)];},Window_AutoBattleCancel['prototype']['updateCancel']=function(){const _0x52e3fa=_0x5507dd;if(!BattleManager[_0x52e3fa(0x805)])return;(Input['isTriggered']('ok')||Input[_0x52e3fa(0x45d)](_0x52e3fa(0x7cb))||TouchInput['isClicked']()||TouchInput[_0x52e3fa(0x6ea)]())&&(SoundManager[_0x52e3fa(0x5f8)](),BattleManager['_autoBattle']=![],Input[_0x52e3fa(0x9dc)](),TouchInput[_0x52e3fa(0x9dc)]());};function Window_EnemyName(){const _0x27694d=_0x5507dd;this[_0x27694d(0x2aa)](...arguments);}Window_EnemyName[_0x5507dd(0x832)]=Object['create'](Window_StatusBase[_0x5507dd(0x832)]),Window_EnemyName[_0x5507dd(0x832)]['constructor']=Window_EnemyName,Window_EnemyName['prototype']['initialize']=function(_0xaf5c4e){const _0x48f29d=_0x5507dd;this[_0x48f29d(0x74c)]=_0xaf5c4e,this['_text']='';const _0x80cf17=new Rectangle(0x0,0x0,Graphics[_0x48f29d(0x8e0)],this[_0x48f29d(0x89d)]()*0x4);Window_StatusBase[_0x48f29d(0x832)][_0x48f29d(0x2aa)]['call'](this,_0x80cf17),this[_0x48f29d(0x504)](0x2),this[_0x48f29d(0x7c3)]=0x0;},Window_EnemyName[_0x5507dd(0x832)][_0x5507dd(0x4c7)]=function(){const _0x80cc51=_0x5507dd;this[_0x80cc51(0x52d)]=0x0;},Window_EnemyName['prototype']['enemy']=function(){const _0x3d58f5=_0x5507dd;return $gameTroop[_0x3d58f5(0x29b)]()[this[_0x3d58f5(0x74c)]];},Window_EnemyName[_0x5507dd(0x832)]['update']=function(){const _0x10c197=_0x5507dd;Window_StatusBase[_0x10c197(0x832)][_0x10c197(0x3ce)][_0x10c197(0x542)](this),this['enemy']()&&this['enemy']()[_0x10c197(0x55f)]()!==this['_text']&&(this['_text']=this[_0x10c197(0x7f3)]()['name'](),this[_0x10c197(0x62f)]()),this[_0x10c197(0x641)](),this[_0x10c197(0x558)]();},Window_EnemyName[_0x5507dd(0x832)][_0x5507dd(0x641)]=function(){const _0x57e2da=_0x5507dd;if(!this['enemy']()){if(this['contentsOpacity']>0x0)this[_0x57e2da(0x7c3)]-=0x10;}else{if(this['enemy']()[_0x57e2da(0x45e)]()){if(this['contentsOpacity']>0x0)this[_0x57e2da(0x7c3)]-=0x10;}else{if(SceneManager[_0x57e2da(0x590)][_0x57e2da(0x728)]&&SceneManager[_0x57e2da(0x590)][_0x57e2da(0x728)]['active']&&SceneManager[_0x57e2da(0x590)][_0x57e2da(0x728)][_0x57e2da(0x3f9)]['includes'](this[_0x57e2da(0x7f3)]())){if(this['contentsOpacity']<0xff)this[_0x57e2da(0x7c3)]+=0x10;}else this[_0x57e2da(0x7c3)]>0x0&&(this[_0x57e2da(0x7c3)]-=0x10);}}},Window_EnemyName[_0x5507dd(0x832)][_0x5507dd(0x558)]=function(){const _0x417b59=_0x5507dd;if(!this['enemy']())return;SceneManager[_0x417b59(0x5e2)]()?this['x']=Graphics['boxWidth']-this[_0x417b59(0x7f3)]()[_0x417b59(0x9f8)]()[_0x417b59(0x67b)]:this['x']=this['enemy']()[_0x417b59(0x9f8)]()['_baseX'];this['x']-=Math[_0x417b59(0x95e)](this['width']/0x2),this['y']=this[_0x417b59(0x7f3)]()[_0x417b59(0x9f8)]()[_0x417b59(0x6c3)]-Math['round'](this[_0x417b59(0x89d)]()*1.5);const _0x4e7e5d=VisuMZ['BattleCore'][_0x417b59(0x32e)][_0x417b59(0x77b)];this['x']+=_0x4e7e5d[_0x417b59(0x456)]||0x0,this['y']+=_0x4e7e5d['NameOffsetY']||0x0;},Window_EnemyName[_0x5507dd(0x832)][_0x5507dd(0x919)]=function(){const _0x1ef4f1=_0x5507dd;Window_Base[_0x1ef4f1(0x832)][_0x1ef4f1(0x919)][_0x1ef4f1(0x542)](this),this[_0x1ef4f1(0x730)][_0x1ef4f1(0x93c)]=VisuMZ[_0x1ef4f1(0x8af)][_0x1ef4f1(0x32e)][_0x1ef4f1(0x77b)]['NameFontSize'];},Window_EnemyName[_0x5507dd(0x832)][_0x5507dd(0x62f)]=function(){const _0x5025cb=_0x5507dd;Window_StatusBase['prototype'][_0x5025cb(0x62f)][_0x5025cb(0x542)](this),this[_0x5025cb(0x730)][_0x5025cb(0x9dc)]();if(!this[_0x5025cb(0x7f3)]())return;this[_0x5025cb(0x690)]();},Window_EnemyName['prototype']['drawEnemyName']=function(){const _0x38dac1=_0x5507dd;this[_0x38dac1(0x209)]=this[_0x38dac1(0x7f3)]()[_0x38dac1(0x55f)]();const _0x576045=this[_0x38dac1(0x61c)](this['_text'])['width'],_0x26bd14=Math[_0x38dac1(0x95e)]((this[_0x38dac1(0x62c)]-_0x576045)/0x2);this['drawTextEx'](this['_text'],_0x26bd14,0x0,_0x576045+0x8);},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x238)]=function(){const _0x21914f=_0x5507dd;return VisuMZ[_0x21914f(0x8af)][_0x21914f(0x32e)][_0x21914f(0x5de)][_0x21914f(0x7f8)];},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x4e0)]=function(){const _0x4dcbd3=_0x5507dd;return VisuMZ[_0x4dcbd3(0x8af)]['Settings'][_0x4dcbd3(0x5de)][_0x4dcbd3(0x722)];},Window_BattleLog[_0x5507dd(0x832)]['backColor']=function(){const _0x15e074=_0x5507dd;return VisuMZ[_0x15e074(0x8af)][_0x15e074(0x32e)][_0x15e074(0x5de)]['BackColor'];},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x2d7)]=function(){return![];},Window_BattleLog['prototype'][_0x5507dd(0x2cc)]=function(_0x3884d9,_0x4bf5ab){const _0x460a61=_0x5507dd;this[_0x460a61(0x696)]('actionSplicePoint'),BattleManager[_0x460a61(0x9cd)](_0x3884d9,_0x4bf5ab),this[_0x460a61(0x34e)]();},Window_BattleLog[_0x5507dd(0x832)]['actionSplicePoint']=function(){const _0x4f1625=_0x5507dd;this[_0x4f1625(0x34e)]();},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x47f)]=function(_0x4bc9f4){const _0x140ded=_0x5507dd,_0x45df0e=Array[_0x140ded(0x832)][_0x140ded(0x6f6)]['call'](arguments,0x1),_0x2e9a81={'name':_0x4bc9f4,'params':_0x45df0e},_0x3fbf03=this[_0x140ded(0x1c7)]['map'](_0x482476=>_0x482476[_0x140ded(0x55f)])[_0x140ded(0x33f)](_0x140ded(0x9c9));_0x3fbf03>=0x0?this[_0x140ded(0x1c7)]['splice'](_0x3fbf03,0x0,_0x2e9a81):this['_methods'][_0x140ded(0x47f)](_0x2e9a81);},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x696)]=function(_0xe191dc){const _0x4f03f5=_0x5507dd,_0x25f918=Array['prototype']['slice'][_0x4f03f5(0x542)](arguments,0x1);this[_0x4f03f5(0x1c7)][_0x4f03f5(0x696)]({'name':_0xe191dc,'params':_0x25f918});},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x701)]=function(){const _0x59495b=_0x5507dd;if(!$gameTemp[_0x59495b(0x9d0)]())return;console['log'](this[_0x59495b(0x1c7)][_0x59495b(0x4d2)](_0x57b190=>_0x57b190[_0x59495b(0x55f)])[_0x59495b(0x90a)]('\x0a'));},VisuMZ['BattleCore'][_0x5507dd(0x63b)]=Window_BattleLog['prototype'][_0x5507dd(0x62f)],Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x62f)]=function(){const _0x2d0135=_0x5507dd;this[_0x2d0135(0x53b)]=!![];},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x939)]=Window_BattleLog['prototype']['update'],Window_BattleLog[_0x5507dd(0x832)]['update']=function(){const _0x316a49=_0x5507dd;VisuMZ[_0x316a49(0x8af)][_0x316a49(0x939)][_0x316a49(0x542)](this);if(this[_0x316a49(0x53b)])this[_0x316a49(0x5bb)]();},Window_BattleLog[_0x5507dd(0x832)]['processRefresh']=function(){const _0x4ccc4f=_0x5507dd;this[_0x4ccc4f(0x53b)]=![],VisuMZ[_0x4ccc4f(0x8af)][_0x4ccc4f(0x63b)][_0x4ccc4f(0x542)](this);},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x3c9)]=function(_0x4509c5){const _0x4cdc60=_0x5507dd;let _0x28e79a=VisuMZ[_0x4cdc60(0x8af)][_0x4cdc60(0x32e)]['BattleLog']['TextAlign']['toLowerCase']()['trim'](),_0x4a8ca2=this[_0x4cdc60(0x73e)][_0x4509c5];if(_0x4a8ca2['match'](/<LEFT>/i))_0x28e79a=_0x4cdc60(0x457);else{if(_0x4a8ca2[_0x4cdc60(0x1f2)](/<CENTER>/i))_0x28e79a='center';else _0x4a8ca2[_0x4cdc60(0x1f2)](/<RIGHT>/i)&&(_0x28e79a=_0x4cdc60(0x449));}_0x4a8ca2=_0x4a8ca2[_0x4cdc60(0x684)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x4a8ca2=_0x4a8ca2[_0x4cdc60(0x684)](/\\I\[0\]/gi,'');const _0x3b5084=this['lineRect'](_0x4509c5);this[_0x4cdc60(0x730)][_0x4cdc60(0x3d2)](_0x3b5084['x'],_0x3b5084['y'],_0x3b5084['width'],_0x3b5084[_0x4cdc60(0x80e)]);const _0x31434d=this[_0x4cdc60(0x61c)](_0x4a8ca2)['width'];let _0x3f1d34=_0x3b5084['x'];if(_0x28e79a===_0x4cdc60(0x9ba))_0x3f1d34+=(_0x3b5084[_0x4cdc60(0x4fa)]-_0x31434d)/0x2;else _0x28e79a===_0x4cdc60(0x449)&&(_0x3f1d34+=_0x3b5084['width']-_0x31434d);this[_0x4cdc60(0x6a8)](_0x4a8ca2,_0x3f1d34,_0x3b5084['y'],_0x31434d+0x8);},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x8c3)]=function(_0x4d2469){const _0x1e7772=_0x5507dd;this[_0x1e7772(0x73e)][_0x1e7772(0x47f)](_0x4d2469),this['refresh'](),this['callNextMethod']();},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x5cf)]=function(){const _0x1fbc89=_0x5507dd;let _0x196262=![];switch(this[_0x1fbc89(0x4e9)]){case _0x1fbc89(0x900):_0x196262=this[_0x1fbc89(0x3c4)][_0x1fbc89(0x1de)]();break;case _0x1fbc89(0x383):_0x196262=this[_0x1fbc89(0x3c4)][_0x1fbc89(0x67f)]();break;case'animation':_0x196262=this[_0x1fbc89(0x3c4)]['isAnimationPlaying']();break;case'float':_0x196262=this['_spriteset']['isAnyoneFloating']();break;case _0x1fbc89(0x8f6):_0x196262=this['_spriteset']['isAnyoneJumping']();break;case'opacity':_0x196262=this[_0x1fbc89(0x3c4)][_0x1fbc89(0x3a8)]();break;}return!_0x196262&&(this[_0x1fbc89(0x4e9)]=''),_0x196262;},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x46c)]=function(){const _0x452376=_0x5507dd;this['setWaitMode'](_0x452376(0x5c6));},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x52e)]=function(){const _0x23a82f=_0x5507dd;this[_0x23a82f(0x7ff)]('float');},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x8ea)]=function(){const _0x5abe36=_0x5507dd;this[_0x5abe36(0x7ff)]('jump');},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x63a)]=function(){const _0x3c491a=_0x5507dd;this[_0x3c491a(0x7ff)](_0x3c491a(0x411));},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x700)]=function(){const _0x256e6f=_0x5507dd,_0x34ba62=VisuMZ['BattleCore'][_0x256e6f(0x32e)][_0x256e6f(0x5de)];if(!_0x34ba62[_0x256e6f(0x2ad)])return;this['push'](_0x256e6f(0x8c3),_0x34ba62[_0x256e6f(0x418)][_0x256e6f(0x5d0)]($gameTroop['turnCount']())),this['push'](_0x256e6f(0x388),_0x34ba62['StartTurnWait']),this[_0x256e6f(0x47f)](_0x256e6f(0x9dc));},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x243)]=function(_0x1ad2f2,_0x2eb186,_0x2cba2d){const _0x69f031=_0x5507dd;this['isCustomActionSequence'](_0x2eb186)?BattleManager['prepareCustomActionSequence']():this[_0x69f031(0x25e)](_0x1ad2f2,_0x2eb186,_0x2cba2d);},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x333)]=function(_0x5ec254){const _0x2b1ce6=_0x5507dd;if(!SceneManager[_0x2b1ce6(0x4dc)]())return![];if(!_0x5ec254)return![];if(!_0x5ec254[_0x2b1ce6(0x92a)]())return![];if(_0x5ec254['item']()[_0x2b1ce6(0x6a3)]['match'](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x2b1ce6(0x3f2)](_0x5ec254['item']()))return!![];return![];},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x25e)]=function(_0x1aac18,_0x7f490e,_0x5e2c65){const _0x4e446a=_0x7f490e['item']();this['setupActionSet'](_0x1aac18,_0x7f490e,_0x5e2c65),this['createEffectActionSet'](_0x1aac18,_0x7f490e,_0x5e2c65),this['finishActionSet'](_0x1aac18,_0x7f490e,_0x5e2c65);},Window_BattleLog['prototype'][_0x5507dd(0x407)]=function(_0x116100,_0x3a63cf){const _0x1600cb=_0x5507dd,_0x4b3cca=VisuMZ[_0x1600cb(0x8af)][_0x1600cb(0x32e)][_0x1600cb(0x5de)];_0x4b3cca['ActionCenteredName']&&this[_0x1600cb(0x47f)]('addText',_0x1600cb(0x560)[_0x1600cb(0x5d0)](DataManager[_0x1600cb(0x51a)](_0x3a63cf)));if(DataManager['isSkill'](_0x3a63cf)){if(_0x4b3cca[_0x1600cb(0x35f)])this[_0x1600cb(0x659)](_0x3a63cf[_0x1600cb(0x425)],_0x116100,_0x3a63cf);if(_0x4b3cca['ActionSkillMsg2'])this['displayItemMessage'](_0x3a63cf[_0x1600cb(0x74a)],_0x116100,_0x3a63cf);}else{if(_0x4b3cca[_0x1600cb(0x7fb)])this[_0x1600cb(0x659)](TextManager[_0x1600cb(0x1fc)],_0x116100,_0x3a63cf);}},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x978)]=function(_0x5d6209,_0x1143d7,_0x373420){const _0x53170f=_0x5507dd,_0xe5ace7=_0x1143d7['item']();this[_0x53170f(0x407)](_0x5d6209,_0xe5ace7),this[_0x53170f(0x47f)](_0x53170f(0x9e8),_0x5d6209,_0x373420,!![]),this[_0x53170f(0x47f)](_0x53170f(0x1bd),_0x5d6209,_0x1143d7),this['push']('waitForMovement'),this[_0x53170f(0x47f)](_0x53170f(0x82d),_0x5d6209,_0x1143d7),this['push'](_0x53170f(0x46c));},Window_BattleLog[_0x5507dd(0x832)]['createEffectActionSet']=function(_0x4cdba1,_0x4d4ee5,_0x738cb9){const _0x5b5c64=_0x5507dd;if(this[_0x5b5c64(0x8d9)](_0x4d4ee5))this['autoMeleeSingleTargetActionSet'](_0x4cdba1,_0x4d4ee5,_0x738cb9);else{if(this[_0x5b5c64(0x338)](_0x4d4ee5))this[_0x5b5c64(0x1f5)](_0x4cdba1,_0x4d4ee5,_0x738cb9);else _0x4d4ee5['isForRandom']()?this[_0x5b5c64(0x686)](_0x4cdba1,_0x4d4ee5,_0x738cb9):this[_0x5b5c64(0x382)](_0x4cdba1,_0x4d4ee5,_0x738cb9);}},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x8d9)]=function(_0x16b0e8){const _0x301304=_0x5507dd;if(!_0x16b0e8[_0x301304(0x7ca)]())return![];if(!_0x16b0e8[_0x301304(0x5fb)]())return![];if(!_0x16b0e8[_0x301304(0x6b7)]())return![];return VisuMZ[_0x301304(0x8af)]['Settings'][_0x301304(0x431)][_0x301304(0x593)];},Window_BattleLog['prototype'][_0x5507dd(0x562)]=function(_0x5a0706,_0x326420,_0x213e6d){const _0x177a1b=_0x5507dd,_0x1fcb2f=_0x5a0706['getAttackMotion']()[_0x177a1b(0x5a1)]<0x2,_0x223bf7=0x14,_0x18eb42=0x30;_0x1fcb2f&&(this[_0x177a1b(0x47f)](_0x177a1b(0x50d),[_0x5a0706],_0x18eb42,_0x223bf7),this[_0x177a1b(0x47f)](_0x177a1b(0x9f1),_0x5a0706,_0x213e6d,_0x177a1b(0x247),_0x223bf7,!![],_0x177a1b(0x6cf),!![]),this[_0x177a1b(0x47f)](_0x177a1b(0xa18),[_0x5a0706],_0x177a1b(0x78a)),this[_0x177a1b(0x47f)](_0x177a1b(0x851)));let _0x4b102f=_0x326420['isAttack']()?this[_0x177a1b(0x7eb)](_0x5a0706):0x1;for(let _0x3a5773=0x0;_0x3a5773<_0x4b102f;_0x3a5773++){_0x326420[_0x177a1b(0x551)]()&&_0x5a0706['isActor']()&&this[_0x177a1b(0x47f)]('setActiveWeaponSet',_0x5a0706,_0x3a5773),_0x326420[_0x177a1b(0x92a)]()[_0x177a1b(0x6a6)]<0x0?this[_0x177a1b(0x686)](_0x5a0706,_0x326420,_0x213e6d):this[_0x177a1b(0x382)](_0x5a0706,_0x326420,_0x213e6d);}_0x326420['isAttack']()&&_0x5a0706[_0x177a1b(0x8ed)]()&&this[_0x177a1b(0x47f)](_0x177a1b(0x230),_0x5a0706);this[_0x177a1b(0x47f)](_0x177a1b(0x9e8),_0x5a0706,_0x213e6d,![]);if(_0x1fcb2f){const _0x220594=_0x5a0706[_0x177a1b(0x9f8)]();this[_0x177a1b(0x47f)](_0x177a1b(0x50d),[_0x5a0706],_0x18eb42,_0x223bf7),this['push'](_0x177a1b(0x7d1),_0x5a0706,_0x220594[_0x177a1b(0x99f)],_0x220594[_0x177a1b(0x7b6)],_0x223bf7,![],_0x177a1b(0x6cf)),this['push'](_0x177a1b(0xa18),[_0x5a0706],_0x177a1b(0x478)),this[_0x177a1b(0x47f)](_0x177a1b(0x851)),this[_0x177a1b(0x47f)]('requestMotion',[_0x5a0706],_0x177a1b(0x78a));}},Window_BattleLog[_0x5507dd(0x832)]['isMeleeMultiTargetAction']=function(_0x359488){const _0x456d68=_0x5507dd;if(!_0x359488[_0x456d68(0x7ca)]())return![];if(!_0x359488[_0x456d68(0x51f)]())return![];if(!_0x359488['isForOpponent']())return![];return VisuMZ[_0x456d68(0x8af)][_0x456d68(0x32e)][_0x456d68(0x431)]['AutoMeleeAoE'];},Window_BattleLog['prototype'][_0x5507dd(0x1f5)]=function(_0x46cfa3,_0x24f583,_0x4bfb4a){const _0x2ee3bf=_0x5507dd,_0xe7237f=_0x46cfa3[_0x2ee3bf(0x3ac)]()[_0x2ee3bf(0x5a1)]<0x2,_0x49b76b=0x14,_0x4b50a2=0x30;_0xe7237f&&(this[_0x2ee3bf(0x47f)](_0x2ee3bf(0x50d),[_0x46cfa3],_0x4b50a2,_0x49b76b),this['push'](_0x2ee3bf(0x9f1),_0x46cfa3,_0x4bfb4a,_0x2ee3bf(0x8a2),_0x49b76b,!![],'Linear',!![]),this[_0x2ee3bf(0x47f)](_0x2ee3bf(0xa18),[_0x46cfa3],_0x2ee3bf(0x78a)),this[_0x2ee3bf(0x47f)](_0x2ee3bf(0x851)));let _0x578fd8=_0x24f583[_0x2ee3bf(0x551)]()?this[_0x2ee3bf(0x7eb)](_0x46cfa3):0x1;for(let _0x32a150=0x0;_0x32a150<_0x578fd8;_0x32a150++){_0x24f583['isAttack']()&&_0x46cfa3[_0x2ee3bf(0x8ed)]()&&this[_0x2ee3bf(0x47f)](_0x2ee3bf(0x207),_0x46cfa3,_0x32a150),this[_0x2ee3bf(0x382)](_0x46cfa3,_0x24f583,_0x4bfb4a);}_0x24f583[_0x2ee3bf(0x551)]()&&_0x46cfa3[_0x2ee3bf(0x8ed)]()&&this[_0x2ee3bf(0x47f)](_0x2ee3bf(0x230),_0x46cfa3);this[_0x2ee3bf(0x47f)](_0x2ee3bf(0x9e8),_0x46cfa3,_0x4bfb4a,![]);if(_0xe7237f){const _0x305453=_0x46cfa3[_0x2ee3bf(0x9f8)]();this['push']('performJump',[_0x46cfa3],_0x4b50a2,_0x49b76b),this['push'](_0x2ee3bf(0x7d1),_0x46cfa3,_0x305453['_homeX'],_0x305453[_0x2ee3bf(0x7b6)],_0x49b76b,![],_0x2ee3bf(0x6cf)),this[_0x2ee3bf(0x47f)](_0x2ee3bf(0xa18),[_0x46cfa3],_0x2ee3bf(0x478)),this[_0x2ee3bf(0x47f)](_0x2ee3bf(0x851)),this[_0x2ee3bf(0x47f)](_0x2ee3bf(0xa18),[_0x46cfa3],'walk');}},Window_BattleLog['prototype'][_0x5507dd(0x686)]=function(_0x3ee030,_0x43703f,_0x19cc76){const _0x559325=_0x5507dd,_0xfb25a6=_0x43703f[_0x559325(0x92a)]();for(const _0x2f4349 of _0x19cc76){if(!_0x2f4349)continue;this['push'](_0x559325(0x60d),_0x3ee030,_0x43703f),this[_0x559325(0x47f)]('waitCount',Sprite_Battler[_0x559325(0x729)]),this[_0x559325(0x47f)](_0x559325(0x569),_0x3ee030,[_0x2f4349],_0xfb25a6['animationId']),this[_0x559325(0x47f)](_0x559325(0x388),0x18),this[_0x559325(0x47f)](_0x559325(0x2cc),_0x3ee030,_0x2f4349);}},Window_BattleLog['prototype'][_0x5507dd(0x382)]=function(_0x56d046,_0x2a8c76,_0x34e471){const _0x303f8a=_0x5507dd,_0x573d9d=_0x2a8c76[_0x303f8a(0x92a)]();this[_0x303f8a(0x47f)]('performAction',_0x56d046,_0x2a8c76),this[_0x303f8a(0x47f)](_0x303f8a(0x388),Sprite_Battler[_0x303f8a(0x729)]),this['push'](_0x303f8a(0x569),_0x56d046,_0x34e471[_0x303f8a(0x8c6)](),_0x573d9d[_0x303f8a(0x6a6)]),this[_0x303f8a(0x47f)](_0x303f8a(0x46c));for(const _0x2b6cd7 of _0x34e471){if(!_0x2b6cd7)continue;this[_0x303f8a(0x47f)](_0x303f8a(0x2cc),_0x56d046,_0x2b6cd7);}},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x60c)]=function(_0x43b74d,_0x308e7e,_0x4ab1fc){const _0x494f11=_0x5507dd,_0x56512b=_0x308e7e[_0x494f11(0x92a)]();this[_0x494f11(0x47f)](_0x494f11(0x9e8),_0x43b74d,_0x4ab1fc,![]),this['push'](_0x494f11(0x721)),this[_0x494f11(0x47f)](_0x494f11(0x70b)),this[_0x494f11(0x47f)](_0x494f11(0x9dc)),this[_0x494f11(0x47f)](_0x494f11(0x566),_0x43b74d),this[_0x494f11(0x47f)](_0x494f11(0x851));},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x5ea)]=function(_0x3ed63b){},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x4cc)]=Window_BattleLog['prototype'][_0x5507dd(0x3d6)],Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x3d6)]=function(_0xdaeeb8){const _0xff892c=_0x5507dd;if(!VisuMZ[_0xff892c(0x8af)][_0xff892c(0x32e)][_0xff892c(0x5de)][_0xff892c(0x578)])return;VisuMZ[_0xff892c(0x8af)]['Window_BattleLog_displayCurrentState']['call'](this,_0xdaeeb8);},Window_BattleLog['prototype']['displayCounter']=function(_0x95bde6){const _0x1d5484=_0x5507dd;this['push'](_0x1d5484(0x5b7),_0x95bde6);VisuMZ[_0x1d5484(0x8af)][_0x1d5484(0x32e)]['ActionSequence'][_0x1d5484(0x3bf)]&&this[_0x1d5484(0x47f)](_0x1d5484(0x569),_0x95bde6,[BattleManager[_0x1d5484(0x1bb)]],-0x1);if(!VisuMZ[_0x1d5484(0x8af)]['Settings'][_0x1d5484(0x5de)][_0x1d5484(0x5a4)])return;this['push'](_0x1d5484(0x8c3),TextManager[_0x1d5484(0x1a1)][_0x1d5484(0x5d0)](_0x95bde6[_0x1d5484(0x55f)]()));},Window_BattleLog['prototype'][_0x5507dd(0x8ec)]=function(_0x25270f){const _0x1efe87=_0x5507dd;this[_0x1efe87(0x47f)](_0x1efe87(0x8ae),_0x25270f);if(!VisuMZ[_0x1efe87(0x8af)][_0x1efe87(0x32e)][_0x1efe87(0x5de)]['ShowReflect'])return;this[_0x1efe87(0x47f)](_0x1efe87(0x8c3),TextManager['magicReflection'][_0x1efe87(0x5d0)](_0x25270f[_0x1efe87(0x55f)]()));},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x5bf)]=function(_0x4ec896,_0x2a3f92){const _0x51abcd=_0x5507dd;if(VisuMZ[_0x51abcd(0x8af)][_0x51abcd(0x32e)][_0x51abcd(0x431)][_0x51abcd(0x7d6)]){const _0x3654e9=_0x2a3f92[_0x51abcd(0x92a)]();this[_0x51abcd(0x47f)](_0x51abcd(0x569),_0x4ec896,[_0x4ec896],_0x3654e9[_0x51abcd(0x6a6)]);}},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x723)]=function(_0x19dc84,_0x57e90b){const _0x3e320b=_0x5507dd;this[_0x3e320b(0x47f)](_0x3e320b(0x213),_0x19dc84,_0x57e90b);if(!VisuMZ[_0x3e320b(0x8af)][_0x3e320b(0x32e)][_0x3e320b(0x5de)]['ShowSubstitute'])return;const _0x311cf5=_0x19dc84[_0x3e320b(0x55f)](),_0x4ef5aa=TextManager[_0x3e320b(0x1e1)][_0x3e320b(0x5d0)](_0x311cf5,_0x57e90b[_0x3e320b(0x55f)]());this[_0x3e320b(0x47f)](_0x3e320b(0x8c3),_0x4ef5aa);},VisuMZ['BattleCore'][_0x5507dd(0x3d5)]=Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x835)],Window_BattleLog[_0x5507dd(0x832)]['displayActionResults']=function(_0x3c8580,_0x23846e){const _0x5f0ccb=_0x5507dd;VisuMZ['BattleCore'][_0x5f0ccb(0x3d5)][_0x5f0ccb(0x542)](this,_0x3c8580,_0x23846e);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x3da)]=Window_BattleLog[_0x5507dd(0x832)]['displayFailure'],Window_BattleLog['prototype'][_0x5507dd(0x264)]=function(_0x28e1f8){const _0x30dcf4=_0x5507dd;if(!VisuMZ[_0x30dcf4(0x8af)][_0x30dcf4(0x32e)]['BattleLog']['ShowFailure'])return;VisuMZ[_0x30dcf4(0x8af)][_0x30dcf4(0x3da)][_0x30dcf4(0x542)](this,_0x28e1f8);},VisuMZ[_0x5507dd(0x8af)]['Window_BattleLog_displayCritical']=Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x5ef)],Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x5ef)]=function(_0x124d04){const _0x47a5c6=_0x5507dd;if(!VisuMZ[_0x47a5c6(0x8af)][_0x47a5c6(0x32e)][_0x47a5c6(0x5de)][_0x47a5c6(0x7db)])return;VisuMZ[_0x47a5c6(0x8af)][_0x47a5c6(0x88f)][_0x47a5c6(0x542)](this,_0x124d04);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x1c4)]=Window_BattleLog[_0x5507dd(0x832)]['displayMiss'],Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x2e1)]=function(_0x1abed7){const _0x48db84=_0x5507dd;!VisuMZ[_0x48db84(0x8af)]['Settings'][_0x48db84(0x5de)][_0x48db84(0x707)]?this[_0x48db84(0x47f)]('performMiss',_0x1abed7):VisuMZ[_0x48db84(0x8af)][_0x48db84(0x1c4)][_0x48db84(0x542)](this,_0x1abed7);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x1ce)]=Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x829)],Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x829)]=function(_0x3e877b){const _0x1f1509=_0x5507dd;!VisuMZ[_0x1f1509(0x8af)][_0x1f1509(0x32e)][_0x1f1509(0x5de)][_0x1f1509(0x707)]?_0x3e877b['result']()[_0x1f1509(0x77c)]?this[_0x1f1509(0x47f)](_0x1f1509(0x37e),_0x3e877b):this['push']('performMagicEvasion',_0x3e877b):VisuMZ[_0x1f1509(0x8af)][_0x1f1509(0x1ce)][_0x1f1509(0x542)](this,_0x3e877b);},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x495)]=function(_0x3dacfc){const _0x15111a=_0x5507dd;_0x3dacfc[_0x15111a(0x3d8)]()[_0x15111a(0x6f0)]&&(_0x3dacfc[_0x15111a(0x3d8)]()[_0x15111a(0x6e0)]>0x0&&!_0x3dacfc[_0x15111a(0x3d8)]()[_0x15111a(0x297)]&&this[_0x15111a(0x47f)]('performDamage',_0x3dacfc),_0x3dacfc[_0x15111a(0x3d8)]()['hpDamage']<0x0&&this['push'](_0x15111a(0x526),_0x3dacfc),VisuMZ[_0x15111a(0x8af)][_0x15111a(0x32e)]['BattleLog'][_0x15111a(0x581)]&&this['push'](_0x15111a(0x8c3),this[_0x15111a(0x489)](_0x3dacfc)));},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x941)]=Window_BattleLog['prototype'][_0x5507dd(0x3ed)],Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x3ed)]=function(_0x21f672){const _0x9b7183=_0x5507dd;if(!VisuMZ[_0x9b7183(0x8af)][_0x9b7183(0x32e)][_0x9b7183(0x5de)][_0x9b7183(0x7c6)])return;VisuMZ[_0x9b7183(0x8af)][_0x9b7183(0x941)][_0x9b7183(0x542)](this,_0x21f672);},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x886)]=Window_BattleLog['prototype']['displayTpDamage'],Window_BattleLog['prototype'][_0x5507dd(0xa2a)]=function(_0x25a518){const _0xb3df3f=_0x5507dd;if(!VisuMZ[_0xb3df3f(0x8af)][_0xb3df3f(0x32e)][_0xb3df3f(0x5de)][_0xb3df3f(0x666)])return;VisuMZ[_0xb3df3f(0x8af)][_0xb3df3f(0x886)]['call'](this,_0x25a518);},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x708)]=function(_0x466a2a){const _0x4ea8fc=_0x5507dd;_0x466a2a[_0x4ea8fc(0x3d8)]()[_0x4ea8fc(0x44f)]()&&(this['push'](_0x4ea8fc(0x23b)),this['displayChangedStates'](_0x466a2a),this[_0x4ea8fc(0x532)](_0x466a2a),this[_0x4ea8fc(0x47f)](_0x4ea8fc(0x721)));},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x679)]=function(_0x32f911){const _0x129531=_0x5507dd,_0x4b347f=_0x32f911['result'](),_0xc277e1=_0x4b347f[_0x129531(0x5b3)]();for(const _0x26cf24 of _0xc277e1){const _0x2cba7a=_0x32f911[_0x129531(0x8ed)]()?_0x26cf24[_0x129531(0x425)]:_0x26cf24[_0x129531(0x74a)];_0x2cba7a&&VisuMZ[_0x129531(0x8af)]['Settings'][_0x129531(0x5de)][_0x129531(0x5e4)]&&(this[_0x129531(0x47f)](_0x129531(0x301)),this['push'](_0x129531(0x82c)),this['push'](_0x129531(0x23b)),this[_0x129531(0x47f)](_0x129531(0x8c3),_0x2cba7a[_0x129531(0x5d0)](_0x32f911[_0x129531(0x55f)]())),this['push'](_0x129531(0x9ca))),_0x26cf24['id']===_0x32f911['deathStateId']()&&this[_0x129531(0x47f)]('performCollapse',_0x32f911);}},Window_BattleLog['prototype'][_0x5507dd(0x301)]=function(){},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x78d)]=function(_0x56ad3d){const _0x375549=_0x5507dd;if(!VisuMZ[_0x375549(0x8af)][_0x375549(0x32e)][_0x375549(0x5de)][_0x375549(0x546)])return;const _0x75ecbe=_0x56ad3d['result'](),_0x5061d4=_0x75ecbe[_0x375549(0x2a1)]();for(const _0x8cc1de of _0x5061d4){_0x8cc1de['message4']&&(this[_0x375549(0x47f)](_0x375549(0x86c)),this[_0x375549(0x47f)](_0x375549(0x82c)),this[_0x375549(0x47f)](_0x375549(0x23b)),this[_0x375549(0x47f)](_0x375549(0x8c3),_0x8cc1de[_0x375549(0x43b)][_0x375549(0x5d0)](_0x56ad3d[_0x375549(0x55f)]())),this[_0x375549(0x47f)](_0x375549(0x9ca)));}},Window_BattleLog[_0x5507dd(0x832)]['fnordRemovedStates']=function(){},Window_BattleLog['prototype'][_0x5507dd(0x532)]=function(_0x387296){const _0x452565=_0x5507dd,_0x124a31=VisuMZ[_0x452565(0x8af)][_0x452565(0x32e)][_0x452565(0x5de)],_0x40f97e=_0x387296[_0x452565(0x3d8)]();if(_0x124a31['ShowAddedBuff'])this[_0x452565(0xa0b)](_0x387296,_0x40f97e[_0x452565(0x41c)],TextManager[_0x452565(0x49f)]);if(_0x124a31[_0x452565(0x61d)])this[_0x452565(0xa0b)](_0x387296,_0x40f97e[_0x452565(0x56a)],TextManager['debuffAdd']);if(_0x124a31[_0x452565(0x787)])this[_0x452565(0xa0b)](_0x387296,_0x40f97e[_0x452565(0x8ad)],TextManager[_0x452565(0x32d)]);},Window_BattleLog[_0x5507dd(0x832)]['displayBuffs']=function(_0x253af5,_0xe3b339,_0x33599e){const _0x32f36a=_0x5507dd;for(const _0x3d971e of _0xe3b339){const _0x2afd50=_0x33599e['format'](_0x253af5['name'](),TextManager[_0x32f36a(0x271)](_0x3d971e));this['push'](_0x32f36a(0x82c)),this[_0x32f36a(0x47f)]('pushBaseLine'),this[_0x32f36a(0x47f)]('addText',_0x2afd50),this[_0x32f36a(0x47f)](_0x32f36a(0x9ca));}},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x778)]=Window_BattleLog[_0x5507dd(0x832)]['clear'],Window_BattleLog['prototype']['clear']=function(){const _0x225e6e=_0x5507dd;VisuMZ['BattleCore'][_0x225e6e(0x778)][_0x225e6e(0x542)](this),this[_0x225e6e(0x34e)]();},VisuMZ['BattleCore'][_0x5507dd(0x6a4)]=Window_BattleLog['prototype'][_0x5507dd(0x23b)],Window_BattleLog[_0x5507dd(0x832)]['pushBaseLine']=function(){const _0x5ad547=_0x5507dd;VisuMZ[_0x5ad547(0x8af)][_0x5ad547(0x6a4)][_0x5ad547(0x542)](this),this[_0x5ad547(0x34e)]();},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x6e5)]=Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x82c)],Window_BattleLog[_0x5507dd(0x832)]['popBaseLine']=function(){const _0x3772b8=_0x5507dd;VisuMZ[_0x3772b8(0x8af)][_0x3772b8(0x6e5)][_0x3772b8(0x542)](this),this[_0x3772b8(0x5bb)](),this['callNextMethod']();},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x48e)]=Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x819)],Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x819)]=function(_0x45c412){const _0x5ced8c=_0x5507dd;VisuMZ[_0x5ced8c(0x8af)][_0x5ced8c(0x48e)][_0x5ced8c(0x542)](this,_0x45c412),this['callNextMethod']();},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x721)]=function(){const _0x8f4143=_0x5507dd;let _0xb171e=0x0;this[_0x8f4143(0x4d4)][_0x8f4143(0x77e)]>0x0&&(_0xb171e=this[_0x8f4143(0x4d4)][this[_0x8f4143(0x4d4)][_0x8f4143(0x77e)]-0x1]),this[_0x8f4143(0x73e)][_0x8f4143(0x77e)]>_0xb171e?this[_0x8f4143(0x9ca)]():this['callNextMethod']();},VisuMZ['BattleCore'][_0x5507dd(0x1d3)]=Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x1bd)],Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x1bd)]=function(_0x56c8f2,_0x303782){const _0x36c45d=_0x5507dd;VisuMZ[_0x36c45d(0x8af)][_0x36c45d(0x1d3)]['call'](this,_0x56c8f2,_0x303782),this[_0x36c45d(0x34e)]();},VisuMZ[_0x5507dd(0x8af)]['Window_BattleLog_performAction']=Window_BattleLog[_0x5507dd(0x832)]['performAction'],Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x60d)]=function(_0x92a0dc,_0x492512){const _0x20ff99=_0x5507dd;VisuMZ[_0x20ff99(0x8af)][_0x20ff99(0x9db)][_0x20ff99(0x542)](this,_0x92a0dc,_0x492512),this['callNextMethod']();},VisuMZ['BattleCore'][_0x5507dd(0x65e)]=Window_BattleLog['prototype'][_0x5507dd(0x566)],Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x566)]=function(_0x2c14b3){const _0x46bfbf=_0x5507dd;VisuMZ[_0x46bfbf(0x8af)][_0x46bfbf(0x65e)][_0x46bfbf(0x542)](this,_0x2c14b3);for(const _0x34c63b of BattleManager[_0x46bfbf(0x304)]()){if(!_0x34c63b)continue;if(_0x34c63b[_0x46bfbf(0x45e)]())continue;_0x34c63b[_0x46bfbf(0x872)]();}this[_0x46bfbf(0x34e)]();},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x2b1)]=Window_BattleLog['prototype'][_0x5507dd(0x6fb)],Window_BattleLog[_0x5507dd(0x832)]['performDamage']=function(_0x4b76fa){const _0x4c7108=_0x5507dd;VisuMZ[_0x4c7108(0x8af)][_0x4c7108(0x2b1)][_0x4c7108(0x542)](this,_0x4b76fa),this[_0x4c7108(0x34e)]();},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x1e9)]=Window_BattleLog['prototype'][_0x5507dd(0xa34)],Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0xa34)]=function(_0xa419d){const _0x98d706=_0x5507dd;VisuMZ[_0x98d706(0x8af)][_0x98d706(0x1e9)]['call'](this,_0xa419d),this[_0x98d706(0x34e)]();},VisuMZ['BattleCore'][_0x5507dd(0x735)]=Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x526)],Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x526)]=function(_0xc06c44){const _0xcfd3d5=_0x5507dd;VisuMZ[_0xcfd3d5(0x8af)][_0xcfd3d5(0x735)][_0xcfd3d5(0x542)](this,_0xc06c44),this['callNextMethod']();},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x30c)]=Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x37e)],Window_BattleLog['prototype'][_0x5507dd(0x37e)]=function(_0x3eed03){const _0x992961=_0x5507dd;VisuMZ[_0x992961(0x8af)][_0x992961(0x30c)][_0x992961(0x542)](this,_0x3eed03),this[_0x992961(0x34e)]();},VisuMZ['BattleCore'][_0x5507dd(0x7d8)]=Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x8c5)],Window_BattleLog['prototype'][_0x5507dd(0x8c5)]=function(_0x33b542){const _0x549c1e=_0x5507dd;VisuMZ[_0x549c1e(0x8af)][_0x549c1e(0x7d8)][_0x549c1e(0x542)](this,_0x33b542),this['callNextMethod']();},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x97d)]=Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x5b7)],Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x5b7)]=function(_0x70af2b){const _0x2cf419=_0x5507dd;VisuMZ[_0x2cf419(0x8af)][_0x2cf419(0x97d)][_0x2cf419(0x542)](this,_0x70af2b),this[_0x2cf419(0x34e)]();},VisuMZ['BattleCore']['Window_BattleLog_performReflection']=Window_BattleLog['prototype']['performReflection'],Window_BattleLog['prototype'][_0x5507dd(0x8ae)]=function(_0x53760b){const _0x46292a=_0x5507dd;VisuMZ['BattleCore'][_0x46292a(0x85c)][_0x46292a(0x542)](this,_0x53760b),this['callNextMethod']();},VisuMZ[_0x5507dd(0x8af)][_0x5507dd(0x672)]=Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x213)],Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x213)]=function(_0x2b0762,_0x42abfa){const _0x339d17=_0x5507dd;VisuMZ[_0x339d17(0x8af)]['Window_BattleLog_performSubstitute'][_0x339d17(0x542)](this,_0x2b0762,_0x42abfa),this[_0x339d17(0x34e)]();},VisuMZ[_0x5507dd(0x8af)]['Window_BattleLog_performCollapse']=Window_BattleLog[_0x5507dd(0x832)]['performCollapse'],Window_BattleLog[_0x5507dd(0x832)]['performCollapse']=function(_0x463723){const _0x446de9=_0x5507dd;VisuMZ[_0x446de9(0x8af)]['Window_BattleLog_performCollapse']['call'](this,_0x463723),this[_0x446de9(0x34e)]();},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x82d)]=function(_0x1eca9a,_0x564410){const _0x56baf8=_0x5507dd;_0x1eca9a[_0x56baf8(0x82d)](_0x564410),this[_0x56baf8(0x34e)]();},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x774)]=function(_0x2f2cbc,_0x28d77e){const _0x2c05d9=_0x5507dd,_0x2811c1=_0x2f2cbc['attackAnimationId1']();_0x2811c1<=0x0?SoundManager[_0x2c05d9(0x891)]():this[_0x2c05d9(0x6c1)](_0x28d77e,_0x2811c1);},Window_BattleLog['prototype'][_0x5507dd(0x9e8)]=function(_0x2b4388,_0x2672f0,_0x6b224f){const _0x515e07=_0x5507dd,_0xc63433=[_0x2b4388][_0x515e07(0x2ee)](_0x2672f0);for(const _0x1f0a8a of _0xc63433){if(!_0x1f0a8a)continue;_0x1f0a8a[_0x515e07(0x6b1)](_0x6b224f);}this[_0x515e07(0x34e)]();},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x388)]=function(_0x1c45da){const _0x12c5b6=_0x5507dd;this[_0x12c5b6(0x1cf)]=_0x1c45da;},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0xa18)]=function(_0x37fee6,_0x387342){const _0x56c967=_0x5507dd;for(const _0x5555bc of _0x37fee6){if(!_0x5555bc)continue;_0x5555bc[_0x56c967(0xa18)](_0x387342);}this[_0x56c967(0x34e)]();},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x7d1)]=function(_0x36a56a,_0x3b3be9,_0x337d51,_0x573f5d,_0xbcdade,_0xc3be53){const _0x2f920d=_0x5507dd;_0x36a56a[_0x2f920d(0xa22)](_0x3b3be9,_0x337d51,_0x573f5d,_0xbcdade,_0xc3be53,-0x1),this['callNextMethod']();},Window_BattleLog[_0x5507dd(0x832)][_0x5507dd(0x9f1)]=function(_0x4f9038,_0x55e84f,_0x28d063,_0x1a4e8e,_0x115f62,_0x4d1937,_0x3d8436){const _0xdb6ee0=_0x5507dd,_0x343347=Math[_0xdb6ee0(0x71c)](..._0x55e84f[_0xdb6ee0(0x4d2)](_0x29e607=>_0x29e607[_0xdb6ee0(0x9f8)]()[_0xdb6ee0(0x67b)]-_0x29e607[_0xdb6ee0(0x9f8)]()[_0xdb6ee0(0x5c4)]()/0x2)),_0x587242=Math['max'](..._0x55e84f[_0xdb6ee0(0x4d2)](_0x187a7e=>_0x187a7e[_0xdb6ee0(0x9f8)]()[_0xdb6ee0(0x67b)]+_0x187a7e[_0xdb6ee0(0x9f8)]()[_0xdb6ee0(0x5c4)]()/0x2)),_0x3128a8=Math[_0xdb6ee0(0x71c)](..._0x55e84f['map'](_0x421f4f=>_0x421f4f[_0xdb6ee0(0x9f8)]()[_0xdb6ee0(0x6c3)]-_0x421f4f[_0xdb6ee0(0x9f8)]()[_0xdb6ee0(0x6ba)]())),_0x14a8ac=Math['max'](..._0x55e84f['map'](_0x17bd87=>_0x17bd87[_0xdb6ee0(0x9f8)]()[_0xdb6ee0(0x6c3)])),_0x3e0aa3=_0x55e84f[_0xdb6ee0(0x1b4)](_0x242977=>_0x242977['isActor']())['length'],_0x207f93=_0x55e84f['filter'](_0x4a0fb9=>_0x4a0fb9[_0xdb6ee0(0x890)]())[_0xdb6ee0(0x77e)];let _0x5efc18=0x0,_0x1e9217=0x0;if(_0x28d063[_0xdb6ee0(0x1f2)](/front/i))_0x5efc18=_0x3e0aa3>=_0x207f93?_0x343347:_0x587242;else{if(_0x28d063[_0xdb6ee0(0x1f2)](/middle/i))_0x5efc18=(_0x343347+_0x587242)/0x2,_0x3d8436=-0x1;else _0x28d063[_0xdb6ee0(0x1f2)](/back/i)&&(_0x5efc18=_0x3e0aa3>=_0x207f93?_0x587242:_0x343347);}if(_0x28d063[_0xdb6ee0(0x1f2)](/head/i))_0x1e9217=_0x3128a8;else{if(_0x28d063[_0xdb6ee0(0x1f2)](/center/i))_0x1e9217=(_0x3128a8+_0x14a8ac)/0x2;else _0x28d063[_0xdb6ee0(0x1f2)](/base/i)&&(_0x1e9217=_0x14a8ac);}_0x4f9038[_0xdb6ee0(0xa22)](_0x5efc18,_0x1e9217,_0x1a4e8e,_0x115f62,_0x4d1937,_0x3d8436),this[_0xdb6ee0(0x34e)]();},Window_BattleLog[_0x5507dd(0x832)]['performJump']=function(_0x4d7935,_0x1462de,_0x5d0734){const _0x36d189=_0x5507dd;for(const _0x46e8a4 of _0x4d7935){if(!_0x46e8a4)continue;_0x46e8a4[_0x36d189(0x6aa)](_0x1462de,_0x5d0734);}this[_0x36d189(0x34e)]();};