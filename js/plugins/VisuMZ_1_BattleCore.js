//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.68;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.68] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0x57ed21=_0x5c9b;(function(_0x4f0871,_0x509941){const _0xc116f3=_0x5c9b,_0x166c72=_0x4f0871();while(!![]){try{const _0xdb7f0b=-parseInt(_0xc116f3(0x81c))/0x1*(parseInt(_0xc116f3(0xa57))/0x2)+-parseInt(_0xc116f3(0xb0f))/0x3+-parseInt(_0xc116f3(0x81d))/0x4*(-parseInt(_0xc116f3(0x213))/0x5)+-parseInt(_0xc116f3(0x647))/0x6+parseInt(_0xc116f3(0x7b5))/0x7+parseInt(_0xc116f3(0x4b7))/0x8+parseInt(_0xc116f3(0x5d5))/0x9*(parseInt(_0xc116f3(0xb76))/0xa);if(_0xdb7f0b===_0x509941)break;else _0x166c72['push'](_0x166c72['shift']());}catch(_0x38f9c5){_0x166c72['push'](_0x166c72['shift']());}}}(_0x4ef9,0x7ca37));var label=_0x57ed21(0xfb),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x57ed21(0x863)](function(_0x2c52e7){const _0x96c224=_0x57ed21;return _0x2c52e7['status']&&_0x2c52e7['description'][_0x96c224(0x55d)]('['+label+']');})[0x0];function _0x5c9b(_0x372453,_0x3e6cb0){const _0x4ef9b6=_0x4ef9();return _0x5c9b=function(_0x5c9bad,_0xa9bac3){_0x5c9bad=_0x5c9bad-0xe8;let _0x3bb35c=_0x4ef9b6[_0x5c9bad];return _0x3bb35c;},_0x5c9b(_0x372453,_0x3e6cb0);}VisuMZ[label][_0x57ed21(0x8d3)]=VisuMZ[label][_0x57ed21(0x8d3)]||{},VisuMZ['ConvertParams']=function(_0xe4b793,_0x26ce5b){const _0x163b26=_0x57ed21;for(const _0x59722b in _0x26ce5b){if('bozJM'===_0x163b26(0x4b6)){if(_0x59722b['match'](/(.*):(.*)/i)){if(_0x163b26(0xa37)!==_0x163b26(0x2f0)){const _0x421a53=String(RegExp['$1']),_0x5ecf32=String(RegExp['$2'])[_0x163b26(0xaaa)]()['trim']();let _0x135b18,_0x39c95b,_0x393186;switch(_0x5ecf32){case _0x163b26(0xb27):_0x135b18=_0x26ce5b[_0x59722b]!==''?Number(_0x26ce5b[_0x59722b]):0x0;break;case _0x163b26(0x6dc):_0x39c95b=_0x26ce5b[_0x59722b]!==''?JSON[_0x163b26(0x10a)](_0x26ce5b[_0x59722b]):[],_0x135b18=_0x39c95b[_0x163b26(0x6d9)](_0x10802a=>Number(_0x10802a));break;case'EVAL':_0x135b18=_0x26ce5b[_0x59722b]!==''?eval(_0x26ce5b[_0x59722b]):null;break;case _0x163b26(0x3d8):_0x39c95b=_0x26ce5b[_0x59722b]!==''?JSON[_0x163b26(0x10a)](_0x26ce5b[_0x59722b]):[],_0x135b18=_0x39c95b[_0x163b26(0x6d9)](_0x1d3e7b=>eval(_0x1d3e7b));break;case _0x163b26(0x72a):_0x135b18=_0x26ce5b[_0x59722b]!==''?JSON[_0x163b26(0x10a)](_0x26ce5b[_0x59722b]):'';break;case _0x163b26(0x72e):_0x39c95b=_0x26ce5b[_0x59722b]!==''?JSON[_0x163b26(0x10a)](_0x26ce5b[_0x59722b]):[],_0x135b18=_0x39c95b[_0x163b26(0x6d9)](_0x1c668c=>JSON[_0x163b26(0x10a)](_0x1c668c));break;case _0x163b26(0x520):_0x135b18=_0x26ce5b[_0x59722b]!==''?new Function(JSON[_0x163b26(0x10a)](_0x26ce5b[_0x59722b])):new Function(_0x163b26(0x764));break;case'ARRAYFUNC':_0x39c95b=_0x26ce5b[_0x59722b]!==''?JSON[_0x163b26(0x10a)](_0x26ce5b[_0x59722b]):[],_0x135b18=_0x39c95b[_0x163b26(0x6d9)](_0x13efe9=>new Function(JSON[_0x163b26(0x10a)](_0x13efe9)));break;case'STR':_0x135b18=_0x26ce5b[_0x59722b]!==''?String(_0x26ce5b[_0x59722b]):'';break;case'ARRAYSTR':_0x39c95b=_0x26ce5b[_0x59722b]!==''?JSON[_0x163b26(0x10a)](_0x26ce5b[_0x59722b]):[],_0x135b18=_0x39c95b[_0x163b26(0x6d9)](_0x250fe7=>String(_0x250fe7));break;case'STRUCT':_0x393186=_0x26ce5b[_0x59722b]!==''?JSON[_0x163b26(0x10a)](_0x26ce5b[_0x59722b]):{},_0xe4b793[_0x421a53]={},VisuMZ[_0x163b26(0x78b)](_0xe4b793[_0x421a53],_0x393186);continue;case _0x163b26(0x1e1):_0x39c95b=_0x26ce5b[_0x59722b]!==''?JSON[_0x163b26(0x10a)](_0x26ce5b[_0x59722b]):[],_0x135b18=_0x39c95b[_0x163b26(0x6d9)](_0x1fa09c=>VisuMZ[_0x163b26(0x78b)]({},JSON[_0x163b26(0x10a)](_0x1fa09c)));break;default:continue;}_0xe4b793[_0x421a53]=_0x135b18;}else return 0xa;}}else{if(!_0xfc6512[_0x163b26(0xfb)][_0x163b26(0x8d3)][_0x163b26(0x6f9)][_0x163b26(0x703)])return![];if(_0x2238dc[_0x163b26(0x82e)]())return!![];return _0x12d65f[_0x163b26(0x64e)]&&_0xacb56c[_0x163b26(0x20d)]();}}return _0xe4b793;},(_0x1e0377=>{const _0x3ba1e6=_0x57ed21,_0x4da95d=_0x1e0377[_0x3ba1e6(0xb1c)];for(const _0x1b9149 of dependencies){if('NTDzy'!==_0x3ba1e6(0x572))_0x74459a[_0x3ba1e6(0x9f5)]=[];else{if(!Imported[_0x1b9149]){if(_0x3ba1e6(0x9c4)!==_0x3ba1e6(0x9c4))this[_0x3ba1e6(0x309)](_0x583f87,_0x405586['x']+_0x4a78a1[_0x3ba1e6(0x6c1)]-_0x1c0588,_0x11dee9['y'],_0x203053);else{alert('%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.'[_0x3ba1e6(0x455)](_0x4da95d,_0x1b9149)),SceneManager[_0x3ba1e6(0x53e)]();break;}}}}const _0x51aa07=_0x1e0377[_0x3ba1e6(0x88d)];if(_0x51aa07['match'](/\[Version[ ](.*?)\]/i)){if('VNPOa'===_0x3ba1e6(0x3bc)){if(_0x14c830[_0x3ba1e6(0xb47)]===0x0)this[_0x3ba1e6(0xbdc)](_0x3ba1e6(0xb34));else{if(_0x4e9815[_0x3ba1e6(0xb47)]===0x1)this['requestMotion'](_0x3ba1e6(0x118));else _0x37de07['type']===0x2&&this[_0x3ba1e6(0xbdc)](_0x3ba1e6(0x923));}this[_0x3ba1e6(0x8db)](_0x5d7784[_0x3ba1e6(0x1e5)]);}else{const _0x2cb3a4=Number(RegExp['$1']);if(_0x2cb3a4!==VisuMZ[label][_0x3ba1e6(0x7bd)]){if(_0x3ba1e6(0xbc2)!==_0x3ba1e6(0x6e0))alert('%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.'['format'](_0x4da95d,_0x2cb3a4)),SceneManager[_0x3ba1e6(0x53e)]();else{const _0x445927=this['autoBattleWindowRect']();this[_0x3ba1e6(0x43e)]=new _0xfbb9ae(_0x445927),this[_0x3ba1e6(0x43e)][_0x3ba1e6(0x715)](),this[_0x3ba1e6(0x1cc)](this['_autoBattleWindow']);}}}}if(_0x51aa07[_0x3ba1e6(0x463)](/\[Tier[ ](\d+)\]/i)){const _0x4b1c90=Number(RegExp['$1']);_0x4b1c90<tier?(alert(_0x3ba1e6(0x69c)[_0x3ba1e6(0x455)](_0x4da95d,_0x4b1c90,tier)),SceneManager[_0x3ba1e6(0x53e)]()):tier=Math[_0x3ba1e6(0x952)](_0x4b1c90,tier);}VisuMZ['ConvertParams'](VisuMZ[label][_0x3ba1e6(0x8d3)],_0x1e0377[_0x3ba1e6(0x7c3)]);})(pluginData),VisuMZ[_0x57ed21(0xa88)]=function(_0x2be945){const _0x5938be=_0x57ed21;let _0x4c2c20=[];for(const _0x3b5ba5 of _0x2be945){_0x4c2c20=_0x4c2c20['concat'](VisuMZ['ConvertActionSequenceTarget'](_0x3b5ba5));}return _0x4c2c20[_0x5938be(0x863)](_0x1bdc25=>_0x1bdc25);},VisuMZ[_0x57ed21(0x9ed)]=function(_0xc6f62c){const _0x220cef=_0x57ed21,_0x547394=BattleManager[_0x220cef(0x170)]()[_0x220cef(0x863)](_0x231d58=>_0x231d58&&_0x231d58['isAppeared']()),_0x199956=BattleManager[_0x220cef(0xadd)],_0x416dc2=BattleManager[_0x220cef(0x2f4)],_0x2259c7=BattleManager[_0x220cef(0x8fc)]?BattleManager['_allTargets'][_0x220cef(0x714)](0x0):_0x547394;_0xc6f62c=_0xc6f62c[_0x220cef(0x1b2)]()[_0x220cef(0x1f6)]();if(_0xc6f62c===_0x220cef(0x8ce))return[_0x199956];else{if(_0xc6f62c===_0x220cef(0xbb4))return[_0x416dc2];else{if(_0xc6f62c===_0x220cef(0xbf3)){if(_0x416dc2){const _0x262980=_0x2259c7[_0x220cef(0x50e)](_0x416dc2);return _0x262980>=0x0?[_0x2259c7[_0x262980-0x1]||_0x416dc2]:[_0x416dc2];}}else{if(_0xc6f62c==='text\x20target'){if(_0x416dc2){if(_0x220cef(0x6b5)!==_0x220cef(0x6b5)){const _0x1ebeb3=_0x31206f['inputtingAction'](),_0x317ea0=this[_0x220cef(0x241)](this[_0x220cef(0x773)]());if(!_0x1ebeb3)return!![];if(!_0x1ebeb3[_0x220cef(0x720)]())return!![];const _0x40c312=_0x1ebeb3['item']()['note'];if(_0x40c312['match'](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x317ea0===_0x4236b0[_0x220cef(0x241)]())return![];}return!![];}else{const _0x144902=_0x2259c7[_0x220cef(0x50e)](_0x416dc2);return _0x144902>=0x0?[_0x2259c7[_0x144902+0x1]||_0x416dc2]:[_0x416dc2];}}}else{if(_0xc6f62c===_0x220cef(0x799))return _0x2259c7;else{if(_0xc6f62c===_0x220cef(0x2ae)){if(_0x220cef(0x4d1)!==_0x220cef(0x2d4))return[_0x199956][_0x220cef(0x8a9)](_0x2259c7);else _0x2fd503[_0x220cef(0x4c2)]()&&_0x42658d[_0x220cef(0x8cc)]()&&this[_0x220cef(0x46e)](_0x220cef(0x8e8),_0x1940bd,_0x373a99),_0x89f1fc['item']()[_0x220cef(0x8b0)]<0x0?this[_0x220cef(0x44a)](_0x22a560,_0x30ae09,_0x4b6669):this[_0x220cef(0x599)](_0x2a3dc8,_0x347ef2,_0x5d3b49);}else{if(_0xc6f62c==='not\x20focus')return _0x220cef(0x60b)!==_0x220cef(0x9b4)?_0x547394[_0x220cef(0x863)](_0x117178=>_0x117178!==_0x199956&&!_0x2259c7[_0x220cef(0x55d)](_0x117178)&&_0x117178[_0x220cef(0x2d8)]()):this[_0x220cef(0xfe)]();}}}}}}if(_0x199956){if(_0xc6f62c==='alive\x20friends')return _0x199956['friendsUnit']()[_0x220cef(0x38d)]();else{if(_0xc6f62c==='alive\x20friends\x20not\x20user'){if('MnPdZ'!==_0x220cef(0x6d0))this[_0x220cef(0x8fc)]=this[_0x220cef(0x722)][_0x220cef(0x714)](0x0),this[_0x220cef(0xad0)]=0x0,this[_0x220cef(0x2f4)]=this[_0x220cef(0x8fc)][0x0]||null,this[_0x220cef(0x9e6)]='custom';else return _0x199956[_0x220cef(0x7e4)]()[_0x220cef(0x38d)]()[_0x220cef(0x863)](_0x1f01e0=>_0x1f01e0!==_0x199956);}else{if(_0xc6f62c==='alive\x20friends\x20not\x20target')return _0x199956[_0x220cef(0x7e4)]()[_0x220cef(0x38d)]()[_0x220cef(0x863)](_0x7db141=>_0x7db141!==_0x416dc2);else{if(_0xc6f62c==='dead\x20friends'){if(_0x220cef(0x47c)==='qHgDl'){const _0x7ab8e2=_0x245f0c[_0x220cef(0x1a2)]()[_0x576afa],_0x1f7688=new _0xd2bc19();_0x1f7688[_0x220cef(0x362)](_0x7ab8e2),_0x1f7688['setBattler'](_0x7ab8e2),_0x1f7688[_0x220cef(0x402)](),this[_0x220cef(0x209)]['push'](_0x1f7688),this[_0x220cef(0x84c)][_0x220cef(0x1cc)](_0x1f7688);}else return _0x199956[_0x220cef(0x7e4)]()[_0x220cef(0x262)]();}else{if(_0xc6f62c[_0x220cef(0x463)](/FRIEND INDEX (\d+)/i)){if('GdyAx'===_0x220cef(0x798))_0x42d346[_0x4e88ee][_0x220cef(0x509)](this,_0x39c0b4);else{const _0x1289f7=Number(RegExp['$1']);return[_0x199956[_0x220cef(0x7e4)]()[_0x220cef(0x195)]()[_0x1289f7]];}}}}}}if(_0xc6f62c==='alive\x20opponents'){if('wDKjl'==='pSvIv')_0x14c61d[_0x220cef(0xfb)]['Scene_Battle_start'][_0x220cef(0x509)](this),_0x35f793['onBattleStartOnceParallels']();else return _0x199956[_0x220cef(0x28b)]()['aliveMembers']();}else{if(_0xc6f62c===_0x220cef(0xbae))return _0x199956['opponentsUnit']()[_0x220cef(0x38d)]()[_0x220cef(0x863)](_0x536301=>_0x536301!==_0x416dc2);else{if(_0xc6f62c===_0x220cef(0x3bd))return _0x199956[_0x220cef(0x28b)]()[_0x220cef(0x262)]();else{if(_0xc6f62c['match'](/OPPONENT INDEX (\d+)/i)){if(_0x220cef(0x53a)!==_0x220cef(0x7f0)){const _0x546471=Number(RegExp['$1']);return[_0x199956[_0x220cef(0x28b)]()[_0x220cef(0x195)]()[_0x546471]];}else{if(!_0x443208[_0x220cef(0x119)]())return;if(this[_0x220cef(0x4a1)])return;this[_0x220cef(0x4a1)]=!![];const _0x176dd0=this['battler']();if(_0x176dd0)_0x176dd0[_0x220cef(0x1fc)]();}}}}}}if(_0xc6f62c===_0x220cef(0xa70)){if('hTnRu'!==_0x220cef(0xb80))this[_0x220cef(0x46e)](_0x220cef(0x71f),[_0x2d52be],_0x8ef011,_0x48bb18),this['push'](_0x220cef(0x6e1),_0x44a154,_0x1a40d9,'front\x20base',_0x1fe19c,!![],_0x220cef(0x315),!![]),this[_0x220cef(0x46e)](_0x220cef(0xbdc),[_0x31c09d],_0x220cef(0x34b)),this[_0x220cef(0x46e)](_0x220cef(0x4e7));else return $gameParty[_0x220cef(0x38d)]();}else{if(_0xc6f62c==='alive\x20actors\x20not\x20user'){if('UZgbD'!=='duGlK')return $gameParty[_0x220cef(0x38d)]()[_0x220cef(0x863)](_0x1724f1=>_0x1724f1!==_0x199956);else _0x50dd49[_0x220cef(0xa92)]('battleAnimation');}else{if(_0xc6f62c===_0x220cef(0x39b))return $gameParty[_0x220cef(0x38d)]()[_0x220cef(0x863)](_0x527092=>_0x527092!==_0x416dc2);else{if(_0xc6f62c===_0x220cef(0x4e2))return _0x220cef(0x7ff)==='ZDOof'?$gameParty[_0x220cef(0x262)]():!![];else{if(_0xc6f62c['match'](/ACTOR INDEX (\d+)/i)){const _0x3aa8bd=Number(RegExp['$1']);return[$gameParty[_0x220cef(0x195)]()[_0x3aa8bd]];}else{if(_0xc6f62c['match'](/ACTOR ID (\d+)/i)){const _0x58c854=Number(RegExp['$1']);return[$gameActors['actor'](_0x58c854)];}}}}}}if(_0xc6f62c===_0x220cef(0xb6e))return $gameTroop[_0x220cef(0x38d)]();else{if(_0xc6f62c===_0x220cef(0x97e)){if(_0x220cef(0x3ce)!==_0x220cef(0x760))return $gameTroop[_0x220cef(0x38d)]()[_0x220cef(0x863)](_0x6e169a=>_0x6e169a!==_0x199956);else{if(_0x407790){const _0x5bc829=_0x2e6d0d[_0x220cef(0x50e)](_0x4c9192);return _0x5bc829>=0x0?[_0x3ed1e0[_0x5bc829+0x1]||_0x5bf5e7]:[_0x467ae4];}}}else{if(_0xc6f62c===_0x220cef(0x795))return $gameTroop[_0x220cef(0x38d)]()[_0x220cef(0x863)](_0x5219c3=>_0x5219c3!==_0x416dc2);else{if(_0xc6f62c==='dead\x20enemies')return _0x220cef(0x1c5)!=='WavyR'?(_0x37b370=_0x53e9f7[_0x220cef(0xfb)]['Settings']['Damage']['CriticalHitMultiplier'][_0x220cef(0x509)](this,_0x3027da),_0x46d8fb=this['_multipliers'][_0x220cef(0x2e1)]*_0x598396+this[_0x220cef(0x1e8)][_0x220cef(0x537)],_0x246adc):$gameTroop[_0x220cef(0x262)]();else{if(_0xc6f62c['match'](/ENEMY INDEX (\d+)/i)){if(_0x220cef(0xa22)!==_0x220cef(0xa22)){if(this[_0x220cef(0xeb)][_0x220cef(0xa1a)]!==_0x1f216b)return this[_0x220cef(0xeb)][_0x220cef(0xa1a)];return this[_0x220cef(0x241)]()[_0x220cef(0x75a)]['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x220cef(0xeb)][_0x220cef(0x3a9)]=_0x1d2814(_0x11b3c9['$1']),this[_0x220cef(0xeb)][_0x220cef(0xa1a)]=_0x2d493a(_0xa6d165['$2'])):this[_0x220cef(0xeb)][_0x220cef(0xa1a)]=_0x58ac33[_0x220cef(0xb20)][_0x220cef(0x53b)][_0x220cef(0x509)](this),this[_0x220cef(0xeb)][_0x220cef(0xa1a)];}else{const _0x3ba369=Number(RegExp['$1']);return[$gameTroop[_0x220cef(0x195)]()[_0x3ba369]];}}else{if(_0xc6f62c[_0x220cef(0x463)](/ENEMY ID (\d+)/i)){if(_0x220cef(0x8e2)==='Oczid'){const _0x1266f4=Number(RegExp['$1']);return $gameTroop[_0x220cef(0x38d)]()['filter'](_0x52227a=>_0x52227a[_0x220cef(0x6b7)]()===_0x1266f4);}else{_0x2465e4=_0x532ba0[_0x220cef(0xfb)]['JS'][_0x1f1aa9][_0x220cef(0x509)](this,this[_0x220cef(0x478)](),_0x4ab9b3,_0x14f09e,_0x3a2a2c);if(_0x4ddd78)_0x2a9e26=_0x434dae;}}}}}}}if(_0xc6f62c===_0x220cef(0x310)){if(_0x220cef(0x355)===_0x220cef(0x355))return _0x547394[_0x220cef(0x863)](_0x1a7cbe=>_0x1a7cbe['isAlive']());else _0x47b08e[_0x220cef(0xfb)][_0x220cef(0xaf3)][_0x220cef(0x509)](this,_0x5820ad),this['onBattleStartBattleCore'](_0x92166a),this[_0x220cef(0xb93)]();}else{if(_0xc6f62c===_0x220cef(0x5cc))return _0x547394[_0x220cef(0x863)](_0x398874=>_0x398874[_0x220cef(0x31d)]()&&_0x398874!==_0x199956);else{if(_0xc6f62c===_0x220cef(0x4c9))return _0x220cef(0xff)===_0x220cef(0x87a)?_0x5399ea['battler']()[_0x220cef(0x656)]-_0x481fd7[_0x220cef(0x595)]()[_0x220cef(0x656)]:_0x547394['filter'](_0x4f7add=>_0x4f7add['isAlive']()&&_0x4f7add!==_0x416dc2);else{if(_0xc6f62c===_0x220cef(0x1f8)){if(_0x220cef(0x5dc)===_0x220cef(0x7d4))_0x2c2f91=_0x1a9f7f(_0x2ed03e['$1']),_0x270ffc=_0x57b145(_0x416837['$2']);else return _0x547394[_0x220cef(0x863)](_0x58ba48=>_0x58ba48[_0x220cef(0xba1)]());}}}}return[];},PluginManager[_0x57ed21(0x53c)](pluginData['name'],'ActSeq_Set_SetupAction',_0x23d95b=>{const _0x437de1=_0x57ed21;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x437de1(0x78b)](_0x23d95b,_0x23d95b);const _0x1a661d=$gameTemp['getLastPluginCommandInterpreter'](),_0x259e3e=BattleManager[_0x437de1(0x961)],_0x2c029e=BattleManager[_0x437de1(0xadd)],_0x888075=BattleManager[_0x437de1(0x8fc)]?BattleManager['_allTargets'][_0x437de1(0x714)](0x0):[],_0x18d2a1=BattleManager[_0x437de1(0x977)];if(!_0x1a661d||!_0x259e3e||!_0x2c029e)return;if(!_0x259e3e['item']())return;if(_0x23d95b[_0x437de1(0x6f4)])_0x18d2a1[_0x437de1(0x6fe)](_0x2c029e,_0x259e3e['item']());_0x23d95b['ApplyImmortal']&&_0x18d2a1['push']('applyImmortal',_0x2c029e,_0x888075,!![]);if(_0x23d95b[_0x437de1(0x8ec)])_0x18d2a1[_0x437de1(0x46e)](_0x437de1(0x8bc),_0x2c029e,_0x259e3e);if(_0x23d95b[_0x437de1(0xbab)])_0x18d2a1[_0x437de1(0x46e)](_0x437de1(0x4e7));if(_0x23d95b[_0x437de1(0x41f)])_0x18d2a1['push'](_0x437de1(0x84a),_0x2c029e,_0x259e3e);if(_0x23d95b[_0x437de1(0x2c2)])_0x18d2a1['push'](_0x437de1(0xa38));_0x1a661d['setWaitMode']('battlelog');}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x924),_0x2fb344=>{const _0x37a02a=_0x57ed21;if(!SceneManager[_0x37a02a(0x9d4)]())return;VisuMZ[_0x37a02a(0x78b)](_0x2fb344,_0x2fb344);const _0xc9c6e8=$gameTemp['getLastPluginCommandInterpreter'](),_0x563818=BattleManager[_0x37a02a(0x961)],_0x453b6d=BattleManager[_0x37a02a(0xadd)],_0x5dd70c=BattleManager[_0x37a02a(0x8fc)]?BattleManager[_0x37a02a(0x8fc)]['slice'](0x0):[],_0x5071fc=BattleManager[_0x37a02a(0x977)],_0x5225b2=_0x2fb344['DualWield']??![];if(!_0xc9c6e8||!_0x563818||!_0x453b6d)return;if(!_0x563818[_0x37a02a(0x720)]())return;let _0x45a63c=_0x5225b2?_0x5071fc[_0x37a02a(0x781)](_0x453b6d):0x1;for(let _0xa9756f=0x0;_0xa9756f<_0x45a63c;_0xa9756f++){_0x5225b2&&_0x453b6d[_0x37a02a(0x8cc)]()&&_0x5071fc[_0x37a02a(0x46e)](_0x37a02a(0x8e8),_0x453b6d,_0xa9756f);if(_0x2fb344['PerformAction'])_0x5071fc[_0x37a02a(0x46e)]('performAction',_0x453b6d,_0x563818);if(_0x2fb344[_0x37a02a(0x5c4)]>0x0)_0x5071fc[_0x37a02a(0x46e)](_0x37a02a(0x7a4),_0x2fb344[_0x37a02a(0x5c4)]);if(_0x2fb344[_0x37a02a(0x8bf)])_0x5071fc[_0x37a02a(0x46e)](_0x37a02a(0x26f),_0x453b6d,_0x5dd70c,_0x563818[_0x37a02a(0x720)]()[_0x37a02a(0x8b0)]);if(_0x2fb344[_0x37a02a(0x2c2)])_0x5071fc[_0x37a02a(0x46e)](_0x37a02a(0xa38));for(const _0x1483bc of _0x5dd70c){if(!_0x1483bc)continue;if(_0x2fb344[_0x37a02a(0x79b)])_0x5071fc[_0x37a02a(0x46e)](_0x37a02a(0x8dd),_0x453b6d,_0x1483bc);}}if(_0x5225b2&&_0x453b6d['isActor']()){if('PCFBU'===_0x37a02a(0xa0e))_0x5071fc[_0x37a02a(0x46e)](_0x37a02a(0x991),_0x453b6d);else return _0x3b9dc0[_0x37a02a(0x195)]()[this['_enemyID']];}if(_0x2fb344[_0x37a02a(0xa96)])_0x5071fc[_0x37a02a(0x46e)](_0x37a02a(0x7f5),_0x453b6d,_0x5dd70c,![]);_0xc9c6e8[_0x37a02a(0xa92)](_0x37a02a(0x294));}),PluginManager[_0x57ed21(0x53c)](pluginData['name'],'ActSeq_Set_TargetActionSet',_0x798a83=>{const _0x5408b1=_0x57ed21;if(!SceneManager[_0x5408b1(0x9d4)]())return;VisuMZ['ConvertParams'](_0x798a83,_0x798a83);const _0xfdd7d1=$gameTemp[_0x5408b1(0x660)](),_0x445931=BattleManager[_0x5408b1(0x961)],_0x2d4563=BattleManager[_0x5408b1(0xadd)],_0x419934=BattleManager[_0x5408b1(0x8fc)]?BattleManager[_0x5408b1(0x8fc)][_0x5408b1(0x714)](0x0):[],_0x440b98=BattleManager[_0x5408b1(0x977)],_0x4a030f=_0x798a83[_0x5408b1(0x44b)]??![];if(!_0xfdd7d1||!_0x445931||!_0x2d4563)return;if(!_0x445931[_0x5408b1(0x720)]())return;let _0x76aac1=_0x4a030f?_0x440b98[_0x5408b1(0x781)](_0x2d4563):0x1;for(let _0x3f46fc=0x0;_0x3f46fc<_0x76aac1;_0x3f46fc++){if(_0x5408b1(0x9d2)!==_0x5408b1(0x9ca))for(const _0xb9e7bd of _0x419934){if(!_0xb9e7bd)continue;if(_0x4a030f&&_0x2d4563['isActor']()){if(_0x5408b1(0x3b8)!==_0x5408b1(0x3b8))return _0x1bc689[_0x5408b1(0xfb)][_0x5408b1(0x8d3)][_0x5408b1(0x809)][_0x5408b1(0x2b2)];else _0x440b98['push'](_0x5408b1(0x8e8),_0x2d4563,_0x3f46fc);}if(_0x798a83[_0x5408b1(0x109)])_0x440b98[_0x5408b1(0x46e)](_0x5408b1(0x937),_0x2d4563,_0x445931);if(_0x798a83['WaitCount1']>0x0)_0x440b98[_0x5408b1(0x46e)](_0x5408b1(0x7a4),_0x798a83['WaitCount1']);if(_0x798a83[_0x5408b1(0x8bf)])_0x440b98[_0x5408b1(0x46e)]('showAnimation',_0x2d4563,[_0xb9e7bd],_0x445931[_0x5408b1(0x720)]()[_0x5408b1(0x8b0)]);if(_0x798a83[_0x5408b1(0x708)]>0x0)_0x440b98['push'](_0x5408b1(0x7a4),_0x798a83['WaitCount2']);if(_0x798a83['ActionEffect'])_0x440b98[_0x5408b1(0x46e)](_0x5408b1(0x8dd),_0x2d4563,_0xb9e7bd);}else this[_0x5408b1(0xa10)]['x']=_0x3892ec[_0x5408b1(0x6c1)]-(_0x2857b9[_0x5408b1(0x6c1)]-_0x23a6eb[_0x5408b1(0x667)])/0x2-this[_0x5408b1(0xa10)][_0x5408b1(0x6c1)]-0x4;}_0x4a030f&&_0x2d4563[_0x5408b1(0x8cc)]()&&_0x440b98[_0x5408b1(0x46e)](_0x5408b1(0x991),_0x2d4563);if(_0x798a83[_0x5408b1(0xa96)])_0x440b98[_0x5408b1(0x46e)](_0x5408b1(0x7f5),_0x2d4563,_0x419934,![]);_0xfdd7d1[_0x5408b1(0xa92)](_0x5408b1(0x294));}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],'ActSeq_Set_FinishAction',_0xc990ba=>{const _0x1b226d=_0x57ed21;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1b226d(0x78b)](_0xc990ba,_0xc990ba);const _0x5925be=$gameTemp['getLastPluginCommandInterpreter'](),_0x393e1d=BattleManager[_0x1b226d(0x961)],_0x1e3de9=BattleManager['_subject'],_0x35074f=BattleManager[_0x1b226d(0x8fc)]?BattleManager[_0x1b226d(0x8fc)][_0x1b226d(0x714)](0x0):[],_0xf46152=BattleManager[_0x1b226d(0x977)];if(!_0x5925be||!_0x393e1d||!_0x1e3de9)return;if(!_0x393e1d[_0x1b226d(0x720)]())return;if(_0xc990ba[_0x1b226d(0xa96)])_0xf46152['push'](_0x1b226d(0x7f5),_0x1e3de9,_0x35074f,![]);if(_0xc990ba[_0x1b226d(0x6d7)])_0xf46152['push'](_0x1b226d(0x8d7));if(_0xc990ba['WaitForEffect'])_0xf46152[_0x1b226d(0x46e)]('waitForEffect');if(_0xc990ba[_0x1b226d(0x391)])_0xf46152[_0x1b226d(0x46e)](_0x1b226d(0x80e));if(_0xc990ba[_0x1b226d(0x1e0)])_0xf46152[_0x1b226d(0x46e)]('performActionEnd',_0x1e3de9);if(_0xc990ba['WaitForMovement'])_0xf46152[_0x1b226d(0x46e)]('waitForMovement');_0x5925be[_0x1b226d(0xa92)]('battlelog');}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x98f),_0x4bd693=>{const _0x9250f3=_0x57ed21;if(!SceneManager[_0x9250f3(0x9d4)]())return;if(!Imported[_0x9250f3(0xb6a)])return;VisuMZ[_0x9250f3(0x78b)](_0x4bd693,_0x4bd693);const _0x10b0e6=$gameTemp[_0x9250f3(0x660)](),_0x2379f9=_0x4bd693[_0x9250f3(0x408)];if(!_0x10b0e6)return;$gameScreen[_0x9250f3(0x841)](_0x4bd693['Angle'],_0x4bd693[_0x9250f3(0x69d)],_0x4bd693[_0x9250f3(0x670)]);if(_0x2379f9)_0x10b0e6[_0x9250f3(0xa92)]('battleAngle');}),PluginManager[_0x57ed21(0x53c)](pluginData['name'],_0x57ed21(0x42d),_0x1cb754=>{const _0x3934a1=_0x57ed21;if(!SceneManager[_0x3934a1(0x9d4)]())return;if(!Imported[_0x3934a1(0xb6a)])return;VisuMZ[_0x3934a1(0x78b)](_0x1cb754,_0x1cb754);const _0x1d09b3=$gameTemp['getLastPluginCommandInterpreter'](),_0x249566=_0x1cb754[_0x3934a1(0x408)];if(!_0x1d09b3)return;$gameScreen[_0x3934a1(0x841)](0x0,_0x1cb754[_0x3934a1(0x69d)],_0x1cb754['EasingType']);if(_0x249566)_0x1d09b3[_0x3934a1(0xa92)](_0x3934a1(0xb2f));}),PluginManager[_0x57ed21(0x53c)](pluginData['name'],_0x57ed21(0x3cf),_0x4727fe=>{const _0x1a8dc5=_0x57ed21;if(!SceneManager[_0x1a8dc5(0x9d4)]())return;if(!Imported[_0x1a8dc5(0xb6a)])return;const _0x13985d=$gameTemp[_0x1a8dc5(0x660)]();if(!_0x13985d)return;_0x13985d[_0x1a8dc5(0xa92)]('battleAngle');}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],'ActSeq_Animation_ActionAnimation',_0x38d95d=>{const _0x1c9463=_0x57ed21;if(!SceneManager[_0x1c9463(0x9d4)]())return;VisuMZ['ConvertParams'](_0x38d95d,_0x38d95d);const _0x1ca3c8=$gameTemp[_0x1c9463(0x660)](),_0x3f4a6b=BattleManager[_0x1c9463(0x961)],_0x414361=BattleManager[_0x1c9463(0xadd)],_0x36213c=VisuMZ[_0x1c9463(0xa88)](_0x38d95d['Targets']),_0x45b462=_0x38d95d[_0x1c9463(0x81a)],_0x2d0846=BattleManager[_0x1c9463(0x977)];if(!_0x1ca3c8||!_0x3f4a6b||!_0x414361)return;if(!_0x3f4a6b[_0x1c9463(0x720)]())return;let _0x3185b3=_0x3f4a6b[_0x1c9463(0x720)]()[_0x1c9463(0x8b0)];if(_0x3185b3<0x0)_0x3185b3=_0x414361[_0x1c9463(0xa82)]();$gameTemp[_0x1c9463(0x8d4)](_0x36213c,_0x3185b3,_0x45b462),_0x38d95d[_0x1c9463(0x2c2)]&&_0x1ca3c8[_0x1c9463(0xa92)](_0x1c9463(0x53d));}),PluginManager[_0x57ed21(0x53c)](pluginData['name'],_0x57ed21(0x97a),_0x1f6b4a=>{const _0x32903f=_0x57ed21;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x1f6b4a,_0x1f6b4a);const _0x47545c=$gameTemp[_0x32903f(0x660)](),_0x2582ab=BattleManager['_subject'],_0x3e8d5c=VisuMZ[_0x32903f(0xa88)](_0x1f6b4a[_0x32903f(0x7ed)]),_0x31a377=_0x1f6b4a['Mirror'],_0x3aad5f=BattleManager['_logWindow'];if(!_0x47545c||!_0x2582ab)return;const _0x1dcdf5=_0x2582ab[_0x32903f(0xa82)]();$gameTemp['requestAnimation'](_0x3e8d5c,_0x1dcdf5,_0x31a377);if(_0x1f6b4a[_0x32903f(0x2c2)]){if(_0x32903f(0x8fe)!==_0x32903f(0x258))_0x47545c['setWaitMode']('battleAnimation');else{if(!_0x43ca4b['VisuMZ_3_ActSeqImpact'])return;const _0x401410=_0x12e0f0[_0x32903f(0x34f)][_0x32903f(0x837)];if(!_0x401410)return;if(_0x3acd56[_0x32903f(0x791)][_0x32903f(0x7bd)]<=1.04){_0x5ac5cc(_0x32903f(0x946)),_0x12909a['exit']();return;}_0x3bb654[_0x32903f(0x78b)](_0x4c3c74,_0x1ba14a);const _0x26cb0f=_0x23c451[_0x32903f(0x7e3)];_0x401410[_0x32903f(0x431)](_0x26cb0f);}}}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x7cc),_0x1c314c=>{const _0x12deca=_0x57ed21;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x12deca(0x78b)](_0x1c314c,_0x1c314c);const _0x3875b8=_0x13cd16['attackAnimationIdSlot'](_0x1c314c[_0x12deca(0x93d)]);if(_0x3875b8<=0x0)return;const _0x30e6be=$gameTemp['getLastPluginCommandInterpreter'](),_0x13cd16=BattleManager['_subject'],_0x29ac77=VisuMZ[_0x12deca(0xa88)](_0x1c314c[_0x12deca(0x7ed)]),_0x4e87e7=_0x1c314c['Mirror'],_0x468314=BattleManager['_logWindow'];if(!_0x30e6be||!_0x13cd16)return;$gameTemp[_0x12deca(0x8d4)](_0x29ac77,_0x3875b8,_0x4e87e7),_0x1c314c[_0x12deca(0x2c2)]&&_0x30e6be[_0x12deca(0xa92)](_0x12deca(0x53d));}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],'ActSeq_Animation_CastAnimation',_0x263986=>{const _0x200d24=_0x57ed21;if(!SceneManager[_0x200d24(0x9d4)]())return;VisuMZ[_0x200d24(0x78b)](_0x263986,_0x263986);const _0x38a29e=$gameTemp[_0x200d24(0x660)](),_0x174e55=BattleManager[_0x200d24(0x961)],_0x1b66d4=_0x263986[_0x200d24(0x81a)],_0x1a4908=VisuMZ[_0x200d24(0xa88)](_0x263986[_0x200d24(0x7ed)]);if(!_0x38a29e||!_0x174e55)return;if(!_0x174e55[_0x200d24(0x720)]())return;for(const _0x412b18 of _0x1a4908){if(!_0x412b18)continue;_0x412b18[_0x200d24(0x84a)](_0x174e55,_0x1b66d4);}if(_0x263986['WaitForAnimation'])_0x38a29e[_0x200d24(0xa92)](_0x200d24(0x53d));}),PluginManager[_0x57ed21(0x53c)](pluginData['name'],_0x57ed21(0xabd),_0x5d1844=>{const _0x3656d0=_0x57ed21;VisuMZ[_0x3656d0(0x78b)](_0x5d1844,_0x5d1844);const _0xc0c143=$gameTemp[_0x3656d0(0x660)](),_0x34e758=VisuMZ[_0x3656d0(0xa88)](_0x5d1844[_0x3656d0(0x7ed)]),_0x45d2c9=_0x5d1844[_0x3656d0(0xbd8)];if(!_0x45d2c9)return;for(const _0x40d961 of _0x34e758){if(!_0x40d961)continue;if(!_0x40d961['isActor']())continue;_0x40d961[_0x3656d0(0x5ea)](_0x45d2c9);}}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x80f),_0x5ac57a=>{const _0x1968d1=_0x57ed21;if(!SceneManager['_scene'])return;if(!SceneManager[_0x1968d1(0x34f)][_0x1968d1(0x837)])return;if(!Imported['VisuMZ_0_CoreEngine'])return;VisuMZ[_0x1968d1(0x78b)](_0x5ac57a,_0x5ac57a);const _0x213de8=$gameTemp['getLastPluginCommandInterpreter'](),_0x23d7a8=Math[_0x1968d1(0x413)](_0x5ac57a[_0x1968d1(0x678)]),_0x422452=Math[_0x1968d1(0x413)](_0x5ac57a[_0x1968d1(0xa5b)]);$gameTemp[_0x1968d1(0x908)](_0x23d7a8,_0x422452,_0x5ac57a[_0x1968d1(0x1dd)],_0x5ac57a['Mirror'],_0x5ac57a[_0x1968d1(0x4c5)]),_0x5ac57a[_0x1968d1(0x8bd)]&&_0x213de8&&(SceneManager[_0x1968d1(0x34f)][_0x1968d1(0x837)][_0x1968d1(0x735)](),_0x213de8[_0x1968d1(0xa92)](_0x1968d1(0x53d)));}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x43b),_0x4c7465=>{const _0x298c2c=_0x57ed21;if(!SceneManager[_0x298c2c(0x9d4)]())return;VisuMZ[_0x298c2c(0x78b)](_0x4c7465,_0x4c7465);const _0x3045ce=$gameTemp[_0x298c2c(0x660)](),_0x4b80c8=VisuMZ[_0x298c2c(0xa88)](_0x4c7465['Targets']),_0x20382f=_0x4c7465[_0x298c2c(0x1dd)],_0x444db6=_0x4c7465[_0x298c2c(0x81a)];if(!_0x3045ce)return;$gameTemp[_0x298c2c(0x8d4)](_0x4b80c8,_0x20382f,_0x444db6);if(_0x4c7465[_0x298c2c(0x2c2)])_0x3045ce[_0x298c2c(0xa92)](_0x298c2c(0x53d));}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x89a),_0x349398=>{const _0x11cb2c=_0x57ed21;if(!SceneManager[_0x11cb2c(0x9d4)]())return;const _0x795970=$gameTemp[_0x11cb2c(0x660)]();if(!_0x795970)return;_0x795970['setWaitMode'](_0x11cb2c(0x53d));}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],'ActSeq_BattleLog_AddText',_0x4bc170=>{const _0x3549c3=_0x57ed21;if(!SceneManager[_0x3549c3(0x9d4)]())return;VisuMZ[_0x3549c3(0x78b)](_0x4bc170,_0x4bc170);const _0x565ede=BattleManager[_0x3549c3(0x977)],_0x5e9bca=_0x4bc170['CopyCombatLog']&&Imported['VisuMZ_4_CombatLog'];_0x565ede[_0x3549c3(0x972)](_0x4bc170['Text']),_0x5e9bca&&Imported['VisuMZ_4_CombatLog']&&('waNhO'==='XBxSU'?_0x2a71df['motionIdle']=_0x514f51(_0x313386['$1'])[_0x3549c3(0x1b2)]()[_0x3549c3(0x1f6)]():$gameSystem[_0x3549c3(0x371)](_0x4bc170[_0x3549c3(0x15a)]||'',_0x4bc170[_0x3549c3(0x974)]||0x0));}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x6fd),_0x1c9cdc=>{const _0x5d0f80=_0x57ed21;if(!SceneManager[_0x5d0f80(0x9d4)]())return;const _0x141ce9=BattleManager['_logWindow'];_0x141ce9[_0x5d0f80(0x80e)]();}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x6ca),_0x3aeb99=>{const _0x3890ef=_0x57ed21;if(!SceneManager[_0x3890ef(0x9d4)]())return;const _0x861e3f=$gameTemp['getLastPluginCommandInterpreter'](),_0x21cf62=BattleManager[_0x3890ef(0x961)],_0xf3fa65=BattleManager[_0x3890ef(0xadd)],_0x15ca7f=BattleManager['_logWindow'];if(!_0x861e3f||!_0x21cf62||!_0xf3fa65)return;if(!_0x21cf62[_0x3890ef(0x720)]())return;_0x15ca7f[_0x3890ef(0x6fe)](_0xf3fa65,_0x21cf62['item']()),_0x861e3f[_0x3890ef(0xa92)](_0x3890ef(0x294));}),PluginManager[_0x57ed21(0x53c)](pluginData['name'],'ActSeq_BattleLog_PopBaseLine',_0x37a637=>{const _0x15bb38=_0x57ed21;if(!SceneManager[_0x15bb38(0x9d4)]())return;const _0x30defd=BattleManager[_0x15bb38(0x977)];_0x30defd['popBaseLine']();}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_BattleLog_PushBaseLine',_0xc0e084=>{const _0x1f18bf=_0x57ed21;if(!SceneManager[_0x1f18bf(0x9d4)]())return;const _0x5ae147=BattleManager['_logWindow'];_0x5ae147['pushBaseLine']();}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],'ActSeq_BattleLog_Refresh',_0x31f89c=>{const _0x2ee887=_0x57ed21;if(!SceneManager['isSceneBattle']())return;const _0x410926=BattleManager[_0x2ee887(0x977)];_0x410926[_0x2ee887(0xb54)]();}),PluginManager['registerCommand'](pluginData['name'],_0x57ed21(0xa8d),_0x2e1efe=>{const _0x27edae=_0x57ed21;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x27edae(0x78b)](_0x2e1efe,_0x2e1efe),SceneManager[_0x27edae(0x34f)][_0x27edae(0x16c)](_0x2e1efe['ShowHide']);}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x9dc),_0x34728d=>{if(!SceneManager['isSceneBattle']())return;const _0x43bbfd=$gameTemp['getLastPluginCommandInterpreter']();_0x43bbfd['setWaitMode']('battlelog');}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x583),_0xd3a1e5=>{const _0x2dab04=_0x57ed21;if(!SceneManager[_0x2dab04(0x9d4)]())return;const _0xaf5933=$gameTemp[_0x2dab04(0x660)](),_0x15ae52=BattleManager['_logWindow'];_0x15ae52[_0x2dab04(0x8d7)](),_0xaf5933['setWaitMode'](_0x2dab04(0x294));}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x1b5),_0x5b5b25=>{const _0x5725c9=_0x57ed21;if(!SceneManager[_0x5725c9(0x9d4)]())return;if(!Imported[_0x5725c9(0xb6a)])return;VisuMZ[_0x5725c9(0x78b)](_0x5b5b25,_0x5b5b25);const _0x23ed89=$gameScreen[_0x5725c9(0xacb)]();_0x23ed89[_0x5725c9(0x8d6)]=_0x5b5b25[_0x5725c9(0x2a6)];}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x782),_0x48fea4=>{const _0x3d2dc4=_0x57ed21;if(!SceneManager[_0x3d2dc4(0x9d4)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x3d2dc4(0x78b)](_0x48fea4,_0x48fea4);const _0x546e1a=$gameTemp[_0x3d2dc4(0x660)](),_0x517b59=_0x48fea4[_0x3d2dc4(0x88c)];$gameScreen['setBattleCameraPoint'](_0x48fea4[_0x3d2dc4(0x8ac)],_0x48fea4[_0x3d2dc4(0x168)],_0x48fea4[_0x3d2dc4(0x69d)],_0x48fea4[_0x3d2dc4(0x670)]);if(_0x517b59)_0x546e1a[_0x3d2dc4(0xa92)](_0x3d2dc4(0x785));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Camera_FocusTarget',_0x2ebb42=>{const _0x20d0ec=_0x57ed21;if(!SceneManager[_0x20d0ec(0x9d4)]())return;if(!Imported[_0x20d0ec(0xb6a)])return;VisuMZ[_0x20d0ec(0x78b)](_0x2ebb42,_0x2ebb42);const _0x4f61c5=$gameTemp['getLastPluginCommandInterpreter'](),_0x103ad6=VisuMZ[_0x20d0ec(0xa88)](_0x2ebb42[_0x20d0ec(0x7ed)]),_0x3725b1=_0x2ebb42[_0x20d0ec(0x88c)];$gameScreen['setBattleCameraTargets'](_0x103ad6,_0x2ebb42[_0x20d0ec(0x69d)],_0x2ebb42[_0x20d0ec(0x670)]);if(_0x3725b1)_0x4f61c5['setWaitMode'](_0x20d0ec(0x785));}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x619),_0x22626d=>{const _0x2645ff=_0x57ed21;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x2645ff(0x78b)](_0x22626d,_0x22626d);const _0x14365e=$gameTemp[_0x2645ff(0x660)](),_0x2f4386=_0x22626d[_0x2645ff(0x88c)];$gameScreen[_0x2645ff(0xa1f)](_0x22626d['OffsetX'],_0x22626d['OffsetY'],_0x22626d[_0x2645ff(0x69d)],_0x22626d['EasingType']);if(_0x2f4386)_0x14365e['setWaitMode']('battleCamera');}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0xb8f),_0x31f3d0=>{const _0x4edf99=_0x57ed21;if(!SceneManager[_0x4edf99(0x9d4)]())return;if(!Imported[_0x4edf99(0xb6a)])return;VisuMZ['ConvertParams'](_0x31f3d0,_0x31f3d0);const _0x56ec74=$gameTemp[_0x4edf99(0x660)](),_0x42a0ee=_0x31f3d0[_0x4edf99(0x251)],_0x3a3067=_0x31f3d0[_0x4edf99(0x51e)],_0x456ae7=_0x31f3d0[_0x4edf99(0x88c)];if(_0x42a0ee){const _0x2d6526=Math[_0x4edf99(0x413)](Graphics[_0x4edf99(0x6c1)]/0x2),_0x4a6fd8=Math[_0x4edf99(0x413)](Graphics[_0x4edf99(0x8b2)]/0x2);$gameScreen[_0x4edf99(0x748)](_0x2d6526,_0x4a6fd8,_0x31f3d0[_0x4edf99(0x69d)],_0x31f3d0[_0x4edf99(0x670)]);}_0x3a3067&&$gameScreen[_0x4edf99(0xa1f)](0x0,0x0,_0x31f3d0[_0x4edf99(0x69d)],_0x31f3d0[_0x4edf99(0x670)]);if(_0x456ae7)_0x56ec74[_0x4edf99(0xa92)](_0x4edf99(0x785));}),PluginManager['registerCommand'](pluginData['name'],_0x57ed21(0xb0a),_0x6400d4=>{const _0x1bd064=_0x57ed21;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1bd064(0xb6a)])return;const _0x222c3f=$gameTemp[_0x1bd064(0x660)]();if(!_0x222c3f)return;_0x222c3f[_0x1bd064(0xa92)](_0x1bd064(0x785));}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x21d),_0xf50336=>{const _0x1f9a77=_0x57ed21;if(!SceneManager[_0x1f9a77(0x9d4)]())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ['ConvertParams'](_0xf50336,_0xf50336);const _0xa87e61=VisuMZ[_0x1f9a77(0xa88)](_0xf50336[_0x1f9a77(0x7ed)]),_0xc4ab32=_0xf50336['MotionAni'][_0x1f9a77(0x1b2)]()[_0x1f9a77(0x1f6)]();for(const _0xa6f770 of _0xa87e61){if(_0x1f9a77(0x3ac)!==_0x1f9a77(0x3ac))_0x3efad8+=_0x4d6eec,_0x2fce4e+=_0x2d6c55;else{if(!_0xa6f770)continue;_0xa6f770[_0x1f9a77(0x471)](_0xc4ab32);}}}),PluginManager[_0x57ed21(0x53c)](pluginData['name'],_0x57ed21(0x6c9),_0x33c13a=>{const _0x27ae56=_0x57ed21;if(!SceneManager[_0x27ae56(0x9d4)]())return;if(!Imported[_0x27ae56(0x995)])return;VisuMZ[_0x27ae56(0x78b)](_0x33c13a,_0x33c13a);const _0x597174=VisuMZ[_0x27ae56(0xa88)](_0x33c13a[_0x27ae56(0x7ed)]),_0x363402=_0x33c13a[_0x27ae56(0x454)];for(const _0x4f8d0b of _0x597174){if(_0x27ae56(0x696)==='ltxwK')this[_0x27ae56(0xbe2)](_0x27ae56(0xb33));else{if(!_0x4f8d0b)continue;_0x4f8d0b[_0x27ae56(0x953)]()[_0x27ae56(0x10b)]=_0x363402;}}}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x866),_0x13cfb6=>{const _0x5b774a=_0x57ed21;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5b774a(0x731)])return;VisuMZ[_0x5b774a(0x78b)](_0x13cfb6,_0x13cfb6);const _0x14f229=BattleManager[_0x5b774a(0x961)],_0x5d1719=_0x13cfb6[_0x5b774a(0x116)];if(!_0x14f229)return;_0x14f229[_0x5b774a(0x755)]=_0x5d1719;}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],'ActSeq_Element_Clear',_0x2b4b5a=>{if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x11ec93=BattleManager['_action'];if(!_0x11ec93)return;_0x11ec93['clearElementChanges']();}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0xa8e),_0x3aeebc=>{const _0x57493c=_0x57ed21;if(!SceneManager[_0x57493c(0x9d4)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ[_0x57493c(0x78b)](_0x3aeebc,_0x3aeebc);const _0x472e93=BattleManager[_0x57493c(0x961)],_0x4f9f41=_0x3aeebc[_0x57493c(0x116)];if(!_0x472e93)return;_0x472e93[_0x57493c(0xb86)]=_0x4f9f41;}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x9e5),_0x268434=>{const _0x1c4ede=_0x57ed21;if(!SceneManager[_0x1c4ede(0x9d4)]())return;if(!Imported[_0x1c4ede(0x731)])return;const _0x391014=BattleManager[_0x1c4ede(0x961)];if(!_0x391014)return;_0x391014[_0x1c4ede(0x15b)]=!![];}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x661),_0x14943e=>{const _0x393dcf=_0x57ed21;if(!Imported[_0x393dcf(0x7b8)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x393dcf(0x78b)](_0x14943e,_0x14943e);const _0x58e319=VisuMZ[_0x393dcf(0xa88)](_0x14943e[_0x393dcf(0x7ed)]);for(const _0x1cec94 of _0x58e319){if(!_0x1cec94)continue;_0x1cec94[_0x393dcf(0x7d8)](_0x393dcf(0x64f)),_0x1cec94[_0x393dcf(0x7d8)]('glitch'),_0x1cec94[_0x393dcf(0x7d8)]('tv'),_0x1cec94[_0x393dcf(0x2d5)]();}$gamePlayer[_0x393dcf(0xb54)]();}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x5a3),_0xe95ef5=>{const _0x3f7b52=_0x57ed21;if(!Imported[_0x3f7b52(0x7b8)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3f7b52(0x78b)](_0xe95ef5,_0xe95ef5);const _0x524f23=VisuMZ['CreateActionSequenceTargets'](_0xe95ef5[_0x3f7b52(0x7ed)]),_0x339342=_0x3f7b52(0xbe3);_0xe95ef5[_0x3f7b52(0x6cc)]=Math[_0x3f7b52(0x871)](_0xe95ef5[_0x3f7b52(0xee)]/0x2),_0xe95ef5[_0x3f7b52(0x1a9)]=_0xe95ef5['slices'],_0xe95ef5[_0x3f7b52(0xa7d)]=!![];for(const _0x415fc0 of _0x524f23){if('vGVei'===_0x3f7b52(0x8ab))this['updateCustomActionSequence']();else{if(!_0x415fc0)continue;_0x415fc0[_0x3f7b52(0xaed)](_0x339342,_0xe95ef5);}}$gamePlayer['refresh']();}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],'ActSeq_Horror_GlitchRemove',_0x512384=>{const _0x68869c=_0x57ed21;if(!Imported[_0x68869c(0x7b8)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x68869c(0x78b)](_0x512384,_0x512384);const _0x40d543=VisuMZ[_0x68869c(0xa88)](_0x512384[_0x68869c(0x7ed)]);for(const _0x43eea7 of _0x40d543){if(!_0x43eea7)continue;_0x43eea7[_0x68869c(0x7d8)](_0x68869c(0xbe3));}$gamePlayer[_0x68869c(0xb54)]();}),PluginManager[_0x57ed21(0x53c)](pluginData['name'],_0x57ed21(0x40b),_0x152b2b=>{const _0x579f63=_0x57ed21;if(!Imported[_0x579f63(0x7b8)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x579f63(0x78b)](_0x152b2b,_0x152b2b);const _0x1a6484=VisuMZ[_0x579f63(0xa88)](_0x152b2b[_0x579f63(0x7ed)]),_0x3da75c='noise';for(const _0x2d3b8e of _0x1a6484){if('mhsFf'===_0x579f63(0xbce)){if(!_0x37cc14[_0x579f63(0x9d4)]())return;if(!_0x5e06be[_0x579f63(0xb6a)])return;const _0x28c232=_0x2bc7dc[_0x579f63(0x660)]();if(!_0x28c232)return;_0x28c232[_0x579f63(0xa92)]('battleZoom');}else{if(!_0x2d3b8e)continue;_0x2d3b8e[_0x579f63(0xaed)](_0x3da75c,_0x152b2b);}}$gamePlayer[_0x579f63(0xb54)]();}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x1fe),_0xd03a6e=>{const _0x284e33=_0x57ed21;if(!Imported[_0x284e33(0x7b8)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x284e33(0x78b)](_0xd03a6e,_0xd03a6e);const _0xc0bcc8=VisuMZ['CreateActionSequenceTargets'](_0xd03a6e[_0x284e33(0x7ed)]);for(const _0x5e4b78 of _0xc0bcc8){if(!_0x5e4b78)continue;_0x5e4b78[_0x284e33(0x7d8)](_0x284e33(0x64f));}$gamePlayer[_0x284e33(0xb54)]();}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],'ActSeq_Horror_TVCreate',_0x3f2c0f=>{const _0x5f3fc4=_0x57ed21;if(!Imported[_0x5f3fc4(0x7b8)])return;if(!SceneManager[_0x5f3fc4(0x9d4)]())return;VisuMZ['ConvertParams'](_0x3f2c0f,_0x3f2c0f);const _0x5421f4=VisuMZ['CreateActionSequenceTargets'](_0x3f2c0f[_0x5f3fc4(0x7ed)]),_0x14b406='tv';for(const _0x36bfe9 of _0x5421f4){if('zQhdd'!==_0x5f3fc4(0x2c0)){if(!_0x36bfe9)continue;_0x36bfe9[_0x5f3fc4(0xaed)](_0x14b406,_0x3f2c0f);}else return this[_0x5f3fc4(0xbcf)]();}$gamePlayer['refresh']();}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Horror_TVRemove',_0xc43872=>{const _0x39d9ef=_0x57ed21;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x39d9ef(0x9d4)]())return;VisuMZ[_0x39d9ef(0x78b)](_0xc43872,_0xc43872);const _0x197afd=VisuMZ[_0x39d9ef(0xa88)](_0xc43872['Targets']);for(const _0x17df37 of _0x197afd){if('UguFt'==='UguFt'){if(!_0x17df37)continue;_0x17df37['removeHorrorEffect']('tv');}else _0x4a2a7f[_0x39d9ef(0x10e)]=_0x1b343a,_0x16106f['bitmap']=_0x1cbea5,_0x2f4e60[_0x39d9ef(0x6a0)](),_0x334930[_0x39d9ef(0x6a0)]();}$gamePlayer[_0x39d9ef(0xb54)]();}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x329),_0xac202d=>{const _0x5d0074=_0x57ed21;if(!Imported[_0x5d0074(0x584)])return;const _0x4207cb=SceneManager[_0x5d0074(0x34f)][_0x5d0074(0x837)];if(!_0x4207cb)return;if(VisuMZ[_0x5d0074(0x791)]['version']<=1.04){if('ACZVF'===_0x5d0074(0xba7)){alert(_0x5d0074(0x946)),SceneManager[_0x5d0074(0x53e)]();return;}else{const _0x5f2957=this[_0x5d0074(0x4e6)][_0x5d0074(0x10e)];this[_0x5d0074(0x4e6)][_0x5d0074(0x6c3)](0x0,0x0,_0x5f2957[_0x5d0074(0x6c1)],_0x5f2957[_0x5d0074(0x8b2)]);}}VisuMZ[_0x5d0074(0x78b)](_0xac202d,_0xac202d);const _0x231cf1=_0xac202d[_0x5d0074(0x7e3)];_0x4207cb[_0x5d0074(0x6e3)](_0x231cf1);}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x881),_0x330799=>{const _0x37a46c=_0x57ed21;if(!SceneManager[_0x37a46c(0x9d4)]())return;if(!Imported[_0x37a46c(0x584)])return;const _0x2a34a9=SceneManager['_scene']['_spriteset'];if(!_0x2a34a9)return;VisuMZ[_0x37a46c(0x78b)](_0x330799,_0x330799);const _0x49a1a8=_0x330799[_0x37a46c(0x8f8)]||0x1,_0x26930f=_0x330799['Duration']||0x1,_0x32bde5=_0x330799[_0x37a46c(0x670)]||_0x37a46c(0x315);_0x2a34a9[_0x37a46c(0x650)](_0x49a1a8,_0x26930f,_0x32bde5);}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x61f),_0x4f5a3e=>{const _0xdf369=_0x57ed21;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x3f84d3=SceneManager[_0xdf369(0x34f)][_0xdf369(0x837)];if(!_0x3f84d3)return;if(VisuMZ[_0xdf369(0x791)]['version']<=1.04){alert(_0xdf369(0x946)),SceneManager[_0xdf369(0x53e)]();return;}VisuMZ['ConvertParams'](_0x4f5a3e,_0x4f5a3e);const _0x2383b9=_0x4f5a3e[_0xdf369(0x7e3)];_0x3f84d3[_0xdf369(0x431)](_0x2383b9);}),PluginManager[_0x57ed21(0x53c)](pluginData['name'],_0x57ed21(0x99e),_0x4f6812=>{const _0x311a3e=_0x57ed21;if(!SceneManager[_0x311a3e(0x9d4)]())return;if(!Imported[_0x311a3e(0x584)])return;const _0x309da5=SceneManager[_0x311a3e(0x34f)][_0x311a3e(0x837)];if(!_0x309da5)return;VisuMZ[_0x311a3e(0x78b)](_0x4f6812,_0x4f6812);const _0x38036a=Number(_0x4f6812[_0x311a3e(0x601)])||0x0,_0x4cfa83=Number(_0x4f6812['Rate']),_0xb6ad44=_0x4f6812[_0x311a3e(0x69d)]||0x1,_0x2ffc96=_0x4f6812[_0x311a3e(0x670)]||_0x311a3e(0x315);_0x309da5[_0x311a3e(0x582)](_0x38036a,_0x4cfa83,_0xb6ad44,_0x2ffc96);}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x9dd),_0x5a1cab=>{const _0x1f56d2=_0x57ed21;if(!SceneManager[_0x1f56d2(0x9d4)]())return;if(!Imported[_0x1f56d2(0x584)])return;const _0x25443f=SceneManager['_scene'][_0x1f56d2(0x837)];if(!_0x25443f)return;VisuMZ[_0x1f56d2(0x78b)](_0x5a1cab,_0x5a1cab);const _0x4896b7=Number(_0x5a1cab['Angle'])||0x0,_0x49e49b=Number(_0x5a1cab[_0x1f56d2(0xa9b)]),_0x1be318=_0x5a1cab[_0x1f56d2(0x69d)]||0x1,_0x2497a5=_0x5a1cab[_0x1f56d2(0x670)]||_0x1f56d2(0x315),_0xa27ebf=VisuMZ['CreateActionSequenceTargets'](_0x5a1cab[_0x1f56d2(0x7ed)]);for(const _0x5a50e6 of _0xa27ebf){if(!_0x5a50e6)continue;if(!_0x5a50e6[_0x1f56d2(0x595)]())continue;_0x5a50e6[_0x1f56d2(0x595)]()['setupMotionBlurImpactFilter'](_0x4896b7,_0x49e49b,_0x1be318,_0x2497a5);}}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],'ActSeq_Impact_MotionTrailCreate',_0x4621b2=>{const _0x3e3e4e=_0x57ed21;if(!SceneManager[_0x3e3e4e(0x9d4)]())return;if(!Imported[_0x3e3e4e(0x584)])return;VisuMZ[_0x3e3e4e(0x78b)](_0x4621b2,_0x4621b2);const _0x1615b7={'delay':_0x4621b2['delay'],'duration':_0x4621b2[_0x3e3e4e(0x60c)],'hue':_0x4621b2[_0x3e3e4e(0x32d)],'opacityStart':_0x4621b2[_0x3e3e4e(0xafb)],'tone':_0x4621b2[_0x3e3e4e(0x226)],'visible':!![]},_0x10d08e=VisuMZ[_0x3e3e4e(0xa88)](_0x4621b2[_0x3e3e4e(0x7ed)]);for(const _0x61b2c2 of _0x10d08e){if(!_0x61b2c2)continue;_0x61b2c2[_0x3e3e4e(0x892)](_0x1615b7);}}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x1a7),_0x398e12=>{const _0x501132=_0x57ed21;if(!SceneManager[_0x501132(0x9d4)]())return;if(!Imported[_0x501132(0x584)])return;VisuMZ[_0x501132(0x78b)](_0x398e12,_0x398e12);const _0x33d364=VisuMZ[_0x501132(0xa88)](_0x398e12[_0x501132(0x7ed)]);for(const _0x1a2373 of _0x33d364){if(_0x501132(0x851)===_0x501132(0x282)){let _0x111784=0x0;if(this[_0x501132(0xbb7)]&&this[_0x501132(0x7fb)]!==_0x5c2595){const _0x4f72bd=this['_distortionSprite'][_0x501132(0x19e)]['y'];_0x111784-=(_0x4f72bd-0x1)*this[_0x501132(0x8b2)];}return _0x111784;}else{if(!_0x1a2373)continue;_0x1a2373[_0x501132(0x5bb)]();}}}),PluginManager[_0x57ed21(0x53c)](pluginData['name'],_0x57ed21(0x6e5),_0x36b4e8=>{const _0x5b73f8=_0x57ed21;if(!Imported[_0x5b73f8(0x584)])return;const _0xcdf8fc=SceneManager[_0x5b73f8(0x34f)][_0x5b73f8(0x837)];if(!_0xcdf8fc)return;if(VisuMZ['ActSeqImpact']['version']<=1.04){if(_0x5b73f8(0x83e)===_0x5b73f8(0x11f))this[_0x5b73f8(0x212)]();else{alert(_0x5b73f8(0x946)),SceneManager[_0x5b73f8(0x53e)]();return;}}VisuMZ[_0x5b73f8(0x78b)](_0x36b4e8,_0x36b4e8);const _0x3bca0f=_0x36b4e8[_0x5b73f8(0x7e3)];_0xcdf8fc[_0x5b73f8(0x4f6)](_0x3bca0f);}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x52e),_0x2cc11b=>{const _0x14f6f1=_0x57ed21;if(!Imported[_0x14f6f1(0x584)])return;const _0x29c553=SceneManager[_0x14f6f1(0x34f)][_0x14f6f1(0x837)];if(!_0x29c553)return;if(VisuMZ[_0x14f6f1(0x791)][_0x14f6f1(0x7bd)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x14f6f1(0x53e)]();return;}VisuMZ[_0x14f6f1(0x78b)](_0x2cc11b,_0x2cc11b);const _0x3b4fe5=_0x2cc11b[_0x14f6f1(0x7e3)];_0x29c553['setupOversaturateImpactFilter'](_0x3b4fe5);}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],'ActSeq_Impact_ShockwavePoint',_0x3ec590=>{const _0x5b74ec=_0x57ed21;if(!Imported[_0x5b74ec(0x584)])return;const _0x3afe4b=SceneManager[_0x5b74ec(0x34f)][_0x5b74ec(0x837)];if(!_0x3afe4b)return;VisuMZ[_0x5b74ec(0x78b)](_0x3ec590,_0x3ec590);const _0x1888bc=_0x3ec590['X']||0x0,_0x320de4=_0x3ec590['Y']||0x0,_0xccb4ee=_0x3ec590['Amp']||0x0,_0x137886=_0x3ec590[_0x5b74ec(0x223)]||0x0,_0x1d143e=_0x3ec590[_0x5b74ec(0x69d)]||0x1;_0x3afe4b[_0x5b74ec(0x700)](_0x1888bc,_0x320de4,_0xccb4ee,_0x137886,_0x1d143e);}),PluginManager[_0x57ed21(0x53c)](pluginData['name'],_0x57ed21(0x8a0),_0x5876a7=>{const _0x30d1da=_0x57ed21;if(!SceneManager[_0x30d1da(0x9d4)]())return;if(!Imported[_0x30d1da(0x584)])return;const _0xf51397=SceneManager[_0x30d1da(0x34f)][_0x30d1da(0x837)];if(!_0xf51397)return;VisuMZ[_0x30d1da(0x78b)](_0x5876a7,_0x5876a7);const _0x5bedf3=VisuMZ['CreateActionSequenceTargets'](_0x5876a7[_0x30d1da(0x7ed)]),_0x2da178=_0x5876a7[_0x30d1da(0x514)],_0x33b8dd=_0x5876a7['OffsetX']||0x0,_0x2abdfe=_0x5876a7[_0x30d1da(0xbda)]||0x0,_0x613ac6=_0x5876a7[_0x30d1da(0xb30)]||0x0,_0x1b3a89=_0x5876a7[_0x30d1da(0x223)]||0x0,_0x39e25c=_0x5876a7['Duration']||0x1;for(const _0x31510f of _0x5bedf3){if(_0x30d1da(0x9e8)===_0x30d1da(0x9e8)){if(!_0x31510f)continue;if(!_0x31510f[_0x30d1da(0x595)]())continue;const _0x23cf49=_0x31510f['battler']();let _0x152aad=_0x23cf49['_baseX'],_0x900708=_0x23cf49[_0x30d1da(0x656)];_0x152aad+=(Graphics[_0x30d1da(0x6c1)]-Graphics[_0x30d1da(0x667)])/0x2,_0x900708+=(Graphics[_0x30d1da(0x8b2)]-Graphics['boxHeight'])/0x2;if(_0x2da178[_0x30d1da(0x463)](/front/i))_0x152aad+=(_0x31510f[_0x30d1da(0xa8a)]()?0x1:-0x1)*_0x23cf49[_0x30d1da(0x3c6)]()/0x2;else _0x2da178['match'](/back/i)&&(_0x152aad+=(_0x31510f[_0x30d1da(0xa8a)]()?-0x1:0x1)*_0x23cf49[_0x30d1da(0x3c6)]()/0x2);if(_0x2da178[_0x30d1da(0x463)](/head/i))_0x900708-=_0x23cf49[_0x30d1da(0xa49)]();else{if(_0x2da178[_0x30d1da(0x463)](/center/i)){if('KtcWF'===_0x30d1da(0x236)){if(!_0x59fa34[_0x30d1da(0x119)]())return;const _0x3ffa5b=this[_0x30d1da(0x595)]();if(!_0x3ffa5b)return;_0x32243c=_0xef773c||0x0;if(_0x905bef>0x0){if(_0x3ffa5b[_0x30d1da(0xa30)]>_0x65a3bb)_0x353de4+=_0x3ffa5b[_0x30d1da(0x6c1)]/0x2+_0x10252b;if(_0x3ffa5b[_0x30d1da(0xa30)]<_0x538701)_0x218cc3-=_0x3ffa5b[_0x30d1da(0x6c1)]/0x2+_0x11498c;}if(_0x518fdd)this[_0x30d1da(0x9bd)](_0x10bc1d,_0x58db6f,![]);_0x3ffa5b['startHomeMove'](_0x3793e8,_0x17ca56,_0x228f35,_0x4d46b6),this[_0x30d1da(0xac2)]=_0x417f56,this[_0x30d1da(0xb5e)]=_0x458aa8;}else _0x900708-=_0x23cf49['mainSpriteHeight']()/0x2;}}_0x152aad+=_0x33b8dd,_0x900708+=_0x2abdfe,_0xf51397[_0x30d1da(0x700)](_0x152aad,_0x900708,_0x613ac6,_0x1b3a89,_0x39e25c);}else _0x4d1525[_0x30d1da(0xfb)][_0x30d1da(0x48e)][_0x30d1da(0x509)](this),this[_0x30d1da(0x218)]&&(this[_0x30d1da(0x218)]=_0x5bb245,_0x1497d2[_0x30d1da(0x34f)]['battleCoreResumeLaunchBattle']());}}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x377),_0x6eeef5=>{const _0xddd27=_0x57ed21;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x7ecea2=SceneManager[_0xddd27(0x34f)][_0xddd27(0x837)];if(!_0x7ecea2)return;VisuMZ[_0xddd27(0x78b)](_0x6eeef5,_0x6eeef5);const _0x1263e5=VisuMZ[_0xddd27(0xa88)](_0x6eeef5[_0xddd27(0x7ed)]),_0xefa1b6=_0x6eeef5[_0xddd27(0x514)],_0x39c636=_0x6eeef5['OffsetX']||0x0,_0x731bb0=_0x6eeef5['OffsetY']||0x0,_0x395bb8=_0x6eeef5[_0xddd27(0xb30)]||0x0,_0x187acd=_0x6eeef5[_0xddd27(0x223)]||0x0,_0x483a7f=_0x6eeef5[_0xddd27(0x69d)]||0x1,_0x5ee659=Math[_0xddd27(0x49b)](..._0x1263e5[_0xddd27(0x6d9)](_0x498fb8=>_0x498fb8[_0xddd27(0x595)]()[_0xddd27(0xa30)]-_0x498fb8[_0xddd27(0x595)]()[_0xddd27(0x3c6)]()/0x2)),_0x41fad9=Math[_0xddd27(0x952)](..._0x1263e5['map'](_0x33119a=>_0x33119a['battler']()[_0xddd27(0xa30)]+_0x33119a[_0xddd27(0x595)]()['mainSpriteWidth']()/0x2)),_0x2b2d41=Math[_0xddd27(0x49b)](..._0x1263e5['map'](_0x5127f3=>_0x5127f3[_0xddd27(0x595)]()['_baseY']-_0x5127f3[_0xddd27(0x595)]()[_0xddd27(0xa49)]())),_0x6125e6=Math['max'](..._0x1263e5[_0xddd27(0x6d9)](_0xa39876=>_0xa39876['battler']()[_0xddd27(0x656)])),_0x5d913e=_0x1263e5[_0xddd27(0x863)](_0x22d64c=>_0x22d64c[_0xddd27(0x8cc)]())[_0xddd27(0x98b)],_0x33fcb6=_0x1263e5[_0xddd27(0x863)](_0x23a97c=>_0x23a97c['isEnemy']())[_0xddd27(0x98b)];let _0x4fd45d=0x0,_0x26cf9b=0x0;if(_0xefa1b6['match'](/front/i))_0x4fd45d=_0x5d913e>=_0x33fcb6?_0x5ee659:_0x41fad9;else{if(_0xefa1b6[_0xddd27(0x463)](/middle/i))_0x4fd45d=(_0x5ee659+_0x41fad9)/0x2,melee=-0x1;else _0xefa1b6[_0xddd27(0x463)](/back/i)&&(_0x4fd45d=_0x5d913e>=_0x33fcb6?_0x41fad9:_0x5ee659);}if(_0xefa1b6[_0xddd27(0x463)](/head/i))_0x26cf9b=_0x2b2d41;else{if(_0xefa1b6['match'](/center/i))_0x26cf9b=(_0x2b2d41+_0x6125e6)/0x2;else _0xefa1b6['match'](/base/i)&&(_0x26cf9b=_0x6125e6);}_0x4fd45d+=(Graphics[_0xddd27(0x6c1)]-Graphics[_0xddd27(0x667)])/0x2,_0x26cf9b+=(Graphics['height']-Graphics['boxHeight'])/0x2,_0x4fd45d+=_0x39c636,_0x26cf9b+=_0x731bb0,_0x7ecea2[_0xddd27(0x700)](_0x4fd45d,_0x26cf9b,_0x395bb8,_0x187acd,_0x483a7f);}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x996),_0x538c8c=>{const _0x1e7061=_0x57ed21;if(!Imported[_0x1e7061(0x584)])return;const _0x3507fe=SceneManager[_0x1e7061(0x34f)]['_spriteset'];if(!_0x3507fe)return;if(VisuMZ[_0x1e7061(0x791)][_0x1e7061(0x7bd)]<=1.04){alert(_0x1e7061(0x946)),SceneManager[_0x1e7061(0x53e)]();return;}VisuMZ[_0x1e7061(0x78b)](_0x538c8c,_0x538c8c);const _0x275b0f=$gameTemp['getLastPluginCommandInterpreter'](),_0x4990f2=Math['max'](0.01,_0x538c8c[_0x1e7061(0x759)]);$gameTemp[_0x1e7061(0x19f)](_0x4990f2,_0x275b0f);}),PluginManager[_0x57ed21(0x53c)](pluginData['name'],_0x57ed21(0x2e9),_0x38072c=>{const _0x3b2169=_0x57ed21;if(!Imported[_0x3b2169(0x584)])return;const _0x21ca63=SceneManager['_scene']['_spriteset'];if(!_0x21ca63)return;if(VisuMZ['ActSeqImpact']['version']<=1.04){alert(_0x3b2169(0x946)),SceneManager[_0x3b2169(0x53e)]();return;}VisuMZ[_0x3b2169(0x78b)](_0x38072c,_0x38072c);const _0x44dd66=$gameTemp[_0x3b2169(0x660)](),_0x1da1e5=_0x38072c['ms']||0x1;VisuMZ['ActSeqImpact'][_0x3b2169(0x823)](_0x1da1e5,_0x44dd66);}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x87f),_0x44176b=>{const _0x3b6c7a=_0x57ed21;if(!Imported[_0x3b6c7a(0x584)])return;const _0x338775=SceneManager[_0x3b6c7a(0x34f)]['_spriteset'];if(!_0x338775)return;VisuMZ[_0x3b6c7a(0x78b)](_0x44176b,_0x44176b);const _0x30c3aa=_0x44176b['X']||0x0,_0x59cfb3=_0x44176b['Y']||0x0,_0x3abc90=_0x44176b['Strength']||0x0,_0x333c87=_0x44176b[_0x3b6c7a(0x5ab)]||0x0,_0x4988e4=_0x44176b[_0x3b6c7a(0x69d)]||0x1,_0x2669fa=_0x44176b['EasingType']||_0x3b6c7a(0x315);_0x338775['setupZoomBlurImpactFilter'](_0x3abc90,_0x30c3aa,_0x59cfb3,_0x333c87,_0x4988e4,_0x2669fa);}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],'ActSeq_Impact_ZoomBlurTargetCenter',_0x50915c=>{const _0x30f30f=_0x57ed21;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x31df54=SceneManager[_0x30f30f(0x34f)][_0x30f30f(0x837)];if(!_0x31df54)return;VisuMZ['ConvertParams'](_0x50915c,_0x50915c);const _0x2aabfe=VisuMZ[_0x30f30f(0xa88)](_0x50915c[_0x30f30f(0x7ed)]),_0x47cd95=_0x50915c[_0x30f30f(0x514)],_0x5cfaf5=_0x50915c['OffsetX']||0x0,_0x5f2134=_0x50915c['OffsetY']||0x0,_0x50d20d=_0x50915c['Strength']||0x0,_0x2cb39d=_0x50915c[_0x30f30f(0x5ab)]||0x0,_0x30d928=_0x50915c[_0x30f30f(0x69d)]||0x1,_0x484bb6=_0x50915c['EasingType']||_0x30f30f(0x315),_0x1eecf9=Math['min'](..._0x2aabfe['map'](_0x44c114=>_0x44c114[_0x30f30f(0x595)]()[_0x30f30f(0xa30)]-_0x44c114['battler']()['mainSpriteWidth']()/0x2)),_0x466c3b=Math[_0x30f30f(0x952)](..._0x2aabfe[_0x30f30f(0x6d9)](_0x2df9c7=>_0x2df9c7[_0x30f30f(0x595)]()[_0x30f30f(0xa30)]+_0x2df9c7['battler']()['mainSpriteWidth']()/0x2)),_0x52568a=Math[_0x30f30f(0x49b)](..._0x2aabfe['map'](_0x54c382=>_0x54c382['battler']()[_0x30f30f(0x656)]-_0x54c382[_0x30f30f(0x595)]()['mainSpriteHeight']())),_0x5c99ae=Math[_0x30f30f(0x952)](..._0x2aabfe[_0x30f30f(0x6d9)](_0x171da8=>_0x171da8['battler']()[_0x30f30f(0x656)])),_0x50f611=_0x2aabfe[_0x30f30f(0x863)](_0x443087=>_0x443087['isActor']())[_0x30f30f(0x98b)],_0x18274a=_0x2aabfe['filter'](_0x346f0e=>_0x346f0e['isEnemy']())[_0x30f30f(0x98b)];let _0x5102b5=0x0,_0x1f46f6=0x0;if(_0x47cd95[_0x30f30f(0x463)](/front/i)){if(_0x30f30f(0x7a5)!=='YkijH'){const _0x2a8075=_0x66f0d7[_0x51909d];if(!_0x2a8075)return;const _0x4dd8a7=new _0x732d99();this[_0x30f30f(0x796)](_0x4dd8a7),_0x4dd8a7['setCommonEvent'](_0x361648);}else _0x5102b5=_0x50f611>=_0x18274a?_0x1eecf9:_0x466c3b;}else{if(_0x47cd95[_0x30f30f(0x463)](/middle/i))_0x5102b5=(_0x1eecf9+_0x466c3b)/0x2,melee=-0x1;else _0x47cd95['match'](/back/i)&&(_0x5102b5=_0x50f611>=_0x18274a?_0x466c3b:_0x1eecf9);}if(_0x47cd95['match'](/head/i))_0x1f46f6=_0x52568a;else{if(_0x47cd95[_0x30f30f(0x463)](/center/i))_0x30f30f(0x743)===_0x30f30f(0x5d2)?this['wholeActionSet'](_0x3a4de3,_0x1743c8,_0x186db4):_0x1f46f6=(_0x52568a+_0x5c99ae)/0x2;else{if(_0x47cd95[_0x30f30f(0x463)](/base/i)){if(_0x30f30f(0x704)!==_0x30f30f(0x704)){if(_0x2590aa[_0x30f30f(0x66f)]()&&this[_0x30f30f(0x567)]===_0x30f30f(0xa1d))return this[_0x30f30f(0x737)]()?this[_0x30f30f(0x2e0)]()&&this[_0x30f30f(0x2e0)]()[_0x30f30f(0x720)]()&&!this[_0x30f30f(0x2e0)]()[_0x30f30f(0xb7a)]():this[_0x30f30f(0x2e0)]()&&this[_0x30f30f(0x2e0)]()[_0x30f30f(0x720)]()&&!this[_0x30f30f(0x2e0)]()[_0x30f30f(0x5c3)]();return![];}else _0x1f46f6=_0x5c99ae;}}}_0x5102b5+=(Graphics[_0x30f30f(0x6c1)]-Graphics['boxWidth'])/0x2,_0x1f46f6+=(Graphics[_0x30f30f(0x8b2)]-Graphics[_0x30f30f(0xb3b)])/0x2,_0x5102b5+=_0x5cfaf5,_0x1f46f6+=_0x5f2134,_0x31df54[_0x30f30f(0x49e)](_0x50d20d,_0x5102b5,_0x1f46f6,_0x2cb39d,_0x30d928,_0x484bb6);}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],'ActSeq_Inject_AnimationStart',_0x539c58=>{const _0x54529f=_0x57ed21;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x27297f=SceneManager[_0x54529f(0x34f)][_0x54529f(0x837)];if(!_0x27297f)return;if(VisuMZ[_0x54529f(0x791)][_0x54529f(0x7bd)]<=1.05){if(_0x54529f(0x2bf)===_0x54529f(0x331))this[_0x54529f(0x6d1)]=![];else{alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}}VisuMZ[_0x54529f(0x78b)](_0x539c58,_0x539c58);const _0x5d7f92=VisuMZ[_0x54529f(0xa88)](_0x539c58[_0x54529f(0x7ed)]),_0x1f8b7a={'filename':_0x539c58[_0x54529f(0xbd8)],'horzCells':_0x539c58[_0x54529f(0x9a4)]||0x1,'vertCells':_0x539c58[_0x54529f(0xa0c)]||0x1,'frameDelay':_0x539c58[_0x54529f(0x259)]||0x1,'smooth':_0x539c58[_0x54529f(0x22e)]||![],'anchorX':_0x539c58['anchorX']||0x0,'anchorY':_0x539c58[_0x54529f(0x6ad)]||0x0,'offsetX':_0x539c58[_0x54529f(0x29a)]||0x0,'offsetY':_0x539c58[_0x54529f(0x177)]||0x0};for(const _0x3fcccb of _0x5d7f92){if(!_0x3fcccb)continue;if(!_0x3fcccb[_0x54529f(0x595)]())continue;_0x3fcccb['battler']()['startInjectAnimation'](_0x1f8b7a);}const _0x3bbe72=$gameTemp[_0x54529f(0x660)]();_0x3bbe72&&_0x3bbe72['setWaitMode'](_0x54529f(0x29f));}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x35c),_0x44eb9b=>{const _0xa4fdc7=_0x57ed21;if(!Imported[_0xa4fdc7(0x584)])return;const _0x35ef41=SceneManager[_0xa4fdc7(0x34f)][_0xa4fdc7(0x837)];if(!_0x35ef41)return;if(VisuMZ['ActSeqImpact'][_0xa4fdc7(0x7bd)]<=1.05){alert(_0xa4fdc7(0x946)),SceneManager[_0xa4fdc7(0x53e)]();return;}VisuMZ[_0xa4fdc7(0x78b)](_0x44eb9b,_0x44eb9b);const _0x357d67=VisuMZ[_0xa4fdc7(0xa88)](_0x44eb9b[_0xa4fdc7(0x7ed)]);for(const _0x1101eb of _0x357d67){if(!_0x1101eb)continue;if(!_0x1101eb[_0xa4fdc7(0x595)]())continue;_0x1101eb[_0xa4fdc7(0x595)]()[_0xa4fdc7(0x5d7)]();}}),PluginManager[_0x57ed21(0x53c)](pluginData['name'],_0x57ed21(0x1bb),_0x41d47b=>{const _0x4e7bf7=_0x57ed21;if(!Imported[_0x4e7bf7(0x584)])return;const _0x45ba65=SceneManager['_scene'][_0x4e7bf7(0x837)];if(!_0x45ba65)return;if(VisuMZ[_0x4e7bf7(0x791)]['version']<=1.05){alert(_0x4e7bf7(0x946)),SceneManager[_0x4e7bf7(0x53e)]();return;}VisuMZ[_0x4e7bf7(0x78b)](_0x41d47b,_0x41d47b);const _0x9622df=VisuMZ[_0x4e7bf7(0xa88)](_0x41d47b[_0x4e7bf7(0x7ed)]),_0x3570eb=_0x41d47b['pause'];for(const _0x1bd1f9 of _0x9622df){if(!_0x1bd1f9)continue;if(!_0x1bd1f9[_0x4e7bf7(0x595)]())continue;_0x1bd1f9[_0x4e7bf7(0x595)]()[_0x4e7bf7(0x239)](_0x3570eb);}}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x42e),_0x56f0cc=>{const _0x50939d=_0x57ed21;if(!SceneManager[_0x50939d(0x9d4)]())return;const _0x42cdc4=$gameTemp[_0x50939d(0x660)]();if(!_0x42cdc4)return;_0x42cdc4[_0x50939d(0xa92)]('battleInjectAni');}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0xab0),_0xcc0937=>{const _0x309fdc=_0x57ed21;if(!SceneManager[_0x309fdc(0x9d4)]())return;VisuMZ[_0x309fdc(0x78b)](_0xcc0937,_0xcc0937);const _0x3500a4=$gameTemp[_0x309fdc(0x660)](),_0x10343f=BattleManager['_action'],_0x4f12e6=BattleManager[_0x309fdc(0xadd)],_0x1d5081=BattleManager[_0x309fdc(0x977)];if(!_0x3500a4||!_0x10343f||!_0x4f12e6)return;if(!_0x10343f[_0x309fdc(0x720)]())return;const _0x4d08d0=VisuMZ[_0x309fdc(0xa88)](_0xcc0937['Targets']);for(const _0x37d58d of _0x4d08d0){if(!_0x37d58d)continue;_0x1d5081[_0x309fdc(0x46e)](_0x309fdc(0x8dd),_0x4f12e6,_0x37d58d);}_0x3500a4[_0x309fdc(0xa92)](_0x309fdc(0x294));}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x895),_0x145323=>{const _0x4cf799=_0x57ed21;if(!SceneManager[_0x4cf799(0x9d4)]())return;VisuMZ[_0x4cf799(0x78b)](_0x145323,_0x145323);const _0x21cbac=[_0x4cf799(0x698),_0x4cf799(0x8f9),'ATK',_0x4cf799(0x79e),_0x4cf799(0x3b0),_0x4cf799(0x6cd),_0x4cf799(0x337),_0x4cf799(0x93b)],_0x3759f3=_0x145323['Buffs'],_0x5120f2=_0x145323[_0x4cf799(0x609)],_0x1b6212=_0x145323[_0x4cf799(0x7dc)],_0x47d620=VisuMZ[_0x4cf799(0xa88)](_0x145323['Targets']);for(const _0x3954b4 of _0x47d620){if(!_0x3954b4)continue;for(const _0x4ac3ab of _0x3759f3){if(_0x4cf799(0x63f)!==_0x4cf799(0x63f))this[_0x4cf799(0x2da)]();else{const _0x57173b=_0x21cbac[_0x4cf799(0x50e)](_0x4ac3ab[_0x4cf799(0xaaa)]()[_0x4cf799(0x1f6)]());_0x57173b>=0x0&&_0x57173b<=0x7&&_0x3954b4[_0x4cf799(0x464)](_0x57173b,_0x1b6212);}}for(const _0x16dfe5 of _0x5120f2){if(_0x4cf799(0x5ec)!==_0x4cf799(0x40c)){const _0x1b719e=_0x21cbac[_0x4cf799(0x50e)](_0x16dfe5['toUpperCase']()[_0x4cf799(0x1f6)]());_0x1b719e>=0x0&&_0x1b719e<=0x7&&_0x3954b4['addDebuff'](_0x1b719e,_0x1b6212);}else{const _0x713d77=_0x13635c(_0x5b0545['$1']),_0x596bdf=_0x27121e[_0x4cf799(0xfb)][_0x4cf799(0x786)](_0x29526d,_0x4cf799(0x7ed));_0x229ab9[_0x4cf799(0xfb)][_0x4cf799(0x349)](_0x713d77,_0x596bdf);}}}}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0xacf),_0x5e271a=>{const _0x4b8089=_0x57ed21;if(!SceneManager[_0x4b8089(0x9d4)]())return;VisuMZ['ConvertParams'](_0x5e271a,_0x5e271a);const _0x5b8532=_0x5e271a[_0x4b8089(0x414)],_0x4c328a=VisuMZ[_0x4b8089(0xa88)](_0x5e271a[_0x4b8089(0x7ed)]);for(const _0x3cd12d of _0x4c328a){if(!_0x3cd12d)continue;for(const _0x219065 of _0x5b8532){'pJCBn'==='pJCBn'?_0x3cd12d[_0x4b8089(0x2db)](_0x219065):(_0x3bc9c4[_0x4b8089(0xa16)]()[_0x4b8089(0x679)]>0x0&&!_0x167c75[_0x4b8089(0xa16)]()[_0x4b8089(0x2d1)]&&this['push'](_0x4b8089(0x862),_0x16468b),_0x4cd9a5[_0x4b8089(0xa16)]()[_0x4b8089(0x679)]<0x0&&this[_0x4b8089(0x46e)](_0x4b8089(0x686),_0x4cfd6e),_0x34834d[_0x4b8089(0xfb)][_0x4b8089(0x8d3)][_0x4b8089(0x6f7)][_0x4b8089(0xae4)]&&this['push'](_0x4b8089(0x972),this[_0x4b8089(0x67b)](_0x2cfa34)));}}}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x138),_0x37ac28=>{const _0xe932b8=_0x57ed21;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x37ac28,_0x37ac28);const _0x3c3753=BattleManager['_action'],_0xe9fdee={'arPenRate':_0x37ac28[_0xe932b8(0xacc)],'arPenFlat':_0x37ac28[_0xe932b8(0x71d)],'arRedRate':_0x37ac28[_0xe932b8(0x507)],'arRedFlat':_0x37ac28['ArRedFlat']};_0x3c3753['_armorPenetration']=_0xe9fdee;}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x398),_0x461ff3=>{const _0xcf4cd7=_0x57ed21;if(!SceneManager[_0xcf4cd7(0x9d4)]())return;if(!Imported[_0xcf4cd7(0xb4b)])return;VisuMZ[_0xcf4cd7(0x78b)](_0x461ff3,_0x461ff3);const _0x204b36=VisuMZ[_0xcf4cd7(0xa88)](_0x461ff3[_0xcf4cd7(0x7ed)]),_0x5f160a=_0x461ff3[_0xcf4cd7(0x8a2)]||0x1;for(const _0xb1c147 of _0x204b36){if(!_0xb1c147)continue;if(!_0xb1c147[_0xcf4cd7(0xa8a)]())continue;_0xb1c147['revealNewWeaknesses'](_0x5f160a);}}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x8e5),_0x4d8cae=>{const _0x1b4d75=_0x57ed21;if(!SceneManager[_0x1b4d75(0x9d4)]())return;if(!Imported[_0x1b4d75(0x890)])return;if(!BattleManager[_0x1b4d75(0x46b)]())return;VisuMZ['ConvertParams'](_0x4d8cae,_0x4d8cae);const _0x50cb1a=VisuMZ[_0x1b4d75(0xa88)](_0x4d8cae[_0x1b4d75(0x7ed)]),_0x28fafb=_0x4d8cae['ChargeRate'],_0x43b3aa=_0x4d8cae['ChargeRate'],_0x21b791=_0x4d8cae[_0x1b4d75(0x348)];for(const _0x480fd1 of _0x50cb1a){if(!_0x480fd1)continue;if(_0x480fd1[_0x1b4d75(0xb75)]())_0x480fd1[_0x1b4d75(0x441)](_0x28fafb);else{if(_0x480fd1[_0x1b4d75(0x9da)]()){if('Gaxis'!=='Gaxis')this['autoBattleUseSkills']=_0x1c4d61['autoBattleUseSkills'];else{_0x480fd1[_0x1b4d75(0x37e)](_0x43b3aa);if(_0x21b791)_0x480fd1['atbInterrupt']();}}}}}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],'ActSeq_Mechanics_BoostPointsChange',_0x274e17=>{const _0x59d39e=_0x57ed21;if(!SceneManager[_0x59d39e(0x9d4)]())return;if(!Imported[_0x59d39e(0xb31)])return;VisuMZ[_0x59d39e(0x78b)](_0x274e17,_0x274e17);const _0x3f4c1a=VisuMZ[_0x59d39e(0xa88)](_0x274e17[_0x59d39e(0x7ed)]),_0x400cec=_0x274e17[_0x59d39e(0x8be)];for(const _0xb12bc9 of _0x3f4c1a){if(_0x59d39e(0x617)===_0x59d39e(0x617)){if(!_0xb12bc9)continue;_0xb12bc9['gainStoredBoostPoints'](_0x400cec);}else _0x423d68[_0x59d39e(0xfb)][_0x59d39e(0x536)]['call'](this),this[_0x59d39e(0x254)]&&this['_mainSprite'][_0x59d39e(0x10e)]&&this[_0x59d39e(0x635)]&&(this['_mainSprite'][_0x59d39e(0x10e)][_0x59d39e(0x22e)]!==this[_0x59d39e(0x635)][_0x59d39e(0x234)]()&&(this[_0x59d39e(0x254)][_0x59d39e(0x10e)][_0x59d39e(0x22e)]=this[_0x59d39e(0x635)][_0x59d39e(0x234)]()));}}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x87d),_0x14fc5f=>{const _0x3f1536=_0x57ed21;if(!SceneManager[_0x3f1536(0x9d4)]())return;if(!Imported['VisuMZ_3_BoostAction'])return;if(!BattleManager['_subject'])return;VisuMZ[_0x3f1536(0x78b)](_0x14fc5f,_0x14fc5f);const _0x398ed9=_0x14fc5f[_0x3f1536(0x1db)];$gameVariables['setValue'](_0x398ed9,BattleManager[_0x3f1536(0xadd)]['toUseBoostPoints']());}),PluginManager[_0x57ed21(0x53c)](pluginData['name'],'ActSeq_Mechanics_BreakShieldChange',_0x29affe=>{const _0x1aa066=_0x57ed21;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1aa066(0x41e)])return;VisuMZ[_0x1aa066(0x78b)](_0x29affe,_0x29affe);const _0x21f8b2=VisuMZ[_0x1aa066(0xa88)](_0x29affe[_0x1aa066(0x7ed)]),_0x211e77=_0x29affe['BreakShields'];for(const _0x30022d of _0x21f8b2){if('yqIyI'===_0x1aa066(0x18a)){const _0x4aa205=[],_0x37822c=new _0x458048(this);return _0x37822c[_0x1aa066(0x818)](),_0x4aa205[_0x1aa066(0x46e)](_0x37822c),_0x4aa205;}else{if(!_0x30022d)continue;if(_0x30022d[_0x1aa066(0x71b)]())continue;if(!_0x30022d[_0x1aa066(0xaee)]())continue;_0x30022d[_0x1aa066(0x127)](_0x211e77);}}}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0xf6),_0x5ec757=>{const _0x3200f0=_0x57ed21;if(!SceneManager[_0x3200f0(0x9d4)]())return;if(!Imported[_0x3200f0(0x41e)])return;VisuMZ['ConvertParams'](_0x5ec757,_0x5ec757);const _0x24e0fb=VisuMZ[_0x3200f0(0xa88)](_0x5ec757['Targets']);for(const _0x4e76df of _0x24e0fb){if(_0x3200f0(0x544)!==_0x3200f0(0x544))_0x25b959=_0x73e9d1[_0x3200f0(0x667)]/0x2,_0x58b60b=_0x32dbe5[_0x3200f0(0xb3b)]/0x2;else{if(!_0x4e76df)continue;if(_0x4e76df[_0x3200f0(0x71b)]())continue;if(!_0x4e76df[_0x3200f0(0xaee)]())continue;_0x4e76df[_0x3200f0(0x9cb)]();}}}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x1c8),_0x4301da=>{const _0x257148=_0x57ed21;if(!SceneManager[_0x257148(0x9d4)]())return;if(!Imported['VisuMZ_2_BattleSystemBTB'])return;if(!BattleManager[_0x257148(0x70c)]())return;VisuMZ['ConvertParams'](_0x4301da,_0x4301da);const _0x16302a=VisuMZ['CreateActionSequenceTargets'](_0x4301da[_0x257148(0x7ed)]),_0x28e6cc=_0x4301da['BravePoints'];for(const _0x4c10b5 of _0x16302a){if(_0x257148(0x6c2)!==_0x257148(0x6c2)){const _0x4027e7=_0x257148(0x47b)['format'](_0x2cacb2);_0x4b2757[_0x257148(0xfb)]['JS'][_0x204a98]=new _0x29ac14(_0x4027e7);}else{if(!_0x4c10b5)continue;_0x4c10b5[_0x257148(0x803)](_0x28e6cc);}}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_Collapse',_0x1a138c=>{const _0x5abe73=_0x57ed21;if(!SceneManager[_0x5abe73(0x9d4)]())return;VisuMZ[_0x5abe73(0x78b)](_0x1a138c,_0x1a138c);const _0x3bb223=$gameTemp['getLastPluginCommandInterpreter'](),_0x46f8d7=BattleManager[_0x5abe73(0x961)],_0x3ca7d9=BattleManager['_subject'];if(!_0x3bb223||!_0x46f8d7||!_0x3ca7d9)return;if(!_0x46f8d7[_0x5abe73(0x720)]())return;const _0x20f9ce=VisuMZ['CreateActionSequenceTargets'](_0x1a138c['Targets']);for(const _0x496d75 of _0x20f9ce){if(!_0x496d75)continue;if(_0x1a138c[_0x5abe73(0x741)]){if(_0x5abe73(0xf1)===_0x5abe73(0x152))return _0x553e45[_0x5abe73(0xb20)]['damageOffsetY'][_0x5abe73(0x509)](this);else _0x496d75[_0x5abe73(0x1c0)](),_0x496d75['addState'](_0x496d75[_0x5abe73(0xbe5)]());}_0x496d75[_0x5abe73(0x26d)]()&&_0x496d75[_0x5abe73(0x70a)]();}_0x3bb223['setWaitMode'](_0x5abe73(0xa25));}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x288),_0x18a9bd=>{const _0x1662b5=_0x57ed21;if(!SceneManager[_0x1662b5(0x9d4)]())return;if(!Imported[_0x1662b5(0x724)])return;if(!BattleManager[_0x1662b5(0x6a1)]())return;VisuMZ['ConvertParams'](_0x18a9bd,_0x18a9bd);const _0x96d510=VisuMZ[_0x1662b5(0xa88)](_0x18a9bd[_0x1662b5(0x7ed)]),_0x1e474b=_0x18a9bd[_0x1662b5(0x939)];for(const _0x33ed52 of _0x96d510){if(!_0x33ed52)continue;_0x33ed52[_0x1662b5(0xbee)](_0x1e474b);}}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x300),_0x2c46e3=>{const _0x23cf0d=_0x57ed21;if(!SceneManager[_0x23cf0d(0x9d4)]())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;if(!BattleManager[_0x23cf0d(0x6a1)]())return;VisuMZ[_0x23cf0d(0x78b)](_0x2c46e3,_0x2c46e3);const _0x2b1b8a=VisuMZ['CreateActionSequenceTargets'](_0x2c46e3[_0x23cf0d(0x7ed)]),_0xfc143=_0x2c46e3[_0x23cf0d(0x769)],_0x57896a=_0x2c46e3[_0x23cf0d(0x769)];for(const _0x5a7fbb of _0x2b1b8a){if('avvJo'==='EVTqD')_0x42b47c=_0x1be23e;else{if(!_0x5a7fbb)continue;if(_0x5a7fbb[_0x23cf0d(0x567)]===_0x23cf0d(0x4d2)){if('NEGnH'!==_0x23cf0d(0x7bb)){if(this[_0x23cf0d(0x82e)]()!=='')return this[_0x23cf0d(0x82e)]();else{if(_0x4468c8[_0x23cf0d(0x64e)]&&this[_0x23cf0d(0x20d)]()!=='')return this['getMenuImage']();}return'';}else _0x5a7fbb[_0x23cf0d(0x569)](_0xfc143);}else{if(_0x5a7fbb[_0x23cf0d(0x567)]===_0x23cf0d(0xa1d)){if(_0x23cf0d(0x2ce)===_0x23cf0d(0x2ce))_0x5a7fbb[_0x23cf0d(0x533)](_0x57896a);else return _0x5ea19c['Formula'][_0x23cf0d(0x509)](this,_0x19bd5d);}}}}}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0xb07),_0x1b52c6=>{const _0x1c2762=_0x57ed21;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1c2762(0x78b)](_0x1b52c6,_0x1b52c6);const _0x590aeb=BattleManager[_0x1c2762(0x961)];if(!_0x590aeb)return;let _0x481dad=_0x1b52c6[_0x1c2762(0x194)];_0x590aeb[_0x1c2762(0x479)](_0x481dad);}),PluginManager[_0x57ed21(0x53c)](pluginData['name'],'ActSeq_Mechanics_DamagePopup',_0x571503=>{const _0x19e37c=_0x57ed21;if(!SceneManager[_0x19e37c(0x9d4)]())return;VisuMZ[_0x19e37c(0x78b)](_0x571503,_0x571503);const _0x523a40=VisuMZ['CreateActionSequenceTargets'](_0x571503['Targets']);for(const _0x33f812 of _0x523a40){if(!_0x33f812)continue;if(_0x33f812[_0x19e37c(0x2ba)]())_0x33f812['startDamagePopup']();}}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x877),_0x328fc2=>{const _0xae8af0=_0x57ed21;if(!SceneManager[_0xae8af0(0x9d4)]())return;VisuMZ[_0xae8af0(0x78b)](_0x328fc2,_0x328fc2);const _0x1d2015=$gameTemp['getLastPluginCommandInterpreter'](),_0x35f328=BattleManager[_0xae8af0(0xadd)],_0x88b4c6=_0x328fc2['JumpToLabel'];if(!_0x1d2015)return;if(!_0x35f328)return;_0x35f328&&_0x35f328[_0xae8af0(0xba1)]()&&_0x88b4c6[_0xae8af0(0xaaa)]()[_0xae8af0(0x1f6)]()!==_0xae8af0(0x1d8)&&_0x1d2015['command119']([_0x88b4c6]);}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x673),_0x2d531c=>{const _0x5bab6a=_0x57ed21;if(!SceneManager[_0x5bab6a(0x9d4)]())return;VisuMZ[_0x5bab6a(0x78b)](_0x2d531c,_0x2d531c);const _0xdb3fdc=VisuMZ[_0x5bab6a(0xa88)](_0x2d531c[_0x5bab6a(0x7ed)]);for(const _0x698598 of _0xdb3fdc){if(_0x5bab6a(0x332)!==_0x5bab6a(0x440)){if(!_0x698598)continue;if(!_0x698598['isEnemy']())continue;_0x698598['escape']();}else return![];}}),PluginManager['registerCommand'](pluginData['name'],_0x57ed21(0x910),_0x1e5e2c=>{const _0x12bc8c=_0x57ed21;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x12bc8c(0x425)])return;if(!BattleManager[_0x12bc8c(0x557)]())return;VisuMZ[_0x12bc8c(0x78b)](_0x1e5e2c,_0x1e5e2c);const _0x5cb45a=_0x1e5e2c[_0x12bc8c(0xb69)];if(BattleManager[_0x12bc8c(0xadd)]){if('RetjP'!==_0x12bc8c(0x36d))BattleManager[_0x12bc8c(0xadd)][_0x12bc8c(0x7e4)]()[_0x12bc8c(0x694)](_0x5cb45a);else{if(!_0x4f6984[_0x12bc8c(0x584)])return;const _0x3afe28=_0xf5d328['_scene'][_0x12bc8c(0x837)];if(!_0x3afe28)return;if(_0x45f146[_0x12bc8c(0x791)]['version']<=1.04){_0x25de23('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),_0x59517b[_0x12bc8c(0x53e)]();return;}_0x115bf6[_0x12bc8c(0x78b)](_0x457201,_0x2a6447);const _0x2690cb=_0x5bd88f[_0x12bc8c(0x7e3)];_0x3afe28[_0x12bc8c(0x1f2)](_0x2690cb);}}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_FtbAction',_0x25cd98=>{const _0x3578e1=_0x57ed21;if(!SceneManager[_0x3578e1(0x9d4)]())return;if(!Imported[_0x3578e1(0x96e)])return;if(!BattleManager[_0x3578e1(0x7d7)]())return;VisuMZ[_0x3578e1(0x78b)](_0x25cd98,_0x25cd98);const _0x2b3cda=_0x25cd98['ActionCount'];if(BattleManager[_0x3578e1(0xadd)]){if(_0x3578e1(0x120)==='lcMQL'){_0x56f4fa(_0x3578e1(0x946)),_0x36c33f[_0x3578e1(0x53e)]();return;}else BattleManager[_0x3578e1(0xadd)][_0x3578e1(0x7e4)]()[_0x3578e1(0xaf7)](_0x2b3cda);}}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],'ActSeq_Mechanics_HpMpTp',_0x4554e4=>{const _0x2d1618=_0x57ed21;if(!SceneManager[_0x2d1618(0x9d4)]())return;VisuMZ[_0x2d1618(0x78b)](_0x4554e4,_0x4554e4);const _0xf270e5=VisuMZ['CreateActionSequenceTargets'](_0x4554e4[_0x2d1618(0x7ed)]),_0x56d30b=_0x4554e4[_0x2d1618(0x6f3)],_0x3c9115=_0x4554e4['HP_Flat'],_0x37ea4e=_0x4554e4[_0x2d1618(0x730)],_0x20c4e3=_0x4554e4[_0x2d1618(0x580)],_0x1e6c66=_0x4554e4[_0x2d1618(0x1b9)],_0x2a12f5=_0x4554e4[_0x2d1618(0x61c)],_0x49ed53=_0x4554e4[_0x2d1618(0x192)];for(const _0x21e917 of _0xf270e5){if(!_0x21e917)continue;const _0x2c69dc=_0x21e917[_0x2d1618(0x31d)](),_0x364ac1=Math['round'](_0x56d30b*_0x21e917[_0x2d1618(0x5bd)]+_0x3c9115),_0xfac4b9=Math[_0x2d1618(0x413)](_0x37ea4e*_0x21e917[_0x2d1618(0x780)]+_0x20c4e3),_0x9c8385=Math[_0x2d1618(0x413)](_0x1e6c66*_0x21e917[_0x2d1618(0x78e)]()+_0x2a12f5);if(_0x364ac1!==0x0)_0x21e917[_0x2d1618(0x73b)](_0x364ac1);if(_0xfac4b9!==0x0)_0x21e917[_0x2d1618(0x1cf)](_0xfac4b9);if(_0x9c8385!==0x0)_0x21e917[_0x2d1618(0x222)](_0x9c8385);if(_0x49ed53)_0x21e917[_0x2d1618(0xea)]();_0x2c69dc&&_0x21e917['isDead']()&&_0x21e917[_0x2d1618(0x70a)]();}}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0xa98),_0x4f424c=>{const _0x532fb7=_0x57ed21;if(!SceneManager[_0x532fb7(0x9d4)]())return;VisuMZ[_0x532fb7(0x78b)](_0x4f424c,_0x4f424c);const _0x3de37c=VisuMZ['CreateActionSequenceTargets'](_0x4f424c[_0x532fb7(0x7ed)]);for(const _0x8cbe24 of _0x3de37c){if(_0x532fb7(0x721)==='Dyrng'){if(!_0x8cbe24)continue;_0x8cbe24[_0x532fb7(0xbcb)](_0x4f424c[_0x532fb7(0x7d9)]);}else return this[_0x532fb7(0x6c1)]*this[_0x532fb7(0x2b0)]();}}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x407),_0x53c3fb=>{const _0xe909a5=_0x57ed21;if(!SceneManager[_0xe909a5(0x9d4)]())return;VisuMZ[_0xe909a5(0x78b)](_0x53c3fb,_0x53c3fb);const _0x5b75e8=BattleManager[_0xe909a5(0x961)],_0x270e65={'criticalHitRate':_0x53c3fb[_0xe909a5(0x447)],'criticalHitFlat':_0x53c3fb[_0xe909a5(0x483)],'criticalDmgRate':_0x53c3fb[_0xe909a5(0x9e2)],'criticalDmgFlat':_0x53c3fb['CriticalDmgFlat'],'damageRate':_0x53c3fb[_0xe909a5(0x28f)],'damageFlat':_0x53c3fb[_0xe909a5(0x11e)],'hitRate':_0x53c3fb[_0xe909a5(0x4b5)],'hitFlat':_0x53c3fb['HitFlat']};_0x5b75e8[_0xe909a5(0x1e8)]=_0x270e65;}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x3e9),_0xe804ca=>{const _0x3d61a9=_0x57ed21;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3d61a9(0x78b)](_0xe804ca,_0xe804ca);const _0xa70b2=_0xe804ca['CommonEventID'];SceneManager[_0x3d61a9(0x34f)][_0x3d61a9(0x7c8)](_0xa70b2);}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0xbd2),_0x4a4481=>{const _0x25dd91=_0x57ed21;if(!SceneManager[_0x25dd91(0x9d4)]())return;if(!Imported[_0x25dd91(0xbc8)])return;if(!BattleManager[_0x25dd91(0x99d)]())return;VisuMZ[_0x25dd91(0x78b)](_0x4a4481,_0x4a4481);const _0x4a6471=VisuMZ['CreateActionSequenceTargets'](_0x4a4481[_0x25dd91(0x7ed)]);for(const _0x4259e4 of _0x4a6471){if(!_0x4259e4)continue;let _0x474259=_0x4a4481['CurrentTurn'],_0x58ed33=_0x4a4481[_0x25dd91(0x193)],_0x54f9a3=_0x4a4481[_0x25dd91(0x1e4)];BattleManager[_0x25dd91(0x16d)]['includes'](_0x4259e4)?_0x474259+=_0x54f9a3:_0x58ed33+=_0x54f9a3,BattleManager[_0x25dd91(0x23f)](_0x4259e4,-_0x474259,![]),BattleManager[_0x25dd91(0x23f)](_0x4259e4,-_0x58ed33,!![]);}}),PluginManager[_0x57ed21(0x53c)](pluginData['name'],_0x57ed21(0x5e4),_0x15a9b1=>{const _0x2833bd=_0x57ed21;if(!SceneManager[_0x2833bd(0x9d4)]())return;if(!Imported[_0x2833bd(0xfc)])return;if(!BattleManager['isPTB']())return;VisuMZ[_0x2833bd(0x78b)](_0x15a9b1,_0x15a9b1);const _0x588c6f=BattleManager[_0x2833bd(0xadd)][_0x2833bd(0x7e4)](),_0x4ab0d2=_0x15a9b1[_0x2833bd(0x1ae)],_0x1f1a5b=_0x15a9b1[_0x2833bd(0x3b2)]||_0x2833bd(0x573),_0x4e9985=_0x15a9b1[_0x2833bd(0x420)]||_0x2833bd(0x573),_0x12c043=_0x15a9b1[_0x2833bd(0x812)]||0x0,_0x191ec0=_0x15a9b1[_0x2833bd(0x60a)]||0x0;(_0x588c6f['canAlterActionCostPTB']()||_0x4ab0d2)&&(_0x2833bd(0x58d)===_0x2833bd(0x8c6)?this['selectNextCommand']():(_0x4ab0d2&&(_0x588c6f[_0x2833bd(0x174)]=_0x588c6f[_0x2833bd(0x174)]||{},_0x588c6f['_ptbActionCost']['priority']=0x0),_0x588c6f['alterActionCostPTB'](_0x1f1a5b,_0x4e9985,_0x12c043,_0x191ec0)));}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],'ActSeq_Mechanics_PtbConvert',_0x56e36d=>{const _0x3a1294=_0x57ed21;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x3a1294(0x368)]())return;VisuMZ['ConvertParams'](_0x56e36d,_0x56e36d);const _0x2964c5=BattleManager[_0x3a1294(0xadd)][_0x3a1294(0x7e4)]();let _0x19e846=Math['max'](_0x56e36d[_0x3a1294(0xab2)],0x0),_0x2ea569=_0x2964c5[_0x3a1294(0x4c6)](),_0x5650d2=_0x2964c5[_0x3a1294(0x71e)]();while(_0x19e846--){if(_0x3a1294(0x1ca)!=='gqbux'){if(_0x2ea569<=0x0&&_0x5650d2<=0x0){if(_0x3a1294(0x920)!==_0x3a1294(0x920))this[_0x3a1294(0x405)]();else break;}else{if(_0x2ea569>0x0)_0x2ea569--,_0x5650d2++;else{if(_0x3a1294(0x637)!==_0x3a1294(0x637))return[_0x23542c];else _0x5650d2--;}}}else _0x414e08?this[_0x3a1294(0x6c5)](_0xf598aa[_0x3a1294(0x2c7)],0x0):this[_0x3a1294(0x99a)]();}_0x2964c5[_0x3a1294(0x133)](_0x2ea569),_0x2964c5[_0x3a1294(0xa05)](_0x5650d2);}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x9a0),_0x5b2fd9=>{const _0x4c910d=_0x57ed21;if(!SceneManager[_0x4c910d(0x9d4)]())return;if(!Imported[_0x4c910d(0xfc)])return;if(!BattleManager[_0x4c910d(0x368)]())return;VisuMZ[_0x4c910d(0x78b)](_0x5b2fd9,_0x5b2fd9);const _0x27afdb=BattleManager[_0x4c910d(0xadd)][_0x4c910d(0x7e4)]();let _0x36076e=_0x5b2fd9['FullActions'],_0x1c73da=_0x5b2fd9[_0x4c910d(0x369)];_0x27afdb[_0x4c910d(0x915)](_0x36076e),_0x27afdb[_0x4c910d(0x506)](_0x1c73da);}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x137),_0x30590c=>{const _0x5697bf=_0x57ed21;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5697bf(0x78b)](_0x30590c,_0x30590c);const _0x1a81bd=['MAXHP',_0x5697bf(0x8f9),_0x5697bf(0xab9),'DEF',_0x5697bf(0x3b0),_0x5697bf(0x6cd),_0x5697bf(0x337),_0x5697bf(0x93b)],_0x8da55=_0x30590c[_0x5697bf(0xa55)],_0x51afa6=_0x30590c[_0x5697bf(0x609)],_0x3a0aba=VisuMZ[_0x5697bf(0xa88)](_0x30590c[_0x5697bf(0x7ed)]);for(const _0x172ca7 of _0x3a0aba){if(!_0x172ca7)continue;for(const _0x42f947 of _0x8da55){const _0x31ebc5=_0x1a81bd[_0x5697bf(0x50e)](_0x42f947[_0x5697bf(0xaaa)]()[_0x5697bf(0x1f6)]());if(_0x31ebc5>=0x0&&_0x31ebc5<=0x7&&_0x172ca7[_0x5697bf(0x3b9)](_0x31ebc5)){if(_0x5697bf(0x7f3)!==_0x5697bf(0x80b))_0x172ca7[_0x5697bf(0x100)](_0x31ebc5);else{if(!_0x4f97b8[_0x5697bf(0x9d4)]())return;if(!_0x181119[_0x5697bf(0xb6a)])return;_0x246590[_0x5697bf(0x78b)](_0x3a5a01,_0x366bfd);const _0xc42515=_0x3aca5c['getLastPluginCommandInterpreter'](),_0x5b923c=_0x879159[_0x5697bf(0x251)],_0x2a6a23=_0x38bbcc[_0x5697bf(0x51e)],_0x43e855=_0x4768fa['WaitForCamera'];if(_0x5b923c){const _0x163af4=_0x3f87a2['round'](_0x2571d5[_0x5697bf(0x6c1)]/0x2),_0x381924=_0x517faf['round'](_0x24d299[_0x5697bf(0x8b2)]/0x2);_0x1f1433[_0x5697bf(0x748)](_0x163af4,_0x381924,_0x6e2934['Duration'],_0x32718e[_0x5697bf(0x670)]);}_0x2a6a23&&_0x13ce6a[_0x5697bf(0xa1f)](0x0,0x0,_0x421c28[_0x5697bf(0x69d)],_0x4284c0[_0x5697bf(0x670)]);if(_0x43e855)_0xc42515[_0x5697bf(0xa92)](_0x5697bf(0x785));}}}for(const _0x48ead4 of _0x51afa6){if(_0x5697bf(0x971)===_0x5697bf(0x350)){if(!_0x2a5faf[_0x5697bf(0x9d4)]())return;if(!_0x4b9428[_0x5697bf(0x731)])return;const _0xe35f1e=_0x22f43b[_0x5697bf(0x961)];if(!_0xe35f1e)return;_0xe35f1e[_0x5697bf(0x5f4)]();}else{const _0x130f82=_0x1a81bd[_0x5697bf(0x50e)](_0x48ead4['toUpperCase']()['trim']());_0x130f82>=0x0&&_0x130f82<=0x7&&_0x172ca7[_0x5697bf(0x770)](_0x130f82)&&_0x172ca7['removeBuff'](_0x130f82);}}}}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x917),_0x2f3ca6=>{const _0x3aa096=_0x57ed21;if(!SceneManager[_0x3aa096(0x9d4)]())return;VisuMZ[_0x3aa096(0x78b)](_0x2f3ca6,_0x2f3ca6);const _0x13e04d=_0x2f3ca6[_0x3aa096(0x414)],_0x1f26e1=VisuMZ[_0x3aa096(0xa88)](_0x2f3ca6[_0x3aa096(0x7ed)]);for(const _0x6028db of _0x1f26e1){if(!_0x6028db)continue;for(const _0x4d09ae of _0x13e04d){_0x6028db[_0x3aa096(0x6cf)](_0x4d09ae);}}}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x38e),_0x4662c1=>{const _0x1f2e38=_0x57ed21;if(!SceneManager[_0x1f2e38(0x9d4)]())return;if(!Imported[_0x1f2e38(0x9de)])return;if(!BattleManager[_0x1f2e38(0x49a)]())return;VisuMZ[_0x1f2e38(0x78b)](_0x4662c1,_0x4662c1);const _0x3eb5c7=_0x4662c1[_0x1f2e38(0x71a)],_0x6cb4c6=VisuMZ[_0x1f2e38(0xa88)](_0x4662c1[_0x1f2e38(0x7ed)]),_0x414d85=_0x4662c1[_0x1f2e38(0x945)],_0x204e56=_0x4662c1[_0x1f2e38(0xa24)],_0x320c27=_0x4662c1[_0x1f2e38(0x260)],_0x56248e=BattleManager['_action'];if(_0x3eb5c7)for(const _0x91611e of _0x6cb4c6){if(!_0x91611e)continue;if(_0x91611e===user)continue;if(_0x414d85)_0x91611e[_0x1f2e38(0xa50)](![]);_0x91611e[_0x1f2e38(0xb94)](BattleManager['_subject'],_0x56248e);}if(_0x204e56&&BattleManager[_0x1f2e38(0xadd)]){if(_0x320c27)BattleManager[_0x1f2e38(0xadd)][_0x1f2e38(0xa50)](![]);const _0x249dbb=_0x6cb4c6[0x0];BattleManager[_0x1f2e38(0x75d)](_0x249dbb,_0x56248e);}}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x187),_0x4ad9fc=>{const _0x234c6f=_0x57ed21;if(!SceneManager[_0x234c6f(0x9d4)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x234c6f(0x49a)]())return;VisuMZ[_0x234c6f(0x78b)](_0x4ad9fc,_0x4ad9fc);const _0x4f0c1a=_0x4ad9fc['Actions'];BattleManager[_0x234c6f(0xadd)]&&BattleManager[_0x234c6f(0xadd)][_0x234c6f(0xa9e)](_0x4f0c1a);}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],'ActSeq_Mechanics_StbRemoveExcessActions',_0x784bce=>{const _0x1db074=_0x57ed21;if(!SceneManager[_0x1db074(0x9d4)]())return;if(!Imported[_0x1db074(0x9de)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x1db074(0x78b)](_0x784bce,_0x784bce);let _0x3fff56=_0x784bce[_0x1db074(0x4af)];if(BattleManager['_subject']){BattleManager['_subject'][_0x1db074(0x613)]=BattleManager['_subject'][_0x1db074(0x613)]||[];while(_0x3fff56--){if(_0x1db074(0xad2)!=='woXNY')_0x486497?this[_0x1db074(0x51f)]():this['removeImmortal']();else{if(BattleManager[_0x1db074(0xadd)]['_actions'][_0x1db074(0x98b)]<=0x0)break;BattleManager[_0x1db074(0xadd)][_0x1db074(0x613)][_0x1db074(0x19a)]();}}}}),PluginManager[_0x57ed21(0x53c)](pluginData['name'],_0x57ed21(0x64a),_0xbe1182=>{const _0x12ae49=_0x57ed21;if(!SceneManager[_0x12ae49(0x9d4)]())return;if(!Imported[_0x12ae49(0x17e)])return;VisuMZ['ConvertParams'](_0xbe1182,_0xbe1182);const _0x11c747=VisuMZ[_0x12ae49(0xa88)](_0xbe1182[_0x12ae49(0x7ed)]),_0x4c1569=_0xbe1182[_0x12ae49(0x3a3)];for(const _0x512b07 of _0x11c747){if(!_0x512b07)continue;if(!_0x512b07[_0x12ae49(0x8cc)]())continue;_0x512b07[_0x12ae49(0x7d3)](_0x4c1569);}}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],'ActSeq_Mechanics_TextPopup',_0x5523c1=>{const _0x31b400=_0x57ed21;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x31b400(0x78b)](_0x5523c1,_0x5523c1);const _0x3dbba1=VisuMZ[_0x31b400(0xa88)](_0x5523c1[_0x31b400(0x7ed)]),_0x550f4b=_0x5523c1[_0x31b400(0x15a)],_0x209319={'textColor':ColorManager[_0x31b400(0x285)](_0x5523c1['TextColor']),'flashColor':_0x5523c1[_0x31b400(0x898)],'flashDuration':_0x5523c1[_0x31b400(0xa7f)]};for(const _0x2f90e8 of _0x3dbba1){if(!_0x2f90e8)continue;_0x2f90e8[_0x31b400(0x885)](_0x550f4b,_0x209319);}}),PluginManager[_0x57ed21(0x53c)](pluginData['name'],_0x57ed21(0x2a9),_0x3d0c98=>{const _0x4e03fc=_0x57ed21;if(!SceneManager[_0x4e03fc(0x9d4)]())return;VisuMZ[_0x4e03fc(0x78b)](_0x3d0c98,_0x3d0c98);const _0xf8b9c5=VisuMZ[_0x4e03fc(0xa88)](_0x3d0c98['Targets']);let _0x36fdce=$gameVariables[_0x4e03fc(0x993)](_0x3d0c98[_0x4e03fc(0x4f1)]);Imported[_0x4e03fc(0x849)]&&_0x3d0c98[_0x4e03fc(0x880)]&&(_0x36fdce=VisuMZ['GroupDigits'](_0x36fdce));const _0x57852a=String(_0x36fdce),_0x38b2a5={'textColor':ColorManager[_0x4e03fc(0x285)](_0x3d0c98[_0x4e03fc(0xb46)]),'flashColor':_0x3d0c98[_0x4e03fc(0x898)],'flashDuration':_0x3d0c98[_0x4e03fc(0xa7f)]};for(const _0x542878 of _0xf8b9c5){if(_0x4e03fc(0x32a)===_0x4e03fc(0x6ab))this[_0x4e03fc(0xbdc)](_0x4e03fc(0xa5f));else{if(!_0x542878)continue;_0x542878[_0x4e03fc(0x885)](_0x57852a,_0x38b2a5);}}}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],'ActSeq_Mechanics_WaitForEffect',_0x29818d=>{const _0xa14356=_0x57ed21;if(!SceneManager['isSceneBattle']())return;const _0x4f3234=$gameTemp[_0xa14356(0x660)]();if(!_0x4f3234)return;_0x4f3234[_0xa14356(0xa92)]('battleEffect');}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x268),_0x221a39=>{const _0x50bb66=_0x57ed21;if(!SceneManager[_0x50bb66(0x9d4)]())return;VisuMZ['ConvertParams'](_0x221a39,_0x221a39);const _0x515483=VisuMZ[_0x50bb66(0xa88)](_0x221a39[_0x50bb66(0x7ed)]);for(const _0x1d08ba of _0x515483){if(!_0x1d08ba)continue;_0x1d08ba[_0x50bb66(0x3bf)]();}}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x13b),_0x58817f=>{const _0x4e46d7=_0x57ed21;if(!SceneManager[_0x4e46d7(0x9d4)]())return;VisuMZ[_0x4e46d7(0x78b)](_0x58817f,_0x58817f);const _0x22e652=VisuMZ[_0x4e46d7(0xa88)](_0x58817f[_0x4e46d7(0x7ed)]),_0x48adb5=_0x58817f[_0x4e46d7(0x4b2)][_0x4e46d7(0x1b2)]()['trim']();let _0x4123ee=_0x58817f['ShowWeapon'];const _0x5d3b70=_0x58817f[_0x4e46d7(0x631)];![_0x4e46d7(0xaf1),_0x4e46d7(0xb34),'swing',_0x4e46d7(0x923)][_0x4e46d7(0x55d)](_0x48adb5)&&(_0x4e46d7(0xb5d)!==_0x4e46d7(0x72b)?_0x4123ee=![]:this[_0x4e46d7(0xb23)]());for(const _0x311049 of _0x22e652){if(!_0x311049)continue;_0x311049[_0x4e46d7(0x94e)](_0x48adb5,_0x4123ee,_0x5d3b70);}}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x632),_0x54178d=>{const _0xc80377=_0x57ed21;if(!SceneManager[_0xc80377(0x9d4)]())return;VisuMZ[_0xc80377(0x78b)](_0x54178d,_0x54178d);const _0x4a24e7=VisuMZ['CreateActionSequenceTargets'](_0x54178d[_0xc80377(0x7ed)]),_0x4f1746=_0x54178d['MotionType'][_0xc80377(0x1b2)]()[_0xc80377(0x1f6)](),_0x20ca80=_0x54178d[_0xc80377(0x370)];for(const _0x131573 of _0x4a24e7){if('fgiOf'==='fgiOf'){if(!_0x131573)continue;if(_0x4f1746[_0xc80377(0x463)](/ATTACK[ ](\d+)/i))_0x131573[_0xc80377(0x746)](Number(RegExp['$1']));else{if(_0x4f1746==='attack'){if(_0xc80377(0x23a)===_0xc80377(0x23a))_0x131573[_0xc80377(0x8e0)]();else{const _0x4a52b8=_0x2903f2[_0xc80377(0xfb)][_0xc80377(0x8d3)][_0xc80377(0x4db)],_0x4e6ce3=this['getConfigValue'](_0xc80377(0x284));return _0x4e6ce3?_0x4a52b8[_0xc80377(0x73d)]:_0x4a52b8['StyleOFF'];}}else _0x131573[_0xc80377(0xbdc)](_0x4f1746);}if(!_0x20ca80)_0x131573[_0xc80377(0x8db)](0x0);else{if(_0x20ca80&&[_0xc80377(0xb34),_0xc80377(0x118),_0xc80377(0x687)][_0xc80377(0x55d)](_0x4f1746)){}}}else{_0x551985[_0xc80377(0xb20)][_0xc80377(0x402)][_0xc80377(0x509)](this),this[_0xc80377(0x750)](),this[_0xc80377(0xbed)]();if(this[_0xc80377(0x3f0)]()==='border')this[_0xc80377(0x5d8)]();}}}),PluginManager[_0x57ed21(0x53c)](pluginData['name'],'ActSeq_Motion_PerformAction',_0x428965=>{const _0x42ede3=_0x57ed21;if(!SceneManager[_0x42ede3(0x9d4)]())return;VisuMZ[_0x42ede3(0x78b)](_0x428965,_0x428965);const _0x7b44a2=BattleManager[_0x42ede3(0x961)];if(!_0x7b44a2)return;if(!_0x7b44a2[_0x42ede3(0x720)]())return;const _0x1f35f2=VisuMZ['CreateActionSequenceTargets'](_0x428965[_0x42ede3(0x7ed)]);for(const _0x5bddec of _0x1f35f2){if('kUDtQ'!=='kUDtQ')return _0x449552[_0x42ede3(0xfb)][_0x42ede3(0x948)][_0x42ede3(0x509)](this);else{if(!_0x5bddec)continue;_0x5bddec['performAction'](_0x7b44a2);}}}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],'ActSeq_Motion_RefreshMotion',_0x365485=>{const _0x40adbb=_0x57ed21;if(!SceneManager[_0x40adbb(0x9d4)]())return;VisuMZ[_0x40adbb(0x78b)](_0x365485,_0x365485);const _0x318e6c=VisuMZ[_0x40adbb(0xa88)](_0x365485[_0x40adbb(0x7ed)]);for(const _0x5f1ecc of _0x318e6c){if(!_0x5f1ecc)continue;if(!_0x5f1ecc[_0x40adbb(0x595)]())continue;_0x5f1ecc[_0x40adbb(0x595)]()[_0x40adbb(0x5c7)]();}}),PluginManager[_0x57ed21(0x53c)](pluginData['name'],'ActSeq_Motion_WaitMotionFrame',_0x4053db=>{const _0x49d7bb=_0x57ed21;if(!SceneManager[_0x49d7bb(0x9d4)]())return;VisuMZ['ConvertParams'](_0x4053db,_0x4053db);const _0x5b590=$gameTemp[_0x49d7bb(0x660)](),_0x5acaee=_0x4053db[_0x49d7bb(0x25b)]*Sprite_Battler['_motionSpeed'];_0x5b590[_0x49d7bb(0x4c7)](_0x5acaee);}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x6da),_0x2533e8=>{const _0x4ddac2=_0x57ed21;if(!SceneManager[_0x4ddac2(0x9d4)]())return;VisuMZ[_0x4ddac2(0x78b)](_0x2533e8,_0x2533e8);const _0x367db8=$gameTemp[_0x4ddac2(0x660)](),_0x3dc5a6=BattleManager['_action'];if(!_0x367db8||!_0x3dc5a6)return;if(!_0x3dc5a6[_0x4ddac2(0x720)]())return;const _0x9ce340=VisuMZ[_0x4ddac2(0xa88)](_0x2533e8[_0x4ddac2(0x7ed)]);for(const _0x561c28 of _0x9ce340){if(!_0x561c28)continue;_0x561c28[_0x4ddac2(0x8bc)](_0x3dc5a6);}if(_0x2533e8[_0x4ddac2(0xbab)])_0x367db8[_0x4ddac2(0xa92)](_0x4ddac2(0x220));}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x560),_0x32d271=>{const _0x126e96=_0x57ed21;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x126e96(0x78b)](_0x32d271,_0x32d271);const _0x9ea61e=$gameTemp[_0x126e96(0x660)](),_0xd29c52=VisuMZ['CreateActionSequenceTargets'](_0x32d271[_0x126e96(0x7ed)]),_0x573dde=_0x32d271[_0x126e96(0x2dd)],_0x10e748=_0x32d271[_0x126e96(0x903)],_0x25325e=_0x32d271['DistanceY'],_0x1d9f97=_0x32d271[_0x126e96(0x69d)],_0x520a03=_0x32d271['FaceDirection'],_0x396c55=_0x32d271[_0x126e96(0x670)],_0xbcb469=_0x32d271[_0x126e96(0x4b2)],_0x418e95=_0x32d271[_0x126e96(0xbab)];if(!_0x9ea61e)return;for(const _0x2bc839 of _0xd29c52){if(_0x126e96(0x85b)==='vtAJZ'){if(!_0x2bc839)continue;let _0x52cace=_0x10e748,_0x331e44=_0x25325e;if(_0x573dde['match'](/horz/i))_0x52cace*=_0x2bc839[_0x126e96(0x8cc)]()?-0x1:0x1;if(_0x573dde[_0x126e96(0x463)](/vert/i))_0x331e44*=_0x2bc839['isActor']()?-0x1:0x1;_0x2bc839[_0x126e96(0xaf9)](_0x52cace,_0x331e44,_0x1d9f97,_0x520a03,_0x396c55),_0x2bc839[_0x126e96(0xbdc)](_0xbcb469);}else{this[_0x126e96(0x606)]=_0x518b8c[_0x126e96(0x919)]||[0x0,0x0,0x0,0x0],this[_0x126e96(0x606)]=_0x2bc83f[_0x126e96(0x5a6)](this[_0x126e96(0x606)]),this[_0x126e96(0x4fd)]=_0x4e95a8[_0x126e96(0x90b)]||0x0;const _0x5c9786=this['fontSize'](),_0x18ddae=_0x338c7f[_0x126e96(0x4eb)](_0x5c9786*0x1e),_0x39993f=this[_0x126e96(0x546)](_0x18ddae,_0x5c9786);_0x39993f[_0x126e96(0x10e)][_0x126e96(0x3c0)]=_0x406996['getColor'](_0x238527[_0x126e96(0x3c0)]),_0x39993f[_0x126e96(0x10e)]['drawText'](_0x3fc5e5,0x0,0x0,_0x18ddae,_0x5c9786,'center'),_0x39993f['dy']=0x0;}}if(_0x418e95)_0x9ea61e[_0x126e96(0xa92)]('battleMove');}),PluginManager[_0x57ed21(0x53c)](pluginData['name'],_0x57ed21(0x876),_0xb7f0be=>{const _0x15a5e7=_0x57ed21;if(!SceneManager[_0x15a5e7(0x9d4)]())return;if(!$gameSystem[_0x15a5e7(0x119)]())return;VisuMZ[_0x15a5e7(0x78b)](_0xb7f0be,_0xb7f0be);const _0x25c100=$gameTemp[_0x15a5e7(0x660)](),_0x52c666=VisuMZ[_0x15a5e7(0xa88)](_0xb7f0be[_0x15a5e7(0x7ed)]),_0x5a71b9=_0xb7f0be[_0x15a5e7(0xbc5)],_0x4ca9e9=_0xb7f0be['OffsetAdjust'],_0x6b65b=_0xb7f0be[_0x15a5e7(0x299)],_0x3cb083=_0xb7f0be[_0x15a5e7(0xbda)],_0x51aca5=_0xb7f0be[_0x15a5e7(0x69d)],_0x4dafa4=_0xb7f0be['FaceDirection'],_0xb59c3=_0xb7f0be['EasingType'],_0x257c18=_0xb7f0be[_0x15a5e7(0x4b2)],_0x43ef8c=_0xb7f0be['WaitForMovement'];if(!_0x25c100)return;for(const _0xaa6919 of _0x52c666){if(!_0xaa6919)continue;let _0x331db3=_0xaa6919[_0x15a5e7(0x595)]()[_0x15a5e7(0xa30)],_0x268d01=_0xaa6919[_0x15a5e7(0x595)]()[_0x15a5e7(0x656)];if(_0x5a71b9[_0x15a5e7(0x463)](/home/i))_0x331db3=_0xaa6919[_0x15a5e7(0x595)]()['_homeX'],_0x268d01=_0xaa6919[_0x15a5e7(0x595)]()[_0x15a5e7(0x214)];else{if(_0x5a71b9[_0x15a5e7(0x463)](/center/i))_0x331db3=Graphics[_0x15a5e7(0x667)]/0x2,_0x268d01=Graphics[_0x15a5e7(0xb3b)]/0x2;else _0x5a71b9['match'](/point (\d+), (\d+)/i)&&(_0x331db3=Number(RegExp['$1']),_0x268d01=Number(RegExp['$2']));}if(_0x4ca9e9['match'](/none/i)){if(_0x15a5e7(0x7bf)===_0x15a5e7(0x228)){if(_0x472164[_0x15a5e7(0x5f3)][_0x15a5e7(0x7bd)]>=1.24){if(this[_0x15a5e7(0x5f8)]){if(!_0x699028[_0x15a5e7(0x5f3)]['CheckVisibleBattleNotetags'](this[_0x15a5e7(0x5f8)],_0x2532dc))return!![];if(!_0x18761f['SkillsStatesCore'][_0x15a5e7(0x1c3)](this['_actor'],_0x3d44d3))return!![];if(!_0x1a438e[_0x15a5e7(0x5f3)]['CheckVisibleSkillNotetags'](this[_0x15a5e7(0x5f8)],_0x7115f6))return!![];}}else{if(!_0x405389[_0x15a5e7(0xb20)]['checkShowHideBattleNotetags'][_0x15a5e7(0x509)](this,_0x459bae))return!![];if(!_0x109d35[_0x15a5e7(0xb20)][_0x15a5e7(0x586)]['call'](this,_0x1429f0))return!![];if(!_0x5205ce[_0x15a5e7(0xb20)]['checkShowHideSkillNotetags'][_0x15a5e7(0x509)](this,_0x1e2907))return!![];}}else _0x331db3+=_0x6b65b,_0x268d01+=_0x3cb083;}else{if(_0x4ca9e9[_0x15a5e7(0x463)](/horz/i)&&_0x4ca9e9[_0x15a5e7(0x463)](/vert/i))_0x331db3+=_0xaa6919[_0x15a5e7(0x8cc)]()?-_0x6b65b:_0x6b65b,_0x268d01+=_0xaa6919[_0x15a5e7(0x8cc)]()?-_0x3cb083:_0x3cb083;else{if(_0x4ca9e9[_0x15a5e7(0x463)](/horz/i))_0x331db3+=_0xaa6919[_0x15a5e7(0x8cc)]()?-_0x6b65b:_0x6b65b,_0x268d01+=_0x3cb083;else _0x4ca9e9[_0x15a5e7(0x463)](/vert/i)&&(_0x331db3+=_0x6b65b,_0x268d01+=_0xaa6919['isActor']()?-_0x3cb083:_0x3cb083);}}_0xaa6919[_0x15a5e7(0xa47)](_0x331db3,_0x268d01,_0x51aca5,_0x4dafa4,_0xb59c3,-0x1),_0xaa6919[_0x15a5e7(0xbdc)](_0x257c18);}if(_0x43ef8c)_0x25c100['setWaitMode'](_0x15a5e7(0x220));}),PluginManager[_0x57ed21(0x53c)](pluginData['name'],_0x57ed21(0xb29),_0x2dcb9d=>{const _0x6b5d5d=_0x57ed21;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ['ConvertParams'](_0x2dcb9d,_0x2dcb9d);const _0x391ad3=$gameTemp[_0x6b5d5d(0x660)](),_0x12a879=VisuMZ[_0x6b5d5d(0xa88)](_0x2dcb9d['Targets1']),_0x830c50=VisuMZ['CreateActionSequenceTargets'](_0x2dcb9d[_0x6b5d5d(0x879)]),_0x5ce57d=_0x2dcb9d[_0x6b5d5d(0x514)];let _0x3590cd=_0x2dcb9d['MeleeDistance'];const _0x5ef19c=_0x2dcb9d[_0x6b5d5d(0x2c9)],_0x32b06c=_0x2dcb9d[_0x6b5d5d(0x299)],_0x5dd4ad=_0x2dcb9d['OffsetY'],_0x1523fe=_0x2dcb9d[_0x6b5d5d(0x69d)],_0x11d631=_0x2dcb9d[_0x6b5d5d(0x75c)],_0x3ce7f2=_0x2dcb9d[_0x6b5d5d(0x670)],_0xb03b2a=_0x2dcb9d[_0x6b5d5d(0x4b2)],_0x5c6321=_0x2dcb9d[_0x6b5d5d(0xbab)],_0x5d1b74=Math[_0x6b5d5d(0x49b)](..._0x830c50[_0x6b5d5d(0x6d9)](_0x59e663=>_0x59e663[_0x6b5d5d(0x595)]()[_0x6b5d5d(0xa30)]-_0x59e663['battler']()[_0x6b5d5d(0x3c6)]()/0x2)),_0x584d8e=Math[_0x6b5d5d(0x952)](..._0x830c50[_0x6b5d5d(0x6d9)](_0x271498=>_0x271498[_0x6b5d5d(0x595)]()[_0x6b5d5d(0xa30)]+_0x271498['battler']()[_0x6b5d5d(0x3c6)]()/0x2)),_0x248931=Math['min'](..._0x830c50['map'](_0x808292=>_0x808292[_0x6b5d5d(0x595)]()[_0x6b5d5d(0x656)]-_0x808292[_0x6b5d5d(0x595)]()[_0x6b5d5d(0xa49)]())),_0x52ac28=Math['max'](..._0x830c50['map'](_0xecc199=>_0xecc199[_0x6b5d5d(0x595)]()['_baseY'])),_0x53ee10=_0x830c50[_0x6b5d5d(0x863)](_0x2da3c3=>_0x2da3c3[_0x6b5d5d(0x8cc)]())[_0x6b5d5d(0x98b)],_0x8213eb=_0x830c50[_0x6b5d5d(0x863)](_0x5ad26a=>_0x5ad26a[_0x6b5d5d(0xa8a)]())['length'];let _0x40c9ab=0x0,_0x3b5325=0x0;if(_0x5ce57d['match'](/front/i))_0x40c9ab=_0x53ee10>=_0x8213eb?_0x5d1b74:_0x584d8e;else{if(_0x5ce57d[_0x6b5d5d(0x463)](/middle/i))_0x6b5d5d(0x894)===_0x6b5d5d(0x894)?(_0x40c9ab=(_0x5d1b74+_0x584d8e)/0x2,_0x3590cd=-0x1):this['wait']();else _0x5ce57d[_0x6b5d5d(0x463)](/back/i)&&(_0x40c9ab=_0x53ee10>=_0x8213eb?_0x584d8e:_0x5d1b74);}if(_0x5ce57d['match'](/head/i)){if(_0x6b5d5d(0xa20)===_0x6b5d5d(0xa20))_0x3b5325=_0x248931;else{const _0x57cf0a=new _0x5c4234();_0x57cf0a[_0x6b5d5d(0x10e)]=_0x53b12e['loadSystem'](_0x25b56e[_0x6b5d5d(0x1e2)]),_0x57cf0a['x']=_0x29a093['StatusWindowAttachmentFrontOffsetX']||0x0,_0x57cf0a['y']=_0x173347[_0x6b5d5d(0x6b9)]||0x0,this[_0x6b5d5d(0x1cc)](_0x57cf0a),this['_frontAttachmentSprite']=_0x57cf0a;}}else{if(_0x5ce57d['match'](/center/i))_0x3b5325=(_0x248931+_0x52ac28)/0x2;else{if(_0x5ce57d['match'](/base/i)){if(_0x6b5d5d(0xa07)!==_0x6b5d5d(0x475))_0x3b5325=_0x52ac28;else{const _0x5c0bae=this[_0x6b5d5d(0x563)](_0x3c3fab);if(_0x5c0bae===_0x6b5d5d(0x9c1))this['drawItemStyleIconText'](_0x1825a7);else _0x5c0bae===_0x6b5d5d(0xa9d)?this[_0x6b5d5d(0x853)](_0x5e9b34):_0x5835f5[_0x6b5d5d(0xb20)][_0x6b5d5d(0x5df)][_0x6b5d5d(0x509)](this,_0xe1c404);}}}}if(!_0x391ad3)return;for(const _0xff8ae5 of _0x12a879){if(!_0xff8ae5)continue;let _0x5295c8=_0x40c9ab,_0xef9d=_0x3b5325;if(_0x5ef19c['match'](/none/i))_0x5295c8+=_0x32b06c,_0xef9d+=_0x5dd4ad;else{if(_0x5ef19c[_0x6b5d5d(0x463)](/horz/i)&&_0x5ef19c[_0x6b5d5d(0x463)](/vert/i))_0x6b5d5d(0xb7b)!==_0x6b5d5d(0x324)?(_0x5295c8+=_0xff8ae5[_0x6b5d5d(0x8cc)]()?-_0x32b06c:_0x32b06c,_0xef9d+=_0xff8ae5[_0x6b5d5d(0x8cc)]()?-_0x5dd4ad:_0x5dd4ad):this['opacity']=0x0;else{if(_0x5ef19c['match'](/horz/i))_0x5295c8+=_0xff8ae5[_0x6b5d5d(0x8cc)]()?-_0x32b06c:_0x32b06c,_0xef9d+=_0x5dd4ad;else _0x5ef19c[_0x6b5d5d(0x463)](/vert/i)&&(_0x5295c8+=_0x32b06c,_0xef9d+=_0xff8ae5[_0x6b5d5d(0x8cc)]()?-_0x5dd4ad:_0x5dd4ad);}}_0xff8ae5[_0x6b5d5d(0xa47)](_0x5295c8,_0xef9d,_0x1523fe,_0x11d631,_0x3ce7f2,_0x3590cd),_0xff8ae5[_0x6b5d5d(0xbdc)](_0xb03b2a);}if(_0x5c6321)_0x391ad3[_0x6b5d5d(0xa92)](_0x6b5d5d(0x220));}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],'ActSeq_Movement_FaceDirection',_0x5054a3=>{const _0x212627=_0x57ed21;if(!SceneManager[_0x212627(0x9d4)]())return;if(!$gameSystem[_0x212627(0x119)]())return;VisuMZ['ConvertParams'](_0x5054a3,_0x5054a3);const _0x3ebb3a=VisuMZ[_0x212627(0xa88)](_0x5054a3[_0x212627(0x7ed)]);let _0x3408af=_0x5054a3[_0x212627(0x905)][_0x212627(0x463)](/back/i);for(const _0x10e57b of _0x3ebb3a){if(!_0x10e57b)continue;if(_0x5054a3[_0x212627(0x905)]['match'](/rand/i))_0x3408af=Math['randomInt'](0x2);_0x10e57b[_0x212627(0x839)](!!_0x3408af);}}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x65d),_0x14d30d=>{const _0x1a4ba9=_0x57ed21;if(!SceneManager[_0x1a4ba9(0x9d4)]())return;if(!$gameSystem[_0x1a4ba9(0x119)]())return;VisuMZ['ConvertParams'](_0x14d30d,_0x14d30d);const _0x298f33=VisuMZ[_0x1a4ba9(0xa88)](_0x14d30d[_0x1a4ba9(0x7ed)]);let _0x2ba0a3=_0x14d30d['Point'];const _0x397099=_0x14d30d[_0x1a4ba9(0xa11)];for(const _0x438f69 of _0x298f33){if(!_0x438f69)continue;let _0x21d87b=_0x438f69[_0x1a4ba9(0x595)]()['_baseX'],_0x33f29e=_0x438f69[_0x1a4ba9(0x595)]()['_baseY'];if(_0x2ba0a3[_0x1a4ba9(0x463)](/home/i)){if('QGheH'!==_0x1a4ba9(0x8eb))_0x21d87b=_0x438f69[_0x1a4ba9(0x595)]()[_0x1a4ba9(0x57c)],_0x33f29e=_0x438f69[_0x1a4ba9(0x595)]()[_0x1a4ba9(0x214)];else{const _0x19b998=this[_0x1a4ba9(0x3f0)]();if(['xp']['includes'](_0x19b998)&&!_0x316da1[_0x1a4ba9(0x119)]()){this[_0x1a4ba9(0x663)](0x0,0x0,0x0,0x0);return;}_0xfb4c57[_0x1a4ba9(0xb20)]['refreshCursor'][_0x1a4ba9(0x509)](this);}}else{if(_0x2ba0a3[_0x1a4ba9(0x463)](/center/i))_0x21d87b=Graphics['boxWidth']/0x2,_0x33f29e=Graphics[_0x1a4ba9(0xb3b)]/0x2;else _0x2ba0a3[_0x1a4ba9(0x463)](/point (\d+), (\d+)/i)&&(_0x21d87b=Number(RegExp['$1']),_0x33f29e=Number(RegExp['$2']));}_0x438f69[_0x1a4ba9(0x9bd)](Math['round'](_0x21d87b),Math[_0x1a4ba9(0x413)](_0x33f29e),!!_0x397099);}}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x958),_0x562737=>{const _0x2fc2c6=_0x57ed21;if(!SceneManager[_0x2fc2c6(0x9d4)]())return;if(!$gameSystem[_0x2fc2c6(0x119)]())return;VisuMZ[_0x2fc2c6(0x78b)](_0x562737,_0x562737);const _0x4e29b5=VisuMZ[_0x2fc2c6(0xa88)](_0x562737['Targets1']),_0x4a39f7=VisuMZ[_0x2fc2c6(0xa88)](_0x562737[_0x2fc2c6(0x879)]),_0x396269=_0x4a39f7['map'](_0x506230=>_0x506230&&_0x506230['battler']()?_0x506230[_0x2fc2c6(0x595)]()[_0x2fc2c6(0xa30)]:0x0)/(_0x4a39f7[_0x2fc2c6(0x98b)]||0x1),_0xf5b2e0=_0x4a39f7[_0x2fc2c6(0x6d9)](_0x2c5621=>_0x2c5621&&_0x2c5621[_0x2fc2c6(0x595)]()?_0x2c5621[_0x2fc2c6(0x595)]()[_0x2fc2c6(0x656)]:0x0)/(_0x4a39f7[_0x2fc2c6(0x98b)]||0x1),_0x2f8ae3=_0x562737[_0x2fc2c6(0xa11)];for(const _0x3d1294 of _0x4e29b5){if(_0x2fc2c6(0x439)!==_0x2fc2c6(0x15e)){if(!_0x3d1294)continue;_0x3d1294[_0x2fc2c6(0x9bd)](Math[_0x2fc2c6(0x413)](_0x396269),Math[_0x2fc2c6(0x413)](_0xf5b2e0),!!_0x2f8ae3);}else return _0x320ef2[_0x2fc2c6(0x7e4)]()[_0x2fc2c6(0x38d)]();}}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x20b),_0x515ebb=>{const _0x1bb55f=_0x57ed21;if(!SceneManager[_0x1bb55f(0x9d4)]())return;VisuMZ[_0x1bb55f(0x78b)](_0x515ebb,_0x515ebb);const _0x127ab3=$gameTemp[_0x1bb55f(0x660)](),_0x56a611=VisuMZ[_0x1bb55f(0xa88)](_0x515ebb[_0x1bb55f(0x7ed)]),_0x3f1502=_0x515ebb[_0x1bb55f(0xab5)],_0x523313=_0x515ebb[_0x1bb55f(0x69d)],_0x2d5a0c=_0x515ebb[_0x1bb55f(0x670)],_0x49b01b=_0x515ebb[_0x1bb55f(0xbac)];if(!_0x127ab3)return;for(const _0x406825 of _0x56a611){if(_0x1bb55f(0xa2c)===_0x1bb55f(0x864))_0x32f562=_0x25d49c;else{if(!_0x406825)continue;_0x406825[_0x1bb55f(0xa86)](_0x3f1502,_0x523313,_0x2d5a0c);}}if(_0x49b01b)_0x127ab3[_0x1bb55f(0xa92)](_0x1bb55f(0xb1b));}),PluginManager[_0x57ed21(0x53c)](pluginData['name'],_0x57ed21(0x417),_0x18be5e=>{const _0x50c6b6=_0x57ed21;if(!SceneManager[_0x50c6b6(0x9d4)]())return;VisuMZ[_0x50c6b6(0x78b)](_0x18be5e,_0x18be5e);const _0x1cbbd4=$gameTemp[_0x50c6b6(0x660)]();if(!_0x1cbbd4)return;const _0x7b9860=VisuMZ['CreateActionSequenceTargets'](_0x18be5e[_0x50c6b6(0x7ed)]);for(const _0x1c0f76 of _0x7b9860){if('ZgdnA'===_0x50c6b6(0xbdb))return _0x554414[_0x50c6b6(0x849)]?_0x1a924f[_0x50c6b6(0x202)]['Settings'][_0x50c6b6(0x432)][_0x50c6b6(0x3c7)]:![];else{if(!_0x1c0f76)continue;_0x1c0f76[_0x50c6b6(0x453)]();}}BattleManager[_0x50c6b6(0xadd)]&&BattleManager[_0x50c6b6(0xadd)][_0x50c6b6(0x5de)]();if(_0x18be5e['WaitForMovement'])_0x1cbbd4['setWaitMode'](_0x50c6b6(0x220));}),PluginManager[_0x57ed21(0x53c)](pluginData['name'],_0x57ed21(0x49f),_0x14ef07=>{const _0x3b219a=_0x57ed21;if(!SceneManager[_0x3b219a(0x9d4)]())return;VisuMZ[_0x3b219a(0x78b)](_0x14ef07,_0x14ef07);const _0x3b9ff5=$gameTemp[_0x3b219a(0x660)](),_0x419ce4=VisuMZ[_0x3b219a(0xa88)](_0x14ef07[_0x3b219a(0x7ed)]),_0x55380b=_0x14ef07['Height'],_0xcd9e45=_0x14ef07[_0x3b219a(0x69d)],_0x15b526=_0x14ef07['WaitForJump'];if(!_0x3b9ff5)return;for(const _0x37b888 of _0x419ce4){if(!_0x37b888)continue;_0x37b888['jumpBattler'](_0x55380b,_0xcd9e45);}if(_0x15b526)_0x3b9ff5[_0x3b219a(0xa92)]('battleJump');}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x68c),_0x3cfab0=>{const _0x477605=_0x57ed21;if(!SceneManager[_0x477605(0x9d4)]())return;if(!$gameSystem[_0x477605(0x119)]())return;VisuMZ[_0x477605(0x78b)](_0x3cfab0,_0x3cfab0);const _0x3b7723=$gameTemp[_0x477605(0x660)](),_0x134331=VisuMZ[_0x477605(0xa88)](_0x3cfab0[_0x477605(0x7ed)]),_0x40f097=_0x3cfab0[_0x477605(0x2dd)],_0x11e21b=_0x3cfab0[_0x477605(0x903)],_0x55864b=_0x3cfab0[_0x477605(0x269)],_0x10714c=_0x3cfab0[_0x477605(0x69d)],_0xbd0f7a=_0x3cfab0[_0x477605(0x75c)],_0x310753=_0x3cfab0[_0x477605(0x670)],_0x402d7c=_0x3cfab0['MotionType'],_0x571d44=_0x3cfab0['WaitForMovement'];if(!_0x3b7723)return;for(const _0x17bea7 of _0x134331){if(_0x477605(0xb9b)!==_0x477605(0x3e0)){if(!_0x17bea7)continue;let _0x9e7549=_0x11e21b,_0x94dc07=_0x55864b;if(_0x40f097[_0x477605(0x463)](/horz/i))_0x9e7549*=_0x17bea7[_0x477605(0x8cc)]()?-0x1:0x1;if(_0x40f097['match'](/vert/i))_0x94dc07*=_0x17bea7[_0x477605(0x8cc)]()?-0x1:0x1;_0x17bea7[_0x477605(0x245)](_0x9e7549,_0x94dc07,_0x10714c,_0xbd0f7a,_0x310753),_0x17bea7[_0x477605(0xbdc)](_0x402d7c);}else this[_0x477605(0x399)](),this[_0x477605(0xa66)]();}if(_0x571d44)_0x3b7723['setWaitMode'](_0x477605(0x220));}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],'ActSeq_Movement_MoveToPoint',_0x4f07e6=>{const _0x4a4e25=_0x57ed21;if(!SceneManager[_0x4a4e25(0x9d4)]())return;if(!$gameSystem[_0x4a4e25(0x119)]())return;VisuMZ[_0x4a4e25(0x78b)](_0x4f07e6,_0x4f07e6);const _0x55cbc2=$gameTemp[_0x4a4e25(0x660)](),_0x4c75fa=VisuMZ[_0x4a4e25(0xa88)](_0x4f07e6[_0x4a4e25(0x7ed)]),_0x5b0689=_0x4f07e6[_0x4a4e25(0xbc5)],_0x7e604=_0x4f07e6[_0x4a4e25(0x2c9)],_0x344ef7=_0x4f07e6['OffsetX'],_0x1d628d=_0x4f07e6[_0x4a4e25(0xbda)],_0x34f5c3=_0x4f07e6['Duration'],_0x271559=_0x4f07e6[_0x4a4e25(0x75c)],_0x32a773=_0x4f07e6['EasingType'],_0x15d094=_0x4f07e6[_0x4a4e25(0x4b2)],_0x5235eb=_0x4f07e6[_0x4a4e25(0xbab)];if(!_0x55cbc2)return;for(const _0x5e3fd8 of _0x4c75fa){if('EDtqU'===_0x4a4e25(0xa32)){if(!_0x5e3fd8)continue;let _0x4e1692=_0x5e3fd8[_0x4a4e25(0x595)]()[_0x4a4e25(0xa30)],_0x1fe76a=_0x5e3fd8[_0x4a4e25(0x595)]()['_baseY'];if(_0x5b0689[_0x4a4e25(0x463)](/home/i))_0x4e1692=_0x5e3fd8[_0x4a4e25(0x595)]()[_0x4a4e25(0x57c)],_0x1fe76a=_0x5e3fd8[_0x4a4e25(0x595)]()['_homeY'];else{if(_0x5b0689[_0x4a4e25(0x463)](/center/i))'AXpwX'==='AXpwX'?(_0x4e1692=Graphics['boxWidth']/0x2,_0x1fe76a=Graphics[_0x4a4e25(0xb3b)]/0x2):_0x2969ff=_0x290960(_0x399a7b['$1']);else _0x5b0689[_0x4a4e25(0x463)](/point (\d+), (\d+)/i)&&(_0x4e1692=Number(RegExp['$1']),_0x1fe76a=Number(RegExp['$2']));}if(_0x7e604['match'](/none/i))_0x4e1692+=_0x344ef7,_0x1fe76a+=_0x1d628d;else{if(_0x7e604[_0x4a4e25(0x463)](/horz/i)&&_0x7e604[_0x4a4e25(0x463)](/vert/i))_0x4e1692+=_0x5e3fd8[_0x4a4e25(0x8cc)]()?-_0x344ef7:_0x344ef7,_0x1fe76a+=_0x5e3fd8['isActor']()?-_0x1d628d:_0x1d628d;else{if(_0x7e604[_0x4a4e25(0x463)](/horz/i))_0x4a4e25(0xa33)===_0x4a4e25(0x485)?_0x595745=_0x9fb20a[this[_0x4a4e25(0x5f8)][_0x4a4e25(0x17c)]()]:(_0x4e1692+=_0x5e3fd8[_0x4a4e25(0x8cc)]()?-_0x344ef7:_0x344ef7,_0x1fe76a+=_0x1d628d);else _0x7e604[_0x4a4e25(0x463)](/vert/i)&&('ZnOxO'==='omDnz'?(_0x458af9['BattleCore'][_0x4a4e25(0x4d5)]&&_0x252076['BattleCore'][_0x4a4e25(0x4d5)]['call'](this,_0x581812),_0x4bf57d[_0x4a4e25(0xfb)][_0x4a4e25(0x255)](_0x5a82a3),_0x221a6a[_0x4a4e25(0xfb)][_0x4a4e25(0xb0c)](_0x1dedbd)):(_0x4e1692+=_0x344ef7,_0x1fe76a+=_0x5e3fd8[_0x4a4e25(0x8cc)]()?-_0x1d628d:_0x1d628d));}}_0x5e3fd8['moveBattlerToPoint'](_0x4e1692,_0x1fe76a,_0x34f5c3,_0x271559,_0x32a773,-0x1),_0x5e3fd8[_0x4a4e25(0xbdc)](_0x15d094);}else{const _0x36671f=_0x55c2a7[_0x4a4e25(0xfb)][_0x4a4e25(0x8d3)]['Enemy'];if(_0x36671f[_0x4a4e25(0x10c)]&&!_0x36671f[_0x4a4e25(0x50a)]){this[_0x4a4e25(0x156)]['opacity']=0x0;return;}this['_stateIconSprite']['x']=0x0,this[_0x4a4e25(0x156)]['x']+=this[_0x4a4e25(0x635)][_0x4a4e25(0x709)](),this[_0x4a4e25(0x156)]['y']=-this[_0x4a4e25(0x10e)]['height']-this[_0x4a4e25(0x156)][_0x4a4e25(0x8b2)]-0x4,this[_0x4a4e25(0x156)]['y']+=this[_0x4a4e25(0x635)][_0x4a4e25(0xb35)](),this[_0x4a4e25(0x156)][_0x4a4e25(0x19e)]['x']=0x1/(this[_0x4a4e25(0x19e)]['x']||0.001),this[_0x4a4e25(0x156)]['scale']['y']=0x1/(this['scale']['y']||0.001),this[_0x4a4e25(0x860)]()&&(this[_0x4a4e25(0x28c)]['_stateSprite']['scale']['x']=-0x1/(this[_0x4a4e25(0x19e)]['x']||0.001),this[_0x4a4e25(0x28c)][_0x4a4e25(0x7e7)][_0x4a4e25(0x19e)]['y']=0x1/(this[_0x4a4e25(0x19e)]['y']||0.001));}}if(_0x5235eb)_0x55cbc2[_0x4a4e25(0xa92)](_0x4a4e25(0x220));}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x8f7),_0x10fb7b=>{const _0x4913e7=_0x57ed21;if(!SceneManager[_0x4913e7(0x9d4)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x4913e7(0x78b)](_0x10fb7b,_0x10fb7b);const _0x524bed=$gameTemp['getLastPluginCommandInterpreter'](),_0x242152=VisuMZ[_0x4913e7(0xa88)](_0x10fb7b['Targets1']),_0x1347d5=VisuMZ[_0x4913e7(0xa88)](_0x10fb7b[_0x4913e7(0x879)]),_0x34969e=_0x10fb7b[_0x4913e7(0x514)];let _0x28f84c=_0x10fb7b['MeleeDistance'];const _0x2cbc90=_0x10fb7b[_0x4913e7(0x2c9)],_0x509949=_0x10fb7b['OffsetX'],_0xd78daf=_0x10fb7b[_0x4913e7(0xbda)],_0x4ab958=_0x10fb7b['Duration'],_0x4247ab=_0x10fb7b[_0x4913e7(0x75c)],_0x422984=_0x10fb7b[_0x4913e7(0x670)],_0x39aaf1=_0x10fb7b['MotionType'],_0xc85d7b=_0x10fb7b[_0x4913e7(0xbab)],_0x321612=Math[_0x4913e7(0x49b)](..._0x1347d5['map'](_0x46f5ee=>_0x46f5ee['battler']()['_baseX']-_0x46f5ee['battler']()[_0x4913e7(0x3c6)]()/0x2)),_0x2848ad=Math['max'](..._0x1347d5[_0x4913e7(0x6d9)](_0x5227cc=>_0x5227cc[_0x4913e7(0x595)]()[_0x4913e7(0xa30)]+_0x5227cc[_0x4913e7(0x595)]()[_0x4913e7(0x3c6)]()/0x2)),_0x518cca=Math[_0x4913e7(0x49b)](..._0x1347d5[_0x4913e7(0x6d9)](_0x228487=>_0x228487[_0x4913e7(0x595)]()[_0x4913e7(0x656)]-_0x228487[_0x4913e7(0x595)]()[_0x4913e7(0xa49)]())),_0x133b51=Math[_0x4913e7(0x952)](..._0x1347d5[_0x4913e7(0x6d9)](_0x296870=>_0x296870[_0x4913e7(0x595)]()[_0x4913e7(0x656)])),_0x25ebf1=_0x1347d5[_0x4913e7(0x863)](_0x936726=>_0x936726[_0x4913e7(0x8cc)]())[_0x4913e7(0x98b)],_0x29cccc=_0x1347d5[_0x4913e7(0x863)](_0x11615a=>_0x11615a[_0x4913e7(0xa8a)]())[_0x4913e7(0x98b)];let _0x31dd5c=0x0,_0x20af85=0x0;if(_0x34969e[_0x4913e7(0x463)](/front/i)){if(_0x4913e7(0x6b2)!==_0x4913e7(0x6b2)){if(_0x33cb84){const _0x4756b9=_0x3381ef['indexOf'](_0xcfbc3b);return _0x4756b9>=0x0?[_0x1e0301[_0x4756b9-0x1]||_0x4628a2]:[_0x20bc26];}}else _0x31dd5c=_0x25ebf1>=_0x29cccc?_0x321612:_0x2848ad;}else{if(_0x34969e['match'](/middle/i))_0x31dd5c=(_0x321612+_0x2848ad)/0x2,_0x28f84c=-0x1;else{if(_0x34969e[_0x4913e7(0x463)](/back/i)){if('zDjfG'===_0x4913e7(0x409))_0x31dd5c=_0x25ebf1>=_0x29cccc?_0x2848ad:_0x321612;else{this[_0x4913e7(0x1f5)](),this[_0x4913e7(0x43c)](),this['updateSpin'](),this[_0x4913e7(0x188)](),_0x3155c1['BattleCore'][_0x4913e7(0x159)][_0x4913e7(0x509)](this),this[_0x4913e7(0x676)]();if(this[_0x4913e7(0x7fb)]===_0x1536ab)this[_0x4913e7(0x419)]();}}}}if(_0x34969e[_0x4913e7(0x463)](/head/i)){if(_0x4913e7(0x345)===_0x4913e7(0x345))_0x20af85=_0x518cca;else{const _0xb8e3d0=this['battleLayoutStyle']();if(_0x160d62&&['xp',_0x4913e7(0x4a2)]['includes'](_0xb8e3d0))this['resizeWindowXPStyle'](_0x3c3cf9);else _0x316cb9&&[_0x4913e7(0x131)][_0x4913e7(0x55d)](_0xb8e3d0)&&(this['resizeWindowBorderStyle'](_0x211040),this[_0x4913e7(0x105)]());_0x1ea36b[_0x4913e7(0xfb)][_0x4913e7(0x766)][_0x4913e7(0x509)](this,_0xa0fb1e),_0x1be26f&&_0x470593[_0x4913e7(0x38d)]()[_0x4913e7(0x98b)]>0x0&&_0x4b5a41['battler']()&&_0x5edbd5[_0x4913e7(0x595)]()[_0x4913e7(0xb83)]();}}else{if(_0x34969e[_0x4913e7(0x463)](/center/i)){if(_0x4913e7(0x79f)==='mxyOE')_0x20af85=(_0x518cca+_0x133b51)/0x2;else return _0xc12331[_0x4913e7(0xfb)]['Game_Action_isForRandom']['call'](this);}else _0x34969e[_0x4913e7(0x463)](/base/i)&&(_0x20af85=_0x133b51);}if(!_0x524bed)return;for(const _0x13db47 of _0x242152){if(!_0x13db47)continue;let _0x2ffc66=_0x31dd5c,_0x26471d=_0x20af85;if(_0x2cbc90[_0x4913e7(0x463)](/none/i))_0x2ffc66+=_0x509949,_0x26471d+=_0xd78daf;else{if(_0x2cbc90[_0x4913e7(0x463)](/horz/i)&&_0x2cbc90[_0x4913e7(0x463)](/vert/i))_0x2ffc66+=_0x13db47[_0x4913e7(0x8cc)]()?-_0x509949:_0x509949,_0x26471d+=_0x13db47[_0x4913e7(0x8cc)]()?-_0xd78daf:_0xd78daf;else{if(_0x2cbc90[_0x4913e7(0x463)](/horz/i))_0x2ffc66+=_0x13db47['isActor']()?-_0x509949:_0x509949,_0x26471d+=_0xd78daf;else _0x2cbc90['match'](/vert/i)&&(_0x4913e7(0x267)===_0x4913e7(0xb42)?(_0x98bbfd=(_0x2c8714+_0x1a758f)/0x2,_0x392db0=-0x1):(_0x2ffc66+=_0x509949,_0x26471d+=_0x13db47['isActor']()?-_0xd78daf:_0xd78daf));}}_0x13db47[_0x4913e7(0x7f4)](_0x2ffc66,_0x26471d,_0x4ab958,_0x4247ab,_0x422984,_0x28f84c),_0x13db47[_0x4913e7(0xbdc)](_0x39aaf1);}if(_0xc85d7b)_0x524bed['setWaitMode'](_0x4913e7(0x220));}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],'ActSeq_Movement_Opacity',_0x533433=>{const _0x4b6111=_0x57ed21;if(!SceneManager[_0x4b6111(0x9d4)]())return;VisuMZ[_0x4b6111(0x78b)](_0x533433,_0x533433);const _0x14bcfc=$gameTemp[_0x4b6111(0x660)](),_0x571e62=VisuMZ[_0x4b6111(0xa88)](_0x533433['Targets']),_0x422a5e=_0x533433[_0x4b6111(0xabf)],_0x5c2598=_0x533433[_0x4b6111(0x69d)],_0x20e3b2=_0x533433[_0x4b6111(0x670)],_0x25de2e=_0x533433[_0x4b6111(0xb71)];if(!_0x14bcfc)return;for(const _0x5ca552 of _0x571e62){if(!_0x5ca552)continue;_0x5ca552[_0x4b6111(0x5f2)](_0x422a5e,_0x5c2598,_0x20e3b2);}if(_0x25de2e)_0x14bcfc['setWaitMode'](_0x4b6111(0x9b5));}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0xa46),_0x4c816e=>{const _0x51cc80=_0x57ed21;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x51cc80(0x78b)](_0x4c816e,_0x4c816e);const _0x5e258a=$gameTemp[_0x51cc80(0x660)](),_0x589d94=VisuMZ[_0x51cc80(0xa88)](_0x4c816e[_0x51cc80(0x7ed)]),_0x5c73e0=_0x4c816e[_0x51cc80(0x243)],_0x509f31=_0x4c816e[_0x51cc80(0x3bb)],_0xa13e3e=_0x4c816e['Duration'],_0x3582e2=_0x4c816e[_0x51cc80(0x670)],_0x2fe786=_0x4c816e[_0x51cc80(0x3ae)];if(!_0x5e258a)return;for(const _0x2526a6 of _0x589d94){if(_0x51cc80(0x6ce)===_0x51cc80(0x6ce)){if(!_0x2526a6)continue;_0x2526a6[_0x51cc80(0x824)](_0x5c73e0,_0x509f31,_0xa13e3e,_0x3582e2);}else{_0x14def1[_0x51cc80(0xbc3)](_0xf2b121[0x0],_0x38d2bf[0x1],_0x183142[0x2]);if(_0x3a495b[0x3])this[_0x51cc80(0x4c7)](_0x2e7281[0x2]);return!![];}}if(_0x2fe786)_0x5e258a['setWaitMode'](_0x51cc80(0xba6));}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],'ActSeq_Movement_Skew',_0xd37c4e=>{const _0x2864f0=_0x57ed21;if(!SceneManager[_0x2864f0(0x9d4)]())return;VisuMZ['ConvertParams'](_0xd37c4e,_0xd37c4e);const _0x267894=$gameTemp[_0x2864f0(0x660)](),_0x37a14f=VisuMZ[_0x2864f0(0xa88)](_0xd37c4e[_0x2864f0(0x7ed)]),_0x4aa589=_0xd37c4e[_0x2864f0(0x1bc)],_0x5944a6=_0xd37c4e['SkewY'],_0x535497=_0xd37c4e[_0x2864f0(0x69d)],_0x4e64ec=_0xd37c4e['EasingType'],_0x2d5684=_0xd37c4e[_0x2864f0(0x887)];if(!_0x267894)return;for(const _0x1ccdc6 of _0x37a14f){if(_0x2864f0(0x7d5)!==_0x2864f0(0x7d5)){if(!this[_0x2864f0(0x635)])return![];if(this[_0x2864f0(0x635)][_0x2864f0(0x8cc)]())return!![];if(this[_0x2864f0(0x635)][_0x2864f0(0x983)]())return![];if(this[_0x2864f0(0x772)]<=0x0)return![];const _0x4a41ce=this[_0x2864f0(0x635)]['enemy']()[_0x2864f0(0x75a)];if(_0x4a41ce['match'](/<SHOW HP GAUGE>/i))return!![];if(_0x4a41ce[_0x2864f0(0x463)](/<HIDE HP GAUGE>/i))return![];const _0x4615b1=_0x5f2517[_0x2864f0(0xfb)][_0x2864f0(0x8d3)][_0x2864f0(0x51a)];if(_0x4615b1[_0x2864f0(0x1ba)]){if(_0x4615b1[_0x2864f0(0x5a9)]&&_0x2739fe[_0x2864f0(0x5e7)]())return!![];if(this['_battler'][_0x2864f0(0x784)])return![];return this[_0x2864f0(0x635)][_0x2864f0(0x8c2)]();}return!![];}else{if(!_0x1ccdc6)continue;_0x1ccdc6[_0x2864f0(0x382)](_0x4aa589,_0x5944a6,_0x535497,_0x4e64ec);}}if(_0x2d5684)_0x267894[_0x2864f0(0xa92)]('battleSpriteSkew');}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x955),_0x20720f=>{const _0x427e2b=_0x57ed21;if(!SceneManager[_0x427e2b(0x9d4)]())return;VisuMZ[_0x427e2b(0x78b)](_0x20720f,_0x20720f);const _0x571b7a=$gameTemp[_0x427e2b(0x660)](),_0x4daf9c=VisuMZ['CreateActionSequenceTargets'](_0x20720f[_0x427e2b(0x7ed)]),_0x180394=_0x20720f['Angle'],_0x1bb5a6=_0x20720f[_0x427e2b(0x69d)],_0x21d6dd=_0x20720f[_0x427e2b(0x670)],_0xebb142=_0x20720f[_0x427e2b(0x2fe)],_0x29cbf9=_0x20720f[_0x427e2b(0x69e)];if(!_0x571b7a)return;for(const _0x48ce49 of _0x4daf9c){if(!_0x48ce49)continue;_0x48ce49[_0x427e2b(0x125)](_0x180394,_0x1bb5a6,_0x21d6dd,_0xebb142);}if(_0x29cbf9)_0x571b7a[_0x427e2b(0xa92)](_0x427e2b(0x273));}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],'ActSeq_Movement_WaitForFloat',_0x137707=>{const _0x131279=_0x57ed21;if(!SceneManager[_0x131279(0x9d4)]())return;const _0x1c0e94=$gameTemp[_0x131279(0x660)]();if(!_0x1c0e94)return;_0x1c0e94[_0x131279(0xa92)](_0x131279(0xb1b));}),PluginManager[_0x57ed21(0x53c)](pluginData['name'],_0x57ed21(0x4cd),_0x548804=>{const _0x11ba7d=_0x57ed21;if(!SceneManager['isSceneBattle']())return;const _0xea563=$gameTemp[_0x11ba7d(0x660)]();if(!_0xea563)return;_0xea563[_0x11ba7d(0xa92)]('battleJump');}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],'ActSeq_Movement_WaitForMovement',_0x345c7c=>{const _0x2b63d7=_0x57ed21;if(!SceneManager[_0x2b63d7(0x9d4)]())return;const _0x431bd6=$gameTemp[_0x2b63d7(0x660)]();if(!_0x431bd6)return;_0x431bd6['setWaitMode'](_0x2b63d7(0x220));}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x8e3),_0x2c5f6f=>{const _0x2660e2=_0x57ed21;if(!SceneManager[_0x2660e2(0x9d4)]())return;const _0x1628ac=$gameTemp[_0x2660e2(0x660)]();if(!_0x1628ac)return;_0x1628ac[_0x2660e2(0xa92)](_0x2660e2(0x9b5));}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x9c9),_0x40f6f2=>{const _0x290212=_0x57ed21;if(!SceneManager[_0x290212(0x9d4)]())return;const _0x154789=$gameTemp[_0x290212(0x660)]();if(!_0x154789)return;_0x154789['setWaitMode'](_0x290212(0xba6));}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0xb70),_0x271873=>{const _0x23640d=_0x57ed21;if(!SceneManager['isSceneBattle']())return;const _0x1941d7=$gameTemp[_0x23640d(0x660)]();if(!_0x1941d7)return;_0x1941d7[_0x23640d(0xa92)](_0x23640d(0x2a2));}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x364),_0x3ca9d7=>{const _0x4dac3f=_0x57ed21;if(!SceneManager[_0x4dac3f(0x9d4)]())return;const _0x1e2b8c=$gameTemp[_0x4dac3f(0x660)]();if(!_0x1e2b8c)return;_0x1e2b8c[_0x4dac3f(0xa92)](_0x4dac3f(0x273));}),PluginManager[_0x57ed21(0x53c)](pluginData['name'],_0x57ed21(0x6e8),_0x1eba52=>{const _0x2d358f=_0x57ed21;if(!SceneManager[_0x2d358f(0x9d4)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x2d358f(0x78b)](_0x1eba52,_0x1eba52);const _0x435159=$gameTemp[_0x2d358f(0x660)](),_0x3743a9=_0x1eba52[_0x2d358f(0x936)];if(!_0x435159)return;const _0x56e6ba=BattleManager[_0x2d358f(0x837)];if(!_0x56e6ba)return;_0x56e6ba[_0x2d358f(0x158)](_0x1eba52);if(_0x3743a9)_0x435159['setWaitMode'](_0x2d358f(0x4fc));}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0xaf5),_0x4bab27=>{const _0x219e86=_0x57ed21;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x219e86(0x3de)])return;VisuMZ['ConvertParams'](_0x4bab27,_0x4bab27);const _0x7a0cd0=$gameTemp[_0x219e86(0x660)](),_0x23c024=_0x4bab27[_0x219e86(0x936)];if(!_0x7a0cd0)return;const _0x13922a=BattleManager[_0x219e86(0x837)];if(!_0x13922a)return;_0x13922a[_0x219e86(0x158)](_0x4bab27);if(_0x23c024)_0x7a0cd0[_0x219e86(0xa92)]('battleProjectiles');}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x304),_0xb909c4=>{const _0x281fba=_0x57ed21;if(!SceneManager[_0x281fba(0x9d4)]())return;if(!Imported[_0x281fba(0x3de)])return;VisuMZ['ConvertParams'](_0xb909c4,_0xb909c4);const _0x439553=$gameTemp[_0x281fba(0x660)](),_0xcb0a98=_0xb909c4[_0x281fba(0x936)];if(!_0x439553)return;const _0x580bf0=BattleManager['_spriteset'];if(!_0x580bf0)return;_0x580bf0[_0x281fba(0x158)](_0xb909c4);if(_0xcb0a98)_0x439553['setWaitMode'](_0x281fba(0x4fc));}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x868),_0x1c378b=>{const _0x2832c2=_0x57ed21;if(!SceneManager[_0x2832c2(0x9d4)]())return;if(!Imported[_0x2832c2(0xb6a)])return;VisuMZ['ConvertParams'](_0x1c378b,_0x1c378b);const _0x1dbc5f=$gameTemp['getLastPluginCommandInterpreter'](),_0x5806de=_0x1c378b[_0x2832c2(0x887)];if(!_0x1dbc5f)return;$gameScreen['setBattleSkew'](_0x1c378b[_0x2832c2(0x1bc)],_0x1c378b['SkewY'],_0x1c378b[_0x2832c2(0x69d)],_0x1c378b[_0x2832c2(0x670)]);if(_0x5806de)_0x1dbc5f[_0x2832c2(0xa92)](_0x2832c2(0x163));}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x835),_0x43dc8f=>{const _0x166bfd=_0x57ed21;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x166bfd(0x78b)](_0x43dc8f,_0x43dc8f);const _0x172405=$gameTemp[_0x166bfd(0x660)](),_0x5c1f17=_0x43dc8f[_0x166bfd(0x887)];if(!_0x172405)return;$gameScreen[_0x166bfd(0xa97)](0x0,0x0,_0x43dc8f[_0x166bfd(0x69d)],_0x43dc8f['EasingType']);if(_0x5c1f17)_0x172405[_0x166bfd(0xa92)](_0x166bfd(0x163));}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0xb32),_0x546f31=>{const _0x2d15b3=_0x57ed21;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x286f8a=$gameTemp[_0x2d15b3(0x660)]();if(!_0x286f8a)return;_0x286f8a[_0x2d15b3(0xa92)]('battleSkew');}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],'ActSeq_Target_CurrentIndex',_0x645fc9=>{const _0x454d67=_0x57ed21;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x645fc9,_0x645fc9);const _0x1bd01c=$gameTemp['getLastPluginCommandInterpreter'](),_0x2fe49e=_0x645fc9[_0x454d67(0x1bf)],_0x570273=_0x645fc9[_0x454d67(0x856)];if(!_0x1bd01c)return;BattleManager['_targetIndex']=_0x2fe49e,BattleManager['_target']=BattleManager[_0x454d67(0x8fc)]?BattleManager[_0x454d67(0x8fc)][BattleManager['_targetIndex']]||null:null,BattleManager[_0x454d67(0x2f4)]&&_0x570273['toUpperCase']()[_0x454d67(0x1f6)]()!==_0x454d67(0x1d8)&&(_0x454d67(0x147)===_0x454d67(0x147)?_0x1bd01c['command119']([_0x570273]):this[_0x454d67(0xb25)]=(this[_0x454d67(0xb25)]*(_0x2a2297-0x1)+this['_targetAngle'])/_0x1db9f7);}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0xb3d),_0x5474bc=>{const _0xa27adf=_0x57ed21;if(!SceneManager[_0xa27adf(0x9d4)]())return;VisuMZ[_0xa27adf(0x78b)](_0x5474bc,_0x5474bc);const _0x62b5be=$gameTemp['getLastPluginCommandInterpreter'](),_0x42e81f=_0x5474bc[_0xa27adf(0x856)];if(!_0x62b5be)return;BattleManager[_0xa27adf(0xad0)]++,BattleManager[_0xa27adf(0x2f4)]=BattleManager[_0xa27adf(0x8fc)][BattleManager[_0xa27adf(0xad0)]]||null,BattleManager[_0xa27adf(0x2f4)]&&_0x42e81f['toUpperCase']()[_0xa27adf(0x1f6)]()!==_0xa27adf(0x1d8)&&_0x62b5be['command119']([_0x42e81f]);}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x8aa),_0x4371ed=>{const _0x1e0729=_0x57ed21;if(!SceneManager[_0x1e0729(0x9d4)]())return;VisuMZ['ConvertParams'](_0x4371ed,_0x4371ed);const _0x5ea972=$gameTemp[_0x1e0729(0x660)](),_0x4cccc9=_0x4371ed[_0x1e0729(0x856)];if(!_0x5ea972)return;BattleManager[_0x1e0729(0xad0)]--,BattleManager[_0x1e0729(0x2f4)]=BattleManager[_0x1e0729(0x8fc)][BattleManager[_0x1e0729(0xad0)]]||null;if(BattleManager[_0x1e0729(0x2f4)]&&_0x4cccc9['toUpperCase']()[_0x1e0729(0x1f6)]()!==_0x1e0729(0x1d8)){if(_0x1e0729(0x99b)===_0x1e0729(0x99b))_0x5ea972[_0x1e0729(0x2eb)]([_0x4cccc9]);else return![];}}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],'ActSeq_Target_RandTarget',_0x346a1f=>{const _0x4b5775=_0x57ed21;if(!SceneManager[_0x4b5775(0x9d4)]())return;VisuMZ[_0x4b5775(0x78b)](_0x346a1f,_0x346a1f);const _0x2d926f=$gameTemp[_0x4b5775(0x660)](),_0x1186f4=_0x346a1f[_0x4b5775(0x4e0)],_0x2d2d9c=_0x346a1f[_0x4b5775(0x856)];if(!_0x2d926f)return;const _0x1efd1c=BattleManager[_0x4b5775(0xad0)];for(;;){BattleManager[_0x4b5775(0xad0)]=Math['randomInt'](BattleManager[_0x4b5775(0x8fc)][_0x4b5775(0x98b)]);if(!_0x1186f4)break;if(BattleManager['_targetIndex']!==_0x1efd1c)break;if(BattleManager[_0x4b5775(0x8fc)][_0x4b5775(0x98b)]<=0x1){if(_0x4b5775(0xa59)!=='vOxLr'){BattleManager['_targetIndex']=0x0;break;}else{if(!this[_0x4b5775(0x635)])return;if(!this['_hpGaugeSprite'])return;const _0x5cb065=_0x1587c6[_0x4b5775(0xfb)][_0x4b5775(0x8d3)][_0x4b5775(0x51a)],_0x10b243=this[_0x4b5775(0x20f)];_0x10b243['visible']=this[_0x4b5775(0x74d)]();const _0x29ba69=_0x5cb065['OffsetX'],_0x14e233=_0x5cb065['OffsetY'];_0x10b243['x']=_0x29ba69,_0x10b243['x']+=this[_0x4b5775(0x635)]['battleUIOffsetX'](),_0x10b243['y']=-this[_0x4b5775(0x8b2)]+_0x14e233,_0x10b243['y']+=this[_0x4b5775(0x635)][_0x4b5775(0xb35)](),_0x1b2a71['ANTI_TINT_UI']&&_0x3ccf5e[_0x4b5775(0x34f)][_0x4b5775(0x837)]&&(_0x10b243['x']+=this['x'],_0x10b243['y']+=this['y']);}}}BattleManager[_0x4b5775(0x2f4)]=BattleManager[_0x4b5775(0x8fc)][BattleManager[_0x4b5775(0xad0)]]||null;if(BattleManager['_target']&&_0x2d2d9c[_0x4b5775(0xaaa)]()['trim']()!==_0x4b5775(0x1d8)){if(_0x4b5775(0x3d1)===_0x4b5775(0xf5))return this[_0x4b5775(0x14d)][_0x426636];else _0x2d926f[_0x4b5775(0x2eb)]([_0x2d2d9c]);}}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x6bf),_0xe0538b=>{const _0x44cd85=_0x57ed21;if(!SceneManager[_0x44cd85(0x9d4)]())return;VisuMZ[_0x44cd85(0x78b)](_0xe0538b,_0xe0538b);const _0x4a6acb=VisuMZ['CreateActionSequenceTargets'](_0xe0538b['Targets']);for(const _0x585b17 of _0x4a6acb){if(!_0x585b17)continue;if(!_0x585b17[_0x44cd85(0x8cc)]())continue;_0x585b17[_0x44cd85(0x884)]();}}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],'ActSeq_Weapon_NextActiveWeapon',_0x11645e=>{const _0x4b6de3=_0x57ed21;if(!SceneManager[_0x4b6de3(0x9d4)]())return;VisuMZ[_0x4b6de3(0x78b)](_0x11645e,_0x11645e);const _0x405042=$gameTemp['getLastPluginCommandInterpreter']();let _0x1100ad=![];const _0x3a3c05=_0x11645e[_0x4b6de3(0x856)],_0x2a1bfb=VisuMZ[_0x4b6de3(0xa88)](_0x11645e[_0x4b6de3(0x7ed)]);for(const _0x4c582c of _0x2a1bfb){if(_0x4b6de3(0x2cb)==='AghuU'){if(!_0x4c582c)continue;if(!_0x4c582c[_0x4b6de3(0x8cc)]())continue;_0x4c582c['nextActiveWeaponSlot'](),_0x4c582c['weapons']()[_0x4b6de3(0x98b)]>0x0?_0x4b6de3(0x744)!==_0x4b6de3(0xaa1)?_0x1100ad=!![]:this[_0x4b6de3(0x622)]()?this[_0x4b6de3(0x942)]():(this[_0x4b6de3(0x7f9)](),_0x8ea517['BattleCore'][_0x4b6de3(0xbb3)][_0x4b6de3(0x509)](this)):_0x4c582c[_0x4b6de3(0x884)]();}else this['_activeWeaponSlot']=_0xd09ebb||0x0,this[_0x4b6de3(0xeb)]={};}_0x1100ad&&_0x3a3c05[_0x4b6de3(0xaaa)]()[_0x4b6de3(0x1f6)]()!==_0x4b6de3(0x1d8)&&(_0x4b6de3(0xa35)!==_0x4b6de3(0x645)?_0x405042[_0x4b6de3(0x2eb)]([_0x3a3c05]):(_0x53a339(_0x1b042e[_0x4b6de3(0x455)]('STB')),_0x3e5a57[_0x4b6de3(0x53e)]()));}),PluginManager[_0x57ed21(0x53c)](pluginData['name'],_0x57ed21(0xba0),_0x1cf75c=>{const _0x17baf2=_0x57ed21;if(!SceneManager[_0x17baf2(0x9d4)]())return;VisuMZ[_0x17baf2(0x78b)](_0x1cf75c,_0x1cf75c);let _0x72b589=_0x1cf75c[_0x17baf2(0x3e7)];_0x72b589--,_0x72b589=Math['max'](_0x72b589,0x0);const _0x469116=VisuMZ[_0x17baf2(0xa88)](_0x1cf75c[_0x17baf2(0x7ed)]);for(const _0x31e781 of _0x469116){if(!_0x31e781)continue;if(!_0x31e781[_0x17baf2(0x8cc)]())continue;_0x31e781['setActiveWeaponSlot'](_0x72b589);}}),PluginManager[_0x57ed21(0x53c)](pluginData[_0x57ed21(0xb1c)],'ActSeq_Zoom_Scale',_0x26687d=>{const _0x3fed87=_0x57ed21;if(!SceneManager[_0x3fed87(0x9d4)]())return;if(!Imported[_0x3fed87(0xb6a)])return;VisuMZ[_0x3fed87(0x78b)](_0x26687d,_0x26687d);const _0x246346=$gameTemp[_0x3fed87(0x660)](),_0x445700=_0x26687d['WaitForZoom'];if(!_0x246346)return;$gameScreen[_0x3fed87(0x2b4)](_0x26687d[_0x3fed87(0x759)],_0x26687d[_0x3fed87(0x69d)],_0x26687d[_0x3fed87(0x670)]);if(_0x445700)_0x246346[_0x3fed87(0xa92)](_0x3fed87(0x8d5));}),PluginManager['registerCommand'](pluginData[_0x57ed21(0xb1c)],_0x57ed21(0x596),_0x112614=>{const _0x30e14a=_0x57ed21;if(!SceneManager[_0x30e14a(0x9d4)]())return;if(!Imported[_0x30e14a(0xb6a)])return;VisuMZ['ConvertParams'](_0x112614,_0x112614);const _0x40e675=$gameTemp[_0x30e14a(0x660)](),_0x2af10d=_0x112614[_0x30e14a(0x6ba)];if(!_0x40e675)return;$gameScreen[_0x30e14a(0x2b4)](0x1,_0x112614[_0x30e14a(0x69d)],_0x112614[_0x30e14a(0x670)]);if(_0x2af10d)_0x40e675[_0x30e14a(0xa92)](_0x30e14a(0x8d5));}),PluginManager[_0x57ed21(0x53c)](pluginData['name'],_0x57ed21(0x897),_0x22b56c=>{const _0x3dbe48=_0x57ed21;if(!SceneManager[_0x3dbe48(0x9d4)]())return;if(!Imported[_0x3dbe48(0xb6a)])return;const _0x1a41ed=$gameTemp[_0x3dbe48(0x660)]();if(!_0x1a41ed)return;_0x1a41ed[_0x3dbe48(0xa92)]('battleZoom');}),VisuMZ['BattleCore'][_0x57ed21(0x340)]=Scene_Boot[_0x57ed21(0xb20)][_0x57ed21(0x1b8)],Scene_Boot[_0x57ed21(0xb20)][_0x57ed21(0x1b8)]=function(){const _0x2cfca4=_0x57ed21;this[_0x2cfca4(0x816)](),this['process_VisuMZ_BattleCore_PluginParams'](),this[_0x2cfca4(0xb15)](),this['process_VisuMZ_BattleCore_CreateRegExp'](),VisuMZ[_0x2cfca4(0xfb)]['Scene_Boot_onDatabaseLoaded'][_0x2cfca4(0x509)](this),this[_0x2cfca4(0xb12)](),this['process_VisuMZ_BattleCore_BaseTroops'](),this[_0x2cfca4(0x7ba)](),this['process_VisuMZ_BattleCore_CommonEventKeys']();},Scene_Boot[_0x57ed21(0xb20)][_0x57ed21(0xb12)]=function(){const _0x4a914e=_0x57ed21;if(VisuMZ[_0x4a914e(0x985)])return;this[_0x4a914e(0x397)](),this[_0x4a914e(0xa4d)](),this['process_VisuMZ_BattleCore_jsFunctions']();},Scene_Boot[_0x57ed21(0xb20)]['process_VisuMZ_BattleCore_Failsafes']=function(){const _0x2bf6e3=_0x57ed21,_0x1ba1c8=$dataSystem[_0x2bf6e3(0x38f)][_0x2bf6e3(0x98b)];for(let _0x2e9370=0x0;_0x2e9370<_0x1ba1c8;_0x2e9370++){if(_0x2bf6e3(0x66c)===_0x2bf6e3(0x76d)){const _0x549264=_0x4836f5[_0x2bf6e3(0x5a6)](_0x300fba);_0x549264[_0x2bf6e3(0x178)]=![],_0x549264['evaded']=![],_0x549264[_0x2bf6e3(0x108)]=![],this[_0x2bf6e3(0xab8)]['push'](_0x549264);}else{const _0xcfb3ee=$dataSystem[_0x2bf6e3(0x517)][_0x2e9370];if(_0xcfb3ee)continue;$dataSystem['attackMotions'][_0x2e9370]={'type':0x1,'weaponImageId':0x1};}}},Scene_Boot[_0x57ed21(0xb20)]['process_VisuMZ_BattleCore_PluginParams']=function(){const _0x31a524=_0x57ed21,_0x49e401=VisuMZ[_0x31a524(0xfb)][_0x31a524(0x8d3)];_0x49e401[_0x31a524(0x328)]['PopupPosition']===undefined&&(_0x49e401[_0x31a524(0x328)][_0x31a524(0x800)]=_0x31a524(0x54d)),_0x49e401[_0x31a524(0x929)][_0x31a524(0x31a)]===undefined&&(_0x31a524(0x629)===_0x31a524(0x629)?_0x49e401[_0x31a524(0x929)][_0x31a524(0x31a)]=![]:(this['_cache']={},_0x349c48['BattleCore'][_0x31a524(0x9ef)]['call'](this))),_0x49e401['Enemy'][_0x31a524(0x31a)]===undefined&&(_0x31a524(0x7fa)!==_0x31a524(0x7fa)?this[_0x31a524(0xa92)](_0x31a524(0xa4e)):_0x49e401[_0x31a524(0x313)][_0x31a524(0x31a)]=!![]),_0x49e401[_0x31a524(0x929)][_0x31a524(0xaac)]===undefined&&(_0x49e401[_0x31a524(0x929)][_0x31a524(0xaac)]=![]),_0x49e401[_0x31a524(0x929)][_0x31a524(0x62d)]===undefined&&(_0x31a524(0x7af)!=='NEOOU'?_0x49e401[_0x31a524(0x929)][_0x31a524(0x62d)]=!![]:_0x5354f0[_0x31a524(0x2e5)]&&(this[_0x31a524(0x46e)](_0x31a524(0x17f)),this[_0x31a524(0x46e)](_0x31a524(0xb03)),this['push'](_0x31a524(0xbc1)),this['push'](_0x31a524(0x972),_0x41dafb['message4']['format'](_0x2fba84[_0x31a524(0xb1c)]())),this['push'](_0x31a524(0x4c7))));},VisuMZ['DamageStyles']={},Scene_Boot[_0x57ed21(0xb20)]['process_VisuMZ_BattleCore_DamageStyles']=function(){const _0x4ffbba=_0x57ed21;for(const _0x5398ea of VisuMZ[_0x4ffbba(0xfb)][_0x4ffbba(0x8d3)][_0x4ffbba(0x328)]['DamageStyleList']){if(!_0x5398ea)continue;const _0x5279e3=_0x5398ea[_0x4ffbba(0x4ae)]['toUpperCase']()[_0x4ffbba(0x1f6)]();VisuMZ[_0x4ffbba(0xada)][_0x5279e3]=_0x5398ea;}},VisuMZ['BattleCore'][_0x57ed21(0x38a)]={},Scene_Boot[_0x57ed21(0xb20)][_0x57ed21(0x7c7)]=function(){const _0x130c6a=_0x57ed21,_0x1125aa=VisuMZ[_0x130c6a(0xfb)][_0x130c6a(0x38a)],_0x324dcc=_0x130c6a(0xa14),_0x208f81=[[_0x130c6a(0x7ab),'PRE-'],[_0x130c6a(0x2b9),_0x130c6a(0x435)]],_0x6e6e01=[[_0x130c6a(0x40d),_0x130c6a(0x8b1)],[_0x130c6a(0x14e),_0x130c6a(0xba4)]],_0x5242a8=[['',''],['AsUser',_0x130c6a(0x975)],[_0x130c6a(0x86b),_0x130c6a(0x139)]];for(const _0x2e86e3 of _0x6e6e01){for(const _0xc94c58 of _0x5242a8){if(_0x130c6a(0x3f3)===_0x130c6a(0x3f3))for(const _0x38fd32 of _0x208f81){const _0x3e29b7=_0x2e86e3[0x0]['format'](_0x38fd32[0x0],_0xc94c58[0x0]),_0x726381=_0x2e86e3[0x1][_0x130c6a(0x455)](_0x38fd32[0x1],_0xc94c58[0x1])[_0x130c6a(0x1f6)](),_0x5028ea=new RegExp(_0x324dcc[_0x130c6a(0x455)](_0x726381),'i');_0x1125aa[_0x3e29b7]=_0x5028ea;}else this[_0x130c6a(0x9ea)][_0x130c6a(0x5be)](),this[_0x130c6a(0x3c5)][_0x130c6a(0x715)](),this[_0x130c6a(0xade)][_0x130c6a(0x215)]();}}const _0x5ae2df=[['%1StartActionJS',_0x130c6a(0xa12)],[_0x130c6a(0x80c),_0x130c6a(0x6ed)]];for(const _0x35182e of _0x5ae2df){for(const _0x3f12b0 of _0x208f81){if(_0x130c6a(0x762)!==_0x130c6a(0x9cd)){const _0x4463fa=_0x35182e[0x0][_0x130c6a(0x455)](_0x3f12b0[0x0]),_0x8921b=_0x35182e[0x1]['format'](_0x3f12b0[0x1]),_0x209c58=new RegExp(_0x324dcc[_0x130c6a(0x455)](_0x8921b),'i');_0x1125aa[_0x4463fa]=_0x209c58;}else this[_0x130c6a(0x7a2)]();}}const _0x4cd52b=[[_0x130c6a(0x914),'JS\x20%1START\x20BATTLE'],[_0x130c6a(0x620),_0x130c6a(0x306)],[_0x130c6a(0x7c1),_0x130c6a(0x3f8)],[_0x130c6a(0x28e),'JS\x20BATTLE\x20DEFEAT'],[_0x130c6a(0x590),_0x130c6a(0xaf2)],[_0x130c6a(0xabc),_0x130c6a(0x84b)],[_0x130c6a(0x208),_0x130c6a(0x1e6)],['%1EndTurnJS',_0x130c6a(0x7e9)],[_0x130c6a(0x270),_0x130c6a(0x25f)]];for(const _0x45b97e of _0x4cd52b){if(_0x130c6a(0x2e8)===_0x130c6a(0x2e8))for(const _0x1005ad of _0x208f81){const _0x432842=_0x45b97e[0x0]['format'](_0x1005ad[0x0]),_0x145deb=_0x45b97e[0x1][_0x130c6a(0x455)](_0x1005ad[0x1]),_0x5f5078=new RegExp(_0x324dcc[_0x130c6a(0x455)](_0x145deb),'i');_0x1125aa[_0x432842]=_0x5f5078;}else this[_0x130c6a(0x24f)]=!![];}},Scene_Boot['prototype'][_0x57ed21(0x397)]=function(){const _0x5d8c48=_0x57ed21,_0x558141=$dataSkills[_0x5d8c48(0x8a9)]($dataItems);for(const _0x3d7678 of _0x558141){if(!_0x3d7678)continue;VisuMZ[_0x5d8c48(0xfb)]['Parse_Notetags_Action'](_0x3d7678);}},Scene_Boot[_0x57ed21(0xb20)][_0x57ed21(0xa4d)]=function(){const _0x2d0e90=_0x57ed21,_0x371909=$dataActors['concat']($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x10c643 of _0x371909){if(!_0x10c643)continue;VisuMZ[_0x2d0e90(0xfb)][_0x2d0e90(0x317)](_0x10c643);}},Scene_Boot[_0x57ed21(0xb20)][_0x57ed21(0x960)]=function(){const _0x49b345=_0x57ed21,_0x5f253a=VisuMZ[_0x49b345(0xfb)]['Settings']['Mechanics'][_0x49b345(0x8b5)],_0xca32a=[];for(const _0x2f6742 of _0x5f253a){const _0xe5f079=$dataTroops[_0x2f6742];if(_0xe5f079)_0xca32a[_0x49b345(0x46e)](JsonEx[_0x49b345(0x5a6)](_0xe5f079));}for(const _0x2fab80 of $dataTroops){if(!_0x2fab80)continue;for(const _0xfa827d of _0xca32a){if(_0xfa827d['id']===_0x2fab80['id'])continue;_0x2fab80['pages']=_0x2fab80[_0x49b345(0x7d1)][_0x49b345(0x8a9)](_0xfa827d[_0x49b345(0x7d1)]);}}},Scene_Boot['prototype'][_0x57ed21(0x7ba)]=function(){const _0x311b32=_0x57ed21,_0x2238e3=VisuMZ[_0x311b32(0xfb)][_0x311b32(0x8d3)][_0x311b32(0x5c6)];if(_0x2238e3[_0x311b32(0x4fb)]>0x0&&$dataCommonEvents[_0x2238e3[_0x311b32(0x4fb)]]){if('nQTBd'!==_0x311b32(0x46d))_0x4ae2b1[_0x311b32(0xfb)][_0x311b32(0x2d9)]['call'](this),this[_0x311b32(0x150)]();else{const _0x36aa21=$dataCommonEvents[_0x2238e3[_0x311b32(0x4fb)]],_0xc76793=_0x36aa21[_0x311b32(0x2c7)][_0x311b32(0x98b)]-0x2,_0x3b208d=_0x36aa21[_0x311b32(0x2c7)][_0xc76793];if(_0x3b208d&&_0x3b208d[_0x311b32(0xadf)]!==0xe6){const _0x282fc1={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x3ecea5=_0x36aa21[_0x311b32(0x2c7)][_0x311b32(0x86a)]();_0x36aa21[_0x311b32(0x2c7)]['unshift'](_0x282fc1),_0x36aa21[_0x311b32(0x2c7)][_0x311b32(0x22d)](_0x3ecea5);}}}},Scene_Boot[_0x57ed21(0xb20)][_0x57ed21(0x47a)]=function(){const _0x115949=_0x57ed21;VisuMZ[_0x115949(0xfb)][_0x115949(0x383)](),VisuMZ[_0x115949(0xfb)][_0x115949(0x5c8)]($dataSkills),VisuMZ[_0x115949(0xfb)][_0x115949(0x5c8)]($dataItems);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x383)]=function(){const _0x2a9ea6=_0x57ed21;VisuMZ[_0x2a9ea6(0xfb)][_0x2a9ea6(0x90f)]={};for(const _0x5df0fa of $dataCommonEvents){if('iukWs'!==_0x2a9ea6(0xae9)){if(!_0x5df0fa)continue;if(_0x5df0fa[_0x2a9ea6(0xb1c)][_0x2a9ea6(0x463)](/\[(.*)\]/i)){let _0x584aa8=String(RegExp['$1'])[_0x2a9ea6(0x5b6)](/,/g,'')['toUpperCase']()['trim']();VisuMZ[_0x2a9ea6(0xfb)][_0x2a9ea6(0x90f)][_0x584aa8]=_0x5df0fa['id'];}}else{const _0x28cf6e=_0x31ba66[_0x2a9ea6(0x50e)](_0x4a32a8[_0x2a9ea6(0xaaa)]()[_0x2a9ea6(0x1f6)]());_0x28cf6e>=0x0&&_0x28cf6e<=0x7&&_0x466ff3[_0x2a9ea6(0x3b9)](_0x28cf6e)&&_0x502e4f[_0x2a9ea6(0x100)](_0x28cf6e);}}},VisuMZ[_0x57ed21(0xfb)]['BindCommonEventKeysForGroup']=function(_0x5bdd7b){const _0x374839=_0x57ed21;for(const _0x387026 of _0x5bdd7b){if(!_0x387026)continue;VisuMZ[_0x374839(0xfb)][_0x374839(0x23e)](_0x387026);}},VisuMZ[_0x57ed21(0xfb)]['BindCommonEventKeysForObj']=function(_0x31c8fc){const _0x302c0c=_0x57ed21;if(!_0x31c8fc)return;if(!_0x31c8fc[_0x302c0c(0x474)])return;VisuMZ[_0x302c0c(0xfb)][_0x302c0c(0x90f)]=VisuMZ['BattleCore'][_0x302c0c(0x90f)]||{};const _0x159b0f=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x38d301=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0xb4f571=[];const _0x596af8=_0x31c8fc[_0x302c0c(0x75a)][_0x302c0c(0x463)](_0x159b0f);if(_0x596af8){for(const _0x4063e7 of _0x596af8){_0x4063e7[_0x302c0c(0x463)](_0x159b0f);const _0x5f2476=String(RegExp['$1'])['split'](',')['map'](_0x437368=>String(_0x437368)[_0x302c0c(0xaaa)]()['trim']());_0xb4f571=_0xb4f571[_0x302c0c(0x8a9)](_0x5f2476);}!_0x31c8fc[_0x302c0c(0x75a)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x31c8fc['note']+=_0x302c0c(0x534));;}if(_0x31c8fc[_0x302c0c(0x75a)]['match'](_0x38d301)){if(_0x302c0c(0xbe1)!=='wkbvL'){if(this['battler']())this[_0x302c0c(0x595)]()['refreshMotion']();}else{const _0x1cc3ef=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x302c0c(0x6d9)](_0x3774b4=>String(_0x3774b4)[_0x302c0c(0xaaa)]()['trim']());_0xb4f571=_0xb4f571[_0x302c0c(0x8a9)](_0x1cc3ef);if(!_0x31c8fc[_0x302c0c(0x75a)][_0x302c0c(0x463)](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x302c0c(0x4ec)===_0x302c0c(0x27c)){const _0x5ea3e0=_0x5af080(_0x50a0d1['$1']),_0x3625f8=_0x4d2b57[_0x302c0c(0xfb)]['createKeyJS'](_0x338654,'CommandVisible');_0x2b89a6['BattleCore'][_0x302c0c(0x4bf)](_0x5ea3e0,_0x3625f8);}else _0x31c8fc['note']+=_0x302c0c(0x534);};}}for(const _0x6d777b of _0xb4f571){if(_0x302c0c(0xbba)===_0x302c0c(0x1eb))this['startMotion'](_0x302c0c(0x4c7));else{if(VisuMZ[_0x302c0c(0xfb)][_0x302c0c(0x90f)][_0x6d777b]){const _0x3e67e1=VisuMZ['BattleCore']['_commonEventKey'][_0x6d777b],_0x260935={'code':0x2c,'dataId':_0x3e67e1,'value1':0x1,'value2':0x0};_0x31c8fc[_0x302c0c(0x474)][_0x302c0c(0x46e)](_0x260935);}}}},Scene_Boot['prototype'][_0x57ed21(0x593)]=function(){const _0x50d041=_0x57ed21,_0x1d6c15=$dataSkills[_0x50d041(0x8a9)]($dataItems);for(const _0x295f4c of _0x1d6c15){if(_0x50d041(0x7e2)!==_0x50d041(0x7e2)){_0x3deba7[_0x50d041(0xfb)][_0x50d041(0x33b)][_0x50d041(0x509)](this);if(this['_callSceneOptions']&&!_0x2f0434['_subject'])this[_0x50d041(0x7a2)]();}else{if(!_0x295f4c)continue;VisuMZ[_0x50d041(0xfb)][_0x50d041(0xb0c)](_0x295f4c);}}},VisuMZ['BattleCore'][_0x57ed21(0x401)]=VisuMZ[_0x57ed21(0x401)],VisuMZ[_0x57ed21(0x401)]=function(_0x1de91a){const _0x3e4b08=_0x57ed21;VisuMZ[_0x3e4b08(0xfb)][_0x3e4b08(0x401)]&&(_0x3e4b08(0x7db)===_0x3e4b08(0x7db)?VisuMZ[_0x3e4b08(0xfb)][_0x3e4b08(0x401)][_0x3e4b08(0x509)](this,_0x1de91a):_0x18927e[_0x3e4b08(0xb5b)]('undecided')),VisuMZ[_0x3e4b08(0xfb)][_0x3e4b08(0x317)](_0x1de91a);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x2f2)]=VisuMZ[_0x57ed21(0x2f2)],VisuMZ[_0x57ed21(0x2f2)]=function(_0x5c5ef6){const _0x41eb2e=_0x57ed21;VisuMZ['BattleCore'][_0x41eb2e(0x2f2)]&&VisuMZ[_0x41eb2e(0xfb)][_0x41eb2e(0x2f2)][_0x41eb2e(0x509)](this,_0x5c5ef6),VisuMZ[_0x41eb2e(0xfb)][_0x41eb2e(0x317)](_0x5c5ef6);},VisuMZ[_0x57ed21(0xfb)]['ParseSkillNotetags']=VisuMZ[_0x57ed21(0x84e)],VisuMZ[_0x57ed21(0x84e)]=function(_0x240fda){const _0x2c4e4a=_0x57ed21;VisuMZ[_0x2c4e4a(0xfb)][_0x2c4e4a(0x84e)]&&VisuMZ['BattleCore']['ParseSkillNotetags']['call'](this,_0x240fda),VisuMZ['BattleCore'][_0x2c4e4a(0x255)](_0x240fda),VisuMZ[_0x2c4e4a(0xfb)][_0x2c4e4a(0xb0c)](_0x240fda);},VisuMZ[_0x57ed21(0xfb)]['ParseItemNotetags']=VisuMZ[_0x57ed21(0x4d5)],VisuMZ[_0x57ed21(0x4d5)]=function(_0x19ee6e){const _0x484b69=_0x57ed21;VisuMZ[_0x484b69(0xfb)][_0x484b69(0x4d5)]&&VisuMZ['BattleCore'][_0x484b69(0x4d5)][_0x484b69(0x509)](this,_0x19ee6e),VisuMZ[_0x484b69(0xfb)][_0x484b69(0x255)](_0x19ee6e),VisuMZ[_0x484b69(0xfb)][_0x484b69(0xb0c)](_0x19ee6e);},VisuMZ[_0x57ed21(0xfb)]['ParseWeaponNotetags']=VisuMZ[_0x57ed21(0x155)],VisuMZ[_0x57ed21(0x155)]=function(_0x2eb2f1){const _0x460c2f=_0x57ed21;VisuMZ[_0x460c2f(0xfb)][_0x460c2f(0x155)]&&VisuMZ[_0x460c2f(0xfb)][_0x460c2f(0x155)][_0x460c2f(0x509)](this,_0x2eb2f1),VisuMZ[_0x460c2f(0xfb)][_0x460c2f(0x317)](_0x2eb2f1);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x396)]=VisuMZ['ParseArmorNotetags'],VisuMZ[_0x57ed21(0x396)]=function(_0x2d97c4){const _0xb37d7b=_0x57ed21;VisuMZ['BattleCore'][_0xb37d7b(0x396)]&&VisuMZ[_0xb37d7b(0xfb)][_0xb37d7b(0x396)]['call'](this,_0x2d97c4),VisuMZ[_0xb37d7b(0xfb)][_0xb37d7b(0x317)](_0x2d97c4);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x327)]=VisuMZ['ParseEnemyNotetags'],VisuMZ[_0x57ed21(0x327)]=function(_0x50550d){const _0x3a115c=_0x57ed21;VisuMZ[_0x3a115c(0xfb)][_0x3a115c(0x327)]&&VisuMZ[_0x3a115c(0xfb)][_0x3a115c(0x327)][_0x3a115c(0x509)](this,_0x50550d),VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x50550d);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x307)]=VisuMZ[_0x57ed21(0x307)],VisuMZ[_0x57ed21(0x307)]=function(_0x11498f){const _0x5183a9=_0x57ed21;VisuMZ[_0x5183a9(0xfb)][_0x5183a9(0x307)]&&(_0x5183a9(0x470)==='lHirK'?this[_0x5183a9(0x46e)](_0x5183a9(0x5d3),_0x1049e3):VisuMZ[_0x5183a9(0xfb)]['ParseStateNotetags'][_0x5183a9(0x509)](this,_0x11498f)),VisuMZ[_0x5183a9(0xfb)][_0x5183a9(0x317)](_0x11498f);},VisuMZ[_0x57ed21(0xfb)]['Parse_Notetags_Action']=function(_0x4473ed){const _0x1e0cbf=_0x57ed21,_0x5eb6e7=[_0x1e0cbf(0xb58),_0x1e0cbf(0x28a),_0x1e0cbf(0x2f1),_0x1e0cbf(0x2ad),_0x1e0cbf(0x5f7),'PostStartActionJS',_0x1e0cbf(0x3c4),'PostEndActionJS'];for(const _0x1cdecf of _0x5eb6e7){VisuMZ[_0x1e0cbf(0xfb)]['createJS'](_0x4473ed,_0x1cdecf);}const _0x4cf81b=_0x4473ed['note'];_0x4cf81b['match'](/<ALWAYS CRITICAL/i)&&(_0x4473ed['damage'][_0x1e0cbf(0x67a)]=!![]),_0x4cf81b[_0x1e0cbf(0x463)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x1e0cbf(0x43a)!==_0x1e0cbf(0x8e9)?_0x4473ed[_0x1e0cbf(0x427)]=Math[_0x1e0cbf(0x952)](0x1,Number(RegExp['$1'])):(_0x2acc76[_0x1e0cbf(0xfb)][_0x1e0cbf(0x525)][_0x1e0cbf(0x509)](this,_0xa75974),this['callNextMethod']())),_0x4cf81b[_0x1e0cbf(0x463)](/<TARGET:[ ](.*)>/i)&&(_0x4473ed['scope']=String(RegExp['$1'])['toUpperCase']()['trim']());},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x317)]=function(_0x294434){const _0x4e19bb=_0x57ed21,_0x204c30=[_0x4e19bb(0x565),_0x4e19bb(0x2f6),_0x4e19bb(0x556),'PostDamageAsUserJS',_0x4e19bb(0x962),'PostApplyAsTargetJS',_0x4e19bb(0x123),_0x4e19bb(0x4df),_0x4e19bb(0x5f7),_0x4e19bb(0x1b0),'PreEndActionJS',_0x4e19bb(0x36f),_0x4e19bb(0x3ab),_0x4e19bb(0x6a6),'PreEndBattleJS','PostEndBattleJS','BattleVictoryJS',_0x4e19bb(0x28e),'EscapeSuccessJS',_0x4e19bb(0xabc),_0x4e19bb(0x8c7),_0x4e19bb(0xa75),_0x4e19bb(0x322),_0x4e19bb(0x726),_0x4e19bb(0x1af),'PostRegenerateJS'];for(const _0x91313f of _0x204c30){VisuMZ[_0x4e19bb(0xfb)][_0x4e19bb(0x3b1)](_0x294434,_0x91313f);}},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0xb0c)]=function(_0x4f38dc){const _0x404b8f=_0x57ed21,_0xef37f4=_0x4f38dc['note'];if(_0xef37f4[_0x404b8f(0x463)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x163f8a=String(RegExp['$1']),_0x23f6f4=VisuMZ[_0x404b8f(0xfb)][_0x404b8f(0x786)](_0x4f38dc,_0x404b8f(0x7ed));VisuMZ[_0x404b8f(0xfb)][_0x404b8f(0x349)](_0x163f8a,_0x23f6f4);}if(_0xef37f4[_0x404b8f(0x463)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x29acf5=String(RegExp['$1']),_0x150702=VisuMZ[_0x404b8f(0xfb)]['createKeyJS'](_0x4f38dc,_0x404b8f(0x78f));VisuMZ[_0x404b8f(0xfb)][_0x404b8f(0x4bf)](_0x29acf5,_0x150702);}},VisuMZ[_0x57ed21(0xfb)]['JS']={},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x3b1)]=function(_0x36c77c,_0x14d2ec){const _0x33b5d4=_0x57ed21,_0xcdb9f0=_0x36c77c[_0x33b5d4(0x75a)];if(_0xcdb9f0[_0x33b5d4(0x463)](VisuMZ[_0x33b5d4(0xfb)][_0x33b5d4(0x38a)][_0x14d2ec])){const _0x1cfa45=RegExp['$1'],_0x5d007c='\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20'[_0x33b5d4(0x455)](_0x1cfa45),_0x11e6dc=VisuMZ[_0x33b5d4(0xfb)]['createKeyJS'](_0x36c77c,_0x14d2ec);VisuMZ[_0x33b5d4(0xfb)]['JS'][_0x11e6dc]=new Function(_0x5d007c);}},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x786)]=function(_0x4c21cf,_0x3922b2){const _0x95b9a4=_0x57ed21;if(VisuMZ[_0x95b9a4(0x786)])return VisuMZ[_0x95b9a4(0x786)](_0x4c21cf,_0x3922b2);let _0xe9ca2e='';if($dataActors[_0x95b9a4(0x55d)](_0x4c21cf))_0xe9ca2e='Actor-%1-%2'['format'](_0x4c21cf['id'],_0x3922b2);if($dataClasses['includes'](_0x4c21cf))_0xe9ca2e='Class-%1-%2'[_0x95b9a4(0x455)](_0x4c21cf['id'],_0x3922b2);if($dataSkills['includes'](_0x4c21cf))_0xe9ca2e=_0x95b9a4(0x5d9)[_0x95b9a4(0x455)](_0x4c21cf['id'],_0x3922b2);if($dataItems[_0x95b9a4(0x55d)](_0x4c21cf))_0xe9ca2e=_0x95b9a4(0x843)[_0x95b9a4(0x455)](_0x4c21cf['id'],_0x3922b2);if($dataWeapons[_0x95b9a4(0x55d)](_0x4c21cf))_0xe9ca2e=_0x95b9a4(0x790)[_0x95b9a4(0x455)](_0x4c21cf['id'],_0x3922b2);if($dataArmors[_0x95b9a4(0x55d)](_0x4c21cf))_0xe9ca2e=_0x95b9a4(0x68e)[_0x95b9a4(0x455)](_0x4c21cf['id'],_0x3922b2);if($dataEnemies['includes'](_0x4c21cf))_0xe9ca2e='Enemy-%1-%2'[_0x95b9a4(0x455)](_0x4c21cf['id'],_0x3922b2);if($dataStates[_0x95b9a4(0x55d)](_0x4c21cf))_0xe9ca2e=_0x95b9a4(0x530)[_0x95b9a4(0x455)](_0x4c21cf['id'],_0x3922b2);return _0xe9ca2e;},VisuMZ['BattleCore'][_0x57ed21(0x349)]=function(_0x298e09,_0x5b6604){const _0x31c09c=_0x57ed21,_0x37e63a='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20'['format'](_0x298e09);VisuMZ[_0x31c09c(0xfb)]['JS'][_0x5b6604]=new Function(_0x37e63a);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x4bf)]=function(_0x380d79,_0x4b48a7){const _0xa09c52=_0x57ed21,_0xb515ed=_0xa09c52(0x8ae)[_0xa09c52(0x455)](_0x380d79);VisuMZ[_0xa09c52(0xfb)]['JS'][_0x4b48a7]=new Function(_0xb515ed);},TextManager[_0x57ed21(0xb3f)]=VisuMZ['BattleCore'][_0x57ed21(0x8d3)]['PartyCmd']['CmdTextAutoBattle'],TextManager[_0x57ed21(0x74f)]=VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x8d3)][_0x57ed21(0x4db)]['StartName'],TextManager[_0x57ed21(0x70f)]=VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x8d3)][_0x57ed21(0x4db)]['StyleName'],TextManager[_0x57ed21(0x17a)]=VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x8d3)]['HpGauge'][_0x57ed21(0x4ae)],ColorManager['getColor']=function(_0x3eab8d){const _0x14101a=_0x57ed21;return _0x3eab8d=String(_0x3eab8d),_0x3eab8d[_0x14101a(0x463)](/#(.*)/i)?'#%1'[_0x14101a(0x455)](String(RegExp['$1'])):this['textColor'](Number(_0x3eab8d));},DataManager[_0x57ed21(0x8cb)]=function(_0x56dd4a){const _0x49dcce=_0x57ed21;if(_0x56dd4a[_0x49dcce(0x75a)][_0x49dcce(0x463)](/<DAMAGE STYLE:[ ](.*)>/i)){if(_0x49dcce(0xa54)!==_0x49dcce(0x3b3)){const _0x37ba8f=String(RegExp['$1'])['toUpperCase']()[_0x49dcce(0x1f6)]();if(_0x37ba8f==='MANUAL')return _0x49dcce(0x47e);if(VisuMZ[_0x49dcce(0xada)][_0x37ba8f])return _0x37ba8f;}else{const _0x4f1e1e=_0x12a4fe['BattleCore'][_0x49dcce(0x8d3)][_0x49dcce(0x6f7)],_0x4a4aa0=_0x4b5df3['result']();if(_0x4f1e1e[_0x49dcce(0x4dc)])this[_0x49dcce(0x7f7)](_0x1cf0a9,_0x4a4aa0['addedBuffs'],_0x44e00f['buffAdd']);if(_0x4f1e1e[_0x49dcce(0x24b)])this['displayBuffs'](_0x557efc,_0x4a4aa0['addedDebuffs'],_0x6ed545[_0x49dcce(0x3e4)]);if(_0x4f1e1e[_0x49dcce(0x87c)])this[_0x49dcce(0x7f7)](_0x438a57,_0x4a4aa0['removedBuffs'],_0x36f5c7[_0x49dcce(0x31e)]);}}const _0x318552=VisuMZ[_0x49dcce(0xfb)]['Settings'][_0x49dcce(0x328)][_0x49dcce(0x367)][_0x49dcce(0xaaa)]()[_0x49dcce(0x1f6)]();if(VisuMZ[_0x49dcce(0xada)][_0x318552])return _0x318552;return'MANUAL';},DataManager[_0x57ed21(0xa39)]=function(_0x5ab486){const _0x81a70c=_0x57ed21;_0x5ab486=_0x5ab486[_0x81a70c(0xaaa)]()[_0x81a70c(0x1f6)](),this['_stypeIDs']=this['_stypeIDs']||{};if(this['_stypeIDs'][_0x5ab486])return this[_0x81a70c(0xa0f)][_0x5ab486];for(let _0x5d6572=0x1;_0x5d6572<0x64;_0x5d6572++){if(!$dataSystem[_0x81a70c(0x5aa)][_0x5d6572])continue;let _0x4590ec=$dataSystem[_0x81a70c(0x5aa)][_0x5d6572][_0x81a70c(0xaaa)]()[_0x81a70c(0x1f6)]();_0x4590ec=_0x4590ec['replace'](/\x1I\[(\d+)\]/gi,''),_0x4590ec=_0x4590ec['replace'](/\\I\[(\d+)\]/gi,''),this['_stypeIDs'][_0x4590ec]=_0x5d6572;}return this[_0x81a70c(0xa0f)][_0x5ab486]||0x0;},DataManager['getSkillIdWithName']=function(_0x5e32f8){const _0x3cba45=_0x57ed21;_0x5e32f8=_0x5e32f8[_0x3cba45(0xaaa)]()[_0x3cba45(0x1f6)](),this[_0x3cba45(0x494)]=this[_0x3cba45(0x494)]||{};if(this[_0x3cba45(0x494)][_0x5e32f8])return this[_0x3cba45(0x494)][_0x5e32f8];for(const _0x3fb507 of $dataSkills){if(_0x3cba45(0x821)===_0x3cba45(0x4a8)){_0x2f67a1['prototype'][_0x3cba45(0x85c)][_0x3cba45(0x509)](this);const _0x23bf13=this['_actor']['svBattlerName']();this[_0x3cba45(0x7c5)]!==_0x23bf13&&(this[_0x3cba45(0x7c5)]=_0x23bf13,this[_0x3cba45(0x254)][_0x3cba45(0x10e)]=_0x4d3999[_0x3cba45(0xa7b)](_0x23bf13)),this[_0x3cba45(0x254)]&&this[_0x3cba45(0x254)]['bitmap']&&this[_0x3cba45(0x635)]&&(this[_0x3cba45(0x254)]['bitmap'][_0x3cba45(0x22e)]!==this['_battler'][_0x3cba45(0x234)]()&&(this[_0x3cba45(0x254)][_0x3cba45(0x10e)]['smooth']=this['_battler'][_0x3cba45(0x234)]()));}else{if(!_0x3fb507)continue;this['_skillIDs'][_0x3fb507[_0x3cba45(0xb1c)][_0x3cba45(0xaaa)]()[_0x3cba45(0x1f6)]()]=_0x3fb507['id'];}}return this['_skillIDs'][_0x5e32f8]||0x0;},DataManager[_0x57ed21(0x921)]=function(_0x39df24){const _0x16bd2c=_0x57ed21;_0x39df24=_0x39df24[_0x16bd2c(0xaaa)]()[_0x16bd2c(0x1f6)](),this[_0x16bd2c(0x957)]=this[_0x16bd2c(0x957)]||{};if(this[_0x16bd2c(0x957)][_0x39df24])return this[_0x16bd2c(0x957)][_0x39df24];for(const _0x324857 of $dataEnemies){if(!_0x324857)continue;this['_enemyIDs'][_0x324857[_0x16bd2c(0xb1c)][_0x16bd2c(0xaaa)]()['trim']()]=_0x324857['id'];}return this[_0x16bd2c(0x957)][_0x39df24]||0x0;},DataManager['getWtypeIdWithName']=function(_0xfa3cb6){const _0x2f8a56=_0x57ed21;_0xfa3cb6=_0xfa3cb6[_0x2f8a56(0xaaa)]()[_0x2f8a56(0x1f6)](),this['_wtypeIDs']=this[_0x2f8a56(0x411)]||{};if(this[_0x2f8a56(0x411)][_0xfa3cb6])return this['_wtypeIDs'][_0xfa3cb6];for(let _0x5d3b35=0x1;_0x5d3b35<0x64;_0x5d3b35++){if(!$dataSystem[_0x2f8a56(0x38f)][_0x5d3b35])continue;let _0x2524b8=$dataSystem['weaponTypes'][_0x5d3b35][_0x2f8a56(0xaaa)]()[_0x2f8a56(0x1f6)]();_0x2524b8=_0x2524b8[_0x2f8a56(0x5b6)](/\x1I\[(\d+)\]/gi,''),_0x2524b8=_0x2524b8['replace'](/\\I\[(\d+)\]/gi,''),this['_wtypeIDs'][_0x2524b8]=_0x5d3b35;}return this[_0x2f8a56(0x411)][_0x2f8a56(0x830)]=0x0,this[_0x2f8a56(0x411)][_0xfa3cb6]||0x0;},DataManager[_0x57ed21(0x3ad)]=function(_0x5d2cbb){const _0x5e07b5=_0x57ed21,_0x333554=_0x5e07b5(0x710);let _0x3e0dd6=_0x5d2cbb['iconIndex'],_0x95269d=_0x5d2cbb[_0x5e07b5(0xb1c)];const _0x5bebf3=_0x5d2cbb[_0x5e07b5(0x75a)];return _0x5bebf3[_0x5e07b5(0x463)](/<DISPLAY ICON: (\d+)>/i)&&(_0x3e0dd6=Number(RegExp['$1'])),_0x5bebf3[_0x5e07b5(0x463)](/<DISPLAY TEXT: (.*)>/i)&&(_0x95269d=String(RegExp['$1'])),_0x333554[_0x5e07b5(0x455)](_0x3e0dd6,_0x95269d);},DataManager[_0x57ed21(0x3e1)]=function(_0x2a5f97){const _0x4f3099=_0x57ed21;if(_0x2a5f97[_0x4f3099(0x75a)][_0x4f3099(0x463)](/<COMMAND TEXT: (.*)>/i))return String(RegExp['$1']);else{if(_0x4f3099(0x561)===_0x4f3099(0x91f))this['_endBattle']=!![],this[_0x4f3099(0x52f)]=![],this[_0x4f3099(0x77d)](_0x4f3099(0x690)),_0x36a80a[_0x4f3099(0xfb)]['BattleManager_endBattle'][_0x4f3099(0x509)](this,_0x5f42e7),this['processBattleCoreJS'](_0x4f3099(0x297));else return _0x2a5f97['name'];}},DataManager[_0x57ed21(0x8ad)]=function(_0x410b5e){const _0x4dcc1c=_0x57ed21;return _0x410b5e[_0x4dcc1c(0x75a)][_0x4dcc1c(0x463)](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x410b5e[_0x4dcc1c(0x969)];},DataManager[_0x57ed21(0x58e)]=function(_0x142b86){const _0x542824=_0x57ed21,_0x417642=$dataEnemies[_0x142b86];if(_0x417642){if(_0x417642[_0x542824(0x75a)][_0x542824(0x463)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x7a076=String(RegExp['$1'])[_0x542824(0x4ff)](/[\r\n]+/)[_0x542824(0x29d)](''),_0x279fcb=this[_0x542824(0xae8)](_0x7a076);_0x142b86=this['getEnemyIdWithName'](_0x279fcb)||_0x142b86,_0x142b86=DataManager[_0x542824(0x58e)](_0x142b86);}}return _0x142b86;},DataManager[_0x57ed21(0xae8)]=function(_0x5e76d9){const _0x10d667=_0x57ed21;let _0x562c77=0x0;const _0x25a22e={};for(const _0x6aedab of _0x5e76d9){if(_0x6aedab[_0x10d667(0x463)](/(.*):[ ](\d+)/i)){if(_0x10d667(0x94a)===_0x10d667(0x94a)){const _0x977e31=String(RegExp['$1'])[_0x10d667(0x1f6)](),_0x1178bd=Number(RegExp['$2']);_0x25a22e[_0x977e31]=_0x1178bd,_0x562c77+=_0x1178bd;}else{if(_0x26f1cc[_0x10d667(0x1d9)](_0x2fd08d))return!![];return![];}}else{if(_0x6aedab['match'](/(.*):[ ](\d+\.?\d+)/i)){const _0x1e81ce=String(RegExp['$1'])['trim'](),_0x479b22=Number(RegExp['$2']);_0x25a22e[_0x1e81ce]=_0x479b22,_0x562c77+=_0x479b22;}else _0x6aedab!==''&&(_0x25a22e[_0x6aedab]=0x1,_0x562c77++);}}if(_0x562c77<=0x0)return'';let _0x3b7647=Math[_0x10d667(0xa91)]()*_0x562c77;for(const _0x1b7db4 in _0x25a22e){_0x3b7647-=_0x25a22e[_0x1b7db4];if(_0x3b7647<=0x0)return _0x1b7db4;}return'';},DataManager[_0x57ed21(0x3c1)]=function(_0x24be95){const _0x34c560=_0x57ed21;if(!_0x24be95)return![];if(!VisuMZ[_0x34c560(0xfb)]['Settings']['ActionSequence'][_0x34c560(0x9aa)])return![];if(_0x24be95[_0x34c560(0x75a)][_0x34c560(0x463)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x24be95[_0x34c560(0x75a)]['match'](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x28aa3e of _0x24be95['effects']){if(!_0x28aa3e)continue;if(_0x28aa3e[_0x34c560(0xadf)]===Game_Action[_0x34c560(0x4be)])return!![];}return![];},DataManager[_0x57ed21(0x34a)]=function(_0x508161){const _0x3a26a3=_0x57ed21,_0x4b112f=$dataTroops[_0x508161];if(!_0x4b112f)return'';let _0x56ac33='';_0x56ac33+=_0x4b112f[_0x3a26a3(0xb1c)];for(const _0x451d9a of _0x4b112f[_0x3a26a3(0x7d1)]){for(const _0x25dce2 of _0x451d9a[_0x3a26a3(0x2c7)]){[0x6c,0x198][_0x3a26a3(0x55d)](_0x25dce2[_0x3a26a3(0xadf)])&&(_0x3a26a3(0x8d9)===_0x3a26a3(0x8d9)?(_0x56ac33+='\x0a',_0x56ac33+=_0x25dce2[_0x3a26a3(0x7c3)][0x0]):(_0x5d1b27[_0x3a26a3(0xfb)][_0x3a26a3(0x8ca)][_0x3a26a3(0x509)](this,_0x2ce57b),this[_0x3a26a3(0x616)](_0xb73c52)));}}return _0x56ac33;},ConfigManager[_0x57ed21(0x6d1)]=ConfigManager[_0x57ed21(0x6d1)]??![],ConfigManager[_0x57ed21(0x284)]=ConfigManager['autoBattleUseSkills']??![],ConfigManager[_0x57ed21(0x17a)]=ConfigManager[_0x57ed21(0x17a)]??!![],VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x57f)]=ConfigManager['makeData'],ConfigManager[_0x57ed21(0x4ba)]=function(){const _0x785fee=_0x57ed21,_0x21dbd2=VisuMZ[_0x785fee(0xfb)]['ConfigManager_makeData'][_0x785fee(0x509)](this);return _0x21dbd2[_0x785fee(0x6d1)]=this[_0x785fee(0x6d1)],_0x21dbd2[_0x785fee(0x284)]=this[_0x785fee(0x284)],_0x21dbd2[_0x785fee(0x17a)]=this[_0x785fee(0x17a)],_0x21dbd2;},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x69f)]=ConfigManager[_0x57ed21(0xa56)],ConfigManager[_0x57ed21(0xa56)]=function(_0x3abc96){const _0x569799=_0x57ed21;VisuMZ[_0x569799(0xfb)][_0x569799(0x69f)][_0x569799(0x509)](this,_0x3abc96);if(_0x569799(0x6d1)in _0x3abc96){if(_0x569799(0x469)!==_0x569799(0x5ff))this[_0x569799(0x6d1)]=_0x3abc96[_0x569799(0x6d1)];else{if(_0x3c4dfc['_battler']&&_0x57baac[_0x569799(0x635)]){if(_0x5bf2b3['_battler'][_0x569799(0x8cc)]()&&_0x21e106[_0x569799(0x635)]['isEnemy']())return 0x1;else{if(_0x24692e['_battler']['isActor']()&&_0x4ad012[_0x569799(0x635)][_0x569799(0xa8a)]())return-0x1;}}}}else{if(_0x569799(0x873)===_0x569799(0xb9e))return this['_attackAnimationId']||0x0;else this[_0x569799(0x6d1)]=![];}if(_0x569799(0x284)in _0x3abc96){if(_0x569799(0xfa)!=='YLBQk')this[_0x569799(0x284)]=_0x3abc96['autoBattleUseSkills'];else{const _0x222d08=_0x48679f[_0x569799(0x8cb)](this[_0x569799(0x2a4)]),_0xdeb8e8=_0x49376d[_0x569799(0xada)][_0x222d08];if(!_0xdeb8e8)return this[_0x569799(0x19c)]();return _0xdeb8e8[_0x569799(0xa6f)]['call'](this);}}else _0x569799(0x9c2)!==_0x569799(0x10f)?this[_0x569799(0x284)]=![]:(_0x4e4be4[_0x569799(0x699)](_0x8403ca[0x2],_0x2af01a[0x3]),_0x9b6ed7[_0x569799(0x699)](_0x8ed4fc));_0x569799(0x17a)in _0x3abc96?this[_0x569799(0x17a)]=_0x3abc96[_0x569799(0x17a)]:this[_0x569799(0x17a)]=!![];},VisuMZ[_0x57ed21(0xfb)]['BattleManager_initMembers']=BattleManager[_0x57ed21(0xba5)],BattleManager[_0x57ed21(0xba5)]=function(){const _0x5a0508=_0x57ed21;VisuMZ[_0x5a0508(0xfb)][_0x5a0508(0x3db)]['call'](this),this[_0x5a0508(0x357)]=[];},BattleManager['refreshStatusWindow']=function(){const _0x2ef2ed=_0x57ed21;if(!SceneManager['isSceneBattle']())return;const _0xf5c3e8=SceneManager[_0x2ef2ed(0x34f)][_0x2ef2ed(0x9ea)];if(_0xf5c3e8)_0xf5c3e8[_0x2ef2ed(0x102)]();},BattleManager[_0x57ed21(0x3a5)]=function(){const _0x388c06=_0x57ed21;if(BattleManager[_0x388c06(0x66f)]())return'TPB';return _0x388c06(0x901);},BattleManager[_0x57ed21(0x501)]=function(_0x1516a9){const _0x7a22d9=_0x57ed21;return _0x1516a9=_0x1516a9[_0x7a22d9(0xaaa)]()[_0x7a22d9(0x1f6)](),this[_0x7a22d9(0x3a5)]()===_0x1516a9;},BattleManager['isDTB']=function(){const _0x316c4e=_0x57ed21;return this[_0x316c4e(0x501)]('DTB');},BattleManager[_0x57ed21(0xb91)]=function(){const _0x2e65bb=_0x57ed21;return this[_0x2e65bb(0xb68)]();},BattleManager[_0x57ed21(0xafd)]=function(){const _0x25dbe4=_0x57ed21;return!this[_0x25dbe4(0xb91)]();},BattleManager[_0x57ed21(0x941)]=function(){const _0x13eed7=_0x57ed21;return!this[_0x13eed7(0xb91)]()&&!this[_0x13eed7(0xafd)]();},BattleManager[_0x57ed21(0x77d)]=function(_0x4d8976){const _0x2d2965=_0x57ed21;$gameParty['processBattleCoreJS'](_0x4d8976),$gameTroop[_0x2d2965(0x77d)](_0x4d8976);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x5a4)]=BattleManager['startBattle'],BattleManager['startBattle']=function(){const _0x2112d7=_0x57ed21;this['_endBattle']=![],this[_0x2112d7(0x52f)]=ConfigManager[_0x2112d7(0x6d1)],this['processBattleCoreJS'](_0x2112d7(0x3ab)),VisuMZ[_0x2112d7(0xfb)]['BattleManager_startBattle'][_0x2112d7(0x509)](this),this[_0x2112d7(0x77d)](_0x2112d7(0x6a6));},BattleManager[_0x57ed21(0x2a3)]=function(_0xc83172){const _0x41fe7c=_0x57ed21,_0x221584=VisuMZ[_0x41fe7c(0xfb)][_0x41fe7c(0x8d3)][_0x41fe7c(0x5c6)];_0xc83172!==_0x41fe7c(0x50c)&&_0x221584['BattleEndEvent']&&VisuMZ['BattleCore'][_0x41fe7c(0x43f)](_0x221584[_0x41fe7c(0x58b)])&&$gameTemp[_0x41fe7c(0x311)](_0x221584[_0x41fe7c(0x58b)]);const _0x20539b=_0x41fe7c(0x9b1)[_0x41fe7c(0x455)](_0xc83172);_0x221584[_0x20539b]&&VisuMZ[_0x41fe7c(0xfb)][_0x41fe7c(0x43f)](_0x221584[_0x20539b])&&('UmXaj'!==_0x41fe7c(0x713)?delete _0x318b7f['_handlers'][_0x41fe7c(0x18c)]:$gameTemp[_0x41fe7c(0x311)](_0x221584[_0x20539b]));},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x68d)]=BattleManager['checkBattleEnd'],BattleManager[_0x57ed21(0x9fc)]=function(){const _0x4e68c9=_0x57ed21;if(this[_0x4e68c9(0x9e6)]===_0x4e68c9(0x112)){if($gameTemp[_0x4e68c9(0x5a0)]())return![];}return VisuMZ['BattleCore'][_0x4e68c9(0x68d)]['call'](this);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x2e4)]=BattleManager[_0x57ed21(0x5b1)],BattleManager['processVictory']=function(){const _0x2a1ea1=_0x57ed21;this[_0x2a1ea1(0x77d)]('BattleVictoryJS'),VisuMZ[_0x2a1ea1(0xfb)][_0x2a1ea1(0x2e4)][_0x2a1ea1(0x509)](this),this[_0x2a1ea1(0x2a3)]('Victory');},VisuMZ['BattleCore'][_0x57ed21(0x24a)]=BattleManager[_0x57ed21(0x6a9)],BattleManager[_0x57ed21(0x6a9)]=function(){const _0x4e1a38=_0x57ed21;this['processBattleCoreJS'](_0x4e1a38(0x28e)),VisuMZ[_0x4e1a38(0xfb)][_0x4e1a38(0x24a)]['call'](this),this[_0x4e1a38(0x2a3)]('Defeat');},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x185)]=BattleManager['endBattle'],BattleManager[_0x57ed21(0x4bd)]=function(_0x390dad){const _0x5f3d70=_0x57ed21;this['_endBattle']=!![],this['_autoBattle']=![],this[_0x5f3d70(0x77d)](_0x5f3d70(0x690)),VisuMZ[_0x5f3d70(0xfb)][_0x5f3d70(0x185)][_0x5f3d70(0x509)](this,_0x390dad),this[_0x5f3d70(0x77d)](_0x5f3d70(0x297));},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x734)]=BattleManager[_0x57ed21(0x94d)],BattleManager[_0x57ed21(0x94d)]=function(){const _0x585c5f=_0x57ed21;if(this[_0x585c5f(0xb91)]())this[_0x585c5f(0x77d)]('PreStartTurnJS');VisuMZ[_0x585c5f(0xfb)][_0x585c5f(0x734)][_0x585c5f(0x509)](this);if(this[_0x585c5f(0xb91)]())this[_0x585c5f(0x77d)](_0x585c5f(0xa75));},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x153)]=BattleManager[_0x57ed21(0x602)],BattleManager['startAction']=function(){const _0xd6af55=_0x57ed21,_0x1c9996=this[_0xd6af55(0xadd)][_0xd6af55(0x2e0)](),_0x3be2cc=this['_subject'];_0x1c9996&&_0x1c9996['subject']()===_0x3be2cc&&_0x1c9996[_0xd6af55(0x3ff)](_0xd6af55(0x5f7)),VisuMZ[_0xd6af55(0xfb)][_0xd6af55(0x153)][_0xd6af55(0x509)](this),_0x1c9996&&_0x1c9996['subject']()===_0x3be2cc&&_0x1c9996[_0xd6af55(0x3ff)](_0xd6af55(0x1b0));},VisuMZ[_0x57ed21(0xfb)]['BattleManager_endAction']=BattleManager[_0x57ed21(0x6db)],BattleManager[_0x57ed21(0x6db)]=function(){const _0xb08e83=_0x57ed21,_0x30cb17=this[_0xb08e83(0x961)],_0x2176f5=this[_0xb08e83(0xadd)];_0x30cb17&&_0x30cb17!==this['_lastAction']&&_0x30cb17[_0xb08e83(0x478)]()===_0x2176f5&&(_0xb08e83(0x643)!==_0xb08e83(0x2cf)?_0x30cb17['actionBattleCoreJS']('PreEndActionJS'):(_0x3c4030(_0xb08e83(0x69c)[_0xb08e83(0x455)](_0x9c4d26,_0x4f77a0,_0x49eb0e)),_0x66a2f5['exit']()));this[_0xb08e83(0xadd)]?VisuMZ[_0xb08e83(0xfb)][_0xb08e83(0x7f8)]['call'](this):_0xb08e83(0xba2)!=='BAwjr'?this['_phase']=_0xb08e83(0x112):this[_0xb08e83(0x664)]=_0xb08e83(0x4bc);if(_0x30cb17&&_0x30cb17!==this[_0xb08e83(0x8ee)]&&_0x30cb17['subject']()===_0x2176f5){if('nopxe'!==_0xb08e83(0xa34))_0x30cb17[_0xb08e83(0x3ff)]('PostEndActionJS');else{const _0x3bc469=_0x49780a(_0x2065b0['$1']);_0x1abc26[_0xb08e83(0x970)]([this],_0x3bc469,![],![]);}}this[_0xb08e83(0x35e)](this[_0xb08e83(0x170)]()),this['_lastAction']=this[_0xb08e83(0x961)];},BattleManager[_0x57ed21(0x35e)]=function(_0x313fc2){const _0x473fc9=_0x57ed21;for(const _0x1ccb8b of _0x313fc2){if('sWcPf'==='QTRMt')return this['battlerSprites']()[_0x473fc9(0x3fa)](_0x2e81ab=>_0x2e81ab[_0x473fc9(0x806)]());else{if(!_0x1ccb8b)continue;if(!_0x1ccb8b[_0x473fc9(0x595)]())continue;_0x1ccb8b[_0x473fc9(0x595)]()[_0x473fc9(0x5c7)]();}}},BattleManager[_0x57ed21(0x4d7)]=function(){const _0x5771e6=_0x57ed21;!this[_0x5771e6(0x977)][_0x5771e6(0x848)]()&&this[_0x5771e6(0x6db)]();},Game_Battler[_0x57ed21(0xb20)]['onAllActionsEnd']=function(){const _0x597a9a=_0x57ed21;this[_0x597a9a(0x52c)]();if(Imported['VisuMZ_1_SkillsStatesCore']){const _0x2a7c63=VisuMZ['SkillsStatesCore'][_0x597a9a(0x8d3)][_0x597a9a(0x414)];_0x2a7c63&&_0x2a7c63[_0x597a9a(0x5d4)]===![]&&this[_0x597a9a(0x1e3)](0x1);}else this[_0x597a9a(0x1e3)](0x1);this[_0x597a9a(0xac1)]();},BattleManager[_0x57ed21(0x930)]=function(){const _0x304a83=_0x57ed21;this['_escapeRatio']=VisuMZ[_0x304a83(0xfb)][_0x304a83(0x8d3)][_0x304a83(0x5c6)]['CalcEscapeRatioJS'][_0x304a83(0x509)](this);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x6de)]=BattleManager[_0x57ed21(0xb5c)],BattleManager[_0x57ed21(0xb5c)]=function(){const _0x37894c=_0x57ed21;this[_0x37894c(0x77d)](_0x37894c(0x590)),BattleManager[_0x37894c(0x837)]['processEscape'](),VisuMZ['BattleCore'][_0x37894c(0x6de)]['call'](this),this['processPostBattleCommonEvents'](_0x37894c(0x7fd));},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x9b0)]=BattleManager[_0x57ed21(0x323)],BattleManager['onEscapeFailure']=function(){const _0x54bd97=_0x57ed21;this['processBattleCoreJS'](_0x54bd97(0xabc));const _0x377fe8=this[_0x54bd97(0xbbf)];VisuMZ[_0x54bd97(0xfb)][_0x54bd97(0x9b0)]['call'](this),this[_0x54bd97(0xbbf)]=_0x377fe8+VisuMZ['BattleCore'][_0x54bd97(0x8d3)][_0x54bd97(0x5c6)][_0x54bd97(0xa4a)][_0x54bd97(0x509)](this),this[_0x54bd97(0x2a3)]('EscapeFail');},BattleManager[_0x57ed21(0x12e)]=function(){const _0x39ad83=_0x57ed21;let _0x4d4761=![];if(this[_0x39ad83(0x597)]())for(const _0x27622f of $gameTroop[_0x39ad83(0x89c)]()){if('lOMJO'===_0x39ad83(0x39a))return this[_0x39ad83(0xab8)]['shift']();else this[_0x39ad83(0x977)][_0x39ad83(0x46e)](_0x39ad83(0x972),TextManager[_0x39ad83(0x242)]['format'](_0x27622f)),this['_logWindow'][_0x39ad83(0x46e)]('wait'),_0x4d4761=!![];}if(this['_preemptive'])this[_0x39ad83(0x977)][_0x39ad83(0x46e)](_0x39ad83(0x972),TextManager[_0x39ad83(0x13f)]['format']($gameParty[_0x39ad83(0xb1c)]())),this['_logWindow'][_0x39ad83(0x46e)](_0x39ad83(0x4c7));else this[_0x39ad83(0x128)]&&(this['_logWindow'][_0x39ad83(0x46e)](_0x39ad83(0x972),TextManager[_0x39ad83(0x6d5)]['format']($gameParty[_0x39ad83(0xb1c)]())),this[_0x39ad83(0x977)][_0x39ad83(0x46e)](_0x39ad83(0x4c7)));_0x4d4761&&(this[_0x39ad83(0x977)][_0x39ad83(0x46e)](_0x39ad83(0x4c7)),this[_0x39ad83(0x977)][_0x39ad83(0x46e)]('clear')),this[_0x39ad83(0x66f)]()&&this['isSkipPartyCommandWindow']()&&(this['_tpbNeedsPartyCommand']=![]);},BattleManager[_0x57ed21(0x597)]=function(){const _0x110b0b=_0x57ed21;if(BattleManager[_0x110b0b(0x52f)])return![];return VisuMZ[_0x110b0b(0xfb)]['Settings'][_0x110b0b(0x313)]['EmergeText'];},VisuMZ['BattleCore'][_0x57ed21(0x3df)]=BattleManager[_0x57ed21(0xa63)],BattleManager['startInput']=function(){const _0x311dd5=_0x57ed21;VisuMZ['BattleCore'][_0x311dd5(0x3df)][_0x311dd5(0x509)](this),this[_0x311dd5(0xb68)]()&&this[_0x311dd5(0x589)]()&&!this['_surprise']&&$gameParty['canInput']()&&this['selectNextCommand']();},BattleManager['isSkipPartyCommandWindow']=function(){const _0x41a7da=_0x57ed21;return VisuMZ['BattleCore'][_0x41a7da(0x8d3)][_0x41a7da(0x809)]['SkipPartyCmd'];},BattleManager[_0x57ed21(0x982)]=function(){const _0x5e9d50=_0x57ed21;this[_0x5e9d50(0x86e)]()&&this[_0x5e9d50(0x360)]();},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x8d8)]=Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x2a5)],Scene_Battle['prototype'][_0x57ed21(0x2a5)]=function(){const _0x49006c=_0x57ed21;VisuMZ['BattleCore'][_0x49006c(0x8d8)][_0x49006c(0x509)](this);if(BattleManager['isTpb']()&&BattleManager[_0x49006c(0x9a5)]){if(_0x49006c(0x6ac)!==_0x49006c(0x9f9))BattleManager[_0x49006c(0x9a5)]=![],this[_0x49006c(0xb7d)]();else{let _0xd55a7b=this['createString'](_0x40b9ec);const _0x5e0cdf=this[_0x49006c(0x88e)](),_0x4a8575=_0x5c534e[_0x49006c(0x4eb)](_0x5e0cdf*0.75);for(let _0x4c3693=0x0;_0x4c3693<_0xd55a7b['length'];_0x4c3693++){const _0x1551fb=this[_0x49006c(0x546)](_0x4a8575,_0x5e0cdf);_0x1551fb[_0x49006c(0x10e)][_0x49006c(0x5f1)](_0xd55a7b[_0x4c3693],0x0,0x0,_0x4a8575,_0x5e0cdf,'center'),_0x1551fb['x']=(_0x4c3693-(_0xd55a7b[_0x49006c(0x98b)]-0x1)/0x2)*_0x4a8575,_0x1551fb['dy']=-_0x4c3693;}}}},BattleManager[_0x57ed21(0x97b)]=function(_0x366d96,_0x3a2481){const _0x5c1606=_0x57ed21;this['_action'][_0x5c1606(0x49d)]=_0x3a2481,this[_0x5c1606(0x977)][_0x5c1606(0x1b1)](_0x3a2481),this[_0x5c1606(0x977)]['displayReflectionPlayBack'](_0x366d96,this['_action']),this['_action']['apply'](_0x366d96),this[_0x5c1606(0x977)]['displayActionResults'](_0x366d96,_0x366d96);},VisuMZ[_0x57ed21(0xfb)]['BattleManager_makeActionOrders']=BattleManager[_0x57ed21(0x652)],BattleManager[_0x57ed21(0x652)]=function(){const _0x33b2b0=_0x57ed21;VisuMZ[_0x33b2b0(0xfb)]['BattleManager_makeActionOrders']['call'](this),this[_0x33b2b0(0x16d)]=this[_0x33b2b0(0x16d)][_0x33b2b0(0x863)](_0x5075e3=>_0x5075e3&&_0x5075e3['isAppeared']());},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x442)]=BattleManager['updatePhase'],BattleManager['updatePhase']=function(_0x47879d){const _0x5be9cf=_0x57ed21;if(this[_0x5be9cf(0x9e6)]===_0x5be9cf(0x3a7)){if(_0x5be9cf(0xb04)===_0x5be9cf(0x3c2))return this['svBattlerData']()[_0x5be9cf(0xb1c)];else this[_0x5be9cf(0x2c3)]();}else this[_0x5be9cf(0x9e6)]===_0x5be9cf(0x699)?this[_0x5be9cf(0x21b)]():VisuMZ[_0x5be9cf(0xfb)][_0x5be9cf(0x442)][_0x5be9cf(0x509)](this,_0x47879d);},BattleManager[_0x57ed21(0x850)]=function(){const _0x909949=_0x57ed21;this['_allTargets']=this[_0x909949(0x722)][_0x909949(0x714)](0x0),this[_0x909949(0xad0)]=0x0,this[_0x909949(0x2f4)]=this[_0x909949(0x8fc)][0x0]||null,this[_0x909949(0x9e6)]=_0x909949(0x3a7);},BattleManager[_0x57ed21(0x2c3)]=function(){const _0xfc45f6=_0x57ed21;!this[_0xfc45f6(0x7ec)]()&&!this[_0xfc45f6(0x977)][_0xfc45f6(0x848)]()&&(this[_0xfc45f6(0x9e6)]=_0xfc45f6(0x553));},BattleManager[_0x57ed21(0x699)]=function(_0x223aca){const _0x36d5c2=_0x57ed21;this['_actionBattlers'][_0x36d5c2(0x29d)](_0x223aca);if(_0x223aca===this[_0x36d5c2(0xadd)])return;const _0xb554c2=JsonEx[_0x36d5c2(0x5a6)](_0x223aca['currentAction']());this[_0x36d5c2(0x357)][_0x36d5c2(0x46e)]([_0x223aca,_0xb554c2]);},BattleManager['processForcedAction']=function(){},BattleManager[_0x57ed21(0x1ed)]=function(){const _0x4791f3=_0x57ed21;if(this[_0x4791f3(0x66f)]())this[_0x4791f3(0x9e6)]=_0x4791f3(0x112);else this[_0x4791f3(0x357)][_0x4791f3(0x98b)]>0x0?this['_phase']=_0x4791f3(0x112):this['startInput']();},BattleManager[_0x57ed21(0x1a1)]=function(){const _0x307ec7=_0x57ed21,_0x32a5ec=this[_0x307ec7(0xadd)];_0x32a5ec&&this[_0x307ec7(0x66f)]()&&_0x32a5ec[_0x307ec7(0xb5b)](_0x307ec7(0x42f));for(;;){const _0x2d7400=this[_0x307ec7(0x9b2)]();if(!_0x2d7400){if('ZiOXM'!==_0x307ec7(0x979)){const _0x17d403=this[_0x307ec7(0x9e0)];_0x17d403['contents'][_0x307ec7(0x80e)]();const _0x32d747=this[_0x307ec7(0x563)](this[_0x307ec7(0x773)]());if(_0x32d747===_0x307ec7(0xa9d)&&this['maxItems']()>0x0){const _0x2bd6e1=this[_0x307ec7(0x143)](this[_0x307ec7(0x773)]());let _0x1a8a23=this[_0x307ec7(0x2f7)](this['index']());_0x1a8a23=_0x1a8a23[_0x307ec7(0x5b6)](/\\I\[(\d+)\]/gi,''),_0x17d403['resetFontSettings'](),this[_0x307ec7(0x574)](_0x1a8a23,_0x2bd6e1),this['commandNameWindowDrawText'](_0x1a8a23,_0x2bd6e1),this[_0x307ec7(0xb45)](_0x1a8a23,_0x2bd6e1);}}else return null;}if(_0x2d7400[_0x307ec7(0x535)]()&&_0x2d7400['isAlive']())return _0x2d7400;}},BattleManager[_0x57ed21(0x9b2)]=function(){const _0x4c2d7f=_0x57ed21;if(this[_0x4c2d7f(0x357)][_0x4c2d7f(0x98b)]>0x0){if('EZqgR'==='EZqgR'){const _0x395af6=this['_forcedBattlers'][_0x4c2d7f(0x19a)](),_0x33f5ca=_0x395af6[0x0];return _0x33f5ca[_0x4c2d7f(0x613)]=_0x33f5ca[_0x4c2d7f(0x613)]||[],_0x33f5ca[_0x4c2d7f(0x613)][0x0]=_0x395af6[0x1],_0x33f5ca;}else _0x28cc60=(_0x56c74a+_0x5ec58f)/0x2,_0x3b2672=-0x1;}else{if(_0x4c2d7f(0x4ef)===_0x4c2d7f(0x1fb)){const _0x2c0374=_0x2791f0[_0x4c2d7f(0xb20)][_0x4c2d7f(0x3f0)]();[_0x4c2d7f(0x4bc),'list',_0x4c2d7f(0x4a2),_0x4c2d7f(0x131)][_0x4c2d7f(0x55d)](_0x2c0374)&&(this[_0x4c2d7f(0x772)]=0x0);}else return this[_0x4c2d7f(0x16d)][_0x4c2d7f(0x19a)]();}},VisuMZ['BattleCore'][_0x57ed21(0x2f9)]=Game_Battler[_0x57ed21(0xb20)]['forceAction'],Game_Battler[_0x57ed21(0xb20)]['forceAction']=function(_0x5ad371,_0x19f13f){const _0x133bba=_0x57ed21;VisuMZ[_0x133bba(0xfb)]['Game_Battler_forceAction'][_0x133bba(0x509)](this,_0x5ad371,_0x19f13f),this['_actions'][this[_0x133bba(0x613)][_0x133bba(0x98b)]-0x1][_0x133bba(0x449)]=!![];},Game_Interpreter[_0x57ed21(0xb20)][_0x57ed21(0x227)]=function(_0x241fa2){const _0x470592=_0x57ed21;return this[_0x470592(0xf4)](_0x241fa2[0x0],_0x241fa2[0x1],_0x316b57=>{const _0x6c2cf4=_0x470592;!_0x316b57[_0x6c2cf4(0x26d)]()&&(_0x6c2cf4(0xb85)!==_0x6c2cf4(0xb0d)?(_0x316b57['forceAction'](_0x241fa2[0x2],_0x241fa2[0x3]),BattleManager['forceAction'](_0x316b57)):_0x4a059b=_0x4b96cd>=_0x5e64ee?_0x462d36:_0x236d00);}),!![];},VisuMZ['BattleCore'][_0x57ed21(0xa9f)]=Game_Battler['prototype'][_0x57ed21(0x578)],Game_Battler['prototype'][_0x57ed21(0x578)]=function(){const _0x41cd62=_0x57ed21;VisuMZ[_0x41cd62(0xfb)][_0x41cd62(0xa9f)][_0x41cd62(0x509)](this),this['_actions'][_0x41cd62(0x98b)]<=0x0&&(this[_0x41cd62(0x5d1)]=Number['MIN_SAFE_INTEGER']);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0xa9c)]=BattleManager['selectNextCommand'],BattleManager['selectNextCommand']=function(){const _0x3dfc8d=_0x57ed21;this[_0x3dfc8d(0x66f)]()?this[_0x3dfc8d(0x994)]():VisuMZ['BattleCore']['BattleManager_selectNextCommand']['call'](this);},BattleManager[_0x57ed21(0x994)]=function(){const _0x4e6508=_0x57ed21;if(this['_currentActor']){if(this[_0x4e6508(0x88a)][_0x4e6508(0x360)]()){if('oYPuj'===_0x4e6508(0x292))return;else return _0x4390e5[_0x4e6508(0x849)]?_0x282917[_0x4e6508(0x716)](_0x4e6508(0x18c)):_0x28f154[_0x4e6508(0xfb)]['Settings'][_0x4e6508(0x4db)][_0x4e6508(0x6e2)];}this[_0x4e6508(0x1a0)](),this[_0x4e6508(0x36e)](),!this['_subject']&&!this[_0x4e6508(0x88a)]&&SceneManager[_0x4e6508(0x34f)][_0x4e6508(0x6a8)]();}else{if(!this[_0x4e6508(0xadd)]){if(_0x4e6508(0x7b2)!=='Xcgkp'){if(this['_battleLayoutStyle'])return this[_0x4e6508(0x768)];return this[_0x4e6508(0x768)]=_0x630805[_0x4e6508(0x34f)][_0x4e6508(0x3f0)](),this['_battleLayoutStyle'];}else this['selectNextActor']();}}},BattleManager[_0x57ed21(0x36e)]=function(){const _0x1d2ee5=_0x57ed21;if(!this[_0x1d2ee5(0x86e)]()||this[_0x1d2ee5(0x8f4)]()){this[_0x1d2ee5(0x95d)]&&(!$gameParty[_0x1d2ee5(0x1a2)]()['includes'](this[_0x1d2ee5(0x95d)])&&('mRsMG'===_0x1d2ee5(0xbf4)?(_0x196f3a[_0x1d2ee5(0x9a5)]=![],this[_0x1d2ee5(0xb7d)]()):this[_0x1d2ee5(0x95d)]=null));if(!this[_0x1d2ee5(0x95d)])this[_0x1d2ee5(0x353)](),this[_0x1d2ee5(0x88a)]=null,this['_inputting']=![];else{if(_0x1d2ee5(0x204)!==_0x1d2ee5(0x542))this[_0x1d2ee5(0x374)]();else{const _0x1c31d4=_0x163ed4[_0x1d2ee5(0x8b4)]?_0x4025d7[_0x1d2ee5(0x5f3)][_0x1d2ee5(0x8d3)][_0x1d2ee5(0xa45)]:_0x13f16c['BattleCore'][_0x1d2ee5(0x8d3)][_0x1d2ee5(0x107)],_0x18f8a9=_0x524a54['magicSkills'][_0x1d2ee5(0x55d)](_0x31cf05),_0x328a03=_0x18f8a9?_0x1c31d4['IconStypeMagic']:_0x1c31d4[_0x1d2ee5(0x12c)];_0x2ff44e=_0x1d2ee5(0x710)[_0x1d2ee5(0x455)](_0x328a03,_0x258572);}}}},BattleManager[_0x57ed21(0x374)]=function(){const _0x332401=_0x57ed21;!$gameParty[_0x332401(0x1a2)]()['includes'](this[_0x332401(0x95d)])&&(this[_0x332401(0x95d)]=null),this[_0x332401(0x95d)]?(this['_currentActor']=this[_0x332401(0x95d)],this[_0x332401(0x88a)]['_tpbState']=_0x332401(0x162),this[_0x332401(0xac0)]=!![],this[_0x332401(0x95d)]=null):(this[_0x332401(0x353)](),this[_0x332401(0x88a)]=null,this['_inputting']=![]);},VisuMZ['BattleCore'][_0x57ed21(0x58f)]=BattleManager[_0x57ed21(0x72d)],BattleManager[_0x57ed21(0x72d)]=function(){const _0x1cf58c=_0x57ed21;if(this[_0x1cf58c(0x9e6)]===_0x1cf58c(0x3a7))return this[_0x1cf58c(0x16b)]();else{if('RYSPZ'===_0x1cf58c(0xb19))return VisuMZ[_0x1cf58c(0xfb)][_0x1cf58c(0x58f)]['call'](this);else _0x45e654=_0x13be29['replace'](/\x1I\[(\d+)\]/gi,''),_0x190ced=_0x426dbf['replace'](/\\I\[(\d+)\]/gi,'');}},BattleManager[_0x57ed21(0x16b)]=function(){const _0x5ce5c0=_0x57ed21;return this[_0x5ce5c0(0x388)]();},VisuMZ[_0x57ed21(0xfb)]['BattleManager_cancelActorInput']=BattleManager['cancelActorInput'],BattleManager[_0x57ed21(0x353)]=function(){const _0x1e3bc6=_0x57ed21;if(this['isTpb']()&&this[_0x1e3bc6(0x9e6)]===_0x1e3bc6(0x129)){if(_0x1e3bc6(0x301)===_0x1e3bc6(0x301))this[_0x1e3bc6(0x88a)]=null;else{const _0xb9ab27=_0x3312b1(_0x41d70f['$1'])[_0x1e3bc6(0xaaa)]()['trim']();if(_0xb9ab27==='MANUAL')return _0x1e3bc6(0x47e);if(_0x5c4839[_0x1e3bc6(0xada)][_0xb9ab27])return _0xb9ab27;}}VisuMZ['BattleCore'][_0x1e3bc6(0x7be)][_0x1e3bc6(0x509)](this);},VisuMZ['BattleCore'][_0x57ed21(0x545)]=BattleManager[_0x57ed21(0x771)],BattleManager[_0x57ed21(0x771)]=function(){const _0x38261e=_0x57ed21,_0x33412d=this['_currentActor'];if(_0x33412d&&!_0x33412d['inputtingAction']()){if(_0x38261e(0xac7)===_0x38261e(0xac7)){const _0x38dd9a=_0x33412d['_actionInputIndex'];_0x33412d[_0x38261e(0x613)][_0x38dd9a]=new Game_Action(_0x33412d);}else _0x423998[_0x38261e(0xfb)][_0x38261e(0xa9f)][_0x38261e(0x509)](this),this[_0x38261e(0x613)]['length']<=0x0&&(this[_0x38261e(0x5d1)]=_0x34283e[_0x38261e(0x7ac)]);}return VisuMZ[_0x38261e(0xfb)][_0x38261e(0x545)][_0x38261e(0x509)](this);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x95c)]=BattleManager[_0x57ed21(0xf9)],BattleManager[_0x57ed21(0xf9)]=function(_0x87c2aa){const _0x274a5b=_0x57ed21;if(this[_0x274a5b(0x961)]['isForFriend']())return![];return VisuMZ[_0x274a5b(0xfb)]['BattleManager_checkSubstitute'][_0x274a5b(0x509)](this,_0x87c2aa);},SceneManager[_0x57ed21(0x9d4)]=function(){const _0x1a83dd=_0x57ed21;return this[_0x1a83dd(0x34f)]&&this['_scene']['constructor']===Scene_Battle;},SceneManager[_0x57ed21(0x8d0)]=function(){const _0x17a266=_0x57ed21;return Spriteset_Battle[_0x17a266(0xb20)][_0x17a266(0x4b8)]();},SceneManager[_0x57ed21(0x4c4)]=function(){if(SceneManager['isPreviousScene'](Scene_Options))return!![];return![];},SceneManager['isNextSceneBattleTransitionable']=function(){const _0x3232e1=_0x57ed21;if(SceneManager[_0x3232e1(0x98e)](Scene_Options))return!![];return![];},SceneManager[_0x57ed21(0x7a9)]=function(_0x1d1812){const _0x1feb2c=_0x57ed21;if(!SceneManager[_0x1feb2c(0x9d4)]())return!![];const _0x4e7aba=['Scene_Options','Scene_Party'];return _0x4e7aba[_0x1feb2c(0x55d)](_0x1d1812[_0x1feb2c(0xb1c)]);},VisuMZ['BattleCore']['SceneManager_push']=SceneManager[_0x57ed21(0x46e)],SceneManager[_0x57ed21(0x46e)]=function(_0x20e12c){const _0x1d41d8=_0x57ed21;if(!SceneManager['checkSceneBattleTransitionable'](_0x20e12c))return this['displayBattleCoreTransitionErrorMsg'](_0x20e12c);VisuMZ[_0x1d41d8(0xfb)][_0x1d41d8(0x30c)][_0x1d41d8(0x509)](this,_0x20e12c);},SceneManager[_0x57ed21(0x867)]=function(_0x1d6fb4){const _0x25888a=_0x57ed21;if(!$gameTemp[_0x25888a(0x899)]())return;if(this[_0x25888a(0x8a1)])return;this[_0x25888a(0x8a1)]=!![];let _0x30f1b3='';_0x30f1b3+=_0x25888a(0x24c),_0x30f1b3+=_0x25888a(0x83d)[_0x25888a(0x455)](_0x1d6fb4['name']),alert(_0x30f1b3);},VisuMZ['BattleCore'][_0x57ed21(0x6e6)]=Game_Temp[_0x57ed21(0xb20)][_0x57ed21(0x8d4)],Game_Temp[_0x57ed21(0xb20)][_0x57ed21(0x8d4)]=function(_0x1d0705,_0x24fb07,_0x1d9f31){const _0x51a44d=_0x57ed21;_0x1d0705=_0x1d0705[_0x51a44d(0x863)]((_0xb07adf,_0xf5d15f,_0xc71153)=>_0xc71153[_0x51a44d(0x50e)](_0xb07adf)===_0xf5d15f),SceneManager['isSceneBattle']()&&SceneManager['isBattleFlipped']()&&(_0x1d9f31=!_0x1d9f31),VisuMZ[_0x51a44d(0xfb)][_0x51a44d(0x6e6)][_0x51a44d(0x509)](this,_0x1d0705,_0x24fb07,_0x1d9f31),SceneManager[_0x51a44d(0x9d4)]()&&BattleManager[_0x51a44d(0x837)][_0x51a44d(0xab1)]();},Game_Temp[_0x57ed21(0xb20)][_0x57ed21(0x1d4)]=function(_0x18c6a1){this['_lastPluginCommandInterpreter']=_0x18c6a1;},Game_Temp[_0x57ed21(0xb20)][_0x57ed21(0x660)]=function(){return this['_lastPluginCommandInterpreter'];},Game_Temp[_0x57ed21(0xb20)][_0x57ed21(0x981)]=function(){this['_forcedBattleLayout']=undefined;},Game_Temp[_0x57ed21(0xb20)]['applyForcedGameTroopSettingsBattleCore']=function(_0x55443a){const _0x1dcb2f=_0x57ed21;$gameMap&&$dataMap&&$dataMap[_0x1dcb2f(0x75a)]&&this[_0x1dcb2f(0x4a6)]($dataMap[_0x1dcb2f(0x75a)]);const _0x192412=$dataTroops[_0x55443a];if(_0x192412){if(_0x1dcb2f(0x933)!==_0x1dcb2f(0x933))_0x1e56bc[_0x1dcb2f(0xfb)][_0x1dcb2f(0x1d2)][_0x1dcb2f(0x509)](this,_0x556196),_0x3c3314[_0x1dcb2f(0x642)]();else{let _0x2b1913=DataManager[_0x1dcb2f(0x34a)](_0x192412['id']);this[_0x1dcb2f(0x4a6)](_0x2b1913);}}},Game_Temp[_0x57ed21(0xb20)][_0x57ed21(0x4a6)]=function(_0x529ed6){const _0x2394a6=_0x57ed21;if(!_0x529ed6)return;if(_0x529ed6[_0x2394a6(0x463)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*)>/i)){const _0x479655=String(RegExp['$1']);if(_0x479655[_0x2394a6(0x463)](/DEFAULT/i)){if(_0x2394a6(0xb8d)==='AOftV')this['_forcedBattleLayout']='default';else{if(this[_0x2394a6(0x7fb)]===_0x58cff6)return;_0x544868['prototype']['hide'][_0x2394a6(0x509)](this);}}else{if(_0x479655[_0x2394a6(0x463)](/LIST/i)){if(_0x2394a6(0xa79)!==_0x2394a6(0xa79))return _0x175854[_0x2394a6(0x202)][_0x2394a6(0x8d3)]['QoL'][_0x2394a6(0x3c7)];else this[_0x2394a6(0x664)]=_0x2394a6(0x2c7);}else{if(_0x479655[_0x2394a6(0x463)](/XP/i))_0x2394a6(0x121)!==_0x2394a6(0x121)?!this[_0x2394a6(0x7ec)]()&&!this[_0x2394a6(0x977)][_0x2394a6(0x848)]()&&(this[_0x2394a6(0x9e6)]=_0x2394a6(0x553)):this[_0x2394a6(0x664)]='xp';else{if(_0x479655[_0x2394a6(0x463)](/PORTRAIT/i))this[_0x2394a6(0x664)]=_0x2394a6(0x4a2);else{if(_0x479655[_0x2394a6(0x463)](/BORDER/i))this[_0x2394a6(0x664)]=_0x2394a6(0x131);else{if(_0x479655[_0x2394a6(0x463)](/(?:SIDEVIEW UI|SIDEVIEW)/i)){if('WffmN'===_0x2394a6(0x335)){if(Imported['VisuMZ_3_SideviewBattleUI']){if(_0x2394a6(0x83b)==='ZGZen')this[_0x2394a6(0x664)]='sideview_ui';else{if(!this['hasSvBattler']())return![];const _0x47d4d7=this[_0x2394a6(0x595)]();if(!_0x47d4d7)return![];const _0x507df1=_0x47d4d7[_0x2394a6(0x28c)];if(!_0x507df1)return![];const _0xffb6a7=_0x507df1[_0x2394a6(0x829)];return _0xffb6a7&&!_0xffb6a7[_0x2394a6(0x347)];}}else this['_forcedBattleLayout']='default';}else return _0x1da1ff[_0x2394a6(0x863)](_0x3779b9=>_0x3779b9[_0x2394a6(0x31d)]()&&_0x3779b9!==_0x2695eb);}}}}}}}},VisuMZ[_0x57ed21(0xfb)]['Game_System_initialize']=Game_System[_0x57ed21(0xb20)][_0x57ed21(0xa1b)],Game_System[_0x57ed21(0xb20)][_0x57ed21(0xa1b)]=function(){const _0x78fed3=_0x57ed21;VisuMZ[_0x78fed3(0xfb)][_0x78fed3(0x3cc)][_0x78fed3(0x509)](this),this['initBattleCore']();},Game_System['prototype'][_0x57ed21(0xaa3)]=function(){const _0x17212e=_0x57ed21;this[_0x17212e(0x197)]=this[_0x17212e(0x197)]||[];},Game_System[_0x57ed21(0xb20)]['getDefeatedEnemies']=function(){const _0x349d2=_0x57ed21;if(this[_0x349d2(0x197)]===undefined)this['initBattleCore']();return this[_0x349d2(0x197)];},Game_System['prototype'][_0x57ed21(0xbef)]=function(_0xdc7a6b){const _0x4522b3=_0x57ed21;if(this['_defeatedEnemies']===undefined)this[_0x4522b3(0xaa3)]();if(!_0xdc7a6b)return;if(this['_defeatedEnemies'][_0x4522b3(0x55d)](_0xdc7a6b))return;this['_defeatedEnemies'][_0x4522b3(0x46e)](_0xdc7a6b),this['_defeatedEnemies'][_0x4522b3(0xb51)]((_0x85dbe5,_0x4e32d2)=>_0x85dbe5-_0x4e32d2);},VisuMZ[_0x57ed21(0xfb)]['Game_BattlerBase_addNewState']=Game_BattlerBase[_0x57ed21(0xb20)][_0x57ed21(0x24d)],Game_BattlerBase[_0x57ed21(0xb20)][_0x57ed21(0x24d)]=function(_0x11ec3e){const _0x1afe2e=_0x57ed21,_0x2d4125=this[_0x1afe2e(0x31d)](),_0x4f6755=this['stateMotionIndex']();VisuMZ[_0x1afe2e(0xfb)]['Game_BattlerBase_addNewState'][_0x1afe2e(0x509)](this,_0x11ec3e);this[_0x1afe2e(0xa8a)]()&&_0x2d4125&&this[_0x1afe2e(0xba1)]()&&('mFKLh'===_0x1afe2e(0x8f6)?(this[_0x1afe2e(0x784)]=!this[_0x1afe2e(0x8c2)](),$gameSystem[_0x1afe2e(0xbef)](this['enemyId']())):(this[_0x1afe2e(0x51c)]+=_0x3a5bee[_0x1afe2e(0x2c5)](),this[_0x1afe2e(0x973)]['y']+=_0x4bda5b['getBattlePortraitOffsetY']()));if(SceneManager[_0x1afe2e(0x9d4)]()&&_0x4f6755!==this['stateMotionIndex']()){if('SatUJ'!==_0x1afe2e(0x182)){if(this['battler']()){if(_0x1afe2e(0x9be)!==_0x1afe2e(0x9af))this[_0x1afe2e(0x595)]()[_0x1afe2e(0x5c7)]();else{if(!_0x37103a[_0x1afe2e(0x9d4)]())return;if(!_0x2a8dd1[_0x1afe2e(0xfc)])return;if(!_0x4346cb[_0x1afe2e(0x368)]())return;_0x5165eb[_0x1afe2e(0x78b)](_0x43ebc8,_0x55da24);const _0x16b4ef=_0x2a90b3[_0x1afe2e(0xadd)]['friendsUnit']();let _0x4b4cb0=_0x1d0c45[_0x1afe2e(0x34e)],_0x9111b=_0x2af766[_0x1afe2e(0x369)];_0x16b4ef[_0x1afe2e(0x915)](_0x4b4cb0),_0x16b4ef['gainHalfActionsPTB'](_0x9111b);}}}else _0x18770c[_0x1afe2e(0xadd)][_0x1afe2e(0xa9e)](_0x3ce2d0);}},Game_Enemy[_0x57ed21(0xb20)]['hasBeenDefeatedBefore']=function(){const _0x224901=_0x57ed21;return $gameSystem[_0x224901(0x907)]()[_0x224901(0x55d)](this[_0x224901(0x675)]);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0xa60)]=Game_BattlerBase[_0x57ed21(0xb20)][_0x57ed21(0x52d)],Game_BattlerBase[_0x57ed21(0xb20)]['eraseState']=function(_0x28eb3d){const _0x597088=_0x57ed21;VisuMZ[_0x597088(0xfb)][_0x597088(0xa60)]['call'](this,_0x28eb3d);this['isEnemy']()&&_0x28eb3d===this[_0x597088(0xbe5)]()&&this[_0x597088(0x31d)]()&&(this[_0x597088(0x784)]=![]);if(!this[_0x597088(0x844)]&&!this['_tempBattler']&&SceneManager[_0x597088(0x9d4)]()){if(_0x597088(0x695)===_0x597088(0x7b3))return _0x597088(0xa9d);else this[_0x597088(0xb23)]();}},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x12b)]=Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x80e)],Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x80e)]=function(){const _0x55fd53=_0x57ed21;VisuMZ[_0x55fd53(0xfb)][_0x55fd53(0x12b)]['call'](this),this[_0x55fd53(0x16a)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this['_multipliers']={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x55fd53(0x61a)]='default';},Game_Action['prototype']['makeDamageValue']=function(_0xfb895a,_0x5b363e){const _0x221a42=_0x57ed21;return VisuMZ[_0x221a42(0xfb)]['Settings'][_0x221a42(0x328)][_0x221a42(0xbeb)][_0x221a42(0x509)](this,_0xfb895a,_0x5b363e);},Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x3f5)]=function(_0x2a9c45,_0x317791){const _0x24c08a=_0x57ed21;return VisuMZ[_0x24c08a(0xfb)][_0x24c08a(0x8d3)][_0x24c08a(0x328)][_0x24c08a(0x984)][_0x24c08a(0x509)](this,_0x2a9c45,_0x317791);},Game_Action[_0x57ed21(0xb20)]['applyGuard']=function(_0x36b9f2,_0x4de751){const _0x29c7e5=_0x57ed21;return VisuMZ['BattleCore'][_0x29c7e5(0x8d3)][_0x29c7e5(0x328)][_0x29c7e5(0x624)]['call'](this,_0x36b9f2,_0x4de751);},VisuMZ['BattleCore']['Game_Action_itemHit']=Game_Action[_0x57ed21(0xb20)]['itemHit'],Game_Action[_0x57ed21(0xb20)]['itemHit']=function(_0x342a4d){const _0x3cf4b8=_0x57ed21,_0x532e75=this[_0x3cf4b8(0x720)]()[_0x3cf4b8(0x75a)];if(_0x532e75['match'](/<ALWAYS HIT>/i))return 0x1;else{if(_0x532e75[_0x3cf4b8(0x463)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x3cacff=VisuMZ['BattleCore']['Game_Action_itemHit'][_0x3cf4b8(0x509)](this,_0x342a4d);return _0x3cacff=this[_0x3cf4b8(0x1e8)]['hitRate']*_0x3cacff+this[_0x3cf4b8(0x1e8)][_0x3cf4b8(0x66e)],_0x3cacff;}}},Game_Action[_0x57ed21(0xb20)]['itemCri']=function(_0xfd237b){const _0x1d88e8=_0x57ed21;if(!this['item']()[_0x1d88e8(0x43d)][_0x1d88e8(0x67a)])return 0x0;let _0x42f54b=VisuMZ[_0x1d88e8(0xfb)][_0x1d88e8(0x8d3)][_0x1d88e8(0x328)][_0x1d88e8(0x56a)][_0x1d88e8(0x509)](this,_0xfd237b);return _0x42f54b=this[_0x1d88e8(0x1e8)]['criticalHitRate']*_0x42f54b+this['_multipliers']['criticalHitFlat'],_0x42f54b;},Game_Action[_0x57ed21(0xb20)][_0x57ed21(0xa21)]=function(_0x501c7f){const _0x3e1397=_0x57ed21;return _0x501c7f=VisuMZ[_0x3e1397(0xfb)][_0x3e1397(0x8d3)]['Damage'][_0x3e1397(0x992)][_0x3e1397(0x509)](this,_0x501c7f),_0x501c7f=this[_0x3e1397(0x1e8)][_0x3e1397(0x2e1)]*_0x501c7f+this['_multipliers'][_0x3e1397(0x537)],_0x501c7f;},VisuMZ['BattleCore'][_0x57ed21(0x4fe)]=Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x6a2)],Game_Action['prototype'][_0x57ed21(0x6a2)]=function(_0x10d471){const _0x5c1e1a=_0x57ed21;if(this['_customDamageFormula']!==_0x5c1e1a(0x4bc)){if(_0x5c1e1a(0x37c)!==_0x5c1e1a(0x4cc))return this[_0x5c1e1a(0x539)](_0x10d471);else _0x2fceda*=_0x43fd25['stateRate'](_0x25f7a1[_0x5c1e1a(0x654)]),_0x24650f*=this[_0x5c1e1a(0x23d)](_0x2f85ef);}else{if(DataManager[_0x5c1e1a(0x8cb)](this[_0x5c1e1a(0x720)]())===_0x5c1e1a(0x47e)){if(_0x5c1e1a(0x62b)===_0x5c1e1a(0x62b))return VisuMZ[_0x5c1e1a(0xfb)][_0x5c1e1a(0x4fe)][_0x5c1e1a(0x509)](this,_0x10d471);else _0x273644+=_0x10201d[_0x5c1e1a(0x929)][_0x5c1e1a(0x299)]||0x0,_0x4520fa+=_0x12df7a[_0x5c1e1a(0x929)][_0x5c1e1a(0xbda)]||0x0;}else{if(_0x5c1e1a(0x296)===_0x5c1e1a(0xbe8)){this['_damages'][_0x5c1e1a(0x46e)](_0x35cc6d);if(this[_0x5c1e1a(0x5cf)]()){const _0x588629=_0x543b50[_0x5c1e1a(0x34f)][_0x5c1e1a(0x9ea)];if(_0x588629)_0x588629[_0x5c1e1a(0x8f3)](_0x3b5da4,this[_0x5c1e1a(0x635)]);}else{this['damageContainer']()['addChild'](_0x30657c);if(_0x4c1d46[_0x5c1e1a(0x8d0)]())_0x54fe65[_0x5c1e1a(0x19e)]['x']=-0x1;}}else return this['evalDamageFormulaBattleCore'](_0x10d471);}}},Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x479)]=function(_0x31888f){this['_customDamageFormula']=_0x31888f;},Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x539)]=function(_0x1ea2e8){const _0x3bd08d=_0x57ed21,_0x50fb93=this[_0x3bd08d(0x720)](),_0x27d423=_0x50fb93[_0x3bd08d(0x43d)]['formula'];_0x50fb93[_0x3bd08d(0x43d)][_0x3bd08d(0x1ee)]=this['_customDamageFormula'];let _0x1c6ed7=VisuMZ[_0x3bd08d(0xfb)][_0x3bd08d(0x4fe)][_0x3bd08d(0x509)](this,_0x1ea2e8);return _0x50fb93[_0x3bd08d(0x43d)][_0x3bd08d(0x1ee)]=_0x27d423,_0x1c6ed7;},Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x45b)]=function(){const _0x5a3b9c=_0x57ed21;if(this[_0x5a3b9c(0x720)]()[_0x5a3b9c(0x75a)][_0x5a3b9c(0x463)](/<DAMAGE STYLE:[ ](.*)>/i)){if(_0x5a3b9c(0x74b)!=='AkotY')return _0x4f2512[_0x5a3b9c(0xfb)][_0x5a3b9c(0x8d3)]['Actor']['Shadow'];else{const _0x580c14=String(RegExp['$1'])['toUpperCase']()[_0x5a3b9c(0x1f6)]();return _0x580c14;}}return'MANUAL';},Game_Action[_0x57ed21(0xb20)]['evalDamageFormulaBattleCore']=function(_0x22aa44){const _0x1caeac=_0x57ed21,_0x546908=DataManager[_0x1caeac(0x8cb)](this[_0x1caeac(0x720)]()),_0x3f0fcb=VisuMZ['DamageStyles'][_0x546908];try{if(_0x1caeac(0x293)!=='jvdFt')return _0x3f0fcb[_0x1caeac(0x194)][_0x1caeac(0x509)](this,_0x22aa44);else{const _0xaa2ce7=_0x11d554[_0x1caeac(0x50e)](_0x6b5a1e[_0x1caeac(0xaaa)]()[_0x1caeac(0x1f6)]());_0xaa2ce7>=0x0&&_0xaa2ce7<=0x7&&_0x25533c['addDebuff'](_0xaa2ce7,_0x20e0bf);}}catch(_0x1d9413){if(_0x1caeac(0x814)===_0x1caeac(0x94c)){if(!_0x5ccc2c['isSideView']())return;const _0x5f3fb1=this[_0x1caeac(0x595)]();if(!_0x5f3fb1)return;if(_0x2abc7===_0x1ea529||_0x25312e===_0xe3d2d3)return;if(_0xde0d20(_0x333a78)||_0x48a86e(_0x17d6ea))return;_0x7af80=_0x471e6a||0x0;if(_0x2bc2b7>0x0){if(_0x5f3fb1[_0x1caeac(0xa30)]>_0x42a56f)_0x11b823+=_0x5f3fb1[_0x1caeac(0x6c1)]/0x2+_0x2e2e4e;if(_0x5f3fb1[_0x1caeac(0xa30)]<_0x3a1582)_0x5b152d-=_0x5f3fb1[_0x1caeac(0x6c1)]/0x2+_0x12b151;}if(_0x38b7be)this[_0x1caeac(0x9bd)](_0x9e4cfb,_0x3bfaa8,![]);_0x12291b-=_0x5f3fb1['_homeX'],_0x187156-=_0x5f3fb1[_0x1caeac(0x214)],_0x5f3fb1[_0x1caeac(0x403)](_0x1b0513,_0x42e2a6,_0x309fe5);if(_0x3fd33a['VisuMZ_0_CoreEngine'])_0x5f3fb1[_0x1caeac(0x1c6)](_0x45afba||_0x1caeac(0x315));}else{if($gameTemp['isPlaytest']())console['log'](_0x1d9413);return VisuMZ[_0x1caeac(0xfb)][_0x1caeac(0x4fe)][_0x1caeac(0x509)](this);}}},Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x70e)]=function(_0x460f59,_0x54acaf){const _0x3b2212=_0x57ed21;if(this[_0x3b2212(0x66d)]())return _0x54acaf;const _0x1a9b06=this['subject'](),_0x299e77=_0x460f59;let _0x5121de=[],_0x1011b4=[];_0x5121de[_0x3b2212(0x46e)](this[_0x3b2212(0x16a)][_0x3b2212(0x628)],this[_0x3b2212(0x16a)][_0x3b2212(0x5ba)]),_0x1011b4[_0x3b2212(0x46e)](this[_0x3b2212(0x16a)]['arPenRate'],this[_0x3b2212(0x16a)][_0x3b2212(0x7dd)]);const _0x33dfe7=this[_0x3b2212(0x45c)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x25647e=this[_0x3b2212(0x45c)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x41789a=this[_0x3b2212(0x45c)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x1d388b=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x5121de=_0x5121de[_0x3b2212(0x8a9)](_0x299e77[_0x3b2212(0x86d)]()['map'](_0x48cfdb=>_0x48cfdb&&_0x48cfdb[_0x3b2212(0x75a)][_0x3b2212(0x463)](_0x33dfe7)?Number(RegExp['$1']):0x0)),_0x1011b4=_0x1011b4[_0x3b2212(0x8a9)](_0x299e77[_0x3b2212(0x86d)]()[_0x3b2212(0x6d9)](_0x6a26a4=>_0x6a26a4&&_0x6a26a4[_0x3b2212(0x75a)][_0x3b2212(0x463)](_0x25647e)?Number(RegExp['$1'])/0x64:0x0)),_0x5121de=_0x5121de[_0x3b2212(0x8a9)](_0x1a9b06['traitObjects']()['map'](_0x11ff31=>_0x11ff31&&_0x11ff31['note']['match'](_0x41789a)?Number(RegExp['$1']):0x0)),_0x1011b4=_0x1011b4[_0x3b2212(0x8a9)](_0x1a9b06[_0x3b2212(0x86d)]()[_0x3b2212(0x6d9)](_0x291086=>_0x291086&&_0x291086[_0x3b2212(0x75a)][_0x3b2212(0x463)](_0x1d388b)?Number(RegExp['$1'])/0x64:0x0)),this[_0x3b2212(0x720)]()['note'][_0x3b2212(0x463)](_0x41789a)&&_0x5121de[_0x3b2212(0x46e)](Number(RegExp['$1'])),this[_0x3b2212(0x720)]()[_0x3b2212(0x75a)][_0x3b2212(0x463)](_0x1d388b)&&_0x1011b4['push'](Number(RegExp['$1'])),_0x54acaf=_0x5121de['reduce']((_0xe84d52,_0x1487aa)=>_0xe84d52-_0x1487aa,_0x54acaf),_0x54acaf>0x0&&(_0x54acaf=_0x1011b4['reduce']((_0x2634da,_0x4d2c89)=>_0x2634da*(0x1-_0x4d2c89),_0x54acaf)),_0x54acaf;},VisuMZ[_0x57ed21(0xfb)]['Game_Action_executeDamage']=Game_Action[_0x57ed21(0xb20)]['executeDamage'],Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x5a1)]=function(_0x3245dd,_0x41be1b){const _0x50a5c8=_0x57ed21;_0x41be1b=_0x41be1b*this['_multipliers'][_0x50a5c8(0x9ac)],_0x41be1b+=this[_0x50a5c8(0x1e8)]['damageFlat']*(_0x41be1b>=0x0?0x1:-0x1),_0x41be1b=this['applyBattleCoreJS']('PreDamage%1JS',_0x3245dd,_0x41be1b,![]),_0x41be1b=this['applyDamageCaps'](_0x41be1b),_0x41be1b=Math[_0x50a5c8(0x413)](_0x41be1b),this[_0x50a5c8(0xaf0)]=_0x41be1b,this['_totalValue']=this['_totalValue']||0x0,this['_totalValue']+=_0x41be1b,VisuMZ[_0x50a5c8(0xfb)][_0x50a5c8(0x950)][_0x50a5c8(0x509)](this,_0x3245dd,_0x41be1b),this[_0x50a5c8(0x71c)](_0x50a5c8(0x418),_0x3245dd,_0x41be1b,!![]);},Game_Action[_0x57ed21(0xb20)][_0x57ed21(0xae1)]=function(_0x873428){const _0x495478=_0x57ed21;if(this[_0x495478(0x140)]())return _0x873428;return _0x873428=this[_0x495478(0xad9)](_0x873428),_0x873428=this[_0x495478(0x167)](_0x873428),_0x873428;},Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x140)]=function(){const _0x98bbdf=_0x57ed21,_0xd43242=/<BYPASS DAMAGE CAP>/i;if(this[_0x98bbdf(0x720)]()[_0x98bbdf(0x75a)][_0x98bbdf(0x463)](_0xd43242))return!![];if(this[_0x98bbdf(0x478)]()['traitObjects']()[_0x98bbdf(0x3fa)](_0x29e05e=>_0x29e05e&&_0x29e05e[_0x98bbdf(0x75a)][_0x98bbdf(0x463)](_0xd43242)))return!![];return!VisuMZ[_0x98bbdf(0xfb)]['Settings'][_0x98bbdf(0x328)][_0x98bbdf(0x733)];},Game_Action['prototype'][_0x57ed21(0xad9)]=function(_0x737558){const _0x3b76fe=_0x57ed21;if(!VisuMZ['BattleCore'][_0x3b76fe(0x8d3)][_0x3b76fe(0x328)][_0x3b76fe(0xa03)])return _0x737558;const _0x3a445c=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x3b76fe(0x720)]()['note'][_0x3b76fe(0x463)](_0x3a445c))return _0x737558;if(this['subject']()['traitObjects']()[_0x3b76fe(0x3fa)](_0x208e6f=>_0x208e6f&&_0x208e6f[_0x3b76fe(0x75a)][_0x3b76fe(0x463)](_0x3a445c))){if(_0x3b76fe(0x3f6)!==_0x3b76fe(0x3f6))return;else return _0x737558;}const _0xaa582=_0x737558<0x0?-0x1:0x1;_0x737558=Math[_0x3b76fe(0x802)](_0x737558);let _0xb7bf96=this['subject']()[_0x3b76fe(0xbf5)]();this[_0x3b76fe(0x720)]()[_0x3b76fe(0x75a)][_0x3b76fe(0x463)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0xb7bf96+=Number(RegExp['$1'])/0x64);_0xb7bf96=_0xb7bf96[_0x3b76fe(0x8fd)](0.01,0x1);const _0x3f3107=this[_0x3b76fe(0x518)](),_0x4fabb=_0xb7bf96*_0x3f3107;if(_0x737558>_0x4fabb&&_0x3f3107>_0x4fabb){_0x737558-=_0x4fabb;const _0x28c5f7=VisuMZ[_0x3b76fe(0xfb)]['Settings']['Damage'][_0x3b76fe(0x490)],_0x46402d=Math[_0x3b76fe(0x952)](0x1-_0x737558/((_0x3f3107-_0x4fabb)*_0x28c5f7+_0x737558),0.01);_0x737558*=_0x46402d,_0x737558+=_0x4fabb;}return _0x737558*_0xaa582;},Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x518)]=function(){const _0x2f7dbc=_0x57ed21;if(this[_0x2f7dbc(0x720)]()[_0x2f7dbc(0x75a)][_0x2f7dbc(0x463)](/<DAMAGE CAP:[ ](\d+)>/i))return Number(RegExp['$1']);else{if(_0x2f7dbc(0x2b1)!=='OWjdS')this[_0x2f7dbc(0xa2f)]();else return this[_0x2f7dbc(0x478)]()[_0x2f7dbc(0x9fa)]();}},Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x167)]=function(_0x27be4a){const _0x688672=_0x57ed21;console[_0x688672(0xb2e)](_0x27be4a);let _0x50e403=this[_0x688672(0x518)]();return _0x27be4a['clamp'](-_0x50e403,_0x50e403);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0xbd0)]=Game_Action[_0x57ed21(0xb20)]['apply'],Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x3ba)]=function(_0x492fd3){const _0xdc3ab6=_0x57ed21;this['applyBattleCoreJS'](_0xdc3ab6(0x566),_0x492fd3,0x0,!![]),VisuMZ[_0xdc3ab6(0xfb)][_0xdc3ab6(0xbd0)]['call'](this,_0x492fd3),this[_0xdc3ab6(0x71c)](_0xdc3ab6(0x60e),_0x492fd3,this[_0xdc3ab6(0xaf0)]||0x0,!![]),this[_0xdc3ab6(0x5c2)](_0x492fd3);},Game_Action['prototype'][_0x57ed21(0x71c)]=function(_0x75bae0,_0x2ccbda,_0xa2e2dd,_0xd6cb2){const _0x341df4=_0x57ed21;if(this[_0x341df4(0xa76)]||this[_0x341df4(0x844)])return;_0xa2e2dd=_0xa2e2dd||0x0;const _0x29f30d=_0xa2e2dd,_0x3c5cca=VisuMZ['BattleCore'][_0x341df4(0x8d3)][_0x341df4(0x5c6)],_0x1201d8=_0x75bae0[_0x341df4(0x455)]('');if(_0x3c5cca[_0x1201d8]){if(_0x341df4(0x9f1)===_0x341df4(0x8f0))_0x2b805d[_0x341df4(0xb65)]&&_0x150235[_0x341df4(0xb65)]();else{_0xa2e2dd=_0x3c5cca[_0x1201d8][_0x341df4(0x509)](this,_0xa2e2dd,_0x2ccbda);if(_0xd6cb2)_0xa2e2dd=_0x29f30d;}}let _0x4a5520=VisuMZ[_0x341df4(0xfb)][_0x341df4(0x786)](this[_0x341df4(0x720)](),_0x75bae0[_0x341df4(0x455)](''));if(VisuMZ[_0x341df4(0xfb)]['JS'][_0x4a5520]){_0xa2e2dd=VisuMZ[_0x341df4(0xfb)]['JS'][_0x4a5520]['call'](this,this[_0x341df4(0x478)](),_0x2ccbda,this[_0x341df4(0x720)](),_0xa2e2dd);if(_0xd6cb2)_0xa2e2dd=_0x29f30d;}for(const _0x502820 of this[_0x341df4(0x478)]()[_0x341df4(0x86d)]()){if(_0x341df4(0x682)===_0x341df4(0xacd)){const _0xc0bb5b=_0x5ab715['prototype']['slice']['call'](arguments,0x1);this[_0x341df4(0x7b1)][_0x341df4(0x22d)]({'name':_0x4a1ef9,'params':_0xc0bb5b});}else{if(!_0x502820)continue;_0x4a5520=VisuMZ[_0x341df4(0xfb)][_0x341df4(0x786)](_0x502820,_0x75bae0['format'](_0x341df4(0x1dc)));if(VisuMZ[_0x341df4(0xfb)]['JS'][_0x4a5520]){_0xa2e2dd=VisuMZ[_0x341df4(0xfb)]['JS'][_0x4a5520][_0x341df4(0x509)](this,this[_0x341df4(0x478)](),_0x2ccbda,_0x502820,_0xa2e2dd);if(_0xd6cb2)_0xa2e2dd=_0x29f30d;}}}for(const _0x5e1e69 of _0x2ccbda[_0x341df4(0x86d)]()){if(_0x341df4(0x592)!==_0x341df4(0x2a7)){if(!_0x5e1e69)continue;_0x4a5520=VisuMZ[_0x341df4(0xfb)][_0x341df4(0x786)](_0x5e1e69,_0x75bae0[_0x341df4(0x455)](_0x341df4(0x86b)));if(VisuMZ['BattleCore']['JS'][_0x4a5520]){_0xa2e2dd=VisuMZ[_0x341df4(0xfb)]['JS'][_0x4a5520][_0x341df4(0x509)](this,this[_0x341df4(0x478)](),_0x2ccbda,_0x5e1e69,_0xa2e2dd);if(_0xd6cb2)_0xa2e2dd=_0x29f30d;}}else _0x2c8cfb[_0x341df4(0x39e)]?this[_0x341df4(0x747)]():_0x1ababf[_0x341df4(0xfb)][_0x341df4(0x9a8)][_0x341df4(0x509)](this);}return _0xa2e2dd;},Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x3ff)]=function(_0x4fe23c){const _0x179df3=_0x57ed21,_0x37c191=this[_0x179df3(0x1de)]||0x0,_0xbe0067=VisuMZ['BattleCore'][_0x179df3(0x8d3)][_0x179df3(0x5c6)],_0x30da90=_0x4fe23c[_0x179df3(0x455)]('');_0xbe0067[_0x30da90]&&_0xbe0067[_0x30da90][_0x179df3(0x509)](this,_0x37c191);let _0x246480=VisuMZ['BattleCore'][_0x179df3(0x786)](this[_0x179df3(0x720)](),_0x4fe23c);if(VisuMZ[_0x179df3(0xfb)]['JS'][_0x246480]){if('JdUeP'!==_0x179df3(0x4aa))return _0xd558b5[_0x179df3(0xfb)]['Game_Interpreter_command301']['call'](this,_0x5cc915);else VisuMZ[_0x179df3(0xfb)]['JS'][_0x246480]['call'](this,this[_0x179df3(0x478)](),this[_0x179df3(0x478)](),this[_0x179df3(0x720)](),_0x37c191);}for(const _0x2cec30 of this[_0x179df3(0x478)]()['traitObjects']()){if(!_0x2cec30)continue;_0x246480=VisuMZ[_0x179df3(0xfb)]['createKeyJS'](_0x2cec30,_0x4fe23c),VisuMZ[_0x179df3(0xfb)]['JS'][_0x246480]&&VisuMZ['BattleCore']['JS'][_0x246480]['call'](this,this[_0x179df3(0x478)](),this[_0x179df3(0x478)](),_0x2cec30,_0x37c191);}},Game_Action[_0x57ed21(0xb20)][_0x57ed21(0xb57)]=function(){const _0x72ee69=_0x57ed21;return VisuMZ['BattleCore'][_0x72ee69(0x8d3)][_0x72ee69(0x5c6)][_0x72ee69(0x7ea)]['call'](this);},Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x688)]=function(){const _0x5b35e0=_0x57ed21;return VisuMZ['BattleCore'][_0x5b35e0(0x8d3)][_0x5b35e0(0x5c6)][_0x5b35e0(0x75b)];},Game_Action[_0x57ed21(0xb20)]['isCustomBattleScope']=function(){const _0x5da168=_0x57ed21;return this[_0x5da168(0x720)]()[_0x5da168(0x75a)]['match'](/<JS TARGETS>/i);},Game_Action[_0x57ed21(0xb20)]['isBattleCoreTargetScope']=function(){const _0x4e8cf8=_0x57ed21;if(!this[_0x4e8cf8(0xa51)]&&this[_0x4e8cf8(0x478)]()['isConfused']())return![];if(this[_0x4e8cf8(0xbc6)]())return!![];return typeof this[_0x4e8cf8(0x720)]()['scope']===_0x4e8cf8(0x4da);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0xa58)]=Game_Action[_0x57ed21(0xb20)]['isForOpponent'],Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x9eb)]=function(){const _0x453320=_0x57ed21;if(this['isBattleCoreTargetScope']()&&!this[_0x453320(0xbc6)]())return this['isForOpponentBattleCore']();else{if(_0x453320(0xa2a)===_0x453320(0xa2a))return VisuMZ['BattleCore']['Game_Action_isForOpponent'][_0x453320(0x509)](this);else{if(!_0x4e32b1[_0x453320(0x9d4)]())return;_0x12bf62[_0x453320(0x78b)](_0x11780d,_0x5b4900);const _0x1778dc=_0x43d4d2[_0x453320(0x660)](),_0x5dfd36=_0x4947c5[_0x453320(0x1bf)],_0x1eebf4=_0x2d7d8c[_0x453320(0x856)];if(!_0x1778dc)return;_0x6ded75[_0x453320(0xad0)]=_0x5dfd36,_0x3c3512[_0x453320(0x2f4)]=_0x5eeb62[_0x453320(0x8fc)]?_0xcfec11[_0x453320(0x8fc)][_0x1bb874[_0x453320(0xad0)]]||null:null,_0x503cb5[_0x453320(0x2f4)]&&_0x1eebf4[_0x453320(0xaaa)]()['trim']()!==_0x453320(0x1d8)&&_0x1778dc[_0x453320(0x2eb)]([_0x1eebf4]);}}},Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x5b2)]=function(){const _0x40fb9b=_0x57ed21,_0xd83de9=this[_0x40fb9b(0x720)]()[_0x40fb9b(0x49c)];return _0xd83de9['match'](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x11c)]=Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x6eb)],Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x6eb)]=function(){const _0x5838d0=_0x57ed21;return this[_0x5838d0(0x6dd)]()&&!this[_0x5838d0(0xbc6)]()?this['isForFriendBattleCore']():VisuMZ[_0x5838d0(0xfb)]['Game_Action_isForFriend'][_0x5838d0(0x509)](this);},Game_Action['prototype']['isForFriendBattleCore']=function(){const _0x29ff49=_0x57ed21,_0x3baf7f=this['item']()[_0x29ff49(0x49c)];return _0x3baf7f[_0x29ff49(0x463)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0xfd)]=Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x26e)],Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x26e)]=function(){const _0x475733=_0x57ed21;if(this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']())return this[_0x475733(0x4ce)]();else{if(_0x475733(0x6c8)!=='RAmSS')return VisuMZ[_0x475733(0xfb)][_0x475733(0xfd)]['call'](this);else{if(!_0x1e5fa[_0x475733(0x9d4)]())return;if(!_0x32debe[_0x475733(0x96e)])return;if(!_0xb0b0cd[_0x475733(0x7d7)]())return;_0x356ac1[_0x475733(0x78b)](_0x3de27e,_0x56d3c2);const _0x15dd34=_0x980fe8[_0x475733(0xb69)];_0x2890c5['_subject']&&_0x55b607[_0x475733(0xadd)][_0x475733(0x7e4)]()[_0x475733(0xaf7)](_0x15dd34);}}},Game_Action['prototype'][_0x57ed21(0x4ce)]=function(){const _0x3d1b95=_0x57ed21,_0x5d5d3f=this[_0x3d1b95(0x720)]()[_0x3d1b95(0x49c)];return _0x5d5d3f[_0x3d1b95(0x463)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x39c)]=Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x487)],Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x487)]=function(){const _0x2987c0=_0x57ed21;if(this[_0x2987c0(0x6dd)]()&&!this[_0x2987c0(0xbc6)]())return this[_0x2987c0(0x8c0)]();else{if(_0x2987c0(0xb64)!=='oZfPu')this[_0x2987c0(0xbe2)](_0x2987c0(0x3b6));else return VisuMZ['BattleCore']['Game_Action_needsSelection'][_0x2987c0(0x509)](this);}},Game_Action[_0x57ed21(0xb20)]['needsSelectionBattleCore']=function(){const _0x4d9aba=_0x57ed21,_0x3d4542=this[_0x4d9aba(0x720)]()[_0x4d9aba(0x49c)];if(_0x3d4542['match'](/RANDOM/i))return![];if(_0x3d4542[_0x4d9aba(0x463)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x3d4542[_0x4d9aba(0x463)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ[_0x4d9aba(0xfb)][_0x4d9aba(0x39c)][_0x4d9aba(0x509)](this);},VisuMZ[_0x57ed21(0xfb)]['Game_Action_makeTargets']=Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x433)],Game_Action[_0x57ed21(0xb20)]['makeTargets']=function(){const _0x24d8a2=_0x57ed21;let _0x180c63=[];if(this[_0x24d8a2(0x6dd)]()){if('TXtLg'!==_0x24d8a2(0x882))return this[_0x24d8a2(0x18e)]>0x0;else _0x180c63=this[_0x24d8a2(0x18d)]();}else _0x24d8a2(0x67d)!=='wrYcY'?_0x180c63=VisuMZ[_0x24d8a2(0xfb)][_0x24d8a2(0x99c)][_0x24d8a2(0x509)](this):_0x405113+=_0x2ba2f8(_0x281f46['$1']);return _0x180c63=this[_0x24d8a2(0xb22)](_0x180c63),_0x180c63;},Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x18d)]=function(){const _0x4af8f0=_0x57ed21;let _0x24c9d9=[];const _0x4e950a=String(this['item']()[_0x4af8f0(0x49c)]),_0x230e29=VisuMZ[_0x4af8f0(0xfb)][_0x4af8f0(0x786)](this[_0x4af8f0(0x720)](),_0x4af8f0(0x7ed));if(VisuMZ[_0x4af8f0(0xfb)]['JS'][_0x230e29]){_0x24c9d9=VisuMZ['BattleCore'][_0x4af8f0(0x99c)][_0x4af8f0(0x509)](this);const _0x5dd721=VisuMZ['BattleCore'][_0x4af8f0(0x786)](this['item'](),'Targets');return _0x24c9d9=VisuMZ[_0x4af8f0(0xfb)]['JS'][_0x5dd721]['call'](this,this['subject'](),_0x24c9d9),this['repeatTargets'](_0x24c9d9);}if(_0x4e950a[_0x4af8f0(0x463)](/(\d+) RANDOM ANY/i)){if(_0x4af8f0(0x878)==='PyjDn')for(const _0x592b9b of _0x481e50){const _0x4e7b7d=_0xc2ecdb[0x0]['format'](_0x592b9b[0x0]),_0x33cfaa=_0x10c59f[0x1][_0x4af8f0(0x455)](_0x592b9b[0x1]),_0x5c859e=new _0x53f0c2(_0x74c96f[_0x4af8f0(0x455)](_0x33cfaa),'i');_0x30e176[_0x4e7b7d]=_0x5c859e;}else{let _0x256b21=Number(RegExp['$1']);while(_0x256b21--){const _0x3729ac=Math['randomInt'](0x2)===0x0?this[_0x4af8f0(0x28b)]():this[_0x4af8f0(0x7e4)]();_0x24c9d9['push'](_0x3729ac[_0x4af8f0(0xa19)]());}return this[_0x4af8f0(0x41a)](_0x24c9d9);}}if(_0x4e950a[_0x4af8f0(0x463)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){if(_0x4af8f0(0x497)==='qQxuK'){let _0x1040ae=Number(RegExp['$1']);while(_0x1040ae--){if(_0x4af8f0(0x198)!==_0x4af8f0(0x444))_0x24c9d9[_0x4af8f0(0x46e)](this[_0x4af8f0(0x28b)]()[_0x4af8f0(0xa19)]());else return _0x124230(_0x5a4dbe['$1'])/0x64;}return this['repeatTargets'](_0x24c9d9);}else this[_0x4af8f0(0x46e)](_0x4af8f0(0x862),_0x2147b8);}if(_0x4e950a['match'](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x3434b9=Number(RegExp['$1']);while(_0x3434b9--){_0x24c9d9[_0x4af8f0(0x46e)](this[_0x4af8f0(0x7e4)]()[_0x4af8f0(0xa19)]());}return this[_0x4af8f0(0x41a)](_0x24c9d9);}if(_0x4e950a['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i)){if('FbTLt'!==_0x4af8f0(0x626))return _0x24c9d9[_0x4af8f0(0x46e)](...this[_0x4af8f0(0x7e4)]()[_0x4af8f0(0x38d)]()['filter'](_0x262767=>_0x262767!==this['subject']())),this[_0x4af8f0(0x41a)](_0x24c9d9);else{_0x49bc90[_0x4af8f0(0x37e)](_0x592f25);if(_0x1ea87e)_0x3cf818[_0x4af8f0(0x1df)]();}}return VisuMZ[_0x4af8f0(0xfb)][_0x4af8f0(0x99c)][_0x4af8f0(0x509)](this);},Game_Action[_0x57ed21(0xb20)]['randomTargets']=function(_0x1223ff){const _0x7286a0=_0x57ed21,_0x3e193c=[];for(let _0x2c0452=0x0;_0x2c0452<this[_0x7286a0(0x81b)]();_0x2c0452++){_0x3e193c[_0x7286a0(0x46e)](_0x1223ff[_0x7286a0(0xa19)]());}return _0x3e193c;},Game_Action['prototype'][_0x57ed21(0xb22)]=function(_0x48a085){const _0x338a5b=_0x57ed21;if(!this[_0x338a5b(0x720)]())return _0x48a085;const _0x8ceebe=this['item']()['note'];return _0x8ceebe[_0x338a5b(0x463)](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&('ufCra'!==_0x338a5b(0x4f8)?_0x48a085[_0x338a5b(0x29d)](this[_0x338a5b(0x478)]()):_0x256743[_0x338a5b(0x49c)]=_0x3441e7(_0x10fc5e['$1'])[_0x338a5b(0xaaa)]()[_0x338a5b(0x1f6)]()),_0x48a085;},VisuMZ[_0x57ed21(0xfb)]['Game_Action_itemEffectAddAttackState']=Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x870)],Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x870)]=function(_0x25edc8,_0x2c2452){const _0x414b59=_0x57ed21;VisuMZ[_0x414b59(0xfb)][_0x414b59(0x7df)]['call'](this,_0x25edc8,_0x2c2452);if(!_0x25edc8[_0x414b59(0x74a)]())return;for(const _0x429609 of this[_0x414b59(0x478)]()['attackStates']()){if(_0x429609===_0x25edc8[_0x414b59(0xbe5)]()){let _0xb918f5=_0x2c2452[_0x414b59(0x978)];_0xb918f5*=_0x25edc8[_0x414b59(0x532)](_0x429609),_0xb918f5*=this[_0x414b59(0x478)]()['attackStatesRate'](_0x429609),_0xb918f5*=this[_0x414b59(0x23d)](_0x25edc8),Math[_0x414b59(0xa91)]()<_0xb918f5&&(_0x414b59(0x16e)==='rwGJZ'?(_0x25edc8[_0x414b59(0x668)]=!![],this[_0x414b59(0x302)](_0x25edc8)):_0x5ea3a5=_0x53a349>=_0x732ca9?_0x19f08e:_0x3ec213);}}},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0xad1)]=Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x677)],Game_Action['prototype'][_0x57ed21(0x677)]=function(_0x583b7d,_0x458f04){const _0x17ea18=_0x57ed21;VisuMZ[_0x17ea18(0xfb)][_0x17ea18(0xad1)][_0x17ea18(0x509)](this,_0x583b7d,_0x458f04);if(!_0x583b7d['isImmortal']())return;if(_0x458f04[_0x17ea18(0x654)]!==_0x583b7d[_0x17ea18(0xbe5)]())return;let _0x5dd50c=_0x458f04[_0x17ea18(0x978)];!this[_0x17ea18(0x66d)]()&&(_0x5dd50c*=_0x583b7d[_0x17ea18(0x532)](_0x458f04[_0x17ea18(0x654)]),_0x5dd50c*=this[_0x17ea18(0x23d)](_0x583b7d)),Math['random']()<_0x5dd50c&&(_0x583b7d['_deathStateApplied']=!![],this[_0x17ea18(0x302)](_0x583b7d));},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x968)]=Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x438)],Game_Action['prototype']['applyGlobal']=function(){const _0x3ba187=_0x57ed21;VisuMZ[_0x3ba187(0xfb)][_0x3ba187(0x968)][_0x3ba187(0x509)](this),this[_0x3ba187(0x24e)](),this[_0x3ba187(0xb2b)]();},Game_Action['prototype'][_0x57ed21(0x24e)]=function(){const _0x5b4236=_0x57ed21;if(!SceneManager['isSceneBattle']())return;const _0x4c81b0=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x4672fd=this[_0x5b4236(0x720)]()[_0x5b4236(0x75a)][_0x5b4236(0x463)](_0x4c81b0);if(_0x4672fd){if(_0x5b4236(0xbad)==='lVOgB')for(const _0x54097f of _0x4672fd){if(!_0x54097f)continue;_0x54097f['match'](_0x4c81b0);const _0x192608=String(RegExp['$1'])[_0x5b4236(0x4ff)](',')[_0x5b4236(0x6d9)](_0x8713f9=>String(_0x8713f9)['trim']()),_0x447910=_0x192608['map'](_0x3fb677=>DataManager['getCommonEventIdWithName'](_0x3fb677));for(const _0xb7805c of _0x447910){const _0x58bac3=$dataCommonEvents[_0xb7805c];_0x58bac3&&$gameTemp['reserveCommonEvent'](_0xb7805c);}}else return _0x62ca03[_0x5b4236(0xfb)][_0x5b4236(0x8d3)][_0x5b4236(0x6f7)][_0x5b4236(0x13e)];}},DataManager[_0x57ed21(0x625)]=function(_0x11821f){const _0x41f5ee=_0x57ed21;_0x11821f=_0x11821f[_0x41f5ee(0xaaa)]()['trim'](),this[_0x41f5ee(0x1f3)]=this[_0x41f5ee(0x1f3)]||{};if(this[_0x41f5ee(0x1f3)][_0x11821f])return this['_commonEventIDs'][_0x11821f];for(const _0x3d8b24 of $dataCommonEvents){if(_0x41f5ee(0x9c5)==='sNHhf')_0x4fd78c--,_0x2db218++;else{if(!_0x3d8b24)continue;let _0x5012d7=_0x3d8b24[_0x41f5ee(0xb1c)];_0x5012d7=_0x5012d7[_0x41f5ee(0x5b6)](/\x1I\[(\d+)\]/gi,''),_0x5012d7=_0x5012d7[_0x41f5ee(0x5b6)](/\\I\[(\d+)\]/gi,''),this[_0x41f5ee(0x1f3)][_0x5012d7[_0x41f5ee(0xaaa)]()[_0x41f5ee(0x1f6)]()]=_0x3d8b24['id'];}}return this[_0x41f5ee(0x1f3)][_0x11821f]||0x0;},Game_Action[_0x57ed21(0xb20)][_0x57ed21(0xb2b)]=function(){const _0x1c2507=_0x57ed21;if(!SceneManager[_0x1c2507(0x9d4)]())return;const _0x1d2844=VisuMZ[_0x1c2507(0xfb)][_0x1c2507(0x8d3)][_0x1c2507(0x5c6)];if(_0x1d2844['SwitchCritical']){if('CLrTa'==='vOAlL'){const _0x3d1a46=_0x565d02['parse']('['+_0x1391e5['$1'][_0x1c2507(0x463)](/\d+/g)+']');for(const _0xfe2cb of _0x3d1a46){if(!_0x4dfe2e['value'](_0xfe2cb))return![];}return!![];}else $gameSwitches['setValue'](_0x1d2844[_0x1c2507(0xaff)],![]);}_0x1d2844['SwitchMissEvade']&&$gameSwitches[_0x1c2507(0x500)](_0x1d2844[_0x1c2507(0x1b7)],![]),_0x1d2844[_0x1c2507(0x461)]&&$gameVariables['setValue'](_0x1d2844[_0x1c2507(0x461)],0x0),_0x1d2844[_0x1c2507(0x15c)]&&(_0x1c2507(0x989)===_0x1c2507(0x989)?$gameVariables['setValue'](_0x1d2844[_0x1c2507(0x15c)],0x0):(_0x1ff1bb[_0x1c2507(0xfb)][_0x1c2507(0x383)](),_0x4e9269[_0x1c2507(0xfb)][_0x1c2507(0x5c8)](_0xf0c143),_0x340583[_0x1c2507(0xfb)][_0x1c2507(0x5c8)](_0xb0e555)));},Game_Action[_0x57ed21(0xb20)]['applyResultSwitches']=function(_0x3ecdc1){const _0x55b0cf=_0x57ed21;if(!SceneManager[_0x55b0cf(0x9d4)]())return;if(!_0x3ecdc1)return;const _0x706066=_0x3ecdc1[_0x55b0cf(0xa16)](),_0xca7e52=VisuMZ[_0x55b0cf(0xfb)]['Settings']['Mechanics'];_0xca7e52[_0x55b0cf(0xaff)]&&_0x706066['critical']&&$gameSwitches[_0x55b0cf(0x500)](_0xca7e52[_0x55b0cf(0xaff)],!![]);if(_0xca7e52[_0x55b0cf(0x1b7)]&&(_0x706066['missed']||_0x706066['evaded'])){if(_0x55b0cf(0x94f)!=='Lqmvq'){const _0x27ae42=_0x2389ad[_0x55b0cf(0xb20)]['slice'][_0x55b0cf(0x509)](arguments,0x1),_0x5d0e07={'name':_0x345939,'params':_0x27ae42},_0xa5f87d=this['_methods'][_0x55b0cf(0x6d9)](_0x9e465c=>_0x9e465c[_0x55b0cf(0xb1c)])[_0x55b0cf(0x50e)](_0x55b0cf(0x92d));_0xa5f87d>=0x0?this[_0x55b0cf(0x7b1)]['splice'](_0xa5f87d,0x0,_0x5d0e07):this['_methods'][_0x55b0cf(0x46e)](_0x5d0e07);}else $gameSwitches[_0x55b0cf(0x500)](_0xca7e52['SwitchMissEvade'],!![]);}if(_0xca7e52[_0x55b0cf(0x461)]){let _0x2988a0=$gameVariables['value'](_0xca7e52[_0x55b0cf(0x461)]);_0x706066['hpDamage']>0x0&&('OcGpR'!==_0x55b0cf(0x7de)?_0x2988a0+=Math[_0x55b0cf(0x802)](_0x706066['hpDamage']):this[_0x55b0cf(0x772)]=0x0),$gameVariables['setValue'](_0xca7e52[_0x55b0cf(0x461)],_0x2988a0);}if(_0xca7e52[_0x55b0cf(0x15c)]){let _0x2613b2=$gameVariables[_0x55b0cf(0x993)](_0xca7e52[_0x55b0cf(0x15c)]);_0x706066[_0x55b0cf(0x679)]<0x0&&(_0x2613b2+=Math[_0x55b0cf(0x802)](_0x706066[_0x55b0cf(0x679)])),$gameVariables[_0x55b0cf(0x500)](_0xca7e52[_0x55b0cf(0x15c)],_0x2613b2);}},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x48a)]=Game_BattlerBase['prototype'][_0x57ed21(0xba5)],Game_BattlerBase[_0x57ed21(0xb20)]['initMembers']=function(){const _0x1a4514=_0x57ed21;VisuMZ[_0x1a4514(0xfb)][_0x1a4514(0x48a)][_0x1a4514(0x509)](this),this[_0x1a4514(0xaf6)]();},Game_BattlerBase[_0x57ed21(0xb20)]['initMembersBattleCore']=function(){const _0x1926ea=_0x57ed21;this[_0x1926ea(0x18b)]=![];},VisuMZ[_0x57ed21(0xfb)]['Game_BattlerBase_refresh']=Game_BattlerBase[_0x57ed21(0xb20)][_0x57ed21(0xb54)],Game_BattlerBase[_0x57ed21(0xb20)][_0x57ed21(0xb54)]=function(){const _0x2ec4c0=_0x57ed21;this['_cache']={},VisuMZ[_0x2ec4c0(0xfb)][_0x2ec4c0(0x9ef)][_0x2ec4c0(0x509)](this);},Game_BattlerBase[_0x57ed21(0xb20)][_0x57ed21(0x8a8)]=function(_0xb21d33){const _0x5b775a=_0x57ed21;return this[_0x5b775a(0xeb)]=this['_cache']||{},this[_0x5b775a(0xeb)][_0xb21d33]!==undefined;},Game_BattlerBase['prototype'][_0x57ed21(0x9fa)]=function(){const _0x43509a=_0x57ed21;if(this[_0x43509a(0xeb)][_0x43509a(0x9fa)]!==undefined)return this[_0x43509a(0xeb)][_0x43509a(0x9fa)];const _0x32217f=/<DAMAGE CAP:[ ](\d+)>/i,_0x30db41=this[_0x43509a(0x86d)]()['map'](_0x378737=>_0x378737&&_0x378737[_0x43509a(0x75a)]['match'](_0x32217f)?Number(RegExp['$1']):0x0);let _0x25ba75=_0x30db41[_0x43509a(0x98b)]>0x0?Math['max'](..._0x30db41):0x0;if(_0x25ba75<=0x0)_0x25ba75=VisuMZ[_0x43509a(0xfb)][_0x43509a(0x8d3)][_0x43509a(0x328)]['DefaultHardCap'];return this[_0x43509a(0xeb)][_0x43509a(0x9fa)]=_0x25ba75,this[_0x43509a(0xeb)][_0x43509a(0x9fa)];},Game_BattlerBase[_0x57ed21(0xb20)][_0x57ed21(0xbf5)]=function(){const _0x4ae366=_0x57ed21;if(this[_0x4ae366(0xeb)][_0x4ae366(0xb1f)]!==undefined)return this[_0x4ae366(0xeb)][_0x4ae366(0xb1f)];let _0x9f6fdb=VisuMZ['BattleCore']['Settings'][_0x4ae366(0x328)]['DefaultSoftCap'];const _0xd57a36=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x414011=this[_0x4ae366(0x86d)]()[_0x4ae366(0x6d9)](_0x33d01e=>_0x33d01e&&_0x33d01e[_0x4ae366(0x75a)][_0x4ae366(0x463)](_0xd57a36)?Number(RegExp['$1'])/0x64:0x0);return _0x9f6fdb=_0x414011[_0x4ae366(0x822)]((_0x32dee9,_0x3a10aa)=>_0x32dee9+_0x3a10aa,_0x9f6fdb),this[_0x4ae366(0xeb)]['softDamageCap']=_0x9f6fdb,this[_0x4ae366(0xeb)][_0x4ae366(0xb1f)][_0x4ae366(0x8fd)](0.01,0x1);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x46a)]=Game_BattlerBase[_0x57ed21(0xb20)][_0x57ed21(0x4d4)],Game_BattlerBase[_0x57ed21(0xb20)][_0x57ed21(0x4d4)]=function(){const _0x972f35=_0x57ed21;VisuMZ[_0x972f35(0xfb)][_0x972f35(0x46a)][_0x972f35(0x509)](this),SceneManager[_0x972f35(0x9d4)]()&&(_0x972f35(0x2de)!==_0x972f35(0x2de)?_0x12f54c[_0x972f35(0x500)](_0x3348a8['VariableHeal'],0x0):this[_0x972f35(0xbdc)](_0x972f35(0x659)));},Game_BattlerBase[_0x57ed21(0xb20)][_0x57ed21(0x595)]=function(){const _0x595d9f=_0x57ed21;if(!SceneManager['isSceneBattle']())return null;if(!SceneManager[_0x595d9f(0x34f)][_0x595d9f(0x837)])return null;return SceneManager[_0x595d9f(0x34f)]['_spriteset'][_0x595d9f(0x26a)](this);},Game_BattlerBase[_0x57ed21(0xb20)][_0x57ed21(0x528)]=function(){const _0x145504=_0x57ed21;return VisuMZ[_0x145504(0xfb)]['Settings'][_0x145504(0x929)][_0x145504(0x76e)];},Game_BattlerBase[_0x57ed21(0xb20)][_0x57ed21(0x53b)]=function(){const _0x1e5541=_0x57ed21;return VisuMZ['BattleCore'][_0x1e5541(0x8d3)]['Actor']['AnchorY'];},Game_BattlerBase[_0x57ed21(0xb20)][_0x57ed21(0x827)]=function(){const _0x2abc1a=_0x57ed21;if(this['isActor']&&this[_0x2abc1a(0x8cc)]()){if(_0x2abc1a(0x2ca)===_0x2abc1a(0x763)){const _0x44bd2b=this[_0x2abc1a(0x70b)],_0x1eb1be=this['_borderPortraitSprite'];_0x1eb1be['x']=(_0x1eb1be['x']*(_0x44bd2b-0x1)+this[_0x2abc1a(0x51c)])/_0x44bd2b,_0x1eb1be['opacity']=(_0x1eb1be[_0x2abc1a(0x772)]*(_0x44bd2b-0x1)+0xff)/_0x44bd2b,this[_0x2abc1a(0x70b)]--;}else return VisuMZ[_0x2abc1a(0xfb)][_0x2abc1a(0x8d3)][_0x2abc1a(0x929)][_0x2abc1a(0xb87)];}else return VisuMZ[_0x2abc1a(0xfb)]['Settings'][_0x2abc1a(0x313)][_0x2abc1a(0xb87)];},Game_BattlerBase[_0x57ed21(0xb20)]['battlerSmoothImage']=function(){return!![];},Game_BattlerBase[_0x57ed21(0xb20)][_0x57ed21(0x709)]=function(){return 0x0;},Game_BattlerBase[_0x57ed21(0xb20)][_0x57ed21(0xb35)]=function(){return 0x0;},Game_BattlerBase[_0x57ed21(0xb20)][_0x57ed21(0x6c0)]=function(_0x2e73b3){const _0x3cc2db=_0x57ed21;if(!_0x2e73b3)return 0x0;let _0x1c4c76=0x0;const _0x2a6fc7=_0x2e73b3['note'];return _0x2a6fc7[_0x3cc2db(0x463)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x1c4c76+=Number(RegExp['$1'])),_0x2a6fc7[_0x3cc2db(0x463)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x1c4c76+=Number(RegExp['$1'])),_0x1c4c76;},Game_BattlerBase[_0x57ed21(0xb20)][_0x57ed21(0x493)]=function(_0x4200c4){const _0x18b006=_0x57ed21;if(!_0x4200c4)return 0x0;let _0x193433=0x0;const _0x2310d6=_0x4200c4[_0x18b006(0x75a)];return _0x2310d6[_0x18b006(0x463)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x18b006(0x787)==='UFSdC'?_0x29f48c[_0x18b006(0xb65)]():_0x193433+=Number(RegExp['$1'])),_0x2310d6[_0x18b006(0x463)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x193433+=Number(RegExp['$2'])),_0x193433;},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x12a)]=Game_BattlerBase['prototype'][_0x57ed21(0xb16)],Game_BattlerBase[_0x57ed21(0xb20)][_0x57ed21(0xb16)]=function(_0x5df720){const _0x174ab9=_0x57ed21;if(_0x5df720===this[_0x174ab9(0xbe5)]()&&this[_0x174ab9(0x74a)]())return _0x174ab9(0x543)===_0x174ab9(0x90c)?_0x17b7d9[_0x174ab9(0xfb)][_0x174ab9(0x325)][_0x174ab9(0x509)](this):!![];return VisuMZ[_0x174ab9(0xfb)][_0x174ab9(0x12a)]['call'](this,_0x5df720);},Game_BattlerBase[_0x57ed21(0xb20)][_0x57ed21(0x74a)]=function(){const _0x10471c=_0x57ed21;return this[_0x10471c(0x18b)];},Game_BattlerBase[_0x57ed21(0xb20)][_0x57ed21(0xbcb)]=function(_0x453eac){const _0x441ed2=_0x57ed21;_0x453eac?this[_0x441ed2(0x51f)]():this['removeImmortal']();},Game_BattlerBase[_0x57ed21(0xb20)]['addImmortal']=function(){const _0x51a3e5=_0x57ed21;if(this[_0x51a3e5(0xba1)]())return;this['_immortal']=!![],this[_0x51a3e5(0x668)]=![];},Game_BattlerBase['prototype'][_0x57ed21(0x1c0)]=function(){const _0x1ac813=_0x57ed21,_0x23b958=this['isAlive']();this[_0x1ac813(0x18b)]=![];_0x23b958&&this[_0x1ac813(0x668)]&&this[_0x1ac813(0x4d4)]();this[_0x1ac813(0x668)]=![],this['refresh']();if(this[_0x1ac813(0xba1)]()&&_0x23b958){if(_0x1ac813(0xf3)===_0x1ac813(0xf3))this[_0x1ac813(0x70a)](),this['requestMotionRefresh']();else{if(!_0x362fd7[_0x1ac813(0x17a)])return;if(this[_0x1ac813(0x7fb)]===_0x1da791)return;const _0x5a9c24=_0x1fd651[_0x1ac813(0xfb)][_0x1ac813(0x8d3)][_0x1ac813(0x51a)],_0x1c809b=new _0x1e6104();_0x1c809b['anchor']['x']=_0x5a9c24['AnchorX'],_0x1c809b[_0x1ac813(0xab6)]['y']=_0x5a9c24['AnchorY'],_0x1c809b[_0x1ac813(0x19e)]['x']=_0x1c809b['scale']['y']=_0x5a9c24[_0x1ac813(0x759)],this[_0x1ac813(0x20f)]=_0x1c809b,this['addChild'](this[_0x1ac813(0x20f)]),_0x67cf0e[_0x1ac813(0xb21)]&&_0x2531ee[_0x1ac813(0x22a)](this[_0x1ac813(0x20f)]);}}},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0xae5)]=Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x8b7)],Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x8b7)]=function(){const _0x3a08cf=_0x57ed21;if(this[_0x3a08cf(0x720)]())return VisuMZ[_0x3a08cf(0xfb)][_0x3a08cf(0xae5)][_0x3a08cf(0x509)](this);else{if(_0x3a08cf(0x93a)===_0x3a08cf(0xbde)){const _0x5144b9=this[_0x3a08cf(0x143)](_0x81c870),_0x298e35=this[_0x3a08cf(0x2fa)](_0x1a6bcf)[_0x3a08cf(0x6c1)];return _0x298e35<=_0x5144b9[_0x3a08cf(0x6c1)]?_0x3a08cf(0x9c1):'icon';}else return 0x0;}},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x7ef)]=Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x818)],Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x818)]=function(){const _0x2f8cd6=_0x57ed21;if(this['subject']()&&this[_0x2f8cd6(0x478)]()[_0x2f8cd6(0x51d)]())VisuMZ[_0x2f8cd6(0xfb)][_0x2f8cd6(0x7ef)][_0x2f8cd6(0x509)](this);else{if(_0x2f8cd6(0x3cd)!=='qFYtW'){if(!this[_0x2f8cd6(0x6fc)])return;for(const _0x18b6d4 of this[_0x2f8cd6(0x6fc)]){_0x18b6d4&&_0x18b6d4['update']();}}else this['clear']();}},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x19b)]=Game_BattlerBase[_0x57ed21(0xb20)][_0x57ed21(0x51d)],Game_BattlerBase['prototype'][_0x57ed21(0x51d)]=function(){const _0x170585=_0x57ed21;if(!this[_0x170585(0x64d)]())return![];return VisuMZ[_0x170585(0xfb)][_0x170585(0x19b)][_0x170585(0x509)](this);},Game_BattlerBase[_0x57ed21(0xb20)][_0x57ed21(0x64d)]=function(){const _0x2b2b8d=_0x57ed21;for(const _0x3e764e of this['traitObjects']()){if(_0x2b2b8d(0x186)===_0x2b2b8d(0xa41))this[_0x2b2b8d(0x7ae)]();else{if(!_0x3e764e)continue;if(_0x3e764e[_0x2b2b8d(0x75a)]['match'](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}}return!![];},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x480)]=Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x9c7)],Game_Action[_0x57ed21(0xb20)][_0x57ed21(0x9c7)]=function(){const _0x42221d=_0x57ed21;this['subject']()[_0x42221d(0x298)]()&&('DiDTb'===_0x42221d(0x7e8)?_0xc1f3a9[_0x42221d(0x605)](_0x33a6b9,_0x1c3403):VisuMZ[_0x42221d(0xfb)]['Game_Action_setGuard'][_0x42221d(0x509)](this));},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x9e3)]=Game_BattlerBase[_0x57ed21(0xb20)][_0x57ed21(0x298)],Game_BattlerBase[_0x57ed21(0xb20)]['canGuard']=function(){const _0x1f94dc=_0x57ed21;if(!this[_0x1f94dc(0xa3e)]())return![];return VisuMZ[_0x1f94dc(0xfb)][_0x1f94dc(0x9e3)][_0x1f94dc(0x509)](this);},Game_BattlerBase[_0x57ed21(0xb20)][_0x57ed21(0xa3e)]=function(){const _0x3a0c0f=_0x57ed21;for(const _0x52249b of this[_0x3a0c0f(0x86d)]()){if(!_0x52249b)continue;if(_0x52249b[_0x3a0c0f(0x75a)]['match'](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase['prototype'][_0x57ed21(0x467)]=function(){const _0x1a05e7=_0x57ed21;for(const _0x5880bb of this['traitObjects']()){if('yRdJe'!==_0x1a05e7(0xbb9))_0x5efda9[_0x1a05e7(0x34f)][_0x1a05e7(0x6a8)]();else{if(!_0x5880bb)continue;if(_0x5880bb[_0x1a05e7(0x75a)][_0x1a05e7(0x463)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}}return!![];},Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x688)]=function(){const _0x33c679=_0x57ed21;return VisuMZ[_0x33c679(0xfb)]['Settings'][_0x33c679(0x5c6)][_0x33c679(0x75b)];},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x451)]=Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x4dd)],Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x4dd)]=function(){const _0x2f5e7a=_0x57ed21;if(SceneManager[_0x2f5e7a(0x9d4)]()){if(_0x2f5e7a(0x9d3)==='dPvKa'){if(BattleManager[_0x2f5e7a(0x66f)]()){if(this['turnCount']()<=0x0)return;}else{if($gameTroop[_0x2f5e7a(0x538)]()<=0x0){if(_0x2f5e7a(0x2f8)===_0x2f5e7a(0x2f8))return;else{if(this[_0x2f5e7a(0x683)]>0x0)this['contentsOpacity']-=0x10;}}}}else this[_0x2f5e7a(0x218)]=_0x1c8c82,_0x28f183[_0x2f5e7a(0x34f)]['battleCoreResumeLaunchBattle']();}if(SceneManager[_0x2f5e7a(0x9d4)]()&&BattleManager['isTpb']()&&this[_0x2f5e7a(0xb38)]===Graphics[_0x2f5e7a(0x4bb)]){if(_0x2f5e7a(0x5fe)===_0x2f5e7a(0x5fe))return;else{this[_0x2f5e7a(0x37f)]()[_0x2f5e7a(0x1cc)](_0x6da998);if(_0x5ebd99['isBattleFlipped']())_0x549b7c[_0x2f5e7a(0x19e)]['x']=-0x1;}}this[_0x2f5e7a(0xb38)]=Graphics['frameCount'],SceneManager[_0x2f5e7a(0x9d4)]()&&this[_0x2f5e7a(0x77d)]('PreRegenerateJS'),VisuMZ[_0x2f5e7a(0xfb)][_0x2f5e7a(0x451)][_0x2f5e7a(0x509)](this),SceneManager[_0x2f5e7a(0x9d4)]()&&(this[_0x2f5e7a(0x6b3)](),this[_0x2f5e7a(0x77d)](_0x2f5e7a(0x529)));},Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x6b3)]=function(){const _0x29f86c=_0x57ed21;if(SceneManager[_0x29f86c(0x9d4)]()){if(_0x29f86c(0x9d6)===_0x29f86c(0x9d6))for(const _0x58e4bc of this['traitObjects']()){if(!_0x58e4bc)continue;this[_0x29f86c(0x5e5)](_0x58e4bc);}else return!![];}},Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x5e5)]=function(_0x4296a5){const _0x336f4d=_0x57ed21;if(!Imported['VisuMZ_0_CoreEngine'])return;if(!SceneManager[_0x336f4d(0x9d4)]())return;if(this[_0x336f4d(0xba1)]())return;if(this['isHidden']())return;if(_0x4296a5[_0x336f4d(0x75a)]['match'](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x246793=Number(RegExp['$1']);$gameTemp[_0x336f4d(0x970)]([this],_0x246793,![],![]);}},VisuMZ['BattleCore'][_0x57ed21(0x312)]=Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x804)],Game_Battler[_0x57ed21(0xb20)]['startTpbTurn']=function(){const _0x4cf7b8=_0x57ed21;this['processBattleCoreJS']('PreStartTurnJS'),VisuMZ[_0x4cf7b8(0xfb)]['Game_Battler_startTpbTurn'][_0x4cf7b8(0x509)](this),this[_0x4cf7b8(0x77d)](_0x4cf7b8(0xa75));},VisuMZ[_0x57ed21(0xfb)]['Game_Battler_onTurnEnd']=Game_Battler['prototype'][_0x57ed21(0x639)],Game_Battler['prototype'][_0x57ed21(0x639)]=function(){const _0xb6cde5=_0x57ed21;this['processBattleCoreJS']('PreEndTurnJS'),VisuMZ[_0xb6cde5(0xfb)][_0xb6cde5(0x3ec)][_0xb6cde5(0x509)](this),this[_0xb6cde5(0x77d)](_0xb6cde5(0x726));},Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x77d)]=function(_0x3ac64d){const _0x276fc8=_0x57ed21;if(this[_0x276fc8(0xa76)]||this[_0x276fc8(0x844)])return;const _0x42e706=VisuMZ[_0x276fc8(0xfb)]['Settings'][_0x276fc8(0x5c6)];if(_0x42e706[_0x3ac64d])_0x42e706[_0x3ac64d]['call'](this);for(const _0x5ca093 of this[_0x276fc8(0x86d)]()){if(!_0x5ca093)continue;key=VisuMZ[_0x276fc8(0xfb)][_0x276fc8(0x786)](_0x5ca093,_0x3ac64d),VisuMZ['BattleCore']['JS'][key]&&VisuMZ[_0x276fc8(0xfb)]['JS'][key]['call'](this,this,this,_0x5ca093,0x0);}},Game_Battler['prototype'][_0x57ed21(0x737)]=function(){const _0x370a44=_0x57ed21;return VisuMZ[_0x370a44(0xfb)][_0x370a44(0x8d3)]['Actor'][_0x370a44(0x9fe)]||![];},Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x22f)]=function(){const _0x581b9f=_0x57ed21;if(this[_0x581b9f(0x57e)]()){if(this[_0x581b9f(0x737)]()){if(this[_0x581b9f(0x613)][_0x581b9f(0x3fa)](_0x5794c1=>_0x5794c1[_0x581b9f(0x720)]()&&_0x5794c1[_0x581b9f(0xb7a)]()))return!![];}else{if(this['_actions'][_0x581b9f(0x3fa)](_0xabce45=>_0xabce45[_0x581b9f(0x720)]()&&_0xabce45[_0x581b9f(0x5c3)]()))return _0x581b9f(0x83c)===_0x581b9f(0x83c)?!![]:_0x198c87[_0x581b9f(0xfb)][_0x581b9f(0x8d3)]['Enemy'][_0x581b9f(0x2ac)]||_0x95309b[_0x581b9f(0x58a)]();}}if(BattleManager[_0x581b9f(0x66f)]()&&this[_0x581b9f(0x567)]==='casting'){if(this['chantStyle']()){if(_0x581b9f(0x40f)===_0x581b9f(0x40f))return this['currentAction']()&&this['currentAction']()[_0x581b9f(0x720)]()&&this['currentAction']()[_0x581b9f(0xb7a)]();else{if(this['x']===0x0)this['x']=_0x3a2993[_0x581b9f(0x413)](_0x2a5493[_0x581b9f(0x6c1)]/0x2);if(this['y']===0x0)this['y']=_0x375722[_0x581b9f(0x413)](_0x2f5354[_0x581b9f(0x8b2)]/0x2);}}else return this['currentAction']()&&this['currentAction']()['item']()&&this[_0x581b9f(0x2e0)]()['isMagicSkill']();}return![];},Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x13a)]=function(){const _0x5ec7e2=_0x57ed21;if(BattleManager[_0x5ec7e2(0x66f)]()&&this[_0x5ec7e2(0x567)]===_0x5ec7e2(0xa1d)){if(_0x5ec7e2(0xbcd)===_0x5ec7e2(0xbcd))return this[_0x5ec7e2(0x737)]()?this['currentAction']()&&this[_0x5ec7e2(0x2e0)]()[_0x5ec7e2(0x720)]()&&!this[_0x5ec7e2(0x2e0)]()['isMagical']():_0x5ec7e2(0x9db)!==_0x5ec7e2(0xad3)?this[_0x5ec7e2(0x2e0)]()&&this[_0x5ec7e2(0x2e0)]()[_0x5ec7e2(0x720)]()&&!this[_0x5ec7e2(0x2e0)]()[_0x5ec7e2(0x5c3)]():_0xa1800f[_0x5ec7e2(0x595)]()[_0x5ec7e2(0xa30)]===_0x71b03f[_0x5ec7e2(0x595)]()['_baseX']?_0x13f99f[_0x5ec7e2(0x595)]()[_0x5ec7e2(0x656)]-_0xbd93c0[_0x5ec7e2(0x595)]()[_0x5ec7e2(0x656)]:_0x21cbce['battler']()[_0x5ec7e2(0xa30)]-_0x13c745[_0x5ec7e2(0x595)]()[_0x5ec7e2(0xa30)];else _0x4f0474[_0x5ec7e2(0x311)](_0x2cb075);}return![];},VisuMZ[_0x57ed21(0xfb)]['Game_Battler_clearDamagePopup']=Game_Battler['prototype']['clearDamagePopup'],Game_Battler[_0x57ed21(0xb20)]['clearDamagePopup']=function(){const _0x28782e=_0x57ed21;VisuMZ[_0x28782e(0xfb)][_0x28782e(0x3d4)][_0x28782e(0x509)](this),this[_0x28782e(0xab8)]=[];},Game_Battler['prototype'][_0x57ed21(0xba3)]=function(){const _0x28e676=_0x57ed21;if(!this['_damagePopupArray'])this['clearDamagePopup']();return this[_0x28e676(0xab8)][_0x28e676(0x98b)]>0x0;},Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0xea)]=function(){const _0x5c1042=_0x57ed21;if(!SceneManager[_0x5c1042(0x9d4)]())return;if(!this[_0x5c1042(0xab8)])this[_0x5c1042(0xb93)]();this[_0x5c1042(0x7e0)]();const _0x2234be=this[_0x5c1042(0x595)]();if(_0x2234be)_0x2234be[_0x5c1042(0xb49)]();},Game_Battler['prototype'][_0x57ed21(0x7e0)]=function(){const _0x41ee4f=_0x57ed21,_0x3a84b7=this[_0x41ee4f(0xa16)]();if(_0x3a84b7[_0x41ee4f(0x178)]||_0x3a84b7[_0x41ee4f(0x912)]){if('oFbHS'!==_0x41ee4f(0x9b9))this[_0x41ee4f(0x893)]=_0x59abfc,this[_0x41ee4f(0x31c)]=-_0x5d49ff,this[_0x41ee4f(0x6f0)]=_0x2087ef,this[_0x41ee4f(0xa2b)](),this[_0x41ee4f(0x211)]();else{const _0x550385=JsonEx['makeDeepCopy'](_0x3a84b7);_0x550385[_0x41ee4f(0x108)]=![],_0x550385[_0x41ee4f(0x674)]=0x0,this['_damagePopupArray']['push'](_0x550385);}}if(_0x3a84b7['hpAffected']){if(_0x41ee4f(0x73c)!==_0x41ee4f(0x73c)){const _0x4383d9=this[_0x41ee4f(0x720)]()[_0x41ee4f(0x75a)];if(_0x4383d9['match'](/<ALWAYS HIT>/i))return 0x1;else{if(_0x4383d9[_0x41ee4f(0x463)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return _0x515c66(_0x730b44['$1'])/0x64;else{let _0x50ae9a=_0x23afb9[_0x41ee4f(0xfb)][_0x41ee4f(0xba9)]['call'](this,_0x14c863);return _0x50ae9a=this[_0x41ee4f(0x1e8)][_0x41ee4f(0x103)]*_0x50ae9a+this['_multipliers'][_0x41ee4f(0x66e)],_0x50ae9a;}}}else{const _0x24b8cb=JsonEx[_0x41ee4f(0x5a6)](_0x3a84b7);_0x24b8cb['missed']=![],_0x24b8cb[_0x41ee4f(0x912)]=![],_0x24b8cb[_0x41ee4f(0x674)]=0x0,this[_0x41ee4f(0xab8)][_0x41ee4f(0x46e)](_0x24b8cb);}}if(_0x3a84b7['mpDamage']!==0x0){const _0x229bda=JsonEx['makeDeepCopy'](_0x3a84b7);_0x229bda['missed']=![],_0x229bda[_0x41ee4f(0x912)]=![],_0x229bda[_0x41ee4f(0x108)]=![],this[_0x41ee4f(0xab8)][_0x41ee4f(0x46e)](_0x229bda);}},Game_Battler['prototype']['getNextDamagePopup']=function(){const _0x149c40=_0x57ed21;if(!this[_0x149c40(0xab8)])this['clearDamagePopup']();return VisuMZ[_0x149c40(0xfb)][_0x149c40(0x8d3)][_0x149c40(0x328)]['NewPopupBottom']?this[_0x149c40(0xab8)]['shift']():this[_0x149c40(0xab8)][_0x149c40(0x86a)]();},Game_Battler['prototype'][_0x57ed21(0x885)]=function(_0x59f08b,_0x5008fd){const _0x40601a=_0x57ed21;if(!SceneManager[_0x40601a(0x9d4)]())return;if(!this[_0x40601a(0x595)]())return;if(_0x59f08b[_0x40601a(0x98b)]<=0x0)return;_0x5008fd=_0x5008fd||{},_0x5008fd['textColor']=_0x5008fd[_0x40601a(0x3c0)]||'#ffffff',_0x5008fd[_0x40601a(0x919)]=_0x5008fd[_0x40601a(0x919)]||[0x0,0x0,0x0,0x0],_0x5008fd[_0x40601a(0x90b)]=_0x5008fd['flashDuration']||0x0,this[_0x40601a(0x595)]()[_0x40601a(0x885)](_0x59f08b,_0x5008fd);},Game_Battler[_0x57ed21(0xb20)]['setupIconTextPopup']=function(_0x57fb29,_0x42f1d5,_0x3c93a7){const _0x3b1d0f=_0x57ed21;if(!SceneManager[_0x3b1d0f(0x9d4)]())return;if(!this[_0x3b1d0f(0x595)]())return;if(_0x42f1d5[_0x3b1d0f(0x98b)]<=0x0)return;_0x3c93a7=_0x3c93a7||{},_0x3c93a7[_0x3b1d0f(0x3c0)]=_0x3c93a7[_0x3b1d0f(0x3c0)]||_0x3b1d0f(0x550),_0x3c93a7[_0x3b1d0f(0x919)]=_0x3c93a7[_0x3b1d0f(0x919)]||[0x0,0x0,0x0,0x0],_0x3c93a7['flashDuration']=_0x3c93a7[_0x3b1d0f(0x90b)]||0x0,this[_0x3b1d0f(0x595)]()[_0x3b1d0f(0x281)](_0x57fb29,_0x42f1d5,_0x3c93a7);},Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x2d8)]=function(){const _0x508b02=_0x57ed21;if(this[_0x508b02(0x983)]())return![];if(this[_0x508b02(0x31d)]()&&this[_0x508b02(0x8c9)]())return!![];if(this[_0x508b02(0xa8a)]()&&this[_0x508b02(0x860)]()){if(this[_0x508b02(0xba1)]()&&this[_0x508b02(0x8f2)]())return![];}else{if(this[_0x508b02(0xba1)]()){if(_0x508b02(0x680)===_0x508b02(0x680))return![];else{const _0x30c30f=this[_0x508b02(0x143)](_0x314554),_0x421504=this[_0x508b02(0x2f7)](_0x14ead7),_0x47ebf0=this[_0x508b02(0x2fa)](_0x421504)[_0x508b02(0x6c1)];this['changePaintOpacity'](this[_0x508b02(0x9a3)](_0x1966d0));const _0xef6066=this[_0x508b02(0x96f)]();if(_0xef6066===_0x508b02(0xb98))this[_0x508b02(0x309)](_0x421504,_0x30c30f['x']+_0x30c30f[_0x508b02(0x6c1)]-_0x47ebf0,_0x30c30f['y'],_0x47ebf0);else{if(_0xef6066===_0x508b02(0x415)){const _0x3c0537=_0x30c30f['x']+_0x11ff60[_0x508b02(0x4eb)]((_0x30c30f['width']-_0x47ebf0)/0x2);this[_0x508b02(0x309)](_0x421504,_0x3c0537,_0x30c30f['y'],_0x47ebf0);}else this['drawTextEx'](_0x421504,_0x30c30f['x'],_0x30c30f['y'],_0x47ebf0);}}}}return!![];},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0xae6)]=Game_Battler['prototype'][_0x57ed21(0x456)],Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x456)]=function(){const _0x31ce76=_0x57ed21;VisuMZ[_0x31ce76(0xfb)][_0x31ce76(0xae6)][_0x31ce76(0x509)](this),this[_0x31ce76(0x3bf)]();},Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x6aa)]=function(){return!![];},Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x702)]=function(){return![];},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0xaf3)]=Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x5e2)],Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x5e2)]=function(_0x383dce){const _0x4b3ebd=_0x57ed21;VisuMZ['BattleCore'][_0x4b3ebd(0xaf3)][_0x4b3ebd(0x509)](this,_0x383dce),this[_0x4b3ebd(0xa18)](_0x383dce),this['clearDamagePopup']();},Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0xa18)]=function(_0x430207){const _0x19c18f=_0x57ed21;this[_0x19c18f(0x839)](![]),this['_forcedHomeX']=undefined,this['_forcedHomeY']=undefined;},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0xb4f)]=Game_Battler[_0x57ed21(0xb20)]['onBattleEnd'],Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x373)]=function(){const _0x3629c4=_0x57ed21;VisuMZ[_0x3629c4(0xfb)][_0x3629c4(0xb4f)][_0x3629c4(0x509)](this),this['onBattleEndBattleCore']();},Game_Battler[_0x57ed21(0xb20)]['onBattleEndBattleCore']=function(){const _0x16b48a=_0x57ed21;this[_0x16b48a(0xac2)]=undefined,this['_forcedHomeY']=undefined;},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x874)]=Game_Battler[_0x57ed21(0xb20)]['performActionStart'],Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x8bc)]=function(_0x25cace){const _0x173c20=_0x57ed21;VisuMZ[_0x173c20(0xfb)][_0x173c20(0x874)]['call'](this,_0x25cace);if(!_0x25cace['isGuard']()){if(_0x173c20(0x951)==='pZViR')return this['item']()['note']['match'](/<JS TARGETS>/i);else{const _0x19b5de=this['battler']();_0x19b5de&&_0x19b5de[_0x173c20(0xb83)]();}}this[_0x173c20(0x839)](![]);},Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x453)]=function(){const _0x4e5728=_0x57ed21,_0x53e5e3=this[_0x4e5728(0x4a1)];this[_0x4e5728(0x4a1)]=![];if(BattleManager[_0x4e5728(0x388)]()&&this['isInputting']()){if(_0x4e5728(0x73a)!=='leXGy')_0x2e27aa[_0x4e5728(0xb20)]['callOkHandler'][_0x4e5728(0x509)](this),this[_0x4e5728(0x380)]=this['enemy']();else{const _0x423807=this[_0x4e5728(0x595)]();if(_0x423807&&_0x53e5e3)_0x423807[_0x4e5728(0xb83)]();return;}}const _0x50ab5d=this[_0x4e5728(0x595)]();if(_0x50ab5d)_0x50ab5d['stepBack']();this[_0x4e5728(0x839)](![]),this[_0x4e5728(0xb23)]();},Game_Battler[_0x57ed21(0xb20)]['performActionMotions']=function(_0xa5a49c){const _0x3d1865=_0x57ed21;if(_0xa5a49c['isAttack']())this[_0x3d1865(0x8e0)]();else{if(_0xa5a49c[_0x3d1865(0xa90)]())this[_0x3d1865(0xbdc)](_0x3d1865(0x935));else{if(_0xa5a49c[_0x3d1865(0xb7a)]()){if(_0x3d1865(0xb8c)!=='lawmD')this['requestMotion'](_0x3d1865(0xa5f));else{const _0x1d9f23=_0x932563(_0x3e2eb9['$1']);_0x1d9f23<_0x1fce4b?(_0x52d2c8('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'[_0x3d1865(0x455)](_0x2a89e7,_0x1d9f23,_0x4cb8d9)),_0x1e6975[_0x3d1865(0x53e)]()):_0x1d970b=_0x263af4['max'](_0x1d9f23,_0x4869b8);}}else{if(_0xa5a49c[_0x3d1865(0x4c8)]())[0x1,0x2,0x5,0x6][_0x3d1865(0x55d)](_0xa5a49c[_0x3d1865(0x720)]()[_0x3d1865(0x43d)]['type'])?this[_0x3d1865(0x8e0)]():_0x3d1865(0xef)===_0x3d1865(0x777)?_0x32aa4d-=_0x47b4ff[_0x3d1865(0xa49)]():this['requestMotion'](_0x3d1865(0x26c));else{if(_0xa5a49c[_0x3d1865(0xa69)]()){if(_0x3d1865(0x376)!==_0x3d1865(0x376)){const _0x5ced0b=this[_0x3d1865(0x91b)]()[_0x3d1865(0x35d)]||0x0;return _0x316a55[_0x3d1865(0x517)][_0x5ced0b];}else this[_0x3d1865(0xbdc)](_0x3d1865(0x720));}}}}}},Game_Battler['prototype']['getAttackMotion']=function(){const _0x429448=_0x57ed21;return $dataSystem[_0x429448(0x517)][0x0];},Game_Battler['prototype'][_0x57ed21(0x4e8)]=function(){const _0x2c1571=_0x57ed21,_0x52d419=this[_0x2c1571(0xfe)]();return _0x52d419?_0x52d419[_0x2c1571(0x1e5)]:0x0;},Game_Battler['prototype'][_0x57ed21(0x104)]=function(_0x17d61e){const _0xfe45cd=_0x57ed21;if(!$gameSystem[_0xfe45cd(0x119)]())return;const _0x5b4681=this[_0xfe45cd(0x595)](),_0x4f976e=_0x17d61e[_0xfe45cd(0x595)]();if(!_0x5b4681||!_0x4f976e)return;const _0x2b48f3=_0x4f976e['_baseX'],_0x5e71c9=_0x4f976e['_baseY'];this['moveBattlerToPoint'](_0x2b48f3,_0x5e71c9,0x0,![],_0xfe45cd(0x315),-0x1),_0x5b4681['updatePosition']();const _0x3d9ec7=VisuMZ['BattleCore']['Settings'][_0xfe45cd(0x48d)];let _0x28f962=(_0x4f976e['width']+_0x5b4681['width'])/0x2;_0x28f962*=this[_0xfe45cd(0x8cc)]()?0x1:-0x1;let _0xfb45e8=_0x3d9ec7[_0xfe45cd(0x117)]*(this[_0xfe45cd(0x8cc)]()?0x1:-0x1);_0x17d61e[_0xfe45cd(0x245)](_0x28f962,_0xfb45e8,0x0,![],_0xfe45cd(0x315)),_0x4f976e[_0xfe45cd(0xad6)]();},Game_Battler['prototype']['requestMotion']=function(_0x272133){const _0x3a98fe=_0x57ed21;if(SceneManager['isSceneBattle']()){const _0x138965=this[_0x3a98fe(0x595)]();_0x138965&&(_0x138965[_0x3a98fe(0x74c)](_0x272133),[_0x3a98fe(0x118),_0x3a98fe(0xb34),_0x3a98fe(0x923)]['includes'](_0x272133)&&this[_0x3a98fe(0xaae)]());}this[_0x3a98fe(0x3bf)]();},Game_Battler[_0x57ed21(0xb20)]['performWeaponAnimation']=function(){},Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x8db)]=function(_0x3b2457){const _0x2c69bc=_0x57ed21;if(SceneManager[_0x2c69bc(0x9d4)]()){const _0x51f3f2=this[_0x2c69bc(0x595)]();if(_0x51f3f2)_0x51f3f2[_0x2c69bc(0x5cb)](_0x3b2457);}},Game_Battler[_0x57ed21(0xb20)]['startAttackWeaponAnimation']=function(){const _0x15ea33=_0x57ed21;if(SceneManager[_0x15ea33(0x9d4)]()){const _0x3a56dc=this[_0x15ea33(0x4e8)]();this[_0x15ea33(0x8db)](_0x3a56dc);}},Game_Battler[_0x57ed21(0xb20)]['performCastAnimation']=function(_0x37ac5a,_0x1dad70){const _0x296238=_0x57ed21;if(!_0x37ac5a)return;if(!_0x37ac5a[_0x296238(0x720)]())return;if(_0x37ac5a[_0x296238(0x4c2)]())return;if(_0x37ac5a[_0x296238(0xa90)]())return;if(_0x37ac5a[_0x296238(0xa69)]())return;let _0x219a94=0x0;const _0x1e17b4=VisuMZ[_0x296238(0xfb)][_0x296238(0x8d3)][_0x296238(0x48d)],_0x1c2188=_0x37ac5a['item']()[_0x296238(0x75a)];if(_0x1c2188[_0x296238(0x463)](/<CAST ANIMATION: (\d+)>/i))_0x219a94=Number(RegExp['$1']);else{if(_0x1c2188[_0x296238(0x463)](/<NO CAST ANIMATION>/i)){if(_0x296238(0x752)===_0x296238(0x752))return;else{const _0x2bed29=new _0x177d1c();_0x2bed29[_0x296238(0x10e)]=_0x1c6f09[_0x296238(0x44c)](_0x3f1f20[_0x296238(0x5cd)]),_0x2bed29['x']=_0x23d6be[_0x296238(0x1f4)]||0x0,_0x2bed29['y']=_0x417a5f[_0x296238(0x82b)]||0x0,this[_0x296238(0x811)](_0x2bed29),this['_backAttachmentSprite']=_0x2bed29;}}else{if(_0x37ac5a[_0x296238(0x66d)]()){if(_0x296238(0xafe)!=='hSBsF')return this['isBattleSys'](_0x296238(0x901));else _0x219a94=_0x1e17b4[_0x296238(0xbca)];}else{if(_0x37ac5a[_0x296238(0x45c)]())_0x219a94=_0x1e17b4[_0x296238(0x783)];else _0x37ac5a[_0x296238(0xb7a)]()&&(_0x219a94=_0x1e17b4['CastMagical']);}}}_0x219a94>0x0&&$gameTemp['requestAnimation']([this],_0x219a94,!!_0x1dad70);},Game_Battler['prototype'][_0x57ed21(0x78a)]=function(){const _0x252dd5=_0x57ed21;SoundManager['playReflection']();let _0x3963de=VisuMZ[_0x252dd5(0xfb)]['Settings'][_0x252dd5(0x48d)][_0x252dd5(0xb97)];if(_0x3963de>0x0){if(_0x252dd5(0x8b6)===_0x252dd5(0x171))return!![];else{if(Imported['VisuMZ_0_CoreEngine'])$gameTemp[_0x252dd5(0x970)]([this],_0x3963de);else{if('drdfH'!==_0x252dd5(0x925))$gameTemp[_0x252dd5(0x8d4)]([this],_0x3963de);else{if(this[_0x252dd5(0xeb)][_0x252dd5(0x3a9)]!==_0x419a8d)return this[_0x252dd5(0xeb)]['svAnchorX'];return this[_0x252dd5(0x241)]()[_0x252dd5(0x75a)][_0x252dd5(0x463)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache'][_0x252dd5(0x3a9)]=_0x323567(_0x1a7765['$1']),this['_cache'][_0x252dd5(0xa1a)]=_0x1bdea5(_0x2fd1d1['$2'])):this[_0x252dd5(0xeb)][_0x252dd5(0x3a9)]=_0xb4367b[_0x252dd5(0xb20)][_0x252dd5(0x528)]['call'](this),this[_0x252dd5(0xeb)]['svAnchorX'];}}}}},VisuMZ['BattleCore'][_0x57ed21(0xb6d)]=Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x862)],Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x862)]=function(){const _0x2d281e=_0x57ed21;VisuMZ[_0x2d281e(0xfb)][_0x2d281e(0xb6d)]['call'](this),this[_0x2d281e(0x150)]();},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x32e)]=Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x5d3)],Game_Battler[_0x57ed21(0xb20)]['performMiss']=function(){const _0x2f7c5f=_0x57ed21;VisuMZ[_0x2f7c5f(0xfb)][_0x2f7c5f(0x32e)][_0x2f7c5f(0x509)](this),this[_0x2f7c5f(0x150)]();},VisuMZ['BattleCore']['Game_Battler_performEvasion']=Game_Battler['prototype'][_0x57ed21(0x68b)],Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x68b)]=function(){const _0x539044=_0x57ed21;VisuMZ[_0x539044(0xfb)][_0x539044(0x2d9)]['call'](this),this['performFlinch']();},Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x150)]=function(){const _0xabd892=_0x57ed21;if(!$gameSystem[_0xabd892(0x119)]())return;if(this['_flinched'])return;this[_0xabd892(0x4a1)]=!![];const _0x26702f=this[_0xabd892(0x595)]();if(_0x26702f)_0x26702f[_0xabd892(0x1fc)]();},Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0xb23)]=function(){const _0x9ead1e=_0x57ed21;if(this[_0x9ead1e(0xba1)]()&&this[_0x9ead1e(0x344)]!==_0x9ead1e(0x659)){if('weSMd'===_0x9ead1e(0xa5e))this[_0x9ead1e(0xa92)](_0x9ead1e(0x6ff));else{this[_0x9ead1e(0xbdc)](_0x9ead1e(0x659));return;}}if(this[_0x9ead1e(0xba1)]()&&this[_0x9ead1e(0x344)]===_0x9ead1e(0x659))return;if(!!this['_freezeMotionData'])return;if(this[_0x9ead1e(0xa8a)]()){if(!this['isDuringNonLoopingMotion']()&&this!==BattleManager[_0x9ead1e(0xadd)]){if(this[_0x9ead1e(0x595)]())this['battler']()[_0x9ead1e(0x5c7)]();}this[_0x9ead1e(0x3bf)]();return;}if(this[_0x9ead1e(0x344)]==='victory')return;if(this['_motionType']===_0x9ead1e(0x473)&&!BattleManager[_0x9ead1e(0xac6)]())return;if(this[_0x9ead1e(0x344)]===_0x9ead1e(0x935)&&!BattleManager[_0x9ead1e(0xac6)]())return;this['clearMotion']();if(this[_0x9ead1e(0x595)]()&&BattleManager[_0x9ead1e(0xac6)]()){this['battler']()['refreshMotion'](),this[_0x9ead1e(0x3bf)]();return;}},Game_Enemy[_0x57ed21(0xb20)][_0x57ed21(0x90d)]=function(){const _0x412996=_0x57ed21;if(!this['hasSvBattler']())return![];const _0xb9e393=this[_0x412996(0x595)]();if(!_0xb9e393)return![];const _0x19dae8=_0xb9e393['_svBattlerSprite'];if(!_0x19dae8)return![];const _0x24b0c7=_0x19dae8['_motion'];return _0x24b0c7&&!_0x24b0c7[_0x412996(0x347)];},Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x913)]=function(){const _0x39aed=_0x57ed21;return this[_0x39aed(0x963)];},Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x839)]=function(_0x7765b7){const _0x2e0506=_0x57ed21;if(!$gameSystem[_0x2e0506(0x119)]())return;this[_0x2e0506(0x963)]=_0x7765b7;const _0x56e91f=this['battler']();if(_0x56e91f)_0x56e91f[_0x2e0506(0x188)]();},Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x9bd)]=function(_0x3b1bc3,_0x3eeac9,_0xd93b87){const _0x177c2e=_0x57ed21;if(!$gameSystem[_0x177c2e(0x119)]())return;const _0x45b629=this[_0x177c2e(0x595)]();if(!_0x45b629)return;if(_0x3b1bc3===_0x45b629[_0x177c2e(0xa30)])return;let _0x18f178=![];if(this[_0x177c2e(0x8cc)]()){if(_0x3b1bc3>_0x45b629[_0x177c2e(0xa30)])_0x18f178=!![];if(_0x3b1bc3<_0x45b629[_0x177c2e(0xa30)])_0x18f178=![];}else{if(this[_0x177c2e(0xa8a)]()){if(_0x3b1bc3>_0x45b629['_baseX'])_0x18f178=![];if(_0x3b1bc3<_0x45b629[_0x177c2e(0xa30)])_0x18f178=!![];}};this[_0x177c2e(0x839)](_0xd93b87?!_0x18f178:_0x18f178),_0x45b629[_0x177c2e(0x188)]();},Game_Battler['prototype'][_0x57ed21(0x245)]=function(_0x12b654,_0x4bb703,_0x3a7b4f,_0x53629c,_0x4159c5){const _0x24d637=_0x57ed21;if(!$gameSystem['isSideView']())return;const _0x10e9d5=this[_0x24d637(0x595)]();if(!_0x10e9d5)return;if(_0x53629c)this['setBattlerFacePoint'](_0x12b654+_0x10e9d5[_0x24d637(0xa30)],_0x4bb703+_0x10e9d5[_0x24d637(0x656)],![]);_0x12b654+=_0x10e9d5[_0x24d637(0xa30)]-_0x10e9d5[_0x24d637(0x57c)],_0x4bb703+=_0x10e9d5[_0x24d637(0x656)]-_0x10e9d5[_0x24d637(0x214)],_0x10e9d5[_0x24d637(0x403)](_0x12b654,_0x4bb703,_0x3a7b4f);if(Imported[_0x24d637(0x849)])_0x10e9d5[_0x24d637(0x1c6)](_0x4159c5||_0x24d637(0x315));},Game_Battler['prototype'][_0x57ed21(0x7f4)]=function(_0x11ef5f,_0x143eae,_0x263aaa,_0x59814c,_0x2089d3,_0x506f46){const _0x1e7f92=_0x57ed21;if(!$gameSystem[_0x1e7f92(0x119)]())return;const _0x57c3bf=this[_0x1e7f92(0x595)]();if(!_0x57c3bf)return;if(_0x11ef5f===Infinity||_0x143eae===Infinity)return;if(isNaN(_0x11ef5f)||isNaN(_0x143eae))return;_0x506f46=_0x506f46||0x0;if(_0x506f46>0x0){if(_0x57c3bf[_0x1e7f92(0xa30)]>_0x11ef5f)_0x11ef5f+=_0x57c3bf[_0x1e7f92(0x6c1)]/0x2+_0x506f46;if(_0x57c3bf[_0x1e7f92(0xa30)]<_0x11ef5f)_0x11ef5f-=_0x57c3bf[_0x1e7f92(0x6c1)]/0x2+_0x506f46;}if(_0x59814c)this[_0x1e7f92(0x9bd)](_0x11ef5f,_0x143eae,![]);_0x11ef5f-=_0x57c3bf[_0x1e7f92(0x57c)],_0x143eae-=_0x57c3bf[_0x1e7f92(0x214)],_0x57c3bf[_0x1e7f92(0x403)](_0x11ef5f,_0x143eae,_0x263aaa);if(Imported['VisuMZ_0_CoreEngine'])_0x57c3bf['setMoveEasingType'](_0x2089d3||_0x1e7f92(0x315));},Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0xaf9)]=function(_0x115051,_0x32ba36,_0x40fc63,_0x23ed94,_0x477aac){const _0x20fcd8=_0x57ed21;if(!$gameSystem[_0x20fcd8(0x119)]())return;const _0x38ff6b=this[_0x20fcd8(0x595)]();if(!_0x38ff6b)return;if(_0x23ed94)this['setBattlerFacePoint'](_0x115051+_0x38ff6b[_0x20fcd8(0xa30)],_0x32ba36+_0x38ff6b[_0x20fcd8(0x656)],![]);_0x115051+=_0x38ff6b[_0x20fcd8(0x57c)],_0x32ba36+=_0x38ff6b['_homeY'],_0x38ff6b['startHomeMove'](_0x115051,_0x32ba36,_0x40fc63,_0x477aac),this['_forcedHomeX']=_0x115051,this[_0x20fcd8(0xb5e)]=_0x32ba36;},Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0xa47)]=function(_0x402324,_0xa84a00,_0x3158c1,_0x405f83,_0x1f66f3,_0x10f6fb){const _0x1be206=_0x57ed21;if(!$gameSystem[_0x1be206(0x119)]())return;const _0x257f19=this['battler']();if(!_0x257f19)return;_0x10f6fb=_0x10f6fb||0x0;if(_0x10f6fb>0x0){if(_0x257f19['_baseX']>_0x402324)_0x402324+=_0x257f19[_0x1be206(0x6c1)]/0x2+_0x10f6fb;if(_0x257f19[_0x1be206(0xa30)]<_0x402324)_0x402324-=_0x257f19[_0x1be206(0x6c1)]/0x2+_0x10f6fb;}if(_0x405f83)this[_0x1be206(0x9bd)](_0x402324,_0xa84a00,![]);_0x257f19[_0x1be206(0x872)](_0x402324,_0xa84a00,_0x3158c1,_0x1f66f3),this[_0x1be206(0xac2)]=_0x402324,this['_forcedHomeY']=_0xa84a00;},Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0xa86)]=function(_0x5e6e67,_0x1f43a7,_0x5d1775){const _0x3861ae=_0x57ed21;if(!$gameSystem[_0x3861ae(0x119)]())return;const _0x355d95=this[_0x3861ae(0x595)]();if(!_0x355d95)return;_0x355d95[_0x3861ae(0x8c4)](_0x5e6e67,_0x1f43a7,_0x5d1775);},Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0xb73)]=function(_0x34fadf,_0x567c10){const _0x47f87a=_0x57ed21;if(!$gameSystem['isSideView']())return;const _0x35f13d=this[_0x47f87a(0x595)]();if(!_0x35f13d)return;_0x35f13d[_0x47f87a(0xa0a)](_0x34fadf,_0x567c10);},Game_Battler['prototype'][_0x57ed21(0x125)]=function(_0x5dccdd,_0x57765f,_0x3745f1,_0x36149a){const _0x2ac67c=_0x57ed21;if(!$gameSystem[_0x2ac67c(0x119)]())return;const _0x596191=this[_0x2ac67c(0x595)]();if(!_0x596191)return;_0x596191['startSpin'](_0x5dccdd,_0x57765f,_0x3745f1,_0x36149a);},Game_Battler['prototype']['skewBattler']=function(_0x14a01d,_0x374368,_0x1f9c3b,_0x91c62){const _0x978907=_0x57ed21;if(!$gameSystem[_0x978907(0x119)]())return;const _0xce758e=this['battler']();if(!_0xce758e)return;this[_0x978907(0x8cc)]()&&(_0x14a01d*=-0x1,_0x374368*=-0x1),_0xce758e[_0x978907(0x540)](_0x14a01d,_0x374368,_0x1f9c3b,_0x91c62);},Game_Battler['prototype'][_0x57ed21(0x824)]=function(_0xefa5e9,_0x87801a,_0x3956e6,_0x2ae3c8){const _0x59f629=_0x57ed21;if(!$gameSystem[_0x59f629(0x119)]())return;const _0x213f16=this['battler']();if(!_0x213f16)return;_0x213f16[_0x59f629(0x8e6)](_0xefa5e9,_0x87801a,_0x3956e6,_0x2ae3c8);},Game_Battler[_0x57ed21(0xb20)]['changeBattlerOpacity']=function(_0x6a336a,_0x4d86f6,_0x4166dd){const _0x4ffd66=_0x57ed21;if(!$gameSystem[_0x4ffd66(0x119)]())return;const _0x1dff48=this[_0x4ffd66(0x595)]();if(!_0x1dff48)return;_0x1dff48['startOpacity'](_0x6a336a,_0x4d86f6,_0x4166dd);},Game_Battler[_0x57ed21(0xb20)]['clearFreezeMotion']=function(){const _0x25bc04=_0x57ed21,_0x3725d6=!!this[_0x25bc04(0xabb)];this['_freezeMotionData']=undefined,_0x3725d6&&(_0x25bc04(0x54a)===_0x25bc04(0x740)?this[_0x25bc04(0x46e)](_0x25bc04(0x991),_0x4045d1):(this[_0x25bc04(0xb23)](),this[_0x25bc04(0x230)]()));},Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x230)]=function(){const _0xda123c=_0x57ed21;if(!SceneManager[_0xda123c(0x9d4)]())return;const _0x3d614c=this[_0xda123c(0x595)]();if(!_0x3d614c)return;let _0x3f0d1a=this[_0xda123c(0x8cc)]()?_0x3d614c[_0xda123c(0xaf8)]:_0x3d614c[_0xda123c(0x28c)][_0xda123c(0xaf8)];if(_0x3f0d1a){if(_0xda123c(0x8a3)===_0xda123c(0x42c)){this['_stateIconSprite'][_0xda123c(0x772)]=0x0;return;}else _0x3f0d1a[_0xda123c(0x6c5)](0x0);}},Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x94e)]=function(_0x564b67,_0x1d8a4b,_0x19d754){const _0x5c4cf9=_0x57ed21;if(this[_0x5c4cf9(0xa8a)]()&&!this[_0x5c4cf9(0x860)]())return;let _0x57ea8a=0x0,_0x16c39c=0x0;_0x564b67[_0x5c4cf9(0x463)](/ATTACK[ ](\d+)/i)&&(_0x16c39c=Number(RegExp['$1']),_0x16c39c--);if(this['isActor']()){const _0x45ea89=this[_0x5c4cf9(0xa7a)]();_0x57ea8a=_0x45ea89[_0x16c39c]?_0x45ea89[_0x16c39c][_0x5c4cf9(0x35d)]:0x0;}else this[_0x5c4cf9(0xa8a)]()&&(_0x5c4cf9(0xbc0)!==_0x5c4cf9(0xafa)?_0x57ea8a=this[_0x5c4cf9(0x91b)]()['wtypeId']||0x0:(this[_0x5c4cf9(0x4a3)]['x']=_0x595293['width']*0xa,this[_0x5c4cf9(0x4a3)]['y']=_0x21b9f6[_0x5c4cf9(0x8b2)]*0xa));const _0x227d64=$dataSystem[_0x5c4cf9(0x517)][_0x57ea8a];if(_0x564b67[_0x5c4cf9(0x463)](/attack/i)){if(_0x5c4cf9(0x976)===_0x5c4cf9(0x976))_0x564b67=['thrust',_0x5c4cf9(0x118),_0x5c4cf9(0x923)][_0x227d64['type']]||_0x5c4cf9(0x118);else{const _0x23bd58=this[_0x5c4cf9(0xa65)](),_0x5b33b9=_0x4bd72a[_0x5c4cf9(0xfb)][_0x5c4cf9(0x8d3)]['PartyCmd']['CmdIconEscape'],_0x54c638=_0x23bd58===_0x5c4cf9(0x76a)?_0x4910e8[_0x5c4cf9(0x473)]:'\x5cI[%1]%2'[_0x5c4cf9(0x455)](_0x5b33b9,_0x2c84e1[_0x5c4cf9(0x473)]),_0x4b217b=this[_0x5c4cf9(0x181)]();this['addCommand'](_0x54c638,'escape',_0x4b217b);}}this[_0x5c4cf9(0xabb)]={'motionType':_0x564b67,'weaponImageId':_0x1d8a4b?_0x227d64[_0x5c4cf9(0x1e5)]:0x0,'pattern':_0x19d754};},Game_Battler[_0x57ed21(0xb20)]['isFriendly']=function(_0x3af195){const _0x2cf6cc=_0x57ed21;if(!_0x3af195)return![];return _0x3af195[_0x2cf6cc(0x7e4)]()===this['friendsUnit']();},Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0xbc4)]=function(_0x1387f8){const _0x48cd53=_0x57ed21;if(!_0x1387f8)return![];return _0x1387f8['opponentsUnit']()===this[_0x48cd53(0x7e4)]();},Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0x622)]=function(){return![];},Game_Actor[_0x57ed21(0xb20)][_0x57ed21(0x622)]=function(){const _0x4e3226=_0x57ed21;return this[_0x4e3226(0x5d0)]()[_0x4e3226(0x463)](/\$/i);},Game_Enemy[_0x57ed21(0xb20)][_0x57ed21(0x622)]=function(){const _0x2cd470=_0x57ed21;return this[_0x2cd470(0x860)]()&&this[_0x2cd470(0x980)]()[_0x2cd470(0x463)](/\$/i);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x6ea)]=Game_Actor['prototype']['setup'],Game_Actor[_0x57ed21(0xb20)][_0x57ed21(0x6c5)]=function(_0x336752){const _0x313240=_0x57ed21;VisuMZ[_0x313240(0xfb)][_0x313240(0x6ea)][_0x313240(0x509)](this,_0x336752),this[_0x313240(0x489)]();},Game_Actor[_0x57ed21(0xb20)]['initBattlePortrait']=function(){const _0x4ee810=_0x57ed21;this[_0x4ee810(0x3a4)]='',this[_0x4ee810(0x241)]()&&this['actor']()[_0x4ee810(0x75a)][_0x4ee810(0x463)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x4ee810(0x3a4)]=String(RegExp['$1']));},Game_Actor[_0x57ed21(0xb20)][_0x57ed21(0x6bc)]=function(){const _0x3e0264=_0x57ed21;if(this[_0x3e0264(0x82e)]()!=='')return this['getBattlePortrait']();else{if(Imported[_0x3e0264(0x64e)]&&this[_0x3e0264(0x20d)]()!=='')return'Kmdoq'!==_0x3e0264(0x77f)?this[_0x3e0264(0x20d)]():this[_0x3e0264(0x768)];}return'';},Game_Actor[_0x57ed21(0xb20)]['getBattlePortrait']=function(){const _0x187a02=_0x57ed21;if(this[_0x187a02(0x3a4)]===undefined)this[_0x187a02(0x489)]();return this[_0x187a02(0x3a4)];},Game_Actor[_0x57ed21(0xb20)][_0x57ed21(0x5ea)]=function(_0x2b8c8f){const _0x32928a=_0x57ed21;if(this[_0x32928a(0x3a4)]===undefined)this[_0x32928a(0x489)]();this[_0x32928a(0x3a4)]=_0x2b8c8f;if(SceneManager['isSceneBattle']()&&$gameParty[_0x32928a(0x1a2)]()[_0x32928a(0x55d)](this)){const _0xb1af41=SceneManager[_0x32928a(0x34f)][_0x32928a(0x9ea)];if(_0xb1af41)_0xb1af41['refreshActorPortrait'](this);}},Game_Actor[_0x57ed21(0xb20)][_0x57ed21(0x87e)]=function(){return!![];},Game_Actor[_0x57ed21(0xb20)][_0x57ed21(0x468)]=function(){const _0x1c13b9=_0x57ed21;if(!this['isConfused']()&&BattleManager[_0x1c13b9(0x52f)])return!![];return Game_Battler[_0x1c13b9(0xb20)]['isAutoBattle'][_0x1c13b9(0x509)](this);},VisuMZ['BattleCore'][_0x57ed21(0x21e)]=Game_Actor[_0x57ed21(0xb20)][_0x57ed21(0x858)],Game_Actor['prototype'][_0x57ed21(0x858)]=function(){const _0x32f49a=_0x57ed21;if(BattleManager[_0x32f49a(0x52f)]&&!ConfigManager[_0x32f49a(0x284)]){if(_0x32f49a(0x6b1)===_0x32f49a(0x6b1))return this[_0x32f49a(0xadb)]();else!this['_svBattlerSprite']&&(this['_svBattlerSprite']=new _0x1c62e5(_0xc78d57),this['attachSpritesToDistortionSprite']()),this[_0x32f49a(0x28c)][_0x32f49a(0xb02)](_0x3e59fa);}else{return VisuMZ[_0x32f49a(0xfb)]['Game_Actor_makeActionList']['call'](this);;}},Game_Actor['prototype'][_0x57ed21(0xadb)]=function(){const _0x27a371=_0x57ed21,_0x2d4406=[],_0xf82842=new Game_Action(this);return _0xf82842['setAttack'](),_0x2d4406[_0x27a371(0x46e)](_0xf82842),_0x2d4406;},Game_Actor[_0x57ed21(0xb20)]['battleCommands']=function(){const _0x2be349=_0x57ed21;return this[_0x2be349(0x505)]()[_0x2be349(0x75a)]['match'](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])[_0x2be349(0x4ff)](/[\r\n]+/):VisuMZ[_0x2be349(0xfb)]['Settings'][_0x2be349(0x107)][_0x2be349(0x7b7)];},Game_Actor[_0x57ed21(0xb20)]['svBattlerAnchorX']=function(){const _0x25d739=_0x57ed21;if(this['_cache'][_0x25d739(0x3a9)]!==undefined)return this[_0x25d739(0xeb)][_0x25d739(0x3a9)];if(this[_0x25d739(0x241)]()[_0x25d739(0x75a)][_0x25d739(0x463)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i))this['_cache'][_0x25d739(0x3a9)]=eval(RegExp['$1']),this[_0x25d739(0xeb)][_0x25d739(0xa1a)]=eval(RegExp['$2']);else{if(_0x25d739(0x8b9)!==_0x25d739(0x82c))this[_0x25d739(0xeb)][_0x25d739(0x3a9)]=Game_Battler[_0x25d739(0xb20)][_0x25d739(0x528)][_0x25d739(0x509)](this);else return _0x2f037f[_0x25d739(0x907)]()[_0x25d739(0x55d)](this[_0x25d739(0x675)]);}return this[_0x25d739(0xeb)][_0x25d739(0x3a9)];},Game_Actor[_0x57ed21(0xb20)]['svBattlerAnchorY']=function(){const _0x2eda6d=_0x57ed21;if(this[_0x2eda6d(0xeb)]['svAnchorY']!==undefined)return this[_0x2eda6d(0xeb)][_0x2eda6d(0xa1a)];return this[_0x2eda6d(0x241)]()[_0x2eda6d(0x75a)][_0x2eda6d(0x463)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache'][_0x2eda6d(0x3a9)]=eval(RegExp['$1']),this['_cache'][_0x2eda6d(0xa1a)]=eval(RegExp['$2'])):_0x2eda6d(0x85e)===_0x2eda6d(0x191)?(this[_0x2eda6d(0x2f5)]=new _0x314198(),_0x3ac9ec[_0x2eda6d(0xb21)]?this['addChild'](this[_0x2eda6d(0x2f5)]):this[_0x2eda6d(0x9e1)][_0x2eda6d(0x1cc)](this[_0x2eda6d(0x2f5)]),_0xeab35a[_0x2eda6d(0x34f)]['_uiContainer']=this[_0x2eda6d(0x2f5)]):this[_0x2eda6d(0xeb)][_0x2eda6d(0xa1a)]=Game_Battler[_0x2eda6d(0xb20)][_0x2eda6d(0x53b)][_0x2eda6d(0x509)](this),this['_cache']['svAnchorY'];},Game_Actor[_0x57ed21(0xb20)][_0x57ed21(0x827)]=function(){const _0x272b95=_0x57ed21;if(this[_0x272b95(0xeb)][_0x272b95(0xb7f)]!==undefined)return this[_0x272b95(0xeb)][_0x272b95(0xb7f)];if(this[_0x272b95(0x241)]()[_0x272b95(0x75a)]['match'](/<SIDEVIEW SHOW SHADOW>/i))this['_cache'][_0x272b95(0xb7f)]=!![];else this[_0x272b95(0x241)]()[_0x272b95(0x75a)][_0x272b95(0x463)](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x272b95(0xeb)][_0x272b95(0xb7f)]=![]:this[_0x272b95(0xeb)][_0x272b95(0xb7f)]=Game_Battler['prototype']['svBattlerShadowVisible']['call'](this);return this['_cache'][_0x272b95(0xb7f)];},Game_Actor[_0x57ed21(0xb20)][_0x57ed21(0x234)]=function(){const _0x1918a2=_0x57ed21;return VisuMZ[_0x1918a2(0xfb)]['Settings']['Actor'][_0x1918a2(0x31a)];},Game_Actor[_0x57ed21(0xb20)]['performWeaponAnimation']=function(){const _0x33e232=_0x57ed21,_0x35856c=this['weapons'](),_0x1648ad=_0x35856c[0x0]?_0x35856c[0x0][_0x33e232(0x35d)]:0x0,_0x4174c8=$dataSystem['attackMotions'][_0x1648ad];_0x4174c8&&this[_0x33e232(0x8db)](_0x4174c8[_0x33e232(0x1e5)]);},Game_Actor[_0x57ed21(0xb20)][_0x57ed21(0x937)]=function(_0x5dac4a){const _0x4811b5=_0x57ed21;Game_Battler[_0x4811b5(0xb20)][_0x4811b5(0x937)][_0x4811b5(0x509)](this,_0x5dac4a),this['performActionMotions'](_0x5dac4a);},Game_Actor[_0x57ed21(0xb20)]['getAttackMotion']=function(){const _0xd8c13d=_0x57ed21,_0x348b25=this[_0xd8c13d(0xa7a)](),_0x5a0603=_0x348b25[0x0]?_0x348b25[0x0]['wtypeId']:0x0;return $dataSystem[_0xd8c13d(0x517)][_0x5a0603];},Game_Actor['prototype'][_0x57ed21(0x4ed)]=function(_0x5ab75d){const _0x1faf9b=_0x57ed21;_0x5ab75d=_0x5ab75d||0x1,_0x5ab75d--;const _0x2b95f6=this['weapons']();return _0x2b95f6[_0x5ab75d]?_0x2b95f6[_0x5ab75d][_0x1faf9b(0x8b0)]:0x0;},Game_Actor[_0x57ed21(0xb20)][_0x57ed21(0x35f)]=function(_0x30beb9){const _0x598b09=_0x57ed21;_0x30beb9=_0x30beb9||0x1,_0x30beb9--;const _0x52d935=this['weapons'](),_0x2d835b=_0x52d935[_0x30beb9]?_0x52d935[_0x30beb9][_0x598b09(0x35d)]:0x0;return $dataSystem['attackMotions'][_0x2d835b];},Game_Actor[_0x57ed21(0xb20)][_0x57ed21(0x746)]=function(_0x35b420){const _0x446f42=_0x57ed21;_0x35b420=_0x35b420||0x1,_0x35b420--;const _0x1630cf=this[_0x446f42(0xa7a)](),_0x4611ca=_0x1630cf[_0x35b420]?_0x1630cf[_0x35b420][_0x446f42(0x35d)]:0x0,_0x291b2f=$dataSystem[_0x446f42(0x517)][_0x4611ca];if(_0x291b2f){if(_0x291b2f[_0x446f42(0xb47)]===0x0)this[_0x446f42(0xbdc)]('thrust');else{if(_0x291b2f[_0x446f42(0xb47)]===0x1)_0x446f42(0x7fc)!=='tmDVg'?this['_lastPluginCommandInterpreter']=_0x17435a:this[_0x446f42(0xbdc)]('swing');else _0x291b2f[_0x446f42(0xb47)]===0x2&&this[_0x446f42(0xbdc)](_0x446f42(0x923));}this[_0x446f42(0x8db)](_0x291b2f[_0x446f42(0x1e5)]);}},Game_Battler[_0x57ed21(0xb20)]['setActiveWeaponSlot']=function(_0x15b302){const _0x3374c5=_0x57ed21;this[_0x3374c5(0x3d3)]=_0x15b302||0x0,this[_0x3374c5(0xeb)]={};},Game_Battler[_0x57ed21(0xb20)][_0x57ed21(0xa44)]=function(){const _0x425e9e=_0x57ed21;this[_0x425e9e(0x3d3)]=this[_0x425e9e(0x3d3)]||0x0,this[_0x425e9e(0x3d3)]++,this[_0x425e9e(0xeb)]={};},Game_Battler['prototype'][_0x57ed21(0x884)]=function(){const _0x36a794=_0x57ed21;this[_0x36a794(0x3d3)]=undefined,this[_0x36a794(0xeb)]={};},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x84d)]=Game_Actor[_0x57ed21(0xb20)][_0x57ed21(0x30b)],Game_Actor[_0x57ed21(0xb20)][_0x57ed21(0x30b)]=function(){const _0x20f8b2=_0x57ed21;let _0x235ecc=VisuMZ[_0x20f8b2(0xfb)][_0x20f8b2(0x84d)][_0x20f8b2(0x509)](this);if(this['_tempEquipCheck'])return _0x235ecc;if(this[_0x20f8b2(0x3d3)]!==undefined){this[_0x20f8b2(0x1d6)]=!![];const _0x39b891=this[_0x20f8b2(0x142)]();for(let _0x4db8ad=0x0;_0x4db8ad<_0x39b891[_0x20f8b2(0x98b)];_0x4db8ad++){if(_0x20f8b2(0x1d3)!==_0x20f8b2(0x649))_0x39b891[_0x4db8ad]===0x1&&this['_activeWeaponSlot']!==_0x4db8ad&&(_0x20f8b2(0x523)!==_0x20f8b2(0x523)?this[_0x20f8b2(0x772)]=0x0:_0x235ecc[_0x4db8ad]=null);else return _0x40bc49(_0x4407b0['$1']);}this[_0x20f8b2(0x1d6)]=undefined;}return _0x235ecc;},Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x781)]=function(_0x24987e){const _0xb8ad5f=_0x57ed21;if(_0x24987e[_0xb8ad5f(0x8cc)]())return _0x24987e[_0xb8ad5f(0xa7a)]()[_0xb8ad5f(0x98b)]||0x1;else{if(_0xb8ad5f(0xac5)!==_0xb8ad5f(0xac5))this['applyFreezeMotionFrames'](),_0x3a9187['BattleCore']['Sprite_Actor_updateFrame'][_0xb8ad5f(0x509)](this);else return 0x1;}},Window_BattleLog['prototype'][_0x57ed21(0x8e8)]=function(_0xb39118,_0x3cca67){const _0x27faeb=_0x57ed21;if(_0xb39118&&_0xb39118['isActor']()){if(_0x27faeb(0x570)!==_0x27faeb(0x59e))_0xb39118['setActiveWeaponSlot'](_0x3cca67);else{if(_0x4bb16f[_0x27faeb(0x50d)]&&_0x1227a0[_0x27faeb(0x7bc)]!==_0x2d1665)return _0x5daf28[_0x27faeb(0x7bc)];else{if(this[_0x27faeb(0x3f0)]()==='border')return![];else{return _0x35fb6d[_0x27faeb(0xb20)]['isRightInputMode'][_0x27faeb(0x509)](this);;}}}}this[_0x27faeb(0x7ae)]();},Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x991)]=function(_0x5c480b){const _0x369a81=_0x57ed21;if(_0x5c480b&&_0x5c480b['isActor']()){if(_0x369a81(0x81f)===_0x369a81(0x749)){this['commandName'](_0x9b179f)[_0x369a81(0x463)](/\\I\[(\d+)\]/i);const _0x1e3be2=_0x81635(_0xbc314a['$1'])||0x0,_0x85d1e2=this[_0x369a81(0x143)](_0x45d4a7),_0x48700c=_0x85d1e2['x']+_0x5892e7[_0x369a81(0x4eb)]((_0x85d1e2['width']-_0x359f36[_0x369a81(0xe9)])/0x2),_0x2633ae=_0x85d1e2['y']+(_0x85d1e2[_0x369a81(0x8b2)]-_0x59004c[_0x369a81(0xb0b)])/0x2;this[_0x369a81(0x5e3)](_0x1e3be2,_0x48700c,_0x2633ae);}else _0x5c480b[_0x369a81(0x884)]();}this[_0x369a81(0x7ae)]();},Game_Actor[_0x57ed21(0xb20)][_0x57ed21(0x709)]=function(){const _0x17bfda=_0x57ed21;let _0xf84c95=_0x17bfda(0x709);if(this[_0x17bfda(0x8a8)](_0xf84c95))return this['_cache'][_0xf84c95];return this[_0x17bfda(0xeb)][_0xf84c95]=this[_0x17bfda(0x6c0)](this[_0x17bfda(0x241)]()),this['_cache'][_0xf84c95];},Game_Actor[_0x57ed21(0xb20)][_0x57ed21(0xb35)]=function(){const _0x128404=_0x57ed21;let _0x54f471=_0x128404(0xb35);if(this[_0x128404(0x8a8)](_0x54f471))return this['_cache'][_0x54f471];return this[_0x128404(0xeb)][_0x54f471]=this['createBattleUIOffsetY'](this[_0x128404(0x241)]()),this['_cache'][_0x54f471];},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x64c)]=Game_Enemy[_0x57ed21(0xb20)][_0x57ed21(0x6c5)],Game_Enemy[_0x57ed21(0xb20)][_0x57ed21(0x6c5)]=function(_0x340bff,_0x2e07ab,_0x261c35){const _0x4c5400=_0x57ed21;_0x340bff=DataManager[_0x4c5400(0x58e)](_0x340bff),VisuMZ[_0x4c5400(0xfb)][_0x4c5400(0x64c)][_0x4c5400(0x509)](this,_0x340bff,_0x2e07ab,_0x261c35);if(Imported[_0x4c5400(0x731)]){if(_0x4c5400(0x9ee)!=='WMlII')return 0x1*this[_0x4c5400(0x65c)];else this[_0x4c5400(0x2da)]();}this['clearBattleCoreData'](),this[_0x4c5400(0x88b)](),Imported['VisuMZ_1_ElementStatusCore']&&this[_0x4c5400(0x2dc)]();},Game_Enemy['prototype'][_0x57ed21(0x9d8)]=function(){const _0x5ac1b6=_0x57ed21,_0x5a8b79=VisuMZ['BattleCore'][_0x5ac1b6(0x8d3)][_0x5ac1b6(0x313)];this[_0x5ac1b6(0x406)]=_0x5a8b79[_0x5ac1b6(0x32c)],this[_0x5ac1b6(0xa3d)]={};},Game_Enemy[_0x57ed21(0xb20)][_0x57ed21(0x88b)]=function(){const _0x202323=_0x57ed21,_0x1eddc4=VisuMZ[_0x202323(0xfb)]['Settings']['Enemy'],_0x16555e=this['enemy']()['note'];this[_0x202323(0xa3d)]={'name':'','wtypeId':_0x1eddc4['WtypeId'],'collapse':_0x1eddc4[_0x202323(0x68f)],'motionIdle':_0x1eddc4['MotionIdle'],'width':_0x1eddc4[_0x202323(0x2e3)]||0x40,'height':_0x1eddc4[_0x202323(0xab5)]||0x40,'anchorX':_0x1eddc4[_0x202323(0x76e)]||0x0,'anchorY':_0x1eddc4['AnchorY']||0x0,'shadow':_0x1eddc4[_0x202323(0xb87)]};if(_0x16555e[_0x202323(0x463)](/<ATTACK ANIMATION:[ ](\d+)>/i)){if('niUWW'!=='WAziH')this[_0x202323(0x406)]=Number(RegExp['$1']);else return 0x0;}const _0x22e951=this[_0x202323(0xa3d)];if(_0x16555e['match'](/<SIDEVIEW BATTLER: (.*)>/i))_0x22e951[_0x202323(0xb1c)]=String(RegExp['$1']);else{if(_0x16555e['match'](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){if(_0x202323(0xa02)===_0x202323(0x1ad))_0x114264[_0x202323(0xfb)]['Window_BattleLog_displayActionResults'][_0x202323(0x509)](this,_0x5d0f9f,_0x5de9e9);else{const _0xc49ec2=String(RegExp['$1'])[_0x202323(0x4ff)](/[\r\n]+/)[_0x202323(0x29d)]('');_0x22e951[_0x202323(0xb1c)]=DataManager['processRandomizedData'](_0xc49ec2);}}}_0x16555e[_0x202323(0x463)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&('fiNrD'!==_0x202323(0x34d)?this[_0x202323(0x3f9)](_0x1de150,_0x2f1336,_0x37a437):(_0x22e951['anchorX']=eval(RegExp['$1']),_0x22e951[_0x202323(0x6ad)]=eval(RegExp['$2'])));if(_0x16555e[_0x202323(0x463)](/<SIDEVIEW COLLAPSE>/i))_0x202323(0x9e9)===_0x202323(0x9e9)?_0x22e951[_0x202323(0x18f)]=!![]:this[_0x202323(0x1cc)](this[_0x202323(0x6a4)]);else _0x16555e[_0x202323(0x463)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x22e951[_0x202323(0x18f)]=![]);if(_0x16555e['match'](/<SIDEVIEW SHOW SHADOW>/i))_0x22e951[_0x202323(0x430)]=!![];else{if(_0x16555e[_0x202323(0x463)](/<SIDEVIEW HIDE SHADOW>/i)){if('QkMLh'!==_0x202323(0x3d0))_0x22e951[_0x202323(0x430)]=![];else return _0x3fc3c6['BattleCore'][_0x202323(0x8d3)]['Enemy'][_0x202323(0x77a)]?this['_battler']['isSelected']():_0x9a66f7[_0x202323(0x34f)]['_enemyWindow']&&_0x31db66[_0x202323(0x34f)]['_enemyWindow'][_0x202323(0x216)]&&_0x5bd5d3[_0x202323(0x34f)][_0x202323(0x3c5)]['_enemies'][_0x202323(0x55d)](this[_0x202323(0x635)]);}}if(_0x16555e[_0x202323(0x463)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x22e951[_0x202323(0xb18)]=String(RegExp['$1'])[_0x202323(0x1b2)]()[_0x202323(0x1f6)]();else{if(_0x16555e[_0x202323(0x463)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x55182b=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x202323(0x29d)]('');_0x22e951['motionIdle']=DataManager[_0x202323(0xae8)](_0x55182b);}}_0x16555e[_0x202323(0x463)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x22e951['width']=Number(RegExp['$1']),_0x22e951['height']=Number(RegExp['$2']));if(_0x16555e[_0x202323(0x463)](/<SIDEVIEW WEAPON: (.*)>/i))_0x22e951['wtypeId']=DataManager[_0x202323(0x6be)](RegExp['$1']);else{if(_0x16555e[_0x202323(0x463)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x15e763=String(RegExp['$1'])[_0x202323(0x4ff)](/[\r\n]+/)[_0x202323(0x29d)](''),_0x421cf7=DataManager[_0x202323(0xae8)](_0x15e763);_0x22e951[_0x202323(0x35d)]=DataManager['getWtypeIdWithName'](_0x421cf7);}}if(Imported[_0x202323(0x731)]){const _0x11624c=this[_0x202323(0x999)]();for(const _0x174390 of _0x11624c){if('BDNag'===_0x202323(0xa28)){const _0x52658a=this[_0x202323(0x756)](_0x174390)['Name'][_0x202323(0xaaa)]()['trim'](),_0x1a5602=_0x174390[_0x202323(0xaaa)]()[_0x202323(0x1f6)]();if(_0x16555e[_0x202323(0x463)](VisuMZ['ElementStatusCore'][_0x202323(0x38a)][_0x202323(0x7a3)[_0x202323(0x455)](_0x1a5602,_0x52658a)]))_0x22e951[_0x202323(0xb1c)]=String(RegExp['$1']);else{if(_0x16555e['match'](VisuMZ['ElementStatusCore']['RegExp'][_0x202323(0x788)[_0x202323(0x455)](_0x1a5602,_0x52658a)])){if(_0x202323(0xae3)!==_0x202323(0x510)){const _0x477a67=String(RegExp['$1'])[_0x202323(0x4ff)](/[\r\n]+/)[_0x202323(0x29d)]('');_0x22e951[_0x202323(0xb1c)]=DataManager[_0x202323(0xae8)](_0x477a67);}else _0x3b547c[_0x202323(0x232)]['x']=(_0x1a7d1f['skew']['x']*(_0x51301c-0x1)+this[_0x202323(0x9c3)])/_0x12b968,_0x311f27['skew']['y']=(_0x38f16b[_0x202323(0x232)]['y']*(_0x5f44aa-0x1)+this[_0x202323(0x7b6)])/_0x51edc6;}}if(_0x16555e[_0x202323(0x463)](VisuMZ[_0x202323(0x96d)]['RegExp'][_0x202323(0x126)[_0x202323(0x455)](_0x1a5602,_0x52658a)]))'svdIq'!==_0x202323(0x859)?_0x22e951[_0x202323(0x35d)]=DataManager[_0x202323(0x6be)](RegExp['$1']):(_0x207c5f[_0x202323(0xfb)][_0x202323(0x3cc)][_0x202323(0x509)](this),this[_0x202323(0xaa3)]());else{if(_0x16555e[_0x202323(0x463)](VisuMZ[_0x202323(0x96d)]['RegExp']['SvWeaponMass-%1-%2'[_0x202323(0x455)](_0x1a5602,_0x52658a)])){const _0x906283=String(RegExp['$1'])[_0x202323(0x4ff)](/[\r\n]+/)[_0x202323(0x29d)](''),_0x14c196=DataManager[_0x202323(0xae8)](_0x906283);_0x22e951['wtypeId']=DataManager[_0x202323(0x6be)](_0x14c196);}}if(_0x16555e[_0x202323(0x463)](VisuMZ[_0x202323(0x96d)][_0x202323(0x38a)]['SvMotionIdleSolo-%1-%2'[_0x202323(0x455)](_0x1a5602,_0x52658a)]))_0x22e951[_0x202323(0xb18)]=String(RegExp['$1'])[_0x202323(0x1b2)]()[_0x202323(0x1f6)]();else{if(_0x16555e['match'](VisuMZ[_0x202323(0x96d)][_0x202323(0x38a)][_0x202323(0xb24)[_0x202323(0x455)](_0x1a5602,_0x52658a)])){if(_0x202323(0x54f)!==_0x202323(0x17b)){const _0xc44c7f=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x202323(0x29d)]('');_0x22e951['motionIdle']=DataManager[_0x202323(0xae8)](_0xc44c7f);}else{const _0x3e0ee3=_0x2466be[_0x202323(0x34f)][_0x202323(0x2ef)]();this['move'](_0x3e0ee3['x'],_0x3e0ee3['y'],_0x3e0ee3[_0x202323(0x6c1)],_0x3e0ee3[_0x202323(0x8b2)]),this[_0x202323(0x575)](),this[_0x202323(0xb96)](0x0);}}}}else this[_0x202323(0x8a5)]()[_0x202323(0x1cc)](_0x2c5c06);}}},Game_Enemy['prototype']['attackAnimationId1']=function(){const _0x4459e3=_0x57ed21;return this[_0x4459e3(0x406)]||0x0;},Game_Enemy[_0x57ed21(0xb20)][_0x57ed21(0x4c1)]=function(){const _0x257c46=_0x57ed21;return this[_0x257c46(0xa82)]();},Game_Enemy[_0x57ed21(0xb20)]['attackAnimationIdSlot']=function(_0x525e1e){return this['attackAnimationId1']();},Game_Enemy[_0x57ed21(0xb20)][_0x57ed21(0x6aa)]=function(){const _0x207305=_0x57ed21;if(this[_0x207305(0xb41)]()['note']['match'](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x207305(0xb20)][_0x207305(0x6aa)][_0x207305(0x509)](this);},Game_Enemy[_0x57ed21(0xb20)]['isBattlerGrounded']=function(){const _0x1f198e=_0x57ed21;if(this[_0x1f198e(0xb41)]()[_0x1f198e(0x75a)][_0x1f198e(0x463)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x57ed21(0xb20)][_0x57ed21(0x55b)]=function(){const _0x478a8f=_0x57ed21,_0xe0a51e=[];for(const _0x308408 of this[_0x478a8f(0xb41)]()[_0x478a8f(0x9f2)]){const _0x41e774=$dataSkills[_0x308408[_0x478a8f(0x92c)]];if(_0x41e774&&!_0xe0a51e[_0x478a8f(0x55d)](_0x41e774))_0xe0a51e['push'](_0x41e774);}return _0xe0a51e;},Game_Enemy[_0x57ed21(0xb20)]['battleUIOffsetX']=function(){const _0x494388=_0x57ed21;let _0x55f533=_0x494388(0x709);if(this[_0x494388(0x8a8)](_0x55f533))return this['_cache'][_0x55f533];return this[_0x494388(0xeb)][_0x55f533]=this[_0x494388(0x6c0)](this[_0x494388(0xb41)]()),this[_0x494388(0xeb)][_0x55f533];},Game_Enemy['prototype'][_0x57ed21(0xb35)]=function(){const _0x1cca5f=_0x57ed21;let _0x17cbdc=_0x1cca5f(0xb35);if(this[_0x1cca5f(0x8a8)](_0x17cbdc))return this[_0x1cca5f(0xeb)][_0x17cbdc];return this['_cache'][_0x17cbdc]=this['createBattleUIOffsetY'](this[_0x1cca5f(0xb41)]()),this[_0x1cca5f(0xeb)][_0x17cbdc];},Game_Enemy[_0x57ed21(0xb20)][_0x57ed21(0x91b)]=function(){const _0x5bfa6f=_0x57ed21;if(this[_0x5bfa6f(0xa3d)]!==undefined)return this['_svBattlerData'];return this[_0x5bfa6f(0x88b)](),this[_0x5bfa6f(0xa3d)];},Game_Enemy['prototype'][_0x57ed21(0x860)]=function(){const _0x5e48c5=_0x57ed21;return this[_0x5e48c5(0x91b)]()['name']!=='';},Game_Enemy['prototype'][_0x57ed21(0x980)]=function(){const _0x2eb9e9=_0x57ed21;return this['svBattlerData']()[_0x2eb9e9(0xb1c)];},Game_Enemy['prototype'][_0x57ed21(0x234)]=function(){const _0x827906=_0x57ed21;return this[_0x827906(0x860)]()?VisuMZ[_0x827906(0xfb)]['Settings'][_0x827906(0x929)][_0x827906(0x31a)]:VisuMZ[_0x827906(0xfb)][_0x827906(0x8d3)]['Enemy'][_0x827906(0x31a)];},Game_Enemy[_0x57ed21(0xb20)][_0x57ed21(0x937)]=function(_0x468e83){const _0xea3d82=_0x57ed21;Game_Battler['prototype'][_0xea3d82(0x937)][_0xea3d82(0x509)](this,_0x468e83);if(this[_0xea3d82(0x860)]())this[_0xea3d82(0x72f)](_0x468e83);},Game_Enemy[_0x57ed21(0xb20)]['performAttack']=function(){const _0xf6d456=_0x57ed21,_0x219450=this['svBattlerData']()[_0xf6d456(0x35d)]||0x0,_0x4c5c6e=$dataSystem['attackMotions'][_0x219450];if(_0x4c5c6e){if(_0xf6d456(0x272)!==_0xf6d456(0x272)){if(!this[_0xf6d456(0x4e6)])return;if(this[_0xf6d456(0x635)]&&this[_0xf6d456(0x635)][_0xf6d456(0x827)]()){const _0x3aeebd=this[_0xf6d456(0x4e6)][_0xf6d456(0x10e)];this['_shadowSprite'][_0xf6d456(0x6c3)](0x0,0x0,_0x3aeebd[_0xf6d456(0x6c1)],_0x3aeebd[_0xf6d456(0x8b2)]);}else this[_0xf6d456(0x4e6)][_0xf6d456(0x6c3)](0x0,0x0,0x0,0x0);}else{if(_0x4c5c6e['type']===0x0){if(_0xf6d456(0x5e1)==='Cvwkz')this['requestMotion']('thrust');else{const _0x374de9=this[_0xf6d456(0x635)];_0x39a1dd['BattleCore']['Sprite_Battler_setBattler'][_0xf6d456(0x509)](this,_0x38fccf),this[_0xf6d456(0x205)](_0x24999b);if(_0x374de9!==_0x42c1eb)this['updateShadowScale']();}}else{if(_0x4c5c6e[_0xf6d456(0xb47)]===0x1)this[_0xf6d456(0xbdc)](_0xf6d456(0x118));else _0x4c5c6e[_0xf6d456(0xb47)]===0x2&&this[_0xf6d456(0xbdc)](_0xf6d456(0x923));}}}},Game_Enemy[_0x57ed21(0xb20)][_0x57ed21(0xaae)]=function(){const _0x4fb546=_0x57ed21,_0x524341=this[_0x4fb546(0x91b)]()[_0x4fb546(0x35d)]||0x0,_0x1fc65b=$dataSystem['attackMotions'][_0x524341];if(_0x1fc65b){if('FHFRT'===_0x4fb546(0x351)){if(!_0x150d63['isSceneBattle']())return;const _0x280793=_0x406d72['getLastPluginCommandInterpreter']();if(!_0x280793)return;_0x280793['setWaitMode'](_0x4fb546(0x2a2));}else this[_0x4fb546(0x8db)](_0x1fc65b[_0x4fb546(0x1e5)]);}},Game_Enemy[_0x57ed21(0xb20)][_0x57ed21(0xfe)]=function(){const _0x1a9125=_0x57ed21,_0x3e0db6=this[_0x1a9125(0x91b)]()[_0x1a9125(0x35d)]||0x0;return $dataSystem[_0x1a9125(0x517)][_0x3e0db6];},Game_Enemy[_0x57ed21(0xb20)][_0x57ed21(0x35f)]=function(_0x4859df){const _0x4b54bb=_0x57ed21;return this[_0x4b54bb(0xfe)]();},Game_Enemy[_0x57ed21(0xb20)][_0x57ed21(0x862)]=function(){const _0x18c563=_0x57ed21;Game_Battler[_0x18c563(0xb20)][_0x18c563(0x862)][_0x18c563(0x509)](this),this[_0x18c563(0x87e)]()&&this['hasSvBattler']()&&this[_0x18c563(0xbdc)](_0x18c563(0x43d)),SoundManager['playEnemyDamage']();},Game_Enemy[_0x57ed21(0xb20)][_0x57ed21(0x68b)]=function(){const _0x5261a5=_0x57ed21;Game_Battler[_0x5261a5(0xb20)][_0x5261a5(0x68b)][_0x5261a5(0x509)](this),this[_0x5261a5(0xbdc)]('evade');},Game_Enemy['prototype'][_0x57ed21(0x7ad)]=function(){const _0x1dfcd8=_0x57ed21;Game_Battler['prototype'][_0x1dfcd8(0x7ad)][_0x1dfcd8(0x509)](this),this[_0x1dfcd8(0xbdc)]('evade');},Game_Enemy[_0x57ed21(0xb20)][_0x57ed21(0x2a1)]=function(){const _0x87fe15=_0x57ed21;Game_Battler[_0x87fe15(0xb20)][_0x87fe15(0x2a1)][_0x87fe15(0x509)](this),this[_0x87fe15(0x8e0)]();},Game_Enemy[_0x57ed21(0xb20)][_0x57ed21(0x8f2)]=function(){const _0x4a12e0=_0x57ed21;if(this['hasSvBattler']()){if(_0x4a12e0(0xbe6)!==_0x4a12e0(0x2a8)){if(this[_0x4a12e0(0x3fb)]()>=0x1)return!![];return this[_0x4a12e0(0x91b)]()[_0x4a12e0(0x18f)];}else this['requestMotion'](_0x4a12e0(0xb34));}else return!![];},Game_Enemy[_0x57ed21(0xb20)][_0x57ed21(0x528)]=function(){const _0x576ced=_0x57ed21;return this[_0x576ced(0x91b)]()['anchorX'];},Game_Enemy['prototype'][_0x57ed21(0x53b)]=function(){const _0x2cbfc8=_0x57ed21;return this['svBattlerData']()[_0x2cbfc8(0x6ad)];},Game_Enemy[_0x57ed21(0xb20)][_0x57ed21(0x827)]=function(){const _0x3ec633=_0x57ed21;return this[_0x3ec633(0x91b)]()[_0x3ec633(0x430)];},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x51b)]=Game_Enemy['prototype'][_0x57ed21(0xa68)],Game_Enemy[_0x57ed21(0xb20)][_0x57ed21(0xa68)]=function(_0x4b7787){const _0x5ea3af=_0x57ed21;VisuMZ[_0x5ea3af(0xfb)][_0x5ea3af(0x51b)]['call'](this,_0x4b7787),this[_0x5ea3af(0x9d8)](),this[_0x5ea3af(0x88b)]();const _0x510376=this[_0x5ea3af(0x595)]();if(_0x510376)_0x510376[_0x5ea3af(0xb02)](this);},Game_Unit['prototype'][_0x57ed21(0x77d)]=function(_0x350023){const _0x48f926=_0x57ed21;for(const _0x4c87ac of this[_0x48f926(0x195)]()){if(_0x48f926(0x93f)===_0x48f926(0x93f)){if(_0x4c87ac)_0x4c87ac[_0x48f926(0x77d)](_0x350023);}else return this[_0x48f926(0x6dd)]()&&!this[_0x48f926(0xbc6)]()?this['needsSelectionBattleCore']():_0x1b1fb2[_0x48f926(0xfb)][_0x48f926(0x39c)]['call'](this);}},Game_Unit[_0x57ed21(0xb20)][_0x57ed21(0xa19)]=function(){const _0x465474=_0x57ed21,_0x1e36eb=this[_0x465474(0x38d)]();return _0x1e36eb[Math[_0x465474(0x36c)](_0x1e36eb['length'])];},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x5ed)]=Game_Party[_0x57ed21(0xb20)]['addActor'],Game_Party[_0x57ed21(0xb20)]['addActor']=function(_0x4715ac){const _0x38f51=_0x57ed21;VisuMZ[_0x38f51(0xfb)][_0x38f51(0x5ed)][_0x38f51(0x509)](this,_0x4715ac),BattleManager[_0x38f51(0x642)]();},VisuMZ[_0x57ed21(0xfb)]['Game_Party_removeActor']=Game_Party['prototype'][_0x57ed21(0x305)],Game_Party[_0x57ed21(0xb20)]['removeActor']=function(_0x5bd887){const _0x85a96=_0x57ed21;VisuMZ[_0x85a96(0xfb)][_0x85a96(0x1d2)][_0x85a96(0x509)](this,_0x5bd887),BattleManager[_0x85a96(0x642)]();},VisuMZ['BattleCore'][_0x57ed21(0x271)]=Game_Troop['prototype']['setup'],Game_Troop[_0x57ed21(0xb20)][_0x57ed21(0x6c5)]=function(_0x3f91f3){const _0x263ed4=_0x57ed21;$gameTemp[_0x263ed4(0x981)](),$gameTemp[_0x263ed4(0x3cb)](_0x3f91f3),VisuMZ[_0x263ed4(0xfb)][_0x263ed4(0x271)][_0x263ed4(0x509)](this,_0x3f91f3),this['extendTroopMembers']();},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0xbe9)]=Game_Troop[_0x57ed21(0xb20)][_0x57ed21(0x655)],Game_Troop[_0x57ed21(0xb20)][_0x57ed21(0x655)]=function(){const _0x363b2e=_0x57ed21;let _0x2b21a3=VisuMZ['BattleCore'][_0x363b2e(0xbe9)][_0x363b2e(0x509)](this);return this['expRate']&&(_0x2b21a3*=this[_0x363b2e(0xa80)]()),Math['ceil'](_0x2b21a3);},Game_Troop[_0x57ed21(0xb20)][_0x57ed21(0xa80)]=function(){return 0x1;},Game_Troop['prototype']['extendTroopMembers']=function(){const _0x5d765b=_0x57ed21,_0x32f2b7=this['troop']()[_0x5d765b(0xb1c)]||'';if(_0x32f2b7[_0x5d765b(0x463)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){if('lerQP'!==_0x5d765b(0xa85))this[_0x5d765b(0x353)](),this[_0x5d765b(0x88a)]=null,this[_0x5d765b(0xac0)]=![];else{const _0x3ae0f6=RegExp['$1'][_0x5d765b(0x4ff)](',')[_0x5d765b(0x6d9)](_0x3948c2=>Number(_0x3948c2));this[_0x5d765b(0x145)](),this[_0x5d765b(0x964)](_0x3ae0f6);}}},Game_Troop['prototype'][_0x57ed21(0x145)]=function(){const _0x3b509f=_0x57ed21;let _0x1a5bae='Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest'+'\x0a';_0x1a5bae+=_0x3b509f(0x60d);if(Imported['VisuMZ_2_BattleSystemBTB']){if(VisuMZ[_0x3b509f(0x42b)][_0x3b509f(0x7bd)]<1.11){if(_0x3b509f(0xb09)!==_0x3b509f(0xb09)){let _0xbe7f49=_0x587c68[_0x3b509f(0x5aa)][_0x10247d];if(!_0xbe7f49)return;let _0x1f01af=_0xbe7f49;const _0xc89506=this[_0x3b509f(0xa65)]();if(_0xc89506===_0x3b509f(0x76a))_0x1f01af=_0x1f01af[_0x3b509f(0x5b6)](/\x1I\[(\d+)\]/gi,''),_0x1f01af=_0x1f01af['replace'](/\\I\[(\d+)\]/gi,'');else{if(!_0xbe7f49['match'](/\\I\[(\d+)\]/i)){const _0x311e19=_0x355030['VisuMZ_1_SkillsStatesCore']?_0xd71834['SkillsStatesCore'][_0x3b509f(0x8d3)][_0x3b509f(0xa45)]:_0x2c062d[_0x3b509f(0xfb)][_0x3b509f(0x8d3)]['ActorCmd'],_0x57425c=_0x519d79['magicSkills'][_0x3b509f(0x55d)](_0x5874c3),_0xe17f1b=_0x57425c?_0x311e19[_0x3b509f(0x179)]:_0x311e19[_0x3b509f(0x12c)];_0x1f01af=_0x3b509f(0x710)['format'](_0xe17f1b,_0xbe7f49);}}this['addCommand'](_0x1f01af,_0x3b509f(0x26c),!![],_0x2451be);}else alert(_0x1a5bae[_0x3b509f(0x455)](_0x3b509f(0x8dc))),SceneManager['exit']();}}Imported[_0x3b509f(0x724)]&&(VisuMZ['BattleSystemCTB'][_0x3b509f(0x7bd)]<1.19&&(alert(_0x1a5bae['format'](_0x3b509f(0x63c))),SceneManager[_0x3b509f(0x53e)]()));if(Imported[_0x3b509f(0x9de)]){if('xNUCN'!==_0x3b509f(0xa04))VisuMZ[_0x3b509f(0x115)]['version']<1.15&&(alert(_0x1a5bae[_0x3b509f(0x455)](_0x3b509f(0x175))),SceneManager['exit']());else{_0x2b3790=_0x38e26b[_0x3b509f(0xfb)]['JS'][_0x36bce2][_0x3b509f(0x509)](this,this[_0x3b509f(0x478)](),_0x57a9ed,this[_0x3b509f(0x720)](),_0x389779);if(_0x45e607)_0x3684ae=_0x257519;}}},Game_Troop[_0x57ed21(0xb20)]['processExtendTroopMembers']=function(_0x56f545){const _0x25fd69=_0x57ed21;this[_0x25fd69(0x729)]={};for(const _0x31d3cf of this[_0x25fd69(0x195)]()){if(!_0x31d3cf)continue;_0x31d3cf[_0x25fd69(0x75e)]('');}for(const _0x15fa43 of _0x56f545){if(_0x25fd69(0x4c0)!==_0x25fd69(0x2c8)){const _0x4ff5cd=$dataTroops[_0x15fa43];if(_0x4ff5cd)this['addExtendedTroopMembers'](_0x4ff5cd);}else _0x4c0b8f+=_0x5bbcbc;}this[_0x25fd69(0x93c)]();},Game_Troop[_0x57ed21(0xb20)][_0x57ed21(0x11d)]=function(_0x1659b1){const _0xdabd2c=_0x57ed21;for(const _0x1b5bad of _0x1659b1['members']){if($dataEnemies[_0x1b5bad[_0xdabd2c(0x6b7)]]){const _0x418ef9=_0x1b5bad[_0xdabd2c(0x6b7)],_0x275d0c=_0x1b5bad['x'],_0x21635d=_0x1b5bad['y'],_0x1eccb8=new Game_Enemy(_0x418ef9,_0x275d0c,_0x21635d);if(_0x1b5bad[_0xdabd2c(0x77b)]){if(_0xdabd2c(0xb8e)===_0xdabd2c(0xed))return this[_0xdabd2c(0x720)]()['note'][_0xdabd2c(0x463)](/<DAMAGE CAP:[ ](\d+)>/i)?_0x274fcf(_0x429259['$1']):this[_0xdabd2c(0x478)]()['hardDamageCap']();else _0x1eccb8[_0xdabd2c(0x715)]();}this[_0xdabd2c(0xa64)][_0xdabd2c(0x46e)](_0x1eccb8);}}},VisuMZ['BattleCore']['Game_Map_setupBattleback']=Game_Map[_0x57ed21(0xb20)][_0x57ed21(0x666)],Game_Map[_0x57ed21(0xb20)][_0x57ed21(0x666)]=function(){const _0x55d4e7=_0x57ed21;VisuMZ['BattleCore'][_0x55d4e7(0x330)]['call'](this),this[_0x55d4e7(0x1cd)]();},Game_Map[_0x57ed21(0xb20)]['setupBattlebackBattleCore']=function(){const _0x217335=_0x57ed21;this[_0x217335(0x14d)]={},this[_0x217335(0x531)]={};if(!$dataMap)return;const _0x2edb5f=$dataMap[_0x217335(0x75a)];if(!_0x2edb5f)return;const _0x3411ee=_0x2edb5f[_0x217335(0x463)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x3411ee)for(const _0x1deb58 of _0x3411ee){_0x1deb58[_0x217335(0x463)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x207a2c=Number(RegExp['$1']),_0x33ed25=Number(RegExp['$2']),_0x3acc5c=_0x33ed25===0x1?this[_0x217335(0x14d)]:this[_0x217335(0x531)],_0x1f8819=String(RegExp['$3']);_0x3acc5c[_0x207a2c]=_0x1f8819;}},VisuMZ['BattleCore']['Game_Map_battleback1Name']=Game_Map[_0x57ed21(0xb20)][_0x57ed21(0x832)],Game_Map[_0x57ed21(0xb20)][_0x57ed21(0x832)]=function(){const _0x58af9c=_0x57ed21;if(!BattleManager[_0x58af9c(0x5e7)]()){if(_0x58af9c(0xaab)!==_0x58af9c(0xaab)){if(!_0x27ea1d[_0x58af9c(0x119)]())return;this[_0x58af9c(0x963)]=_0xe44699;const _0x5afc75=this[_0x58af9c(0x595)]();if(_0x5afc75)_0x5afc75[_0x58af9c(0x188)]();}else{const _0x24cbaa=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this[_0x58af9c(0x14d)]&&this[_0x58af9c(0x14d)][_0x24cbaa])return this[_0x58af9c(0x14d)][_0x24cbaa];}}return VisuMZ['BattleCore']['Game_Map_battleback1Name']['call'](this);},VisuMZ[_0x57ed21(0xfb)]['Game_Map_battleback2Name']=Game_Map['prototype'][_0x57ed21(0x25a)],Game_Map[_0x57ed21(0xb20)][_0x57ed21(0x25a)]=function(){const _0x57747c=_0x57ed21;if(!BattleManager[_0x57747c(0x5e7)]()){if('WrEqj'!=='UFdZx'){const _0x5007bb=$gamePlayer[_0x57747c(0x386)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x57747c(0x14d)]&&this[_0x57747c(0x531)][_0x5007bb])return this[_0x57747c(0x531)][_0x5007bb];}else{if(_0x311b3e[_0x57747c(0x9d4)]()){const _0x3378dd=this[_0x57747c(0x595)]();if(_0x3378dd)_0x3378dd[_0x57747c(0x5cb)](_0x338809);}}}return VisuMZ[_0x57747c(0xfb)][_0x57747c(0x3d2)]['call'](this);},VisuMZ['BattleCore'][_0x57ed21(0xb2d)]=Game_Map['prototype'][_0x57ed21(0x12d)],Game_Map[_0x57ed21(0xb20)][_0x57ed21(0x12d)]=function(){const _0x3810b8=_0x57ed21;let _0x178449=JsonEx[_0x3810b8(0x5a6)](VisuMZ[_0x3810b8(0xfb)][_0x3810b8(0xb2d)][_0x3810b8(0x509)](this));return VisuMZ['BattleCore'][_0x3810b8(0xaaf)](_0x178449);},VisuMZ['BattleCore'][_0x57ed21(0xaaf)]=function(_0x5d0e32){const _0x2e1c3f=_0x57ed21;var _0x3d2064,_0x2bf0e3,_0x4c4fff;for(_0x4c4fff=_0x5d0e32[_0x2e1c3f(0x98b)]-0x1;_0x4c4fff>0x0;_0x4c4fff--){_0x3d2064=Math['floor'](Math[_0x2e1c3f(0xa91)]()*(_0x4c4fff+0x1)),_0x2bf0e3=_0x5d0e32[_0x4c4fff],_0x5d0e32[_0x4c4fff]=_0x5d0e32[_0x3d2064],_0x5d0e32[_0x3d2064]=_0x2bf0e3;}return _0x5d0e32;},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x7cb)]=Game_Interpreter[_0x57ed21(0xb20)]['command357'],Game_Interpreter['prototype'][_0x57ed21(0x922)]=function(_0x19f6bd){const _0x35111b=_0x57ed21;return $gameTemp[_0x35111b(0x1d4)](this),VisuMZ[_0x35111b(0xfb)][_0x35111b(0x7cb)][_0x35111b(0x509)](this,_0x19f6bd);},VisuMZ['BattleCore'][_0x57ed21(0x5f5)]=Game_Interpreter[_0x57ed21(0xb20)][_0x57ed21(0x203)],Game_Interpreter[_0x57ed21(0xb20)]['updateWaitMode']=function(){const _0x445e6f=_0x57ed21;if(SceneManager[_0x445e6f(0x9d4)]()){if(_0x445e6f(0x8fa)===_0x445e6f(0x8fa))switch(this[_0x445e6f(0xa62)]){case _0x445e6f(0xb2f):if(Imported['VisuMZ_3_ActSeqCamera']){if(_0x445e6f(0xb78)!==_0x445e6f(0xb78))return this[_0x445e6f(0xa82)]();else{if($gameScreen['battleCameraData']()[_0x445e6f(0x555)]>0x0)return!![];this[_0x445e6f(0xa62)]='';}}break;case _0x445e6f(0x53d):if(BattleManager[_0x445e6f(0x837)][_0x445e6f(0xac3)]())return!![];this[_0x445e6f(0xa62)]='';break;case _0x445e6f(0x785):if(Imported[_0x445e6f(0xb6a)]){if(_0x445e6f(0xf7)===_0x445e6f(0xf7)){if($gameScreen[_0x445e6f(0xacb)]()[_0x445e6f(0x581)]>0x0)return!![];if($gameScreen[_0x445e6f(0xacb)]()[_0x445e6f(0x11a)]>0x0)return!![];this['_waitMode']='';}else{if(!this[_0x445e6f(0xb41)]())return;_0x42c192[_0x445e6f(0x8d0)]()?this['x']=_0x375298[_0x445e6f(0x667)]-this['enemy']()['battler']()['_baseX']:this['x']=this[_0x445e6f(0xb41)]()[_0x445e6f(0x595)]()['_baseX'];this['x']-=_0x5c14d4[_0x445e6f(0x413)](this[_0x445e6f(0x6c1)]/0x2),this['y']=this['enemy']()[_0x445e6f(0x595)]()['_baseY']-_0x235c02[_0x445e6f(0x413)](this['lineHeight']()*1.5);const _0x984c57=_0x4a8b50[_0x445e6f(0xfb)][_0x445e6f(0x8d3)][_0x445e6f(0x313)];this['x']+=_0x984c57[_0x445e6f(0x3f7)]||0x0,this['y']+=_0x984c57[_0x445e6f(0xa15)]||0x0;}}break;case _0x445e6f(0xa25):if(BattleManager[_0x445e6f(0x837)]['isEffecting']())return!![];this['_waitMode']='';break;case'battleFloat':if(BattleManager['_spriteset']['isAnyoneFloating']())return!![];this['_waitMode']='';break;case _0x445e6f(0x559):if(BattleManager[_0x445e6f(0x837)][_0x445e6f(0x959)]())return!![];this[_0x445e6f(0xa62)]='';break;case _0x445e6f(0x294):if(BattleManager[_0x445e6f(0x977)][_0x445e6f(0x848)]())return!![];this[_0x445e6f(0xa62)]='';break;case _0x445e6f(0x220):if(BattleManager['_spriteset'][_0x445e6f(0xb9c)]())return!![];this[_0x445e6f(0xa62)]='';break;case _0x445e6f(0x9b5):if(BattleManager[_0x445e6f(0x837)]['isAnyoneChangingOpacity']())return!![];this['_waitMode']='';break;case _0x445e6f(0xba6):if(BattleManager['_spriteset'][_0x445e6f(0x896)]())return!![];this[_0x445e6f(0xa62)]='';break;case _0x445e6f(0x2a2):if(BattleManager['_spriteset']['isAnyoneSkewing']())return!![];this[_0x445e6f(0xa62)]='';break;case _0x445e6f(0x4fc):if(Imported[_0x445e6f(0x3de)]){if(BattleManager[_0x445e6f(0x837)][_0x445e6f(0x2e7)]())return!![];this[_0x445e6f(0xa62)]='';}break;case'battleSkew':if(Imported[_0x445e6f(0xb6a)]){if(_0x445e6f(0x169)!==_0x445e6f(0x3a8)){if($gameScreen[_0x445e6f(0xacb)]()[_0x445e6f(0x838)]>0x0)return!![];this['_waitMode']='';}else this[_0x445e6f(0x1f1)](),this[_0x445e6f(0x861)](),_0x15546c[_0x445e6f(0xb20)][_0x445e6f(0x612)][_0x445e6f(0x509)](this),this[_0x445e6f(0x8ed)]();}break;case'battleSpin':if(BattleManager['_spriteset'][_0x445e6f(0x3b7)]())return!![];this[_0x445e6f(0xa62)]='';break;case _0x445e6f(0x8d5):if(Imported[_0x445e6f(0xb6a)]){if($gameScreen[_0x445e6f(0xacb)]()[_0x445e6f(0x95a)]>0x0)return!![];this[_0x445e6f(0xa62)]='';}break;case _0x445e6f(0x29f):if(Imported[_0x445e6f(0x584)]){if(BattleManager[_0x445e6f(0x837)][_0x445e6f(0x488)]){if(BattleManager[_0x445e6f(0x837)][_0x445e6f(0x488)]())return!![];this[_0x445e6f(0xa62)]=_0x445e6f(0xa43);}else{if('aNAwT'===_0x445e6f(0x9b7))this[_0x445e6f(0xa62)]='';else{if(!this[_0x445e6f(0x254)])return;if(!this[_0x445e6f(0x4e6)])return;this[_0x445e6f(0x484)](),this[_0x445e6f(0x379)]();}}break;}break;case _0x445e6f(0xa43):if(Imported['VisuMZ_3_ActSeqImpact']){if(BattleManager['_spriteset'][_0x445e6f(0x792)]())return!![];this[_0x445e6f(0xa62)]='';}break;}else _0x89618e[_0x445e6f(0xadd)][_0x445e6f(0x7e4)]()[_0x445e6f(0x694)](_0x3ed774);}return VisuMZ['BattleCore']['Game_Interpreter_updateWaitMode'][_0x445e6f(0x509)](this);},VisuMZ[_0x57ed21(0xfb)]['Game_Interpreter_command301']=Game_Interpreter['prototype'][_0x57ed21(0x393)],Game_Interpreter[_0x57ed21(0xb20)][_0x57ed21(0x393)]=function(_0x5370fd){const _0x2bcbd3=_0x57ed21;return!$gameParty[_0x2bcbd3(0x318)]()?this[_0x2bcbd3(0x165)](_0x5370fd):VisuMZ['BattleCore'][_0x2bcbd3(0x4b0)]['call'](this,_0x5370fd);},Game_Interpreter[_0x57ed21(0xb20)]['command3011']=function(_0x3f4c49){const _0x1c1b1a=_0x57ed21;return VisuMZ[_0x1c1b1a(0xfb)][_0x1c1b1a(0x4b0)][_0x1c1b1a(0x509)](this,_0x3f4c49),BattleManager[_0x1c1b1a(0x3b5)](_0x53feb0=>{const _0x15f0e0=_0x1c1b1a;this[_0x15f0e0(0x423)][this[_0x15f0e0(0xa78)]]=_0x53feb0;}),!![];},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x43f)]=function(_0x53670e){const _0x514f4a=_0x57ed21,_0x3dcc85=$dataCommonEvents[_0x53670e];if(!_0x3dcc85)return![];if(_0x3dcc85[_0x514f4a(0x2c7)][_0x514f4a(0x98b)]<=0x1)return![];return!![];},Game_Interpreter[_0x57ed21(0xb20)][_0x57ed21(0x165)]=function(_0x3d5f60){const _0x34430d=_0x57ed21,_0x3966e4=VisuMZ['BattleCore'][_0x34430d(0x8d3)][_0x34430d(0x5c6)],_0x54f2e0=_0x3966e4[_0x34430d(0x4fb)],_0x26b2f5=$dataCommonEvents[_0x54f2e0];if(_0x26b2f5&&VisuMZ[_0x34430d(0xfb)][_0x34430d(0x43f)](_0x54f2e0)){const _0x47a229=this[_0x34430d(0x801)]()?this[_0x34430d(0x8cd)]:0x0,_0x152b50=_0x26b2f5['list'];this[_0x34430d(0x4f5)](_0x152b50,_0x47a229),this['_list']=JsonEx[_0x34430d(0x5a6)](this[_0x34430d(0x3a1)]);const _0xdafe6e={'code':0xbc3,'indent':this[_0x34430d(0xa78)],'parameters':JsonEx[_0x34430d(0x5a6)](_0x3d5f60)};return this[_0x34430d(0x3a1)][_0x34430d(0xab4)](this[_0x34430d(0xa3f)]+0x1,0x0,_0xdafe6e),!![];}else{if(_0x34430d(0x562)===_0x34430d(0x8fb))this[_0x34430d(0x374)]();else return VisuMZ['BattleCore'][_0x34430d(0x4b0)]['call'](this,_0x3d5f60);}},VisuMZ['BattleCore'][_0x57ed21(0x412)]=BattleManager[_0x57ed21(0xb99)],BattleManager[_0x57ed21(0xb99)]=function(){const _0x55f8c5=_0x57ed21;VisuMZ[_0x55f8c5(0xfb)][_0x55f8c5(0x412)][_0x55f8c5(0x509)](this),this['onEncounterBattleCore']();},BattleManager[_0x57ed21(0x1f9)]=function(){const _0x3d06dc=_0x57ed21,_0xc84f9b=VisuMZ[_0x3d06dc(0xfb)]['Settings'][_0x3d06dc(0x5c6)],_0x1741f7=_0xc84f9b[_0x3d06dc(0x4fb)];_0x1741f7&&VisuMZ[_0x3d06dc(0xfb)][_0x3d06dc(0x43f)](_0x1741f7)&&(this[_0x3d06dc(0x39e)]=!![],$gameTemp['reserveCommonEvent'](_0xc84f9b['BattleStartEvent']),$gameMap[_0x3d06dc(0x37b)](),$gameMap['_interpreter'][_0x3d06dc(0x218)]=!![]),_0xc84f9b['DefeatEvent']>0x0&&(this['_canLose']=!![]);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x492)]=Scene_Map[_0x57ed21(0xb20)]['updateCallMenu'],Scene_Map[_0x57ed21(0xb20)][_0x57ed21(0xb90)]=function(){const _0x3f3fc2=_0x57ed21;if(BattleManager[_0x3f3fc2(0x39e)])return;VisuMZ[_0x3f3fc2(0xfb)]['Scene_Map_updateCallMenu']['call'](this);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x9a8)]=Scene_Map[_0x57ed21(0xb20)][_0x57ed21(0xb2c)],Scene_Map[_0x57ed21(0xb20)]['launchBattle']=function(){const _0xf69cae=_0x57ed21;if(BattleManager[_0xf69cae(0x39e)])this[_0xf69cae(0x747)]();else{if(_0xf69cae(0x8e4)!==_0xf69cae(0x8e4)){_0x4e7057[_0xf69cae(0xb20)][_0xf69cae(0xb54)][_0xf69cae(0x509)](this),this[_0xf69cae(0x681)][_0xf69cae(0x80e)]();if(!this[_0xf69cae(0xb41)]())return;this[_0xf69cae(0x4a4)]();}else VisuMZ[_0xf69cae(0xfb)][_0xf69cae(0x9a8)][_0xf69cae(0x509)](this);}},Scene_Map[_0x57ed21(0xb20)][_0x57ed21(0x747)]=function(){this['_active']=!![];},VisuMZ['BattleCore'][_0x57ed21(0x2c6)]=SceneManager['isSceneChanging'],SceneManager[_0x57ed21(0x8f1)]=function(){const _0x11aa3d=_0x57ed21;if(BattleManager[_0x11aa3d(0x39e)])return![];return VisuMZ['BattleCore'][_0x11aa3d(0x2c6)]['call'](this);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x48e)]=Game_Interpreter['prototype']['terminate'],Game_Interpreter[_0x57ed21(0xb20)][_0x57ed21(0x99a)]=function(){const _0x678670=_0x57ed21;VisuMZ[_0x678670(0xfb)][_0x678670(0x48e)][_0x678670(0x509)](this),this[_0x678670(0x218)]&&(this[_0x678670(0x218)]=undefined,SceneManager[_0x678670(0x34f)][_0x678670(0x888)]());},Scene_Map[_0x57ed21(0xb20)]['battleCoreResumeLaunchBattle']=function(){const _0x573168=_0x57ed21;BattleManager[_0x573168(0x39e)]=undefined,BattleManager[_0x573168(0x508)]=!![],this[_0x573168(0x6e7)]();},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x3d9)]=Scene_Map[_0x57ed21(0xb20)]['initialize'],Scene_Map['prototype'][_0x57ed21(0xa1b)]=function(){const _0x3c3334=_0x57ed21;VisuMZ[_0x3c3334(0xfb)][_0x3c3334(0x3d9)][_0x3c3334(0x509)](this),BattleManager[_0x3c3334(0x508)]&&(this['_active']=!![],BattleManager[_0x3c3334(0x508)]=undefined);},VisuMZ[_0x57ed21(0xfb)]['Scene_Map_initialize']=Scene_Map[_0x57ed21(0xb20)]['initialize'],Scene_Map['prototype'][_0x57ed21(0xa1b)]=function(){const _0x281859=_0x57ed21;VisuMZ[_0x281859(0xfb)]['Scene_Map_initialize'][_0x281859(0x509)](this),$gameTemp['clearForcedGameTroopSettingsBattleCore']();},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x2d0)]=Scene_ItemBase[_0x57ed21(0xb20)][_0x57ed21(0x124)],Scene_ItemBase[_0x57ed21(0xb20)][_0x57ed21(0x124)]=function(){const _0x5a1476=_0x57ed21;VisuMZ[_0x5a1476(0xfb)][_0x5a1476(0x2d0)][_0x5a1476(0x509)](this);if(this[_0x5a1476(0x720)]()[_0x5a1476(0x75a)][_0x5a1476(0x463)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this[_0x5a1476(0x720)]()[_0x5a1476(0x75a)][_0x5a1476(0x463)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x5a1476(0x9f5)]=[]),DataManager[_0x5a1476(0x3c1)](this[_0x5a1476(0x720)]())&&($gameTemp[_0x5a1476(0x9f5)]=[]);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0xa74)]=Scene_Options[_0x57ed21(0xb20)][_0x57ed21(0x27e)],Scene_Options['prototype'][_0x57ed21(0x27e)]=function(){const _0x36c52d=_0x57ed21;let _0xcc8966=VisuMZ[_0x36c52d(0xfb)][_0x36c52d(0xa74)][_0x36c52d(0x509)](this);const _0x22b4ea=VisuMZ[_0x36c52d(0xfb)][_0x36c52d(0x8d3)];if(_0x22b4ea[_0x36c52d(0x4db)][_0x36c52d(0x653)]&&_0x22b4ea['AutoBattle'][_0x36c52d(0x954)])_0xcc8966+=0x2;if(_0x22b4ea['HpGauge'][_0x36c52d(0x653)]&&_0x22b4ea[_0x36c52d(0x51a)]['AdjustRect'])_0xcc8966+=0x1;return _0xcc8966;},VisuMZ['BattleCore'][_0x57ed21(0x249)]=Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0xa1b)],Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0xa1b)]=function(){const _0xb91f9a=_0x57ed21;VisuMZ['BattleCore']['Scene_Battle_initialize'][_0xb91f9a(0x509)](this),this['clearOnceParallelInterpreters']();},VisuMZ[_0x57ed21(0xfb)]['Scene_Battle_start']=Scene_Battle['prototype'][_0x57ed21(0x76f)],Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x76f)]=function(){const _0x542ac5=_0x57ed21;if(SceneManager[_0x542ac5(0x4c4)]()){Scene_Message[_0x542ac5(0xb20)]['start'][_0x542ac5(0x509)](this);if(this['_spriteset']){if('kYjbf'===_0x542ac5(0xadc))return;else this[_0x542ac5(0x837)]['update']();}BattleManager['_tpbSceneChangeCacheActor']&&BattleManager[_0x542ac5(0x374)]();}else _0x542ac5(0x2d2)!==_0x542ac5(0x2d2)?(_0x548cb7-=this['_floatHeight'],_0x561848-=this[_0x542ac5(0x356)]):(VisuMZ[_0x542ac5(0xfb)]['Scene_Battle_start'][_0x542ac5(0x509)](this),$gameTroop[_0x542ac5(0x25e)]());},VisuMZ['BattleCore']['Scene_Battle_stop']=Scene_Battle[_0x57ed21(0xb20)]['stop'],Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x6e7)]=function(){const _0x2e0a53=_0x57ed21;SceneManager[_0x2e0a53(0x918)]()?Scene_Message['prototype'][_0x2e0a53(0x6e7)][_0x2e0a53(0x509)](this):VisuMZ[_0x2e0a53(0xfb)][_0x2e0a53(0x5b7)]['call'](this);},VisuMZ['BattleCore'][_0x57ed21(0x326)]=Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x99a)],Scene_Battle[_0x57ed21(0xb20)]['terminate']=function(){const _0x23585a=_0x57ed21;if(SceneManager[_0x23585a(0x918)]())Scene_Message[_0x23585a(0xb20)][_0x23585a(0x99a)][_0x23585a(0x509)](this);else{if('SyzDL'!==_0x23585a(0x9c6))VisuMZ[_0x23585a(0xfb)][_0x23585a(0x326)][_0x23585a(0x509)](this);else{if(_0xb056a5[_0x23585a(0x75a)][_0x23585a(0x463)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x49dd5a=_0x59add6(_0x5a056c['$1'])[_0x23585a(0x4ff)](/[\r\n]+/)[_0x23585a(0x29d)](''),_0x25304a=this['processRandomizedData'](_0x49dd5a);_0x307b34=this[_0x23585a(0x921)](_0x25304a)||_0x17d7b6,_0x9ef35e=_0x2ca0c2[_0x23585a(0x58e)](_0x30d6e2);}}}this[_0x23585a(0x5e6)]();},Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x825)]=function(){const _0x4efaf4=_0x57ed21;if(ConfigManager[_0x4efaf4(0x50d)]&&ConfigManager[_0x4efaf4(0x7bc)]!==undefined)return ConfigManager['uiInputPosition'];else{if(this[_0x4efaf4(0x3f0)]()===_0x4efaf4(0x131))return![];else{if(_0x4efaf4(0x6d3)!==_0x4efaf4(0x857)){return Scene_Message['prototype']['isRightInputMode']['call'](this);;}else{if(!_0x50d734[_0x4efaf4(0x9d4)]())return;if(!_0x189a71[_0x4efaf4(0x584)])return;const _0x406cc1=_0x738ec2['_scene']['_spriteset'];if(!_0x406cc1)return;_0x31fa54['ConvertParams'](_0x177f35,_0x3de900);const _0x118dbb=_0x3c5003(_0x38ddcd[_0x4efaf4(0x601)])||0x0,_0x2e08eb=_0x49f5a3(_0x5805f7['Rate']),_0x437b0f=_0xb29fee[_0x4efaf4(0x69d)]||0x1,_0x5cbaaf=_0x31fc66[_0x4efaf4(0x670)]||_0x4efaf4(0x315);_0x406cc1[_0x4efaf4(0x582)](_0x118dbb,_0x2e08eb,_0x437b0f,_0x5cbaaf);}}}},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0xbb1)]=Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x875)],Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x875)]=function(){const _0x1a0e21=_0x57ed21;this[_0x1a0e21(0x9d1)](),VisuMZ[_0x1a0e21(0xfb)][_0x1a0e21(0xbb1)][_0x1a0e21(0x509)](this),this[_0x1a0e21(0xb11)]();},VisuMZ[_0x57ed21(0xfb)]['Scene_Battle_createCancelButton']=Scene_Battle['prototype'][_0x57ed21(0x8d2)],Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x8d2)]=function(){const _0x2d0469=_0x57ed21;VisuMZ[_0x2d0469(0xfb)][_0x2d0469(0x9b8)][_0x2d0469(0x509)](this),this['battleLayoutStyle']()==='border'&&this[_0x2d0469(0x576)]();},Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x16c)]=function(_0x19acfc){const _0x4e17ba=_0x57ed21;if(_0x19acfc){if(_0x4e17ba(0x4ca)==='sxxly')for(const _0x1d39ed of _0x4c9d34){const _0x149c12=_0x2d0e2c[0x0][_0x4e17ba(0x455)](_0x1d39ed[0x0]),_0x6eae3e=_0x1fb34a[0x1][_0x4e17ba(0x455)](_0x1d39ed[0x1]),_0xf7afa0=new _0x5e3c62(_0x4e1ebe[_0x4e17ba(0x455)](_0x6eae3e),'i');_0x596a13[_0x149c12]=_0xf7afa0;}else this['_windowLayer']['x']=(Graphics[_0x4e17ba(0x6c1)]-Graphics[_0x4e17ba(0x667)])/0x2,this[_0x4e17ba(0x4a3)]['y']=(Graphics[_0x4e17ba(0x8b2)]-Graphics[_0x4e17ba(0xb3b)])/0x2;}else this[_0x4e17ba(0x4a3)]['x']=Graphics[_0x4e17ba(0x6c1)]*0xa,this[_0x4e17ba(0x4a3)]['y']=Graphics[_0x4e17ba(0x8b2)]*0xa;},VisuMZ['BattleCore'][_0x57ed21(0x233)]=Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x360)],Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x360)]=function(){const _0x3b0918=_0x57ed21,_0x4bd120=BattleManager['actor']();VisuMZ[_0x3b0918(0xfb)][_0x3b0918(0x233)]['call'](this);if(_0x4bd120){if(_0x4bd120===BattleManager[_0x3b0918(0x241)]())return;if(_0x4bd120===BattleManager[_0x3b0918(0xadd)])return;if(_0x4bd120['battler']())_0x4bd120[_0x3b0918(0x595)]()[_0x3b0918(0x7ce)]();}},VisuMZ['BattleCore']['Scene_Battle_selectPreviousCommand']=Scene_Battle[_0x57ed21(0xb20)]['selectPreviousCommand'],Scene_Battle[_0x57ed21(0xb20)]['selectPreviousCommand']=function(){const _0x109a66=_0x57ed21,_0xa56da3=BattleManager[_0x109a66(0x241)]();if(_0xa56da3&&_0xa56da3[_0x109a66(0x595)])_0xa56da3[_0x109a66(0x595)]()[_0x109a66(0x7ce)]();VisuMZ[_0x109a66(0xfb)][_0x109a66(0x58c)][_0x109a66(0x509)](this);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0xa67)]=Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x85a)],Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x85a)]=function(){const _0x2052b6=_0x57ed21;if(VisuMZ[_0x2052b6(0xfb)]['Settings']['BattleLog'][_0x2052b6(0xe8)])return VisuMZ[_0x2052b6(0xfb)][_0x2052b6(0x8d3)][_0x2052b6(0x6f7)][_0x2052b6(0xe8)]['call'](this);return VisuMZ['BattleCore'][_0x2052b6(0xa67)]['call'](this);},VisuMZ[_0x57ed21(0xfb)]['Scene_Battle_createPartyCommandWindow']=Scene_Battle['prototype'][_0x57ed21(0x519)],Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x519)]=function(){const _0x57d36e=_0x57ed21;VisuMZ[_0x57d36e(0xfb)][_0x57d36e(0x2ed)][_0x57d36e(0x509)](this),this['createPartyCommandWindowBattleCore']();},Scene_Battle['prototype'][_0x57ed21(0x826)]=function(){const _0x35bee1=_0x57ed21,_0x1da73d=this[_0x35bee1(0x63d)];_0x1da73d['setHandler']('autoBattle',this['commandAutoBattle'][_0x35bee1(0x62e)](this)),_0x1da73d[_0x35bee1(0x36b)](_0x35bee1(0x56e),this[_0x35bee1(0x4e1)][_0x35bee1(0x62e)](this));const _0x4162d6=this[_0x35bee1(0x3f0)]();switch(_0x4162d6){case'xp':case _0x35bee1(0x4a2):return this['_partyCommandWindow'][_0x35bee1(0xb96)](0x1);break;}},Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x446)]=function(){const _0x435bfa=_0x57ed21;BattleManager['_autoBattle']=!![],$gameParty['makeActions'](),this[_0x435bfa(0x360)](),BattleManager[_0x435bfa(0x66f)]()&&(BattleManager['_inputting']=![]);},Scene_Battle['prototype'][_0x57ed21(0x4e1)]=function(){const _0x385df1=_0x57ed21;this[_0x385df1(0xb62)]()?'VNLMP'!=='okTjh'?(this[_0x385df1(0x6ae)]=!![],this['_logWindow'][_0x385df1(0x46e)](_0x385df1(0x972),VisuMZ[_0x385df1(0xfb)]['Settings'][_0x385df1(0x809)][_0x385df1(0x5b8)])):(_0x144353[_0x385df1(0xb20)]['performCounter'][_0x385df1(0x509)](this),this[_0x385df1(0x8e0)]()):this['callOptions']();},Scene_Battle[_0x57ed21(0xb20)]['isQueueOptionsMenu']=function(){const _0x4879f6=_0x57ed21;return BattleManager[_0x4879f6(0x388)]();},Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x7a2)]=function(){const _0x26786d=_0x57ed21;this['_callSceneOptions']=![],this[_0x26786d(0x837)][_0x26786d(0x402)](),this[_0x26786d(0x4a3)][_0x26786d(0x2d6)]=![];if(BattleManager[_0x26786d(0x5e7)]())($dataSystem[_0x26786d(0x832)]||$dataSystem['battleback2Name'])&&SceneManager[_0x26786d(0x1c4)]();else($gameMap[_0x26786d(0x832)]()||$gameMap['battleback2Name']())&&(_0x26786d(0x502)===_0x26786d(0x3a0)?(_0x47ded0&&_0x17c0ee[_0x26786d(0x8cc)]()&&_0x23bc24['setActiveWeaponSlot'](_0xe061a5),this['callNextMethod']()):SceneManager[_0x26786d(0x1c4)]());SceneManager[_0x26786d(0x46e)](Scene_Options),BattleManager['isTpb']()&&(_0x26786d(0x229)==='YKdCy'?BattleManager['_tpbSceneChangeCacheActor']=BattleManager[_0x26786d(0x241)]():!this['_logWindow'][_0x26786d(0x848)]()&&this['endAction']());},VisuMZ['BattleCore'][_0x57ed21(0x33b)]=Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x6a8)],Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x6a8)]=function(){const _0x2a949d=_0x57ed21;VisuMZ[_0x2a949d(0xfb)][_0x2a949d(0x33b)][_0x2a949d(0x509)](this);if(this['_callSceneOptions']&&!BattleManager[_0x2a949d(0xadd)])this[_0x2a949d(0x7a2)]();},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x4f0)]=Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x402)],Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x402)]=function(){const _0x5ad98b=_0x57ed21;VisuMZ[_0x5ad98b(0xfb)][_0x5ad98b(0x4f0)]['call'](this),this[_0x5ad98b(0xb4a)]();},Scene_Battle[_0x57ed21(0xb20)]['createAutoBattleWindow']=function(){const _0x28337c=_0x57ed21,_0x48072a=this[_0x28337c(0xa93)]();this['_autoBattleWindow']=new Window_AutoBattleCancel(_0x48072a),this['_autoBattleWindow'][_0x28337c(0x715)](),this[_0x28337c(0x1cc)](this[_0x28337c(0x43e)]);},Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0xa93)]=function(){const _0x914ccc=_0x57ed21;return VisuMZ['BattleCore'][_0x914ccc(0x8d3)][_0x914ccc(0x4db)][_0x914ccc(0x21a)][_0x914ccc(0x509)](this);},Scene_Battle[_0x57ed21(0xb20)]['clearOnceParallelInterpreters']=function(){const _0x403d20=_0x57ed21;this[_0x403d20(0x6fc)]=[];},Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0xb4a)]=function(){const _0x2cd4bb=_0x57ed21;if(!this[_0x2cd4bb(0x6fc)])return;for(const _0x5d5d55 of this[_0x2cd4bb(0x6fc)]){_0x5d5d55&&(_0x2cd4bb(0x333)==='KPosv'?(this['_distortionSprite'][_0x2cd4bb(0x232)]['x']=this[_0x2cd4bb(0x9c3)],this[_0x2cd4bb(0xbb7)]['skew']['y']=this[_0x2cd4bb(0x7b6)]):_0x5d5d55[_0x2cd4bb(0x402)]());}},Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x7c8)]=function(_0x4624a5){const _0x54eda9=_0x57ed21,_0x5c2e46=$dataCommonEvents[_0x4624a5];if(!_0x5c2e46)return;const _0x133a8c=new Game_BattleOnceParallelInterpreter();this[_0x54eda9(0x796)](_0x133a8c),_0x133a8c[_0x54eda9(0x346)](_0x4624a5);},Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x796)]=function(_0x1595a1){const _0x5de542=_0x57ed21;this[_0x5de542(0x6fc)]=this[_0x5de542(0x6fc)]||[],this['_onceParallelInterpreters'][_0x5de542(0x46e)](_0x1595a1);},Scene_Battle['prototype'][_0x57ed21(0xae0)]=function(_0x428610){const _0x3e0a1e=_0x57ed21;this[_0x3e0a1e(0x6fc)]=this[_0x3e0a1e(0x6fc)]||[],this[_0x3e0a1e(0x6fc)]['remove'](_0x428610);},Game_Troop[_0x57ed21(0xb20)][_0x57ed21(0x25e)]=function(){const _0x3c35d4=_0x57ed21;for(const _0x4e6005 of this['troop']()[_0x3c35d4(0x7d1)]){if(!this[_0x3c35d4(0x671)](_0x4e6005))continue;SceneManager[_0x3c35d4(0x34f)][_0x3c35d4(0x55c)](_0x4e6005);}},Game_Troop[_0x57ed21(0xb20)][_0x57ed21(0x671)]=function(_0x47eaf8){const _0x231663=_0x57ed21;if(!_0x47eaf8)return;for(const _0xd90d9a of _0x47eaf8[_0x231663(0x2c7)]){if(_0x231663(0x966)===_0x231663(0x46f)){let _0x362690=_0x5d9113(_0x3c12ad['$1']);while(_0x362690--){_0x1c843e[_0x231663(0x46e)](this[_0x231663(0x28b)]()['trueRandomTarget']());}return this[_0x231663(0x41a)](_0x40805c);}else{if([0x6c,0x198][_0x231663(0x55d)](_0xd90d9a[_0x231663(0xadf)])){const _0x981368=_0xd90d9a[_0x231663(0x7c3)][0x0];if(_0x981368[_0x231663(0x463)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}}return![];},Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x55c)]=function(_0x193626){const _0x1f8605=_0x57ed21;if(!_0x193626)return;const _0x2761e2=new Game_BattleOnceParallelInterpreter();this[_0x1f8605(0x796)](_0x2761e2),_0x2761e2['setTroopPage'](_0x193626);};function Game_BattleOnceParallelInterpreter(){const _0x24560b=_0x57ed21;this[_0x24560b(0xa1b)](...arguments);}Game_BattleOnceParallelInterpreter['prototype']=Object['create'](Game_Interpreter[_0x57ed21(0xb20)]),Game_BattleOnceParallelInterpreter[_0x57ed21(0xb20)][_0x57ed21(0x7fb)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter['prototype'][_0x57ed21(0x346)]=function(_0x7fa3dc){const _0x5bc4a5=_0x57ed21,_0x2664d9=$dataCommonEvents[_0x7fa3dc];_0x2664d9?_0x5bc4a5(0x56d)===_0x5bc4a5(0x56d)?this[_0x5bc4a5(0x6c5)](_0x2664d9['list'],0x0):this['_stateIconSprite']['setup'](this[_0x5bc4a5(0x635)]):this[_0x5bc4a5(0x99a)]();},Game_BattleOnceParallelInterpreter[_0x57ed21(0xb20)][_0x57ed21(0x99a)]=function(){const _0x26b767=_0x57ed21;if(!SceneManager[_0x26b767(0x9d4)]())return;SceneManager['_scene'][_0x26b767(0xae0)](this),Game_Interpreter[_0x26b767(0xb20)]['terminate']['call'](this);},Game_BattleOnceParallelInterpreter[_0x57ed21(0xb20)][_0x57ed21(0x99f)]=function(_0x226f9b){const _0x3f91a0=_0x57ed21;if(_0x226f9b){if(_0x3f91a0(0x657)===_0x3f91a0(0x476))return!![];else this[_0x3f91a0(0x6c5)](_0x226f9b[_0x3f91a0(0x2c7)],0x0);}else{if('ohuIt'!=='ohuIt'){const _0x49258d=new _0x3e3489();return _0x379109[_0x2c3aeb]=_0x49258d,this['addChildToBack'](_0x49258d),this[_0x3f91a0(0x811)](this[_0x3f91a0(0x4b4)]),_0x49258d;}else this[_0x3f91a0(0x99a)]();}},Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x5af)]=function(){const _0x5a8899=_0x57ed21;return VisuMZ[_0x5a8899(0xfb)][_0x5a8899(0x8d3)][_0x5a8899(0x809)][_0x5a8899(0x22b)];},VisuMZ['BattleCore'][_0x57ed21(0x648)]=Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x460)],Scene_Battle['prototype'][_0x57ed21(0x460)]=function(){const _0x13c996=_0x57ed21;this[_0x13c996(0x5af)]()?this[_0x13c996(0x405)]():VisuMZ[_0x13c996(0xfb)][_0x13c996(0x648)][_0x13c996(0x509)](this);},Scene_Battle[_0x57ed21(0xb20)]['onDisabledPartyCommandSelection']=function(){const _0xdac8e=_0x57ed21;if(BattleManager[_0xdac8e(0xb68)]())this[_0xdac8e(0x360)]();else BattleManager['isTpb']()&&VisuMZ[_0xdac8e(0xfb)][_0xdac8e(0x648)][_0xdac8e(0x509)](this);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x2b8)]=Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x615)],Scene_Battle[_0x57ed21(0xb20)]['commandFight']=function(){const _0x586f24=_0x57ed21;BattleManager['isTpb']()?_0x586f24(0xbf0)!==_0x586f24(0x72c)?(this[_0x586f24(0x820)](),this[_0x586f24(0x2a5)]()):this[_0x586f24(0x739)]():_0x586f24(0x926)===_0x586f24(0x28d)?this['callNextMethod']():VisuMZ[_0x586f24(0xfb)]['Scene_Battle_commandFight'][_0x586f24(0x509)](this);},Scene_Battle[_0x57ed21(0xb20)]['tpbCommandFight']=function(){const _0x1dbee9=_0x57ed21;if(!VisuMZ[_0x1dbee9(0xfb)]['TpbActiveChangeEnabled'])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x1dbee9(0x6a1)]())return;const _0xd96b46=$gameParty['aliveMembers']()['filter'](_0x1148a0=>_0x1148a0[_0x1dbee9(0x8df)]()&&_0x1148a0[_0x1dbee9(0x252)]());BattleManager['_currentActor']=_0xd96b46[0x0]||null,BattleManager['_currentActor']&&BattleManager['_currentActor']['setActionState'](_0x1dbee9(0xa29));},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x44f)]=Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x5fa)],Scene_Battle['prototype']['createActorCommandWindow']=function(){const _0x5aa163=_0x57ed21;VisuMZ['BattleCore'][_0x5aa163(0x44f)][_0x5aa163(0x509)](this),this[_0x5aa163(0x665)]();},Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x665)]=function(){const _0x5e636d=_0x57ed21,_0x1039f0=this[_0x5e636d(0xade)];_0x1039f0[_0x5e636d(0x36b)](_0x5e636d(0x473),this[_0x5e636d(0x932)]['bind'](this)),_0x1039f0[_0x5e636d(0x36b)](_0x5e636d(0xb3f),this[_0x5e636d(0x7a1)][_0x5e636d(0x62e)](this)),_0x1039f0[_0x5e636d(0x36b)](_0x5e636d(0x658),this[_0x5e636d(0x2ec)]['bind'](this));if(BattleManager[_0x5e636d(0x66f)]()){if(_0x5e636d(0x3fc)!=='oSRtj')return this['_cache']=this[_0x5e636d(0xeb)]||{},this[_0x5e636d(0xeb)][_0x2085d8]!==_0x1d4e2c;else this[_0x5e636d(0x5af)]()?_0x5e636d(0x392)!==_0x5e636d(0x392)?_0x1642fc=this['_baseLineStack'][this['_baseLineStack'][_0x5e636d(0x98b)]-0x1]:delete _0x1039f0[_0x5e636d(0x149)][_0x5e636d(0x18c)]:_0x1039f0['setHandler']('cancel',this[_0x5e636d(0xb7d)][_0x5e636d(0x62e)](this));}},Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x932)]=function(){const _0x18742a=_0x57ed21;this[_0x18742a(0x808)]();},Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x7a1)]=function(){const _0x109194=_0x57ed21;BattleManager[_0x109194(0x241)]()[_0x109194(0x385)](),BattleManager['finishActorInput'](),BattleManager[_0x109194(0x739)](),this[_0x109194(0x60f)]();},Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x2ec)]=function(){const _0x1d1b43=_0x57ed21,_0x41cd35=BattleManager[_0x1d1b43(0x771)]();_0x41cd35['setSkill'](this[_0x1d1b43(0xade)][_0x1d1b43(0x909)]()),this[_0x1d1b43(0x7a6)]();},Scene_Battle['prototype'][_0x57ed21(0xb7d)]=function(){const _0x343283=_0x57ed21;if(this['tpbActorSwitchConditionsMet']()){if(_0x343283(0x224)==='WeYuY')this[_0x343283(0x1ea)]();else return _0x1676b4[_0x343283(0x8ff)]();}else{if('pRpaL'!==_0x343283(0x1fa)){const _0x5014e4=_0x569871['parse']('['+_0x53bda2['$1'][_0x343283(0x463)](/\d+/g)+']');for(const _0x3f5952 of _0x5014e4){if(!_0x14aacb[_0x343283(0x993)](_0x3f5952))return![];}return!![];}else this[_0x343283(0x742)]();}},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x8a4)]=![],Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x636)]=function(){const _0x5eb99c=_0x57ed21;if(Imported[_0x5eb99c(0x724)]&&BattleManager[_0x5eb99c(0x6a1)]())return![];else{if('VVLeL'!==_0x5eb99c(0x358)){const _0x3f02c0=this[_0x5eb99c(0x426)]()[_0x5eb99c(0xb1c)]||'';if(_0x3f02c0[_0x5eb99c(0x463)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x341e3e=_0x5c070e['$1'][_0x5eb99c(0x4ff)](',')[_0x5eb99c(0x6d9)](_0x2983c0=>_0x328567(_0x2983c0));this['checkExtendTroopCompatibility'](),this[_0x5eb99c(0x964)](_0x341e3e);}}else{if(!VisuMZ['BattleCore'][_0x5eb99c(0x8a4)])return![];const _0x2f0e72=$gameParty['aliveMembers']()['filter'](_0x41c031=>_0x41c031[_0x5eb99c(0x8df)]()&&_0x41c031['canInput']());return _0x2f0e72[_0x5eb99c(0x98b)]>0x0&&BattleManager[_0x5eb99c(0x241)]()!==_0x2f0e72[_0x2f0e72[_0x5eb99c(0x98b)]-0x1];}}},Scene_Battle['prototype'][_0x57ed21(0x1ea)]=function(){const _0x403f4c=_0x57ed21,_0x2ee47b=BattleManager[_0x403f4c(0x241)](),_0x55f7b1=_0x2ee47b[_0x403f4c(0x595)]();if(_0x55f7b1)_0x55f7b1[_0x403f4c(0x7ce)]();const _0x71e1b0=$gameParty[_0x403f4c(0x38d)]()['filter'](_0x35d3f3=>_0x35d3f3[_0x403f4c(0x8df)]()&&_0x35d3f3[_0x403f4c(0x252)]()),_0x4c107c=_0x71e1b0[_0x403f4c(0x50e)](_0x2ee47b),_0xf822f3=_0x71e1b0[_0x4c107c+0x1];BattleManager[_0x403f4c(0x88a)]=_0xf822f3||null;if(_0xf822f3)_0xf822f3[_0x403f4c(0xb5b)]('inputting');_0x2ee47b['setActionState'](_0x403f4c(0x42f)),this[_0x403f4c(0x60f)]();},Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x742)]=function(){const _0x31cc95=_0x57ed21;this['_partyCommandWindow'][_0x31cc95(0x6c5)](),this[_0x31cc95(0xade)][_0x31cc95(0x4fa)]();if(!VisuMZ[_0x31cc95(0xfb)][_0x31cc95(0x8a4)])return;if(Imported[_0x31cc95(0x724)]&&BattleManager[_0x31cc95(0x6a1)]())return;if(BattleManager['_currentActor']){if('clHHS'!==_0x31cc95(0x452))this['targetActionSet'](_0x222aa8,_0x20a890,_0x1cc1c1);else{BattleManager['_currentActor'][_0x31cc95(0xb5b)](_0x31cc95(0x42f));const _0x42b018=BattleManager[_0x31cc95(0x88a)][_0x31cc95(0x595)]();if(_0x42b018)_0x42b018['stepBack']();}}BattleManager[_0x31cc95(0x88a)]=null;},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x9d5)]=Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0xb6b)],Scene_Battle['prototype'][_0x57ed21(0xb6b)]=function(){const _0x2dce3e=_0x57ed21;VisuMZ[_0x2dce3e(0xfb)][_0x2dce3e(0x9d5)]['call'](this),this['createHelpWindowBattleCore']();},Scene_Battle[_0x57ed21(0xb20)]['createHelpWindowBattleCore']=function(){const _0x5b8c71=_0x57ed21;this['_actorCommandWindow'][_0x5b8c71(0x1d5)](this['_helpWindow']),this['_partyCommandWindow'][_0x5b8c71(0x1d5)](this[_0x5b8c71(0x9a6)]);},Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x3f0)]=function(){const _0x3a621=_0x57ed21;if($gameTemp[_0x3a621(0x664)]!==undefined)return $gameTemp[_0x3a621(0x664)];if(this['_battleLayoutStyle'])return'FQgYm'===_0x3a621(0x2cd)?this[_0x3a621(0x768)]:!![];this[_0x3a621(0x768)]=VisuMZ[_0x3a621(0xfb)]['Settings'][_0x3a621(0x6f9)][_0x3a621(0x166)][_0x3a621(0x1b2)]()[_0x3a621(0x1f6)]();if(this[_0x3a621(0x768)]==='sideview_ui'&&!Imported[_0x3a621(0xa61)]){if(_0x3a621(0x797)==='DknIr')this[_0x3a621(0x768)]=_0x3a621(0x4bc);else{_0xddd66b=_0x3c1e19[_0x3a621(0xfb)][_0x3a621(0x99c)]['call'](this);const _0x28dbdc=_0x35be76[_0x3a621(0xfb)][_0x3a621(0x786)](this[_0x3a621(0x720)](),'Targets');return _0x497a4d=_0x5b6658['BattleCore']['JS'][_0x28dbdc][_0x3a621(0x509)](this,this[_0x3a621(0x478)](),_0x1ff3a5),this[_0x3a621(0x41a)](_0x12066f);}}return this[_0x3a621(0x768)];},VisuMZ['BattleCore'][_0x57ed21(0x5ca)]=Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x76c)],Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x76c)]=function(){const _0x5b6f27=_0x57ed21,_0x5ba047=this[_0x5b6f27(0x3f0)]();switch(_0x5ba047){case _0x5b6f27(0x2c7):return this[_0x5b6f27(0xaad)](Math[_0x5b6f27(0x952)](0x1,$gameParty[_0x5b6f27(0x988)]()),!![]);break;default:return VisuMZ[_0x5b6f27(0xfb)]['Scene_Battle_windowAreaHeight'][_0x5b6f27(0x509)](this);break;}},VisuMZ[_0x57ed21(0xfb)]['Scene_Battle_helpWindowRect']=Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x5e9)],Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x5e9)]=function(){const _0x3ec7d8=_0x57ed21,_0xd82708=this[_0x3ec7d8(0x3f0)]();switch(_0xd82708){case _0x3ec7d8(0x131):return this[_0x3ec7d8(0xbdd)]();break;case _0x3ec7d8(0x4bc):case _0x3ec7d8(0x2c7):case'xp':case'portrait':default:return VisuMZ[_0x3ec7d8(0xfb)][_0x3ec7d8(0x3ed)][_0x3ec7d8(0x509)](this);break;}},Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0xa8f)]=function(){const _0x2575e7=_0x57ed21,_0x29a807=this[_0x2575e7(0x3f0)]();switch(_0x29a807){case'xp':case _0x2575e7(0x4a2):return this[_0x2575e7(0xf0)]();break;case _0x2575e7(0x131):return this['statusWindowRectBorderStyle']();break;case _0x2575e7(0x4bc):case _0x2575e7(0x2c7):default:return this[_0x2575e7(0x67f)]();break;}},VisuMZ['BattleCore']['Scene_Battle_partyCommandWindowRect']=Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x6af)],Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x6af)]=function(){const _0x1c2fc9=_0x57ed21,_0x46df1a=this[_0x1c2fc9(0x3f0)]();switch(_0x46df1a){case'xp':case _0x1c2fc9(0x4a2):return this[_0x1c2fc9(0x842)]();break;case _0x1c2fc9(0x131):return this['partyCommandWindowRectBorderStyle']();case _0x1c2fc9(0x4bc):case _0x1c2fc9(0x2c7):default:return this['partyCommandWindowRectDefaultStyle']();break;}},Scene_Battle[_0x57ed21(0xb20)]['partyCommandWindowRectDefaultStyle']=function(){const _0x54acac=_0x57ed21,_0x37cc67=VisuMZ[_0x54acac(0xfb)]['Settings'][_0x54acac(0x6f9)],_0xd953bc=_0x37cc67[_0x54acac(0x789)]||0xc0,_0x2df3a6=this[_0x54acac(0x76c)](),_0x4a5cb7=this['isRightInputMode']()?Graphics['boxWidth']-_0xd953bc:0x0,_0x1a1da8=Graphics[_0x54acac(0xb3b)]-_0x2df3a6;return new Rectangle(_0x4a5cb7,_0x1a1da8,_0xd953bc,_0x2df3a6);},Scene_Battle[_0x57ed21(0xb20)]['actorCommandWindowRect']=function(){return this['partyCommandWindowRect']();},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x56f)]=Scene_Battle['prototype'][_0x57ed21(0x3da)],Scene_Battle['prototype'][_0x57ed21(0x3da)]=function(){const _0x223644=_0x57ed21,_0x35596d=this[_0x223644(0x3f0)]();switch(_0x35596d){case'xp':case _0x223644(0x4a2):case'border':break;case _0x223644(0x4bc):case'list':default:VisuMZ['BattleCore'][_0x223644(0x56f)][_0x223644(0x509)](this);break;}},VisuMZ['BattleCore'][_0x57ed21(0x5ce)]=Scene_Battle[_0x57ed21(0xb20)]['startActorSelection'],Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x5ee)]=function(){const _0x4200e6=_0x57ed21;VisuMZ['BattleCore'][_0x4200e6(0x5ce)][_0x4200e6(0x509)](this),this[_0x4200e6(0xb59)]();},VisuMZ[_0x57ed21(0xfb)]['Scene_Battle_startEnemySelection']=Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x6c6)],Scene_Battle[_0x57ed21(0xb20)]['startEnemySelection']=function(){const _0x1854c2=_0x57ed21;VisuMZ[_0x1854c2(0xfb)]['Scene_Battle_startEnemySelection'][_0x1854c2(0x509)](this),this[_0x1854c2(0x3c5)][_0x1854c2(0xa40)](),this[_0x1854c2(0xb59)]();},Scene_Battle[_0x57ed21(0xb20)]['makeTargetSelectionMoreVisible']=function(){const _0x2b5e62=_0x57ed21,_0x31e2d4=this[_0x2b5e62(0x3f0)]();['xp','portrait',_0x2b5e62(0x131)][_0x2b5e62(0x55d)](_0x31e2d4)&&this[_0x2b5e62(0xade)][_0x2b5e62(0x4fa)]();if(_0x31e2d4===_0x2b5e62(0x131)||this[_0x2b5e62(0x278)]()){if(_0x2b5e62(0x96b)===_0x2b5e62(0x96b))this[_0x2b5e62(0x646)][_0x2b5e62(0x4fa)](),this[_0x2b5e62(0x794)][_0x2b5e62(0x4fa)]();else{if(!_0x2a768d[_0x2b5e62(0x9d4)]())return;const _0x39574b=_0x2a6334[_0x2b5e62(0x660)](),_0x3dec08=_0x13d24b['_action'],_0x5fb03e=_0x3c9a30[_0x2b5e62(0xadd)],_0x477d1d=_0x59fc2b['_logWindow'];if(!_0x39574b||!_0x3dec08||!_0x5fb03e)return;if(!_0x3dec08['item']())return;_0x477d1d['displayAction'](_0x5fb03e,_0x3dec08[_0x2b5e62(0x720)]()),_0x39574b[_0x2b5e62(0xa92)](_0x2b5e62(0x294));}}},VisuMZ['BattleCore']['Scene_Battle_onActorOk']=Scene_Battle[_0x57ed21(0xb20)]['onActorOk'],Scene_Battle['prototype']['onActorOk']=function(){const _0xa2cb19=_0x57ed21;VisuMZ[_0xa2cb19(0xfb)][_0xa2cb19(0x6f1)]['call'](this),this[_0xa2cb19(0x359)]();},Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x336)]=function(){const _0x3a986a=_0x57ed21;return[_0x3a986a(0xaf1),'guard',_0x3a986a(0x658)]['includes'](this[_0x3a986a(0xade)][_0x3a986a(0x144)]());},VisuMZ['BattleCore'][_0x57ed21(0x587)]=Scene_Battle['prototype'][_0x57ed21(0x98c)],Scene_Battle['prototype'][_0x57ed21(0x98c)]=function(){const _0x2e0ac0=_0x57ed21;if(this[_0x2e0ac0(0x336)]())_0x2e0ac0(0xaec)!==_0x2e0ac0(0xb56)?(this[_0x2e0ac0(0x9ea)]['show'](),this['_actorWindow'][_0x2e0ac0(0x715)](),this[_0x2e0ac0(0xade)]['activate']()):(this[_0x2e0ac0(0x61b)](),_0x92958d[_0x2e0ac0(0xfb)][_0x2e0ac0(0x95e)][_0x2e0ac0(0x509)](this),this[_0x2e0ac0(0xb26)](),this[_0x2e0ac0(0xf2)]());else{if('DKNls'!=='zeCnF')VisuMZ[_0x2e0ac0(0xfb)]['Scene_Battle_onActorCancel'][_0x2e0ac0(0x509)](this);else{const _0x4d2841=this[_0x2e0ac0(0xb1c)](),_0xd393bc=this[_0x2e0ac0(0xa53)](),_0xbcf42a=this['bitmapHeight']();this[_0x2e0ac0(0x180)](),this['bitmap']['clear'](),this[_0x2e0ac0(0x10e)][_0x2e0ac0(0x5ac)](_0x4d2841,0x0,0x0,_0xd393bc,_0xbcf42a,_0x2e0ac0(0x50f));}}this[_0x2e0ac0(0x855)]();},VisuMZ[_0x57ed21(0xfb)]['Scene_Battle_onEnemyOk']=Scene_Battle['prototype'][_0x57ed21(0xb6f)],Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0xb6f)]=function(){const _0x3af709=_0x57ed21;VisuMZ[_0x3af709(0xfb)][_0x3af709(0x761)][_0x3af709(0x509)](this),this['okTargetSelectionVisibility']();},VisuMZ['BattleCore'][_0x57ed21(0x27f)]=Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x603)],Scene_Battle['prototype'][_0x57ed21(0x603)]=function(){const _0x33d012=_0x57ed21;this[_0x33d012(0x336)]()?(this[_0x33d012(0x9ea)][_0x33d012(0x5be)](),this[_0x33d012(0x3c5)][_0x33d012(0x715)](),this['_actorCommandWindow']['activate']()):VisuMZ[_0x33d012(0xfb)][_0x33d012(0x27f)][_0x33d012(0x509)](this),this[_0x33d012(0x855)]();},Scene_Battle[_0x57ed21(0xb20)]['okTargetSelectionVisibility']=function(){const _0x53c928=_0x57ed21,_0x4c405e=this[_0x53c928(0x3f0)]();if(_0x4c405e==='border'||this[_0x53c928(0x278)]()){if(_0x53c928(0x5a5)!==_0x53c928(0x3e6)){this['_skillWindow'][_0x53c928(0x1f0)]();if(this[_0x53c928(0x646)][_0x53c928(0x216)]){if(_0x53c928(0x554)===_0x53c928(0x554))this['_skillWindow'][_0x53c928(0x5be)]();else{const _0xc5f150=_0xb4b9fe(_0x53df0e['$1']);return _0xb4e776['aliveMembers']()['filter'](_0x3a9b07=>_0x3a9b07['enemyId']()===_0xc5f150);}}this[_0x53c928(0x794)][_0x53c928(0x1f0)](),this[_0x53c928(0x794)]['active']&&this[_0x53c928(0x794)][_0x53c928(0x5be)]();}else _0x440dc9[_0x53c928(0x75a)]+=_0x53c928(0x534);}},Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x855)]=function(){const _0x55f2bd=_0x57ed21,_0x839ceb=this[_0x55f2bd(0x3f0)]();['xp',_0x55f2bd(0x4a2),'border'][_0x55f2bd(0x55d)](_0x839ceb)&&this['_actorCommandWindow'][_0x55f2bd(0x1f0)](),this['okTargetSelectionVisibility']();},Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x67f)]=function(){const _0x1c65f0=_0x57ed21,_0x474dbc=VisuMZ['BattleCore'][_0x1c65f0(0x8d3)]['BattleLayout'],_0xb7039a=Window_BattleStatus[_0x1c65f0(0xb20)][_0x1c65f0(0xb37)](),_0x556c10=Graphics[_0x1c65f0(0x667)]-(_0x474dbc[_0x1c65f0(0x789)]||0xc0),_0x3d68fe=this[_0x1c65f0(0x76c)]()+_0xb7039a,_0x426fcb=this[_0x1c65f0(0x825)]()?0x0:Graphics[_0x1c65f0(0x667)]-_0x556c10,_0x344e49=Graphics[_0x1c65f0(0xb3b)]-_0x3d68fe+_0xb7039a;return new Rectangle(_0x426fcb,_0x344e49,_0x556c10,_0x3d68fe);},Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0xf0)]=function(){const _0x3f6831=_0x57ed21,_0x1343e9=Window_BattleStatus[_0x3f6831(0xb20)]['extraHeight'](),_0x5a4b28=Graphics['boxWidth'],_0x3d13e6=this[_0x3f6831(0x76c)]()+_0x1343e9,_0x2c124b=0x0,_0x23ca77=Graphics[_0x3f6831(0xb3b)]-_0x3d13e6+_0x1343e9;return new Rectangle(_0x2c124b,_0x23ca77,_0x5a4b28,_0x3d13e6);},Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x842)]=function(){const _0x374751=_0x57ed21,_0x3ea432=Graphics[_0x374751(0x667)]/0x2,_0x26fd31=this[_0x374751(0xaad)](VisuMZ[_0x374751(0xfb)][_0x374751(0x8d3)][_0x374751(0x6f9)][_0x374751(0xb05)],!![]),_0x4fc512=Math['round']((Graphics[_0x374751(0x667)]-_0x3ea432)/0x2),_0x33e51e=Graphics[_0x374751(0xb3b)]-_0x26fd31-this[_0x374751(0xf0)]()[_0x374751(0x8b2)];return new Rectangle(_0x4fc512,_0x33e51e,_0x3ea432,_0x26fd31);},Scene_Battle[_0x57ed21(0xb20)]['helpWindowRectBorderStyle']=function(){const _0x275ab7=_0x57ed21,_0x26de87=Graphics[_0x275ab7(0x6c1)],_0x53e4a0=Math[_0x275ab7(0x413)]((Graphics[_0x275ab7(0x667)]-_0x26de87)/0x2),_0x46274b=this[_0x275ab7(0x1a5)](),_0xb3e6e8=(Graphics[_0x275ab7(0x8b2)]-Graphics[_0x275ab7(0xb3b)])/-0x2;return new Rectangle(_0x53e4a0,_0xb3e6e8,_0x26de87,_0x46274b);},Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x89d)]=function(){const _0x13cba9=_0x57ed21,_0x1e2c6e=Graphics[_0x13cba9(0x6c1)],_0x1dc8b4=Math[_0x13cba9(0x413)]((Graphics[_0x13cba9(0x667)]-_0x1e2c6e)/0x2),_0xa5a6e6=this[_0x13cba9(0xaad)](0x4,!![]),_0x8c6046=Graphics['boxHeight']-_0xa5a6e6+(Graphics[_0x13cba9(0x8b2)]-Graphics['boxHeight'])/0x2;return new Rectangle(_0x1dc8b4,_0x8c6046,_0x1e2c6e,_0xa5a6e6);},Scene_Battle['prototype']['partyCommandWindowRectBorderStyle']=function(){const _0x4b1c9e=_0x57ed21,_0x13dad7=Math['floor'](Graphics[_0x4b1c9e(0x6c1)]/0x3),_0x237287=this['isRightInputMode']()?(Graphics[_0x4b1c9e(0x6c1)]+Graphics[_0x4b1c9e(0x667)])/0x2-_0x13dad7:(Graphics['width']-Graphics[_0x4b1c9e(0x667)])/-0x2,_0x13e575=this[_0x4b1c9e(0xbdd)](),_0x4f4a7a=_0x13e575['y']+_0x13e575[_0x4b1c9e(0x8b2)],_0x2aae4f=this['statusWindowRectBorderStyle'](),_0x2d6081=_0x2aae4f['y']-_0x4f4a7a;return new Rectangle(_0x237287,_0x4f4a7a,_0x13dad7,_0x2d6081);},Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0xbc7)]=function(){const _0x422b16=_0x57ed21,_0x310019=Math['ceil'](Graphics[_0x422b16(0x6c1)]/0x3),_0x143ccd=Math['round']((Graphics[_0x422b16(0x667)]-_0x310019)/0x2),_0x29088c=this[_0x422b16(0x2ef)](),_0x2e6b11=_0x29088c['y'],_0x37618a=_0x29088c[_0x422b16(0x8b2)];return new Rectangle(_0x143ccd,_0x2e6b11,_0x310019,_0x37618a);},Scene_Battle['prototype'][_0x57ed21(0x576)]=function(){const _0x2a9fd5=_0x57ed21;this[_0x2a9fd5(0xa10)]['y']=this[_0x2a9fd5(0x9a6)]['y']+this['_helpWindow'][_0x2a9fd5(0x8b2)];if(this['isRightInputMode']()){if(this['battleLayoutStyle']()===_0x2a9fd5(0x131))this['_cancelButton']['x']=0x8;else{if(_0x2a9fd5(0x5d6)===_0x2a9fd5(0x5d6))this['_cancelButton']['x']=-this[_0x2a9fd5(0xa10)]['width']-0x4;else{const _0x450b5e=_0x35be49[_0x2a9fd5(0x7c3)][0x0];if(_0x450b5e[_0x2a9fd5(0x463)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}}else _0x2a9fd5(0x20a)!==_0x2a9fd5(0x20a)?_0x1e841c[_0x2a9fd5(0x402)]():this['_cancelButton']['x']=Graphics[_0x2a9fd5(0x6c1)]-(Graphics[_0x2a9fd5(0x6c1)]-Graphics[_0x2a9fd5(0x667)])/0x2-this[_0x2a9fd5(0xa10)][_0x2a9fd5(0x6c1)]-0x4;},VisuMZ['BattleCore']['Scene_Battle_skillWindowRect']=Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x247)],Scene_Battle[_0x57ed21(0xb20)]['skillWindowRect']=function(){const _0x4c8007=_0x57ed21;if(this[_0x4c8007(0x3f0)]()===_0x4c8007(0x131)){if('UulQd'!==_0x4c8007(0x9f4))_0x41407d[_0x4c8007(0xa1f)](0x0,0x0,_0x5b738d[_0x4c8007(0x69d)],_0x81907[_0x4c8007(0x670)]);else return this[_0x4c8007(0xbc7)]();}else{if(this[_0x4c8007(0x278)]()){if(_0x4c8007(0xa4f)===_0x4c8007(0xa4f))return this[_0x4c8007(0x689)]();else _0x1d9fd0[_0x4c8007(0xfb)][_0x4c8007(0x648)][_0x4c8007(0x509)](this);}else return _0x4c8007(0x745)!==_0x4c8007(0x745)?this[_0x4c8007(0x860)]()?this[_0x4c8007(0x7aa)][_0x4c8007(0x8f2)]():!![]:VisuMZ['BattleCore'][_0x4c8007(0x30f)][_0x4c8007(0x509)](this);}},VisuMZ[_0x57ed21(0xfb)]['Scene_Battle_itemWindowRect']=Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x967)],Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x967)]=function(){const _0x124238=_0x57ed21;if(this[_0x124238(0x3f0)]()===_0x124238(0x131))return this[_0x124238(0xbc7)]();else{if(this[_0x124238(0x278)]()){if(_0x124238(0x130)!==_0x124238(0x516))return this['skillItemWindowRectMiddle']();else this[_0x124238(0xad7)]=!![];}else return VisuMZ[_0x124238(0xfb)][_0x124238(0x948)][_0x124238(0x509)](this);}},Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x278)]=function(){const _0x1ea436=_0x57ed21;return VisuMZ[_0x1ea436(0xfb)][_0x1ea436(0x8d3)][_0x1ea436(0x6f9)][_0x1ea436(0x614)];},Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x689)]=function(){const _0x3031a0=_0x57ed21,_0x5c1d2d=Sprite_Button[_0x3031a0(0xb20)][_0x3031a0(0x436)]()*0x2+0x4;let _0x13682b=Graphics[_0x3031a0(0x667)]-_0x5c1d2d;if(Imported['VisuMZ_0_CoreEngine']&&SceneManager[_0x3031a0(0x5fb)]()){if(_0x3031a0(0xb7c)===_0x3031a0(0xb7c))_0x13682b+=_0x5c1d2d;else{const _0x146e21=this[_0x3031a0(0x31d)]();this[_0x3031a0(0x18b)]=![],_0x146e21&&this[_0x3031a0(0x668)]&&this[_0x3031a0(0x4d4)](),this[_0x3031a0(0x668)]=![],this['refresh'](),this[_0x3031a0(0xba1)]()&&_0x146e21&&(this['performCollapse'](),this[_0x3031a0(0xb23)]());}}const _0xf89ab=this['helpAreaBottom'](),_0x3f1dca=Graphics['boxHeight']-_0xf89ab-this[_0x3031a0(0xa8f)]()[_0x3031a0(0x8b2)]+Window_BattleStatus[_0x3031a0(0xb20)]['extraHeight'](),_0x13ea9e=0x0;return new Rectangle(_0x13ea9e,_0xf89ab,_0x13682b,_0x3f1dca);},Scene_Battle[_0x57ed21(0xb20)][_0x57ed21(0x9d1)]=function(){const _0xfb2306=_0x57ed21;if(!VisuMZ['BattleCore'][_0xfb2306(0x8d3)]['Enemy'][_0xfb2306(0x50a)])return;this[_0xfb2306(0xb50)]=new Sprite(),this[_0xfb2306(0xb50)]['x']=this[_0xfb2306(0x4a3)]['x'],this[_0xfb2306(0xb50)]['y']=this[_0xfb2306(0x4a3)]['y'];const _0x728bb=this['children'][_0xfb2306(0x50e)](this[_0xfb2306(0x4a3)]);this[_0xfb2306(0x865)](this[_0xfb2306(0xb50)],_0x728bb);for(let _0x52c1f3=0x0;_0x52c1f3<0x8;_0x52c1f3++){const _0x2294ab=new Window_EnemyName(_0x52c1f3);this[_0xfb2306(0xb50)][_0xfb2306(0x1cc)](_0x2294ab);}},Sprite_Battler[_0x57ed21(0x585)]=VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x8d3)][_0x57ed21(0x929)]['MotionSpeed'],VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x80d)]=Sprite_Battler['prototype'][_0x57ed21(0xba5)],Sprite_Battler[_0x57ed21(0xb20)]['initMembers']=function(){const _0x3b7e47=_0x57ed21;VisuMZ[_0x3b7e47(0xfb)][_0x3b7e47(0x80d)][_0x3b7e47(0x509)](this),this['initMembersBattleCore']();if(this[_0x3b7e47(0x7fb)]===Sprite_Enemy)this['createShadowSprite']();this['createDistortionSprite']();},Sprite_Battler['prototype'][_0x57ed21(0xaf6)]=function(){const _0x17d49c=_0x57ed21;this[_0x17d49c(0xa30)]=0x0,this[_0x17d49c(0x656)]=0x0,this[_0x17d49c(0x68a)]=0x0,this[_0x17d49c(0x1da)]=0x0,this[_0x17d49c(0x7ca)]=0x0,this['_floatWholeDuration']=0x0,this['_floatEasing']=_0x17d49c(0x315),this['_jumpHeight']=0x0,this[_0x17d49c(0x604)]=0x0,this['_jumpDuration']=0x0,this[_0x17d49c(0x32b)]=0x0,this[_0x17d49c(0x89b)]=0xff,this['_opacityDuration']=0x0,this[_0x17d49c(0x836)]=0x0,this[_0x17d49c(0x524)]=_0x17d49c(0x315),this[_0x17d49c(0xb25)]=0x0,this['_targetAngle']=0x0,this['_angleDuration']=0x0,this[_0x17d49c(0xb7e)]=0x0,this['_angleEasing']='Linear',this['_angleRevertOnFinish']=!![],this[_0x17d49c(0x1e9)]=0x0,this['_skewY']=0x0,this[_0x17d49c(0x9c3)]=0x0,this[_0x17d49c(0x7b6)]=0x0,this[_0x17d49c(0x7e5)]=0x0,this['_skewWholeDuration']=0x0,this[_0x17d49c(0x5fc)]='Linear',this[_0x17d49c(0x3d5)]=0x1,this[_0x17d49c(0x65c)]=0x1,this[_0x17d49c(0x5bc)]=0x1,this[_0x17d49c(0x45a)]=0x1,this[_0x17d49c(0x6d4)]=0x0,this['_growWholeDuration']=0x0,this[_0x17d49c(0x94b)]=_0x17d49c(0x315),this[_0x17d49c(0x10d)]=0x1,this[_0x17d49c(0x9d7)]=0x0,this[_0x17d49c(0xab7)]=0x0,this[_0x17d49c(0x14b)]=0x0,this[_0x17d49c(0x6d6)]=0x0,this[_0x17d49c(0x136)]='Linear';},Sprite_Battler['prototype'][_0x57ed21(0x2e2)]=function(){const _0x23377f=_0x57ed21;this[_0x23377f(0x4e6)]=new Sprite(),this[_0x23377f(0x4e6)][_0x23377f(0x10e)]=ImageManager['loadSystem'](_0x23377f(0x3aa)),this[_0x23377f(0x4e6)]['bitmap'][_0x23377f(0x22e)]=VisuMZ[_0x23377f(0xfb)][_0x23377f(0x8d3)][_0x23377f(0x929)][_0x23377f(0x31a)],this[_0x23377f(0x4e6)][_0x23377f(0xab6)]['x']=0.5,this['_shadowSprite'][_0x23377f(0xab6)]['y']=0.5,this[_0x23377f(0x4e6)]['y']=-0x2,this[_0x23377f(0x4e6)]['visible']=![],this[_0x23377f(0x1cc)](this[_0x23377f(0x4e6)]);},Sprite_Battler[_0x57ed21(0xb20)]['createDistortionSprite']=function(){const _0x322c91=_0x57ed21;this[_0x322c91(0xbb7)]=new Sprite(),this[_0x322c91(0xbb7)][_0x322c91(0xab6)]['x']=0.5,this[_0x322c91(0xbb7)]['anchor']['y']=0.5,this[_0x322c91(0x1cc)](this[_0x322c91(0xbb7)]);},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x73f)]=function(){const _0x2b0427=_0x57ed21;if(!this[_0x2b0427(0xbb7)])return;if(this[_0x2b0427(0x4e6)]){const _0x2a1644=this['getChildIndex'](this[_0x2b0427(0xbb7)]);this[_0x2b0427(0x865)](this[_0x2b0427(0x4e6)],_0x2a1644),this['updateShadowVisibility']();}this[_0x2b0427(0x28c)]&&(_0x2b0427(0x29b)==='izyXd'?(_0x55490b['clearForcedGameTroopSettingsBattleCore'](),_0x24ef48['applyForcedGameTroopSettingsBattleCore'](_0x4007ed),_0x190dfb['BattleCore'][_0x2b0427(0x271)][_0x2b0427(0x509)](this,_0x2e28b4),this[_0x2b0427(0x5da)]()):this['_distortionSprite'][_0x2b0427(0x1cc)](this['_svBattlerSprite']));this[_0x2b0427(0xaf8)]&&this[_0x2b0427(0xbb7)][_0x2b0427(0x1cc)](this['_weaponSprite']);this[_0x2b0427(0x254)]&&this['_distortionSprite']['addChild'](this[_0x2b0427(0x254)]);if(this[_0x2b0427(0x3c8)]){if(_0x2b0427(0x1a6)===_0x2b0427(0x7c9)){if(_0x2566d1['isSceneBattle']()){const _0x7bf9e3=this[_0x2b0427(0x4e8)]();this['startWeaponAnimation'](_0x7bf9e3);}}else this['_distortionSprite'][_0x2b0427(0x1cc)](this[_0x2b0427(0x3c8)]);}this[_0x2b0427(0x76b)]&&('JnoKi'!=='raiWA'?this[_0x2b0427(0xbb7)][_0x2b0427(0x1cc)](this[_0x2b0427(0x76b)]):_0x501cf9[_0x2b0427(0xfb)][_0x2b0427(0xbbb)][_0x2b0427(0x509)](this,_0xc6a9bd));},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x484)]=function(){const _0x26dce9=_0x57ed21;if(!this[_0x26dce9(0x4e6)])return;if(this['_battler']&&this[_0x26dce9(0x635)][_0x26dce9(0x827)]()){if(_0x26dce9(0x56b)===_0x26dce9(0x56b)){const _0x428cfd=this[_0x26dce9(0x4e6)][_0x26dce9(0x10e)];this[_0x26dce9(0x4e6)][_0x26dce9(0x6c3)](0x0,0x0,_0x428cfd[_0x26dce9(0x6c1)],_0x428cfd[_0x26dce9(0x8b2)]);}else return this[_0x26dce9(0x16b)]();}else this[_0x26dce9(0x4e6)][_0x26dce9(0x6c3)](0x0,0x0,0x0,0x0);},Sprite_Battler['prototype']['damageContainer']=function(){const _0x252fbd=_0x57ed21;return SceneManager[_0x252fbd(0x9d4)]()?SceneManager[_0x252fbd(0x34f)]['_spriteset'][_0x252fbd(0xbe7)]:_0x252fbd(0x9d0)==='sxAKt'?this[_0x252fbd(0x2b6)]:_0x1d9acc[_0x252fbd(0xfb)]['Settings'][_0x252fbd(0x5c6)][_0x252fbd(0x75b)];},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x885)]=function(_0x3a137e,_0x38384d){const _0x3377d4=_0x57ed21;if(!this['_battler'][_0x3377d4(0x87e)]())return;const _0x1436b9=VisuMZ[_0x3377d4(0xfb)][_0x3377d4(0x8d3)][_0x3377d4(0x328)],_0x2c4a70=new Sprite_Damage();_0x2c4a70[_0x3377d4(0xb48)]=_0x1436b9[_0x3377d4(0x3eb)],this[_0x3377d4(0x248)](_0x2c4a70),_0x2c4a70[_0x3377d4(0x885)](_0x3a137e,_0x38384d),this[_0x3377d4(0x8f3)](_0x2c4a70);},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x281)]=function(_0x19e7ee,_0x45ac43,_0x5515b7){const _0x57ae1c=_0x57ed21;if(!this[_0x57ae1c(0x635)][_0x57ae1c(0x87e)]())return;const _0xb6c395=VisuMZ[_0x57ae1c(0xfb)][_0x57ae1c(0x8d3)]['Damage'],_0x757692=new Sprite_Damage();_0x757692[_0x57ae1c(0xb48)]=_0xb6c395['PopupDuration'],this[_0x57ae1c(0x248)](_0x757692),_0x757692[_0x57ae1c(0x281)](_0x19e7ee,_0x45ac43,_0x5515b7),this[_0x57ae1c(0x8f3)](_0x757692);},Sprite_Battler['prototype']['setupDamagePopup']=function(){const _0x54176f=_0x57ed21;if(!this[_0x54176f(0x635)][_0x54176f(0xba3)]())return;while(this[_0x54176f(0x635)]['isDamagePopupRequested']()){this[_0x54176f(0x635)][_0x54176f(0x87e)]()&&this[_0x54176f(0x2ff)]();}this[_0x54176f(0x635)][_0x54176f(0xb93)](),this[_0x54176f(0x635)][_0x54176f(0x52c)]();},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x2ff)]=function(){const _0x35b673=_0x57ed21,_0x5b508f=VisuMZ[_0x35b673(0xfb)][_0x35b673(0x8d3)]['Damage'],_0x4defac=new Sprite_Damage();_0x4defac[_0x35b673(0xb48)]=_0x5b508f[_0x35b673(0x3eb)],this[_0x35b673(0x248)](_0x4defac),_0x4defac[_0x35b673(0x6c5)](this['_battler']),_0x4defac[_0x35b673(0xa72)](this['_battler']),this['addDamageSprite'](_0x4defac);},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x8f3)]=function(_0x2202c4){const _0x52f01c=_0x57ed21;this[_0x52f01c(0x7a8)][_0x52f01c(0x46e)](_0x2202c4);if(this['isShownOnBattlePortrait']()){const _0x14bbf7=SceneManager[_0x52f01c(0x34f)][_0x52f01c(0x9ea)];if(_0x14bbf7)_0x14bbf7[_0x52f01c(0x8f3)](_0x2202c4,this['_battler']);}else{this[_0x52f01c(0x37f)]()[_0x52f01c(0x1cc)](_0x2202c4);if(SceneManager[_0x52f01c(0x8d0)]())_0x2202c4[_0x52f01c(0x19e)]['x']=-0x1;}},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x5cf)]=function(){const _0x2b6b20=_0x57ed21;return!$gameSystem[_0x2b6b20(0x119)]()&&this[_0x2b6b20(0x635)]&&this[_0x2b6b20(0x635)]['isActor']();},Sprite_Battler[_0x57ed21(0xb20)]['sortDamageSprites']=function(_0xff22eb){const _0x40af8d=_0x57ed21;this[_0x40af8d(0x63b)](_0xff22eb,!![]);const _0x50fdf3=VisuMZ[_0x40af8d(0xfb)][_0x40af8d(0x8d3)][_0x40af8d(0x328)],_0x7a9c2d=SceneManager[_0x40af8d(0x8d0)]()?-0x1:0x1;if(_0x50fdf3[_0x40af8d(0x1bd)]){if(_0x40af8d(0x2aa)!==_0x40af8d(0x7a7))for(const _0x30035c of this[_0x40af8d(0x7a8)]){_0x30035c['x']+=_0x50fdf3[_0x40af8d(0xa08)]*_0x7a9c2d,_0x30035c['y']+=_0x50fdf3[_0x40af8d(0x7f6)];}else{if(!this[_0x40af8d(0xab8)])this[_0x40af8d(0xb93)]();return this[_0x40af8d(0xab8)][_0x40af8d(0x98b)]>0x0;}}else{const _0x3f20be=this[_0x40af8d(0x7a8)][this[_0x40af8d(0x7a8)][_0x40af8d(0x98b)]-0x1];if(_0x3f20be){if(_0x40af8d(0x9c0)===_0x40af8d(0x9c0))_0xff22eb['x']=_0x3f20be['x']+_0x50fdf3[_0x40af8d(0xa08)]*_0x7a9c2d,_0xff22eb['y']=_0x3f20be['y']+_0x50fdf3['PopupShiftY'];else{const _0x224b4f=this[_0x40af8d(0x143)](_0xd3862a),_0x47ef31=this['textSizeEx'](_0xb57c90)['width'];return _0x47ef31<=_0x224b4f[_0x40af8d(0x6c1)]?'iconText':_0x40af8d(0xa9d);}}}},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x63b)]=function(_0x3c4be5,_0x57a941){const _0x5da68d=_0x57ed21,_0x459560=SceneManager[_0x5da68d(0x8d0)]()?-0x1:0x1;let _0xedf692=this[_0x5da68d(0xa30)];_0xedf692+=this[_0x5da68d(0x26b)]();let _0x1a913c=this[_0x5da68d(0x656)];const _0x3a6ff6=this[_0x5da68d(0xbb7)][_0x5da68d(0x19e)]['y'];_0x1a913c+=this[_0x5da68d(0xb95)]();const _0x54b4e4=SceneManager[_0x5da68d(0x34f)][_0x5da68d(0x9ea)];if(_0x54b4e4&&this[_0x5da68d(0x2b6)]===_0x54b4e4){_0xedf692+=_0x54b4e4['x']-this[_0x5da68d(0x815)]();const _0x4fcac8=_0x54b4e4[_0x5da68d(0x134)]()*0x3/0x4;_0x1a913c=_0x54b4e4['y']+_0x4fcac8,_0x1a913c=Math['min'](_0x1a913c,_0x54b4e4['y']+this['y']-this['height']+_0x4fcac8);}_0x3c4be5['x']=Math[_0x5da68d(0x413)](_0xedf692+this[_0x5da68d(0x815)]()*_0x459560),_0x3c4be5['y']=Math[_0x5da68d(0x413)](_0x1a913c+this[_0x5da68d(0xb53)]());},VisuMZ['BattleCore'][_0x57ed21(0x4a5)]=Sprite_Battler[_0x57ed21(0xb20)]['damageOffsetX'],Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x815)]=function(){const _0x44b391=_0x57ed21;let _0x113987=VisuMZ[_0x44b391(0xfb)][_0x44b391(0x4a5)][_0x44b391(0x509)](this),_0xdbb64e=VisuMZ['BattleCore'][_0x44b391(0x8d3)][_0x44b391(0x328)][_0x44b391(0xa83)]||0x0;return Math[_0x44b391(0x413)](_0x113987+_0xdbb64e);},VisuMZ['BattleCore'][_0x57ed21(0x375)]=Sprite_Battler['prototype'][_0x57ed21(0xb53)],Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0xb53)]=function(){const _0x44231c=_0x57ed21;let _0x309752=VisuMZ[_0x44231c(0xfb)][_0x44231c(0x375)][_0x44231c(0x509)](this);switch(VisuMZ[_0x44231c(0xfb)]['Settings'][_0x44231c(0x328)][_0x44231c(0x800)]){case _0x44231c(0x472):_0x309752-=this[_0x44231c(0x8b2)]*this[_0x44231c(0x19e)]['y'];break;case _0x44231c(0x415):_0x309752-=this['height']*this['scale']['y']*0.5;break;}let _0xf4dd16=VisuMZ['BattleCore'][_0x44231c(0x8d3)][_0x44231c(0x328)][_0x44231c(0x7da)]||0x0;return Math['round'](_0x309752+_0xf4dd16);},Sprite_Actor[_0x57ed21(0xb20)][_0x57ed21(0x815)]=function(){const _0x501caf=_0x57ed21;return Sprite_Battler[_0x501caf(0xb20)][_0x501caf(0x815)]['call'](this);},Sprite_Actor['prototype']['damageOffsetY']=function(){const _0x4419da=_0x57ed21;return Sprite_Battler[_0x4419da(0xb20)][_0x4419da(0xb53)][_0x4419da(0x509)](this);},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x669)]=function(_0xcfd53d){const _0x498f26=_0x57ed21;if(this[_0x498f26(0x5cf)]())SceneManager[_0x498f26(0x34f)][_0x498f26(0x9ea)][_0x498f26(0x5ad)](_0xcfd53d);else{if(_0x498f26(0x303)==='AiZST')return _0x3542ba[_0x498f26(0x7bc)];else this[_0x498f26(0x37f)]()[_0x498f26(0x2b5)](_0xcfd53d),this['_damages'][_0x498f26(0x29d)](_0xcfd53d),_0xcfd53d[_0x498f26(0x73e)]();}},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x59f)]=Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0xb3c)],Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0xb3c)]=function(_0x5924e2,_0x3352c1){const _0x9d092f=_0x57ed21,_0x20609d=VisuMZ['BattleCore'][_0x9d092f(0x8d3)];if(this[_0x9d092f(0x7fb)]===Sprite_Actor)_0x5924e2+=_0x20609d['Actor'][_0x9d092f(0x299)]||0x0,_0x3352c1+=_0x20609d[_0x9d092f(0x929)][_0x9d092f(0xbda)]||0x0;else this[_0x9d092f(0x7fb)]===Sprite_Enemy&&(_0x9d092f(0x4ad)!=='rasvn'?(_0x4916fc['actor']()[_0x9d092f(0x385)](),_0x38e2e2['finishActorInput'](),_0x366f46['selectNextActor'](),this[_0x9d092f(0x60f)]()):(_0x5924e2+=_0x20609d[_0x9d092f(0x313)][_0x9d092f(0x299)]||0x0,_0x3352c1+=_0x20609d[_0x9d092f(0x313)]['OffsetY']||0x0));this[_0x9d092f(0x635)]&&(_0x5924e2=this[_0x9d092f(0x635)][_0x9d092f(0xac2)]??_0x5924e2,_0x3352c1=this['_battler'][_0x9d092f(0xb5e)]??_0x3352c1),VisuMZ[_0x9d092f(0xfb)][_0x9d092f(0x59f)][_0x9d092f(0x509)](this,_0x5924e2,_0x3352c1),this[_0x9d092f(0x9d7)]=this[_0x9d092f(0x57c)],this[_0x9d092f(0xab7)]=this[_0x9d092f(0x214)],this[_0x9d092f(0x14b)]=0x0,this['_homeWholeDuration']=0x0,this[_0x9d092f(0x136)]=_0x9d092f(0x315);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x9a2)]=Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x402)],Sprite_Battler['prototype'][_0x57ed21(0x402)]=function(){const _0x5b76c6=_0x57ed21;VisuMZ['BattleCore'][_0x5b76c6(0x9a2)][_0x5b76c6(0x509)](this),!this['_battler']&&this[_0x5b76c6(0x20f)]&&(this['_hpGaugeSprite'][_0x5b76c6(0x2d6)]=![]);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x159)]=Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x30d)],Sprite_Battler[_0x57ed21(0xb20)]['updateMain']=function(){const _0x39f9ae=_0x57ed21;this['updateScale'](),this['updateSkew'](),this[_0x39f9ae(0xa52)](),this[_0x39f9ae(0x188)](),VisuMZ['BattleCore']['Sprite_Battler_updateMain'][_0x39f9ae(0x509)](this),this['updateHpGaugePosition']();if(this[_0x39f9ae(0x7fb)]===Sprite_Enemy)this[_0x39f9ae(0x419)]();},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x95e)]=Sprite_Battler['prototype']['updatePosition'],Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0xad6)]=function(){const _0x4ae6eb=_0x57ed21;this[_0x4ae6eb(0x61b)](),VisuMZ[_0x4ae6eb(0xfb)][_0x4ae6eb(0x95e)][_0x4ae6eb(0x509)](this),this[_0x4ae6eb(0xb26)](),this[_0x4ae6eb(0xf2)]();},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x872)]=function(_0x4a9bca,_0x46df38,_0x179d16,_0x134bf3){const _0x18f1b7=_0x57ed21;(this[_0x18f1b7(0x9d7)]!==_0x4a9bca||this[_0x18f1b7(0xab7)]!==_0x46df38)&&(this[_0x18f1b7(0x9d7)]=_0x4a9bca,this[_0x18f1b7(0xab7)]=_0x46df38,this[_0x18f1b7(0x14b)]=_0x179d16,this[_0x18f1b7(0x6d6)]=_0x179d16,this['_homeEasing']=_0x134bf3,_0x179d16<=0x0&&this[_0x18f1b7(0x8e1)]());},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x61b)]=function(){const _0x193493=_0x57ed21;if(this[_0x193493(0x14b)]<=0x0)return;const _0x1cca34=this[_0x193493(0x14b)],_0x2356fc=this[_0x193493(0x6d6)],_0x3dd749=this[_0x193493(0x136)];Imported[_0x193493(0x849)]?(this[_0x193493(0x57c)]=this[_0x193493(0x7b9)](this['_homeX'],this['_targetHomeX'],_0x1cca34,_0x2356fc,_0x3dd749),this[_0x193493(0x214)]=this[_0x193493(0x7b9)](this['_homeY'],this[_0x193493(0xab7)],_0x1cca34,_0x2356fc,_0x3dd749)):_0x193493(0x496)!==_0x193493(0x496)?this[_0x193493(0x595)]()[_0x193493(0x5c7)]():(this[_0x193493(0x57c)]=(this['_homeX']*(_0x1cca34-0x1)+this[_0x193493(0x9d7)])/_0x1cca34,this['_homeY']=(this[_0x193493(0x214)]*(_0x1cca34-0x1)+this[_0x193493(0xab7)])/_0x1cca34);this[_0x193493(0x14b)]--;if(this[_0x193493(0x14b)]<=0x0)this[_0x193493(0x8e1)]();},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x8e1)]=function(){const _0x79473=_0x57ed21;this['_homeX']=this[_0x79473(0x9d7)],this[_0x79473(0x214)]=this[_0x79473(0xab7)];},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0xb26)]=function(){const _0x4154ca=_0x57ed21;this[_0x4154ca(0xa30)]=this['x'],this[_0x4154ca(0x656)]=this['y'],this[_0x4154ca(0xb82)](),this[_0x4154ca(0x91a)](),this['x']+=this[_0x4154ca(0x26b)](),this['y']+=this[_0x4154ca(0xb95)](),this['y']+=this[_0x4154ca(0x717)](),this['x']=Math[_0x4154ca(0x4eb)](this['x']),this['y']=Math[_0x4154ca(0x4eb)](this['y']);},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x26b)]=function(){let _0x3aec0f=0x0;return _0x3aec0f;},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0xb95)]=function(){const _0x3d58dd=_0x57ed21;let _0x462231=0x0;return this['_battler']&&!this[_0x3d58dd(0x635)]['isBattlerGrounded']()&&(_0x3d58dd(0x499)===_0x3d58dd(0x499)?(_0x462231-=this[_0x3d58dd(0x68a)],_0x462231-=this[_0x3d58dd(0x356)]):_0xbd4065[_0x3d58dd(0x43d)][_0x3d58dd(0x67a)]=!![]),_0x462231;},Sprite_Battler[_0x57ed21(0xb20)]['extraPositionScaledY']=function(){const _0x4f8efc=_0x57ed21;let _0x5dff73=0x0;if(this[_0x4f8efc(0xbb7)]&&this[_0x4f8efc(0x7fb)]!==Sprite_SvEnemy){if(_0x4f8efc(0x3ef)==='UmMQI'){const _0x13523c=this['createChildSprite'](_0x324a6e,_0x5852e4);_0x13523c['bitmap'][_0x4f8efc(0x5f1)](_0xd5631c[_0x501ce8],0x0,0x0,_0x57d7a7,_0x1e833a,'center'),_0x13523c['x']=(_0x95a7e-(_0x275480[_0x4f8efc(0x98b)]-0x1)/0x2)*_0x3b86da,_0x13523c['dy']=-_0x5946eb;}else{const _0x3769cc=this[_0x4f8efc(0xbb7)][_0x4f8efc(0x19e)]['y'];_0x5dff73-=(_0x3769cc-0x1)*this[_0x4f8efc(0x8b2)];}}return _0x5dff73;},Sprite_Battler[_0x57ed21(0xb20)]['updateFlip']=function(){const _0x529e7f=_0x57ed21,_0x357e48=this[_0x529e7f(0x635)]&&this[_0x529e7f(0x635)][_0x529e7f(0x913)]();this[_0x529e7f(0x10d)]=(_0x357e48?-0x1:0x1)*Math[_0x529e7f(0x802)](this['scale']['x']);},Sprite_Battler['prototype'][_0x57ed21(0x8c4)]=function(_0xc8ec66,_0x39c324,_0x52a258){const _0x4e8e87=_0x57ed21;if(!this['canMove']())return;if(this[_0x4e8e87(0x1da)]===_0xc8ec66)return;this[_0x4e8e87(0x1da)]=_0xc8ec66,this['_floatDuration']=_0x39c324,this[_0x4e8e87(0x30e)]=_0x39c324,this[_0x4e8e87(0x1ec)]=_0x52a258||_0x4e8e87(0x315);if(_0x39c324<=0x0)this[_0x4e8e87(0x68a)]=_0xc8ec66;},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0xb82)]=function(){const _0x18d79d=_0x57ed21;if(this['_floatDuration']<=0x0)return;const _0x11d8e7=this[_0x18d79d(0x7ca)],_0x544471=this[_0x18d79d(0x30e)],_0xe90c53=this[_0x18d79d(0x1ec)];if(Imported['VisuMZ_0_CoreEngine'])this[_0x18d79d(0x68a)]=this[_0x18d79d(0x7b9)](this[_0x18d79d(0x68a)],this[_0x18d79d(0x1da)],_0x11d8e7,_0x544471,_0xe90c53);else{if('dEsMm'!==_0x18d79d(0x1ac)){if(!this[_0x18d79d(0x8c5)]()&&_0x5e1c1b['_autoBattle'])return!![];return _0x13276f[_0x18d79d(0xb20)][_0x18d79d(0x468)][_0x18d79d(0x509)](this);}else this['_floatHeight']=(this[_0x18d79d(0x68a)]*(_0x11d8e7-0x1)+this['_targetFloatHeight'])/_0x11d8e7;}this[_0x18d79d(0x7ca)]--;if(this['_floatDuration']<=0x0)this[_0x18d79d(0xa73)]();},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0xa73)]=function(){const _0x113eaf=_0x57ed21;this[_0x113eaf(0x68a)]=this['_targetFloatHeight'];},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x806)]=function(){return this['_floatDuration']>0x0;},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0xa0a)]=function(_0x39c6b8,_0x352e63){const _0x16a0c7=_0x57ed21;if(!this[_0x16a0c7(0x279)]())return;if(_0x352e63<=0x0)return;this['_jumpMaxHeight']=_0x39c6b8,this[_0x16a0c7(0x4d0)]=_0x352e63,this[_0x16a0c7(0x32b)]=_0x352e63;},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x91a)]=function(){const _0x209855=_0x57ed21;if(this['_jumpDuration']<=0x0)return;const _0x20a4da=this['_jumpWholeDuration']-this[_0x209855(0x4d0)],_0x2f0dd8=this['_jumpWholeDuration']/0x2,_0x5bf8c9=this['_jumpMaxHeight'],_0x4e0688=-_0x5bf8c9/Math[_0x209855(0x57a)](_0x2f0dd8,0x2);this[_0x209855(0x356)]=_0x4e0688*Math[_0x209855(0x57a)](_0x20a4da-_0x2f0dd8,0x2)+_0x5bf8c9,this[_0x209855(0x4d0)]--;if(this['_jumpDuration']<=0x0)return this[_0x209855(0x765)]();},Sprite_Battler['prototype'][_0x57ed21(0x765)]=function(){const _0x1e86ea=_0x57ed21;this[_0x1e86ea(0x356)]=0x0;},Sprite_Battler['prototype'][_0x57ed21(0x630)]=function(){const _0xd8d29d=_0x57ed21;return this[_0xd8d29d(0x4d0)]>0x0;},Sprite_Battler[_0x57ed21(0xb20)]['startOpacity']=function(_0x313139,_0x38dea1,_0x22d294){const _0x31a887=_0x57ed21;if(this[_0x31a887(0x89b)]===_0x313139)return;this[_0x31a887(0x89b)]=_0x313139,this['_opacityDuration']=_0x38dea1,this['_opacityWholeDuration']=_0x38dea1,this[_0x31a887(0x524)]=_0x22d294||_0x31a887(0x315);if(_0x38dea1<=0x0)this[_0x31a887(0x772)]=_0x313139;},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0xf2)]=function(){const _0xe87b68=_0x57ed21;if(this[_0xe87b68(0x7fb)][_0xe87b68(0xb1c)]===_0xe87b68(0x343))return;if(this['_opacityDuration']<=0x0)return;const _0x550bd4=this[_0xe87b68(0x18e)],_0xe3315d=this[_0xe87b68(0x836)],_0x4c7a79=this[_0xe87b68(0x524)];Imported[_0xe87b68(0x849)]?_0xe87b68(0x527)===_0xe87b68(0x940)?_0x569256[_0xe87b68(0x500)](_0x1c14cc[_0xe87b68(0x1b7)],!![]):this[_0xe87b68(0x772)]=this['applyEasing'](this[_0xe87b68(0x772)],this[_0xe87b68(0x89b)],_0x550bd4,_0xe3315d,_0x4c7a79):'bozna'==='bMlcQ'?this[_0xe87b68(0x24f)]=!![]:this[_0xe87b68(0x772)]=(this[_0xe87b68(0x772)]*(_0x550bd4-0x1)+this['_targetOpacity'])/_0x550bd4;this[_0xe87b68(0x18e)]--;if(this[_0xe87b68(0x18e)]<=0x0)this[_0xe87b68(0xa7e)]();},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0xa7e)]=function(){const _0xcf6e32=_0x57ed21;this['opacity']=this[_0xcf6e32(0x89b)];},Sprite_Battler[_0x57ed21(0xb20)]['isChangingOpacity']=function(){const _0x151e37=_0x57ed21;return this[_0x151e37(0x18e)]>0x0;},Sprite_Battler[_0x57ed21(0xb20)]['updateShadow']=function(){const _0x19836a=_0x57ed21;this['_shadowSprite'][_0x19836a(0x2d6)]=this['_battler'][_0x19836a(0x860)](),this[_0x19836a(0x379)]();},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x379)]=function(){const _0x335590=_0x57ed21;if(!this[_0x335590(0x4e6)])return;this[_0x335590(0x4e6)]['y']=this[_0x335590(0x656)]-this['y']-0x2;},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x3e3)]=function(){const _0x392f55=_0x57ed21;if(!this[_0x392f55(0x635)])return;this[_0x392f55(0x339)]=this[_0x392f55(0x635)][_0x392f55(0x1c9)](),this[_0x392f55(0x4d8)]=this['_battler'][_0x392f55(0xb14)]();},Game_BattlerBase[_0x57ed21(0xb20)][_0x57ed21(0x1c9)]=function(){const _0x2e7620=_0x57ed21,_0x1ccdf9=this['isActor']()?this[_0x2e7620(0x241)]():this[_0x2e7620(0xb41)]();if(_0x1ccdf9){const _0x2c0341=_0x1ccdf9[_0x2e7620(0x75a)];if(_0x2c0341['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x2c0341[_0x2e7620(0x463)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i)){if(_0x2e7620(0x6f8)===_0x2e7620(0x6f8))return Number(RegExp['$1'])||0x0;else this[_0x2e7620(0x9e6)]=_0x2e7620(0x112);}}}return 0x1;},Game_BattlerBase[_0x57ed21(0xb20)][_0x57ed21(0xb14)]=function(){const _0x5bce57=_0x57ed21,_0x4474f2=this['isActor']()?this[_0x5bce57(0x241)]():this[_0x5bce57(0xb41)]();if(_0x4474f2){if('FuESm'!==_0x5bce57(0x558))_0x19c477[_0x5bce57(0xfb)][_0x5bce57(0x3d4)]['call'](this),this[_0x5bce57(0xab8)]=[];else{const _0x290841=_0x4474f2[_0x5bce57(0x75a)];if(_0x290841[_0x5bce57(0x463)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x290841['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}}return 0x1;},Sprite_Battler['prototype'][_0x57ed21(0x1f5)]=function(){const _0x50156a=_0x57ed21;if(this[_0x50156a(0x7fb)]===Sprite_SvEnemy)return;this['updateGrow'](),this['finalizeScale']();},Sprite_Battler['prototype'][_0x57ed21(0x9b6)]=function(){const _0x19d4ff=_0x57ed21,_0x3664ea=this[_0x19d4ff(0xbb7)];_0x3664ea&&(_0x3664ea[_0x19d4ff(0x19e)]['x']=this[_0x19d4ff(0x2b0)](),_0x3664ea[_0x19d4ff(0x19e)]['y']=this[_0x19d4ff(0x965)]());},Sprite_Battler['prototype'][_0x57ed21(0x2b0)]=function(){const _0x5d4331=_0x57ed21;let _0x238fe1=0x1;return _0x238fe1*=this[_0x5d4331(0x10d)],_0x238fe1*=this['_growX'],_0x238fe1;},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x965)]=function(){return 0x1*this['_growY'];},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x3c6)]=function(){const _0x4db07d=_0x57ed21;return this[_0x4db07d(0x6c1)]*this[_0x4db07d(0x2b0)]();},Sprite_Battler['prototype'][_0x57ed21(0xa49)]=function(){const _0x37b7f1=_0x57ed21;return this['height']*this[_0x37b7f1(0x965)]();},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x8e6)]=function(_0x2f78c4,_0x4ff8ae,_0xb0bd18,_0x530e26){const _0x3955cb=_0x57ed21;if(!this[_0x3955cb(0x279)]())return;if(!this[_0x3955cb(0xbb7)])return;if(this[_0x3955cb(0x5bc)]===_0x2f78c4&&this[_0x3955cb(0x45a)]===_0x4ff8ae)return;this['_targetGrowX']=_0x2f78c4,this[_0x3955cb(0x45a)]=_0x4ff8ae,this[_0x3955cb(0x6d4)]=_0xb0bd18,this['_growWholeDuration']=_0xb0bd18,this[_0x3955cb(0x94b)]=_0x530e26||'Linear',_0xb0bd18<=0x0&&(this[_0x3955cb(0x3d5)]=this[_0x3955cb(0x5bc)],this[_0x3955cb(0x65c)]=this[_0x3955cb(0x45a)]);},Sprite_Battler['prototype'][_0x57ed21(0x19d)]=function(){const _0x3203c6=_0x57ed21;if(this[_0x3203c6(0x6d4)]<=0x0)return;if(!this[_0x3203c6(0xbb7)])return;const _0x263278=this[_0x3203c6(0x6d4)],_0x55b335=this[_0x3203c6(0x390)],_0x41ed46=this[_0x3203c6(0x94b)];Imported[_0x3203c6(0x849)]?(this[_0x3203c6(0x3d5)]=this[_0x3203c6(0x7b9)](this['_growX'],this['_targetGrowX'],_0x263278,_0x55b335,_0x41ed46),this['_growY']=this['applyEasing'](this[_0x3203c6(0x65c)],this[_0x3203c6(0x45a)],_0x263278,_0x55b335,_0x41ed46)):(this[_0x3203c6(0x3d5)]=(this[_0x3203c6(0x3d5)]*(_0x263278-0x1)+this[_0x3203c6(0x5bc)])/_0x263278,this[_0x3203c6(0x65c)]=(this[_0x3203c6(0x65c)]*(_0x263278-0x1)+this[_0x3203c6(0x45a)])/_0x263278);this[_0x3203c6(0x6d4)]--;if(this[_0x3203c6(0x6d4)]<=0x0)this['onGrowEnd']();},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x1cb)]=function(){const _0x4f10c2=_0x57ed21;this[_0x4f10c2(0x3d5)]=this[_0x4f10c2(0x5bc)],this[_0x4f10c2(0x65c)]=this[_0x4f10c2(0x45a)];},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x98a)]=function(){const _0x4d991a=_0x57ed21;return this[_0x4d991a(0x6d4)]>0x0;},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x540)]=function(_0x490d37,_0x5c3606,_0x53fd21,_0x21715b){const _0x37ac3a=_0x57ed21;if(!this[_0x37ac3a(0x279)]())return;if(!this[_0x37ac3a(0xbb7)])return;if(this[_0x37ac3a(0x9c3)]===_0x490d37&&this[_0x37ac3a(0x7b6)]===_0x5c3606)return;this[_0x37ac3a(0x9c3)]=_0x490d37,this['_targetSkewY']=_0x5c3606,this[_0x37ac3a(0x7e5)]=_0x53fd21,this[_0x37ac3a(0x210)]=_0x53fd21,this[_0x37ac3a(0x5fc)]=_0x21715b||_0x37ac3a(0x315),_0x53fd21<=0x0&&(this['_distortionSprite']['skew']['x']=this[_0x37ac3a(0x9c3)],this['_distortionSprite'][_0x37ac3a(0x232)]['y']=this[_0x37ac3a(0x7b6)]);},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x43c)]=function(){const _0x56d1ed=_0x57ed21;if(this[_0x56d1ed(0x7e5)]<=0x0)return;if(!this[_0x56d1ed(0xbb7)])return;const _0x40bebf=this[_0x56d1ed(0x7e5)],_0x47d91c=this[_0x56d1ed(0x210)],_0xb29c21=this[_0x56d1ed(0x5fc)],_0x3b8eea=this[_0x56d1ed(0xbb7)];Imported[_0x56d1ed(0x849)]?(_0x3b8eea[_0x56d1ed(0x232)]['x']=this['applyEasing'](_0x3b8eea[_0x56d1ed(0x232)]['x'],this[_0x56d1ed(0x9c3)],_0x40bebf,_0x47d91c,_0xb29c21),_0x3b8eea[_0x56d1ed(0x232)]['y']=this[_0x56d1ed(0x7b9)](_0x3b8eea['skew']['y'],this[_0x56d1ed(0x7b6)],_0x40bebf,_0x47d91c,_0xb29c21)):(_0x3b8eea[_0x56d1ed(0x232)]['x']=(_0x3b8eea[_0x56d1ed(0x232)]['x']*(_0x40bebf-0x1)+this['_targetSkewX'])/_0x40bebf,_0x3b8eea[_0x56d1ed(0x232)]['y']=(_0x3b8eea['skew']['y']*(_0x40bebf-0x1)+this[_0x56d1ed(0x7b6)])/_0x40bebf);this[_0x56d1ed(0x7e5)]--;if(this[_0x56d1ed(0x7e5)]<=0x0)this[_0x56d1ed(0x641)]();},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x641)]=function(){const _0x342eed=_0x57ed21;this[_0x342eed(0xbb7)][_0x342eed(0x232)]['x']=this[_0x342eed(0x9c3)],this['_distortionSprite'][_0x342eed(0x232)]['y']=this[_0x342eed(0x7b6)];},Sprite_Battler['prototype'][_0x57ed21(0x276)]=function(){return this['_skewDuration']>0x0;},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x701)]=function(_0x5b8b43,_0xbca331,_0x19cd27,_0x4023de){const _0x562fac=_0x57ed21;if(!this[_0x562fac(0x279)]())return;if(!this[_0x562fac(0xbb7)])return;if(this[_0x562fac(0x6a3)]===_0x5b8b43)return;this['_targetAngle']=_0x5b8b43,this['_angleDuration']=_0xbca331,this[_0x562fac(0xb7e)]=_0xbca331,this['_angleEasing']=_0x19cd27||'Linear',this[_0x562fac(0xad7)]=_0x4023de;if(this['_angleRevertOnFinish']===undefined){if('qnTVK'===_0x562fac(0x7d2))this[_0x562fac(0xad7)]=!![];else return _0x318ab5[_0x562fac(0x889)][_0x562fac(0x509)](this);}_0xbca331<=0x0&&(this[_0x562fac(0xb25)]=_0x5b8b43,this[_0x562fac(0xad7)]&&(this[_0x562fac(0x6a3)]=0x0,this[_0x562fac(0xb25)]=0x0));},Sprite_Battler[_0x57ed21(0xb20)]['updateSpin']=function(){const _0x5d8bcd=_0x57ed21;this[_0x5d8bcd(0x421)](),this[_0x5d8bcd(0x23c)]();},Sprite_Battler['prototype'][_0x57ed21(0x421)]=function(){const _0x1f32aa=_0x57ed21;if(this[_0x1f32aa(0x201)]<=0x0)return;const _0x29ba=this['_angleDuration'],_0x12c8bb=this['_angleWholeDuration'],_0x39bfb9=this[_0x1f32aa(0x522)];Imported[_0x1f32aa(0x849)]?this[_0x1f32aa(0xb25)]=this['applyEasing'](this['_currentAngle'],this[_0x1f32aa(0x6a3)],_0x29ba,_0x12c8bb,_0x39bfb9):this[_0x1f32aa(0xb25)]=(this[_0x1f32aa(0xb25)]*(_0x29ba-0x1)+this[_0x1f32aa(0x6a3)])/_0x29ba;this[_0x1f32aa(0x201)]--;if(this[_0x1f32aa(0x201)]<=0x0)this[_0x1f32aa(0x2fb)]();},Sprite_Battler[_0x57ed21(0xb20)]['onAngleEnd']=function(){const _0x2f17e9=_0x57ed21;this[_0x2f17e9(0xb25)]=this[_0x2f17e9(0x6a3)],this['_angleRevertOnFinish']&&(_0x2f17e9(0x6e9)===_0x2f17e9(0x7c2)?(this[_0x2f17e9(0x6ae)]=!![],this[_0x2f17e9(0x977)][_0x2f17e9(0x46e)](_0x2f17e9(0x972),_0x309ea5['BattleCore'][_0x2f17e9(0x8d3)]['PartyCmd'][_0x2f17e9(0x5b8)])):(this[_0x2f17e9(0x6a3)]=0x0,this[_0x2f17e9(0xb25)]=0x0));},Sprite_Battler['prototype'][_0x57ed21(0xbd6)]=function(){const _0x518f3b=_0x57ed21;return this[_0x518f3b(0x201)]>0x0;},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x23c)]=function(){const _0x45d81c=_0x57ed21;if(!this[_0x45d81c(0xbb7)])return;const _0x192680=this[_0x45d81c(0xb25)],_0x174297=this[_0x45d81c(0x19e)]['x'],_0x30720a=this[_0x45d81c(0x635)]['isActor']()?-0x1:0x1;this[_0x45d81c(0xbb7)][_0x45d81c(0xa8b)]=_0x192680*_0x174297*_0x30720a;const _0x3193bd=this[_0x45d81c(0xbb7)][_0x45d81c(0x19e)]['y'];this[_0x45d81c(0xbb7)]['y']=this[_0x45d81c(0x8b2)]*-0.5*(0x2-_0x3193bd),this[_0x45d81c(0xbb7)]['y']=Math['ceil'](this['_distortionSprite']['y']);const _0x26e0df=[this[_0x45d81c(0x254)],this['_svBattlerSprite'],this[_0x45d81c(0x76b)]];for(const _0x20cf3e of _0x26e0df){if(_0x45d81c(0x97d)!==_0x45d81c(0x5b4)){if(!_0x20cf3e)continue;_0x20cf3e['y']=this[_0x45d81c(0x8b2)]*0.5;}else _0x70efc8['BattleCore']['JS'][_0x2450e3][_0x45d81c(0x509)](this,this['subject'](),this[_0x45d81c(0x478)](),this[_0x45d81c(0x720)](),_0x294a9b);}this[_0x45d81c(0x4e6)]&&(this[_0x45d81c(0x339)]=this[_0x45d81c(0x339)]??0x1,this[_0x45d81c(0x4d8)]=this[_0x45d81c(0x4d8)]??0x1,this['_shadowSprite']['scale']['x']=this[_0x45d81c(0xbb7)]['scale']['x']*this[_0x45d81c(0x339)],this[_0x45d81c(0x4e6)][_0x45d81c(0x19e)]['y']=this[_0x45d81c(0xbb7)][_0x45d81c(0x19e)]['y']*this[_0x45d81c(0x4d8)]);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x693)]=Sprite_Actor[_0x57ed21(0xb20)][_0x57ed21(0x2c1)],Sprite_Actor[_0x57ed21(0xb20)][_0x57ed21(0x2c1)]=function(){const _0x2e51f6=_0x57ed21;VisuMZ[_0x2e51f6(0xfb)][_0x2e51f6(0x693)]['call'](this),VisuMZ[_0x2e51f6(0xfb)][_0x2e51f6(0x8d3)][_0x2e51f6(0x51a)][_0x2e51f6(0x40a)]&&(_0x2e51f6(0x7c0)==='RBgYd'?this[_0x2e51f6(0xa2f)]():(_0x65d678+=_0x572d65,_0x4a407d+=_0x5043d1));},VisuMZ['BattleCore'][_0x57ed21(0xbf1)]=Sprite_Enemy[_0x57ed21(0xb20)][_0x57ed21(0xbf2)],Sprite_Enemy[_0x57ed21(0xb20)][_0x57ed21(0xbf2)]=function(){const _0x4343cc=_0x57ed21;VisuMZ[_0x4343cc(0xfb)][_0x4343cc(0x8d3)][_0x4343cc(0x51a)][_0x4343cc(0x266)]&&this['createHpGaugeSprite'](),VisuMZ[_0x4343cc(0xfb)][_0x4343cc(0xbf1)]['call'](this);},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0xa2f)]=function(){const _0x387e02=_0x57ed21;if(!ConfigManager[_0x387e02(0x17a)])return;if(this[_0x387e02(0x7fb)]===Sprite_SvEnemy)return;const _0x2bd736=VisuMZ[_0x387e02(0xfb)][_0x387e02(0x8d3)]['HpGauge'],_0x34774d=new Sprite_HpGauge();_0x34774d[_0x387e02(0xab6)]['x']=_0x2bd736[_0x387e02(0x76e)],_0x34774d[_0x387e02(0xab6)]['y']=_0x2bd736[_0x387e02(0x672)],_0x34774d[_0x387e02(0x19e)]['x']=_0x34774d['scale']['y']=_0x2bd736['Scale'],this[_0x387e02(0x20f)]=_0x34774d,this[_0x387e02(0x1cc)](this['_hpGaugeSprite']);if(Spriteset_Battle[_0x387e02(0xb21)]){if('CFNGN'!==_0x387e02(0x161)){const _0x4eb26f=_0x5509fd[_0x387e02(0x720)]();this[_0x387e02(0x46e)](_0x387e02(0x26f),_0x542fab,[_0x279e81],_0x4eb26f[_0x387e02(0x8b0)]);}else BattleManager[_0x387e02(0x22a)](this['_hpGaugeSprite']);}},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0xb36)]=Sprite_Battler['prototype']['setBattler'],Sprite_Battler[_0x57ed21(0xb20)]['setBattler']=function(_0x22ebdc){const _0x1cb818=_0x57ed21,_0x1dc0eb=this[_0x1cb818(0x635)];VisuMZ[_0x1cb818(0xfb)][_0x1cb818(0xb36)][_0x1cb818(0x509)](this,_0x22ebdc),this['setupHpGaugeSprite'](_0x22ebdc);if(_0x1dc0eb!==_0x22ebdc)this['updateShadowScale']();},Sprite_Battler['prototype']['setupHpGaugeSprite']=function(_0x412477){const _0x4aa474=_0x57ed21;if(!_0x412477)return;if(!this['_hpGaugeSprite'])return;if(_0x412477[_0x4aa474(0x8cc)]()){}else{if(_0x412477[_0x4aa474(0xa8a)]()){if(this[_0x4aa474(0x7fb)]===Sprite_SvEnemy&&!_0x412477[_0x4aa474(0x860)]())return;}}this[_0x4aa474(0x20f)][_0x4aa474(0x6c5)](_0x412477,'hp');},Sprite_Battler['prototype'][_0x57ed21(0x622)]=function(){const _0x17d21d=_0x57ed21;return this['_battler']&&this[_0x17d21d(0x635)][_0x17d21d(0x622)]();},Sprite_Battler['prototype'][_0x57ed21(0x942)]=function(){const _0x20d439=_0x57ed21,_0x117a36=this['_mainSprite'][_0x20d439(0x10e)];if(!_0x117a36)return;const _0x31e06c=_0x117a36[_0x20d439(0x6c1)];let _0x2e474d=_0x117a36[_0x20d439(0x8b2)];if(this['_battler'][_0x20d439(0xba1)]()){if(this[_0x20d439(0x1d7)])_0x2e474d=Math[_0x20d439(0x952)](0x0,this[_0x20d439(0x1d7)][_0x20d439(0x8b2)]-0x4);}this[_0x20d439(0x254)][_0x20d439(0x6c3)](0x0,0x0,_0x31e06c,_0x2e474d),this[_0x20d439(0x6c3)](0x0,0x0,_0x31e06c,_0x2e474d);},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x676)]=function(){const _0x1494f6=_0x57ed21;if(!this[_0x1494f6(0x635)])return;if(!this['_hpGaugeSprite'])return;const _0x3c4a9c=VisuMZ[_0x1494f6(0xfb)][_0x1494f6(0x8d3)][_0x1494f6(0x51a)],_0x19c5e4=this[_0x1494f6(0x20f)];_0x19c5e4[_0x1494f6(0x2d6)]=this[_0x1494f6(0x74d)]();const _0x3cc735=_0x3c4a9c[_0x1494f6(0x299)],_0x119492=_0x3c4a9c['OffsetY'];_0x19c5e4['x']=_0x3cc735,_0x19c5e4['x']+=this[_0x1494f6(0x635)][_0x1494f6(0x709)](),_0x19c5e4['y']=-this[_0x1494f6(0x8b2)]+_0x119492,_0x19c5e4['y']+=this['_battler']['battleUIOffsetY']();if(Spriteset_Battle[_0x1494f6(0xb21)]&&SceneManager[_0x1494f6(0x34f)][_0x1494f6(0x837)]){if(_0x1494f6(0x498)===_0x1494f6(0x498))_0x19c5e4['x']+=this['x'],_0x19c5e4['y']+=this['y'];else{if(_0x1a2c9b[_0x1494f6(0x837)][_0x1494f6(0x792)]())return!![];this[_0x1494f6(0xa62)]='';}}},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x74d)]=function(){const _0x49581c=_0x57ed21;if(!this[_0x49581c(0x635)])return![];if(this[_0x49581c(0x635)][_0x49581c(0x8cc)]())return!![];if(this[_0x49581c(0x635)]['isHidden']())return![];if(this[_0x49581c(0x772)]<=0x0)return![];const _0x214e02=this[_0x49581c(0x635)][_0x49581c(0xb41)]()[_0x49581c(0x75a)];if(_0x214e02['match'](/<SHOW HP GAUGE>/i))return!![];if(_0x214e02['match'](/<HIDE HP GAUGE>/i))return![];const _0x52adfa=VisuMZ[_0x49581c(0xfb)][_0x49581c(0x8d3)]['HpGauge'];if(_0x52adfa[_0x49581c(0x1ba)]){if(_0x52adfa['BTestBypass']&&BattleManager[_0x49581c(0x5e7)]())return!![];if(this['_battler'][_0x49581c(0x784)])return![];return this['_battler'][_0x49581c(0x8c2)]();}return!![];},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x610)]=Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0xabe)],Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0xabe)]=function(){const _0x4b0b77=_0x57ed21;if(!this[_0x4b0b77(0x635)])return![];if(this[_0x4b0b77(0x14b)]>0x0)return!![];return VisuMZ[_0x4b0b77(0xfb)][_0x4b0b77(0x610)][_0x4b0b77(0x509)](this);},VisuMZ[_0x57ed21(0xfb)]['Sprite_Battler_startMove']=Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x403)],Sprite_Battler['prototype'][_0x57ed21(0x403)]=function(_0x24569e,_0x6cd267,_0x2e6e4b){const _0x1b4009=_0x57ed21;this[_0x1b4009(0x279)]()&&VisuMZ[_0x1b4009(0xfb)]['Sprite_Battler_startMove'][_0x1b4009(0x509)](this,_0x24569e,_0x6cd267,_0x2e6e4b);},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x279)]=function(){const _0x90f17e=_0x57ed21;if(this['_battler']&&this[_0x90f17e(0x635)][_0x90f17e(0xba1)]())return![];if(this[_0x90f17e(0x635)]&&!this[_0x90f17e(0x635)][_0x90f17e(0x6aa)]())return![];return $gameSystem[_0x90f17e(0x119)]();},Sprite_Battler[_0x57ed21(0xb20)]['stepForward']=function(){},Sprite_Battler['prototype'][_0x57ed21(0x7ce)]=function(){const _0x52748a=_0x57ed21;this[_0x52748a(0x403)](0x0,0x0,0xc);},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x82a)]=function(){},Sprite_Battler[_0x57ed21(0xb20)][_0x57ed21(0x1fc)]=function(){const _0x39ce4c=_0x57ed21,_0x1758eb=VisuMZ[_0x39ce4c(0xfb)][_0x39ce4c(0x8d3)][_0x39ce4c(0x929)],_0x56636a=this['_battler']&&this[_0x39ce4c(0x635)][_0x39ce4c(0x8cc)]()?0x1:-0x1,_0x1499c5=this[_0x39ce4c(0xa30)]-this[_0x39ce4c(0x57c)]+_0x56636a*_0x1758eb[_0x39ce4c(0x9a7)],_0x5eeb2b=this[_0x39ce4c(0x656)]-this[_0x39ce4c(0x214)]+_0x56636a*_0x1758eb[_0x39ce4c(0xaba)],_0x1a6d4a=_0x1758eb['FlinchDuration'];this[_0x39ce4c(0x403)](_0x1499c5,_0x5eeb2b,_0x1a6d4a);},VisuMZ['BattleCore'][_0x57ed21(0x891)]=Sprite_Actor['prototype']['initMembers'],Sprite_Actor['prototype'][_0x57ed21(0xba5)]=function(){const _0x4e72de=_0x57ed21;VisuMZ[_0x4e72de(0xfb)][_0x4e72de(0x891)]['call'](this),this[_0x4e72de(0x73f)]();},Sprite_Actor[_0x57ed21(0xb20)]['mainSprite']=function(){const _0x31a338=_0x57ed21;return this[_0x31a338(0xbb7)]||this[_0x31a338(0x254)]||this;},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0xa0d)]=Sprite_Actor[_0x57ed21(0xb20)][_0x57ed21(0xbb8)],Sprite_Actor[_0x57ed21(0xb20)][_0x57ed21(0xbb8)]=function(){},Sprite_Actor[_0x57ed21(0xb20)][_0x57ed21(0x362)]=function(_0x467f3f){const _0x3de21d=_0x57ed21;if(SceneManager[_0x3de21d(0x4c4)]())return;if(!_0x467f3f)return;if(!_0x467f3f[_0x3de21d(0x279)]())return;VisuMZ[_0x3de21d(0xfb)][_0x3de21d(0xa0d)][_0x3de21d(0x509)](this);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x79c)]=Sprite_Actor[_0x57ed21(0xb20)][_0x57ed21(0x1aa)],Sprite_Actor[_0x57ed21(0xb20)][_0x57ed21(0x1aa)]=function(_0x3142e8){const _0x1c79f5=_0x57ed21;VisuMZ[_0x1c79f5(0xfb)][_0x1c79f5(0x8d3)][_0x1c79f5(0x929)]['HomePosJS']?VisuMZ[_0x1c79f5(0xfb)][_0x1c79f5(0x8d3)][_0x1c79f5(0x929)][_0x1c79f5(0x4e3)][_0x1c79f5(0x509)](this,_0x3142e8):VisuMZ['BattleCore'][_0x1c79f5(0x79c)][_0x1c79f5(0x509)](this,_0x3142e8);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x911)]=Sprite_Actor[_0x57ed21(0xb20)][_0x57ed21(0xb02)],Sprite_Actor[_0x57ed21(0xb20)][_0x57ed21(0xb02)]=function(_0x5d02bf){const _0x22ebd2=_0x57ed21;VisuMZ['BattleCore']['Sprite_Actor_setBattler'][_0x22ebd2(0x509)](this,_0x5d02bf),this[_0x22ebd2(0xb84)](_0x5d02bf);},Sprite_Actor[_0x57ed21(0xb20)][_0x57ed21(0xb84)]=function(_0x1d6add){const _0x2ecbce=_0x57ed21;if(!_0x1d6add)return;if(!this[_0x2ecbce(0x254)])return;this[_0x2ecbce(0x254)][_0x2ecbce(0xab6)]['x']=this['_actor'][_0x2ecbce(0x528)](),this[_0x2ecbce(0x254)][_0x2ecbce(0xab6)]['y']=this[_0x2ecbce(0x5f8)]['svBattlerAnchorY'](),this[_0x2ecbce(0x484)]();},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x9f6)]=Sprite_Actor[_0x57ed21(0xb20)][_0x57ed21(0x402)],Sprite_Actor['prototype'][_0x57ed21(0x402)]=function(){const _0x439e64=_0x57ed21;VisuMZ[_0x439e64(0xfb)][_0x439e64(0x9f6)][_0x439e64(0x509)](this),this[_0x439e64(0x5f8)]&&(this[_0x439e64(0xb3e)](),this['updateStyleOpacity']());},VisuMZ[_0x57ed21(0xfb)]['Sprite_Actor_updateBitmap']=Sprite_Actor['prototype'][_0x57ed21(0x85c)],Sprite_Actor[_0x57ed21(0xb20)]['updateBitmap']=function(){const _0x3bb25e=_0x57ed21;VisuMZ[_0x3bb25e(0xfb)]['Sprite_Actor_updateBitmap'][_0x3bb25e(0x509)](this),this[_0x3bb25e(0x254)]&&this[_0x3bb25e(0x254)][_0x3bb25e(0x10e)]&&this[_0x3bb25e(0x635)]&&(_0x3bb25e(0x4e5)!==_0x3bb25e(0x4e5)?(this['_homeX']=(this[_0x3bb25e(0x57c)]*(_0x17c032-0x1)+this[_0x3bb25e(0x9d7)])/_0x1c566d,this[_0x3bb25e(0x214)]=(this[_0x3bb25e(0x214)]*(_0x2197b2-0x1)+this['_targetHomeY'])/_0x33f04a):this[_0x3bb25e(0x254)][_0x3bb25e(0x10e)][_0x3bb25e(0x22e)]!==this[_0x3bb25e(0x635)][_0x3bb25e(0x234)]()&&(this[_0x3bb25e(0x254)]['bitmap'][_0x3bb25e(0x22e)]=this[_0x3bb25e(0x635)][_0x3bb25e(0x234)]()));},VisuMZ[_0x57ed21(0xfb)]['Sprite_Actor_updateShadow']=Sprite_Actor[_0x57ed21(0xb20)]['updateShadow'],Sprite_Actor[_0x57ed21(0xb20)][_0x57ed21(0x419)]=function(){const _0x3725af=_0x57ed21;VisuMZ[_0x3725af(0xfb)]['Sprite_Actor_updateShadow'][_0x3725af(0x509)](this),this['updateShadowBattleCore']();},Sprite_Actor[_0x57ed21(0xb20)][_0x57ed21(0xb13)]=function(){const _0x8691d9=_0x57ed21;if(!this[_0x8691d9(0x254)])return;if(!this[_0x8691d9(0x4e6)])return;this[_0x8691d9(0x484)](),this[_0x8691d9(0x379)]();},Sprite_Actor[_0x57ed21(0xb20)][_0x57ed21(0xb3e)]=function(){const _0x3359ce=_0x57ed21;this[_0x3359ce(0x7e7)][_0x3359ce(0x19e)]['x']=0x1/(this[_0x3359ce(0x19e)]['x']||0.001),this[_0x3359ce(0x7e7)][_0x3359ce(0x19e)]['y']=0x1/(this[_0x3359ce(0x19e)]['y']||0.001);},Sprite_Actor[_0x57ed21(0xb20)][_0x57ed21(0x938)]=function(){const _0x5eb04f=_0x57ed21;if(!$gameSystem[_0x5eb04f(0x119)]()&&this['constructor']===Sprite_Actor){const _0xc8b877=Scene_Battle[_0x5eb04f(0xb20)]['battleLayoutStyle']();if(['default',_0x5eb04f(0x2c7),'portrait',_0x5eb04f(0x131)][_0x5eb04f(0x55d)](_0xc8b877)){if(_0x5eb04f(0x352)===_0x5eb04f(0x352))this['opacity']=0x0;else{if(!_0x238135[_0x5eb04f(0x9d4)]())return;if(!this[_0x5eb04f(0xab8)])this['clearDamagePopup']();this[_0x5eb04f(0x7e0)]();const _0x30319c=this[_0x5eb04f(0x595)]();if(_0x30319c)_0x30319c[_0x5eb04f(0xb49)]();}}}},Sprite_Actor[_0x57ed21(0xb20)][_0x57ed21(0x5c7)]=function(){const _0x3b52de=_0x57ed21,_0x332630=this[_0x3b52de(0x5f8)];if(_0x332630){const _0x2b85f8=_0x332630['stateMotionIndex']();if(_0x332630[_0x3b52de(0xac6)]()||_0x332630[_0x3b52de(0x25d)]())this[_0x3b52de(0xbe2)](_0x3b52de(0x34b));else{if(_0x2b85f8===0x3){if(_0x3b52de(0x521)===_0x3b52de(0x5b9)){const _0x81d07=this[_0x3b52de(0xa65)](),_0x26e018=_0x1e025f[_0x3b52de(0xfb)][_0x3b52de(0x8d3)][_0x3b52de(0x809)][_0x3b52de(0xb92)],_0x4ef0d2=_0x81d07===_0x3b52de(0x76a)?_0x535892[_0x3b52de(0xb3f)]:_0x3b52de(0x710)['format'](_0x26e018,_0x2ac8cb[_0x3b52de(0xb3f)]),_0x44777a=this[_0x3b52de(0xa81)]();this[_0x3b52de(0x4a7)](_0x4ef0d2,_0x3b52de(0xb3f),_0x44777a);}else this['startMotion'](_0x3b52de(0x659));}else{if(_0x2b85f8===0x2)this['startMotion'](_0x3b52de(0xb33));else{if(this[_0x3b52de(0x9bf)]){if('JOrcF'===_0x3b52de(0x36a)){const _0x15a431=_0x36c990(_0x4c1876['$1'])['split'](/[\r\n]+/)[_0x3b52de(0x6d9)](_0x57c811=>_0x2660fd(_0x57c811)[_0x3b52de(0xaaa)]()[_0x3b52de(0x1f6)]());_0x263101=_0x27fb49[_0x3b52de(0x8a9)](_0x15a431);!_0x1a2f52[_0x3b52de(0x75a)][_0x3b52de(0x463)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x212ae8[_0x3b52de(0x75a)]+=_0x3b52de(0x534));;}else this[_0x3b52de(0xbe2)](_0x3b52de(0x473));}else{if(_0x332630['isCharging']())_0x3b52de(0xac9)===_0x3b52de(0xb5a)?_0x4e0c2f[_0x3b52de(0x46e)](_0x5d8dc4(_0x426b72['$1'])):this['startMotion'](_0x3b52de(0x4c7));else{if(_0x332630[_0x3b52de(0x22f)]())this[_0x3b52de(0xbe2)](_0x3b52de(0x8da));else{if(_0x332630[_0x3b52de(0xa90)]()||_0x332630[_0x3b52de(0x736)]())this['startMotion'](_0x3b52de(0x935));else{if(_0x2b85f8===0x1)this['startMotion'](_0x3b52de(0x3b6));else{if(_0x332630[_0x3b52de(0x114)]())_0x3b52de(0x320)!=='IpTaf'?this[_0x3b52de(0xbe2)](_0x3b52de(0xb1d)):(_0xdc3046=_0x5385e9[_0x3b52de(0x595)]()['_homeX'],_0xb12889=_0x59d547[_0x3b52de(0x595)]()[_0x3b52de(0x214)]);else{if(_0x332630[_0x3b52de(0xad4)]())this['startMotion']('walk');else{if(_0x332630[_0x3b52de(0x2e0)]())this['startMotion']('wait');else{if(_0x3b52de(0x621)!==_0x3b52de(0xa13))this[_0x3b52de(0xbe2)]('walk');else return _0x3138f4[_0x3b52de(0x46e)](...this[_0x3b52de(0x7e4)]()[_0x3b52de(0x38d)]()[_0x3b52de(0x863)](_0x28bb26=>_0x28bb26!==this[_0x3b52de(0x478)]())),this[_0x3b52de(0x41a)](_0x6509db);}}}}}}}}}}}}},Sprite_Actor['prototype'][_0x57ed21(0x82a)]=function(){const _0x35e82c=_0x57ed21,_0x113c90=0xa,_0x1200fe=0x12c*_0x113c90,_0x3bb01b=0x1e*_0x113c90;this[_0x35e82c(0x403)](_0x1200fe,0x0,_0x3bb01b);},Sprite_Actor[_0x57ed21(0xb20)][_0x57ed21(0x990)]=function(){const _0x10dee9=_0x57ed21;Sprite_Battler[_0x10dee9(0xb20)][_0x10dee9(0x990)][_0x10dee9(0x509)](this);},Sprite_Actor[_0x57ed21(0xb20)]['motionSpeed']=function(){const _0x2f019c=_0x57ed21;return Sprite_Battler[_0x2f019c(0x585)];},Sprite_Weapon[_0x57ed21(0xb20)]['animationWait']=function(){const _0x521615=_0x57ed21;return Sprite_Battler[_0x521615(0x585)];},Sprite_Actor[_0x57ed21(0xb20)][_0x57ed21(0x3af)]=function(){},Sprite_Actor[_0x57ed21(0xb20)][_0x57ed21(0x9b3)]=function(){},Sprite_Actor[_0x57ed21(0xb20)][_0x57ed21(0x2f3)]=function(){const _0x4b7f38=_0x57ed21;if(this[_0x4b7f38(0x829)]&&++this[_0x4b7f38(0x503)]>=this[_0x4b7f38(0x956)]()){if(this[_0x4b7f38(0x829)]['loop'])this[_0x4b7f38(0x6f0)]=(this[_0x4b7f38(0x6f0)]+0x1)%0x4;else this[_0x4b7f38(0x6f0)]<0x2?this['_pattern']++:this[_0x4b7f38(0x5c7)]();this[_0x4b7f38(0x503)]=0x0;}},Sprite_Actor[_0x57ed21(0xb20)][_0x57ed21(0x74c)]=function(_0x3cec33){const _0x47058f=_0x57ed21;if(_0x3cec33===_0x47058f(0xb60))this[_0x47058f(0x685)]=!![];if(this[_0x47058f(0x635)]&&this[_0x47058f(0x635)][_0x47058f(0xba1)]()){this['_motion']=Sprite_Actor['MOTIONS'][_0x47058f(0x659)];return;}const _0x2df0c7=Sprite_Actor[_0x47058f(0x354)][_0x3cec33];this['_motion']=_0x2df0c7,this['_motionCount']=0x0,this[_0x47058f(0x6f0)]=0x0;},Sprite_Actor[_0x57ed21(0xb20)][_0x57ed21(0x5cb)]=function(_0x1427ab){const _0x597046=_0x57ed21;if(this[_0x597046(0x622)]())return;this['adjustWeaponSpriteOffset'](),this[_0x597046(0xaf8)]['setup'](_0x1427ab),this[_0x597046(0x5f8)][_0x597046(0x225)]();},Sprite_Actor['prototype'][_0x57ed21(0x1ab)]=function(){const _0x19df88=_0x57ed21;let _0x56ba37=-0x10,_0xb95413=this[_0x19df88(0x8b2)]*0.5;const _0x48d240=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x5958c3=this[_0x19df88(0x635)][_0x19df88(0x86d)]()[_0x19df88(0x6d9)](_0x31455d=>_0x31455d&&_0x31455d[_0x19df88(0x75a)][_0x19df88(0x463)](_0x48d240)?Number(RegExp['$1']):0x0),_0x54ff3d=this[_0x19df88(0x635)][_0x19df88(0x86d)]()['map'](_0x23004e=>_0x23004e&&_0x23004e['note'][_0x19df88(0x463)](_0x48d240)?Number(RegExp['$2']):0x0);_0x56ba37=_0x5958c3[_0x19df88(0x822)]((_0x2214f1,_0x1de63a)=>_0x2214f1+_0x1de63a,_0x56ba37),_0xb95413=_0x54ff3d['reduce']((_0x2407f5,_0x463a20)=>_0x2407f5+_0x463a20,_0xb95413),this[_0x19df88(0xaf8)]['x']=_0x56ba37,this[_0x19df88(0xaf8)]['y']=_0xb95413,this['_weaponSprite']['update']();},Sprite_Weapon[_0x57ed21(0xb20)][_0x57ed21(0x6c5)]=function(_0x37b3b0){const _0x3ec457=_0x57ed21;this[_0x3ec457(0x893)]=_0x37b3b0,this[_0x3ec457(0x31c)]=-0x1,this['_pattern']=0x0,this[_0x3ec457(0xa2b)](),this['updateFrame']();},Sprite_Actor[_0x57ed21(0xb20)][_0x57ed21(0x793)]=function(){},Sprite_Actor[_0x57ed21(0xb20)][_0x57ed21(0xb83)]=function(){const _0x145b9c=_0x57ed21,_0x2ec074=VisuMZ[_0x145b9c(0xfb)][_0x145b9c(0x8d3)]['ActionSequence'],_0x16927c=_0x2ec074[_0x145b9c(0x275)],_0x3166ce=_0x2ec074[_0x145b9c(0x117)],_0x3dd767=_0x2ec074[_0x145b9c(0x943)];this[_0x145b9c(0x403)](-_0x16927c,-_0x3166ce,_0x3dd767);},VisuMZ['BattleCore']['Sprite_Actor_updateFrame']=Sprite_Actor[_0x57ed21(0xb20)][_0x57ed21(0x211)],Sprite_Actor[_0x57ed21(0xb20)][_0x57ed21(0x211)]=function(){const _0x42e03a=_0x57ed21;if(this[_0x42e03a(0x622)]()){if(_0x42e03a(0x7b0)!==_0x42e03a(0x7b0)){this[_0x42e03a(0x663)](0x0,0x0,0x0,0x0);return;}else this[_0x42e03a(0x942)]();}else this[_0x42e03a(0x7f9)](),VisuMZ['BattleCore'][_0x42e03a(0xbb3)][_0x42e03a(0x509)](this);},Sprite_Actor['prototype']['applyFreezeMotionFrames']=function(){const _0x51619c=_0x57ed21;if(this[_0x51619c(0x635)]&&this['_battler']['_freezeMotionData']){if(_0x51619c(0x711)===_0x51619c(0x2bc))_0x518244[_0x51619c(0xfb)][_0x51619c(0x295)][_0x51619c(0x509)](this),this[_0x51619c(0x7ae)]();else{const _0x82e5e9=this[_0x51619c(0x635)][_0x51619c(0xabb)];this[_0x51619c(0x829)]=Sprite_Actor[_0x51619c(0x354)][_0x82e5e9['motionType']],this[_0x51619c(0x6f0)]=_0x82e5e9[_0x51619c(0x47d)];const _0x320e64=this['_weaponSprite'];_0x320e64[_0x51619c(0xbec)](_0x82e5e9[_0x51619c(0x1e5)],_0x82e5e9[_0x51619c(0x47d)]),this['adjustWeaponSpriteOffset']();}}},Sprite_Weapon[_0x57ed21(0xb20)]['freezeFrame']=function(_0xbee53c,_0x2ad0d0){const _0x6ae4e9=_0x57ed21;this['_weaponImageId']=_0xbee53c,this[_0x6ae4e9(0x31c)]=-Infinity,this['_pattern']=_0x2ad0d0,this[_0x6ae4e9(0xa2b)](),this[_0x6ae4e9(0x211)]();},Sprite_Enemy[_0x57ed21(0xb20)]['initMembers']=function(){const _0x3a457b=_0x57ed21;Sprite_Battler[_0x3a457b(0xb20)][_0x3a457b(0xba5)]['call'](this),this[_0x3a457b(0x7aa)]=null,this[_0x3a457b(0x3e8)]=![],this[_0x3a457b(0x7c5)]='',this[_0x3a457b(0x5c5)]=0x0,this['_effectType']=null,this[_0x3a457b(0x88f)]=0x0,this[_0x3a457b(0x9ce)]=0x0,this['createMainSprite'](),this[_0x3a457b(0xbf2)]();},VisuMZ['BattleCore']['Sprite_Enemy_update']=Sprite_Enemy['prototype']['update'],Sprite_Enemy[_0x57ed21(0xb20)][_0x57ed21(0x402)]=function(){const _0x36e772=_0x57ed21;VisuMZ[_0x36e772(0xfb)][_0x36e772(0x4e4)]['call'](this),this[_0x36e772(0x484)]();},Sprite_Enemy[_0x57ed21(0xb20)][_0x57ed21(0x834)]=function(){const _0x59ef21=_0x57ed21;this['_mainSprite']=new Sprite(),this[_0x59ef21(0x254)][_0x59ef21(0xab6)]['x']=0.5,this[_0x59ef21(0x254)]['anchor']['y']=0x1,this[_0x59ef21(0x1cc)](this['_mainSprite']),this[_0x59ef21(0x73f)]();},Sprite_Enemy[_0x57ed21(0xb20)][_0x57ed21(0xaa0)]=function(){const _0x766c91=_0x57ed21;return this['_distortionSprite']||this[_0x766c91(0x254)]||this;},Sprite_Enemy[_0x57ed21(0xb20)][_0x57ed21(0xa2b)]=function(_0x44d86f){const _0x38ebee=_0x57ed21;this[_0x38ebee(0x10e)]=new Bitmap(0x1,0x1);if(this[_0x38ebee(0x860)]()){if(_0x38ebee(0x55e)===_0x38ebee(0x727))this[_0x38ebee(0x664)]=_0x38ebee(0x2c7);else{const _0x28eeaa=this['_enemy'][_0x38ebee(0x91b)]();this['bitmap']=new Bitmap(_0x28eeaa[_0x38ebee(0x6c1)],_0x28eeaa['height']),this[_0x38ebee(0x254)]['bitmap']=new Bitmap(0x1,0x1);}}else $gameSystem[_0x38ebee(0x119)]()?_0x38ebee(0x334)==='tNmpD'?_0x3d1659[_0x38ebee(0x1c4)]():(this['_mainSprite'][_0x38ebee(0x10e)]=ImageManager['loadSvEnemy'](_0x44d86f),this[_0x38ebee(0x254)][_0x38ebee(0x10e)][_0x38ebee(0xa4c)](this['createEmptyBitmap']['bind'](this))):(this['_mainSprite'][_0x38ebee(0x10e)]=ImageManager[_0x38ebee(0x4b3)](_0x44d86f),this[_0x38ebee(0x254)][_0x38ebee(0x10e)]['addLoadListener'](this['createEmptyBitmap'][_0x38ebee(0x62e)](this)));},Sprite_Enemy[_0x57ed21(0xb20)][_0x57ed21(0xa84)]=function(){const _0x27ea09=_0x57ed21,_0x18dae2=this[_0x27ea09(0x254)][_0x27ea09(0x10e)];_0x18dae2&&(this[_0x27ea09(0x10e)]=new Bitmap(_0x18dae2[_0x27ea09(0x6c1)],_0x18dae2['height']));},VisuMZ[_0x57ed21(0xfb)]['Sprite_Enemy_setHue']=Sprite_Enemy[_0x57ed21(0xb20)][_0x57ed21(0xb67)],Sprite_Enemy[_0x57ed21(0xb20)][_0x57ed21(0xb67)]=function(_0x38ba7f){const _0x17575b=_0x57ed21;this['_mainSprite']&&(_0x17575b(0x725)!=='QZnCp'?_0x350ee3=_0x29f18d:this[_0x17575b(0x254)][_0x17575b(0xb67)](_0x38ba7f));},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x817)]=Sprite_Enemy['prototype'][_0x57ed21(0x9f8)],Sprite_Enemy[_0x57ed21(0xb20)][_0x57ed21(0x9f8)]=function(){const _0x1e5ab7=_0x57ed21;if(this[_0x1e5ab7(0x8f2)]())VisuMZ[_0x1e5ab7(0xfb)][_0x1e5ab7(0x817)][_0x1e5ab7(0x509)](this);else{this[_0x1e5ab7(0x3e8)]=!this['_enemy'][_0x1e5ab7(0x983)]();if(!this[_0x1e5ab7(0x3e8)]){if(_0x1e5ab7(0x4d9)===_0x1e5ab7(0x754))return _0x1466d4[_0x1e5ab7(0x262)]();else this[_0x1e5ab7(0x772)]=0x0;}}},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0xbf6)]=Sprite_Enemy[_0x57ed21(0xb20)][_0x57ed21(0xa5a)],Sprite_Enemy['prototype'][_0x57ed21(0xa5a)]=function(){const _0x436437=_0x57ed21;if(this[_0x436437(0x8f2)]())VisuMZ[_0x436437(0xfb)][_0x436437(0xbf6)][_0x436437(0x509)](this);},Sprite_Enemy[_0x57ed21(0xb20)][_0x57ed21(0x211)]=function(){const _0x3656a1=_0x57ed21;Sprite_Battler['prototype']['updateFrame'][_0x3656a1(0x509)](this);const _0x9a10b1=this[_0x3656a1(0xaa0)]()||this;if(!_0x9a10b1)return;if(!_0x9a10b1[_0x3656a1(0x10e)]){if(_0x3656a1(0x183)===_0x3656a1(0x15d))return _0x402031(_0x521df2['$1']);else _0x9a10b1[_0x3656a1(0x10e)]=new Bitmap(this[_0x3656a1(0x6c1)],this['height']);}this[_0x3656a1(0xb89)]===_0x3656a1(0x89f)?this[_0x3656a1(0x254)][_0x3656a1(0x6c3)](0x0,0x0,this['_mainSprite'][_0x3656a1(0x6c1)],this[_0x3656a1(0x88f)]):_0x9a10b1[_0x3656a1(0x6c3)](0x0,0x0,_0x9a10b1['bitmap'][_0x3656a1(0x6c1)],this[_0x3656a1(0x10e)]['height']);},VisuMZ['BattleCore'][_0x57ed21(0x482)]=Sprite_Enemy[_0x57ed21(0xb20)][_0x57ed21(0x41b)],Sprite_Enemy[_0x57ed21(0xb20)][_0x57ed21(0x41b)]=function(){const _0x250266=_0x57ed21;if(this['allowCollapse']())VisuMZ[_0x250266(0xfb)]['Sprite_Enemy_updateBossCollapse'][_0x250266(0x509)](this);},Sprite_Enemy[_0x57ed21(0xb20)]['isMoving']=function(){const _0x18564b=_0x57ed21;return Sprite_Battler[_0x18564b(0xb20)]['isMoving'][_0x18564b(0x509)](this);},VisuMZ['BattleCore'][_0x57ed21(0x422)]=Sprite_Enemy[_0x57ed21(0xb20)][_0x57ed21(0xb3e)],Sprite_Enemy['prototype'][_0x57ed21(0xb3e)]=function(){const _0x3bae81=_0x57ed21;VisuMZ[_0x3bae81(0xfb)][_0x3bae81(0x422)][_0x3bae81(0x509)](this),this[_0x3bae81(0x55f)]();},Sprite_Enemy[_0x57ed21(0xb20)]['updateStateSpriteBattleCore']=function(){const _0x20cd63=_0x57ed21,_0x2a89ba=VisuMZ[_0x20cd63(0xfb)]['Settings'][_0x20cd63(0x313)];if(_0x2a89ba[_0x20cd63(0x10c)]&&!_0x2a89ba[_0x20cd63(0x50a)]){if(_0x20cd63(0x6b4)===_0x20cd63(0x6b4)){this[_0x20cd63(0x156)][_0x20cd63(0x772)]=0x0;return;}else{const _0x2f59f2=this['commandStyle'](),_0x269dce=_0x29a918['BattleCore'][_0x20cd63(0x8d3)][_0x20cd63(0x107)][_0x20cd63(0x2e6)],_0x552cf5=_0x2f59f2==='text'?_0xb37e2d[_0x20cd63(0x720)]:_0x20cd63(0x710)[_0x20cd63(0x455)](_0x269dce,_0x27fefe[_0x20cd63(0x720)]),_0x3b6d27=this[_0x20cd63(0x21c)]();this[_0x20cd63(0x4a7)](_0x552cf5,_0x20cd63(0x720),_0x3b6d27);}}this[_0x20cd63(0x156)]['x']=0x0,this[_0x20cd63(0x156)]['x']+=this[_0x20cd63(0x635)][_0x20cd63(0x709)](),this[_0x20cd63(0x156)]['y']=-this[_0x20cd63(0x10e)]['height']-this['_stateIconSprite'][_0x20cd63(0x8b2)]-0x4,this['_stateIconSprite']['y']+=this[_0x20cd63(0x635)][_0x20cd63(0xb35)](),this['_stateIconSprite'][_0x20cd63(0x19e)]['x']=0x1/(this['scale']['x']||0.001),this[_0x20cd63(0x156)][_0x20cd63(0x19e)]['y']=0x1/(this[_0x20cd63(0x19e)]['y']||0.001),this[_0x20cd63(0x860)]()&&('fLOip'!==_0x20cd63(0x594)?(_0x1f5528+='\x0a',_0x393b5a+=_0x464f8['parameters'][0x0]):(this[_0x20cd63(0x28c)][_0x20cd63(0x7e7)]['scale']['x']=-0x1/(this[_0x20cd63(0x19e)]['x']||0.001),this[_0x20cd63(0x28c)][_0x20cd63(0x7e7)][_0x20cd63(0x19e)]['y']=0x1/(this['scale']['y']||0.001)));},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0xa23)]=Sprite_Enemy['prototype'][_0x57ed21(0xb02)],Sprite_Enemy[_0x57ed21(0xb20)]['setBattler']=function(_0x5a32ca){const _0x5794fd=_0x57ed21;VisuMZ['BattleCore'][_0x5794fd(0xa23)][_0x5794fd(0x509)](this,_0x5a32ca),this[_0x5794fd(0x3dc)](_0x5a32ca);},Sprite_Enemy[_0x57ed21(0xb20)]['setSvBattlerSprite']=function(_0x182cf5){const _0x2f8587=_0x57ed21;!this['_svBattlerSprite']&&(_0x2f8587(0x62c)===_0x2f8587(0x728)?(_0x3ef627&&_0x170f3f[_0x2f8587(0x8cc)]()&&_0x5a29ae['clearActiveWeaponSlot'](),this[_0x2f8587(0x7ae)]()):(this[_0x2f8587(0x28c)]=new Sprite_SvEnemy(_0x182cf5),this[_0x2f8587(0x73f)]())),this[_0x2f8587(0x28c)][_0x2f8587(0xb02)](_0x182cf5);},Sprite_Enemy[_0x57ed21(0xb20)]['hasSvBattler']=function(){const _0x2628ec=_0x57ed21;return this['_enemy']&&this[_0x2628ec(0x7aa)]['hasSvBattler']();},Sprite_Enemy['prototype']['allowCollapse']=function(){const _0x51d66c=_0x57ed21;if(this[_0x51d66c(0x860)]()){if(_0x51d66c(0x611)!==_0x51d66c(0x5a8))return this[_0x51d66c(0x7aa)]['allowCollapse']();else{const _0x5f2c83=[];for(const _0x2e79da of this[_0x51d66c(0xb41)]()['actions']){const _0x4f11f0=_0x2093ba[_0x2e79da['skillId']];if(_0x4f11f0&&!_0x5f2c83[_0x51d66c(0x55d)](_0x4f11f0))_0x5f2c83[_0x51d66c(0x46e)](_0x4f11f0);}return _0x5f2c83;}}else{if(_0x51d66c(0x448)!==_0x51d66c(0x852))return!![];else{if(!_0x4415b3['BattleCore']['Settings'][_0x51d66c(0x929)][_0x51d66c(0xaac)])return;const _0x366da9=_0x3b64d4['_subject'];if(_0x366da9){if(_0x366da9[_0x51d66c(0x8cc)]()&&!_0x4342a4[_0x51d66c(0x119)]())return;const _0x33c0e3=_0x366da9[_0x51d66c(0x595)]();if(_0x33c0e3&&_0x366da9[_0x51d66c(0x8cc)]())this[_0x51d66c(0x84c)]['addChild'](_0x33c0e3);}}}},Sprite_Enemy[_0x57ed21(0xb20)]['refreshMotion']=function(){const _0x3dbe5e=_0x57ed21;this[_0x3dbe5e(0x860)]()&&(_0x3dbe5e(0xac4)===_0x3dbe5e(0xaf4)?_0x7580ed['BattleCore'][_0x3dbe5e(0x79c)][_0x3dbe5e(0x509)](this,_0x1f6193):this[_0x3dbe5e(0x28c)]['refreshMotion']());},Sprite_Enemy[_0x57ed21(0xb20)][_0x57ed21(0x74c)]=function(_0x490b39){const _0x4d6c0e=_0x57ed21;if(this['hasSvBattler']())this[_0x4d6c0e(0x28c)][_0x4d6c0e(0x74c)](_0x490b39);},Sprite_Enemy[_0x57ed21(0xb20)][_0x57ed21(0x5cb)]=function(_0xdaf62f){const _0x12c320=_0x57ed21;if(this[_0x12c320(0x860)]())this[_0x12c320(0x28c)][_0x12c320(0x5cb)](_0xdaf62f);},Sprite_Enemy[_0x57ed21(0xb20)]['stepForward']=function(){const _0x289b2c=_0x57ed21,_0x262e8a=VisuMZ[_0x289b2c(0xfb)]['Settings'][_0x289b2c(0x48d)],_0x3c9d77=_0x262e8a[_0x289b2c(0x275)],_0x5bf82e=_0x262e8a[_0x289b2c(0x117)],_0x425ace=_0x262e8a[_0x289b2c(0x943)];this[_0x289b2c(0x403)](_0x3c9d77,_0x5bf82e,_0x425ace);};function Sprite_SvEnemy(){const _0x57be6d=_0x57ed21;this[_0x57be6d(0xa1b)](...arguments);}Sprite_SvEnemy[_0x57ed21(0xb20)]=Object[_0x57ed21(0xb52)](Sprite_Actor[_0x57ed21(0xb20)]),Sprite_SvEnemy['prototype'][_0x57ed21(0x7fb)]=Sprite_SvEnemy,Sprite_SvEnemy['prototype'][_0x57ed21(0xa1b)]=function(_0x4513e3){const _0x451f4b=_0x57ed21;Sprite_Actor[_0x451f4b(0xb20)][_0x451f4b(0xa1b)][_0x451f4b(0x509)](this,_0x4513e3),this[_0x451f4b(0x19e)]['x']=-0x1,this['_stateSprite']['scale']['x']=-0x1;},Sprite_SvEnemy['prototype'][_0x57ed21(0x2e2)]=function(){},Sprite_SvEnemy[_0x57ed21(0xb20)][_0x57ed21(0xbb8)]=function(){},Sprite_SvEnemy[_0x57ed21(0xb20)][_0x57ed21(0x1aa)]=function(_0x50947a){},Sprite_SvEnemy[_0x57ed21(0xb20)][_0x57ed21(0x419)]=function(){},Sprite_SvEnemy[_0x57ed21(0xb20)][_0x57ed21(0x379)]=function(){},Sprite_SvEnemy[_0x57ed21(0xb20)][_0x57ed21(0xb3e)]=function(){const _0x239b90=_0x57ed21;this[_0x239b90(0x7e7)]['visible']=![];},Sprite_SvEnemy[_0x57ed21(0xb20)][_0x57ed21(0x85c)]=function(){const _0x4a98c3=_0x57ed21;Sprite_Battler['prototype'][_0x4a98c3(0x85c)][_0x4a98c3(0x509)](this);const _0x2792d5=this[_0x4a98c3(0x5f8)]['svBattlerName']();if(this[_0x4a98c3(0x7c5)]!==_0x2792d5){if(_0x4a98c3(0x9df)!==_0x4a98c3(0x96a))this[_0x4a98c3(0x7c5)]=_0x2792d5,this['_mainSprite'][_0x4a98c3(0x10e)]=ImageManager[_0x4a98c3(0xa7b)](_0x2792d5);else return!![];}this[_0x4a98c3(0x254)]&&this[_0x4a98c3(0x254)][_0x4a98c3(0x10e)]&&this[_0x4a98c3(0x635)]&&(this[_0x4a98c3(0x254)][_0x4a98c3(0x10e)][_0x4a98c3(0x22e)]!==this[_0x4a98c3(0x635)]['battlerSmoothImage']()&&(this[_0x4a98c3(0x254)][_0x4a98c3(0x10e)][_0x4a98c3(0x22e)]=this[_0x4a98c3(0x635)]['battlerSmoothImage']()));},Sprite_SvEnemy[_0x57ed21(0xb20)]['retreat']=function(){},Sprite_SvEnemy[_0x57ed21(0xb20)][_0x57ed21(0x403)]=function(_0x2d2ca8,_0x3a35e6,_0x28110e){const _0x2eaa1d=_0x57ed21;if(this['parent'])this[_0x2eaa1d(0x2b6)][_0x2eaa1d(0x403)](_0x2d2ca8,_0x3a35e6,_0x28110e);},Sprite_SvEnemy[_0x57ed21(0xb20)][_0x57ed21(0x5c7)]=function(){const _0x147595=_0x57ed21,_0x513dcf=this['_actor'];if(_0x513dcf){const _0x185ed5=_0x513dcf[_0x147595(0x21f)]();if(_0x513dcf[_0x147595(0xac6)]()||_0x513dcf[_0x147595(0x25d)]())this[_0x147595(0xbe2)](_0x147595(0x34b));else{if(_0x185ed5===0x3)_0x147595(0x5a2)==='xumEg'?this[_0x147595(0xbe2)](_0x147595(0x659)):_0x44dfcf[_0x147595(0x929)][_0x147595(0x31a)]=![];else{if(_0x185ed5===0x2)this[_0x147595(0xbe2)](_0x147595(0xb33));else{if(_0x513dcf[_0x147595(0x22f)]())this[_0x147595(0xbe2)]('chant');else{if(_0x513dcf['isGuard']()||_0x513dcf['isGuardWaiting']())'UJdrC'==='XcWGw'?(this[_0x147595(0x24f)]=![],_0x30d0e9[_0x147595(0xfb)][_0x147595(0x4a0)][_0x147595(0x509)](this)):this[_0x147595(0xbe2)](_0x147595(0x935));else{if(_0x185ed5===0x1)this['startMotion']('abnormal');else{if(_0x513dcf[_0x147595(0x114)]())this[_0x147595(0xbe2)](_0x147595(0xb1d));else{if(_0x513dcf['isUndecided']()){if('Auzdd'===_0x147595(0x1c7))this[_0x147595(0xbe2)](_0x147595(0x34b));else{if(this['enemy']()[_0x147595(0x75a)][_0x147595(0x463)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return _0x134ac7[_0x147595(0xb20)]['canBattlerMove']['call'](this);}}else{if(_0x147595(0x997)!=='bpNak')this[_0x147595(0xbe2)](_0x513dcf['svBattlerData']()[_0x147595(0xb18)]||_0x147595(0x34b));else{_0x2378cd+=_0x3c70a2['x']-this['damageOffsetX']();const _0x33e7d5=_0x7c8f45[_0x147595(0x134)]()*0x3/0x4;_0x269c0e=_0x40a1ce['y']+_0x33e7d5,_0x9bee5f=_0x5d5065[_0x147595(0x49b)](_0x4e9209,_0x296d59['y']+this['y']-this[_0x147595(0x8b2)]+_0x33e7d5);}}}}}}}}}}},Sprite_SvEnemy[_0x57ed21(0xb20)][_0x57ed21(0x450)]=function(){const _0x19439d=_0x57ed21;if(this[_0x19439d(0x2b6)]){if(_0x19439d(0x568)!==_0x19439d(0x52b))return this[_0x19439d(0x2b6)]['_offsetX']===0x0&&this[_0x19439d(0x2b6)][_0x19439d(0x987)]===0x0;else this[_0x19439d(0xa30)]=0x0,this[_0x19439d(0x656)]=0x0,this[_0x19439d(0x68a)]=0x0,this[_0x19439d(0x1da)]=0x0,this['_floatDuration']=0x0,this[_0x19439d(0x30e)]=0x0,this[_0x19439d(0x1ec)]=_0x19439d(0x315),this['_jumpHeight']=0x0,this[_0x19439d(0x604)]=0x0,this[_0x19439d(0x4d0)]=0x0,this[_0x19439d(0x32b)]=0x0,this[_0x19439d(0x89b)]=0xff,this[_0x19439d(0x18e)]=0x0,this[_0x19439d(0x836)]=0x0,this[_0x19439d(0x524)]=_0x19439d(0x315),this[_0x19439d(0xb25)]=0x0,this[_0x19439d(0x6a3)]=0x0,this['_angleDuration']=0x0,this[_0x19439d(0xb7e)]=0x0,this[_0x19439d(0x522)]=_0x19439d(0x315),this[_0x19439d(0xad7)]=!![],this[_0x19439d(0x1e9)]=0x0,this[_0x19439d(0x59d)]=0x0,this['_targetSkewX']=0x0,this[_0x19439d(0x7b6)]=0x0,this['_skewDuration']=0x0,this[_0x19439d(0x210)]=0x0,this['_skewEasing']=_0x19439d(0x315),this[_0x19439d(0x3d5)]=0x1,this[_0x19439d(0x65c)]=0x1,this[_0x19439d(0x5bc)]=0x1,this['_targetGrowY']=0x1,this[_0x19439d(0x6d4)]=0x0,this[_0x19439d(0x390)]=0x0,this[_0x19439d(0x94b)]=_0x19439d(0x315),this[_0x19439d(0x10d)]=0x1,this[_0x19439d(0x9d7)]=0x0,this[_0x19439d(0xab7)]=0x0,this[_0x19439d(0x14b)]=0x0,this[_0x19439d(0x6d6)]=0x0,this[_0x19439d(0x136)]=_0x19439d(0x315);}else return!![];},Sprite_SvEnemy['prototype'][_0x57ed21(0x188)]=function(){},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x372)]=Sprite_Animation[_0x57ed21(0xb20)][_0x57ed21(0x14c)],Sprite_Animation[_0x57ed21(0xb20)][_0x57ed21(0x14c)]=function(_0x11bb87){const _0x368736=_0x57ed21;return _0x11bb87[_0x368736(0xbb7)]?this['targetDistortionSpritePosition'](_0x11bb87):VisuMZ[_0x368736(0xfb)]['Sprite_Animation_targetSpritePosition'][_0x368736(0x509)](this,_0x11bb87);},Sprite_Animation[_0x57ed21(0xb20)][_0x57ed21(0xa5c)]=function(_0x45adf3){const _0x4f66f8=_0x57ed21;let _0x362f7c=_0x45adf3['x'],_0x4d3fe=_0x45adf3['y'],_0x3b2329=_0x45adf3[_0x4f66f8(0x8b2)],_0x18bc08=_0x45adf3[_0x4f66f8(0xbb7)][_0x4f66f8(0x19e)]['y'];_0x45adf3['x']=_0x45adf3[_0x4f66f8(0xa30)]+_0x45adf3['extraPositionX'](),_0x45adf3['y']=_0x45adf3[_0x4f66f8(0x656)]+_0x45adf3[_0x4f66f8(0xb95)](),_0x45adf3[_0x4f66f8(0x8b2)]*=_0x18bc08;let _0x53b9c7=VisuMZ['BattleCore'][_0x4f66f8(0x372)][_0x4f66f8(0x509)](this,_0x45adf3);return _0x45adf3['x']=_0x362f7c,_0x45adf3['y']=_0x4d3fe,_0x45adf3[_0x4f66f8(0x8b2)]=_0x3b2329,_0x53b9c7;},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x7c4)]=Sprite_AnimationMV['prototype']['updatePosition'],Sprite_AnimationMV[_0x57ed21(0xb20)]['updatePosition']=function(){const _0x1b1c7c=_0x57ed21;VisuMZ[_0x1b1c7c(0xfb)][_0x1b1c7c(0x7c4)][_0x1b1c7c(0x509)](this);if(this[_0x1b1c7c(0x2cc)]['position']===0x3){if(_0x1b1c7c(0xec)===_0x1b1c7c(0xec)){if(this['x']===0x0)this['x']=Math[_0x1b1c7c(0x413)](Graphics[_0x1b1c7c(0x6c1)]/0x2);if(this['y']===0x0)this['y']=Math[_0x1b1c7c(0x413)](Graphics[_0x1b1c7c(0x8b2)]/0x2);}else this[_0x1b1c7c(0x9e1)][_0x1b1c7c(0x1cc)](this[_0x1b1c7c(0x2f5)]);}},Sprite_Damage[_0x57ed21(0xb20)]['setupBattleCore']=function(_0x1dcc65){const _0x3a9bb4=_0x57ed21,_0x4159da=_0x1dcc65[_0x3a9bb4(0x2b3)]()||_0x1dcc65[_0x3a9bb4(0xa16)]();if(_0x4159da[_0x3a9bb4(0x178)]||_0x4159da[_0x3a9bb4(0x912)]){if(_0x3a9bb4(0x308)===_0x3a9bb4(0x308))this[_0x3a9bb4(0x552)]=0x0,this[_0x3a9bb4(0x1ff)]();else return _0x425040[_0x3a9bb4(0x716)]('ok');}else{if(_0x4159da['hpAffected'])_0x3a9bb4(0x77c)!=='FpClh'?(_0x31b7d5[_0x3a9bb4(0x34f)]['_spriteset'][_0x3a9bb4(0x735)](),_0x75dfe6[_0x3a9bb4(0xa92)]('battleAnimation')):(this['_colorType']=_0x4159da[_0x3a9bb4(0x679)]>=0x0?0x0:0x1,this[_0x3a9bb4(0x753)](_0x4159da[_0x3a9bb4(0x679)]));else _0x1dcc65[_0x3a9bb4(0x31d)]()&&_0x4159da[_0x3a9bb4(0x674)]!==0x0&&('LTZHI'===_0x3a9bb4(0x91c)?(this[_0x3a9bb4(0x552)]=_0x4159da[_0x3a9bb4(0x674)]>=0x0?0x2:0x3,this[_0x3a9bb4(0x753)](_0x4159da['mpDamage'])):(this[_0x3a9bb4(0x46e)](_0x3a9bb4(0x65f)),this[_0x3a9bb4(0x46e)](_0x3a9bb4(0xb03)),this[_0x3a9bb4(0x46e)](_0x3a9bb4(0xbc1)),this['push']('addText',_0x3addf3[_0x3a9bb4(0x455)](_0x53c009['name']())),this['push'](_0x3a9bb4(0x4c7))));}_0x4159da[_0x3a9bb4(0x67a)]&&this[_0x3a9bb4(0x9bb)]();},Sprite_Damage[_0x57ed21(0xb20)][_0x57ed21(0x6c5)]=function(_0x543844){},Sprite_Damage['prototype'][_0x57ed21(0x753)]=function(_0x3f723e){const _0x105657=_0x57ed21;let _0x495973=this['createString'](_0x3f723e);const _0x1f7691=this[_0x105657(0x88e)](),_0x4d8f6a=Math[_0x105657(0x4eb)](_0x1f7691*0.75);for(let _0x5b2d03=0x0;_0x5b2d03<_0x495973[_0x105657(0x98b)];_0x5b2d03++){const _0x526eb1=this['createChildSprite'](_0x4d8f6a,_0x1f7691);_0x526eb1['bitmap'][_0x105657(0x5f1)](_0x495973[_0x5b2d03],0x0,0x0,_0x4d8f6a,_0x1f7691,_0x105657(0x415)),_0x526eb1['x']=(_0x5b2d03-(_0x495973[_0x105657(0x98b)]-0x1)/0x2)*_0x4d8f6a,_0x526eb1['dy']=-_0x5b2d03;}},Sprite_Damage[_0x57ed21(0xb20)][_0x57ed21(0x132)]=function(_0x39d220){const _0x52eda4=_0x57ed21;let _0x34472b=Math[_0x52eda4(0x802)](_0x39d220)[_0x52eda4(0xafc)]();if(this[_0x52eda4(0x62a)]()){if(_0x52eda4(0x63a)!=='WbNPs')return _0x461302(_0x748c9b['$1']);else _0x34472b=VisuMZ['GroupDigits'](_0x34472b);}const _0x50f503=VisuMZ[_0x52eda4(0xfb)][_0x52eda4(0x8d3)][_0x52eda4(0x328)];let _0x54b233='',_0x16b594='';switch(this['_colorType']){case 0x0:_0x54b233=_0x50f503[_0x52eda4(0x2bd)]||_0x52eda4(0x154),_0x16b594=TextManager['hp'];if(_0x39d220===0x0)_0x54b233='%1';break;case 0x1:_0x54b233=_0x50f503[_0x52eda4(0x151)]||_0x52eda4(0x35a),_0x16b594=TextManager['hp'];break;case 0x2:_0x54b233=_0x50f503[_0x52eda4(0x504)]||_0x52eda4(0x14f),_0x16b594=TextManager['mp'];break;case 0x3:_0x54b233=_0x50f503['mpHealingFmt']||_0x52eda4(0x3a6),_0x16b594=TextManager['mp'];break;}return _0x54b233[_0x52eda4(0x455)](_0x34472b,_0x16b594)['trim']();},Sprite_Damage['prototype'][_0x57ed21(0x62a)]=function(){const _0x5640f4=_0x57ed21;if(Imported[_0x5640f4(0x849)]){if('vzXms'===_0x5640f4(0xb01))this['onHomeMoveEnd']();else return VisuMZ[_0x5640f4(0x202)][_0x5640f4(0x8d3)][_0x5640f4(0x432)][_0x5640f4(0x3c7)];}else{if(_0x5640f4(0x135)==='HnEHM')_0x5ef5bb['x']+=_0x27680e[_0x5640f4(0xa08)]*_0x572d3a,_0x25ea34['y']+=_0x2dcad3[_0x5640f4(0x7f6)];else return![];}},Sprite_Damage['prototype'][_0x57ed21(0x9bb)]=function(){const _0x22a9bb=_0x57ed21,_0x1b694a=VisuMZ['BattleCore'][_0x22a9bb(0x8d3)][_0x22a9bb(0x328)];this[_0x22a9bb(0x606)]=_0x1b694a[_0x22a9bb(0x27a)]['slice'](0x0),this[_0x22a9bb(0x4fd)]=_0x1b694a['CriticalDuration'];},Sprite_Damage[_0x57ed21(0xb20)][_0x57ed21(0x885)]=function(_0x48e6f6,_0x564fe2){const _0x675a49=_0x57ed21;this['_flashColor']=_0x564fe2['flashColor']||[0x0,0x0,0x0,0x0],this[_0x675a49(0x606)]=JsonEx[_0x675a49(0x5a6)](this[_0x675a49(0x606)]),this[_0x675a49(0x4fd)]=_0x564fe2[_0x675a49(0x90b)]||0x0;const _0x31562e=this[_0x675a49(0x88e)](),_0x1112f4=Math['floor'](_0x31562e*0x1e),_0x4453fd=this['createChildSprite'](_0x1112f4,_0x31562e);_0x4453fd['bitmap'][_0x675a49(0x3c0)]=ColorManager['getColor'](_0x564fe2[_0x675a49(0x3c0)]),_0x4453fd[_0x675a49(0x10e)][_0x675a49(0x5f1)](_0x48e6f6,0x0,0x0,_0x1112f4,_0x31562e,_0x675a49(0x415)),_0x4453fd['dy']=0x0;},Sprite_Damage[_0x57ed21(0xb20)][_0x57ed21(0x281)]=function(_0xf96794,_0x543379,_0x3fc406){const _0x5803ca=_0x57ed21,_0x1aa29a=Math[_0x5803ca(0x952)](this['fontSize'](),ImageManager[_0x5803ca(0xb0b)]),_0x44ba27=Math[_0x5803ca(0x4eb)](_0x1aa29a*0x1e),_0x1e6cf2=this[_0x5803ca(0x546)](_0x44ba27,_0x1aa29a),_0x35887b=ImageManager[_0x5803ca(0xe9)]/0x2,_0x3f8548=_0x1e6cf2['bitmap'][_0x5803ca(0x41c)](_0x543379+'\x20');_0x1e6cf2[_0x5803ca(0x10e)]['textColor']=ColorManager[_0x5803ca(0x285)](_0x3fc406[_0x5803ca(0x3c0)]),_0x1e6cf2[_0x5803ca(0x10e)][_0x5803ca(0x5f1)](_0x543379,_0x35887b,0x0,_0x44ba27-_0x35887b,_0x1aa29a,'center');const _0x325193=Math[_0x5803ca(0x413)]((_0x1aa29a-ImageManager[_0x5803ca(0xb0b)])/0x2),_0x84d877=_0x44ba27/0x2-ImageManager[_0x5803ca(0xe9)]-_0x3f8548/0x2+_0x35887b/0x2,_0x54f814=ImageManager[_0x5803ca(0x44c)](_0x5803ca(0x9e7)),_0x39635c=ImageManager[_0x5803ca(0xe9)],_0x509482=ImageManager[_0x5803ca(0xb0b)],_0xc46569=_0xf96794%0x10*_0x39635c,_0x483500=Math[_0x5803ca(0x4eb)](_0xf96794/0x10)*_0x509482;_0x1e6cf2[_0x5803ca(0x10e)]['blt'](_0x54f814,_0xc46569,_0x483500,_0x39635c,_0x509482,_0x84d877,_0x325193),this['_flashColor']=_0x3fc406[_0x5803ca(0x919)]||[0x0,0x0,0x0,0x0],this[_0x5803ca(0x606)]=JsonEx[_0x5803ca(0x5a6)](this['_flashColor']),this[_0x5803ca(0x4fd)]=_0x3fc406[_0x5803ca(0x90b)]||0x0,_0x1e6cf2['dy']=0x0;},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x9c8)]=Sprite_Damage[_0x57ed21(0xb20)][_0x57ed21(0x546)],Sprite_Damage[_0x57ed21(0xb20)][_0x57ed21(0x546)]=function(_0x428583,_0x461c72){const _0x53be3b=_0x57ed21;return _0x461c72=Math[_0x53be3b(0x413)](_0x461c72*1.2),VisuMZ['BattleCore'][_0x53be3b(0x9c8)][_0x53be3b(0x509)](this,_0x428583,_0x461c72);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x608)]=Sprite_StateIcon[_0x57ed21(0xb20)]['updateFrame'],Sprite_StateIcon[_0x57ed21(0xb20)][_0x57ed21(0x211)]=function(){const _0x1ea5aa=_0x57ed21;VisuMZ[_0x1ea5aa(0xfb)]['Sprite_StateIcon_updateFrame'][_0x1ea5aa(0x509)](this),this[_0x1ea5aa(0x772)]=this['_iconIndex']>0x0?0xff:0x0;},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0xbb6)]=Sprite_Weapon[_0x57ed21(0xb20)]['loadBitmap'],Sprite_Weapon[_0x57ed21(0xb20)][_0x57ed21(0xa2b)]=function(){const _0x282023=_0x57ed21;VisuMZ[_0x282023(0xfb)][_0x282023(0xbb6)]['call'](this),this['bitmap']&&(_0x282023(0x286)!==_0x282023(0x286)?_0x43aaed[_0x282023(0x746)](_0x4db0d6(_0x40bf22['$1'])):this['bitmap'][_0x282023(0x22e)]=VisuMZ[_0x282023(0xfb)][_0x282023(0x8d3)]['Actor']['SmoothImage']);};function Sprite_HpGauge(){const _0x14474b=_0x57ed21;this[_0x14474b(0xa1b)](...arguments);}function _0x4ef9(){const _0x49c490=['refreshDimmerBitmap','_executedValue','attack','JS\x20ESCAPE\x20SUCCESS','Game_Battler_onBattleStart','wqQag','ActSeq_Projectile_Icon','initMembersBattleCore','gainCurrentActionsFTB','_weaponSprite','moveBattlerHomeDistance','DJMWI','opacityStart','toString','isTickBased','hSBsF','SwitchCritical','SpDBO','OGbZl','setBattler','popBaseLine','HwySE','XPActorCommandLines','TpGaugeOffsetY','ActSeq_Mechanics_CustomDmgFormula','PortraitScale','hrssd','ActSeq_Camera_WaitForCamera','iconHeight','Parse_Notetags_Targets','uSguG','ydApy','510783quercB','isCancelled','createAutoBattleWindow','process_VisuMZ_BattleCore_Notetags','updateShadowBattleCore','battlerShadowScaleY','process_VisuMZ_BattleCore_DamageStyles','isStateResist','gaugeLineHeight','motionIdle','RYSPZ','apwqY','battleFloat','name','dying','gVgVj','softDamageCap','prototype','ANTI_TINT_UI','applyTargetFilters','requestMotionRefresh','SvMotionIdleMass-%1-%2','_currentAngle','updatePositionBattleCore','NUM','setupActionSet','ActSeq_Movement_HomeMoveToTarget','STYPES','resetResultSwitches','launchBattle','Game_Map_encounterList','log','battleAngle','Amp','VisuMZ_3_BoostAction','ActSeq_Skew_WaitForSkew','sleep','thrust','battleUIOffsetY','Sprite_Battler_setBattler','extraHeight','_lastRegenFrameCount','join','NjtYQ','boxHeight','setHome','ActSeq_Target_NextTarget','updateStateSprite','autoBattle','updateAttachmentSprites','enemy','lUKBt','createAnimationSprite','compareBattlerSprites','commandNameWindowCenter','TextColor','type','_duration','setupDamagePopup','updateOnceParallelInterpreters','VisuMZ_3_WeaknessDisplay','<CENTER>%1','power','compareEnemySprite','Game_Battler_onBattleEnd','_enemyNameContainer','sort','create','damageOffsetY','refresh','MpGaugeOffsetY','vXYQj','speed','PreApplyJS','makeTargetSelectionMoreVisible','JSDTZ','setActionState','onEscapeSuccess','gitbQ','_forcedHomeY','PostApplyAsTargetJS','victory','isCustomActionSequence','isQueueOptionsMenu','_back2Sprite','oZfPu','endAnimation','drawItemBackground','setHue','isDTB','ActionCount','VisuMZ_3_ActSeqCamera','createHelpWindow','clone','Game_Battler_performDamage','alive\x20enemies','onEnemyOk','ActSeq_Movement_WaitForSkew','WaitForOpacity','magicReflection','jumpBattler','TextAlign','isAtbChargingState','1719110wObDsZ','LAdUU','kVRTy','backColor','isMagical','Dttqq','CPEyM','actorCommandCancelTPB','_angleWholeDuration','svShadow','hTnRu','message1','updateFloat','stepForward','setBattlerBattleCore','onEtW','_battleCoreForcedElements','Shadow','popupDamage','_effectType','processRefresh','createAnimationContainer','ZcomL','AOftV','pETBi','ActSeq_Camera_Reset','updateCallMenu','isTurnBased','CmdIconAutoBattle','clearDamagePopup','becomeSTBExploited','extraPositionY','setBackgroundType','ReflectAnimation','right','onEncounter','addedBuffs','rmBfu','isAnyoneMoving','Window_BattleLog_displayActionResults','RDznI','isFightCommandEnabled','ActSeq_Weapon_SetActiveWeapon','isDead','Tpgfk','isDamagePopupRequested','JS\x20%1DAMAGE\x20%2','initMembers','battleGrow','ACZVF','CmdStyle','Game_Action_itemHit','xmIkC','WaitForMovement','WaitForFloat','lVOgB','alive\x20opponents\x20not\x20target','Window_BattleStatus_initialize','dxOvw','Scene_Battle_createAllWindows','Window_BattleLog_performCounter','Sprite_Actor_updateFrame','current\x20target','orIhv','Sprite_Weapon_loadBitmap','_distortionSprite','moveToStartPosition','yRdJe','lUYjj','Window_BattleLog_displayMiss','TpGaugeOffsetX','qfkKX','isAnyoneSkewing','_escapeRatio','evCrk','pushBaseLine','JoqYy','changeWeather','isOpponent','Destination','isCustomBattleScope','skillItemWindowRectBorderStyle','VisuMZ_2_BattleSystemOTB','isForAll','CastCertain','setImmortal','AntiTintUiElements','udrkR','AJpjc','isForFriendBattleCore','Game_Action_apply','addAutoBattleCommands','ActSeq_Mechanics_OtbOrder','StateIconOffsetX','message2','lineRect','isSpinning','ofKNF','Filename','itemHeight','OffsetY','fCdmL','requestMotion','helpWindowRectBorderStyle','DBLFJ','_baseLineStack','uDIbT','wkbvL','startMotion','glitch','NameAlwaysHidden','deathStateId','yYrJP','_damageContainer','CFZVB','Game_Troop_expTotal','yVjEQ','OverallFormulaJS','freezeFrame','updateEffectContainers','changeTurnOrderByCTB','registerDefeatedEnemy','OFPda','Sprite_Enemy_createStateIconSprite','createStateIconSprite','prev\x20target','EBHiN','softDamageCapRate','Sprite_Enemy_updateCollapse','BattleLogRectJS','iconWidth','startDamagePopup','_cache','aovOc','zstWl','slices','UGuUw','statusWindowRectXPStyle','HYtAy','updateOpacity','opTsD','iterateBattler','HrpYu','ActSeq_Mechanics_BreakShieldReset','AnGjd','redraw','checkSubstitute','UMNmf','BattleCore','VisuMZ_2_BattleSystemPTB','Game_Action_isForRandom','getAttackMotion','WESLw','removeBuff','CLOhk','requestRefresh','hitRate','performSubstitute','showHelpWindow','MessageWait','ActorCmd','hpAffected','PerformAction','parse','timeScale','NameAttachStateIcon','_flipScaleX','bitmap','tyBIw','HelpOptions','_createCursorSprite','turn','textBaseline','isDying','BattleSystemSTB','Elements','StepDistanceY','swing','isSideView','cameraOffsetDuration','dimColor2','Game_Action_isForFriend','addExtendedTroopMembers','DamageFlat','tuszP','NEJMc','PbuOx','NameAlwaysVisible','PreDamageAsTargetJS','applyItem','spinBattler','SvWeaponSolo-%1-%2','alterBreakShield','_surprise','battleEnd','Game_BattlerBase_isStateResist','Game_Action_clear','IconStypeNorm','encounterList','displayStartMessages','rgldm','POVAQ','border','createString','setFullActionsPTB','lineHeight','tJYQY','_homeEasing','ActSeq_Mechanics_RemoveBuffDebuff','ActSeq_Mechanics_ArmorPenetration','AS\x20TARGET','isCharging','ActSeq_Motion_FreezeMotionFrame','drawItemStatusXPStyle','alphabetic','MaxLines','preemptive','isBypassDamageCap','checkShowHideBattleNotetags','equipSlots','itemLineRect','currentSymbol','checkExtendTroopCompatibility','isAnimationShownOnBattlePortrait','kcXgF','_cacheTextWidth','_handlers','ScaleToFit','_homeDuration','targetSpritePosition','_regionBattleback1','%1Damage%2JS','-%1\x20MP','performFlinch','hpHealingFmt','zUNWP','BattleManager_startAction','-%1','ParseWeaponNotetags','_stateIconSprite','isAnyoneFloating','createActionSequenceProjectile','Sprite_Battler_updateMain','Text','_battleCoreNoElement','VariableHeal','QrnzM','ORhqJ','process_VisuMZ_BattleCore_PluginParams','maxItems','CFNGN','charged','battleSkew','spriteId','command301_PreBattleEvent','Style','applyHardDamageCap','FocusY','LeMzm','_armorPenetration','battleCoreTpbMainPhase','setVisibleUI','_actionBattlers','rwGJZ','globalAlpha','allBattleMembers','gJxTJ','gaugeX','uKuDj','_ptbActionCost','STB','loadBattleback2','offsetY','missed','IconStypeMagic','visualHpGauge','oUhnH','guardSkillId','refreshActorPortrait','VisuMZ_2_WeaponSwapSystem','fnordRemovedStates','setupFont','isEscapeCommandEnabled','AHNRk','cDheE','createBattleFieldContainer','BattleManager_endBattle','Qicff','ActSeq_Mechanics_StbExtraAction','updateFlip','mWBDP','wCQjw','_immortal','cancel','makeTargetsBattleCore','_opacityDuration','collapse','HelpAutoBattle','CgPGh','ShowPopup','NextTurn','Formula','members','bLbcs','_defeatedEnemies','jNnQw','CmdIconOptions','shift','Game_BattlerBase_canAttack','getItemDamageAmountTextOriginal','updateGrow','scale','setBattleImpactTimeScale','finishActorInput','getNextSubject','battleMembers','AutoBattleMsg','etxhQ','helpAreaHeight','ibJpp','ActSeq_Impact_MotionTrailRemove','addPartyCommand','sliceMax','setActorHome','adjustWeaponSpriteOffset','dEsMm','xFzQQ','Override','PreRegenerateJS','PostStartActionJS','displayReflection','toLowerCase','displayType','DEPkg','ActSeq_Camera_Clamp','displayActionResults','SwitchMissEvade','onDatabaseLoaded','TP_Rate','RequiresDefeat','ActSeq_Inject_AnimationPauseResume','SkewX','NewPopupBottom','displayTpDamage','Index','removeImmortal','addSingleSkillCommands','WGTNa','CheckVisibleSwitchNotetags','snapForBackground','WavyR','setMoveEasingType','Auzdd','ActSeq_Mechanics_BtbGain','battlerShadowScaleX','ducwV','onGrowEnd','addChild','setupBattlebackBattleCore','kMZeJ','gainMp','DamageType%1','getSkillTypes','Game_Party_removeActor','bNiIS','setLastPluginCommandInterpreter','setHelpWindow','_tempEquipCheck','_frame','UNTITLED','isPreviousScene','_targetFloatHeight','VariableID','AsUser','AnimationID','_totalValue','atbInterrupt','ActionEnd','ARRAYSTRUCT','StatusWindowAttachmentFront','removeStatesAuto','FollowTurn','weaponImageId','JS\x20%1START\x20TURN','battleCommands','_multipliers','_skewX','performTpbActiveCheckSwitch','qnIXz','_floatEasing','updateStart','formula','commandSymbol','open','_createCursorArea','setupOversaturateImpactFilter','_commonEventIDs','StatusWindowAttachmentBackOffsetX','updateScale','trim','invokeAction','dead\x20battlers','onEncounterBattleCore','pRpaL','xPxRn','stepFlinch','visibilityState','ActSeq_Horror_NoiseRemove','createMiss','createBattleFieldBattleCore','_angleDuration','CoreEngine','updateWaitMode','pRNly','setupHpGaugeSprite','UAoYN','updateStateIconSprite','%1StartTurnJS','_actorSprites','eFqfF','ActSeq_Movement_Float','kdrfN','getMenuImage','ytdMp','_hpGaugeSprite','_skewWholeDuration','updateFrame','repositionEnemiesByResolution','385jcxhyW','_homeY','activate','active','cLTeH','_preBattleCommonEvent','addAutoBattleCommand','AutoBattleRect','updateForceAction','isItemCommandEnabled','ActSeq_DB_DragonbonesMotionAni','Game_Actor_makeActionList','stateMotionIndex','battleMove','ShowFacesListStyle','gainTp','Wave','WeYuY','clearWeaponAnimation','tone','command339','pojBe','YKdCy','addChildToUiContainer','DisablePartyCmd','ReflectPlayback','unshift','smooth','isChanting','clearFreezeMotionForWeapons','autoSelectPriority','skew','Scene_Battle_selectNextCommand','battlerSmoothImage','displayEvasion','vSpKv','rcQPG','drawItemStyleIconText','pauseInjectAnimation','XoEhW','WRJOt','applyAngleChange','lukEffectRate','BindCommonEventKeysForObj','turnOrderChangeOTB','_cursorSprite','actor','emerge','ScaleX','_updateClientArea','moveBattlerDistance','isHiddenSkill','skillWindowRect','sortDamageSprites','Scene_Battle_initialize','BattleManager_processDefeat','ShowAddedDebuff','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','addNewState','applyGlobalCommonEventNotetags','_requestRefresh','padding','ResetFocus','canInput','GroIu','_mainSprite','Parse_Notetags_Action','StyleOFF','pSbVJ','jQryB','frameDelay','battleback2Name','MotionFrameWait','createEnemyNames','isActing','onBattleStartOnceParallels','JS\x20%1REGENERATE','ForceExploiter','Pbpfb','deadMembers','displayAddedStates','createAttachmentSprites','aDIfz','ShowEnemyGauge','QiiSx','ActSeq_Motion_ClearFreezeFrame','DistanceY','findTargetSprite','extraPositionX','skill','isDeathStateAffected','isForRandom','showAnimation','%1RegenerateJS','Game_Troop_setup','LznqV','battleSpin','_drawTextOutline','StepDistanceX','isSkewing','removeAnimation','isSkillItemWindowsMiddle','canMove','CriticalColor','isFastForward','oKZvg','_animationSprites','maxCommands','Scene_Battle_onEnemyCancel','_dimmerSprite','setupIconTextPopup','iIUXQ','PortraitScaleBorderStyle','autoBattleUseSkills','getColor','gKSgw','isAutoBattleCommandAdded','ActSeq_Mechanics_CtbOrder','drawLineText','PostApplyJS','opponentsUnit','_svBattlerSprite','ihdXv','BattleDefeatJS','DamageRate','iqQLD','finishActionSet','oYPuj','uDXMb','battlelog','Window_BattleLog_pushBaseLine','vrkVp','PostEndBattleJS','canGuard','OffsetX','offsetX','JfQhQ','OLwVP','remove','Window_ActorCommand_initialize','battleInjectPrep','displayCurrentState','performCounter','battleSpriteSkew','processPostBattleCommonEvents','_item','startActorCommandSelection','Setting','DzFwd','vYLjO','ActSeq_Mechanics_VariablePopup','lspFd','changeBattlebacks','NameFontSize','PostDamageJS','focus','Window_BattleLog_performActionEnd','mainSpriteScaleX','OWjdS','CmdTextAlign','getNextDamagePopup','setBattleZoom','removeChild','parent','Iuhom','Scene_Battle_commandFight','Post','shouldPopupDamage','drawItemStatus','yeEPI','hpDamageFmt','suosV','pLzJS','MWiST','createStateSprite','WaitForAnimation','updateCustomActionSequence','updateUiContainerPosition','getBattlePortraitOffsetX','SceneManager_isSceneChanging','list','bCiUL','OffsetAdjust','NwFVz','AghuU','_animation','FQgYm','Xqrrb','KvdIK','Scene_ItemBase_applyItem','drain','LQbLM','StatusWindowSkinFilename','mBGxa','clearHorrorEffects','visible','processEscape','notFocusValid','Game_Battler_performEvasion','initElementStatusCore','addState','recoverAll','DistanceAdjust','skbgy','GIAYe','currentAction','criticalDmgRate','createShadowSprite','Width','BattleManager_processVictory','message4','CmdIconItem','isAnyProjectilePresent','dqjGS','ActSeq_Impact_TimeStop','createBattleField','command119','actorCommandSingleSkill','Scene_Battle_createPartyCommandWindow','worldTransform','partyCommandWindowRectBorderStyle','Ztlen','PreDamageJS','ParseClassNotetags','updateMotionCount','_target','_uiContainer','PostApplyAsUserJS','commandName','repZX','Game_Battler_forceAction','textSizeEx','onAngleEnd','Window_BattleLog_displayMpDamage','createInnerPortrait','RevertAngle','createDamageSprite','ActSeq_Mechanics_CtbSpeed','dkZHz','makeSuccess','pBSki','ActSeq_Projectile_Picture','removeActor','JS\x20%1END\x20BATTLE','ParseStateNotetags','Pnbhx','drawTextEx','qUtaB','equips','SceneManager_push','updateMain','_floatWholeDuration','Scene_Battle_skillWindowRect','alive\x20battlers','reserveCommonEvent','Game_Battler_startTpbTurn','Enemy','canUse','Linear','updateBattlebackBitmap2','Parse_Notetags_TraitObjects','inBattle','processBorderActor','SmoothImage','StartTurnWait','_animationCount','isAlive','buffRemove','displayHpDamage','NVkfn','ShowTpDmg','PreEndTurnJS','onEscapeFailure','sqlfn','Window_ItemList_maxCols','Scene_Battle_terminate','ParseEnemyNotetags','Damage','ActSeq_Impact_BlueRedInvert','LmkbX','_jumpWholeDuration','AttackAnimation','hue','Game_Battler_performMiss','ftuMd','Game_Map_setupBattleback','GwoVP','Qzfzw','GijKi','ymEDd','WffmN','isNonSubmenuCancel','AGI','jsOneForOne','_shadowScaleX','Window_Options_statusText','Scene_Battle_updateBattleProcess','ShowCurrentState','XPActorDefaultHeight','showPortraits','NryBV','Scene_Boot_onDatabaseLoaded','LastSelected','isqap','Sprite_SvEnemy','_motionType','yJivx','setCommonEvent','loop','Interrupt','createTargetsJS','createTroopNote','walk','ShowReflect','fiNrD','FullActions','_scene','gpgbR','jxrWB','VKySL','cancelActorInput','MOTIONS','BDLKs','_jumpHeight','_forcedBattlers','VVLeL','okTargetSelectionVisibility','+%1','XPSpriteYLocation','ActSeq_Inject_AnimationEnd','wtypeId','refreshBattlerMotions','getAttackMotionSlot','selectNextCommand','CmdIconFight','moveToStartPositionBattleCore','ActionSkillMsg1','ActSeq_Movement_WaitForSpin','Window_BattleLog_displayFailure','compatibilityVisible','DefaultDamageStyle','isPTB','HalfActions','EvLJU','setHandler','randomInt','IjJff','checkTpbInputClose','PostEndActionJS','ShowWeapon','addTextToCombatLog','Sprite_Animation_targetSpritePosition','onBattleEnd','revertTpbCachedActor','Sprite_Battler_damageOffsetY','wjFWj','ActSeq_Impact_ShockwaveCenterTargets','epQSU','updateShadowPosition','BattlebackScale','updateInterpreter','HLyJi','createWeather','changeAtbCastTime','damageContainer','_lastEnemy','KLLdN','skewBattler','CreateCommonEventKeys','DefaultStyle','makeAutoBattleActions','regionId','Spriteset_Battle_createLowerLayer','isActiveTpb','battlerSprites','RegExp','_backAttachmentSprite','faceWidth','aliveMembers','ActSeq_Mechanics_StbExploit','weaponTypes','_growWholeDuration','ClearBattleLog','rTbjG','command301','command283','placeActorName','ParseArmorNotetags','process_VisuMZ_BattleCore_Action_Notetags','ActSeq_Mechanics_AnalyzeWeakness','addBattleCoreAutoBattleStartupCommand','DPaSz','alive\x20actors\x20not\x20target','Game_Action_needsSelection','addEscapeCommand','_battleCoreBattleStartEvent','createLowerLayer','HiBtR','_list','ZugpL','WeaponTypeID','_battlePortrait','battleSys','+%1\x20MP','custom','NnwhC','svAnchorX','Shadow2','PreStartBattleJS','YDkje','battleDisplayText','WaitForScale','setupMotion','MAT','createJS','alterChange','tUjGS','actorId','setEventCallback','abnormal','isAnyoneSpinning','EzqjX','isBuffAffected','apply','ScaleY','NyTlF','dead\x20opponents','_animationContainer','clearFreezeMotion','textColor','checkAutoCustomActionSequenceNotetagEffect','auIpT','resize','PreEndActionJS','_enemyWindow','mainSpriteWidth','DigitGroupingDamageSprites','_injectAnimationSprite','BackColor','AutoBattleBgType','applyForcedGameTroopSettingsBattleCore','Game_System_initialize','qFYtW','gYbQm','ActSeq_Angle_WaitForAngle','MAqvx','pRhFG','Game_Map_battleback2Name','_activeWeaponSlot','Game_Battler_clearDamagePopup','_growX','HelpEscape','TayMa','ARRAYEVAL','Scene_Map_initializeAfter','updateStatusWindowPosition','BattleManager_initMembers','setSvBattlerSprite','updateEffectsContainer','VisuMZ_3_ActSeqProjectiles','BattleManager_startInput','LPNyE','battleCommandName','windowskin','updateShadowScale','debuffAdd','playEnemyAttack','shcqv','SlotID','_appeared','ActSeq_Mechanics_OnceParallel','Window_BattleLog_performSubstitute','PopupDuration','Game_Battler_onTurnEnd','Scene_Battle_helpWindowRect','magicSkills','sWKLe','battleLayoutStyle','playCancel','Spriteset_Battle_update','pqUiA','Window_BattleLog_displayCritical','applyVariance','xiHNp','NameOffsetX','JS\x20BATTLE\x20VICTORY','autoMeleeSingleTargetActionSet','some','collapseType','oSRtj','CmdIconEscape','ShowMissEvasion','actionBattleCoreJS','_weather','ParseActorNotetags','update','startMove','isStatusAffected','onDisabledPartyCommandSelection','_attackAnimationId','ActSeq_Mechanics_Multipliers','WaitForAngle','zDjfG','ShowActorGauge','ActSeq_Horror_NoiseCreate','ycJFJ','%1Apply%2JS','pVOdV','KaZos','Window_BattleLog_performDamage','_wtypeIDs','BattleManager_onEncounter','round','States','center','PostDamageAsUserJS','ActSeq_Movement_HomeReset','PostDamage%1JS','updateShadow','repeatTargets','updateBossCollapse','measureTextWidth','displayCritical','VisuMZ_4_BreakShields','CastAnimation','alterType','updateAngleCalculations','Sprite_Enemy_updateStateSprite','_branch','resetFontSettings','VisuMZ_2_BattleSystemETB','troop','repeats','maxCols','adjustFlippedBattlefield','ShowAddedState','BattleSystemBTB','LatTq','ActSeq_Angle_Reset','ActSeq_Inject_WaitForInjectAni','undecided','shadow','setupDesaturateImpactFilter','QoL','makeTargets','jsScaleUp','POST-','blockWidth','centerFrontViewSprite','applyGlobal','FaGiK','Lenbs','ActSeq_Animation_ShowAnimation','updateSkew','damage','_autoBattleWindow','CheckMapBattleEventValid','qQWMm','changeAtbChargeTime','BattleManager_updatePhase','updateWeather','DKTyy','addGuardCommand','commandAutoBattle','CriticalHitRate','pJTew','_forceAction','targetActionSet','DualWield','loadSystem','ZsUzm','isChangingOpacity','Scene_Battle_createActorCommandWindow','inHomePosition','Game_Battler_regenerateAll','clHHS','performActionEndMembers','TimeScale','format','clearMotion','getBattlePortraitOffsetY','rzlTe','zSUnZ','_targetGrowY','damageStyle','isPhysical','Window_BattleLog_update','QYdeU','HpGaugeOffsetX','startPartyCommandSelection','VariableDmg','displayMiss','match','addBuff','bottom','pcCPH','canUseItemCommand','isAutoBattle','CYqKu','Game_BattlerBase_die','isATB','counterAttack','nQTBd','push','oFSsy','fCJyh','requestDragonbonesAnimation','head','escape','effects','rUImg','zYMWr','children','subject','setCustomDamageFormula','process_VisuMZ_BattleCore_CommonEventKeys','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','wQwyh','pattern','MANUAL','ulxcj','Game_Action_setGuard','Game_Interpreter_command283','Sprite_Enemy_updateBossCollapse','CriticalHitFlat','updateShadowVisibility','sNuiX','Spriteset_Battle_createBattleField','needsSelection','isAnyoneInjectAniPrepping','initBattlePortrait','Game_BattlerBase_initMembers','displayReflectionPlayBack','glqHr','ActionSequence','Game_Interpreter_terminate','statusText','DefaultSoftScaler','ytTJh','Scene_Map_updateCallMenu','createBattleUIOffsetY','_skillIDs','FtEmG','TiSYZ','qQxuK','RmdOL','zspJz','isSTB','min','scope','_reflectionTarget','setupZoomBlurImpactFilter','ActSeq_Movement_Jump','Window_BattleLog_refresh','_flinched','portrait','_windowLayer','drawEnemyName','Sprite_Battler_damageOffsetX','parseForcedGameTroopSettingsBattleCore','addCommand','oyjqd','Sprite_Battleback_adjustPosition','JdUeP','iPdpg','physical','rasvn','Name','Actions','Game_Interpreter_command301','_makeFontNameText','MotionType','loadEnemy','_cursorArea','HitRate','bozJM','213760RLyvna','isFlipped','FrontViewSelect','makeData','frameCount','default','endBattle','EFFECT_COMMON_EVENT','createCommandVisibleJS','iExzM','attackAnimationId2','isAttack','Window_Options_addGeneralOptions','isPreviousSceneBattleTransitionable','Mute','getFullActionsPTB','wait','isSkill','alive\x20battlers\x20not\x20target','wacwR','COMBAT\x20LOG','SnMxs','ActSeq_Movement_WaitForJump','isForRandomBattleCore','drawItemImageXPStyle','_jumpDuration','zViVl','charging','createDamageContainer','die','ParseItemNotetags','jump','updateAction','_shadowScaleY','dnprN','string','AutoBattle','ShowAddedBuff','regenerateAll','_updateCursorFilterArea','PostDamageAsTargetJS','ForceRandom','commandOptions','dead\x20actors','HomePosJS','Sprite_Enemy_update','hFHyT','_shadowSprite','waitForMovement','getAttackWeaponAnimationId','uSCYJ','_back1Sprite','floor','zIZqY','attackAnimationIdSlot','VisuMZ_2_PartySystem','jrKag','Scene_Battle_update','Variable','autoMeleeMultiTargetActionSet','addFightCommand','SkillItemStandardCols','setupChild','setupNegativeImpactFilter','1:1','HRiSc','sortEnemies','close','BattleStartEvent','battleProjectiles','_flashDuration','Game_Action_evalDamageFormula','split','setValue','isBattleSys','FfPyp','_motionCount','mpDamageFmt','currentClass','gainHalfActionsPTB','ArRedRate','_battleCoreBattleResumeAfter','call','NameLegacy','SKILLS','EscapeFail','uiMenuStyle','indexOf','left','pbbma','Window_BattleLog_performMagicEvasion','HelpFight','AUTO\x20BATTLE','TargetLocation','addSingleSkillCommand','zOwlS','attackMotions','getHardDamageCap','createPartyCommandWindow','HpGauge','Game_Enemy_transform','_borderPortraitTargetX','canAttack','ResetOffset','addImmortal','FUNC','lhexJ','_angleEasing','VMTBB','_opacityEasing','Window_BattleLog_performRecovery','addedStateObjects','OUFVN','svBattlerAnchorX','PostRegenerateJS','substitute','cmeIy','clearResult','eraseState','ActSeq_Impact_Oversaturate','_autoBattle','State-%1-%2','_regionBattleback2','stateRate','changeCtbCastTime','<CUSTOM\x20ACTION\x20SEQUENCE>','isBattleMember','Sprite_Actor_updateBitmap','criticalDmgFlat','turnCount','customDamageFormula','XgHaq','svBattlerAnchorY','registerCommand','battleAnimation','exit','Window_BattleLog_performAction','startSkew','drawActorFace','KUMmo','ufWNm','eUhxa','BattleManager_inputtingAction','createChildSprite','Window_BattleEnemy_initialize','xmqEH','Window_BattleLog_clear','bIpTP','Spriteset_Battle_updateActors','placeGauge','base','AcHEr','tYcAw','#ffffff','updateAttachedSprites','_colorType','action','MMcnj','angleDuration','PreDamageAsUserJS','isETB','FuESm','battleJump','drawItemStatusListStyle','skills','playOnceParallelTroopPage','includes','LPKAA','updateStateSpriteBattleCore','ActSeq_Movement_HomeMoveBy','sdcVq','BVxnZ','commandStyleCheck','Window_BattleLog_displayEvasion','PreApplyAsUserJS','PreApply%1JS','_tpbState','FSrmC','changeCtbChargeTime','CriticalHitRateJS','Koism','ZExHr','ZENxY','options','Scene_Battle_updateStatusWindowPosition','VtSGM','Window_BattleLog_performActionStart','NTDzy','unchanged','commandNameWindowDrawBackground','createContents','repositionCancelButtonBorderStyle','opzhA','makeSpeed','isOptionsCommandAdded','pow','adjustPosition_ScaleUp','_homeX','ShowMpDmg','isWaiting','ConfigManager_makeData','MP_Flat','cameraDuration','setupMotionBlurImpactFilter','ActSeq_BattleLog_WaitForNewLine','VisuMZ_3_ActSeqImpact','_motionSpeed','checkShowHideSwitchNotetags','Scene_Battle_onActorCancel','_updateFilterArea','isSkipPartyCommandWindow','mainFontSize','BattleEndEvent','Scene_Battle_selectPreviousCommand','lGrtU','swapEnemyIDs','BattleManager_isTpbMainPhase','EscapeSuccessJS','SkillItemBorderCols','oWnYX','process_VisuMZ_BattleCore_jsFunctions','fLOip','battler','ActSeq_Zoom_Reset','isDisplayEmergedEnemies','nameY','wholeActionSet','CommandAddOptions','EbCXC','canAddSkillCommand','_skewY','inlGS','Sprite_Battler_setHome','isCommonEventReserved','executeDamage','xumEg','ActSeq_Horror_GlitchCreate','BattleManager_startBattle','hqeIr','makeDeepCopy','removeAnimationFromContainer','UzNZc','BTestBypass','skillTypes','Radius','drawTextTopAligned','removeDamageSprite','drawGauge','isPartyCommandWindowDisabled','addAnimationSpriteToContainer','processVictory','isForOpponentBattleCore','EXODT','DvFZN','RFblL','replace','Scene_Battle_stop','ActiveTpbOptionsMessage','OhNnH','arRedFlat','clearBattlerMotionTrailData','_targetGrowX','mhp','show','AttachStateOffsetX','BGGwB','KOiwx','applyResultSwitches','isMagicSkill','WaitCount','_battlerHue','Mechanics','refreshMotion','BindCommonEventKeysForGroup','WEAPON\x20SWAP','Scene_Battle_windowAreaHeight','forceWeaponAnimation','alive\x20battlers\x20not\x20user','StatusWindowAttachmentBack','Scene_Battle_startActorSelection','isShownOnBattlePortrait','battlerName','_speed','BxPqX','performMiss','ActionEndUpdate','18rvkzUB','TRNZO','stopInjectAnimation','updateBorderStyle','Skill-%1-%2','extendTroopMembers','ksTux','QpABm','bLNTU','performActionEnd','drawItem','_effectsContainer','Cvwkz','onBattleStart','drawIcon','ActSeq_Mechanics_PtbAlterCost','onRegeneratePlayStateAnimation','clearOnceParallelInterpreters','isBattleTest','updateBattlerContainer','helpWindowRect','setBattlePortrait','context','TmWIE','Game_Party_addActor','startActorSelection','reverse','Window_BattleLog_displayTpDamage','drawText','changeBattlerOpacity','SkillsStatesCore','clearElementChanges','Game_Interpreter_updateWaitMode','_linkedSprite','PreStartActionJS','_actor','HelpSkillType','createActorCommandWindow','isSideButtonLayout','_skewEasing','updateCommandNameWindow','ArBhY','LwhTJ','basicGaugesY','Angle','startAction','onEnemyCancel','_jumpMaxHeight','addDebuff','_flashColor','displayMpDamage','Sprite_StateIcon_updateFrame','Debuffs','alterPriority','YCdWD','duration','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','PostApply%1JS','changeInputWindow','Sprite_Battler_isMoving','BBcto','_createClientArea','_actions','SkillItemMiddleLayout','commandFight','createCommandNameWindow','uEmBX','usePremadeActionSequence','ActSeq_Camera_Offset','_customDamageFormula','updateHomeMove','TP_Flat','AhzCC','SideviewSelect','ActSeq_Impact_Desaturate','%1EndBattleJS','dkiur','hasStaticSvBattler','jvOdg','GuardFormulaJS','getCommonEventIdWithName','lUrfI','linkSprite','arPenFlat','efruD','useDigitGrouping','mBXat','HeviJ','PrioritySortActors','bind','innerWidth','isJumping','Frame','ActSeq_Motion_MotionType','Window_BattleLog_performMiss','isAlwaysVisible','_battler','tpbActorSwitchConditionsMet','QoGJh','addSkillCommands','onTurnEnd','WbNPs','alignBattleCoreDamageSprite','CTB','_partyCommandWindow','_text','OwLVV','WRRwM','onSkewEnd','refreshStatusWindow','AlsiT','showEnemyAttackAnimation','JxJDD','_skillWindow','263958CtaIzp','Scene_Battle_startPartyCommandSelection','LwOBM','ActSeq_Mechanics_SwapWeapon','riSJz','Game_Enemy_setup','canAttackBattleCore','VisuMZ_1_MainMenuCore','noise','setupRgbSplitImpactFilter','kbJdu','makeActionOrders','AddOption','dataId','expTotal','_baseY','fZpjw','singleSkill','dead','_updateCursorArea','placeStateIcon','_growY','ActSeq_Movement_FacePoint','YYZgF','fnordAddedStates','getLastPluginCommandInterpreter','ActSeq_Horror_Clear','hasSkill','setCursorRect','_forcedBattleLayout','createActorCommandWindowBattleCore','setupBattleback','boxWidth','_deathStateApplied','destroyDamageSprite','drawBackgroundRect','top','WEtdD','isCertainHit','hitFlat','isTpb','EasingType','doesPageHaveOnceParallelStart','AnchorY','ActSeq_Mechanics_EnemyEscape','mpDamage','_enemyId','updateHpGaugePosition','itemEffectAddNormalState','pointX','hpDamage','critical','makeHpDamageText','removedBuffs','pVekL','SqVRU','statusWindowRectDefaultStyle','vEAQS','contents','zSKhV','contentsOpacity','ActionItemMsg','_checkOn','performRecovery','missle','allowRandomSpeed','skillItemWindowRectMiddle','_floatHeight','performEvasion','ActSeq_Movement_MoveBy','BattleManager_checkBattleEnd','Armor-%1-%2','AllowCollapse','PreEndBattleJS','filters','targetObjects','Sprite_Actor_createStateSprite','gainCurrentActionsETB','RaGwn','xaMtL','CheckSkillCommandShowSwitches','MAXHP','forceAction','getConfigValue','removedStateObjects','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','Duration','WaitForSpin','ConfigManager_applyData','adjustPosition','isCTB','evalDamageFormula','_targetAngle','_frontAttachmentSprite','updateCancel','PostStartBattleJS','fillRect','updateBattleProcess','processDefeat','canBattlerMove','zpyDe','HvnnG','anchorY','_callSceneOptions','partyCommandWindowRect','windowPadding','zxiLt','lIAeR','regenerateAllBattleCore','bJXbi','JIyHx','LRQXo','enemyId','updateHelp','StatusWindowAttachmentFrontOffsetY','WaitForZoom','isOptionsCommandEnabled','getBattlePortraitFilename','isTriggered','getWtypeIdWithName','ActSeq_Weapon_ClearActiveWeapon','createBattleUIOffsetX','width','ZLVpo','setFrame','drawItemImagePortraitStyle','setup','startEnemySelection','DzbZe','lUNZI','ActSeq_DB_DragonbonesTimeScale','ActSeq_BattleLog_DisplayAction','updateActors','sliceMin','MDF','OHkrx','removeState','MnPdZ','autoBattleAtStart','font','TQOsD','_growDuration','surprise','_homeWholeDuration','WaitForNewLine','dimColor1','map','ActSeq_Movement_BattleStep','endAction','ARRAYNUM','isBattleCoreTargetScope','BattleManager_onEscapeSuccess','addGeneralOptions','HcahE','performMoveToTargets','AutoBattleCancel','setupBlueRedInvertImpactFilter','eXNYs','ActSeq_Impact_Negative','Game_Temp_requestAnimation','stop','ActSeq_Projectile_Animation','FFEWC','Game_Actor_setup','isForFriend','clearRect','JS\x20%1END\x20ACTION','statusTextAutoBattleStyle','filterArea','_pattern','Scene_Battle_onActorOk','GOnjx','HP_Rate','DisplayAction','weApC','addCombatLogCommand','BattleLog','Dwatc','BattleLayout','eKrrE','zrMOA','_onceParallelInterpreters','ActSeq_BattleLog_Clear','displayAction','float','setupShockwaveImpactFilter','startSpin','isBattlerGrounded','ShowPortraits','EJuRD','adjustPosition_ScaleToFit','isOpen','innerHeight','WaitCount2','battleUIOffsetX','performCollapse','_borderPortraitDuration','isBTB','EFttQ','applyArmorModifiers','autoBattleStyle','\x5cI[%1]%2','pvLsr','createBorderStylePortraitSprite','UmXaj','slice','hide','getInputButtonString','extraPositionScaledY','nGNkI','commandNameWindowDrawText','Exploited','isBreakStunned','applyBattleCoreJS','ArPenFlat','getHalfActionsPTB','performJump','item','Dyrng','_targets','createUIContainer','VisuMZ_2_BattleSystemCTB','QZnCp','PostEndTurnJS','eUriO','zKqUN','_namesCount','JSON','kyxyg','eNZaX','isTpbMainPhase','ARRAYJSON','performActionMotions','MP_Rate','VisuMZ_1_ElementStatusCore','displayChangedBuffs','EnableDamageCap','BattleManager_startTurn','updatePointAnimations','isGuardWaiting','chantStyle','VzPDN','selectNextActor','leXGy','gainHp','ImoRK','StyleON','destroy','attachSpritesToDistortionSprite','byPBk','ForceDeath','processActorCommandCancelTPB','CiEGl','rroOz','Qwscq','performAttackSlot','battleCorePreBattleCommonEvent','setBattleCameraPoint','qWHty','isImmortal','AkotY','forceMotion','isVisualHpGaugeDisplayed','CzvkY','autoBattleStart','updateRefresh','AutoMeleeAoE','eMElT','createDigits','jDNKe','_battleCoreAddedElements','traitSet','APIvO','Window_BattleLog_performCollapse','Scale','note','AllowRandomSpeed','FaceDirection','performSTBExploiter','setLetter','JpudF','iMEuy','Scene_Battle_onEnemyOk','wqPPT','BDNsF','return\x200','onJumpEnd','Window_ActorCommand_setup','Window_BattleLog_performReflection','_battleLayoutStyle','ChargeRate','text','_dragonbonesSpriteContainer','windowAreaHeight','uVTNA','AnchorX','start','isDebuffAffected','inputtingAction','opacity','index','tcgfa','_padding','MDuWK','xwYnJ','useItem','AddHpGaugeOption','NameAlwaysSelectOnly','hidden','FpClh','processBattleCoreJS','maxLines','QxfPC','mmp','getDualWieldTimes','ActSeq_Camera_FocusPoint','CastPhysical','_visualHpGauge_JustDied','battleCamera','createKeyJS','uhhbr','SvBattlerMass-%1-%2','CommandWidth','performReflection','ConvertParams','qTeZo','Window_BattleLog_displayCurrentState','maxTp','CommandVisible','Weapon-%1-%2','ActSeqImpact','isAnyoneInjectAnimating','updateTargetPosition','_itemWindow','alive\x20enemies\x20not\x20target','addOnceParallelInterpreter','DknIr','DKspK','all\x20targets','StartTurnShow','ActionEffect','Sprite_Actor_setActorHome','isOkEnabled','DEF','mxyOE','ATTACK','actorCommandAutoBattle','callOptions','SvBattlerSolo-%1-%2','waitCount','YkijH','onSelectAction','AoUsO','_damages','checkSceneBattleTransitionable','_enemy','Pre','MIN_SAFE_INTEGER','performMagicEvasion','callNextMethod','UZxZN','etzsl','_methods','Xcgkp','xkDHi','_lines','3115868aykJaJ','_targetSkewY','BattleCmdList','VisuMZ_2_HorrorEffects','applyEasing','process_VisuMZ_BattleCore_PreBattleCommonEvent','NEGnH','uiInputPosition','version','BattleManager_cancelActorInput','rVhso','RBgYd','BattleVictoryJS','MUFzj','parameters','Sprite_AnimationMV_updatePosition','_battlerName','StateIconOffsetY','process_VisuMZ_BattleCore_CreateRegExp','playOnceParallelInterpreter','wlbZm','_floatDuration','Game_Interpreter_PluginCommand','ActSeq_Animation_AttackAnimation2','weatherType','stepBack','isFrameVisible','updateBattlebackBitmap1','pages','qnTVK','switchToWeaponType','HWkIP','DpMYq','adjustPosition_ScaleDown','isFTB','removeHorrorEffect','Immortal','PopupOffsetY','uOFYc','Turns','arRedRate','QCnoB','Game_Action_itemEffectAddAttackState','createSeparateDamagePopups','StartTurnMsg','DBZwd','Enable','friendsUnit','_skewDuration','StatusWindowSkinHide','_stateSprite','KtTTa','JS\x20%1END\x20TURN','CalcActionSpeedJS','updatePadding','updateEventMain','Targets','wOurV','Game_Action_setAttack','abMuP','_emptyBitmap','animationShouldMirror','eLjLF','moveBattlerToPoint','applyImmortal','PopupShiftY','displayBuffs','BattleManager_endAction','applyFreezeMotionFrames','WciaI','constructor','tmDVg','EscapeSuccess','ShowFailure','ZDOof','PopupPosition','isOnCurrentMap','abs','gainBravePoints','startTpbTurn','updateBorderSprite','isFloating','auto','commandEscape','PartyCmd','bQonB','NTvjH','%1EndActionJS','Sprite_Battler_initMembers','clear','ActSeq_Animation_PlayAtCoordinate','createAttachedSprites','addChildToBack','alterCost','pcNbq','kUTDP','damageOffsetX','process_VisuMZ_BattleCore_Failsafes','Sprite_Enemy_initVisibility','setAttack','bgType','Mirror','numTargets','2RlsEoV','17788ldlxti','Window_BattleLog_performEvasion','yHQaE','tpbCommandFight','pHOlc','reduce','freezeTime','growBattler','isRightInputMode','createPartyCommandWindowBattleCore','svBattlerShadowVisible','PARTY','_motion','retreat','StatusWindowAttachmentBackOffsetY','iSezN','BYppd','getBattlePortrait','zBYlI','BARE\x20HANDS','Fayvx','battleback1Name','animationNextDelay','createMainSprite','ActSeq_Skew_Reset','_opacityWholeDuration','_spriteset','skewDuration','setBattlerFlip','wwLdQ','ZGZen','bUErz','\x20to\x20%1\x20midbattle.','FKxfI','isMeleeSingleTargetAction','PSknq','setBattleAngle','partyCommandWindowRectXPStyle','Item-%1-%2','_tempActor','waitForFloat','evade','makeBattleCommand','isBusy','VisuMZ_0_CoreEngine','performCastAnimation','JS\x20ESCAPE\x20FAILURE','_battlerContainer','Game_Actor_equips','ParseSkillNotetags','ShowPortraitsBorderStyle','prepareCustomActionSequence','iopNl','XwRTX','drawItemStyleIcon','HpGaugeOffsetY','cancelTargetSelectionVisibility','JumpToLabel','eDvAl','makeActionList','fatAx','logWindowRect','vtAJZ','updateBitmap','callOkHandler','XxJaZ','MpGaugeOffsetX','hasSvBattler','_createEffectsContainer','performDamage','filter','pTOLO','addChildAt','ActSeq_Element_AddElements','displayBattleCoreTransitionErrorMsg','ActSeq_ChangeSkew','displayRemovedStates','pop','AsTarget','SwFXJ','traitObjects','isPartyTpbInputtable','StatusWindowSelectableBackHide','itemEffectAddAttackState','ceil','startHomeMove','XHMwc','Game_Battler_performActionStart','createAllWindows','ActSeq_Movement_HomeMoveToPoint','ActSeq_Mechanics_DeathBreak','EJmXz','Targets2','vJDxD','weatherPower','ShowRemovedBuff','ActSeq_Mechanics_BoostPointsStoreData','isSpriteVisible','ActSeq_Impact_ZoomBlurPoint','DigitGrouping','ActSeq_Impact_ColorBreak','TXtLg','drawSkillCost','clearActiveWeaponSlot','setupTextPopup','XHMOV','WaitForSkew','battleCoreResumeLaunchBattle','jsScaleToFit','_currentActor','setupBattleCoreData','WaitForCamera','description','fontSize','_effectDuration','VisuMZ_2_BattleSystemATB','Sprite_Actor_initMembers','setBattlerMotionTrailData','_weaponImageId','nzgnF','ActSeq_Mechanics_AddBuffDebuff','isAnyoneGrowing','ActSeq_Zoom_WaitForZoom','FlashColor','isPlaytest','ActSeq_Animation_WaitForAnimation','_targetOpacity','enemyNames','statusWindowRectBorderStyle','isForOne','bossCollapse','ActSeq_Impact_ShockwaveEachTargets','_displayBattleCoreTransitionErrorMsg','Reveal','bHXin','TpbActiveChangeEnabled','battleStatusWindowAnimationContainer','rsqUi','front\x20base','checkCacheKey','concat','ActSeq_Target_PrevTarget','DBEBY','FocusX','battleCommandIcon','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','updateLink','animationId','JS\x20%1APPLY\x20%2','height','YPpTF','VisuMZ_1_SkillsStatesCore','BaseTroopIDs','iRJML','numRepeats','displayFailure','Bdfsr','okButtonText','jsScaleDown','performActionStart','WaitComplete','BoostPoints','ActionAnimation','needsSelectionBattleCore','qLEkU','hasBeenDefeatedBefore','addCustomCommands','startFloat','isConfused','OTFsd','PreStartTurnJS','eKTfU','isAppeared','Window_PartyCommand_initialize','getDamageStyle','isActor','_eventId','user','forceSelect','isBattleFlipped','cancelButtonText','createCancelButton','Settings','requestAnimation','battleZoom','cameraClamp','waitForNewLine','Scene_Battle_startActorCommandSelection','duIut','chant','startWeaponAnimation','BTB','actionEffect','rowSpacing','isTpbCharged','performAttack','onHomeMoveEnd','Oczid','ActSeq_Movement_WaitForOpacity','VtDGd','ActSeq_Mechanics_AtbGauge','startGrow','XSkIo','setActiveWeaponSet','TUtDr','getSkillIdWithName','kOcsY','ActionStart','_createDamageContainer','_lastAction','attackSkillId','YnfhR','isSceneChanging','allowCollapse','addDamageSprite','needsActorInputCancel','HelpItem','mFKLh','ActSeq_Movement_MoveToTarget','Intensity','MAXMP','xBLcS','yCMbX','_allTargets','clamp','lHGNL','canEscape','origin','DTB','_enemySprites','DistanceX','optDisplayTp','Direction','VdLId','getDefeatedEnemies','requestPointAnimation','currentExt','movement','flashDuration','QqPfk','isDuringNonLoopingMotion','attackStatesRate','_commonEventKey','ActSeq_Mechanics_EtbAction','Sprite_Actor_setBattler','evaded','isBattlerFlipped','%1StartBattleJS','gainFullActionsPTB','CheckVisibleBattleNotetags','ActSeq_Mechanics_RemoveState','isNextSceneBattleTransitionable','flashColor','updateJump','svBattlerData','LTZHI','SmKUI','Window_BattleEnemy_show','tsVxG','Fcmmv','getEnemyIdWithName','command357','missile','ActSeq_Set_WholeActionSet','oGJAe','fcwbg','preparePartyRefresh','Window_BattleLog_popBaseLine','Actor','makeTargetSprites','addedDebuffs','skillId','actionSplicePoint','addAttackCommand','changePaintOpacity','makeEscapeRatio','WbekI','actorCommandEscape','VOrvt','attackStates','guard','WaitForProjectile','performAction','updateStyleOpacity','ChangeOrderBy','fdqiv','LUK','makeUniqueNames','Slot','UFtLe','MOOhY','JFimE','isTeamBased','updateStaticSvBattlerFrames','StepDuration','command236','ForceExploited','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','TOdvZ','Scene_Battle_itemWindowRect','Btmoj','SOwxD','_growEasing','wGAyv','startTurn','freezeMotion','Lqmvq','Game_Action_executeDamage','kqpny','max','dragonbonesData','AdjustRect','ActSeq_Movement_Spin','motionSpeed','_enemyIDs','ActSeq_Movement_FaceTarget','isAnyoneJumping','zoomDuration','IaNLt','BattleManager_checkSubstitute','_tpbSceneChangeCacheActor','Sprite_Battler_updatePosition','rKXNT','process_VisuMZ_BattleCore_BaseTroops','_action','PreApplyAsTargetJS','_isBattlerFlipped','processExtendTroopMembers','mainSpriteScaleY','UVgOK','itemWindowRect','Game_Action_applyGlobal','iconIndex','fvGNw','yiogQ','updateVisibility','ElementStatusCore','VisuMZ_2_BattleSystemFTB','itemTextAlign','requestFauxAnimation','rDPUD','addText','_borderPortraitSprite','CombatLogIcon','AS\x20USER','FoJqO','_logWindow','value1','ZiOXM','ActSeq_Animation_AttackAnimation','invokeMagicReflection','Window_SkillList_maxCols','iUYqE','alive\x20enemies\x20not\x20user','validTargets','svBattlerName','clearForcedGameTroopSettingsBattleCore','checkTpbInputOpen','isHidden','VarianceFormulaJS','ParseAllNotetags','fittingHeight','_offsetY','maxBattleMembers','oHDNm','isGrowing','length','onActorCancel','isMeleeMultiTargetAction','isNextScene','ActSeq_ChangeAngle','onMoveEnd','clearActiveWeaponSet','CriticalHitMultiplier','value','selectNextCommandTpb','VisuMZ_2_DragonbonesUnion','ActSeq_Impact_TimeScale','VrcgY','Window_BattleStatus_drawItemImage','getTraitSetKeys','terminate','ueyOM','Game_Action_makeTargets','isOTB','ActSeq_Impact_MotionBlurScreen','setTroopPage','ActSeq_Mechanics_PtbFullHalfAction','xmWAQ','Sprite_Battler_update','isCommandEnabled','horzCells','_tpbNeedsPartyCommand','_helpWindow','FlinchDistanceX','Scene_Map_launchBattle','feYde','AutoNotetag','VWdja','damageRate','ScaleDown','CheckVisibleSkillNotetags','PxsEd','BattleManager_onEscapeFailure','%1Event','getNextSubjectFromPool','setupWeaponAnimation','MHQDc','battleOpacity','finalizeScale','aNAwT','Scene_Battle_createCancelButton','oFbHS','getItemDamageAmountLabelOriginal','setupCriticalEffect','qftAB','setBattlerFacePoint','lrWdf','forceEscapeSprite','Tgcyr','iconText','pAEaK','_targetSkewX','pvzto','DZNUB','ACoqd','setGuard','Sprite_Damage_createChildSprite','ActSeq_Movement_WaitForScale','NyhHn','resetBreakShield','fight','lhzds','_shake','isBorderStylePortraitShown','sxAKt','createEnemyNameContainer','wXsHP','dPvKa','isSceneBattle','Scene_Battle_createHelpWindow','fHLpl','_targetHomeX','clearBattleCoreData','setHelpWindowItem','isAtbCastingState','ASWVe','ActSeq_BattleLog_WaitForBattleLog','ActSeq_Impact_MotionBlurTarget','VisuMZ_2_BattleSystemSTB','UJwaE','_commandNameWindow','_battleField','CriticalDmgRate','Game_BattlerBase_canGuard','textAlign','ActSeq_Element_NullElements','_phase','IconSet','hRBhB','rvXJU','_statusWindow','isForOpponent','resizeWindowBorderStyle','ConvertActionSequenceTarget','WMlII','Game_BattlerBase_refresh','isEffecting','IkVUI','actions','TpbGaugeOffsetX','UulQd','_commonEventQueue','Sprite_Actor_update','_actionInputIndex','initVisibility','PVxkM','hardDamageCap','restore','checkBattleEnd','QJwkB','ChantStyle','hwrgy','createEffectActionSet','BfZki','tZSWk','EnableSoftCap','bxSSQ','setHalfActionsPTB','placeTimeGauge','qFhSe','PopupShiftX','performMoveToPoint','startJump','isAnyoneChangingOpacity','vertCells','Sprite_Actor_moveToStartPosition','PCFBU','_stypeIDs','_cancelButton','FaceAway','JS\x20%1START\x20ACTION','sJqpw','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','NameOffsetY','result','ShowSubstitute','onBattleStartBattleCore','trueRandomTarget','svAnchorY','initialize','Window_BattleLog_popupDamage','casting','loadBattleback1','setBattleCameraOffset','qgvKh','applyCritical','osRnV','Sprite_Enemy_setBattler','Exploiter','battleEffect','addSkillTypeCommand','isSelected','BDNag','inputting','EpmRb','loadBitmap','eDayr','autoSelectLastSelected','AutoMeleeSolo','createHpGaugeSprite','_baseX','ALL\x20SKILLS','EDtqU','biilS','ofJQb','ImCTW','IibND','WHIbM','waitForAnimation','getStypeIdWithName','UjmZm','setText','adjustPosition_1for1','_svBattlerData','canGuardBattleCore','_index','autoSelect','EaJqH','buffAdd','battleInjectAni','nextActiveWeaponSlot','Skills','ActSeq_Movement_Scale','moveBattlerHomeToPoint','krYns','mainSpriteHeight','CalcEscapeRaiseJS','hkCqG','addLoadListener','process_VisuMZ_BattleCore_TraitObject_Notetags','animation','LeTIB','setSTBExploited','_forcing','updateSpin','bitmapWidth','zlJRD','Buffs','applyData','433312XIGflN','Game_Action_isForOpponent','PIJGo','updateCollapse','pointY','targetDistortionSpritePosition','displayCounter','meLws','spell','Game_BattlerBase_eraseState','VisuMZ_3_SideviewBattleUI','_waitMode','startInput','_enemies','commandStyle','addBattleCoreAutoBattleStyleCommand','Scene_Battle_logWindowRect','transform','isItem','_enemyID','itemRect','pUjWA','OlJOW','makeCommandList','DamageDisplay','alive\x20actors','vSxZG','setupBattleCore','onFloatEnd','Scene_Options_maxCommands','PostStartTurnJS','_tempBattler','isMVAnimation','_indent','Kxatm','weapons','loadSvActor','isIncludedInEnemyWindow','refreshRequest','onOpacityEnd','FlashDuration','expRate','isAutoBattleCommandEnabled','attackAnimationId1','PopupOffsetX','createEmptyBitmap','lerQP','floatBattler','drawItemImage','CreateActionSequenceTargets','YBfmW','isEnemy','angle','move','ActSeq_BattleLog_UI','ActSeq_Element_ForceElements','statusWindowRect','isGuard','random','setWaitMode','autoBattleWindowRect','GUARD','ZtDIU','ApplyImmortal','setBattleSkew','ActSeq_Mechanics_Immortal','hRpKy','_baseTexture','Rate','BattleManager_selectNextCommand','icon','stbGainInstant','Game_Battler_makeSpeed','mainSprite','fMGzp','addOptionsCommand','initBattleCore','bitmapHeight','loadPicture','prepareBorderActor','eyMTq','TpbGaugeOffsetY','oJTet','toUpperCase','uVmQR','PrioritySortActive','calcWindowHeight','performWeaponAnimation','ShuffleArray','ActSeq_Mechanics_ActionEffect','processAnimationRequests','ConvertCount','zgphf','splice','Height','anchor','_targetHomeY','_damagePopupArray','ATK','FlinchDistanceY','_freezeMotionData','EscapeFailureJS','ActSeq_Animation_ChangeBattlePortrait','isMoving','Opacity','_inputting','removeBuffsAuto','_forcedHomeX','isAnimationPlaying','mxXDv','fmiac','isInputting','aXBPC','AcKqf','uSIMl','_lineHeight','battleCameraData','ArPenRate','zgVKp','occasion','ActSeq_Mechanics_AddState','_targetIndex','Game_Action_itemEffectAddNormalState','woXNY','PjFPm','isUndecided','loadWindowskin','updatePosition','_angleRevertOnFinish','waitForOpacity','applySoftDamageCap','DamageStyles','makeActionListAutoAttack','ZzmBb','_subject','_actorCommandWindow','code','removeOnceParallelInterpreter','applyDamageCaps','displayItemMessage','iKkhG','ShowHpDmg','Game_Action_numRepeats','Game_Battler_clearMotion','callUpdateHelp','processRandomizedData','jQAeV','resizeWindowXPStyle','cDvdB','fUgQJ','setHorrorEffectSettings','isAffectedByBreakShield'];_0x4ef9=function(){return _0x49c490;};return _0x4ef9();}Sprite_HpGauge[_0x57ed21(0xb20)]=Object[_0x57ed21(0xb52)](Sprite_Gauge[_0x57ed21(0xb20)]),Sprite_HpGauge['prototype'][_0x57ed21(0x7fb)]=Sprite_HpGauge,Sprite_HpGauge['prototype']['initialize']=function(){const _0x5d069b=_0x57ed21;Sprite_Gauge[_0x5d069b(0xb20)][_0x5d069b(0xa1b)][_0x5d069b(0x509)](this);},Sprite_HpGauge[_0x57ed21(0xb20)][_0x57ed21(0x172)]=function(){return 0x0;},Sprite_HpGauge[_0x57ed21(0xb20)]['redraw']=function(){const _0xa3c51b=_0x57ed21;this[_0xa3c51b(0x10e)]['clear']();const _0x506625=this['currentValue']();!isNaN(_0x506625)&&(_0xa3c51b(0xa4b)===_0xa3c51b(0x8a6)?_0x561936[_0xa3c51b(0x500)](_0x4deb33[_0xa3c51b(0x461)],0x0):this[_0xa3c51b(0x5ae)]());};function Sprite_EnemyName(){this['initialize'](...arguments);}Sprite_EnemyName[_0x57ed21(0xb20)]=Object[_0x57ed21(0xb52)](Sprite_Name[_0x57ed21(0xb20)]),Sprite_EnemyName['prototype']['constructor']=Sprite_EnemyName,Sprite_EnemyName[_0x57ed21(0xb20)]['initialize']=function(){const _0x2971f1=_0x57ed21;Sprite_Name[_0x2971f1(0xb20)][_0x2971f1(0xa1b)]['call'](this),this['createAttachedSprites']();},Sprite_EnemyName[_0x57ed21(0xb20)][_0x57ed21(0xba5)]=function(){const _0x51516a=_0x57ed21;Sprite_Name[_0x51516a(0xb20)][_0x51516a(0xba5)][_0x51516a(0x509)](this),this[_0x51516a(0x772)]=0x0,this['_linkedSprite']=null,this['anchor']['x']=0.5,this['anchor']['y']=0x0;},Sprite_EnemyName['prototype'][_0x57ed21(0x810)]=function(){const _0x18f47a=_0x57ed21;if(VisuMZ['BattleCore'][_0x18f47a(0x8d3)]['Enemy'][_0x18f47a(0x10c)]){if('SBmWb'===_0x18f47a(0x466))return 0x0;else this[_0x18f47a(0x156)]=new Sprite_StateIcon(),this[_0x18f47a(0x1cc)](this[_0x18f47a(0x156)]);}},Sprite_EnemyName[_0x57ed21(0xb20)][_0x57ed21(0xa53)]=function(){const _0x2a9df5=_0x57ed21;return Graphics[_0x2a9df5(0x667)];},Sprite_EnemyName[_0x57ed21(0xb20)][_0x57ed21(0xaa4)]=function(){const _0x22076b=_0x57ed21;return this[_0x22076b(0xaca)]=this[_0x22076b(0xaca)]||Window_Base[_0x22076b(0xb20)][_0x22076b(0x134)]()||0x24,this[_0x22076b(0xaca)]*0x4;},Sprite_EnemyName[_0x57ed21(0xb20)]['fontSize']=function(){const _0x25d45b=_0x57ed21;return VisuMZ[_0x25d45b(0xfb)][_0x25d45b(0x8d3)][_0x25d45b(0x313)][_0x25d45b(0x2ac)]||$gameSystem[_0x25d45b(0x58a)]();},Sprite_EnemyName['prototype'][_0x57ed21(0x627)]=function(_0x280a74){this['_linkedSprite']=_0x280a74;},Sprite_EnemyName['prototype']['update']=function(){const _0x4b45a6=_0x57ed21;Sprite_Name[_0x4b45a6(0xb20)][_0x4b45a6(0x402)]['call'](this),this['updateLink'](),this[_0x4b45a6(0xad6)](),this[_0x4b45a6(0x551)](),this['updateOpacity']();},Sprite_EnemyName[_0x57ed21(0xb20)][_0x57ed21(0xf8)]=function(){const _0x15dbd4=_0x57ed21;this['_cacheTextWidth']=undefined;const _0x68a971=this[_0x15dbd4(0xb1c)](),_0x4cc799=this[_0x15dbd4(0xa53)](),_0x12970f=Window_Base[_0x15dbd4(0xb20)][_0x15dbd4(0x134)]();this['setupFont'](),this[_0x15dbd4(0x10e)][_0x15dbd4(0x80e)](),this[_0x15dbd4(0x10e)][_0x15dbd4(0x5f1)](_0x68a971,0x0,0x0,_0x4cc799,_0x12970f,_0x15dbd4(0x415));},Sprite_EnemyName['prototype'][_0x57ed21(0x8af)]=function(){const _0x11801e=_0x57ed21;if(!this[_0x11801e(0x5f6)])return;this[_0x11801e(0x635)]!==this[_0x11801e(0x5f6)][_0x11801e(0x635)]&&(_0x11801e(0x83a)===_0x11801e(0x83a)?this[_0x11801e(0x6c5)](this['_linkedSprite'][_0x11801e(0x635)]):_0x2e7459['requestAnimation']([this],_0x1956ce));},Sprite_EnemyName[_0x57ed21(0xb20)][_0x57ed21(0xad6)]=function(){const _0x1d75fc=_0x57ed21;if(!this[_0x1d75fc(0x5f6)])return;this[_0x1d75fc(0xaca)]=this['_lineHeight']||Window_Base['prototype'][_0x1d75fc(0x134)](),this['x']=Math['round'](this['_linkedSprite']['_baseX']),this['y']=Math[_0x1d75fc(0x413)](this[_0x1d75fc(0x5f6)]['_baseY']-this[_0x1d75fc(0xaca)]*0.5);const _0x179f50=VisuMZ[_0x1d75fc(0xfb)]['Settings'][_0x1d75fc(0x313)];this['x']+=Math['round'](_0x179f50[_0x1d75fc(0x3f7)]||0x0),this['y']+=Math[_0x1d75fc(0x413)](_0x179f50['NameOffsetY']||0x0);},Sprite_EnemyName[_0x57ed21(0xb20)][_0x57ed21(0x551)]=function(){const _0xe9bf13=_0x57ed21;this[_0xe9bf13(0x207)]();},Sprite_EnemyName[_0x57ed21(0xb20)][_0x57ed21(0x207)]=function(){const _0x4102c5=_0x57ed21;if(!this[_0x4102c5(0x156)])return;this[_0x4102c5(0x635)]!==this['_stateIconSprite'][_0x4102c5(0x635)]&&this[_0x4102c5(0x156)]['setup'](this[_0x4102c5(0x635)]);const _0x25b289=this['textWidth']();this[_0x4102c5(0xaca)]=this[_0x4102c5(0xaca)]||Window_Base[_0x4102c5(0xb20)][_0x4102c5(0x134)](),this[_0x4102c5(0x156)]['x']=Math[_0x4102c5(0x413)]((_0x25b289+ImageManager[_0x4102c5(0xe9)])/0x2)+0x8,this[_0x4102c5(0x156)]['y']=this[_0x4102c5(0xaca)]/0x2;const _0x5be7b9=VisuMZ[_0x4102c5(0xfb)][_0x4102c5(0x8d3)][_0x4102c5(0x313)];this[_0x4102c5(0x156)]['x']+=_0x5be7b9[_0x4102c5(0x5bf)]||0x0,this[_0x4102c5(0x156)]['y']+=_0x5be7b9['AttachStateOffsetY']||0x0;},Sprite_EnemyName['prototype'][_0x57ed21(0xf2)]=function(){const _0x4e7bfa=_0x57ed21,_0x11a6af=this['visibilityState']();if(_0x11a6af&&this[_0x4e7bfa(0x772)]<0xff)this[_0x4e7bfa(0x772)]+=0x10;else!_0x11a6af&&this['opacity']>0x0&&(this[_0x4e7bfa(0x772)]-=0x10);},Sprite_EnemyName[_0x57ed21(0xb20)][_0x57ed21(0x1fd)]=function(){const _0xb042e5=_0x57ed21;if(this['isAlwaysHidden']())return![];else{if(!this[_0xb042e5(0x635)]){if(_0xb042e5(0x75f)===_0xb042e5(0x75f))return![];else{if(!_0x42d3cf[_0xb042e5(0x9d4)]())return;const _0x4b6502=_0x1b27f4['getLastPluginCommandInterpreter']();if(!_0x4b6502)return;_0x4b6502[_0xb042e5(0xa92)]('battleInjectAni');}}else{if(this['_battler']['isDead']())return'rPqMz'===_0xb042e5(0xa99)?_0x3b86ae[_0xb042e5(0x434)][_0xb042e5(0x509)](this):![];else{if(!this[_0xb042e5(0x635)][_0xb042e5(0x8c9)]()){if(_0xb042e5(0x757)!==_0xb042e5(0x1a4))return![];else this[_0xb042e5(0x84c)]=new _0x58546c(),this[_0xb042e5(0x9e1)][_0xb042e5(0x1cc)](this[_0xb042e5(0x84c)]);}else{if(this[_0xb042e5(0x366)]())return!![];else{if(this[_0xb042e5(0x634)]())return!![];else{if(this[_0xb042e5(0xa7c)]()){if(_0xb042e5(0x65e)!==_0xb042e5(0x459))return!![];else!_0x483b57['BattleCore'][_0xb042e5(0x8d3)][_0xb042e5(0x6f7)]['ShowMissEvasion']?this['push'](_0xb042e5(0x5d3),_0x5473ac):_0x59553f['BattleCore'][_0xb042e5(0xbbb)][_0xb042e5(0x509)](this,_0x1cdc71);}else{if(this[_0xb042e5(0x772)]>0x0)return![];}}}}}}}},Sprite_EnemyName['prototype']['isAlwaysHidden']=function(){const _0x4ac4a1=_0x57ed21;return VisuMZ[_0x4ac4a1(0xfb)][_0x4ac4a1(0x8d3)]['Enemy'][_0x4ac4a1(0xbe4)];},Sprite_EnemyName[_0x57ed21(0xb20)][_0x57ed21(0x366)]=function(){return![];},Sprite_EnemyName[_0x57ed21(0xb20)][_0x57ed21(0x634)]=function(){const _0x162dc8=_0x57ed21;return VisuMZ['BattleCore'][_0x162dc8(0x8d3)]['Enemy'][_0x162dc8(0x122)];},Sprite_EnemyName[_0x57ed21(0xb20)][_0x57ed21(0xa7c)]=function(){const _0xd92704=_0x57ed21;return VisuMZ[_0xd92704(0xfb)][_0xd92704(0x8d3)][_0xd92704(0x313)][_0xd92704(0x77a)]?this[_0xd92704(0x635)][_0xd92704(0xa27)]():SceneManager[_0xd92704(0x34f)]['_enemyWindow']&&SceneManager[_0xd92704(0x34f)][_0xd92704(0x3c5)]['active']&&SceneManager[_0xd92704(0x34f)][_0xd92704(0x3c5)][_0xd92704(0xa64)][_0xd92704(0x55d)](this[_0xd92704(0x635)]);},Sprite_EnemyName[_0x57ed21(0xb20)]['textWidth']=function(){const _0x5d32fd=_0x57ed21;if(!this[_0x5d32fd(0x635)])return 0x0;if(this[_0x5d32fd(0x148)])return this['_cacheTextWidth'];const _0x2b02dd=this[_0x5d32fd(0xb1c)]();return this[_0x5d32fd(0x180)](),this['_cacheTextWidth']=this[_0x5d32fd(0x10e)][_0x5d32fd(0x41c)](_0x2b02dd)||0x1,this[_0x5d32fd(0x148)];},VisuMZ['BattleCore']['Sprite_Battleback_adjustPosition']=Sprite_Battleback['prototype'][_0x57ed21(0x6a0)],Sprite_Battleback[_0x57ed21(0xb20)][_0x57ed21(0x6a0)]=function(){const _0xd58140=_0x57ed21,_0x5300db=VisuMZ[_0xd58140(0xfb)][_0xd58140(0x8d3)][_0xd58140(0x37a)];if(!_0x5300db){if(_0xd58140(0x831)===_0xd58140(0x831))return VisuMZ[_0xd58140(0xfb)][_0xd58140(0x4a9)][_0xd58140(0x509)](this);else _0x2e4a6c[_0xd58140(0xfb)][_0xd58140(0x307)]&&_0x3b6413['BattleCore'][_0xd58140(0x307)][_0xd58140(0x509)](this,_0x209ca4),_0x2beaf7[_0xd58140(0xfb)][_0xd58140(0x317)](_0x36737d);}const _0x56f9a4=String(_0x5300db[_0xd58140(0x384)])||'MZ';switch(_0x56f9a4){case'MZ':VisuMZ[_0xd58140(0xfb)][_0xd58140(0x4a9)]['call'](this);break;case _0xd58140(0x4f7):this['adjustPosition_1for1']();break;case _0xd58140(0x14a):this[_0xd58140(0x705)]();break;case _0xd58140(0x9ad):this[_0xd58140(0x7d6)]();break;case'ScaleUp':this[_0xd58140(0x57b)]();break;}},Sprite_Battleback[_0x57ed21(0xb20)][_0x57ed21(0xa3c)]=function(){const _0x3f702b=_0x57ed21,_0x48c805=VisuMZ['BattleCore'][_0x3f702b(0x8d3)][_0x3f702b(0x37a)];if(_0x48c805&&_0x48c805[_0x3f702b(0x338)]){if(_0x3f702b(0x56c)===_0x3f702b(0x56c))return _0x48c805[_0x3f702b(0x338)][_0x3f702b(0x509)](this);else _0xa7d795[_0x3f702b(0xfb)][_0x3f702b(0x9d5)][_0x3f702b(0x509)](this),this['createHelpWindowBattleCore']();}this['width']=Graphics[_0x3f702b(0x6c1)],this['height']=Graphics[_0x3f702b(0x8b2)];const _0x4ee2b7=0x1;this[_0x3f702b(0x19e)]['x']=_0x4ee2b7,this[_0x3f702b(0x19e)]['y']=_0x4ee2b7,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x57ed21(0xb20)][_0x57ed21(0x705)]=function(){const _0x35f2c8=_0x57ed21,_0x17d388=VisuMZ[_0x35f2c8(0xfb)][_0x35f2c8(0x8d3)][_0x35f2c8(0x37a)];if(_0x17d388&&_0x17d388[_0x35f2c8(0x889)]){if(_0x35f2c8(0x774)!==_0x35f2c8(0x548))return _0x17d388['jsScaleToFit'][_0x35f2c8(0x509)](this);else{const _0x5db90e=this[_0x35f2c8(0x595)]();_0x5db90e&&(_0x5db90e[_0x35f2c8(0x74c)](_0x28fa40),[_0x35f2c8(0x118),_0x35f2c8(0xb34),_0x35f2c8(0x923)]['includes'](_0x311cdd)&&this[_0x35f2c8(0xaae)]());}}this[_0x35f2c8(0x6c1)]=Graphics['width'],this[_0x35f2c8(0x8b2)]=Graphics['height'];const _0x3ddeed=this[_0x35f2c8(0x6c1)]/this[_0x35f2c8(0x10e)]['width'],_0x99654d=this[_0x35f2c8(0x8b2)]/this[_0x35f2c8(0x10e)][_0x35f2c8(0x8b2)],_0x5b5cb5=Math[_0x35f2c8(0x952)](_0x3ddeed,_0x99654d);this[_0x35f2c8(0x19e)]['x']=_0x5b5cb5,this[_0x35f2c8(0x19e)]['y']=_0x5b5cb5,this['x']=(Graphics[_0x35f2c8(0x6c1)]-this[_0x35f2c8(0x6c1)])/0x2,this['y']=Graphics['height']-this[_0x35f2c8(0x8b2)];},Sprite_Battleback[_0x57ed21(0xb20)]['adjustPosition_ScaleDown']=function(){const _0x50ef2e=_0x57ed21,_0x59b75c=VisuMZ[_0x50ef2e(0xfb)][_0x50ef2e(0x8d3)][_0x50ef2e(0x37a)];if(_0x59b75c&&_0x59b75c[_0x50ef2e(0x8bb)])return _0x59b75c[_0x50ef2e(0x8bb)][_0x50ef2e(0x509)](this);this[_0x50ef2e(0x6c1)]=Graphics[_0x50ef2e(0x6c1)],this['height']=Graphics[_0x50ef2e(0x8b2)];const _0x5ac8d8=Math[_0x50ef2e(0x49b)](0x1,this[_0x50ef2e(0x6c1)]/this['bitmap']['width']),_0x152772=Math[_0x50ef2e(0x49b)](0x1,this[_0x50ef2e(0x8b2)]/this['bitmap']['height']),_0x43fabb=Math[_0x50ef2e(0x952)](_0x5ac8d8,_0x152772);this[_0x50ef2e(0x19e)]['x']=_0x43fabb,this[_0x50ef2e(0x19e)]['y']=_0x43fabb,this['x']=(Graphics[_0x50ef2e(0x6c1)]-this[_0x50ef2e(0x6c1)])/0x2,this['y']=Graphics[_0x50ef2e(0x8b2)]-this[_0x50ef2e(0x8b2)];},Sprite_Battleback['prototype'][_0x57ed21(0x57b)]=function(){const _0x414df0=_0x57ed21,_0x477641=VisuMZ[_0x414df0(0xfb)]['Settings'][_0x414df0(0x37a)];if(_0x477641&&_0x477641['jsScaleUp'])return _0x477641[_0x414df0(0x434)][_0x414df0(0x509)](this);this[_0x414df0(0x6c1)]=Graphics[_0x414df0(0x6c1)],this[_0x414df0(0x8b2)]=Graphics[_0x414df0(0x8b2)];const _0x191796=Math[_0x414df0(0x952)](0x1,this[_0x414df0(0x6c1)]/this[_0x414df0(0x10e)]['width']),_0x24c9bb=Math[_0x414df0(0x952)](0x1,this[_0x414df0(0x8b2)]/this[_0x414df0(0x10e)][_0x414df0(0x8b2)]),_0x49aac0=Math[_0x414df0(0x952)](_0x191796,_0x24c9bb);this[_0x414df0(0x19e)]['x']=_0x49aac0,this['scale']['y']=_0x49aac0,this['x']=(Graphics[_0x414df0(0x6c1)]-this['width'])/0x2,this['y']=Graphics['height']-this['height'];},Spriteset_Battle[_0x57ed21(0xb21)]=VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x8d3)]['BattleLayout'][_0x57ed21(0xbcc)]??!![],Spriteset_Battle[_0x57ed21(0xb20)][_0x57ed21(0x4b8)]=function(){const _0x2263f0=_0x57ed21;if(!$gameSystem[_0x2263f0(0x119)]())return![];return![];},Spriteset_Battle[_0x57ed21(0xb20)]['animationBaseDelay']=function(){return 0x0;},Spriteset_Battle['prototype'][_0x57ed21(0x833)]=function(){return 0x0;},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x387)]=Spriteset_Battle[_0x57ed21(0xb20)][_0x57ed21(0x39f)],Spriteset_Battle[_0x57ed21(0xb20)][_0x57ed21(0x39f)]=function(){const _0x201202=_0x57ed21;VisuMZ[_0x201202(0xfb)][_0x201202(0x387)][_0x201202(0x509)](this),this[_0x201202(0x37d)](),this[_0x201202(0x25c)]();},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x3f2)]=Spriteset_Battle['prototype'][_0x57ed21(0x402)],Spriteset_Battle[_0x57ed21(0xb20)][_0x57ed21(0x402)]=function(){const _0x5853ba=_0x57ed21;VisuMZ['BattleCore'][_0x5853ba(0x3f2)][_0x5853ba(0x509)](this),this['updateUiContainerPosition'](),this[_0x5853ba(0x443)]();},Spriteset_Battle[_0x57ed21(0xb20)][_0x57ed21(0x37d)]=function(){const _0xa3d53d=_0x57ed21;this[_0xa3d53d(0x400)]=new Weather(),this['_battleField'][_0xa3d53d(0x1cc)](this[_0xa3d53d(0x400)]);},Spriteset_Battle['prototype']['updateWeather']=function(){const _0x5076ae=_0x57ed21;this[_0x5076ae(0x400)][_0x5076ae(0xb47)]=$gameScreen[_0x5076ae(0x7cd)](),this[_0x5076ae(0x400)][_0x5076ae(0xb4d)]=$gameScreen[_0x5076ae(0x87b)]();},Game_Interpreter[_0x57ed21(0xb20)][_0x57ed21(0x944)]=function(_0x1b2534){const _0x478531=_0x57ed21;$gameScreen[_0x478531(0xbc3)](_0x1b2534[0x0],_0x1b2534[0x1],_0x1b2534[0x2]);if(_0x1b2534[0x3])this[_0x478531(0x4c7)](_0x1b2534[0x2]);return!![];},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x481)]=Game_Interpreter[_0x57ed21(0xb20)][_0x57ed21(0x394)],Game_Interpreter[_0x57ed21(0xb20)][_0x57ed21(0x394)]=function(_0x41fea8){const _0x5a0681=_0x57ed21;if(SceneManager[_0x5a0681(0x9d4)]())return SceneManager[_0x5a0681(0x34f)][_0x5a0681(0x837)][_0x5a0681(0x2ab)](_0x41fea8[0x0],_0x41fea8[0x1]),!![];else{if(_0x5a0681(0xb1e)!=='hYwSb')return VisuMZ[_0x5a0681(0xfb)][_0x5a0681(0x481)][_0x5a0681(0x509)](this,_0x41fea8);else{if(this[_0x5a0681(0x89b)]===_0x1cc77f)return;this['_targetOpacity']=_0x5ce6dd,this[_0x5a0681(0x18e)]=_0x7dee4,this[_0x5a0681(0x836)]=_0x558baa,this[_0x5a0681(0x524)]=_0x163f5d||_0x5a0681(0x315);if(_0x3bf419<=0x0)this[_0x5a0681(0x772)]=_0x28c3da;}}},Spriteset_Battle['prototype']['updateBattlebackBitmap']=function(_0x4b1e8c,_0x5c3516){const _0x1376ff=_0x57ed21;_0x4b1e8c[_0x1376ff(0x10e)]=_0x5c3516;},Spriteset_Battle[_0x57ed21(0xb20)][_0x57ed21(0x2ab)]=function(_0x3d9998,_0x29345f){const _0x5c2191=_0x57ed21;_0x3d9998=_0x3d9998||'',_0x29345f=_0x29345f||'';_0x3d9998===''&&_0x29345f===''&&(_0x3d9998=this['_back1Sprite'][_0x5c2191(0x832)](),_0x29345f=this[_0x5c2191(0xb63)][_0x5c2191(0x25a)]());const _0x59822d=ImageManager[_0x5c2191(0xa1e)](_0x3d9998),_0x5c3806=ImageManager[_0x5c2191(0x176)](_0x29345f);_0x59822d[_0x5c2191(0xa4c)](this[_0x5c2191(0x7d0)][_0x5c2191(0x62e)](this,this[_0x5c2191(0x4ea)],this[_0x5c2191(0xb63)],_0x59822d,_0x5c3806));},Spriteset_Battle[_0x57ed21(0xb20)][_0x57ed21(0x7d0)]=function(_0x1574d6,_0xe7fecf,_0x375c51,_0x42f4e7){const _0x73e17=_0x57ed21;_0x42f4e7['addLoadListener'](this[_0x73e17(0x316)][_0x73e17(0x62e)](this,_0x1574d6,_0xe7fecf,_0x375c51,_0x42f4e7));},Spriteset_Battle[_0x57ed21(0xb20)]['updateBattlebackBitmap2']=function(_0x4099ce,_0x4a0ca2,_0x362164,_0x28c6b9){const _0x288db5=_0x57ed21;_0x4099ce[_0x288db5(0x10e)]=_0x362164,_0x4a0ca2['bitmap']=_0x28c6b9,_0x4099ce[_0x288db5(0x6a0)](),_0x4a0ca2['adjustPosition']();},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x486)]=Spriteset_Battle['prototype'][_0x57ed21(0x2ea)],Spriteset_Battle[_0x57ed21(0xb20)][_0x57ed21(0x2ea)]=function(){const _0x57764f=_0x57ed21;VisuMZ['BattleCore']['Spriteset_Battle_createBattleField']['call'](this),this[_0x57764f(0x200)]();},Spriteset_Battle[_0x57ed21(0xb20)][_0x57ed21(0x200)]=function(){const _0x54bdbc=_0x57ed21;this[_0x54bdbc(0x184)](),this[_0x54bdbc(0x723)](),this[_0x54bdbc(0xb8b)](),this['createDamageContainer'](),this[_0x54bdbc(0x429)]();},Spriteset_Battle['prototype'][_0x57ed21(0x184)]=function(){const _0x33eb3c=_0x57ed21;this[_0x33eb3c(0x84c)]=new Sprite(),this['_battleField']['addChild'](this['_battlerContainer']);},Spriteset_Battle[_0x57ed21(0xb20)][_0x57ed21(0xb8b)]=function(){const _0x21fb77=_0x57ed21;this['_animationContainer']=new Sprite(),Spriteset_Battle['ANTI_TINT_UI']?_0x21fb77(0x189)===_0x21fb77(0x189)?this[_0x21fb77(0x1cc)](this['_animationContainer']):(_0x105524[_0x21fb77(0x3f1)](),_0x13885e[_0x21fb77(0x52f)]=![],_0x1e5924['clear'](),_0x3ce64e[_0x21fb77(0x80e)]()):_0x21fb77(0x47f)===_0x21fb77(0xa48)?(_0x1fc74b[_0x21fb77(0xfb)][_0x21fb77(0x968)][_0x21fb77(0x509)](this),this[_0x21fb77(0x24e)](),this['resetResultSwitches']()):this['_battleField']['addChild'](this[_0x21fb77(0x3be)]);},Spriteset_Battle[_0x57ed21(0xb20)][_0x57ed21(0x4d3)]=function(){const _0x10d93e=_0x57ed21;this['_damageContainer']=new Sprite(),this[_0x10d93e(0xbe7)]['x']=this[_0x10d93e(0x9e1)]['x'],this['_damageContainer']['y']=this[_0x10d93e(0x9e1)]['y'],this['addChild'](this['_damageContainer']);},Spriteset_Battle[_0x57ed21(0xb20)]['adjustFlippedBattlefield']=function(){const _0x5ef1a7=_0x57ed21;if(!this[_0x5ef1a7(0x4b8)]())return;this[_0x5ef1a7(0x84c)][_0x5ef1a7(0x19e)]['x']=-0x1,this['_battlerContainer']['x']=this['_battleField'][_0x5ef1a7(0x6c1)],this[_0x5ef1a7(0x2f5)]['scale']['x']=-0x1,this[_0x5ef1a7(0x2f5)]['x']=this[_0x5ef1a7(0x9e1)][_0x5ef1a7(0x6c1)],this['_animationContainer']['scale']['x']=-0x1,this['_animationContainer']['x']=this[_0x5ef1a7(0x9e1)][_0x5ef1a7(0x6c1)],this[_0x5ef1a7(0xbe7)][_0x5ef1a7(0x19e)]['x']=-0x1,this[_0x5ef1a7(0xbe7)]['x']=this[_0x5ef1a7(0x9e1)]['x']+this[_0x5ef1a7(0x9e1)]['width'];},Spriteset_Battle['prototype']['createEnemies']=function(){const _0x5bb5db=_0x57ed21;Imported['VisuMZ_0_CoreEngine']&&this['coreEngineRepositionEnemies']()&&('jvOdg'===_0x5bb5db(0x623)?this['repositionEnemiesByResolution']():(_0x19fff1=(_0x4f0d56+_0x3d8c8f)/0x2,_0x3d21fd=-0x1));const _0x4c56c5=$gameTroop[_0x5bb5db(0x195)](),_0x11d09e=[];for(const _0x44d7c9 of _0x4c56c5){_0x11d09e['push'](new Sprite_Enemy(_0x44d7c9));}_0x11d09e[_0x5bb5db(0xb51)](this[_0x5bb5db(0xb4e)][_0x5bb5db(0x62e)](this));for(const _0x5be5f5 of _0x11d09e){this[_0x5bb5db(0x84c)][_0x5bb5db(0x1cc)](_0x5be5f5);}this[_0x5bb5db(0x902)]=_0x11d09e;},Spriteset_Battle[_0x57ed21(0xb20)]['createActors']=function(){const _0x55afb8=_0x57ed21;this['_actorSprites']=[];for(let _0x5a3e4a=0x0;_0x5a3e4a<$gameParty[_0x55afb8(0x988)]();_0x5a3e4a++){const _0x3f64c8=$gameParty[_0x55afb8(0x1a2)]()[_0x5a3e4a],_0xf1e861=new Sprite_Actor();_0xf1e861[_0x55afb8(0x362)](_0x3f64c8),_0xf1e861[_0x55afb8(0xb02)](_0x3f64c8),_0xf1e861[_0x55afb8(0x402)](),this[_0x55afb8(0x209)][_0x55afb8(0x46e)](_0xf1e861),this['_battlerContainer'][_0x55afb8(0x1cc)](_0xf1e861);}},Spriteset_Battle['prototype'][_0x57ed21(0xb43)]=function(_0x4e1fe5,_0x2fb521,_0x1a6dc4,_0x39b44c){const _0x57327d=_0x57ed21,_0x4775c6=this[_0x57327d(0xa77)](_0x2fb521),_0x75ee06=new(_0x4775c6?Sprite_AnimationMV:Sprite_Animation)(),_0x13d64d=this[_0x57327d(0x92a)](_0x4e1fe5);if(this[_0x57327d(0x7f2)](_0x4e1fe5[0x0])){if(_0x57327d(0x4ab)!==_0x57327d(0x4ab)){_0x14a43d[_0x57327d(0xb20)][_0x57327d(0x215)][_0x57327d(0x509)](this);const _0x30378f=this[_0x57327d(0x3f0)]();_0x30378f===_0x57327d(0x131)&&this[_0x57327d(0x105)]();}else _0x1a6dc4=!_0x1a6dc4;}_0x75ee06['targetObjects']=_0x4e1fe5,_0x75ee06[_0x57327d(0x6c5)](_0x13d64d,_0x2fb521,_0x1a6dc4,_0x39b44c),this[_0x57327d(0x5b0)](_0x75ee06);},Spriteset_Battle[_0x57ed21(0xb20)][_0x57ed21(0x5b0)]=function(_0x105775){const _0x1ff0ea=_0x57ed21;if(this['isAnimationShownOnBattlePortrait'](_0x105775))this[_0x1ff0ea(0x8a5)]()['addChild'](_0x105775);else{if('lENFx'==='IICgU')return this[_0x1ff0ea(0x963)];else this[_0x1ff0ea(0x3be)][_0x1ff0ea(0x1cc)](_0x105775);}this[_0x1ff0ea(0x27d)]['push'](_0x105775);},Spriteset_Battle[_0x57ed21(0xb20)][_0x57ed21(0x146)]=function(_0x10fa2e){const _0x7a91f2=_0x57ed21;if(!_0x10fa2e)return![];if(!_0x10fa2e['_animation'])return![];if(!_0x10fa2e['targetObjects'][0x0])return![];if(_0x10fa2e[_0x7a91f2(0x692)][0x0][_0x7a91f2(0x8cc)]&&!_0x10fa2e[_0x7a91f2(0x692)][0x0][_0x7a91f2(0x8cc)]())return![];if($gameSystem['isSideView']())return![];if(!this[_0x7a91f2(0x8a5)]())return![];if(_0x10fa2e[_0x7a91f2(0x7fb)]===Sprite_Animation){if(_0x10fa2e['_animation'][_0x7a91f2(0x1b3)]!==0x0)return![];}else{if(_0x10fa2e[_0x7a91f2(0x7fb)]===Sprite_AnimationMV){if(_0x10fa2e[_0x7a91f2(0x2cc)]['position']===0x3)return![];}}return!![];const _0x361113=Window_BattleStatus[_0x7a91f2(0xb20)][_0x7a91f2(0x3f0)]();return['xp','portrait']['contains'](_0x361113);},Spriteset_Battle[_0x57ed21(0xb20)]['battleStatusWindowAnimationContainer']=function(){const _0x3baa70=_0x57ed21;if(!SceneManager[_0x3baa70(0x34f)])return null;if(!SceneManager[_0x3baa70(0x34f)][_0x3baa70(0x9ea)])return null;if(!SceneManager[_0x3baa70(0x34f)][_0x3baa70(0x9ea)][_0x3baa70(0x5e0)])return null;return SceneManager[_0x3baa70(0x34f)][_0x3baa70(0x9ea)][_0x3baa70(0x5e0)];},Spriteset_Battle[_0x57ed21(0xb20)][_0x57ed21(0x277)]=function(_0x78bfa7){const _0x135733=_0x57ed21;this[_0x135733(0x5a7)](_0x78bfa7);for(const _0x1e7262 of _0x78bfa7[_0x135733(0x692)]){if(_0x135733(0x9ab)===_0x135733(0x651)){if(!_0x5271af[_0x135733(0xfb)]['Settings'][_0x135733(0x6f9)][_0x135733(0x221)])return;const _0x5b5187=this[_0x135733(0x241)](_0x39ba1c),_0x41fd26=this[_0x135733(0xa6b)](_0x370835);_0x41fd26[_0x135733(0x6c1)]=_0x4f2a62[_0x135733(0x38c)],_0x41fd26[_0x135733(0x8b2)]-=0x2,this[_0x135733(0x541)](_0x5b5187,_0x41fd26['x']+0x1,_0x41fd26['y']+0x1,_0x41fd26['width'],_0x41fd26[_0x135733(0x8b2)]);}else _0x1e7262['endAnimation']&&_0x1e7262[_0x135733(0xb65)]();}_0x78bfa7['destroy']();},Spriteset_Battle[_0x57ed21(0xb20)][_0x57ed21(0x5a7)]=function(_0x17492f){const _0x6eb04a=_0x57ed21;this[_0x6eb04a(0x27d)]['remove'](_0x17492f);if(this['isAnimationShownOnBattlePortrait'](_0x17492f)){if(_0x6eb04a(0xa6d)===_0x6eb04a(0xa6d))this['battleStatusWindowAnimationContainer']()[_0x6eb04a(0x2b5)](_0x17492f);else{this[_0x6eb04a(0x148)]=_0x253672;const _0x5e7eeb=this[_0x6eb04a(0xb1c)](),_0xde8da9=this['bitmapWidth'](),_0x1b7efb=_0x3810d8[_0x6eb04a(0xb20)][_0x6eb04a(0x134)]();this['setupFont'](),this[_0x6eb04a(0x10e)]['clear'](),this[_0x6eb04a(0x10e)]['drawText'](_0x5e7eeb,0x0,0x0,_0xde8da9,_0x1b7efb,_0x6eb04a(0x415));}}else this[_0x6eb04a(0x3be)][_0x6eb04a(0x2b5)](_0x17492f);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x54b)]=Spriteset_Battle[_0x57ed21(0xb20)]['updateActors'],Spriteset_Battle[_0x57ed21(0xb20)][_0x57ed21(0x6cb)]=function(){const _0x5b2e46=_0x57ed21;VisuMZ['BattleCore']['Spriteset_Battle_updateActors'][_0x5b2e46(0x509)](this),this['updateBattlerContainer']();},Spriteset_Battle[_0x57ed21(0xb20)][_0x57ed21(0x5e8)]=function(){const _0x3ce5aa=_0x57ed21;this[_0x3ce5aa(0x84c)][_0x3ce5aa(0x477)]['sort'](this[_0x3ce5aa(0xb44)][_0x3ce5aa(0x62e)](this)),this['putActiveBattlerOnTop']();},Spriteset_Battle['prototype'][_0x57ed21(0xb44)]=function(_0x1efe9a,_0x890c46){const _0x21df2a=_0x57ed21;if(VisuMZ['BattleCore'][_0x21df2a(0x8d3)]['Actor']['PrioritySortActors']){if(_0x1efe9a['_battler']&&_0x890c46[_0x21df2a(0x635)]){if(_0x21df2a(0x95f)===_0x21df2a(0xa6c)){const _0x2d24ce=_0x184ab3[_0x21df2a(0x9f7)];_0x38e4b4['_actions'][_0x2d24ce]=new _0x40411e(_0x1c5b43);}else{if(_0x1efe9a['_battler']['isActor']()&&_0x890c46[_0x21df2a(0x635)]['isEnemy']())return 0x1;else{if(_0x890c46[_0x21df2a(0x635)]['isActor']()&&_0x1efe9a[_0x21df2a(0x635)][_0x21df2a(0xa8a)]())return-0x1;}}}}if(_0x1efe9a['_baseY']!==_0x890c46['_baseY']){if('PTOyQ'!==_0x21df2a(0xb3a))return _0x1efe9a[_0x21df2a(0x656)]-_0x890c46[_0x21df2a(0x656)];else{const _0x38b369=_0xb6f39b(_0x12dbad['$1'])[_0x21df2a(0x4ff)](/[\r\n]+/)[_0x21df2a(0x29d)](''),_0x300887=this[_0x21df2a(0xae8)](_0x38b369);_0x476c60=this[_0x21df2a(0x921)](_0x300887)||_0x3519c5,_0x224847=_0x4c2bec[_0x21df2a(0x58e)](_0x438ee1);}}else return _0x890c46[_0x21df2a(0x164)]-_0x1efe9a[_0x21df2a(0x164)];},Spriteset_Battle['prototype']['putActiveBattlerOnTop']=function(){const _0x2a6ace=_0x57ed21;if(!VisuMZ['BattleCore']['Settings'][_0x2a6ace(0x929)]['PrioritySortActive'])return;const _0x4c46b9=BattleManager[_0x2a6ace(0xadd)];if(_0x4c46b9){if(_0x4c46b9[_0x2a6ace(0x8cc)]()&&!$gameSystem['isSideView']())return;const _0x15d62=_0x4c46b9[_0x2a6ace(0x595)]();if(_0x15d62&&_0x4c46b9['isActor']())this[_0x2a6ace(0x84c)]['addChild'](_0x15d62);}},Spriteset_Battle[_0x57ed21(0xb20)][_0x57ed21(0x2d7)]=function(){const _0x1cea05=_0x57ed21;for(const _0x1bce6e of $gameParty[_0x1cea05(0x38d)]()){if(_0x1cea05(0x86c)!==_0x1cea05(0x86c))return _0x3b80ab['BattleCore'][_0x1cea05(0x11c)][_0x1cea05(0x509)](this);else{if(!_0x1bce6e)continue;if(!_0x1bce6e['battler']())continue;_0x1bce6e['battler']()[_0x1cea05(0x9bf)]=!![],_0x1bce6e['battler']()[_0x1cea05(0x82a)]();}}},Spriteset_Battle['prototype']['createUIContainer']=function(){const _0x356d9b=_0x57ed21;this['_uiContainer']=new Sprite();if(Spriteset_Battle[_0x356d9b(0xb21)])this[_0x356d9b(0x1cc)](this[_0x356d9b(0x2f5)]);else{if(_0x356d9b(0x6b6)!=='cTbjS')this[_0x356d9b(0x9e1)][_0x356d9b(0x1cc)](this[_0x356d9b(0x2f5)]);else return this[_0x356d9b(0x6d4)]>0x0;}SceneManager[_0x356d9b(0x34f)][_0x356d9b(0x2f5)]=this[_0x356d9b(0x2f5)];},Spriteset_Battle[_0x57ed21(0xb20)][_0x57ed21(0x25c)]=function(){const _0x250667=_0x57ed21;if(VisuMZ[_0x250667(0xfb)]['Settings'][_0x250667(0x313)]['NameLegacy'])return;this[_0x250667(0xb50)]=new Sprite(),BattleManager['addChildToUiContainer'](this[_0x250667(0xb50)]);for(const _0x39f25b of this[_0x250667(0x902)]){const _0x268aef=new Sprite_EnemyName();this['_enemyNameContainer'][_0x250667(0x1cc)](_0x268aef),_0x268aef[_0x250667(0x627)](_0x39f25b);}},Spriteset_Battle[_0x57ed21(0xb20)][_0x57ed21(0x2c4)]=function(){const _0x4eb759=_0x57ed21;if(!this['_damageContainer'])return;if(!this[_0x4eb759(0x2f5)])return;const _0x3c0b39=Spriteset_Battle[_0x4eb759(0xb21)]?this[_0x4eb759(0xbe7)]['x']:0x0,_0x37f5be=Spriteset_Battle[_0x4eb759(0xb21)]?this['_damageContainer']['y']:0x0,_0x27963b=Imported[_0x4eb759(0xb6a)]?this[_0x4eb759(0x9e1)]['x']:0x0,_0x14b14c=Imported['VisuMZ_3_ActSeqCamera']?this[_0x4eb759(0x9e1)]['y']:0x0;this[_0x4eb759(0x2f5)]['x']=_0x3c0b39+_0x27963b,this[_0x4eb759(0x2f5)]['y']=_0x37f5be+_0x14b14c;},BattleManager[_0x57ed21(0x22a)]=function(_0x9b2ef5){const _0x1c48b4=_0x57ed21;if(!SceneManager[_0x1c48b4(0x34f)]['_uiContainer'])return;SceneManager[_0x1c48b4(0x34f)]['_uiContainer']['addChild'](_0x9b2ef5);},Spriteset_Battle[_0x57ed21(0xb20)]['isBusy']=function(){return![];},Spriteset_Battle[_0x57ed21(0xb20)][_0x57ed21(0x157)]=function(){const _0x28a581=_0x57ed21;return this[_0x28a581(0x389)]()[_0x28a581(0x3fa)](_0x5cc190=>_0x5cc190[_0x28a581(0x806)]());},Spriteset_Battle[_0x57ed21(0xb20)][_0x57ed21(0x959)]=function(){const _0x5ecfb4=_0x57ed21;return this[_0x5ecfb4(0x389)]()['some'](_0x107c7e=>_0x107c7e[_0x5ecfb4(0x630)]());},Spriteset_Battle['prototype'][_0x57ed21(0x896)]=function(){const _0xc83ff6=_0x57ed21;return this[_0xc83ff6(0x389)]()[_0xc83ff6(0x3fa)](_0x5556b6=>_0x5556b6[_0xc83ff6(0x98a)]());},Spriteset_Battle['prototype'][_0x57ed21(0xbbe)]=function(){const _0x479a20=_0x57ed21;return this[_0x479a20(0x389)]()[_0x479a20(0x3fa)](_0x555996=>_0x555996[_0x479a20(0x276)]());},Spriteset_Battle[_0x57ed21(0xb20)][_0x57ed21(0x3b7)]=function(){const _0x44078f=_0x57ed21;return this[_0x44078f(0x389)]()[_0x44078f(0x3fa)](_0x1aae9f=>_0x1aae9f['isSpinning']());},Spriteset_Battle[_0x57ed21(0xb20)][_0x57ed21(0xa0b)]=function(){const _0x573f2f=_0x57ed21;return this[_0x573f2f(0x389)]()[_0x573f2f(0x3fa)](_0x4366b5=>_0x4366b5[_0x573f2f(0x44e)]());},VisuMZ[_0x57ed21(0xfb)]['Window_ItemList_maxCols']=Window_ItemList[_0x57ed21(0xb20)][_0x57ed21(0x428)],Window_ItemList[_0x57ed21(0xb20)][_0x57ed21(0x428)]=function(){const _0x1b7441=_0x57ed21;if(SceneManager[_0x1b7441(0x9d4)]()){if('ERDlo'===_0x1b7441(0x6fb)){if(this['_battleLayoutStyle'])return this['_battleLayoutStyle'];return this[_0x1b7441(0x768)]=_0x7b687c[_0x1b7441(0x34f)]['battleLayoutStyle'](),this['_battleLayoutStyle'];}else return SceneManager[_0x1b7441(0x34f)][_0x1b7441(0x3f0)]()===_0x1b7441(0x131)?VisuMZ[_0x1b7441(0xfb)][_0x1b7441(0x8d3)][_0x1b7441(0x6f9)]['SkillItemBorderCols']:VisuMZ['BattleCore']['Settings'][_0x1b7441(0x6f9)][_0x1b7441(0x4f4)];}else return VisuMZ['BattleCore']['Window_ItemList_maxCols'][_0x1b7441(0x509)](this);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x97c)]=Window_SkillList[_0x57ed21(0xb20)][_0x57ed21(0x428)],Window_SkillList[_0x57ed21(0xb20)][_0x57ed21(0x428)]=function(){const _0x53756a=_0x57ed21;return SceneManager['isSceneBattle']()?SceneManager[_0x53756a(0x34f)][_0x53756a(0x3f0)]()===_0x53756a(0x131)?VisuMZ['BattleCore']['Settings'][_0x53756a(0x6f9)][_0x53756a(0x591)]:VisuMZ[_0x53756a(0xfb)][_0x53756a(0x8d3)]['BattleLayout'][_0x53756a(0x4f4)]:VisuMZ[_0x53756a(0xfb)][_0x53756a(0x97c)]['call'](this);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x4c3)]=Window_Options[_0x57ed21(0xb20)]['addGeneralOptions'],Window_Options[_0x57ed21(0xb20)][_0x57ed21(0x6df)]=function(){const _0x228059=_0x57ed21;VisuMZ['BattleCore'][_0x228059(0x4c3)]['call'](this),this[_0x228059(0xbd1)](),this['addShowHpGaugeCommand']();},Window_Options[_0x57ed21(0xb20)][_0x57ed21(0xbd1)]=function(){const _0x1346f7=_0x57ed21;VisuMZ[_0x1346f7(0xfb)]['Settings'][_0x1346f7(0x4db)][_0x1346f7(0x653)]&&(this[_0x1346f7(0x399)](),this[_0x1346f7(0xa66)]());},Window_Options[_0x57ed21(0xb20)]['addShowHpGaugeCommand']=function(){const _0x12ba40=_0x57ed21;if(!VisuMZ['BattleCore'][_0x12ba40(0x8d3)][_0x12ba40(0x51a)][_0x12ba40(0x779)])return;const _0x249584=TextManager[_0x12ba40(0x17a)],_0x7f133e=_0x12ba40(0x17a);this[_0x12ba40(0x4a7)](_0x249584,_0x7f133e);},Window_Options[_0x57ed21(0xb20)][_0x57ed21(0x399)]=function(){const _0x436352=_0x57ed21,_0x1cc96a=TextManager[_0x436352(0x74f)],_0x104b69=_0x436352(0x6d1);this[_0x436352(0x4a7)](_0x1cc96a,_0x104b69);},Window_Options[_0x57ed21(0xb20)][_0x57ed21(0xa66)]=function(){const _0x5d89d3=_0x57ed21,_0x46a827=TextManager[_0x5d89d3(0x70f)],_0x9e59aa=_0x5d89d3(0x284);this[_0x5d89d3(0x4a7)](_0x46a827,_0x9e59aa);},VisuMZ[_0x57ed21(0xfb)]['Window_Options_statusText']=Window_Options[_0x57ed21(0xb20)]['statusText'],Window_Options['prototype'][_0x57ed21(0x48f)]=function(_0x5f26a5){const _0x20baa1=_0x57ed21,_0x271812=this[_0x20baa1(0x1ef)](_0x5f26a5);return _0x271812==='autoBattleUseSkills'?this['statusTextAutoBattleStyle']():VisuMZ[_0x20baa1(0xfb)][_0x20baa1(0x33a)]['call'](this,_0x5f26a5);},Window_Options[_0x57ed21(0xb20)][_0x57ed21(0x6ee)]=function(){const _0x2f173d=_0x57ed21,_0x68a43=VisuMZ[_0x2f173d(0xfb)][_0x2f173d(0x8d3)][_0x2f173d(0x4db)],_0x1e3144=this[_0x2f173d(0x69a)](_0x2f173d(0x284));return _0x1e3144?_0x68a43[_0x2f173d(0x73d)]:_0x68a43[_0x2f173d(0x256)];},Window_ShopStatus[_0x57ed21(0xb20)]['getItemDamageAmountLabelBattleCore']=function(){const _0x55baa1=_0x57ed21,_0x72291a=DataManager[_0x55baa1(0x8cb)](this[_0x55baa1(0x2a4)]),_0x3d51b3=VisuMZ[_0x55baa1(0xada)][_0x72291a];if(!_0x3d51b3)return this[_0x55baa1(0x9ba)]();const _0x572266=_0x55baa1(0x1d0)[_0x55baa1(0x455)](this['_item'][_0x55baa1(0x43d)][_0x55baa1(0xb47)]),_0x62b7f8=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this['_item'][_0x55baa1(0x43d)][_0x55baa1(0xb47)]];return _0x3d51b3[_0x572266][_0x55baa1(0x455)](_0x62b7f8);},Window_ShopStatus[_0x57ed21(0xb20)]['getItemDamageAmountTextBattleCore']=function(){const _0x4d9f29=_0x57ed21,_0x3a94dc=DataManager['getDamageStyle'](this[_0x4d9f29(0x2a4)]),_0x16d452=VisuMZ[_0x4d9f29(0xada)][_0x3a94dc];if(!_0x16d452)return this[_0x4d9f29(0x19c)]();return _0x16d452[_0x4d9f29(0xa6f)]['call'](this);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x8ca)]=Window_PartyCommand['prototype'][_0x57ed21(0xa1b)],Window_PartyCommand['prototype'][_0x57ed21(0xa1b)]=function(_0x147150){const _0x2850d3=_0x57ed21;VisuMZ[_0x2850d3(0xfb)][_0x2850d3(0x8ca)]['call'](this,_0x147150),this[_0x2850d3(0x616)](_0x147150);},Window_PartyCommand[_0x57ed21(0xb20)]['createCommandNameWindow']=function(_0x511366){const _0x25b58d=_0x57ed21,_0x16aec2=new Rectangle(0x0,0x0,_0x511366[_0x25b58d(0x6c1)],_0x511366[_0x25b58d(0x8b2)]);this[_0x25b58d(0x9e0)]=new Window_Base(_0x16aec2),this[_0x25b58d(0x9e0)][_0x25b58d(0x772)]=0x0,this[_0x25b58d(0x1cc)](this[_0x25b58d(0x9e0)]),this['updateCommandNameWindow']();},Window_PartyCommand[_0x57ed21(0xb20)]['callUpdateHelp']=function(){const _0x17b114=_0x57ed21;Window_Command[_0x17b114(0xb20)]['callUpdateHelp'][_0x17b114(0x509)](this);if(this['_commandNameWindow'])this[_0x17b114(0x5fd)]();},Window_PartyCommand['prototype'][_0x57ed21(0x5fd)]=function(){const _0x2b9c96=_0x57ed21,_0x9423bc=this[_0x2b9c96(0x9e0)];_0x9423bc[_0x2b9c96(0x681)]['clear']();const _0x5d1c6d=this['commandStyleCheck'](this[_0x2b9c96(0x773)]());if(_0x5d1c6d===_0x2b9c96(0xa9d)&&this['maxItems']()>0x0){const _0x4a79b1=this['itemLineRect'](this[_0x2b9c96(0x773)]());let _0x35d9dd=this[_0x2b9c96(0x2f7)](this[_0x2b9c96(0x773)]());_0x35d9dd=_0x35d9dd[_0x2b9c96(0x5b6)](/\\I\[(\d+)\]/gi,''),_0x9423bc[_0x2b9c96(0x424)](),this[_0x2b9c96(0x574)](_0x35d9dd,_0x4a79b1),this[_0x2b9c96(0x719)](_0x35d9dd,_0x4a79b1),this[_0x2b9c96(0xb45)](_0x35d9dd,_0x4a79b1);}},Window_PartyCommand['prototype'][_0x57ed21(0x574)]=function(_0xd3f05c,_0x16d4be){},Window_PartyCommand[_0x57ed21(0xb20)][_0x57ed21(0x719)]=function(_0x537050,_0x167841){const _0x40b355=this['_commandNameWindow'];_0x40b355['drawText'](_0x537050,0x0,_0x167841['y'],_0x40b355['innerWidth'],'center');},Window_PartyCommand[_0x57ed21(0xb20)][_0x57ed21(0xb45)]=function(_0x52f4bc,_0x4c7426){const _0x3e9f8a=_0x57ed21,_0x2d39e0=this[_0x3e9f8a(0x9e0)],_0x4e5884=$gameSystem[_0x3e9f8a(0x6b0)](),_0x50b387=_0x4c7426['x']+Math[_0x3e9f8a(0x4eb)](_0x4c7426[_0x3e9f8a(0x6c1)]/0x2)+_0x4e5884;_0x2d39e0['x']=_0x2d39e0[_0x3e9f8a(0x6c1)]/-0x2+_0x50b387,_0x2d39e0['y']=Math['floor'](_0x4c7426[_0x3e9f8a(0x8b2)]/0x2);},Window_PartyCommand[_0x57ed21(0xb20)][_0x57ed21(0xa6e)]=function(){const _0x3b2d33=_0x57ed21;this[_0x3b2d33(0x4f3)](),this[_0x3b2d33(0x219)](),this['addCustomCommands'](),this[_0x3b2d33(0xaa2)](),this[_0x3b2d33(0x39d)]();},Window_PartyCommand['prototype'][_0x57ed21(0x4f3)]=function(){const _0x3b8af0=_0x57ed21,_0x2e52ed=this[_0x3b8af0(0xa65)](),_0x560b30=VisuMZ[_0x3b8af0(0xfb)][_0x3b8af0(0x8d3)][_0x3b8af0(0x809)][_0x3b8af0(0x361)],_0x42be80=_0x2e52ed===_0x3b8af0(0x76a)?TextManager['fight']:_0x3b8af0(0x710)['format'](_0x560b30,TextManager[_0x3b8af0(0x9cc)]),_0x16beee=this[_0x3b8af0(0xb9f)]();this['addCommand'](_0x42be80,'fight',_0x16beee);},Window_PartyCommand[_0x57ed21(0xb20)]['isFightCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x57ed21(0xb20)][_0x57ed21(0x219)]=function(){const _0x1c1ca6=_0x57ed21;if(!this[_0x1c1ca6(0x287)]())return;const _0x233ed8=this[_0x1c1ca6(0xa65)](),_0x4051e5=VisuMZ[_0x1c1ca6(0xfb)][_0x1c1ca6(0x8d3)][_0x1c1ca6(0x809)]['CmdIconAutoBattle'],_0x323925=_0x233ed8===_0x1c1ca6(0x76a)?TextManager[_0x1c1ca6(0xb3f)]:_0x1c1ca6(0x710)[_0x1c1ca6(0x455)](_0x4051e5,TextManager[_0x1c1ca6(0xb3f)]),_0x1f764a=this[_0x1c1ca6(0xa81)]();this[_0x1c1ca6(0x4a7)](_0x323925,'autoBattle',_0x1f764a);},Window_PartyCommand[_0x57ed21(0xb20)][_0x57ed21(0x287)]=function(){const _0x6561e6=_0x57ed21;return VisuMZ[_0x6561e6(0xfb)][_0x6561e6(0x8d3)][_0x6561e6(0x809)]['CommandAddAutoBattle'];},Window_PartyCommand[_0x57ed21(0xb20)][_0x57ed21(0xa81)]=function(){return!![];},Window_PartyCommand[_0x57ed21(0xb20)][_0x57ed21(0x8c3)]=function(){},Window_PartyCommand['prototype'][_0x57ed21(0xaa2)]=function(){const _0x5189b4=_0x57ed21;if(!this[_0x5189b4(0x579)]())return;const _0x261459=this['commandStyle'](),_0x16b841=VisuMZ[_0x5189b4(0xfb)][_0x5189b4(0x8d3)][_0x5189b4(0x809)][_0x5189b4(0x199)],_0x5b051a=_0x261459==='text'?TextManager['options']:_0x5189b4(0x710)[_0x5189b4(0x455)](_0x16b841,TextManager[_0x5189b4(0x56e)]),_0x5af79b=this[_0x5189b4(0x6bb)]();this[_0x5189b4(0x4a7)](_0x5b051a,_0x5189b4(0x56e),_0x5af79b);},Window_PartyCommand[_0x57ed21(0xb20)][_0x57ed21(0x579)]=function(){const _0x3a07ca=_0x57ed21;return VisuMZ['BattleCore']['Settings'][_0x3a07ca(0x809)][_0x3a07ca(0x59a)];},Window_PartyCommand[_0x57ed21(0xb20)][_0x57ed21(0x6bb)]=function(){return!![];},Window_PartyCommand['prototype'][_0x57ed21(0x39d)]=function(){const _0x3021bf=_0x57ed21,_0x1ce6bc=this[_0x3021bf(0xa65)](),_0x3fb317=VisuMZ[_0x3021bf(0xfb)][_0x3021bf(0x8d3)][_0x3021bf(0x809)][_0x3021bf(0x3fd)],_0x30d9d7=_0x1ce6bc===_0x3021bf(0x76a)?TextManager[_0x3021bf(0x473)]:'\x5cI[%1]%2'['format'](_0x3fb317,TextManager[_0x3021bf(0x473)]),_0xa5f65d=this[_0x3021bf(0x181)]();this[_0x3021bf(0x4a7)](_0x30d9d7,_0x3021bf(0x473),_0xa5f65d);},Window_PartyCommand[_0x57ed21(0xb20)]['isEscapeCommandEnabled']=function(){const _0x380c98=_0x57ed21;return BattleManager[_0x380c98(0x8ff)]();},Window_PartyCommand['prototype'][_0x57ed21(0x96f)]=function(){const _0x11451e=_0x57ed21;return VisuMZ[_0x11451e(0xfb)]['Settings']['PartyCmd'][_0x11451e(0x2b2)];},Window_PartyCommand[_0x57ed21(0xb20)][_0x57ed21(0x5df)]=function(_0xdfe3e5){const _0x18421f=_0x57ed21,_0x398125=this['commandStyleCheck'](_0xdfe3e5);if(_0x398125===_0x18421f(0x9c1)){if('ZugpL'!==_0x18421f(0x3a2))return _0x18421f(0x9c1);else this[_0x18421f(0x238)](_0xdfe3e5);}else _0x398125===_0x18421f(0xa9d)?this[_0x18421f(0x853)](_0xdfe3e5):Window_Command[_0x18421f(0xb20)][_0x18421f(0x5df)][_0x18421f(0x509)](this,_0xdfe3e5);},Window_PartyCommand[_0x57ed21(0xb20)][_0x57ed21(0xa65)]=function(){const _0x41cbb1=_0x57ed21;return VisuMZ[_0x41cbb1(0xfb)][_0x41cbb1(0x8d3)]['PartyCmd'][_0x41cbb1(0xba8)];},Window_PartyCommand[_0x57ed21(0xb20)][_0x57ed21(0x563)]=function(_0x6f658c){const _0x15a46e=_0x57ed21;if(_0x6f658c<0x0)return'text';const _0x104936=this[_0x15a46e(0xa65)]();if(_0x104936!=='auto')return _0x15a46e(0x54e)!==_0x15a46e(0xbe0)?_0x104936:_0x4be144[_0x15a46e(0xb20)][_0x15a46e(0x815)][_0x15a46e(0x509)](this);else{if(this[_0x15a46e(0x160)]()>0x0){if(_0x15a46e(0x33f)===_0x15a46e(0x33f)){const _0x250874=this[_0x15a46e(0x2f7)](_0x6f658c);if(_0x250874[_0x15a46e(0x463)](/\\I\[(\d+)\]/i)){const _0x2fdee0=this['itemLineRect'](_0x6f658c),_0x46b0fc=this[_0x15a46e(0x2fa)](_0x250874)[_0x15a46e(0x6c1)];if(_0x46b0fc<=_0x2fdee0[_0x15a46e(0x6c1)]){if(_0x15a46e(0x6f2)===_0x15a46e(0x6f2))return _0x15a46e(0x9c1);else _0x579cf8[_0x15a46e(0x46e)](_0x343a67[_0x15a46e(0xa19)]());}else return _0x15a46e(0xa9d);}}else this['startMotion'](_0x15a46e(0x8da));}}return _0x15a46e(0x76a);},Window_PartyCommand['prototype'][_0x57ed21(0x238)]=function(_0x1c319e){const _0x14f436=_0x57ed21,_0x4bccf5=this[_0x14f436(0x143)](_0x1c319e),_0x2f9bc0=this['commandName'](_0x1c319e),_0x230937=this[_0x14f436(0x2fa)](_0x2f9bc0)[_0x14f436(0x6c1)];this[_0x14f436(0x92f)](this[_0x14f436(0x9a3)](_0x1c319e));const _0x4aeb30=this['itemTextAlign']();if(_0x4aeb30===_0x14f436(0xb98))this[_0x14f436(0x309)](_0x2f9bc0,_0x4bccf5['x']+_0x4bccf5['width']-_0x230937,_0x4bccf5['y'],_0x230937);else{if(_0x4aeb30===_0x14f436(0x415)){const _0x13a0db=_0x4bccf5['x']+Math[_0x14f436(0x4eb)]((_0x4bccf5[_0x14f436(0x6c1)]-_0x230937)/0x2);this[_0x14f436(0x309)](_0x2f9bc0,_0x13a0db,_0x4bccf5['y'],_0x230937);}else{if('QYdeU'!==_0x14f436(0x45e)){const _0x3839ff=[];for(let _0x38c9d6=0x0;_0x38c9d6<this['numTargets']();_0x38c9d6++){_0x3839ff[_0x14f436(0x46e)](_0x584894['trueRandomTarget']());}return _0x3839ff;}else this[_0x14f436(0x309)](_0x2f9bc0,_0x4bccf5['x'],_0x4bccf5['y'],_0x230937);}}},Window_PartyCommand[_0x57ed21(0xb20)]['drawItemStyleIcon']=function(_0x5375a4){const _0x356c23=_0x57ed21;this[_0x356c23(0x2f7)](_0x5375a4)[_0x356c23(0x463)](/\\I\[(\d+)\]/i);const _0x3ad116=Number(RegExp['$1'])||0x0,_0x4e8018=this[_0x356c23(0x143)](_0x5375a4),_0x1c7311=_0x4e8018['x']+Math[_0x356c23(0x4eb)]((_0x4e8018[_0x356c23(0x6c1)]-ImageManager[_0x356c23(0xe9)])/0x2),_0x2b555a=_0x4e8018['y']+(_0x4e8018[_0x356c23(0x8b2)]-ImageManager['iconHeight'])/0x2;this[_0x356c23(0x5e3)](_0x3ad116,_0x1c7311,_0x2b555a);},Window_PartyCommand['prototype'][_0x57ed21(0x715)]=function(){},Window_PartyCommand['prototype'][_0x57ed21(0x215)]=function(){const _0xbcd84=_0x57ed21;Window_Command[_0xbcd84(0xb20)][_0xbcd84(0x215)][_0xbcd84(0x509)](this);const _0x971ba1=this[_0xbcd84(0x3f0)]();_0x971ba1==='border'&&this[_0xbcd84(0x105)]();},Window_PartyCommand['prototype']['battleLayoutStyle']=function(){const _0x375e09=_0x57ed21;if(this[_0x375e09(0x768)])return this[_0x375e09(0x768)];return this[_0x375e09(0x768)]=SceneManager[_0x375e09(0x34f)][_0x375e09(0x3f0)](),this['_battleLayoutStyle'];},Window_PartyCommand[_0x57ed21(0xb20)]['updateHelp']=function(){const _0x438b46=_0x57ed21,_0x37f83e=VisuMZ[_0x438b46(0xfb)][_0x438b46(0x8d3)][_0x438b46(0x809)],_0x5e6e9b=this['currentSymbol']();switch(_0x5e6e9b){case _0x438b46(0x9cc):this[_0x438b46(0x9a6)][_0x438b46(0xa3b)](_0x37f83e[_0x438b46(0x512)]);break;case _0x438b46(0xb3f):this[_0x438b46(0x9a6)]['setText'](_0x37f83e[_0x438b46(0x190)]);break;case _0x438b46(0x56e):this[_0x438b46(0x9a6)][_0x438b46(0xa3b)](_0x37f83e[_0x438b46(0x110)]);break;case _0x438b46(0x473):this[_0x438b46(0x9a6)][_0x438b46(0xa3b)](_0x37f83e[_0x438b46(0x3d6)]);break;default:this[_0x438b46(0x9a6)]['setText']('');break;}},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x29e)]=Window_ActorCommand['prototype']['initialize'],Window_ActorCommand['prototype'][_0x57ed21(0xa1b)]=function(_0x4a98e1){const _0x20c274=_0x57ed21;VisuMZ[_0x20c274(0xfb)][_0x20c274(0x29e)][_0x20c274(0x509)](this,_0x4a98e1),this[_0x20c274(0x616)](_0x4a98e1);},Window_ActorCommand[_0x57ed21(0xb20)][_0x57ed21(0x616)]=function(_0x2ea399){const _0x15092a=_0x57ed21,_0x420740=new Rectangle(0x0,0x0,_0x2ea399[_0x15092a(0x6c1)],_0x2ea399['height']);this[_0x15092a(0x9e0)]=new Window_Base(_0x420740),this[_0x15092a(0x9e0)][_0x15092a(0x772)]=0x0,this[_0x15092a(0x1cc)](this[_0x15092a(0x9e0)]),this['updateCommandNameWindow']();},Window_ActorCommand[_0x57ed21(0xb20)][_0x57ed21(0xae7)]=function(){const _0x2be982=_0x57ed21;Window_Command['prototype'][_0x2be982(0xae7)][_0x2be982(0x509)](this);if(this[_0x2be982(0x9e0)])this['updateCommandNameWindow']();},Window_ActorCommand['prototype'][_0x57ed21(0x5fd)]=function(){const _0x49b303=_0x57ed21,_0x54945e=this[_0x49b303(0x9e0)];_0x54945e[_0x49b303(0x681)][_0x49b303(0x80e)]();const _0x1bab36=this[_0x49b303(0x563)](this[_0x49b303(0x773)]());if(_0x1bab36==='icon'&&this[_0x49b303(0x160)]()>0x0){const _0x57e01a=this[_0x49b303(0x143)](this[_0x49b303(0x773)]());let _0xecd686=this[_0x49b303(0x2f7)](this[_0x49b303(0x773)]());_0xecd686=_0xecd686[_0x49b303(0x5b6)](/\\I\[(\d+)\]/gi,''),_0x54945e['resetFontSettings'](),this[_0x49b303(0x574)](_0xecd686,_0x57e01a),this['commandNameWindowDrawText'](_0xecd686,_0x57e01a),this[_0x49b303(0xb45)](_0xecd686,_0x57e01a);}},Window_ActorCommand[_0x57ed21(0xb20)]['commandNameWindowDrawBackground']=function(_0x546740,_0x17c608){},Window_ActorCommand[_0x57ed21(0xb20)][_0x57ed21(0x719)]=function(_0x597066,_0x14e80e){const _0x50f8fd=_0x57ed21,_0x25ba9a=this[_0x50f8fd(0x9e0)];_0x25ba9a[_0x50f8fd(0x5f1)](_0x597066,0x0,_0x14e80e['y'],_0x25ba9a[_0x50f8fd(0x62f)],'center');},Window_ActorCommand[_0x57ed21(0xb20)][_0x57ed21(0xb45)]=function(_0x1cb9f2,_0x365601){const _0x6a07e8=_0x57ed21,_0x46c3d6=this['_commandNameWindow'],_0x28e779=$gameSystem[_0x6a07e8(0x6b0)](),_0x19a900=_0x365601['x']+Math[_0x6a07e8(0x4eb)](_0x365601['width']/0x2)+_0x28e779;_0x46c3d6['x']=_0x46c3d6[_0x6a07e8(0x6c1)]/-0x2+_0x19a900,_0x46c3d6['y']=Math[_0x6a07e8(0x4eb)](_0x365601[_0x6a07e8(0x8b2)]/0x2);},Window_ActorCommand[_0x57ed21(0xb20)][_0x57ed21(0xa6e)]=function(){const _0x42855e=_0x57ed21;if(!this[_0x42855e(0x5f8)])return;const _0x2d1a07=this[_0x42855e(0x5f8)][_0x42855e(0x1e7)]();for(const _0x11d013 of _0x2d1a07){_0x42855e(0x6e4)!==_0x42855e(0x6e4)?(this[_0x42855e(0x6a3)]=0x0,this[_0x42855e(0xb25)]=0x0):this[_0x42855e(0x847)](_0x11d013[_0x42855e(0xaaa)]()['trim']());}},Window_ActorCommand[_0x57ed21(0xb20)][_0x57ed21(0x847)]=function(_0x302bc5){const _0x2dcbe7=_0x57ed21;_0x302bc5===_0x2dcbe7(0x7a0)&&this[_0x2dcbe7(0x92e)]();[_0x2dcbe7(0xb2a),_0x2dcbe7(0x50b)][_0x2dcbe7(0x55d)](_0x302bc5)&&this['addSkillCommands']();_0x302bc5===_0x2dcbe7(0xa94)&&(_0x2dcbe7(0xa36)===_0x2dcbe7(0xb00)?this[_0x2dcbe7(0x238)](_0x13c9a2):this[_0x2dcbe7(0x445)]());if(_0x302bc5==='ITEM'){if(_0x2dcbe7(0x20e)!=='ytdMp'){const _0x175bf3=_0x4cea3f[_0x2dcbe7(0x8cc)]()?_0x1054d1[_0x2dcbe7(0xb81)]:_0x1518de[_0x2dcbe7(0xbd4)];_0x175bf3&&_0x57c80d[_0x2dcbe7(0xfb)][_0x2dcbe7(0x8d3)][_0x2dcbe7(0x6f7)][_0x2dcbe7(0x42a)]&&(this[_0x2dcbe7(0x46e)](_0x2dcbe7(0x65f)),this['push'](_0x2dcbe7(0xb03)),this[_0x2dcbe7(0x46e)](_0x2dcbe7(0xbc1)),this[_0x2dcbe7(0x46e)](_0x2dcbe7(0x972),_0x175bf3[_0x2dcbe7(0x455)](_0x26d8f9[_0x2dcbe7(0xb1c)]())),this[_0x2dcbe7(0x46e)](_0x2dcbe7(0x4c7))),_0x9edb5e['id']===_0x57b82c[_0x2dcbe7(0xbe5)]()&&this['push']('performCollapse',_0x3f21ed);}else this['addItemCommand']();}_0x302bc5==='ESCAPE'&&this[_0x2dcbe7(0x39d)]();_0x302bc5===_0x2dcbe7(0x513)&&this['addAutoBattleCommand']();if(_0x302bc5[_0x2dcbe7(0x463)](/STYPE: (\d+)/i)){const _0x43957a=Number(RegExp['$1']);this[_0x2dcbe7(0xa26)](_0x43957a);}else{if(_0x302bc5[_0x2dcbe7(0x463)](/STYPE: (.*)/i)){const _0xdcf1a5=DataManager[_0x2dcbe7(0xa39)](RegExp['$1']);this['addSkillTypeCommand'](_0xdcf1a5);}}if(_0x302bc5===_0x2dcbe7(0xa31)){if(_0x2dcbe7(0x2be)!==_0x2dcbe7(0xa71))this['addSingleSkillCommands']();else return![];}if(_0x302bc5[_0x2dcbe7(0x463)](/SKILL: (\d+)/i)){const _0x14ef21=Number(RegExp['$1']);this[_0x2dcbe7(0x515)]($dataSkills[_0x14ef21]);}else{if(_0x302bc5['match'](/SKILL: (.*)/i)){const _0x393d3b=DataManager[_0x2dcbe7(0x8ea)](RegExp['$1']);this[_0x2dcbe7(0x515)]($dataSkills[_0x393d3b]);}}_0x302bc5===_0x2dcbe7(0x828)&&Imported[_0x2dcbe7(0x4ee)]&&this[_0x2dcbe7(0x1a8)](),['COMBATLOG',_0x2dcbe7(0x4cb)]['includes'](_0x302bc5)&&Imported['VisuMZ_4_CombatLog']&&this[_0x2dcbe7(0x6f6)](),_0x302bc5===_0x2dcbe7(0x5c9)&&Imported[_0x2dcbe7(0x17e)]&&this['addWeaponSwapCommand'](!![]);},Window_ActorCommand[_0x57ed21(0xb20)][_0x57ed21(0x92e)]=function(){const _0x4cd536=_0x57ed21,_0x2b4b76=$dataSkills[this[_0x4cd536(0x5f8)]['attackSkillId']()];if(!_0x2b4b76)return;if(!this[_0x4cd536(0x59c)](_0x2b4b76))return;const _0x2a0527=this[_0x4cd536(0xa65)](),_0x5ea699=DataManager['battleCommandName'](_0x2b4b76),_0x41c4bb=DataManager[_0x4cd536(0x8ad)](_0x2b4b76),_0x492c9c=_0x2a0527===_0x4cd536(0x76a)?_0x5ea699:_0x4cd536(0x710)[_0x4cd536(0x455)](_0x41c4bb,_0x5ea699);this['addCommand'](_0x492c9c,_0x4cd536(0xaf1),this[_0x4cd536(0x5f8)][_0x4cd536(0x51d)]());},Window_ActorCommand['prototype'][_0x57ed21(0x445)]=function(){const _0x3f0690=_0x57ed21,_0x570cca=$dataSkills[this[_0x3f0690(0x5f8)][_0x3f0690(0x17c)]()];if(!_0x570cca)return;if(!this[_0x3f0690(0x59c)](_0x570cca))return;const _0x5b7abc=this[_0x3f0690(0xa65)](),_0x3f4a21=DataManager[_0x3f0690(0x3e1)](_0x570cca),_0xc3045a=DataManager[_0x3f0690(0x8ad)](_0x570cca),_0x497c9b=_0x5b7abc===_0x3f0690(0x76a)?_0x3f4a21:'\x5cI[%1]%2'[_0x3f0690(0x455)](_0xc3045a,_0x3f4a21);this['addCommand'](_0x497c9b,_0x3f0690(0x935),this[_0x3f0690(0x5f8)][_0x3f0690(0x298)]());},Window_ActorCommand[_0x57ed21(0xb20)]['addItemCommand']=function(){const _0x3ef50b=_0x57ed21,_0x5913eb=this[_0x3ef50b(0xa65)](),_0xe0e42e=VisuMZ[_0x3ef50b(0xfb)][_0x3ef50b(0x8d3)][_0x3ef50b(0x107)]['CmdIconItem'],_0x4ee242=_0x5913eb===_0x3ef50b(0x76a)?TextManager[_0x3ef50b(0x720)]:'\x5cI[%1]%2'[_0x3ef50b(0x455)](_0xe0e42e,TextManager[_0x3ef50b(0x720)]),_0x232416=this[_0x3ef50b(0x21c)]();this[_0x3ef50b(0x4a7)](_0x4ee242,_0x3ef50b(0x720),_0x232416);},Window_ActorCommand[_0x57ed21(0xb20)][_0x57ed21(0x21c)]=function(){const _0x4a4f18=_0x57ed21;return this['_actor']&&this[_0x4a4f18(0x5f8)]['canUseItemCommand']();},Window_ActorCommand['prototype'][_0x57ed21(0x638)]=function(){const _0x57bc9d=_0x57ed21,_0x5d7939=this[_0x57bc9d(0x5f8)][_0x57bc9d(0x5aa)]();for(const _0x4fc806 of _0x5d7939){this[_0x57bc9d(0xa26)](_0x4fc806);}},Window_ActorCommand[_0x57ed21(0xb20)][_0x57ed21(0xa26)]=function(_0x58a7e0){const _0x2fd6de=_0x57ed21;let _0x2b2721=$dataSystem[_0x2fd6de(0x5aa)][_0x58a7e0];if(!_0x2b2721)return;let _0x70ede1=_0x2b2721;const _0x4fcf72=this['commandStyle']();if(_0x4fcf72===_0x2fd6de(0x76a))_0x70ede1=_0x70ede1[_0x2fd6de(0x5b6)](/\x1I\[(\d+)\]/gi,''),_0x70ede1=_0x70ede1['replace'](/\\I\[(\d+)\]/gi,'');else{if(!_0x2b2721[_0x2fd6de(0x463)](/\\I\[(\d+)\]/i)){if(_0x2fd6de(0xab3)!==_0x2fd6de(0xab3))_0x5db4f0[_0x2fd6de(0xa4c)](this[_0x2fd6de(0x316)][_0x2fd6de(0x62e)](this,_0x455fb3,_0x414385,_0x4f756e,_0x2cd836));else{const _0x5c26bc=Imported[_0x2fd6de(0x8b4)]?VisuMZ[_0x2fd6de(0x5f3)][_0x2fd6de(0x8d3)][_0x2fd6de(0xa45)]:VisuMZ[_0x2fd6de(0xfb)][_0x2fd6de(0x8d3)][_0x2fd6de(0x107)],_0x3443ec=$dataSystem[_0x2fd6de(0x3ee)]['includes'](_0x58a7e0),_0x1c9e13=_0x3443ec?_0x5c26bc['IconStypeMagic']:_0x5c26bc[_0x2fd6de(0x12c)];_0x70ede1=_0x2fd6de(0x710)[_0x2fd6de(0x455)](_0x1c9e13,_0x2b2721);}}}this['addCommand'](_0x70ede1,_0x2fd6de(0x26c),!![],_0x58a7e0);},Window_ActorCommand[_0x57ed21(0xb20)][_0x57ed21(0x1c1)]=function(){const _0x4a574b=_0x57ed21,_0x15efff=this['_actor']['skillTypes'](),_0x4749bc=this[_0x4a574b(0x5f8)][_0x4a574b(0x55b)]();for(const _0x4e1a39 of _0x4749bc){if(!_0x4e1a39)continue;if(Imported[_0x4a574b(0x8b4)]){if('oJGuB'!==_0x4a574b(0x5db)){if(this['noSimilarSTypes'](_0x4e1a39))continue;if(this[_0x4a574b(0x246)](_0x4e1a39))continue;}else{const _0x5cf0c6=[_0x4a574b(0x565),_0x4a574b(0x2f6),'PreDamageAsUserJS',_0x4a574b(0x416),'PreApplyAsTargetJS',_0x4a574b(0xb5f),'PreDamageAsTargetJS','PostDamageAsTargetJS','PreStartActionJS',_0x4a574b(0x1b0),'PreEndActionJS',_0x4a574b(0x36f),'PreStartBattleJS','PostStartBattleJS','PreEndBattleJS',_0x4a574b(0x297),_0x4a574b(0x7c1),_0x4a574b(0x28e),_0x4a574b(0x590),_0x4a574b(0xabc),_0x4a574b(0x8c7),_0x4a574b(0xa75),_0x4a574b(0x322),_0x4a574b(0x726),'PreRegenerateJS',_0x4a574b(0x529)];for(const _0x2839d5 of _0x5cf0c6){_0x50075f[_0x4a574b(0xfb)][_0x4a574b(0x3b1)](_0x47e242,_0x2839d5);}}}else{if(!_0x15efff[_0x4a574b(0x55d)](_0x4e1a39['stypeId']))continue;}this[_0x4a574b(0x515)](_0x4e1a39);}},Window_ActorCommand[_0x57ed21(0xb20)]['noSimilarSTypes']=function(_0x96b4fe){const _0x2d8b6e=_0x57ed21,_0x2cdffd=this['_actor']['skillTypes'](),_0x1bba3d=_0x2cdffd[_0x2d8b6e(0x863)](_0x245f00=>DataManager[_0x2d8b6e(0x1d1)](_0x96b4fe)[_0x2d8b6e(0x55d)](_0x245f00));return _0x1bba3d[_0x2d8b6e(0x98b)]<=0x0;},Window_ActorCommand[_0x57ed21(0xb20)][_0x57ed21(0x246)]=function(_0x667ddb){const _0x2c6a06=_0x57ed21;if(Imported['VisuMZ_1_SkillsStatesCore']){if(_0x2c6a06(0xaa7)===_0x2c6a06(0xaa7)){if(VisuMZ[_0x2c6a06(0x5f3)]['version']>=1.24){if(_0x2c6a06(0x80a)!==_0x2c6a06(0x82f)){if(this['_actor']){if('ofKNF'!==_0x2c6a06(0xbd7)){let _0x2a4045=0x0;return _0x2a4045;}else{if(!VisuMZ[_0x2c6a06(0x5f3)][_0x2c6a06(0x916)](this[_0x2c6a06(0x5f8)],_0x667ddb))return!![];if(!VisuMZ[_0x2c6a06(0x5f3)][_0x2c6a06(0x1c3)](this['_actor'],_0x667ddb))return!![];if(!VisuMZ[_0x2c6a06(0x5f3)][_0x2c6a06(0x9ae)](this['_actor'],_0x667ddb))return!![];}}}else this['addFightCommand'](),this[_0x2c6a06(0x219)](),this['addCustomCommands'](),this['addOptionsCommand'](),this[_0x2c6a06(0x39d)]();}else{if(_0x2c6a06(0x640)!==_0x2c6a06(0x93e)){if(!Window_SkillList[_0x2c6a06(0xb20)][_0x2c6a06(0x141)]['call'](this,_0x667ddb))return!![];if(!Window_SkillList['prototype'][_0x2c6a06(0x586)][_0x2c6a06(0x509)](this,_0x667ddb))return!![];if(!Window_SkillList[_0x2c6a06(0xb20)]['checkShowHideSkillNotetags'][_0x2c6a06(0x509)](this,_0x667ddb))return!![];}else _0x2c49f2=_0x262b30['width']/_0x1e85d4[_0x2c6a06(0x1a2)]()['length'],_0x316f5d*=_0x5322af,_0x222c69+=_0x116c31[_0x2c6a06(0x6c1)]/_0x21583f[_0x2c6a06(0x1a2)]()[_0x2c6a06(0x98b)]/0x2;}}else this['setup'](_0x5cf816[_0x2c6a06(0x2c7)],0x0);}return![];},Window_ActorCommand['prototype'][_0x57ed21(0x515)]=function(_0x102bc6){const _0x1a5445=_0x57ed21;if(!_0x102bc6)return;if(!this[_0x1a5445(0x59c)](_0x102bc6))return;const _0x25311f=this[_0x1a5445(0xa65)](),_0x3510ac=DataManager['battleCommandName'](_0x102bc6),_0x33a34f=DataManager[_0x1a5445(0x8ad)](_0x102bc6),_0xa16020=_0x25311f===_0x1a5445(0x76a)?_0x3510ac:_0x1a5445(0x710)[_0x1a5445(0x455)](_0x33a34f,_0x3510ac),_0x4dac8b=this[_0x1a5445(0x5f8)][_0x1a5445(0x314)](_0x102bc6);this['addCommand'](_0xa16020,_0x1a5445(0x658),_0x4dac8b,_0x102bc6['id']);},Window_ActorCommand['prototype'][_0x57ed21(0x59c)]=function(_0x21b391){const _0x191c0e=_0x57ed21,_0x28457b=_0x21b391[_0x191c0e(0x75a)];if(_0x28457b[_0x191c0e(0x463)](/<COMMAND REQUIRE LEARN>/i)){if(!this['_actor']['isLearnedSkill'](_0x21b391['id']))return![];}if(_0x28457b[_0x191c0e(0x463)](/<COMMAND REQUIRE ACCESS>/i)){if(_0x191c0e(0x20c)===_0x191c0e(0x20c)){if(!this[_0x191c0e(0x5f8)][_0x191c0e(0x662)](_0x21b391['id']))return![];}else _0x24d422[_0x191c0e(0xb20)][_0x191c0e(0x5df)][_0x191c0e(0x509)](this,_0x28251c);}const _0xe529=VisuMZ[_0x191c0e(0xfb)][_0x191c0e(0x786)](_0x21b391,'CommandVisible');if(VisuMZ[_0x191c0e(0xfb)]['JS'][_0xe529]){if(!VisuMZ['BattleCore']['JS'][_0xe529]['call'](this,this[_0x191c0e(0x5f8)],_0x21b391))return![];}return VisuMZ[_0x191c0e(0xfb)][_0x191c0e(0x697)](_0x21b391);},VisuMZ['BattleCore'][_0x57ed21(0x697)]=function(_0x1fa2e8){const _0x411eb3=_0x57ed21,_0x5b55e6=_0x1fa2e8[_0x411eb3(0x75a)];if(_0x5b55e6[_0x411eb3(0x463)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x3715eb=JSON[_0x411eb3(0x10a)]('['+RegExp['$1'][_0x411eb3(0x463)](/\d+/g)+']');for(const _0x2fa5e9 of _0x3715eb){if(!$gameSwitches[_0x411eb3(0x993)](_0x2fa5e9))return![];}return!![];}if(_0x5b55e6[_0x411eb3(0x463)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x411eb3(0x82d)==='BYppd'){const _0x47c0be=JSON[_0x411eb3(0x10a)]('['+RegExp['$1'][_0x411eb3(0x463)](/\d+/g)+']');for(const _0x3e67a6 of _0x47c0be){if(!$gameSwitches[_0x411eb3(0x993)](_0x3e67a6))return![];}return!![];}else _0x3ef12b=_0x5b798c>=_0x448abe?_0x11b32a:_0x5b3a06;}if(_0x5b55e6[_0x411eb3(0x463)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('HQvBo'==='HQvBo'){const _0x8e1e43=JSON[_0x411eb3(0x10a)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x4166e6 of _0x8e1e43){if($gameSwitches[_0x411eb3(0x993)](_0x4166e6))return!![];}return![];}else return this[_0x411eb3(0x689)]();}if(_0x5b55e6[_0x411eb3(0x463)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x411eb3(0x59b)===_0x411eb3(0x59b)){const _0x575119=JSON[_0x411eb3(0x10a)]('['+RegExp['$1'][_0x411eb3(0x463)](/\d+/g)+']');for(const _0x2d1435 of _0x575119){if(!$gameSwitches[_0x411eb3(0x993)](_0x2d1435))return!![];}return![];}else _0x513db2=_0x411eb3(0x50f);}if(_0x5b55e6[_0x411eb3(0x463)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x411eb3(0x495)!==_0x411eb3(0x495))_0xbf7b06=_0x10da39(_0x4fcc5f['$1']);else{const _0x1b86ef=JSON[_0x411eb3(0x10a)]('['+RegExp['$1'][_0x411eb3(0x463)](/\d+/g)+']');for(const _0x1a4a32 of _0x1b86ef){if(!$gameSwitches[_0x411eb3(0x993)](_0x1a4a32))return!![];}return![];}}if(_0x5b55e6[_0x411eb3(0x463)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('cLTeH'===_0x411eb3(0x217)){const _0x29c578=JSON[_0x411eb3(0x10a)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x205ad5 of _0x29c578){if(_0x411eb3(0xbbd)==='lAohE')this[_0x411eb3(0x356)]=0x0;else{if($gameSwitches[_0x411eb3(0x993)](_0x205ad5))return![];}}return!![];}else(_0x560260[_0x411eb3(0x832)]||_0x14528e['battleback2Name'])&&_0x36e377['snapForBackground']();}return!![];},Window_ActorCommand[_0x57ed21(0xb20)][_0x57ed21(0x39d)]=function(){const _0x4cff63=_0x57ed21,_0x50df8e=this[_0x4cff63(0xa65)](),_0x25f74d=VisuMZ[_0x4cff63(0xfb)][_0x4cff63(0x8d3)][_0x4cff63(0x809)][_0x4cff63(0x3fd)],_0x308ab9=_0x50df8e===_0x4cff63(0x76a)?TextManager['escape']:_0x4cff63(0x710)['format'](_0x25f74d,TextManager[_0x4cff63(0x473)]),_0x1eebd8=this[_0x4cff63(0x181)]();this[_0x4cff63(0x4a7)](_0x308ab9,_0x4cff63(0x473),_0x1eebd8);},Window_ActorCommand[_0x57ed21(0xb20)][_0x57ed21(0x181)]=function(){const _0x1c6ffa=_0x57ed21;return BattleManager[_0x1c6ffa(0x8ff)]();},Window_ActorCommand[_0x57ed21(0xb20)][_0x57ed21(0x219)]=function(){const _0x5cd084=_0x57ed21,_0x997e06=this[_0x5cd084(0xa65)](),_0x2e1f6e=VisuMZ[_0x5cd084(0xfb)][_0x5cd084(0x8d3)][_0x5cd084(0x809)][_0x5cd084(0xb92)],_0x10b645=_0x997e06==='text'?TextManager[_0x5cd084(0xb3f)]:_0x5cd084(0x710)[_0x5cd084(0x455)](_0x2e1f6e,TextManager[_0x5cd084(0xb3f)]),_0x3cfecc=this[_0x5cd084(0xa81)]();this['addCommand'](_0x10b645,_0x5cd084(0xb3f),_0x3cfecc);},Window_ActorCommand['prototype'][_0x57ed21(0xa81)]=function(){return!![];},Window_ActorCommand[_0x57ed21(0xb20)][_0x57ed21(0x96f)]=function(){const _0x56b64d=_0x57ed21;return VisuMZ[_0x56b64d(0xfb)][_0x56b64d(0x8d3)][_0x56b64d(0x107)][_0x56b64d(0x2b2)];},Window_ActorCommand[_0x57ed21(0xb20)][_0x57ed21(0x5df)]=function(_0x372ab5){const _0xc13762=_0x57ed21,_0x2a247c=this[_0xc13762(0x563)](_0x372ab5);if(_0x2a247c==='iconText'){if(_0xc13762(0x6fa)===_0xc13762(0x290)){const _0x109873=0xa,_0x10fd72=0x12c*_0x109873,_0x592265=0x1e*_0x109873;this['startMove'](_0x10fd72,0x0,_0x592265);}else this[_0xc13762(0x238)](_0x372ab5);}else{if(_0x2a247c===_0xc13762(0xa9d))this[_0xc13762(0x853)](_0x372ab5);else{if(_0xc13762(0x4e9)!==_0xc13762(0x4e9)){_0x13d12b[_0xc13762(0xfb)]['Game_Action_itemEffectAddAttackState'][_0xc13762(0x509)](this,_0x26a521,_0x22d71f);if(!_0x4044aa[_0xc13762(0x74a)]())return;for(const _0x1bca28 of this[_0xc13762(0x478)]()[_0xc13762(0x934)]()){if(_0x1bca28===_0x5443a9[_0xc13762(0xbe5)]()){let _0x4d6081=_0x1432a6[_0xc13762(0x978)];_0x4d6081*=_0x79e807['stateRate'](_0x1bca28),_0x4d6081*=this['subject']()[_0xc13762(0x90e)](_0x1bca28),_0x4d6081*=this[_0xc13762(0x23d)](_0x1c7606),_0x4af334['random']()<_0x4d6081&&(_0x59bb72[_0xc13762(0x668)]=!![],this[_0xc13762(0x302)](_0x3deee9));}}}else Window_Command[_0xc13762(0xb20)][_0xc13762(0x5df)][_0xc13762(0x509)](this,_0x372ab5);}}this['drawSingleSkillCost'](_0x372ab5);},Window_ActorCommand['prototype'][_0x57ed21(0xa65)]=function(){const _0x424637=_0x57ed21;return VisuMZ['BattleCore']['Settings'][_0x424637(0x107)][_0x424637(0xba8)];},Window_ActorCommand[_0x57ed21(0xb20)]['commandStyleCheck']=function(_0x3c257e){const _0x48fa2f=_0x57ed21;if(_0x3c257e<0x0)return _0x48fa2f(0x76a);const _0x488bb8=this[_0x48fa2f(0xa65)]();if(_0x488bb8!==_0x48fa2f(0x807))return'wOurV'!==_0x48fa2f(0x7ee)?_0x34ea1a['status']&&_0x160f9a[_0x48fa2f(0x88d)]['includes']('['+_0x22e78b+']'):_0x488bb8;else{if(this[_0x48fa2f(0x160)]()>0x0){const _0x490156=this[_0x48fa2f(0x2f7)](_0x3c257e);if(_0x490156[_0x48fa2f(0x463)](/\\I\[(\d+)\]/i)){const _0x46a9e6=this[_0x48fa2f(0x143)](_0x3c257e),_0x34bbe5=this[_0x48fa2f(0x2fa)](_0x490156)[_0x48fa2f(0x6c1)];if(_0x34bbe5<=_0x46a9e6['width']){if(_0x48fa2f(0x67e)===_0x48fa2f(0x196))_0x4a2620=_0x21e34d['CastPhysical'];else return _0x48fa2f(0x9c1);}else return _0x48fa2f(0xa9d);}}}return'text';},Window_ActorCommand[_0x57ed21(0xb20)][_0x57ed21(0x238)]=function(_0x3e9d57){const _0x26af4d=_0x57ed21,_0x535371=this[_0x26af4d(0x143)](_0x3e9d57),_0x44c807=this[_0x26af4d(0x2f7)](_0x3e9d57),_0x311aff=this[_0x26af4d(0x2fa)](_0x44c807)['width'];this[_0x26af4d(0x92f)](this['isCommandEnabled'](_0x3e9d57));const _0x1cf899=this[_0x26af4d(0x96f)]();if(_0x1cf899===_0x26af4d(0xb98))this['drawTextEx'](_0x44c807,_0x535371['x']+_0x535371[_0x26af4d(0x6c1)]-_0x311aff,_0x535371['y'],_0x311aff);else{if(_0x1cf899===_0x26af4d(0x415)){const _0x273bbc=_0x535371['x']+Math[_0x26af4d(0x4eb)]((_0x535371[_0x26af4d(0x6c1)]-_0x311aff)/0x2);this[_0x26af4d(0x309)](_0x44c807,_0x273bbc,_0x535371['y'],_0x311aff);}else this['drawTextEx'](_0x44c807,_0x535371['x'],_0x535371['y'],_0x311aff);}},Window_ActorCommand[_0x57ed21(0xb20)][_0x57ed21(0x853)]=function(_0x408d41){const _0x4c2751=_0x57ed21;this[_0x4c2751(0x2f7)](_0x408d41)['match'](/\\I\[(\d+)\]/i);const _0x3d1d94=Number(RegExp['$1'])||0x0,_0x16ce47=this['itemLineRect'](_0x408d41),_0x35036a=_0x16ce47['x']+Math[_0x4c2751(0x4eb)]((_0x16ce47[_0x4c2751(0x6c1)]-ImageManager[_0x4c2751(0xe9)])/0x2),_0x41adf9=_0x16ce47['y']+(_0x16ce47[_0x4c2751(0x8b2)]-ImageManager[_0x4c2751(0xb0b)])/0x2;this[_0x4c2751(0x5e3)](_0x3d1d94,_0x35036a,_0x41adf9);},Window_ActorCommand['prototype']['drawSingleSkillCost']=function(_0x123325){const _0x33284c=_0x57ed21;if(!(VisuMZ[_0x33284c(0xfb)][_0x33284c(0x8d3)]['ActorCmd']['ShowCosts']??!![]))return;const _0x295733=this[_0x33284c(0x1ef)](_0x123325);if(!['attack',_0x33284c(0x935),_0x33284c(0x658)]['includes'](_0x295733))return;const _0x29e37d=this['itemLineRect'](_0x123325);let _0x1285d2=null;if(_0x295733===_0x33284c(0xaf1))_0x33284c(0xaa9)!==_0x33284c(0xaa9)?_0x5d89a9[_0x33284c(0x10e)]=_0x5a5f51[_0x33284c(0xaa5)](_0x1d1f7f):_0x1285d2=$dataSkills[this['_actor'][_0x33284c(0x8ef)]()];else{if(_0x295733==='guard')_0x33284c(0x776)===_0x33284c(0x776)?_0x1285d2=$dataSkills[this[_0x33284c(0x5f8)][_0x33284c(0x17c)]()]:this[_0x33284c(0xbdc)]('thrust');else{if('cDvdB'!==_0x33284c(0xaeb))return this[_0x33284c(0x388)]();else _0x1285d2=$dataSkills[this[_0x33284c(0x3a1)][_0x123325]['ext']];}}this['drawSkillCost'](this['_actor'],_0x1285d2,_0x29e37d['x'],_0x29e37d['y'],_0x29e37d[_0x33284c(0x6c1)]);},Window_ActorCommand[_0x57ed21(0xb20)][_0x57ed21(0x883)]=function(_0xd5bfa8,_0x15a25b,_0x3c5d10,_0x2986ad,_0x162828){const _0x4cb6be=_0x57ed21;if(!_0x15a25b)return;Imported['VisuMZ_1_SkillsStatesCore']?Window_Command[_0x4cb6be(0xb20)][_0x4cb6be(0x883)][_0x4cb6be(0x509)](this,_0xd5bfa8,_0x15a25b,_0x3c5d10,_0x2986ad,_0x162828):Window_SkillList['prototype'][_0x4cb6be(0x883)][_0x4cb6be(0x509)](this,_0x15a25b,_0x3c5d10,_0x2986ad,_0x162828);},Window_ActorCommand[_0x57ed21(0xb20)][_0x57ed21(0x715)]=function(){},Window_ActorCommand[_0x57ed21(0xb20)][_0x57ed21(0x215)]=function(){const _0x5bffa1=_0x57ed21;Window_Command['prototype'][_0x5bffa1(0x215)][_0x5bffa1(0x509)](this);const _0x52cc5e=this['battleLayoutStyle']();_0x52cc5e===_0x5bffa1(0x131)&&this['showHelpWindow']();},Window_ActorCommand[_0x57ed21(0xb20)][_0x57ed21(0x3f0)]=function(){const _0x50490a=_0x57ed21;if(this[_0x50490a(0x768)])return this[_0x50490a(0x768)];return this[_0x50490a(0x768)]=SceneManager['_scene'][_0x50490a(0x3f0)](),this[_0x50490a(0x768)];},VisuMZ[_0x57ed21(0xfb)]['Window_ActorCommand_setup']=Window_ActorCommand[_0x57ed21(0xb20)][_0x57ed21(0x6c5)],Window_ActorCommand[_0x57ed21(0xb20)][_0x57ed21(0x6c5)]=function(_0x44d558){const _0x2d2d44=_0x57ed21,_0x1055dc=this[_0x2d2d44(0x3f0)]();if(_0x44d558&&['xp',_0x2d2d44(0x4a2)][_0x2d2d44(0x55d)](_0x1055dc))this[_0x2d2d44(0xaea)](_0x44d558);else _0x44d558&&[_0x2d2d44(0x131)][_0x2d2d44(0x55d)](_0x1055dc)&&(_0x2d2d44(0x738)!==_0x2d2d44(0x738)?this[_0x2d2d44(0x1c1)]():(this[_0x2d2d44(0x9ec)](_0x44d558),this[_0x2d2d44(0x105)]()));VisuMZ[_0x2d2d44(0xfb)]['Window_ActorCommand_setup'][_0x2d2d44(0x509)](this,_0x44d558);if(_0x44d558&&$gameTroop[_0x2d2d44(0x38d)]()['length']>0x0&&_0x44d558[_0x2d2d44(0x595)]()){if(_0x2d2d44(0x378)!==_0x2d2d44(0xac8))_0x44d558['battler']()['stepForward']();else{const _0x31ee72=_0x34f567[_0x2d2d44(0x10a)]('['+_0x4cda3e['$1'][_0x2d2d44(0x463)](/\d+/g)+']');for(const _0x3e3cb2 of _0x31ee72){if(!_0x39bc9a[_0x2d2d44(0x993)](_0x3e3cb2))return!![];}return![];}}},Window_ActorCommand[_0x57ed21(0xb20)]['resizeWindowXPStyle']=function(_0x2b83b1){const _0x4e0126=_0x57ed21,_0x278e34=Math[_0x4e0126(0x413)](Graphics[_0x4e0126(0x667)]/0x3),_0x40e334=Math[_0x4e0126(0x413)](Graphics['boxWidth']/$gameParty['battleMembers']()['length']),_0x5a70f8=Math[_0x4e0126(0x49b)](_0x278e34,_0x40e334),_0x272835=this[_0x4e0126(0x986)](VisuMZ[_0x4e0126(0xfb)][_0x4e0126(0x8d3)][_0x4e0126(0x6f9)][_0x4e0126(0xb05)]),_0x5d8fdc=Math[_0x4e0126(0x413)](_0x40e334*_0x2b83b1['index']())+Math[_0x4e0126(0x413)]((_0x40e334-_0x5a70f8)/0x2),_0x9e735e=Math[_0x4e0126(0x413)](SceneManager['_scene'][_0x4e0126(0x9ea)]['y']-_0x272835);this['move'](_0x5d8fdc,_0x9e735e,_0x5a70f8,_0x272835),this['createContents'](),this[_0x4e0126(0xb96)](0x1);},Window_ActorCommand[_0x57ed21(0xb20)][_0x57ed21(0x9ec)]=function(_0xf6522b){const _0x30e6cc=_0x57ed21,_0x1135cc=SceneManager[_0x30e6cc(0x34f)]['partyCommandWindowRectBorderStyle']();this[_0x30e6cc(0xa8c)](_0x1135cc['x'],_0x1135cc['y'],_0x1135cc['width'],_0x1135cc[_0x30e6cc(0x8b2)]),this[_0x30e6cc(0x575)](),this[_0x30e6cc(0xb96)](0x0);},Window_ActorCommand[_0x57ed21(0xb20)][_0x57ed21(0xaef)]=function(){const _0x2950e7=_0x57ed21;if(this[_0x2950e7(0x280)]){const _0x3a86fa=this[_0x2950e7(0x280)][_0x2950e7(0x10e)],_0x2bb33c=this['width']-0x8,_0x4006d5=this[_0x2950e7(0x8b2)],_0x158acc=this[_0x2950e7(0x250)],_0x30dd46=ColorManager[_0x2950e7(0x6d8)](),_0x71c6e5=ColorManager[_0x2950e7(0x11b)]();this[_0x2950e7(0x280)]['x']=0x4,_0x3a86fa[_0x2950e7(0x3c3)](_0x2bb33c,_0x4006d5),_0x3a86fa['gradientFillRect'](0x0,0x0,_0x2bb33c,_0x158acc,_0x71c6e5,_0x30dd46,!![]),_0x3a86fa[_0x2950e7(0x6a7)](0x0,_0x158acc,_0x2bb33c,_0x4006d5-_0x158acc*0x2,_0x30dd46),_0x3a86fa['gradientFillRect'](0x0,_0x4006d5-_0x158acc,_0x2bb33c,_0x158acc,_0x30dd46,_0x71c6e5,!![]),this[_0x2950e7(0x280)]['setFrame'](0x0,0x0,_0x2bb33c,_0x4006d5);}},Window_ActorCommand[_0x57ed21(0xb20)][_0x57ed21(0x6b8)]=function(){const _0x1f9918=_0x57ed21;if(!this[_0x1f9918(0x5f8)])return;const _0x9404c5=VisuMZ[_0x1f9918(0xfb)][_0x1f9918(0x8d3)][_0x1f9918(0x107)],_0x4a1c5d=this[_0x1f9918(0x144)]();switch(_0x4a1c5d){case _0x1f9918(0xaf1):this[_0x1f9918(0x9d9)]($dataSkills[this[_0x1f9918(0x5f8)][_0x1f9918(0x8ef)]()]);break;case _0x1f9918(0x935):this[_0x1f9918(0x9d9)]($dataSkills[this[_0x1f9918(0x5f8)]['guardSkillId']()]);break;case _0x1f9918(0x26c):const _0x3bde20=_0x9404c5[_0x1f9918(0x5f9)],_0x45137c=_0x3bde20[_0x1f9918(0x455)]($dataSystem['skillTypes'][this['currentExt']()]);this[_0x1f9918(0x9a6)]['setText'](_0x45137c);break;case _0x1f9918(0x658):this['setHelpWindowItem']($dataSkills[this[_0x1f9918(0x909)]()]);break;case _0x1f9918(0x720):this[_0x1f9918(0x9a6)]['setText'](_0x9404c5[_0x1f9918(0x8f5)]);break;case _0x1f9918(0x473):this['_helpWindow'][_0x1f9918(0xa3b)](_0x9404c5['HelpEscape']);break;case _0x1f9918(0xb3f):this[_0x1f9918(0x9a6)][_0x1f9918(0xa3b)](_0x9404c5[_0x1f9918(0x190)]);break;default:this[_0x1f9918(0x9a6)][_0x1f9918(0xa3b)]('');break;}},VisuMZ['BattleCore'][_0x57ed21(0xbaf)]=Window_BattleStatus[_0x57ed21(0xb20)][_0x57ed21(0xa1b)],Window_BattleStatus[_0x57ed21(0xb20)][_0x57ed21(0xa1b)]=function(_0x1a924d){const _0x4b3663=_0x57ed21;VisuMZ[_0x4b3663(0xfb)][_0x4b3663(0xbaf)]['call'](this,_0x1a924d),this[_0x4b3663(0xaa3)](),this[_0x4b3663(0x264)]();},Window_BattleStatus[_0x57ed21(0xb20)][_0x57ed21(0x3f0)]=function(){const _0x31a020=_0x57ed21;if(this['_battleLayoutStyle'])return this[_0x31a020(0x768)];return this['_battleLayoutStyle']=SceneManager[_0x31a020(0x34f)][_0x31a020(0x3f0)](),this['_battleLayoutStyle'];},Window_BattleStatus[_0x57ed21(0xb20)]['initBattleCore']=function(){const _0x4889bb=_0x57ed21;this['frameVisible']=this['isFrameVisible']();const _0x459518=VisuMZ[_0x4889bb(0xfb)]['Settings']['BattleLayout'];_0x459518[_0x4889bb(0x7e6)]&&(this['opacity']=0x0);},Window_BattleStatus[_0x57ed21(0xb20)]['isFrameVisible']=function(){const _0x154215=_0x57ed21,_0x29d8b3=VisuMZ[_0x154215(0xfb)]['Settings'][_0x154215(0x6f9)];if(_0x29d8b3[_0x154215(0x2d3)])return!![];const _0x1270ba=this[_0x154215(0x3f0)]();switch(_0x1270ba){case _0x154215(0x2c7):case'border':return!![];break;case _0x154215(0x4bc):case'xp':case _0x154215(0x4a2):default:return![];break;}},Window_BattleStatus[_0x57ed21(0xb20)][_0x57ed21(0xb37)]=function(){const _0x1e8288=_0x57ed21;if(this[_0x1e8288(0x7cf)]()){if(_0x1e8288(0x1b4)==='DEPkg')return 0x0;else{const _0x35c4a5=this[_0x1e8288(0x720)]()[_0x1e8288(0x49c)];return _0x35c4a5[_0x1e8288(0x463)](/(?:RAND|RANDOM)/i);}}else{if(_0x1e8288(0x3d7)!==_0x1e8288(0x3d7))this[_0x1e8288(0x46e)](_0x1e8288(0x991),_0x38310c);else return 0xa;}},Window_BattleStatus[_0x57ed21(0xb20)][_0x57ed21(0x428)]=function(){const _0x48defe=_0x57ed21,_0x83c767=this['battleLayoutStyle']();switch(_0x83c767){case _0x48defe(0x2c7):return 0x1;break;case'xp':case _0x48defe(0x4a2):return $gameParty[_0x48defe(0x1a2)]()[_0x48defe(0x98b)];break;case _0x48defe(0x4bc):default:return $gameParty[_0x48defe(0x988)]();break;}},Window_BattleStatus[_0x57ed21(0xb20)][_0x57ed21(0xbd9)]=function(){const _0x52bc24=_0x57ed21,_0xffdb83=this['battleLayoutStyle']();switch(_0xffdb83){case _0x52bc24(0x2c7):return Window_StatusBase[_0x52bc24(0xb20)][_0x52bc24(0xbd9)][_0x52bc24(0x509)](this);break;case _0x52bc24(0x4bc):case'xp':case _0x52bc24(0x4a2):default:return this['innerHeight'];break;}},Window_BattleStatus[_0x57ed21(0xb20)][_0x57ed21(0x8de)]=function(){const _0xe0a8c9=_0x57ed21,_0x58ced8=this['battleLayoutStyle']();switch(_0x58ced8){case'list':return Window_StatusBase[_0xe0a8c9(0xb20)]['rowSpacing'][_0xe0a8c9(0x509)](this);break;case'default':case'xp':case _0xe0a8c9(0x4a2):default:return 0x0;break;}},Window_BattleStatus['prototype'][_0x57ed21(0x7eb)]=function(){const _0x137343=_0x57ed21;if(this[_0x137343(0x7cf)]())Window_StatusBase['prototype'][_0x137343(0x7eb)]['call'](this);else{if('QtXqH'===_0x137343(0xa3a)){if(!_0x1a28f7['isSceneBattle']())return;if(!_0x43b440[_0x137343(0x3de)])return;_0x5a6b7e['ConvertParams'](_0x46b1ab,_0x1c4653);const _0x33722c=_0x588b91[_0x137343(0x660)](),_0x1f97c2=_0x543564[_0x137343(0x936)];if(!_0x33722c)return;const _0xfffad6=_0x53c54d[_0x137343(0x837)];if(!_0xfffad6)return;_0xfffad6[_0x137343(0x158)](_0x13ea65);if(_0x1f97c2)_0x33722c[_0x137343(0xa92)]('battleProjectiles');}else this[_0x137343(0x250)]=0x8;}},Window_BattleStatus[_0x57ed21(0xb20)]['loadWindowskin']=function(){const _0x5a8db9=_0x57ed21,_0x1de13f=VisuMZ[_0x5a8db9(0xfb)]['Settings'][_0x5a8db9(0x6f9)];_0x1de13f[_0x5a8db9(0x2d3)]?this[_0x5a8db9(0x3e2)]=ImageManager[_0x5a8db9(0x44c)](_0x1de13f[_0x5a8db9(0x2d3)]):Window_StatusBase[_0x5a8db9(0xb20)][_0x5a8db9(0xad5)]['call'](this);},Window_BattleStatus[_0x57ed21(0xb20)][_0x57ed21(0xb66)]=function(_0x401adc){const _0x1e26db=_0x57ed21,_0x3704bc=VisuMZ['BattleCore'][_0x1e26db(0x8d3)]['BattleLayout'];if(_0x3704bc[_0x1e26db(0x86f)])return;Window_StatusBase[_0x1e26db(0xb20)][_0x1e26db(0xb66)]['call'](this,_0x401adc);},Window_BattleStatus[_0x57ed21(0xb20)][_0x57ed21(0x102)]=function(){this['_requestRefresh']=!![];},Window_BattleStatus[_0x57ed21(0xb20)][_0x57ed21(0x402)]=function(){const _0x3d85ba=_0x57ed21;Window_StatusBase[_0x3d85ba(0xb20)][_0x3d85ba(0x402)][_0x3d85ba(0x509)](this),this[_0x3d85ba(0x750)](),this[_0x3d85ba(0xbed)]();if(this[_0x3d85ba(0x3f0)]()==='border')this[_0x3d85ba(0x5d8)]();},Window_BattleStatus['prototype']['updateRefresh']=function(){const _0xf416b4=_0x57ed21;if($gameTemp['isBattleRefreshRequested']())this[_0xf416b4(0x927)](),this[_0xf416b4(0x24f)]=![],$gameTemp['clearBattleRefreshRequest']();else this[_0xf416b4(0x24f)]&&(this[_0xf416b4(0x24f)]=![],this['refresh'](),this[_0xf416b4(0xb40)]());},Window_BattleStatus['prototype']['show']=function(){const _0x405d6d=_0x57ed21;Window_StatusBase[_0x405d6d(0xb20)][_0x405d6d(0x5be)][_0x405d6d(0x509)](this);if(!$gameSystem[_0x405d6d(0x119)]())this[_0x405d6d(0xb54)]();},Window_BattleStatus[_0x57ed21(0xb20)][_0x57ed21(0x715)]=function(){const _0x49266c=_0x57ed21;if(this[_0x49266c(0x7fb)]===Window_BattleStatus)return;Window_StatusBase[_0x49266c(0xb20)][_0x49266c(0x715)][_0x49266c(0x509)](this);},Window_BattleStatus[_0x57ed21(0xb20)]['drawBackgroundRect']=function(_0x2b9cb8){const _0x5b1da6=_0x57ed21,_0x2e3454=this['battleLayoutStyle']();switch(_0x2e3454){case'xp':case _0x5b1da6(0x4a2):break;case _0x5b1da6(0x4bc):case _0x5b1da6(0x2c7):case _0x5b1da6(0x131):default:return Window_StatusBase[_0x5b1da6(0xb20)][_0x5b1da6(0x66a)][_0x5b1da6(0x509)](this,_0x2b9cb8);break;}},VisuMZ['BattleCore'][_0x57ed21(0x998)]=Window_BattleStatus[_0x57ed21(0xb20)][_0x57ed21(0xa87)],Window_BattleStatus['prototype'][_0x57ed21(0xa87)]=function(_0x4db75a){const _0x18601b=_0x57ed21,_0x2eec37=this[_0x18601b(0x3f0)]();switch(_0x2eec37){case'list':this['drawItemImageListStyle'](_0x4db75a);break;case'xp':this['drawItemImageXPStyle'](_0x4db75a);break;case _0x18601b(0x4a2):this[_0x18601b(0x6c4)](_0x4db75a);break;case _0x18601b(0x4bc):case _0x18601b(0x131):default:VisuMZ[_0x18601b(0xfb)]['Window_BattleStatus_drawItemImage'][_0x18601b(0x509)](this,_0x4db75a);break;}},Window_BattleStatus[_0x57ed21(0xb20)][_0x57ed21(0x2bb)]=function(_0x10abad){const _0x34861e=_0x57ed21,_0x3108e8=this[_0x34861e(0x3f0)]();if(!$gameSystem[_0x34861e(0x119)]())this['centerFrontViewSprite'](_0x10abad);switch(_0x3108e8){case _0x34861e(0x2c7):this[_0x34861e(0x55a)](_0x10abad);break;case'xp':case _0x34861e(0x4a2):case _0x34861e(0x4bc):case'border':default:this['drawItemStatusXPStyle'](_0x10abad);break;}},Window_BattleStatus[_0x57ed21(0xb20)]['refreshCursor']=function(){const _0x39acac=_0x57ed21,_0xf23137=this[_0x39acac(0x3f0)]();if(['xp'][_0x39acac(0x55d)](_0xf23137)&&!$gameSystem[_0x39acac(0x119)]()){this['setCursorRect'](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x39acac(0xb20)]['refreshCursor'][_0x39acac(0x509)](this);},Window_BattleStatus['prototype'][_0x57ed21(0x437)]=function(_0x4beb7a){const _0x29ce75=_0x57ed21,_0x39d565=this['actor'](_0x4beb7a)[_0x29ce75(0x595)]();if(!_0x39d565)return;const _0x9a3cee=this[_0x29ce75(0x3f0)](),_0x869546=this[_0x29ce75(0xa6b)](_0x4beb7a);let _0x74749e=Math[_0x29ce75(0x413)](_0x869546['x']+_0x869546[_0x29ce75(0x6c1)]/0x2)+this[_0x29ce75(0x250)];[_0x29ce75(0x2c7)]['includes'](_0x9a3cee)&&(_0x74749e=_0x869546[_0x29ce75(0x6c1)]/$gameParty[_0x29ce75(0x1a2)]()['length'],_0x74749e*=_0x4beb7a,_0x74749e+=_0x869546[_0x29ce75(0x6c1)]/$gameParty[_0x29ce75(0x1a2)]()[_0x29ce75(0x98b)]/0x2);let _0xb007ed=Math[_0x29ce75(0x413)](this['frontviewSpriteY'](_0x4beb7a,_0x39d565,_0x869546));_0x39d565[_0x29ce75(0xb3c)](_0x74749e,_0xb007ed),this['addChildAt'](_0x39d565,0x1),_0x39d565['show'](),this[_0x29ce75(0x3dd)](),this[_0x29ce75(0xb40)]();},Window_BattleStatus[_0x57ed21(0xb20)]['frontviewSpriteY']=function(_0x1a597a,_0x106abb,_0x4b75e5){const _0x27f916=_0x57ed21,_0x222858=VisuMZ[_0x27f916(0xfb)][_0x27f916(0x8d3)][_0x27f916(0x6f9)],_0x1ef78a=this['battleLayoutStyle']();if(_0x1ef78a==='xp'){if(_0x27f916(0x44d)===_0x27f916(0x44d)){const _0x50da9d=_0x222858[_0x27f916(0x35b)];switch(_0x50da9d['toLowerCase']()[_0x27f916(0x1f6)]()){case _0x27f916(0x465):return _0x4b75e5[_0x27f916(0x8b2)]-_0x106abb[_0x27f916(0x4e6)][_0x27f916(0x8b2)]/0x4;break;case _0x27f916(0x415):const _0x94e24d=_0x222858[_0x27f916(0x33d)];return(_0x4b75e5[_0x27f916(0x8b2)]+(_0x106abb[_0x27f916(0x8b2)]||_0x94e24d))/0x2;break;case _0x27f916(0x66b):return 0x0;case _0x27f916(0xb1c):default:return this['nameY'](_0x4b75e5);break;}}else this[_0x27f916(0x772)]+=0x10;}else{if(_0x1ef78a===_0x27f916(0x4a2)){}}return _0x106abb[_0x27f916(0x8b2)];},Sprite_Name[_0x57ed21(0xb20)][_0x57ed21(0xaa4)]=function(){return 0x24;},Sprite_Name['prototype']['redraw']=function(){const _0x21cab3=_0x57ed21,_0x2dd619=this['name'](),_0xa16e92=this['bitmapWidth'](),_0x5b03ea=this[_0x21cab3(0xaa4)]();this[_0x21cab3(0x180)](),this[_0x21cab3(0x10e)]['clear'](),this[_0x21cab3(0x10e)][_0x21cab3(0x5ac)](_0x2dd619,0x0,0x0,_0xa16e92,_0x5b03ea,_0x21cab3(0x50f));},Bitmap['prototype'][_0x57ed21(0x5ac)]=function(_0x2785cd,_0x446bb8,_0x3b8ad7,_0x19ec56,_0x1410c5,_0x53fb52){const _0x231f0a=_0x57ed21,_0x628151=this[_0x231f0a(0x5eb)],_0x17d5c0=_0x628151['globalAlpha'];_0x19ec56=_0x19ec56||0xffffffff;let _0x15e976=_0x446bb8,_0x108693=Math[_0x231f0a(0x413)](_0x3b8ad7+0x18/0x2+this[_0x231f0a(0x88e)]*0.35);_0x53fb52===_0x231f0a(0x415)&&('XSkIo'===_0x231f0a(0x8e7)?_0x15e976+=_0x19ec56/0x2:(this[_0x231f0a(0x9ec)](_0xe69a28),this[_0x231f0a(0x105)]())),_0x53fb52===_0x231f0a(0xb98)&&(_0x15e976+=_0x19ec56),_0x628151['save'](),_0x628151[_0x231f0a(0x6d2)]=this[_0x231f0a(0x4b1)](),_0x628151[_0x231f0a(0x9e4)]=_0x53fb52,_0x628151[_0x231f0a(0x113)]=_0x231f0a(0x13d),_0x628151[_0x231f0a(0x16f)]=0x1,this[_0x231f0a(0x274)](_0x2785cd,_0x15e976,_0x108693,_0x19ec56),_0x628151[_0x231f0a(0x16f)]=_0x17d5c0,this['_drawTextBody'](_0x2785cd,_0x15e976,_0x108693,_0x19ec56),_0x628151[_0x231f0a(0x9fb)](),this[_0x231f0a(0xa9a)][_0x231f0a(0x402)]();},Window_BattleStatus['prototype'][_0x57ed21(0x598)]=function(_0x5e0061){const _0x1fa3bf=_0x57ed21;return this[_0x1fa3bf(0x600)](_0x5e0061)-this[_0x1fa3bf(0xb17)]();},Window_BattleStatus[_0x57ed21(0xb20)]['drawItemImageListStyle']=function(_0x11f593){const _0x3465d8=_0x57ed21;if(!VisuMZ['BattleCore'][_0x3465d8(0x8d3)][_0x3465d8(0x6f9)][_0x3465d8(0x221)])return;const _0x510b4d=this[_0x3465d8(0x241)](_0x11f593),_0x2ed254=this[_0x3465d8(0xa6b)](_0x11f593);_0x2ed254[_0x3465d8(0x6c1)]=ImageManager[_0x3465d8(0x38c)],_0x2ed254[_0x3465d8(0x8b2)]-=0x2,this[_0x3465d8(0x541)](_0x510b4d,_0x2ed254['x']+0x1,_0x2ed254['y']+0x1,_0x2ed254[_0x3465d8(0x6c1)],_0x2ed254['height']);},Window_BattleStatus[_0x57ed21(0xb20)][_0x57ed21(0x55a)]=function(_0x1f3a80){const _0x592661=_0x57ed21,_0x386600=VisuMZ[_0x592661(0xfb)][_0x592661(0x8d3)][_0x592661(0x6f9)],_0x11361f=$dataSystem['optDisplayTp']?0x4:0x3,_0x38b6e7=_0x11361f*0x80+(_0x11361f-0x1)*0x8+0x4,_0x3cd6f7=this[_0x592661(0x241)](_0x1f3a80),_0x1f3b61=this[_0x592661(0xa6b)](_0x1f3a80);let _0x49d1c7=_0x1f3b61['x']+this[_0x592661(0x250)];if(_0x386600['ShowFacesListStyle'])_0x49d1c7=_0x1f3b61['x']+ImageManager[_0x592661(0x38c)]+0x8;else{if('GIAYe'!==_0x592661(0x2df))return _0x37b864[_0x592661(0x34f)][_0x592661(0x3c5)]&&_0x1541d1[_0x592661(0x34f)]['_enemyWindow'][_0x592661(0x216)]&&_0x2300ca['_scene']['_enemyWindow'][_0x592661(0xa64)][_0x592661(0x55d)](this[_0x592661(0x635)]);else _0x49d1c7+=ImageManager[_0x592661(0xe9)];}const _0x315ce3=Math[_0x592661(0x413)](Math[_0x592661(0x49b)](_0x1f3b61['x']+_0x1f3b61['width']-_0x38b6e7,_0x49d1c7)),_0x16fbda=Math['round'](_0x1f3b61['y']+(_0x1f3b61[_0x592661(0x8b2)]-Sprite_Name[_0x592661(0xb20)][_0x592661(0xaa4)]())/0x2),_0x1f3736=Math[_0x592661(0x413)](_0x315ce3-ImageManager[_0x592661(0xe9)]/0x2-0x4),_0xddb59a=Math[_0x592661(0x413)](_0x1f3b61['y']+(_0x1f3b61[_0x592661(0x8b2)]-ImageManager[_0x592661(0xb0b)])/0x2+ImageManager['iconHeight']/0x2);let _0xd0333a=_0x315ce3+0x88;const _0x16adfc=_0x16fbda;this[_0x592661(0xa06)](_0x3cd6f7,_0x315ce3-0x4+(_0x386600[_0x592661(0x9f3)]||0x0),_0x16fbda+(_0x386600[_0x592661(0xaa8)]||0x0)),this[_0x592661(0x395)](_0x3cd6f7,_0x315ce3+(_0x386600[_0x592661(0x3f7)]||0x0),_0x16fbda+(_0x386600[_0x592661(0xa15)]||0x0)),this[_0x592661(0x65b)](_0x3cd6f7,_0x1f3736+(_0x386600[_0x592661(0xbd3)]||0x0),_0xddb59a+(_0x386600[_0x592661(0x7c6)]||0x0)),this[_0x592661(0x54c)](_0x3cd6f7,'hp',_0xd0333a+0x88*0x0+(_0x386600[_0x592661(0x45f)]||0x0),_0x16adfc+(_0x386600['HpGaugeOffsetY']||0x0)),this[_0x592661(0x54c)](_0x3cd6f7,'mp',_0xd0333a+0x88*0x1+(_0x386600[_0x592661(0x85f)]||0x0),_0x16adfc+(_0x386600[_0x592661(0xb55)]||0x0)),$dataSystem[_0x592661(0x904)]&&this['placeGauge'](_0x3cd6f7,'tp',_0xd0333a+0x88*0x2+(_0x386600['TpGaugeOffsetX']||0x0),_0x16adfc+(_0x386600[_0x592661(0xb06)]||0x0));},Window_BattleStatus['prototype'][_0x57ed21(0x4cf)]=function(_0x49b74d){const _0x42d567=_0x57ed21;if(!$gameSystem['isSideView']())return;VisuMZ[_0x42d567(0xfb)][_0x42d567(0x998)][_0x42d567(0x509)](this,_0x49b74d);},Window_BattleStatus['prototype'][_0x57ed21(0x13c)]=function(_0x24bfd){const _0x5cc1d0=_0x57ed21,_0x2d39dd=VisuMZ[_0x5cc1d0(0xfb)][_0x5cc1d0(0x8d3)][_0x5cc1d0(0x6f9)],_0x4ebc63=this[_0x5cc1d0(0x241)](_0x24bfd),_0x1ffe41=this['itemRect'](_0x24bfd),_0x52888d=Math[_0x5cc1d0(0x413)](_0x1ffe41['x']+(_0x1ffe41[_0x5cc1d0(0x6c1)]-0x80)/0x2),_0x56076f=this[_0x5cc1d0(0x598)](_0x1ffe41);let _0x10b8eb=_0x52888d-ImageManager[_0x5cc1d0(0xe9)]/0x2-0x4,_0x38ef00=_0x56076f+ImageManager['iconHeight']/0x2;if(_0x10b8eb-ImageManager[_0x5cc1d0(0xe9)]/0x2<_0x1ffe41['x']){if('dVmyi'===_0x5cc1d0(0x8b3)){if(!_0x2e81eb['isSideView']())return;const _0x2afe5a=this[_0x5cc1d0(0x595)]();if(!_0x2afe5a)return;if(_0x2992f2)this[_0x5cc1d0(0x9bd)](_0x4c73f6+_0x2afe5a['_baseX'],_0x217e87+_0x2afe5a[_0x5cc1d0(0x656)],![]);_0x273942+=_0x2afe5a['_baseX']-_0x2afe5a[_0x5cc1d0(0x57c)],_0x29bbe4+=_0x2afe5a[_0x5cc1d0(0x656)]-_0x2afe5a[_0x5cc1d0(0x214)],_0x2afe5a['startMove'](_0x99910a,_0x268b3c,_0x4c8f8c);if(_0x32a087[_0x5cc1d0(0x849)])_0x2afe5a['setMoveEasingType'](_0x3bb466||'Linear');}else _0x10b8eb=_0x52888d+ImageManager['iconWidth']/0x2-0x4,_0x38ef00=_0x56076f-ImageManager['iconHeight']/0x2;}const _0x2ca312=_0x52888d,_0x46ac56=this['basicGaugesY'](_0x1ffe41);this['placeTimeGauge'](_0x4ebc63,_0x52888d+(_0x2d39dd['TpbGaugeOffsetX']||0x0),_0x56076f+(_0x2d39dd[_0x5cc1d0(0xaa8)]||0x0)),this['placeActorName'](_0x4ebc63,_0x52888d+(_0x2d39dd[_0x5cc1d0(0x3f7)]||0x0),_0x56076f+(_0x2d39dd[_0x5cc1d0(0xa15)]||0x0)),this[_0x5cc1d0(0x65b)](_0x4ebc63,_0x10b8eb+(_0x2d39dd[_0x5cc1d0(0xbd3)]||0x0),_0x38ef00+(_0x2d39dd[_0x5cc1d0(0x7c6)]||0x0)),this[_0x5cc1d0(0x54c)](_0x4ebc63,'hp',_0x2ca312+(_0x2d39dd[_0x5cc1d0(0x45f)]||0x0),_0x46ac56+(_0x2d39dd[_0x5cc1d0(0x854)]||0x0)),this[_0x5cc1d0(0x54c)](_0x4ebc63,'mp',_0x2ca312+(_0x2d39dd['MpGaugeOffsetX']||0x0),_0x46ac56+this[_0x5cc1d0(0xb17)]()+(_0x2d39dd[_0x5cc1d0(0xb55)]||0x0));if($dataSystem[_0x5cc1d0(0x904)]){if('rgldm'===_0x5cc1d0(0x12f))this[_0x5cc1d0(0x54c)](_0x4ebc63,'tp',_0x2ca312+(_0x2d39dd[_0x5cc1d0(0xbbc)]||0x0),_0x46ac56+this[_0x5cc1d0(0xb17)]()*0x2+(_0x2d39dd['TpGaugeOffsetY']||0x0));else{const _0x257ae1=_0x50f2e5(_0x200478['$1'])[_0x5cc1d0(0x4ff)](/[\r\n]+/)['remove'](''),_0x51e227=_0x197f38[_0x5cc1d0(0xae8)](_0x257ae1);_0x48e3b3[_0x5cc1d0(0x35d)]=_0x418d69['getWtypeIdWithName'](_0x51e227);}}},Window_BattleStatus['prototype'][_0x57ed21(0x33e)]=function(_0x2221d7){const _0xa37718=_0x57ed21;if(!VisuMZ[_0xa37718(0xfb)][_0xa37718(0x8d3)][_0xa37718(0x6f9)]['ShowPortraits'])return![];if(_0x2221d7[_0xa37718(0x82e)]())return!![];return Imported[_0xa37718(0x64e)]&&_0x2221d7[_0xa37718(0x20d)]();},Game_Actor[_0x57ed21(0xb20)][_0x57ed21(0x2c5)]=function(){const _0x17a238=_0x57ed21;if(this[_0x17a238(0x241)]()['note'][_0x17a238(0x463)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i)){if(_0x17a238(0x491)!==_0x17a238(0x6c7))return Number(RegExp['$1']);else this[_0x17a238(0x977)][_0x17a238(0x46e)](_0x17a238(0x972),_0x31b5a5[_0x17a238(0x242)]['format'](_0x33c494)),this[_0x17a238(0x977)]['push']('wait'),_0xc245b4=!![];}else{if(this[_0x17a238(0x241)]()[_0x17a238(0x75a)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if('KOiwx'===_0x17a238(0x5c1))return Number(RegExp['$1']);else{const _0x4441e6=this[_0x17a238(0x241)](_0x28955e)[_0x17a238(0x595)]();if(!_0x4441e6)return;const _0x7516d0=this[_0x17a238(0x3f0)](),_0x1fcd82=this[_0x17a238(0xa6b)](_0x1d2cff);let _0x108e17=_0x5d8db9[_0x17a238(0x413)](_0x1fcd82['x']+_0x1fcd82[_0x17a238(0x6c1)]/0x2)+this['padding'];[_0x17a238(0x2c7)][_0x17a238(0x55d)](_0x7516d0)&&(_0x108e17=_0x1fcd82['width']/_0xbc9bb0[_0x17a238(0x1a2)]()[_0x17a238(0x98b)],_0x108e17*=_0x25d6c5,_0x108e17+=_0x1fcd82[_0x17a238(0x6c1)]/_0x254a32[_0x17a238(0x1a2)]()[_0x17a238(0x98b)]/0x2);let _0x295f6c=_0x52e761['round'](this['frontviewSpriteY'](_0x217fca,_0x4441e6,_0x1fcd82));_0x4441e6[_0x17a238(0xb3c)](_0x108e17,_0x295f6c),this['addChildAt'](_0x4441e6,0x1),_0x4441e6[_0x17a238(0x5be)](),this['updateEffectsContainer'](),this[_0x17a238(0xb40)]();}}}return 0x0;},Game_Actor[_0x57ed21(0xb20)]['getBattlePortraitOffsetY']=function(){const _0x2b25f5=_0x57ed21;if(this[_0x2b25f5(0x241)]()[_0x2b25f5(0x75a)][_0x2b25f5(0x463)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x2b25f5(0x241)]()[_0x2b25f5(0x75a)][_0x2b25f5(0x463)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x2b25f5(0x5b5)!==_0x2b25f5(0x5b5))this[_0x2b25f5(0x4b4)][_0x2b25f5(0x2d6)]=this[_0x2b25f5(0x706)]();else return Number(RegExp['$2']);}}return 0x0;},Window_BattleStatus[_0x57ed21(0xb20)][_0x57ed21(0x6c4)]=function(_0x40ab4f){const _0x55f7be=_0x57ed21,_0x47c6da=this['actor'](_0x40ab4f);if(this[_0x55f7be(0x33e)](_0x47c6da)){if('CoFAz'!=='lEFlI'){const _0xa32215='actor%1-portrait'[_0x55f7be(0x455)](_0x47c6da[_0x55f7be(0x3b4)]()),_0x6c6b2e=this[_0x55f7be(0x2fd)](_0xa32215,Sprite),_0x56457f=_0x47c6da['getBattlePortraitFilename']();_0x56457f!==''?_0x55f7be(0xa95)===_0x55f7be(0xa95)?_0x6c6b2e[_0x55f7be(0x10e)]=ImageManager[_0x55f7be(0xaa5)](_0x56457f):this[_0x55f7be(0x1ea)]():_0x6c6b2e[_0x55f7be(0x10e)]=ImageManager[_0x55f7be(0x7f1)];const _0x535c51=this[_0x55f7be(0xa6b)](_0x40ab4f);_0x6c6b2e[_0x55f7be(0xab6)]['x']=0.5,_0x6c6b2e[_0x55f7be(0xab6)]['y']=0x1;let _0x3e73e3=Math['round'](_0x535c51['x']+_0x535c51[_0x55f7be(0x6c1)]/0x2)+this['padding'];_0x3e73e3+=_0x47c6da[_0x55f7be(0x2c5)]();let _0x106893=Math[_0x55f7be(0x413)](this[_0x55f7be(0x8b2)]);_0x106893+=_0x47c6da[_0x55f7be(0x457)](),_0x6c6b2e[_0x55f7be(0xa8c)](_0x3e73e3,_0x106893);const _0x50b7a1=VisuMZ['BattleCore'][_0x55f7be(0x8d3)][_0x55f7be(0x6f9)][_0x55f7be(0xb08)];_0x6c6b2e[_0x55f7be(0x19e)]['x']=_0x50b7a1,_0x6c6b2e['scale']['y']=_0x50b7a1,_0x6c6b2e['show']();}else{for(const _0x10a8d9 of _0x518a10){_0x10a8d9[_0x55f7be(0x463)](_0xcc5a9);const _0x428cd2=_0x16834a(_0x63b461['$1'])[_0x55f7be(0x4ff)](',')['map'](_0x2647b7=>_0x208ef0(_0x2647b7)[_0x55f7be(0xaaa)]()[_0x55f7be(0x1f6)]());_0x2862b8=_0x16a83c[_0x55f7be(0x8a9)](_0x428cd2);}!_0x1a0eba[_0x55f7be(0x75a)][_0x55f7be(0x463)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x57096b[_0x55f7be(0x75a)]+=_0x55f7be(0x534));;}}else{const _0x3e8656=this['faceRect'](_0x40ab4f);this[_0x55f7be(0x541)](_0x47c6da,_0x3e8656['x'],_0x3e8656['y'],_0x3e8656['width'],_0x3e8656[_0x55f7be(0x8b2)]);}},Window_BattleStatus[_0x57ed21(0xb20)][_0x57ed21(0x2fd)]=function(_0x4c7ecf,_0x3bd25f){const _0x878212=_0x57ed21,_0x20d9d9=this['_additionalSprites'];if(_0x20d9d9[_0x4c7ecf]){if(_0x878212(0x381)===_0x878212(0x381))return _0x20d9d9[_0x4c7ecf];else this['x']=_0x5480cf[_0x878212(0x667)]-this['enemy']()[_0x878212(0x595)]()[_0x878212(0xa30)];}else{const _0x557e28=new _0x3bd25f();return _0x20d9d9[_0x4c7ecf]=_0x557e28,this[_0x878212(0x811)](_0x557e28),this[_0x878212(0x811)](this['_cursorArea']),_0x557e28;}},Window_BattleStatus['prototype'][_0x57ed21(0x612)]=function(){const _0x4fd395=_0x57ed21;this[_0x4fd395(0x1f1)](),this[_0x4fd395(0x861)](),Window_StatusBase[_0x4fd395(0xb20)][_0x4fd395(0x612)][_0x4fd395(0x509)](this),this[_0x4fd395(0x8ed)]();},Window_BattleStatus[_0x57ed21(0xb20)][_0x57ed21(0x1f1)]=function(){const _0x3c9d01=_0x57ed21;this[_0x3c9d01(0x4b4)]=new Sprite(),this[_0x3c9d01(0x4b4)][_0x3c9d01(0x691)]=[new PIXI[(_0x3c9d01(0x691))]['AlphaFilter']()],this[_0x3c9d01(0x4b4)][_0x3c9d01(0x6ef)]=new Rectangle(),this['_cursorArea']['move'](this[_0x3c9d01(0x775)],this[_0x3c9d01(0x775)]),this[_0x3c9d01(0x1cc)](this[_0x3c9d01(0x4b4)]);},Window_BattleStatus[_0x57ed21(0xb20)][_0x57ed21(0x861)]=function(){const _0x351e11=_0x57ed21;this[_0x351e11(0x5e0)]=new Sprite(),this[_0x351e11(0x1cc)](this[_0x351e11(0x5e0)]);},Window_BattleStatus['prototype'][_0x57ed21(0x3dd)]=function(){const _0x3086a2=_0x57ed21;if(this[_0x3086a2(0x5e0)]){if(_0x3086a2(0x813)===_0x3086a2(0x9a1))return!![];else this['addChild'](this['_effectsContainer']);}},Window_BattleStatus[_0x57ed21(0xb20)]['_createDamageContainer']=function(){const _0x27aa5a=_0x57ed21;this[_0x27aa5a(0xbe7)]=new Sprite(),this['addChild'](this[_0x27aa5a(0xbe7)]);},Window_BattleStatus[_0x57ed21(0xb20)][_0x57ed21(0x111)]=function(){const _0x549a6e=_0x57ed21;this[_0x549a6e(0x240)]=new Sprite();for(let _0x596a7c=0x0;_0x596a7c<0x9;_0x596a7c++){_0x549a6e(0x253)===_0x549a6e(0x906)?this[_0x549a6e(0x99a)]():this['_cursorSprite'][_0x549a6e(0x1cc)](new Sprite());}this[_0x549a6e(0x4b4)][_0x549a6e(0x1cc)](this[_0x549a6e(0x240)]);},Window_BattleStatus[_0x57ed21(0xb20)][_0x57ed21(0x244)]=function(){const _0x4ae889=_0x57ed21;Window_StatusBase[_0x4ae889(0xb20)][_0x4ae889(0x244)][_0x4ae889(0x509)](this),this[_0x4ae889(0x65a)]();},Window_BattleStatus[_0x57ed21(0xb20)]['_updateCursorArea']=function(){const _0x3c4e87=_0x57ed21,_0x48c00d=this[_0x3c4e87(0x775)];this[_0x3c4e87(0x4b4)][_0x3c4e87(0xa8c)](_0x48c00d,_0x48c00d),this['_cursorArea']['x']=_0x48c00d-this['origin']['x'],this[_0x3c4e87(0x4b4)]['y']=_0x48c00d-this[_0x3c4e87(0x900)]['y'],this[_0x3c4e87(0x62f)]>0x0&&this[_0x3c4e87(0x707)]>0x0?this[_0x3c4e87(0x4b4)][_0x3c4e87(0x2d6)]=this[_0x3c4e87(0x706)]():this[_0x3c4e87(0x4b4)][_0x3c4e87(0x2d6)]=![];},Window_BattleStatus['prototype'][_0x57ed21(0x588)]=function(){const _0x7619a1=_0x57ed21;Window_StatusBase[_0x7619a1(0xb20)]['_updateFilterArea'][_0x7619a1(0x509)](this),this['_updateCursorFilterArea']();},Window_BattleStatus[_0x57ed21(0xb20)][_0x57ed21(0x4de)]=function(){const _0x1cd2d8=_0x57ed21,_0x4dac2c=this[_0x1cd2d8(0x4b4)][_0x1cd2d8(0x2ee)][_0x1cd2d8(0x3ba)](new Point(0x0,0x0)),_0x407f40=this[_0x1cd2d8(0x4b4)][_0x1cd2d8(0x6ef)];_0x407f40['x']=_0x4dac2c['x']+this[_0x1cd2d8(0x900)]['x'],_0x407f40['y']=_0x4dac2c['y']+this['origin']['y'],_0x407f40[_0x1cd2d8(0x6c1)]=this['innerWidth'],_0x407f40[_0x1cd2d8(0x8b2)]=this[_0x1cd2d8(0x707)];},Window_BattleStatus[_0x57ed21(0xb20)][_0x57ed21(0x17d)]=function(_0x413dfd){const _0x4dcdea=_0x57ed21;if(this[_0x4dcdea(0x3f0)]()!==_0x4dcdea(0x4a2))return;this[_0x4dcdea(0x6c4)](_0x413dfd[_0x4dcdea(0x773)]());},Window_BattleStatus[_0x57ed21(0xb20)]['addDamageSprite']=function(_0x448a37,_0xd95b6a){const _0xe020a9=_0x57ed21;if(!this[_0xe020a9(0xbe7)])return;if(!_0x448a37)return;if(!_0xd95b6a)return;const _0x3b55af=this[_0xe020a9(0xa6b)](_0xd95b6a['index']());_0x3b55af['x']+=_0x3b55af[_0xe020a9(0x6c1)]/0x2+this[_0xe020a9(0x250)],_0x448a37['x']=_0x3b55af['x'],_0x448a37['y']=_0x3b55af['y'],this[_0xe020a9(0xbe7)][_0xe020a9(0x1cc)](_0x448a37);},Window_BattleStatus['prototype'][_0x57ed21(0x5ad)]=function(_0x1107bb){const _0x513d3f=_0x57ed21;if(!this[_0x513d3f(0xbe7)])return;if(!_0x1107bb)return;this[_0x513d3f(0xbe7)]['removeChild'](_0x1107bb);},Window_BattleStatus[_0x57ed21(0xb20)][_0x57ed21(0x5d8)]=function(){const _0x1ff09f=_0x57ed21;if(!this[_0x1ff09f(0x9cf)]())return;if(!this[_0x1ff09f(0x973)])this[_0x1ff09f(0x712)]();this['prepareBorderActor'](),this[_0x1ff09f(0x805)]();},Window_BattleStatus[_0x57ed21(0xb20)]['isBorderStylePortraitShown']=function(){const _0x536b4c=_0x57ed21;if(this[_0x536b4c(0x7fb)]!==Window_BattleStatus)return![];if(!SceneManager[_0x536b4c(0x9d4)]())return![];return VisuMZ[_0x536b4c(0xfb)][_0x536b4c(0x8d3)][_0x536b4c(0x6f9)][_0x536b4c(0x84f)];},Window_BattleStatus[_0x57ed21(0xb20)][_0x57ed21(0x712)]=function(){const _0x3bb359=_0x57ed21;this[_0x3bb359(0x973)]=new Sprite();const _0x304d9b=SceneManager[_0x3bb359(0x34f)],_0x1e1c9f=_0x304d9b[_0x3bb359(0x477)][_0x3bb359(0x50e)](_0x304d9b['_windowLayer']);_0x304d9b[_0x3bb359(0x865)](this[_0x3bb359(0x973)],_0x1e1c9f),this['_borderPortraitSprite'][_0x3bb359(0xab6)]['x']=0.5,this[_0x3bb359(0x973)][_0x3bb359(0xab6)]['y']=0x1;const _0x5ec028=VisuMZ[_0x3bb359(0xfb)][_0x3bb359(0x8d3)][_0x3bb359(0x6f9)][_0x3bb359(0x283)];this[_0x3bb359(0x973)]['scale']['x']=_0x5ec028,this['_borderPortraitSprite'][_0x3bb359(0x19e)]['y']=_0x5ec028,this['_borderPortraitSprite']['y']=this['y']+this[_0x3bb359(0x8b2)],this[_0x3bb359(0x70b)]=0x0;},Window_BattleStatus[_0x57ed21(0xb20)][_0x57ed21(0xaa6)]=function(){const _0x4bf656=_0x57ed21;this['_borderPortraitSprite'][_0x4bf656(0x2d6)]=BattleManager[_0x4bf656(0xac6)]();const _0x37e827=BattleManager['actor']();if(_0x37e827===this['_borderPortraitSprite'][_0x4bf656(0x241)])return;this['_borderPortraitSprite'][_0x4bf656(0x241)]=_0x37e827||this['_borderPortraitSprite'][_0x4bf656(0x241)];if(!_0x37e827){if('Pbpfb'===_0x4bf656(0x261))return;else this[_0x4bf656(0x86e)]()&&this['selectNextCommand']();}else{if(_0x37e827[_0x4bf656(0x6bc)]()===''){if('EHMVr'!==_0x4bf656(0x2b7)){this[_0x4bf656(0x973)]['bitmap']=ImageManager[_0x4bf656(0x7f1)];return;}else return this[_0x4bf656(0x2e0)]()&&this[_0x4bf656(0x2e0)]()[_0x4bf656(0x720)]()&&!this[_0x4bf656(0x2e0)]()[_0x4bf656(0xb7a)]();}else{const _0x28a8c6=ImageManager[_0x4bf656(0xaa5)](_0x37e827['getBattlePortraitFilename']());_0x28a8c6[_0x4bf656(0xa4c)](this[_0x4bf656(0x319)][_0x4bf656(0x62e)](this,_0x28a8c6));}}},Window_BattleStatus['prototype']['processBorderActor']=function(_0x234d61){const _0x49eba0=_0x57ed21;this['_borderPortraitDuration']=0x14,this[_0x49eba0(0x973)]['bitmap']=_0x234d61;if(SceneManager['_scene'][_0x49eba0(0x825)]()){if(_0x49eba0(0x577)!=='gXOuj')this[_0x49eba0(0x973)]['x']=0x0,this['_borderPortraitTargetX']=Math['ceil'](_0x234d61[_0x49eba0(0x6c1)]/0x2);else return this[_0x49eba0(0x505)]()['note'][_0x49eba0(0x463)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?_0x150a6f(_0x5e5ff9['$1'])[_0x49eba0(0x4ff)](/[\r\n]+/):_0x541a8d[_0x49eba0(0xfb)][_0x49eba0(0x8d3)][_0x49eba0(0x107)]['BattleCmdList'];}else{if(_0x49eba0(0x32f)===_0x49eba0(0x5b3)){const _0xd4cefb=_0x33b279['BattleCore'][_0x49eba0(0x8d3)][_0x49eba0(0x6f9)],_0x2e0451=_0x405c22['prototype']['extraHeight'](),_0x55ec2c=_0x468d21[_0x49eba0(0x667)]-(_0xd4cefb['CommandWidth']||0xc0),_0x442466=this['windowAreaHeight']()+_0x2e0451,_0x5b9e12=this[_0x49eba0(0x825)]()?0x0:_0x4769b0['boxWidth']-_0x55ec2c,_0x36f605=_0x2fa1a5[_0x49eba0(0xb3b)]-_0x442466+_0x2e0451;return new _0x33bddd(_0x5b9e12,_0x36f605,_0x55ec2c,_0x442466);}else this[_0x49eba0(0x973)]['x']=this['width'],this[_0x49eba0(0x51c)]=this[_0x49eba0(0x6c1)]*0x3/0x4;}this[_0x49eba0(0x973)][_0x49eba0(0x772)]=0x0,this[_0x49eba0(0x973)]['y']=this['y']+this[_0x49eba0(0x8b2)];const _0x3cd89c=BattleManager[_0x49eba0(0x241)]();_0x3cd89c&&(this[_0x49eba0(0x51c)]+=_0x3cd89c[_0x49eba0(0x2c5)](),this[_0x49eba0(0x973)]['y']+=_0x3cd89c[_0x49eba0(0x457)]());},Window_BattleStatus[_0x57ed21(0xb20)][_0x57ed21(0x805)]=function(){const _0x1603fd=_0x57ed21;if(this[_0x1603fd(0x70b)]>0x0){const _0x37df58=this['_borderPortraitDuration'],_0x57c259=this['_borderPortraitSprite'];_0x57c259['x']=(_0x57c259['x']*(_0x37df58-0x1)+this[_0x1603fd(0x51c)])/_0x37df58,_0x57c259['opacity']=(_0x57c259[_0x1603fd(0x772)]*(_0x37df58-0x1)+0xff)/_0x37df58,this[_0x1603fd(0x70b)]--;}},Window_BattleStatus[_0x57ed21(0xb20)][_0x57ed21(0xbed)]=function(){const _0x4fd37f=_0x57ed21;return;this[_0x4fd37f(0x5e0)]&&(this[_0x4fd37f(0x5e0)]['x']=this['x'],this[_0x4fd37f(0x5e0)]['y']=this['y']),this['_damageContainer']&&(this['_damageContainer']['x']=this['x'],this[_0x4fd37f(0xbe7)]['y']=this['y']);},Window_BattleStatus['prototype'][_0x57ed21(0x264)]=function(){const _0x228f8b=_0x57ed21,_0x28fbbc=VisuMZ[_0x228f8b(0xfb)][_0x228f8b(0x8d3)][_0x228f8b(0x6f9)];if(_0x28fbbc['StatusWindowAttachmentBack']){if(_0x228f8b(0x9fd)!==_0x228f8b(0xb77)){const _0x15821e=new Sprite();_0x15821e[_0x228f8b(0x10e)]=ImageManager['loadSystem'](_0x28fbbc['StatusWindowAttachmentBack']),_0x15821e['x']=_0x28fbbc[_0x228f8b(0x1f4)]||0x0,_0x15821e['y']=_0x28fbbc[_0x228f8b(0x82b)]||0x0,this[_0x228f8b(0x811)](_0x15821e),this[_0x228f8b(0x38b)]=_0x15821e;}else _0x547c5b+=_0x400ea1;}if(_0x28fbbc[_0x228f8b(0x1e2)]){const _0xb4269f=new Sprite();_0xb4269f[_0x228f8b(0x10e)]=ImageManager[_0x228f8b(0x44c)](_0x28fbbc['StatusWindowAttachmentFront']),_0xb4269f['x']=_0x28fbbc['StatusWindowAttachmentFrontOffsetX']||0x0,_0xb4269f['y']=_0x28fbbc[_0x228f8b(0x6b9)]||0x0,this[_0x228f8b(0x1cc)](_0xb4269f),this['_frontAttachmentSprite']=_0xb4269f;}},Window_BattleStatus['prototype'][_0x57ed21(0xb40)]=function(){const _0x2d1da2=_0x57ed21;this[_0x2d1da2(0x6a4)]&&this[_0x2d1da2(0x1cc)](this['_frontAttachmentSprite']);if(this[_0x2d1da2(0x38b)]){if(_0x2d1da2(0x237)===_0x2d1da2(0x237))this['addChildToBack'](this['_backAttachmentSprite']);else{_0x1c8e69(_0x2d1da2(0x946)),_0x4120c9[_0x2d1da2(0x53e)]();return;}}},Window_BattleActor['prototype']['isOkEnabled']=function(){const _0x165ceb=_0x57ed21;return Window_BattleStatus[_0x165ceb(0xb20)][_0x165ceb(0x79d)][_0x165ceb(0x509)](this)&&this['isActionSelectionValid']();},Window_BattleActor[_0x57ed21(0xb20)]['isActionSelectionValid']=function(){const _0x401c96=_0x57ed21,_0x50e916=BattleManager[_0x401c96(0x771)](),_0x3b38ee=this[_0x401c96(0x241)](this[_0x401c96(0x773)]());if(!_0x50e916)return!![];if(!_0x50e916[_0x401c96(0x720)]())return!![];const _0x295c16=_0x50e916[_0x401c96(0x720)]()[_0x401c96(0x75a)];if(_0x295c16[_0x401c96(0x463)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x3b38ee===BattleManager[_0x401c96(0x241)]())return![];}return!![];},VisuMZ[_0x57ed21(0xfb)]['Window_BattleEnemy_initialize']=Window_BattleEnemy[_0x57ed21(0xb20)]['initialize'],Window_BattleEnemy['prototype']['initialize']=function(_0x4a037f){const _0x469d70=_0x57ed21;this[_0x469d70(0x380)]=null,VisuMZ[_0x469d70(0xfb)][_0x469d70(0x547)][_0x469d70(0x509)](this,_0x4a037f);},Window_BattleEnemy[_0x57ed21(0xb20)][_0x57ed21(0x428)]=function(){const _0x3fcbca=_0x57ed21;return this[_0x3fcbca(0x160)]();},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x91e)]=Window_BattleEnemy[_0x57ed21(0xb20)][_0x57ed21(0x5be)],Window_BattleEnemy[_0x57ed21(0xb20)]['show']=function(){const _0x525318=_0x57ed21;VisuMZ[_0x525318(0xfb)][_0x525318(0x91e)][_0x525318(0x509)](this),this['y']=Graphics[_0x525318(0x8b2)]*0xa;},Window_BattleEnemy['prototype'][_0x57ed21(0x97f)]=function(){const _0x26b7d3=_0x57ed21;return $gameTroop[_0x26b7d3(0x38d)]()['slice'](0x0);},Window_BattleEnemy['prototype']['refresh']=function(){const _0xac0f76=_0x57ed21;this[_0xac0f76(0xa64)]=this['validTargets'](),this[_0xac0f76(0x4f9)](),Window_Selectable['prototype'][_0xac0f76(0xb54)][_0xac0f76(0x509)](this);},Window_BattleEnemy[_0x57ed21(0xb20)][_0x57ed21(0x4f9)]=function(){const _0x2e5700=_0x57ed21;this[_0x2e5700(0xa64)][_0x2e5700(0xb51)]((_0x507092,_0x511a1c)=>{const _0x26b246=_0x2e5700;if(_0x507092[_0x26b246(0x595)]()[_0x26b246(0xa30)]===_0x511a1c['battler']()[_0x26b246(0xa30)]){if(_0x26b246(0x8c1)!==_0x26b246(0x257))return _0x507092[_0x26b246(0x595)]()[_0x26b246(0x656)]-_0x511a1c[_0x26b246(0x595)]()[_0x26b246(0x656)];else{const _0xff61b9=this['getAttackWeaponAnimationId']();this['startWeaponAnimation'](_0xff61b9);}}else return _0x507092[_0x26b246(0x595)]()[_0x26b246(0xa30)]-_0x511a1c[_0x26b246(0x595)]()[_0x26b246(0xa30)];}),SceneManager[_0x2e5700(0x8d0)]()&&this[_0x2e5700(0xa64)][_0x2e5700(0x5ef)]();},Window_BattleEnemy['prototype'][_0x57ed21(0xa40)]=function(){const _0x1f9ff1=_0x57ed21,_0xa5f007=VisuMZ[_0x1f9ff1(0xfb)][_0x1f9ff1(0x8d3)][_0x1f9ff1(0x313)];_0xa5f007[_0x1f9ff1(0x341)]?this[_0x1f9ff1(0xa2d)]():this['autoSelectPriority']();},Window_BattleEnemy['prototype'][_0x57ed21(0xa2d)]=function(){const _0x110b6c=_0x57ed21;if(this[_0x110b6c(0x380)]&&this[_0x110b6c(0xa64)][_0x110b6c(0x55d)](this[_0x110b6c(0x380)])){if(_0x110b6c(0x6f5)==='GbSRq')return _0x321197[_0x110b6c(0x7e4)]()[_0x110b6c(0x38d)]()[_0x110b6c(0x863)](_0x3fecf5=>_0x3fecf5!==_0x59d76d);else{const _0x321388=this[_0x110b6c(0xa64)][_0x110b6c(0x50e)](this[_0x110b6c(0x380)]);this[_0x110b6c(0x8cf)](_0x321388);}}else'ydApy'!==_0x110b6c(0xb0e)?this['_battleLayoutStyle']=_0x110b6c(0x4bc):this[_0x110b6c(0x231)]();},Window_BattleEnemy['prototype']['autoSelectPriority']=function(){const _0x711ea5=_0x57ed21,_0x8ef002=VisuMZ[_0x711ea5(0xfb)]['Settings'][_0x711ea5(0x313)];let _0x17d6ee=![];$gameSystem[_0x711ea5(0x119)]()?_0x17d6ee=_0x8ef002['SideviewSelect']:'nrNRJ'!==_0x711ea5(0x8c8)?_0x17d6ee=_0x8ef002[_0x711ea5(0x4b9)]:_0x493c39=_0x58e472>=_0x46d974?_0x28b834:_0x10ba24,this[_0x711ea5(0x8cf)](_0x17d6ee?this[_0x711ea5(0x160)]()-0x1:0x0);},Window_BattleEnemy[_0x57ed21(0xb20)][_0x57ed21(0x85d)]=function(){const _0x108e7f=_0x57ed21;Window_Selectable[_0x108e7f(0xb20)][_0x108e7f(0x85d)][_0x108e7f(0x509)](this),this[_0x108e7f(0x380)]=this[_0x108e7f(0xb41)]();},Window_BattleItem['prototype']['includes']=function(_0x238e61){const _0x1b5ffe=_0x57ed21;if(!_0x238e61)return![];return _0x238e61[_0x1b5ffe(0xace)]===0x0||_0x238e61[_0x1b5ffe(0xace)]===0x1;};function Window_AutoBattleCancel(){this['initialize'](...arguments);}Window_AutoBattleCancel[_0x57ed21(0xb20)]=Object['create'](Window_Base[_0x57ed21(0xb20)]),Window_AutoBattleCancel[_0x57ed21(0xb20)][_0x57ed21(0x7fb)]=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x57ed21(0xb20)]['initialize']=function(_0x4b2653){const _0x37624=_0x57ed21;Window_Base[_0x37624(0xb20)]['initialize'][_0x37624(0x509)](this,_0x4b2653),this['setBackgroundType'](this[_0x37624(0x819)]()),this[_0x37624(0xb54)]();},Window_AutoBattleCancel['prototype'][_0x57ed21(0x819)]=function(){const _0x3de21a=_0x57ed21;return VisuMZ['BattleCore']['Settings']['AutoBattle'][_0x3de21a(0x3ca)];},Window_AutoBattleCancel['prototype'][_0x57ed21(0xb54)]=function(){const _0x4888e7=_0x57ed21;this[_0x4888e7(0x681)][_0x4888e7(0x80e)]();const _0x2e0f94=VisuMZ[_0x4888e7(0xfb)]['Settings'][_0x4888e7(0x4db)][_0x4888e7(0x1a3)],_0x1d43db=_0x2e0f94['format'](this[_0x4888e7(0x8ba)](),this[_0x4888e7(0x8d1)]()),_0x345051=this[_0x4888e7(0x2fa)](_0x1d43db)[_0x4888e7(0x6c1)],_0xec0dc7=Math[_0x4888e7(0x4eb)]((this[_0x4888e7(0x62f)]-_0x345051)/0x2);this[_0x4888e7(0x309)](_0x1d43db,_0xec0dc7,0x0,_0x345051);},Window_AutoBattleCancel['prototype']['okButtonText']=function(){const _0x575056=_0x57ed21;if(Imported[_0x575056(0x849)]){if(_0x575056(0x886)!==_0x575056(0x886))_0x2e6752['performCollapse']();else return TextManager[_0x575056(0x716)]('ok');}else return VisuMZ['BattleCore']['Settings'][_0x575056(0x4db)]['AutoBattleOK'];},Window_AutoBattleCancel[_0x57ed21(0xb20)][_0x57ed21(0x8d1)]=function(){const _0xad0e8=_0x57ed21;if(Imported[_0xad0e8(0x849)]){if(_0xad0e8(0x1c2)===_0xad0e8(0x1c2))return TextManager[_0xad0e8(0x716)](_0xad0e8(0x18c));else{if(!_0x5bccc9[_0xad0e8(0xfb)]['TpbActiveChangeEnabled'])return;if(_0x35df87['VisuMZ_2_BattleSystemCTB']&&_0x392776[_0xad0e8(0x6a1)]())return;const _0x5eea75=_0x2206e8[_0xad0e8(0x38d)]()[_0xad0e8(0x863)](_0x23f6ba=>_0x23f6ba[_0xad0e8(0x8df)]()&&_0x23f6ba[_0xad0e8(0x252)]());_0x3c6f7e[_0xad0e8(0x88a)]=_0x5eea75[0x0]||null,_0x533bb2[_0xad0e8(0x88a)]&&_0xb80d1f[_0xad0e8(0x88a)][_0xad0e8(0xb5b)]('inputting');}}else{if(_0xad0e8(0xa89)===_0xad0e8(0xa89))return VisuMZ[_0xad0e8(0xfb)]['Settings'][_0xad0e8(0x4db)]['AutoBattleCancel'];else this['battleStatusWindowAnimationContainer']()[_0xad0e8(0x2b5)](_0xe23ff2);}},Window_AutoBattleCancel[_0x57ed21(0xb20)]['update']=function(){const _0xc1aa3e=_0x57ed21;Window_Base[_0xc1aa3e(0xb20)][_0xc1aa3e(0x402)][_0xc1aa3e(0x509)](this),this[_0xc1aa3e(0x96c)](),this[_0xc1aa3e(0x6a5)]();},Window_AutoBattleCancel['prototype']['updateVisibility']=function(){const _0x3ebb20=_0x57ed21;this[_0x3ebb20(0x2d6)]=BattleManager[_0x3ebb20(0x52f)];},Window_AutoBattleCancel[_0x57ed21(0xb20)][_0x57ed21(0x6a5)]=function(){const _0x2a4f66=_0x57ed21;if(!BattleManager[_0x2a4f66(0x52f)])return;(Input[_0x2a4f66(0x6bd)]('ok')||Input['isTriggered'](_0x2a4f66(0x18c))||TouchInput['isClicked']()||TouchInput[_0x2a4f66(0xb10)]())&&(SoundManager[_0x2a4f66(0x3f1)](),BattleManager[_0x2a4f66(0x52f)]=![],Input[_0x2a4f66(0x80e)](),TouchInput[_0x2a4f66(0x80e)]());};function Window_EnemyName(){const _0x1f65d3=_0x57ed21;this[_0x1f65d3(0xa1b)](...arguments);}Window_EnemyName['prototype']=Object['create'](Window_StatusBase['prototype']),Window_EnemyName[_0x57ed21(0xb20)][_0x57ed21(0x7fb)]=Window_EnemyName,Window_EnemyName[_0x57ed21(0xb20)]['initialize']=function(_0x54b0fa){const _0x16c5a1=_0x57ed21;this[_0x16c5a1(0xa6a)]=_0x54b0fa,this['_text']='';const _0xe69bb4=new Rectangle(0x0,0x0,Graphics[_0x16c5a1(0x667)],this[_0x16c5a1(0x134)]()*0x4);Window_StatusBase[_0x16c5a1(0xb20)][_0x16c5a1(0xa1b)][_0x16c5a1(0x509)](this,_0xe69bb4),this[_0x16c5a1(0xb96)](0x2),this[_0x16c5a1(0x683)]=0x0;},Window_EnemyName[_0x57ed21(0xb20)][_0x57ed21(0x7eb)]=function(){const _0x53e425=_0x57ed21;this[_0x53e425(0x250)]=0x0;},Window_EnemyName[_0x57ed21(0xb20)]['enemy']=function(){const _0x335a24=_0x57ed21;return $gameTroop[_0x335a24(0x195)]()[this[_0x335a24(0xa6a)]];},Window_EnemyName[_0x57ed21(0xb20)][_0x57ed21(0x402)]=function(){const _0x8d250=_0x57ed21;Window_StatusBase['prototype'][_0x8d250(0x402)][_0x8d250(0x509)](this),this['enemy']()&&this['enemy']()['name']()!==this[_0x8d250(0x63e)]&&(this[_0x8d250(0x63e)]=this['enemy']()[_0x8d250(0xb1c)](),this[_0x8d250(0xb54)]()),this[_0x8d250(0xf2)](),this[_0x8d250(0xad6)]();},Window_EnemyName[_0x57ed21(0xb20)][_0x57ed21(0xf2)]=function(){const _0x20c605=_0x57ed21;if(!this[_0x20c605(0xb41)]()){if(this['contentsOpacity']>0x0)this[_0x20c605(0x683)]-=0x10;}else{if(this['enemy']()[_0x20c605(0xba1)]()){if(_0x20c605(0x5dd)!==_0x20c605(0xbaa)){if(this['contentsOpacity']>0x0)this[_0x20c605(0x683)]-=0x10;}else{if(this[_0x20c605(0x613)]['some'](_0x59d0fd=>_0x59d0fd[_0x20c605(0x720)]()&&_0x59d0fd[_0x20c605(0x5c3)]()))return!![];}}else{if(SceneManager[_0x20c605(0x34f)][_0x20c605(0x3c5)]&&SceneManager[_0x20c605(0x34f)]['_enemyWindow'][_0x20c605(0x216)]&&SceneManager[_0x20c605(0x34f)][_0x20c605(0x3c5)][_0x20c605(0xa64)][_0x20c605(0x55d)](this[_0x20c605(0xb41)]())){if(this[_0x20c605(0x683)]<0xff)this[_0x20c605(0x683)]+=0x10;}else{if(this[_0x20c605(0x683)]>0x0){if(_0x20c605(0x947)===_0x20c605(0x265))return _0x5bcd62[_0x20c605(0x595)]()[_0x20c605(0xa30)]-_0x24ffad[_0x20c605(0x595)]()['_baseX'];else this[_0x20c605(0x683)]-=0x10;}}}}},Window_EnemyName[_0x57ed21(0xb20)]['updatePosition']=function(){const _0xa43018=_0x57ed21;if(!this['enemy']())return;SceneManager[_0xa43018(0x8d0)]()?this['x']=Graphics[_0xa43018(0x667)]-this['enemy']()['battler']()['_baseX']:this['x']=this[_0xa43018(0xb41)]()[_0xa43018(0x595)]()['_baseX'];this['x']-=Math[_0xa43018(0x413)](this[_0xa43018(0x6c1)]/0x2),this['y']=this[_0xa43018(0xb41)]()[_0xa43018(0x595)]()['_baseY']-Math[_0xa43018(0x413)](this[_0xa43018(0x134)]()*1.5);const _0x24aa5b=VisuMZ[_0xa43018(0xfb)][_0xa43018(0x8d3)]['Enemy'];this['x']+=_0x24aa5b[_0xa43018(0x3f7)]||0x0,this['y']+=_0x24aa5b[_0xa43018(0xa15)]||0x0;},Window_EnemyName[_0x57ed21(0xb20)][_0x57ed21(0x424)]=function(){const _0x58e578=_0x57ed21;Window_Base['prototype'][_0x58e578(0x424)]['call'](this),this[_0x58e578(0x681)][_0x58e578(0x88e)]=VisuMZ[_0x58e578(0xfb)]['Settings']['Enemy'][_0x58e578(0x2ac)];},Window_EnemyName['prototype']['refresh']=function(){const _0x4a6f63=_0x57ed21;Window_StatusBase['prototype'][_0x4a6f63(0xb54)][_0x4a6f63(0x509)](this),this[_0x4a6f63(0x681)]['clear']();if(!this['enemy']())return;this[_0x4a6f63(0x4a4)]();},Window_EnemyName[_0x57ed21(0xb20)][_0x57ed21(0x4a4)]=function(){const _0x2ce116=_0x57ed21;this[_0x2ce116(0x63e)]=this[_0x2ce116(0xb41)]()['name']();const _0x3ddfce=this[_0x2ce116(0x2fa)](this['_text'])[_0x2ce116(0x6c1)],_0x45a7b0=Math[_0x2ce116(0x413)]((this[_0x2ce116(0x62f)]-_0x3ddfce)/0x2);this[_0x2ce116(0x309)](this['_text'],_0x45a7b0,0x0,_0x3ddfce+0x8);},Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x77e)]=function(){const _0x376529=_0x57ed21;return VisuMZ[_0x376529(0xfb)][_0x376529(0x8d3)][_0x376529(0x6f7)]['MaxLines'];},Window_BattleLog[_0x57ed21(0xb20)]['messageSpeed']=function(){const _0x1deb90=_0x57ed21;return VisuMZ['BattleCore'][_0x1deb90(0x8d3)][_0x1deb90(0x6f7)][_0x1deb90(0x106)];},Window_BattleLog['prototype'][_0x57ed21(0xb79)]=function(){const _0x54bbc2=_0x57ed21;return VisuMZ['BattleCore'][_0x54bbc2(0x8d3)]['BattleLog'][_0x54bbc2(0x3c9)];},Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x27b)]=function(){return![];},Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x8dd)]=function(_0x41f544,_0x2e7d49){const _0x5b769f=_0x57ed21;this[_0x5b769f(0x22d)](_0x5b769f(0x92d)),BattleManager[_0x5b769f(0x1f7)](_0x41f544,_0x2e7d49),this['callNextMethod']();},Window_BattleLog['prototype'][_0x57ed21(0x92d)]=function(){const _0x38e548=_0x57ed21;this[_0x38e548(0x7ae)]();},Window_BattleLog['prototype']['push']=function(_0x40717c){const _0x50011e=_0x57ed21,_0xd0caec=Array['prototype'][_0x50011e(0x714)][_0x50011e(0x509)](arguments,0x1),_0x8a0eda={'name':_0x40717c,'params':_0xd0caec},_0x45396b=this['_methods'][_0x50011e(0x6d9)](_0x1a9b07=>_0x1a9b07[_0x50011e(0xb1c)])['indexOf'](_0x50011e(0x92d));_0x45396b>=0x0?this[_0x50011e(0x7b1)][_0x50011e(0xab4)](_0x45396b,0x0,_0x8a0eda):this['_methods'][_0x50011e(0x46e)](_0x8a0eda);},Window_BattleLog['prototype'][_0x57ed21(0x22d)]=function(_0x4264d0){const _0x1b3c35=_0x57ed21,_0x10a81c=Array[_0x1b3c35(0xb20)][_0x1b3c35(0x714)][_0x1b3c35(0x509)](arguments,0x1);this['_methods'][_0x1b3c35(0x22d)]({'name':_0x4264d0,'params':_0x10a81c});},Window_BattleLog[_0x57ed21(0xb20)]['logActionList']=function(){const _0x454cb5=_0x57ed21;if(!$gameTemp[_0x454cb5(0x899)]())return;console['log'](this['_methods'][_0x454cb5(0x6d9)](_0xb34f51=>_0xb34f51[_0x454cb5(0xb1c)])[_0x454cb5(0xb39)]('\x0a'));},VisuMZ['BattleCore'][_0x57ed21(0x4a0)]=Window_BattleLog['prototype'][_0x57ed21(0xb54)],Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0xb54)]=function(){const _0x17b089=_0x57ed21;this[_0x17b089(0x24f)]=!![];},VisuMZ['BattleCore'][_0x57ed21(0x45d)]=Window_BattleLog[_0x57ed21(0xb20)]['update'],Window_BattleLog['prototype'][_0x57ed21(0x402)]=function(){const _0x858b3f=_0x57ed21;VisuMZ[_0x858b3f(0xfb)][_0x858b3f(0x45d)][_0x858b3f(0x509)](this);if(this[_0x858b3f(0x24f)])this[_0x858b3f(0xb8a)]();},Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0xb8a)]=function(){const _0x3090ba=_0x57ed21;this[_0x3090ba(0x24f)]=![],VisuMZ['BattleCore'][_0x3090ba(0x4a0)][_0x3090ba(0x509)](this);},Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x289)]=function(_0x5cc557){const _0x13042e=_0x57ed21;let _0x3591f2=VisuMZ[_0x13042e(0xfb)]['Settings'][_0x13042e(0x6f7)][_0x13042e(0xb74)][_0x13042e(0x1b2)]()['trim'](),_0x26093b=this[_0x13042e(0x7b4)][_0x5cc557];if(_0x26093b[_0x13042e(0x463)](/<LEFT>/i)){if(_0x13042e(0xbb0)===_0x13042e(0xbb0))_0x3591f2=_0x13042e(0x50f);else{const _0x257a3f=_0xc30a85[_0x5af075];_0x257a3f?this['setup'](_0x257a3f[_0x13042e(0x2c7)],0x0):this[_0x13042e(0x99a)]();}}else{if(_0x26093b[_0x13042e(0x463)](/<CENTER>/i))'ptsWm'===_0x13042e(0x61d)?_0xd9bb09=_0x47e517[_0x13042e(0xfb)][_0x13042e(0x99c)][_0x13042e(0x509)](this):_0x3591f2='center';else _0x26093b['match'](/<RIGHT>/i)&&(_0x3591f2='right');}_0x26093b=_0x26093b['replace'](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x26093b=_0x26093b[_0x13042e(0x5b6)](/\\I\[0\]/gi,'');const _0x3ed8f6=this[_0x13042e(0xbd5)](_0x5cc557);this[_0x13042e(0x681)][_0x13042e(0x6ec)](_0x3ed8f6['x'],_0x3ed8f6['y'],_0x3ed8f6[_0x13042e(0x6c1)],_0x3ed8f6[_0x13042e(0x8b2)]);const _0x460259=this[_0x13042e(0x2fa)](_0x26093b)[_0x13042e(0x6c1)];let _0xf52a0b=_0x3ed8f6['x'];if(_0x3591f2===_0x13042e(0x415))_0xf52a0b+=(_0x3ed8f6[_0x13042e(0x6c1)]-_0x460259)/0x2;else{if(_0x3591f2===_0x13042e(0xb98)){if(_0x13042e(0x9a9)===_0x13042e(0x9a9))_0xf52a0b+=_0x3ed8f6[_0x13042e(0x6c1)]-_0x460259;else{if(this[_0x13042e(0x1d7)])_0x54af42=_0x3fa7e6['max'](0x0,this[_0x13042e(0x1d7)][_0x13042e(0x8b2)]-0x4);}}}this[_0x13042e(0x309)](_0x26093b,_0xf52a0b,_0x3ed8f6['y'],_0x460259+0x8);},Window_BattleLog[_0x57ed21(0xb20)]['addText']=function(_0x5109f6){const _0x131de4=_0x57ed21;this[_0x131de4(0x7b4)][_0x131de4(0x46e)](_0x5109f6),this[_0x131de4(0xb54)](),this[_0x131de4(0x7ae)]();},Window_BattleLog[_0x57ed21(0xb20)]['updateWaitMode']=function(){const _0xd38bfd=_0x57ed21;let _0x9a8191=![];switch(this[_0xd38bfd(0xa62)]){case'effect':_0x9a8191=this[_0xd38bfd(0x837)][_0xd38bfd(0x9f0)]();break;case _0xd38bfd(0x90a):_0x9a8191=this['_spriteset'][_0xd38bfd(0xb9c)]();break;case _0xd38bfd(0xa4e):_0x9a8191=this['_spriteset']['isAnimationPlaying']();break;case _0xd38bfd(0x6ff):_0x9a8191=this['_spriteset'][_0xd38bfd(0x157)]();break;case _0xd38bfd(0x4d6):_0x9a8191=this[_0xd38bfd(0x837)][_0xd38bfd(0x959)]();break;case'opacity':_0x9a8191=this[_0xd38bfd(0x837)][_0xd38bfd(0xa0b)]();break;}return!_0x9a8191&&(this['_waitMode']=''),_0x9a8191;},Window_BattleLog['prototype'][_0x57ed21(0xa38)]=function(){const _0x4647a4=_0x57ed21;this[_0x4647a4(0xa92)](_0x4647a4(0xa4e));},Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x845)]=function(){const _0x48e3cb=_0x57ed21;this[_0x48e3cb(0xa92)](_0x48e3cb(0x6ff));},Window_BattleLog[_0x57ed21(0xb20)]['waitForJump']=function(){const _0x2d221f=_0x57ed21;this[_0x2d221f(0xa92)](_0x2d221f(0x4d6));},Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0xad8)]=function(){const _0x30e05d=_0x57ed21;this[_0x30e05d(0xa92)]('opacity');},Window_BattleLog[_0x57ed21(0xb20)]['startTurn']=function(){const _0x54eb5c=_0x57ed21,_0x5d4074=VisuMZ[_0x54eb5c(0xfb)]['Settings'][_0x54eb5c(0x6f7)];if(!_0x5d4074[_0x54eb5c(0x79a)])return;this[_0x54eb5c(0x46e)](_0x54eb5c(0x972),_0x5d4074[_0x54eb5c(0x7e1)][_0x54eb5c(0x455)]($gameTroop[_0x54eb5c(0x538)]())),this[_0x54eb5c(0x46e)](_0x54eb5c(0x7a4),_0x5d4074[_0x54eb5c(0x31b)]),this[_0x54eb5c(0x46e)](_0x54eb5c(0x80e));},Window_BattleLog[_0x57ed21(0xb20)]['startAction']=function(_0x33edca,_0xcd54ae,_0x4974f9){const _0x47eaba=_0x57ed21;if(this['isCustomActionSequence'](_0xcd54ae)){if('UAoYN'===_0x47eaba(0x206))BattleManager['prepareCustomActionSequence']();else{if(!_0x87a4e['VisuMZ_3_ActSeqImpact'])return;const _0x2a20b9=_0xfd881f[_0x47eaba(0x34f)][_0x47eaba(0x837)];if(!_0x2a20b9)return;if(_0x30047d[_0x47eaba(0x791)][_0x47eaba(0x7bd)]<=1.04){_0x408159(_0x47eaba(0x946)),_0x40d255['exit']();return;}_0x58a220['ConvertParams'](_0x68a2ed,_0x3bd614);const _0x115420=_0x5dce87[_0x47eaba(0x7e3)];_0x2a20b9[_0x47eaba(0x6e3)](_0x115420);}}else _0x47eaba(0xbb5)===_0x47eaba(0xbb5)?this['usePremadeActionSequence'](_0x33edca,_0xcd54ae,_0x4974f9):this[_0x47eaba(0xb62)]()?(this['_callSceneOptions']=!![],this[_0x47eaba(0x977)]['push'](_0x47eaba(0x972),_0xfd4560['BattleCore'][_0x47eaba(0x8d3)][_0x47eaba(0x809)][_0x47eaba(0x5b8)])):this[_0x47eaba(0x7a2)]();},Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0xb61)]=function(_0x425227){const _0x4fd2e1=_0x57ed21;if(!SceneManager[_0x4fd2e1(0x9d4)]())return![];if(!_0x425227)return![];if(!_0x425227[_0x4fd2e1(0x720)]())return![];if(_0x425227[_0x4fd2e1(0x720)]()[_0x4fd2e1(0x75a)][_0x4fd2e1(0x463)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x4fd2e1(0x3c1)](_0x425227['item']())){if(_0x4fd2e1(0x78c)===_0x4fd2e1(0x78c))return!![];else this[_0x4fd2e1(0x68a)]=this['applyEasing'](this[_0x4fd2e1(0x68a)],this[_0x4fd2e1(0x1da)],_0x111f9c,_0x5049d1,_0x707670);}return![];},Window_BattleLog['prototype'][_0x57ed21(0x618)]=function(_0x498d7a,_0x37cdd0,_0x95bee7){const _0x177370=_0x57ed21,_0x133a84=_0x37cdd0[_0x177370(0x720)]();this[_0x177370(0xb28)](_0x498d7a,_0x37cdd0,_0x95bee7),this[_0x177370(0xa00)](_0x498d7a,_0x37cdd0,_0x95bee7),this['finishActionSet'](_0x498d7a,_0x37cdd0,_0x95bee7);},Window_BattleLog[_0x57ed21(0xb20)]['displayAction']=function(_0x1139bd,_0x4ee86c){const _0x146a26=_0x57ed21,_0x47be70=VisuMZ[_0x146a26(0xfb)][_0x146a26(0x8d3)][_0x146a26(0x6f7)];_0x47be70['ActionCenteredName']&&this[_0x146a26(0x46e)](_0x146a26(0x972),_0x146a26(0xb4c)[_0x146a26(0x455)](DataManager[_0x146a26(0x3ad)](_0x4ee86c)));if(DataManager['isSkill'](_0x4ee86c)){if(_0x47be70[_0x146a26(0x363)])this[_0x146a26(0xae2)](_0x4ee86c[_0x146a26(0xb81)],_0x1139bd,_0x4ee86c);if(_0x47be70['ActionSkillMsg2'])this[_0x146a26(0xae2)](_0x4ee86c['message2'],_0x1139bd,_0x4ee86c);}else{if(_0x146a26(0x1ce)!==_0x146a26(0x1ce))this['addChild'](this[_0x146a26(0x3be)]);else{if(_0x47be70[_0x146a26(0x684)])this[_0x146a26(0xae2)](TextManager[_0x146a26(0x778)],_0x1139bd,_0x4ee86c);}}},Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0xb28)]=function(_0x1b6185,_0x517c1e,_0x5ed362){const _0x13b733=_0x57ed21,_0x44e949=_0x517c1e[_0x13b733(0x720)]();this['displayAction'](_0x1b6185,_0x44e949),this['push'](_0x13b733(0x7f5),_0x1b6185,_0x5ed362,!![]),this[_0x13b733(0x46e)](_0x13b733(0x8bc),_0x1b6185,_0x517c1e),this[_0x13b733(0x46e)]('waitForMovement'),this[_0x13b733(0x46e)](_0x13b733(0x84a),_0x1b6185,_0x517c1e),this[_0x13b733(0x46e)](_0x13b733(0xa38));},Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0xa00)]=function(_0x265c3e,_0x23dad9,_0x11fe31){const _0x4478d4=_0x57ed21;if(this[_0x4478d4(0x83f)](_0x23dad9))this[_0x4478d4(0x3f9)](_0x265c3e,_0x23dad9,_0x11fe31);else{if(this['isMeleeMultiTargetAction'](_0x23dad9)){if(_0x4478d4(0x840)==='yaQUs'){const _0x4bbc7e=_0x3e136b(_0x313f36['$1'])[_0x4478d4(0x1f6)](),_0x254fdb=_0xd97c18(_0x225507['$2']);_0x5eecde[_0x4bbc7e]=_0x254fdb,_0x5b11c3+=_0x254fdb;}else this[_0x4478d4(0x4f2)](_0x265c3e,_0x23dad9,_0x11fe31);}else _0x23dad9[_0x4478d4(0x26e)]()?this[_0x4478d4(0x44a)](_0x265c3e,_0x23dad9,_0x11fe31):'CzvkY'===_0x4478d4(0x74e)?this[_0x4478d4(0x599)](_0x265c3e,_0x23dad9,_0x11fe31):_0x1c34c1=(_0x194e5a+_0x39e5be)/0x2;}},Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x83f)]=function(_0x26d81e){const _0xf7f101=_0x57ed21;if(!_0x26d81e[_0xf7f101(0x45c)]())return![];if(!_0x26d81e[_0xf7f101(0x89e)]())return![];if(!_0x26d81e[_0xf7f101(0x9eb)]())return![];return VisuMZ[_0xf7f101(0xfb)][_0xf7f101(0x8d3)][_0xf7f101(0x48d)][_0xf7f101(0xa2e)];},Window_BattleLog['prototype'][_0x57ed21(0x3f9)]=function(_0x374328,_0x2dc14f,_0x10bada){const _0x58bea4=_0x57ed21,_0x2c6ef3=_0x374328[_0x58bea4(0xfe)]()['type']<0x2,_0x349ade=0x14,_0x4b21aa=0x30;if(_0x2c6ef3){if(_0x58bea4(0x949)===_0x58bea4(0x30a)){this['push'](_0x58bea4(0x104),_0x382773,_0x47770f);if(!_0x4879cc[_0x58bea4(0xfb)][_0x58bea4(0x8d3)]['BattleLog']['ShowSubstitute'])return;const _0x433ea6=_0x1e2eb7[_0x58bea4(0xb1c)](),_0x2b9b87=_0xffbbf7[_0x58bea4(0x52a)]['format'](_0x433ea6,_0x51fc91[_0x58bea4(0xb1c)]());this[_0x58bea4(0x46e)]('addText',_0x2b9b87);}else this[_0x58bea4(0x46e)](_0x58bea4(0x71f),[_0x374328],_0x4b21aa,_0x349ade),this[_0x58bea4(0x46e)](_0x58bea4(0x6e1),_0x374328,_0x10bada,_0x58bea4(0x8a7),_0x349ade,!![],'Linear',!![]),this[_0x58bea4(0x46e)]('requestMotion',[_0x374328],_0x58bea4(0x34b)),this[_0x58bea4(0x46e)](_0x58bea4(0x4e7));}let _0x501f99=_0x2dc14f[_0x58bea4(0x4c2)]()?this[_0x58bea4(0x781)](_0x374328):0x1;for(let _0x2031d6=0x0;_0x2031d6<_0x501f99;_0x2031d6++){_0x2dc14f[_0x58bea4(0x4c2)]()&&_0x374328[_0x58bea4(0x8cc)]()&&(_0x58bea4(0x931)===_0x58bea4(0x173)?(_0x573a8f[_0x58bea4(0xfb)][_0x58bea4(0x8d8)][_0x58bea4(0x509)](this),_0x5bc7f7[_0x58bea4(0x66f)]()&&_0x5f24e7[_0x58bea4(0x9a5)]&&(_0x1c34a5['_tpbNeedsPartyCommand']=![],this[_0x58bea4(0xb7d)]())):this[_0x58bea4(0x46e)](_0x58bea4(0x8e8),_0x374328,_0x2031d6));if(_0x2dc14f[_0x58bea4(0x720)]()[_0x58bea4(0x8b0)]<0x0)this[_0x58bea4(0x44a)](_0x374328,_0x2dc14f,_0x10bada);else{if('lwEIT'!==_0x58bea4(0xa01))this['wholeActionSet'](_0x374328,_0x2dc14f,_0x10bada);else return this['isDTB']();}}_0x2dc14f[_0x58bea4(0x4c2)]()&&_0x374328[_0x58bea4(0x8cc)]()&&this[_0x58bea4(0x46e)]('clearActiveWeaponSet',_0x374328);this[_0x58bea4(0x46e)](_0x58bea4(0x7f5),_0x374328,_0x10bada,![]);if(_0x2c6ef3){const _0x5bbb14=_0x374328[_0x58bea4(0x595)]();this[_0x58bea4(0x46e)](_0x58bea4(0x71f),[_0x374328],_0x4b21aa,_0x349ade),this[_0x58bea4(0x46e)](_0x58bea4(0xa09),_0x374328,_0x5bbb14[_0x58bea4(0x57c)],_0x5bbb14[_0x58bea4(0x214)],_0x349ade,![],_0x58bea4(0x315)),this[_0x58bea4(0x46e)](_0x58bea4(0xbdc),[_0x374328],_0x58bea4(0x846)),this[_0x58bea4(0x46e)]('waitForMovement'),this['push'](_0x58bea4(0xbdc),[_0x374328],_0x58bea4(0x34b));}},Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x98d)]=function(_0x1d0393){const _0x2248bc=_0x57ed21;if(!_0x1d0393[_0x2248bc(0x45c)]())return![];if(!_0x1d0393[_0x2248bc(0xbc9)]())return![];if(!_0x1d0393[_0x2248bc(0x9eb)]())return![];return VisuMZ['BattleCore'][_0x2248bc(0x8d3)]['ActionSequence'][_0x2248bc(0x751)];},Window_BattleLog['prototype'][_0x57ed21(0x4f2)]=function(_0x59a33a,_0x58b4a1,_0x5d5818){const _0x453dd7=_0x57ed21,_0x3d302d=_0x59a33a[_0x453dd7(0xfe)]()[_0x453dd7(0xb47)]<0x2,_0x4d0d7f=0x14,_0x8fcf13=0x30;_0x3d302d&&(this[_0x453dd7(0x46e)](_0x453dd7(0x71f),[_0x59a33a],_0x8fcf13,_0x4d0d7f),this[_0x453dd7(0x46e)]('performMoveToTargets',_0x59a33a,_0x5d5818,'front\x20center',_0x4d0d7f,!![],'Linear',!![]),this[_0x453dd7(0x46e)]('requestMotion',[_0x59a33a],_0x453dd7(0x34b)),this[_0x453dd7(0x46e)](_0x453dd7(0x4e7)));let _0x3af08a=_0x58b4a1[_0x453dd7(0x4c2)]()?this[_0x453dd7(0x781)](_0x59a33a):0x1;for(let _0x53f905=0x0;_0x53f905<_0x3af08a;_0x53f905++){_0x453dd7(0x342)!=='isqap'?_0x2fd83b=_0x445953[_0x453dd7(0x61e)]:(_0x58b4a1[_0x453dd7(0x4c2)]()&&_0x59a33a[_0x453dd7(0x8cc)]()&&this[_0x453dd7(0x46e)](_0x453dd7(0x8e8),_0x59a33a,_0x53f905),this[_0x453dd7(0x599)](_0x59a33a,_0x58b4a1,_0x5d5818));}_0x58b4a1[_0x453dd7(0x4c2)]()&&_0x59a33a[_0x453dd7(0x8cc)]()&&this[_0x453dd7(0x46e)](_0x453dd7(0x991),_0x59a33a);this[_0x453dd7(0x46e)](_0x453dd7(0x7f5),_0x59a33a,_0x5d5818,![]);if(_0x3d302d){const _0x5b113c=_0x59a33a['battler']();this[_0x453dd7(0x46e)](_0x453dd7(0x71f),[_0x59a33a],_0x8fcf13,_0x4d0d7f),this['push'](_0x453dd7(0xa09),_0x59a33a,_0x5b113c[_0x453dd7(0x57c)],_0x5b113c['_homeY'],_0x4d0d7f,![],_0x453dd7(0x315)),this[_0x453dd7(0x46e)](_0x453dd7(0xbdc),[_0x59a33a],_0x453dd7(0x846)),this[_0x453dd7(0x46e)](_0x453dd7(0x4e7)),this['push'](_0x453dd7(0xbdc),[_0x59a33a],_0x453dd7(0x34b));}},Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x44a)]=function(_0xe1074a,_0x50ae7c,_0x2f8c5c){const _0x3e08f0=_0x57ed21,_0x355096=_0x50ae7c[_0x3e08f0(0x720)]();for(const _0x166a05 of _0x2f8c5c){if('pVOdV'===_0x3e08f0(0x40e)){if(!_0x166a05)continue;this[_0x3e08f0(0x46e)]('performAction',_0xe1074a,_0x50ae7c),this[_0x3e08f0(0x46e)](_0x3e08f0(0x7a4),Sprite_Battler[_0x3e08f0(0x585)]),this['push'](_0x3e08f0(0x26f),_0xe1074a,[_0x166a05],_0x355096[_0x3e08f0(0x8b0)]),this['push'](_0x3e08f0(0x7a4),0x18),this['push'](_0x3e08f0(0x8dd),_0xe1074a,_0x166a05);}else{const _0x5445ff=_0x3c6002[_0x3e08f0(0x386)](_0xb20f0a['x'],_0x5d634a['y']);if(this[_0x3e08f0(0x14d)]&&this['_regionBattleback2'][_0x5445ff])return this[_0x3e08f0(0x531)][_0x5445ff];}}},Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x599)]=function(_0x3930bb,_0xcf6607,_0x9c2c27){const _0x4c1be1=_0x57ed21,_0x2351f2=_0xcf6607['item']();this[_0x4c1be1(0x46e)]('performAction',_0x3930bb,_0xcf6607),this[_0x4c1be1(0x46e)](_0x4c1be1(0x7a4),Sprite_Battler[_0x4c1be1(0x585)]),this[_0x4c1be1(0x46e)](_0x4c1be1(0x26f),_0x3930bb,_0x9c2c27[_0x4c1be1(0xb6c)](),_0x2351f2['animationId']),this[_0x4c1be1(0x46e)](_0x4c1be1(0xa38));for(const _0x9d8553 of _0x9c2c27){if(!_0x9d8553)continue;this[_0x4c1be1(0x46e)]('actionEffect',_0x3930bb,_0x9d8553);}},Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x291)]=function(_0x53e327,_0x2556d5,_0x30e068){const _0xf64414=_0x57ed21,_0x10d0d7=_0x2556d5['item']();this[_0xf64414(0x46e)]('applyImmortal',_0x53e327,_0x30e068,![]),this[_0xf64414(0x46e)](_0xf64414(0x8d7)),this[_0xf64414(0x46e)]('waitForEffect'),this[_0xf64414(0x46e)](_0xf64414(0x80e)),this['push'](_0xf64414(0x5de),_0x53e327),this['push'](_0xf64414(0x4e7));},Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x6db)]=function(_0x359314){},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x78d)]=Window_BattleLog['prototype']['displayCurrentState'],Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x2a0)]=function(_0x2c7c24){const _0x4890a8=_0x57ed21;if(!VisuMZ['BattleCore'][_0x4890a8(0x8d3)][_0x4890a8(0x6f7)][_0x4890a8(0x33c)])return;VisuMZ[_0x4890a8(0xfb)]['Window_BattleLog_displayCurrentState'][_0x4890a8(0x509)](this,_0x2c7c24);},Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0xa5d)]=function(_0x5b54a5){const _0x370593=_0x57ed21;this[_0x370593(0x46e)](_0x370593(0x2a1),_0x5b54a5);VisuMZ[_0x370593(0xfb)]['Settings']['ActionSequence']['CounterPlayback']&&this['push'](_0x370593(0x26f),_0x5b54a5,[BattleManager[_0x370593(0xadd)]],-0x1);if(!VisuMZ['BattleCore'][_0x370593(0x8d3)]['BattleLog']['ShowCounter'])return;this['push']('addText',TextManager[_0x370593(0x46c)]['format'](_0x5b54a5[_0x370593(0xb1c)]()));},Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x1b1)]=function(_0x1b5ca0){const _0xa51362=_0x57ed21;this[_0xa51362(0x46e)]('performReflection',_0x1b5ca0);if(!VisuMZ['BattleCore']['Settings']['BattleLog'][_0xa51362(0x34c)])return;this[_0xa51362(0x46e)](_0xa51362(0x972),TextManager[_0xa51362(0xb72)][_0xa51362(0x455)](_0x1b5ca0[_0xa51362(0xb1c)]()));},Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x48b)]=function(_0x2f13ef,_0x41e014){const _0x110824=_0x57ed21;if(VisuMZ['BattleCore']['Settings'][_0x110824(0x48d)][_0x110824(0x22c)]){const _0x391677=_0x41e014[_0x110824(0x720)]();this[_0x110824(0x46e)](_0x110824(0x26f),_0x2f13ef,[_0x2f13ef],_0x391677['animationId']);}},Window_BattleLog['prototype']['displaySubstitute']=function(_0x6b09e3,_0x490c6a){const _0x1a0b49=_0x57ed21;this[_0x1a0b49(0x46e)](_0x1a0b49(0x104),_0x6b09e3,_0x490c6a);if(!VisuMZ[_0x1a0b49(0xfb)]['Settings'][_0x1a0b49(0x6f7)][_0x1a0b49(0xa17)])return;const _0x14a56a=_0x6b09e3[_0x1a0b49(0xb1c)](),_0xd139c7=TextManager[_0x1a0b49(0x52a)][_0x1a0b49(0x455)](_0x14a56a,_0x490c6a[_0x1a0b49(0xb1c)]());this[_0x1a0b49(0x46e)]('addText',_0xd139c7);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0xb9d)]=Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x1b6)],Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x1b6)]=function(_0x11179c,_0x227540){const _0x43f5e0=_0x57ed21;VisuMZ[_0x43f5e0(0xfb)][_0x43f5e0(0xb9d)][_0x43f5e0(0x509)](this,_0x11179c,_0x227540);},VisuMZ['BattleCore'][_0x57ed21(0x365)]=Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x8b8)],Window_BattleLog['prototype'][_0x57ed21(0x8b8)]=function(_0x2cfb7f){const _0x3f752f=_0x57ed21;if(!VisuMZ['BattleCore']['Settings'][_0x3f752f(0x6f7)][_0x3f752f(0x7fe)])return;VisuMZ[_0x3f752f(0xfb)][_0x3f752f(0x365)]['call'](this,_0x2cfb7f);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x3f4)]=Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x41d)],Window_BattleLog['prototype'][_0x57ed21(0x41d)]=function(_0x165b89){const _0xf7b3bb=_0x57ed21;if(!VisuMZ['BattleCore'][_0xf7b3bb(0x8d3)][_0xf7b3bb(0x6f7)]['ShowCritical'])return;VisuMZ['BattleCore'][_0xf7b3bb(0x3f4)][_0xf7b3bb(0x509)](this,_0x165b89);},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0xbbb)]=Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x462)],Window_BattleLog[_0x57ed21(0xb20)]['displayMiss']=function(_0x3b7d44){const _0x1d2e58=_0x57ed21;!VisuMZ[_0x1d2e58(0xfb)][_0x1d2e58(0x8d3)]['BattleLog']['ShowMissEvasion']?'NnjmR'!==_0x1d2e58(0x9bc)?this[_0x1d2e58(0x46e)]('performMiss',_0x3b7d44):(this['processBattleCoreJS'](_0x1d2e58(0x8c7)),_0x37081b['BattleCore'][_0x1d2e58(0x312)][_0x1d2e58(0x509)](this),this[_0x1d2e58(0x77d)]('PostStartTurnJS')):VisuMZ[_0x1d2e58(0xfb)][_0x1d2e58(0xbbb)][_0x1d2e58(0x509)](this,_0x3b7d44);},VisuMZ[_0x57ed21(0xfb)]['Window_BattleLog_displayEvasion']=Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x235)],Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x235)]=function(_0x26f9f7){const _0x6dc018=_0x57ed21;if(!VisuMZ['BattleCore'][_0x6dc018(0x8d3)][_0x6dc018(0x6f7)][_0x6dc018(0x3fe)]){if(_0x6dc018(0xbea)!==_0x6dc018(0xbea)){if(!_0x15f6b7['prototype'][_0x6dc018(0x141)][_0x6dc018(0x509)](this,_0x24ce4c))return!![];if(!_0x1f50fc[_0x6dc018(0xb20)][_0x6dc018(0x586)][_0x6dc018(0x509)](this,_0x5e9c92))return!![];if(!_0x5e5134['prototype']['checkShowHideSkillNotetags']['call'](this,_0xadcb2d))return!![];}else{if(_0x26f9f7[_0x6dc018(0xa16)]()[_0x6dc018(0x4ac)])'EFttQ'!==_0x6dc018(0x70d)?(this[_0x6dc018(0x816)](),this[_0x6dc018(0x15f)](),this[_0x6dc018(0xb15)](),this[_0x6dc018(0x7c7)](),_0x41dff3[_0x6dc018(0xfb)][_0x6dc018(0x340)][_0x6dc018(0x509)](this),this[_0x6dc018(0xb12)](),this[_0x6dc018(0x960)](),this[_0x6dc018(0x7ba)](),this['process_VisuMZ_BattleCore_CommonEventKeys']()):this[_0x6dc018(0x46e)]('performEvasion',_0x26f9f7);else{if('DEuTj'===_0x6dc018(0x48c))return!![];else this[_0x6dc018(0x46e)](_0x6dc018(0x7ad),_0x26f9f7);}}}else VisuMZ[_0x6dc018(0xfb)][_0x6dc018(0x564)][_0x6dc018(0x509)](this,_0x26f9f7);},Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x31f)]=function(_0x921f68){const _0x38dee6=_0x57ed21;_0x921f68[_0x38dee6(0xa16)]()[_0x38dee6(0x108)]&&(_0x921f68['result']()[_0x38dee6(0x679)]>0x0&&!_0x921f68[_0x38dee6(0xa16)]()['drain']&&this[_0x38dee6(0x46e)](_0x38dee6(0x862),_0x921f68),_0x921f68['result']()['hpDamage']<0x0&&this['push'](_0x38dee6(0x686),_0x921f68),VisuMZ['BattleCore'][_0x38dee6(0x8d3)][_0x38dee6(0x6f7)][_0x38dee6(0xae4)]&&this[_0x38dee6(0x46e)](_0x38dee6(0x972),this[_0x38dee6(0x67b)](_0x921f68)));},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x2fc)]=Window_BattleLog['prototype'][_0x57ed21(0x607)],Window_BattleLog['prototype'][_0x57ed21(0x607)]=function(_0x40aac5){const _0x1f9e13=_0x57ed21;if(!VisuMZ[_0x1f9e13(0xfb)][_0x1f9e13(0x8d3)][_0x1f9e13(0x6f7)][_0x1f9e13(0x57d)])return;VisuMZ[_0x1f9e13(0xfb)][_0x1f9e13(0x2fc)][_0x1f9e13(0x509)](this,_0x40aac5);},VisuMZ['BattleCore']['Window_BattleLog_displayTpDamage']=Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x1be)],Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x1be)]=function(_0x5a5bb4){const _0x4e80c7=_0x57ed21;if(!VisuMZ[_0x4e80c7(0xfb)]['Settings']['BattleLog'][_0x4e80c7(0x321)])return;VisuMZ[_0x4e80c7(0xfb)][_0x4e80c7(0x5f0)][_0x4e80c7(0x509)](this,_0x5a5bb4);},Window_BattleLog[_0x57ed21(0xb20)]['displayAffectedStatus']=function(_0x56ba5e){const _0x2a65d0=_0x57ed21;if(_0x56ba5e['result']()[_0x2a65d0(0x404)]()){if(_0x2a65d0(0x64b)!=='riSJz'){_0x5b0699(_0x2a65d0(0x946)),_0x41598b[_0x2a65d0(0x53e)]();return;}else this[_0x2a65d0(0x46e)]('pushBaseLine'),this['displayChangedStates'](_0x56ba5e),this[_0x2a65d0(0x732)](_0x56ba5e),this['push'](_0x2a65d0(0x8d7));}},Window_BattleLog['prototype'][_0x57ed21(0x263)]=function(_0x6f5b9d){const _0x22943e=_0x57ed21,_0x41d0e5=_0x6f5b9d[_0x22943e(0xa16)](),_0x33156d=_0x41d0e5[_0x22943e(0x526)]();for(const _0x428cb0 of _0x33156d){const _0x89f996=_0x6f5b9d[_0x22943e(0x8cc)]()?_0x428cb0[_0x22943e(0xb81)]:_0x428cb0[_0x22943e(0xbd4)];_0x89f996&&VisuMZ['BattleCore'][_0x22943e(0x8d3)]['BattleLog']['ShowAddedState']&&(this[_0x22943e(0x46e)](_0x22943e(0x65f)),this[_0x22943e(0x46e)](_0x22943e(0xb03)),this[_0x22943e(0x46e)](_0x22943e(0xbc1)),this[_0x22943e(0x46e)](_0x22943e(0x972),_0x89f996[_0x22943e(0x455)](_0x6f5b9d[_0x22943e(0xb1c)]())),this['push'](_0x22943e(0x4c7))),_0x428cb0['id']===_0x6f5b9d['deathStateId']()&&this[_0x22943e(0x46e)](_0x22943e(0x70a),_0x6f5b9d);}},Window_BattleLog['prototype']['fnordAddedStates']=function(){},Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x869)]=function(_0x53dc86){const _0x130983=_0x57ed21;if(!VisuMZ['BattleCore'][_0x130983(0x8d3)][_0x130983(0x6f7)]['ShowRemovedState'])return;const _0x2d0927=_0x53dc86['result'](),_0x340592=_0x2d0927[_0x130983(0x69b)]();for(const _0x2be06e of _0x340592){if(_0x130983(0xb1a)!==_0x130983(0x91d)){if(_0x2be06e[_0x130983(0x2e5)]){if('QGqOz'==='XxzpR')return![];else this['push']('fnordRemovedStates'),this['push'](_0x130983(0xb03)),this[_0x130983(0x46e)](_0x130983(0xbc1)),this[_0x130983(0x46e)]('addText',_0x2be06e[_0x130983(0x2e5)][_0x130983(0x455)](_0x53dc86['name']())),this[_0x130983(0x46e)](_0x130983(0x4c7));}}else{const _0x1e88ea=new _0x515a55();this[_0x130983(0xb50)]['addChild'](_0x1e88ea),_0x1e88ea[_0x130983(0x627)](_0x520add);}}},Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x17f)]=function(){},Window_BattleLog['prototype'][_0x57ed21(0x732)]=function(_0x1128c0){const _0x4906bc=_0x57ed21,_0x10f9d5=VisuMZ[_0x4906bc(0xfb)]['Settings'][_0x4906bc(0x6f7)],_0x1aadce=_0x1128c0[_0x4906bc(0xa16)]();if(_0x10f9d5[_0x4906bc(0x4dc)])this[_0x4906bc(0x7f7)](_0x1128c0,_0x1aadce[_0x4906bc(0xb9a)],TextManager[_0x4906bc(0xa42)]);if(_0x10f9d5[_0x4906bc(0x24b)])this[_0x4906bc(0x7f7)](_0x1128c0,_0x1aadce[_0x4906bc(0x92b)],TextManager[_0x4906bc(0x3e4)]);if(_0x10f9d5[_0x4906bc(0x87c)])this[_0x4906bc(0x7f7)](_0x1128c0,_0x1aadce[_0x4906bc(0x67c)],TextManager[_0x4906bc(0x31e)]);},Window_BattleLog[_0x57ed21(0xb20)]['displayBuffs']=function(_0x45e3df,_0x20f4bf,_0xbe113e){const _0x3c20f5=_0x57ed21;for(const _0x5de442 of _0x20f4bf){const _0x33acc1=_0xbe113e[_0x3c20f5(0x455)](_0x45e3df[_0x3c20f5(0xb1c)](),TextManager['param'](_0x5de442));this[_0x3c20f5(0x46e)](_0x3c20f5(0xb03)),this[_0x3c20f5(0x46e)](_0x3c20f5(0xbc1)),this[_0x3c20f5(0x46e)](_0x3c20f5(0x972),_0x33acc1),this[_0x3c20f5(0x46e)](_0x3c20f5(0x4c7));}},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x549)]=Window_BattleLog['prototype'][_0x57ed21(0x80e)],Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x80e)]=function(){const _0x4fb638=_0x57ed21;VisuMZ[_0x4fb638(0xfb)][_0x4fb638(0x549)][_0x4fb638(0x509)](this),this['callNextMethod']();},VisuMZ[_0x57ed21(0xfb)]['Window_BattleLog_pushBaseLine']=Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0xbc1)],Window_BattleLog['prototype'][_0x57ed21(0xbc1)]=function(){const _0x4920d5=_0x57ed21;VisuMZ['BattleCore']['Window_BattleLog_pushBaseLine']['call'](this),this[_0x4920d5(0x7ae)]();},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x928)]=Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0xb03)],Window_BattleLog[_0x57ed21(0xb20)]['popBaseLine']=function(){const _0x4c41a2=_0x57ed21;VisuMZ['BattleCore'][_0x4c41a2(0x928)][_0x4c41a2(0x509)](this),this['processRefresh'](),this['callNextMethod']();},VisuMZ[_0x57ed21(0xfb)]['Window_BattleLog_popupDamage']=Window_BattleLog['prototype'][_0x57ed21(0xb88)],Window_BattleLog['prototype']['popupDamage']=function(_0x5e3ae4){const _0x31574f=_0x57ed21;VisuMZ['BattleCore'][_0x31574f(0xa1c)][_0x31574f(0x509)](this,_0x5e3ae4),this['callNextMethod']();},Window_BattleLog[_0x57ed21(0xb20)]['waitForNewLine']=function(){const _0x2c993d=_0x57ed21;let _0x21717b=0x0;if(this[_0x2c993d(0xbdf)][_0x2c993d(0x98b)]>0x0){if(_0x2c993d(0x23b)!=='ieOsX')_0x21717b=this[_0x2c993d(0xbdf)][this['_baseLineStack'][_0x2c993d(0x98b)]-0x1];else return _0x84b8ba[_0x2c993d(0xb1c)];}this[_0x2c993d(0x7b4)]['length']>_0x21717b?this[_0x2c993d(0x4c7)]():this[_0x2c993d(0x7ae)]();},VisuMZ['BattleCore'][_0x57ed21(0x571)]=Window_BattleLog[_0x57ed21(0xb20)]['performActionStart'],Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x8bc)]=function(_0x43af61,_0xadb84b){const _0x4a5395=_0x57ed21;VisuMZ[_0x4a5395(0xfb)]['Window_BattleLog_performActionStart'][_0x4a5395(0x509)](this,_0x43af61,_0xadb84b),this[_0x4a5395(0x7ae)]();},VisuMZ['BattleCore'][_0x57ed21(0x53f)]=Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x937)],Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x937)]=function(_0x1fd53e,_0x1ab7f1){const _0x5ae403=_0x57ed21;VisuMZ[_0x5ae403(0xfb)]['Window_BattleLog_performAction']['call'](this,_0x1fd53e,_0x1ab7f1),this[_0x5ae403(0x7ae)]();},VisuMZ['BattleCore'][_0x57ed21(0x2af)]=Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x5de)],Window_BattleLog[_0x57ed21(0xb20)]['performActionEnd']=function(_0x14316b){const _0x3c0727=_0x57ed21;VisuMZ[_0x3c0727(0xfb)][_0x3c0727(0x2af)][_0x3c0727(0x509)](this,_0x14316b);for(const _0xe9a762 of BattleManager[_0x3c0727(0x170)]()){if(!_0xe9a762)continue;if(_0xe9a762[_0x3c0727(0xba1)]())continue;_0xe9a762[_0x3c0727(0x453)]();}this[_0x3c0727(0x7ae)]();},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x410)]=Window_BattleLog['prototype'][_0x57ed21(0x862)],Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x862)]=function(_0x4609e9){const _0x38fd9d=_0x57ed21;VisuMZ[_0x38fd9d(0xfb)][_0x38fd9d(0x410)]['call'](this,_0x4609e9),this[_0x38fd9d(0x7ae)]();},VisuMZ['BattleCore'][_0x57ed21(0x633)]=Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x5d3)],Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x5d3)]=function(_0x54949a){const _0x18615b=_0x57ed21;VisuMZ[_0x18615b(0xfb)][_0x18615b(0x633)][_0x18615b(0x509)](this,_0x54949a),this[_0x18615b(0x7ae)]();},VisuMZ['BattleCore'][_0x57ed21(0x525)]=Window_BattleLog['prototype']['performRecovery'],Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x686)]=function(_0x1ab34d){const _0x3180b5=_0x57ed21;VisuMZ[_0x3180b5(0xfb)][_0x3180b5(0x525)]['call'](this,_0x1ab34d),this[_0x3180b5(0x7ae)]();},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x81e)]=Window_BattleLog['prototype'][_0x57ed21(0x68b)],Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x68b)]=function(_0x5219fd){const _0x5f0da3=_0x57ed21;VisuMZ['BattleCore'][_0x5f0da3(0x81e)][_0x5f0da3(0x509)](this,_0x5219fd),this['callNextMethod']();},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x511)]=Window_BattleLog['prototype'][_0x57ed21(0x7ad)],Window_BattleLog['prototype']['performMagicEvasion']=function(_0x457a77){const _0x29f590=_0x57ed21;VisuMZ[_0x29f590(0xfb)][_0x29f590(0x511)][_0x29f590(0x509)](this,_0x457a77),this['callNextMethod']();},VisuMZ[_0x57ed21(0xfb)]['Window_BattleLog_performCounter']=Window_BattleLog[_0x57ed21(0xb20)]['performCounter'],Window_BattleLog['prototype'][_0x57ed21(0x2a1)]=function(_0x32a9f0){const _0x22eabd=_0x57ed21;VisuMZ[_0x22eabd(0xfb)][_0x22eabd(0xbb2)][_0x22eabd(0x509)](this,_0x32a9f0),this[_0x22eabd(0x7ae)]();},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x767)]=Window_BattleLog[_0x57ed21(0xb20)]['performReflection'],Window_BattleLog['prototype'][_0x57ed21(0x78a)]=function(_0x26c29e){const _0x2104d4=_0x57ed21;VisuMZ[_0x2104d4(0xfb)]['Window_BattleLog_performReflection']['call'](this,_0x26c29e),this['callNextMethod']();},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x3ea)]=Window_BattleLog[_0x57ed21(0xb20)]['performSubstitute'],Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x104)]=function(_0x1e76e0,_0x18b267){const _0x346672=_0x57ed21;VisuMZ['BattleCore']['Window_BattleLog_performSubstitute'][_0x346672(0x509)](this,_0x1e76e0,_0x18b267),this[_0x346672(0x7ae)]();},VisuMZ[_0x57ed21(0xfb)][_0x57ed21(0x758)]=Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x70a)],Window_BattleLog[_0x57ed21(0xb20)]['performCollapse']=function(_0x26581b){const _0x3b3a60=_0x57ed21;VisuMZ['BattleCore']['Window_BattleLog_performCollapse'][_0x3b3a60(0x509)](this,_0x26581b),this[_0x3b3a60(0x7ae)]();},Window_BattleLog[_0x57ed21(0xb20)]['performCastAnimation']=function(_0xcd9cb8,_0x27149e){const _0x19f23e=_0x57ed21;_0xcd9cb8[_0x19f23e(0x84a)](_0x27149e),this[_0x19f23e(0x7ae)]();},Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x644)]=function(_0x5ae91f,_0x4c5366){const _0x2fcdce=_0x57ed21,_0x57713f=_0x5ae91f[_0x2fcdce(0xa82)]();if(_0x57713f<=0x0){if('PXGTF'===_0x2fcdce(0x101)){this[_0x2fcdce(0x973)]['visible']=_0x2d591e[_0x2fcdce(0xac6)]();const _0x3ed7a1=_0x366c3b[_0x2fcdce(0x241)]();if(_0x3ed7a1===this[_0x2fcdce(0x973)]['actor'])return;this[_0x2fcdce(0x973)][_0x2fcdce(0x241)]=_0x3ed7a1||this[_0x2fcdce(0x973)][_0x2fcdce(0x241)];if(!_0x3ed7a1)return;else{if(_0x3ed7a1[_0x2fcdce(0x6bc)]()===''){this[_0x2fcdce(0x973)][_0x2fcdce(0x10e)]=_0x541f07[_0x2fcdce(0x7f1)];return;}else{const _0x4884c1=_0x5eb380['loadPicture'](_0x3ed7a1['getBattlePortraitFilename']());_0x4884c1[_0x2fcdce(0xa4c)](this[_0x2fcdce(0x319)][_0x2fcdce(0x62e)](this,_0x4884c1));}}}else SoundManager[_0x2fcdce(0x3e5)]();}else this['showNormalAnimation'](_0x4c5366,_0x57713f);},Window_BattleLog[_0x57ed21(0xb20)][_0x57ed21(0x7f5)]=function(_0x3105f9,_0xb7cdb7,_0x243f51){const _0x1743a1=_0x57ed21,_0x3d1169=[_0x3105f9][_0x1743a1(0x8a9)](_0xb7cdb7);for(const _0x235a38 of _0x3d1169){if(_0x1743a1(0x718)!==_0x1743a1(0x718)){if(this[_0x1743a1(0x7fb)]===_0x24949f)return;this['updateGrow'](),this[_0x1743a1(0x9b6)]();}else{if(!_0x235a38)continue;_0x235a38[_0x1743a1(0xbcb)](_0x243f51);}}this[_0x1743a1(0x7ae)]();},Window_BattleLog[_0x57ed21(0xb20)]['waitCount']=function(_0x1886ec){this['_waitCount']=_0x1886ec;},Window_BattleLog[_0x57ed21(0xb20)]['requestMotion']=function(_0x3ba005,_0x448415){const _0x45a335=_0x57ed21;for(const _0x367d6e of _0x3ba005){if(_0x45a335(0x95b)==='IaNLt'){if(!_0x367d6e)continue;_0x367d6e[_0x45a335(0xbdc)](_0x448415);}else{_0x1538d2&&_0x3dd891&&_0x322051[_0x45a335(0x75a)]&&this['parseForcedGameTroopSettingsBattleCore'](_0x2bf9f0[_0x45a335(0x75a)]);const _0x3c3bfd=_0x14fc58[_0x46ac9a];if(_0x3c3bfd){let _0xf05ad1=_0x219406[_0x45a335(0x34a)](_0x3c3bfd['id']);this[_0x45a335(0x4a6)](_0xf05ad1);}}}this[_0x45a335(0x7ae)]();},Window_BattleLog[_0x57ed21(0xb20)]['performMoveToPoint']=function(_0x55005b,_0x456edf,_0x375adc,_0x3a7a9d,_0x3ec378,_0x38f378){const _0x1c0ad4=_0x57ed21;_0x55005b['moveBattlerToPoint'](_0x456edf,_0x375adc,_0x3a7a9d,_0x3ec378,_0x38f378,-0x1),this[_0x1c0ad4(0x7ae)]();},Window_BattleLog[_0x57ed21(0xb20)]['performMoveToTargets']=function(_0x47d4ec,_0x2be0a3,_0x1c0b64,_0x9b0329,_0x45cdd8,_0x1e6274,_0x205cb3){const _0x85ff11=_0x57ed21,_0x5d640f=Math[_0x85ff11(0x49b)](..._0x2be0a3[_0x85ff11(0x6d9)](_0x418f6f=>_0x418f6f[_0x85ff11(0x595)]()[_0x85ff11(0xa30)]-_0x418f6f[_0x85ff11(0x595)]()[_0x85ff11(0x3c6)]()/0x2)),_0x3194b5=Math[_0x85ff11(0x952)](..._0x2be0a3[_0x85ff11(0x6d9)](_0x483be2=>_0x483be2[_0x85ff11(0x595)]()[_0x85ff11(0xa30)]+_0x483be2[_0x85ff11(0x595)]()[_0x85ff11(0x3c6)]()/0x2)),_0x486ef1=Math[_0x85ff11(0x49b)](..._0x2be0a3[_0x85ff11(0x6d9)](_0x572610=>_0x572610['battler']()[_0x85ff11(0x656)]-_0x572610['battler']()[_0x85ff11(0xa49)]())),_0x4e7b6c=Math['max'](..._0x2be0a3[_0x85ff11(0x6d9)](_0x2cb7d9=>_0x2cb7d9[_0x85ff11(0x595)]()[_0x85ff11(0x656)])),_0x380e59=_0x2be0a3[_0x85ff11(0x863)](_0x4c377=>_0x4c377['isActor']())['length'],_0x5cfe0a=_0x2be0a3['filter'](_0x45e3b2=>_0x45e3b2[_0x85ff11(0xa8a)]())[_0x85ff11(0x98b)];let _0x36443e=0x0,_0x1b70cc=0x0;if(_0x1c0b64[_0x85ff11(0x463)](/front/i)){if(_0x85ff11(0x9ff)===_0x85ff11(0x9ff))_0x36443e=_0x380e59>=_0x5cfe0a?_0x5d640f:_0x3194b5;else{const _0x4952f7=_0x3ba647[_0x85ff11(0xfb)][_0x85ff11(0x8d3)][_0x85ff11(0x6f9)],_0x1213af=_0x4952f7[_0x85ff11(0x789)]||0xc0,_0x35a199=this[_0x85ff11(0x76c)](),_0x2a20e7=this[_0x85ff11(0x825)]()?_0x3e4483[_0x85ff11(0x667)]-_0x1213af:0x0,_0x211b12=_0x5b9bd8[_0x85ff11(0xb3b)]-_0x35a199;return new _0x51f972(_0x2a20e7,_0x211b12,_0x1213af,_0x35a199);}}else{if(_0x1c0b64[_0x85ff11(0x463)](/middle/i))_0x36443e=(_0x5d640f+_0x3194b5)/0x2,_0x205cb3=-0x1;else _0x1c0b64[_0x85ff11(0x463)](/back/i)&&(_0x36443e=_0x380e59>=_0x5cfe0a?_0x3194b5:_0x5d640f);}if(_0x1c0b64[_0x85ff11(0x463)](/head/i))_0x85ff11(0x458)!==_0x85ff11(0x29c)?_0x1b70cc=_0x486ef1:_0x188186=_0x301b3c;else{if(_0x1c0b64[_0x85ff11(0x463)](/center/i))_0x1b70cc=(_0x486ef1+_0x4e7b6c)/0x2;else{if(_0x1c0b64[_0x85ff11(0x463)](/base/i)){if(_0x85ff11(0x5c0)===_0x85ff11(0x5c0))_0x1b70cc=_0x4e7b6c;else{if(!_0x1f2003['isSceneBattle']())return;if(!_0x29faee[_0x85ff11(0xb6a)])return;_0x23f2d2['ConvertParams'](_0x4025a5,_0x2ad5e6);const _0x37d1ee=_0x59a433['getLastPluginCommandInterpreter'](),_0x5a5e78=_0x928599[_0x85ff11(0x408)];if(!_0x37d1ee)return;_0xe00380['setBattleAngle'](_0x4bb9df[_0x85ff11(0x601)],_0x4df073[_0x85ff11(0x69d)],_0x40df4b[_0x85ff11(0x670)]);if(_0x5a5e78)_0x37d1ee[_0x85ff11(0xa92)](_0x85ff11(0xb2f));}}}}_0x47d4ec[_0x85ff11(0x7f4)](_0x36443e,_0x1b70cc,_0x9b0329,_0x45cdd8,_0x1e6274,_0x205cb3),this['callNextMethod']();},Window_BattleLog['prototype'][_0x57ed21(0x71f)]=function(_0x4d8ff8,_0x1171e5,_0x4998ea){const _0x221fb6=_0x57ed21;for(const _0x9cea0a of _0x4d8ff8){if(!_0x9cea0a)continue;_0x9cea0a['jumpBattler'](_0x1171e5,_0x4998ea);}this[_0x221fb6(0x7ae)]();};