//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.69;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.69] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0x4a3d8d=_0x8ea5;(function(_0x55577a,_0xd9db26){const _0x4ebf93=_0x8ea5,_0x40557e=_0x55577a();while(!![]){try{const _0xa3d857=parseInt(_0x4ebf93(0x7ff))/0x1+-parseInt(_0x4ebf93(0x79a))/0x2*(parseInt(_0x4ebf93(0x7b8))/0x3)+parseInt(_0x4ebf93(0xc32))/0x4*(parseInt(_0x4ebf93(0x78a))/0x5)+-parseInt(_0x4ebf93(0x36b))/0x6*(parseInt(_0x4ebf93(0x7a4))/0x7)+-parseInt(_0x4ebf93(0x8a3))/0x8*(parseInt(_0x4ebf93(0x9e4))/0x9)+-parseInt(_0x4ebf93(0xb0d))/0xa+parseInt(_0x4ebf93(0x5b4))/0xb;if(_0xa3d857===_0xd9db26)break;else _0x40557e['push'](_0x40557e['shift']());}catch(_0x1dc403){_0x40557e['push'](_0x40557e['shift']());}}}(_0x1780,0x530b4));var label=_0x4a3d8d(0x485),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x4a3d8d(0x3d0)](function(_0x3af745){const _0x4b8d43=_0x4a3d8d;return _0x3af745[_0x4b8d43(0x20a)]&&_0x3af745[_0x4b8d43(0x1fc)][_0x4b8d43(0xbff)]('['+label+']');})[0x0];VisuMZ[label][_0x4a3d8d(0xb75)]=VisuMZ[label][_0x4a3d8d(0xb75)]||{},VisuMZ[_0x4a3d8d(0x6a8)]=function(_0x52d85e,_0x4892bb){const _0x3750d1=_0x4a3d8d;for(const _0x545f4d in _0x4892bb){if(_0x3750d1(0x896)!==_0x3750d1(0xb56)){if(_0x545f4d[_0x3750d1(0x591)](/(.*):(.*)/i)){const _0x26b313=String(RegExp['$1']),_0xd7232a=String(RegExp['$2'])[_0x3750d1(0x302)]()['trim']();let _0x3a7d0f,_0x28461c,_0x412c3b;switch(_0xd7232a){case _0x3750d1(0x2c0):_0x3a7d0f=_0x4892bb[_0x545f4d]!==''?Number(_0x4892bb[_0x545f4d]):0x0;break;case _0x3750d1(0x852):_0x28461c=_0x4892bb[_0x545f4d]!==''?JSON[_0x3750d1(0x3cd)](_0x4892bb[_0x545f4d]):[],_0x3a7d0f=_0x28461c[_0x3750d1(0xa4a)](_0x244880=>Number(_0x244880));break;case'EVAL':_0x3a7d0f=_0x4892bb[_0x545f4d]!==''?eval(_0x4892bb[_0x545f4d]):null;break;case _0x3750d1(0x2f7):_0x28461c=_0x4892bb[_0x545f4d]!==''?JSON[_0x3750d1(0x3cd)](_0x4892bb[_0x545f4d]):[],_0x3a7d0f=_0x28461c[_0x3750d1(0xa4a)](_0x5ac7c0=>eval(_0x5ac7c0));break;case _0x3750d1(0x61a):_0x3a7d0f=_0x4892bb[_0x545f4d]!==''?JSON[_0x3750d1(0x3cd)](_0x4892bb[_0x545f4d]):'';break;case'ARRAYJSON':_0x28461c=_0x4892bb[_0x545f4d]!==''?JSON[_0x3750d1(0x3cd)](_0x4892bb[_0x545f4d]):[],_0x3a7d0f=_0x28461c[_0x3750d1(0xa4a)](_0x1aeffc=>JSON['parse'](_0x1aeffc));break;case _0x3750d1(0x909):_0x3a7d0f=_0x4892bb[_0x545f4d]!==''?new Function(JSON[_0x3750d1(0x3cd)](_0x4892bb[_0x545f4d])):new Function(_0x3750d1(0xb7a));break;case _0x3750d1(0x717):_0x28461c=_0x4892bb[_0x545f4d]!==''?JSON[_0x3750d1(0x3cd)](_0x4892bb[_0x545f4d]):[],_0x3a7d0f=_0x28461c[_0x3750d1(0xa4a)](_0x2de4f4=>new Function(JSON[_0x3750d1(0x3cd)](_0x2de4f4)));break;case _0x3750d1(0x4b2):_0x3a7d0f=_0x4892bb[_0x545f4d]!==''?String(_0x4892bb[_0x545f4d]):'';break;case _0x3750d1(0x872):_0x28461c=_0x4892bb[_0x545f4d]!==''?JSON[_0x3750d1(0x3cd)](_0x4892bb[_0x545f4d]):[],_0x3a7d0f=_0x28461c[_0x3750d1(0xa4a)](_0x699274=>String(_0x699274));break;case _0x3750d1(0x953):_0x412c3b=_0x4892bb[_0x545f4d]!==''?JSON['parse'](_0x4892bb[_0x545f4d]):{},_0x52d85e[_0x26b313]={},VisuMZ['ConvertParams'](_0x52d85e[_0x26b313],_0x412c3b);continue;case'ARRAYSTRUCT':_0x28461c=_0x4892bb[_0x545f4d]!==''?JSON[_0x3750d1(0x3cd)](_0x4892bb[_0x545f4d]):[],_0x3a7d0f=_0x28461c[_0x3750d1(0xa4a)](_0xf2ea7a=>VisuMZ[_0x3750d1(0x6a8)]({},JSON['parse'](_0xf2ea7a)));break;default:continue;}_0x52d85e[_0x26b313]=_0x3a7d0f;}}else return _0x2e35ef[_0x3750d1(0x930)]()?(_0x3e8004[_0x3750d1(0x3ff)]['_spriteset']['changeBattlebacks'](_0x55dfec[0x0],_0x2c5aeb[0x1]),!![]):_0x3c67af[_0x3750d1(0x485)][_0x3750d1(0x58b)]['call'](this,_0x4fba1f);}return _0x52d85e;},(_0x46c79b=>{const _0x12a7ff=_0x4a3d8d,_0x1064a6=_0x46c79b[_0x12a7ff(0xbaa)];for(const _0x51896d of dependencies){if(_0x12a7ff(0x705)===_0x12a7ff(0x705)){if(!Imported[_0x51896d]){if('qTdog'===_0x12a7ff(0x362))this[_0x12a7ff(0x168)]='list';else{alert(_0x12a7ff(0x465)[_0x12a7ff(0x8dd)](_0x1064a6,_0x51896d)),SceneManager[_0x12a7ff(0x4c2)]();break;}}}else this[_0x12a7ff(0x8da)]=![];}const _0x4ff866=_0x46c79b['description'];if(_0x4ff866[_0x12a7ff(0x591)](/\[Version[ ](.*?)\]/i)){if('thzli'!==_0x12a7ff(0x584)){const _0x83ac5c=Number(RegExp['$1']);_0x83ac5c!==VisuMZ[label][_0x12a7ff(0x553)]&&(alert(_0x12a7ff(0x782)[_0x12a7ff(0x8dd)](_0x1064a6,_0x83ac5c)),SceneManager[_0x12a7ff(0x4c2)]());}else{if(!_0x5e1f68[_0x12a7ff(0x957)]())return;const _0x1b6101=this[_0x12a7ff(0x28e)]();if(!_0x1b6101)return;_0x4989a4=_0x46b770||0x0;if(_0x4a20c3>0x0){if(_0x1b6101[_0x12a7ff(0x232)]>_0x44bf7e)_0x5e1228+=_0x1b6101[_0x12a7ff(0xb49)]/0x2+_0x37a3cd;if(_0x1b6101['_baseX']<_0x59b530)_0x512dec-=_0x1b6101[_0x12a7ff(0xb49)]/0x2+_0x63e4d1;}if(_0x40a9d5)this[_0x12a7ff(0x420)](_0x667878,_0x24dc2b,![]);_0x1b6101[_0x12a7ff(0x5f1)](_0x136c28,_0x702093,_0x41fb79,_0x2bc4dd),this[_0x12a7ff(0x920)]=_0x2a1ef3,this[_0x12a7ff(0x6ff)]=_0x1c64bc;}}if(_0x4ff866['match'](/\[Tier[ ](\d+)\]/i)){const _0x27fbdd=Number(RegExp['$1']);_0x27fbdd<tier?(alert(_0x12a7ff(0x75a)[_0x12a7ff(0x8dd)](_0x1064a6,_0x27fbdd,tier)),SceneManager[_0x12a7ff(0x4c2)]()):_0x12a7ff(0x3ae)===_0x12a7ff(0x6c5)?_0x86c7d2=_0x19f593>=_0x33646d?_0x3f7612:_0x53eebe:tier=Math[_0x12a7ff(0x559)](_0x27fbdd,tier);}VisuMZ[_0x12a7ff(0x6a8)](VisuMZ[label][_0x12a7ff(0xb75)],_0x46c79b[_0x12a7ff(0x2a7)]);})(pluginData),VisuMZ[_0x4a3d8d(0x1a3)]=function(_0xc0d529){const _0x406ac3=_0x4a3d8d;let _0x5bd3f9=[];for(const _0x3e51e1 of _0xc0d529){_0x5bd3f9=_0x5bd3f9['concat'](VisuMZ['ConvertActionSequenceTarget'](_0x3e51e1));}return _0x5bd3f9[_0x406ac3(0x3d0)](_0x92e42=>_0x92e42);},VisuMZ[_0x4a3d8d(0xbb1)]=function(_0xd02f64){const _0x4cfec9=_0x4a3d8d,_0x523b34=BattleManager['allBattleMembers']()[_0x4cfec9(0x3d0)](_0x502155=>_0x502155&&_0x502155[_0x4cfec9(0x3d9)]()),_0x425bf6=BattleManager['_subject'],_0x1e6f0e=BattleManager[_0x4cfec9(0x86c)],_0x33adea=BattleManager[_0x4cfec9(0x8e6)]?BattleManager[_0x4cfec9(0x8e6)]['slice'](0x0):_0x523b34;_0xd02f64=_0xd02f64[_0x4cfec9(0x3b6)]()[_0x4cfec9(0x82d)]();if(_0xd02f64===_0x4cfec9(0x339))return[_0x425bf6];else{if(_0xd02f64==='current\x20target'){if(_0x4cfec9(0xafb)!==_0x4cfec9(0x2e2))return[_0x1e6f0e];else this['autoSelectPriority']();}else{if(_0xd02f64===_0x4cfec9(0x864)){if(_0x4cfec9(0x855)===_0x4cfec9(0x271)){this['damageContainer']()[_0x4cfec9(0x960)](_0xd857f8);if(_0x59042d[_0x4cfec9(0x4cc)]())_0x1f4198[_0x4cfec9(0x3cb)]['x']=-0x1;}else{if(_0x1e6f0e){if(_0x4cfec9(0x3e2)!==_0x4cfec9(0x3e2))this[_0x4cfec9(0x834)](_0x4cfec9(0x99c));else{const _0x1529da=_0x33adea['indexOf'](_0x1e6f0e);return _0x1529da>=0x0?[_0x33adea[_0x1529da-0x1]||_0x1e6f0e]:[_0x1e6f0e];}}}}else{if(_0xd02f64===_0x4cfec9(0x8b3)){if(_0x4cfec9(0x212)==='DZpAi'){if(_0x1e6f0e){const _0x4d8e0a=_0x33adea[_0x4cfec9(0x2b7)](_0x1e6f0e);return _0x4d8e0a>=0x0?[_0x33adea[_0x4d8e0a+0x1]||_0x1e6f0e]:[_0x1e6f0e];}}else _0x759d7[_0x4cfec9(0x834)](_0x1a550f);}else{if(_0xd02f64===_0x4cfec9(0x1f0)){if(_0x4cfec9(0x25a)===_0x4cfec9(0x25a))return _0x33adea;else this[_0x4cfec9(0xa34)]['x']=(_0x556c3f['width']-_0x5be8bf['boxWidth'])/0x2,this['_windowLayer']['y']=(_0x5ed8eb[_0x4cfec9(0x2cc)]-_0x47dd54[_0x4cfec9(0x8de)])/0x2;}else{if(_0xd02f64===_0x4cfec9(0x512))return[_0x425bf6][_0x4cfec9(0xb1a)](_0x33adea);else{if(_0xd02f64===_0x4cfec9(0x410)){if(_0x4cfec9(0x61e)!=='pmxbV')return _0x523b34['filter'](_0x407f44=>_0x407f44!==_0x425bf6&&!_0x33adea[_0x4cfec9(0xbff)](_0x407f44)&&_0x407f44[_0x4cfec9(0x197)]());else _0x358335[_0x4cfec9(0x485)]['Window_BattleLog_performCollapse'][_0x4cfec9(0xaf0)](this,_0x4d7b8d),this[_0x4cfec9(0x84f)]();}}}}}}}if(_0x425bf6){if('KTXsB'===_0x4cfec9(0x6ca)){if(_0xd02f64==='alive\x20friends')return _0x425bf6[_0x4cfec9(0x997)]()[_0x4cfec9(0x411)]();else{if(_0xd02f64===_0x4cfec9(0x6e0))return _0x425bf6['friendsUnit']()[_0x4cfec9(0x411)]()[_0x4cfec9(0x3d0)](_0x4e3ac5=>_0x4e3ac5!==_0x425bf6);else{if(_0xd02f64==='alive\x20friends\x20not\x20target'){if('PmVWL'===_0x4cfec9(0x7fb))return _0x425bf6[_0x4cfec9(0x997)]()[_0x4cfec9(0x411)]()['filter'](_0x2dbf9f=>_0x2dbf9f!==_0x1e6f0e);else _0x3a0200[_0x4cfec9(0x906)](this[_0x4cfec9(0x997)]()[_0x4cfec9(0x2bd)]());}else{if(_0xd02f64===_0x4cfec9(0x6d1)){if(_0x4cfec9(0xb36)!==_0x4cfec9(0xb36))(this[_0x4cfec9(0xb88)]!==_0x3146c3||this[_0x4cfec9(0x903)]!==_0x3cc50b)&&(this['_targetHomeX']=_0xa272f8,this[_0x4cfec9(0x903)]=_0x524ee6,this[_0x4cfec9(0x1d3)]=_0x2dd063,this[_0x4cfec9(0x2dc)]=_0xff1f3b,this[_0x4cfec9(0x350)]=_0x5174bc,_0x69a90d<=0x0&&this['onHomeMoveEnd']());else return _0x425bf6[_0x4cfec9(0x997)]()[_0x4cfec9(0x370)]();}else{if(_0xd02f64[_0x4cfec9(0x591)](/FRIEND INDEX (\d+)/i)){const _0x2fd750=Number(RegExp['$1']);return[_0x425bf6['friendsUnit']()[_0x4cfec9(0x30f)]()[_0x2fd750]];}}}}}if(_0xd02f64==='alive\x20opponents')return _0x425bf6[_0x4cfec9(0xbae)]()[_0x4cfec9(0x411)]();else{if(_0xd02f64==='alive\x20opponents\x20not\x20target')return _0x425bf6[_0x4cfec9(0xbae)]()[_0x4cfec9(0x411)]()[_0x4cfec9(0x3d0)](_0x39715e=>_0x39715e!==_0x1e6f0e);else{if(_0xd02f64===_0x4cfec9(0x152)){if(_0x4cfec9(0x847)!==_0x4cfec9(0x847))this[_0x4cfec9(0x97e)]();else return _0x425bf6[_0x4cfec9(0xbae)]()[_0x4cfec9(0x370)]();}else{if(_0xd02f64[_0x4cfec9(0x591)](/OPPONENT INDEX (\d+)/i)){const _0x122853=Number(RegExp['$1']);return[_0x425bf6[_0x4cfec9(0xbae)]()[_0x4cfec9(0x30f)]()[_0x122853]];}}}}}else _0x2e1137=_0x5287d3['BattleCore'][_0x4cfec9(0xb5c)][_0x4cfec9(0xaf0)](this);}if(_0xd02f64===_0x4cfec9(0x3bd))return $gameParty[_0x4cfec9(0x411)]();else{if(_0xd02f64===_0x4cfec9(0x643))return $gameParty['aliveMembers']()[_0x4cfec9(0x3d0)](_0x2d1b54=>_0x2d1b54!==_0x425bf6);else{if(_0xd02f64===_0x4cfec9(0xbdb))return $gameParty[_0x4cfec9(0x411)]()['filter'](_0x508f5a=>_0x508f5a!==_0x1e6f0e);else{if(_0xd02f64==='dead\x20actors'){if(_0x4cfec9(0x2b4)===_0x4cfec9(0x586)){_0x331dde[_0x4cfec9(0x6d3)]['setActionState']('undecided');const _0x545711=_0x56d13a['_currentActor']['battler']();if(_0x545711)_0x545711[_0x4cfec9(0x938)]();}else return $gameParty['deadMembers']();}else{if(_0xd02f64[_0x4cfec9(0x591)](/ACTOR INDEX (\d+)/i)){if(_0x4cfec9(0x7b9)!==_0x4cfec9(0x89b)){const _0x11ba12=Number(RegExp['$1']);return[$gameParty[_0x4cfec9(0x30f)]()[_0x11ba12]];}else this[_0x4cfec9(0x401)]++;}else{if(_0xd02f64[_0x4cfec9(0x591)](/ACTOR ID (\d+)/i)){if('dEEms'!=='JyUwN'){const _0xfea52e=Number(RegExp['$1']);return[$gameActors[_0x4cfec9(0x2fa)](_0xfea52e)];}else this[_0x4cfec9(0xa7c)]['reverse']();}}}}}}if(_0xd02f64==='alive\x20enemies'){if(_0x4cfec9(0x39f)===_0x4cfec9(0xb1f))this[_0x4cfec9(0xa19)](_0x4cfec9(0xb1e)),_0x337dba[_0x4cfec9(0x485)]['Game_Battler_startTpbTurn'][_0x4cfec9(0xaf0)](this),this[_0x4cfec9(0xa19)](_0x4cfec9(0xa73));else return $gameTroop['aliveMembers']();}else{if(_0xd02f64==='alive\x20enemies\x20not\x20user')return $gameTroop['aliveMembers']()[_0x4cfec9(0x3d0)](_0x466f9c=>_0x466f9c!==_0x425bf6);else{if(_0xd02f64===_0x4cfec9(0xa7f))return $gameTroop[_0x4cfec9(0x411)]()[_0x4cfec9(0x3d0)](_0x35b3d0=>_0x35b3d0!==_0x1e6f0e);else{if(_0xd02f64===_0x4cfec9(0x144))return $gameTroop[_0x4cfec9(0x370)]();else{if(_0xd02f64[_0x4cfec9(0x591)](/ENEMY INDEX (\d+)/i)){if('ncNlJ'==='ncNlJ'){const _0x170568=Number(RegExp['$1']);return[$gameTroop['members']()[_0x170568]];}else this[_0x4cfec9(0x347)]();}else{if(_0xd02f64[_0x4cfec9(0x591)](/ENEMY ID (\d+)/i)){const _0x4f7f60=Number(RegExp['$1']);return $gameTroop[_0x4cfec9(0x411)]()[_0x4cfec9(0x3d0)](_0x52cef0=>_0x52cef0[_0x4cfec9(0x313)]()===_0x4f7f60);}}}}}}if(_0xd02f64===_0x4cfec9(0x5c5))return _0x523b34['filter'](_0x584146=>_0x584146['isAlive']());else{if(_0xd02f64===_0x4cfec9(0x5dd))return _0x523b34['filter'](_0x5dbe1d=>_0x5dbe1d[_0x4cfec9(0x32c)]()&&_0x5dbe1d!==_0x425bf6);else{if(_0xd02f64===_0x4cfec9(0x20d)){if(_0x4cfec9(0xb19)===_0x4cfec9(0xb19))return _0x523b34[_0x4cfec9(0x3d0)](_0x29876d=>_0x29876d['isAlive']()&&_0x29876d!==_0x1e6f0e);else{_0x3ef392['BattleCore'][_0x4cfec9(0x2f4)][_0x4cfec9(0xaf0)](this,_0x272305);if(!_0x5a2335[_0x4cfec9(0x962)]()){const _0x144ded=this['battler']();_0x144ded&&_0x144ded[_0x4cfec9(0x5a4)]();}this['setBattlerFlip'](![]);}}else{if(_0xd02f64==='dead\x20battlers')return _0x523b34[_0x4cfec9(0x3d0)](_0x25e1e7=>_0x25e1e7['isDead']());}}}return[];},PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],_0x4a3d8d(0x15b),_0x3d7e8a=>{const _0x4afc0d=_0x4a3d8d;if(!SceneManager[_0x4afc0d(0x930)]())return;VisuMZ['ConvertParams'](_0x3d7e8a,_0x3d7e8a);const _0x393b8d=$gameTemp[_0x4afc0d(0x202)](),_0x4ed213=BattleManager[_0x4afc0d(0x82e)],_0xcd41f5=BattleManager[_0x4afc0d(0x18b)],_0x1f5f83=BattleManager[_0x4afc0d(0x8e6)]?BattleManager[_0x4afc0d(0x8e6)][_0x4afc0d(0x5cf)](0x0):[],_0x4a4fa4=BattleManager[_0x4afc0d(0x912)];if(!_0x393b8d||!_0x4ed213||!_0xcd41f5)return;if(!_0x4ed213[_0x4afc0d(0x49d)]())return;if(_0x3d7e8a[_0x4afc0d(0x3c0)])_0x4a4fa4[_0x4afc0d(0x524)](_0xcd41f5,_0x4ed213[_0x4afc0d(0x49d)]());_0x3d7e8a['ApplyImmortal']&&_0x4a4fa4[_0x4afc0d(0x906)]('applyImmortal',_0xcd41f5,_0x1f5f83,!![]);if(_0x3d7e8a['ActionStart'])_0x4a4fa4[_0x4afc0d(0x906)]('performActionStart',_0xcd41f5,_0x4ed213);if(_0x3d7e8a[_0x4afc0d(0x316)])_0x4a4fa4['push'](_0x4afc0d(0x780));if(_0x3d7e8a[_0x4afc0d(0x96e)])_0x4a4fa4[_0x4afc0d(0x906)](_0x4afc0d(0x258),_0xcd41f5,_0x4ed213);if(_0x3d7e8a[_0x4afc0d(0x5f3)])_0x4a4fa4[_0x4afc0d(0x906)](_0x4afc0d(0x82f));_0x393b8d['setWaitMode'](_0x4afc0d(0x672));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x94f),_0x434d36=>{const _0x1dafa0=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1dafa0(0x6a8)](_0x434d36,_0x434d36);const _0x47e27d=$gameTemp[_0x1dafa0(0x202)](),_0x1a8a6f=BattleManager['_action'],_0x59496a=BattleManager[_0x1dafa0(0x18b)],_0x734616=BattleManager[_0x1dafa0(0x8e6)]?BattleManager[_0x1dafa0(0x8e6)]['slice'](0x0):[],_0x115a40=BattleManager[_0x1dafa0(0x912)],_0x434ed7=_0x434d36['DualWield']??![];if(!_0x47e27d||!_0x1a8a6f||!_0x59496a)return;if(!_0x1a8a6f[_0x1dafa0(0x49d)]())return;let _0x29eebf=_0x434ed7?_0x115a40[_0x1dafa0(0x924)](_0x59496a):0x1;for(let _0x31c74a=0x0;_0x31c74a<_0x29eebf;_0x31c74a++){if(_0x1dafa0(0x528)!==_0x1dafa0(0x83d)){_0x434ed7&&_0x59496a[_0x1dafa0(0x764)]()&&_0x115a40[_0x1dafa0(0x906)](_0x1dafa0(0x7da),_0x59496a,_0x31c74a);if(_0x434d36[_0x1dafa0(0xaf1)])_0x115a40['push'](_0x1dafa0(0x9df),_0x59496a,_0x1a8a6f);if(_0x434d36['WaitCount']>0x0)_0x115a40[_0x1dafa0(0x906)](_0x1dafa0(0xa91),_0x434d36['WaitCount']);if(_0x434d36[_0x1dafa0(0x944)])_0x115a40['push'](_0x1dafa0(0xb25),_0x59496a,_0x734616,_0x1a8a6f[_0x1dafa0(0x49d)]()[_0x1dafa0(0x44e)]);if(_0x434d36[_0x1dafa0(0x5f3)])_0x115a40[_0x1dafa0(0x906)](_0x1dafa0(0x82f));for(const _0x55fa47 of _0x734616){if(_0x1dafa0(0x2d4)===_0x1dafa0(0x2d4)){if(!_0x55fa47)continue;if(_0x434d36['ActionEffect'])_0x115a40[_0x1dafa0(0x906)](_0x1dafa0(0x908),_0x59496a,_0x55fa47);}else this[_0x1dafa0(0x186)]()?_0x3b0355[_0x1dafa0(0x485)][_0x1dafa0(0x3d3)][_0x1dafa0(0xaf0)](this):(this[_0x1dafa0(0x8a8)]=!this[_0x1dafa0(0xa22)]['isHidden'](),!this['_appeared']&&(this['opacity']=0x0));}}else _0x409c06+='\x0a',_0x3bc5f2+=_0x4a9b3c['parameters'][0x0];}_0x434ed7&&_0x59496a[_0x1dafa0(0x764)]()&&(_0x1dafa0(0x888)===_0x1dafa0(0x888)?_0x115a40['push'](_0x1dafa0(0xa59),_0x59496a):this[_0x1dafa0(0x28c)](_0x5e2013,_0x2256e1,_0x1d6ec5));if(_0x434d36[_0x1dafa0(0x493)])_0x115a40['push'](_0x1dafa0(0x5d1),_0x59496a,_0x734616,![]);_0x47e27d['setWaitMode'](_0x1dafa0(0x672));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x189),_0x47301c=>{const _0x42e278=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x42e278(0x6a8)](_0x47301c,_0x47301c);const _0x158f27=$gameTemp[_0x42e278(0x202)](),_0x3b3247=BattleManager[_0x42e278(0x82e)],_0x425d05=BattleManager[_0x42e278(0x18b)],_0xf06b38=BattleManager[_0x42e278(0x8e6)]?BattleManager['_allTargets'][_0x42e278(0x5cf)](0x0):[],_0xe0f6e1=BattleManager[_0x42e278(0x912)],_0x4b85de=_0x47301c[_0x42e278(0x2ac)]??![];if(!_0x158f27||!_0x3b3247||!_0x425d05)return;if(!_0x3b3247['item']())return;let _0x4674c8=_0x4b85de?_0xe0f6e1['getDualWieldTimes'](_0x425d05):0x1;for(let _0x18425e=0x0;_0x18425e<_0x4674c8;_0x18425e++){for(const _0x452427 of _0xf06b38){if(!_0x452427)continue;_0x4b85de&&_0x425d05[_0x42e278(0x764)]()&&_0xe0f6e1[_0x42e278(0x906)](_0x42e278(0x7da),_0x425d05,_0x18425e);if(_0x47301c['PerformAction'])_0xe0f6e1[_0x42e278(0x906)]('performAction',_0x425d05,_0x3b3247);if(_0x47301c[_0x42e278(0x8ee)]>0x0)_0xe0f6e1['push'](_0x42e278(0xa91),_0x47301c[_0x42e278(0x8ee)]);if(_0x47301c[_0x42e278(0x944)])_0xe0f6e1[_0x42e278(0x906)]('showAnimation',_0x425d05,[_0x452427],_0x3b3247[_0x42e278(0x49d)]()[_0x42e278(0x44e)]);if(_0x47301c[_0x42e278(0x155)]>0x0)_0xe0f6e1['push']('waitCount',_0x47301c[_0x42e278(0x155)]);if(_0x47301c['ActionEffect'])_0xe0f6e1['push']('actionEffect',_0x425d05,_0x452427);}}_0x4b85de&&_0x425d05[_0x42e278(0x764)]()&&_0xe0f6e1[_0x42e278(0x906)](_0x42e278(0xa59),_0x425d05);if(_0x47301c[_0x42e278(0x493)])_0xe0f6e1['push']('applyImmortal',_0x425d05,_0xf06b38,![]);_0x158f27[_0x42e278(0x49b)](_0x42e278(0x672));}),PluginManager['registerCommand'](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Set_FinishAction',_0x345233=>{const _0x340e1d=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x340e1d(0x6a8)](_0x345233,_0x345233);const _0x30b020=$gameTemp['getLastPluginCommandInterpreter'](),_0x485ed0=BattleManager[_0x340e1d(0x82e)],_0x2daeae=BattleManager[_0x340e1d(0x18b)],_0x1d524c=BattleManager[_0x340e1d(0x8e6)]?BattleManager[_0x340e1d(0x8e6)][_0x340e1d(0x5cf)](0x0):[],_0x1dfa71=BattleManager[_0x340e1d(0x912)];if(!_0x30b020||!_0x485ed0||!_0x2daeae)return;if(!_0x485ed0[_0x340e1d(0x49d)]())return;if(_0x345233[_0x340e1d(0x493)])_0x1dfa71[_0x340e1d(0x906)](_0x340e1d(0x5d1),_0x2daeae,_0x1d524c,![]);if(_0x345233[_0x340e1d(0x761)])_0x1dfa71[_0x340e1d(0x906)](_0x340e1d(0xb6b));if(_0x345233[_0x340e1d(0x9cb)])_0x1dfa71[_0x340e1d(0x906)](_0x340e1d(0x9ae));if(_0x345233['ClearBattleLog'])_0x1dfa71['push']('clear');if(_0x345233[_0x340e1d(0x9de)])_0x1dfa71[_0x340e1d(0x906)]('performActionEnd',_0x2daeae);if(_0x345233[_0x340e1d(0x316)])_0x1dfa71[_0x340e1d(0x906)]('waitForMovement');_0x30b020[_0x340e1d(0x49b)](_0x340e1d(0x672));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_ChangeAngle',_0x1d06ca=>{const _0x588ebf=_0x4a3d8d;if(!SceneManager[_0x588ebf(0x930)]())return;if(!Imported[_0x588ebf(0x613)])return;VisuMZ[_0x588ebf(0x6a8)](_0x1d06ca,_0x1d06ca);const _0x120520=$gameTemp[_0x588ebf(0x202)](),_0x10e912=_0x1d06ca[_0x588ebf(0x2b1)];if(!_0x120520)return;$gameScreen['setBattleAngle'](_0x1d06ca[_0x588ebf(0x8d2)],_0x1d06ca[_0x588ebf(0x936)],_0x1d06ca[_0x588ebf(0x443)]);if(_0x10e912)_0x120520[_0x588ebf(0x49b)](_0x588ebf(0x691));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x44b),_0x200799=>{const _0x211527=_0x4a3d8d;if(!SceneManager[_0x211527(0x930)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ['ConvertParams'](_0x200799,_0x200799);const _0x1264ff=$gameTemp[_0x211527(0x202)](),_0x578616=_0x200799[_0x211527(0x2b1)];if(!_0x1264ff)return;$gameScreen[_0x211527(0xc52)](0x0,_0x200799[_0x211527(0x936)],_0x200799[_0x211527(0x443)]);if(_0x578616)_0x1264ff['setWaitMode'](_0x211527(0x691));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x73f),_0xd5428f=>{const _0x4cb625=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x2f2fe6=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x2f2fe6)return;_0x2f2fe6[_0x4cb625(0x49b)]('battleAngle');}),PluginManager['registerCommand'](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x8ff),_0x534588=>{const _0xf2ffae=_0x4a3d8d;if(!SceneManager[_0xf2ffae(0x930)]())return;VisuMZ[_0xf2ffae(0x6a8)](_0x534588,_0x534588);const _0x16844b=$gameTemp['getLastPluginCommandInterpreter'](),_0x1dffd=BattleManager[_0xf2ffae(0x82e)],_0x5df58c=BattleManager[_0xf2ffae(0x18b)],_0x41f5be=VisuMZ['CreateActionSequenceTargets'](_0x534588[_0xf2ffae(0x2ff)]),_0x341746=_0x534588['Mirror'],_0x159c26=BattleManager['_logWindow'];if(!_0x16844b||!_0x1dffd||!_0x5df58c)return;if(!_0x1dffd[_0xf2ffae(0x49d)]())return;let _0xd726bd=_0x1dffd[_0xf2ffae(0x49d)]()['animationId'];if(_0xd726bd<0x0)_0xd726bd=_0x5df58c[_0xf2ffae(0x965)]();$gameTemp[_0xf2ffae(0x5af)](_0x41f5be,_0xd726bd,_0x341746),_0x534588[_0xf2ffae(0x5f3)]&&_0x16844b[_0xf2ffae(0x49b)](_0xf2ffae(0xa11));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Animation_AttackAnimation',_0x523eec=>{const _0x1f3a23=_0x4a3d8d;if(!SceneManager[_0x1f3a23(0x930)]())return;VisuMZ[_0x1f3a23(0x6a8)](_0x523eec,_0x523eec);const _0x37c2ff=$gameTemp[_0x1f3a23(0x202)](),_0x5db6de=BattleManager[_0x1f3a23(0x18b)],_0x169371=VisuMZ[_0x1f3a23(0x1a3)](_0x523eec[_0x1f3a23(0x2ff)]),_0xef56e6=_0x523eec['Mirror'],_0x3095b5=BattleManager[_0x1f3a23(0x912)];if(!_0x37c2ff||!_0x5db6de)return;const _0xc3365c=_0x5db6de[_0x1f3a23(0x965)]();$gameTemp[_0x1f3a23(0x5af)](_0x169371,_0xc3365c,_0xef56e6),_0x523eec[_0x1f3a23(0x5f3)]&&_0x37c2ff['setWaitMode']('battleAnimation');}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x1d7),_0x1ad905=>{const _0xa213c2=_0x4a3d8d;if(!SceneManager[_0xa213c2(0x930)]())return;VisuMZ['ConvertParams'](_0x1ad905,_0x1ad905);const _0x52cae7=_0x5f46eb[_0xa213c2(0xa6d)](_0x1ad905[_0xa213c2(0xa56)]);if(_0x52cae7<=0x0)return;const _0x1be2db=$gameTemp[_0xa213c2(0x202)](),_0x5f46eb=BattleManager[_0xa213c2(0x18b)],_0x5750d1=VisuMZ[_0xa213c2(0x1a3)](_0x1ad905[_0xa213c2(0x2ff)]),_0xa9657d=_0x1ad905['Mirror'],_0x3be8d4=BattleManager[_0xa213c2(0x912)];if(!_0x1be2db||!_0x5f46eb)return;$gameTemp[_0xa213c2(0x5af)](_0x5750d1,_0x52cae7,_0xa9657d);if(_0x1ad905[_0xa213c2(0x5f3)]){if('HZwxs'!==_0xa213c2(0x296))_0x1be2db['setWaitMode']('battleAnimation');else{const _0x4e2efc=new _0x5b954e();this[_0xa213c2(0xacb)][_0xa213c2(0x960)](_0x4e2efc),_0x4e2efc['linkSprite'](_0x4a955e);}}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x90a),_0x181f00=>{const _0x4b86a7=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4b86a7(0x6a8)](_0x181f00,_0x181f00);const _0x50a98a=$gameTemp[_0x4b86a7(0x202)](),_0xf66926=BattleManager[_0x4b86a7(0x82e)],_0x1d258b=_0x181f00[_0x4b86a7(0x605)],_0x2a67f3=VisuMZ[_0x4b86a7(0x1a3)](_0x181f00['Targets']);if(!_0x50a98a||!_0xf66926)return;if(!_0xf66926[_0x4b86a7(0x49d)]())return;for(const _0x30431e of _0x2a67f3){if(!_0x30431e)continue;_0x30431e[_0x4b86a7(0x258)](_0xf66926,_0x1d258b);}if(_0x181f00['WaitForAnimation'])_0x50a98a[_0x4b86a7(0x49b)]('battleAnimation');}),PluginManager['registerCommand'](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x5aa),_0x24f3f4=>{const _0x2a9484=_0x4a3d8d;VisuMZ['ConvertParams'](_0x24f3f4,_0x24f3f4);const _0x20eaf5=$gameTemp['getLastPluginCommandInterpreter'](),_0x3852a8=VisuMZ[_0x2a9484(0x1a3)](_0x24f3f4[_0x2a9484(0x2ff)]),_0x2c29d5=_0x24f3f4['Filename'];if(!_0x2c29d5)return;for(const _0x2e328b of _0x3852a8){if(_0x2a9484(0x5d6)!=='JDcYM'){if(!_0x2e328b)continue;if(!_0x2e328b[_0x2a9484(0x764)]())continue;_0x2e328b['setBattlePortrait'](_0x2c29d5);}else _0x5f6576[_0x2a9484(0x721)]();}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],_0x4a3d8d(0x5ab),_0x2f7c34=>{const _0x404cfd=_0x4a3d8d;if(!SceneManager[_0x404cfd(0x3ff)])return;if(!SceneManager[_0x404cfd(0x3ff)][_0x404cfd(0x94c)])return;if(!Imported['VisuMZ_0_CoreEngine'])return;VisuMZ[_0x404cfd(0x6a8)](_0x2f7c34,_0x2f7c34);const _0x454164=$gameTemp[_0x404cfd(0x202)](),_0x5dd528=Math[_0x404cfd(0x89f)](_0x2f7c34[_0x404cfd(0x1b8)]),_0x3ef26c=Math[_0x404cfd(0x89f)](_0x2f7c34[_0x404cfd(0xb4f)]);$gameTemp['requestPointAnimation'](_0x5dd528,_0x3ef26c,_0x2f7c34['AnimationID'],_0x2f7c34['Mirror'],_0x2f7c34['Mute']),_0x2f7c34[_0x404cfd(0x4ea)]&&_0x454164&&(SceneManager[_0x404cfd(0x3ff)][_0x404cfd(0x94c)]['updatePointAnimations'](),_0x454164[_0x404cfd(0x49b)](_0x404cfd(0xa11)));}),PluginManager['registerCommand'](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x787),_0x72c383=>{const _0x4a0715=_0x4a3d8d;if(!SceneManager[_0x4a0715(0x930)]())return;VisuMZ['ConvertParams'](_0x72c383,_0x72c383);const _0x5db9dc=$gameTemp[_0x4a0715(0x202)](),_0xe3477e=VisuMZ[_0x4a0715(0x1a3)](_0x72c383['Targets']),_0x4215c0=_0x72c383['AnimationID'],_0x4fbf2d=_0x72c383['Mirror'];if(!_0x5db9dc)return;$gameTemp[_0x4a0715(0x5af)](_0xe3477e,_0x4215c0,_0x4fbf2d);if(_0x72c383[_0x4a0715(0x5f3)])_0x5db9dc[_0x4a0715(0x49b)](_0x4a0715(0xa11));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],_0x4a3d8d(0xa41),_0x25d0ad=>{const _0x584bb5=_0x4a3d8d;if(!SceneManager[_0x584bb5(0x930)]())return;const _0x32279c=$gameTemp[_0x584bb5(0x202)]();if(!_0x32279c)return;_0x32279c[_0x584bb5(0x49b)](_0x584bb5(0xa11));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x4f5),_0x51035b=>{const _0x4caa51=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x51035b,_0x51035b);const _0x202505=BattleManager[_0x4caa51(0x912)],_0x41ef2a=_0x51035b['CopyCombatLog']&&Imported[_0x4caa51(0x7dd)];_0x202505[_0x4caa51(0x8f9)](_0x51035b[_0x4caa51(0x644)]),_0x41ef2a&&Imported['VisuMZ_4_CombatLog']&&('WwpTQ'!==_0x4caa51(0x55f)?$gameSystem[_0x4caa51(0x9ee)](_0x51035b[_0x4caa51(0x644)]||'',_0x51035b[_0x4caa51(0xbb4)]||0x0):(_0x32d670[_0x4caa51(0x3cb)]['x']=this[_0x4caa51(0xc3a)](),_0x4c0d3b['scale']['y']=this['mainSpriteScaleY']()));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0xb2c),_0x3a671e=>{const _0x4bfe00=_0x4a3d8d;if(!SceneManager[_0x4bfe00(0x930)]())return;const _0x46e633=BattleManager[_0x4bfe00(0x912)];_0x46e633[_0x4bfe00(0x1db)]();}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_BattleLog_DisplayAction',_0x352026=>{const _0x4f9239=_0x4a3d8d;if(!SceneManager[_0x4f9239(0x930)]())return;const _0x5c844c=$gameTemp['getLastPluginCommandInterpreter'](),_0x39a7d4=BattleManager[_0x4f9239(0x82e)],_0x414af7=BattleManager[_0x4f9239(0x18b)],_0x272b22=BattleManager['_logWindow'];if(!_0x5c844c||!_0x39a7d4||!_0x414af7)return;if(!_0x39a7d4[_0x4f9239(0x49d)]())return;_0x272b22['displayAction'](_0x414af7,_0x39a7d4['item']()),_0x5c844c[_0x4f9239(0x49b)](_0x4f9239(0x672));}),PluginManager['registerCommand'](pluginData['name'],_0x4a3d8d(0x373),_0x20009f=>{const _0xddf2a9=_0x4a3d8d;if(!SceneManager[_0xddf2a9(0x930)]())return;const _0x1821ac=BattleManager[_0xddf2a9(0x912)];_0x1821ac['popBaseLine']();}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x7a2),_0x3c1d64=>{const _0x430d03=_0x4a3d8d;if(!SceneManager[_0x430d03(0x930)]())return;const _0x51275f=BattleManager['_logWindow'];_0x51275f[_0x430d03(0xbfc)]();}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x7c2),_0x2e3994=>{const _0x31e6a6=_0x4a3d8d;if(!SceneManager[_0x31e6a6(0x930)]())return;const _0x55a1fa=BattleManager['_logWindow'];_0x55a1fa[_0x31e6a6(0xbe4)]();}),PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],_0x4a3d8d(0xace),_0x1497dd=>{const _0x302edf=_0x4a3d8d;if(!SceneManager[_0x302edf(0x930)]())return;VisuMZ[_0x302edf(0x6a8)](_0x1497dd,_0x1497dd),SceneManager[_0x302edf(0x3ff)][_0x302edf(0x434)](_0x1497dd[_0x302edf(0x603)]);}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x38f),_0x502a37=>{const _0x2d4df6=_0x4a3d8d;if(!SceneManager[_0x2d4df6(0x930)]())return;const _0x4317db=$gameTemp['getLastPluginCommandInterpreter']();_0x4317db[_0x2d4df6(0x49b)](_0x2d4df6(0x672));}),PluginManager['registerCommand'](pluginData['name'],_0x4a3d8d(0x496),_0x46ba93=>{const _0x102238=_0x4a3d8d;if(!SceneManager[_0x102238(0x930)]())return;const _0x391e37=$gameTemp[_0x102238(0x202)](),_0x4b8e4d=BattleManager[_0x102238(0x912)];_0x4b8e4d[_0x102238(0xb6b)](),_0x391e37[_0x102238(0x49b)]('battlelog');}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x62f),_0x3cb3bf=>{const _0xb2c44e=_0x4a3d8d;if(!SceneManager[_0xb2c44e(0x930)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ['ConvertParams'](_0x3cb3bf,_0x3cb3bf);const _0x27df5f=$gameScreen[_0xb2c44e(0x940)]();_0x27df5f[_0xb2c44e(0x45f)]=_0x3cb3bf[_0xb2c44e(0x678)];}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x8c6),_0x16116f=>{const _0x40c089=_0x4a3d8d;if(!SceneManager[_0x40c089(0x930)]())return;if(!Imported[_0x40c089(0x613)])return;VisuMZ[_0x40c089(0x6a8)](_0x16116f,_0x16116f);const _0x3a0c32=$gameTemp[_0x40c089(0x202)](),_0xd88bc7=_0x16116f[_0x40c089(0x3a7)];$gameScreen[_0x40c089(0x464)](_0x16116f[_0x40c089(0x95e)],_0x16116f[_0x40c089(0x97f)],_0x16116f[_0x40c089(0x936)],_0x16116f[_0x40c089(0x443)]);if(_0xd88bc7)_0x3a0c32[_0x40c089(0x49b)](_0x40c089(0x660));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x265),_0xb9ed35=>{const _0x51358b=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x51358b(0x613)])return;VisuMZ[_0x51358b(0x6a8)](_0xb9ed35,_0xb9ed35);const _0x52c5a7=$gameTemp['getLastPluginCommandInterpreter'](),_0x179a17=VisuMZ[_0x51358b(0x1a3)](_0xb9ed35[_0x51358b(0x2ff)]),_0x44c80d=_0xb9ed35[_0x51358b(0x3a7)];$gameScreen['setBattleCameraTargets'](_0x179a17,_0xb9ed35[_0x51358b(0x936)],_0xb9ed35['EasingType']);if(_0x44c80d)_0x52c5a7[_0x51358b(0x49b)](_0x51358b(0x660));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x8d9),_0x509ac9=>{const _0x5ccd1a=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5ccd1a(0x613)])return;VisuMZ[_0x5ccd1a(0x6a8)](_0x509ac9,_0x509ac9);const _0x134b20=$gameTemp[_0x5ccd1a(0x202)](),_0x142896=_0x509ac9[_0x5ccd1a(0x3a7)];$gameScreen[_0x5ccd1a(0x299)](_0x509ac9[_0x5ccd1a(0x76e)],_0x509ac9[_0x5ccd1a(0xa65)],_0x509ac9[_0x5ccd1a(0x936)],_0x509ac9[_0x5ccd1a(0x443)]);if(_0x142896)_0x134b20['setWaitMode']('battleCamera');}),PluginManager['registerCommand'](pluginData['name'],_0x4a3d8d(0x185),_0x3d9b18=>{const _0x39dd49=_0x4a3d8d;if(!SceneManager[_0x39dd49(0x930)]())return;if(!Imported[_0x39dd49(0x613)])return;VisuMZ[_0x39dd49(0x6a8)](_0x3d9b18,_0x3d9b18);const _0x247f0a=$gameTemp[_0x39dd49(0x202)](),_0x32d954=_0x3d9b18[_0x39dd49(0xacc)],_0x395fa9=_0x3d9b18['ResetOffset'],_0x715144=_0x3d9b18[_0x39dd49(0x3a7)];if(_0x32d954){const _0x52f32c=Math[_0x39dd49(0x89f)](Graphics['width']/0x2),_0x3daffe=Math[_0x39dd49(0x89f)](Graphics[_0x39dd49(0x2cc)]/0x2);$gameScreen[_0x39dd49(0x464)](_0x52f32c,_0x3daffe,_0x3d9b18[_0x39dd49(0x936)],_0x3d9b18[_0x39dd49(0x443)]);}_0x395fa9&&$gameScreen['setBattleCameraOffset'](0x0,0x0,_0x3d9b18[_0x39dd49(0x936)],_0x3d9b18[_0x39dd49(0x443)]);if(_0x715144)_0x247f0a[_0x39dd49(0x49b)](_0x39dd49(0x660));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Camera_WaitForCamera',_0x21736f=>{const _0x5a0d3a=_0x4a3d8d;if(!SceneManager[_0x5a0d3a(0x930)]())return;if(!Imported[_0x5a0d3a(0x613)])return;const _0x2fba92=$gameTemp[_0x5a0d3a(0x202)]();if(!_0x2fba92)return;_0x2fba92[_0x5a0d3a(0x49b)](_0x5a0d3a(0x660));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x87e),_0x3cddb1=>{const _0x3653d8=_0x4a3d8d;if(!SceneManager[_0x3653d8(0x930)]())return;if(!Imported[_0x3653d8(0x99d)])return;VisuMZ['ConvertParams'](_0x3cddb1,_0x3cddb1);const _0x171f77=VisuMZ[_0x3653d8(0x1a3)](_0x3cddb1[_0x3653d8(0x2ff)]),_0x535828=_0x3cddb1[_0x3653d8(0xb8f)]['toLowerCase']()[_0x3653d8(0x82d)]();for(const _0x3fa4d9 of _0x171f77){if(!_0x3fa4d9)continue;_0x3fa4d9[_0x3653d8(0x5ea)](_0x535828);}}),PluginManager['registerCommand'](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_DB_DragonbonesTimeScale',_0x35ce2b=>{const _0x415174=_0x4a3d8d;if(!SceneManager[_0x415174(0x930)]())return;if(!Imported['VisuMZ_2_DragonbonesUnion'])return;VisuMZ['ConvertParams'](_0x35ce2b,_0x35ce2b);const _0x3ce412=VisuMZ[_0x415174(0x1a3)](_0x35ce2b[_0x415174(0x2ff)]),_0x5b01bc=_0x35ce2b['TimeScale'];for(const _0x178f1b of _0x3ce412){if(!_0x178f1b)continue;_0x178f1b[_0x415174(0x9ce)]()[_0x415174(0x3ee)]=_0x5b01bc;}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Element_AddElements',_0x1d2660=>{const _0x23a0f5=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x23a0f5(0xad7)])return;VisuMZ[_0x23a0f5(0x6a8)](_0x1d2660,_0x1d2660);const _0x44c189=BattleManager[_0x23a0f5(0x82e)],_0x415019=_0x1d2660['Elements'];if(!_0x44c189)return;_0x44c189['_battleCoreAddedElements']=_0x415019;}),PluginManager['registerCommand'](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x716),_0x3a1365=>{const _0x40f521=_0x4a3d8d;if(!SceneManager[_0x40f521(0x930)]())return;if(!Imported[_0x40f521(0xad7)])return;const _0xb4d266=BattleManager[_0x40f521(0x82e)];if(!_0xb4d266)return;_0xb4d266['clearElementChanges']();}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0xa96),_0x4ba94b=>{const _0x148391=_0x4a3d8d;if(!SceneManager[_0x148391(0x930)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ[_0x148391(0x6a8)](_0x4ba94b,_0x4ba94b);const _0x2106f3=BattleManager['_action'],_0x255972=_0x4ba94b['Elements'];if(!_0x2106f3)return;_0x2106f3[_0x148391(0x900)]=_0x255972;}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Element_NullElements',_0x102139=>{const _0xb19c93=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xb19c93(0xad7)])return;const _0x52b325=BattleManager[_0xb19c93(0x82e)];if(!_0x52b325)return;_0x52b325['_battleCoreNoElement']=!![];}),PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],_0x4a3d8d(0xbc9),_0x3ce52a=>{const _0x948582=_0x4a3d8d;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x948582(0x930)]())return;VisuMZ[_0x948582(0x6a8)](_0x3ce52a,_0x3ce52a);const _0x444516=VisuMZ[_0x948582(0x1a3)](_0x3ce52a[_0x948582(0x2ff)]);for(const _0x5093b3 of _0x444516){if(_0x948582(0x7e7)!==_0x948582(0x4d7)){if(!_0x5093b3)continue;_0x5093b3[_0x948582(0x3af)]('noise'),_0x5093b3[_0x948582(0x3af)](_0x948582(0x697)),_0x5093b3[_0x948582(0x3af)]('tv'),_0x5093b3[_0x948582(0x1b5)]();}else{if(!_0x27eaaa[_0x948582(0x485)]['Settings'][_0x948582(0x1e5)]['ShowFailure'])return;_0x31a2db[_0x948582(0x485)][_0x948582(0x666)][_0x948582(0xaf0)](this,_0x59cfb8);}}$gamePlayer[_0x948582(0xbe4)]();}),PluginManager['registerCommand'](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Horror_GlitchCreate',_0x589a1e=>{const _0x2f9996=_0x4a3d8d;if(!Imported[_0x2f9996(0x87b)])return;if(!SceneManager[_0x2f9996(0x930)]())return;VisuMZ[_0x2f9996(0x6a8)](_0x589a1e,_0x589a1e);const _0x1c97b7=VisuMZ['CreateActionSequenceTargets'](_0x589a1e[_0x2f9996(0x2ff)]),_0xdb955c=_0x2f9996(0x697);_0x589a1e[_0x2f9996(0xb9b)]=Math['ceil'](_0x589a1e[_0x2f9996(0xc26)]/0x2),_0x589a1e[_0x2f9996(0x1cd)]=_0x589a1e['slices'],_0x589a1e['refreshRequest']=!![];for(const _0x245704 of _0x1c97b7){if('elIwD'===_0x2f9996(0x207)){if(!_0x245704)continue;_0x245704['setHorrorEffectSettings'](_0xdb955c,_0x589a1e);}else{const _0xb1f7a4=this[_0x2f9996(0x48a)][_0x2f9996(0x2dd)];if(!_0xb1f7a4)return;const _0x4eda21=_0xb1f7a4[_0x2f9996(0xb49)];let _0x4dd499=_0xb1f7a4[_0x2f9996(0x2cc)];if(this[_0x2f9996(0x349)][_0x2f9996(0x2b2)]()){if(this[_0x2f9996(0x547)])_0x4dd499=_0x3d34aa[_0x2f9996(0x559)](0x0,this['_frame'][_0x2f9996(0x2cc)]-0x4);}this[_0x2f9996(0x48a)][_0x2f9996(0x22b)](0x0,0x0,_0x4eda21,_0x4dd499),this[_0x2f9996(0x22b)](0x0,0x0,_0x4eda21,_0x4dd499);}}$gamePlayer['refresh']();}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Horror_GlitchRemove',_0x266555=>{const _0x405735=_0x4a3d8d;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x405735(0x930)]())return;VisuMZ[_0x405735(0x6a8)](_0x266555,_0x266555);const _0x5af1d3=VisuMZ[_0x405735(0x1a3)](_0x266555['Targets']);for(const _0x2bc291 of _0x5af1d3){if(!_0x2bc291)continue;_0x2bc291[_0x405735(0x3af)](_0x405735(0x697));}$gamePlayer[_0x405735(0xbe4)]();}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x69e),_0x5d5579=>{const _0x263180=_0x4a3d8d;if(!Imported[_0x263180(0x87b)])return;if(!SceneManager[_0x263180(0x930)]())return;VisuMZ[_0x263180(0x6a8)](_0x5d5579,_0x5d5579);const _0x22b231=VisuMZ[_0x263180(0x1a3)](_0x5d5579['Targets']),_0x417143='noise';for(const _0x525b1e of _0x22b231){if(!_0x525b1e)continue;_0x525b1e[_0x263180(0x50c)](_0x417143,_0x5d5579);}$gamePlayer['refresh']();}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x199),_0x3c836d=>{const _0x1c79bc=_0x4a3d8d;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x1c79bc(0x930)]())return;VisuMZ[_0x1c79bc(0x6a8)](_0x3c836d,_0x3c836d);const _0x540a81=VisuMZ['CreateActionSequenceTargets'](_0x3c836d[_0x1c79bc(0x2ff)]);for(const _0x4dbda7 of _0x540a81){if(_0x1c79bc(0x242)!==_0x1c79bc(0x242))_0xd39828[_0x1c79bc(0x485)][_0x1c79bc(0xb01)][_0x1c79bc(0xaf0)](this),this[_0x1c79bc(0x843)]();else{if(!_0x4dbda7)continue;_0x4dbda7['removeHorrorEffect']('noise');}}$gamePlayer[_0x1c79bc(0xbe4)]();}),PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],_0x4a3d8d(0x1ce),_0x2caaf0=>{const _0x279214=_0x4a3d8d;if(!Imported[_0x279214(0x87b)])return;if(!SceneManager[_0x279214(0x930)]())return;VisuMZ['ConvertParams'](_0x2caaf0,_0x2caaf0);const _0x5c08f0=VisuMZ[_0x279214(0x1a3)](_0x2caaf0[_0x279214(0x2ff)]),_0x18d121='tv';for(const _0x2f6e5c of _0x5c08f0){if(!_0x2f6e5c)continue;_0x2f6e5c[_0x279214(0x50c)](_0x18d121,_0x2caaf0);}$gamePlayer[_0x279214(0xbe4)]();}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Horror_TVRemove',_0x23df89=>{const _0xfcaa58=_0x4a3d8d;if(!Imported[_0xfcaa58(0x87b)])return;if(!SceneManager[_0xfcaa58(0x930)]())return;VisuMZ[_0xfcaa58(0x6a8)](_0x23df89,_0x23df89);const _0x56479e=VisuMZ[_0xfcaa58(0x1a3)](_0x23df89[_0xfcaa58(0x2ff)]);for(const _0x4367c3 of _0x56479e){if(!_0x4367c3)continue;_0x4367c3[_0xfcaa58(0x3af)]('tv');}$gamePlayer[_0xfcaa58(0xbe4)]();}),PluginManager['registerCommand'](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x3c2),_0x5c775c=>{const _0x33fdd2=_0x4a3d8d;if(!Imported[_0x33fdd2(0x543)])return;const _0x541e4c=SceneManager['_scene']['_spriteset'];if(!_0x541e4c)return;if(VisuMZ[_0x33fdd2(0x4be)][_0x33fdd2(0x553)]<=1.04){alert(_0x33fdd2(0x2a2)),SceneManager[_0x33fdd2(0x4c2)]();return;}VisuMZ['ConvertParams'](_0x5c775c,_0x5c775c);const _0x24a8f7=_0x5c775c[_0x33fdd2(0x8a2)];_0x541e4c[_0x33fdd2(0x538)](_0x24a8f7);}),PluginManager['registerCommand'](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Impact_ColorBreak',_0x23353a=>{const _0x432817=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x5aee79=SceneManager[_0x432817(0x3ff)]['_spriteset'];if(!_0x5aee79)return;VisuMZ[_0x432817(0x6a8)](_0x23353a,_0x23353a);const _0x314fd7=_0x23353a['Intensity']||0x1,_0x2f8a61=_0x23353a[_0x432817(0x936)]||0x1,_0x2e6fc0=_0x23353a['EasingType']||_0x432817(0x88e);_0x5aee79[_0x432817(0x3f9)](_0x314fd7,_0x2f8a61,_0x2e6fc0);}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Impact_Desaturate',_0x20c230=>{const _0x264727=_0x4a3d8d;if(!Imported[_0x264727(0x543)])return;const _0x2ee503=SceneManager[_0x264727(0x3ff)][_0x264727(0x94c)];if(!_0x2ee503)return;if(VisuMZ[_0x264727(0x4be)][_0x264727(0x553)]<=1.04){alert(_0x264727(0x2a2)),SceneManager['exit']();return;}VisuMZ[_0x264727(0x6a8)](_0x20c230,_0x20c230);const _0x5c821d=_0x20c230[_0x264727(0x8a2)];_0x2ee503['setupDesaturateImpactFilter'](_0x5c821d);}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Impact_MotionBlurScreen',_0x35bd44=>{const _0x54fdab=_0x4a3d8d;if(!SceneManager[_0x54fdab(0x930)]())return;if(!Imported[_0x54fdab(0x543)])return;const _0xeee62f=SceneManager[_0x54fdab(0x3ff)]['_spriteset'];if(!_0xeee62f)return;VisuMZ['ConvertParams'](_0x35bd44,_0x35bd44);const _0x4b1d37=Number(_0x35bd44['Angle'])||0x0,_0x13f111=Number(_0x35bd44['Rate']),_0x2155c2=_0x35bd44[_0x54fdab(0x936)]||0x1,_0x68af6d=_0x35bd44[_0x54fdab(0x443)]||_0x54fdab(0x88e);_0xeee62f[_0x54fdab(0x808)](_0x4b1d37,_0x13f111,_0x2155c2,_0x68af6d);}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x3c7),_0x4efca1=>{const _0x3bb2e4=_0x4a3d8d;if(!SceneManager[_0x3bb2e4(0x930)]())return;if(!Imported[_0x3bb2e4(0x543)])return;const _0x3c0e8e=SceneManager[_0x3bb2e4(0x3ff)]['_spriteset'];if(!_0x3c0e8e)return;VisuMZ[_0x3bb2e4(0x6a8)](_0x4efca1,_0x4efca1);const _0x4338d9=Number(_0x4efca1['Angle'])||0x0,_0x557b72=Number(_0x4efca1[_0x3bb2e4(0x4ee)]),_0x516330=_0x4efca1['Duration']||0x1,_0x383a38=_0x4efca1[_0x3bb2e4(0x443)]||_0x3bb2e4(0x88e),_0x5a3af9=VisuMZ[_0x3bb2e4(0x1a3)](_0x4efca1[_0x3bb2e4(0x2ff)]);for(const _0x4882dc of _0x5a3af9){if(!_0x4882dc)continue;if(!_0x4882dc[_0x3bb2e4(0x28e)]())continue;_0x4882dc[_0x3bb2e4(0x28e)]()[_0x3bb2e4(0x808)](_0x4338d9,_0x557b72,_0x516330,_0x383a38);}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],_0x4a3d8d(0x5ee),_0x57900b=>{const _0x1b19d4=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1b19d4(0x543)])return;VisuMZ[_0x1b19d4(0x6a8)](_0x57900b,_0x57900b);const _0x4161d8={'delay':_0x57900b[_0x1b19d4(0x319)],'duration':_0x57900b[_0x1b19d4(0xc20)],'hue':_0x57900b[_0x1b19d4(0x406)],'opacityStart':_0x57900b['opacityStart'],'tone':_0x57900b['tone'],'visible':!![]},_0x24cda6=VisuMZ[_0x1b19d4(0x1a3)](_0x57900b[_0x1b19d4(0x2ff)]);for(const _0x52a7cf of _0x24cda6){if(_0x1b19d4(0xb0f)!=='KQVrj'){if(!_0x52a7cf)continue;_0x52a7cf['setBattlerMotionTrailData'](_0x4161d8);}else{const _0x296066=this[_0x1b19d4(0x32c)]();this[_0x1b19d4(0x9d1)]=![],_0x296066&&this['_deathStateApplied']&&this[_0x1b19d4(0x4f8)](),this['_deathStateApplied']=![],this[_0x1b19d4(0xbe4)](),this[_0x1b19d4(0x2b2)]()&&_0x296066&&(this[_0x1b19d4(0x2c2)](),this['requestMotionRefresh']());}}}),PluginManager['registerCommand'](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0xa42),_0x4019e0=>{const _0x351b89=_0x4a3d8d;if(!SceneManager[_0x351b89(0x930)]())return;if(!Imported[_0x351b89(0x543)])return;VisuMZ['ConvertParams'](_0x4019e0,_0x4019e0);const _0x478d2a=VisuMZ[_0x351b89(0x1a3)](_0x4019e0[_0x351b89(0x2ff)]);for(const _0x55ae72 of _0x478d2a){if(!_0x55ae72)continue;_0x55ae72[_0x351b89(0x91e)]();}}),PluginManager['registerCommand'](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x6f8),_0x2a8846=>{const _0x2c0bd2=_0x4a3d8d;if(!Imported[_0x2c0bd2(0x543)])return;const _0x50abe7=SceneManager[_0x2c0bd2(0x3ff)][_0x2c0bd2(0x94c)];if(!_0x50abe7)return;if(VisuMZ[_0x2c0bd2(0x4be)][_0x2c0bd2(0x553)]<=1.04){if(_0x2c0bd2(0x2b9)===_0x2c0bd2(0x2b9)){alert(_0x2c0bd2(0x2a2)),SceneManager[_0x2c0bd2(0x4c2)]();return;}else _0x5ef7f7[_0x2c0bd2(0x8fa)]()?_0x287e25[_0x2c0bd2(0x3c4)][_0x2c0bd2(0x24f)][_0x2c0bd2(0xaf0)](this):_0x54075c[_0x2c0bd2(0x485)]['Scene_Battle_stop'][_0x2c0bd2(0xaf0)](this);}VisuMZ[_0x2c0bd2(0x6a8)](_0x2a8846,_0x2a8846);const _0x47e690=_0x2a8846[_0x2c0bd2(0x8a2)];_0x50abe7['setupNegativeImpactFilter'](_0x47e690);}),PluginManager['registerCommand'](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Impact_Oversaturate',_0x4a9e10=>{const _0x5c4abc=_0x4a3d8d;if(!Imported[_0x5c4abc(0x543)])return;const _0x4655b7=SceneManager[_0x5c4abc(0x3ff)]['_spriteset'];if(!_0x4655b7)return;if(VisuMZ[_0x5c4abc(0x4be)]['version']<=1.04){alert(_0x5c4abc(0x2a2)),SceneManager[_0x5c4abc(0x4c2)]();return;}VisuMZ[_0x5c4abc(0x6a8)](_0x4a9e10,_0x4a9e10);const _0x1b6be2=_0x4a9e10['Enable'];_0x4655b7['setupOversaturateImpactFilter'](_0x1b6be2);}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x7e8),_0x45c653=>{const _0x1f2c18=_0x4a3d8d;if(!Imported[_0x1f2c18(0x543)])return;const _0x405dd2=SceneManager['_scene'][_0x1f2c18(0x94c)];if(!_0x405dd2)return;VisuMZ[_0x1f2c18(0x6a8)](_0x45c653,_0x45c653);const _0x50d7e7=_0x45c653['X']||0x0,_0xe3d727=_0x45c653['Y']||0x0,_0x312e9e=_0x45c653[_0x1f2c18(0x55e)]||0x0,_0x3ab552=_0x45c653[_0x1f2c18(0x6ef)]||0x0,_0x33eadb=_0x45c653[_0x1f2c18(0x936)]||0x1;_0x405dd2[_0x1f2c18(0x159)](_0x50d7e7,_0xe3d727,_0x312e9e,_0x3ab552,_0x33eadb);}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0xae3),_0x174867=>{const _0xe6d2b7=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xe6d2b7(0x543)])return;const _0x457526=SceneManager[_0xe6d2b7(0x3ff)][_0xe6d2b7(0x94c)];if(!_0x457526)return;VisuMZ[_0xe6d2b7(0x6a8)](_0x174867,_0x174867);const _0x5bf223=VisuMZ[_0xe6d2b7(0x1a3)](_0x174867['Targets']),_0x202347=_0x174867[_0xe6d2b7(0x394)],_0x24d3d9=_0x174867[_0xe6d2b7(0x76e)]||0x0,_0x4bc29d=_0x174867[_0xe6d2b7(0xa65)]||0x0,_0x443a5f=_0x174867[_0xe6d2b7(0x55e)]||0x0,_0x3ff137=_0x174867['Wave']||0x0,_0x429676=_0x174867[_0xe6d2b7(0x936)]||0x1;for(const _0x5a951e of _0x5bf223){if(_0xe6d2b7(0x8f3)!==_0xe6d2b7(0x8f3))this['createDamageSprite']();else{if(!_0x5a951e)continue;if(!_0x5a951e[_0xe6d2b7(0x28e)]())continue;const _0x22a3b2=_0x5a951e[_0xe6d2b7(0x28e)]();let _0x7974a2=_0x22a3b2[_0xe6d2b7(0x232)],_0x21e67a=_0x22a3b2['_baseY'];_0x7974a2+=(Graphics[_0xe6d2b7(0xb49)]-Graphics[_0xe6d2b7(0x6c0)])/0x2,_0x21e67a+=(Graphics['height']-Graphics['boxHeight'])/0x2;if(_0x202347[_0xe6d2b7(0x591)](/front/i))_0x7974a2+=(_0x5a951e['isEnemy']()?0x1:-0x1)*_0x22a3b2[_0xe6d2b7(0x34f)]()/0x2;else _0x202347[_0xe6d2b7(0x591)](/back/i)&&(_0xe6d2b7(0x78e)!==_0xe6d2b7(0x78e)?!_0x5816c1[_0xe6d2b7(0x93b)]()&&(_0x2f0f78['forceAction'](_0x5895f5[0x2],_0xc5db06[0x3]),_0x43cb3c[_0xe6d2b7(0x5a5)](_0x3b895e)):_0x7974a2+=(_0x5a951e[_0xe6d2b7(0x87a)]()?-0x1:0x1)*_0x22a3b2[_0xe6d2b7(0x34f)]()/0x2);if(_0x202347[_0xe6d2b7(0x591)](/head/i))'XdOYX'!==_0xe6d2b7(0x458)?this[_0xe6d2b7(0x43b)]=_0x4d3aa2[_0xe6d2b7(0x2ce)](_0x289883[_0xe6d2b7(0x142)]):_0x21e67a-=_0x22a3b2[_0xe6d2b7(0x71a)]();else _0x202347[_0xe6d2b7(0x591)](/center/i)&&(_0x21e67a-=_0x22a3b2[_0xe6d2b7(0x71a)]()/0x2);_0x7974a2+=_0x24d3d9,_0x21e67a+=_0x4bc29d,_0x457526['setupShockwaveImpactFilter'](_0x7974a2,_0x21e67a,_0x443a5f,_0x3ff137,_0x429676);}}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x2cf),_0x1247aa=>{const _0x5b3c95=_0x4a3d8d;if(!SceneManager[_0x5b3c95(0x930)]())return;if(!Imported[_0x5b3c95(0x543)])return;const _0x3a1a92=SceneManager[_0x5b3c95(0x3ff)][_0x5b3c95(0x94c)];if(!_0x3a1a92)return;VisuMZ[_0x5b3c95(0x6a8)](_0x1247aa,_0x1247aa);const _0x30176c=VisuMZ[_0x5b3c95(0x1a3)](_0x1247aa[_0x5b3c95(0x2ff)]),_0x29a28b=_0x1247aa[_0x5b3c95(0x394)],_0x258641=_0x1247aa[_0x5b3c95(0x76e)]||0x0,_0x2a37ca=_0x1247aa[_0x5b3c95(0xa65)]||0x0,_0x140a70=_0x1247aa[_0x5b3c95(0x55e)]||0x0,_0x29b24d=_0x1247aa['Wave']||0x0,_0x204fbc=_0x1247aa[_0x5b3c95(0x936)]||0x1,_0x258b59=Math[_0x5b3c95(0x885)](..._0x30176c[_0x5b3c95(0xa4a)](_0x303b42=>_0x303b42['battler']()[_0x5b3c95(0x232)]-_0x303b42[_0x5b3c95(0x28e)]()[_0x5b3c95(0x34f)]()/0x2)),_0x54fd10=Math[_0x5b3c95(0x559)](..._0x30176c[_0x5b3c95(0xa4a)](_0x4d771c=>_0x4d771c[_0x5b3c95(0x28e)]()['_baseX']+_0x4d771c[_0x5b3c95(0x28e)]()[_0x5b3c95(0x34f)]()/0x2)),_0x11606b=Math['min'](..._0x30176c[_0x5b3c95(0xa4a)](_0x3a22f6=>_0x3a22f6['battler']()[_0x5b3c95(0x5d8)]-_0x3a22f6[_0x5b3c95(0x28e)]()[_0x5b3c95(0x71a)]())),_0x217904=Math[_0x5b3c95(0x559)](..._0x30176c[_0x5b3c95(0xa4a)](_0x1c9b51=>_0x1c9b51['battler']()[_0x5b3c95(0x5d8)])),_0x57a11a=_0x30176c['filter'](_0x28a605=>_0x28a605[_0x5b3c95(0x764)]())['length'],_0x4834ef=_0x30176c[_0x5b3c95(0x3d0)](_0x309357=>_0x309357[_0x5b3c95(0x87a)]())['length'];let _0x42f105=0x0,_0x1d947a=0x0;if(_0x29a28b['match'](/front/i))_0x42f105=_0x57a11a>=_0x4834ef?_0x258b59:_0x54fd10;else{if(_0x29a28b['match'](/middle/i))_0x42f105=(_0x258b59+_0x54fd10)/0x2,melee=-0x1;else _0x29a28b[_0x5b3c95(0x591)](/back/i)&&(_0x42f105=_0x57a11a>=_0x4834ef?_0x54fd10:_0x258b59);}if(_0x29a28b[_0x5b3c95(0x591)](/head/i)){if(_0x5b3c95(0x919)===_0x5b3c95(0xb63)){if(!_0x53231d[_0x5b3c95(0x930)]())return;if(!_0x388ba2['VisuMZ_3_ActSeqImpact'])return;const _0x14ff96=_0x554208[_0x5b3c95(0x3ff)][_0x5b3c95(0x94c)];if(!_0x14ff96)return;_0x2ef678['ConvertParams'](_0x1fd43b,_0x5d2fab);const _0x3e6d79=_0x4b1e18(_0xfc0d89[_0x5b3c95(0x8d2)])||0x0,_0x56e611=_0xd40a25(_0x58a212['Rate']),_0xfcfa39=_0x567db8[_0x5b3c95(0x936)]||0x1,_0x5d3294=_0x212a2d[_0x5b3c95(0x443)]||_0x5b3c95(0x88e);_0x14ff96['setupMotionBlurImpactFilter'](_0x3e6d79,_0x56e611,_0xfcfa39,_0x5d3294);}else _0x1d947a=_0x11606b;}else{if(_0x29a28b[_0x5b3c95(0x591)](/center/i))_0x1d947a=(_0x11606b+_0x217904)/0x2;else _0x29a28b[_0x5b3c95(0x591)](/base/i)&&(_0x1d947a=_0x217904);}_0x42f105+=(Graphics['width']-Graphics[_0x5b3c95(0x6c0)])/0x2,_0x1d947a+=(Graphics[_0x5b3c95(0x2cc)]-Graphics[_0x5b3c95(0x8de)])/0x2,_0x42f105+=_0x258641,_0x1d947a+=_0x2a37ca,_0x3a1a92[_0x5b3c95(0x159)](_0x42f105,_0x1d947a,_0x140a70,_0x29b24d,_0x204fbc);}),PluginManager['registerCommand'](pluginData['name'],_0x4a3d8d(0x54b),_0x2751da=>{const _0x3b1ee8=_0x4a3d8d;if(!Imported[_0x3b1ee8(0x543)])return;const _0x1b0fb9=SceneManager[_0x3b1ee8(0x3ff)]['_spriteset'];if(!_0x1b0fb9)return;if(VisuMZ['ActSeqImpact'][_0x3b1ee8(0x553)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x3b1ee8(0x4c2)]();return;}VisuMZ[_0x3b1ee8(0x6a8)](_0x2751da,_0x2751da);const _0x13c5c5=$gameTemp[_0x3b1ee8(0x202)](),_0x3c9587=Math[_0x3b1ee8(0x559)](0.01,_0x2751da[_0x3b1ee8(0x56e)]);$gameTemp[_0x3b1ee8(0x83e)](_0x3c9587,_0x13c5c5);}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x147),_0x3bae2e=>{const _0x528a03=_0x4a3d8d;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x41740a=SceneManager['_scene'][_0x528a03(0x94c)];if(!_0x41740a)return;if(VisuMZ[_0x528a03(0x4be)][_0x528a03(0x553)]<=1.04){alert(_0x528a03(0x2a2)),SceneManager[_0x528a03(0x4c2)]();return;}VisuMZ[_0x528a03(0x6a8)](_0x3bae2e,_0x3bae2e);const _0x14249a=$gameTemp[_0x528a03(0x202)](),_0x5c605c=_0x3bae2e['ms']||0x1;VisuMZ[_0x528a03(0x4be)][_0x528a03(0x1dd)](_0x5c605c,_0x14249a);}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x729),_0x5f48ff=>{const _0x57d881=_0x4a3d8d;if(!Imported[_0x57d881(0x543)])return;const _0x459be3=SceneManager['_scene']['_spriteset'];if(!_0x459be3)return;VisuMZ[_0x57d881(0x6a8)](_0x5f48ff,_0x5f48ff);const _0x464e62=_0x5f48ff['X']||0x0,_0x59c747=_0x5f48ff['Y']||0x0,_0x1122f4=_0x5f48ff[_0x57d881(0x184)]||0x0,_0x236292=_0x5f48ff[_0x57d881(0x191)]||0x0,_0x1fdebd=_0x5f48ff[_0x57d881(0x936)]||0x1,_0x34f815=_0x5f48ff[_0x57d881(0x443)]||_0x57d881(0x88e);_0x459be3[_0x57d881(0x746)](_0x1122f4,_0x464e62,_0x59c747,_0x236292,_0x1fdebd,_0x34f815);}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x4b3),_0xfd1cfe=>{const _0x26d130=_0x4a3d8d;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x5e3c51=SceneManager['_scene'][_0x26d130(0x94c)];if(!_0x5e3c51)return;VisuMZ[_0x26d130(0x6a8)](_0xfd1cfe,_0xfd1cfe);const _0x5e0031=VisuMZ[_0x26d130(0x1a3)](_0xfd1cfe[_0x26d130(0x2ff)]),_0xfd89a2=_0xfd1cfe[_0x26d130(0x394)],_0x1abf34=_0xfd1cfe['OffsetX']||0x0,_0x41c46b=_0xfd1cfe['OffsetY']||0x0,_0x3b1b63=_0xfd1cfe[_0x26d130(0x184)]||0x0,_0x43f1c3=_0xfd1cfe[_0x26d130(0x191)]||0x0,_0x156d6b=_0xfd1cfe[_0x26d130(0x936)]||0x1,_0x78bc30=_0xfd1cfe['EasingType']||'Linear',_0x18659c=Math[_0x26d130(0x885)](..._0x5e0031[_0x26d130(0xa4a)](_0x2e9fbc=>_0x2e9fbc[_0x26d130(0x28e)]()[_0x26d130(0x232)]-_0x2e9fbc[_0x26d130(0x28e)]()[_0x26d130(0x34f)]()/0x2)),_0x3a3155=Math[_0x26d130(0x559)](..._0x5e0031[_0x26d130(0xa4a)](_0x1e0499=>_0x1e0499[_0x26d130(0x28e)]()[_0x26d130(0x232)]+_0x1e0499[_0x26d130(0x28e)]()[_0x26d130(0x34f)]()/0x2)),_0x9009ee=Math[_0x26d130(0x885)](..._0x5e0031[_0x26d130(0xa4a)](_0x535536=>_0x535536['battler']()['_baseY']-_0x535536[_0x26d130(0x28e)]()[_0x26d130(0x71a)]())),_0x3d27d9=Math['max'](..._0x5e0031[_0x26d130(0xa4a)](_0x1ac18f=>_0x1ac18f['battler']()[_0x26d130(0x5d8)])),_0x1d1b44=_0x5e0031[_0x26d130(0x3d0)](_0x5cbe03=>_0x5cbe03[_0x26d130(0x764)]())['length'],_0x5b030d=_0x5e0031['filter'](_0x5ddf16=>_0x5ddf16[_0x26d130(0x87a)]())['length'];let _0x148b1c=0x0,_0x46fceb=0x0;if(_0xfd89a2[_0x26d130(0x591)](/front/i))_0x148b1c=_0x1d1b44>=_0x5b030d?_0x18659c:_0x3a3155;else{if(_0xfd89a2[_0x26d130(0x591)](/middle/i)){if(_0x26d130(0x58a)===_0x26d130(0x58a))_0x148b1c=(_0x18659c+_0x3a3155)/0x2,melee=-0x1;else{const _0x53cfdb='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20'[_0x26d130(0x8dd)](_0x262d29);_0x915c8a[_0x26d130(0x485)]['JS'][_0x3e3432]=new _0x589016(_0x53cfdb);}}else{if(_0xfd89a2['match'](/back/i)){if(_0x26d130(0x5f2)===_0x26d130(0x9b2)){if(!_0x5924b3)return![];return _0x570e08[_0x26d130(0xbae)]()===this[_0x26d130(0x997)]();}else _0x148b1c=_0x1d1b44>=_0x5b030d?_0x3a3155:_0x18659c;}}}if(_0xfd89a2[_0x26d130(0x591)](/head/i))_0x46fceb=_0x9009ee;else{if(_0xfd89a2[_0x26d130(0x591)](/center/i)){if(_0x26d130(0xc36)!==_0x26d130(0xc36)){if(_0x5c839f[_0x26d130(0x764)]()&&!_0x52b706[_0x26d130(0x957)]())return;const _0x565380=_0x17c9de[_0x26d130(0x28e)]();if(_0x565380&&_0x6fbe15['isActor']())this['_battlerContainer'][_0x26d130(0x960)](_0x565380);}else _0x46fceb=(_0x9009ee+_0x3d27d9)/0x2;}else _0xfd89a2[_0x26d130(0x591)](/base/i)&&(_0x46fceb=_0x3d27d9);}_0x148b1c+=(Graphics['width']-Graphics[_0x26d130(0x6c0)])/0x2,_0x46fceb+=(Graphics['height']-Graphics[_0x26d130(0x8de)])/0x2,_0x148b1c+=_0x1abf34,_0x46fceb+=_0x41c46b,_0x5e3c51['setupZoomBlurImpactFilter'](_0x3b1b63,_0x148b1c,_0x46fceb,_0x43f1c3,_0x156d6b,_0x78bc30);}),PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],_0x4a3d8d(0x7ed),_0x19218b=>{const _0x19007f=_0x4a3d8d;if(!Imported[_0x19007f(0x543)])return;const _0x549cd2=SceneManager[_0x19007f(0x3ff)][_0x19007f(0x94c)];if(!_0x549cd2)return;if(VisuMZ[_0x19007f(0x4be)]['version']<=1.05){if('OZCCs'===_0x19007f(0x75d)){alert(_0x19007f(0x2a2)),SceneManager[_0x19007f(0x4c2)]();return;}else _0x3ba7bc['prototype'][_0x19007f(0x36d)]['call'](this,_0x348db0);}VisuMZ[_0x19007f(0x6a8)](_0x19218b,_0x19218b);const _0x596d19=VisuMZ[_0x19007f(0x1a3)](_0x19218b[_0x19007f(0x2ff)]),_0x490447={'filename':_0x19218b[_0x19007f(0x784)],'horzCells':_0x19218b[_0x19007f(0x7db)]||0x1,'vertCells':_0x19218b[_0x19007f(0x78f)]||0x1,'frameDelay':_0x19218b[_0x19007f(0x713)]||0x1,'smooth':_0x19218b[_0x19007f(0x8a5)]||![],'anchorX':_0x19218b[_0x19007f(0x9bf)]||0x0,'anchorY':_0x19218b[_0x19007f(0x261)]||0x0,'offsetX':_0x19218b['offsetX']||0x0,'offsetY':_0x19218b[_0x19007f(0x445)]||0x0};for(const _0x5f0ca2 of _0x596d19){if(!_0x5f0ca2)continue;if(!_0x5f0ca2[_0x19007f(0x28e)]())continue;_0x5f0ca2['battler']()[_0x19007f(0xa09)](_0x490447);}const _0x5b2564=$gameTemp[_0x19007f(0x202)]();_0x5b2564&&_0x5b2564[_0x19007f(0x49b)]('battleInjectPrep');}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Inject_AnimationEnd',_0x19edc0=>{const _0x3e26b9=_0x4a3d8d;if(!Imported[_0x3e26b9(0x543)])return;const _0x93d108=SceneManager[_0x3e26b9(0x3ff)]['_spriteset'];if(!_0x93d108)return;if(VisuMZ[_0x3e26b9(0x4be)]['version']<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ['ConvertParams'](_0x19edc0,_0x19edc0);const _0x131540=VisuMZ['CreateActionSequenceTargets'](_0x19edc0[_0x3e26b9(0x2ff)]);for(const _0x1c3dd6 of _0x131540){if(!_0x1c3dd6)continue;if(!_0x1c3dd6[_0x3e26b9(0x28e)]())continue;_0x1c3dd6[_0x3e26b9(0x28e)]()['stopInjectAnimation']();}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],'ActSeq_Inject_AnimationPauseResume',_0x339675=>{const _0x388c6c=_0x4a3d8d;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x45fa7d=SceneManager[_0x388c6c(0x3ff)][_0x388c6c(0x94c)];if(!_0x45fa7d)return;if(VisuMZ[_0x388c6c(0x4be)][_0x388c6c(0x553)]<=1.05){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ[_0x388c6c(0x6a8)](_0x339675,_0x339675);const _0x29dc1a=VisuMZ[_0x388c6c(0x1a3)](_0x339675[_0x388c6c(0x2ff)]),_0x576471=_0x339675['pause'];for(const _0x57757e of _0x29dc1a){if(_0x388c6c(0x778)===_0x388c6c(0x778)){if(!_0x57757e)continue;if(!_0x57757e[_0x388c6c(0x28e)]())continue;_0x57757e[_0x388c6c(0x28e)]()[_0x388c6c(0x696)](_0x576471);}else _0x2f8b61[_0x388c6c(0x485)][_0x388c6c(0x693)]['call'](this),this[_0x388c6c(0x676)]();}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x976),_0xbbf632=>{const _0xe81737=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;const _0x6623a=$gameTemp[_0xe81737(0x202)]();if(!_0x6623a)return;_0x6623a['setWaitMode'](_0xe81737(0x37f));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Mechanics_ActionEffect',_0x308e85=>{const _0x15fb42=_0x4a3d8d;if(!SceneManager[_0x15fb42(0x930)]())return;VisuMZ[_0x15fb42(0x6a8)](_0x308e85,_0x308e85);const _0x1fbe9d=$gameTemp[_0x15fb42(0x202)](),_0x37d9a0=BattleManager['_action'],_0x40c64a=BattleManager[_0x15fb42(0x18b)],_0xe6f36f=BattleManager[_0x15fb42(0x912)];if(!_0x1fbe9d||!_0x37d9a0||!_0x40c64a)return;if(!_0x37d9a0[_0x15fb42(0x49d)]())return;const _0x32efbc=VisuMZ[_0x15fb42(0x1a3)](_0x308e85[_0x15fb42(0x2ff)]);for(const _0x47bcee of _0x32efbc){if(_0x15fb42(0x926)!==_0x15fb42(0x926)){if(!this[_0x15fb42(0x5db)]())return;const _0x76601c=this['commandStyle'](),_0x4623d8=_0x30b038[_0x15fb42(0x485)]['Settings']['PartyCmd']['CmdIconOptions'],_0x3ffa6f=_0x76601c===_0x15fb42(0x81f)?_0x3e0326[_0x15fb42(0x4c9)]:'\x5cI[%1]%2'[_0x15fb42(0x8dd)](_0x4623d8,_0x2afe92[_0x15fb42(0x4c9)]),_0x21e5cb=this[_0x15fb42(0xa57)]();this[_0x15fb42(0x198)](_0x3ffa6f,_0x15fb42(0x4c9),_0x21e5cb);}else{if(!_0x47bcee)continue;_0xe6f36f[_0x15fb42(0x906)](_0x15fb42(0x908),_0x40c64a,_0x47bcee);}}_0x1fbe9d[_0x15fb42(0x49b)]('battlelog');}),PluginManager['registerCommand'](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0xb57),_0x51e2b6=>{const _0x1e710a=_0x4a3d8d;if(!SceneManager[_0x1e710a(0x930)]())return;VisuMZ['ConvertParams'](_0x51e2b6,_0x51e2b6);const _0x11c120=[_0x1e710a(0x26a),_0x1e710a(0x8ab),_0x1e710a(0xbed),_0x1e710a(0x24d),_0x1e710a(0x3b8),_0x1e710a(0x2b8),_0x1e710a(0x943),'LUK'],_0x79de92=_0x51e2b6[_0x1e710a(0x391)],_0x17537a=_0x51e2b6[_0x1e710a(0xb92)],_0x509313=_0x51e2b6[_0x1e710a(0x384)],_0x1061e8=VisuMZ['CreateActionSequenceTargets'](_0x51e2b6[_0x1e710a(0x2ff)]);for(const _0x5a108f of _0x1061e8){if(_0x1e710a(0xb11)!==_0x1e710a(0x94d)){if(!_0x5a108f)continue;for(const _0x5b972d of _0x79de92){const _0x582c3a=_0x11c120[_0x1e710a(0x2b7)](_0x5b972d[_0x1e710a(0x302)]()[_0x1e710a(0x82d)]());if(_0x582c3a>=0x0&&_0x582c3a<=0x7){if('VMgRQ'!==_0x1e710a(0x6f9))_0x5a108f['addBuff'](_0x582c3a,_0x509313);else return _0x5d5aed=_0x3b153b[_0x1e710a(0x89f)](_0x18bdbe*1.2),_0x38e67d[_0x1e710a(0x485)][_0x1e710a(0xc33)][_0x1e710a(0xaf0)](this,_0x3d964b,_0x5b1a19);}}for(const _0x186fb4 of _0x17537a){const _0x1dc23d=_0x11c120['indexOf'](_0x186fb4[_0x1e710a(0x302)]()[_0x1e710a(0x82d)]());_0x1dc23d>=0x0&&_0x1dc23d<=0x7&&_0x5a108f['addDebuff'](_0x1dc23d,_0x509313);}}else this[_0x1e710a(0x447)]=_0x4919ee[_0x1e710a(0x485)][_0x1e710a(0xb75)][_0x1e710a(0x5de)][_0x1e710a(0xb2e)][_0x1e710a(0xaf0)](this);}}),PluginManager['registerCommand'](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x450),_0xaa5519=>{const _0x4c2291=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4c2291(0x6a8)](_0xaa5519,_0xaa5519);const _0x417959=_0xaa5519['States'],_0x33477c=VisuMZ[_0x4c2291(0x1a3)](_0xaa5519[_0x4c2291(0x2ff)]);for(const _0x3bb2d8 of _0x33477c){if('LgDar'==='LgDar'){if(!_0x3bb2d8)continue;for(const _0x5396cd of _0x417959){_0x3bb2d8[_0x4c2291(0xa6b)](_0x5396cd);}}else _0x2f7ef0[_0x4c2291(0x485)][_0x4c2291(0x404)][_0x4c2291(0xaf0)](this),this[_0x4c2291(0x413)][_0x4c2291(0x482)]<=0x0&&(this['_speed']=_0x49984a[_0x4c2291(0x876)]);}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0xb65),_0xa6422=>{const _0x114ca8=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x114ca8(0x6a8)](_0xa6422,_0xa6422);const _0x1b23a7=BattleManager[_0x114ca8(0x82e)],_0x58a61d={'arPenRate':_0xa6422['ArPenRate'],'arPenFlat':_0xa6422['ArPenFlat'],'arRedRate':_0xa6422[_0x114ca8(0x736)],'arRedFlat':_0xa6422[_0x114ca8(0x7b0)]};_0x1b23a7[_0x114ca8(0xba5)]=_0x58a61d;}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Mechanics_AnalyzeWeakness',_0x447b35=>{const _0xef4082=_0x4a3d8d;if(!SceneManager[_0xef4082(0x930)]())return;if(!Imported[_0xef4082(0x4f9)])return;VisuMZ['ConvertParams'](_0x447b35,_0x447b35);const _0x3f8564=VisuMZ[_0xef4082(0x1a3)](_0x447b35[_0xef4082(0x2ff)]),_0x537229=_0x447b35['Reveal']||0x1;for(const _0x2f642e of _0x3f8564){if(!_0x2f642e)continue;if(!_0x2f642e[_0xef4082(0x87a)]())continue;_0x2f642e[_0xef4082(0x995)](_0x537229);}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],_0x4a3d8d(0x50f),_0x5b1035=>{const _0x238608=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x238608(0x7f2)])return;if(!BattleManager[_0x238608(0x4f2)]())return;VisuMZ[_0x238608(0x6a8)](_0x5b1035,_0x5b1035);const _0x23647a=VisuMZ[_0x238608(0x1a3)](_0x5b1035[_0x238608(0x2ff)]),_0x3fea52=_0x5b1035['ChargeRate'],_0xe2d2c=_0x5b1035['ChargeRate'],_0xa16b5e=_0x5b1035[_0x238608(0x8b9)];for(const _0x28ef8a of _0x23647a){if('DnphW'!==_0x238608(0xab5)){if(!_0x28ef8a)continue;if(_0x28ef8a[_0x238608(0x815)]())_0x28ef8a['changeAtbChargeTime'](_0x3fea52);else{if(_0x28ef8a[_0x238608(0x36f)]()){if(_0x238608(0x562)!==_0x238608(0x562))this['startMotion'](_0x238608(0x75f));else{_0x28ef8a[_0x238608(0x2fc)](_0xe2d2c);if(_0xa16b5e)_0x28ef8a[_0x238608(0x807)]();}}}}else{if(!_0x3e544d)return;if(!this[_0x238608(0x220)])return;if(_0x2aa016['isActor']()){}else{if(_0x4094c7[_0x238608(0x87a)]()){if(this[_0x238608(0x6ee)]===_0x37ea6b&&!_0x2e98ed['hasSvBattler']())return;}}this[_0x238608(0x220)][_0x238608(0x4da)](_0x34c9f7,'hp');}}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],_0x4a3d8d(0x437),_0x24b8a7=>{const _0x58c444=_0x4a3d8d;if(!SceneManager[_0x58c444(0x930)]())return;if(!Imported[_0x58c444(0x6da)])return;VisuMZ['ConvertParams'](_0x24b8a7,_0x24b8a7);const _0x5e4308=VisuMZ[_0x58c444(0x1a3)](_0x24b8a7[_0x58c444(0x2ff)]),_0x510759=_0x24b8a7[_0x58c444(0x5f0)];for(const _0x230741 of _0x5e4308){if(_0x58c444(0x521)!=='xWSpq'){if(!_0x230741)continue;_0x230741[_0x58c444(0x8e8)](_0x510759);}else{_0x22a65e[_0x58c444(0x97a)]();let _0xcce695=_0x245ff6[_0x58c444(0x485)][_0x58c444(0xb75)][_0x58c444(0xa01)]['ReflectAnimation'];_0xcce695>0x0&&(_0x2b21b0[_0x58c444(0x714)]?_0x316223['requestFauxAnimation']([this],_0xcce695):_0x445993[_0x58c444(0x5af)]([this],_0xcce695));}}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x969),_0x2e1945=>{const _0x127c89=_0x4a3d8d;if(!SceneManager[_0x127c89(0x930)]())return;if(!Imported['VisuMZ_3_BoostAction'])return;if(!BattleManager[_0x127c89(0x18b)])return;VisuMZ['ConvertParams'](_0x2e1945,_0x2e1945);const _0x459e87=_0x2e1945['VariableID'];$gameVariables[_0x127c89(0x359)](_0x459e87,BattleManager[_0x127c89(0x18b)][_0x127c89(0x9c7)]());}),PluginManager['registerCommand'](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0xbe8),_0x15a307=>{const _0x90e51f=_0x4a3d8d;if(!SceneManager[_0x90e51f(0x930)]())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ[_0x90e51f(0x6a8)](_0x15a307,_0x15a307);const _0x57d3ae=VisuMZ['CreateActionSequenceTargets'](_0x15a307[_0x90e51f(0x2ff)]),_0x3a0ba1=_0x15a307[_0x90e51f(0x525)];for(const _0x59463c of _0x57d3ae){if(_0x90e51f(0x448)===_0x90e51f(0x448)){if(!_0x59463c)continue;if(_0x59463c[_0x90e51f(0x686)]())continue;if(!_0x59463c['isAffectedByBreakShield']())continue;_0x59463c[_0x90e51f(0x65d)](_0x3a0ba1);}else{if(!_0x4ca7a2[_0x90e51f(0x485)][_0x90e51f(0xb75)][_0x90e51f(0x1e5)][_0x90e51f(0x884)])return;_0x27baa4[_0x90e51f(0x485)][_0x90e51f(0x9b1)][_0x90e51f(0xaf0)](this,_0x176de2);}}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_BreakShieldReset',_0x4316be=>{const _0x39f491=_0x4a3d8d;if(!SceneManager[_0x39f491(0x930)]())return;if(!Imported[_0x39f491(0x6a7)])return;VisuMZ[_0x39f491(0x6a8)](_0x4316be,_0x4316be);const _0x515c46=VisuMZ['CreateActionSequenceTargets'](_0x4316be['Targets']);for(const _0x5c9091 of _0x515c46){if(_0x39f491(0x2a9)===_0x39f491(0x2a9)){if(!_0x5c9091)continue;if(_0x5c9091['isBreakStunned']())continue;if(!_0x5c9091['isAffectedByBreakShield']())continue;_0x5c9091[_0x39f491(0x655)]();}else{const _0x242bcf=this[_0x39f491(0x48a)]['bitmap'];_0x242bcf&&(this[_0x39f491(0x2dd)]=new _0x37fbec(_0x242bcf[_0x39f491(0xb49)],_0x242bcf[_0x39f491(0x2cc)]));}}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],'ActSeq_Mechanics_BtbGain',_0xd99bc9=>{const _0x3dfba6=_0x4a3d8d;if(!SceneManager[_0x3dfba6(0x930)]())return;if(!Imported[_0x3dfba6(0x6d0)])return;if(!BattleManager[_0x3dfba6(0xba2)]())return;VisuMZ[_0x3dfba6(0x6a8)](_0xd99bc9,_0xd99bc9);const _0xdd5879=VisuMZ[_0x3dfba6(0x1a3)](_0xd99bc9[_0x3dfba6(0x2ff)]),_0x4debc0=_0xd99bc9['BravePoints'];for(const _0x505f61 of _0xdd5879){if(_0x3dfba6(0x3a8)===_0x3dfba6(0x1e0))return;else{if(!_0x505f61)continue;_0x505f61[_0x3dfba6(0x18a)](_0x4debc0);}}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],_0x4a3d8d(0x4ad),_0x14dfd4=>{const _0x229743=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x229743(0x6a8)](_0x14dfd4,_0x14dfd4);const _0x4f1882=$gameTemp['getLastPluginCommandInterpreter'](),_0x183b68=BattleManager[_0x229743(0x82e)],_0x2fb4b8=BattleManager[_0x229743(0x18b)];if(!_0x4f1882||!_0x183b68||!_0x2fb4b8)return;if(!_0x183b68[_0x229743(0x49d)]())return;const _0x3720e2=VisuMZ[_0x229743(0x1a3)](_0x14dfd4['Targets']);for(const _0x461471 of _0x3720e2){if(!_0x461471)continue;if(_0x14dfd4[_0x229743(0x510)]){if('vxYnE'==='vxYnE')_0x461471[_0x229743(0x52a)](),_0x461471[_0x229743(0xa6b)](_0x461471[_0x229743(0x844)]());else{this[_0x229743(0xc35)][_0x229743(0x2dd)]=_0x43ab24[_0x229743(0xb97)];return;}}_0x461471['isDeathStateAffected']()&&_0x461471['performCollapse']();}_0x4f1882[_0x229743(0x49b)](_0x229743(0xa16));}),PluginManager['registerCommand'](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0xbd5),_0x4b603a=>{const _0x402175=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x402175(0x17d)])return;if(!BattleManager[_0x402175(0x79f)]())return;VisuMZ[_0x402175(0x6a8)](_0x4b603a,_0x4b603a);const _0x10a517=VisuMZ[_0x402175(0x1a3)](_0x4b603a['Targets']),_0x439a78=_0x4b603a['ChangeOrderBy'];for(const _0x4deef6 of _0x10a517){if(!_0x4deef6)continue;_0x4deef6[_0x402175(0x8f0)](_0x439a78);}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Mechanics_CtbSpeed',_0x58aa74=>{const _0x3984e3=_0x4a3d8d;if(!SceneManager[_0x3984e3(0x930)]())return;if(!Imported[_0x3984e3(0x17d)])return;if(!BattleManager['isCTB']())return;VisuMZ[_0x3984e3(0x6a8)](_0x58aa74,_0x58aa74);const _0xd2d140=VisuMZ[_0x3984e3(0x1a3)](_0x58aa74[_0x3984e3(0x2ff)]),_0x58b7f6=_0x58aa74['ChargeRate'],_0x36b03f=_0x58aa74['ChargeRate'];for(const _0x2135a5 of _0xd2d140){if(!_0x2135a5)continue;if(_0x2135a5['_tpbState']===_0x3984e3(0x6f4))_0x2135a5['changeCtbChargeTime'](_0x58b7f6);else _0x2135a5[_0x3984e3(0x33f)]==='casting'&&_0x2135a5[_0x3984e3(0x42a)](_0x36b03f);}}),PluginManager['registerCommand'](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Mechanics_CustomDmgFormula',_0xb1bafe=>{const _0x5d511e=_0x4a3d8d;if(!SceneManager[_0x5d511e(0x930)]())return;VisuMZ['ConvertParams'](_0xb1bafe,_0xb1bafe);const _0x392444=BattleManager[_0x5d511e(0x82e)];if(!_0x392444)return;let _0x4f51b9=_0xb1bafe[_0x5d511e(0xb45)];_0x392444[_0x5d511e(0xa95)](_0x4f51b9);}),PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],'ActSeq_Mechanics_DamagePopup',_0x37b324=>{const _0x521d0a=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x521d0a(0x6a8)](_0x37b324,_0x37b324);const _0x4fc686=VisuMZ[_0x521d0a(0x1a3)](_0x37b324[_0x521d0a(0x2ff)]);for(const _0x9478c3 of _0x4fc686){if(!_0x9478c3)continue;if(_0x9478c3['shouldPopupDamage']())_0x9478c3[_0x521d0a(0x937)]();}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],_0x4a3d8d(0x3b5),_0x27a6e7=>{const _0x421dcd=_0x4a3d8d;if(!SceneManager[_0x421dcd(0x930)]())return;VisuMZ[_0x421dcd(0x6a8)](_0x27a6e7,_0x27a6e7);const _0x527928=$gameTemp[_0x421dcd(0x202)](),_0x30999c=BattleManager['_subject'],_0x768fef=_0x27a6e7['JumpToLabel'];if(!_0x527928)return;if(!_0x30999c)return;if(_0x30999c&&_0x30999c[_0x421dcd(0x2b2)]()&&_0x768fef['toUpperCase']()['trim']()!=='UNTITLED'){if(_0x421dcd(0x3d2)!=='keldC')_0x527928[_0x421dcd(0xbd3)]([_0x768fef]);else{const _0x33dd24=_0xb6acff['BattleCore'][_0x421dcd(0x2bc)][_0x421dcd(0xaf0)](this);return _0x33dd24[_0x421dcd(0x8da)]=this[_0x421dcd(0x8da)],_0x33dd24[_0x421dcd(0x48b)]=this['autoBattleUseSkills'],_0x33dd24[_0x421dcd(0x47e)]=this['visualHpGauge'],_0x33dd24;}}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],_0x4a3d8d(0x282),_0x1bf255=>{const _0x41effe=_0x4a3d8d;if(!SceneManager[_0x41effe(0x930)]())return;VisuMZ[_0x41effe(0x6a8)](_0x1bf255,_0x1bf255);const _0x2c9a07=VisuMZ[_0x41effe(0x1a3)](_0x1bf255[_0x41effe(0x2ff)]);for(const _0x3eba7d of _0x2c9a07){if(_0x41effe(0x23b)===_0x41effe(0x860))return _0x246b56[_0x41effe(0x72d)]()[_0x41effe(0xbff)](this['_enemyId']);else{if(!_0x3eba7d)continue;if(!_0x3eba7d['isEnemy']())continue;_0x3eba7d[_0x41effe(0x565)]();}}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Mechanics_EtbAction',_0x330e15=>{const _0x6cd2c8=_0x4a3d8d;if(!SceneManager[_0x6cd2c8(0x930)]())return;if(!Imported[_0x6cd2c8(0x26d)])return;if(!BattleManager[_0x6cd2c8(0x5a6)]())return;VisuMZ[_0x6cd2c8(0x6a8)](_0x330e15,_0x330e15);const _0x534c61=_0x330e15[_0x6cd2c8(0x210)];BattleManager['_subject']&&BattleManager[_0x6cd2c8(0x18b)]['friendsUnit']()[_0x6cd2c8(0x6e7)](_0x534c61);}),PluginManager['registerCommand'](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x8a9),_0x1e4848=>{const _0x539424=_0x4a3d8d;if(!SceneManager[_0x539424(0x930)]())return;if(!Imported[_0x539424(0x7af)])return;if(!BattleManager[_0x539424(0x5c0)]())return;VisuMZ[_0x539424(0x6a8)](_0x1e4848,_0x1e4848);const _0x2d812c=_0x1e4848[_0x539424(0x210)];BattleManager['_subject']&&(_0x539424(0x41a)!==_0x539424(0x6b1)?BattleManager[_0x539424(0x18b)][_0x539424(0x997)]()[_0x539424(0x9fe)](_0x2d812c):this['_methods']['push'](_0x2198f7));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Mechanics_HpMpTp',_0x3ce4f9=>{const _0x239a9c=_0x4a3d8d;if(!SceneManager[_0x239a9c(0x930)]())return;VisuMZ[_0x239a9c(0x6a8)](_0x3ce4f9,_0x3ce4f9);const _0x485a88=VisuMZ[_0x239a9c(0x1a3)](_0x3ce4f9[_0x239a9c(0x2ff)]),_0x2d83db=_0x3ce4f9[_0x239a9c(0x93a)],_0x3ab09a=_0x3ce4f9[_0x239a9c(0xc37)],_0x208cce=_0x3ce4f9[_0x239a9c(0x353)],_0x4d45d3=_0x3ce4f9['MP_Flat'],_0x50c466=_0x3ce4f9['TP_Rate'],_0x1ec80e=_0x3ce4f9[_0x239a9c(0x931)],_0x541046=_0x3ce4f9[_0x239a9c(0xb21)];for(const _0x184ca1 of _0x485a88){if(_0x239a9c(0x326)!==_0x239a9c(0x234)){if(!_0x184ca1)continue;const _0x2e813c=_0x184ca1[_0x239a9c(0x32c)](),_0x7ecd47=Math[_0x239a9c(0x89f)](_0x2d83db*_0x184ca1[_0x239a9c(0x438)]+_0x3ab09a),_0x57ac6b=Math[_0x239a9c(0x89f)](_0x208cce*_0x184ca1[_0x239a9c(0x6fe)]+_0x4d45d3),_0x51442=Math[_0x239a9c(0x89f)](_0x50c466*_0x184ca1['maxTp']()+_0x1ec80e);if(_0x7ecd47!==0x0)_0x184ca1[_0x239a9c(0xa39)](_0x7ecd47);if(_0x57ac6b!==0x0)_0x184ca1[_0x239a9c(0x48d)](_0x57ac6b);if(_0x51442!==0x0)_0x184ca1['gainTp'](_0x51442);if(_0x541046)_0x184ca1[_0x239a9c(0x937)]();_0x2e813c&&_0x184ca1[_0x239a9c(0x2b2)]()&&_0x184ca1[_0x239a9c(0x2c2)]();}else _0x65965e[_0x239a9c(0x8c7)]()[_0x239a9c(0x545)]?this[_0x239a9c(0x906)]('performEvasion',_0x568a59):this[_0x239a9c(0x906)](_0x239a9c(0x707),_0x974c78);}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Mechanics_Immortal',_0x58a514=>{const _0x5f3601=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5f3601(0x6a8)](_0x58a514,_0x58a514);const _0x4ea75f=VisuMZ[_0x5f3601(0x1a3)](_0x58a514[_0x5f3601(0x2ff)]);for(const _0xd2c7b5 of _0x4ea75f){if(!_0xd2c7b5)continue;_0xd2c7b5[_0x5f3601(0xb1c)](_0x58a514[_0x5f3601(0x575)]);}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x55d),_0x250c50=>{const _0xb22450=_0x4a3d8d;if(!SceneManager[_0xb22450(0x930)]())return;VisuMZ[_0xb22450(0x6a8)](_0x250c50,_0x250c50);const _0x9507de=BattleManager[_0xb22450(0x82e)],_0x18f08b={'criticalHitRate':_0x250c50[_0xb22450(0x96f)],'criticalHitFlat':_0x250c50[_0xb22450(0x3e3)],'criticalDmgRate':_0x250c50[_0xb22450(0xbce)],'criticalDmgFlat':_0x250c50['CriticalDmgFlat'],'damageRate':_0x250c50[_0xb22450(0xbf4)],'damageFlat':_0x250c50[_0xb22450(0x656)],'hitRate':_0x250c50[_0xb22450(0x500)],'hitFlat':_0x250c50['HitFlat']};_0x9507de['_multipliers']=_0x18f08b;}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Mechanics_OnceParallel',_0x1584b5=>{const _0x191b9d=_0x4a3d8d;if(!SceneManager[_0x191b9d(0x930)]())return;VisuMZ[_0x191b9d(0x6a8)](_0x1584b5,_0x1584b5);const _0xc44a6a=_0x1584b5['CommonEventID'];SceneManager[_0x191b9d(0x3ff)][_0x191b9d(0xb8a)](_0xc44a6a);}),PluginManager['registerCommand'](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x760),_0x72fdec=>{const _0x15c0cc=_0x4a3d8d;if(!SceneManager[_0x15c0cc(0x930)]())return;if(!Imported['VisuMZ_2_BattleSystemOTB'])return;if(!BattleManager['isOTB']())return;VisuMZ[_0x15c0cc(0x6a8)](_0x72fdec,_0x72fdec);const _0x185ea8=VisuMZ[_0x15c0cc(0x1a3)](_0x72fdec[_0x15c0cc(0x2ff)]);for(const _0x51e79d of _0x185ea8){if(_0x15c0cc(0x59c)!==_0x15c0cc(0x59c))_0x3157fb=_0x5d77fc[_0x15c0cc(0xc50)];else{if(!_0x51e79d)continue;let _0x4b293f=_0x72fdec['CurrentTurn'],_0x58fce4=_0x72fdec[_0x15c0cc(0x4b8)],_0x545ab8=_0x72fdec[_0x15c0cc(0x67b)];if(BattleManager[_0x15c0cc(0x2db)][_0x15c0cc(0xbff)](_0x51e79d))_0x4b293f+=_0x545ab8;else{if(_0x15c0cc(0x840)!=='nUiqE')_0x58fce4+=_0x545ab8;else{const _0x35b1f5=_0x2c170b[_0x4aaf1e];_0x35b1f5&&_0x10ae4b[_0x15c0cc(0xbec)](_0x532516);}}BattleManager[_0x15c0cc(0xab0)](_0x51e79d,-_0x4b293f,![]),BattleManager[_0x15c0cc(0xab0)](_0x51e79d,-_0x58fce4,!![]);}}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],_0x4a3d8d(0xa6c),_0x341325=>{const _0x1f8cac=_0x4a3d8d;if(!SceneManager[_0x1f8cac(0x930)]())return;if(!Imported[_0x1f8cac(0x52f)])return;if(!BattleManager[_0x1f8cac(0xc4f)]())return;VisuMZ['ConvertParams'](_0x341325,_0x341325);const _0x2649da=BattleManager['_subject'][_0x1f8cac(0x997)](),_0x298cb6=_0x341325[_0x1f8cac(0x63a)],_0x3ee93b=_0x341325['alterChange']||'unchanged',_0x44cce0=_0x341325[_0x1f8cac(0x75b)]||_0x1f8cac(0x3bf),_0x98a869=_0x341325[_0x1f8cac(0x190)]||0x0,_0x41d35c=_0x341325['alterPriority']||0x0;if(_0x2649da[_0x1f8cac(0x824)]()||_0x298cb6){if('EPlxV'!==_0x1f8cac(0x487)){if(!_0x5138a8[_0x1f8cac(0x485)]['TpbActiveChangeEnabled'])return![];const _0x21fcc9=_0xb277b0[_0x1f8cac(0x411)]()[_0x1f8cac(0x3d0)](_0x4d021d=>_0x4d021d[_0x1f8cac(0x5b1)]()&&_0x4d021d[_0x1f8cac(0x28d)]());return _0x21fcc9[_0x1f8cac(0x482)]>0x0&&_0x8fa98b['actor']()!==_0x21fcc9[_0x21fcc9[_0x1f8cac(0x482)]-0x1];}else _0x298cb6&&(_0x1f8cac(0x74f)===_0x1f8cac(0x74f)?(_0x2649da[_0x1f8cac(0x5be)]=_0x2649da[_0x1f8cac(0x5be)]||{},_0x2649da[_0x1f8cac(0x5be)][_0x1f8cac(0x2fd)]=0x0):(_0x5c3462[_0x1f8cac(0x485)][_0x1f8cac(0x3fd)][_0x1f8cac(0xaf0)](this),this[_0x1f8cac(0x4f1)]())),_0x2649da[_0x1f8cac(0x146)](_0x3ee93b,_0x44cce0,_0x98a869,_0x41d35c);}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x8a1),_0x45fe70=>{const _0x448f9f=_0x4a3d8d;if(!SceneManager[_0x448f9f(0x930)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x448f9f(0xc4f)]())return;VisuMZ[_0x448f9f(0x6a8)](_0x45fe70,_0x45fe70);const _0x216e5d=BattleManager[_0x448f9f(0x18b)][_0x448f9f(0x997)]();let _0x20a043=Math[_0x448f9f(0x559)](_0x45fe70[_0x448f9f(0x9cf)],0x0),_0x32dc97=_0x216e5d[_0x448f9f(0xaeb)](),_0x584351=_0x216e5d[_0x448f9f(0x502)]();while(_0x20a043--){if(_0x448f9f(0xa8a)===_0x448f9f(0xa8a)){if(_0x32dc97<=0x0&&_0x584351<=0x0){if(_0x448f9f(0x627)!==_0x448f9f(0x8dc))break;else return this['svBattlerData']()[_0x448f9f(0x9bf)];}else _0x32dc97>0x0?(_0x32dc97--,_0x584351++):_0x584351--;}else this[_0x448f9f(0x86a)](),this[_0x448f9f(0xa86)](),this['process_VisuMZ_BattleCore_DamageStyles'](),this[_0x448f9f(0xbab)](),_0x387125[_0x448f9f(0x485)][_0x448f9f(0x8a6)][_0x448f9f(0xaf0)](this),this['process_VisuMZ_BattleCore_Notetags'](),this[_0x448f9f(0xc4e)](),this[_0x448f9f(0x7ef)](),this[_0x448f9f(0x8ec)]();}_0x216e5d[_0x448f9f(0xa33)](_0x32dc97),_0x216e5d[_0x448f9f(0x3e9)](_0x584351);}),PluginManager['registerCommand'](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0xafc),_0x5682df=>{const _0x4f8805=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4f8805(0x52f)])return;if(!BattleManager['isPTB']())return;VisuMZ['ConvertParams'](_0x5682df,_0x5682df);const _0x1fc733=BattleManager['_subject']['friendsUnit']();let _0x2d578a=_0x5682df[_0x4f8805(0x880)],_0x923f31=_0x5682df[_0x4f8805(0x4b1)];_0x1fc733[_0x4f8805(0x7c1)](_0x2d578a),_0x1fc733[_0x4f8805(0x573)](_0x923f31);}),PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],_0x4a3d8d(0x4b5),_0x357cfa=>{const _0xc5f94d=_0x4a3d8d;if(!SceneManager[_0xc5f94d(0x930)]())return;VisuMZ[_0xc5f94d(0x6a8)](_0x357cfa,_0x357cfa);const _0x588e99=[_0xc5f94d(0x26a),_0xc5f94d(0x8ab),_0xc5f94d(0xbed),_0xc5f94d(0x24d),_0xc5f94d(0x3b8),_0xc5f94d(0x2b8),_0xc5f94d(0x943),_0xc5f94d(0x5c3)],_0x27addc=_0x357cfa[_0xc5f94d(0x391)],_0x149f3d=_0x357cfa[_0xc5f94d(0xb92)],_0x4cb852=VisuMZ[_0xc5f94d(0x1a3)](_0x357cfa[_0xc5f94d(0x2ff)]);for(const _0x1231c5 of _0x4cb852){if('HfpiA'!=='ppxdU'){if(!_0x1231c5)continue;for(const _0x599afc of _0x27addc){const _0xaed995=_0x588e99['indexOf'](_0x599afc[_0xc5f94d(0x302)]()[_0xc5f94d(0x82d)]());if(_0xaed995>=0x0&&_0xaed995<=0x7&&_0x1231c5[_0xc5f94d(0x698)](_0xaed995)){if('dXBdW'===_0xc5f94d(0x7b3))_0x1231c5[_0xc5f94d(0x549)](_0xaed995);else{const _0x2854f9=_0x326455[_0xc5f94d(0x559)](this[_0xc5f94d(0xb00)](),_0x1f60ec[_0xc5f94d(0xa48)]),_0x1833e4=_0x259794[_0xc5f94d(0x467)](_0x2854f9*0x1e),_0x20c70a=this['createChildSprite'](_0x1833e4,_0x2854f9),_0x54a50d=_0x9cd585[_0xc5f94d(0x1dc)]/0x2,_0x356035=_0x20c70a['bitmap']['measureTextWidth'](_0x1fa85b+'\x20');_0x20c70a[_0xc5f94d(0x2dd)][_0xc5f94d(0x19e)]=_0x1b4a1e[_0xc5f94d(0x9e2)](_0xeea1e2[_0xc5f94d(0x19e)]),_0x20c70a[_0xc5f94d(0x2dd)][_0xc5f94d(0x1af)](_0x10c968,_0x54a50d,0x0,_0x1833e4-_0x54a50d,_0x2854f9,'center');const _0x2d906b=_0x18c1f6[_0xc5f94d(0x89f)]((_0x2854f9-_0x591d5a[_0xc5f94d(0xa48)])/0x2),_0x54ab41=_0x1833e4/0x2-_0xe8e49a[_0xc5f94d(0x1dc)]-_0x356035/0x2+_0x54a50d/0x2,_0x5657cb=_0x44fed7['loadSystem'](_0xc5f94d(0x537)),_0x565b4d=_0x151abd[_0xc5f94d(0x1dc)],_0x33ddb4=_0x3a204c[_0xc5f94d(0xa48)],_0xd22602=_0xbb3e99%0x10*_0x565b4d,_0x4dff91=_0x49e081[_0xc5f94d(0x467)](_0x1c31e1/0x10)*_0x33ddb4;_0x20c70a[_0xc5f94d(0x2dd)]['blt'](_0x5657cb,_0xd22602,_0x4dff91,_0x565b4d,_0x33ddb4,_0x54ab41,_0x2d906b),this[_0xc5f94d(0x744)]=_0x483066[_0xc5f94d(0x602)]||[0x0,0x0,0x0,0x0],this['_flashColor']=_0x3ef118[_0xc5f94d(0x773)](this[_0xc5f94d(0x744)]),this['_flashDuration']=_0x55352f['flashDuration']||0x0,_0x20c70a['dy']=0x0;}}}for(const _0xef1d14 of _0x149f3d){if(_0xc5f94d(0x542)===_0xc5f94d(0x6a3))this['_forcedBattleLayout']=_0xc5f94d(0x646);else{const _0x3235d1=_0x588e99[_0xc5f94d(0x2b7)](_0xef1d14[_0xc5f94d(0x302)]()[_0xc5f94d(0x82d)]());if(_0x3235d1>=0x0&&_0x3235d1<=0x7&&_0x1231c5[_0xc5f94d(0x36c)](_0x3235d1)){if(_0xc5f94d(0x4db)===_0xc5f94d(0x1b7)){if(!this[_0xc5f94d(0xc2f)])return;if(this[_0xc5f94d(0x349)]&&this['_battler'][_0xc5f94d(0xbe3)]()){const _0x3efa7d=this[_0xc5f94d(0xc2f)][_0xc5f94d(0x2dd)];this['_shadowSprite'][_0xc5f94d(0x22b)](0x0,0x0,_0x3efa7d[_0xc5f94d(0xb49)],_0x3efa7d[_0xc5f94d(0x2cc)]);}else this[_0xc5f94d(0xc2f)][_0xc5f94d(0x22b)](0x0,0x0,0x0,0x0);}else _0x1231c5[_0xc5f94d(0x549)](_0x3235d1);}}}}else this[_0xc5f94d(0xc2f)]=new _0x3b205d(),this[_0xc5f94d(0xc2f)]['bitmap']=_0x1eefe8[_0xc5f94d(0x2ce)](_0xc5f94d(0x558)),this[_0xc5f94d(0xc2f)][_0xc5f94d(0x2dd)][_0xc5f94d(0x8a5)]=_0x721de2[_0xc5f94d(0x485)][_0xc5f94d(0xb75)][_0xc5f94d(0x4e0)][_0xc5f94d(0x325)],this[_0xc5f94d(0xc2f)][_0xc5f94d(0xc3d)]['x']=0.5,this[_0xc5f94d(0xc2f)]['anchor']['y']=0.5,this[_0xc5f94d(0xc2f)]['y']=-0x2,this[_0xc5f94d(0xc2f)][_0xc5f94d(0xab9)]=![],this[_0xc5f94d(0x960)](this[_0xc5f94d(0xc2f)]);}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x6a2),_0x3dd96d=>{const _0xf452d5=_0x4a3d8d;if(!SceneManager[_0xf452d5(0x930)]())return;VisuMZ[_0xf452d5(0x6a8)](_0x3dd96d,_0x3dd96d);const _0x17ecc8=_0x3dd96d[_0xf452d5(0xbf1)],_0x37de29=VisuMZ[_0xf452d5(0x1a3)](_0x3dd96d[_0xf452d5(0x2ff)]);for(const _0x25186b of _0x37de29){if(!_0x25186b)continue;for(const _0x3a25ea of _0x17ecc8){_0x25186b[_0xf452d5(0xb13)](_0x3a25ea);}}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Mechanics_StbExploit',_0x5cc9=>{const _0x230331=_0x4a3d8d;if(!SceneManager[_0x230331(0x930)]())return;if(!Imported[_0x230331(0xaf5)])return;if(!BattleManager[_0x230331(0x469)]())return;VisuMZ[_0x230331(0x6a8)](_0x5cc9,_0x5cc9);const _0x4c02d1=_0x5cc9['Exploited'],_0xd5518e=VisuMZ[_0x230331(0x1a3)](_0x5cc9[_0x230331(0x2ff)]),_0x4d7b48=_0x5cc9[_0x230331(0x881)],_0x2c6e29=_0x5cc9['Exploiter'],_0x386b0e=_0x5cc9['ForceExploiter'],_0x217d67=BattleManager['_action'];if(_0x4c02d1)for(const _0xd62529 of _0xd5518e){if(!_0xd62529)continue;if(_0xd62529===user)continue;if(_0x4d7b48)_0xd62529[_0x230331(0x40a)](![]);_0xd62529[_0x230331(0xc08)](BattleManager['_subject'],_0x217d67);}if(_0x2c6e29&&BattleManager[_0x230331(0x18b)]){if(_0x386b0e)BattleManager['_subject']['setSTBExploited'](![]);const _0x19ffc7=_0xd5518e[0x0];BattleManager[_0x230331(0xaf9)](_0x19ffc7,_0x217d67);}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x58c),_0x1cda7d=>{const _0x3ebe4c=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3ebe4c(0xaf5)])return;if(!BattleManager[_0x3ebe4c(0x469)]())return;VisuMZ[_0x3ebe4c(0x6a8)](_0x1cda7d,_0x1cda7d);const _0x439dba=_0x1cda7d[_0x3ebe4c(0x33b)];if(BattleManager[_0x3ebe4c(0x18b)]){if(_0x3ebe4c(0x18e)!==_0x3ebe4c(0x1ff))BattleManager[_0x3ebe4c(0x18b)]['stbGainInstant'](_0x439dba);else{if(!this[_0x3ebe4c(0x49d)]())return _0x172a79;const _0x1e5110=this[_0x3ebe4c(0x49d)]()['note'];return _0x1e5110[_0x3ebe4c(0x591)](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0x5ceba6['remove'](this[_0x3ebe4c(0x601)]()),_0x229751;}}}),PluginManager['registerCommand'](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0xa27),_0x3eb36c=>{const _0x153b6a=_0x4a3d8d;if(!SceneManager[_0x153b6a(0x930)]())return;if(!Imported[_0x153b6a(0xaf5)])return;if(!BattleManager[_0x153b6a(0x469)]())return;VisuMZ[_0x153b6a(0x6a8)](_0x3eb36c,_0x3eb36c);let _0x152bfe=_0x3eb36c[_0x153b6a(0x33b)];if(BattleManager[_0x153b6a(0x18b)]){BattleManager['_subject'][_0x153b6a(0x413)]=BattleManager[_0x153b6a(0x18b)][_0x153b6a(0x413)]||[];while(_0x152bfe--){if(_0x153b6a(0x63d)===_0x153b6a(0x949))this[_0x153b6a(0x834)](_0x153b6a(0x8e0));else{if(BattleManager[_0x153b6a(0x18b)]['_actions'][_0x153b6a(0x482)]<=0x0)break;BattleManager['_subject'][_0x153b6a(0x413)][_0x153b6a(0x331)]();}}}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x501),_0x2e3cdf=>{const _0x58d1c4=_0x4a3d8d;if(!SceneManager[_0x58d1c4(0x930)]())return;if(!Imported[_0x58d1c4(0x871)])return;VisuMZ[_0x58d1c4(0x6a8)](_0x2e3cdf,_0x2e3cdf);const _0x3c859e=VisuMZ[_0x58d1c4(0x1a3)](_0x2e3cdf[_0x58d1c4(0x2ff)]),_0x4ed232=_0x2e3cdf[_0x58d1c4(0x7cb)];for(const _0x29c237 of _0x3c859e){if(_0x58d1c4(0x41b)!==_0x58d1c4(0xa80)){if(!_0x29c237)continue;if(!_0x29c237[_0x58d1c4(0x764)]())continue;_0x29c237[_0x58d1c4(0x752)](_0x4ed232);}else!this[_0x58d1c4(0x1d8)]&&(this['_svBattlerSprite']=new _0x374493(_0x2ec781),this[_0x58d1c4(0x676)]()),this['_svBattlerSprite']['setBattler'](_0x1d2646);}}),PluginManager['registerCommand'](pluginData['name'],_0x4a3d8d(0xb5b),_0x1dbf80=>{const _0x1dba2d=_0x4a3d8d;if(!SceneManager[_0x1dba2d(0x930)]())return;VisuMZ['ConvertParams'](_0x1dbf80,_0x1dbf80);const _0x26765b=VisuMZ[_0x1dba2d(0x1a3)](_0x1dbf80[_0x1dba2d(0x2ff)]),_0x22c653=_0x1dbf80[_0x1dba2d(0x644)],_0x4c3800={'textColor':ColorManager[_0x1dba2d(0x9e2)](_0x1dbf80[_0x1dba2d(0x7f5)]),'flashColor':_0x1dbf80[_0x1dba2d(0x692)],'flashDuration':_0x1dbf80['FlashDuration']};for(const _0x8c130c of _0x26765b){if(!_0x8c130c)continue;_0x8c130c['setupTextPopup'](_0x22c653,_0x4c3800);}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x2cd),_0x32e147=>{const _0x298abd=_0x4a3d8d;if(!SceneManager[_0x298abd(0x930)]())return;VisuMZ[_0x298abd(0x6a8)](_0x32e147,_0x32e147);const _0x2b6013=VisuMZ[_0x298abd(0x1a3)](_0x32e147['Targets']);let _0x48ba9f=$gameVariables[_0x298abd(0x3d8)](_0x32e147[_0x298abd(0x85c)]);if(Imported['VisuMZ_0_CoreEngine']&&_0x32e147[_0x298abd(0x3dc)]){if('esmjU'===_0x298abd(0x865))return this[_0x298abd(0x85d)]>0x0;else _0x48ba9f=VisuMZ['GroupDigits'](_0x48ba9f);}const _0x1063df=String(_0x48ba9f),_0x428cdb={'textColor':ColorManager[_0x298abd(0x9e2)](_0x32e147[_0x298abd(0x7f5)]),'flashColor':_0x32e147[_0x298abd(0x692)],'flashDuration':_0x32e147['FlashDuration']};for(const _0x119c12 of _0x2b6013){if(!_0x119c12)continue;_0x119c12[_0x298abd(0x1a4)](_0x1063df,_0x428cdb);}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Mechanics_WaitForEffect',_0x492a65=>{const _0x2918dc=_0x4a3d8d;if(!SceneManager[_0x2918dc(0x930)]())return;const _0x4d2212=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x4d2212)return;_0x4d2212['setWaitMode'](_0x2918dc(0xa16));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x5df),_0x3c537c=>{const _0x107be7=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x3c537c,_0x3c537c);const _0x44eaf9=VisuMZ['CreateActionSequenceTargets'](_0x3c537c[_0x107be7(0x2ff)]);for(const _0x17a8ed of _0x44eaf9){if(!_0x17a8ed)continue;_0x17a8ed[_0x107be7(0x170)]();}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],_0x4a3d8d(0x179),_0x5a2691=>{const _0x27729e=_0x4a3d8d;if(!SceneManager[_0x27729e(0x930)]())return;VisuMZ[_0x27729e(0x6a8)](_0x5a2691,_0x5a2691);const _0x37223a=VisuMZ[_0x27729e(0x1a3)](_0x5a2691[_0x27729e(0x2ff)]),_0x27bd3d=_0x5a2691[_0x27729e(0x590)][_0x27729e(0x3b6)]()['trim']();let _0x554f89=_0x5a2691[_0x27729e(0x231)];const _0x3d7733=_0x5a2691[_0x27729e(0xa3b)];!['attack',_0x27729e(0x6d8),'swing',_0x27729e(0x158)]['includes'](_0x27bd3d)&&(_0x554f89=![]);for(const _0x2b31a2 of _0x37223a){if(!_0x2b31a2)continue;_0x2b31a2[_0x27729e(0x552)](_0x27bd3d,_0x554f89,_0x3d7733);}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x813),_0x3e03c5=>{const _0x29b905=_0x4a3d8d;if(!SceneManager[_0x29b905(0x930)]())return;VisuMZ[_0x29b905(0x6a8)](_0x3e03c5,_0x3e03c5);const _0x10e41e=VisuMZ[_0x29b905(0x1a3)](_0x3e03c5[_0x29b905(0x2ff)]),_0x17746d=_0x3e03c5['MotionType'][_0x29b905(0x3b6)]()['trim'](),_0x188a6d=_0x3e03c5[_0x29b905(0x231)];for(const _0x43120c of _0x10e41e){if(!_0x43120c)continue;if(_0x17746d[_0x29b905(0x591)](/ATTACK[ ](\d+)/i)){if('PGXpR'!==_0x29b905(0x689))return _0x4ba273[_0x29b905(0x8c9)][_0x29b905(0xaf0)](this);else _0x43120c[_0x29b905(0x428)](Number(RegExp['$1']));}else{if(_0x17746d===_0x29b905(0xadd)){if(_0x29b905(0x9a3)!==_0x29b905(0x9a3))return _0x31bede[_0x29b905(0x997)]()[_0x29b905(0x411)]()['filter'](_0x6fed59=>_0x6fed59!==_0x16b35f);else _0x43120c[_0x29b905(0x6c9)]();}else _0x43120c['requestMotion'](_0x17746d);}if(!_0x188a6d)'mXWXB'!==_0x29b905(0x1bd)?_0x43120c[_0x29b905(0x826)](0x0):this[_0x29b905(0x85e)][_0x29b905(0x960)](new _0x108423());else{if(_0x188a6d&&[_0x29b905(0x6d8),_0x29b905(0x99c),'missle'][_0x29b905(0xbff)](_0x17746d)){}}}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x8f4),_0x257b09=>{const _0x1d044c=_0x4a3d8d;if(!SceneManager[_0x1d044c(0x930)]())return;VisuMZ[_0x1d044c(0x6a8)](_0x257b09,_0x257b09);const _0x1d8e0d=BattleManager[_0x1d044c(0x82e)];if(!_0x1d8e0d)return;if(!_0x1d8e0d[_0x1d044c(0x49d)]())return;const _0x41ec3b=VisuMZ[_0x1d044c(0x1a3)](_0x257b09[_0x1d044c(0x2ff)]);for(const _0xa11be7 of _0x41ec3b){if(!_0xa11be7)continue;_0xa11be7[_0x1d044c(0x9df)](_0x1d8e0d);}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],_0x4a3d8d(0x568),_0x5ee63b=>{const _0x51b8bf=_0x4a3d8d;if(!SceneManager[_0x51b8bf(0x930)]())return;VisuMZ[_0x51b8bf(0x6a8)](_0x5ee63b,_0x5ee63b);const _0x14870f=VisuMZ[_0x51b8bf(0x1a3)](_0x5ee63b[_0x51b8bf(0x2ff)]);for(const _0x1242d5 of _0x14870f){if(!_0x1242d5)continue;if(!_0x1242d5[_0x51b8bf(0x28e)]())continue;_0x1242d5[_0x51b8bf(0x28e)]()[_0x51b8bf(0x1ef)]();}}),PluginManager['registerCommand'](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x2ea),_0x35337a=>{const _0x3364e6=_0x4a3d8d;if(!SceneManager[_0x3364e6(0x930)]())return;VisuMZ[_0x3364e6(0x6a8)](_0x35337a,_0x35337a);const _0x424587=$gameTemp['getLastPluginCommandInterpreter'](),_0x48ba16=_0x35337a[_0x3364e6(0x74a)]*Sprite_Battler[_0x3364e6(0xb59)];_0x424587['wait'](_0x48ba16);}),PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],'ActSeq_Movement_BattleStep',_0x50a707=>{const _0x209d81=_0x4a3d8d;if(!SceneManager[_0x209d81(0x930)]())return;VisuMZ[_0x209d81(0x6a8)](_0x50a707,_0x50a707);const _0x53c658=$gameTemp[_0x209d81(0x202)](),_0x55ba19=BattleManager[_0x209d81(0x82e)];if(!_0x53c658||!_0x55ba19)return;if(!_0x55ba19[_0x209d81(0x49d)]())return;const _0x11ee97=VisuMZ['CreateActionSequenceTargets'](_0x50a707[_0x209d81(0x2ff)]);for(const _0xedb093 of _0x11ee97){if(_0x209d81(0x77b)!=='BezmW'){if(_0x55faf6[_0x209d81(0x485)][_0x209d81(0xb75)][_0x209d81(0xa01)][_0x209d81(0x68d)]){const _0x40b0ad=_0x51df5d[_0x209d81(0x49d)]();this[_0x209d81(0x906)]('showAnimation',_0x17c4e0,[_0x68e45e],_0x40b0ad[_0x209d81(0x44e)]);}}else{if(!_0xedb093)continue;_0xedb093['performActionStart'](_0x55ba19);}}if(_0x50a707[_0x209d81(0x316)])_0x53c658[_0x209d81(0x49b)](_0x209d81(0x9e0));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x4e2),_0x34e97a=>{const _0x4b43a3=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x4b43a3(0x6a8)](_0x34e97a,_0x34e97a);const _0x35e8e1=$gameTemp[_0x4b43a3(0x202)](),_0x5ada42=VisuMZ['CreateActionSequenceTargets'](_0x34e97a[_0x4b43a3(0x2ff)]),_0x2103f9=_0x34e97a[_0x4b43a3(0xb40)],_0x2dfe58=_0x34e97a[_0x4b43a3(0x4cf)],_0x432b76=_0x34e97a[_0x4b43a3(0xbef)],_0x395ab6=_0x34e97a[_0x4b43a3(0x936)],_0x1e1100=_0x34e97a['FaceDirection'],_0x23606a=_0x34e97a[_0x4b43a3(0x443)],_0x51ea80=_0x34e97a[_0x4b43a3(0x590)],_0x56d7e3=_0x34e97a[_0x4b43a3(0x316)];if(!_0x35e8e1)return;for(const _0x4280f6 of _0x5ada42){if(!_0x4280f6)continue;let _0x21e951=_0x2dfe58,_0x15ba41=_0x432b76;if(_0x2103f9[_0x4b43a3(0x591)](/horz/i))_0x21e951*=_0x4280f6[_0x4b43a3(0x764)]()?-0x1:0x1;if(_0x2103f9['match'](/vert/i))_0x15ba41*=_0x4280f6[_0x4b43a3(0x764)]()?-0x1:0x1;_0x4280f6[_0x4b43a3(0x42f)](_0x21e951,_0x15ba41,_0x395ab6,_0x1e1100,_0x23606a),_0x4280f6['requestMotion'](_0x51ea80);}if(_0x56d7e3)_0x35e8e1[_0x4b43a3(0x49b)](_0x4b43a3(0x9e0));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x398),_0x7e56e9=>{const _0x1b3ab3=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x1b3ab3(0x6a8)](_0x7e56e9,_0x7e56e9);const _0x56badc=$gameTemp[_0x1b3ab3(0x202)](),_0x3c5115=VisuMZ[_0x1b3ab3(0x1a3)](_0x7e56e9['Targets']),_0x3f5d69=_0x7e56e9['Destination'],_0x5ca16f=_0x7e56e9[_0x1b3ab3(0xa5b)],_0x402b14=_0x7e56e9[_0x1b3ab3(0x76e)],_0x4cc597=_0x7e56e9[_0x1b3ab3(0xa65)],_0x15d004=_0x7e56e9[_0x1b3ab3(0x936)],_0x2c5489=_0x7e56e9['FaceDirection'],_0x440810=_0x7e56e9['EasingType'],_0x206165=_0x7e56e9[_0x1b3ab3(0x590)],_0x49ac5c=_0x7e56e9[_0x1b3ab3(0x316)];if(!_0x56badc)return;for(const _0x4e7769 of _0x3c5115){if(!_0x4e7769)continue;let _0x57020e=_0x4e7769['battler']()[_0x1b3ab3(0x232)],_0x13fad5=_0x4e7769[_0x1b3ab3(0x28e)]()['_baseY'];if(_0x3f5d69['match'](/home/i)){if(_0x1b3ab3(0xb90)===_0x1b3ab3(0x1bb)){if(this[_0x1b3ab3(0x47d)]===_0x235460)this[_0x1b3ab3(0x6f7)]();if(!_0x4abcfd)return;if(this[_0x1b3ab3(0x47d)][_0x1b3ab3(0xbff)](_0x1b2c37))return;this[_0x1b3ab3(0x47d)]['push'](_0x433197),this[_0x1b3ab3(0x47d)]['sort']((_0x560be3,_0x3d548d)=>_0x560be3-_0x3d548d);}else _0x57020e=_0x4e7769['battler']()[_0x1b3ab3(0x966)],_0x13fad5=_0x4e7769['battler']()[_0x1b3ab3(0x649)];}else{if(_0x3f5d69[_0x1b3ab3(0x591)](/center/i))_0x57020e=Graphics['boxWidth']/0x2,_0x13fad5=Graphics[_0x1b3ab3(0x8de)]/0x2;else _0x3f5d69[_0x1b3ab3(0x591)](/point (\d+), (\d+)/i)&&(_0x57020e=Number(RegExp['$1']),_0x13fad5=Number(RegExp['$2']));}if(_0x5ca16f[_0x1b3ab3(0x591)](/none/i)){if(_0x1b3ab3(0xa88)!==_0x1b3ab3(0x371))_0x57020e+=_0x402b14,_0x13fad5+=_0x4cc597;else return!![];}else{if(_0x5ca16f[_0x1b3ab3(0x591)](/horz/i)&&_0x5ca16f[_0x1b3ab3(0x591)](/vert/i)){if(_0x1b3ab3(0x7c9)!=='MQPoH')_0x57020e+=_0x4e7769[_0x1b3ab3(0x764)]()?-_0x402b14:_0x402b14,_0x13fad5+=_0x4e7769['isActor']()?-_0x4cc597:_0x4cc597;else{if(!_0x25e69f[_0x1b3ab3(0x21f)]()){const _0x279d46=_0x4193bf[_0x1b3ab3(0x5f9)](_0x73823['x'],_0xfa6fa7['y']);if(this[_0x1b3ab3(0xbbd)]&&this[_0x1b3ab3(0xbbd)][_0x279d46])return this['_regionBattleback1'][_0x279d46];}return _0x382968[_0x1b3ab3(0x485)][_0x1b3ab3(0x1a6)][_0x1b3ab3(0xaf0)](this);}}else{if(_0x5ca16f[_0x1b3ab3(0x591)](/horz/i))_0x57020e+=_0x4e7769['isActor']()?-_0x402b14:_0x402b14,_0x13fad5+=_0x4cc597;else{if(_0x5ca16f[_0x1b3ab3(0x591)](/vert/i)){if(_0x1b3ab3(0x6ec)!==_0x1b3ab3(0x788))_0x57020e+=_0x402b14,_0x13fad5+=_0x4e7769[_0x1b3ab3(0x764)]()?-_0x4cc597:_0x4cc597;else return _0x35fd41['BattleCore'][_0x1b3ab3(0xb75)][_0x1b3ab3(0x839)][_0x1b3ab3(0x461)];}}}}_0x4e7769[_0x1b3ab3(0x169)](_0x57020e,_0x13fad5,_0x15d004,_0x2c5489,_0x440810,-0x1),_0x4e7769['requestMotion'](_0x206165);}if(_0x49ac5c)_0x56badc[_0x1b3ab3(0x49b)](_0x1b3ab3(0x9e0));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Movement_HomeMoveToTarget',_0x187ee3=>{const _0x4fc0d1=_0x4a3d8d;if(!SceneManager[_0x4fc0d1(0x930)]())return;if(!$gameSystem[_0x4fc0d1(0x957)]())return;VisuMZ[_0x4fc0d1(0x6a8)](_0x187ee3,_0x187ee3);const _0x1e8bd5=$gameTemp[_0x4fc0d1(0x202)](),_0x50bcd6=VisuMZ['CreateActionSequenceTargets'](_0x187ee3['Targets1']),_0x4a9255=VisuMZ[_0x4fc0d1(0x1a3)](_0x187ee3[_0x4fc0d1(0x790)]),_0x5060ee=_0x187ee3[_0x4fc0d1(0x394)];let _0x34302f=_0x187ee3['MeleeDistance'];const _0x249f18=_0x187ee3[_0x4fc0d1(0xa5b)],_0x656b7a=_0x187ee3['OffsetX'],_0x25be47=_0x187ee3[_0x4fc0d1(0xa65)],_0x140452=_0x187ee3[_0x4fc0d1(0x936)],_0x10fd67=_0x187ee3[_0x4fc0d1(0x374)],_0xa51d50=_0x187ee3[_0x4fc0d1(0x443)],_0x49b62c=_0x187ee3[_0x4fc0d1(0x590)],_0x110186=_0x187ee3[_0x4fc0d1(0x316)],_0x32e3b4=Math[_0x4fc0d1(0x885)](..._0x4a9255['map'](_0x50d8a=>_0x50d8a['battler']()['_baseX']-_0x50d8a[_0x4fc0d1(0x28e)]()[_0x4fc0d1(0x34f)]()/0x2)),_0x2af7a2=Math['max'](..._0x4a9255['map'](_0x44956f=>_0x44956f[_0x4fc0d1(0x28e)]()['_baseX']+_0x44956f[_0x4fc0d1(0x28e)]()[_0x4fc0d1(0x34f)]()/0x2)),_0x14b0d6=Math[_0x4fc0d1(0x885)](..._0x4a9255[_0x4fc0d1(0xa4a)](_0x52c6d7=>_0x52c6d7[_0x4fc0d1(0x28e)]()[_0x4fc0d1(0x5d8)]-_0x52c6d7[_0x4fc0d1(0x28e)]()[_0x4fc0d1(0x71a)]())),_0x4d21dc=Math[_0x4fc0d1(0x559)](..._0x4a9255[_0x4fc0d1(0xa4a)](_0x40c469=>_0x40c469[_0x4fc0d1(0x28e)]()['_baseY'])),_0x3fb0f6=_0x4a9255[_0x4fc0d1(0x3d0)](_0x559011=>_0x559011[_0x4fc0d1(0x764)]())['length'],_0x2543e3=_0x4a9255[_0x4fc0d1(0x3d0)](_0x3af1e0=>_0x3af1e0['isEnemy']())[_0x4fc0d1(0x482)];let _0x585193=0x0,_0x3d5475=0x0;if(_0x5060ee[_0x4fc0d1(0x591)](/front/i)){if(_0x4fc0d1(0x377)==='zRfps')_0x585193=_0x3fb0f6>=_0x2543e3?_0x32e3b4:_0x2af7a2;else{if(_0x2923a1['VisuMZ_2_BattleSystemCTB']&&_0x3627f5['isCTB']())return![];else{if(!_0x15f8d4[_0x4fc0d1(0x485)][_0x4fc0d1(0x161)])return![];const _0x2140fb=_0x94deb4[_0x4fc0d1(0x411)]()[_0x4fc0d1(0x3d0)](_0x2bae7b=>_0x2bae7b[_0x4fc0d1(0x5b1)]()&&_0x2bae7b[_0x4fc0d1(0x28d)]());return _0x2140fb['length']>0x0&&_0x3b6826[_0x4fc0d1(0x2fa)]()!==_0x2140fb[_0x2140fb[_0x4fc0d1(0x482)]-0x1];}}}else{if(_0x5060ee[_0x4fc0d1(0x591)](/middle/i))_0x585193=(_0x32e3b4+_0x2af7a2)/0x2,_0x34302f=-0x1;else{if(_0x5060ee[_0x4fc0d1(0x591)](/back/i)){if(_0x4fc0d1(0x7b2)!==_0x4fc0d1(0x7b2)){let _0x4fa9bd=_0x443125[_0x4fc0d1(0x3d8)](_0x1025f4[_0x4fc0d1(0x848)]);_0x5e1dc1[_0x4fc0d1(0x3bc)]>0x0&&(_0x4fa9bd+=_0x1f5785['abs'](_0x3e1a48['hpDamage'])),_0x3bb2dc[_0x4fc0d1(0x359)](_0x4fb0a7[_0x4fc0d1(0x848)],_0x4fa9bd);}else _0x585193=_0x3fb0f6>=_0x2543e3?_0x2af7a2:_0x32e3b4;}}}if(_0x5060ee[_0x4fc0d1(0x591)](/head/i))_0x3d5475=_0x14b0d6;else{if(_0x5060ee[_0x4fc0d1(0x591)](/center/i))_0x3d5475=(_0x14b0d6+_0x4d21dc)/0x2;else _0x5060ee[_0x4fc0d1(0x591)](/base/i)&&(_0x4fc0d1(0x284)!=='RXrXV'?_0x3d5475=_0x4d21dc:(this['preparePartyRefresh'](),this[_0x4fc0d1(0xb34)]=![],_0x2d531f['clearBattleRefreshRequest']()));}if(!_0x1e8bd5)return;for(const _0x2353c9 of _0x50bcd6){if(_0x4fc0d1(0x86e)===_0x4fc0d1(0x3ef))this[_0x4fc0d1(0x4da)](_0x44b3e1[_0x4fc0d1(0x343)],0x0);else{if(!_0x2353c9)continue;let _0x51ede9=_0x585193,_0x1b58f9=_0x3d5475;if(_0x249f18['match'](/none/i))_0x51ede9+=_0x656b7a,_0x1b58f9+=_0x25be47;else{if(_0x249f18[_0x4fc0d1(0x591)](/horz/i)&&_0x249f18['match'](/vert/i))_0x51ede9+=_0x2353c9[_0x4fc0d1(0x764)]()?-_0x656b7a:_0x656b7a,_0x1b58f9+=_0x2353c9['isActor']()?-_0x25be47:_0x25be47;else{if(_0x249f18[_0x4fc0d1(0x591)](/horz/i))_0x51ede9+=_0x2353c9[_0x4fc0d1(0x764)]()?-_0x656b7a:_0x656b7a,_0x1b58f9+=_0x25be47;else _0x249f18[_0x4fc0d1(0x591)](/vert/i)&&(_0x4fc0d1(0x2a5)!==_0x4fc0d1(0x2a5)?(_0x5bccf0['BattleCore'][_0x4fc0d1(0x6ea)]['call'](this,_0x4e30e8),this[_0x4fc0d1(0x8f2)](_0x3f3ed0)):(_0x51ede9+=_0x656b7a,_0x1b58f9+=_0x2353c9[_0x4fc0d1(0x764)]()?-_0x25be47:_0x25be47));}}_0x2353c9[_0x4fc0d1(0x169)](_0x51ede9,_0x1b58f9,_0x140452,_0x10fd67,_0xa51d50,_0x34302f),_0x2353c9['requestMotion'](_0x49b62c);}}if(_0x110186)_0x1e8bd5[_0x4fc0d1(0x49b)]('battleMove');}),PluginManager['registerCommand'](pluginData['name'],_0x4a3d8d(0x31f),_0x209f13=>{const _0x78663c=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x78663c(0x957)]())return;VisuMZ[_0x78663c(0x6a8)](_0x209f13,_0x209f13);const _0x585867=VisuMZ[_0x78663c(0x1a3)](_0x209f13[_0x78663c(0x2ff)]);let _0x5b2d8f=_0x209f13['Direction']['match'](/back/i);for(const _0xa563fd of _0x585867){if(!_0xa563fd)continue;if(_0x209f13[_0x78663c(0xac6)][_0x78663c(0x591)](/rand/i))_0x5b2d8f=Math[_0x78663c(0x4a9)](0x2);_0xa563fd[_0x78663c(0x91a)](!!_0x5b2d8f);}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x46d),_0x5e511a=>{const _0x2d9e37=_0x4a3d8d;if(!SceneManager[_0x2d9e37(0x930)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x2d9e37(0x6a8)](_0x5e511a,_0x5e511a);const _0x1afeff=VisuMZ[_0x2d9e37(0x1a3)](_0x5e511a[_0x2d9e37(0x2ff)]);let _0x461ab6=_0x5e511a['Point'];const _0x1710e3=_0x5e511a[_0x2d9e37(0x58f)];for(const _0x3801b3 of _0x1afeff){if(_0x2d9e37(0x6f0)===_0x2d9e37(0x6f0)){if(!_0x3801b3)continue;let _0x2b70a9=_0x3801b3[_0x2d9e37(0x28e)]()[_0x2d9e37(0x232)],_0x3c4b58=_0x3801b3[_0x2d9e37(0x28e)]()['_baseY'];if(_0x461ab6[_0x2d9e37(0x591)](/home/i)){if(_0x2d9e37(0x612)==='xHzBz')_0x2b70a9=_0x3801b3[_0x2d9e37(0x28e)]()['_homeX'],_0x3c4b58=_0x3801b3[_0x2d9e37(0x28e)]()[_0x2d9e37(0x649)];else{if(this[_0x2d9e37(0x28e)]())this[_0x2d9e37(0x28e)]()[_0x2d9e37(0x1ef)]();}}else{if(_0x461ab6[_0x2d9e37(0x591)](/center/i))_0x2b70a9=Graphics[_0x2d9e37(0x6c0)]/0x2,_0x3c4b58=Graphics[_0x2d9e37(0x8de)]/0x2;else{if(_0x461ab6[_0x2d9e37(0x591)](/point (\d+), (\d+)/i)){if('HMGuk'!=='HMGuk'){let _0x2b5042=_0x134c62[_0x2d9e37(0xb35)];_0x2b5042*=_0x349bb8[_0x2d9e37(0x65c)](_0x137899),_0x2b5042*=this[_0x2d9e37(0x601)]()[_0x2d9e37(0x897)](_0x33dcf5),_0x2b5042*=this[_0x2d9e37(0x3ed)](_0x38c223),_0x229dce[_0x2d9e37(0xa0d)]()<_0x2b5042&&(_0x3d5f49[_0x2d9e37(0xb53)]=!![],this[_0x2d9e37(0xa68)](_0x2108f5));}else _0x2b70a9=Number(RegExp['$1']),_0x3c4b58=Number(RegExp['$2']);}}}_0x3801b3[_0x2d9e37(0x420)](Math[_0x2d9e37(0x89f)](_0x2b70a9),Math['round'](_0x3c4b58),!!_0x1710e3);}else return 0x0;}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Movement_FaceTarget',_0x1cb63b=>{const _0x3eeca2=_0x4a3d8d;if(!SceneManager[_0x3eeca2(0x930)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x3eeca2(0x6a8)](_0x1cb63b,_0x1cb63b);const _0x41de19=VisuMZ['CreateActionSequenceTargets'](_0x1cb63b['Targets1']),_0x2b10a8=VisuMZ[_0x3eeca2(0x1a3)](_0x1cb63b[_0x3eeca2(0x790)]),_0x11b0c3=_0x2b10a8[_0x3eeca2(0xa4a)](_0x5b12fa=>_0x5b12fa&&_0x5b12fa[_0x3eeca2(0x28e)]()?_0x5b12fa[_0x3eeca2(0x28e)]()[_0x3eeca2(0x232)]:0x0)/(_0x2b10a8[_0x3eeca2(0x482)]||0x1),_0x1099a9=_0x2b10a8[_0x3eeca2(0xa4a)](_0x5c046f=>_0x5c046f&&_0x5c046f[_0x3eeca2(0x28e)]()?_0x5c046f[_0x3eeca2(0x28e)]()[_0x3eeca2(0x5d8)]:0x0)/(_0x2b10a8[_0x3eeca2(0x482)]||0x1),_0x58b2d0=_0x1cb63b['FaceAway'];for(const _0xbfb392 of _0x41de19){if(_0x3eeca2(0x62e)==='FtDoU'){if(!_0xbfb392)continue;_0xbfb392[_0x3eeca2(0x420)](Math[_0x3eeca2(0x89f)](_0x11b0c3),Math[_0x3eeca2(0x89f)](_0x1099a9),!!_0x58b2d0);}else this[_0x3eeca2(0x87c)](this[_0x3eeca2(0x631)]);}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Movement_Float',_0x3a4eba=>{const _0x3c165b=_0x4a3d8d;if(!SceneManager[_0x3c165b(0x930)]())return;VisuMZ['ConvertParams'](_0x3a4eba,_0x3a4eba);const _0x2899bb=$gameTemp[_0x3c165b(0x202)](),_0x5d74dd=VisuMZ[_0x3c165b(0x1a3)](_0x3a4eba[_0x3c165b(0x2ff)]),_0x4d35b7=_0x3a4eba[_0x3c165b(0x3db)],_0x385fa3=_0x3a4eba[_0x3c165b(0x936)],_0x40b8d5=_0x3a4eba['EasingType'],_0x11b7dc=_0x3a4eba[_0x3c165b(0x6b2)];if(!_0x2899bb)return;for(const _0x362e5e of _0x5d74dd){if(_0x3c165b(0xb1d)==='PeGQb'){if(!_0x362e5e)continue;_0x362e5e['floatBattler'](_0x4d35b7,_0x385fa3,_0x40b8d5);}else this[_0x3c165b(0xa34)]['x']=_0x23099d[_0x3c165b(0xb49)]*0xa,this[_0x3c165b(0xa34)]['y']=_0x56dc83[_0x3c165b(0x2cc)]*0xa;}if(_0x11b7dc)_0x2899bb[_0x3c165b(0x49b)](_0x3c165b(0xa89));}),PluginManager['registerCommand'](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x2f8),_0x59c934=>{const _0x2e5569=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2e5569(0x6a8)](_0x59c934,_0x59c934);const _0x5e06da=$gameTemp[_0x2e5569(0x202)]();if(!_0x5e06da)return;const _0xb223fe=VisuMZ['CreateActionSequenceTargets'](_0x59c934['Targets']);for(const _0x3f0908 of _0xb223fe){if(!_0x3f0908)continue;_0x3f0908[_0x2e5569(0x5c8)]();}BattleManager[_0x2e5569(0x18b)]&&BattleManager[_0x2e5569(0x18b)]['performActionEnd']();if(_0x59c934[_0x2e5569(0x316)])_0x5e06da[_0x2e5569(0x49b)](_0x2e5569(0x9e0));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],_0x4a3d8d(0x251),_0x13ff01=>{const _0x385668=_0x4a3d8d;if(!SceneManager[_0x385668(0x930)]())return;VisuMZ[_0x385668(0x6a8)](_0x13ff01,_0x13ff01);const _0x2984a0=$gameTemp['getLastPluginCommandInterpreter'](),_0x33399b=VisuMZ[_0x385668(0x1a3)](_0x13ff01[_0x385668(0x2ff)]),_0x5024ab=_0x13ff01[_0x385668(0x3db)],_0x5b9417=_0x13ff01[_0x385668(0x936)],_0x148325=_0x13ff01[_0x385668(0x91f)];if(!_0x2984a0)return;for(const _0xbcccc2 of _0x33399b){if(_0x385668(0x6b5)!=='nZfyk'){if(!_0xbcccc2)continue;_0xbcccc2[_0x385668(0x759)](_0x5024ab,_0x5b9417);}else this[_0x385668(0x906)](_0x385668(0x939),[_0x786401],_0x2feaed,_0x4d333f),this['push']('performMoveToTargets',_0x2989b0,_0xb98e68,'front\x20center',_0x4212e4,!![],_0x385668(0x88e),!![]),this[_0x385668(0x906)]('requestMotion',[_0x18c86f],_0x385668(0x460)),this[_0x385668(0x906)](_0x385668(0x780));}if(_0x148325)_0x2984a0[_0x385668(0x49b)](_0x385668(0xba4));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],_0x4a3d8d(0x73c),_0x41696c=>{const _0x4abcf6=_0x4a3d8d;if(!SceneManager[_0x4abcf6(0x930)]())return;if(!$gameSystem[_0x4abcf6(0x957)]())return;VisuMZ['ConvertParams'](_0x41696c,_0x41696c);const _0x421bd1=$gameTemp[_0x4abcf6(0x202)](),_0x3558fb=VisuMZ[_0x4abcf6(0x1a3)](_0x41696c[_0x4abcf6(0x2ff)]),_0x5dbadf=_0x41696c[_0x4abcf6(0xb40)],_0x2ec37e=_0x41696c['DistanceX'],_0x259820=_0x41696c[_0x4abcf6(0xbef)],_0x560aac=_0x41696c[_0x4abcf6(0x936)],_0x502293=_0x41696c[_0x4abcf6(0x374)],_0x1d622f=_0x41696c[_0x4abcf6(0x443)],_0x993cf3=_0x41696c[_0x4abcf6(0x590)],_0x448ee8=_0x41696c[_0x4abcf6(0x316)];if(!_0x421bd1)return;for(const _0xd97177 of _0x3558fb){if(!_0xd97177)continue;let _0x3130be=_0x2ec37e,_0x49dcd5=_0x259820;if(_0x5dbadf[_0x4abcf6(0x591)](/horz/i))_0x3130be*=_0xd97177[_0x4abcf6(0x764)]()?-0x1:0x1;if(_0x5dbadf[_0x4abcf6(0x591)](/vert/i))_0x49dcd5*=_0xd97177[_0x4abcf6(0x764)]()?-0x1:0x1;_0xd97177[_0x4abcf6(0x7ad)](_0x3130be,_0x49dcd5,_0x560aac,_0x502293,_0x1d622f),_0xd97177[_0x4abcf6(0x834)](_0x993cf3);}if(_0x448ee8)_0x421bd1[_0x4abcf6(0x49b)]('battleMove');}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x378),_0x30912a=>{const _0x1c4d01=_0x4a3d8d;if(!SceneManager[_0x1c4d01(0x930)]())return;if(!$gameSystem[_0x1c4d01(0x957)]())return;VisuMZ['ConvertParams'](_0x30912a,_0x30912a);const _0x1e407c=$gameTemp[_0x1c4d01(0x202)](),_0x1ac1e4=VisuMZ[_0x1c4d01(0x1a3)](_0x30912a[_0x1c4d01(0x2ff)]),_0x384100=_0x30912a[_0x1c4d01(0xa0c)],_0x562297=_0x30912a[_0x1c4d01(0xa5b)],_0x5f172e=_0x30912a[_0x1c4d01(0x76e)],_0x10d376=_0x30912a[_0x1c4d01(0xa65)],_0x1b2e29=_0x30912a['Duration'],_0x23da83=_0x30912a['FaceDirection'],_0x359f54=_0x30912a['EasingType'],_0x41834a=_0x30912a[_0x1c4d01(0x590)],_0x2adefc=_0x30912a[_0x1c4d01(0x316)];if(!_0x1e407c)return;for(const _0x589f51 of _0x1ac1e4){if(!_0x589f51)continue;let _0x41160b=_0x589f51['battler']()[_0x1c4d01(0x232)],_0xd40a02=_0x589f51['battler']()[_0x1c4d01(0x5d8)];if(_0x384100[_0x1c4d01(0x591)](/home/i)){if('emSFT'===_0x1c4d01(0x3b7))_0x41160b=_0x589f51[_0x1c4d01(0x28e)]()[_0x1c4d01(0x966)],_0xd40a02=_0x589f51['battler']()[_0x1c4d01(0x649)];else return this[_0x1c4d01(0x4c4)]();}else{if(_0x384100['match'](/center/i))_0x41160b=Graphics[_0x1c4d01(0x6c0)]/0x2,_0xd40a02=Graphics['boxHeight']/0x2;else _0x384100['match'](/point (\d+), (\d+)/i)&&(_0x41160b=Number(RegExp['$1']),_0xd40a02=Number(RegExp['$2']));}if(_0x562297['match'](/none/i))_0x41160b+=_0x5f172e,_0xd40a02+=_0x10d376;else{if(_0x562297[_0x1c4d01(0x591)](/horz/i)&&_0x562297[_0x1c4d01(0x591)](/vert/i))_0x41160b+=_0x589f51[_0x1c4d01(0x764)]()?-_0x5f172e:_0x5f172e,_0xd40a02+=_0x589f51[_0x1c4d01(0x764)]()?-_0x10d376:_0x10d376;else{if(_0x562297[_0x1c4d01(0x591)](/horz/i))'BFikf'===_0x1c4d01(0x262)?_0x3e6860['VisuMZ_0_CoreEngine']?_0x2d03e9[_0x1c4d01(0xc25)]([this],_0x3cdac5):_0x5c4519[_0x1c4d01(0x5af)]([this],_0x14996b):(_0x41160b+=_0x589f51[_0x1c4d01(0x764)]()?-_0x5f172e:_0x5f172e,_0xd40a02+=_0x10d376);else _0x562297[_0x1c4d01(0x591)](/vert/i)&&(_0x41160b+=_0x5f172e,_0xd40a02+=_0x589f51[_0x1c4d01(0x764)]()?-_0x10d376:_0x10d376);}}_0x589f51[_0x1c4d01(0x9d5)](_0x41160b,_0xd40a02,_0x1b2e29,_0x23da83,_0x359f54,-0x1),_0x589f51[_0x1c4d01(0x834)](_0x41834a);}if(_0x2adefc)_0x1e407c[_0x1c4d01(0x49b)](_0x1c4d01(0x9e0));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x367),_0x3d5587=>{const _0x32968b=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x32968b(0x957)]())return;VisuMZ[_0x32968b(0x6a8)](_0x3d5587,_0x3d5587);const _0x43c3e4=$gameTemp['getLastPluginCommandInterpreter'](),_0x4e3a56=VisuMZ['CreateActionSequenceTargets'](_0x3d5587[_0x32968b(0x582)]),_0x2f6afe=VisuMZ['CreateActionSequenceTargets'](_0x3d5587[_0x32968b(0x790)]),_0xe2de74=_0x3d5587[_0x32968b(0x394)];let _0x4edeb9=_0x3d5587['MeleeDistance'];const _0x2cbe3=_0x3d5587['OffsetAdjust'],_0x466f17=_0x3d5587['OffsetX'],_0x20c2d9=_0x3d5587['OffsetY'],_0x140b5f=_0x3d5587[_0x32968b(0x936)],_0x295d9b=_0x3d5587[_0x32968b(0x374)],_0x106c1b=_0x3d5587[_0x32968b(0x443)],_0x586d7d=_0x3d5587['MotionType'],_0x42a93e=_0x3d5587[_0x32968b(0x316)],_0x573748=Math[_0x32968b(0x885)](..._0x2f6afe[_0x32968b(0xa4a)](_0x4581f0=>_0x4581f0[_0x32968b(0x28e)]()[_0x32968b(0x232)]-_0x4581f0[_0x32968b(0x28e)]()[_0x32968b(0x34f)]()/0x2)),_0x17b55d=Math[_0x32968b(0x559)](..._0x2f6afe[_0x32968b(0xa4a)](_0x59c92d=>_0x59c92d[_0x32968b(0x28e)]()['_baseX']+_0x59c92d[_0x32968b(0x28e)]()[_0x32968b(0x34f)]()/0x2)),_0x4f5615=Math[_0x32968b(0x885)](..._0x2f6afe[_0x32968b(0xa4a)](_0x495da9=>_0x495da9[_0x32968b(0x28e)]()['_baseY']-_0x495da9[_0x32968b(0x28e)]()[_0x32968b(0x71a)]())),_0x384cf5=Math[_0x32968b(0x559)](..._0x2f6afe[_0x32968b(0xa4a)](_0x542ce8=>_0x542ce8[_0x32968b(0x28e)]()['_baseY'])),_0x3741a0=_0x2f6afe[_0x32968b(0x3d0)](_0x4989db=>_0x4989db[_0x32968b(0x764)]())[_0x32968b(0x482)],_0x43c787=_0x2f6afe[_0x32968b(0x3d0)](_0x5de3b6=>_0x5de3b6[_0x32968b(0x87a)]())[_0x32968b(0x482)];let _0x4b775a=0x0,_0x1f00ca=0x0;if(_0xe2de74[_0x32968b(0x591)](/front/i))'aKHqv'!=='npZZA'?_0x4b775a=_0x3741a0>=_0x43c787?_0x573748:_0x17b55d:_0x2de950['Actor']['PrioritySortActors']=!![];else{if(_0xe2de74[_0x32968b(0x591)](/middle/i))_0x4b775a=(_0x573748+_0x17b55d)/0x2,_0x4edeb9=-0x1;else _0xe2de74[_0x32968b(0x591)](/back/i)&&(_0x4b775a=_0x3741a0>=_0x43c787?_0x17b55d:_0x573748);}if(_0xe2de74[_0x32968b(0x591)](/head/i))_0x32968b(0x5d3)===_0x32968b(0xab6)?_0x10f19f['push'](_0x32968b(0x7da),_0x2901e8,_0x59ce23):_0x1f00ca=_0x4f5615;else{if(_0xe2de74['match'](/center/i))_0x1f00ca=(_0x4f5615+_0x384cf5)/0x2;else _0xe2de74[_0x32968b(0x591)](/base/i)&&(_0x1f00ca=_0x384cf5);}if(!_0x43c3e4)return;for(const _0x412882 of _0x4e3a56){if(!_0x412882)continue;let _0x5548dc=_0x4b775a,_0x307726=_0x1f00ca;if(_0x2cbe3[_0x32968b(0x591)](/none/i)){if('qzLRu'===_0x32968b(0x728))_0x5548dc+=_0x466f17,_0x307726+=_0x20c2d9;else return _0x14fdca['BattleCore'][_0x32968b(0xb75)][_0x32968b(0x1e5)]['MaxLines'];}else{if(_0x2cbe3['match'](/horz/i)&&_0x2cbe3[_0x32968b(0x591)](/vert/i)){if(_0x32968b(0x2bb)===_0x32968b(0x1b2)){const _0x258f98=_0x3787f0[_0x32968b(0x485)][_0x32968b(0xb75)][_0x32968b(0xb55)];this[_0x32968b(0x744)]=_0x258f98[_0x32968b(0x497)][_0x32968b(0x5cf)](0x0),this[_0x32968b(0x171)]=_0x258f98[_0x32968b(0xaaa)];}else _0x5548dc+=_0x412882[_0x32968b(0x764)]()?-_0x466f17:_0x466f17,_0x307726+=_0x412882[_0x32968b(0x764)]()?-_0x20c2d9:_0x20c2d9;}else{if(_0x2cbe3[_0x32968b(0x591)](/horz/i)){if('gWwCi'===_0x32968b(0x90b)){const _0x3b7197=_0x148b58[_0x32968b(0x3c4)][_0x32968b(0x5cf)][_0x32968b(0xaf0)](arguments,0x1),_0xcddaca={'name':_0xf167e9,'params':_0x3b7197},_0x46e351=this['_methods'][_0x32968b(0xa4a)](_0x126dcc=>_0x126dcc['name'])['indexOf'](_0x32968b(0x874));_0x46e351>=0x0?this['_methods'][_0x32968b(0x7a8)](_0x46e351,0x0,_0xcddaca):this[_0x32968b(0x4dc)]['push'](_0xcddaca);}else _0x5548dc+=_0x412882['isActor']()?-_0x466f17:_0x466f17,_0x307726+=_0x20c2d9;}else{if(_0x2cbe3['match'](/vert/i)){if(_0x32968b(0x4ec)!=='gqWrt')_0x5548dc+=_0x466f17,_0x307726+=_0x412882[_0x32968b(0x764)]()?-_0x20c2d9:_0x20c2d9;else{const _0x4e1e2c=this[_0x32968b(0xa7c)][_0x32968b(0x2b7)](this[_0x32968b(0x27e)]);this[_0x32968b(0x652)](_0x4e1e2c);}}}}}_0x412882[_0x32968b(0x9d5)](_0x5548dc,_0x307726,_0x140b5f,_0x295d9b,_0x106c1b,_0x4edeb9),_0x412882[_0x32968b(0x834)](_0x586d7d);}if(_0x42a93e)_0x43c3e4[_0x32968b(0x49b)]('battleMove');}),PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],_0x4a3d8d(0x67c),_0x507f2d=>{const _0x3858cc=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3858cc(0x6a8)](_0x507f2d,_0x507f2d);const _0x24dc64=$gameTemp[_0x3858cc(0x202)](),_0x46819f=VisuMZ[_0x3858cc(0x1a3)](_0x507f2d[_0x3858cc(0x2ff)]),_0x559eb4=_0x507f2d[_0x3858cc(0x2e0)],_0x7aba86=_0x507f2d[_0x3858cc(0x936)],_0xdc9873=_0x507f2d['EasingType'],_0x36ce44=_0x507f2d[_0x3858cc(0x310)];if(!_0x24dc64)return;for(const _0x176b14 of _0x46819f){if(_0x3858cc(0x4e9)===_0x3858cc(0xbe1)){if(!_0x4eba1a)return;if(!this['canAddSkillCommand'](_0x584694))return;const _0x2cd87f=this[_0x3858cc(0x75c)](),_0x5d1ca7=_0x375fc4['battleCommandName'](_0x430faf),_0x580a92=_0x237327[_0x3858cc(0xb79)](_0x5aadf3),_0xbad239=_0x2cd87f==='text'?_0x5d1ca7:_0x3858cc(0xc28)[_0x3858cc(0x8dd)](_0x580a92,_0x5d1ca7),_0x41050e=this[_0x3858cc(0x6dd)][_0x3858cc(0x355)](_0x1aea14);this[_0x3858cc(0x198)](_0xbad239,'singleSkill',_0x41050e,_0x53173c['id']);}else{if(!_0x176b14)continue;_0x176b14[_0x3858cc(0x3ba)](_0x559eb4,_0x7aba86,_0xdc9873);}}if(_0x36ce44)_0x24dc64[_0x3858cc(0x49b)](_0x3858cc(0xbb9));}),PluginManager['registerCommand'](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x253),_0x12e0a8=>{const _0x229008=_0x4a3d8d;if(!SceneManager[_0x229008(0x930)]())return;VisuMZ[_0x229008(0x6a8)](_0x12e0a8,_0x12e0a8);const _0x292a88=$gameTemp[_0x229008(0x202)](),_0x1a42c0=VisuMZ[_0x229008(0x1a3)](_0x12e0a8[_0x229008(0x2ff)]),_0x50975c=_0x12e0a8[_0x229008(0x1f2)],_0x49b720=_0x12e0a8['ScaleY'],_0x4e2103=_0x12e0a8[_0x229008(0x936)],_0x3fe51d=_0x12e0a8[_0x229008(0x443)],_0x310563=_0x12e0a8[_0x229008(0x35c)];if(!_0x292a88)return;for(const _0x51b5af of _0x1a42c0){if(!_0x51b5af)continue;_0x51b5af[_0x229008(0x904)](_0x50975c,_0x49b720,_0x4e2103,_0x3fe51d);}if(_0x310563)_0x292a88['setWaitMode'](_0x229008(0xa31));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],_0x4a3d8d(0x2e4),_0xe77f4f=>{const _0x24bd6a=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x24bd6a(0x6a8)](_0xe77f4f,_0xe77f4f);const _0x5afa5d=$gameTemp[_0x24bd6a(0x202)](),_0x39ae9f=VisuMZ[_0x24bd6a(0x1a3)](_0xe77f4f[_0x24bd6a(0x2ff)]),_0x38457c=_0xe77f4f[_0x24bd6a(0x99f)],_0x456684=_0xe77f4f[_0x24bd6a(0x576)],_0x53a993=_0xe77f4f[_0x24bd6a(0x936)],_0x36cae9=_0xe77f4f[_0x24bd6a(0x443)],_0x437b61=_0xe77f4f[_0x24bd6a(0xa47)];if(!_0x5afa5d)return;for(const _0x2ad38b of _0x39ae9f){if(!_0x2ad38b)continue;_0x2ad38b[_0x24bd6a(0x541)](_0x38457c,_0x456684,_0x53a993,_0x36cae9);}if(_0x437b61)_0x5afa5d[_0x24bd6a(0x49b)](_0x24bd6a(0x922));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x814),_0x18187d=>{const _0x4b0212=_0x4a3d8d;if(!SceneManager[_0x4b0212(0x930)]())return;VisuMZ[_0x4b0212(0x6a8)](_0x18187d,_0x18187d);const _0xe9bc9c=$gameTemp['getLastPluginCommandInterpreter'](),_0x2bd86c=VisuMZ[_0x4b0212(0x1a3)](_0x18187d[_0x4b0212(0x2ff)]),_0x320d3c=_0x18187d[_0x4b0212(0x8d2)],_0x2905a0=_0x18187d['Duration'],_0x57360f=_0x18187d['EasingType'],_0x15300d=_0x18187d[_0x4b0212(0x2d5)],_0x444e81=_0x18187d[_0x4b0212(0xafd)];if(!_0xe9bc9c)return;for(const _0x327025 of _0x2bd86c){if(_0x4b0212(0xb78)===_0x4b0212(0x585)){const _0x1a7992=_0x43c856['BattleCore'][_0x4b0212(0xb75)][_0x4b0212(0x225)];if(_0x1a7992&&_0x1a7992['jsScaleUp'])return _0x1a7992[_0x4b0212(0x78c)][_0x4b0212(0xaf0)](this);this[_0x4b0212(0xb49)]=_0x1968be[_0x4b0212(0xb49)],this['height']=_0x33121c['height'];const _0x55326d=_0x24a193[_0x4b0212(0x559)](0x1,this['width']/this['bitmap'][_0x4b0212(0xb49)]),_0x26fc20=_0x3e4c67[_0x4b0212(0x559)](0x1,this[_0x4b0212(0x2cc)]/this[_0x4b0212(0x2dd)][_0x4b0212(0x2cc)]),_0x137475=_0x527ec1[_0x4b0212(0x559)](_0x55326d,_0x26fc20);this[_0x4b0212(0x3cb)]['x']=_0x137475,this[_0x4b0212(0x3cb)]['y']=_0x137475,this['x']=(_0x2e8494['width']-this[_0x4b0212(0xb49)])/0x2,this['y']=_0x230584[_0x4b0212(0x2cc)]-this[_0x4b0212(0x2cc)];}else{if(!_0x327025)continue;_0x327025[_0x4b0212(0xb5e)](_0x320d3c,_0x2905a0,_0x57360f,_0x15300d);}}if(_0x444e81)_0xe9bc9c['setWaitMode'](_0x4b0212(0x1e1));}),PluginManager['registerCommand'](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x594),_0x236cfd=>{const _0x5bd042=_0x4a3d8d;if(!SceneManager[_0x5bd042(0x930)]())return;const _0x5cbc94=$gameTemp[_0x5bd042(0x202)]();if(!_0x5cbc94)return;_0x5cbc94[_0x5bd042(0x49b)](_0x5bd042(0xa89));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],_0x4a3d8d(0xc0a),_0x13ef68=>{const _0x90fbb8=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;const _0xd2489c=$gameTemp[_0x90fbb8(0x202)]();if(!_0xd2489c)return;_0xd2489c['setWaitMode'](_0x90fbb8(0xba4));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Movement_WaitForMovement',_0x45eb7c=>{const _0x335f79=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;const _0x17a011=$gameTemp[_0x335f79(0x202)]();if(!_0x17a011)return;_0x17a011[_0x335f79(0x49b)](_0x335f79(0x9e0));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],_0x4a3d8d(0x31d),_0x4812d6=>{const _0x5a607b=_0x4a3d8d;if(!SceneManager[_0x5a607b(0x930)]())return;const _0x302405=$gameTemp[_0x5a607b(0x202)]();if(!_0x302405)return;_0x302405[_0x5a607b(0x49b)](_0x5a607b(0xbb9));}),PluginManager['registerCommand'](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0xa46),_0xb85c48=>{const _0x300759=_0x4a3d8d;if(!SceneManager[_0x300759(0x930)]())return;const _0x13290e=$gameTemp[_0x300759(0x202)]();if(!_0x13290e)return;_0x13290e[_0x300759(0x49b)](_0x300759(0xa31));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x68a),_0x4a47f1=>{const _0x1a2d0f=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;const _0x5a9a1b=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x5a9a1b)return;_0x5a9a1b[_0x1a2d0f(0x49b)](_0x1a2d0f(0x922));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x1e2),_0x2a79ae=>{const _0x19b76a=_0x4a3d8d;if(!SceneManager[_0x19b76a(0x930)]())return;const _0x14ec16=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x14ec16)return;_0x14ec16['setWaitMode']('battleSpin');}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x81e),_0x489f5e=>{const _0x3b1f78=_0x4a3d8d;if(!SceneManager[_0x3b1f78(0x930)]())return;if(!Imported[_0x3b1f78(0x859)])return;VisuMZ[_0x3b1f78(0x6a8)](_0x489f5e,_0x489f5e);const _0x3542da=$gameTemp[_0x3b1f78(0x202)](),_0x4689bd=_0x489f5e['WaitForProjectile'];if(!_0x3542da)return;const _0x5819e5=BattleManager[_0x3b1f78(0x94c)];if(!_0x5819e5)return;_0x5819e5[_0x3b1f78(0xb1b)](_0x489f5e);if(_0x4689bd)_0x3542da[_0x3b1f78(0x49b)]('battleProjectiles');}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x507),_0x5e14f3=>{const _0xc27381=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0xc27381(0x6a8)](_0x5e14f3,_0x5e14f3);const _0x3c3d90=$gameTemp[_0xc27381(0x202)](),_0x6a0ef7=_0x5e14f3[_0xc27381(0x92a)];if(!_0x3c3d90)return;const _0x314046=BattleManager[_0xc27381(0x94c)];if(!_0x314046)return;_0x314046[_0xc27381(0xb1b)](_0x5e14f3);if(_0x6a0ef7)_0x3c3d90[_0xc27381(0x49b)](_0xc27381(0x914));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Projectile_Picture',_0x526c07=>{const _0x25940d=_0x4a3d8d;if(!SceneManager[_0x25940d(0x930)]())return;if(!Imported[_0x25940d(0x859)])return;VisuMZ['ConvertParams'](_0x526c07,_0x526c07);const _0x522910=$gameTemp[_0x25940d(0x202)](),_0x57a303=_0x526c07[_0x25940d(0x92a)];if(!_0x522910)return;const _0x3f8e63=BattleManager[_0x25940d(0x94c)];if(!_0x3f8e63)return;_0x3f8e63[_0x25940d(0xb1b)](_0x526c07);if(_0x57a303)_0x522910[_0x25940d(0x49b)](_0x25940d(0x914));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],'ActSeq_ChangeSkew',_0x4bd495=>{const _0x267f1a=_0x4a3d8d;if(!SceneManager[_0x267f1a(0x930)]())return;if(!Imported[_0x267f1a(0x613)])return;VisuMZ['ConvertParams'](_0x4bd495,_0x4bd495);const _0x1975d5=$gameTemp[_0x267f1a(0x202)](),_0x15185e=_0x4bd495[_0x267f1a(0xa47)];if(!_0x1975d5)return;$gameScreen[_0x267f1a(0x54d)](_0x4bd495[_0x267f1a(0x99f)],_0x4bd495[_0x267f1a(0x576)],_0x4bd495[_0x267f1a(0x936)],_0x4bd495['EasingType']);if(_0x15185e)_0x1975d5[_0x267f1a(0x49b)](_0x267f1a(0x8a0));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Skew_Reset',_0x4829a8=>{const _0xe7f0e5=_0x4a3d8d;if(!SceneManager[_0xe7f0e5(0x930)]())return;if(!Imported[_0xe7f0e5(0x613)])return;VisuMZ['ConvertParams'](_0x4829a8,_0x4829a8);const _0x1ebed3=$gameTemp[_0xe7f0e5(0x202)](),_0x2e006d=_0x4829a8[_0xe7f0e5(0xa47)];if(!_0x1ebed3)return;$gameScreen['setBattleSkew'](0x0,0x0,_0x4829a8[_0xe7f0e5(0x936)],_0x4829a8[_0xe7f0e5(0x443)]);if(_0x2e006d)_0x1ebed3[_0xe7f0e5(0x49b)]('battleSkew');}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],'ActSeq_Skew_WaitForSkew',_0x303c60=>{const _0x931f24=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0xfb3d06=$gameTemp[_0x931f24(0x202)]();if(!_0xfb3d06)return;_0xfb3d06['setWaitMode'](_0x931f24(0x8a0));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0xa21),_0x410dfb=>{const _0x47a00a=_0x4a3d8d;if(!SceneManager[_0x47a00a(0x930)]())return;VisuMZ[_0x47a00a(0x6a8)](_0x410dfb,_0x410dfb);const _0x38c43c=$gameTemp['getLastPluginCommandInterpreter'](),_0x108b0b=_0x410dfb[_0x47a00a(0x73a)],_0x4ab083=_0x410dfb['JumpToLabel'];if(!_0x38c43c)return;BattleManager[_0x47a00a(0x7d0)]=_0x108b0b,BattleManager['_target']=BattleManager[_0x47a00a(0x8e6)]?BattleManager[_0x47a00a(0x8e6)][BattleManager[_0x47a00a(0x7d0)]]||null:null;if(BattleManager['_target']&&_0x4ab083[_0x47a00a(0x302)]()['trim']()!=='UNTITLED'){if(_0x47a00a(0x8aa)===_0x47a00a(0x9af)){if(!_0x225fcb[_0x47a00a(0x485)][_0x47a00a(0xb75)][_0x47a00a(0x620)][_0x47a00a(0xabc)])return;const _0x285c37=this[_0x47a00a(0x2fa)](_0x37668e),_0xc81b0e=this[_0x47a00a(0x684)](_0x502004);_0xc81b0e['width']=_0x570723[_0x47a00a(0x9fd)],_0xc81b0e['height']-=0x2,this[_0x47a00a(0x57e)](_0x285c37,_0xc81b0e['x']+0x1,_0xc81b0e['y']+0x1,_0xc81b0e[_0x47a00a(0xb49)],_0xc81b0e[_0x47a00a(0x2cc)]);}else _0x38c43c[_0x47a00a(0xbd3)]([_0x4ab083]);}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData['name'],_0x4a3d8d(0x9b7),_0xd56d42=>{const _0x1a5dd8=_0x4a3d8d;if(!SceneManager[_0x1a5dd8(0x930)]())return;VisuMZ['ConvertParams'](_0xd56d42,_0xd56d42);const _0x201f3c=$gameTemp[_0x1a5dd8(0x202)](),_0xb7ba58=_0xd56d42[_0x1a5dd8(0x8af)];if(!_0x201f3c)return;BattleManager[_0x1a5dd8(0x7d0)]++,BattleManager['_target']=BattleManager['_allTargets'][BattleManager['_targetIndex']]||null,BattleManager[_0x1a5dd8(0x86c)]&&_0xb7ba58[_0x1a5dd8(0x302)]()[_0x1a5dd8(0x82d)]()!=='UNTITLED'&&_0x201f3c[_0x1a5dd8(0xbd3)]([_0xb7ba58]);}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x17a),_0x503d6=>{const _0xe2c7f7=_0x4a3d8d;if(!SceneManager[_0xe2c7f7(0x930)]())return;VisuMZ[_0xe2c7f7(0x6a8)](_0x503d6,_0x503d6);const _0x2b4e9c=$gameTemp['getLastPluginCommandInterpreter'](),_0x238336=_0x503d6['JumpToLabel'];if(!_0x2b4e9c)return;BattleManager[_0xe2c7f7(0x7d0)]--,BattleManager[_0xe2c7f7(0x86c)]=BattleManager[_0xe2c7f7(0x8e6)][BattleManager['_targetIndex']]||null,BattleManager[_0xe2c7f7(0x86c)]&&_0x238336['toUpperCase']()[_0xe2c7f7(0x82d)]()!=='UNTITLED'&&_0x2b4e9c[_0xe2c7f7(0xbd3)]([_0x238336]);}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0xb12),_0x428cba=>{const _0x117282=_0x4a3d8d;if(!SceneManager[_0x117282(0x930)]())return;VisuMZ['ConvertParams'](_0x428cba,_0x428cba);const _0x1115b7=$gameTemp[_0x117282(0x202)](),_0x308542=_0x428cba['ForceRandom'],_0x434e9f=_0x428cba[_0x117282(0x8af)];if(!_0x1115b7)return;const _0x4429de=BattleManager[_0x117282(0x7d0)];for(;;){BattleManager['_targetIndex']=Math['randomInt'](BattleManager[_0x117282(0x8e6)][_0x117282(0x482)]);if(!_0x308542)break;if(BattleManager[_0x117282(0x7d0)]!==_0x4429de)break;if(BattleManager[_0x117282(0x8e6)][_0x117282(0x482)]<=0x1){if(_0x117282(0x774)===_0x117282(0x774)){BattleManager[_0x117282(0x7d0)]=0x0;break;}else return 0x24;}}BattleManager['_target']=BattleManager[_0x117282(0x8e6)][BattleManager[_0x117282(0x7d0)]]||null,BattleManager['_target']&&_0x434e9f[_0x117282(0x302)]()[_0x117282(0x82d)]()!==_0x117282(0x35d)&&_0x1115b7[_0x117282(0xbd3)]([_0x434e9f]);}),PluginManager['registerCommand'](pluginData['name'],_0x4a3d8d(0x451),_0x496cec=>{const _0x5b5b80=_0x4a3d8d;if(!SceneManager[_0x5b5b80(0x930)]())return;VisuMZ[_0x5b5b80(0x6a8)](_0x496cec,_0x496cec);const _0x42e271=VisuMZ[_0x5b5b80(0x1a3)](_0x496cec[_0x5b5b80(0x2ff)]);for(const _0x4b7682 of _0x42e271){if(!_0x4b7682)continue;if(!_0x4b7682[_0x5b5b80(0x764)]())continue;_0x4b7682['clearActiveWeaponSlot']();}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x727),_0x19d4ae=>{const _0x51f7b6=_0x4a3d8d;if(!SceneManager[_0x51f7b6(0x930)]())return;VisuMZ[_0x51f7b6(0x6a8)](_0x19d4ae,_0x19d4ae);const _0x3f63a9=$gameTemp['getLastPluginCommandInterpreter']();let _0x368d89=![];const _0x25967d=_0x19d4ae[_0x51f7b6(0x8af)],_0x5b35c0=VisuMZ[_0x51f7b6(0x1a3)](_0x19d4ae[_0x51f7b6(0x2ff)]);for(const _0x29f4ad of _0x5b35c0){if(!_0x29f4ad)continue;if(!_0x29f4ad[_0x51f7b6(0x764)]())continue;_0x29f4ad[_0x51f7b6(0xc1c)](),_0x29f4ad[_0x51f7b6(0x91b)]()['length']>0x0?_0x368d89=!![]:_0x29f4ad[_0x51f7b6(0x721)]();}_0x368d89&&_0x25967d[_0x51f7b6(0x302)]()[_0x51f7b6(0x82d)]()!==_0x51f7b6(0x35d)&&_0x3f63a9[_0x51f7b6(0xbd3)]([_0x25967d]);}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0xb2f),_0x4fb1a2=>{const _0x149570=_0x4a3d8d;if(!SceneManager[_0x149570(0x930)]())return;VisuMZ[_0x149570(0x6a8)](_0x4fb1a2,_0x4fb1a2);let _0x122410=_0x4fb1a2[_0x149570(0x57d)];_0x122410--,_0x122410=Math[_0x149570(0x559)](_0x122410,0x0);const _0x2e3820=VisuMZ[_0x149570(0x1a3)](_0x4fb1a2[_0x149570(0x2ff)]);for(const _0x5d3e79 of _0x2e3820){if(_0x149570(0x81c)===_0x149570(0xc0e))this[_0x149570(0x28e)]()&&this[_0x149570(0x28e)]()['refreshMotion']();else{if(!_0x5d3e79)continue;if(!_0x5d3e79[_0x149570(0x764)]())continue;_0x5d3e79[_0x149570(0x342)](_0x122410);}}}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x51a),_0x570adb=>{const _0x3b86da=_0x4a3d8d;if(!SceneManager[_0x3b86da(0x930)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x3b86da(0x6a8)](_0x570adb,_0x570adb);const _0x409716=$gameTemp['getLastPluginCommandInterpreter'](),_0x4001ce=_0x570adb[_0x3b86da(0xb0a)];if(!_0x409716)return;$gameScreen[_0x3b86da(0x715)](_0x570adb[_0x3b86da(0x56e)],_0x570adb['Duration'],_0x570adb[_0x3b86da(0x443)]);if(_0x4001ce)_0x409716[_0x3b86da(0x49b)](_0x3b86da(0x6c2));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0xbde),_0x4ce830=>{const _0x5dcb79=_0x4a3d8d;if(!SceneManager[_0x5dcb79(0x930)]())return;if(!Imported[_0x5dcb79(0x613)])return;VisuMZ[_0x5dcb79(0x6a8)](_0x4ce830,_0x4ce830);const _0x5c87b9=$gameTemp['getLastPluginCommandInterpreter'](),_0xedf174=_0x4ce830[_0x5dcb79(0xb0a)];if(!_0x5c87b9)return;$gameScreen[_0x5dcb79(0x715)](0x1,_0x4ce830[_0x5dcb79(0x936)],_0x4ce830[_0x5dcb79(0x443)]);if(_0xedf174)_0x5c87b9[_0x5dcb79(0x49b)](_0x5dcb79(0x6c2));}),PluginManager[_0x4a3d8d(0x9f0)](pluginData[_0x4a3d8d(0xbaa)],_0x4a3d8d(0x25e),_0x459199=>{const _0x55a4a9=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x55a4a9(0x613)])return;const _0x801927=$gameTemp[_0x55a4a9(0x202)]();if(!_0x801927)return;_0x801927['setWaitMode'](_0x55a4a9(0x6c2));}),VisuMZ[_0x4a3d8d(0x485)]['Scene_Boot_onDatabaseLoaded']=Scene_Boot[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xb64)],Scene_Boot[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xb64)]=function(){const _0x1c4c59=_0x4a3d8d;this[_0x1c4c59(0x86a)](),this[_0x1c4c59(0xa86)](),this['process_VisuMZ_BattleCore_DamageStyles'](),this[_0x1c4c59(0xbab)](),VisuMZ[_0x1c4c59(0x485)][_0x1c4c59(0x8a6)][_0x1c4c59(0xaf0)](this),this[_0x1c4c59(0xad2)](),this[_0x1c4c59(0xc4e)](),this['process_VisuMZ_BattleCore_PreBattleCommonEvent'](),this[_0x1c4c59(0x8ec)]();},Scene_Boot[_0x4a3d8d(0x3c4)]['process_VisuMZ_BattleCore_Notetags']=function(){const _0xabe135=_0x4a3d8d;if(VisuMZ[_0xabe135(0x27a)])return;this[_0xabe135(0x292)](),this['process_VisuMZ_BattleCore_TraitObject_Notetags'](),this[_0xabe135(0x213)]();},Scene_Boot['prototype']['process_VisuMZ_BattleCore_Failsafes']=function(){const _0x36c734=_0x4a3d8d,_0x57807e=$dataSystem[_0x36c734(0x971)]['length'];for(let _0x327127=0x0;_0x327127<_0x57807e;_0x327127++){const _0x3a4253=$dataSystem[_0x36c734(0x857)][_0x327127];if(_0x3a4253)continue;$dataSystem[_0x36c734(0x857)][_0x327127]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot[_0x4a3d8d(0x3c4)]['process_VisuMZ_BattleCore_PluginParams']=function(){const _0x2c2229=_0x4a3d8d,_0x517ece=VisuMZ[_0x2c2229(0x485)][_0x2c2229(0xb75)];_0x517ece[_0x2c2229(0xb55)][_0x2c2229(0x309)]===undefined&&(_0x2c2229(0x29f)!==_0x2c2229(0x29f)?this[_0x2c2229(0x8c8)]():_0x517ece[_0x2c2229(0xb55)][_0x2c2229(0x309)]='base'),_0x517ece[_0x2c2229(0x4e0)]['SmoothImage']===undefined&&(_0x517ece['Actor'][_0x2c2229(0x325)]=![]),_0x517ece[_0x2c2229(0xa50)]['SmoothImage']===undefined&&(_0x517ece[_0x2c2229(0xa50)]['SmoothImage']=!![]),_0x517ece[_0x2c2229(0x4e0)]['PrioritySortActive']===undefined&&(_0x517ece['Actor'][_0x2c2229(0x805)]=![]),_0x517ece['Actor'][_0x2c2229(0x2a1)]===undefined&&(_0x517ece[_0x2c2229(0x4e0)]['PrioritySortActors']=!![]);},VisuMZ['DamageStyles']={},Scene_Boot[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa74)]=function(){const _0x3a19d5=_0x4a3d8d;for(const _0x4ae1b1 of VisuMZ['BattleCore'][_0x3a19d5(0xb75)]['Damage'][_0x3a19d5(0x34e)]){if(!_0x4ae1b1)continue;const _0x4afaf6=_0x4ae1b1[_0x3a19d5(0x870)][_0x3a19d5(0x302)]()['trim']();VisuMZ[_0x3a19d5(0x31b)][_0x4afaf6]=_0x4ae1b1;}},VisuMZ['BattleCore']['RegExp']={},Scene_Boot[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xbab)]=function(){const _0x332644=_0x4a3d8d,_0xcafde4=VisuMZ[_0x332644(0x485)][_0x332644(0xb93)],_0x4b4816='<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>',_0x18ac79=[[_0x332644(0x866),_0x332644(0x978)],[_0x332644(0xa36),_0x332644(0x1b3)]],_0x196450=[[_0x332644(0xb0c),_0x332644(0x5e5)],['%1Damage%2JS','JS\x20%1DAMAGE\x20%2']],_0x17fe28=[['',''],['AsUser',_0x332644(0x63c)],[_0x332644(0xb87),_0x332644(0xa53)]];for(const _0x1a90df of _0x196450){if(_0x332644(0x321)!=='rjmVp')for(const _0x26d928 of _0x17fe28){if(_0x332644(0x88b)!==_0x332644(0x88b)){let _0x115396=_0x260946[_0x332644(0x485)][_0x332644(0xb3c)][_0x332644(0xaf0)](this,_0x21351c);return _0x115396=this[_0x332644(0x9a2)][_0x332644(0x430)]*_0x115396+this[_0x332644(0x9a2)][_0x332644(0x55c)],_0x115396;}else for(const _0x14e263 of _0x18ac79){const _0x4f9bd8=_0x1a90df[0x0][_0x332644(0x8dd)](_0x14e263[0x0],_0x26d928[0x0]),_0xca47c8=_0x1a90df[0x1]['format'](_0x14e263[0x1],_0x26d928[0x1])[_0x332644(0x82d)](),_0x27cdab=new RegExp(_0x4b4816['format'](_0xca47c8),'i');_0xcafde4[_0x4f9bd8]=_0x27cdab;}}else{if(!this['_forcing']&&this[_0x332644(0x601)]()[_0x332644(0x1fa)]())return![];if(this[_0x332644(0x700)]())return!![];return typeof this['item']()[_0x332644(0x918)]==='string';}}const _0x497d42=[[_0x332644(0x873),_0x332644(0x40b)],[_0x332644(0x397),_0x332644(0xa4c)]];for(const _0x248cf7 of _0x497d42){for(const _0x89e959 of _0x18ac79){const _0x5f2d1f=_0x248cf7[0x0][_0x332644(0x8dd)](_0x89e959[0x0]),_0x307e06=_0x248cf7[0x1][_0x332644(0x8dd)](_0x89e959[0x1]),_0xcbb441=new RegExp(_0x4b4816['format'](_0x307e06),'i');_0xcafde4[_0x5f2d1f]=_0xcbb441;}}const _0x1221f7=[[_0x332644(0x98b),_0x332644(0x2ab)],[_0x332644(0x6a6),'JS\x20%1END\x20BATTLE'],[_0x332644(0x529),_0x332644(0xa6e)],[_0x332644(0x95d),_0x332644(0x5e7)],['EscapeSuccessJS',_0x332644(0x69f)],[_0x332644(0x5ac),_0x332644(0x3a0)],[_0x332644(0xb67),'JS\x20%1START\x20TURN'],[_0x332644(0x2b0),_0x332644(0xbfd)],[_0x332644(0x399),'JS\x20%1REGENERATE']];for(const _0xa8f826 of _0x1221f7){if(_0x332644(0x41e)!==_0x332644(0x453))for(const _0x14be6d of _0x18ac79){if(_0x332644(0x51d)!==_0x332644(0x51d))return this[_0x332644(0x650)];else{const _0x296c8d=_0xa8f826[0x0][_0x332644(0x8dd)](_0x14be6d[0x0]),_0xd53459=_0xa8f826[0x1][_0x332644(0x8dd)](_0x14be6d[0x1]),_0x1e66c3=new RegExp(_0x4b4816['format'](_0xd53459),'i');_0xcafde4[_0x296c8d]=_0x1e66c3;}}else{const _0x47a4db=this[_0x332644(0x801)]();if(_0x1e89e5&&['xp',_0x332644(0x9e1)][_0x332644(0xbff)](_0x47a4db))this[_0x332644(0x1ee)](_0x150bba);else _0x1d1361&&[_0x332644(0xa18)][_0x332644(0xbff)](_0x47a4db)&&(this[_0x332644(0x51e)](_0xa2ff40),this[_0x332644(0x639)]());_0x5392a8[_0x332644(0x485)][_0x332644(0x6c1)][_0x332644(0xaf0)](this,_0x36d565),_0x12d147&&_0x4b29a4[_0x332644(0x411)]()['length']>0x0&&_0x125b91[_0x332644(0x28e)]()&&_0x552dd4[_0x332644(0x28e)]()[_0x332644(0x5a4)]();}}},Scene_Boot[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x292)]=function(){const _0x1adb75=_0x4a3d8d,_0x13c14d=$dataSkills['concat']($dataItems);for(const _0x1e2fd1 of _0x13c14d){if(!_0x1e2fd1)continue;VisuMZ[_0x1adb75(0x485)][_0x1adb75(0x661)](_0x1e2fd1);}},Scene_Boot[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x6f3)]=function(){const _0x359811=_0x4a3d8d,_0x4146e6=$dataActors[_0x359811(0xb1a)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x47f4da of _0x4146e6){if(!_0x47f4da)continue;VisuMZ[_0x359811(0x485)][_0x359811(0x9d0)](_0x47f4da);}},Scene_Boot[_0x4a3d8d(0x3c4)]['process_VisuMZ_BattleCore_BaseTroops']=function(){const _0x376f85=_0x4a3d8d,_0x4fc61f=VisuMZ[_0x376f85(0x485)][_0x376f85(0xb75)]['Mechanics'][_0x376f85(0x7f1)],_0x27dd90=[];for(const _0x4dbfa4 of _0x4fc61f){const _0x52cdf7=$dataTroops[_0x4dbfa4];if(_0x52cdf7)_0x27dd90[_0x376f85(0x906)](JsonEx[_0x376f85(0x773)](_0x52cdf7));}for(const _0x2b5b8c of $dataTroops){if(!_0x2b5b8c)continue;for(const _0x333590 of _0x27dd90){if(_0x376f85(0x963)===_0x376f85(0x743))return this[_0x376f85(0x54c)]();else{if(_0x333590['id']===_0x2b5b8c['id'])continue;_0x2b5b8c[_0x376f85(0x91d)]=_0x2b5b8c[_0x376f85(0x91d)]['concat'](_0x333590[_0x376f85(0x91d)]);}}}},Scene_Boot[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x7ef)]=function(){const _0x3b2664=_0x4a3d8d,_0x1b660b=VisuMZ[_0x3b2664(0x485)][_0x3b2664(0xb75)][_0x3b2664(0x5de)];if(_0x1b660b[_0x3b2664(0xbda)]>0x0&&$dataCommonEvents[_0x1b660b['BattleStartEvent']]){if(_0x3b2664(0x361)!==_0x3b2664(0x9bd)){const _0x5dc45a=$dataCommonEvents[_0x1b660b[_0x3b2664(0xbda)]],_0x57c02d=_0x5dc45a[_0x3b2664(0x343)][_0x3b2664(0x482)]-0x2,_0x4b1e80=_0x5dc45a[_0x3b2664(0x343)][_0x57c02d];if(_0x4b1e80&&_0x4b1e80[_0x3b2664(0x8ea)]!==0xe6){const _0x1c8e20={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x451c25=_0x5dc45a['list'][_0x3b2664(0xaca)]();_0x5dc45a[_0x3b2664(0x343)][_0x3b2664(0x993)](_0x1c8e20),_0x5dc45a[_0x3b2664(0x343)][_0x3b2664(0x993)](_0x451c25);}}else return this[_0x3b2664(0x8e2)](_0x76b68f);}},Scene_Boot[_0x4a3d8d(0x3c4)]['process_VisuMZ_BattleCore_CommonEventKeys']=function(){const _0x148a33=_0x4a3d8d;VisuMZ[_0x148a33(0x485)][_0x148a33(0x84c)](),VisuMZ[_0x148a33(0x485)][_0x148a33(0x621)]($dataSkills),VisuMZ['BattleCore'][_0x148a33(0x621)]($dataItems);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x84c)]=function(){const _0x379288=_0x4a3d8d;VisuMZ[_0x379288(0x485)][_0x379288(0x415)]={};for(const _0x35f2f0 of $dataCommonEvents){if(!_0x35f2f0)continue;if(_0x35f2f0[_0x379288(0xbaa)][_0x379288(0x591)](/\[(.*)\]/i)){let _0x4b429e=String(RegExp['$1'])['replace'](/,/g,'')[_0x379288(0x302)]()[_0x379288(0x82d)]();VisuMZ[_0x379288(0x485)][_0x379288(0x415)][_0x4b429e]=_0x35f2f0['id'];}}},VisuMZ[_0x4a3d8d(0x485)]['BindCommonEventKeysForGroup']=function(_0x2e1f0a){const _0x12ee07=_0x4a3d8d;for(const _0x7c4776 of _0x2e1f0a){if(!_0x7c4776)continue;VisuMZ['BattleCore'][_0x12ee07(0x9ff)](_0x7c4776);}},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x9ff)]=function(_0x1b873f){const _0xe952b2=_0x4a3d8d;if(!_0x1b873f)return;if(!_0x1b873f[_0xe952b2(0x6ac)])return;VisuMZ[_0xe952b2(0x485)][_0xe952b2(0x415)]=VisuMZ['BattleCore'][_0xe952b2(0x415)]||{};const _0x176f97=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x29df46=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0xc334bf=[];const _0x30523b=_0x1b873f[_0xe952b2(0x9ea)]['match'](_0x176f97);if(_0x30523b){for(const _0x45ba47 of _0x30523b){_0x45ba47[_0xe952b2(0x591)](_0x176f97);const _0x502d0e=String(RegExp['$1'])['split'](',')[_0xe952b2(0xa4a)](_0x5a568c=>String(_0x5a568c)[_0xe952b2(0x302)]()[_0xe952b2(0x82d)]());_0xc334bf=_0xc334bf['concat'](_0x502d0e);}!_0x1b873f[_0xe952b2(0x9ea)][_0xe952b2(0x591)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x1b873f[_0xe952b2(0x9ea)]+=_0xe952b2(0xc00));;}if(_0x1b873f[_0xe952b2(0x9ea)][_0xe952b2(0x591)](_0x29df46)){const _0x202dbd=String(RegExp['$1'])[_0xe952b2(0x25c)](/[\r\n]+/)['map'](_0x3a9d74=>String(_0x3a9d74)[_0xe952b2(0x302)]()[_0xe952b2(0x82d)]());_0xc334bf=_0xc334bf[_0xe952b2(0xb1a)](_0x202dbd);!_0x1b873f[_0xe952b2(0x9ea)][_0xe952b2(0x591)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x1b873f[_0xe952b2(0x9ea)]+=_0xe952b2(0xc00));;}for(const _0x18e1ab of _0xc334bf){if(VisuMZ['BattleCore']['_commonEventKey'][_0x18e1ab]){const _0x4c25a7=VisuMZ[_0xe952b2(0x485)]['_commonEventKey'][_0x18e1ab],_0x5be268={'code':0x2c,'dataId':_0x4c25a7,'value1':0x1,'value2':0x0};_0x1b873f['effects']['push'](_0x5be268);}}},Scene_Boot['prototype'][_0x4a3d8d(0x213)]=function(){const _0x1b605c=_0x4a3d8d,_0x240be6=$dataSkills[_0x1b605c(0xb1a)]($dataItems);for(const _0xffee48 of _0x240be6){if(!_0xffee48)continue;VisuMZ[_0x1b605c(0x485)]['Parse_Notetags_Targets'](_0xffee48);}},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x156)]=VisuMZ['ParseActorNotetags'],VisuMZ[_0x4a3d8d(0x156)]=function(_0x2c3462){const _0x48283c=_0x4a3d8d;VisuMZ['BattleCore'][_0x48283c(0x156)]&&VisuMZ[_0x48283c(0x485)]['ParseActorNotetags'][_0x48283c(0xaf0)](this,_0x2c3462),VisuMZ[_0x48283c(0x485)]['Parse_Notetags_TraitObjects'](_0x2c3462);},VisuMZ['BattleCore'][_0x4a3d8d(0x14d)]=VisuMZ[_0x4a3d8d(0x14d)],VisuMZ[_0x4a3d8d(0x14d)]=function(_0x89ff37){const _0x1e50df=_0x4a3d8d;VisuMZ[_0x1e50df(0x485)][_0x1e50df(0x14d)]&&VisuMZ[_0x1e50df(0x485)][_0x1e50df(0x14d)][_0x1e50df(0xaf0)](this,_0x89ff37),VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x89ff37);},VisuMZ[_0x4a3d8d(0x485)]['ParseSkillNotetags']=VisuMZ[_0x4a3d8d(0x28b)],VisuMZ[_0x4a3d8d(0x28b)]=function(_0x395f6d){const _0x3c4a3b=_0x4a3d8d;VisuMZ['BattleCore']['ParseSkillNotetags']&&VisuMZ[_0x3c4a3b(0x485)]['ParseSkillNotetags'][_0x3c4a3b(0xaf0)](this,_0x395f6d),VisuMZ['BattleCore'][_0x3c4a3b(0x661)](_0x395f6d),VisuMZ['BattleCore'][_0x3c4a3b(0x9be)](_0x395f6d);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x4d9)]=VisuMZ[_0x4a3d8d(0x4d9)],VisuMZ['ParseItemNotetags']=function(_0x4b7b2c){const _0x5991ce=_0x4a3d8d;VisuMZ[_0x5991ce(0x485)]['ParseItemNotetags']&&('uwmOH'!==_0x5991ce(0x823)?VisuMZ[_0x5991ce(0x485)][_0x5991ce(0x4d9)][_0x5991ce(0xaf0)](this,_0x4b7b2c):(this[_0x5991ce(0xa07)]=this['_targetGrowX'],this[_0x5991ce(0x21c)]=this[_0x5991ce(0x6b8)])),VisuMZ['BattleCore'][_0x5991ce(0x661)](_0x4b7b2c),VisuMZ[_0x5991ce(0x485)][_0x5991ce(0x9be)](_0x4b7b2c);},VisuMZ['BattleCore'][_0x4a3d8d(0x589)]=VisuMZ['ParseWeaponNotetags'],VisuMZ[_0x4a3d8d(0x589)]=function(_0x28bb95){const _0x17f56a=_0x4a3d8d;VisuMZ[_0x17f56a(0x485)][_0x17f56a(0x589)]&&VisuMZ[_0x17f56a(0x485)][_0x17f56a(0x589)][_0x17f56a(0xaf0)](this,_0x28bb95),VisuMZ[_0x17f56a(0x485)][_0x17f56a(0x9d0)](_0x28bb95);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x216)]=VisuMZ[_0x4a3d8d(0x216)],VisuMZ[_0x4a3d8d(0x216)]=function(_0x2e9e7a){const _0x2e0b80=_0x4a3d8d;VisuMZ[_0x2e0b80(0x485)][_0x2e0b80(0x216)]&&(_0x2e0b80(0x1fe)===_0x2e0b80(0x827)?(_0x4712d2[_0x2e0b80(0x6ab)](),_0x498ae4[_0x2e0b80(0xa76)]=![],_0x44f312[_0x2e0b80(0x1db)](),_0x52cfde[_0x2e0b80(0x1db)]()):VisuMZ[_0x2e0b80(0x485)][_0x2e0b80(0x216)][_0x2e0b80(0xaf0)](this,_0x2e9e7a)),VisuMZ[_0x2e0b80(0x485)][_0x2e0b80(0x9d0)](_0x2e9e7a);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x72f)]=VisuMZ[_0x4a3d8d(0x72f)],VisuMZ[_0x4a3d8d(0x72f)]=function(_0x19f822){const _0x281c48=_0x4a3d8d;VisuMZ[_0x281c48(0x485)][_0x281c48(0x72f)]&&(_0x281c48(0x32b)!==_0x281c48(0x32b)?(_0x2ab32c['BattleCore'][_0x281c48(0x3a2)][_0x281c48(0xaf0)](this),this['updateShadowVisibility']()):VisuMZ['BattleCore'][_0x281c48(0x72f)]['call'](this,_0x19f822)),VisuMZ[_0x281c48(0x485)][_0x281c48(0x9d0)](_0x19f822);},VisuMZ['BattleCore'][_0x4a3d8d(0xc4b)]=VisuMZ[_0x4a3d8d(0xc4b)],VisuMZ[_0x4a3d8d(0xc4b)]=function(_0x296e94){const _0x5f4ced=_0x4a3d8d;VisuMZ['BattleCore'][_0x5f4ced(0xc4b)]&&VisuMZ[_0x5f4ced(0x485)]['ParseStateNotetags'][_0x5f4ced(0xaf0)](this,_0x296e94),VisuMZ['BattleCore'][_0x5f4ced(0x9d0)](_0x296e94);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x661)]=function(_0x139882){const _0x4c399d=_0x4a3d8d,_0x398685=[_0x4c399d(0xbf7),_0x4c399d(0x73e),'PreDamageJS',_0x4c399d(0x286),_0x4c399d(0x61d),'PostStartActionJS','PreEndActionJS',_0x4c399d(0xac8)];for(const _0x460595 of _0x398685){VisuMZ[_0x4c399d(0x485)][_0x4c399d(0x798)](_0x139882,_0x460595);}const _0x126eac=_0x139882[_0x4c399d(0x9ea)];_0x126eac['match'](/<ALWAYS CRITICAL/i)&&(_0x139882['damage'][_0x4c399d(0x9fa)]=!![]),_0x126eac[_0x4c399d(0x591)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x139882['repeats']=Math[_0x4c399d(0x559)](0x1,Number(RegExp['$1']))),_0x126eac[_0x4c399d(0x591)](/<TARGET:[ ](.*)>/i)&&(_0x139882['scope']=String(RegExp['$1'])['toUpperCase']()[_0x4c399d(0x82d)]());},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x9d0)]=function(_0x362071){const _0x438e3d=_0x4a3d8d,_0x5733df=[_0x438e3d(0x6a9),_0x438e3d(0x9d7),_0x438e3d(0x5f8),_0x438e3d(0x6af),_0x438e3d(0xaf3),_0x438e3d(0x588),'PreDamageAsTargetJS',_0x438e3d(0x898),_0x438e3d(0x61d),_0x438e3d(0x19a),_0x438e3d(0x5bb),_0x438e3d(0xac8),_0x438e3d(0xc1b),_0x438e3d(0x533),'PreEndBattleJS',_0x438e3d(0x60e),_0x438e3d(0x529),_0x438e3d(0x95d),'EscapeSuccessJS',_0x438e3d(0x5ac),'PreStartTurnJS',_0x438e3d(0xa73),_0x438e3d(0x74b),'PostEndTurnJS',_0x438e3d(0x206),_0x438e3d(0x183)];for(const _0x5243f2 of _0x5733df){VisuMZ[_0x438e3d(0x485)][_0x438e3d(0x798)](_0x362071,_0x5243f2);}},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x9be)]=function(_0x144cee){const _0x520dd1=_0x4a3d8d,_0x3f0eca=_0x144cee['note'];if(_0x3f0eca[_0x520dd1(0x591)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x4ef05e=String(RegExp['$1']),_0x31249c=VisuMZ['BattleCore']['createKeyJS'](_0x144cee,'Targets');VisuMZ['BattleCore'][_0x520dd1(0xa92)](_0x4ef05e,_0x31249c);}if(_0x3f0eca[_0x520dd1(0x591)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){if(_0x520dd1(0x8d6)!==_0x520dd1(0x799)){const _0x40511e=String(RegExp['$1']),_0xcdaa9d=VisuMZ['BattleCore']['createKeyJS'](_0x144cee,'CommandVisible');VisuMZ[_0x520dd1(0x485)]['createCommandVisibleJS'](_0x40511e,_0xcdaa9d);}else _0xefd1ee[_0x520dd1(0x906)](_0x4bf228(_0x203fb8['$1']));}},VisuMZ[_0x4a3d8d(0x485)]['JS']={},VisuMZ['BattleCore'][_0x4a3d8d(0x798)]=function(_0x32b6a0,_0x50bb81){const _0x2840a4=_0x4a3d8d,_0x447a01=_0x32b6a0[_0x2840a4(0x9ea)];if(_0x447a01[_0x2840a4(0x591)](VisuMZ['BattleCore']['RegExp'][_0x50bb81])){const _0xdec92a=RegExp['$1'],_0x5bd706=_0x2840a4(0x412)[_0x2840a4(0x8dd)](_0xdec92a),_0x4a1977=VisuMZ[_0x2840a4(0x485)]['createKeyJS'](_0x32b6a0,_0x50bb81);VisuMZ[_0x2840a4(0x485)]['JS'][_0x4a1977]=new Function(_0x5bd706);}},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x7d8)]=function(_0x4b6007,_0x3b8788){const _0x20c6d0=_0x4a3d8d;if(VisuMZ['createKeyJS'])return VisuMZ['createKeyJS'](_0x4b6007,_0x3b8788);let _0x446b3d='';if($dataActors[_0x20c6d0(0xbff)](_0x4b6007))_0x446b3d=_0x20c6d0(0x517)[_0x20c6d0(0x8dd)](_0x4b6007['id'],_0x3b8788);if($dataClasses[_0x20c6d0(0xbff)](_0x4b6007))_0x446b3d=_0x20c6d0(0x63b)['format'](_0x4b6007['id'],_0x3b8788);if($dataSkills['includes'](_0x4b6007))_0x446b3d=_0x20c6d0(0x9ab)[_0x20c6d0(0x8dd)](_0x4b6007['id'],_0x3b8788);if($dataItems['includes'](_0x4b6007))_0x446b3d=_0x20c6d0(0x236)[_0x20c6d0(0x8dd)](_0x4b6007['id'],_0x3b8788);if($dataWeapons[_0x20c6d0(0xbff)](_0x4b6007))_0x446b3d=_0x20c6d0(0x9d3)[_0x20c6d0(0x8dd)](_0x4b6007['id'],_0x3b8788);if($dataArmors[_0x20c6d0(0xbff)](_0x4b6007))_0x446b3d=_0x20c6d0(0x572)[_0x20c6d0(0x8dd)](_0x4b6007['id'],_0x3b8788);if($dataEnemies[_0x20c6d0(0xbff)](_0x4b6007))_0x446b3d=_0x20c6d0(0x440)[_0x20c6d0(0x8dd)](_0x4b6007['id'],_0x3b8788);if($dataStates[_0x20c6d0(0xbff)](_0x4b6007))_0x446b3d=_0x20c6d0(0xb3b)[_0x20c6d0(0x8dd)](_0x4b6007['id'],_0x3b8788);return _0x446b3d;},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xa92)]=function(_0x51bb1d,_0x26d1f3){const _0x296d63=_0x4a3d8d,_0x37d524='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20'[_0x296d63(0x8dd)](_0x51bb1d);VisuMZ[_0x296d63(0x485)]['JS'][_0x26d1f3]=new Function(_0x37d524);},VisuMZ['BattleCore'][_0x4a3d8d(0x16c)]=function(_0x44776f,_0x1d1688){const _0x1eb099=_0x4a3d8d,_0xe69ce='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20'[_0x1eb099(0x8dd)](_0x44776f);VisuMZ[_0x1eb099(0x485)]['JS'][_0x1d1688]=new Function(_0xe69ce);},TextManager[_0x4a3d8d(0x387)]=VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xb75)][_0x4a3d8d(0x768)][_0x4a3d8d(0x27c)],TextManager['autoBattleStart']=VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xb75)][_0x4a3d8d(0x839)]['StartName'],TextManager['autoBattleStyle']=VisuMZ[_0x4a3d8d(0x485)]['Settings']['AutoBattle'][_0x4a3d8d(0x929)],TextManager[_0x4a3d8d(0x47e)]=VisuMZ['BattleCore']['Settings'][_0x4a3d8d(0x4c8)]['Name'],ColorManager['getColor']=function(_0x3a6145){const _0x33ea87=_0x4a3d8d;return _0x3a6145=String(_0x3a6145),_0x3a6145[_0x33ea87(0x591)](/#(.*)/i)?'#%1'[_0x33ea87(0x8dd)](String(RegExp['$1'])):this[_0x33ea87(0x19e)](Number(_0x3a6145));},DataManager['getDamageStyle']=function(_0x334451){const _0xc1c14a=_0x4a3d8d;if(_0x334451[_0xc1c14a(0x9ea)][_0xc1c14a(0x591)](/<DAMAGE STYLE:[ ](.*)>/i)){if(_0xc1c14a(0x4cd)==='yafBw'){if([0x6c,0x198][_0xc1c14a(0xbff)](_0x2b1610[_0xc1c14a(0x8ea)])){const _0x4aa2cc=_0x105bba['parameters'][0x0];if(_0x4aa2cc[_0xc1c14a(0x591)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}else{const _0x4c9b93=String(RegExp['$1'])['toUpperCase']()[_0xc1c14a(0x82d)]();if(_0x4c9b93===_0xc1c14a(0xad8))return _0xc1c14a(0xad8);if(VisuMZ['DamageStyles'][_0x4c9b93])return _0x4c9b93;}}const _0x32abdb=VisuMZ['BattleCore']['Settings'][_0xc1c14a(0xb55)][_0xc1c14a(0x87f)][_0xc1c14a(0x302)]()[_0xc1c14a(0x82d)]();if(VisuMZ[_0xc1c14a(0x31b)][_0x32abdb])return _0x32abdb;return _0xc1c14a(0xad8);},DataManager['getStypeIdWithName']=function(_0x35093b){const _0x2dd6e5=_0x4a3d8d;_0x35093b=_0x35093b[_0x2dd6e5(0x302)]()[_0x2dd6e5(0x82d)](),this[_0x2dd6e5(0x48c)]=this[_0x2dd6e5(0x48c)]||{};if(this[_0x2dd6e5(0x48c)][_0x35093b])return this[_0x2dd6e5(0x48c)][_0x35093b];for(let _0x2b737f=0x1;_0x2b737f<0x64;_0x2b737f++){if(_0x2dd6e5(0x1d2)==='XIYve'){if(!$dataSystem[_0x2dd6e5(0x322)][_0x2b737f])continue;let _0x57d2fb=$dataSystem[_0x2dd6e5(0x322)][_0x2b737f]['toUpperCase']()[_0x2dd6e5(0x82d)]();_0x57d2fb=_0x57d2fb['replace'](/\x1I\[(\d+)\]/gi,''),_0x57d2fb=_0x57d2fb[_0x2dd6e5(0x809)](/\\I\[(\d+)\]/gi,''),this[_0x2dd6e5(0x48c)][_0x57d2fb]=_0x2b737f;}else this['requestMotionRefresh']();}return this[_0x2dd6e5(0x48c)][_0x35093b]||0x0;},DataManager[_0x4a3d8d(0x8bc)]=function(_0xcac568){const _0x56a8c2=_0x4a3d8d;_0xcac568=_0xcac568[_0x56a8c2(0x302)]()[_0x56a8c2(0x82d)](),this[_0x56a8c2(0x879)]=this[_0x56a8c2(0x879)]||{};if(this[_0x56a8c2(0x879)][_0xcac568])return this['_skillIDs'][_0xcac568];for(const _0x10f44e of $dataSkills){if(!_0x10f44e)continue;this[_0x56a8c2(0x879)][_0x10f44e[_0x56a8c2(0xbaa)]['toUpperCase']()['trim']()]=_0x10f44e['id'];}return this[_0x56a8c2(0x879)][_0xcac568]||0x0;},DataManager[_0x4a3d8d(0x52c)]=function(_0x3cac58){const _0x514670=_0x4a3d8d;_0x3cac58=_0x3cac58[_0x514670(0x302)]()[_0x514670(0x82d)](),this['_enemyIDs']=this['_enemyIDs']||{};if(this['_enemyIDs'][_0x3cac58])return this['_enemyIDs'][_0x3cac58];for(const _0x4b3f60 of $dataEnemies){if(_0x514670(0xb14)===_0x514670(0xb14)){if(!_0x4b3f60)continue;this[_0x514670(0x243)][_0x4b3f60['name'][_0x514670(0x302)]()[_0x514670(0x82d)]()]=_0x4b3f60['id'];}else{const _0x2b1161=_0x79857b(_0x5b82ce['$1'])[_0x514670(0x82d)](),_0x479cb2=_0x5e22df(_0x22fda0['$2']);_0x10fb3f[_0x2b1161]=_0x479cb2,_0x527c31+=_0x479cb2;}}return this[_0x514670(0x243)][_0x3cac58]||0x0;},DataManager['getWtypeIdWithName']=function(_0x3577af){const _0x5912b5=_0x4a3d8d;_0x3577af=_0x3577af[_0x5912b5(0x302)]()[_0x5912b5(0x82d)](),this[_0x5912b5(0x2c6)]=this[_0x5912b5(0x2c6)]||{};if(this[_0x5912b5(0x2c6)][_0x3577af])return this[_0x5912b5(0x2c6)][_0x3577af];for(let _0x5a48ff=0x1;_0x5a48ff<0x64;_0x5a48ff++){if(!$dataSystem[_0x5912b5(0x971)][_0x5a48ff])continue;let _0x51c6c0=$dataSystem[_0x5912b5(0x971)][_0x5a48ff][_0x5912b5(0x302)]()[_0x5912b5(0x82d)]();_0x51c6c0=_0x51c6c0[_0x5912b5(0x809)](/\x1I\[(\d+)\]/gi,''),_0x51c6c0=_0x51c6c0[_0x5912b5(0x809)](/\\I\[(\d+)\]/gi,''),this[_0x5912b5(0x2c6)][_0x51c6c0]=_0x5a48ff;}return this[_0x5912b5(0x2c6)][_0x5912b5(0x8b2)]=0x0,this[_0x5912b5(0x2c6)][_0x3577af]||0x0;},DataManager[_0x4a3d8d(0x4d5)]=function(_0x59acd6){const _0x489f43=_0x4a3d8d,_0x17f1cc=_0x489f43(0xc28);let _0x341b01=_0x59acd6[_0x489f43(0x53d)],_0x51e4bc=_0x59acd6[_0x489f43(0xbaa)];const _0x3a09da=_0x59acd6[_0x489f43(0x9ea)];return _0x3a09da[_0x489f43(0x591)](/<DISPLAY ICON: (\d+)>/i)&&(_0x489f43(0x2de)===_0x489f43(0x2de)?_0x341b01=Number(RegExp['$1']):_0x2b92c1[_0x489f43(0x906)](this[_0x489f43(0xbae)]()[_0x489f43(0x2bd)]())),_0x3a09da[_0x489f43(0x591)](/<DISPLAY TEXT: (.*)>/i)&&(_0x51e4bc=String(RegExp['$1'])),_0x17f1cc[_0x489f43(0x8dd)](_0x341b01,_0x51e4bc);},DataManager[_0x4a3d8d(0x47a)]=function(_0x44d2d5){const _0x9fa69=_0x4a3d8d;if(_0x44d2d5[_0x9fa69(0x9ea)][_0x9fa69(0x591)](/<COMMAND TEXT: (.*)>/i)){if(_0x9fa69(0x153)!==_0x9fa69(0xacd))return String(RegExp['$1']);else this['addItemCommand']();}else return _0x44d2d5[_0x9fa69(0xbaa)];},DataManager[_0x4a3d8d(0xb79)]=function(_0x2c1876){const _0x51b2a2=_0x4a3d8d;return _0x2c1876[_0x51b2a2(0x9ea)][_0x51b2a2(0x591)](/<COMMAND ICON: (\d+)>/i)?_0x51b2a2(0x4e5)===_0x51b2a2(0x4e5)?Number(RegExp['$1']):this['_enemy']['allowCollapse']():'nlckv'!==_0x51b2a2(0xc09)?_0x2c1876[_0x51b2a2(0x53d)]:0x1;},DataManager[_0x4a3d8d(0x95b)]=function(_0x362ed4){const _0x3c835d=_0x4a3d8d,_0x36cd03=$dataEnemies[_0x362ed4];if(_0x36cd03){if(_0x36cd03[_0x3c835d(0x9ea)]['match'](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x529286=String(RegExp['$1'])[_0x3c835d(0x25c)](/[\r\n]+/)[_0x3c835d(0x34b)](''),_0x39be1d=this['processRandomizedData'](_0x529286);_0x362ed4=this[_0x3c835d(0x52c)](_0x39be1d)||_0x362ed4,_0x362ed4=DataManager[_0x3c835d(0x95b)](_0x362ed4);}}return _0x362ed4;},DataManager[_0x4a3d8d(0x4aa)]=function(_0x564d86){const _0x477bed=_0x4a3d8d;let _0x46c3b6=0x0;const _0x31002e={};for(const _0x345ebe of _0x564d86){if(_0x345ebe['match'](/(.*):[ ](\d+)/i)){if('ceVyh'===_0x477bed(0x301)){const _0x12ce87=String(RegExp['$1'])[_0x477bed(0x82d)](),_0x588f41=Number(RegExp['$2']);_0x31002e[_0x12ce87]=_0x588f41,_0x46c3b6+=_0x588f41;}else this['requestMotion'](_0x477bed(0x158));}else{if(_0x345ebe[_0x477bed(0x591)](/(.*):[ ](\d+\.?\d+)/i)){if('RzZaf'===_0x477bed(0x30e)){const _0x33e01e=String(RegExp['$1'])[_0x477bed(0x82d)](),_0xe9f926=Number(RegExp['$2']);_0x31002e[_0x33e01e]=_0xe9f926,_0x46c3b6+=_0xe9f926;}else this['addWeaponSwapCommand'](!![]);}else _0x345ebe!==''&&(_0x31002e[_0x345ebe]=0x1,_0x46c3b6++);}}if(_0x46c3b6<=0x0)return'';let _0x4c20b0=Math['random']()*_0x46c3b6;for(const _0x2d150a in _0x31002e){_0x4c20b0-=_0x31002e[_0x2d150a];if(_0x4c20b0<=0x0)return _0x2d150a;}return'';},DataManager[_0x4a3d8d(0x80b)]=function(_0x2090b9){const _0x5138a1=_0x4a3d8d;if(!_0x2090b9)return![];if(!VisuMZ[_0x5138a1(0x485)][_0x5138a1(0xb75)][_0x5138a1(0xa01)]['AutoNotetag'])return![];if(_0x2090b9[_0x5138a1(0x9ea)]['match'](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x2090b9['note']['match'](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x3bafd8 of _0x2090b9[_0x5138a1(0x6ac)]){if(!_0x3bafd8)continue;if(_0x3bafd8['code']===Game_Action[_0x5138a1(0x3fb)])return!![];}return![];},DataManager[_0x4a3d8d(0x6bf)]=function(_0x14913f){const _0x56e0a3=_0x4a3d8d,_0x3351c2=$dataTroops[_0x14913f];if(!_0x3351c2)return'';let _0x55db44='';_0x55db44+=_0x3351c2[_0x56e0a3(0xbaa)];for(const _0x531f5c of _0x3351c2[_0x56e0a3(0x91d)]){for(const _0x413057 of _0x531f5c[_0x56e0a3(0x343)]){[0x6c,0x198][_0x56e0a3(0xbff)](_0x413057[_0x56e0a3(0x8ea)])&&(_0x55db44+='\x0a',_0x55db44+=_0x413057[_0x56e0a3(0x2a7)][0x0]);}}return _0x55db44;},ConfigManager['autoBattleAtStart']=ConfigManager[_0x4a3d8d(0x8da)]??![],ConfigManager[_0x4a3d8d(0x48b)]=ConfigManager[_0x4a3d8d(0x48b)]??![],ConfigManager['visualHpGauge']=ConfigManager[_0x4a3d8d(0x47e)]??!![],VisuMZ['BattleCore'][_0x4a3d8d(0x2bc)]=ConfigManager[_0x4a3d8d(0xb9d)],ConfigManager['makeData']=function(){const _0x181aaf=_0x4a3d8d,_0x191a63=VisuMZ[_0x181aaf(0x485)][_0x181aaf(0x2bc)][_0x181aaf(0xaf0)](this);return _0x191a63['autoBattleAtStart']=this['autoBattleAtStart'],_0x191a63[_0x181aaf(0x48b)]=this['autoBattleUseSkills'],_0x191a63[_0x181aaf(0x47e)]=this[_0x181aaf(0x47e)],_0x191a63;},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x8b0)]=ConfigManager[_0x4a3d8d(0x758)],ConfigManager[_0x4a3d8d(0x758)]=function(_0x270dd2){const _0x3638fc=_0x4a3d8d;VisuMZ[_0x3638fc(0x485)][_0x3638fc(0x8b0)]['call'](this,_0x270dd2),'autoBattleAtStart'in _0x270dd2?this[_0x3638fc(0x8da)]=_0x270dd2[_0x3638fc(0x8da)]:this[_0x3638fc(0x8da)]=![],_0x3638fc(0x48b)in _0x270dd2?this[_0x3638fc(0x48b)]=_0x270dd2[_0x3638fc(0x48b)]:_0x3638fc(0x3d1)===_0x3638fc(0x4ca)?_0x384747['requestAnimation']([this],_0x502ecd):this[_0x3638fc(0x48b)]=![],_0x3638fc(0x47e)in _0x270dd2?_0x3638fc(0x550)===_0x3638fc(0x550)?this[_0x3638fc(0x47e)]=_0x270dd2[_0x3638fc(0x47e)]:(_0x190b5a*=-0x1,_0x38e8f3*=-0x1):this[_0x3638fc(0x47e)]=!![];},VisuMZ[_0x4a3d8d(0x485)]['BattleManager_initMembers']=BattleManager[_0x4a3d8d(0x6e4)],BattleManager[_0x4a3d8d(0x6e4)]=function(){const _0x3f1a72=_0x4a3d8d;VisuMZ[_0x3f1a72(0x485)][_0x3f1a72(0x9d4)][_0x3f1a72(0xaf0)](this),this[_0x3f1a72(0x5a9)]=[];},BattleManager[_0x4a3d8d(0x38d)]=function(){const _0xf74f5=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;const _0x4ec3b3=SceneManager['_scene'][_0xf74f5(0x71c)];if(_0x4ec3b3)_0x4ec3b3[_0xf74f5(0x55a)]();},BattleManager[_0x4a3d8d(0x735)]=function(){const _0x3ea517=_0x4a3d8d;if(BattleManager['isTpb']())return _0x3ea517(0x6c8);return _0x3ea517(0x39a);},BattleManager[_0x4a3d8d(0x9a6)]=function(_0x35e7b7){const _0x4b890c=_0x4a3d8d;return _0x35e7b7=_0x35e7b7[_0x4b890c(0x302)]()[_0x4b890c(0x82d)](),this[_0x4b890c(0x735)]()===_0x35e7b7;},BattleManager[_0x4a3d8d(0x54c)]=function(){const _0x8c20d9=_0x4a3d8d;return this[_0x8c20d9(0x9a6)](_0x8c20d9(0x39a));},BattleManager[_0x4a3d8d(0x85a)]=function(){const _0x5d45c3=_0x4a3d8d;return this[_0x5d45c3(0x54c)]();},BattleManager['isTickBased']=function(){const _0x53e9ba=_0x4a3d8d;return!this[_0x53e9ba(0x85a)]();},BattleManager[_0x4a3d8d(0x5ec)]=function(){const _0x3abb01=_0x4a3d8d;return!this['isTurnBased']()&&!this[_0x3abb01(0x8d8)]();},BattleManager[_0x4a3d8d(0xa19)]=function(_0x28d8c7){$gameParty['processBattleCoreJS'](_0x28d8c7),$gameTroop['processBattleCoreJS'](_0x28d8c7);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x570)]=BattleManager[_0x4a3d8d(0x3de)],BattleManager[_0x4a3d8d(0x3de)]=function(){const _0x184785=_0x4a3d8d;this['_endBattle']=![],this['_autoBattle']=ConfigManager[_0x184785(0x8da)],this[_0x184785(0xa19)](_0x184785(0xc1b)),VisuMZ[_0x184785(0x485)][_0x184785(0x570)]['call'](this),this['processBattleCoreJS'](_0x184785(0x533));},BattleManager['processPostBattleCommonEvents']=function(_0x7783ba){const _0x43d6d3=_0x4a3d8d,_0xd7f275=VisuMZ[_0x43d6d3(0x485)][_0x43d6d3(0xb75)]['Mechanics'];_0x7783ba!=='EscapeFail'&&_0xd7f275[_0x43d6d3(0xb23)]&&VisuMZ[_0x43d6d3(0x485)]['CheckMapBattleEventValid'](_0xd7f275[_0x43d6d3(0xb23)])&&$gameTemp[_0x43d6d3(0xbec)](_0xd7f275[_0x43d6d3(0xb23)]);const _0x2606df='%1Event'[_0x43d6d3(0x8dd)](_0x7783ba);if(_0xd7f275[_0x2606df]&&VisuMZ['BattleCore']['CheckMapBattleEventValid'](_0xd7f275[_0x2606df])){if(_0x43d6d3(0x536)!==_0x43d6d3(0x536)){const _0x46db19=_0x44e926[_0x43d6d3(0x485)][_0x43d6d3(0xb75)][_0x43d6d3(0x620)],_0x24654a=this[_0x43d6d3(0x2fa)](_0x25f1e4),_0x3e73a4=this[_0x43d6d3(0x684)](_0x5084aa),_0x4d8f75=_0x3f78f9[_0x43d6d3(0x89f)](_0x3e73a4['x']+(_0x3e73a4[_0x43d6d3(0xb49)]-0x80)/0x2),_0x4854eb=this[_0x43d6d3(0x4de)](_0x3e73a4);let _0x481658=_0x4d8f75-_0x3e314c[_0x43d6d3(0x1dc)]/0x2-0x4,_0x57b078=_0x4854eb+_0x3b21ac[_0x43d6d3(0xa48)]/0x2;_0x481658-_0x1bb57b[_0x43d6d3(0x1dc)]/0x2<_0x3e73a4['x']&&(_0x481658=_0x4d8f75+_0x120211[_0x43d6d3(0x1dc)]/0x2-0x4,_0x57b078=_0x4854eb-_0x5c50de[_0x43d6d3(0xa48)]/0x2);const _0x2c6600=_0x4d8f75,_0x321055=this['basicGaugesY'](_0x3e73a4);this[_0x43d6d3(0x259)](_0x24654a,_0x4d8f75+(_0x46db19[_0x43d6d3(0x1c7)]||0x0),_0x4854eb+(_0x46db19[_0x43d6d3(0x9ad)]||0x0)),this[_0x43d6d3(0x5e1)](_0x24654a,_0x4d8f75+(_0x46db19[_0x43d6d3(0x8f6)]||0x0),_0x4854eb+(_0x46db19['NameOffsetY']||0x0)),this[_0x43d6d3(0x654)](_0x24654a,_0x481658+(_0x46db19[_0x43d6d3(0xab1)]||0x0),_0x57b078+(_0x46db19[_0x43d6d3(0x9b6)]||0x0)),this[_0x43d6d3(0x17e)](_0x24654a,'hp',_0x2c6600+(_0x46db19[_0x43d6d3(0x4a6)]||0x0),_0x321055+(_0x46db19[_0x43d6d3(0x4c3)]||0x0)),this[_0x43d6d3(0x17e)](_0x24654a,'mp',_0x2c6600+(_0x46db19[_0x43d6d3(0x725)]||0x0),_0x321055+this[_0x43d6d3(0x204)]()+(_0x46db19[_0x43d6d3(0x2f9)]||0x0)),_0x3a0b36[_0x43d6d3(0xaa8)]&&this[_0x43d6d3(0x17e)](_0x24654a,'tp',_0x2c6600+(_0x46db19[_0x43d6d3(0xadb)]||0x0),_0x321055+this['gaugeLineHeight']()*0x2+(_0x46db19[_0x43d6d3(0x272)]||0x0));}else $gameTemp[_0x43d6d3(0xbec)](_0xd7f275[_0x2606df]);}},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x662)]=BattleManager[_0x4a3d8d(0x503)],BattleManager[_0x4a3d8d(0x503)]=function(){const _0x11c9b4=_0x4a3d8d;if(this[_0x11c9b4(0x5c9)]==='turn'){if(_0x11c9b4(0x690)===_0x11c9b4(0x690)){if($gameTemp[_0x11c9b4(0x9dc)]())return![];}else _0x5b293f[_0x11c9b4(0x485)][_0x11c9b4(0xa35)][_0x11c9b4(0xaf0)](this),this[_0x11c9b4(0xbf3)]();}return VisuMZ[_0x11c9b4(0x485)]['BattleManager_checkBattleEnd'][_0x11c9b4(0xaf0)](this);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x2af)]=BattleManager['processVictory'],BattleManager[_0x4a3d8d(0x740)]=function(){const _0x58cf98=_0x4a3d8d;this[_0x58cf98(0xa19)](_0x58cf98(0x529)),VisuMZ['BattleCore']['BattleManager_processVictory'][_0x58cf98(0xaf0)](this),this[_0x58cf98(0xc2b)](_0x58cf98(0xb3d));},VisuMZ['BattleCore'][_0x4a3d8d(0xb76)]=BattleManager[_0x4a3d8d(0x4bf)],BattleManager['processDefeat']=function(){const _0x16ac59=_0x4a3d8d;this[_0x16ac59(0xa19)](_0x16ac59(0x95d)),VisuMZ[_0x16ac59(0x485)][_0x16ac59(0xb76)][_0x16ac59(0xaf0)](this),this[_0x16ac59(0xc2b)](_0x16ac59(0xa45));},VisuMZ['BattleCore']['BattleManager_endBattle']=BattleManager['endBattle'],BattleManager[_0x4a3d8d(0x837)]=function(_0x16a678){const _0x573c08=_0x4a3d8d;this[_0x573c08(0x39e)]=!![],this['_autoBattle']=![],this[_0x573c08(0xa19)](_0x573c08(0x9f2)),VisuMZ['BattleCore']['BattleManager_endBattle'][_0x573c08(0xaf0)](this,_0x16a678),this[_0x573c08(0xa19)](_0x573c08(0x60e));},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x35e)]=BattleManager[_0x4a3d8d(0x994)],BattleManager[_0x4a3d8d(0x994)]=function(){const _0x3b6a70=_0x4a3d8d;if(this['isTurnBased']())this['processBattleCoreJS'](_0x3b6a70(0xb1e));VisuMZ[_0x3b6a70(0x485)][_0x3b6a70(0x35e)][_0x3b6a70(0xaf0)](this);if(this['isTurnBased']())this['processBattleCoreJS'](_0x3b6a70(0xa73));},VisuMZ[_0x4a3d8d(0x485)]['BattleManager_startAction']=BattleManager[_0x4a3d8d(0xa63)],BattleManager['startAction']=function(){const _0x477fb2=_0x4a3d8d,_0x33b386=this[_0x477fb2(0x18b)][_0x477fb2(0x8ed)](),_0xa60cf4=this['_subject'];if(_0x33b386&&_0x33b386['subject']()===_0xa60cf4){if('ceddb'!==_0x477fb2(0x80a))_0x33b386[_0x477fb2(0x1a7)](_0x477fb2(0x61d));else return this['_skewDuration']>0x0;}VisuMZ['BattleCore'][_0x477fb2(0x522)][_0x477fb2(0xaf0)](this),_0x33b386&&_0x33b386['subject']()===_0xa60cf4&&(_0x477fb2(0x975)!==_0x477fb2(0x5a0)?_0x33b386[_0x477fb2(0x1a7)](_0x477fb2(0x19a)):_0x344e20=_0x1d94d2[_0x477fb2(0x687)]);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x6ce)]=BattleManager[_0x4a3d8d(0x2ba)],BattleManager[_0x4a3d8d(0x2ba)]=function(){const _0x436c54=_0x4a3d8d,_0x44dbe8=this[_0x436c54(0x82e)],_0x2d606f=this['_subject'];_0x44dbe8&&_0x44dbe8!==this[_0x436c54(0xc45)]&&_0x44dbe8[_0x436c54(0x601)]()===_0x2d606f&&(_0x436c54(0xa06)!==_0x436c54(0xb43)?_0x44dbe8[_0x436c54(0x1a7)](_0x436c54(0x5bb)):_0x460b37=_0x3b5541['x']+_0x3f9e94[_0x436c54(0x9fd)]+0x8);this[_0x436c54(0x18b)]?VisuMZ[_0x436c54(0x485)][_0x436c54(0x6ce)][_0x436c54(0xaf0)](this):this[_0x436c54(0x5c9)]=_0x436c54(0x9d8);if(_0x44dbe8&&_0x44dbe8!==this['_lastAction']&&_0x44dbe8['subject']()===_0x2d606f){if('UPoEk'===_0x436c54(0x481))return _0xb0b25b[_0x436c54(0x485)][_0x436c54(0x7ea)][_0x436c54(0xaf0)](this,_0xe95801),_0x5cb3d7['setEventCallback'](_0x324f40=>{const _0x18ab60=_0x436c54;this[_0x18ab60(0x4a4)][this['_indent']]=_0x324f40;}),!![];else _0x44dbe8[_0x436c54(0x1a7)](_0x436c54(0xac8));}this[_0x436c54(0xb83)](this['allBattleMembers']()),this['_lastAction']=this[_0x436c54(0x82e)];},BattleManager[_0x4a3d8d(0xb83)]=function(_0xd531d3){const _0x171474=_0x4a3d8d;for(const _0x5e3732 of _0xd531d3){if(!_0x5e3732)continue;if(!_0x5e3732[_0x171474(0x28e)]())continue;_0x5e3732[_0x171474(0x28e)]()['refreshMotion']();}},BattleManager['updateAction']=function(){const _0x1dac82=_0x4a3d8d;!this['_logWindow']['isBusy']()&&this[_0x1dac82(0x2ba)]();},Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xb8d)]=function(){const _0x5ab010=_0x4a3d8d;this[_0x5ab010(0xc02)]();if(Imported[_0x5ab010(0x304)]){const _0x43ad15=VisuMZ[_0x5ab010(0x333)][_0x5ab010(0xb75)][_0x5ab010(0xbf1)];_0x43ad15&&_0x43ad15['ActionEndUpdate']===![]&&(_0x5ab010(0x328)!==_0x5ab010(0x91c)?this[_0x5ab010(0x7b5)](0x1):(_0x3bd717=this[_0x5ab010(0x349)]['_forcedHomeX']??_0x1c484a,_0x39caae=this[_0x5ab010(0x349)][_0x5ab010(0x6ff)]??_0x4f5187));}else{if('TYtZG'===_0x5ab010(0x278))this[_0x5ab010(0x7b5)](0x1);else{if(this[_0x5ab010(0x3aa)]){const _0x4e7943=this[_0x5ab010(0x3aa)][_0x5ab010(0x2dd)],_0x1ba434=this['width']-0x8,_0x5af249=this[_0x5ab010(0x2cc)],_0x124b38=this[_0x5ab010(0x70e)],_0x2010d9=_0x1e3628['dimColor1'](),_0x1127a9=_0x1e37ce['dimColor2']();this['_dimmerSprite']['x']=0x4,_0x4e7943[_0x5ab010(0x19d)](_0x1ba434,_0x5af249),_0x4e7943[_0x5ab010(0xadf)](0x0,0x0,_0x1ba434,_0x124b38,_0x1127a9,_0x2010d9,!![]),_0x4e7943[_0x5ab010(0x83b)](0x0,_0x124b38,_0x1ba434,_0x5af249-_0x124b38*0x2,_0x2010d9),_0x4e7943['gradientFillRect'](0x0,_0x5af249-_0x124b38,_0x1ba434,_0x124b38,_0x2010d9,_0x1127a9,!![]),this[_0x5ab010(0x3aa)][_0x5ab010(0x22b)](0x0,0x0,_0x1ba434,_0x5af249);}}}this[_0x5ab010(0x66c)]();},BattleManager['makeEscapeRatio']=function(){const _0x278bfd=_0x4a3d8d;this[_0x278bfd(0x447)]=VisuMZ[_0x278bfd(0x485)]['Settings'][_0x278bfd(0x5de)][_0x278bfd(0xb2e)][_0x278bfd(0xaf0)](this);},VisuMZ['BattleCore'][_0x4a3d8d(0x2aa)]=BattleManager[_0x4a3d8d(0x6eb)],BattleManager[_0x4a3d8d(0x6eb)]=function(){const _0x4eb9d7=_0x4a3d8d;this[_0x4eb9d7(0xa19)](_0x4eb9d7(0x72e)),BattleManager[_0x4eb9d7(0x94c)][_0x4eb9d7(0xb7f)](),VisuMZ['BattleCore'][_0x4eb9d7(0x2aa)][_0x4eb9d7(0xaf0)](this),this[_0x4eb9d7(0xc2b)](_0x4eb9d7(0xa9d));},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x770)]=BattleManager[_0x4a3d8d(0xa26)],BattleManager[_0x4a3d8d(0xa26)]=function(){const _0x4de8bd=_0x4a3d8d;this['processBattleCoreJS']('EscapeFailureJS');const _0x2b5cfc=this[_0x4de8bd(0x447)];VisuMZ[_0x4de8bd(0x485)]['BattleManager_onEscapeFailure'][_0x4de8bd(0xaf0)](this),this[_0x4de8bd(0x447)]=_0x2b5cfc+VisuMZ[_0x4de8bd(0x485)][_0x4de8bd(0xb75)]['Mechanics']['CalcEscapeRaiseJS'][_0x4de8bd(0xaf0)](this),this[_0x4de8bd(0xc2b)](_0x4de8bd(0x9e7));},BattleManager[_0x4a3d8d(0xaa0)]=function(){const _0x3cf7b3=_0x4a3d8d;let _0x52682e=![];if(this[_0x3cf7b3(0x285)]()){if('hiKAb'==='GmyvJ'){if(this[_0x3cf7b3(0x186)]())_0x346ee5['BattleCore'][_0x3cf7b3(0x86b)]['call'](this);}else for(const _0x524e2f of $gameTroop[_0x3cf7b3(0x905)]()){_0x3cf7b3(0x951)!=='Eecsi'?(this[_0x3cf7b3(0x912)][_0x3cf7b3(0x906)](_0x3cf7b3(0x8f9),TextManager[_0x3cf7b3(0xa84)][_0x3cf7b3(0x8dd)](_0x524e2f)),this[_0x3cf7b3(0x912)][_0x3cf7b3(0x906)](_0x3cf7b3(0x6c3)),_0x52682e=!![]):_0x4088f2+=_0x2719e4[_0x3cf7b3(0x531)](_0x35a9e8[_0x3cf7b3(0x3bc)]);}}if(this[_0x3cf7b3(0x967)])this[_0x3cf7b3(0x912)][_0x3cf7b3(0x906)](_0x3cf7b3(0x8f9),TextManager[_0x3cf7b3(0x3a4)][_0x3cf7b3(0x8dd)]($gameParty[_0x3cf7b3(0xbaa)]())),this['_logWindow'][_0x3cf7b3(0x906)](_0x3cf7b3(0x6c3));else this[_0x3cf7b3(0x49c)]&&(this[_0x3cf7b3(0x912)][_0x3cf7b3(0x906)](_0x3cf7b3(0x8f9),TextManager[_0x3cf7b3(0x471)][_0x3cf7b3(0x8dd)]($gameParty[_0x3cf7b3(0xbaa)]())),this[_0x3cf7b3(0x912)][_0x3cf7b3(0x906)](_0x3cf7b3(0x6c3)));if(_0x52682e){if(_0x3cf7b3(0x907)!==_0x3cf7b3(0x3f6))this[_0x3cf7b3(0x912)][_0x3cf7b3(0x906)](_0x3cf7b3(0x6c3)),this['_logWindow'][_0x3cf7b3(0x906)](_0x3cf7b3(0x1db));else return _0x41be0c[_0x3cf7b3(0x3d0)](_0x578762=>_0x578762[_0x3cf7b3(0x2b2)]());}if(this[_0x3cf7b3(0x1d1)]()&&this[_0x3cf7b3(0xabd)]()){if('eFkOz'!==_0x3cf7b3(0xbc7))this['_tpbNeedsPartyCommand']=![];else return this[_0x3cf7b3(0x7d4)]()[_0x3cf7b3(0x478)](_0x19639c=>_0x19639c[_0x3cf7b3(0x665)]());}},BattleManager[_0x4a3d8d(0x285)]=function(){const _0x52a314=_0x4a3d8d;if(BattleManager['_autoBattle'])return![];return VisuMZ[_0x52a314(0x485)][_0x52a314(0xb75)][_0x52a314(0xa50)][_0x52a314(0x57f)];},VisuMZ[_0x4a3d8d(0x485)]['BattleManager_startInput']=BattleManager[_0x4a3d8d(0x276)],BattleManager['startInput']=function(){const _0x4bdb41=_0x4a3d8d;VisuMZ[_0x4bdb41(0x485)][_0x4bdb41(0xaf6)][_0x4bdb41(0xaf0)](this),this['isDTB']()&&this[_0x4bdb41(0xabd)]()&&!this[_0x4bdb41(0x49c)]&&$gameParty[_0x4bdb41(0x28d)]()&&this['selectNextCommand']();},BattleManager[_0x4a3d8d(0xabd)]=function(){const _0x20d700=_0x4a3d8d;return VisuMZ['BattleCore'][_0x20d700(0xb75)][_0x20d700(0x768)][_0x20d700(0x738)];},BattleManager[_0x4a3d8d(0xbcb)]=function(){const _0x335da0=_0x4a3d8d;this['isPartyTpbInputtable']()&&this[_0x335da0(0xbbf)]();},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x22e)]=Scene_Battle[_0x4a3d8d(0x3c4)]['startActorCommandSelection'],Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x2ed)]=function(){const _0x1467e2=_0x4a3d8d;VisuMZ['BattleCore'][_0x1467e2(0x22e)][_0x1467e2(0xaf0)](this);if(BattleManager[_0x1467e2(0x1d1)]()&&BattleManager[_0x1467e2(0x172)]){if(_0x1467e2(0x9bc)===_0x1467e2(0x9bc))BattleManager[_0x1467e2(0x172)]=![],this[_0x1467e2(0x535)]();else return!![];}},BattleManager[_0x4a3d8d(0x65b)]=function(_0x33c70b,_0x5f34e1){const _0x4f7e3e=_0x4a3d8d;this[_0x4f7e3e(0x82e)][_0x4f7e3e(0xba1)]=_0x5f34e1,this[_0x4f7e3e(0x912)]['displayReflection'](_0x5f34e1),this[_0x4f7e3e(0x912)]['displayReflectionPlayBack'](_0x33c70b,this[_0x4f7e3e(0x82e)]),this[_0x4f7e3e(0x82e)]['apply'](_0x33c70b),this[_0x4f7e3e(0x912)][_0x4f7e3e(0x20c)](_0x33c70b,_0x33c70b);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xc51)]=BattleManager['makeActionOrders'],BattleManager[_0x4a3d8d(0x607)]=function(){const _0x1ee736=_0x4a3d8d;VisuMZ['BattleCore'][_0x1ee736(0xc51)][_0x1ee736(0xaf0)](this),this['_actionBattlers']=this[_0x1ee736(0x2db)]['filter'](_0x4099ad=>_0x4099ad&&_0x4099ad[_0x1ee736(0x3d9)]());},VisuMZ[_0x4a3d8d(0x485)]['BattleManager_updatePhase']=BattleManager['updatePhase'],BattleManager[_0x4a3d8d(0xa28)]=function(_0x8b13fc){const _0x224541=_0x4a3d8d;if(this[_0x224541(0x5c9)]===_0x224541(0x4e7))_0x224541(0xb6a)===_0x224541(0x916)?_0x2a26f6=![]:this[_0x224541(0x323)]();else this[_0x224541(0x5c9)]===_0x224541(0x5a5)?this[_0x224541(0x4e1)]():VisuMZ[_0x224541(0x485)][_0x224541(0x539)][_0x224541(0xaf0)](this,_0x8b13fc);},BattleManager[_0x4a3d8d(0x8df)]=function(){const _0x25ccd6=_0x4a3d8d;this['_allTargets']=this[_0x25ccd6(0xc44)][_0x25ccd6(0x5cf)](0x0),this[_0x25ccd6(0x7d0)]=0x0,this[_0x25ccd6(0x86c)]=this[_0x25ccd6(0x8e6)][0x0]||null,this['_phase']='custom';},BattleManager['updateCustomActionSequence']=function(){const _0x990053=_0x4a3d8d;!this['updateEventMain']()&&!this[_0x990053(0x912)]['isBusy']()&&(this['_phase']=_0x990053(0x7fc));},BattleManager[_0x4a3d8d(0x5a5)]=function(_0x537862){const _0x532daf=_0x4a3d8d;this[_0x532daf(0x2db)][_0x532daf(0x34b)](_0x537862);if(_0x537862===this[_0x532daf(0x18b)])return;const _0x546b43=JsonEx[_0x532daf(0x773)](_0x537862[_0x532daf(0x8ed)]());this[_0x532daf(0x5a9)][_0x532daf(0x906)]([_0x537862,_0x546b43]);},BattleManager['processForcedAction']=function(){},BattleManager[_0x4a3d8d(0x227)]=function(){const _0x49cae3=_0x4a3d8d;if(this['isTpb']())'jEzZB'!==_0x49cae3(0x67a)?this[_0x49cae3(0x9c0)]():this['_phase']=_0x49cae3(0x9d8);else this[_0x49cae3(0x5a9)][_0x49cae3(0x482)]>0x0?this[_0x49cae3(0x5c9)]=_0x49cae3(0x9d8):this[_0x49cae3(0x276)]();},BattleManager[_0x4a3d8d(0x663)]=function(){const _0x51e208=_0x4a3d8d,_0x2136ba=this[_0x51e208(0x18b)];_0x2136ba&&this['isTpb']()&&_0x2136ba[_0x51e208(0xa8c)]('undecided');for(;;){if(_0x51e208(0x37c)===_0x51e208(0x679)){const _0x37dafd=_0x4bcb09(_0x1f8b78['$1']),_0x29128e=_0x5daa9a[_0x51e208(0x485)][_0x51e208(0x7d8)](_0x3f6779,'Targets');_0x449e10[_0x51e208(0x485)][_0x51e208(0xa92)](_0x37dafd,_0x29128e);}else{const _0x5c9873=this[_0x51e208(0x81a)]();if(!_0x5c9873)return null;if(_0x5c9873[_0x51e208(0x230)]()&&_0x5c9873['isAlive']())return _0x5c9873;}}},BattleManager[_0x4a3d8d(0x81a)]=function(){const _0x2bb358=_0x4a3d8d;if(this[_0x2bb358(0x5a9)][_0x2bb358(0x482)]>0x0){if(_0x2bb358(0x255)===_0x2bb358(0x255)){const _0x33c161=this['_forcedBattlers'][_0x2bb358(0x331)](),_0x131029=_0x33c161[0x0];return _0x131029[_0x2bb358(0x413)]=_0x131029[_0x2bb358(0x413)]||[],_0x131029['_actions'][0x0]=_0x33c161[0x1],_0x131029;}else this[_0x2bb358(0x701)]();}else return this[_0x2bb358(0x2db)][_0x2bb358(0x331)]();},VisuMZ[_0x4a3d8d(0x485)]['Game_Battler_forceAction']=Game_Battler[_0x4a3d8d(0x3c4)]['forceAction'],Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x5a5)]=function(_0x3862f6,_0x1da8af){const _0x4caa0a=_0x4a3d8d;VisuMZ[_0x4caa0a(0x485)][_0x4caa0a(0x317)][_0x4caa0a(0xaf0)](this,_0x3862f6,_0x1da8af),this[_0x4caa0a(0x413)][this[_0x4caa0a(0x413)][_0x4caa0a(0x482)]-0x1][_0x4caa0a(0x188)]=!![];},Game_Interpreter[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x682)]=function(_0x43c827){return this['iterateBattler'](_0x43c827[0x0],_0x43c827[0x1],_0xa24f75=>{const _0x3aa2e8=_0x8ea5;if(_0x3aa2e8(0x4b7)===_0x3aa2e8(0x4b7))!_0xa24f75['isDeathStateAffected']()&&(_0x3aa2e8(0x1d6)===_0x3aa2e8(0xc2d)?_0x4ccaec=(_0x15a9fd+_0x42b5f2)/0x2:(_0xa24f75['forceAction'](_0x43c827[0x2],_0x43c827[0x3]),BattleManager['forceAction'](_0xa24f75)));else{const _0x1fce1a=this['item']()[_0x3aa2e8(0x9ea)];if(_0x1fce1a[_0x3aa2e8(0x591)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x1fce1a['match'](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return _0x449746(_0x2fd6b7['$1'])/0x64;else{let _0x5de297=_0x17a1f3[_0x3aa2e8(0x485)][_0x3aa2e8(0xb3c)][_0x3aa2e8(0xaf0)](this,_0x248780);return _0x5de297=this[_0x3aa2e8(0x9a2)][_0x3aa2e8(0x430)]*_0x5de297+this[_0x3aa2e8(0x9a2)][_0x3aa2e8(0x55c)],_0x5de297;}}}}),!![];},VisuMZ['BattleCore'][_0x4a3d8d(0x404)]=Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x563)],Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x563)]=function(){const _0x5cb89e=_0x4a3d8d;VisuMZ[_0x5cb89e(0x485)][_0x5cb89e(0x404)][_0x5cb89e(0xaf0)](this),this['_actions'][_0x5cb89e(0x482)]<=0x0&&(this[_0x5cb89e(0x2c1)]=Number[_0x5cb89e(0x876)]);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x551)]=BattleManager[_0x4a3d8d(0xbbf)],BattleManager['selectNextCommand']=function(){const _0x18b070=_0x4a3d8d;if(this[_0x18b070(0x1d1)]())this[_0x18b070(0x97e)]();else{if('ayecU'!==_0x18b070(0xa9f)){const _0x365e8f=this['commandSymbol'](_0x56891c);return _0x365e8f===_0x18b070(0x48b)?this[_0x18b070(0xa20)]():_0x23c531[_0x18b070(0x485)]['Window_Options_statusText'][_0x18b070(0xaf0)](this,_0x50a185);}else VisuMZ[_0x18b070(0x485)][_0x18b070(0x551)]['call'](this);}},BattleManager['selectNextCommandTpb']=function(){const _0x568ddf=_0x4a3d8d;if(this['_currentActor']){if(this[_0x568ddf(0x6d3)][_0x568ddf(0xbbf)]()){if(_0x568ddf(0x67f)!==_0x568ddf(0xaef))return;else{const _0x548dfd=_0x4b0d37[_0x568ddf(0xc22)]()[_0x48dbdc],_0x3ae116=new _0x4b610a();_0x3ae116['moveToStartPositionBattleCore'](_0x548dfd),_0x3ae116['setBattler'](_0x548dfd),_0x3ae116[_0x568ddf(0x372)](),this['_actorSprites']['push'](_0x3ae116),this[_0x568ddf(0x3f2)][_0x568ddf(0x960)](_0x3ae116);}}this[_0x568ddf(0xb33)](),this['checkTpbInputClose'](),!this[_0x568ddf(0x18b)]&&!this[_0x568ddf(0x6d3)]&&SceneManager[_0x568ddf(0x3ff)][_0x568ddf(0x5d9)]();}else!this['_subject']&&this[_0x568ddf(0x79c)]();},BattleManager[_0x4a3d8d(0x56f)]=function(){const _0x7daab4=_0x4a3d8d;(!this[_0x7daab4(0x455)]()||this[_0x7daab4(0x6f1)]())&&(this[_0x7daab4(0x357)]&&(!$gameParty['battleMembers']()[_0x7daab4(0xbff)](this[_0x7daab4(0x357)])&&(this['_tpbSceneChangeCacheActor']=null)),!this[_0x7daab4(0x357)]?'yHBDq'!==_0x7daab4(0x3df)?_0x18967f=_0x2000ee>=_0x256717?_0x57e172:_0x596875:(this[_0x7daab4(0xa3f)](),this[_0x7daab4(0x6d3)]=null,this[_0x7daab4(0x93e)]=![]):this[_0x7daab4(0x41d)]());},BattleManager[_0x4a3d8d(0x41d)]=function(){const _0x19c86e=_0x4a3d8d;!$gameParty['battleMembers']()[_0x19c86e(0xbff)](this['_tpbSceneChangeCacheActor'])&&(_0x19c86e(0x270)==='ZGKlf'?this[_0x19c86e(0x357)]=null:this[_0x19c86e(0xb62)]());if(this[_0x19c86e(0x357)]){if(_0x19c86e(0x566)==='kLhON'){let _0x3f7c4d=_0x4c722b(_0x47a011['$1']);while(_0x3f7c4d--){_0x1099fd[_0x19c86e(0x906)](this['opponentsUnit']()[_0x19c86e(0x2bd)]());}return this[_0x19c86e(0x3ec)](_0x30bd16);}else this[_0x19c86e(0x6d3)]=this[_0x19c86e(0x357)],this[_0x19c86e(0x6d3)]['_tpbState']=_0x19c86e(0xb18),this[_0x19c86e(0x93e)]=!![],this[_0x19c86e(0x357)]=null;}else this[_0x19c86e(0xa3f)](),this[_0x19c86e(0x6d3)]=null,this[_0x19c86e(0x93e)]=![];},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x9c3)]=BattleManager['isTpbMainPhase'],BattleManager[_0x4a3d8d(0x578)]=function(){const _0x2f18ef=_0x4a3d8d;if(this[_0x2f18ef(0x5c9)]===_0x2f18ef(0x4e7))return this['battleCoreTpbMainPhase']();else{if(_0x2f18ef(0x17c)==='rZuVN')return;else return VisuMZ[_0x2f18ef(0x485)][_0x2f18ef(0x9c3)][_0x2f18ef(0xaf0)](this);}},BattleManager['battleCoreTpbMainPhase']=function(){const _0x29aee6=_0x4a3d8d;return this[_0x29aee6(0x504)]();},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x5d5)]=BattleManager['cancelActorInput'],BattleManager[_0x4a3d8d(0xa3f)]=function(){const _0x41f9ed=_0x4a3d8d;this[_0x41f9ed(0x1d1)]()&&this[_0x41f9ed(0x5c9)]===_0x41f9ed(0x7ac)&&('dHuWH'===_0x41f9ed(0x44c)?(_0x4c03a1['BattleCore'][_0x41f9ed(0x767)][_0x41f9ed(0xaf0)](this),_0x23ffe9[_0x41f9ed(0x930)]()&&this[_0x41f9ed(0x834)](_0x41f9ed(0x75f))):this[_0x41f9ed(0x6d3)]=null),VisuMZ[_0x41f9ed(0x485)]['BattleManager_cancelActorInput'][_0x41f9ed(0xaf0)](this);},VisuMZ['BattleCore'][_0x4a3d8d(0x9dd)]=BattleManager[_0x4a3d8d(0x281)],BattleManager[_0x4a3d8d(0x281)]=function(){const _0x12b55b=_0x4a3d8d,_0x1fa0cf=this[_0x12b55b(0x6d3)];if(_0x1fa0cf&&!_0x1fa0cf['inputtingAction']()){const _0x4766a1=_0x1fa0cf[_0x12b55b(0x765)];_0x1fa0cf[_0x12b55b(0x413)][_0x4766a1]=new Game_Action(_0x1fa0cf);}return VisuMZ[_0x12b55b(0x485)][_0x12b55b(0x9dd)][_0x12b55b(0xaf0)](this);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x9c2)]=BattleManager[_0x4a3d8d(0xac1)],BattleManager[_0x4a3d8d(0xac1)]=function(_0x1feb3f){const _0x4f944a=_0x4a3d8d;if(this[_0x4f944a(0x82e)][_0x4f944a(0x657)]())return![];return VisuMZ[_0x4f944a(0x485)][_0x4f944a(0x9c2)][_0x4f944a(0xaf0)](this,_0x1feb3f);},SceneManager['isSceneBattle']=function(){const _0xaa46f0=_0x4a3d8d;return this[_0xaa46f0(0x3ff)]&&this[_0xaa46f0(0x3ff)][_0xaa46f0(0x6ee)]===Scene_Battle;},SceneManager['isBattleFlipped']=function(){const _0x44f281=_0x4a3d8d;return Spriteset_Battle[_0x44f281(0x3c4)][_0x44f281(0xbb8)]();},SceneManager[_0x4a3d8d(0xc13)]=function(){const _0x26a307=_0x4a3d8d;if(SceneManager[_0x26a307(0x9f1)](Scene_Options))return!![];return![];},SceneManager[_0x4a3d8d(0x8fa)]=function(){const _0x46cb56=_0x4a3d8d;if(SceneManager[_0x46cb56(0x923)](Scene_Options))return!![];return![];},SceneManager[_0x4a3d8d(0xabf)]=function(_0x1d8dab){const _0x4b2bbc=_0x4a3d8d;if(!SceneManager[_0x4b2bbc(0x930)]())return!![];const _0xb1b576=[_0x4b2bbc(0x667),_0x4b2bbc(0x987)];return _0xb1b576['includes'](_0x1d8dab['name']);},VisuMZ[_0x4a3d8d(0x485)]['SceneManager_push']=SceneManager[_0x4a3d8d(0x906)],SceneManager['push']=function(_0x3fc0ec){const _0x53f010=_0x4a3d8d;if(!SceneManager[_0x53f010(0xabf)](_0x3fc0ec))return this[_0x53f010(0x8e2)](_0x3fc0ec);VisuMZ[_0x53f010(0x485)][_0x53f010(0x1fb)][_0x53f010(0xaf0)](this,_0x3fc0ec);},SceneManager[_0x4a3d8d(0x8e2)]=function(_0x13255e){const _0x327778=_0x4a3d8d;if(!$gameTemp[_0x327778(0x816)]())return;if(this[_0x327778(0x289)])return;this[_0x327778(0x289)]=!![];let _0x4aa633='';_0x4aa633+=_0x327778(0x1c5),_0x4aa633+=_0x327778(0xa03)[_0x327778(0x8dd)](_0x13255e['name']),alert(_0x4aa633);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xbd2)]=Game_Temp[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x5af)],Game_Temp[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x5af)]=function(_0x3c9ca7,_0x75b4c2,_0x199f82){const _0x498a53=_0x4a3d8d;_0x3c9ca7=_0x3c9ca7['filter']((_0x43c584,_0x53df8f,_0x2a766e)=>_0x2a766e[_0x498a53(0x2b7)](_0x43c584)===_0x53df8f),SceneManager['isSceneBattle']()&&SceneManager[_0x498a53(0x4cc)]()&&(_0x199f82=!_0x199f82),VisuMZ[_0x498a53(0x485)][_0x498a53(0xbd2)]['call'](this,_0x3c9ca7,_0x75b4c2,_0x199f82),SceneManager[_0x498a53(0x930)]()&&BattleManager['_spriteset'][_0x498a53(0x3ab)]();},Game_Temp[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x70f)]=function(_0x54ef82){const _0x20b8df=_0x4a3d8d;this[_0x20b8df(0x650)]=_0x54ef82;},Game_Temp[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x202)]=function(){const _0x4d736b=_0x4a3d8d;return this[_0x4d736b(0x650)];},Game_Temp[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x20f)]=function(){const _0x1cdbed=_0x4a3d8d;this[_0x1cdbed(0x168)]=undefined;},Game_Temp[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x3da)]=function(_0x25b5a0){const _0x484513=_0x4a3d8d;$gameMap&&$dataMap&&$dataMap[_0x484513(0x9ea)]&&this[_0x484513(0x182)]($dataMap['note']);const _0xc6ba4e=$dataTroops[_0x25b5a0];if(_0xc6ba4e){if(_0x484513(0xaee)!==_0x484513(0x56a)){let _0x12e738=DataManager['createTroopNote'](_0xc6ba4e['id']);this['parseForcedGameTroopSettingsBattleCore'](_0x12e738);}else!_0x102e72[_0x484513(0xc22)]()['includes'](this['_tpbSceneChangeCacheActor'])&&(this[_0x484513(0x357)]=null),this[_0x484513(0x357)]?(this[_0x484513(0x6d3)]=this[_0x484513(0x357)],this['_currentActor'][_0x484513(0x33f)]=_0x484513(0xb18),this[_0x484513(0x93e)]=!![],this[_0x484513(0x357)]=null):(this['cancelActorInput'](),this[_0x484513(0x6d3)]=null,this['_inputting']=![]);}},Game_Temp[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x182)]=function(_0x33df8e){const _0x50bf9b=_0x4a3d8d;if(!_0x33df8e)return;if(_0x33df8e['match'](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*)>/i)){const _0x27971d=String(RegExp['$1']);if(_0x27971d[_0x50bf9b(0x591)](/DEFAULT/i))this[_0x50bf9b(0x168)]=_0x50bf9b(0x646);else{if(_0x27971d[_0x50bf9b(0x591)](/LIST/i)){if('LMjBg'!==_0x50bf9b(0x37b))this[_0x50bf9b(0x168)]='list';else{if(!_0x2c90b0[_0x50bf9b(0x930)]())return;_0x56e066[_0x50bf9b(0x6a8)](_0x59a19c,_0x5e9895);const _0x4bb6fe=_0x338a42['getLastPluginCommandInterpreter'](),_0x401ecc=_0x3d6ec6['CreateActionSequenceTargets'](_0x5e2eee['Targets']),_0x29c51e=_0x1c96b6[_0x50bf9b(0xac4)],_0x2d4d3a=_0x4b7ea0[_0x50bf9b(0x605)];if(!_0x4bb6fe)return;_0x215668['requestAnimation'](_0x401ecc,_0x29c51e,_0x2d4d3a);if(_0x576ae4['WaitForAnimation'])_0x4bb6fe[_0x50bf9b(0x49b)]('battleAnimation');}}else{if(_0x27971d[_0x50bf9b(0x591)](/XP/i)){if('xVlgr'===_0x50bf9b(0x459))this[_0x50bf9b(0x168)]='xp';else return _0x359aac[_0x50bf9b(0x485)][_0x50bf9b(0xb75)][_0x50bf9b(0xa50)]['NameAlwaysHidden'];}else{if(_0x27971d[_0x50bf9b(0x591)](/PORTRAIT/i))this[_0x50bf9b(0x168)]=_0x50bf9b(0x9e1);else{if(_0x27971d[_0x50bf9b(0x591)](/BORDER/i))this['_forcedBattleLayout']=_0x50bf9b(0xa18);else _0x27971d[_0x50bf9b(0x591)](/(?:SIDEVIEW UI|SIDEVIEW)/i)&&(Imported['VisuMZ_3_SideviewBattleUI']?this[_0x50bf9b(0x168)]=_0x50bf9b(0x3ea):this[_0x50bf9b(0x168)]=_0x50bf9b(0x646));}}}}}},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x13e)]=Game_System[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x82a)],Game_System[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x82a)]=function(){const _0x4de6e5=_0x4a3d8d;VisuMZ['BattleCore'][_0x4de6e5(0x13e)][_0x4de6e5(0xaf0)](this),this[_0x4de6e5(0x6f7)]();},Game_System[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x6f7)]=function(){const _0x1d3f6e=_0x4a3d8d;this[_0x1d3f6e(0x47d)]=this[_0x1d3f6e(0x47d)]||[];},Game_System[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x72d)]=function(){const _0x387d07=_0x4a3d8d;if(this[_0x387d07(0x47d)]===undefined)this[_0x387d07(0x6f7)]();return this[_0x387d07(0x47d)];},Game_System[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x418)]=function(_0x4fa024){const _0x2159e5=_0x4a3d8d;if(this[_0x2159e5(0x47d)]===undefined)this[_0x2159e5(0x6f7)]();if(!_0x4fa024)return;if(this['_defeatedEnemies'][_0x2159e5(0xbff)](_0x4fa024))return;this[_0x2159e5(0x47d)][_0x2159e5(0x906)](_0x4fa024),this[_0x2159e5(0x47d)]['sort']((_0x4b664f,_0x3083dd)=>_0x4b664f-_0x3083dd);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x306)]=Game_BattlerBase[_0x4a3d8d(0x3c4)]['addNewState'],Game_BattlerBase[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x329)]=function(_0x6394eb){const _0x3b0208=_0x4a3d8d,_0x500e85=this[_0x3b0208(0x32c)](),_0x1df5fb=this[_0x3b0208(0xa3a)]();VisuMZ[_0x3b0208(0x485)][_0x3b0208(0x306)][_0x3b0208(0xaf0)](this,_0x6394eb);if(this[_0x3b0208(0x87a)]()&&_0x500e85&&this[_0x3b0208(0x2b2)]()){if(_0x3b0208(0x16e)!==_0x3b0208(0x16e)){this[_0x3b0208(0x85e)]=new _0xf24003();for(let _0x13a92c=0x0;_0x13a92c<0x9;_0x13a92c++){this[_0x3b0208(0x85e)][_0x3b0208(0x960)](new _0x5de864());}this[_0x3b0208(0xae0)][_0x3b0208(0x960)](this[_0x3b0208(0x85e)]);}else this[_0x3b0208(0xba6)]=!this['hasBeenDefeatedBefore'](),$gameSystem[_0x3b0208(0x418)](this[_0x3b0208(0x313)]());}SceneManager[_0x3b0208(0x930)]()&&_0x1df5fb!==this[_0x3b0208(0xa3a)]()&&(this[_0x3b0208(0x28e)]()&&this['battler']()[_0x3b0208(0x1ef)]());},Game_Enemy['prototype'][_0x4a3d8d(0x3b0)]=function(){const _0x2f2046=_0x4a3d8d;return $gameSystem['getDefeatedEnemies']()[_0x2f2046(0xbff)](this[_0x2f2046(0x1c3)]);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x162)]=Game_BattlerBase[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xb86)],Game_BattlerBase[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xb86)]=function(_0x2e9e6e){const _0x551704=_0x4a3d8d;VisuMZ[_0x551704(0x485)][_0x551704(0x162)][_0x551704(0xaf0)](this,_0x2e9e6e);if(this['isEnemy']()&&_0x2e9e6e===this[_0x551704(0x844)]()&&this[_0x551704(0x32c)]()){if(_0x551704(0xbfb)!==_0x551704(0xbfb)){let _0x5437a6=_0x551704(0xa9e);if(this['checkCacheKey'](_0x5437a6))return this[_0x551704(0x635)][_0x5437a6];return this[_0x551704(0x635)][_0x5437a6]=this['createBattleUIOffsetX'](this[_0x551704(0x382)]()),this[_0x551704(0x635)][_0x5437a6];}else this[_0x551704(0xba6)]=![];}!this[_0x551704(0x8c3)]&&!this[_0x551704(0x7be)]&&SceneManager[_0x551704(0x930)]()&&this['requestMotionRefresh']();},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x833)]=Game_Action[_0x4a3d8d(0x3c4)]['clear'],Game_Action[_0x4a3d8d(0x3c4)]['clear']=function(){const _0x51636f=_0x4a3d8d;VisuMZ[_0x51636f(0x485)][_0x51636f(0x833)][_0x51636f(0xaf0)](this),this[_0x51636f(0xba5)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this['_multipliers']={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x51636f(0x647)]='default';},Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x7cc)]=function(_0x11f5ef,_0x176e67){const _0x141545=_0x4a3d8d;return VisuMZ[_0x141545(0x485)]['Settings'][_0x141545(0xb55)]['OverallFormulaJS'][_0x141545(0xaf0)](this,_0x11f5ef,_0x176e67);},Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x195)]=function(_0x425fd5,_0x4e05e5){const _0x1234d8=_0x4a3d8d;return VisuMZ[_0x1234d8(0x485)][_0x1234d8(0xb75)]['Damage'][_0x1234d8(0x9eb)][_0x1234d8(0xaf0)](this,_0x425fd5,_0x4e05e5);},Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x62a)]=function(_0xf83876,_0x34a1db){const _0x3bf11d=_0x4a3d8d;return VisuMZ['BattleCore']['Settings']['Damage'][_0x3bf11d(0x935)]['call'](this,_0xf83876,_0x34a1db);},VisuMZ['BattleCore']['Game_Action_itemHit']=Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x344)],Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x344)]=function(_0x2b9844){const _0x2a7c5b=_0x4a3d8d,_0x21585c=this[_0x2a7c5b(0x49d)]()[_0x2a7c5b(0x9ea)];if(_0x21585c[_0x2a7c5b(0x591)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x21585c[_0x2a7c5b(0x591)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x1b08a2=VisuMZ[_0x2a7c5b(0x485)][_0x2a7c5b(0xb3c)][_0x2a7c5b(0xaf0)](this,_0x2b9844);return _0x1b08a2=this[_0x2a7c5b(0x9a2)][_0x2a7c5b(0x430)]*_0x1b08a2+this[_0x2a7c5b(0x9a2)][_0x2a7c5b(0x55c)],_0x1b08a2;}}},Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x8b4)]=function(_0x4d4770){const _0x202c84=_0x4a3d8d;if(!this[_0x202c84(0x49d)]()['damage'][_0x202c84(0x9fa)])return 0x0;let _0x5d4b7f=VisuMZ[_0x202c84(0x485)][_0x202c84(0xb75)][_0x202c84(0xb55)][_0x202c84(0x623)]['call'](this,_0x4d4770);return _0x5d4b7f=this['_multipliers'][_0x202c84(0x64c)]*_0x5d4b7f+this[_0x202c84(0x9a2)][_0x202c84(0xaaf)],_0x5d4b7f;},Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x345)]=function(_0x278475){const _0x45eb9b=_0x4a3d8d;return _0x278475=VisuMZ[_0x45eb9b(0x485)]['Settings'][_0x45eb9b(0xb55)][_0x45eb9b(0x9f3)][_0x45eb9b(0xaf0)](this,_0x278475),_0x278475=this['_multipliers'][_0x45eb9b(0x5bc)]*_0x278475+this['_multipliers'][_0x45eb9b(0x1c8)],_0x278475;},VisuMZ[_0x4a3d8d(0x485)]['Game_Action_evalDamageFormula']=Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x3f0)],Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x3f0)]=function(_0x2d3783){const _0xc0f325=_0x4a3d8d;if(this['_customDamageFormula']!==_0xc0f325(0x646))return this[_0xc0f325(0xa83)](_0x2d3783);else{if(DataManager[_0xc0f325(0xabe)](this[_0xc0f325(0x49d)]())===_0xc0f325(0xad8))return VisuMZ['BattleCore'][_0xc0f325(0x2d8)]['call'](this,_0x2d3783);else{if(_0xc0f325(0x515)!=='LIVXF')_0x8edb99(_0xc0f325(0x75a)['format'](_0x79659c,_0x22b709,_0x23bbac)),_0xdbaf40[_0xc0f325(0x4c2)]();else return this['evalDamageFormulaBattleCore'](_0x2d3783);}}},Game_Action[_0x4a3d8d(0x3c4)]['setCustomDamageFormula']=function(_0x18136a){const _0x20a155=_0x4a3d8d;this[_0x20a155(0x647)]=_0x18136a;},Game_Action['prototype'][_0x4a3d8d(0xa83)]=function(_0x336c37){const _0x1a3cb5=_0x4a3d8d,_0x4f3c51=this[_0x1a3cb5(0x49d)](),_0x55a654=_0x4f3c51[_0x1a3cb5(0x83f)][_0x1a3cb5(0x60b)];_0x4f3c51[_0x1a3cb5(0x83f)][_0x1a3cb5(0x60b)]=this[_0x1a3cb5(0x647)];let _0x6d41d9=VisuMZ['BattleCore'][_0x1a3cb5(0x2d8)][_0x1a3cb5(0xaf0)](this,_0x336c37);return _0x4f3c51[_0x1a3cb5(0x83f)][_0x1a3cb5(0x60b)]=_0x55a654,_0x6d41d9;},Game_Action[_0x4a3d8d(0x3c4)]['damageStyle']=function(){const _0x3c4300=_0x4a3d8d;if(this[_0x3c4300(0x49d)]()[_0x3c4300(0x9ea)][_0x3c4300(0x591)](/<DAMAGE STYLE:[ ](.*)>/i)){if('lLaKB'!==_0x3c4300(0x203)){const _0x3aaefd=this[_0x3c4300(0x6f2)][_0x3c4300(0x3cb)]['y'];_0xeb4b5f-=(_0x3aaefd-0x1)*this[_0x3c4300(0x2cc)];}else{const _0x184b37=String(RegExp['$1'])[_0x3c4300(0x302)]()['trim']();return _0x184b37;}}return _0x3c4300(0xad8);},Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xbcd)]=function(_0x305708){const _0x433aef=_0x4a3d8d,_0x5366c8=DataManager[_0x433aef(0xabe)](this[_0x433aef(0x49d)]()),_0x49c1f3=VisuMZ['DamageStyles'][_0x5366c8];try{return _0x49c1f3[_0x433aef(0xb45)][_0x433aef(0xaf0)](this,_0x305708);}catch(_0x498de8){if(_0x433aef(0xb28)!==_0x433aef(0x5d4)){if($gameTemp[_0x433aef(0x816)]())console[_0x433aef(0x490)](_0x498de8);return VisuMZ[_0x433aef(0x485)][_0x433aef(0x2d8)][_0x433aef(0xaf0)](this);}else{if(_0x529398[_0x433aef(0x940)]()[_0x433aef(0x8ef)]>0x0)return!![];this[_0x433aef(0x402)]='';}}},Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x2df)]=function(_0x3876aa,_0x1b9e27){const _0x3c47b3=_0x4a3d8d;if(this[_0x3c47b3(0x750)]())return _0x1b9e27;const _0x2e9870=this['subject'](),_0x5690f4=_0x3876aa;let _0x47d4bc=[],_0xc16ff1=[];_0x47d4bc[_0x3c47b3(0x906)](this['_armorPenetration'][_0x3c47b3(0x5cb)],this['_armorPenetration'][_0x3c47b3(0x346)]),_0xc16ff1['push'](this[_0x3c47b3(0xba5)][_0x3c47b3(0xae6)],this[_0x3c47b3(0xba5)]['arRedRate']);const _0x4d7c10=this[_0x3c47b3(0x732)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x3519c5=this[_0x3c47b3(0x732)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0xfc17ae=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x1e71dd=this[_0x3c47b3(0x732)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;_0x47d4bc=_0x47d4bc['concat'](_0x5690f4[_0x3c47b3(0x7e0)]()[_0x3c47b3(0xa4a)](_0x3d64c7=>_0x3d64c7&&_0x3d64c7[_0x3c47b3(0x9ea)][_0x3c47b3(0x591)](_0x4d7c10)?Number(RegExp['$1']):0x0)),_0xc16ff1=_0xc16ff1[_0x3c47b3(0xb1a)](_0x5690f4[_0x3c47b3(0x7e0)]()[_0x3c47b3(0xa4a)](_0x3b9314=>_0x3b9314&&_0x3b9314[_0x3c47b3(0x9ea)][_0x3c47b3(0x591)](_0x3519c5)?Number(RegExp['$1'])/0x64:0x0)),_0x47d4bc=_0x47d4bc[_0x3c47b3(0xb1a)](_0x2e9870['traitObjects']()[_0x3c47b3(0xa4a)](_0x4abcd1=>_0x4abcd1&&_0x4abcd1[_0x3c47b3(0x9ea)][_0x3c47b3(0x591)](_0xfc17ae)?Number(RegExp['$1']):0x0)),_0xc16ff1=_0xc16ff1[_0x3c47b3(0xb1a)](_0x2e9870[_0x3c47b3(0x7e0)]()['map'](_0x2973ad=>_0x2973ad&&_0x2973ad[_0x3c47b3(0x9ea)]['match'](_0x1e71dd)?Number(RegExp['$1'])/0x64:0x0));this[_0x3c47b3(0x49d)]()[_0x3c47b3(0x9ea)]['match'](_0xfc17ae)&&_0x47d4bc['push'](Number(RegExp['$1']));if(this['item']()[_0x3c47b3(0x9ea)][_0x3c47b3(0x591)](_0x1e71dd)){if(_0x3c47b3(0x4a2)!==_0x3c47b3(0xb10))_0xc16ff1[_0x3c47b3(0x906)](Number(RegExp['$1']));else{_0x2fd606['BattleCore'][_0x3c47b3(0x669)][_0x3c47b3(0xaf0)](this);if(this[_0x3c47b3(0x30c)][_0x3c47b3(0xb96)]===0x3){if(this['x']===0x0)this['x']=_0x329d41[_0x3c47b3(0x89f)](_0x43bd46[_0x3c47b3(0xb49)]/0x2);if(this['y']===0x0)this['y']=_0x2a1573[_0x3c47b3(0x89f)](_0x4546b4[_0x3c47b3(0x2cc)]/0x2);}else{if(this[_0x3c47b3(0x71e)])return;const _0xb61d01=(_0x2356ad[_0x3c47b3(0x714)]?_0xbfc140[_0x3c47b3(0x6bb)][_0x3c47b3(0xb75)]['UI'][_0x3c47b3(0xa51)]:0x4)*0x2,_0xc50fd6=(_0x1cc9e1[_0x3c47b3(0xb49)]-(_0x31a212[_0x3c47b3(0x6c0)]+_0xb61d01))/0x2;if(_0xc50fd6!==0x0)this['x']+=_0xc50fd6;}}}return _0x1b9e27=_0x47d4bc[_0x3c47b3(0x544)]((_0x2d6e0a,_0x37f3c2)=>_0x2d6e0a-_0x37f3c2,_0x1b9e27),_0x1b9e27>0x0&&(_0x1b9e27=_0xc16ff1[_0x3c47b3(0x544)]((_0x15ff2a,_0x51af7e)=>_0x15ff2a*(0x1-_0x51af7e),_0x1b9e27)),_0x1b9e27;},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xa6a)]=Game_Action['prototype'][_0x4a3d8d(0x173)],Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x173)]=function(_0xee07b7,_0x13d4af){const _0x4d00ec=_0x4a3d8d;_0x13d4af=_0x13d4af*this[_0x4d00ec(0x9a2)][_0x4d00ec(0x432)],_0x13d4af+=this['_multipliers'][_0x4d00ec(0x2e1)]*(_0x13d4af>=0x0?0x1:-0x1),_0x13d4af=this[_0x4d00ec(0x400)](_0x4d00ec(0x9e3),_0xee07b7,_0x13d4af,![]),_0x13d4af=this[_0x4d00ec(0xc1e)](_0x13d4af),_0x13d4af=Math[_0x4d00ec(0x89f)](_0x13d4af),this[_0x4d00ec(0x3b1)]=_0x13d4af,this['_totalValue']=this[_0x4d00ec(0x7a5)]||0x0,this[_0x4d00ec(0x7a5)]+=_0x13d4af,VisuMZ[_0x4d00ec(0x485)]['Game_Action_executeDamage'][_0x4d00ec(0xaf0)](this,_0xee07b7,_0x13d4af),this[_0x4d00ec(0x400)](_0x4d00ec(0x23a),_0xee07b7,_0x13d4af,!![]);},Game_Action[_0x4a3d8d(0x3c4)]['applyDamageCaps']=function(_0x41eb70){const _0x47d9fd=_0x4a3d8d;if(this['isBypassDamageCap']())return _0x41eb70;return _0x41eb70=this[_0x47d9fd(0x7fe)](_0x41eb70),_0x41eb70=this['applyHardDamageCap'](_0x41eb70),_0x41eb70;},Game_Action[_0x4a3d8d(0x3c4)]['isBypassDamageCap']=function(){const _0x3088e6=_0x4a3d8d,_0x50cbbb=/<BYPASS DAMAGE CAP>/i;if(this[_0x3088e6(0x49d)]()[_0x3088e6(0x9ea)]['match'](_0x50cbbb))return!![];if(this[_0x3088e6(0x601)]()[_0x3088e6(0x7e0)]()[_0x3088e6(0x478)](_0x2a5f59=>_0x2a5f59&&_0x2a5f59[_0x3088e6(0x9ea)][_0x3088e6(0x591)](_0x50cbbb)))return!![];return!VisuMZ[_0x3088e6(0x485)][_0x3088e6(0xb75)]['Damage'][_0x3088e6(0xb60)];},Game_Action['prototype'][_0x4a3d8d(0x7fe)]=function(_0xece3c5){const _0xc51bc4=_0x4a3d8d;if(!VisuMZ[_0xc51bc4(0x485)]['Settings'][_0xc51bc4(0xb55)][_0xc51bc4(0x772)])return _0xece3c5;const _0x89ae4a=/<BYPASS SOFT DAMAGE CAP>/i;if(this['item']()[_0xc51bc4(0x9ea)][_0xc51bc4(0x591)](_0x89ae4a))return _0xece3c5;if(this[_0xc51bc4(0x601)]()[_0xc51bc4(0x7e0)]()['some'](_0x5c61e7=>_0x5c61e7&&_0x5c61e7['note'][_0xc51bc4(0x591)](_0x89ae4a)))return _0xece3c5;const _0x355f90=_0xece3c5<0x0?-0x1:0x1;_0xece3c5=Math[_0xc51bc4(0x531)](_0xece3c5);let _0x3c9d5e=this[_0xc51bc4(0x601)]()[_0xc51bc4(0x913)]();this['item']()[_0xc51bc4(0x9ea)][_0xc51bc4(0x591)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x3c9d5e+=Number(RegExp['$1'])/0x64);_0x3c9d5e=_0x3c9d5e[_0xc51bc4(0x6e3)](0.01,0x1);const _0x1d5509=this[_0xc51bc4(0x917)](),_0xdb3a60=_0x3c9d5e*_0x1d5509;if(_0xece3c5>_0xdb3a60&&_0x1d5509>_0xdb3a60){if(_0xc51bc4(0x41c)==='UpDYH'){const _0x4d5653=this['weapons'](),_0x90ab4d=_0x4d5653[0x0]?_0x4d5653[0x0][_0xc51bc4(0x26b)]:0x0;return _0x4dce52['attackMotions'][_0x90ab4d];}else{_0xece3c5-=_0xdb3a60;const _0x183f9e=VisuMZ['BattleCore'][_0xc51bc4(0xb75)][_0xc51bc4(0xb55)][_0xc51bc4(0x972)],_0xb95890=Math['max'](0x1-_0xece3c5/((_0x1d5509-_0xdb3a60)*_0x183f9e+_0xece3c5),0.01);_0xece3c5*=_0xb95890,_0xece3c5+=_0xdb3a60;}}return _0xece3c5*_0x355f90;},Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x917)]=function(){const _0xdcd4a5=_0x4a3d8d;if(this[_0xdcd4a5(0x49d)]()[_0xdcd4a5(0x9ea)][_0xdcd4a5(0x591)](/<DAMAGE CAP:[ ](\d+)>/i)){if(_0xdcd4a5(0x3eb)!=='tQeml')return Number(RegExp['$1']);else _0x1fb3e1['BattleCore']['Game_Action_setGuard']['call'](this);}else return this[_0xdcd4a5(0x601)]()['hardDamageCap']();},Game_Action['prototype'][_0x4a3d8d(0x82b)]=function(_0x2b2ee2){const _0x1152ef=_0x4a3d8d;console[_0x1152ef(0x490)](_0x2b2ee2);let _0x37894f=this[_0x1152ef(0x917)]();return _0x2b2ee2[_0x1152ef(0x6e3)](-_0x37894f,_0x37894f);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x303)]=Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xaf4)],Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xaf4)]=function(_0x22784c){const _0x27e848=_0x4a3d8d;this[_0x27e848(0x400)](_0x27e848(0x812),_0x22784c,0x0,!![]),VisuMZ['BattleCore'][_0x27e848(0x303)][_0x27e848(0xaf0)](this,_0x22784c),this[_0x27e848(0x400)](_0x27e848(0x6f5),_0x22784c,this[_0x27e848(0x3b1)]||0x0,!![]),this[_0x27e848(0x30a)](_0x22784c);},Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x400)]=function(_0x5b82ae,_0x14e204,_0x435e30,_0x4f7801){const _0xd1554c=_0x4a3d8d;if(this['_tempBattler']||this[_0xd1554c(0x8c3)])return;_0x435e30=_0x435e30||0x0;const _0x39a553=_0x435e30,_0x3f313c=VisuMZ[_0xd1554c(0x485)]['Settings'][_0xd1554c(0x5de)],_0x55a2df=_0x5b82ae['format']('');if(_0x3f313c[_0x55a2df]){if('yFQvX'!==_0xd1554c(0x1ad)){_0x435e30=_0x3f313c[_0x55a2df][_0xd1554c(0xaf0)](this,_0x435e30,_0x14e204);if(_0x4f7801)_0x435e30=_0x39a553;}else return this[_0xd1554c(0xb15)]>0x0;}let _0x490a9d=VisuMZ['BattleCore']['createKeyJS'](this['item'](),_0x5b82ae['format'](''));if(VisuMZ['BattleCore']['JS'][_0x490a9d]){_0x435e30=VisuMZ[_0xd1554c(0x485)]['JS'][_0x490a9d][_0xd1554c(0xaf0)](this,this[_0xd1554c(0x601)](),_0x14e204,this[_0xd1554c(0x49d)](),_0x435e30);if(_0x4f7801)_0x435e30=_0x39a553;}for(const _0x2730cc of this[_0xd1554c(0x601)]()['traitObjects']()){if(!_0x2730cc)continue;_0x490a9d=VisuMZ[_0xd1554c(0x485)][_0xd1554c(0x7d8)](_0x2730cc,_0x5b82ae[_0xd1554c(0x8dd)]('AsUser'));if(VisuMZ[_0xd1554c(0x485)]['JS'][_0x490a9d]){if('Gmiir'!=='GCqVL'){_0x435e30=VisuMZ[_0xd1554c(0x485)]['JS'][_0x490a9d]['call'](this,this[_0xd1554c(0x601)](),_0x14e204,_0x2730cc,_0x435e30);if(_0x4f7801)_0x435e30=_0x39a553;}else _0x2c8d70[_0xd1554c(0x485)]['Window_BattleLog_performRecovery'][_0xd1554c(0xaf0)](this,_0x2f48c7),this['callNextMethod']();}}for(const _0x189e0a of _0x14e204['traitObjects']()){if(!_0x189e0a)continue;_0x490a9d=VisuMZ[_0xd1554c(0x485)][_0xd1554c(0x7d8)](_0x189e0a,_0x5b82ae[_0xd1554c(0x8dd)](_0xd1554c(0xb87)));if(VisuMZ[_0xd1554c(0x485)]['JS'][_0x490a9d]){if(_0xd1554c(0x7c4)!==_0xd1554c(0x2f1)){_0x435e30=VisuMZ[_0xd1554c(0x485)]['JS'][_0x490a9d]['call'](this,this[_0xd1554c(0x601)](),_0x14e204,_0x189e0a,_0x435e30);if(_0x4f7801)_0x435e30=_0x39a553;}else{if(_0x37f3cc[_0xd1554c(0x1d1)]()){if(this[_0xd1554c(0x7a7)]()<=0x0)return;}else{if(_0x3a1e62[_0xd1554c(0x7a7)]()<=0x0)return;}}}}return _0x435e30;},Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x1a7)]=function(_0x2ca258){const _0x50d561=_0x4a3d8d,_0x441fa1=this[_0x50d561(0x7a5)]||0x0,_0x1f1cd6=VisuMZ[_0x50d561(0x485)][_0x50d561(0xb75)][_0x50d561(0x5de)],_0x1e7f71=_0x2ca258[_0x50d561(0x8dd)]('');_0x1f1cd6[_0x1e7f71]&&_0x1f1cd6[_0x1e7f71][_0x50d561(0xaf0)](this,_0x441fa1);let _0x21857c=VisuMZ[_0x50d561(0x485)]['createKeyJS'](this[_0x50d561(0x49d)](),_0x2ca258);VisuMZ['BattleCore']['JS'][_0x21857c]&&VisuMZ[_0x50d561(0x485)]['JS'][_0x21857c][_0x50d561(0xaf0)](this,this['subject'](),this[_0x50d561(0x601)](),this[_0x50d561(0x49d)](),_0x441fa1);for(const _0x41bc01 of this[_0x50d561(0x601)]()['traitObjects']()){if(_0x50d561(0x9a9)===_0x50d561(0x9a9)){if(!_0x41bc01)continue;_0x21857c=VisuMZ[_0x50d561(0x485)][_0x50d561(0x7d8)](_0x41bc01,_0x2ca258);if(VisuMZ[_0x50d561(0x485)]['JS'][_0x21857c]){if('BIwda'!==_0x50d561(0xb89))VisuMZ[_0x50d561(0x485)]['JS'][_0x21857c][_0x50d561(0xaf0)](this,this[_0x50d561(0x601)](),this[_0x50d561(0x601)](),_0x41bc01,_0x441fa1);else{if(!_0x250e49[_0x50d561(0x957)]())return;const _0x1f30e6=this['battler']();if(!_0x1f30e6)return;_0x1f30e6[_0x50d561(0x8c5)](_0x5ba06a,_0x1821c2,_0x3329be);}}}else _0x5dd747[_0x50d561(0x485)][_0x50d561(0x890)][_0x50d561(0xaf0)](this,_0x17c110),_0x29de25[_0x50d561(0x38d)]();}},Game_Action['prototype'][_0x4a3d8d(0x38a)]=function(){const _0xae7fd6=_0x4a3d8d;return VisuMZ['BattleCore'][_0xae7fd6(0xb75)]['Mechanics']['CalcActionSpeedJS'][_0xae7fd6(0xaf0)](this);},Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x76c)]=function(){const _0x568b8a=_0x4a3d8d;return VisuMZ[_0x568b8a(0x485)][_0x568b8a(0xb75)][_0x568b8a(0x5de)][_0x568b8a(0x9ca)];},Game_Action['prototype'][_0x4a3d8d(0x700)]=function(){const _0x1de6fb=_0x4a3d8d;return this[_0x1de6fb(0x49d)]()[_0x1de6fb(0x9ea)]['match'](/<JS TARGETS>/i);},Game_Action['prototype'][_0x4a3d8d(0xa1d)]=function(){const _0x116372=_0x4a3d8d;if(!this['_forcing']&&this['subject']()[_0x116372(0x1fa)]())return![];if(this[_0x116372(0x700)]())return!![];return typeof this[_0x116372(0x49d)]()[_0x116372(0x918)]==='string';},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x28a)]=Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x7b4)],Game_Action[_0x4a3d8d(0x3c4)]['isForOpponent']=function(){const _0x44bff3=_0x4a3d8d;if(this[_0x44bff3(0xa1d)]()&&!this[_0x44bff3(0x700)]()){if('pUlBK'!==_0x44bff3(0x76f)){const _0x5b06a4=this[_0x44bff3(0x24b)]()?this[_0x44bff3(0xa14)]:0x0,_0x462dab=_0x4d83ad[_0x44bff3(0x343)];this['setupChild'](_0x462dab,_0x5b06a4),this[_0x44bff3(0x747)]=_0x1112ae['makeDeepCopy'](this['_list']);const _0x30566f={'code':0xbc3,'indent':this[_0x44bff3(0x3e0)],'parameters':_0x2c4375[_0x44bff3(0x773)](_0x55bfe6)};return this[_0x44bff3(0x747)]['splice'](this[_0x44bff3(0x9e8)]+0x1,0x0,_0x30566f),!![];}else return this[_0x44bff3(0xbdc)]();}else return VisuMZ[_0x44bff3(0x485)][_0x44bff3(0x28a)][_0x44bff3(0xaf0)](this);},Game_Action['prototype'][_0x4a3d8d(0xbdc)]=function(){const _0x2c30f4=_0x4a3d8d,_0x1b5b12=this[_0x2c30f4(0x49d)]()[_0x2c30f4(0x918)];return _0x1b5b12[_0x2c30f4(0x591)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x630)]=Game_Action['prototype'][_0x4a3d8d(0x657)],Game_Action[_0x4a3d8d(0x3c4)]['isForFriend']=function(){const _0x33b0f2=_0x4a3d8d;return this['isBattleCoreTargetScope']()&&!this[_0x33b0f2(0x700)]()?this[_0x33b0f2(0x88d)]():VisuMZ['BattleCore']['Game_Action_isForFriend']['call'](this);},Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x88d)]=function(){const _0x32c1b2=_0x4a3d8d,_0x43fb58=this[_0x32c1b2(0x49d)]()['scope'];return _0x43fb58[_0x32c1b2(0x591)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ[_0x4a3d8d(0x485)]['Game_Action_isForRandom']=Game_Action['prototype'][_0x4a3d8d(0x653)],Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x653)]=function(){const _0x4b4213=_0x4a3d8d;if(this['isBattleCoreTargetScope']()&&!this[_0x4b4213(0x700)]()){if('iOrGH'!==_0x4b4213(0x5fb))return this[_0x4b4213(0x9a7)]();else{if(!_0x4ce1e5[_0x4b4213(0x485)][_0x4b4213(0xb75)]['BattleLog'][_0x4b4213(0x63f)])return;_0x488016['BattleCore']['Window_BattleLog_displayCurrentState'][_0x4b4213(0xaf0)](this,_0x27e756);}}else return _0x4b4213(0x233)!==_0x4b4213(0x233)?_0x23fe75[_0x4b4213(0xb59)]:VisuMZ[_0x4b4213(0x485)][_0x4b4213(0x308)]['call'](this);},Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x9a7)]=function(){const _0x3c4a67=_0x4a3d8d,_0x2a20ea=this['item']()[_0x3c4a67(0x918)];return _0x2a20ea[_0x3c4a67(0x591)](/(?:RAND|RANDOM)/i);},VisuMZ['BattleCore'][_0x4a3d8d(0x851)]=Game_Action['prototype'][_0x4a3d8d(0xafa)],Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xafa)]=function(){const _0x4bc972=_0x4a3d8d;return this[_0x4bc972(0xa1d)]()&&!this[_0x4bc972(0x700)]()?this[_0x4bc972(0x3b2)]():VisuMZ[_0x4bc972(0x485)][_0x4bc972(0x851)][_0x4bc972(0xaf0)](this);},Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x3b2)]=function(){const _0x1f37b6=_0x4a3d8d,_0x34a0cd=this['item']()[_0x1f37b6(0x918)];if(_0x34a0cd[_0x1f37b6(0x591)](/RANDOM/i))return![];if(_0x34a0cd[_0x1f37b6(0x591)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x34a0cd[_0x1f37b6(0x591)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ[_0x1f37b6(0x485)]['Game_Action_needsSelection'][_0x1f37b6(0xaf0)](this);},VisuMZ['BattleCore'][_0x4a3d8d(0xb5c)]=Game_Action['prototype'][_0x4a3d8d(0x685)],Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x685)]=function(){const _0x2b9821=_0x4a3d8d;let _0x5a4388=[];if(this[_0x2b9821(0xa1d)]()){if(_0x2b9821(0xb42)===_0x2b9821(0xb42))_0x5a4388=this[_0x2b9821(0x961)]();else return _0x44db92;}else _0x5a4388=VisuMZ['BattleCore'][_0x2b9821(0xb5c)][_0x2b9821(0xaf0)](this);return _0x5a4388=this[_0x2b9821(0x462)](_0x5a4388),_0x5a4388;},Game_Action[_0x4a3d8d(0x3c4)]['makeTargetsBattleCore']=function(){const _0x5b6194=_0x4a3d8d;let _0x3ba44b=[];const _0x168f08=String(this[_0x5b6194(0x49d)]()['scope']),_0xbdc9da=VisuMZ[_0x5b6194(0x485)][_0x5b6194(0x7d8)](this[_0x5b6194(0x49d)](),_0x5b6194(0x2ff));if(VisuMZ['BattleCore']['JS'][_0xbdc9da]){_0x3ba44b=VisuMZ['BattleCore'][_0x5b6194(0xb5c)][_0x5b6194(0xaf0)](this);const _0x424899=VisuMZ[_0x5b6194(0x485)][_0x5b6194(0x7d8)](this[_0x5b6194(0x49d)](),_0x5b6194(0x2ff));return _0x3ba44b=VisuMZ[_0x5b6194(0x485)]['JS'][_0x424899]['call'](this,this[_0x5b6194(0x601)](),_0x3ba44b),this[_0x5b6194(0x3ec)](_0x3ba44b);}if(_0x168f08[_0x5b6194(0x591)](/(\d+) RANDOM ANY/i)){let _0x471604=Number(RegExp['$1']);while(_0x471604--){const _0x191f4c=Math[_0x5b6194(0x4a9)](0x2)===0x0?this[_0x5b6194(0xbae)]():this[_0x5b6194(0x997)]();_0x3ba44b[_0x5b6194(0x906)](_0x191f4c[_0x5b6194(0x2bd)]());}return this[_0x5b6194(0x3ec)](_0x3ba44b);}if(_0x168f08['match'](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){if(_0x5b6194(0x830)!==_0x5b6194(0xa4f)){let _0xfcbf4d=Number(RegExp['$1']);while(_0xfcbf4d--){if('WfJPv'!=='WfJPv'){const _0x555976=this[_0x5b6194(0xa00)](_0x2fa052),_0x2df202=new(_0x555976?_0xa82e4:_0x3904ff)(),_0x2b5252=this[_0x5b6194(0x214)](_0x19506a);this[_0x5b6194(0x74d)](_0x4cc26b[0x0])&&(_0x4d627b=!_0x1d4b63),_0x2df202[_0x5b6194(0xb9c)]=_0x4a0480,_0x2df202[_0x5b6194(0x4da)](_0x2b5252,_0x3b3f14,_0xcf3a72,_0x39050d),this[_0x5b6194(0x76b)](_0x2df202);}else _0x3ba44b[_0x5b6194(0x906)](this[_0x5b6194(0xbae)]()[_0x5b6194(0x2bd)]());}return this[_0x5b6194(0x3ec)](_0x3ba44b);}else this['_mainSprite']['bitmap'][_0x5b6194(0x8a5)]=this['_battler'][_0x5b6194(0x5f5)]();}if(_0x168f08['match'](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x22a29b=Number(RegExp['$1']);while(_0x22a29b--){_0x3ba44b[_0x5b6194(0x906)](this[_0x5b6194(0x997)]()[_0x5b6194(0x2bd)]());}return this[_0x5b6194(0x3ec)](_0x3ba44b);}if(_0x168f08[_0x5b6194(0x591)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i)){if('fsqWD'!==_0x5b6194(0xb16)){if(_0x3929e4[_0x5b6194(0x94c)][_0x5b6194(0x8e1)]())return!![];this[_0x5b6194(0x402)]='';}else return _0x3ba44b[_0x5b6194(0x906)](...this[_0x5b6194(0x997)]()[_0x5b6194(0x411)]()['filter'](_0x548752=>_0x548752!==this['subject']())),this[_0x5b6194(0x3ec)](_0x3ba44b);}return VisuMZ['BattleCore'][_0x5b6194(0xb5c)]['call'](this);},Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xb2b)]=function(_0x4fd265){const _0x3e0b8d=_0x4a3d8d,_0x1ccf1e=[];for(let _0x32266e=0x0;_0x32266e<this[_0x3e0b8d(0x4d8)]();_0x32266e++){if(_0x3e0b8d(0x3e1)!=='YxNCK'){if(this['hasSvBattler']())this[_0x3e0b8d(0x1d8)][_0x3e0b8d(0xa29)](_0x24312a);}else _0x1ccf1e['push'](_0x4fd265[_0x3e0b8d(0x2bd)]());}return _0x1ccf1e;},Game_Action['prototype'][_0x4a3d8d(0x462)]=function(_0x496814){const _0xea072a=_0x4a3d8d;if(!this['item']())return _0x496814;const _0xc4fb39=this[_0xea072a(0x49d)]()[_0xea072a(0x9ea)];return _0xc4fb39[_0xea072a(0x591)](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0x496814[_0xea072a(0x34b)](this[_0xea072a(0x601)]()),_0x496814;},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x18d)]=Game_Action[_0x4a3d8d(0x3c4)]['itemEffectAddAttackState'],Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x3fa)]=function(_0xf4b1bd,_0x6c7d82){const _0x1004a9=_0x4a3d8d;VisuMZ[_0x1004a9(0x485)]['Game_Action_itemEffectAddAttackState'][_0x1004a9(0xaf0)](this,_0xf4b1bd,_0x6c7d82);if(!_0xf4b1bd[_0x1004a9(0x151)]())return;for(const _0x256406 of this[_0x1004a9(0x601)]()[_0x1004a9(0xb6d)]()){if(_0x256406===_0xf4b1bd[_0x1004a9(0x844)]()){let _0x20d914=_0x6c7d82['value1'];_0x20d914*=_0xf4b1bd[_0x1004a9(0x65c)](_0x256406),_0x20d914*=this['subject']()[_0x1004a9(0x897)](_0x256406),_0x20d914*=this[_0x1004a9(0x3ed)](_0xf4b1bd),Math[_0x1004a9(0xa0d)]()<_0x20d914&&(_0xf4b1bd[_0x1004a9(0xb53)]=!![],this['makeSuccess'](_0xf4b1bd));}}},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xbaf)]=Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xae5)],Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xae5)]=function(_0x32195c,_0x2f2074){const _0x3bda72=_0x4a3d8d;VisuMZ[_0x3bda72(0x485)]['Game_Action_itemEffectAddNormalState']['call'](this,_0x32195c,_0x2f2074);if(!_0x32195c[_0x3bda72(0x151)]())return;if(_0x2f2074['dataId']!==_0x32195c[_0x3bda72(0x844)]())return;let _0x510909=_0x2f2074['value1'];!this[_0x3bda72(0x750)]()&&(_0x3bda72(0xbb3)!==_0x3bda72(0x4b4)?(_0x510909*=_0x32195c[_0x3bda72(0x65c)](_0x2f2074[_0x3bda72(0x94e)]),_0x510909*=this['lukEffectRate'](_0x32195c)):(_0x597218[_0x3bda72(0x3c4)][_0x3bda72(0x726)][_0x3bda72(0xaf0)](this),this[_0x3bda72(0x4e6)]())),Math['random']()<_0x510909&&('cqAob'===_0x3bda72(0x5a8)?(_0x32195c[_0x3bda72(0xb53)]=!![],this[_0x3bda72(0xa68)](_0x32195c)):_0x478c50[_0x3bda72(0x485)][_0x3bda72(0x2d7)][_0x3bda72(0xaf0)](this,_0x4ad041));},VisuMZ['BattleCore'][_0x4a3d8d(0x419)]=Game_Action['prototype'][_0x4a3d8d(0xaa5)],Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xaa5)]=function(){const _0x56e465=_0x4a3d8d;VisuMZ[_0x56e465(0x485)]['Game_Action_applyGlobal'][_0x56e465(0xaf0)](this),this[_0x56e465(0xbe5)](),this[_0x56e465(0x196)]();},Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xbe5)]=function(){const _0x2b505c=_0x4a3d8d;if(!SceneManager[_0x2b505c(0x930)]())return;const _0x50514c=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x27de39=this[_0x2b505c(0x49d)]()['note'][_0x2b505c(0x591)](_0x50514c);if(_0x27de39){if(_0x2b505c(0x9f7)!==_0x2b505c(0x9f7))this['_currentAngle']=this['applyEasing'](this['_currentAngle'],this[_0x2b505c(0x23f)],_0x5a1a35,_0x19ffdf,_0x2f2f87);else for(const _0x5c4317 of _0x27de39){if(_0x2b505c(0x193)===_0x2b505c(0x348))return _0x5d0ac7[_0x2b505c(0x485)][_0x2b505c(0x2d8)][_0x2b505c(0xaf0)](this,_0x96b8f3);else{if(!_0x5c4317)continue;_0x5c4317['match'](_0x50514c);const _0x5d6ec6=String(RegExp['$1'])[_0x2b505c(0x25c)](',')[_0x2b505c(0xa4a)](_0x43b092=>String(_0x43b092)[_0x2b505c(0x82d)]()),_0x486e9b=_0x5d6ec6['map'](_0x36a914=>DataManager[_0x2b505c(0x9ec)](_0x36a914));for(const _0x49dd6f of _0x486e9b){const _0x50e0b4=$dataCommonEvents[_0x49dd6f];if(_0x50e0b4){if(_0x2b505c(0x7a3)===_0x2b505c(0x7a3))$gameTemp['reserveCommonEvent'](_0x49dd6f);else return _0x2b505c(0x2ad)[_0x2b505c(0x8dd)](_0x15361(_0x6d2c45['$1']));}}}}}},DataManager[_0x4a3d8d(0x9ec)]=function(_0x58b4c8){const _0x3f9d88=_0x4a3d8d;_0x58b4c8=_0x58b4c8[_0x3f9d88(0x302)]()[_0x3f9d88(0x82d)](),this['_commonEventIDs']=this['_commonEventIDs']||{};if(this[_0x3f9d88(0xaa3)][_0x58b4c8])return this[_0x3f9d88(0xaa3)][_0x58b4c8];for(const _0x202eb6 of $dataCommonEvents){if('rItMi'!==_0x3f9d88(0xa77)){if(!_0x202eb6)continue;let _0x4559e3=_0x202eb6['name'];_0x4559e3=_0x4559e3[_0x3f9d88(0x809)](/\x1I\[(\d+)\]/gi,''),_0x4559e3=_0x4559e3[_0x3f9d88(0x809)](/\\I\[(\d+)\]/gi,''),this['_commonEventIDs'][_0x4559e3[_0x3f9d88(0x302)]()[_0x3f9d88(0x82d)]()]=_0x202eb6['id'];}else this[_0x3f9d88(0x635)][_0x3f9d88(0xa5e)]=_0xdfdce1[_0x3f9d88(0x3c4)][_0x3f9d88(0x5ce)]['call'](this);}return this[_0x3f9d88(0xaa3)][_0x58b4c8]||0x0;},Game_Action['prototype'][_0x4a3d8d(0x196)]=function(){const _0x38ed5f=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;const _0x23e7ab=VisuMZ['BattleCore']['Settings'][_0x38ed5f(0x5de)];_0x23e7ab[_0x38ed5f(0xa3c)]&&$gameSwitches['setValue'](_0x23e7ab[_0x38ed5f(0xa3c)],![]),_0x23e7ab[_0x38ed5f(0x268)]&&(_0x38ed5f(0x330)!==_0x38ed5f(0x330)?(this[_0x38ed5f(0x9f8)]=_0x306eab[_0x38ed5f(0x3bc)]>=0x0?0x0:0x1,this[_0x38ed5f(0xa1a)](_0x4b20a7['hpDamage'])):$gameSwitches[_0x38ed5f(0x359)](_0x23e7ab[_0x38ed5f(0x268)],![])),_0x23e7ab[_0x38ed5f(0x848)]&&$gameVariables[_0x38ed5f(0x359)](_0x23e7ab[_0x38ed5f(0x848)],0x0),_0x23e7ab[_0x38ed5f(0x2ee)]&&$gameVariables[_0x38ed5f(0x359)](_0x23e7ab['VariableHeal'],0x0);},Game_Action['prototype'][_0x4a3d8d(0x30a)]=function(_0x2ba24e){const _0x51cdab=_0x4a3d8d;if(!SceneManager[_0x51cdab(0x930)]())return;if(!_0x2ba24e)return;const _0x20dab6=_0x2ba24e['result'](),_0x38008f=VisuMZ[_0x51cdab(0x485)][_0x51cdab(0xb75)][_0x51cdab(0x5de)];_0x38008f[_0x51cdab(0xa3c)]&&_0x20dab6[_0x51cdab(0x9fa)]&&$gameSwitches[_0x51cdab(0x359)](_0x38008f[_0x51cdab(0xa3c)],!![]);_0x38008f[_0x51cdab(0x268)]&&(_0x20dab6[_0x51cdab(0x15d)]||_0x20dab6['evaded'])&&$gameSwitches[_0x51cdab(0x359)](_0x38008f[_0x51cdab(0x268)],!![]);if(_0x38008f[_0x51cdab(0x848)]){let _0x45c935=$gameVariables[_0x51cdab(0x3d8)](_0x38008f[_0x51cdab(0x848)]);_0x20dab6[_0x51cdab(0x3bc)]>0x0&&(_0x45c935+=Math[_0x51cdab(0x531)](_0x20dab6['hpDamage'])),$gameVariables['setValue'](_0x38008f['VariableDmg'],_0x45c935);}if(_0x38008f['VariableHeal']){let _0x15e727=$gameVariables[_0x51cdab(0x3d8)](_0x38008f[_0x51cdab(0x2ee)]);_0x20dab6[_0x51cdab(0x3bc)]<0x0&&('XoVll'===_0x51cdab(0xaa6)?_0x15e727+=Math['abs'](_0x20dab6['hpDamage']):this['requestMotion'](_0x51cdab(0x83f))),$gameVariables[_0x51cdab(0x359)](_0x38008f[_0x51cdab(0x2ee)],_0x15e727);}},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x8d1)]=Game_BattlerBase['prototype']['initMembers'],Game_BattlerBase[_0x4a3d8d(0x3c4)]['initMembers']=function(){const _0x2ec9b8=_0x4a3d8d;VisuMZ['BattleCore'][_0x2ec9b8(0x8d1)][_0x2ec9b8(0xaf0)](this),this[_0x2ec9b8(0xaa7)]();},Game_BattlerBase['prototype'][_0x4a3d8d(0xaa7)]=function(){const _0x1009f4=_0x4a3d8d;this[_0x1009f4(0x9d1)]=![];},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x283)]=Game_BattlerBase[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xbe4)],Game_BattlerBase[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xbe4)]=function(){const _0x3fde8f=_0x4a3d8d;this[_0x3fde8f(0x635)]={},VisuMZ[_0x3fde8f(0x485)][_0x3fde8f(0x283)][_0x3fde8f(0xaf0)](this);},Game_BattlerBase[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x307)]=function(_0x23eba1){const _0x32b095=_0x4a3d8d;return this['_cache']=this[_0x32b095(0x635)]||{},this[_0x32b095(0x635)][_0x23eba1]!==undefined;},Game_BattlerBase['prototype'][_0x4a3d8d(0x637)]=function(){const _0x18a53a=_0x4a3d8d;if(this[_0x18a53a(0x635)][_0x18a53a(0x637)]!==undefined)return this[_0x18a53a(0x635)][_0x18a53a(0x637)];const _0x4d83ee=/<DAMAGE CAP:[ ](\d+)>/i,_0x5cdd84=this[_0x18a53a(0x7e0)]()['map'](_0x1bc19a=>_0x1bc19a&&_0x1bc19a[_0x18a53a(0x9ea)][_0x18a53a(0x591)](_0x4d83ee)?Number(RegExp['$1']):0x0);let _0x2493c7=_0x5cdd84[_0x18a53a(0x482)]>0x0?Math[_0x18a53a(0x559)](..._0x5cdd84):0x0;if(_0x2493c7<=0x0)_0x2493c7=VisuMZ[_0x18a53a(0x485)][_0x18a53a(0xb75)][_0x18a53a(0xb55)][_0x18a53a(0xb4e)];return this[_0x18a53a(0x635)][_0x18a53a(0x637)]=_0x2493c7,this[_0x18a53a(0x635)][_0x18a53a(0x637)];},Game_BattlerBase[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x913)]=function(){const _0x56bdca=_0x4a3d8d;if(this[_0x56bdca(0x635)][_0x56bdca(0x9b9)]!==undefined)return this[_0x56bdca(0x635)][_0x56bdca(0x9b9)];let _0xe095f6=VisuMZ[_0x56bdca(0x485)][_0x56bdca(0xb75)]['Damage'][_0x56bdca(0x66b)];const _0x317f04=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x4f3e15=this[_0x56bdca(0x7e0)]()['map'](_0x8bb0d4=>_0x8bb0d4&&_0x8bb0d4[_0x56bdca(0x9ea)][_0x56bdca(0x591)](_0x317f04)?Number(RegExp['$1'])/0x64:0x0);return _0xe095f6=_0x4f3e15[_0x56bdca(0x544)]((_0x167109,_0x48414e)=>_0x167109+_0x48414e,_0xe095f6),this[_0x56bdca(0x635)][_0x56bdca(0x9b9)]=_0xe095f6,this[_0x56bdca(0x635)]['softDamageCap'][_0x56bdca(0x6e3)](0.01,0x1);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x767)]=Game_BattlerBase[_0x4a3d8d(0x3c4)]['die'],Game_BattlerBase['prototype']['die']=function(){const _0x407b06=_0x4a3d8d;VisuMZ[_0x407b06(0x485)][_0x407b06(0x767)][_0x407b06(0xaf0)](this),SceneManager[_0x407b06(0x930)]()&&(_0x407b06(0x762)===_0x407b06(0x177)?this[_0x407b06(0xa19)](_0x407b06(0x206)):this['requestMotion'](_0x407b06(0x75f)));},Game_BattlerBase[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x28e)]=function(){const _0x2cb6d3=_0x4a3d8d;if(!SceneManager[_0x2cb6d3(0x930)]())return null;if(!SceneManager[_0x2cb6d3(0x3ff)]['_spriteset'])return null;return SceneManager['_scene']['_spriteset'][_0x2cb6d3(0x66a)](this);},Game_BattlerBase[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x9b0)]=function(){const _0x1e63d5=_0x4a3d8d;return VisuMZ[_0x1e63d5(0x485)]['Settings'][_0x1e63d5(0x4e0)]['AnchorX'];},Game_BattlerBase[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x5ce)]=function(){const _0x284bdf=_0x4a3d8d;return VisuMZ['BattleCore'][_0x284bdf(0xb75)][_0x284bdf(0x4e0)][_0x284bdf(0x4e4)];},Game_BattlerBase['prototype'][_0x4a3d8d(0xbe3)]=function(){const _0x5f489d=_0x4a3d8d;if(this['isActor']&&this[_0x5f489d(0x764)]()){if(_0x5f489d(0x989)!=='VEitA'){const _0x5a96d5=_0x2f5ec6[_0x5f489d(0x485)]['Settings']['BattleLayout'];if(_0x5a96d5['StatusWindowSelectableBackHide'])return;_0x631abc['prototype'][_0x5f489d(0x226)]['call'](this,_0xbaa65c);}else return VisuMZ['BattleCore'][_0x5f489d(0xb75)][_0x5f489d(0x4e0)][_0x5f489d(0x3a6)];}else return VisuMZ['BattleCore'][_0x5f489d(0xb75)][_0x5f489d(0xa50)][_0x5f489d(0x3a6)];},Game_BattlerBase['prototype'][_0x4a3d8d(0x5f5)]=function(){return!![];},Game_BattlerBase[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa9e)]=function(){return 0x0;},Game_BattlerBase[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x1ae)]=function(){return 0x0;},Game_BattlerBase['prototype'][_0x4a3d8d(0x295)]=function(_0x578625){const _0x9739d9=_0x4a3d8d;if(!_0x578625)return 0x0;let _0x4d752f=0x0;const _0x42bc02=_0x578625[_0x9739d9(0x9ea)];if(_0x42bc02[_0x9739d9(0x591)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)){if(_0x9739d9(0x4fd)===_0x9739d9(0x290)){this[_0x9739d9(0xc02)]();if(_0xeeba31[_0x9739d9(0x304)]){const _0x3260ef=_0xb9f7d4[_0x9739d9(0x333)][_0x9739d9(0xb75)][_0x9739d9(0xbf1)];_0x3260ef&&_0x3260ef[_0x9739d9(0x66d)]===![]&&this[_0x9739d9(0x7b5)](0x1);}else this[_0x9739d9(0x7b5)](0x1);this[_0x9739d9(0x66c)]();}else _0x4d752f+=Number(RegExp['$1']);}return _0x42bc02[_0x9739d9(0x591)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&('EwQtx'!==_0x9739d9(0x167)?_0x4d752f+=Number(RegExp['$1']):(this[_0x9739d9(0x86f)]=new _0xc2d5dd(),_0x528444[_0x9739d9(0x76d)]?this['addChild'](this[_0x9739d9(0x86f)]):this[_0x9739d9(0x470)][_0x9739d9(0x960)](this[_0x9739d9(0x86f)]))),_0x4d752f;},Game_BattlerBase[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x980)]=function(_0xc4be7c){const _0x2bf7d7=_0x4a3d8d;if(!_0xc4be7c)return 0x0;let _0x498ec9=0x0;const _0x244a8f=_0xc4be7c[_0x2bf7d7(0x9ea)];return _0x244a8f[_0x2bf7d7(0x591)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x498ec9+=Number(RegExp['$1'])),_0x244a8f[_0x2bf7d7(0x591)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x2bf7d7(0x68b)===_0x2bf7d7(0x68b)?_0x498ec9+=Number(RegExp['$2']):(_0x86e5e5[_0x2bf7d7(0x485)][_0x2bf7d7(0x34c)][_0x2bf7d7(0xaf0)](this,_0x86b624),this[_0x2bf7d7(0x6a1)](_0x2883e2))),_0x498ec9;},VisuMZ['BattleCore']['Game_BattlerBase_isStateResist']=Game_BattlerBase[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x7e5)],Game_BattlerBase[_0x4a3d8d(0x3c4)]['isStateResist']=function(_0xd2ff69){const _0x4f3a25=_0x4a3d8d;if(_0xd2ff69===this[_0x4f3a25(0x844)]()&&this[_0x4f3a25(0x151)]())return!![];return VisuMZ[_0x4f3a25(0x485)][_0x4f3a25(0x5fc)][_0x4f3a25(0xaf0)](this,_0xd2ff69);},Game_BattlerBase['prototype'][_0x4a3d8d(0x151)]=function(){const _0x5e8ade=_0x4a3d8d;return this[_0x5e8ade(0x9d1)];},Game_BattlerBase[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xb1c)]=function(_0x205395){const _0x1fa5dc=_0x4a3d8d;_0x205395?_0x1fa5dc(0x4c1)!=='SLQAl'?this['updateForceAction']():this['addImmortal']():_0x1fa5dc(0x4a1)===_0x1fa5dc(0x4a1)?this[_0x1fa5dc(0x52a)]():_0x324677[_0x1fa5dc(0x485)][_0x1fa5dc(0xc4b)][_0x1fa5dc(0xaf0)](this,_0xb330b0);},Game_BattlerBase[_0x4a3d8d(0x3c4)]['addImmortal']=function(){const _0xbd338d=_0x4a3d8d;if(this[_0xbd338d(0x2b2)]())return;this[_0xbd338d(0x9d1)]=!![],this[_0xbd338d(0xb53)]=![];},Game_BattlerBase[_0x4a3d8d(0x3c4)]['removeImmortal']=function(){const _0x5f2d27=_0x4a3d8d,_0x8e8dcb=this['isAlive']();this[_0x5f2d27(0x9d1)]=![],_0x8e8dcb&&this[_0x5f2d27(0xb53)]&&this[_0x5f2d27(0x4f8)](),this[_0x5f2d27(0xb53)]=![],this[_0x5f2d27(0xbe4)](),this['isDead']()&&_0x8e8dcb&&(this[_0x5f2d27(0x2c2)](),this[_0x5f2d27(0x92e)]());},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xb69)]=Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xab2)],Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xab2)]=function(){const _0x5a9dd4=_0x4a3d8d;return this[_0x5a9dd4(0x49d)]()?VisuMZ['BattleCore']['Game_Action_numRepeats']['call'](this):0x0;},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x9c5)]=Game_Action[_0x4a3d8d(0x3c4)]['setAttack'],Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x4d1)]=function(){const _0xcf6aff=_0x4a3d8d;if(this['subject']()&&this[_0xcf6aff(0x601)]()[_0xcf6aff(0x9d6)]())VisuMZ[_0xcf6aff(0x485)][_0xcf6aff(0x9c5)][_0xcf6aff(0xaf0)](this);else{if(_0xcf6aff(0xbc6)===_0xcf6aff(0xbc6))this['clear']();else return _0x2fcf64[_0xcf6aff(0x3ff)][_0xcf6aff(0xa8b)]&&_0x48d0a8['_scene'][_0xcf6aff(0xa8b)][_0xcf6aff(0xa61)]&&_0x4ec6ef[_0xcf6aff(0x3ff)]['_enemyWindow']['_enemies'][_0xcf6aff(0xbff)](this[_0xcf6aff(0x349)]);}},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x200)]=Game_BattlerBase['prototype'][_0x4a3d8d(0x9d6)],Game_BattlerBase[_0x4a3d8d(0x3c4)]['canAttack']=function(){const _0x235406=_0x4a3d8d;if(!this[_0x235406(0x519)]())return![];return VisuMZ['BattleCore'][_0x235406(0x200)]['call'](this);},Game_BattlerBase[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x519)]=function(){const _0x142298=_0x4a3d8d;for(const _0x3385bb of this[_0x142298(0x7e0)]()){if(!_0x3385bb)continue;if(_0x3385bb[_0x142298(0x9ea)][_0x142298(0x591)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x4ba)]=Game_Action[_0x4a3d8d(0x3c4)]['setGuard'],Game_Action[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x934)]=function(){const _0x25ead3=_0x4a3d8d;this[_0x25ead3(0x601)]()[_0x25ead3(0x37d)]()&&VisuMZ[_0x25ead3(0x485)]['Game_Action_setGuard']['call'](this);},VisuMZ[_0x4a3d8d(0x485)]['Game_BattlerBase_canGuard']=Game_BattlerBase[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x37d)],Game_BattlerBase[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x37d)]=function(){const _0x5db447=_0x4a3d8d;if(!this['canGuardBattleCore']())return![];return VisuMZ[_0x5db447(0x485)]['Game_BattlerBase_canGuard']['call'](this);},Game_BattlerBase[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x8cc)]=function(){const _0x145ccb=_0x4a3d8d;for(const _0x42ab08 of this[_0x145ccb(0x7e0)]()){if(!_0x42ab08)continue;if(_0x42ab08['note'][_0x145ccb(0x591)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x4a3d8d(0x3c4)]['canUseItemCommand']=function(){const _0x364739=_0x4a3d8d;for(const _0x12cbde of this[_0x364739(0x7e0)]()){if(!_0x12cbde)continue;if(_0x12cbde[_0x364739(0x9ea)][_0x364739(0x591)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x76c)]=function(){const _0x5366ee=_0x4a3d8d;return VisuMZ[_0x5366ee(0x485)][_0x5366ee(0xb75)][_0x5366ee(0x5de)][_0x5366ee(0x9ca)];},VisuMZ['BattleCore'][_0x4a3d8d(0x56c)]=Game_Battler['prototype'][_0x4a3d8d(0x5b3)],Game_Battler['prototype']['regenerateAll']=function(){const _0x3dc2d1=_0x4a3d8d;if(SceneManager[_0x3dc2d1(0x930)]()){if(_0x3dc2d1(0xb80)===_0x3dc2d1(0xb80)){if(BattleManager[_0x3dc2d1(0x1d1)]()){if(this[_0x3dc2d1(0x7a7)]()<=0x0)return;}else{if($gameTroop[_0x3dc2d1(0x7a7)]()<=0x0){if(_0x3dc2d1(0x2d6)===_0x3dc2d1(0x2fe))this[_0x3dc2d1(0x50d)]()[_0x3dc2d1(0x208)](_0x348a67);else return;}}}else for(const _0x3b4eb2 of _0x2c67ba){const _0x43720d=_0x296337[0x0][_0x3dc2d1(0x8dd)](_0x3b4eb2[0x0]),_0x1f1652=_0x3e7785[0x1][_0x3dc2d1(0x8dd)](_0x3b4eb2[0x1]),_0xbe0e4=new _0x5a2d70(_0x57f91d[_0x3dc2d1(0x8dd)](_0x1f1652),'i');_0x2991a1[_0x43720d]=_0xbe0e4;}}if(SceneManager[_0x3dc2d1(0x930)]()&&BattleManager['isTpb']()&&this[_0x3dc2d1(0x817)]===Graphics[_0x3dc2d1(0x3cc)]){if(_0x3dc2d1(0x97b)!==_0x3dc2d1(0x97b)){_0x38fd6e=_0x24888c[_0x3dc2d1(0x485)]['JS'][_0x101d37][_0x3dc2d1(0xaf0)](this,this['subject'](),_0x16848e,_0xc32913,_0x2fa7ef);if(_0xa51716)_0x5e212b=_0xaa7ecc;}else return;}this[_0x3dc2d1(0x817)]=Graphics[_0x3dc2d1(0x3cc)],SceneManager[_0x3dc2d1(0x930)]()&&this[_0x3dc2d1(0xa19)]('PreRegenerateJS'),VisuMZ[_0x3dc2d1(0x485)][_0x3dc2d1(0x56c)][_0x3dc2d1(0xaf0)](this),SceneManager[_0x3dc2d1(0x930)]()&&(this[_0x3dc2d1(0x48f)](),this['processBattleCoreJS'](_0x3dc2d1(0x183)));},Game_Battler[_0x4a3d8d(0x3c4)]['regenerateAllBattleCore']=function(){const _0x4f307a=_0x4a3d8d;if(SceneManager[_0x4f307a(0x930)]())for(const _0x5b8074 of this['traitObjects']()){if(!_0x5b8074)continue;this[_0x4f307a(0x98c)](_0x5b8074);}},Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x98c)]=function(_0x47d0a9){const _0xd5e401=_0x4a3d8d;if(!Imported[_0xd5e401(0x714)])return;if(!SceneManager[_0xd5e401(0x930)]())return;if(this[_0xd5e401(0x2b2)]())return;if(this[_0xd5e401(0x6b4)]())return;if(_0x47d0a9[_0xd5e401(0x9ea)][_0xd5e401(0x591)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){if(_0xd5e401(0x7e1)!==_0xd5e401(0x7e1)){const _0xa5901c=_0xa4e184[_0xd5e401(0x485)][_0xd5e401(0xb75)]['Enemy'];this['_attackAnimationId']=_0xa5901c[_0xd5e401(0x77f)],this[_0xd5e401(0x17b)]={};}else{const _0x66e2d1=Number(RegExp['$1']);$gameTemp[_0xd5e401(0xc25)]([this],_0x66e2d1,![],![]);}}},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xc43)]=Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xbd9)],Game_Battler['prototype'][_0x4a3d8d(0xbd9)]=function(){const _0x4707c6=_0x4a3d8d;this[_0x4707c6(0xa19)](_0x4707c6(0xb1e)),VisuMZ[_0x4707c6(0x485)][_0x4707c6(0xc43)][_0x4707c6(0xaf0)](this),this[_0x4707c6(0xa19)](_0x4707c6(0xa73));},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x9cc)]=Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x2cb)],Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x2cb)]=function(){const _0x1c424c=_0x4a3d8d;this[_0x1c424c(0xa19)]('PreEndTurnJS'),VisuMZ[_0x1c424c(0x485)][_0x1c424c(0x9cc)][_0x1c424c(0xaf0)](this),this[_0x1c424c(0xa19)](_0x1c424c(0xa72));},Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa19)]=function(_0x274f7c){const _0x2a1294=_0x4a3d8d;if(this[_0x2a1294(0x7be)]||this['_tempActor'])return;const _0x25cc39=VisuMZ[_0x2a1294(0x485)][_0x2a1294(0xb75)][_0x2a1294(0x5de)];if(_0x25cc39[_0x274f7c])_0x25cc39[_0x274f7c][_0x2a1294(0xaf0)](this);for(const _0x394436 of this[_0x2a1294(0x7e0)]()){if('VuROC'!=='DwWcw'){if(!_0x394436)continue;key=VisuMZ[_0x2a1294(0x485)][_0x2a1294(0x7d8)](_0x394436,_0x274f7c);if(VisuMZ[_0x2a1294(0x485)]['JS'][key]){if(_0x2a1294(0x1d0)!==_0x2a1294(0x1d0)){if(!_0x1d3710['VisuMZ_3_ActSeqImpact'])return;const _0x141231=_0x31abfe[_0x2a1294(0x3ff)][_0x2a1294(0x94c)];if(!_0x141231)return;if(_0xb5ce8d[_0x2a1294(0x4be)][_0x2a1294(0x553)]<=1.04){_0x4973fd(_0x2a1294(0x2a2)),_0x27dbc2[_0x2a1294(0x4c2)]();return;}_0x1c244c[_0x2a1294(0x6a8)](_0x19d5ff,_0x285f77);const _0x689074=_0x3b9329[_0x2a1294(0x202)](),_0x4f61f8=_0x1cd737[_0x2a1294(0x559)](0.01,_0x35ef1d['Scale']);_0x528d7d[_0x2a1294(0x83e)](_0x4f61f8,_0x689074);}else VisuMZ[_0x2a1294(0x485)]['JS'][key][_0x2a1294(0xaf0)](this,this,this,_0x394436,0x0);}}else return _0x2b564d['BattleCore'][_0x2a1294(0xb75)][_0x2a1294(0x1e5)][_0x2a1294(0xb2a)];}},Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xc04)]=function(){const _0x40e0e5=_0x4a3d8d;return VisuMZ[_0x40e0e5(0x485)][_0x40e0e5(0xb75)][_0x40e0e5(0x4e0)][_0x40e0e5(0x6dc)]||![];},Game_Battler['prototype']['isChanting']=function(){const _0x2f403a=_0x4a3d8d;if(this[_0x2f403a(0x5e0)]()){if(_0x2f403a(0x39b)===_0x2f403a(0x506))this[_0x2f403a(0x21b)](),_0x391028[_0x2f403a(0x485)][_0x2f403a(0x5d7)][_0x2f403a(0xaf0)](this),this[_0x2f403a(0xc4c)](),this[_0x2f403a(0x209)]();else{if(this[_0x2f403a(0xc04)]()){if(this[_0x2f403a(0x413)][_0x2f403a(0x478)](_0x38fffc=>_0x38fffc[_0x2f403a(0x49d)]()&&_0x38fffc[_0x2f403a(0x95f)]())){if(_0x2f403a(0x5ad)==='oDEpG')_0x33751d['BattleCore']['Window_BattleLog_popupDamage'][_0x2f403a(0xaf0)](this,_0x5e7b9b),this[_0x2f403a(0x84f)]();else return!![];}}else{if(this[_0x2f403a(0x413)]['some'](_0x364980=>_0x364980[_0x2f403a(0x49d)]()&&_0x364980[_0x2f403a(0xa81)]())){if(_0x2f403a(0x47f)===_0x2f403a(0x47f))return!![];else{const _0xba925f=_0xac8d4[this[_0x2f403a(0x6dd)][_0x2f403a(0x5e9)]()];if(!_0xba925f)return;if(!this['canAddSkillCommand'](_0xba925f))return;const _0x2ecab9=this['commandStyle'](),_0x16965c=_0x4fc2b0[_0x2f403a(0x47a)](_0xba925f),_0x47ecfe=_0x5bd7c0[_0x2f403a(0xb79)](_0xba925f),_0x23e1c9=_0x2ecab9===_0x2f403a(0x81f)?_0x16965c:_0x2f403a(0xc28)['format'](_0x47ecfe,_0x16965c);this[_0x2f403a(0x198)](_0x23e1c9,_0x2f403a(0xadd),this[_0x2f403a(0x6dd)][_0x2f403a(0x9d6)]());}}}}}if(BattleManager['isTpb']()&&this['_tpbState']===_0x2f403a(0x983)){if(_0x2f403a(0x5bf)===_0x2f403a(0x5bf)){if(this[_0x2f403a(0xc04)]()){if(_0x2f403a(0xa13)===_0x2f403a(0xa13))return this[_0x2f403a(0x8ed)]()&&this[_0x2f403a(0x8ed)]()[_0x2f403a(0x49d)]()&&this[_0x2f403a(0x8ed)]()['isMagical']();else{const _0xc0c7e0=this[_0x2f403a(0x8c7)]();if(_0xc0c7e0['missed']||_0xc0c7e0[_0x2f403a(0xa38)]){const _0x1dfa18=_0x270298['makeDeepCopy'](_0xc0c7e0);_0x1dfa18['hpAffected']=![],_0x1dfa18[_0x2f403a(0x8d4)]=0x0,this[_0x2f403a(0xab4)][_0x2f403a(0x906)](_0x1dfa18);}if(_0xc0c7e0[_0x2f403a(0x5e8)]){const _0x9c43c3=_0x47f3c4['makeDeepCopy'](_0xc0c7e0);_0x9c43c3[_0x2f403a(0x15d)]=![],_0x9c43c3['evaded']=![],_0x9c43c3['mpDamage']=0x0,this[_0x2f403a(0xab4)][_0x2f403a(0x906)](_0x9c43c3);}if(_0xc0c7e0[_0x2f403a(0x8d4)]!==0x0){const _0x23f7ba=_0xc59921['makeDeepCopy'](_0xc0c7e0);_0x23f7ba['missed']=![],_0x23f7ba['evaded']=![],_0x23f7ba[_0x2f403a(0x5e8)]=![],this[_0x2f403a(0xab4)][_0x2f403a(0x906)](_0x23f7ba);}}}else return this[_0x2f403a(0x8ed)]()&&this[_0x2f403a(0x8ed)]()[_0x2f403a(0x49d)]()&&this['currentAction']()['isMagicSkill']();}else _0x49b324[_0x2f403a(0x485)][_0x2f403a(0xb75)][_0x2f403a(0x4c8)][_0x2f403a(0xb84)]&&this[_0x2f403a(0xb62)](),_0x29bd77[_0x2f403a(0x485)]['Sprite_Enemy_createStateIconSprite'][_0x2f403a(0xaf0)](this);}return![];},Game_Battler[_0x4a3d8d(0x3c4)]['isCharging']=function(){const _0x5be8a0=_0x4a3d8d;if(BattleManager[_0x5be8a0(0x1d1)]()&&this[_0x5be8a0(0x33f)]===_0x5be8a0(0x983)){if(_0x5be8a0(0x1ab)===_0x5be8a0(0x8c1))_0x2eea8a[_0x5be8a0(0x485)][_0x5be8a0(0x513)][_0x5be8a0(0xaf0)](this,_0x3ccd9f),this[_0x5be8a0(0x8f2)](_0x4dac61);else{if(this[_0x5be8a0(0xc04)]())return this['currentAction']()&&this['currentAction']()[_0x5be8a0(0x49d)]()&&!this[_0x5be8a0(0x8ed)]()[_0x5be8a0(0x95f)]();else{if('TCeby'==='SltiD')_0x547364[_0x5be8a0(0x94c)]['processAnimationRequests']();else return this['currentAction']()&&this[_0x5be8a0(0x8ed)]()[_0x5be8a0(0x49d)]()&&!this[_0x5be8a0(0x8ed)]()['isMagicSkill']();}}}return![];},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x389)]=Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x37a)],Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x37a)]=function(){const _0x3aa954=_0x4a3d8d;VisuMZ[_0x3aa954(0x485)][_0x3aa954(0x389)][_0x3aa954(0xaf0)](this),this[_0x3aa954(0xab4)]=[];},Game_Battler[_0x4a3d8d(0x3c4)]['isDamagePopupRequested']=function(){const _0x2ec7da=_0x4a3d8d;if(!this[_0x2ec7da(0xab4)])this['clearDamagePopup']();return this[_0x2ec7da(0xab4)][_0x2ec7da(0x482)]>0x0;},Game_Battler[_0x4a3d8d(0x3c4)]['startDamagePopup']=function(){const _0x129f09=_0x4a3d8d;if(!SceneManager[_0x129f09(0x930)]())return;if(!this[_0x129f09(0xab4)])this['clearDamagePopup']();this['createSeparateDamagePopups']();const _0x2e9a6f=this[_0x129f09(0x28e)]();if(_0x2e9a6f)_0x2e9a6f[_0x129f09(0x229)]();},Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x3c5)]=function(){const _0x36ca9c=_0x4a3d8d,_0x47a7ce=this[_0x36ca9c(0x8c7)]();if(_0x47a7ce[_0x36ca9c(0x15d)]||_0x47a7ce['evaded']){if(_0x36ca9c(0xbad)===_0x36ca9c(0xbad)){const _0x3a425e=JsonEx[_0x36ca9c(0x773)](_0x47a7ce);_0x3a425e[_0x36ca9c(0x5e8)]=![],_0x3a425e['mpDamage']=0x0,this['_damagePopupArray'][_0x36ca9c(0x906)](_0x3a425e);}else return 0x1;}if(_0x47a7ce[_0x36ca9c(0x5e8)]){const _0xff14dc=JsonEx[_0x36ca9c(0x773)](_0x47a7ce);_0xff14dc[_0x36ca9c(0x15d)]=![],_0xff14dc[_0x36ca9c(0xa38)]=![],_0xff14dc['mpDamage']=0x0,this['_damagePopupArray'][_0x36ca9c(0x906)](_0xff14dc);}if(_0x47a7ce[_0x36ca9c(0x8d4)]!==0x0){const _0x2d4838=JsonEx[_0x36ca9c(0x773)](_0x47a7ce);_0x2d4838[_0x36ca9c(0x15d)]=![],_0x2d4838[_0x36ca9c(0xa38)]=![],_0x2d4838[_0x36ca9c(0x5e8)]=![],this['_damagePopupArray']['push'](_0x2d4838);}},Game_Battler[_0x4a3d8d(0x3c4)]['getNextDamagePopup']=function(){const _0x2e1185=_0x4a3d8d;if(!this['_damagePopupArray'])this[_0x2e1185(0x37a)]();if(VisuMZ['BattleCore'][_0x2e1185(0xb75)][_0x2e1185(0xb55)][_0x2e1185(0xc01)])return this[_0x2e1185(0xab4)][_0x2e1185(0x331)]();else{if(_0x2e1185(0x895)===_0x2e1185(0x375))_0x9aff2c[_0x2e1185(0x8df)]();else return this[_0x2e1185(0xab4)][_0x2e1185(0xaca)]();}},Game_Battler[_0x4a3d8d(0x3c4)]['setupTextPopup']=function(_0x4ac112,_0x5da9c9){const _0x45f9d3=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;if(!this[_0x45f9d3(0x28e)]())return;if(_0x4ac112[_0x45f9d3(0x482)]<=0x0)return;_0x5da9c9=_0x5da9c9||{},_0x5da9c9['textColor']=_0x5da9c9[_0x45f9d3(0x19e)]||_0x45f9d3(0x89e),_0x5da9c9[_0x45f9d3(0x602)]=_0x5da9c9['flashColor']||[0x0,0x0,0x0,0x0],_0x5da9c9[_0x45f9d3(0x49f)]=_0x5da9c9[_0x45f9d3(0x49f)]||0x0,this[_0x45f9d3(0x28e)]()[_0x45f9d3(0x1a4)](_0x4ac112,_0x5da9c9);},Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x695)]=function(_0x379cd3,_0x4f003f,_0x478849){const _0x3f9f1d=_0x4a3d8d;if(!SceneManager[_0x3f9f1d(0x930)]())return;if(!this['battler']())return;if(_0x4f003f['length']<=0x0)return;_0x478849=_0x478849||{},_0x478849[_0x3f9f1d(0x19e)]=_0x478849[_0x3f9f1d(0x19e)]||_0x3f9f1d(0x89e),_0x478849[_0x3f9f1d(0x602)]=_0x478849[_0x3f9f1d(0x602)]||[0x0,0x0,0x0,0x0],_0x478849[_0x3f9f1d(0x49f)]=_0x478849['flashDuration']||0x0,this[_0x3f9f1d(0x28e)]()[_0x3f9f1d(0x695)](_0x379cd3,_0x4f003f,_0x478849);},Game_Battler['prototype'][_0x4a3d8d(0x197)]=function(){const _0x244ec7=_0x4a3d8d;if(this[_0x244ec7(0x6b4)]())return![];if(this[_0x244ec7(0x32c)]()&&this[_0x244ec7(0x3d9)]())return!![];if(this[_0x244ec7(0x87a)]()&&this[_0x244ec7(0xac9)]()){if(this[_0x244ec7(0x2b2)]()&&this[_0x244ec7(0x186)]())return![];}else{if(this[_0x244ec7(0x2b2)]()){if(_0x244ec7(0x8ba)!==_0x244ec7(0x40c))return![];else return;}}return!![];},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x1ed)]=Game_Battler['prototype'][_0x4a3d8d(0x5fd)],Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x5fd)]=function(){const _0x245fac=_0x4a3d8d;VisuMZ[_0x245fac(0x485)]['Game_Battler_clearMotion'][_0x245fac(0xaf0)](this),this[_0x245fac(0x170)]();},Game_Battler[_0x4a3d8d(0x3c4)]['canBattlerMove']=function(){return!![];},Game_Battler['prototype']['isBattlerGrounded']=function(){return![];},VisuMZ[_0x4a3d8d(0x485)]['Game_Battler_onBattleStart']=Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x9da)],Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x9da)]=function(_0x2f42a3){const _0x5ae4af=_0x4a3d8d;VisuMZ[_0x5ae4af(0x485)][_0x5ae4af(0x954)][_0x5ae4af(0xaf0)](this,_0x2f42a3),this['onBattleStartBattleCore'](_0x2f42a3),this[_0x5ae4af(0x37a)]();},Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x3f1)]=function(_0x54fddc){const _0x52ddd4=_0x4a3d8d;this[_0x52ddd4(0x91a)](![]),this[_0x52ddd4(0x920)]=undefined,this[_0x52ddd4(0x6ff)]=undefined;},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x495)]=Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x20e)],Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x20e)]=function(){const _0x2c1e7d=_0x4a3d8d;VisuMZ['BattleCore']['Game_Battler_onBattleEnd'][_0x2c1e7d(0xaf0)](this),this[_0x2c1e7d(0x23e)]();},Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x23e)]=function(){const _0x3ebbcf=_0x4a3d8d;this['_forcedHomeX']=undefined,this[_0x3ebbcf(0x6ff)]=undefined;},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x2f4)]=Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x828)],Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x828)]=function(_0x47365a){const _0x17afd5=_0x4a3d8d;VisuMZ[_0x17afd5(0x485)][_0x17afd5(0x2f4)][_0x17afd5(0xaf0)](this,_0x47365a);if(!_0x47365a[_0x17afd5(0x962)]()){if('CtUSA'!==_0x17afd5(0x901))_0x3bd8cd[_0x17afd5(0x485)][_0x17afd5(0x216)]&&_0x1a54cf[_0x17afd5(0x485)][_0x17afd5(0x216)][_0x17afd5(0xaf0)](this,_0x1c9e3a),_0x1cf9c7[_0x17afd5(0x485)][_0x17afd5(0x9d0)](_0x4068d1);else{const _0xee8848=this[_0x17afd5(0x28e)]();_0xee8848&&_0xee8848['stepForward']();}}this[_0x17afd5(0x91a)](![]);},Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x5c8)]=function(){const _0x2b1475=_0x4a3d8d,_0x52d63d=this[_0x2b1475(0x58e)];this[_0x2b1475(0x58e)]=![];if(BattleManager['isActiveTpb']()&&this[_0x2b1475(0xc48)]()){const _0x13ed19=this[_0x2b1475(0x28e)]();if(_0x13ed19&&_0x52d63d)_0x13ed19[_0x2b1475(0x5a4)]();return;}const _0x15cf63=this[_0x2b1475(0x28e)]();if(_0x15cf63)_0x15cf63['stepBack']();this['setBattlerFlip'](![]),this[_0x2b1475(0x92e)]();},Game_Battler['prototype'][_0x4a3d8d(0x3c9)]=function(_0x5e6d77){const _0x306663=_0x4a3d8d;if(_0x5e6d77['isAttack']())this[_0x306663(0x6c9)]();else{if(_0x5e6d77[_0x306663(0x962)]())this['requestMotion'](_0x306663(0x8e0));else{if(_0x5e6d77[_0x306663(0x95f)]())this[_0x306663(0x834)](_0x306663(0x3cf));else{if(_0x5e6d77['isSkill']()){if('RciOa'!==_0x306663(0x28f)){if(!_0x640688[_0x306663(0x957)]())return;const _0x336be0=this[_0x306663(0x28e)]();if(!_0x336be0)return;if(_0x330db9)this[_0x306663(0x420)](_0x3d36af+_0x336be0[_0x306663(0x232)],_0x34bbbb+_0x336be0[_0x306663(0x5d8)],![]);_0x1dae04+=_0x336be0[_0x306663(0x966)],_0x25bd14+=_0x336be0[_0x306663(0x649)],_0x336be0[_0x306663(0x5f1)](_0x417735,_0x422b32,_0x1f7f9a,_0x18818f),this[_0x306663(0x920)]=_0x56f5b6,this[_0x306663(0x6ff)]=_0x30a343;}else[0x1,0x2,0x5,0x6][_0x306663(0xbff)](_0x5e6d77[_0x306663(0x49d)]()['damage']['type'])?this[_0x306663(0x6c9)]():this[_0x306663(0x834)](_0x306663(0x15f));}else _0x5e6d77[_0x306663(0x426)]()&&this['requestMotion']('item');}}}},Game_Battler['prototype'][_0x4a3d8d(0x88a)]=function(){const _0x1e4c0c=_0x4a3d8d;return $dataSystem[_0x1e4c0c(0x857)][0x0];},Game_Battler['prototype'][_0x4a3d8d(0x279)]=function(){const _0x3f3a1e=_0x4a3d8d,_0x4d4227=this[_0x3f3a1e(0x88a)]();return _0x4d4227?_0x4d4227[_0x3f3a1e(0x970)]:0x0;},Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x7c7)]=function(_0x4919c5){const _0x429552=_0x4a3d8d;if(!$gameSystem[_0x429552(0x957)]())return;const _0x1bbf02=this['battler'](),_0x4f2a28=_0x4919c5[_0x429552(0x28e)]();if(!_0x1bbf02||!_0x4f2a28)return;const _0x3ee427=_0x4f2a28['_baseX'],_0x3bef18=_0x4f2a28[_0x429552(0x5d8)];this[_0x429552(0x9d5)](_0x3ee427,_0x3bef18,0x0,![],_0x429552(0x88e),-0x1),_0x1bbf02[_0x429552(0x421)]();const _0x4436f6=VisuMZ[_0x429552(0x485)][_0x429552(0xb75)][_0x429552(0xa01)];let _0x386df8=(_0x4f2a28['width']+_0x1bbf02['width'])/0x2;_0x386df8*=this['isActor']()?0x1:-0x1;let _0x3e07f7=_0x4436f6[_0x429552(0x187)]*(this[_0x429552(0x764)]()?0x1:-0x1);_0x4919c5[_0x429552(0x7ad)](_0x386df8,_0x3e07f7,0x0,![],'Linear'),_0x4f2a28['updatePosition']();},Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x834)]=function(_0x4b2e5b){const _0x42030b=_0x4a3d8d;if(SceneManager[_0x42030b(0x930)]()){const _0x1f00d5=this[_0x42030b(0x28e)]();_0x1f00d5&&(_0x1f00d5[_0x42030b(0x9fb)](_0x4b2e5b),[_0x42030b(0x99c),_0x42030b(0x6d8),_0x42030b(0x158)][_0x42030b(0xbff)](_0x4b2e5b)&&this['performWeaponAnimation']());}this['clearFreezeMotion']();},Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x386)]=function(){},Game_Battler['prototype'][_0x4a3d8d(0x826)]=function(_0x53d366){const _0x3d2844=_0x4a3d8d;if(SceneManager[_0x3d2844(0x930)]()){const _0x2632ee=this[_0x3d2844(0x28e)]();if(_0x2632ee)_0x2632ee[_0x3d2844(0xa29)](_0x53d366);}},Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa82)]=function(){const _0x43605e=_0x4a3d8d;if(SceneManager[_0x43605e(0x930)]()){const _0x4afbb4=this[_0x43605e(0x279)]();this['startWeaponAnimation'](_0x4afbb4);}},Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x258)]=function(_0x6d08b5,_0xb28cdb){const _0x48e5ba=_0x4a3d8d;if(!_0x6d08b5)return;if(!_0x6d08b5[_0x48e5ba(0x49d)]())return;if(_0x6d08b5['isAttack']())return;if(_0x6d08b5[_0x48e5ba(0x962)]())return;if(_0x6d08b5['isItem']())return;let _0x2b95ad=0x0;const _0x4085c2=VisuMZ[_0x48e5ba(0x485)][_0x48e5ba(0xb75)][_0x48e5ba(0xa01)],_0x5c53ac=_0x6d08b5[_0x48e5ba(0x49d)]()['note'];if(_0x5c53ac[_0x48e5ba(0x591)](/<CAST ANIMATION: (\d+)>/i))_0x2b95ad=Number(RegExp['$1']);else{if(_0x5c53ac[_0x48e5ba(0x591)](/<NO CAST ANIMATION>/i))return;else{if(_0x6d08b5[_0x48e5ba(0x750)]())_0x2b95ad=_0x4085c2['CastCertain'];else{if(_0x6d08b5[_0x48e5ba(0x732)]())_0x2b95ad=_0x4085c2[_0x48e5ba(0x687)];else _0x6d08b5[_0x48e5ba(0x95f)]()&&(_0x2b95ad=_0x4085c2[_0x48e5ba(0x9c8)]);}}}_0x2b95ad>0x0&&$gameTemp[_0x48e5ba(0x5af)]([this],_0x2b95ad,!!_0xb28cdb);},Game_Battler[_0x4a3d8d(0x3c4)]['performReflection']=function(){const _0x647bcf=_0x4a3d8d;SoundManager[_0x647bcf(0x97a)]();let _0x2d74c2=VisuMZ[_0x647bcf(0x485)][_0x647bcf(0xb75)]['ActionSequence'][_0x647bcf(0x702)];_0x2d74c2>0x0&&(Imported['VisuMZ_0_CoreEngine']?$gameTemp[_0x647bcf(0xc25)]([this],_0x2d74c2):$gameTemp['requestAnimation']([this],_0x2d74c2));},VisuMZ['BattleCore'][_0x4a3d8d(0x3fd)]=Game_Battler['prototype']['performDamage'],Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa25)]=function(){const _0x41ea6a=_0x4a3d8d;VisuMZ['BattleCore'][_0x41ea6a(0x3fd)][_0x41ea6a(0xaf0)](this),this[_0x41ea6a(0x4f1)]();},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x4d4)]=Game_Battler[_0x4a3d8d(0x3c4)]['performMiss'],Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xba8)]=function(){const _0x3388f1=_0x4a3d8d;VisuMZ[_0x3388f1(0x485)][_0x3388f1(0x4d4)][_0x3388f1(0xaf0)](this),this[_0x3388f1(0x4f1)]();},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x19b)]=Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x579)],Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x579)]=function(){const _0x134ec5=_0x4a3d8d;VisuMZ[_0x134ec5(0x485)][_0x134ec5(0x19b)][_0x134ec5(0xaf0)](this),this[_0x134ec5(0x4f1)]();},Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x4f1)]=function(){const _0x1b9ab2=_0x4a3d8d;if(!$gameSystem[_0x1b9ab2(0x957)]())return;if(this[_0x1b9ab2(0x58e)])return;this['_flinched']=!![];const _0x1a5c88=this[_0x1b9ab2(0x28e)]();if(_0x1a5c88)_0x1a5c88['stepFlinch']();},Game_Battler[_0x4a3d8d(0x3c4)]['requestMotionRefresh']=function(){const _0x2a6482=_0x4a3d8d;if(this[_0x2a6482(0x2b2)]()&&this[_0x2a6482(0x836)]!==_0x2a6482(0x75f)){this['requestMotion'](_0x2a6482(0x75f));return;}if(this['isDead']()&&this[_0x2a6482(0x836)]===_0x2a6482(0x75f))return;if(!!this[_0x2a6482(0x7d9)])return;if(this['isEnemy']()){if(_0x2a6482(0x14e)!==_0x2a6482(0xa64)){if(!this[_0x2a6482(0x5dc)]()&&this!==BattleManager[_0x2a6482(0x18b)]){if('dEUym'===_0x2a6482(0x7cf))this[_0x2a6482(0x7dc)](_0x2a6482(0x8ac));else{if(this[_0x2a6482(0x28e)]())this[_0x2a6482(0x28e)]()[_0x2a6482(0x1ef)]();}}this[_0x2a6482(0x170)]();return;}else this[_0x2a6482(0x61c)]=new _0x5519e0(),this[_0x2a6482(0x960)](this['_damageContainer']);}if(this[_0x2a6482(0x836)]===_0x2a6482(0x250))return;if(this[_0x2a6482(0x836)]===_0x2a6482(0x565)&&!BattleManager[_0x2a6482(0xc48)]())return;if(this['_motionType']===_0x2a6482(0x8e0)&&!BattleManager[_0x2a6482(0xc48)]())return;this[_0x2a6482(0x5fd)]();if(this[_0x2a6482(0x28e)]()&&BattleManager['isInputting']()){this[_0x2a6482(0x28e)]()['refreshMotion'](),this[_0x2a6482(0x170)]();return;}},Game_Enemy[_0x4a3d8d(0x3c4)]['isDuringNonLoopingMotion']=function(){const _0x311965=_0x4a3d8d;if(!this[_0x311965(0xac9)]())return![];const _0x147af6=this['battler']();if(!_0x147af6)return![];const _0x3986fd=_0x147af6['_svBattlerSprite'];if(!_0x3986fd)return![];const _0x15db83=_0x3986fd['_motion'];return _0x15db83&&!_0x15db83[_0x311965(0x5cd)];},Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x354)]=function(){const _0x28cd9b=_0x4a3d8d;return this[_0x28cd9b(0x244)];},Game_Battler['prototype'][_0x4a3d8d(0x91a)]=function(_0x48cd58){const _0x1441ed=_0x4a3d8d;if(!$gameSystem['isSideView']())return;this[_0x1441ed(0x244)]=_0x48cd58;const _0x100579=this[_0x1441ed(0x28e)]();if(_0x100579)_0x100579[_0x1441ed(0x838)]();},Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x420)]=function(_0x59b05a,_0x51e604,_0x104a10){const _0xc13633=_0x4a3d8d;if(!$gameSystem[_0xc13633(0x957)]())return;const _0x1ae632=this[_0xc13633(0x28e)]();if(!_0x1ae632)return;if(_0x59b05a===_0x1ae632[_0xc13633(0x232)])return;let _0x40d1eb=![];if(this[_0xc13633(0x764)]()){if(_0x59b05a>_0x1ae632[_0xc13633(0x232)])_0x40d1eb=!![];if(_0x59b05a<_0x1ae632[_0xc13633(0x232)])_0x40d1eb=![];}else{if(this[_0xc13633(0x87a)]()){if(_0xc13633(0x5a1)==='GvAvt'){if(_0x59b05a>_0x1ae632['_baseX'])_0x40d1eb=![];if(_0x59b05a<_0x1ae632[_0xc13633(0x232)])_0x40d1eb=!![];}else _0x1e67f5[_0xc13633(0x485)][_0xc13633(0x22e)]['call'](this),_0x53e408[_0xc13633(0x1d1)]()&&_0xa29ad8['_tpbNeedsPartyCommand']&&(_0x5d07b6[_0xc13633(0x172)]=![],this[_0xc13633(0x535)]());}};this[_0xc13633(0x91a)](_0x104a10?!_0x40d1eb:_0x40d1eb),_0x1ae632['updateFlip']();},Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x7ad)]=function(_0x306395,_0x158a82,_0x4d2408,_0x2467b1,_0x4ed6f1){const _0x4d62e6=_0x4a3d8d;if(!$gameSystem[_0x4d62e6(0x957)]())return;const _0x2e8e13=this[_0x4d62e6(0x28e)]();if(!_0x2e8e13)return;if(_0x2467b1)this[_0x4d62e6(0x420)](_0x306395+_0x2e8e13[_0x4d62e6(0x232)],_0x158a82+_0x2e8e13[_0x4d62e6(0x5d8)],![]);_0x306395+=_0x2e8e13[_0x4d62e6(0x232)]-_0x2e8e13['_homeX'],_0x158a82+=_0x2e8e13[_0x4d62e6(0x5d8)]-_0x2e8e13[_0x4d62e6(0x649)],_0x2e8e13['startMove'](_0x306395,_0x158a82,_0x4d2408);if(Imported[_0x4d62e6(0x714)])_0x2e8e13[_0x4d62e6(0xba3)](_0x4ed6f1||_0x4d62e6(0x88e));},Game_Battler['prototype'][_0x4a3d8d(0x9d5)]=function(_0x38b09d,_0x3e4011,_0x1e9e0b,_0xbf043f,_0x9cd180,_0x306302){const _0x203fc0=_0x4a3d8d;if(!$gameSystem['isSideView']())return;const _0x3451c7=this[_0x203fc0(0x28e)]();if(!_0x3451c7)return;if(_0x38b09d===Infinity||_0x3e4011===Infinity)return;if(isNaN(_0x38b09d)||isNaN(_0x3e4011))return;_0x306302=_0x306302||0x0;if(_0x306302>0x0){if(_0x203fc0(0xaf7)!==_0x203fc0(0x8e3)){if(_0x3451c7['_baseX']>_0x38b09d)_0x38b09d+=_0x3451c7[_0x203fc0(0xb49)]/0x2+_0x306302;if(_0x3451c7[_0x203fc0(0x232)]<_0x38b09d)_0x38b09d-=_0x3451c7[_0x203fc0(0xb49)]/0x2+_0x306302;}else{const _0x19505e=this[_0x203fc0(0x28e)]();if(_0x19505e&&_0x8c1e8f)_0x19505e['stepForward']();return;}}if(_0xbf043f)this['setBattlerFacePoint'](_0x38b09d,_0x3e4011,![]);_0x38b09d-=_0x3451c7['_homeX'],_0x3e4011-=_0x3451c7['_homeY'],_0x3451c7[_0x203fc0(0x7aa)](_0x38b09d,_0x3e4011,_0x1e9e0b);if(Imported[_0x203fc0(0x714)])_0x3451c7['setMoveEasingType'](_0x9cd180||_0x203fc0(0x88e));},Game_Battler[_0x4a3d8d(0x3c4)]['moveBattlerHomeDistance']=function(_0x716bf3,_0x5c1e0e,_0x54c083,_0x57b3d3,_0xb384c){const _0x5c6dd1=_0x4a3d8d;if(!$gameSystem[_0x5c6dd1(0x957)]())return;const _0x57336a=this['battler']();if(!_0x57336a)return;if(_0x57b3d3)this[_0x5c6dd1(0x420)](_0x716bf3+_0x57336a[_0x5c6dd1(0x232)],_0x5c1e0e+_0x57336a[_0x5c6dd1(0x5d8)],![]);_0x716bf3+=_0x57336a[_0x5c6dd1(0x966)],_0x5c1e0e+=_0x57336a['_homeY'],_0x57336a['startHomeMove'](_0x716bf3,_0x5c1e0e,_0x54c083,_0xb384c),this[_0x5c6dd1(0x920)]=_0x716bf3,this[_0x5c6dd1(0x6ff)]=_0x5c1e0e;},Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x169)]=function(_0x140948,_0x4c1a8b,_0x234dc8,_0x5134f4,_0x2f2ee8,_0x55ada8){const _0x4c2e3b=_0x4a3d8d;if(!$gameSystem[_0x4c2e3b(0x957)]())return;const _0x2662c0=this[_0x4c2e3b(0x28e)]();if(!_0x2662c0)return;_0x55ada8=_0x55ada8||0x0;if(_0x55ada8>0x0){if(_0x2662c0[_0x4c2e3b(0x232)]>_0x140948)_0x140948+=_0x2662c0[_0x4c2e3b(0xb49)]/0x2+_0x55ada8;if(_0x2662c0[_0x4c2e3b(0x232)]<_0x140948)_0x140948-=_0x2662c0[_0x4c2e3b(0xb49)]/0x2+_0x55ada8;}if(_0x5134f4)this[_0x4c2e3b(0x420)](_0x140948,_0x4c1a8b,![]);_0x2662c0['startHomeMove'](_0x140948,_0x4c1a8b,_0x234dc8,_0x2f2ee8),this[_0x4c2e3b(0x920)]=_0x140948,this['_forcedHomeY']=_0x4c1a8b;},Game_Battler['prototype'][_0x4a3d8d(0x29b)]=function(_0x377409,_0x2094b6,_0x50c4ca){const _0x2b2e7a=_0x4a3d8d;if(!$gameSystem[_0x2b2e7a(0x957)]())return;const _0x13258e=this['battler']();if(!_0x13258e)return;_0x13258e[_0x2b2e7a(0x8c5)](_0x377409,_0x2094b6,_0x50c4ca);},Game_Battler['prototype'][_0x4a3d8d(0x759)]=function(_0x1c1299,_0x2cefcf){const _0x55568f=_0x4a3d8d;if(!$gameSystem[_0x55568f(0x957)]())return;const _0x189638=this[_0x55568f(0x28e)]();if(!_0x189638)return;_0x189638[_0x55568f(0x2ec)](_0x1c1299,_0x2cefcf);},Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xb5e)]=function(_0x315d9c,_0x5aa731,_0x2ac45f,_0x1b4087){const _0x49a9fa=_0x4a3d8d;if(!$gameSystem[_0x49a9fa(0x957)]())return;const _0x2d1d59=this[_0x49a9fa(0x28e)]();if(!_0x2d1d59)return;_0x2d1d59[_0x49a9fa(0xc30)](_0x315d9c,_0x5aa731,_0x2ac45f,_0x1b4087);},Game_Battler[_0x4a3d8d(0x3c4)]['skewBattler']=function(_0xa06776,_0x6af31b,_0x5e8afd,_0x38867c){const _0x4776f8=_0x4a3d8d;if(!$gameSystem[_0x4776f8(0x957)]())return;const _0x26a277=this[_0x4776f8(0x28e)]();if(!_0x26a277)return;if(this[_0x4776f8(0x764)]()){if(_0x4776f8(0x509)==='HNGwq'){let _0x33c7c5=-0x10,_0xe5c2f7=this[_0x4776f8(0x2cc)]*0.5;const _0x26c8ec=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x284b58=this['_battler']['traitObjects']()[_0x4776f8(0xa4a)](_0x2ae9c9=>_0x2ae9c9&&_0x2ae9c9[_0x4776f8(0x9ea)]['match'](_0x26c8ec)?_0x4a6c39(_0x235ee8['$1']):0x0),_0x38a7a1=this[_0x4776f8(0x349)][_0x4776f8(0x7e0)]()[_0x4776f8(0xa4a)](_0x238e5f=>_0x238e5f&&_0x238e5f[_0x4776f8(0x9ea)][_0x4776f8(0x591)](_0x26c8ec)?_0x12e01d(_0x3e6a2f['$2']):0x0);_0x33c7c5=_0x284b58[_0x4776f8(0x544)]((_0x24c1b9,_0x3abf1d)=>_0x24c1b9+_0x3abf1d,_0x33c7c5),_0xe5c2f7=_0x38a7a1[_0x4776f8(0x544)]((_0x3ecf93,_0x4ef837)=>_0x3ecf93+_0x4ef837,_0xe5c2f7),this[_0x4776f8(0x4df)]['x']=_0x33c7c5,this['_weaponSprite']['y']=_0xe5c2f7,this[_0x4776f8(0x4df)][_0x4776f8(0x372)]();}else _0xa06776*=-0x1,_0x6af31b*=-0x1;}_0x26a277[_0x4776f8(0x2f6)](_0xa06776,_0x6af31b,_0x5e8afd,_0x38867c);},Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x904)]=function(_0x5eae1c,_0x5a0eb2,_0x288fd6,_0x351626){const _0x615edc=_0x4a3d8d;if(!$gameSystem[_0x615edc(0x957)]())return;const _0x324ec4=this[_0x615edc(0x28e)]();if(!_0x324ec4)return;_0x324ec4[_0x615edc(0xac5)](_0x5eae1c,_0x5a0eb2,_0x288fd6,_0x351626);},Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x3ba)]=function(_0x5a88ea,_0x30860b,_0x23420d){const _0x41490b=_0x4a3d8d;if(!$gameSystem['isSideView']())return;const _0x108e3b=this[_0x41490b(0x28e)]();if(!_0x108e3b)return;_0x108e3b[_0x41490b(0x4e3)](_0x5a88ea,_0x30860b,_0x23420d);},Game_Battler['prototype']['clearFreezeMotion']=function(){const _0x538886=_0x4a3d8d,_0xde3619=!!this['_freezeMotionData'];this['_freezeMotionData']=undefined,_0xde3619&&(_0x538886(0x638)!==_0x538886(0x5e3)?(this[_0x538886(0x92e)](),this['clearFreezeMotionForWeapons']()):(_0x3608fa-=this[_0x538886(0x2e8)],_0x4e37c5-=this[_0x538886(0x205)]));},Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x7d2)]=function(){const _0x3d4923=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;const _0x221c4d=this[_0x3d4923(0x28e)]();if(!_0x221c4d)return;let _0x286ce5=this[_0x3d4923(0x764)]()?_0x221c4d['_weaponSprite']:_0x221c4d[_0x3d4923(0x1d8)][_0x3d4923(0x4df)];_0x286ce5&&_0x286ce5['setup'](0x0);},Game_Battler[_0x4a3d8d(0x3c4)]['freezeMotion']=function(_0x23f6e1,_0x418a4d,_0x3c5c02){const _0x43d5bc=_0x4a3d8d;if(this[_0x43d5bc(0x87a)]()&&!this['hasSvBattler']())return;let _0x5b93ec=0x0,_0x13f83d=0x0;_0x23f6e1[_0x43d5bc(0x591)](/ATTACK[ ](\d+)/i)&&(_0x13f83d=Number(RegExp['$1']),_0x13f83d--);if(this[_0x43d5bc(0x764)]()){if('qGKXS'===_0x43d5bc(0xa60)){const _0x5779bc=this[_0x43d5bc(0x91b)]();_0x5b93ec=_0x5779bc[_0x13f83d]?_0x5779bc[_0x13f83d][_0x43d5bc(0x26b)]:0x0;}else{if(!_0x25490d['BattleCore'][_0x43d5bc(0xb75)][_0x43d5bc(0x4e0)][_0x43d5bc(0x805)])return;const _0x39f026=_0x5a7b71[_0x43d5bc(0x18b)];if(_0x39f026){if(_0x39f026[_0x43d5bc(0x764)]()&&!_0x5d1393[_0x43d5bc(0x957)]())return;const _0x3daa4d=_0x39f026['battler']();if(_0x3daa4d&&_0x39f026['isActor']())this['_battlerContainer'][_0x43d5bc(0x960)](_0x3daa4d);}}}else{if(this[_0x43d5bc(0x87a)]()){if(_0x43d5bc(0xbe7)!==_0x43d5bc(0xbe7)){if(this[_0x43d5bc(0x5a9)][_0x43d5bc(0x482)]>0x0){const _0x46b69b=this['_forcedBattlers'][_0x43d5bc(0x331)](),_0x3b9ae0=_0x46b69b[0x0];return _0x3b9ae0[_0x43d5bc(0x413)]=_0x3b9ae0[_0x43d5bc(0x413)]||[],_0x3b9ae0[_0x43d5bc(0x413)][0x0]=_0x46b69b[0x1],_0x3b9ae0;}else return this[_0x43d5bc(0x2db)][_0x43d5bc(0x331)]();}else _0x5b93ec=this[_0x43d5bc(0x7bd)]()[_0x43d5bc(0x26b)]||0x0;}}const _0x442354=$dataSystem[_0x43d5bc(0x857)][_0x5b93ec];_0x23f6e1[_0x43d5bc(0x591)](/attack/i)&&(_0x23f6e1=[_0x43d5bc(0x6d8),_0x43d5bc(0x99c),_0x43d5bc(0x158)][_0x442354[_0x43d5bc(0x7d7)]]||_0x43d5bc(0x99c)),this[_0x43d5bc(0x7d9)]={'motionType':_0x23f6e1,'weaponImageId':_0x418a4d?_0x442354[_0x43d5bc(0x970)]:0x0,'pattern':_0x3c5c02};},Game_Battler[_0x4a3d8d(0x3c4)]['isFriendly']=function(_0x16e1ee){const _0x58b46f=_0x4a3d8d;if(!_0x16e1ee)return![];return _0x16e1ee[_0x58b46f(0x997)]()===this['friendsUnit']();},Game_Battler['prototype'][_0x4a3d8d(0x899)]=function(_0x1ec3d2){const _0xc2a2a3=_0x4a3d8d;if(!_0x1ec3d2)return![];return _0x1ec3d2[_0xc2a2a3(0xbae)]()===this['friendsUnit']();},Game_Battler[_0x4a3d8d(0x3c4)]['hasStaticSvBattler']=function(){return![];},Game_Actor['prototype']['hasStaticSvBattler']=function(){const _0x10bc9b=_0x4a3d8d;return this[_0x10bc9b(0x820)]()['match'](/\$/i);},Game_Enemy[_0x4a3d8d(0x3c4)]['hasStaticSvBattler']=function(){const _0x273209=_0x4a3d8d;return this['hasSvBattler']()&&this['svBattlerName']()[_0x273209(0x591)](/\$/i);},VisuMZ[_0x4a3d8d(0x485)]['Game_Actor_setup']=Game_Actor['prototype'][_0x4a3d8d(0x4da)],Game_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x4da)]=function(_0x4972c8){const _0x168770=_0x4a3d8d;VisuMZ[_0x168770(0x485)][_0x168770(0xbbe)][_0x168770(0xaf0)](this,_0x4972c8),this[_0x168770(0x8be)]();},Game_Actor[_0x4a3d8d(0x3c4)]['initBattlePortrait']=function(){const _0x3e0284=_0x4a3d8d;this[_0x3e0284(0xbf2)]='',this[_0x3e0284(0x2fa)]()&&this[_0x3e0284(0x2fa)]()['note']['match'](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(_0x3e0284(0xb2d)===_0x3e0284(0x1e8)?(_0x2a93f1[_0x3e0284(0x20f)](),_0x308ec5[_0x3e0284(0x3da)](_0x30b13c),_0x346284[_0x3e0284(0x485)][_0x3e0284(0xa5f)][_0x3e0284(0xaf0)](this,_0x57607a),this[_0x3e0284(0x483)]()):this[_0x3e0284(0xbf2)]=String(RegExp['$1']));},Game_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x8d7)]=function(){const _0x40021e=_0x4a3d8d;if(this[_0x40021e(0x396)]()!==''){if('aWkBO'!==_0x40021e(0x492))this[_0x40021e(0x6e5)][_0x40021e(0x34b)](_0x3c6ca5),this[_0x40021e(0xbd7)](_0x4c7f04)?this[_0x40021e(0x50d)]()[_0x40021e(0x208)](_0x635568):this[_0x40021e(0x86f)][_0x40021e(0x208)](_0x52b4db);else return this[_0x40021e(0x396)]();}else{if(Imported[_0x40021e(0x452)]&&this[_0x40021e(0x7a0)]()!==''){if(_0x40021e(0xa24)==='RGlmP')return this[_0x40021e(0x7a0)]();else this[_0x40021e(0x826)](_0x216711['weaponImageId']);}}return'';},Game_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x396)]=function(){const _0x2c9394=_0x4a3d8d;if(this[_0x2c9394(0xbf2)]===undefined)this[_0x2c9394(0x8be)]();return this['_battlePortrait'];},Game_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xaec)]=function(_0x118294){const _0x3c9a0c=_0x4a3d8d;if(this['_battlePortrait']===undefined)this[_0x3c9a0c(0x8be)]();this['_battlePortrait']=_0x118294;if(SceneManager[_0x3c9a0c(0x930)]()&&$gameParty[_0x3c9a0c(0xc22)]()[_0x3c9a0c(0xbff)](this)){if(_0x3c9a0c(0xc3e)===_0x3c9a0c(0xc3e)){const _0x3c411a=SceneManager[_0x3c9a0c(0x3ff)][_0x3c9a0c(0x71c)];if(_0x3c411a)_0x3c411a['refreshActorPortrait'](this);}else{const _0x2dd357=this[_0x3c9a0c(0x49d)]()[_0x3c9a0c(0x918)];if(_0x2dd357['match'](/RANDOM/i))return![];if(_0x2dd357[_0x3c9a0c(0x591)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x2dd357[_0x3c9a0c(0x591)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return _0x5d2d96['BattleCore']['Game_Action_needsSelection'][_0x3c9a0c(0xaf0)](this);}}},Game_Actor['prototype'][_0x4a3d8d(0x54e)]=function(){return!![];},Game_Actor['prototype']['isAutoBattle']=function(){const _0x30cde1=_0x4a3d8d;if(!this['isConfused']()&&BattleManager[_0x30cde1(0xa76)])return!![];return Game_Battler['prototype'][_0x30cde1(0xc2e)][_0x30cde1(0xaf0)](this);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x4a7)]=Game_Actor[_0x4a3d8d(0x3c4)]['makeActionList'],Game_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xc03)]=function(){const _0x2d250d=_0x4a3d8d;if(BattleManager[_0x2d250d(0xa76)]&&!ConfigManager[_0x2d250d(0x48b)]){if(_0x2d250d(0x1d9)!==_0x2d250d(0xb30))return this['makeActionListAutoAttack']();else this[_0x2d250d(0xa3f)](),this[_0x2d250d(0x6d3)]=null,this['_inputting']=![];}else{return VisuMZ['BattleCore']['Game_Actor_makeActionList'][_0x2d250d(0xaf0)](this);;}},Game_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x893)]=function(){const _0x5dd1d3=_0x4a3d8d,_0x456a52=[],_0x563a28=new Game_Action(this);return _0x563a28[_0x5dd1d3(0x4d1)](),_0x456a52[_0x5dd1d3(0x906)](_0x563a28),_0x456a52;},Game_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x821)]=function(){const _0x158313=_0x4a3d8d;if(this[_0x158313(0x3f7)]()['note'][_0x158313(0x591)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)){if('mwxRL'!=='mwxRL'){this['_flashColor']=_0x4d58cc[_0x158313(0x602)]||[0x0,0x0,0x0,0x0],this['_flashColor']=_0x5689ac[_0x158313(0x773)](this[_0x158313(0x744)]),this[_0x158313(0x171)]=_0x4bf8c8[_0x158313(0x49f)]||0x0;const _0x31623e=this[_0x158313(0xb00)](),_0x1a4d74=_0x52d1b7[_0x158313(0x467)](_0x31623e*0x1e),_0x3d82ad=this[_0x158313(0x6cb)](_0x1a4d74,_0x31623e);_0x3d82ad['bitmap'][_0x158313(0x19e)]=_0x4409a5[_0x158313(0x9e2)](_0x1aad73[_0x158313(0x19e)]),_0x3d82ad[_0x158313(0x2dd)][_0x158313(0x1af)](_0x299c1c,0x0,0x0,_0x1a4d74,_0x31623e,_0x158313(0xb3f)),_0x3d82ad['dy']=0x0;}else return String(RegExp['$1'])['split'](/[\r\n]+/);}else{if('qFQaL'==='qFQaL')return VisuMZ[_0x158313(0x485)][_0x158313(0xb75)][_0x158313(0x810)][_0x158313(0x380)];else _0xe4a00a['BattleCore'][_0x158313(0xbd1)][_0x158313(0xaf0)](this);}},Game_Actor['prototype'][_0x4a3d8d(0x9b0)]=function(){const _0x57b133=_0x4a3d8d;if(this['_cache'][_0x57b133(0x9ac)]!==undefined)return this[_0x57b133(0x635)]['svAnchorX'];if(this[_0x57b133(0x2fa)]()[_0x57b133(0x9ea)][_0x57b133(0x591)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)){if('wJtRu'!==_0x57b133(0x425)){const _0x41fc47=_0x240f4c[_0x57b133(0x965)]();_0x41fc47<=0x0?_0xe6eab0['playEnemyAttack']():this[_0x57b133(0xc2a)](_0x34ffca,_0x41fc47);}else this[_0x57b133(0x635)][_0x57b133(0x9ac)]=eval(RegExp['$1']),this[_0x57b133(0x635)][_0x57b133(0xa5e)]=eval(RegExp['$2']);}else this[_0x57b133(0x635)][_0x57b133(0x9ac)]=Game_Battler['prototype'][_0x57b133(0x9b0)]['call'](this);return this[_0x57b133(0x635)][_0x57b133(0x9ac)];},Game_Actor[_0x4a3d8d(0x3c4)]['svBattlerAnchorY']=function(){const _0xb69b40=_0x4a3d8d;if(this[_0xb69b40(0x635)]['svAnchorY']!==undefined)return this['_cache'][_0xb69b40(0xa5e)];return this[_0xb69b40(0x2fa)]()['note'][_0xb69b40(0x591)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0xb69b40(0x635)][_0xb69b40(0x9ac)]=eval(RegExp['$1']),this[_0xb69b40(0x635)]['svAnchorY']=eval(RegExp['$2'])):this[_0xb69b40(0x635)]['svAnchorY']=Game_Battler[_0xb69b40(0x3c4)][_0xb69b40(0x5ce)]['call'](this),this[_0xb69b40(0x635)][_0xb69b40(0xa5e)];},Game_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xbe3)]=function(){const _0xd1f607=_0x4a3d8d;if(this[_0xd1f607(0x635)][_0xd1f607(0x5bd)]!==undefined)return this['_cache'][_0xd1f607(0x5bd)];if(this[_0xd1f607(0x2fa)]()[_0xd1f607(0x9ea)]['match'](/<SIDEVIEW SHOW SHADOW>/i))_0xd1f607(0xb46)===_0xd1f607(0xb46)?this['_cache'][_0xd1f607(0x5bd)]=!![]:_0x26658d+=_0x5742eb[_0xd1f607(0xb49)]-_0x3ad6d4;else{if(this[_0xd1f607(0x2fa)]()[_0xd1f607(0x9ea)][_0xd1f607(0x591)](/<SIDEVIEW HIDE SHADOW>/i))this[_0xd1f607(0x635)][_0xd1f607(0x5bd)]=![];else{if(_0xd1f607(0x8c4)!=='HqaMw')return this['evalDamageFormulaBattleCore'](_0xee64fd);else this[_0xd1f607(0x635)][_0xd1f607(0x5bd)]=Game_Battler['prototype']['svBattlerShadowVisible'][_0xd1f607(0xaf0)](this);}}return this['_cache'][_0xd1f607(0x5bd)];},Game_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x5f5)]=function(){const _0x4d33b2=_0x4a3d8d;return VisuMZ[_0x4d33b2(0x485)][_0x4d33b2(0xb75)][_0x4d33b2(0x4e0)]['SmoothImage'];},Game_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x386)]=function(){const _0x246284=_0x4a3d8d,_0x1086d7=this['weapons'](),_0x35a300=_0x1086d7[0x0]?_0x1086d7[0x0][_0x246284(0x26b)]:0x0,_0x28e7bb=$dataSystem['attackMotions'][_0x35a300];_0x28e7bb&&this[_0x246284(0x826)](_0x28e7bb[_0x246284(0x970)]);},Game_Actor['prototype']['performAction']=function(_0x18e7a5){const _0x55ca4d=_0x4a3d8d;Game_Battler[_0x55ca4d(0x3c4)][_0x55ca4d(0x9df)]['call'](this,_0x18e7a5),this[_0x55ca4d(0x3c9)](_0x18e7a5);},Game_Actor[_0x4a3d8d(0x3c4)]['getAttackMotion']=function(){const _0x466e7c=_0x4a3d8d,_0x4c2fd2=this[_0x466e7c(0x91b)](),_0x1dce44=_0x4c2fd2[0x0]?_0x4c2fd2[0x0][_0x466e7c(0x26b)]:0x0;return $dataSystem[_0x466e7c(0x857)][_0x1dce44];},Game_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa6d)]=function(_0x545d8d){const _0x50ce4f=_0x4a3d8d;_0x545d8d=_0x545d8d||0x1,_0x545d8d--;const _0x57f61d=this[_0x50ce4f(0x91b)]();return _0x57f61d[_0x545d8d]?_0x57f61d[_0x545d8d][_0x50ce4f(0x44e)]:0x0;},Game_Actor[_0x4a3d8d(0x3c4)]['getAttackMotionSlot']=function(_0x542c6c){const _0x358189=_0x4a3d8d;_0x542c6c=_0x542c6c||0x1,_0x542c6c--;const _0x52bbe7=this[_0x358189(0x91b)](),_0x20b318=_0x52bbe7[_0x542c6c]?_0x52bbe7[_0x542c6c]['wtypeId']:0x0;return $dataSystem[_0x358189(0x857)][_0x20b318];},Game_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x428)]=function(_0x58244e){const _0x2e2d54=_0x4a3d8d;_0x58244e=_0x58244e||0x1,_0x58244e--;const _0x46658f=this[_0x2e2d54(0x91b)](),_0x29644d=_0x46658f[_0x58244e]?_0x46658f[_0x58244e]['wtypeId']:0x0,_0xeff329=$dataSystem['attackMotions'][_0x29644d];if(_0xeff329){if('BYNDt'!==_0x2e2d54(0x5e2))_0x399327[_0x2e2d54(0x2fa)]()['makeAutoBattleActions'](),_0x117099[_0x2e2d54(0xb33)](),_0x188c76[_0x2e2d54(0x79c)](),this[_0x2e2d54(0xb09)]();else{if(_0xeff329[_0x2e2d54(0x7d7)]===0x0)this[_0x2e2d54(0x834)]('thrust');else{if(_0xeff329['type']===0x1)this[_0x2e2d54(0x834)]('swing');else _0xeff329[_0x2e2d54(0x7d7)]===0x2&&this[_0x2e2d54(0x834)]('missile');}this[_0x2e2d54(0x826)](_0xeff329['weaponImageId']);}}},Game_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x342)]=function(_0x43d32d){const _0x4f3ea2=_0x4a3d8d;this[_0x4f3ea2(0x454)]=_0x43d32d||0x0,this['_cache']={};},Game_Battler['prototype'][_0x4a3d8d(0xc1c)]=function(){const _0xfecb77=_0x4a3d8d;this[_0xfecb77(0x454)]=this[_0xfecb77(0x454)]||0x0,this[_0xfecb77(0x454)]++,this[_0xfecb77(0x635)]={};},Game_Battler['prototype'][_0x4a3d8d(0x721)]=function(){const _0x34b49d=_0x4a3d8d;this[_0x34b49d(0x454)]=undefined,this[_0x34b49d(0x635)]={};},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x981)]=Game_Actor['prototype']['equips'],Game_Actor[_0x4a3d8d(0x3c4)]['equips']=function(){const _0x24e30c=_0x4a3d8d;let _0x1aef46=VisuMZ[_0x24e30c(0x485)][_0x24e30c(0x981)][_0x24e30c(0xaf0)](this);if(this[_0x24e30c(0x192)])return _0x1aef46;if(this[_0x24e30c(0x454)]!==undefined){this[_0x24e30c(0x192)]=!![];const _0x2477cc=this['equipSlots']();for(let _0x14e5e9=0x0;_0x14e5e9<_0x2477cc[_0x24e30c(0x482)];_0x14e5e9++){_0x2477cc[_0x14e5e9]===0x1&&this[_0x24e30c(0x454)]!==_0x14e5e9&&('ImarS'===_0x24e30c(0x4d2)?delete _0xe4ad05[_0x24e30c(0xa30)]['cancel']:_0x1aef46[_0x14e5e9]=null);}this[_0x24e30c(0x192)]=undefined;}return _0x1aef46;},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x924)]=function(_0x1d1b2f){const _0x17c524=_0x4a3d8d;if(_0x1d1b2f[_0x17c524(0x764)]()){if(_0x17c524(0x818)!==_0x17c524(0x488))return _0x1d1b2f['weapons']()[_0x17c524(0x482)]||0x1;else _0x4dcd23=_0x3d832c[_0x17c524(0x66f)];}else return 0x1;},Window_BattleLog['prototype'][_0x4a3d8d(0x7da)]=function(_0x4e04b5,_0x3c8508){const _0xbc75c0=_0x4a3d8d;_0x4e04b5&&_0x4e04b5[_0xbc75c0(0x764)]()&&(_0xbc75c0(0x369)==='pYIUA'?_0x411f80['name']=_0x4cb6c7(_0x72eb42['$1']):_0x4e04b5[_0xbc75c0(0x342)](_0x3c8508)),this[_0xbc75c0(0x84f)]();},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa59)]=function(_0x2f9be5){const _0x3720af=_0x4a3d8d;_0x2f9be5&&_0x2f9be5[_0x3720af(0x764)]()&&_0x2f9be5[_0x3720af(0x721)](),this[_0x3720af(0x84f)]();},Game_Actor['prototype'][_0x4a3d8d(0xa9e)]=function(){const _0x5ee856=_0x4a3d8d;let _0x583131=_0x5ee856(0xa9e);if(this['checkCacheKey'](_0x583131))return this[_0x5ee856(0x635)][_0x583131];return this[_0x5ee856(0x635)][_0x583131]=this[_0x5ee856(0x295)](this[_0x5ee856(0x2fa)]()),this[_0x5ee856(0x635)][_0x583131];},Game_Actor[_0x4a3d8d(0x3c4)]['battleUIOffsetY']=function(){const _0x42dd8c=_0x4a3d8d;let _0x102c74=_0x42dd8c(0x1ae);if(this[_0x42dd8c(0x307)](_0x102c74))return this[_0x42dd8c(0x635)][_0x102c74];return this[_0x42dd8c(0x635)][_0x102c74]=this[_0x42dd8c(0x980)](this[_0x42dd8c(0x2fa)]()),this[_0x42dd8c(0x635)][_0x102c74];},VisuMZ['BattleCore'][_0x4a3d8d(0x730)]=Game_Enemy['prototype']['setup'],Game_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x4da)]=function(_0x4e299e,_0xfb615f,_0x3fb4fc){const _0x22dc0c=_0x4a3d8d;_0x4e299e=DataManager[_0x22dc0c(0x95b)](_0x4e299e),VisuMZ[_0x22dc0c(0x485)]['Game_Enemy_setup'][_0x22dc0c(0xaf0)](this,_0x4e299e,_0xfb615f,_0x3fb4fc),Imported[_0x22dc0c(0xad7)]&&this['initElementStatusCore'](),this[_0x22dc0c(0x3c6)](),this['setupBattleCoreData'](),Imported[_0x22dc0c(0xad7)]&&this['recoverAll']();},Game_Enemy[_0x4a3d8d(0x3c4)]['clearBattleCoreData']=function(){const _0x54d4d1=_0x4a3d8d,_0xd67ae=VisuMZ[_0x54d4d1(0x485)]['Settings'][_0x54d4d1(0xa50)];this['_attackAnimationId']=_0xd67ae[_0x54d4d1(0x77f)],this['_svBattlerData']={};},Game_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x883)]=function(){const _0x53ca54=_0x4a3d8d,_0x4823c8=VisuMZ[_0x53ca54(0x485)][_0x53ca54(0xb75)]['Enemy'],_0x522900=this[_0x53ca54(0x382)]()[_0x53ca54(0x9ea)];this[_0x53ca54(0x17b)]={'name':'','wtypeId':_0x4823c8[_0x53ca54(0x178)],'collapse':_0x4823c8[_0x53ca54(0x7b7)],'motionIdle':_0x4823c8[_0x53ca54(0x340)],'width':_0x4823c8[_0x53ca54(0x2a4)]||0x40,'height':_0x4823c8[_0x53ca54(0x3db)]||0x40,'anchorX':_0x4823c8[_0x53ca54(0x318)]||0x0,'anchorY':_0x4823c8[_0x53ca54(0x4e4)]||0x0,'shadow':_0x4823c8[_0x53ca54(0x3a6)]};_0x522900[_0x53ca54(0x591)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this['_attackAnimationId']=Number(RegExp['$1']));const _0x51ac55=this['_svBattlerData'];if(_0x522900[_0x53ca54(0x591)](/<SIDEVIEW BATTLER: (.*)>/i))_0x51ac55[_0x53ca54(0xbaa)]=String(RegExp['$1']);else{if(_0x522900[_0x53ca54(0x591)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){if(_0x53ca54(0x83c)!==_0x53ca54(0x83c))_0x10bc7d=_0x4204ae[this['_actor'][_0x53ca54(0x5e9)]()];else{const _0x46ec15=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x53ca54(0x34b)]('');_0x51ac55[_0x53ca54(0xbaa)]=DataManager[_0x53ca54(0x4aa)](_0x46ec15);}}}_0x522900[_0x53ca54(0x591)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x53ca54(0x9db)!==_0x53ca54(0x48e)?(_0x51ac55['anchorX']=eval(RegExp['$1']),_0x51ac55[_0x53ca54(0x261)]=eval(RegExp['$2'])):_0x53548a[_0x53ca54(0x485)][_0x53ca54(0x9c5)][_0x53ca54(0xaf0)](this));if(_0x522900[_0x53ca54(0x591)](/<SIDEVIEW COLLAPSE>/i))_0x53ca54(0xb32)==='MpbgG'?(_0x253a78['BattleCore'][_0x53ca54(0x589)]&&_0x1c50cd[_0x53ca54(0x485)][_0x53ca54(0x589)][_0x53ca54(0xaf0)](this,_0x1d37b3),_0xfc221[_0x53ca54(0x485)]['Parse_Notetags_TraitObjects'](_0x39d60e)):_0x51ac55['collapse']=!![];else _0x522900[_0x53ca54(0x591)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x51ac55[_0x53ca54(0x832)]=![]);if(_0x522900[_0x53ca54(0x591)](/<SIDEVIEW SHOW SHADOW>/i)){if(_0x53ca54(0x894)===_0x53ca54(0x894))_0x51ac55[_0x53ca54(0x977)]=!![];else return _0x664318[_0x53ca54(0x485)][_0x53ca54(0xb75)][_0x53ca54(0xa50)][_0x53ca54(0x3a6)];}else _0x522900[_0x53ca54(0x591)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x51ac55[_0x53ca54(0x977)]=![]);if(_0x522900['match'](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x51ac55[_0x53ca54(0x81d)]=String(RegExp['$1'])[_0x53ca54(0x3b6)]()[_0x53ca54(0x82d)]();else{if(_0x522900[_0x53ca54(0x591)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x5beeea=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x53ca54(0x34b)]('');_0x51ac55['motionIdle']=DataManager['processRandomizedData'](_0x5beeea);}}_0x522900[_0x53ca54(0x591)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x51ac55['width']=Number(RegExp['$1']),_0x51ac55[_0x53ca54(0x2cc)]=Number(RegExp['$2']));if(_0x522900[_0x53ca54(0x591)](/<SIDEVIEW WEAPON: (.*)>/i))_0x51ac55[_0x53ca54(0x26b)]=DataManager[_0x53ca54(0x6fb)](RegExp['$1']);else{if(_0x522900['match'](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x4e2c38=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x53ca54(0x34b)](''),_0x122a3d=DataManager['processRandomizedData'](_0x4e2c38);_0x51ac55[_0x53ca54(0x26b)]=DataManager[_0x53ca54(0x6fb)](_0x122a3d);}}if(Imported[_0x53ca54(0xad7)]){const _0xc05883=this[_0x53ca54(0x422)]();for(const _0x5bffb9 of _0xc05883){const _0x9da089=this[_0x53ca54(0x499)](_0x5bffb9)[_0x53ca54(0x870)][_0x53ca54(0x302)]()[_0x53ca54(0x82d)](),_0x10e9cd=_0x5bffb9[_0x53ca54(0x302)]()[_0x53ca54(0x82d)]();if(_0x522900[_0x53ca54(0x591)](VisuMZ[_0x53ca54(0x435)]['RegExp']['SvBattlerSolo-%1-%2'[_0x53ca54(0x8dd)](_0x10e9cd,_0x9da089)]))_0x51ac55[_0x53ca54(0xbaa)]=String(RegExp['$1']);else{if(_0x522900['match'](VisuMZ[_0x53ca54(0x435)][_0x53ca54(0xb93)][_0x53ca54(0x796)[_0x53ca54(0x8dd)](_0x10e9cd,_0x9da089)])){const _0x1e3856=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x53ca54(0x34b)]('');_0x51ac55[_0x53ca54(0xbaa)]=DataManager[_0x53ca54(0x4aa)](_0x1e3856);}}if(_0x522900[_0x53ca54(0x591)](VisuMZ[_0x53ca54(0x435)][_0x53ca54(0xb93)][_0x53ca54(0x3ca)[_0x53ca54(0x8dd)](_0x10e9cd,_0x9da089)])){if('zdCgi'===_0x53ca54(0x2a3))_0x51ac55[_0x53ca54(0x26b)]=DataManager['getWtypeIdWithName'](RegExp['$1']);else{if(!_0x1a74a6[_0x53ca54(0x333)][_0x53ca54(0xc17)](this[_0x53ca54(0x6dd)],_0x5ef544))return!![];if(!_0x29d190[_0x53ca54(0x333)][_0x53ca54(0xc1f)](this[_0x53ca54(0x6dd)],_0x12241f))return!![];if(!_0x249648[_0x53ca54(0x333)][_0x53ca54(0xa52)](this[_0x53ca54(0x6dd)],_0x11ea1b))return!![];}}else{if(_0x522900[_0x53ca54(0x591)](VisuMZ['ElementStatusCore']['RegExp'][_0x53ca54(0x314)['format'](_0x10e9cd,_0x9da089)])){if(_0x53ca54(0x45d)!==_0x53ca54(0x45d))_0x54717f[_0x53ca54(0x485)][_0x53ca54(0x4b9)][_0x53ca54(0xaf0)](this),this[_0x53ca54(0x311)]();else{const _0x1b4004=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x53ca54(0x34b)](''),_0x6c1e82=DataManager['processRandomizedData'](_0x1b4004);_0x51ac55[_0x53ca54(0x26b)]=DataManager[_0x53ca54(0x6fb)](_0x6c1e82);}}}if(_0x522900['match'](VisuMZ['ElementStatusCore']['RegExp'][_0x53ca54(0x52b)[_0x53ca54(0x8dd)](_0x10e9cd,_0x9da089)]))_0x51ac55[_0x53ca54(0x81d)]=String(RegExp['$1'])['toLowerCase']()[_0x53ca54(0x82d)]();else{if(_0x522900['match'](VisuMZ[_0x53ca54(0x435)][_0x53ca54(0xb93)][_0x53ca54(0x1b9)['format'](_0x10e9cd,_0x9da089)])){const _0x45774d=String(RegExp['$1'])[_0x53ca54(0x25c)](/[\r\n]+/)[_0x53ca54(0x34b)]('');_0x51ac55['motionIdle']=DataManager['processRandomizedData'](_0x45774d);}}}}},Game_Enemy['prototype'][_0x4a3d8d(0x965)]=function(){const _0x285364=_0x4a3d8d;return this[_0x285364(0x8bf)]||0x0;},Game_Enemy[_0x4a3d8d(0x3c4)]['attackAnimationId2']=function(){const _0x4155cc=_0x4a3d8d;return this[_0x4155cc(0x965)]();},Game_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa6d)]=function(_0x2dce27){const _0x235a69=_0x4a3d8d;return this[_0x235a69(0x965)]();},Game_Enemy[_0x4a3d8d(0x3c4)]['canBattlerMove']=function(){const _0x1c3b5f=_0x4a3d8d;if(this[_0x1c3b5f(0x382)]()['note']['match'](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x1c3b5f(0x3c4)]['canBattlerMove']['call'](this);},Game_Enemy['prototype'][_0x4a3d8d(0xc19)]=function(){const _0x2c4f57=_0x4a3d8d;if(this[_0x2c4f57(0x382)]()[_0x2c4f57(0x9ea)][_0x2c4f57(0x591)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy['prototype']['skills']=function(){const _0x53ab82=_0x4a3d8d,_0x579f4c=[];for(const _0x46b2a2 of this['enemy']()['actions']){const _0x5e56de=$dataSkills[_0x46b2a2[_0x53ab82(0x794)]];if(_0x5e56de&&!_0x579f4c[_0x53ab82(0xbff)](_0x5e56de))_0x579f4c[_0x53ab82(0x906)](_0x5e56de);}return _0x579f4c;},Game_Enemy[_0x4a3d8d(0x3c4)]['battleUIOffsetX']=function(){const _0x5a67e2=_0x4a3d8d;let _0x59049e=_0x5a67e2(0xa9e);if(this[_0x5a67e2(0x307)](_0x59049e))return this[_0x5a67e2(0x635)][_0x59049e];return this[_0x5a67e2(0x635)][_0x59049e]=this[_0x5a67e2(0x295)](this[_0x5a67e2(0x382)]()),this[_0x5a67e2(0x635)][_0x59049e];},Game_Enemy[_0x4a3d8d(0x3c4)]['battleUIOffsetY']=function(){const _0x5c1cb3=_0x4a3d8d;let _0x15b18a='battleUIOffsetY';if(this[_0x5c1cb3(0x307)](_0x15b18a))return this[_0x5c1cb3(0x635)][_0x15b18a];return this[_0x5c1cb3(0x635)][_0x15b18a]=this['createBattleUIOffsetY'](this[_0x5c1cb3(0x382)]()),this[_0x5c1cb3(0x635)][_0x15b18a];},Game_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x7bd)]=function(){const _0x35b9bc=_0x4a3d8d;if(this['_svBattlerData']!==undefined)return this[_0x35b9bc(0x17b)];return this[_0x35b9bc(0x883)](),this[_0x35b9bc(0x17b)];},Game_Enemy[_0x4a3d8d(0x3c4)]['hasSvBattler']=function(){const _0x23d862=_0x4a3d8d;return this[_0x23d862(0x7bd)]()[_0x23d862(0xbaa)]!=='';},Game_Enemy[_0x4a3d8d(0x3c4)]['svBattlerName']=function(){const _0x4f4641=_0x4a3d8d;return this[_0x4f4641(0x7bd)]()['name'];},Game_Enemy['prototype'][_0x4a3d8d(0x5f5)]=function(){const _0x3e1206=_0x4a3d8d;return this[_0x3e1206(0xac9)]()?VisuMZ[_0x3e1206(0x485)][_0x3e1206(0xb75)][_0x3e1206(0x4e0)]['SmoothImage']:VisuMZ[_0x3e1206(0x485)][_0x3e1206(0xb75)][_0x3e1206(0xa50)][_0x3e1206(0x325)];},Game_Enemy['prototype']['performAction']=function(_0x366b30){const _0x2c720b=_0x4a3d8d;Game_Battler['prototype'][_0x2c720b(0x9df)]['call'](this,_0x366b30);if(this[_0x2c720b(0xac9)]())this['performActionMotions'](_0x366b30);},Game_Enemy['prototype'][_0x4a3d8d(0x6c9)]=function(){const _0x4e0c81=_0x4a3d8d,_0x509464=this['svBattlerData']()[_0x4e0c81(0x26b)]||0x0,_0x3778bd=$dataSystem[_0x4e0c81(0x857)][_0x509464];if(_0x3778bd){if(_0x4e0c81(0x9aa)!==_0x4e0c81(0x9aa)){if(!_0x5f5134['isSceneBattle']())return;const _0x49e499=_0x889647[_0x4e0c81(0x912)];_0x49e499['popBaseLine']();}else{if(_0x3778bd[_0x4e0c81(0x7d7)]===0x0)this[_0x4e0c81(0x834)](_0x4e0c81(0x6d8));else{if(_0x3778bd[_0x4e0c81(0x7d7)]===0x1)this[_0x4e0c81(0x834)](_0x4e0c81(0x99c));else _0x3778bd[_0x4e0c81(0x7d7)]===0x2&&this[_0x4e0c81(0x834)]('missile');}}}},Game_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x386)]=function(){const _0x1218dd=_0x4a3d8d,_0x1eb26c=this[_0x1218dd(0x7bd)]()['wtypeId']||0x0,_0x519e73=$dataSystem[_0x1218dd(0x857)][_0x1eb26c];_0x519e73&&this['startWeaponAnimation'](_0x519e73['weaponImageId']);},Game_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x88a)]=function(){const _0x3303b3=_0x4a3d8d,_0x40246d=this[_0x3303b3(0x7bd)]()['wtypeId']||0x0;return $dataSystem[_0x3303b3(0x857)][_0x40246d];},Game_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x335)]=function(_0x3ae6b3){const _0x218b68=_0x4a3d8d;return this[_0x218b68(0x88a)]();},Game_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa25)]=function(){const _0x1b245e=_0x4a3d8d;Game_Battler['prototype'][_0x1b245e(0xa25)]['call'](this),this[_0x1b245e(0x54e)]()&&this[_0x1b245e(0xac9)]()&&this[_0x1b245e(0x834)](_0x1b245e(0x83f)),SoundManager[_0x1b245e(0x219)]();},Game_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x579)]=function(){const _0x111426=_0x4a3d8d;Game_Battler[_0x111426(0x3c4)][_0x111426(0x579)][_0x111426(0xaf0)](this),this['requestMotion'](_0x111426(0x59b));},Game_Enemy['prototype'][_0x4a3d8d(0x707)]=function(){const _0xd3f7d=_0x4a3d8d;Game_Battler['prototype']['performMagicEvasion']['call'](this),this['requestMotion'](_0xd3f7d(0x59b));},Game_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x494)]=function(){const _0x47db9e=_0x4a3d8d;Game_Battler[_0x47db9e(0x3c4)][_0x47db9e(0x494)]['call'](this),this['performAttack']();},Game_Enemy[_0x4a3d8d(0x3c4)]['allowCollapse']=function(){const _0x3078ff=_0x4a3d8d;if(this[_0x3078ff(0xac9)]()){if(this[_0x3078ff(0x75e)]()>=0x1)return!![];return this[_0x3078ff(0x7bd)]()[_0x3078ff(0x832)];}else{if(_0x3078ff(0x94b)===_0x3078ff(0x7ab))this['updateCustomActionSequence']();else return!![];}},Game_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x9b0)]=function(){const _0x16a914=_0x4a3d8d;return this[_0x16a914(0x7bd)]()[_0x16a914(0x9bf)];},Game_Enemy[_0x4a3d8d(0x3c4)]['svBattlerAnchorY']=function(){const _0x3d54c7=_0x4a3d8d;return this[_0x3d54c7(0x7bd)]()[_0x3d54c7(0x261)];},Game_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xbe3)]=function(){const _0x529d1f=_0x4a3d8d;return this['svBattlerData']()[_0x529d1f(0x977)];},VisuMZ['BattleCore'][_0x4a3d8d(0x751)]=Game_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x83a)],Game_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x83a)]=function(_0x57b0fa){const _0x39c457=_0x4a3d8d;VisuMZ[_0x39c457(0x485)][_0x39c457(0x751)]['call'](this,_0x57b0fa),this[_0x39c457(0x3c6)](),this['setupBattleCoreData']();const _0x3acf97=this[_0x39c457(0x28e)]();if(_0x3acf97)_0x3acf97[_0x39c457(0x1ba)](this);},Game_Unit[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa19)]=function(_0xbf44e4){const _0x405190=_0x4a3d8d;for(const _0x2d4f28 of this[_0x405190(0x30f)]()){if('zxPZR'===_0x405190(0x2b5))this[_0x405190(0x906)](_0x405190(0xa59),_0x1eb4eb);else{if(_0x2d4f28)_0x2d4f28[_0x405190(0xa19)](_0xbf44e4);}}},Game_Unit['prototype'][_0x4a3d8d(0x2bd)]=function(){const _0x455f69=_0x4a3d8d,_0x14475f=this[_0x455f69(0x411)]();return _0x14475f[Math[_0x455f69(0x4a9)](_0x14475f[_0x455f69(0x482)])];},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xc10)]=Game_Party[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x998)],Game_Party['prototype'][_0x4a3d8d(0x998)]=function(_0x2feae6){const _0x38a3ec=_0x4a3d8d;VisuMZ[_0x38a3ec(0x485)]['Game_Party_addActor'][_0x38a3ec(0xaf0)](this,_0x2feae6),BattleManager[_0x38a3ec(0x38d)]();},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x890)]=Game_Party[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x74c)],Game_Party[_0x4a3d8d(0x3c4)]['removeActor']=function(_0x4edb82){const _0x31ed6d=_0x4a3d8d;VisuMZ['BattleCore']['Game_Party_removeActor']['call'](this,_0x4edb82),BattleManager[_0x31ed6d(0x38d)]();},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xa5f)]=Game_Troop[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x4da)],Game_Troop[_0x4a3d8d(0x3c4)]['setup']=function(_0x50004b){const _0x3604ee=_0x4a3d8d;$gameTemp[_0x3604ee(0x20f)](),$gameTemp['applyForcedGameTroopSettingsBattleCore'](_0x50004b),VisuMZ['BattleCore'][_0x3604ee(0xa5f)][_0x3604ee(0xaf0)](this,_0x50004b),this[_0x3604ee(0x483)]();},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x2c3)]=Game_Troop[_0x4a3d8d(0x3c4)]['expTotal'],Game_Troop[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xaa1)]=function(){const _0x2ca443=_0x4a3d8d;let _0x3e451f=VisuMZ['BattleCore'][_0x2ca443(0x2c3)][_0x2ca443(0xaf0)](this);return this['expRate']&&(_0x2ca443(0xa15)!==_0x2ca443(0xa15)?(_0x229936[_0x2ca443(0x485)][_0x2ca443(0x9d4)][_0x2ca443(0xaf0)](this),this[_0x2ca443(0x5a9)]=[]):_0x3e451f*=this['expRate']()),Math[_0x2ca443(0xa71)](_0x3e451f);},Game_Troop['prototype'][_0x4a3d8d(0xc0c)]=function(){return 0x1;},Game_Troop[_0x4a3d8d(0x3c4)]['extendTroopMembers']=function(){const _0xb12962=_0x4a3d8d,_0x22310a=this[_0xb12962(0xa8e)]()[_0xb12962(0xbaa)]||'';if(_0x22310a[_0xb12962(0x591)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x3e8225=RegExp['$1']['split'](',')[_0xb12962(0xa4a)](_0xb874fa=>Number(_0xb874fa));this[_0xb12962(0x55b)](),this['processExtendTroopMembers'](_0x3e8225);}},Game_Troop[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x55b)]=function(){const _0x344380=_0x4a3d8d;let _0x575e11=_0x344380(0x518)+'\x0a';_0x575e11+=_0x344380(0x8b7);if(Imported[_0x344380(0x6d0)]){if(_0x344380(0x7c6)!=='upDcp'){if(!_0x4bfbfa[_0x344380(0x957)]())return;if(this[_0x344380(0x58e)])return;this[_0x344380(0x58e)]=!![];const _0x4ad4ea=this[_0x344380(0x28e)]();if(_0x4ad4ea)_0x4ad4ea[_0x344380(0x5b0)]();}else{if(VisuMZ['BattleSystemBTB'][_0x344380(0x553)]<1.11){if(_0x344380(0xa37)!==_0x344380(0xa37)){const _0x297b7e=_0xf530b3['randomInt'](0x2)===0x0?this['opponentsUnit']():this[_0x344380(0x997)]();_0x506fb3['push'](_0x297b7e['trueRandomTarget']());}else alert(_0x575e11[_0x344380(0x8dd)](_0x344380(0x1de))),SceneManager[_0x344380(0x4c2)]();}}}if(Imported[_0x344380(0x17d)]){if(VisuMZ[_0x344380(0x640)]['version']<1.19){if('PygoO'===_0x344380(0x61f))alert(_0x575e11[_0x344380(0x8dd)]('CTB')),SceneManager[_0x344380(0x4c2)]();else{if(!_0x56d06f[_0x344380(0x543)])return;const _0x32582f=_0x2ba773[_0x344380(0x3ff)][_0x344380(0x94c)];if(!_0x32582f)return;if(_0x27c88d[_0x344380(0x4be)]['version']<=1.04){_0x42c04c(_0x344380(0x2a2)),_0x659481['exit']();return;}_0x43f642[_0x344380(0x6a8)](_0x151665,_0x170558);const _0x148b18=_0xb9b67d[_0x344380(0x8a2)];_0x32582f[_0x344380(0xa12)](_0x148b18);}}}if(Imported[_0x344380(0xaf5)]){if(VisuMZ['BattleSystemSTB'][_0x344380(0x553)]<1.15){if('ilgYJ'!==_0x344380(0x90d)){if(this[_0x344380(0x49d)]()[_0x344380(0x9ea)][_0x344380(0x591)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x47059f=_0x152063(_0x237a1b['$1'])['toUpperCase']()[_0x344380(0x82d)]();return _0x47059f;}return _0x344380(0xad8);}else alert(_0x575e11[_0x344380(0x8dd)](_0x344380(0xbdd))),SceneManager[_0x344380(0x4c2)]();}}},Game_Troop[_0x4a3d8d(0x3c4)]['processExtendTroopMembers']=function(_0x417512){const _0x38f14f=_0x4a3d8d;this[_0x38f14f(0x9a0)]={};for(const _0x26f425 of this['members']()){if(_0x38f14f(0x59e)===_0x38f14f(0x59e)){if(!_0x26f425)continue;_0x26f425[_0x38f14f(0x13f)]('');}else return this[_0x38f14f(0x820)]()['match'](/\$/i);}for(const _0x2de4fe of _0x417512){const _0x1d8550=$dataTroops[_0x2de4fe];if(_0x1d8550)this[_0x38f14f(0xadc)](_0x1d8550);}this[_0x38f14f(0xa1e)]();},Game_Troop[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xadc)]=function(_0x231ec5){const _0x5c9b0b=_0x4a3d8d;for(const _0x20a682 of _0x231ec5[_0x5c9b0b(0x30f)]){if($dataEnemies[_0x20a682[_0x5c9b0b(0x313)]]){const _0x5bc96f=_0x20a682[_0x5c9b0b(0x313)],_0x126fdc=_0x20a682['x'],_0xc805c8=_0x20a682['y'],_0x231631=new Game_Enemy(_0x5bc96f,_0x126fdc,_0xc805c8);_0x20a682[_0x5c9b0b(0x706)]&&_0x231631[_0x5c9b0b(0xb20)](),this['_enemies'][_0x5c9b0b(0x906)](_0x231631);}}},VisuMZ[_0x4a3d8d(0x485)]['Game_Map_setupBattleback']=Game_Map[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x532)],Game_Map[_0x4a3d8d(0x3c4)]['setupBattleback']=function(){const _0x48791a=_0x4a3d8d;VisuMZ['BattleCore'][_0x48791a(0xa35)][_0x48791a(0xaf0)](this),this[_0x48791a(0xbf3)]();},Game_Map['prototype'][_0x4a3d8d(0xbf3)]=function(){const _0x4417a1=_0x4a3d8d;this[_0x4417a1(0xbbd)]={},this[_0x4417a1(0xb71)]={};if(!$dataMap)return;const _0x5c6004=$dataMap[_0x4417a1(0x9ea)];if(!_0x5c6004)return;const _0x22390c=_0x5c6004[_0x4417a1(0x591)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x22390c)for(const _0x9e0644 of _0x22390c){_0x9e0644[_0x4417a1(0x591)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x1c4acc=Number(RegExp['$1']),_0x194026=Number(RegExp['$2']),_0x354b20=_0x194026===0x1?this['_regionBattleback1']:this['_regionBattleback2'],_0x267eb4=String(RegExp['$3']);_0x354b20[_0x1c4acc]=_0x267eb4;}},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x1a6)]=Game_Map[_0x4a3d8d(0x3c4)]['battleback1Name'],Game_Map[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x60d)]=function(){const _0x5e0949=_0x4a3d8d;if(!BattleManager[_0x5e0949(0x21f)]()){const _0x27bf56=$gamePlayer[_0x5e0949(0x5f9)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x5e0949(0xbbd)]&&this['_regionBattleback1'][_0x27bf56]){if(_0x5e0949(0x946)==='HQsxS'){const _0x4b6bf7=this['itemLineRect'](_0x38a6d3),_0x5de4d5=this[_0x5e0949(0x32d)](_0x71585b)[_0x5e0949(0xb49)];return _0x5de4d5<=_0x4b6bf7[_0x5e0949(0xb49)]?_0x5e0949(0x863):_0x5e0949(0x958);}else return this[_0x5e0949(0xbbd)][_0x27bf56];}}return VisuMZ['BattleCore']['Game_Map_battleback1Name']['call'](this);},VisuMZ['BattleCore'][_0x4a3d8d(0x754)]=Game_Map[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x609)],Game_Map['prototype'][_0x4a3d8d(0x609)]=function(){const _0x40a90e=_0x4a3d8d;if(!BattleManager[_0x40a90e(0x21f)]()){if(_0x40a90e(0x9c4)===_0x40a90e(0x9c4)){const _0xfadced=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this[_0x40a90e(0xbbd)]&&this[_0x40a90e(0xb71)][_0xfadced])return this[_0x40a90e(0xb71)][_0xfadced];}else{const _0x4f09c1=_0x1fe4d8[_0x40a90e(0x3cd)]('['+_0x2178af['$1'][_0x40a90e(0x591)](/\d+/g)+']');for(const _0x306731 of _0x4f09c1){if(!_0x19d1cd['value'](_0x306731))return!![];}return![];}}return VisuMZ[_0x40a90e(0x485)][_0x40a90e(0x754)]['call'](this);},VisuMZ[_0x4a3d8d(0x485)]['Game_Map_encounterList']=Game_Map[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x64d)],Game_Map[_0x4a3d8d(0x3c4)]['encounterList']=function(){const _0x40b8cd=_0x4a3d8d;let _0x380b5d=JsonEx['makeDeepCopy'](VisuMZ[_0x40b8cd(0x485)][_0x40b8cd(0x84e)][_0x40b8cd(0xaf0)](this));return VisuMZ[_0x40b8cd(0x485)]['ShuffleArray'](_0x380b5d);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x18c)]=function(_0x29e0a6){const _0x4dc937=_0x4a3d8d;var _0x5971df,_0x5775c4,_0x41aff7;for(_0x41aff7=_0x29e0a6['length']-0x1;_0x41aff7>0x0;_0x41aff7--){if(_0x4dc937(0x21d)!==_0x4dc937(0x21d))return this['getAttackMotion']();else _0x5971df=Math['floor'](Math[_0x4dc937(0xa0d)]()*(_0x41aff7+0x1)),_0x5775c4=_0x29e0a6[_0x41aff7],_0x29e0a6[_0x41aff7]=_0x29e0a6[_0x5971df],_0x29e0a6[_0x5971df]=_0x5775c4;}return _0x29e0a6;},VisuMZ[_0x4a3d8d(0x485)]['Game_Interpreter_PluginCommand']=Game_Interpreter[_0x4a3d8d(0x3c4)]['command357'],Game_Interpreter['prototype'][_0x4a3d8d(0x74e)]=function(_0x559263){const _0x425032=_0x4a3d8d;return $gameTemp[_0x425032(0x70f)](this),VisuMZ[_0x425032(0x485)][_0x425032(0x753)]['call'](this,_0x559263);},VisuMZ[_0x4a3d8d(0x485)]['Game_Interpreter_updateWaitMode']=Game_Interpreter['prototype'][_0x4a3d8d(0x4a0)],Game_Interpreter[_0x4a3d8d(0x3c4)]['updateWaitMode']=function(){const _0x42d2f0=_0x4a3d8d;if(SceneManager[_0x42d2f0(0x930)]()){if(_0x42d2f0(0x2d9)!==_0x42d2f0(0x724))switch(this[_0x42d2f0(0x402)]){case _0x42d2f0(0x691):if(Imported[_0x42d2f0(0x613)]){if($gameScreen['battleCameraData']()[_0x42d2f0(0x8ef)]>0x0)return!![];this[_0x42d2f0(0x402)]='';}break;case _0x42d2f0(0xa11):if(BattleManager['_spriteset'][_0x42d2f0(0x64b)]())return!![];this[_0x42d2f0(0x402)]='';break;case _0x42d2f0(0x660):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x42d2f0(0x940)]()[_0x42d2f0(0x79b)]>0x0)return!![];if($gameScreen[_0x42d2f0(0x940)]()[_0x42d2f0(0x514)]>0x0)return!![];this[_0x42d2f0(0x402)]='';}break;case _0x42d2f0(0xa16):if(BattleManager[_0x42d2f0(0x94c)][_0x42d2f0(0x6db)]())return!![];this[_0x42d2f0(0x402)]='';break;case'battleFloat':if(BattleManager[_0x42d2f0(0x94c)][_0x42d2f0(0x165)]())return!![];this[_0x42d2f0(0x402)]='';break;case _0x42d2f0(0xba4):if(BattleManager[_0x42d2f0(0x94c)][_0x42d2f0(0xa9a)]())return!![];this[_0x42d2f0(0x402)]='';break;case'battlelog':if(BattleManager['_logWindow'][_0x42d2f0(0xbc2)]())return!![];this['_waitMode']='';break;case _0x42d2f0(0x9e0):if(BattleManager[_0x42d2f0(0x94c)][_0x42d2f0(0x98a)]())return!![];this['_waitMode']='';break;case _0x42d2f0(0xbb9):if(BattleManager[_0x42d2f0(0x94c)][_0x42d2f0(0x89d)]())return!![];this['_waitMode']='';break;case _0x42d2f0(0xa31):if(BattleManager[_0x42d2f0(0x94c)][_0x42d2f0(0x305)]())return!![];this['_waitMode']='';break;case'battleSpriteSkew':if(BattleManager['_spriteset']['isAnyoneSkewing']())return!![];this[_0x42d2f0(0x402)]='';break;case _0x42d2f0(0x914):if(Imported[_0x42d2f0(0x859)]){if(BattleManager['_spriteset'][_0x42d2f0(0x8e1)]())return!![];this[_0x42d2f0(0x402)]='';}break;case _0x42d2f0(0x8a0):if(Imported[_0x42d2f0(0x613)]){if($gameScreen['battleCameraData']()[_0x42d2f0(0xad9)]>0x0)return!![];this[_0x42d2f0(0x402)]='';}break;case _0x42d2f0(0x1e1):if(BattleManager[_0x42d2f0(0x94c)]['isAnyoneSpinning']())return!![];this[_0x42d2f0(0x402)]='';break;case _0x42d2f0(0x6c2):if(Imported[_0x42d2f0(0x613)]){if($gameScreen[_0x42d2f0(0x940)]()[_0x42d2f0(0x8f5)]>0x0)return!![];this[_0x42d2f0(0x402)]='';}break;case'battleInjectPrep':if(Imported[_0x42d2f0(0x543)]){if(_0x42d2f0(0x34d)==='JXloP'){if(BattleManager[_0x42d2f0(0x94c)]['isAnyoneInjectAniPrepping']){if('opBvi'===_0x42d2f0(0x950))_0xff80cc['_subject'][_0x42d2f0(0x98d)](_0x2db4e4);else{if(BattleManager['_spriteset'][_0x42d2f0(0x403)]())return!![];this[_0x42d2f0(0x402)]=_0x42d2f0(0x37f);}}else this['_waitMode']='';break;}else{const _0x52cd69=!!this[_0x42d2f0(0x7d9)];this['_freezeMotionData']=_0xab8319,_0x52cd69&&(this[_0x42d2f0(0x92e)](),this[_0x42d2f0(0x7d2)]());}}break;case _0x42d2f0(0x37f):if(Imported[_0x42d2f0(0x543)]){if(BattleManager[_0x42d2f0(0x94c)]['isAnyoneInjectAnimating']())return!![];this['_waitMode']='';}break;}else return _0xe5c045[_0x42d2f0(0x485)]['Settings']['Mechanics'][_0x42d2f0(0x9ca)];}return VisuMZ[_0x42d2f0(0x485)][_0x42d2f0(0x4c7)][_0x42d2f0(0xaf0)](this);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x7ea)]=Game_Interpreter['prototype'][_0x4a3d8d(0x145)],Game_Interpreter[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x145)]=function(_0x30864b){const _0x56ea56=_0x4a3d8d;return!$gameParty[_0x56ea56(0x8b6)]()?this[_0x56ea56(0x16b)](_0x30864b):VisuMZ[_0x56ea56(0x485)][_0x56ea56(0x7ea)][_0x56ea56(0xaf0)](this,_0x30864b);},Game_Interpreter[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x77a)]=function(_0x128a1b){const _0x32c9db=_0x4a3d8d;return VisuMZ[_0x32c9db(0x485)][_0x32c9db(0x7ea)]['call'](this,_0x128a1b),BattleManager[_0x32c9db(0x6b7)](_0x2ffe5f=>{const _0x49ee14=_0x32c9db;this['_branch'][this[_0x49ee14(0x3e0)]]=_0x2ffe5f;}),!![];},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x2e7)]=function(_0x14a011){const _0x5601b1=_0x4a3d8d,_0x580b95=$dataCommonEvents[_0x14a011];if(!_0x580b95)return![];if(_0x580b95[_0x5601b1(0x343)][_0x5601b1(0x482)]<=0x1)return![];return!![];},Game_Interpreter[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x16b)]=function(_0x1e9b89){const _0x3ff6ba=_0x4a3d8d,_0x5116c3=VisuMZ[_0x3ff6ba(0x485)][_0x3ff6ba(0xb75)]['Mechanics'],_0x515a02=_0x5116c3[_0x3ff6ba(0xbda)],_0x2b2561=$dataCommonEvents[_0x515a02];if(_0x2b2561&&VisuMZ['BattleCore'][_0x3ff6ba(0x2e7)](_0x515a02)){const _0x5af6fc=this[_0x3ff6ba(0x24b)]()?this[_0x3ff6ba(0xa14)]:0x0,_0x556727=_0x2b2561['list'];this[_0x3ff6ba(0x8d0)](_0x556727,_0x5af6fc),this['_list']=JsonEx['makeDeepCopy'](this[_0x3ff6ba(0x747)]);const _0x11da7a={'code':0xbc3,'indent':this[_0x3ff6ba(0x3e0)],'parameters':JsonEx[_0x3ff6ba(0x773)](_0x1e9b89)};return this[_0x3ff6ba(0x747)][_0x3ff6ba(0x7a8)](this[_0x3ff6ba(0x9e8)]+0x1,0x0,_0x11da7a),!![];}else return VisuMZ['BattleCore'][_0x3ff6ba(0x7ea)][_0x3ff6ba(0xaf0)](this,_0x1e9b89);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xad5)]=BattleManager['onEncounter'],BattleManager[_0x4a3d8d(0xa10)]=function(){const _0x18acad=_0x4a3d8d;VisuMZ[_0x18acad(0x485)][_0x18acad(0xad5)][_0x18acad(0xaf0)](this),this[_0x18acad(0x49a)]();},BattleManager[_0x4a3d8d(0x49a)]=function(){const _0x1e061a=_0x4a3d8d,_0xcb5a5a=VisuMZ['BattleCore'][_0x1e061a(0xb75)][_0x1e061a(0x5de)],_0x31dc2b=_0xcb5a5a[_0x1e061a(0xbda)];_0x31dc2b&&VisuMZ[_0x1e061a(0x485)][_0x1e061a(0x2e7)](_0x31dc2b)&&('wRIBt'!==_0x1e061a(0x3f8)?(this[_0x1e061a(0x224)]=!![],$gameTemp['reserveCommonEvent'](_0xcb5a5a['BattleStartEvent']),$gameMap[_0x1e061a(0x831)](),$gameMap['_interpreter'][_0x1e061a(0xaea)]=!![]):this[_0x1e061a(0x2dd)][_0x1e061a(0x8a5)]=_0x96c2a1['BattleCore'][_0x1e061a(0xb75)][_0x1e061a(0x4e0)][_0x1e061a(0x325)]),_0xcb5a5a[_0x1e061a(0x8e7)]>0x0&&(this[_0x1e061a(0x71d)]=!![]);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xb03)]=Scene_Map[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x2fb)],Scene_Map['prototype'][_0x4a3d8d(0x2fb)]=function(){const _0x6fc414=_0x4a3d8d;if(BattleManager[_0x6fc414(0x224)])return;VisuMZ['BattleCore'][_0x6fc414(0xb03)][_0x6fc414(0xaf0)](this);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x99a)]=Scene_Map['prototype']['launchBattle'],Scene_Map[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x3d7)]=function(){const _0x14e409=_0x4a3d8d;if(BattleManager[_0x14e409(0x224)]){if(_0x14e409(0xbba)!==_0x14e409(0x6bd))this['battleCorePreBattleCommonEvent']();else{const _0x343027=_0xce1294[_0x5124f9];if(!_0x343027)return![];if(_0x343027[_0x14e409(0x343)][_0x14e409(0x482)]<=0x1)return![];return!![];}}else VisuMZ[_0x14e409(0x485)][_0x14e409(0x99a)]['call'](this);},Scene_Map[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x745)]=function(){const _0x1ec82c=_0x4a3d8d;this[_0x1ec82c(0xbfa)]=!![];},VisuMZ['BattleCore'][_0x4a3d8d(0x383)]=SceneManager[_0x4a3d8d(0x69a)],SceneManager[_0x4a3d8d(0x69a)]=function(){const _0x3f7c3b=_0x4a3d8d;if(BattleManager[_0x3f7c3b(0x224)])return![];return VisuMZ['BattleCore'][_0x3f7c3b(0x383)]['call'](this);},VisuMZ[_0x4a3d8d(0x485)]['Game_Interpreter_terminate']=Game_Interpreter['prototype'][_0x4a3d8d(0x540)],Game_Interpreter[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x540)]=function(){const _0xa827b1=_0x4a3d8d;VisuMZ[_0xa827b1(0x485)][_0xa827b1(0x835)]['call'](this),this['_preBattleCommonEvent']&&('FdduP'===_0xa827b1(0x8cd)?(this[_0xa827b1(0xaea)]=undefined,SceneManager['_scene'][_0xa827b1(0x45e)]()):this['isTpb']()?this['selectNextCommandTpb']():_0x3970e1['BattleCore'][_0xa827b1(0x551)][_0xa827b1(0xaf0)](this));},Scene_Map[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x45e)]=function(){const _0x37ee4e=_0x4a3d8d;BattleManager[_0x37ee4e(0x224)]=undefined,BattleManager[_0x37ee4e(0x7bf)]=!![],this['stop']();},VisuMZ[_0x4a3d8d(0x485)]['Scene_Map_initializeAfter']=Scene_Map[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x82a)],Scene_Map[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x82a)]=function(){const _0x426503=_0x4a3d8d;VisuMZ[_0x426503(0x485)][_0x426503(0x9b5)][_0x426503(0xaf0)](this),BattleManager[_0x426503(0x7bf)]&&(_0x426503(0x22f)==='zNjWM'?_0x53d796[_0x426503(0x428)](_0x5c201f(_0x5d8484['$1'])):(this[_0x426503(0xbfa)]=!![],BattleManager[_0x426503(0x7bf)]=undefined));},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x3f4)]=Scene_Map[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x82a)],Scene_Map[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x82a)]=function(){const _0x35eecf=_0x4a3d8d;VisuMZ[_0x35eecf(0x485)][_0x35eecf(0x3f4)]['call'](this),$gameTemp[_0x35eecf(0x20f)]();},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x287)]=Scene_ItemBase[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x598)],Scene_ItemBase['prototype']['applyItem']=function(){const _0x26df5f=_0x4a3d8d;VisuMZ['BattleCore'][_0x26df5f(0x287)]['call'](this);if(this[_0x26df5f(0x49d)]()['note']['match'](/<BYPASS AUTO ACTION SEQUENCE>/i)){if(_0x26df5f(0xc31)!==_0x26df5f(0x4ed))return;else _0x39b87b[_0x26df5f(0x485)]['ParseEnemyNotetags']['call'](this,_0xb2559f);}if(this['item']()[_0x26df5f(0x9ea)][_0x26df5f(0x591)](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x26df5f(0x298)===_0x26df5f(0x298))$gameTemp['_commonEventQueue']=[];else{const _0x40174e=[];for(let _0x558090=0x0;_0x558090<this['numTargets']();_0x558090++){_0x40174e['push'](_0x575168[_0x26df5f(0x2bd)]());}return _0x40174e;}}if(DataManager[_0x26df5f(0x80b)](this['item']())){if('KUzMj'==='KUzMj')$gameTemp[_0x26df5f(0xa62)]=[];else for(const _0x27e261 of _0x3f681a){for(const _0x36e80d of _0x460321){const _0x3c64a5=_0x48b291[0x0][_0x26df5f(0x8dd)](_0x36e80d[0x0],_0x27e261[0x0]),_0x4c0874=_0x5c35c4[0x1][_0x26df5f(0x8dd)](_0x36e80d[0x1],_0x27e261[0x1])[_0x26df5f(0x82d)](),_0x1963e6=new _0x3bc3be(_0x348c0b[_0x26df5f(0x8dd)](_0x4c0874),'i');_0x354a46[_0x3c64a5]=_0x1963e6;}}}},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x29c)]=Scene_Options[_0x4a3d8d(0x3c4)]['maxCommands'],Scene_Options[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x5ed)]=function(){const _0x35dc74=_0x4a3d8d;let _0x3dd7ed=VisuMZ[_0x35dc74(0x485)][_0x35dc74(0x29c)]['call'](this);const _0x1b3e59=VisuMZ[_0x35dc74(0x485)][_0x35dc74(0xb75)];if(_0x1b3e59[_0x35dc74(0x839)][_0x35dc74(0x297)]&&_0x1b3e59['AutoBattle'][_0x35dc74(0x79d)])_0x3dd7ed+=0x2;if(_0x1b3e59[_0x35dc74(0x4c8)][_0x35dc74(0x297)]&&_0x1b3e59[_0x35dc74(0x4c8)][_0x35dc74(0x79d)])_0x3dd7ed+=0x1;return _0x3dd7ed;},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x351)]=Scene_Battle[_0x4a3d8d(0x3c4)]['initialize'],Scene_Battle['prototype'][_0x4a3d8d(0x82a)]=function(){const _0x184b12=_0x4a3d8d;VisuMZ[_0x184b12(0x485)][_0x184b12(0x351)][_0x184b12(0xaf0)](this),this[_0x184b12(0x9bb)]();},VisuMZ[_0x4a3d8d(0x485)]['Scene_Battle_start']=Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x7f6)],Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x7f6)]=function(){const _0x16eeb2=_0x4a3d8d;SceneManager[_0x16eeb2(0xc13)]()?(Scene_Message[_0x16eeb2(0x3c4)][_0x16eeb2(0x7f6)][_0x16eeb2(0xaf0)](this),this[_0x16eeb2(0x94c)]&&this[_0x16eeb2(0x94c)][_0x16eeb2(0x372)](),BattleManager[_0x16eeb2(0x357)]&&BattleManager['revertTpbCachedActor']()):(VisuMZ[_0x16eeb2(0x485)][_0x16eeb2(0x556)][_0x16eeb2(0xaf0)](this),$gameTroop[_0x16eeb2(0xb5f)]());},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x7f0)]=Scene_Battle['prototype'][_0x4a3d8d(0x24f)],Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x24f)]=function(){const _0x373701=_0x4a3d8d;SceneManager['isNextSceneBattleTransitionable']()?Scene_Message['prototype'][_0x373701(0x24f)][_0x373701(0xaf0)](this):VisuMZ[_0x373701(0x485)]['Scene_Battle_stop'][_0x373701(0xaf0)](this);},VisuMZ[_0x4a3d8d(0x485)]['Scene_Battle_terminate']=Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x540)],Scene_Battle[_0x4a3d8d(0x3c4)]['terminate']=function(){const _0x5c6c26=_0x4a3d8d;SceneManager[_0x5c6c26(0x8fa)]()?Scene_Message[_0x5c6c26(0x3c4)]['terminate'][_0x5c6c26(0xaf0)](this):VisuMZ[_0x5c6c26(0x485)][_0x5c6c26(0x73b)][_0x5c6c26(0xaf0)](this),this[_0x5c6c26(0x9bb)]();},Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xc46)]=function(){const _0x45ecc3=_0x4a3d8d;if(ConfigManager[_0x45ecc3(0xc4d)]&&ConfigManager[_0x45ecc3(0x8eb)]!==undefined)return ConfigManager[_0x45ecc3(0x8eb)];else{if(this[_0x45ecc3(0x801)]()===_0x45ecc3(0xa18))return![];else{return Scene_Message[_0x45ecc3(0x3c4)][_0x45ecc3(0xc46)][_0x45ecc3(0xaf0)](this);;}}},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xa1c)]=Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x2c7)],Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x2c7)]=function(){const _0x5a1c54=_0x4a3d8d;this[_0x5a1c54(0x622)](),VisuMZ[_0x5a1c54(0x485)][_0x5a1c54(0xa1c)][_0x5a1c54(0xaf0)](this),this['createAutoBattleWindow']();},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xa17)]=Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x941)],Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x941)]=function(){const _0x46a73=_0x4a3d8d;VisuMZ['BattleCore'][_0x46a73(0xa17)][_0x46a73(0xaf0)](this);if(this[_0x46a73(0x801)]()===_0x46a73(0xa18)){if(_0x46a73(0x3f3)!==_0x46a73(0x719))this['repositionCancelButtonBorderStyle']();else{this[_0x46a73(0x906)](_0x46a73(0x7c7),_0x1435e7,_0x33ba4c);if(!_0x3c6e1c[_0x46a73(0x485)][_0x46a73(0xb75)][_0x46a73(0x1e5)][_0x46a73(0x46c)])return;const _0x5686b0=_0x5ba614[_0x46a73(0xbaa)](),_0xed415=_0x36f619[_0x46a73(0x267)][_0x46a73(0x8dd)](_0x5686b0,_0x206a54[_0x46a73(0xbaa)]());this[_0x46a73(0x906)](_0x46a73(0x8f9),_0xed415);}}},Scene_Battle['prototype']['setVisibleUI']=function(_0x578c49){const _0x4d242f=_0x4a3d8d;_0x578c49?(this[_0x4d242f(0xa34)]['x']=(Graphics[_0x4d242f(0xb49)]-Graphics['boxWidth'])/0x2,this[_0x4d242f(0xa34)]['y']=(Graphics['height']-Graphics[_0x4d242f(0x8de)])/0x2):_0x4d242f(0x334)===_0x4d242f(0x334)?(this[_0x4d242f(0xa34)]['x']=Graphics[_0x4d242f(0xb49)]*0xa,this['_windowLayer']['y']=Graphics[_0x4d242f(0x2cc)]*0xa):this['opacity']=0x0;},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x7cd)]=Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xbbf)],Scene_Battle[_0x4a3d8d(0x3c4)]['selectNextCommand']=function(){const _0x5411f7=_0x4a3d8d,_0x593b6d=BattleManager[_0x5411f7(0x2fa)]();VisuMZ[_0x5411f7(0x485)]['Scene_Battle_selectNextCommand'][_0x5411f7(0xaf0)](this);if(_0x593b6d){if(_0x593b6d===BattleManager[_0x5411f7(0x2fa)]())return;if(_0x593b6d===BattleManager[_0x5411f7(0x18b)])return;if(_0x593b6d['battler']())_0x593b6d[_0x5411f7(0x28e)]()[_0x5411f7(0x938)]();}},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xaf2)]=Scene_Battle[_0x4a3d8d(0x3c4)]['selectPreviousCommand'],Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x9b3)]=function(){const _0x4cb19e=_0x4a3d8d,_0xcfd524=BattleManager[_0x4cb19e(0x2fa)]();if(_0xcfd524&&_0xcfd524[_0x4cb19e(0x28e)])_0xcfd524[_0x4cb19e(0x28e)]()[_0x4cb19e(0x938)]();VisuMZ[_0x4cb19e(0x485)][_0x4cb19e(0xaf2)][_0x4cb19e(0xaf0)](this);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x7fd)]=Scene_Battle['prototype'][_0x4a3d8d(0xa05)],Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa05)]=function(){const _0x26d311=_0x4a3d8d;if(VisuMZ['BattleCore']['Settings']['BattleLog'][_0x26d311(0x14b)]){if(_0x26d311(0x381)!=='COAlQ')return VisuMZ[_0x26d311(0x485)][_0x26d311(0xb75)][_0x26d311(0x1e5)][_0x26d311(0x14b)][_0x26d311(0xaf0)](this);else{const _0x48d5b9=_0x154327[_0x26d311(0x3c4)]['battleLayoutStyle']();[_0x26d311(0x646),'list',_0x26d311(0x9e1),_0x26d311(0xa18)][_0x26d311(0xbff)](_0x48d5b9)&&(this[_0x26d311(0x2f0)]=0x0);}}return VisuMZ[_0x26d311(0x485)][_0x26d311(0x7fd)][_0x26d311(0xaf0)](this);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x395)]=Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x710)],Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x710)]=function(){const _0x4aaa98=_0x4a3d8d;VisuMZ[_0x4aaa98(0x485)][_0x4aaa98(0x395)][_0x4aaa98(0xaf0)](this),this['createPartyCommandWindowBattleCore']();},Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x6e6)]=function(){const _0x487ad1=_0x4a3d8d,_0x5b7c71=this[_0x487ad1(0xb29)];_0x5b7c71['setHandler'](_0x487ad1(0x387),this[_0x487ad1(0x999)][_0x487ad1(0x2a0)](this)),_0x5b7c71['setHandler'](_0x487ad1(0x4c9),this[_0x487ad1(0x263)][_0x487ad1(0x2a0)](this));const _0x875a66=this[_0x487ad1(0x801)]();switch(_0x875a66){case'xp':case _0x487ad1(0x9e1):return this[_0x487ad1(0xb29)]['setBackgroundType'](0x1);break;}},Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x999)]=function(){const _0x48ef48=_0x4a3d8d;BattleManager['_autoBattle']=!![],$gameParty['makeActions'](),this[_0x48ef48(0xbbf)]();if(BattleManager['isTpb']()){if(_0x48ef48(0xb52)==='lFliS')BattleManager[_0x48ef48(0x93e)]=![];else{const _0x46c49f=_0x3a39c5[_0x48ef48(0x2fa)]();if(_0x46c49f&&_0x46c49f[_0x48ef48(0x28e)])_0x46c49f[_0x48ef48(0x28e)]()[_0x48ef48(0x938)]();_0xc99001[_0x48ef48(0x485)][_0x48ef48(0xaf2)][_0x48ef48(0xaf0)](this);}}},Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x263)]=function(){const _0x589318=_0x4a3d8d;this['isQueueOptionsMenu']()?(this[_0x589318(0x6d6)]=!![],this['_logWindow'][_0x589318(0x906)](_0x589318(0x8f9),VisuMZ[_0x589318(0x485)][_0x589318(0xb75)][_0x589318(0x768)][_0x589318(0x277)])):this[_0x589318(0xbd6)]();},Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x984)]=function(){const _0x17bf66=_0x4a3d8d;return BattleManager[_0x17bf66(0x504)]();},Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xbd6)]=function(){const _0x76864d=_0x4a3d8d;this[_0x76864d(0x6d6)]=![],this['_spriteset'][_0x76864d(0x372)](),this['_windowLayer'][_0x76864d(0xab9)]=![];if(BattleManager[_0x76864d(0x21f)]()){if(_0x76864d(0x256)!==_0x76864d(0x8cf)){if($dataSystem[_0x76864d(0x60d)]||$dataSystem[_0x76864d(0x609)]){if(_0x76864d(0x526)!==_0x76864d(0xac3))SceneManager[_0x76864d(0xb95)]();else{if(_0x32455a[_0x76864d(0x1d1)]())return _0x76864d(0x6c8);return _0x76864d(0x39a);}}}else _0x6c1eca[_0x76864d(0x485)][_0x76864d(0x1bc)][_0x76864d(0xaf0)](this,_0x2132c4,_0x4ca1fc);}else{if($gameMap[_0x76864d(0x60d)]()||$gameMap['battleback2Name']()){if(_0x76864d(0xb6c)!==_0x76864d(0x36e))SceneManager['snapForBackground']();else return this[_0x76864d(0xac9)]()&&this[_0x76864d(0x634)]()[_0x76864d(0x591)](/\$/i);}}SceneManager[_0x76864d(0x906)](Scene_Options),BattleManager['isTpb']()&&(BattleManager['_tpbSceneChangeCacheActor']=BattleManager['actor']());},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xb85)]=Scene_Battle[_0x4a3d8d(0x3c4)]['updateBattleProcess'],Scene_Battle[_0x4a3d8d(0x3c4)]['updateBattleProcess']=function(){const _0x596f55=_0x4a3d8d;VisuMZ['BattleCore']['Scene_Battle_updateBattleProcess']['call'](this);if(this[_0x596f55(0x6d6)]&&!BattleManager['_subject'])this['callOptions']();},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xa8f)]=Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x372)],Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x372)]=function(){const _0x4e2f72=_0x4a3d8d;VisuMZ[_0x4e2f72(0x485)]['Scene_Battle_update'][_0x4e2f72(0xaf0)](this),this[_0x4e2f72(0x21e)]();},Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x97d)]=function(){const _0x477e6d=_0x4a3d8d,_0x25e2a4=this[_0x477e6d(0x779)]();this[_0x477e6d(0x1a1)]=new Window_AutoBattleCancel(_0x25e2a4),this['_autoBattleWindow']['hide'](),this['addChild'](this['_autoBattleWindow']);},Scene_Battle[_0x4a3d8d(0x3c4)]['autoBattleWindowRect']=function(){const _0x50af82=_0x4a3d8d;return VisuMZ[_0x50af82(0x485)]['Settings']['AutoBattle'][_0x50af82(0x176)][_0x50af82(0xaf0)](this);},Scene_Battle['prototype']['clearOnceParallelInterpreters']=function(){const _0x1d7ba7=_0x4a3d8d;this[_0x1d7ba7(0x674)]=[];},Scene_Battle['prototype'][_0x4a3d8d(0x21e)]=function(){const _0xd12f9a=_0x4a3d8d;if(!this[_0xd12f9a(0x674)])return;for(const _0x5d5bea of this['_onceParallelInterpreters']){if(_0xd12f9a(0x94a)!=='vAyuu')_0x5d5bea&&_0x5d5bea['update']();else return _0x1247ee['name'];}},Scene_Battle[_0x4a3d8d(0x3c4)]['playOnceParallelInterpreter']=function(_0x3f31b9){const _0x1a3e0c=_0x4a3d8d,_0x535bc7=$dataCommonEvents[_0x3f31b9];if(!_0x535bc7)return;const _0xe2e701=new Game_BattleOnceParallelInterpreter();this[_0x1a3e0c(0xaad)](_0xe2e701),_0xe2e701['setCommonEvent'](_0x3f31b9);},Scene_Battle[_0x4a3d8d(0x3c4)]['addOnceParallelInterpreter']=function(_0x234ed5){const _0x59322f=_0x4a3d8d;this[_0x59322f(0x674)]=this[_0x59322f(0x674)]||[],this[_0x59322f(0x674)][_0x59322f(0x906)](_0x234ed5);},Scene_Battle['prototype'][_0x4a3d8d(0x741)]=function(_0x514e39){const _0x432d78=_0x4a3d8d;this['_onceParallelInterpreters']=this[_0x432d78(0x674)]||[],this[_0x432d78(0x674)][_0x432d78(0x34b)](_0x514e39);},Game_Troop[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xb5f)]=function(){const _0x45e2c0=_0x4a3d8d;for(const _0x3a167f of this[_0x45e2c0(0xa8e)]()[_0x45e2c0(0x91d)]){if(_0x45e2c0(0x1c9)!==_0x45e2c0(0x3a5)){if(!this[_0x45e2c0(0x338)](_0x3a167f))continue;SceneManager['_scene'][_0x45e2c0(0x7f8)](_0x3a167f);}else{if(!this[_0x45e2c0(0x349)])return![];if(this[_0x45e2c0(0x1d3)]>0x0)return!![];return _0x21fd7f[_0x45e2c0(0x485)][_0x45e2c0(0x51f)][_0x45e2c0(0xaf0)](this);}}},Game_Troop[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x338)]=function(_0x474a7b){const _0x52e52b=_0x4a3d8d;if(!_0x474a7b)return;for(const _0x19dc18 of _0x474a7b[_0x52e52b(0x343)]){if([0x6c,0x198][_0x52e52b(0xbff)](_0x19dc18['code'])){if(_0x52e52b(0xa0b)!==_0x52e52b(0x25f)){const _0x25a40e=_0x19dc18[_0x52e52b(0x2a7)][0x0];if(_0x25a40e[_0x52e52b(0x591)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}else{if(this['isCertainHit']())return _0x2c128d;const _0xc05131=this[_0x52e52b(0x601)](),_0x378c65=_0x41146a;let _0x35b4af=[],_0x52e5d8=[];_0x35b4af[_0x52e52b(0x906)](this[_0x52e52b(0xba5)]['arPenFlat'],this['_armorPenetration'][_0x52e52b(0x346)]),_0x52e5d8[_0x52e52b(0x906)](this[_0x52e52b(0xba5)]['arPenRate'],this[_0x52e52b(0xba5)][_0x52e52b(0x388)]);const _0xf145bc=this[_0x52e52b(0x732)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x5c48af=this[_0x52e52b(0x732)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x23040c=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x2e6b68=this[_0x52e52b(0x732)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x35b4af=_0x35b4af[_0x52e52b(0xb1a)](_0x378c65[_0x52e52b(0x7e0)]()[_0x52e52b(0xa4a)](_0x2d5ce5=>_0x2d5ce5&&_0x2d5ce5['note'][_0x52e52b(0x591)](_0xf145bc)?_0x33b46b(_0x4238e4['$1']):0x0)),_0x52e5d8=_0x52e5d8[_0x52e52b(0xb1a)](_0x378c65['traitObjects']()[_0x52e52b(0xa4a)](_0x258505=>_0x258505&&_0x258505[_0x52e52b(0x9ea)][_0x52e52b(0x591)](_0x5c48af)?_0x17ed93(_0x4c88de['$1'])/0x64:0x0)),_0x35b4af=_0x35b4af[_0x52e52b(0xb1a)](_0xc05131['traitObjects']()['map'](_0x46f11f=>_0x46f11f&&_0x46f11f[_0x52e52b(0x9ea)]['match'](_0x23040c)?_0x46dfd9(_0x12983e['$1']):0x0)),_0x52e5d8=_0x52e5d8[_0x52e52b(0xb1a)](_0xc05131[_0x52e52b(0x7e0)]()['map'](_0x3ded9b=>_0x3ded9b&&_0x3ded9b[_0x52e52b(0x9ea)][_0x52e52b(0x591)](_0x2e6b68)?_0x1f79f7(_0x521afc['$1'])/0x64:0x0)),this['item']()[_0x52e52b(0x9ea)]['match'](_0x23040c)&&_0x35b4af[_0x52e52b(0x906)](_0x4b4710(_0x2b8606['$1'])),this[_0x52e52b(0x49d)]()[_0x52e52b(0x9ea)][_0x52e52b(0x591)](_0x2e6b68)&&_0x52e5d8[_0x52e52b(0x906)](_0x4ac3ba(_0x440579['$1'])),_0xa4c8e5=_0x35b4af['reduce']((_0x52670b,_0x1557ee)=>_0x52670b-_0x1557ee,_0x437ebd),_0x1d6a6f>0x0&&(_0x593010=_0x52e5d8['reduce']((_0x1be40c,_0x472367)=>_0x1be40c*(0x1-_0x472367),_0x2783d8)),_0x2d354d;}}}return![];},Scene_Battle['prototype']['playOnceParallelTroopPage']=function(_0x5506d5){const _0x51c464=_0x4a3d8d;if(!_0x5506d5)return;const _0x3ef006=new Game_BattleOnceParallelInterpreter();this[_0x51c464(0xaad)](_0x3ef006),_0x3ef006['setTroopPage'](_0x5506d5);};function Game_BattleOnceParallelInterpreter(){this['initialize'](...arguments);}Game_BattleOnceParallelInterpreter['prototype']=Object[_0x4a3d8d(0x416)](Game_Interpreter[_0x4a3d8d(0x3c4)]),Game_BattleOnceParallelInterpreter[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x6ee)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter['prototype'][_0x4a3d8d(0x53c)]=function(_0x1e6a4d){const _0x27b9f3=_0x4a3d8d,_0x4ff130=$dataCommonEvents[_0x1e6a4d];if(_0x4ff130)this[_0x27b9f3(0x4da)](_0x4ff130[_0x27b9f3(0x343)],0x0);else{if(_0x27b9f3(0xa7d)==='oNhHM')this[_0x27b9f3(0x540)]();else{if(_0x3e31c1[_0x27b9f3(0x930)]()){const _0x133082=this[_0x27b9f3(0x28e)]();_0x133082&&(_0x133082[_0x27b9f3(0x9fb)](_0x5e7598),[_0x27b9f3(0x99c),'thrust',_0x27b9f3(0x158)]['includes'](_0x41a3b4)&&this[_0x27b9f3(0x386)]());}this[_0x27b9f3(0x170)]();}}},Game_BattleOnceParallelInterpreter[_0x4a3d8d(0x3c4)]['terminate']=function(){const _0x2d1818=_0x4a3d8d;if(!SceneManager['isSceneBattle']())return;SceneManager[_0x2d1818(0x3ff)][_0x2d1818(0x741)](this),Game_Interpreter['prototype']['terminate'][_0x2d1818(0xaf0)](this);},Game_BattleOnceParallelInterpreter[_0x4a3d8d(0x3c4)]['setTroopPage']=function(_0x4e77fc){const _0x55c396=_0x4a3d8d;_0x4e77fc?this[_0x55c396(0x4da)](_0x4e77fc[_0x55c396(0x343)],0x0):this[_0x55c396(0x540)]();},Scene_Battle['prototype'][_0x4a3d8d(0x385)]=function(){const _0x5c63fd=_0x4a3d8d;return VisuMZ[_0x5c63fd(0x485)][_0x5c63fd(0xb75)][_0x5c63fd(0x768)][_0x5c63fd(0x574)];},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xbd1)]=Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x3a3)],Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x3a3)]=function(){const _0x5c2080=_0x4a3d8d;this[_0x5c2080(0x385)]()?this[_0x5c2080(0x9c0)]():VisuMZ[_0x5c2080(0x485)]['Scene_Battle_startPartyCommandSelection'][_0x5c2080(0xaf0)](this);},Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x9c0)]=function(){const _0x3c25bd=_0x4a3d8d;if(BattleManager['isDTB']()){if(_0x3c25bd(0x3be)!==_0x3c25bd(0x757))this[_0x3c25bd(0xbbf)]();else return _0x509a78['filter'](_0x1bae83=>_0x1bae83!==_0x5a894d&&!_0x5f36f0[_0x3c25bd(0xbff)](_0x1bae83)&&_0x1bae83[_0x3c25bd(0x197)]());}else BattleManager['isTpb']()&&VisuMZ[_0x3c25bd(0x485)][_0x3c25bd(0xbd1)][_0x3c25bd(0xaf0)](this);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x43d)]=Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xb8c)],Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xb8c)]=function(){const _0x336000=_0x4a3d8d;BattleManager[_0x336000(0x1d1)]()?(this[_0x336000(0x4ae)](),this[_0x336000(0x2ed)]()):VisuMZ['BattleCore'][_0x336000(0x43d)][_0x336000(0xaf0)](this);},Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x4ae)]=function(){const _0x500166=_0x4a3d8d;if(!VisuMZ[_0x500166(0x485)][_0x500166(0x161)])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x500166(0x79f)]())return;const _0x1ecab6=$gameParty[_0x500166(0x411)]()[_0x500166(0x3d0)](_0x59bf4c=>_0x59bf4c[_0x500166(0x5b1)]()&&_0x59bf4c[_0x500166(0x28d)]());BattleManager[_0x500166(0x6d3)]=_0x1ecab6[0x0]||null;if(BattleManager[_0x500166(0x6d3)]){if('mkdvC'!==_0x500166(0xb47))BattleManager[_0x500166(0x6d3)][_0x500166(0xa8c)](_0x500166(0x405));else return _0x5b86f8[_0x500166(0x3c4)][_0x500166(0x8f1)]['call'](this)&&this[_0x500166(0xa79)]();}},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x67e)]=Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x783)],Scene_Battle[_0x4a3d8d(0x3c4)]['createActorCommandWindow']=function(){const _0x4eb8ae=_0x4a3d8d;VisuMZ[_0x4eb8ae(0x485)][_0x4eb8ae(0x67e)][_0x4eb8ae(0xaf0)](this),this[_0x4eb8ae(0x2d2)]();},Scene_Battle[_0x4a3d8d(0x3c4)]['createActorCommandWindowBattleCore']=function(){const _0x5c56a6=_0x4a3d8d,_0x1fdff2=this['_actorCommandWindow'];_0x1fdff2['setHandler'](_0x5c56a6(0x565),this['actorCommandEscape'][_0x5c56a6(0x2a0)](this)),_0x1fdff2[_0x5c56a6(0xb07)]('autoBattle',this[_0x5c56a6(0x7c8)][_0x5c56a6(0x2a0)](this)),_0x1fdff2[_0x5c56a6(0xb07)](_0x5c56a6(0x803),this['actorCommandSingleSkill'][_0x5c56a6(0x2a0)](this)),BattleManager['isTpb']()&&(this['isPartyCommandWindowDisabled']()?delete _0x1fdff2[_0x5c56a6(0xa30)][_0x5c56a6(0xb9f)]:_0x5c56a6(0x57b)===_0x5c56a6(0x57b)?_0x1fdff2[_0x5c56a6(0xb07)](_0x5c56a6(0xb9f),this[_0x5c56a6(0x535)][_0x5c56a6(0x2a0)](this)):this[_0x5c56a6(0x86f)][_0x5c56a6(0x960)](_0x418891));},Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x4e8)]=function(){const _0x3ef29d=_0x4a3d8d;this[_0x3ef29d(0x8fe)]();},Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x7c8)]=function(){const _0x196177=_0x4a3d8d;BattleManager[_0x196177(0x2fa)]()[_0x196177(0x5cc)](),BattleManager[_0x196177(0xb33)](),BattleManager['selectNextActor'](),this[_0x196177(0xb09)]();},Scene_Battle['prototype'][_0x4a3d8d(0x9ef)]=function(){const _0x107ecc=_0x4a3d8d,_0x2d21e4=BattleManager[_0x107ecc(0x281)](),_0x49a8b3=this['_actorCommandWindow'][_0x107ecc(0xa3d)]();_0x2d21e4[_0x107ecc(0x577)](_0x49a8b3),BattleManager[_0x107ecc(0x2fa)]()[_0x107ecc(0xbf5)]($dataSkills[_0x49a8b3]),this[_0x107ecc(0x2e9)]();},Scene_Battle['prototype'][_0x4a3d8d(0x535)]=function(){const _0x20f4ee=_0x4a3d8d;this[_0x20f4ee(0x4ce)]()?'ihHul'!==_0x20f4ee(0x80f)?this[_0x20f4ee(0x6fa)](_0x39fb57,_0x2d5aa8['x'],_0x2d93c6['y'],_0x22c9a3):this[_0x20f4ee(0xb3a)]():this['processActorCommandCancelTPB']();},VisuMZ[_0x4a3d8d(0x485)]['TpbActiveChangeEnabled']=![],Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x4ce)]=function(){const _0x5df852=_0x4a3d8d;if(Imported[_0x5df852(0x17d)]&&BattleManager['isCTB']())return![];else{if(!VisuMZ[_0x5df852(0x485)][_0x5df852(0x161)])return![];const _0x2dcae3=$gameParty[_0x5df852(0x411)]()[_0x5df852(0x3d0)](_0x414106=>_0x414106[_0x5df852(0x5b1)]()&&_0x414106[_0x5df852(0x28d)]());return _0x2dcae3[_0x5df852(0x482)]>0x0&&BattleManager[_0x5df852(0x2fa)]()!==_0x2dcae3[_0x2dcae3[_0x5df852(0x482)]-0x1];}},Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xb3a)]=function(){const _0x51cee0=_0x4a3d8d,_0x3ef6da=BattleManager[_0x51cee0(0x2fa)](),_0x209285=_0x3ef6da[_0x51cee0(0x28e)]();if(_0x209285)_0x209285['stepBack']();const _0x3513ce=$gameParty[_0x51cee0(0x411)]()[_0x51cee0(0x3d0)](_0x41e0e6=>_0x41e0e6[_0x51cee0(0x5b1)]()&&_0x41e0e6[_0x51cee0(0x28d)]()),_0x550c16=_0x3513ce[_0x51cee0(0x2b7)](_0x3ef6da),_0x3ea205=_0x3513ce[_0x550c16+0x1];BattleManager['_currentActor']=_0x3ea205||null;if(_0x3ea205)_0x3ea205[_0x51cee0(0xa8c)]('inputting');_0x3ef6da[_0x51cee0(0xa8c)](_0x51cee0(0xb77)),this[_0x51cee0(0xb09)]();},Scene_Battle['prototype']['processActorCommandCancelTPB']=function(){const _0xdfea1d=_0x4a3d8d;this[_0xdfea1d(0xb29)]['setup'](),this['_actorCommandWindow']['close']();if(!VisuMZ[_0xdfea1d(0x485)][_0xdfea1d(0x161)])return;if(Imported[_0xdfea1d(0x17d)]&&BattleManager[_0xdfea1d(0x79f)]())return;if(BattleManager[_0xdfea1d(0x6d3)]){if('MJSSh'!=='kwIFx'){BattleManager[_0xdfea1d(0x6d3)][_0xdfea1d(0xa8c)](_0xdfea1d(0xb77));const _0x27b1fe=BattleManager['_currentActor']['battler']();if(_0x27b1fe)_0x27b1fe[_0xdfea1d(0x938)]();}else{if(!_0xf0be89[_0xdfea1d(0x930)]())return;_0x19c01e[_0xdfea1d(0x6a8)](_0x260f79,_0x30481d),_0x11d1ff[_0xdfea1d(0x3ff)][_0xdfea1d(0x434)](_0xdce5d6[_0xdfea1d(0x603)]);}}BattleManager[_0xdfea1d(0x6d3)]=null;},VisuMZ[_0x4a3d8d(0x485)]['Scene_Battle_createHelpWindow']=Scene_Battle['prototype'][_0x4a3d8d(0xc0f)],Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xc0f)]=function(){const _0x4fc29f=_0x4a3d8d;VisuMZ[_0x4fc29f(0x485)]['Scene_Battle_createHelpWindow']['call'](this),this['createHelpWindowBattleCore']();},Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x699)]=function(){const _0x32abc7=_0x4a3d8d;this[_0x32abc7(0x4f7)][_0x32abc7(0x2c5)](this['_helpWindow']),this[_0x32abc7(0xb29)]['setHelpWindow'](this[_0x32abc7(0x910)]);},Scene_Battle['prototype']['battleLayoutStyle']=function(){const _0x1bed4b=_0x4a3d8d;if($gameTemp[_0x1bed4b(0x168)]!==undefined){if(_0x1bed4b(0x694)!==_0x1bed4b(0xbcc))return $gameTemp[_0x1bed4b(0x168)];else _0x4ceaa7=_0x2628c4(_0x29fda4['$1']),_0x5e2834=_0x18d39c(_0x28a367['$2']);}if(this['_battleLayoutStyle'])return this['_battleLayoutStyle'];return this[_0x1bed4b(0x70a)]=VisuMZ['BattleCore'][_0x1bed4b(0xb75)][_0x1bed4b(0x620)]['Style']['toLowerCase']()[_0x1bed4b(0x82d)](),this['_battleLayoutStyle']===_0x1bed4b(0x3ea)&&!Imported[_0x1bed4b(0xc38)]&&(_0x1bed4b(0x23c)===_0x1bed4b(0x723)?(this[_0x1bed4b(0x992)](),this[_0x1bed4b(0x8bb)]()):this[_0x1bed4b(0x70a)]=_0x1bed4b(0x646)),this[_0x1bed4b(0x70a)];},VisuMZ[_0x4a3d8d(0x485)]['Scene_Battle_windowAreaHeight']=Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x6cf)],Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x6cf)]=function(){const _0xfc0501=_0x4a3d8d,_0xeebdb3=this['battleLayoutStyle']();switch(_0xeebdb3){case _0xfc0501(0x343):return this[_0xfc0501(0x90c)](Math[_0xfc0501(0x559)](0x1,$gameParty[_0xfc0501(0x70d)]()),!![]);break;default:return VisuMZ[_0xfc0501(0x485)]['Scene_Battle_windowAreaHeight']['call'](this);break;}},VisuMZ[_0x4a3d8d(0x485)]['Scene_Battle_helpWindowRect']=Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa2a)],Scene_Battle[_0x4a3d8d(0x3c4)]['helpWindowRect']=function(){const _0x269b9a=_0x4a3d8d,_0x1859be=this[_0x269b9a(0x801)]();switch(_0x1859be){case _0x269b9a(0xa18):return this[_0x269b9a(0x245)]();break;case _0x269b9a(0x646):case _0x269b9a(0x343):case'xp':case'portrait':default:return VisuMZ[_0x269b9a(0x485)][_0x269b9a(0xb5d)]['call'](this);break;}},Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x43c)]=function(){const _0x249d6a=_0x4a3d8d,_0x2679ae=this[_0x249d6a(0x801)]();switch(_0x2679ae){case'xp':case'portrait':return this['statusWindowRectXPStyle']();break;case _0x249d6a(0xa18):return this[_0x249d6a(0x1be)]();break;case'default':case _0x249d6a(0x343):default:return this[_0x249d6a(0x39d)]();break;}},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x776)]=Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x1f4)],Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x1f4)]=function(){const _0x37f57c=_0x4a3d8d,_0x17afe6=this[_0x37f57c(0x801)]();switch(_0x17afe6){case'xp':case _0x37f57c(0x9e1):return this['partyCommandWindowRectXPStyle']();break;case'border':return this[_0x37f57c(0x5f7)]();case _0x37f57c(0x646):case _0x37f57c(0x343):default:return this['partyCommandWindowRectDefaultStyle']();break;}},Scene_Battle[_0x4a3d8d(0x3c4)]['partyCommandWindowRectDefaultStyle']=function(){const _0x1c2479=_0x4a3d8d,_0x4f73ff=VisuMZ['BattleCore'][_0x1c2479(0xb75)][_0x1c2479(0x620)],_0x101de6=_0x4f73ff[_0x1c2479(0x2d1)]||0xc0,_0x4f9229=this[_0x1c2479(0x6cf)](),_0x2ca189=this[_0x1c2479(0xc46)]()?Graphics[_0x1c2479(0x6c0)]-_0x101de6:0x0,_0x238544=Graphics['boxHeight']-_0x4f9229;return new Rectangle(_0x2ca189,_0x238544,_0x101de6,_0x4f9229);},Scene_Battle[_0x4a3d8d(0x3c4)]['actorCommandWindowRect']=function(){return this['partyCommandWindowRect']();},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x629)]=Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x241)],Scene_Battle['prototype'][_0x4a3d8d(0x241)]=function(){const _0x42ebd2=_0x4a3d8d,_0x361def=this[_0x42ebd2(0x801)]();switch(_0x361def){case'xp':case _0x42ebd2(0x9e1):case'border':break;case _0x42ebd2(0x646):case _0x42ebd2(0x343):default:VisuMZ['BattleCore']['Scene_Battle_updateStatusWindowPosition'][_0x42ebd2(0xaf0)](this);break;}},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x4b9)]=Scene_Battle['prototype'][_0x4a3d8d(0x409)],Scene_Battle['prototype']['startActorSelection']=function(){const _0x5073da=_0x4a3d8d;VisuMZ[_0x5073da(0x485)][_0x5073da(0x4b9)][_0x5073da(0xaf0)](this),this[_0x5073da(0x311)]();},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x868)]=Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x7eb)],Scene_Battle[_0x4a3d8d(0x3c4)]['startEnemySelection']=function(){const _0x3a414a=_0x4a3d8d;VisuMZ['BattleCore'][_0x3a414a(0x868)][_0x3a414a(0xaf0)](this),this['_enemyWindow'][_0x3a414a(0x6df)](),this[_0x3a414a(0x311)]();},Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x311)]=function(){const _0x4bd03c=_0x4a3d8d,_0x49e0b3=this['battleLayoutStyle']();['xp',_0x4bd03c(0x9e1),_0x4bd03c(0xa18)]['includes'](_0x49e0b3)&&(_0x4bd03c(0x442)!==_0x4bd03c(0x442)?(_0x388c78+=_0x5a8327,_0x4b6ddf+=_0xa31af):this[_0x4bd03c(0x4f7)][_0x4bd03c(0x4f3)]()),(_0x49e0b3===_0x4bd03c(0xa18)||this['isSkillItemWindowsMiddle']())&&(this[_0x4bd03c(0x608)][_0x4bd03c(0x4f3)](),this[_0x4bd03c(0xabb)][_0x4bd03c(0x4f3)]());},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x991)]=Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x275)],Scene_Battle[_0x4a3d8d(0x3c4)]['onActorOk']=function(){const _0x4200bf=_0x4a3d8d;VisuMZ[_0x4200bf(0x485)]['Scene_Battle_onActorOk'][_0x4200bf(0xaf0)](this),this[_0x4200bf(0x942)]();},Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xb38)]=function(){const _0xfbbf41=_0x4a3d8d;return['attack',_0xfbbf41(0x8e0),_0xfbbf41(0x803)][_0xfbbf41(0xbff)](this[_0xfbbf41(0x4f7)]['currentSymbol']());},VisuMZ['BattleCore'][_0x4a3d8d(0x274)]=Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa2e)],Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa2e)]=function(){const _0xc661bb=_0x4a3d8d;if(this['isNonSubmenuCancel']())this['_statusWindow'][_0xc661bb(0x92f)](),this['_actorWindow']['hide'](),this[_0xc661bb(0x4f7)][_0xc661bb(0x5c1)]();else{if(_0xc661bb(0x4f0)==='ebqUJ'){if(!_0x309fdd[_0xc661bb(0x957)]())return;const _0x5e060b=this[_0xc661bb(0x28e)]();if(!_0x5e060b)return;_0x5e060b[_0xc661bb(0xc30)](_0x3ced9b,_0x265ac3,_0x560911,_0x4b0d2f);}else VisuMZ['BattleCore'][_0xc661bb(0x274)]['call'](this);}this[_0xc661bb(0x69b)]();},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xa7a)]=Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xbb6)],Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xbb6)]=function(){const _0x27a59a=_0x4a3d8d;VisuMZ[_0x27a59a(0x485)][_0x27a59a(0xa7a)][_0x27a59a(0xaf0)](this),this[_0x27a59a(0x942)]();},VisuMZ['BattleCore'][_0x4a3d8d(0x889)]=Scene_Battle['prototype'][_0x4a3d8d(0x877)],Scene_Battle[_0x4a3d8d(0x3c4)]['onEnemyCancel']=function(){const _0x2b3e42=_0x4a3d8d;if(this[_0x2b3e42(0xb38)]())_0x2b3e42(0x221)!=='FfvRD'?_0x1d69df[_0x2b3e42(0xbec)](_0x117578):(this[_0x2b3e42(0x71c)][_0x2b3e42(0x92f)](),this[_0x2b3e42(0xa8b)][_0x2b3e42(0xb20)](),this['_actorCommandWindow'][_0x2b3e42(0x5c1)]());else{if(_0x2b3e42(0x68e)===_0x2b3e42(0x68e))VisuMZ[_0x2b3e42(0x485)][_0x2b3e42(0x889)][_0x2b3e42(0xaf0)](this);else{const _0x521f5f=_0x20d641[_0x2b3e42(0x3c4)][_0x2b3e42(0x561)](),_0x25a246=_0xea0d29[_0x2b3e42(0x6c0)],_0x4080f2=this[_0x2b3e42(0x6cf)]()+_0x521f5f,_0x2b8a62=0x0,_0x3c2d30=_0x176f4c[_0x2b3e42(0x8de)]-_0x4080f2+_0x521f5f;return new _0x3f63f1(_0x2b8a62,_0x3c2d30,_0x25a246,_0x4080f2);}}this['cancelTargetSelectionVisibility']();},Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x942)]=function(){const _0xfcd0b8=_0x4a3d8d,_0x38cef7=this[_0xfcd0b8(0x801)]();if(_0x38cef7==='border'||this['isSkillItemWindowsMiddle']()){if('TQCuH'===_0xfcd0b8(0x3b9)){this[_0xfcd0b8(0x608)][_0xfcd0b8(0x846)]();this[_0xfcd0b8(0x608)][_0xfcd0b8(0xa61)]&&(_0xfcd0b8(0x2eb)===_0xfcd0b8(0x2eb)?this[_0xfcd0b8(0x608)]['show']():this[_0xfcd0b8(0x960)](this[_0xfcd0b8(0x86f)]));this[_0xfcd0b8(0xabb)][_0xfcd0b8(0x846)]();if(this[_0xfcd0b8(0xabb)][_0xfcd0b8(0xa61)]){if('dKADb'===_0xfcd0b8(0x5c6))return _0x2495e1[_0xfcd0b8(0x485)]['Settings'][_0xfcd0b8(0x1e5)][_0xfcd0b8(0x14b)]['call'](this);else this[_0xfcd0b8(0xabb)][_0xfcd0b8(0x92f)]();}}else _0x389a22[_0xfcd0b8(0x1d1)]()?(this['tpbCommandFight'](),this[_0xfcd0b8(0x2ed)]()):_0x3cea47[_0xfcd0b8(0x485)][_0xfcd0b8(0x43d)][_0xfcd0b8(0xaf0)](this);}},Scene_Battle['prototype']['cancelTargetSelectionVisibility']=function(){const _0x264054=_0x4a3d8d,_0xb399cb=this[_0x264054(0x801)]();['xp',_0x264054(0x9e1),_0x264054(0xa18)][_0x264054(0xbff)](_0xb399cb)&&this[_0x264054(0x4f7)][_0x264054(0x846)](),this['okTargetSelectionVisibility']();},Scene_Battle['prototype'][_0x4a3d8d(0x39d)]=function(){const _0x3cb7f0=_0x4a3d8d,_0x3cf8d3=VisuMZ['BattleCore']['Settings'][_0x3cb7f0(0x620)],_0x5379b6=Window_BattleStatus[_0x3cb7f0(0x3c4)][_0x3cb7f0(0x561)](),_0x25fd91=Graphics[_0x3cb7f0(0x6c0)]-(_0x3cf8d3['CommandWidth']||0xc0),_0x4b8de4=this[_0x3cb7f0(0x6cf)]()+_0x5379b6,_0x59700c=this[_0x3cb7f0(0xc46)]()?0x0:Graphics[_0x3cb7f0(0x6c0)]-_0x25fd91,_0x1b1165=Graphics[_0x3cb7f0(0x8de)]-_0x4b8de4+_0x5379b6;return new Rectangle(_0x59700c,_0x1b1165,_0x25fd91,_0x4b8de4);},Scene_Battle['prototype'][_0x4a3d8d(0x315)]=function(){const _0x184757=_0x4a3d8d,_0x565602=Window_BattleStatus[_0x184757(0x3c4)][_0x184757(0x561)](),_0x182a48=Graphics[_0x184757(0x6c0)],_0x4efa24=this[_0x184757(0x6cf)]()+_0x565602,_0x3055bb=0x0,_0x4097ef=Graphics['boxHeight']-_0x4efa24+_0x565602;return new Rectangle(_0x3055bb,_0x4097ef,_0x182a48,_0x4efa24);},Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x46e)]=function(){const _0x47c256=_0x4a3d8d,_0x209ba3=Graphics['boxWidth']/0x2,_0x29503a=this[_0x47c256(0x90c)](VisuMZ['BattleCore'][_0x47c256(0xb75)]['BattleLayout'][_0x47c256(0xb81)],!![]),_0x5d814b=Math[_0x47c256(0x89f)]((Graphics['boxWidth']-_0x209ba3)/0x2),_0x1260b6=Graphics[_0x47c256(0x8de)]-_0x29503a-this[_0x47c256(0x315)]()[_0x47c256(0x2cc)];return new Rectangle(_0x5d814b,_0x1260b6,_0x209ba3,_0x29503a);},Scene_Battle['prototype']['helpWindowRectBorderStyle']=function(){const _0x123c72=_0x4a3d8d,_0x300b9e=Graphics[_0x123c72(0xb49)],_0x3d3e39=Math[_0x123c72(0x89f)]((Graphics['boxWidth']-_0x300b9e)/0x2),_0x31d0e4=this[_0x123c72(0xbb7)](),_0x35bfff=(Graphics['height']-Graphics[_0x123c72(0x8de)])/-0x2;return new Rectangle(_0x3d3e39,_0x35bfff,_0x300b9e,_0x31d0e4);},Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x1be)]=function(){const _0x296ad4=_0x4a3d8d,_0x1082d8=Graphics[_0x296ad4(0xb49)],_0x45b7a6=Math['round']((Graphics[_0x296ad4(0x6c0)]-_0x1082d8)/0x2),_0x539641=this[_0x296ad4(0x90c)](0x4,!![]),_0x26edc7=Graphics[_0x296ad4(0x8de)]-_0x539641+(Graphics[_0x296ad4(0x2cc)]-Graphics[_0x296ad4(0x8de)])/0x2;return new Rectangle(_0x45b7a6,_0x26edc7,_0x1082d8,_0x539641);},Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x5f7)]=function(){const _0x2d1990=_0x4a3d8d,_0x5b353d=Math['floor'](Graphics['width']/0x3),_0x496be8=this['isRightInputMode']()?(Graphics[_0x2d1990(0xb49)]+Graphics[_0x2d1990(0x6c0)])/0x2-_0x5b353d:(Graphics[_0x2d1990(0xb49)]-Graphics[_0x2d1990(0x6c0)])/-0x2,_0x4c047b=this['helpWindowRectBorderStyle'](),_0xdf6028=_0x4c047b['y']+_0x4c047b[_0x2d1990(0x2cc)],_0x19bf43=this[_0x2d1990(0x1be)](),_0x24af27=_0x19bf43['y']-_0xdf6028;return new Rectangle(_0x496be8,_0xdf6028,_0x5b353d,_0x24af27);},Scene_Battle['prototype']['skillItemWindowRectBorderStyle']=function(){const _0x117184=_0x4a3d8d,_0x4afd85=Math[_0x117184(0xa71)](Graphics[_0x117184(0xb49)]/0x3),_0x2d6f28=Math[_0x117184(0x89f)]((Graphics[_0x117184(0x6c0)]-_0x4afd85)/0x2),_0x5d5296=this[_0x117184(0x5f7)](),_0x16c324=_0x5d5296['y'],_0x3c906f=_0x5d5296[_0x117184(0x2cc)];return new Rectangle(_0x2d6f28,_0x16c324,_0x4afd85,_0x3c906f);},Scene_Battle['prototype'][_0x4a3d8d(0x8c8)]=function(){const _0x31f35b=_0x4a3d8d;this[_0x31f35b(0x88c)]['y']=this[_0x31f35b(0x910)]['y']+this[_0x31f35b(0x910)][_0x31f35b(0x2cc)];if(this[_0x31f35b(0xc46)]()){if(this[_0x31f35b(0x801)]()===_0x31f35b(0xa18)){if(_0x31f35b(0x424)!=='rhEeN')this[_0x31f35b(0x88c)]['x']=0x8;else{const _0x2f1cff=this['_commandNameWindow'];_0x2f1cff[_0x31f35b(0x368)][_0x31f35b(0x1db)]();const _0x2036d4=this['commandStyleCheck'](this[_0x31f35b(0xc07)]());if(_0x2036d4===_0x31f35b(0x958)&&this[_0x31f35b(0x66e)]()>0x0){const _0x15334d=this[_0x31f35b(0x4d6)](this[_0x31f35b(0xc07)]());let _0x1b1e05=this['commandName'](this[_0x31f35b(0xc07)]());_0x1b1e05=_0x1b1e05[_0x31f35b(0x809)](/\\I\[(\d+)\]/gi,''),_0x2f1cff[_0x31f35b(0x875)](),this[_0x31f35b(0x592)](_0x1b1e05,_0x15334d),this[_0x31f35b(0xb50)](_0x1b1e05,_0x15334d),this[_0x31f35b(0xaa9)](_0x1b1e05,_0x15334d);}}}else this[_0x31f35b(0x88c)]['x']=-this[_0x31f35b(0x88c)][_0x31f35b(0xb49)]-0x4;}else this['_cancelButton']['x']=Graphics[_0x31f35b(0xb49)]-(Graphics['width']-Graphics[_0x31f35b(0x6c0)])/0x2-this[_0x31f35b(0x88c)][_0x31f35b(0xb49)]-0x4;},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xb31)]=Scene_Battle['prototype'][_0x4a3d8d(0x57a)],Scene_Battle['prototype']['skillWindowRect']=function(){const _0x5b24d7=_0x4a3d8d;if(this[_0x5b24d7(0x801)]()===_0x5b24d7(0xa18)){if('WbDPi'!==_0x5b24d7(0x54f))return this[_0x5b24d7(0x4c4)]();else{const _0x2aaf43=this[_0x5b24d7(0x88a)]();return _0x2aaf43?_0x2aaf43[_0x5b24d7(0x970)]:0x0;}}else{if(this[_0x5b24d7(0x33a)]())return this['skillItemWindowRectMiddle']();else{if(_0x5b24d7(0x1f8)===_0x5b24d7(0x952))_0x2a453f[_0x5b24d7(0x3c4)]['loadWindowskin'][_0x5b24d7(0xaf0)](this);else return VisuMZ[_0x5b24d7(0x485)][_0x5b24d7(0xb31)][_0x5b24d7(0xaf0)](this);}}},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x392)]=Scene_Battle['prototype']['itemWindowRect'],Scene_Battle['prototype'][_0x4a3d8d(0x93c)]=function(){const _0x788ef3=_0x4a3d8d;if(this[_0x788ef3(0x801)]()==='border')return _0x788ef3(0x806)===_0x788ef3(0x806)?this[_0x788ef3(0x4c4)]():this['battlerSprites']()['some'](_0x1cec66=>_0x1cec66['isChangingOpacity']());else return this[_0x788ef3(0x33a)]()?this[_0x788ef3(0xa5c)]():_0x788ef3(0xa3e)===_0x788ef3(0xa0e)?this[_0x788ef3(0x8bf)]||0x0:VisuMZ[_0x788ef3(0x485)][_0x788ef3(0x392)][_0x788ef3(0xaf0)](this);},Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x33a)]=function(){const _0xbc4e00=_0x4a3d8d;return VisuMZ[_0xbc4e00(0x485)][_0xbc4e00(0xb75)][_0xbc4e00(0x620)][_0xbc4e00(0x617)];},Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa5c)]=function(){const _0x116247=_0x4a3d8d,_0x500551=Sprite_Button[_0x116247(0x3c4)][_0x116247(0x614)]()*0x2+0x4;let _0x4d99da=Graphics[_0x116247(0x6c0)]-_0x500551;Imported[_0x116247(0x714)]&&SceneManager[_0x116247(0x8e5)]()&&(_0x4d99da+=_0x500551);const _0x358104=this[_0x116247(0x911)](),_0x5628d2=Graphics[_0x116247(0x8de)]-_0x358104-this[_0x116247(0x43c)]()['height']+Window_BattleStatus['prototype']['extraHeight'](),_0x532336=0x0;return new Rectangle(_0x532336,_0x358104,_0x4d99da,_0x5628d2);},Scene_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x622)]=function(){const _0x192878=_0x4a3d8d;if(!VisuMZ[_0x192878(0x485)][_0x192878(0xb75)][_0x192878(0xa50)][_0x192878(0x8c2)])return;this[_0x192878(0xacb)]=new Sprite(),this[_0x192878(0xacb)]['x']=this['_windowLayer']['x'],this['_enemyNameContainer']['y']=this[_0x192878(0xa34)]['y'];const _0x1c8b0b=this[_0x192878(0x9cd)][_0x192878(0x2b7)](this[_0x192878(0xa34)]);this[_0x192878(0x441)](this[_0x192878(0xacb)],_0x1c8b0b);for(let _0x428549=0x0;_0x428549<0x8;_0x428549++){const _0x583ae5=new Window_EnemyName(_0x428549);this[_0x192878(0xacb)]['addChild'](_0x583ae5);}},Sprite_Battler[_0x4a3d8d(0xb59)]=VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xb75)][_0x4a3d8d(0x4e0)][_0x4a3d8d(0x97c)],VisuMZ['BattleCore'][_0x4a3d8d(0x988)]=Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x6e4)],Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x6e4)]=function(){const _0x372642=_0x4a3d8d;VisuMZ[_0x372642(0x485)][_0x372642(0x988)][_0x372642(0xaf0)](this),this['initMembersBattleCore']();if(this[_0x372642(0x6ee)]===Sprite_Enemy)this[_0x372642(0x2c4)]();this[_0x372642(0x84b)]();},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xaa7)]=function(){const _0x194b49=_0x4a3d8d;this[_0x194b49(0x232)]=0x0,this[_0x194b49(0x5d8)]=0x0,this[_0x194b49(0x2e8)]=0x0,this[_0x194b49(0xb99)]=0x0,this[_0x194b49(0x59a)]=0x0,this[_0x194b49(0xa0f)]=0x0,this[_0x194b49(0xb58)]=_0x194b49(0x88e),this[_0x194b49(0x205)]=0x0,this[_0x194b49(0x1da)]=0x0,this[_0x194b49(0xab7)]=0x0,this['_jumpWholeDuration']=0x0,this[_0x194b49(0x2e5)]=0xff,this['_opacityDuration']=0x0,this['_opacityWholeDuration']=0x0,this[_0x194b49(0x520)]=_0x194b49(0x88e),this['_currentAngle']=0x0,this[_0x194b49(0x23f)]=0x0,this['_angleDuration']=0x0,this[_0x194b49(0x84d)]=0x0,this[_0x194b49(0xb8e)]=_0x194b49(0x88e),this[_0x194b49(0x2d3)]=!![],this[_0x194b49(0x491)]=0x0,this[_0x194b49(0x46a)]=0x0,this[_0x194b49(0x6b9)]=0x0,this['_targetSkewY']=0x0,this['_skewDuration']=0x0,this['_skewWholeDuration']=0x0,this[_0x194b49(0x8d5)]=_0x194b49(0x88e),this[_0x194b49(0xa07)]=0x1,this[_0x194b49(0x21c)]=0x1,this['_targetGrowX']=0x1,this[_0x194b49(0x6b8)]=0x1,this['_growDuration']=0x0,this['_growWholeDuration']=0x0,this[_0x194b49(0x8b5)]=_0x194b49(0x88e),this[_0x194b49(0x5ca)]=0x1,this[_0x194b49(0xb88)]=0x0,this[_0x194b49(0x903)]=0x0,this[_0x194b49(0x1d3)]=0x0,this[_0x194b49(0x2dc)]=0x0,this['_homeEasing']=_0x194b49(0x88e);},Sprite_Battler[_0x4a3d8d(0x3c4)]['createShadowSprite']=function(){const _0x2d57f0=_0x4a3d8d;this[_0x2d57f0(0xc2f)]=new Sprite(),this['_shadowSprite'][_0x2d57f0(0x2dd)]=ImageManager[_0x2d57f0(0x2ce)](_0x2d57f0(0x558)),this[_0x2d57f0(0xc2f)]['bitmap']['smooth']=VisuMZ[_0x2d57f0(0x485)][_0x2d57f0(0xb75)]['Actor'][_0x2d57f0(0x325)],this[_0x2d57f0(0xc2f)][_0x2d57f0(0xc3d)]['x']=0.5,this[_0x2d57f0(0xc2f)]['anchor']['y']=0.5,this[_0x2d57f0(0xc2f)]['y']=-0x2,this[_0x2d57f0(0xc2f)][_0x2d57f0(0xab9)]=![],this[_0x2d57f0(0x960)](this['_shadowSprite']);},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x84b)]=function(){const _0x9176ac=_0x4a3d8d;this[_0x9176ac(0x6f2)]=new Sprite(),this[_0x9176ac(0x6f2)][_0x9176ac(0xc3d)]['x']=0.5,this[_0x9176ac(0x6f2)]['anchor']['y']=0.5,this['addChild'](this['_distortionSprite']);},Sprite_Battler[_0x4a3d8d(0x3c4)]['attachSpritesToDistortionSprite']=function(){const _0x49342d=_0x4a3d8d;if(!this[_0x49342d(0x6f2)])return;if(this[_0x49342d(0xc2f)]){if('wFOIE'!=='WWkPg'){const _0x3cc94a=this[_0x49342d(0x5c4)](this[_0x49342d(0x6f2)]);this[_0x49342d(0x441)](this['_shadowSprite'],_0x3cc94a),this[_0x49342d(0x6e1)]();}else{if(!_0x17094e[_0x49342d(0x930)]())return;if(!this[_0x49342d(0x28e)]())return;if(_0x11e712[_0x49342d(0x482)]<=0x0)return;_0x533696=_0x1cf449||{},_0x5ae110[_0x49342d(0x19e)]=_0x2883b1[_0x49342d(0x19e)]||_0x49342d(0x89e),_0x3f7ff7['flashColor']=_0x34b4dc[_0x49342d(0x602)]||[0x0,0x0,0x0,0x0],_0x49b3dd[_0x49342d(0x49f)]=_0x54c852[_0x49342d(0x49f)]||0x0,this[_0x49342d(0x28e)]()[_0x49342d(0x1a4)](_0x49575a,_0x3d34f8);}}this[_0x49342d(0x1d8)]&&(_0x49342d(0x27d)!==_0x49342d(0x27d)?_0x22c0dc[_0x49342d(0x2dd)]=_0x5b853b[_0x49342d(0x96b)](_0x8b8d6):this[_0x49342d(0x6f2)][_0x49342d(0x960)](this[_0x49342d(0x1d8)])),this[_0x49342d(0x4df)]&&this[_0x49342d(0x6f2)][_0x49342d(0x960)](this[_0x49342d(0x4df)]),this[_0x49342d(0x48a)]&&(_0x49342d(0xbc0)==='isYtX'?this['_distortionSprite'][_0x49342d(0x960)](this[_0x49342d(0x48a)]):_0x10e2c5[_0x49342d(0xb39)]&&_0x46e337[_0x49342d(0xb39)]()),this[_0x49342d(0x6c6)]&&this[_0x49342d(0x6f2)][_0x49342d(0x960)](this[_0x49342d(0x6c6)]),this['_dragonbonesSpriteContainer']&&this[_0x49342d(0x6f2)][_0x49342d(0x960)](this['_dragonbonesSpriteContainer']);},Sprite_Battler['prototype']['updateShadowVisibility']=function(){const _0x2933c7=_0x4a3d8d;if(!this[_0x2933c7(0xc2f)])return;if(this[_0x2933c7(0x349)]&&this[_0x2933c7(0x349)][_0x2933c7(0xbe3)]()){const _0x209bd5=this['_shadowSprite'][_0x2933c7(0x2dd)];this[_0x2933c7(0xc2f)][_0x2933c7(0x22b)](0x0,0x0,_0x209bd5[_0x2933c7(0xb49)],_0x209bd5[_0x2933c7(0x2cc)]);}else'TIpTc'!==_0x2933c7(0x7c5)?this['drawItemStyleIconText'](_0x417dc6):this['_shadowSprite'][_0x2933c7(0x22b)](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x260)]=function(){const _0xba49eb=_0x4a3d8d;if(SceneManager[_0xba49eb(0x930)]()){if(_0xba49eb(0xa2c)==='muvNH')return SceneManager[_0xba49eb(0x3ff)][_0xba49eb(0x94c)]['_damageContainer'];else _0x2bd3f2[_0xba49eb(0x977)]=![];}else return this[_0xba49eb(0x756)];},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x1a4)]=function(_0x2f0642,_0x3878e5){const _0x3c06df=_0x4a3d8d;if(!this[_0x3c06df(0x349)][_0x3c06df(0x54e)]())return;const _0x5d0017=VisuMZ[_0x3c06df(0x485)]['Settings']['Damage'],_0x3d4481=new Sprite_Damage();_0x3d4481['_duration']=_0x5d0017['PopupDuration'],this[_0x3c06df(0xc12)](_0x3d4481),_0x3d4481[_0x3c06df(0x1a4)](_0x2f0642,_0x3878e5),this['addDamageSprite'](_0x3d4481);},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x695)]=function(_0x380495,_0x14f6b0,_0x2ef92f){const _0x15ff30=_0x4a3d8d;if(!this[_0x15ff30(0x349)][_0x15ff30(0x54e)]())return;const _0x3b6254=VisuMZ[_0x15ff30(0x485)][_0x15ff30(0xb75)]['Damage'],_0x3f947a=new Sprite_Damage();_0x3f947a[_0x15ff30(0x2e3)]=_0x3b6254['PopupDuration'],this[_0x15ff30(0xc12)](_0x3f947a),_0x3f947a[_0x15ff30(0x695)](_0x380495,_0x14f6b0,_0x2ef92f),this['addDamageSprite'](_0x3f947a);},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x229)]=function(){const _0x72135b=_0x4a3d8d;if(!this['_battler'][_0x72135b(0x77c)]())return;while(this[_0x72135b(0x349)]['isDamagePopupRequested']()){if(this[_0x72135b(0x349)][_0x72135b(0x54e)]()){if(_0x72135b(0x476)===_0x72135b(0x476))this['createDamageSprite']();else{if(_0x583408[_0x72135b(0x7d7)]===0x0)this['requestMotion'](_0x72135b(0x6d8));else{if(_0x4cc42e[_0x72135b(0x7d7)]===0x1)this[_0x72135b(0x834)](_0x72135b(0x99c));else _0x5fdc38['type']===0x2&&this[_0x72135b(0x834)](_0x72135b(0x158));}this[_0x72135b(0x826)](_0x52623c[_0x72135b(0x970)]);}}}this[_0x72135b(0x349)][_0x72135b(0x37a)](),this['_battler'][_0x72135b(0xc02)]();},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xaa4)]=function(){const _0x103fd3=_0x4a3d8d,_0x35181c=VisuMZ['BattleCore']['Settings']['Damage'],_0x93b24d=new Sprite_Damage();_0x93b24d[_0x103fd3(0x2e3)]=_0x35181c['PopupDuration'],this[_0x103fd3(0xc12)](_0x93b24d),_0x93b24d[_0x103fd3(0x4da)](this[_0x103fd3(0x349)]),_0x93b24d['setupBattleCore'](this[_0x103fd3(0x349)]),this[_0x103fd3(0xb08)](_0x93b24d);},Sprite_Battler[_0x4a3d8d(0x3c4)]['addDamageSprite']=function(_0x4e3e74){const _0x4c8db4=_0x4a3d8d;this[_0x4c8db4(0xa93)][_0x4c8db4(0x906)](_0x4e3e74);if(this[_0x4c8db4(0xb74)]()){if(_0x4c8db4(0xbd4)==='WeOcJ'){let _0x59ed90=_0x111cc8[_0x4c8db4(0x485)]['Game_Troop_expTotal'][_0x4c8db4(0xaf0)](this);return this[_0x4c8db4(0xc0c)]&&(_0x59ed90*=this[_0x4c8db4(0xc0c)]()),_0x1e7328['ceil'](_0x59ed90);}else{const _0x3c5e5b=SceneManager['_scene'][_0x4c8db4(0x71c)];if(_0x3c5e5b)_0x3c5e5b[_0x4c8db4(0xb08)](_0x4e3e74,this[_0x4c8db4(0x349)]);}}else{if(_0x4c8db4(0x61b)===_0x4c8db4(0x53f)){if(!this[_0x4c8db4(0xa40)])return;this[_0x4c8db4(0x349)]!==this[_0x4c8db4(0xa40)][_0x4c8db4(0x349)]&&this[_0x4c8db4(0x4da)](this['_linkedSprite'][_0x4c8db4(0x349)]);}else{this[_0x4c8db4(0x260)]()[_0x4c8db4(0x960)](_0x4e3e74);if(SceneManager['isBattleFlipped']())_0x4e3e74[_0x4c8db4(0x3cb)]['x']=-0x1;}}},Sprite_Battler['prototype'][_0x4a3d8d(0xb74)]=function(){const _0x2935d2=_0x4a3d8d;return!$gameSystem[_0x2935d2(0x957)]()&&this[_0x2935d2(0x349)]&&this['_battler'][_0x2935d2(0x764)]();},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xc12)]=function(_0x383bad){const _0x20e65f=_0x4a3d8d;this[_0x20e65f(0x632)](_0x383bad,!![]);const _0x54e391=VisuMZ[_0x20e65f(0x485)][_0x20e65f(0xb75)][_0x20e65f(0xb55)],_0x301a5d=SceneManager[_0x20e65f(0x4cc)]()?-0x1:0x1;if(_0x54e391[_0x20e65f(0xc01)])for(const _0x3744fb of this[_0x20e65f(0xa93)]){_0x20e65f(0x53e)===_0x20e65f(0x53e)?(_0x3744fb['x']+=_0x54e391['PopupShiftX']*_0x301a5d,_0x3744fb['y']+=_0x54e391[_0x20e65f(0x45b)]):_0x195005=(_0x5be3c0+_0x442a14)/0x2;}else{if(_0x20e65f(0x3dd)==='JBqde'){const _0x25117c=this['_damages'][this[_0x20e65f(0xa93)]['length']-0x1];_0x25117c&&(_0x383bad['x']=_0x25117c['x']+_0x54e391['PopupShiftX']*_0x301a5d,_0x383bad['y']=_0x25117c['y']+_0x54e391[_0x20e65f(0x45b)]);}else{_0x42a4ff['BattleCore']['Sprite_Battler_initMembers'][_0x20e65f(0xaf0)](this),this[_0x20e65f(0xaa7)]();if(this[_0x20e65f(0x6ee)]===_0x19c1f4)this[_0x20e65f(0x2c4)]();this['createDistortionSprite']();}}},Sprite_Battler[_0x4a3d8d(0x3c4)]['alignBattleCoreDamageSprite']=function(_0xf64e40,_0x4aea24){const _0x251b20=_0x4a3d8d,_0x5ec0d1=SceneManager[_0x251b20(0x4cc)]()?-0x1:0x1;let _0x5b9420=this[_0x251b20(0x232)];_0x5b9420+=this[_0x251b20(0xb70)]();let _0x18df51=this[_0x251b20(0x5d8)];const _0x10e4b1=this['_distortionSprite'][_0x251b20(0x3cb)]['y'];_0x18df51+=this['extraPositionY']();const _0x2d9a56=SceneManager[_0x251b20(0x3ff)][_0x251b20(0x71c)];if(_0x2d9a56&&this[_0x251b20(0x756)]===_0x2d9a56){_0x5b9420+=_0x2d9a56['x']-this[_0x251b20(0xb6e)]();const _0x234416=_0x2d9a56[_0x251b20(0xbee)]()*0x3/0x4;_0x18df51=_0x2d9a56['y']+_0x234416,_0x18df51=Math['min'](_0x18df51,_0x2d9a56['y']+this['y']-this[_0x251b20(0x2cc)]+_0x234416);}_0xf64e40['x']=Math['round'](_0x5b9420+this[_0x251b20(0xb6e)]()*_0x5ec0d1),_0xf64e40['y']=Math['round'](_0x18df51+this[_0x251b20(0x7e6)]());},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x5ba)]=Sprite_Battler[_0x4a3d8d(0x3c4)]['damageOffsetX'],Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xb6e)]=function(){const _0x113468=_0x4a3d8d;let _0x1697c1=VisuMZ[_0x113468(0x485)][_0x113468(0x5ba)][_0x113468(0xaf0)](this),_0x570966=VisuMZ[_0x113468(0x485)][_0x113468(0xb75)][_0x113468(0xb55)][_0x113468(0xae9)]||0x0;return Math[_0x113468(0x89f)](_0x1697c1+_0x570966);},VisuMZ['BattleCore'][_0x4a3d8d(0x1a5)]=Sprite_Battler[_0x4a3d8d(0x3c4)]['damageOffsetY'],Sprite_Battler[_0x4a3d8d(0x3c4)]['damageOffsetY']=function(){const _0x2bef2b=_0x4a3d8d;let _0x24202f=VisuMZ[_0x2bef2b(0x485)][_0x2bef2b(0x1a5)][_0x2bef2b(0xaf0)](this);switch(VisuMZ[_0x2bef2b(0x485)][_0x2bef2b(0xb75)][_0x2bef2b(0xb55)][_0x2bef2b(0x309)]){case _0x2bef2b(0x7df):_0x24202f-=this[_0x2bef2b(0x2cc)]*this[_0x2bef2b(0x3cb)]['y'];break;case _0x2bef2b(0xb3f):_0x24202f-=this[_0x2bef2b(0x2cc)]*this['scale']['y']*0.5;break;}let _0x48fd25=VisuMZ[_0x2bef2b(0x485)]['Settings'][_0x2bef2b(0xb55)][_0x2bef2b(0x825)]||0x0;return Math[_0x2bef2b(0x89f)](_0x24202f+_0x48fd25);},Sprite_Actor['prototype']['damageOffsetX']=function(){const _0x516840=_0x4a3d8d;return Sprite_Battler[_0x516840(0x3c4)][_0x516840(0xb6e)]['call'](this);},Sprite_Actor[_0x4a3d8d(0x3c4)]['damageOffsetY']=function(){const _0x3b2af5=_0x4a3d8d;return Sprite_Battler[_0x3b2af5(0x3c4)][_0x3b2af5(0x7e6)][_0x3b2af5(0xaf0)](this);},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x982)]=function(_0x44fde9){const _0x5d2865=_0x4a3d8d;this[_0x5d2865(0xb74)]()?SceneManager['_scene'][_0x5d2865(0x71c)]['removeDamageSprite'](_0x44fde9):(this[_0x5d2865(0x260)]()['removeChild'](_0x44fde9),this[_0x5d2865(0xa93)][_0x5d2865(0x34b)](_0x44fde9),_0x44fde9[_0x5d2865(0xc47)]());},VisuMZ['BattleCore'][_0x4a3d8d(0x44a)]=Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x6d4)],Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x6d4)]=function(_0xdc83ae,_0x48dace){const _0x20e8d0=_0x4a3d8d,_0x4b595d=VisuMZ[_0x20e8d0(0x485)][_0x20e8d0(0xb75)];if(this[_0x20e8d0(0x6ee)]===Sprite_Actor)_0xdc83ae+=_0x4b595d[_0x20e8d0(0x4e0)]['OffsetX']||0x0,_0x48dace+=_0x4b595d[_0x20e8d0(0x4e0)][_0x20e8d0(0xa65)]||0x0;else this['constructor']===Sprite_Enemy&&(_0xdc83ae+=_0x4b595d[_0x20e8d0(0xa50)][_0x20e8d0(0x76e)]||0x0,_0x48dace+=_0x4b595d[_0x20e8d0(0xa50)][_0x20e8d0(0xa65)]||0x0);this['_battler']&&(_0xdc83ae=this[_0x20e8d0(0x349)][_0x20e8d0(0x920)]??_0xdc83ae,_0x48dace=this['_battler']['_forcedHomeY']??_0x48dace),VisuMZ[_0x20e8d0(0x485)][_0x20e8d0(0x44a)]['call'](this,_0xdc83ae,_0x48dace),this[_0x20e8d0(0xb88)]=this[_0x20e8d0(0x966)],this['_targetHomeY']=this[_0x20e8d0(0x649)],this[_0x20e8d0(0x1d3)]=0x0,this['_homeWholeDuration']=0x0,this['_homeEasing']=_0x20e8d0(0x88e);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xbbc)]=Sprite_Battler['prototype']['update'],Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x372)]=function(){const _0x379925=_0x4a3d8d;VisuMZ[_0x379925(0x485)][_0x379925(0xbbc)]['call'](this),!this[_0x379925(0x349)]&&this[_0x379925(0x220)]&&(this[_0x379925(0x220)][_0x379925(0xab9)]=![]);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x93f)]=Sprite_Battler['prototype']['updateMain'],Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x4f4)]=function(){const _0x503c07=_0x4a3d8d;this[_0x503c07(0x7e2)](),this[_0x503c07(0x4bb)](),this[_0x503c07(0xad0)](),this['updateFlip'](),VisuMZ[_0x503c07(0x485)][_0x503c07(0x93f)]['call'](this),this[_0x503c07(0x606)]();if(this[_0x503c07(0x6ee)]===Sprite_Enemy)this[_0x503c07(0x89c)]();},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x5d7)]=Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x421)],Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x421)]=function(){const _0x2c04bf=_0x4a3d8d;this[_0x2c04bf(0x21b)](),VisuMZ[_0x2c04bf(0x485)][_0x2c04bf(0x5d7)][_0x2c04bf(0xaf0)](this),this[_0x2c04bf(0xc4c)](),this[_0x2c04bf(0x209)]();},Sprite_Battler['prototype'][_0x4a3d8d(0x5f1)]=function(_0x46de96,_0x19cea4,_0x1f890a,_0x2fd6d4){const _0x3060bd=_0x4a3d8d;(this[_0x3060bd(0xb88)]!==_0x46de96||this[_0x3060bd(0x903)]!==_0x19cea4)&&(this[_0x3060bd(0xb88)]=_0x46de96,this[_0x3060bd(0x903)]=_0x19cea4,this['_homeDuration']=_0x1f890a,this[_0x3060bd(0x2dc)]=_0x1f890a,this['_homeEasing']=_0x2fd6d4,_0x1f890a<=0x0&&(_0x3060bd(0x9e9)===_0x3060bd(0x8a4)?(_0x3bb742[_0x3060bd(0x485)][_0x3060bd(0x6c7)][_0x3060bd(0xaf0)](this),this[_0x3060bd(0x85f)](),this[_0x3060bd(0x3e6)]()):this[_0x3060bd(0x347)]()));},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x21b)]=function(){const _0x545f6b=_0x4a3d8d;if(this[_0x545f6b(0x1d3)]<=0x0)return;const _0x4a7d93=this[_0x545f6b(0x1d3)],_0x5a6c2a=this[_0x545f6b(0x2dc)],_0x1c7c0f=this[_0x545f6b(0x350)];Imported[_0x545f6b(0x714)]?(this['_homeX']=this['applyEasing'](this[_0x545f6b(0x966)],this[_0x545f6b(0xb88)],_0x4a7d93,_0x5a6c2a,_0x1c7c0f),this[_0x545f6b(0x649)]=this[_0x545f6b(0x5e6)](this['_homeY'],this[_0x545f6b(0x903)],_0x4a7d93,_0x5a6c2a,_0x1c7c0f)):(this[_0x545f6b(0x966)]=(this[_0x545f6b(0x966)]*(_0x4a7d93-0x1)+this['_targetHomeX'])/_0x4a7d93,this[_0x545f6b(0x649)]=(this[_0x545f6b(0x649)]*(_0x4a7d93-0x1)+this[_0x545f6b(0x903)])/_0x4a7d93);this[_0x545f6b(0x1d3)]--;if(this[_0x545f6b(0x1d3)]<=0x0)this[_0x545f6b(0x347)]();},Sprite_Battler['prototype'][_0x4a3d8d(0x347)]=function(){const _0x227feb=_0x4a3d8d;this[_0x227feb(0x966)]=this[_0x227feb(0xb88)],this[_0x227feb(0x649)]=this['_targetHomeY'];},Sprite_Battler['prototype'][_0x4a3d8d(0xc4c)]=function(){const _0x2fd2e8=_0x4a3d8d;this[_0x2fd2e8(0x232)]=this['x'],this[_0x2fd2e8(0x5d8)]=this['y'],this[_0x2fd2e8(0x51c)](),this[_0x2fd2e8(0x2e6)](),this['x']+=this['extraPositionX'](),this['y']+=this[_0x2fd2e8(0x266)](),this['y']+=this[_0x2fd2e8(0x14c)](),this['x']=Math[_0x2fd2e8(0x467)](this['x']),this['y']=Math[_0x2fd2e8(0x467)](this['y']);},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xb70)]=function(){let _0x279c68=0x0;return _0x279c68;},Sprite_Battler['prototype'][_0x4a3d8d(0x266)]=function(){const _0x53c33c=_0x4a3d8d;let _0x1f3351=0x0;return this[_0x53c33c(0x349)]&&!this['_battler'][_0x53c33c(0xc19)]()&&(_0x1f3351-=this[_0x53c33c(0x2e8)],_0x1f3351-=this[_0x53c33c(0x205)]),_0x1f3351;},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x14c)]=function(){const _0x41c48a=_0x4a3d8d;let _0x5a03c6=0x0;if(this[_0x41c48a(0x6f2)]&&this[_0x41c48a(0x6ee)]!==Sprite_SvEnemy){if('VfilQ'==='uXSLa')this[_0x41c48a(0x635)]['svAnchorX']=_0x42836b[_0x41c48a(0x3c4)][_0x41c48a(0x9b0)][_0x41c48a(0xaf0)](this);else{const _0x44c70f=this[_0x41c48a(0x6f2)][_0x41c48a(0x3cb)]['y'];_0x5a03c6-=(_0x44c70f-0x1)*this[_0x41c48a(0x2cc)];}}return _0x5a03c6;},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x838)]=function(){const _0x1618c3=_0x4a3d8d,_0x2cf5c2=this[_0x1618c3(0x349)]&&this[_0x1618c3(0x349)][_0x1618c3(0x354)]();this[_0x1618c3(0x5ca)]=(_0x2cf5c2?-0x1:0x1)*Math[_0x1618c3(0x531)](this[_0x1618c3(0x3cb)]['x']);},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x8c5)]=function(_0x3ec870,_0x505d9a,_0x567e7d){const _0xca1a6c=_0x4a3d8d;if(!this[_0xca1a6c(0x240)]())return;if(this[_0xca1a6c(0xb99)]===_0x3ec870)return;this[_0xca1a6c(0xb99)]=_0x3ec870,this[_0xca1a6c(0x59a)]=_0x505d9a,this[_0xca1a6c(0xa0f)]=_0x505d9a,this[_0xca1a6c(0xb58)]=_0x567e7d||_0xca1a6c(0x88e);if(_0x505d9a<=0x0)this[_0xca1a6c(0x2e8)]=_0x3ec870;},Sprite_Battler['prototype'][_0x4a3d8d(0x51c)]=function(){const _0x4d6617=_0x4a3d8d;if(this[_0x4d6617(0x59a)]<=0x0)return;const _0x4687fe=this[_0x4d6617(0x59a)],_0x42982a=this[_0x4d6617(0xa0f)],_0x21ac16=this[_0x4d6617(0xb58)];if(Imported[_0x4d6617(0x714)])this[_0x4d6617(0x2e8)]=this[_0x4d6617(0x5e6)](this['_floatHeight'],this['_targetFloatHeight'],_0x4687fe,_0x42982a,_0x21ac16);else{if(_0x4d6617(0x463)===_0x4d6617(0x463))this[_0x4d6617(0x2e8)]=(this[_0x4d6617(0x2e8)]*(_0x4687fe-0x1)+this[_0x4d6617(0xb99)])/_0x4687fe;else return _0x2e7cd6[_0x4d6617(0x485)]['Sprite_Battleback_adjustPosition'][_0x4d6617(0xaf0)](this);}this['_floatDuration']--;if(this['_floatDuration']<=0x0)this[_0x4d6617(0xb68)]();},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xb68)]=function(){const _0x40aee7=_0x4a3d8d;this[_0x40aee7(0x2e8)]=this[_0x40aee7(0xb99)];},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa8d)]=function(){const _0x303c50=_0x4a3d8d;return this[_0x303c50(0x59a)]>0x0;},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x2ec)]=function(_0x5d826c,_0x38fb48){const _0x149109=_0x4a3d8d;if(!this[_0x149109(0x240)]())return;if(_0x38fb48<=0x0)return;this['_jumpMaxHeight']=_0x5d826c,this[_0x149109(0xab7)]=_0x38fb48,this[_0x149109(0xaff)]=_0x38fb48;},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x2e6)]=function(){const _0x44a448=_0x4a3d8d;if(this[_0x44a448(0xab7)]<=0x0)return;const _0x2f1e1f=this[_0x44a448(0xaff)]-this[_0x44a448(0xab7)],_0x4d782e=this[_0x44a448(0xaff)]/0x2,_0x21492a=this[_0x44a448(0x1da)],_0x28ca57=-_0x21492a/Math['pow'](_0x4d782e,0x2);this[_0x44a448(0x205)]=_0x28ca57*Math['pow'](_0x2f1e1f-_0x4d782e,0x2)+_0x21492a,this['_jumpDuration']--;if(this['_jumpDuration']<=0x0)return this[_0x44a448(0xb0b)]();},Sprite_Battler['prototype'][_0x4a3d8d(0xb0b)]=function(){const _0x35ee76=_0x4a3d8d;this[_0x35ee76(0x205)]=0x0;},Sprite_Battler['prototype'][_0x4a3d8d(0x712)]=function(){return this['_jumpDuration']>0x0;},Sprite_Battler['prototype'][_0x4a3d8d(0x4e3)]=function(_0x31bc07,_0x1178a2,_0x271107){const _0x206b6f=_0x4a3d8d;if(this['_targetOpacity']===_0x31bc07)return;this[_0x206b6f(0x2e5)]=_0x31bc07,this[_0x206b6f(0xb15)]=_0x1178a2,this[_0x206b6f(0xab8)]=_0x1178a2,this[_0x206b6f(0x520)]=_0x271107||_0x206b6f(0x88e);if(_0x1178a2<=0x0)this['opacity']=_0x31bc07;},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x209)]=function(){const _0x1f1244=_0x4a3d8d;if(this['constructor'][_0x1f1244(0xbaa)]===_0x1f1244(0x431))return;if(this[_0x1f1244(0xb15)]<=0x0)return;const _0x12083e=this[_0x1f1244(0xb15)],_0xff7801=this[_0x1f1244(0xab8)],_0x2965a9=this['_opacityEasing'];if(Imported[_0x1f1244(0x714)])this[_0x1f1244(0x2f0)]=this['applyEasing'](this[_0x1f1244(0x2f0)],this[_0x1f1244(0x2e5)],_0x12083e,_0xff7801,_0x2965a9);else{if(_0x1f1244(0x95c)!==_0x1f1244(0x5b5))this[_0x1f1244(0x2f0)]=(this[_0x1f1244(0x2f0)]*(_0x12083e-0x1)+this[_0x1f1244(0x2e5)])/_0x12083e;else{if(!this[_0x1f1244(0x349)][_0x1f1244(0x54e)]())return;const _0x46a636=_0x34b5e0[_0x1f1244(0x485)][_0x1f1244(0xb75)][_0x1f1244(0xb55)],_0x4ab5eb=new _0x25c011();_0x4ab5eb[_0x1f1244(0x2e3)]=_0x46a636[_0x1f1244(0xa78)],this[_0x1f1244(0xc12)](_0x4ab5eb),_0x4ab5eb['setupTextPopup'](_0x1e5d95,_0x2b0807),this[_0x1f1244(0xb08)](_0x4ab5eb);}}this[_0x1f1244(0xb15)]--;if(this[_0x1f1244(0xb15)]<=0x0)this[_0x1f1244(0xb44)]();},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xb44)]=function(){const _0x959491=_0x4a3d8d;this[_0x959491(0x2f0)]=this[_0x959491(0x2e5)];},Sprite_Battler[_0x4a3d8d(0x3c4)]['isChangingOpacity']=function(){return this['_opacityDuration']>0x0;},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x89c)]=function(){const _0x23cd22=_0x4a3d8d;this[_0x23cd22(0xc2f)]['visible']=this[_0x23cd22(0x349)][_0x23cd22(0xac9)](),this[_0x23cd22(0xc3b)]();},Sprite_Battler['prototype'][_0x4a3d8d(0xc3b)]=function(){const _0x378ae0=_0x4a3d8d;if(!this[_0x378ae0(0xc2f)])return;this[_0x378ae0(0xc2f)]['y']=this[_0x378ae0(0x5d8)]-this['y']-0x2;},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x70c)]=function(){const _0x1dcbf8=_0x4a3d8d;if(!this[_0x1dcbf8(0x349)])return;this[_0x1dcbf8(0xa67)]=this[_0x1dcbf8(0x349)]['battlerShadowScaleX'](),this[_0x1dcbf8(0x376)]=this[_0x1dcbf8(0x349)][_0x1dcbf8(0xa70)]();},Game_BattlerBase[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x7e9)]=function(){const _0x51a5a9=_0x4a3d8d,_0x1d8d36=this[_0x51a5a9(0x764)]()?this[_0x51a5a9(0x2fa)]():this[_0x51a5a9(0x382)]();if(_0x1d8d36){const _0x17de58=_0x1d8d36[_0x51a5a9(0x9ea)];if(_0x17de58['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return _0x51a5a9(0x7b6)===_0x51a5a9(0x35a)?this[_0x51a5a9(0x8ed)]()&&this[_0x51a5a9(0x8ed)]()['item']()&&!this[_0x51a5a9(0x8ed)]()[_0x51a5a9(0x95f)]():Number(RegExp['$1'])*0.01;else{if(_0x17de58[_0x51a5a9(0x591)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa70)]=function(){const _0x507d0d=_0x4a3d8d,_0x3e0bd0=this['isActor']()?this[_0x507d0d(0x2fa)]():this[_0x507d0d(0x382)]();if(_0x3e0bd0){const _0x29b9ed=_0x3e0bd0[_0x507d0d(0x9ea)];if(_0x29b9ed[_0x507d0d(0x591)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x29b9ed[_0x507d0d(0x591)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler['prototype'][_0x4a3d8d(0x7e2)]=function(){const _0x4d8839=_0x4a3d8d;if(this[_0x4d8839(0x6ee)]===Sprite_SvEnemy)return;this[_0x4d8839(0x98e)](),this[_0x4d8839(0x1cb)]();},Sprite_Battler['prototype'][_0x4a3d8d(0x1cb)]=function(){const _0x45e3c8=_0x4a3d8d,_0x2c4be4=this['_distortionSprite'];_0x2c4be4&&(_0x45e3c8(0x6b3)!==_0x45e3c8(0x92b)?(_0x2c4be4['scale']['x']=this[_0x45e3c8(0xc3a)](),_0x2c4be4['scale']['y']=this[_0x45e3c8(0x795)]()):(this['_requestRefresh']=![],_0x314d63[_0x45e3c8(0x485)][_0x45e3c8(0x436)][_0x45e3c8(0xaf0)](this)));},Sprite_Battler[_0x4a3d8d(0x3c4)]['mainSpriteScaleX']=function(){const _0x5a3572=_0x4a3d8d;let _0x540578=0x1;return _0x540578*=this[_0x5a3572(0x5ca)],_0x540578*=this[_0x5a3572(0xa07)],_0x540578;},Sprite_Battler['prototype']['mainSpriteScaleY']=function(){const _0x230de4=_0x4a3d8d;return 0x1*this[_0x230de4(0x21c)];},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x34f)]=function(){const _0x39aeac=_0x4a3d8d;return this['width']*this[_0x39aeac(0xc3a)]();},Sprite_Battler[_0x4a3d8d(0x3c4)]['mainSpriteHeight']=function(){const _0x548231=_0x4a3d8d;return this[_0x548231(0x2cc)]*this[_0x548231(0x795)]();},Sprite_Battler[_0x4a3d8d(0x3c4)]['startGrow']=function(_0x185653,_0x55a491,_0x1ca7de,_0x2ed210){const _0x461777=_0x4a3d8d;if(!this['canMove']())return;if(!this[_0x461777(0x6f2)])return;if(this[_0x461777(0x932)]===_0x185653&&this[_0x461777(0x6b8)]===_0x55a491)return;this[_0x461777(0x932)]=_0x185653,this['_targetGrowY']=_0x55a491,this['_growDuration']=_0x1ca7de,this[_0x461777(0x1f7)]=_0x1ca7de,this[_0x461777(0x8b5)]=_0x2ed210||_0x461777(0x88e),_0x1ca7de<=0x0&&(this[_0x461777(0xa07)]=this['_targetGrowX'],this[_0x461777(0x21c)]=this[_0x461777(0x6b8)]);},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x98e)]=function(){const _0x53a01b=_0x4a3d8d;if(this['_growDuration']<=0x0)return;if(!this[_0x53a01b(0x6f2)])return;const _0x43c874=this['_growDuration'],_0x16d8d6=this['_growWholeDuration'],_0xf33d13=this[_0x53a01b(0x8b5)];Imported['VisuMZ_0_CoreEngine']?_0x53a01b(0xbf9)!==_0x53a01b(0x31e)?(this[_0x53a01b(0xa07)]=this[_0x53a01b(0x5e6)](this['_growX'],this[_0x53a01b(0x932)],_0x43c874,_0x16d8d6,_0xf33d13),this['_growY']=this[_0x53a01b(0x5e6)](this[_0x53a01b(0x21c)],this[_0x53a01b(0x6b8)],_0x43c874,_0x16d8d6,_0xf33d13)):_0x400d06[_0x53a01b(0x485)][_0x53a01b(0x28b)][_0x53a01b(0xaf0)](this,_0x594260):(this['_growX']=(this[_0x53a01b(0xa07)]*(_0x43c874-0x1)+this[_0x53a01b(0x932)])/_0x43c874,this[_0x53a01b(0x21c)]=(this[_0x53a01b(0x21c)]*(_0x43c874-0x1)+this[_0x53a01b(0x6b8)])/_0x43c874);this[_0x53a01b(0xac7)]--;if(this[_0x53a01b(0xac7)]<=0x0)this[_0x53a01b(0x580)]();},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x580)]=function(){const _0x15e1bc=_0x4a3d8d;this['_growX']=this[_0x15e1bc(0x932)],this[_0x15e1bc(0x21c)]=this[_0x15e1bc(0x6b8)];},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xae8)]=function(){const _0x4da4c6=_0x4a3d8d;return this[_0x4da4c6(0xac7)]>0x0;},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x2f6)]=function(_0x235c46,_0x2d19bb,_0x3870af,_0x39be53){const _0x21ae31=_0x4a3d8d;if(!this[_0x21ae31(0x240)]())return;if(!this[_0x21ae31(0x6f2)])return;if(this['_targetSkewX']===_0x235c46&&this[_0x21ae31(0x444)]===_0x2d19bb)return;this[_0x21ae31(0x6b9)]=_0x235c46,this[_0x21ae31(0x444)]=_0x2d19bb,this[_0x21ae31(0x174)]=_0x3870af,this[_0x21ae31(0xc39)]=_0x3870af,this[_0x21ae31(0x8d5)]=_0x39be53||_0x21ae31(0x88e),_0x3870af<=0x0&&(this['_distortionSprite'][_0x21ae31(0x154)]['x']=this[_0x21ae31(0x6b9)],this[_0x21ae31(0x6f2)][_0x21ae31(0x154)]['y']=this[_0x21ae31(0x444)]);},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x4bb)]=function(){const _0x2b0b25=_0x4a3d8d;if(this['_skewDuration']<=0x0)return;if(!this['_distortionSprite'])return;const _0x5aaccd=this[_0x2b0b25(0x174)],_0x2f2265=this[_0x2b0b25(0xc39)],_0x2c53a9=this[_0x2b0b25(0x8d5)],_0x41ee9b=this[_0x2b0b25(0x6f2)];if(Imported['VisuMZ_0_CoreEngine']){if('xlGwG'!=='WMQNe')_0x41ee9b[_0x2b0b25(0x154)]['x']=this[_0x2b0b25(0x5e6)](_0x41ee9b['skew']['x'],this[_0x2b0b25(0x6b9)],_0x5aaccd,_0x2f2265,_0x2c53a9),_0x41ee9b[_0x2b0b25(0x154)]['y']=this[_0x2b0b25(0x5e6)](_0x41ee9b[_0x2b0b25(0x154)]['y'],this[_0x2b0b25(0x444)],_0x5aaccd,_0x2f2265,_0x2c53a9);else{if(_0x519787[_0x2b0b25(0xc4d)]&&_0x192619['uiInputPosition']!==_0x1ea5bc)return _0x229d44[_0x2b0b25(0x8eb)];else{if(this['battleLayoutStyle']()===_0x2b0b25(0xa18))return![];else{return _0x1329fd[_0x2b0b25(0x3c4)][_0x2b0b25(0xc46)][_0x2b0b25(0xaf0)](this);;}}}}else _0x41ee9b[_0x2b0b25(0x154)]['x']=(_0x41ee9b[_0x2b0b25(0x154)]['x']*(_0x5aaccd-0x1)+this[_0x2b0b25(0x6b9)])/_0x5aaccd,_0x41ee9b['skew']['y']=(_0x41ee9b[_0x2b0b25(0x154)]['y']*(_0x5aaccd-0x1)+this[_0x2b0b25(0x444)])/_0x5aaccd;this[_0x2b0b25(0x174)]--;if(this['_skewDuration']<=0x0)this[_0x2b0b25(0x1f5)]();},Sprite_Battler['prototype']['onSkewEnd']=function(){const _0x4ce08d=_0x4a3d8d;this[_0x4ce08d(0x6f2)][_0x4ce08d(0x154)]['x']=this[_0x4ce08d(0x6b9)],this[_0x4ce08d(0x6f2)][_0x4ce08d(0x154)]['y']=this[_0x4ce08d(0x444)];},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x665)]=function(){const _0x5ebd45=_0x4a3d8d;return this[_0x5ebd45(0x174)]>0x0;},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xc30)]=function(_0x45092f,_0x220ed2,_0x71001,_0x1ee6a6){const _0x1c8947=_0x4a3d8d;if(!this[_0x1c8947(0x240)]())return;if(!this[_0x1c8947(0x6f2)])return;if(this[_0x1c8947(0x23f)]===_0x45092f)return;this[_0x1c8947(0x23f)]=_0x45092f,this[_0x1c8947(0x85d)]=_0x220ed2,this[_0x1c8947(0x84d)]=_0x220ed2,this[_0x1c8947(0xb8e)]=_0x71001||_0x1c8947(0x88e),this[_0x1c8947(0x2d3)]=_0x1ee6a6,this['_angleRevertOnFinish']===undefined&&(this[_0x1c8947(0x2d3)]=!![]),_0x220ed2<=0x0&&(this[_0x1c8947(0xb54)]=_0x45092f,this['_angleRevertOnFinish']&&(this[_0x1c8947(0x23f)]=0x0,this['_currentAngle']=0x0));},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xad0)]=function(){const _0x16dffb=_0x4a3d8d;this['updateAngleCalculations'](),this[_0x16dffb(0x8b1)]();},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x264)]=function(){const _0x5657c1=_0x4a3d8d;if(this['_angleDuration']<=0x0)return;const _0x445cd7=this[_0x5657c1(0x85d)],_0x2105f7=this[_0x5657c1(0x84d)],_0x28c033=this[_0x5657c1(0xb8e)];if(Imported[_0x5657c1(0x714)]){if(_0x5657c1(0x641)==='dEsUn')this['_currentAngle']=this['applyEasing'](this[_0x5657c1(0xb54)],this[_0x5657c1(0x23f)],_0x445cd7,_0x2105f7,_0x28c033);else{if(this['_cache']['svAnchorX']!==_0xbf5427)return this['_cache'][_0x5657c1(0x9ac)];return this['actor']()[_0x5657c1(0x9ea)][_0x5657c1(0x591)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache'][_0x5657c1(0x9ac)]=_0x2ec4b9(_0x4d55d1['$1']),this[_0x5657c1(0x635)][_0x5657c1(0xa5e)]=_0x316ef6(_0x5205e8['$2'])):this[_0x5657c1(0x635)][_0x5657c1(0x9ac)]=_0x394016[_0x5657c1(0x3c4)][_0x5657c1(0x9b0)]['call'](this),this[_0x5657c1(0x635)][_0x5657c1(0x9ac)];}}else'ZUNQx'===_0x5657c1(0x3ad)?this[_0x5657c1(0xb54)]=(this[_0x5657c1(0xb54)]*(_0x445cd7-0x1)+this[_0x5657c1(0x23f)])/_0x445cd7:_0x397d86['damage'][_0x5657c1(0x9fa)]=!![];this[_0x5657c1(0x85d)]--;if(this[_0x5657c1(0x85d)]<=0x0)this[_0x5657c1(0x480)]();},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x480)]=function(){const _0x1d1aba=_0x4a3d8d;this[_0x1d1aba(0xb54)]=this[_0x1d1aba(0x23f)],this[_0x1d1aba(0x2d3)]&&(this[_0x1d1aba(0x23f)]=0x0,this[_0x1d1aba(0xb54)]=0x0);},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x4ef)]=function(){const _0x3c2d1b=_0x4a3d8d;return this[_0x3c2d1b(0x85d)]>0x0;},Sprite_Battler['prototype'][_0x4a3d8d(0x8b1)]=function(){const _0x5a5d70=_0x4a3d8d;if(!this[_0x5a5d70(0x6f2)])return;const _0x627299=this[_0x5a5d70(0xb54)],_0x23d879=this[_0x5a5d70(0x3cb)]['x'],_0x369673=this['_battler']['isActor']()?-0x1:0x1;this[_0x5a5d70(0x6f2)]['angle']=_0x627299*_0x23d879*_0x369673;const _0x12752c=this[_0x5a5d70(0x6f2)][_0x5a5d70(0x3cb)]['y'];this[_0x5a5d70(0x6f2)]['y']=this[_0x5a5d70(0x2cc)]*-0.5*(0x2-_0x12752c),this[_0x5a5d70(0x6f2)]['y']=Math['ceil'](this[_0x5a5d70(0x6f2)]['y']);const _0xe9dca9=[this[_0x5a5d70(0x48a)],this['_svBattlerSprite'],this[_0x5a5d70(0xb7e)]];for(const _0x169372 of _0xe9dca9){if(_0x5a5d70(0x30b)===_0x5a5d70(0x1b1)){const _0x41584f=this[_0x5a5d70(0x49d)]()[_0x5a5d70(0x918)];return _0x41584f[_0x5a5d70(0x591)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);}else{if(!_0x169372)continue;_0x169372['y']=this['height']*0.5;}}if(this[_0x5a5d70(0xc2f)]){if('UupCP'===_0x5a5d70(0x50e)){const _0x285633=this['itemLineRect'](this[_0x5a5d70(0xc07)]());let _0x1e00f3=this[_0x5a5d70(0xc1d)](this[_0x5a5d70(0xc07)]());_0x1e00f3=_0x1e00f3[_0x5a5d70(0x809)](/\\I\[(\d+)\]/gi,''),_0xf6ffad['resetFontSettings'](),this['commandNameWindowDrawBackground'](_0x1e00f3,_0x285633),this[_0x5a5d70(0xb50)](_0x1e00f3,_0x285633),this[_0x5a5d70(0xaa9)](_0x1e00f3,_0x285633);}else this['_shadowScaleX']=this[_0x5a5d70(0xa67)]??0x1,this[_0x5a5d70(0x376)]=this['_shadowScaleY']??0x1,this['_shadowSprite'][_0x5a5d70(0x3cb)]['x']=this[_0x5a5d70(0x6f2)][_0x5a5d70(0x3cb)]['x']*this[_0x5a5d70(0xa67)],this['_shadowSprite'][_0x5a5d70(0x3cb)]['y']=this['_distortionSprite'][_0x5a5d70(0x3cb)]['y']*this[_0x5a5d70(0x376)];}},VisuMZ[_0x4a3d8d(0x485)]['Sprite_Actor_createStateSprite']=Sprite_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x7ca)],Sprite_Actor[_0x4a3d8d(0x3c4)]['createStateSprite']=function(){const _0x53931a=_0x4a3d8d;VisuMZ['BattleCore'][_0x53931a(0xb04)][_0x53931a(0xaf0)](this),VisuMZ[_0x53931a(0x485)]['Settings'][_0x53931a(0x4c8)][_0x53931a(0xaf8)]&&(_0x53931a(0x626)!==_0x53931a(0x626)?_0x39e980['actionBattleCoreJS']('PostEndActionJS'):this['createHpGaugeSprite']());},VisuMZ[_0x4a3d8d(0x485)]['Sprite_Enemy_createStateIconSprite']=Sprite_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x96a)],Sprite_Enemy['prototype'][_0x4a3d8d(0x96a)]=function(){const _0x5a50f9=_0x4a3d8d;if(VisuMZ['BattleCore'][_0x5a50f9(0xb75)][_0x5a50f9(0x4c8)][_0x5a50f9(0xb84)]){if(_0x5a50f9(0xa94)===_0x5a50f9(0xa94))this['createHpGaugeSprite']();else{const _0x2135fb=this[_0x5a50f9(0xbd8)]();if(_0x2135fb&&this[_0x5a50f9(0x2f0)]<0xff)this[_0x5a50f9(0x2f0)]+=0x10;else!_0x2135fb&&this[_0x5a50f9(0x2f0)]>0x0&&(this['opacity']-=0x10);}}VisuMZ[_0x5a50f9(0x485)][_0x5a50f9(0x175)][_0x5a50f9(0xaf0)](this);},Sprite_Battler['prototype'][_0x4a3d8d(0xb62)]=function(){const _0x59913=_0x4a3d8d;if(!ConfigManager[_0x59913(0x47e)])return;if(this[_0x59913(0x6ee)]===Sprite_SvEnemy)return;const _0x4d49d7=VisuMZ[_0x59913(0x485)][_0x59913(0xb75)][_0x59913(0x4c8)],_0x5fd2bb=new Sprite_HpGauge();_0x5fd2bb[_0x59913(0xc3d)]['x']=_0x4d49d7[_0x59913(0x318)],_0x5fd2bb[_0x59913(0xc3d)]['y']=_0x4d49d7[_0x59913(0x4e4)],_0x5fd2bb[_0x59913(0x3cb)]['x']=_0x5fd2bb['scale']['y']=_0x4d49d7[_0x59913(0x56e)],this[_0x59913(0x220)]=_0x5fd2bb,this[_0x59913(0x960)](this[_0x59913(0x220)]),Spriteset_Battle['ANTI_TINT_UI']&&BattleManager[_0x59913(0xa99)](this['_hpGaugeSprite']);},VisuMZ[_0x4a3d8d(0x485)]['Sprite_Battler_setBattler']=Sprite_Battler['prototype']['setBattler'],Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x1ba)]=function(_0x367719){const _0x582b0d=_0x4a3d8d,_0x14d30a=this[_0x582b0d(0x349)];VisuMZ[_0x582b0d(0x485)]['Sprite_Battler_setBattler']['call'](this,_0x367719),this[_0x582b0d(0x433)](_0x367719);if(_0x14d30a!==_0x367719)this[_0x582b0d(0x70c)]();},Sprite_Battler['prototype']['setupHpGaugeSprite']=function(_0x5174fd){const _0x528d4a=_0x4a3d8d;if(!_0x5174fd)return;if(!this[_0x528d4a(0x220)])return;if(_0x5174fd[_0x528d4a(0x764)]()){}else{if(_0x5174fd[_0x528d4a(0x87a)]()){if(this['constructor']===Sprite_SvEnemy&&!_0x5174fd[_0x528d4a(0xac9)]())return;}}this[_0x528d4a(0x220)][_0x528d4a(0x4da)](_0x5174fd,'hp');},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x8cb)]=function(){const _0x4b816a=_0x4a3d8d;return this[_0x4b816a(0x349)]&&this['_battler']['hasStaticSvBattler']();},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x554)]=function(){const _0x50eef9=_0x4a3d8d,_0x108e5f=this[_0x50eef9(0x48a)][_0x50eef9(0x2dd)];if(!_0x108e5f)return;const _0x12e3dd=_0x108e5f['width'];let _0x5016ff=_0x108e5f[_0x50eef9(0x2cc)];if(this['_battler'][_0x50eef9(0x2b2)]()){if(_0x50eef9(0x9a1)!=='VTkZS'){this[_0x50eef9(0x722)]=this[_0x50eef9(0x90f)]();const _0x32c599=_0x3af604[_0x50eef9(0x485)][_0x50eef9(0xb75)]['BattleLayout'];_0x32c599[_0x50eef9(0x239)]&&(this['opacity']=0x0);}else{if(this[_0x50eef9(0x547)])_0x5016ff=Math[_0x50eef9(0x559)](0x0,this[_0x50eef9(0x547)][_0x50eef9(0x2cc)]-0x4);}}this[_0x50eef9(0x48a)]['setFrame'](0x0,0x0,_0x12e3dd,_0x5016ff),this['setFrame'](0x0,0x0,_0x12e3dd,_0x5016ff);},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x606)]=function(){const _0x3ca5eb=_0x4a3d8d;if(!this[_0x3ca5eb(0x349)])return;if(!this[_0x3ca5eb(0x220)])return;const _0x468e57=VisuMZ[_0x3ca5eb(0x485)][_0x3ca5eb(0xb75)]['HpGauge'],_0x15d298=this[_0x3ca5eb(0x220)];_0x15d298['visible']=this[_0x3ca5eb(0x6ed)]();const _0x32774d=_0x468e57['OffsetX'],_0x2a3c92=_0x468e57[_0x3ca5eb(0xa65)];_0x15d298['x']=_0x32774d,_0x15d298['x']+=this[_0x3ca5eb(0x349)]['battleUIOffsetX'](),_0x15d298['y']=-this[_0x3ca5eb(0x2cc)]+_0x2a3c92,_0x15d298['y']+=this[_0x3ca5eb(0x349)][_0x3ca5eb(0x1ae)](),Spriteset_Battle[_0x3ca5eb(0x76d)]&&SceneManager[_0x3ca5eb(0x3ff)][_0x3ca5eb(0x94c)]&&(_0x3ca5eb(0x429)!=='fGqfm'?this[_0x3ca5eb(0x6d3)]=null:(_0x15d298['x']+=this['x'],_0x15d298['y']+=this['y']));},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x6ed)]=function(){const _0x1cbbf1=_0x4a3d8d;if(!this[_0x1cbbf1(0x349)])return![];if(this['_battler']['isActor']())return!![];if(this[_0x1cbbf1(0x349)]['isHidden']())return![];if(this[_0x1cbbf1(0x2f0)]<=0x0)return![];const _0x33bd16=this[_0x1cbbf1(0x349)][_0x1cbbf1(0x382)]()[_0x1cbbf1(0x9ea)];if(_0x33bd16[_0x1cbbf1(0x591)](/<SHOW HP GAUGE>/i))return!![];if(_0x33bd16['match'](/<HIDE HP GAUGE>/i))return![];const _0x31b9d8=VisuMZ['BattleCore'][_0x1cbbf1(0xb75)]['HpGauge'];if(_0x31b9d8['RequiresDefeat']){if(_0x31b9d8[_0x1cbbf1(0x523)]&&BattleManager[_0x1cbbf1(0x21f)]())return!![];if(this[_0x1cbbf1(0x349)][_0x1cbbf1(0xba6)])return![];return this[_0x1cbbf1(0x349)][_0x1cbbf1(0x3b0)]();}return!![];},VisuMZ['BattleCore'][_0x4a3d8d(0x51f)]=Sprite_Battler['prototype'][_0x4a3d8d(0xc1a)],Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xc1a)]=function(){const _0x325da9=_0x4a3d8d;if(!this[_0x325da9(0x349)])return![];if(this['_homeDuration']>0x0)return!![];return VisuMZ[_0x325da9(0x485)]['Sprite_Battler_isMoving'][_0x325da9(0xaf0)](this);},VisuMZ['BattleCore'][_0x4a3d8d(0x1b4)]=Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x7aa)],Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x7aa)]=function(_0x20c099,_0xb41e8a,_0x38a117){const _0x38b386=_0x4a3d8d;this[_0x38b386(0x240)]()&&VisuMZ[_0x38b386(0x485)][_0x38b386(0x1b4)][_0x38b386(0xaf0)](this,_0x20c099,_0xb41e8a,_0x38a117);},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x240)]=function(){const _0x561998=_0x4a3d8d;if(this[_0x561998(0x349)]&&this[_0x561998(0x349)][_0x561998(0x2b2)]())return![];if(this[_0x561998(0x349)]&&!this[_0x561998(0x349)][_0x561998(0x671)]())return![];return $gameSystem[_0x561998(0x957)]();},Sprite_Battler['prototype'][_0x4a3d8d(0x5a4)]=function(){},Sprite_Battler['prototype'][_0x4a3d8d(0x938)]=function(){this['startMove'](0x0,0x0,0xc);},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x254)]=function(){},Sprite_Battler[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x5b0)]=function(){const _0x3641cd=_0x4a3d8d,_0x145ab3=VisuMZ['BattleCore'][_0x3641cd(0xb75)]['Actor'],_0x1ea7ef=this[_0x3641cd(0x349)]&&this['_battler'][_0x3641cd(0x764)]()?0x1:-0x1,_0xdd38c6=this[_0x3641cd(0x232)]-this[_0x3641cd(0x966)]+_0x1ea7ef*_0x145ab3[_0x3641cd(0x53a)],_0x2af37c=this['_baseY']-this[_0x3641cd(0x649)]+_0x1ea7ef*_0x145ab3[_0x3641cd(0x44d)],_0x450ee8=_0x145ab3[_0x3641cd(0x887)];this[_0x3641cd(0x7aa)](_0xdd38c6,_0x2af37c,_0x450ee8);},VisuMZ['BattleCore'][_0x4a3d8d(0x693)]=Sprite_Actor['prototype'][_0x4a3d8d(0x6e4)],Sprite_Actor['prototype']['initMembers']=function(){const _0x14f039=_0x4a3d8d;VisuMZ[_0x14f039(0x485)]['Sprite_Actor_initMembers'][_0x14f039(0xaf0)](this),this[_0x14f039(0x676)]();},Sprite_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x235)]=function(){const _0xcd398e=_0x4a3d8d;return this[_0xcd398e(0x6f2)]||this[_0xcd398e(0x48a)]||this;},VisuMZ['BattleCore'][_0x4a3d8d(0x31c)]=Sprite_Actor[_0x4a3d8d(0x3c4)]['moveToStartPosition'],Sprite_Actor[_0x4a3d8d(0x3c4)]['moveToStartPosition']=function(){},Sprite_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x854)]=function(_0x573cd0){const _0x20bbec=_0x4a3d8d;if(SceneManager[_0x20bbec(0xc13)]())return;if(!_0x573cd0)return;if(!_0x573cd0[_0x20bbec(0x240)]())return;VisuMZ[_0x20bbec(0x485)][_0x20bbec(0x31c)]['call'](this);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x628)]=Sprite_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x60c)],Sprite_Actor['prototype'][_0x4a3d8d(0x60c)]=function(_0xc320fe){const _0x5b77c6=_0x4a3d8d;if(VisuMZ[_0x5b77c6(0x485)][_0x5b77c6(0xb75)]['Actor'][_0x5b77c6(0x4b6)])VisuMZ[_0x5b77c6(0x485)]['Settings'][_0x5b77c6(0x4e0)][_0x5b77c6(0x4b6)][_0x5b77c6(0xaf0)](this,_0xc320fe);else{if('LPCic'==='MzyAL'){if(!_0x481b39)return 0x0;let _0x3101fa=0x0;const _0x319e73=_0x2dbb84[_0x5b77c6(0x9ea)];return _0x319e73[_0x5b77c6(0x591)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x3101fa+=_0x568f71(_0x26cd94['$1'])),_0x319e73[_0x5b77c6(0x591)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x3101fa+=_0x4293cf(_0x5cb754['$1'])),_0x3101fa;}else VisuMZ['BattleCore'][_0x5b77c6(0x628)]['call'](this,_0xc320fe);}},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x34c)]=Sprite_Actor[_0x4a3d8d(0x3c4)]['setBattler'],Sprite_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x1ba)]=function(_0x26a68c){const _0x168509=_0x4a3d8d;VisuMZ[_0x168509(0x485)]['Sprite_Actor_setBattler'][_0x168509(0xaf0)](this,_0x26a68c),this[_0x168509(0x6a1)](_0x26a68c);},Sprite_Actor['prototype'][_0x4a3d8d(0x6a1)]=function(_0x530659){const _0x2dcbe3=_0x4a3d8d;if(!_0x530659)return;if(!this[_0x2dcbe3(0x48a)])return;this['_mainSprite']['anchor']['x']=this[_0x2dcbe3(0x6dd)][_0x2dcbe3(0x9b0)](),this['_mainSprite'][_0x2dcbe3(0xc3d)]['y']=this['_actor'][_0x2dcbe3(0x5ce)](),this[_0x2dcbe3(0x6e1)]();},VisuMZ[_0x4a3d8d(0x485)]['Sprite_Actor_update']=Sprite_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x372)],Sprite_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x372)]=function(){const _0x1c1564=_0x4a3d8d;VisuMZ[_0x1c1564(0x485)][_0x1c1564(0x734)][_0x1c1564(0xaf0)](this);if(this[_0x1c1564(0x6dd)]){if(_0x1c1564(0x164)!==_0x1c1564(0x9ed))this[_0x1c1564(0x40f)](),this[_0x1c1564(0x81b)]();else{if(!_0x365402)return![];if(!_0x34f6df[_0x1c1564(0x30c)])return![];if(!_0x64e47d[_0x1c1564(0xb9c)][0x0])return![];if(_0x5c2160[_0x1c1564(0xb9c)][0x0][_0x1c1564(0x764)]&&!_0x2f3329['targetObjects'][0x0][_0x1c1564(0x764)]())return![];if(_0x5b666c[_0x1c1564(0x957)]())return![];if(!this[_0x1c1564(0x50d)]())return![];if(_0x1c6df2[_0x1c1564(0x6ee)]===_0x3e0fc5){if(_0x42dad4['_animation'][_0x1c1564(0x9c9)]!==0x0)return![];}else{if(_0x2245c1[_0x1c1564(0x6ee)]===_0x2dc3ea){if(_0x19f4b2[_0x1c1564(0x30c)][_0x1c1564(0xb96)]===0x3)return![];}}return!![];const _0x14cf2e=_0x4816bf[_0x1c1564(0x3c4)][_0x1c1564(0x801)]();return['xp',_0x1c1564(0x9e1)]['contains'](_0x14cf2e);}}},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x8f7)]=Sprite_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x1fd)],Sprite_Actor[_0x4a3d8d(0x3c4)]['updateBitmap']=function(){const _0x5eb27f=_0x4a3d8d;VisuMZ['BattleCore'][_0x5eb27f(0x8f7)][_0x5eb27f(0xaf0)](this),this[_0x5eb27f(0x48a)]&&this['_mainSprite'][_0x5eb27f(0x2dd)]&&this[_0x5eb27f(0x349)]&&(this[_0x5eb27f(0x48a)][_0x5eb27f(0x2dd)][_0x5eb27f(0x8a5)]!==this[_0x5eb27f(0x349)][_0x5eb27f(0x5f5)]()&&(_0x5eb27f(0x16a)!==_0x5eb27f(0xc05)?this['_mainSprite']['bitmap'][_0x5eb27f(0x8a5)]=this[_0x5eb27f(0x349)][_0x5eb27f(0x5f5)]():(this[_0x5eb27f(0xb34)]=![],this[_0x5eb27f(0xbe4)](),this[_0x5eb27f(0xbc5)]())));},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x65a)]=Sprite_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x89c)],Sprite_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x89c)]=function(){const _0xf29733=_0x4a3d8d;VisuMZ[_0xf29733(0x485)][_0xf29733(0x65a)]['call'](this),this[_0xf29733(0x489)]();},Sprite_Actor['prototype'][_0x4a3d8d(0x489)]=function(){const _0x2ef182=_0x4a3d8d;if(!this[_0x2ef182(0x48a)])return;if(!this[_0x2ef182(0xc2f)])return;this[_0x2ef182(0x6e1)](),this[_0x2ef182(0xc3b)]();},Sprite_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x40f)]=function(){const _0x194b26=_0x4a3d8d;this[_0x194b26(0x819)][_0x194b26(0x3cb)]['x']=0x1/(this[_0x194b26(0x3cb)]['x']||0.001),this[_0x194b26(0x819)][_0x194b26(0x3cb)]['y']=0x1/(this[_0x194b26(0x3cb)]['y']||0.001);},Sprite_Actor['prototype']['updateStyleOpacity']=function(){const _0x3e22be=_0x4a3d8d;if(!$gameSystem[_0x3e22be(0x957)]()&&this[_0x3e22be(0x6ee)]===Sprite_Actor){const _0x3a0b76=Scene_Battle['prototype'][_0x3e22be(0x801)]();[_0x3e22be(0x646),_0x3e22be(0x343),'portrait','border']['includes'](_0x3a0b76)&&(this[_0x3e22be(0x2f0)]=0x0);}},Sprite_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x1ef)]=function(){const _0x541b6c=_0x4a3d8d,_0x1cdd19=this[_0x541b6c(0x6dd)];if(_0x1cdd19){if(_0x541b6c(0x22a)===_0x541b6c(0x22a)){const _0x3ad92e=_0x1cdd19[_0x541b6c(0xa3a)]();if(_0x1cdd19[_0x541b6c(0xc48)]()||_0x1cdd19[_0x541b6c(0x990)]())_0x541b6c(0x393)===_0x541b6c(0x955)?this[_0x541b6c(0x48a)][_0x541b6c(0x95a)](_0x292eb6):this[_0x541b6c(0x7dc)](_0x541b6c(0x460));else{if(_0x3ad92e===0x3)this['startMotion'](_0x541b6c(0x75f));else{if(_0x3ad92e===0x2){if(_0x541b6c(0x60f)!==_0x541b6c(0x60f)){if(!_0x45ad12[_0x541b6c(0x930)]())return;if(!this['_damagePopupArray'])this[_0x541b6c(0x37a)]();this[_0x541b6c(0x3c5)]();const _0x1a2073=this[_0x541b6c(0x28e)]();if(_0x1a2073)_0x1a2073['setupDamagePopup']();}else this[_0x541b6c(0x7dc)](_0x541b6c(0x8ac));}else{if(this['forceEscapeSprite'])this['startMotion']('escape');else{if(_0x1cdd19[_0x541b6c(0xa54)]()){if(_0x541b6c(0x882)!=='YIRsB'){return _0x5c1ebe[_0x541b6c(0x3c4)][_0x541b6c(0xc46)][_0x541b6c(0xaf0)](this);;}else this[_0x541b6c(0x7dc)](_0x541b6c(0x6c3));}else{if(_0x1cdd19['isChanting']()){if('NwfVL'!==_0x541b6c(0xa1b)){this[_0x541b6c(0x192)]=!![];const _0x9688a=this['equipSlots']();for(let _0x27b5e6=0x0;_0x27b5e6<_0x9688a['length'];_0x27b5e6++){_0x9688a[_0x27b5e6]===0x1&&this[_0x541b6c(0x454)]!==_0x27b5e6&&(_0x36b4fe[_0x27b5e6]=null);}this[_0x541b6c(0x192)]=_0x4db943;}else this['startMotion'](_0x541b6c(0x9fc));}else{if(_0x1cdd19[_0x541b6c(0x962)]()||_0x1cdd19[_0x541b6c(0x856)]())this[_0x541b6c(0x7dc)](_0x541b6c(0x8e0));else{if(_0x3ad92e===0x1)this[_0x541b6c(0x7dc)]('abnormal');else{if(_0x1cdd19['isDying']())this[_0x541b6c(0x7dc)](_0x541b6c(0x2c8));else{if(_0x1cdd19['isUndecided']())this[_0x541b6c(0x7dc)](_0x541b6c(0x460));else{if(_0x1cdd19[_0x541b6c(0x8ed)]()){if(_0x541b6c(0x6a4)===_0x541b6c(0x6a4))this[_0x541b6c(0x7dc)](_0x541b6c(0x6c3));else return!![];}else this[_0x541b6c(0x7dc)](_0x541b6c(0x460));}}}}}}}}}}}else _0x3ba4d6=_0x3602a3['concat'](_0x3c4a35[_0x541b6c(0xbb1)](_0x404309));}},Sprite_Actor['prototype'][_0x4a3d8d(0x254)]=function(){const _0x50af49=_0x4a3d8d,_0xef3f61=0xa,_0x42e7b8=0x12c*_0xef3f61,_0x22b88d=0x1e*_0xef3f61;this[_0x50af49(0x7aa)](_0x42e7b8,0x0,_0x22b88d);},Sprite_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x5c2)]=function(){const _0x3b66cf=_0x4a3d8d;Sprite_Battler[_0x3b66cf(0x3c4)]['onMoveEnd'][_0x3b66cf(0xaf0)](this);},Sprite_Actor['prototype'][_0x4a3d8d(0xbe0)]=function(){const _0x1b5e21=_0x4a3d8d;return Sprite_Battler[_0x1b5e21(0xb59)];},Sprite_Weapon[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x23d)]=function(){const _0x42d805=_0x4a3d8d;return Sprite_Battler[_0x42d805(0xb59)];},Sprite_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x718)]=function(){},Sprite_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x3fc)]=function(){},Sprite_Actor[_0x4a3d8d(0x3c4)]['updateMotionCount']=function(){const _0x5ca5eb=_0x4a3d8d;if(this[_0x5ca5eb(0x581)]&&++this[_0x5ca5eb(0xc4a)]>=this[_0x5ca5eb(0xbe0)]()){if(_0x5ca5eb(0x5eb)!==_0x5ca5eb(0x140)){if(this[_0x5ca5eb(0x581)][_0x5ca5eb(0x5cd)])_0x5ca5eb(0x1ec)===_0x5ca5eb(0x8f8)?this['_phase']='turn':this[_0x5ca5eb(0x401)]=(this[_0x5ca5eb(0x401)]+0x1)%0x4;else this[_0x5ca5eb(0x401)]<0x2?this[_0x5ca5eb(0x401)]++:this[_0x5ca5eb(0x1ef)]();this['_motionCount']=0x0;}else{const _0x31a127=this['isActor']()?this['actor']():this['enemy']();if(_0x31a127){const _0x53f3e8=_0x31a127[_0x5ca5eb(0x9ea)];if(_0x53f3e8[_0x5ca5eb(0x591)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return _0x47472e(_0x5835fb['$1'])*0.01;else{if(_0x53f3e8[_0x5ca5eb(0x591)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return _0x4c1a67(_0x367948['$1'])||0x0;}}return 0x1;}}},Sprite_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x9fb)]=function(_0x1e58aa){const _0x16da09=_0x4a3d8d;if(_0x1e58aa===_0x16da09(0x250))this[_0x16da09(0x673)]=!![];if(this[_0x16da09(0x349)]&&this[_0x16da09(0x349)]['isDead']()){if(_0x16da09(0x1c6)===_0x16da09(0x44f)){if(_0x52ba41[_0x16da09(0x9dc)]())return![];}else{this[_0x16da09(0x581)]=Sprite_Actor[_0x16da09(0x4a8)][_0x16da09(0x75f)];return;}}const _0x23f48b=Sprite_Actor['MOTIONS'][_0x1e58aa];this[_0x16da09(0x581)]=_0x23f48b,this[_0x16da09(0xc4a)]=0x0,this['_pattern']=0x0;},Sprite_Actor['prototype'][_0x4a3d8d(0xa29)]=function(_0x32bca2){const _0x466248=_0x4a3d8d;if(this['hasStaticSvBattler']())return;this['adjustWeaponSpriteOffset'](),this[_0x466248(0x4df)][_0x466248(0x4da)](_0x32bca2),this[_0x466248(0x6dd)][_0x466248(0x4fa)]();},Sprite_Actor['prototype'][_0x4a3d8d(0x2a8)]=function(){const _0x521c9e=_0x4a3d8d;let _0x184dda=-0x10,_0x289ef8=this['height']*0.5;const _0x27c034=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0xe0a05b=this[_0x521c9e(0x349)][_0x521c9e(0x7e0)]()[_0x521c9e(0xa4a)](_0x110cbe=>_0x110cbe&&_0x110cbe['note'][_0x521c9e(0x591)](_0x27c034)?Number(RegExp['$1']):0x0),_0x2cf01d=this['_battler'][_0x521c9e(0x7e0)]()[_0x521c9e(0xa4a)](_0x3eefed=>_0x3eefed&&_0x3eefed[_0x521c9e(0x9ea)]['match'](_0x27c034)?Number(RegExp['$2']):0x0);_0x184dda=_0xe0a05b[_0x521c9e(0x544)]((_0x9c4ae8,_0x52bb07)=>_0x9c4ae8+_0x52bb07,_0x184dda),_0x289ef8=_0x2cf01d['reduce']((_0x2e2fac,_0x2a45ad)=>_0x2e2fac+_0x2a45ad,_0x289ef8),this[_0x521c9e(0x4df)]['x']=_0x184dda,this[_0x521c9e(0x4df)]['y']=_0x289ef8,this['_weaponSprite'][_0x521c9e(0x372)]();},Sprite_Weapon[_0x4a3d8d(0x3c4)]['setup']=function(_0x274c31){const _0x1f608d=_0x4a3d8d;this[_0x1f608d(0x5a7)]=_0x274c31,this[_0x1f608d(0x486)]=-0x1,this[_0x1f608d(0x401)]=0x0,this[_0x1f608d(0x56b)](),this[_0x1f608d(0x6f6)]();},Sprite_Actor[_0x4a3d8d(0x3c4)]['updateTargetPosition']=function(){},Sprite_Actor[_0x4a3d8d(0x3c4)]['stepForward']=function(){const _0x5b9e24=_0x4a3d8d,_0x27dc0b=VisuMZ[_0x5b9e24(0x485)][_0x5b9e24(0xb75)]['ActionSequence'],_0x4cf2f1=_0x27dc0b[_0x5b9e24(0x2c9)],_0x4a8499=_0x27dc0b[_0x5b9e24(0x187)],_0x131710=_0x27dc0b[_0x5b9e24(0xbe2)];this['startMove'](-_0x4cf2f1,-_0x4a8499,_0x131710);},VisuMZ['BattleCore'][_0x4a3d8d(0x46f)]=Sprite_Actor['prototype']['updateFrame'],Sprite_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x6f6)]=function(){const _0x398a3e=_0x4a3d8d;this[_0x398a3e(0x8cb)]()?this[_0x398a3e(0x554)]():_0x398a3e(0x24e)!==_0x398a3e(0x6d9)?(this['applyFreezeMotionFrames'](),VisuMZ[_0x398a3e(0x485)][_0x398a3e(0x46f)][_0x398a3e(0xaf0)](this)):(this['_battlerContainer']=new _0x50c658(),this[_0x398a3e(0x470)][_0x398a3e(0x960)](this['_battlerContainer']));},Sprite_Actor['prototype']['applyFreezeMotionFrames']=function(){const _0x3755eb=_0x4a3d8d;if(this[_0x3755eb(0x349)]&&this[_0x3755eb(0x349)][_0x3755eb(0x7d9)]){const _0x293918=this[_0x3755eb(0x349)][_0x3755eb(0x7d9)];this[_0x3755eb(0x581)]=Sprite_Actor[_0x3755eb(0x4a8)][_0x293918[_0x3755eb(0x14a)]],this[_0x3755eb(0x401)]=_0x293918[_0x3755eb(0x99e)];const _0x1f88c3=this[_0x3755eb(0x4df)];_0x1f88c3['freezeFrame'](_0x293918[_0x3755eb(0x970)],_0x293918[_0x3755eb(0x99e)]),this[_0x3755eb(0x2a8)]();}},Sprite_Weapon[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x63e)]=function(_0x24c792,_0x4b5d09){const _0x507ae5=_0x4a3d8d;this[_0x507ae5(0x5a7)]=_0x24c792,this[_0x507ae5(0x486)]=-Infinity,this[_0x507ae5(0x401)]=_0x4b5d09,this[_0x507ae5(0x56b)](),this['updateFrame']();},Sprite_Enemy['prototype'][_0x4a3d8d(0x6e4)]=function(){const _0x1f0aa0=_0x4a3d8d;Sprite_Battler[_0x1f0aa0(0x3c4)][_0x1f0aa0(0x6e4)][_0x1f0aa0(0xaf0)](this),this[_0x1f0aa0(0xa22)]=null,this[_0x1f0aa0(0x8a8)]=![],this[_0x1f0aa0(0x47c)]='',this[_0x1f0aa0(0x4ff)]=0x0,this[_0x1f0aa0(0x25d)]=null,this[_0x1f0aa0(0x498)]=0x0,this['_shake']=0x0,this[_0x1f0aa0(0x1e6)](),this[_0x1f0aa0(0x96a)]();},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x3a2)]=Sprite_Enemy['prototype']['update'],Sprite_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x372)]=function(){const _0x427dee=_0x4a3d8d;VisuMZ[_0x427dee(0x485)]['Sprite_Enemy_update'][_0x427dee(0xaf0)](this),this[_0x427dee(0x6e1)]();},Sprite_Enemy['prototype'][_0x4a3d8d(0x1e6)]=function(){const _0x2ad4a3=_0x4a3d8d;this[_0x2ad4a3(0x48a)]=new Sprite(),this[_0x2ad4a3(0x48a)][_0x2ad4a3(0xc3d)]['x']=0.5,this[_0x2ad4a3(0x48a)][_0x2ad4a3(0xc3d)]['y']=0x1,this[_0x2ad4a3(0x960)](this[_0x2ad4a3(0x48a)]),this[_0x2ad4a3(0x676)]();},Sprite_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x235)]=function(){const _0x2e0b65=_0x4a3d8d;return this[_0x2e0b65(0x6f2)]||this[_0x2e0b65(0x48a)]||this;},Sprite_Enemy[_0x4a3d8d(0x3c4)]['loadBitmap']=function(_0x37287f){const _0x2b2273=_0x4a3d8d;this[_0x2b2273(0x2dd)]=new Bitmap(0x1,0x1);if(this[_0x2b2273(0xac9)]()){const _0x49873e=this[_0x2b2273(0xa22)]['svBattlerData']();this[_0x2b2273(0x2dd)]=new Bitmap(_0x49873e[_0x2b2273(0xb49)],_0x49873e[_0x2b2273(0x2cc)]),this['_mainSprite'][_0x2b2273(0x2dd)]=new Bitmap(0x1,0x1);}else{if($gameSystem[_0x2b2273(0x957)]()){if(_0x2b2273(0x4ab)!==_0x2b2273(0x4ab)){if(_0x535e22[_0x2b2273(0x703)])this[_0x2b2273(0x68c)](_0x17dc79[_0x2b2273(0x530)],_0x43155c,_0x234375);if(_0x389d1a[_0x2b2273(0x3ac)])this[_0x2b2273(0x68c)](_0x3a17c7[_0x2b2273(0x781)],_0x5073fd,_0x4e3f9d);}else this[_0x2b2273(0x48a)][_0x2b2273(0x2dd)]=ImageManager['loadSvEnemy'](_0x37287f),this[_0x2b2273(0x48a)][_0x2b2273(0x2dd)][_0x2b2273(0xa85)](this['createEmptyBitmap']['bind'](this));}else this[_0x2b2273(0x48a)][_0x2b2273(0x2dd)]=ImageManager[_0x2b2273(0x300)](_0x37287f),this['_mainSprite'][_0x2b2273(0x2dd)]['addLoadListener'](this['createEmptyBitmap'][_0x2b2273(0x2a0)](this));}},Sprite_Enemy[_0x4a3d8d(0x3c4)]['createEmptyBitmap']=function(){const _0x5cb706=_0x4a3d8d,_0x34dcb0=this[_0x5cb706(0x48a)][_0x5cb706(0x2dd)];_0x34dcb0&&(this[_0x5cb706(0x2dd)]=new Bitmap(_0x34dcb0[_0x5cb706(0xb49)],_0x34dcb0['height']));},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x7a1)]=Sprite_Enemy[_0x4a3d8d(0x3c4)]['setHue'],Sprite_Enemy['prototype'][_0x4a3d8d(0x95a)]=function(_0x44c0de){const _0x39bc4d=_0x4a3d8d;this[_0x39bc4d(0x48a)]&&this['_mainSprite'][_0x39bc4d(0x95a)](_0x44c0de);},VisuMZ['BattleCore'][_0x4a3d8d(0x3d3)]=Sprite_Enemy['prototype']['initVisibility'],Sprite_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa32)]=function(){const _0x186d16=_0x4a3d8d;this[_0x186d16(0x186)]()?'OrhFN'!==_0x186d16(0x9a4)?_0x22b3c4=this['makeTargetsBattleCore']():VisuMZ['BattleCore'][_0x186d16(0x3d3)][_0x186d16(0xaf0)](this):(this[_0x186d16(0x8a8)]=!this[_0x186d16(0xa22)][_0x186d16(0x6b4)](),!this[_0x186d16(0x8a8)]&&(_0x186d16(0x9ba)!=='NifwT'?this[_0x186d16(0x2f0)]=0x0:_0x49e5e1[_0x186d16(0xbec)](_0x3ca2b3[_0x55fe54])));},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x6ae)]=Sprite_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x7d5)],Sprite_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x7d5)]=function(){const _0x30cfed=_0x4a3d8d;if(this[_0x30cfed(0x186)]())VisuMZ['BattleCore']['Sprite_Enemy_updateCollapse']['call'](this);},Sprite_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x6f6)]=function(){const _0x262d19=_0x4a3d8d;Sprite_Battler['prototype'][_0x262d19(0x6f6)][_0x262d19(0xaf0)](this);const _0x58dbb0=this['mainSprite']()||this;if(!_0x58dbb0)return;!_0x58dbb0[_0x262d19(0x2dd)]&&(_0x58dbb0[_0x262d19(0x2dd)]=new Bitmap(this[_0x262d19(0xb49)],this[_0x262d19(0x2cc)]));if(this[_0x262d19(0x25d)]===_0x262d19(0xc29))this[_0x262d19(0x48a)]['setFrame'](0x0,0x0,this['_mainSprite'][_0x262d19(0xb49)],this[_0x262d19(0x498)]);else{if('ZPCdp'!==_0x262d19(0x4b0)){const _0x478db1=_0x111b88['indexOf'](_0x61b737[_0x262d19(0x302)]()['trim']());_0x478db1>=0x0&&_0x478db1<=0x7&&_0x57e6b3[_0x262d19(0x149)](_0x478db1,_0x16b0f9);}else _0x58dbb0['setFrame'](0x0,0x0,_0x58dbb0[_0x262d19(0x2dd)][_0x262d19(0xb49)],this[_0x262d19(0x2dd)][_0x262d19(0x2cc)]);}},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x86b)]=Sprite_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x24c)],Sprite_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x24c)]=function(){const _0x3bbc06=_0x4a3d8d;if(this[_0x3bbc06(0x186)]())VisuMZ['BattleCore'][_0x3bbc06(0x86b)][_0x3bbc06(0xaf0)](this);},Sprite_Enemy['prototype'][_0x4a3d8d(0xc1a)]=function(){const _0x49c960=_0x4a3d8d;return Sprite_Battler[_0x49c960(0x3c4)]['isMoving']['call'](this);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x596)]=Sprite_Enemy[_0x4a3d8d(0x3c4)]['updateStateSprite'],Sprite_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x40f)]=function(){const _0x2aa5de=_0x4a3d8d;VisuMZ[_0x2aa5de(0x485)][_0x2aa5de(0x596)]['call'](this),this[_0x2aa5de(0x9a5)]();},Sprite_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x9a5)]=function(){const _0x4e2134=_0x4a3d8d,_0x1c0bcb=VisuMZ[_0x4e2134(0x485)][_0x4e2134(0xb75)][_0x4e2134(0xa50)];if(_0x1c0bcb[_0x4e2134(0x22d)]&&!_0x1c0bcb[_0x4e2134(0x8c2)]){if(_0x4e2134(0x477)!==_0x4e2134(0xaed)){this['_stateIconSprite']['opacity']=0x0;return;}else this[_0x4e2134(0x2f0)]=this[_0x4e2134(0x2e5)];}this[_0x4e2134(0x3d6)]['x']=0x0,this[_0x4e2134(0x3d6)]['x']+=this[_0x4e2134(0x349)]['battleUIOffsetX'](),this[_0x4e2134(0x3d6)]['y']=-this[_0x4e2134(0x2dd)][_0x4e2134(0x2cc)]-this['_stateIconSprite'][_0x4e2134(0x2cc)]-0x4,this['_stateIconSprite']['y']+=this[_0x4e2134(0x349)][_0x4e2134(0x1ae)](),this['_stateIconSprite'][_0x4e2134(0x3cb)]['x']=0x1/(this['scale']['x']||0.001),this['_stateIconSprite'][_0x4e2134(0x3cb)]['y']=0x1/(this[_0x4e2134(0x3cb)]['y']||0.001),this[_0x4e2134(0xac9)]()&&('wMiQv'===_0x4e2134(0xb6f)?(this[_0x4e2134(0x1d8)][_0x4e2134(0x819)]['scale']['x']=-0x1/(this[_0x4e2134(0x3cb)]['x']||0.001),this[_0x4e2134(0x1d8)][_0x4e2134(0x819)][_0x4e2134(0x3cb)]['y']=0x1/(this[_0x4e2134(0x3cb)]['y']||0.001)):(_0x41f6b3+=_0x4a711f,_0x4c5e76+=_0x4d3c86));},VisuMZ['BattleCore']['Sprite_Enemy_setBattler']=Sprite_Enemy[_0x4a3d8d(0x3c4)]['setBattler'],Sprite_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x1ba)]=function(_0xef6c9a){const _0x20c4d1=_0x4a3d8d;VisuMZ[_0x20c4d1(0x485)][_0x20c4d1(0x948)][_0x20c4d1(0xaf0)](this,_0xef6c9a),this['setSvBattlerSprite'](_0xef6c9a);},Sprite_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x90e)]=function(_0x342b84){const _0x1621a9=_0x4a3d8d;!this[_0x1621a9(0x1d8)]&&(this[_0x1621a9(0x1d8)]=new Sprite_SvEnemy(_0x342b84),this[_0x1621a9(0x676)]()),this[_0x1621a9(0x1d8)][_0x1621a9(0x1ba)](_0x342b84);},Sprite_Enemy[_0x4a3d8d(0x3c4)]['hasSvBattler']=function(){const _0x3f31a4=_0x4a3d8d;return this[_0x3f31a4(0xa22)]&&this['_enemy'][_0x3f31a4(0xac9)]();},Sprite_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x186)]=function(){const _0x4fdbfa=_0x4a3d8d;return this['hasSvBattler']()?this['_enemy'][_0x4fdbfa(0x186)]():!![];},Sprite_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x1ef)]=function(){const _0x5141d8=_0x4a3d8d;this['hasSvBattler']()&&this[_0x5141d8(0x1d8)][_0x5141d8(0x1ef)]();},Sprite_Enemy['prototype'][_0x4a3d8d(0x9fb)]=function(_0x10573c){const _0x509f6e=_0x4a3d8d;if(this['hasSvBattler']())this['_svBattlerSprite'][_0x509f6e(0x9fb)](_0x10573c);},Sprite_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa29)]=function(_0x5b4555){const _0x4d606c=_0x4a3d8d;if(this[_0x4d606c(0xac9)]())this[_0x4d606c(0x1d8)]['forceWeaponAnimation'](_0x5b4555);},Sprite_Enemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x5a4)]=function(){const _0x487224=_0x4a3d8d,_0x4a2ad4=VisuMZ['BattleCore'][_0x487224(0xb75)]['ActionSequence'],_0x11f0f2=_0x4a2ad4[_0x487224(0x2c9)],_0x1cc161=_0x4a2ad4[_0x487224(0x187)],_0x2d6883=_0x4a2ad4[_0x487224(0xbe2)];this['startMove'](_0x11f0f2,_0x1cc161,_0x2d6883);};function Sprite_SvEnemy(){const _0x19b22b=_0x4a3d8d;this[_0x19b22b(0x82a)](...arguments);}function _0x8ea5(_0x33252a,_0x636322){const _0x178049=_0x1780();return _0x8ea5=function(_0x8ea5dc,_0x514b00){_0x8ea5dc=_0x8ea5dc-0x13e;let _0x4ed18d=_0x178049[_0x8ea5dc];return _0x4ed18d;},_0x8ea5(_0x33252a,_0x636322);}Sprite_SvEnemy[_0x4a3d8d(0x3c4)]=Object[_0x4a3d8d(0x416)](Sprite_Actor['prototype']),Sprite_SvEnemy['prototype'][_0x4a3d8d(0x6ee)]=Sprite_SvEnemy,Sprite_SvEnemy['prototype']['initialize']=function(_0x58bdf4){const _0x19a152=_0x4a3d8d;Sprite_Actor[_0x19a152(0x3c4)][_0x19a152(0x82a)]['call'](this,_0x58bdf4),this['scale']['x']=-0x1,this[_0x19a152(0x819)]['scale']['x']=-0x1;},Sprite_SvEnemy['prototype'][_0x4a3d8d(0x2c4)]=function(){},Sprite_SvEnemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x1c4)]=function(){},Sprite_SvEnemy['prototype'][_0x4a3d8d(0x60c)]=function(_0x1e6a47){},Sprite_SvEnemy['prototype'][_0x4a3d8d(0x89c)]=function(){},Sprite_SvEnemy[_0x4a3d8d(0x3c4)]['updateShadowPosition']=function(){},Sprite_SvEnemy[_0x4a3d8d(0x3c4)]['updateStateSprite']=function(){const _0x304d00=_0x4a3d8d;this['_stateSprite'][_0x304d00(0xab9)]=![];},Sprite_SvEnemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x1fd)]=function(){const _0x17bfb0=_0x4a3d8d;Sprite_Battler[_0x17bfb0(0x3c4)][_0x17bfb0(0x1fd)][_0x17bfb0(0xaf0)](this);const _0xe49230=this['_actor'][_0x17bfb0(0x634)]();this[_0x17bfb0(0x47c)]!==_0xe49230&&(this[_0x17bfb0(0x47c)]=_0xe49230,this[_0x17bfb0(0x48a)]['bitmap']=ImageManager[_0x17bfb0(0x675)](_0xe49230)),this[_0x17bfb0(0x48a)]&&this[_0x17bfb0(0x48a)][_0x17bfb0(0x2dd)]&&this[_0x17bfb0(0x349)]&&('oOhKE'!==_0x17bfb0(0x1df)?this[_0x17bfb0(0x48a)][_0x17bfb0(0x2dd)][_0x17bfb0(0x8a5)]!==this[_0x17bfb0(0x349)][_0x17bfb0(0x5f5)]()&&(_0x17bfb0(0x1cc)===_0x17bfb0(0x1cc)?this[_0x17bfb0(0x48a)][_0x17bfb0(0x2dd)]['smooth']=this[_0x17bfb0(0x349)][_0x17bfb0(0x5f5)]():this[_0x17bfb0(0x8da)]=_0x27cc88[_0x17bfb0(0x8da)]):(_0x5dea79+=_0x1f200a[_0x17bfb0(0x764)]()?-_0x284476:_0x4c9235,_0x3c213f+=_0x18cfa9));},Sprite_SvEnemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x254)]=function(){},Sprite_SvEnemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x7aa)]=function(_0x4e5c66,_0x3d19e7,_0x5b65f8){const _0x4bdf75=_0x4a3d8d;if(this[_0x4bdf75(0x756)])this[_0x4bdf75(0x756)][_0x4bdf75(0x7aa)](_0x4e5c66,_0x3d19e7,_0x5b65f8);},Sprite_SvEnemy[_0x4a3d8d(0x3c4)]['refreshMotion']=function(){const _0x4717d2=_0x4a3d8d,_0x1a9c67=this[_0x4717d2(0x6dd)];if(_0x1a9c67){if(_0x4717d2(0x797)==='wLgch'){const _0x15258e=_0x1a9c67['stateMotionIndex']();if(_0x1a9c67[_0x4717d2(0xc48)]()||_0x1a9c67[_0x4717d2(0x990)]())this[_0x4717d2(0x7dc)](_0x4717d2(0x460));else{if(_0x15258e===0x3)this[_0x4717d2(0x7dc)](_0x4717d2(0x75f));else{if(_0x15258e===0x2)this[_0x4717d2(0x7dc)](_0x4717d2(0x8ac));else{if(_0x1a9c67[_0x4717d2(0xad6)]()){if('hQQgj'===_0x4717d2(0x664))return _0x134540(_0x3b407d['$1']);else this[_0x4717d2(0x7dc)](_0x4717d2(0x9fc));}else{if(_0x1a9c67[_0x4717d2(0x962)]()||_0x1a9c67[_0x4717d2(0x856)]())this[_0x4717d2(0x7dc)]('guard');else{if(_0x15258e===0x1)_0x4717d2(0xbac)===_0x4717d2(0xa08)?(_0x1ee654[_0x4717d2(0x485)][_0x4717d2(0x419)]['call'](this),this['applyGlobalCommonEventNotetags'](),this[_0x4717d2(0x196)]()):this[_0x4717d2(0x7dc)](_0x4717d2(0x35b));else{if(_0x1a9c67[_0x4717d2(0x40d)]()){if('WzBWt'===_0x4717d2(0x80d)){this[_0x4717d2(0xc35)][_0x4717d2(0xab9)]=_0x63593d['isInputting']();const _0x3a9696=_0x290250[_0x4717d2(0x2fa)]();if(_0x3a9696===this['_borderPortraitSprite'][_0x4717d2(0x2fa)])return;this[_0x4717d2(0xc35)][_0x4717d2(0x2fa)]=_0x3a9696||this[_0x4717d2(0xc35)][_0x4717d2(0x2fa)];if(!_0x3a9696)return;else{if(_0x3a9696[_0x4717d2(0x8d7)]()===''){this[_0x4717d2(0xc35)]['bitmap']=_0xb7ea4b['_emptyBitmap'];return;}else{const _0x2a8b74=_0x75390c[_0x4717d2(0x96b)](_0x3a9696[_0x4717d2(0x8d7)]());_0x2a8b74[_0x4717d2(0xa85)](this[_0x4717d2(0x925)][_0x4717d2(0x2a0)](this,_0x2a8b74));}}}else this[_0x4717d2(0x7dc)]('dying');}else{if(_0x1a9c67['isUndecided']())this[_0x4717d2(0x7dc)](_0x4717d2(0x460));else{if('XpvgI'!==_0x4717d2(0xb4a))return _0x254ca3(_0x3e3b43['$1']);else this[_0x4717d2(0x7dc)](_0x1a9c67[_0x4717d2(0x7bd)]()[_0x4717d2(0x81d)]||_0x4717d2(0x460));}}}}}}}}}else{if(!this['item']()[_0x4717d2(0x83f)]['critical'])return 0x0;let _0x10c493=_0x249fdb['BattleCore'][_0x4717d2(0xb75)][_0x4717d2(0xb55)][_0x4717d2(0x623)][_0x4717d2(0xaf0)](this,_0x5b791c);return _0x10c493=this[_0x4717d2(0x9a2)]['criticalHitRate']*_0x10c493+this[_0x4717d2(0x9a2)]['criticalHitFlat'],_0x10c493;}}},Sprite_SvEnemy['prototype'][_0x4a3d8d(0x996)]=function(){const _0x19e7c3=_0x4a3d8d;return this[_0x19e7c3(0x756)]?this[_0x19e7c3(0x756)][_0x19e7c3(0xa4b)]===0x0&&this[_0x19e7c3(0x756)][_0x19e7c3(0x7e4)]===0x0:!![];},Sprite_SvEnemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x838)]=function(){},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xacf)]=Sprite_Animation[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x96c)],Sprite_Animation[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x96c)]=function(_0x3a5d37){const _0x4277a5=_0x4a3d8d;if(_0x3a5d37[_0x4277a5(0x6f2)]){if('BZwJm'==='XDOvn')this[_0x4277a5(0x599)]();else return this[_0x4277a5(0x645)](_0x3a5d37);}else{if(_0x4277a5(0x38c)!=='djcyH')return VisuMZ[_0x4277a5(0x485)][_0x4277a5(0xacf)][_0x4277a5(0xaf0)](this,_0x3a5d37);else this['_distortionSprite']=new _0x12a30f(),this[_0x4277a5(0x6f2)][_0x4277a5(0xc3d)]['x']=0.5,this['_distortionSprite'][_0x4277a5(0xc3d)]['y']=0.5,this[_0x4277a5(0x960)](this[_0x4277a5(0x6f2)]);}},Sprite_Animation[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x645)]=function(_0x3e8717){const _0x58d9e5=_0x4a3d8d;let _0x54a960=_0x3e8717['x'],_0x24d0d0=_0x3e8717['y'],_0x261213=_0x3e8717[_0x58d9e5(0x2cc)],_0x47497f=_0x3e8717[_0x58d9e5(0x6f2)][_0x58d9e5(0x3cb)]['y'];_0x3e8717['x']=_0x3e8717['_baseX']+_0x3e8717[_0x58d9e5(0xb70)](),_0x3e8717['y']=_0x3e8717['_baseY']+_0x3e8717[_0x58d9e5(0x266)](),_0x3e8717[_0x58d9e5(0x2cc)]*=_0x47497f;let _0x35905a=VisuMZ[_0x58d9e5(0x485)][_0x58d9e5(0xacf)]['call'](this,_0x3e8717);return _0x3e8717['x']=_0x54a960,_0x3e8717['y']=_0x24d0d0,_0x3e8717[_0x58d9e5(0x2cc)]=_0x261213,_0x35905a;},VisuMZ[_0x4a3d8d(0x485)]['Sprite_AnimationMV_updatePosition']=Sprite_AnimationMV[_0x4a3d8d(0x3c4)]['updatePosition'],Sprite_AnimationMV[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x421)]=function(){const _0x344dd1=_0x4a3d8d;VisuMZ[_0x344dd1(0x485)][_0x344dd1(0x669)][_0x344dd1(0xaf0)](this);if(this[_0x344dd1(0x30c)][_0x344dd1(0xb96)]===0x3){if(this['x']===0x0)this['x']=Math[_0x344dd1(0x89f)](Graphics[_0x344dd1(0xb49)]/0x2);if(this['y']===0x0)this['y']=Math['round'](Graphics['height']/0x2);}else{if(_0x344dd1(0x6aa)!=='dcvTc'){if(!_0x12480b[_0x344dd1(0x930)]())return;_0x59a421['ConvertParams'](_0x59a3c3,_0x466d7b);const _0x42518e=_0x56c602[_0x344dd1(0x82e)],_0x3485f1={'arPenRate':_0x1a9288[_0x344dd1(0x4f6)],'arPenFlat':_0x4cf899['ArPenFlat'],'arRedRate':_0x55c96f[_0x344dd1(0x736)],'arRedFlat':_0x510594[_0x344dd1(0x7b0)]};_0x42518e[_0x344dd1(0xba5)]=_0x3485f1;}else{if(this[_0x344dd1(0x71e)])return;const _0x45d43b=(Imported['VisuMZ_0_CoreEngine']?VisuMZ[_0x344dd1(0x6bb)][_0x344dd1(0xb75)]['UI'][_0x344dd1(0xa51)]:0x4)*0x2,_0x4f2a32=(Graphics[_0x344dd1(0xb49)]-(Graphics['boxWidth']+_0x45d43b))/0x2;if(_0x4f2a32!==0x0)this['x']+=_0x4f2a32;}}},Sprite_Damage[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x945)]=function(_0x156fc5){const _0x1590c6=_0x4a3d8d,_0x3808eb=_0x156fc5['getNextDamagePopup']()||_0x156fc5[_0x1590c6(0x8c7)]();if(_0x3808eb[_0x1590c6(0x15d)]||_0x3808eb[_0x1590c6(0xa38)]){if('WommZ'===_0x1590c6(0x986)){if(_0x591844['battleCameraData']()[_0x1590c6(0x79b)]>0x0)return!![];if(_0x23be7a[_0x1590c6(0x940)]()[_0x1590c6(0x514)]>0x0)return!![];this[_0x1590c6(0x402)]='';}else this[_0x1590c6(0x9f8)]=0x0,this['createMiss']();}else{if(_0x3808eb['hpAffected']){if(_0x1590c6(0x246)!=='uxoGz')this[_0x1590c6(0x9f8)]=_0x3808eb[_0x1590c6(0x3bc)]>=0x0?0x0:0x1,this[_0x1590c6(0xa1a)](_0x3808eb[_0x1590c6(0x3bc)]);else{const _0x265a79=this[_0x1590c6(0x201)](_0x5b6231);if(_0x265a79===_0x1590c6(0x863))this[_0x1590c6(0x4a5)](_0x4aa8e5);else _0x265a79===_0x1590c6(0x958)?this[_0x1590c6(0x217)](_0x456fed):_0xfa380['prototype'][_0x1590c6(0x36d)][_0x1590c6(0xaf0)](this,_0xbed8bf);}}else _0x156fc5[_0x1590c6(0x32c)]()&&_0x3808eb[_0x1590c6(0x8d4)]!==0x0&&(this[_0x1590c6(0x9f8)]=_0x3808eb['mpDamage']>=0x0?0x2:0x3,this['createDigits'](_0x3808eb[_0x1590c6(0x8d4)]));}_0x3808eb[_0x1590c6(0x9fa)]&&this[_0x1590c6(0x599)]();},Sprite_Damage[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x4da)]=function(_0x1c0d7e){},Sprite_Damage[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa1a)]=function(_0x1a0192){const _0x362010=_0x4a3d8d;let _0xe33308=this[_0x362010(0x1a0)](_0x1a0192);const _0xde697c=this[_0x362010(0xb00)](),_0x39d4d9=Math['floor'](_0xde697c*0.75);for(let _0x3d3b30=0x0;_0x3d3b30<_0xe33308[_0x362010(0x482)];_0x3d3b30++){if(_0x362010(0x5da)===_0x362010(0x5da)){const _0x2a2ed5=this[_0x362010(0x6cb)](_0x39d4d9,_0xde697c);_0x2a2ed5[_0x362010(0x2dd)][_0x362010(0x1af)](_0xe33308[_0x3d3b30],0x0,0x0,_0x39d4d9,_0xde697c,'center'),_0x2a2ed5['x']=(_0x3d3b30-(_0xe33308[_0x362010(0x482)]-0x1)/0x2)*_0x39d4d9,_0x2a2ed5['dy']=-_0x3d3b30;}else{if(this[_0x362010(0xafe)]>0x0)this[_0x362010(0xafe)]-=0x10;}}},Sprite_Damage[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x1a0)]=function(_0x505de6){const _0x3ea9a0=_0x4a3d8d;let _0x12731d=Math[_0x3ea9a0(0x531)](_0x505de6)[_0x3ea9a0(0x2f5)]();this[_0x3ea9a0(0x9f6)]()&&(_0x12731d=VisuMZ[_0x3ea9a0(0xb27)](_0x12731d));const _0x30e74f=VisuMZ[_0x3ea9a0(0x485)][_0x3ea9a0(0xb75)]['Damage'];let _0x403094='',_0x26b559='';switch(this[_0x3ea9a0(0x9f8)]){case 0x0:_0x403094=_0x30e74f[_0x3ea9a0(0x1ea)]||_0x3ea9a0(0x37e),_0x26b559=TextManager['hp'];if(_0x505de6===0x0)_0x403094='%1';break;case 0x1:_0x403094=_0x30e74f[_0x3ea9a0(0x99b)]||_0x3ea9a0(0x849),_0x26b559=TextManager['hp'];break;case 0x2:_0x403094=_0x30e74f['mpDamageFmt']||_0x3ea9a0(0x708),_0x26b559=TextManager['mp'];break;case 0x3:_0x403094=_0x30e74f[_0x3ea9a0(0x2ef)]||_0x3ea9a0(0x6a5),_0x26b559=TextManager['mp'];break;}return _0x403094['format'](_0x12731d,_0x26b559)[_0x3ea9a0(0x82d)]();},Sprite_Damage[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x9f6)]=function(){const _0x45546f=_0x4a3d8d;if(Imported[_0x45546f(0x714)])return _0x45546f(0x1e7)!==_0x45546f(0x1e7)?_0x3f5e5b(_0x1f35e8['$1'])||0x0:VisuMZ[_0x45546f(0x6bb)][_0x45546f(0xb75)][_0x45546f(0x6cd)][_0x45546f(0x749)];else{if(_0x45546f(0xb05)===_0x45546f(0xb05))return![];else{if(!this[_0x45546f(0x141)]())return;const _0x15d7b4=this[_0x45546f(0x75c)](),_0x39720c=_0x3acfbd[_0x45546f(0x485)][_0x45546f(0xb75)]['PartyCmd'][_0x45546f(0x79e)],_0x294acf=_0x15d7b4===_0x45546f(0x81f)?_0x13b8a2['autoBattle']:_0x45546f(0xc28)[_0x45546f(0x8dd)](_0x39720c,_0x27af01[_0x45546f(0x387)]),_0x1557d6=this[_0x45546f(0x610)]();this[_0x45546f(0x198)](_0x294acf,_0x45546f(0x387),_0x1557d6);}}},Sprite_Damage[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x599)]=function(){const _0x181b0e=_0x4a3d8d,_0x7fa505=VisuMZ[_0x181b0e(0x485)][_0x181b0e(0xb75)]['Damage'];this[_0x181b0e(0x744)]=_0x7fa505[_0x181b0e(0x497)][_0x181b0e(0x5cf)](0x0),this[_0x181b0e(0x171)]=_0x7fa505[_0x181b0e(0xaaa)];},Sprite_Damage[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x1a4)]=function(_0x66c25d,_0x35f2c4){const _0x406080=_0x4a3d8d;this[_0x406080(0x744)]=_0x35f2c4[_0x406080(0x602)]||[0x0,0x0,0x0,0x0],this[_0x406080(0x744)]=JsonEx[_0x406080(0x773)](this[_0x406080(0x744)]),this[_0x406080(0x171)]=_0x35f2c4[_0x406080(0x49f)]||0x0;const _0xf75ff7=this['fontSize'](),_0x48f8b3=Math[_0x406080(0x467)](_0xf75ff7*0x1e),_0x1698d8=this[_0x406080(0x6cb)](_0x48f8b3,_0xf75ff7);_0x1698d8[_0x406080(0x2dd)][_0x406080(0x19e)]=ColorManager[_0x406080(0x9e2)](_0x35f2c4[_0x406080(0x19e)]),_0x1698d8[_0x406080(0x2dd)]['drawText'](_0x66c25d,0x0,0x0,_0x48f8b3,_0xf75ff7,_0x406080(0xb3f)),_0x1698d8['dy']=0x0;},Sprite_Damage[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x695)]=function(_0x36f3fc,_0x599ba1,_0x3e2b0d){const _0x209f7c=_0x4a3d8d,_0x4cffe3=Math[_0x209f7c(0x559)](this[_0x209f7c(0xb00)](),ImageManager[_0x209f7c(0xa48)]),_0x1ac0ab=Math[_0x209f7c(0x467)](_0x4cffe3*0x1e),_0x2efe3a=this[_0x209f7c(0x6cb)](_0x1ac0ab,_0x4cffe3),_0x46b2b3=ImageManager[_0x209f7c(0x1dc)]/0x2,_0x41afa7=_0x2efe3a[_0x209f7c(0x2dd)]['measureTextWidth'](_0x599ba1+'\x20');_0x2efe3a[_0x209f7c(0x2dd)][_0x209f7c(0x19e)]=ColorManager[_0x209f7c(0x9e2)](_0x3e2b0d[_0x209f7c(0x19e)]),_0x2efe3a[_0x209f7c(0x2dd)][_0x209f7c(0x1af)](_0x599ba1,_0x46b2b3,0x0,_0x1ac0ab-_0x46b2b3,_0x4cffe3,_0x209f7c(0xb3f));const _0x3e7ba2=Math['round']((_0x4cffe3-ImageManager[_0x209f7c(0xa48)])/0x2),_0x566113=_0x1ac0ab/0x2-ImageManager[_0x209f7c(0x1dc)]-_0x41afa7/0x2+_0x46b2b3/0x2,_0x283944=ImageManager[_0x209f7c(0x2ce)]('IconSet'),_0x15eed6=ImageManager[_0x209f7c(0x1dc)],_0x3d9692=ImageManager[_0x209f7c(0xa48)],_0x415075=_0x36f3fc%0x10*_0x15eed6,_0x11f5dc=Math[_0x209f7c(0x467)](_0x36f3fc/0x10)*_0x3d9692;_0x2efe3a['bitmap'][_0x209f7c(0x845)](_0x283944,_0x415075,_0x11f5dc,_0x15eed6,_0x3d9692,_0x566113,_0x3e7ba2),this['_flashColor']=_0x3e2b0d[_0x209f7c(0x602)]||[0x0,0x0,0x0,0x0],this[_0x209f7c(0x744)]=JsonEx[_0x209f7c(0x773)](this['_flashColor']),this[_0x209f7c(0x171)]=_0x3e2b0d[_0x209f7c(0x49f)]||0x0,_0x2efe3a['dy']=0x0;},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xc33)]=Sprite_Damage[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x6cb)],Sprite_Damage[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x6cb)]=function(_0x1909e2,_0x242155){const _0x26b043=_0x4a3d8d;return _0x242155=Math[_0x26b043(0x89f)](_0x242155*1.2),VisuMZ['BattleCore'][_0x26b043(0xc33)][_0x26b043(0xaf0)](this,_0x1909e2,_0x242155);},VisuMZ['BattleCore'][_0x4a3d8d(0xb5a)]=Sprite_StateIcon[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x6f6)],Sprite_StateIcon[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x6f6)]=function(){const _0x4e9e03=_0x4a3d8d;VisuMZ['BattleCore'][_0x4e9e03(0xb5a)][_0x4e9e03(0xaf0)](this),this[_0x4e9e03(0x2f0)]=this[_0x4e9e03(0x484)]>0x0?0xff:0x0;},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x449)]=Sprite_Weapon['prototype']['loadBitmap'],Sprite_Weapon['prototype'][_0x4a3d8d(0x56b)]=function(){const _0x3747ce=_0x4a3d8d;VisuMZ[_0x3747ce(0x485)][_0x3747ce(0x449)][_0x3747ce(0xaf0)](this);if(this['bitmap']){if(_0x3747ce(0x9f9)==='isWIi'){_0x5e9f96[_0x3747ce(0x2fc)](_0xbd3280);if(_0x1b4c91)_0x4c22a9['atbInterrupt']();}else this[_0x3747ce(0x2dd)][_0x3747ce(0x8a5)]=VisuMZ[_0x3747ce(0x485)][_0x3747ce(0xb75)][_0x3747ce(0x4e0)][_0x3747ce(0x325)];}};function Sprite_HpGauge(){this['initialize'](...arguments);}Sprite_HpGauge[_0x4a3d8d(0x3c4)]=Object[_0x4a3d8d(0x416)](Sprite_Gauge[_0x4a3d8d(0x3c4)]),Sprite_HpGauge[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x6ee)]=Sprite_HpGauge,Sprite_HpGauge['prototype'][_0x4a3d8d(0x82a)]=function(){const _0x46480e=_0x4a3d8d;Sprite_Gauge[_0x46480e(0x3c4)]['initialize']['call'](this);},Sprite_HpGauge[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xb0e)]=function(){return 0x0;},Sprite_HpGauge['prototype'][_0x4a3d8d(0x88f)]=function(){const _0x1b729d=_0x4a3d8d;this[_0x1b729d(0x2dd)]['clear']();const _0x1e1adb=this['currentValue']();!isNaN(_0x1e1adb)&&this['drawGauge']();};function Sprite_EnemyName(){this['initialize'](...arguments);}Sprite_EnemyName['prototype']=Object['create'](Sprite_Name[_0x4a3d8d(0x3c4)]),Sprite_EnemyName[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x6ee)]=Sprite_EnemyName,Sprite_EnemyName[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x82a)]=function(){const _0x2e26f0=_0x4a3d8d;Sprite_Name[_0x2e26f0(0x3c4)][_0x2e26f0(0x82a)]['call'](this),this[_0x2e26f0(0x6fd)]();},Sprite_EnemyName[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x6e4)]=function(){const _0x534574=_0x4a3d8d;Sprite_Name[_0x534574(0x3c4)]['initMembers'][_0x534574(0xaf0)](this),this['opacity']=0x0,this[_0x534574(0xa40)]=null,this[_0x534574(0xc3d)]['x']=0.5,this['anchor']['y']=0x0;},Sprite_EnemyName[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x6fd)]=function(){const _0xf277ac=_0x4a3d8d;VisuMZ[_0xf277ac(0x485)]['Settings'][_0xf277ac(0xa50)][_0xf277ac(0x22d)]&&(this[_0xf277ac(0x3d6)]=new Sprite_StateIcon(),this['addChild'](this['_stateIconSprite']));},Sprite_EnemyName[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x280)]=function(){const _0x1245b4=_0x4a3d8d;return Graphics[_0x1245b4(0x6c0)];},Sprite_EnemyName[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x77e)]=function(){const _0x4cfdbd=_0x4a3d8d;return this[_0x4cfdbd(0x569)]=this[_0x4cfdbd(0x569)]||Window_Base[_0x4cfdbd(0x3c4)][_0x4cfdbd(0xbee)]()||0x24,this[_0x4cfdbd(0x569)]*0x4;},Sprite_EnemyName[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xb00)]=function(){const _0x285723=_0x4a3d8d;return VisuMZ[_0x285723(0x485)][_0x285723(0xb75)][_0x285723(0xa50)]['NameFontSize']||$gameSystem[_0x285723(0xbc8)]();},Sprite_EnemyName[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x17f)]=function(_0x3268f5){this['_linkedSprite']=_0x3268f5;},Sprite_EnemyName[_0x4a3d8d(0x3c4)]['update']=function(){const _0x38cdbf=_0x4a3d8d;Sprite_Name[_0x38cdbf(0x3c4)][_0x38cdbf(0x372)][_0x38cdbf(0xaf0)](this),this[_0x38cdbf(0x474)](),this[_0x38cdbf(0x421)](),this['updateAttachedSprites'](),this['updateOpacity']();},Sprite_EnemyName[_0x4a3d8d(0x3c4)]['redraw']=function(){const _0x449bd0=_0x4a3d8d;this[_0x449bd0(0xa2d)]=undefined;const _0x586543=this[_0x449bd0(0xbaa)](),_0x48abcf=this['bitmapWidth'](),_0x594986=Window_Base['prototype'][_0x449bd0(0xbee)]();this[_0x449bd0(0x850)](),this['bitmap']['clear'](),this[_0x449bd0(0x2dd)][_0x449bd0(0x1af)](_0x586543,0x0,0x0,_0x48abcf,_0x594986,'center');},Sprite_EnemyName['prototype']['updateLink']=function(){const _0x5812da=_0x4a3d8d;if(!this[_0x5812da(0xa40)])return;this[_0x5812da(0x349)]!==this[_0x5812da(0xa40)][_0x5812da(0x349)]&&this[_0x5812da(0x4da)](this[_0x5812da(0xa40)]['_battler']);},Sprite_EnemyName['prototype'][_0x4a3d8d(0x421)]=function(){const _0x4d5aef=_0x4a3d8d;if(!this[_0x4d5aef(0xa40)])return;this['_lineHeight']=this['_lineHeight']||Window_Base[_0x4d5aef(0x3c4)][_0x4d5aef(0xbee)](),this['x']=Math[_0x4d5aef(0x89f)](this[_0x4d5aef(0xa40)][_0x4d5aef(0x232)]),this['y']=Math[_0x4d5aef(0x89f)](this[_0x4d5aef(0xa40)][_0x4d5aef(0x5d8)]-this['_lineHeight']*0.5);const _0x1d2a39=VisuMZ['BattleCore']['Settings'][_0x4d5aef(0xa50)];this['x']+=Math[_0x4d5aef(0x89f)](_0x1d2a39[_0x4d5aef(0x8f6)]||0x0),this['y']+=Math[_0x4d5aef(0x89f)](_0x1d2a39[_0x4d5aef(0x1c0)]||0x0);},Sprite_EnemyName[_0x4a3d8d(0x3c4)]['updateAttachedSprites']=function(){const _0x5ea9d6=_0x4a3d8d;this[_0x5ea9d6(0x680)]();},Sprite_EnemyName['prototype'][_0x4a3d8d(0x680)]=function(){const _0xf6cf1d=_0x4a3d8d;if(!this[_0xf6cf1d(0x3d6)])return;this[_0xf6cf1d(0x349)]!==this['_stateIconSprite']['_battler']&&('HpFkq'==='bNdPx'?(this[_0xf6cf1d(0x4f7)][_0xf6cf1d(0x2c5)](this[_0xf6cf1d(0x910)]),this[_0xf6cf1d(0xb29)]['setHelpWindow'](this[_0xf6cf1d(0x910)])):this[_0xf6cf1d(0x3d6)][_0xf6cf1d(0x4da)](this[_0xf6cf1d(0x349)]));const _0x15f125=this['textWidth']();this[_0xf6cf1d(0x569)]=this[_0xf6cf1d(0x569)]||Window_Base[_0xf6cf1d(0x3c4)][_0xf6cf1d(0xbee)](),this[_0xf6cf1d(0x3d6)]['x']=Math[_0xf6cf1d(0x89f)]((_0x15f125+ImageManager['iconWidth'])/0x2)+0x8,this['_stateIconSprite']['y']=this[_0xf6cf1d(0x569)]/0x2;const _0x654860=VisuMZ[_0xf6cf1d(0x485)][_0xf6cf1d(0xb75)][_0xf6cf1d(0xa50)];this[_0xf6cf1d(0x3d6)]['x']+=_0x654860[_0xf6cf1d(0x163)]||0x0,this[_0xf6cf1d(0x3d6)]['y']+=_0x654860[_0xf6cf1d(0xb24)]||0x0;},Sprite_EnemyName[_0x4a3d8d(0x3c4)]['updateOpacity']=function(){const _0x3f5288=_0x4a3d8d,_0x28de85=this[_0x3f5288(0xbd8)]();if(_0x28de85&&this[_0x3f5288(0x2f0)]<0xff)this[_0x3f5288(0x2f0)]+=0x10;else!_0x28de85&&this[_0x3f5288(0x2f0)]>0x0&&(this[_0x3f5288(0x2f0)]-=0x10);},Sprite_EnemyName[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xbd8)]=function(){const _0x8ac0e0=_0x4a3d8d;if(this[_0x8ac0e0(0xa66)]())return![];else{if(!this[_0x8ac0e0(0x349)])return![];else{if(this[_0x8ac0e0(0x349)][_0x8ac0e0(0x2b2)]()){if(_0x8ac0e0(0xa7b)===_0x8ac0e0(0xa2b)){_0x566941(_0x8ac0e0(0x2a2)),_0x4b8081[_0x8ac0e0(0x4c2)]();return;}else return![];}else{if(!this[_0x8ac0e0(0x349)][_0x8ac0e0(0x3d9)]())return![];else{if(this[_0x8ac0e0(0x4bc)]())return!![];else{if(this['isAlwaysVisible']())return!![];else{if(this['isIncludedInEnemyWindow']()){if('lcFzy'!==_0x8ac0e0(0x777))return!![];else this[_0x8ac0e0(0x635)][_0x8ac0e0(0x5bd)]=_0x4b61d8['prototype'][_0x8ac0e0(0xbe3)][_0x8ac0e0(0xaf0)](this);}else{if(this[_0x8ac0e0(0x2f0)]>0x0){if(_0x8ac0e0(0x42b)!==_0x8ac0e0(0x42b))_0x2cbbb1[_0x8ac0e0(0xa6b)](_0x204962);else return![];}}}}}}}}},Sprite_EnemyName[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa66)]=function(){const _0x3c13d8=_0x4a3d8d;return VisuMZ[_0x3c13d8(0x485)]['Settings'][_0x3c13d8(0xa50)]['NameAlwaysHidden'];},Sprite_EnemyName[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x4bc)]=function(){return![];},Sprite_EnemyName['prototype']['isAlwaysVisible']=function(){const _0x77a4f6=_0x4a3d8d;return VisuMZ['BattleCore'][_0x77a4f6(0xb75)][_0x77a4f6(0xa50)][_0x77a4f6(0x593)];},Sprite_EnemyName[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xc11)]=function(){const _0x3eb486=_0x4a3d8d;return VisuMZ[_0x3eb486(0x485)][_0x3eb486(0xb75)]['Enemy'][_0x3eb486(0x14f)]?this[_0x3eb486(0x349)][_0x3eb486(0xada)]():SceneManager[_0x3eb486(0x3ff)][_0x3eb486(0xa8b)]&&SceneManager[_0x3eb486(0x3ff)]['_enemyWindow']['active']&&SceneManager[_0x3eb486(0x3ff)][_0x3eb486(0xa8b)]['_enemies'][_0x3eb486(0xbff)](this['_battler']);},Sprite_EnemyName[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xaa2)]=function(){const _0x304af4=_0x4a3d8d;if(!this[_0x304af4(0x349)])return 0x0;if(this['_cacheTextWidth'])return this[_0x304af4(0xa2d)];const _0xd93e95=this[_0x304af4(0xbaa)]();return this[_0x304af4(0x850)](),this[_0x304af4(0xa2d)]=this[_0x304af4(0x2dd)][_0x304af4(0x2ae)](_0xd93e95)||0x1,this[_0x304af4(0xa2d)];},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x32f)]=Sprite_Battleback[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x3f5)],Sprite_Battleback['prototype'][_0x4a3d8d(0x3f5)]=function(){const _0x304d34=_0x4a3d8d,_0x2df364=VisuMZ[_0x304d34(0x485)]['Settings'][_0x304d34(0x225)];if(!_0x2df364){if(_0x304d34(0x38e)==='UCnet')this['_homeX']=(this['_homeX']*(_0x3352bd-0x1)+this[_0x304d34(0xb88)])/_0x3a3fdb,this[_0x304d34(0x649)]=(this[_0x304d34(0x649)]*(_0x4db95a-0x1)+this[_0x304d34(0x903)])/_0xa89e9;else return VisuMZ[_0x304d34(0x485)][_0x304d34(0x32f)][_0x304d34(0xaf0)](this);}const _0x55ad16=String(_0x2df364[_0x304d34(0xc0d)])||'MZ';switch(_0x55ad16){case'MZ':VisuMZ[_0x304d34(0x485)][_0x304d34(0x32f)][_0x304d34(0xaf0)](this);break;case _0x304d34(0x72b):this[_0x304d34(0xa02)]();break;case _0x304d34(0x6ba):this[_0x304d34(0x548)]();break;case _0x304d34(0x7de):this[_0x304d34(0x842)]();break;case _0x304d34(0x80e):this[_0x304d34(0x769)]();break;}},Sprite_Battleback['prototype'][_0x4a3d8d(0xa02)]=function(){const _0x3c07bf=_0x4a3d8d,_0xa41402=VisuMZ[_0x3c07bf(0x485)][_0x3c07bf(0xb75)][_0x3c07bf(0x225)];if(_0xa41402&&_0xa41402['jsOneForOne'])return _0xa41402['jsOneForOne'][_0x3c07bf(0xaf0)](this);this[_0x3c07bf(0xb49)]=Graphics[_0x3c07bf(0xb49)],this[_0x3c07bf(0x2cc)]=Graphics[_0x3c07bf(0x2cc)];const _0x1e109d=0x1;this[_0x3c07bf(0x3cb)]['x']=_0x1e109d,this[_0x3c07bf(0x3cb)]['y']=_0x1e109d,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x548)]=function(){const _0x15001d=_0x4a3d8d,_0x267245=VisuMZ[_0x15001d(0x485)][_0x15001d(0xb75)][_0x15001d(0x225)];if(_0x267245&&_0x267245[_0x15001d(0x337)]){if(_0x15001d(0x8e9)!==_0x15001d(0x947))return _0x267245[_0x15001d(0x337)]['call'](this);else _0x23749f[_0x326ca3]===0x1&&this[_0x15001d(0x454)]!==_0x371bd7&&(_0x5a7cf5[_0x38ce72]=null);}this[_0x15001d(0xb49)]=Graphics[_0x15001d(0xb49)],this['height']=Graphics[_0x15001d(0x2cc)];const _0x19d9b9=this['width']/this[_0x15001d(0x2dd)][_0x15001d(0xb49)],_0x6e6131=this[_0x15001d(0x2cc)]/this[_0x15001d(0x2dd)]['height'],_0x49b6d4=Math['max'](_0x19d9b9,_0x6e6131);this['scale']['x']=_0x49b6d4,this[_0x15001d(0x3cb)]['y']=_0x49b6d4,this['x']=(Graphics[_0x15001d(0xb49)]-this[_0x15001d(0xb49)])/0x2,this['y']=Graphics['height']-this[_0x15001d(0x2cc)];},Sprite_Battleback[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x842)]=function(){const _0x55c4eb=_0x4a3d8d,_0x4ddbab=VisuMZ['BattleCore'][_0x55c4eb(0xb75)][_0x55c4eb(0x225)];if(_0x4ddbab&&_0x4ddbab[_0x55c4eb(0x8c9)])return _0x4ddbab[_0x55c4eb(0x8c9)][_0x55c4eb(0xaf0)](this);this[_0x55c4eb(0xb49)]=Graphics['width'],this['height']=Graphics[_0x55c4eb(0x2cc)];const _0x314279=Math[_0x55c4eb(0x885)](0x1,this['width']/this[_0x55c4eb(0x2dd)][_0x55c4eb(0xb49)]),_0x398694=Math['min'](0x1,this[_0x55c4eb(0x2cc)]/this[_0x55c4eb(0x2dd)][_0x55c4eb(0x2cc)]),_0x5704f4=Math[_0x55c4eb(0x559)](_0x314279,_0x398694);this[_0x55c4eb(0x3cb)]['x']=_0x5704f4,this[_0x55c4eb(0x3cb)]['y']=_0x5704f4,this['x']=(Graphics[_0x55c4eb(0xb49)]-this[_0x55c4eb(0xb49)])/0x2,this['y']=Graphics['height']-this['height'];},Sprite_Battleback[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x769)]=function(){const _0x4768c9=_0x4a3d8d,_0x18e7f1=VisuMZ['BattleCore'][_0x4768c9(0xb75)][_0x4768c9(0x225)];if(_0x18e7f1&&_0x18e7f1[_0x4768c9(0x78c)]){if(_0x4768c9(0x98f)!==_0x4768c9(0x546))return _0x18e7f1[_0x4768c9(0x78c)]['call'](this);else _0x9af945['motionIdle']=_0x520527(_0x3d76b5['$1'])[_0x4768c9(0x3b6)]()[_0x4768c9(0x82d)]();}this[_0x4768c9(0xb49)]=Graphics[_0x4768c9(0xb49)],this[_0x4768c9(0x2cc)]=Graphics[_0x4768c9(0x2cc)];const _0x418c5a=Math[_0x4768c9(0x559)](0x1,this[_0x4768c9(0xb49)]/this[_0x4768c9(0x2dd)]['width']),_0x4ee237=Math['max'](0x1,this[_0x4768c9(0x2cc)]/this[_0x4768c9(0x2dd)]['height']),_0x4e4e32=Math[_0x4768c9(0x559)](_0x418c5a,_0x4ee237);this['scale']['x']=_0x4e4e32,this[_0x4768c9(0x3cb)]['y']=_0x4e4e32,this['x']=(Graphics[_0x4768c9(0xb49)]-this[_0x4768c9(0xb49)])/0x2,this['y']=Graphics[_0x4768c9(0x2cc)]-this[_0x4768c9(0x2cc)];},Spriteset_Battle[_0x4a3d8d(0x76d)]=VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xb75)]['BattleLayout'][_0x4a3d8d(0x720)]??!![],Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xbb8)]=function(){const _0x119afd=_0x4a3d8d;if(!$gameSystem[_0x119afd(0x957)]())return![];return![];},Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x457)]=function(){return 0x0;},Spriteset_Battle['prototype']['animationNextDelay']=function(){return 0x0;},VisuMZ[_0x4a3d8d(0x485)]['Spriteset_Battle_createLowerLayer']=Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x26f)],Spriteset_Battle[_0x4a3d8d(0x3c4)]['createLowerLayer']=function(){const _0x188999=_0x4a3d8d;VisuMZ[_0x188999(0x485)][_0x188999(0x148)][_0x188999(0xaf0)](this),this[_0x188999(0x407)](),this[_0x188999(0xbfe)]();},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x6c7)]=Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x372)],Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x372)]=function(){const _0x5b3296=_0x4a3d8d;VisuMZ[_0x5b3296(0x485)][_0x5b3296(0x6c7)]['call'](this),this[_0x5b3296(0x85f)](),this[_0x5b3296(0x3e6)]();},Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x407)]=function(){const _0x2294b9=_0x4a3d8d;this[_0x2294b9(0x32a)]=new Weather(),this[_0x2294b9(0x470)]['addChild'](this['_weather']);},Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x3e6)]=function(){const _0xd34ccb=_0x4a3d8d;this[_0xd34ccb(0x32a)][_0xd34ccb(0x7d7)]=$gameScreen[_0xd34ccb(0x683)](),this['_weather']['power']=$gameScreen['weatherPower']();},Game_Interpreter[_0x4a3d8d(0x3c4)]['command236']=function(_0x4250c7){const _0x3b2bd6=_0x4a3d8d;$gameScreen[_0x3b2bd6(0x352)](_0x4250c7[0x0],_0x4250c7[0x1],_0x4250c7[0x2]);if(_0x4250c7[0x3])this['wait'](_0x4250c7[0x2]);return!![];},VisuMZ[_0x4a3d8d(0x485)]['Game_Interpreter_command283']=Game_Interpreter[_0x4a3d8d(0x3c4)]['command283'],Game_Interpreter[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x35f)]=function(_0x2849b8){const _0x116df0=_0x4a3d8d;return SceneManager[_0x116df0(0x930)]()?(SceneManager[_0x116df0(0x3ff)]['_spriteset'][_0x116df0(0x595)](_0x2849b8[0x0],_0x2849b8[0x1]),!![]):VisuMZ[_0x116df0(0x485)][_0x116df0(0x58b)]['call'](this,_0x2849b8);},Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x959)]=function(_0x360600,_0x143618){_0x360600['bitmap']=_0x143618;},Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x595)]=function(_0x481ebb,_0x100d09){const _0x558518=_0x4a3d8d;_0x481ebb=_0x481ebb||'',_0x100d09=_0x100d09||'';_0x481ebb===''&&_0x100d09===''&&('poKnB'==='poKnB'?(_0x481ebb=this[_0x558518(0xba9)]['battleback1Name'](),_0x100d09=this[_0x558518(0x65e)][_0x558518(0x609)]()):this[_0x558518(0x906)](_0x558518(0x8f9),this[_0x558518(0xb3e)](_0x52d1fd)));const _0x4bbe2e=ImageManager['loadBattleback1'](_0x481ebb),_0x52655f=ImageManager[_0x558518(0x670)](_0x100d09);_0x4bbe2e[_0x558518(0xa85)](this[_0x558518(0x8fc)][_0x558518(0x2a0)](this,this[_0x558518(0xba9)],this[_0x558518(0x65e)],_0x4bbe2e,_0x52655f));},Spriteset_Battle['prototype'][_0x4a3d8d(0x8fc)]=function(_0x846412,_0x55eed5,_0x234f78,_0x310c31){const _0x35e24e=_0x4a3d8d;_0x310c31[_0x35e24e(0xa85)](this[_0x35e24e(0x4fe)]['bind'](this,_0x846412,_0x55eed5,_0x234f78,_0x310c31));},Spriteset_Battle['prototype'][_0x4a3d8d(0x4fe)]=function(_0x1c91c0,_0x232e94,_0x4d140e,_0x21ebc4){const _0x3464a5=_0x4a3d8d;_0x1c91c0[_0x3464a5(0x2dd)]=_0x4d140e,_0x232e94[_0x3464a5(0x2dd)]=_0x21ebc4,_0x1c91c0['adjustPosition'](),_0x232e94[_0x3464a5(0x3f5)]();},VisuMZ[_0x4a3d8d(0x485)]['Spriteset_Battle_createBattleField']=Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x6b0)],Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x6b0)]=function(){const _0x51af64=_0x4a3d8d;VisuMZ[_0x51af64(0x485)][_0x51af64(0x423)][_0x51af64(0xaf0)](this),this[_0x51af64(0x414)]();},Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x414)]=function(){const _0x47527b=_0x4a3d8d;this[_0x47527b(0xbdf)](),this[_0x47527b(0xad3)](),this[_0x47527b(0x7a9)](),this[_0x47527b(0xa87)](),this[_0x47527b(0xc24)]();},Spriteset_Battle['prototype'][_0x4a3d8d(0xbdf)]=function(){const _0xe21e6a=_0x4a3d8d;this[_0xe21e6a(0x3f2)]=new Sprite(),this[_0xe21e6a(0x470)][_0xe21e6a(0x960)](this[_0xe21e6a(0x3f2)]);},Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x7a9)]=function(){const _0x106ace=_0x4a3d8d;this[_0x106ace(0x86f)]=new Sprite(),Spriteset_Battle[_0x106ace(0x76d)]?this[_0x106ace(0x960)](this[_0x106ace(0x86f)]):this[_0x106ace(0x470)][_0x106ace(0x960)](this[_0x106ace(0x86f)]);},Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa87)]=function(){const _0x56fda2=_0x4a3d8d;this[_0x56fda2(0x61c)]=new Sprite(),this[_0x56fda2(0x61c)]['x']=this['_battleField']['x'],this[_0x56fda2(0x61c)]['y']=this[_0x56fda2(0x470)]['y'],this['addChild'](this[_0x56fda2(0x61c)]);},Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xc24)]=function(){const _0x3dd7f2=_0x4a3d8d;if(!this[_0x3dd7f2(0xbb8)]())return;this[_0x3dd7f2(0x3f2)][_0x3dd7f2(0x3cb)]['x']=-0x1,this['_battlerContainer']['x']=this[_0x3dd7f2(0x470)][_0x3dd7f2(0xb49)],this[_0x3dd7f2(0x18f)][_0x3dd7f2(0x3cb)]['x']=-0x1,this[_0x3dd7f2(0x18f)]['x']=this[_0x3dd7f2(0x470)][_0x3dd7f2(0xb49)],this['_animationContainer'][_0x3dd7f2(0x3cb)]['x']=-0x1,this['_animationContainer']['x']=this[_0x3dd7f2(0x470)]['width'],this['_damageContainer']['scale']['x']=-0x1,this[_0x3dd7f2(0x61c)]['x']=this[_0x3dd7f2(0x470)]['x']+this['_battleField'][_0x3dd7f2(0xb49)];},Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x1bf)]=function(){const _0x17ef88=_0x4a3d8d;Imported['VisuMZ_0_CoreEngine']&&this['coreEngineRepositionEnemies']()&&(_0x17ef88(0x771)!=='qspqF'?this[_0x17ef88(0x701)]():this[_0x17ef88(0x349)]['isSpriteVisible']()&&this['createDamageSprite']());const _0xcce190=$gameTroop[_0x17ef88(0x30f)](),_0x469b92=[];for(const _0x4376ac of _0xcce190){_0x469b92[_0x17ef88(0x906)](new Sprite_Enemy(_0x4376ac));}_0x469b92['sort'](this[_0x17ef88(0x72c)]['bind'](this));for(const _0x363e3 of _0x469b92){_0x17ef88(0x49e)===_0x17ef88(0xade)?this[_0x17ef88(0xa90)](_0x2459ad['toUpperCase']()[_0x17ef88(0x82d)]()):this[_0x17ef88(0x3f2)][_0x17ef88(0x960)](_0x363e3);}this[_0x17ef88(0xae1)]=_0x469b92;},Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x71b)]=function(){const _0x51c41d=_0x4a3d8d;this['_actorSprites']=[];for(let _0x3b0cdc=0x0;_0x3b0cdc<$gameParty[_0x51c41d(0x70d)]();_0x3b0cdc++){const _0x22207a=$gameParty['battleMembers']()[_0x3b0cdc],_0x1231f6=new Sprite_Actor();_0x1231f6[_0x51c41d(0x854)](_0x22207a),_0x1231f6[_0x51c41d(0x1ba)](_0x22207a),_0x1231f6[_0x51c41d(0x372)](),this[_0x51c41d(0x223)][_0x51c41d(0x906)](_0x1231f6),this[_0x51c41d(0x3f2)][_0x51c41d(0x960)](_0x1231f6);}},Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xac0)]=function(_0x263d31,_0xcd515a,_0x39a713,_0x15629f){const _0x52d603=_0x4a3d8d,_0x5a648d=this[_0x52d603(0xa00)](_0xcd515a),_0x574b83=new(_0x5a648d?Sprite_AnimationMV:Sprite_Animation)(),_0x45ac50=this['makeTargetSprites'](_0x263d31);this[_0x52d603(0x74d)](_0x263d31[0x0])&&(_0x39a713=!_0x39a713),_0x574b83[_0x52d603(0xb9c)]=_0x263d31,_0x574b83[_0x52d603(0x4da)](_0x45ac50,_0xcd515a,_0x39a713,_0x15629f),this[_0x52d603(0x76b)](_0x574b83);},Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x76b)]=function(_0xc4d04f){const _0x28aeaa=_0x4a3d8d;if(this['isAnimationShownOnBattlePortrait'](_0xc4d04f))this[_0x28aeaa(0x50d)]()['addChild'](_0xc4d04f),_0xc4d04f[_0x28aeaa(0x71e)]=!![];else{if(_0x28aeaa(0x5ef)!==_0x28aeaa(0x5ef)){const _0x30316c=this[_0x28aeaa(0x2fa)](_0x1fb305)['battler']();if(!_0x30316c)return;const _0x17dd0f=this[_0x28aeaa(0x801)](),_0x25ec95=this[_0x28aeaa(0x684)](_0x3b8265);let _0x330309=_0x2a727d[_0x28aeaa(0x89f)](_0x25ec95['x']+_0x25ec95['width']/0x2)+this[_0x28aeaa(0x70e)];[_0x28aeaa(0x343)][_0x28aeaa(0xbff)](_0x17dd0f)&&(_0x330309=_0x25ec95[_0x28aeaa(0xb49)]/_0x4930ec[_0x28aeaa(0xc22)]()[_0x28aeaa(0x482)],_0x330309*=_0x5848f8,_0x330309+=_0x25ec95[_0x28aeaa(0xb49)]/_0x4c2673['battleMembers']()[_0x28aeaa(0x482)]/0x2);let _0x4aee15=_0x35b78a[_0x28aeaa(0x89f)](this[_0x28aeaa(0x364)](_0x45795c,_0x30316c,_0x25ec95));_0x30316c[_0x28aeaa(0x6d4)](_0x330309,_0x4aee15),this['addChildAt'](_0x30316c,0x1),_0x30316c[_0x28aeaa(0x92f)](),this[_0x28aeaa(0x1c1)](),this[_0x28aeaa(0xbc5)]();}else this[_0x28aeaa(0x86f)]['addChild'](_0xc4d04f);}this[_0x28aeaa(0x6e5)][_0x28aeaa(0x906)](_0xc4d04f);},Spriteset_Battle[_0x4a3d8d(0x3c4)]['isAnimationShownOnBattlePortrait']=function(_0x25a1c2){const _0x1ee214=_0x4a3d8d;if(!_0x25a1c2)return![];if(!_0x25a1c2[_0x1ee214(0x30c)])return![];if(!_0x25a1c2['targetObjects'][0x0])return![];if(_0x25a1c2['targetObjects'][0x0][_0x1ee214(0x764)]&&!_0x25a1c2[_0x1ee214(0xb9c)][0x0][_0x1ee214(0x764)]())return![];if($gameSystem[_0x1ee214(0x957)]())return![];if(!this['battleStatusWindowAnimationContainer']())return![];if(_0x25a1c2['constructor']===Sprite_Animation){if(_0x25a1c2[_0x1ee214(0x30c)][_0x1ee214(0x9c9)]!==0x0)return![];}else{if(_0x25a1c2[_0x1ee214(0x6ee)]===Sprite_AnimationMV){if(_0x25a1c2[_0x1ee214(0x30c)]['position']===0x3)return![];}}return!![];const _0x252a08=Window_BattleStatus[_0x1ee214(0x3c4)][_0x1ee214(0x801)]();return['xp',_0x1ee214(0x9e1)][_0x1ee214(0xc27)](_0x252a08);},Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x50d)]=function(){const _0x1e2ab2=_0x4a3d8d;if(!SceneManager[_0x1e2ab2(0x3ff)])return null;if(!SceneManager[_0x1e2ab2(0x3ff)][_0x1e2ab2(0x71c)])return null;if(!SceneManager[_0x1e2ab2(0x3ff)]['_statusWindow'][_0x1e2ab2(0x5d2)])return null;return SceneManager['_scene']['_statusWindow'][_0x1e2ab2(0x5d2)];},Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x964)]=function(_0x4d0dec){const _0x505c70=_0x4a3d8d;this['removeAnimationFromContainer'](_0x4d0dec);for(const _0x5ecb00 of _0x4d0dec[_0x505c70(0xb9c)]){if(_0x5ecb00[_0x505c70(0xb39)]){if(_0x505c70(0x269)==='QtNva')_0x5ecb00[_0x505c70(0xb39)]();else return this['command301_PreBattleEvent'](_0x1757a0);}}_0x4d0dec[_0x505c70(0xc47)]();},Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xbc3)]=function(_0x16d793){const _0xb980e2=_0x4a3d8d;this['_animationSprites'][_0xb980e2(0x34b)](_0x16d793);if(this[_0xb980e2(0xbd7)](_0x16d793))this[_0xb980e2(0x50d)]()['removeChild'](_0x16d793);else{if('CKZKI'===_0xb980e2(0x475)){if(this[_0xb980e2(0x6ee)]===_0x3769eb)return;_0xadedb9[_0xb980e2(0x3c4)][_0xb980e2(0xb20)][_0xb980e2(0xaf0)](this);}else this['_animationContainer'][_0xb980e2(0x208)](_0x16d793);}},VisuMZ['BattleCore']['Spriteset_Battle_updateActors']=Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x218)],Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x218)]=function(){const _0x5b9a06=_0x4a3d8d;VisuMZ[_0x5b9a06(0x485)][_0x5b9a06(0xb01)][_0x5b9a06(0xaf0)](this),this[_0x5b9a06(0x843)]();},Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x843)]=function(){const _0x3eeef3=_0x4a3d8d;this[_0x3eeef3(0x3f2)][_0x3eeef3(0x9cd)]['sort'](this[_0x3eeef3(0x456)][_0x3eeef3(0x2a0)](this)),this[_0x3eeef3(0xa97)]();},Spriteset_Battle[_0x4a3d8d(0x3c4)]['compareBattlerSprites']=function(_0x18b026,_0x742b8d){const _0xb88c20=_0x4a3d8d;if(VisuMZ[_0xb88c20(0x485)][_0xb88c20(0xb75)][_0xb88c20(0x4e0)][_0xb88c20(0x2a1)]){if(_0x18b026[_0xb88c20(0x349)]&&_0x742b8d['_battler']){if(_0x18b026[_0xb88c20(0x349)][_0xb88c20(0x764)]()&&_0x742b8d[_0xb88c20(0x349)][_0xb88c20(0x87a)]())return 0x1;else{if(_0x742b8d[_0xb88c20(0x349)][_0xb88c20(0x764)]()&&_0x18b026[_0xb88c20(0x349)][_0xb88c20(0x87a)]())return-0x1;}}}return _0x18b026[_0xb88c20(0x5d8)]!==_0x742b8d['_baseY']?_0x18b026[_0xb88c20(0x5d8)]-_0x742b8d[_0xb88c20(0x5d8)]:_0xb88c20(0x59f)!=='CEBNw'?_0x22ce66[_0xb88c20(0xbae)]()[_0xb88c20(0x411)]():_0x742b8d[_0xb88c20(0xb17)]-_0x18b026[_0xb88c20(0xb17)];},Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa97)]=function(){const _0x2c2e71=_0x4a3d8d;if(!VisuMZ['BattleCore'][_0x2c2e71(0xb75)][_0x2c2e71(0x4e0)][_0x2c2e71(0x805)])return;const _0x12f7b6=BattleManager[_0x2c2e71(0x18b)];if(_0x12f7b6){if(_0x12f7b6[_0x2c2e71(0x764)]()&&!$gameSystem['isSideView']())return;const _0x3330b1=_0x12f7b6[_0x2c2e71(0x28e)]();if(_0x3330b1&&_0x12f7b6[_0x2c2e71(0x764)]())this[_0x2c2e71(0x3f2)][_0x2c2e71(0x960)](_0x3330b1);}},Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xb7f)]=function(){const _0x558e0a=_0x4a3d8d;for(const _0x5cd7a0 of $gameParty[_0x558e0a(0x411)]()){if(!_0x5cd7a0)continue;if(!_0x5cd7a0[_0x558e0a(0x28e)]())continue;_0x5cd7a0[_0x558e0a(0x28e)]()[_0x558e0a(0x2b6)]=!![],_0x5cd7a0[_0x558e0a(0x28e)]()[_0x558e0a(0x254)]();}},Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xad3)]=function(){const _0x26c220=_0x4a3d8d;this[_0x26c220(0x18f)]=new Sprite(),Spriteset_Battle[_0x26c220(0x76d)]?'bWXUS'==='MvDRS'?this['_jumpHeight']=0x0:this[_0x26c220(0x960)](this[_0x26c220(0x18f)]):this[_0x26c220(0x470)]['addChild'](this[_0x26c220(0x18f)]),SceneManager[_0x26c220(0x3ff)][_0x26c220(0x18f)]=this[_0x26c220(0x18f)];},Spriteset_Battle['prototype']['createEnemyNames']=function(){const _0x301974=_0x4a3d8d;if(VisuMZ['BattleCore'][_0x301974(0xb75)][_0x301974(0xa50)][_0x301974(0x8c2)])return;this[_0x301974(0xacb)]=new Sprite(),BattleManager[_0x301974(0xa99)](this['_enemyNameContainer']);for(const _0x2a9c9d of this[_0x301974(0xae1)]){if(_0x301974(0x711)===_0x301974(0x711)){const _0x1e5396=new Sprite_EnemyName();this[_0x301974(0xacb)][_0x301974(0x960)](_0x1e5396),_0x1e5396[_0x301974(0x17f)](_0x2a9c9d);}else _0x481bbb['bitmap']=_0x207805['_emptyBitmap'];}},Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x85f)]=function(){const _0x4914e0=_0x4a3d8d;if(!this['_damageContainer'])return;if(!this[_0x4914e0(0x18f)])return;const _0x4f9042=Spriteset_Battle[_0x4914e0(0x76d)]?this['_damageContainer']['x']:0x0,_0x20ea50=Spriteset_Battle[_0x4914e0(0x76d)]?this[_0x4914e0(0x61c)]['y']:0x0,_0x40bd04=Imported[_0x4914e0(0x613)]?this[_0x4914e0(0x470)]['x']:0x0,_0x3f0038=Imported[_0x4914e0(0x613)]?this[_0x4914e0(0x470)]['y']:0x0;this[_0x4914e0(0x18f)]['x']=_0x4f9042+_0x40bd04,this['_uiContainer']['y']=_0x20ea50+_0x3f0038;},BattleManager[_0x4a3d8d(0xa99)]=function(_0x525928){const _0x5f22b9=_0x4a3d8d;if(!SceneManager[_0x5f22b9(0x3ff)]['_uiContainer'])return;SceneManager[_0x5f22b9(0x3ff)][_0x5f22b9(0x18f)]['addChild'](_0x525928);},Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xbc2)]=function(){return![];},Spriteset_Battle['prototype'][_0x4a3d8d(0x165)]=function(){const _0x434f1b=_0x4a3d8d;return this[_0x434f1b(0x7d4)]()[_0x434f1b(0x478)](_0x323363=>_0x323363['isFloating']());},Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa9a)]=function(){const _0x103a82=_0x4a3d8d;return this[_0x103a82(0x7d4)]()[_0x103a82(0x478)](_0x56ec55=>_0x56ec55[_0x103a82(0x712)]());},Spriteset_Battle[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x305)]=function(){const _0x54773a=_0x4a3d8d;return this[_0x54773a(0x7d4)]()['some'](_0x520d60=>_0x520d60['isGrowing']());},Spriteset_Battle['prototype'][_0x4a3d8d(0x4fb)]=function(){const _0x1d3e6e=_0x4a3d8d;return this[_0x1d3e6e(0x7d4)]()[_0x1d3e6e(0x478)](_0x4003ef=>_0x4003ef[_0x1d3e6e(0x665)]());},Spriteset_Battle['prototype'][_0x4a3d8d(0x19f)]=function(){const _0x192e62=_0x4a3d8d;return this[_0x192e62(0x7d4)]()['some'](_0x3c52be=>_0x3c52be[_0x192e62(0x4ef)]());},Spriteset_Battle['prototype'][_0x4a3d8d(0x89d)]=function(){const _0x2f0611=_0x4a3d8d;return this[_0x2f0611(0x7d4)]()['some'](_0x1fa36a=>_0x1fa36a[_0x2f0611(0x8a7)]());},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x681)]=Window_ItemList['prototype'][_0x4a3d8d(0x867)],Window_ItemList[_0x4a3d8d(0x3c4)]['maxCols']=function(){const _0x2ce748=_0x4a3d8d;if(SceneManager['isSceneBattle']()){if('NtNBk'===_0x2ce748(0xb26)){if(SceneManager[_0x2ce748(0x3ff)][_0x2ce748(0x801)]()===_0x2ce748(0xa18)){if(_0x2ce748(0xc21)===_0x2ce748(0xc21))return VisuMZ['BattleCore'][_0x2ce748(0xb75)][_0x2ce748(0x620)][_0x2ce748(0x62d)];else this[_0x2ce748(0xa19)](_0x2ce748(0x72e)),_0x430050[_0x2ce748(0x94c)][_0x2ce748(0xb7f)](),_0xd1af67[_0x2ce748(0x485)][_0x2ce748(0x2aa)]['call'](this),this['processPostBattleCommonEvents'](_0x2ce748(0xa9d));}else return VisuMZ[_0x2ce748(0x485)][_0x2ce748(0xb75)][_0x2ce748(0x620)][_0x2ce748(0xaab)];}else{const _0xecdee8=this[_0x2ce748(0x862)];if(_0xecdee8[_0x1362a3])return _0xecdee8[_0x3508c4];else{const _0x2360d6=new _0x3e9a92();return _0xecdee8[_0x434962]=_0x2360d6,this[_0x2ce748(0x87c)](_0x2360d6),this[_0x2ce748(0x87c)](this[_0x2ce748(0xae0)]),_0x2360d6;}}}else return VisuMZ[_0x2ce748(0x485)][_0x2ce748(0x681)][_0x2ce748(0xaf0)](this);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xbe9)]=Window_SkillList['prototype'][_0x4a3d8d(0x867)],Window_SkillList['prototype'][_0x4a3d8d(0x867)]=function(){const _0x51f93f=_0x4a3d8d;if(SceneManager[_0x51f93f(0x930)]()){if(_0x51f93f(0x40e)!==_0x51f93f(0xc16)){if(SceneManager['_scene'][_0x51f93f(0x801)]()===_0x51f93f(0xa18)){if('lnSsy'===_0x51f93f(0x7e3))return VisuMZ[_0x51f93f(0x485)]['Settings']['BattleLayout'][_0x51f93f(0x62d)];else this[_0x51f93f(0x385)]()?this[_0x51f93f(0x9c0)]():_0x4ad6fd[_0x51f93f(0x485)][_0x51f93f(0xbd1)][_0x51f93f(0xaf0)](this);}else{if(_0x51f93f(0x1b0)==='inKBO'){_0x4a0ae6(_0x51f93f(0x2a2)),_0x11c761[_0x51f93f(0x4c2)]();return;}else return VisuMZ['BattleCore'][_0x51f93f(0xb75)]['BattleLayout']['SkillItemStandardCols'];}}else _0x2c2426=_0x221a5e;}else return VisuMZ['BattleCore'][_0x51f93f(0xbe9)][_0x51f93f(0xaf0)](this);},VisuMZ[_0x4a3d8d(0x485)]['Window_Options_addGeneralOptions']=Window_Options['prototype'][_0x4a3d8d(0x5f4)],Window_Options['prototype'][_0x4a3d8d(0x5f4)]=function(){const _0x112ac7=_0x4a3d8d;VisuMZ[_0x112ac7(0x485)][_0x112ac7(0x68f)][_0x112ac7(0xaf0)](this),this[_0x112ac7(0xb7d)](),this[_0x112ac7(0x8ce)]();},Window_Options['prototype'][_0x4a3d8d(0xb7d)]=function(){const _0x3f199f=_0x4a3d8d;VisuMZ[_0x3f199f(0x485)][_0x3f199f(0xb75)][_0x3f199f(0x839)][_0x3f199f(0x297)]&&(this[_0x3f199f(0x992)](),this[_0x3f199f(0x8bb)]());},Window_Options[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x8ce)]=function(){const _0x14582e=_0x4a3d8d;if(!VisuMZ[_0x14582e(0x485)][_0x14582e(0xb75)][_0x14582e(0x4c8)]['AddHpGaugeOption'])return;const _0x3df91d=TextManager[_0x14582e(0x47e)],_0xc25985=_0x14582e(0x47e);this[_0x14582e(0x198)](_0x3df91d,_0xc25985);},Window_Options['prototype']['addBattleCoreAutoBattleStartupCommand']=function(){const _0x5d32dd=_0x4a3d8d,_0xb70af6=TextManager[_0x5d32dd(0x1c2)],_0x3fefbe=_0x5d32dd(0x8da);this[_0x5d32dd(0x198)](_0xb70af6,_0x3fefbe);},Window_Options[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x8bb)]=function(){const _0x2d24aa=_0x4a3d8d,_0x10617f=TextManager[_0x2d24aa(0x92d)],_0x960ac0=_0x2d24aa(0x48b);this['addCommand'](_0x10617f,_0x960ac0);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x4ac)]=Window_Options['prototype'][_0x4a3d8d(0x6be)],Window_Options[_0x4a3d8d(0x3c4)]['statusText']=function(_0x5a4872){const _0x4f3224=_0x4a3d8d,_0x2db51f=this[_0x4f3224(0x6bc)](_0x5a4872);if(_0x2db51f===_0x4f3224(0x48b))return this['statusTextAutoBattleStyle']();else{if(_0x4f3224(0x9c6)!==_0x4f3224(0x237))return VisuMZ[_0x4f3224(0x485)][_0x4f3224(0x4ac)]['call'](this,_0x5a4872);else{if(this['_growDuration']<=0x0)return;if(!this[_0x4f3224(0x6f2)])return;const _0x189c4b=this['_growDuration'],_0x2e2dac=this[_0x4f3224(0x1f7)],_0x4e0f5e=this[_0x4f3224(0x8b5)];_0x1180ce['VisuMZ_0_CoreEngine']?(this[_0x4f3224(0xa07)]=this['applyEasing'](this[_0x4f3224(0xa07)],this[_0x4f3224(0x932)],_0x189c4b,_0x2e2dac,_0x4e0f5e),this[_0x4f3224(0x21c)]=this[_0x4f3224(0x5e6)](this[_0x4f3224(0x21c)],this[_0x4f3224(0x6b8)],_0x189c4b,_0x2e2dac,_0x4e0f5e)):(this['_growX']=(this[_0x4f3224(0xa07)]*(_0x189c4b-0x1)+this[_0x4f3224(0x932)])/_0x189c4b,this[_0x4f3224(0x21c)]=(this[_0x4f3224(0x21c)]*(_0x189c4b-0x1)+this['_targetGrowY'])/_0x189c4b);this[_0x4f3224(0xac7)]--;if(this['_growDuration']<=0x0)this[_0x4f3224(0x580)]();}}},Window_Options[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa20)]=function(){const _0x4385a8=_0x4a3d8d,_0x44e026=VisuMZ[_0x4385a8(0x485)][_0x4385a8(0xb75)][_0x4385a8(0x839)],_0x371195=this[_0x4385a8(0xbea)](_0x4385a8(0x48b));return _0x371195?_0x44e026[_0x4385a8(0xa58)]:_0x44e026[_0x4385a8(0x215)];},Window_ShopStatus['prototype'][_0x4a3d8d(0x56d)]=function(){const _0x2c44cd=_0x4a3d8d,_0x43482a=DataManager['getDamageStyle'](this[_0x2c44cd(0x15a)]),_0x711215=VisuMZ[_0x2c44cd(0x31b)][_0x43482a];if(!_0x711215)return this[_0x2c44cd(0x6d7)]();const _0x42e38c=_0x2c44cd(0x360)['format'](this[_0x2c44cd(0x15a)][_0x2c44cd(0x83f)][_0x2c44cd(0x7d7)]),_0x4200fa=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x2c44cd(0x15a)][_0x2c44cd(0x83f)]['type']];return _0x711215[_0x42e38c][_0x2c44cd(0x8dd)](_0x4200fa);},Window_ShopStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x21a)]=function(){const _0x1ed673=_0x4a3d8d,_0xa2fe29=DataManager[_0x1ed673(0xabe)](this['_item']),_0x225ae4=VisuMZ[_0x1ed673(0x31b)][_0xa2fe29];if(!_0x225ae4)return this['getItemDamageAmountTextOriginal']();return _0x225ae4[_0x1ed673(0x42d)][_0x1ed673(0xaf0)](this);},VisuMZ['BattleCore'][_0x4a3d8d(0x6ea)]=Window_PartyCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x82a)],Window_PartyCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x82a)]=function(_0x34e160){const _0x1c3342=_0x4a3d8d;VisuMZ[_0x1c3342(0x485)][_0x1c3342(0x6ea)]['call'](this,_0x34e160),this['createCommandNameWindow'](_0x34e160);},Window_PartyCommand['prototype'][_0x4a3d8d(0x8f2)]=function(_0x5244fb){const _0x105914=_0x4a3d8d,_0x4ec655=new Rectangle(0x0,0x0,_0x5244fb[_0x105914(0xb49)],_0x5244fb[_0x105914(0x2cc)]);this['_commandNameWindow']=new Window_Base(_0x4ec655),this[_0x105914(0x479)][_0x105914(0x2f0)]=0x0,this[_0x105914(0x960)](this[_0x105914(0x479)]),this[_0x105914(0xc14)]();},Window_PartyCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x800)]=function(){const _0x11bcf7=_0x4a3d8d;Window_Command[_0x11bcf7(0x3c4)][_0x11bcf7(0x800)][_0x11bcf7(0xaf0)](this);if(this[_0x11bcf7(0x479)])this[_0x11bcf7(0xc14)]();},Window_PartyCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xc14)]=function(){const _0x1930bf=_0x4a3d8d,_0x5172d9=this[_0x1930bf(0x479)];_0x5172d9[_0x1930bf(0x368)][_0x1930bf(0x1db)]();const _0x10fe07=this['commandStyleCheck'](this[_0x1930bf(0xc07)]());if(_0x10fe07===_0x1930bf(0x958)&&this[_0x1930bf(0x66e)]()>0x0){if(_0x1930bf(0xa7e)!==_0x1930bf(0xa7e)){const _0x380baf=_0x1930bf(0xc28);let _0x376271=_0x4ed1c1[_0x1930bf(0x53d)],_0x32a47f=_0x21d8cf[_0x1930bf(0xbaa)];const _0x55249f=_0x1e6aee[_0x1930bf(0x9ea)];return _0x55249f['match'](/<DISPLAY ICON: (\d+)>/i)&&(_0x376271=_0x2189d1(_0x2bbc14['$1'])),_0x55249f['match'](/<DISPLAY TEXT: (.*)>/i)&&(_0x32a47f=_0x4835e2(_0xf257cb['$1'])),_0x380baf[_0x1930bf(0x8dd)](_0x376271,_0x32a47f);}else{const _0x1a961f=this[_0x1930bf(0x4d6)](this[_0x1930bf(0xc07)]());let _0x50433f=this[_0x1930bf(0xc1d)](this[_0x1930bf(0xc07)]());_0x50433f=_0x50433f['replace'](/\\I\[(\d+)\]/gi,''),_0x5172d9['resetFontSettings'](),this[_0x1930bf(0x592)](_0x50433f,_0x1a961f),this[_0x1930bf(0xb50)](_0x50433f,_0x1a961f),this[_0x1930bf(0xaa9)](_0x50433f,_0x1a961f);}}},Window_PartyCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x592)]=function(_0x151fdd,_0x12aa62){},Window_PartyCommand[_0x4a3d8d(0x3c4)]['commandNameWindowDrawText']=function(_0x2479fc,_0x35b2b6){const _0x1e731c=_0x4a3d8d,_0x588fce=this[_0x1e731c(0x479)];_0x588fce[_0x1e731c(0x1af)](_0x2479fc,0x0,_0x35b2b6['y'],_0x588fce[_0x1e731c(0x288)],_0x1e731c(0xb3f));},Window_PartyCommand[_0x4a3d8d(0x3c4)]['commandNameWindowCenter']=function(_0x1a7405,_0x2d7529){const _0x49f591=_0x4a3d8d,_0x4d54ce=this['_commandNameWindow'],_0x53d9b4=$gameSystem['windowPadding'](),_0x75ae55=_0x2d7529['x']+Math[_0x49f591(0x467)](_0x2d7529[_0x49f591(0xb49)]/0x2)+_0x53d9b4;_0x4d54ce['x']=_0x4d54ce['width']/-0x2+_0x75ae55,_0x4d54ce['y']=Math[_0x49f591(0x467)](_0x2d7529[_0x49f591(0x2cc)]/0x2);},Window_PartyCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x160)]=function(){const _0x4a272f=_0x4a3d8d;this[_0x4a272f(0x9d9)](),this[_0x4a272f(0x974)](),this[_0x4a272f(0x4a3)](),this[_0x4a272f(0x858)](),this[_0x4a272f(0x4d0)]();},Window_PartyCommand['prototype'][_0x4a3d8d(0x9d9)]=function(){const _0x1360d6=_0x4a3d8d,_0x1d7136=this[_0x1360d6(0x75c)](),_0x4f5d6a=VisuMZ[_0x1360d6(0x485)][_0x1360d6(0xb75)]['PartyCmd'][_0x1360d6(0xb94)],_0x564bd1=_0x1d7136===_0x1360d6(0x81f)?TextManager[_0x1360d6(0xc2c)]:_0x1360d6(0xc28)[_0x1360d6(0x8dd)](_0x4f5d6a,TextManager['fight']),_0x5e3243=this[_0x1360d6(0xa9c)]();this[_0x1360d6(0x198)](_0x564bd1,_0x1360d6(0xc2c),_0x5e3243);},Window_PartyCommand[_0x4a3d8d(0x3c4)]['isFightCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x974)]=function(){const _0x332660=_0x4a3d8d;if(!this[_0x332660(0x141)]())return;const _0x55308d=this[_0x332660(0x75c)](),_0x4b7936=VisuMZ[_0x332660(0x485)]['Settings'][_0x332660(0x768)][_0x332660(0x79e)],_0x42ca5b=_0x55308d==='text'?TextManager['autoBattle']:_0x332660(0xc28)[_0x332660(0x8dd)](_0x4b7936,TextManager['autoBattle']),_0x5b2083=this[_0x332660(0x610)]();this['addCommand'](_0x42ca5b,_0x332660(0x387),_0x5b2083);},Window_PartyCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x141)]=function(){const _0x624869=_0x4a3d8d;return VisuMZ[_0x624869(0x485)]['Settings'][_0x624869(0x768)][_0x624869(0x739)];},Window_PartyCommand[_0x4a3d8d(0x3c4)]['isAutoBattleCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x4a3)]=function(){},Window_PartyCommand['prototype'][_0x4a3d8d(0x858)]=function(){const _0x599c03=_0x4a3d8d;if(!this[_0x599c03(0x5db)]())return;const _0x4dc3ce=this['commandStyle'](),_0x572ede=VisuMZ[_0x599c03(0x485)][_0x599c03(0xb75)]['PartyCmd'][_0x599c03(0xb22)],_0x19048f=_0x4dc3ce===_0x599c03(0x81f)?TextManager['options']:_0x599c03(0xc28)['format'](_0x572ede,TextManager['options']),_0x314dfb=this[_0x599c03(0xa57)]();this[_0x599c03(0x198)](_0x19048f,'options',_0x314dfb);},Window_PartyCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x5db)]=function(){const _0xb00ac2=_0x4a3d8d;return VisuMZ[_0xb00ac2(0x485)]['Settings'][_0xb00ac2(0x768)][_0xb00ac2(0x365)];},Window_PartyCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa57)]=function(){return!![];},Window_PartyCommand['prototype'][_0x4a3d8d(0x4d0)]=function(){const _0x2b2914=_0x4a3d8d,_0x2de4a2=this[_0x2b2914(0x75c)](),_0x5d68f8=VisuMZ['BattleCore'][_0x2b2914(0xb75)][_0x2b2914(0x768)][_0x2b2914(0x7bb)],_0x39a5f6=_0x2de4a2===_0x2b2914(0x81f)?TextManager['escape']:_0x2b2914(0xc28)['format'](_0x5d68f8,TextManager[_0x2b2914(0x565)]),_0xc3c095=this[_0x2b2914(0x8fb)]();this['addCommand'](_0x39a5f6,_0x2b2914(0x565),_0xc3c095);},Window_PartyCommand[_0x4a3d8d(0x3c4)]['isEscapeCommandEnabled']=function(){return BattleManager['canEscape']();},Window_PartyCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x3ce)]=function(){const _0x33ec91=_0x4a3d8d;return VisuMZ['BattleCore'][_0x33ec91(0xb75)][_0x33ec91(0x768)][_0x33ec91(0x20b)];},Window_PartyCommand[_0x4a3d8d(0x3c4)]['drawItem']=function(_0x16b044){const _0x5dd5c7=_0x4a3d8d,_0x1c6053=this[_0x5dd5c7(0x201)](_0x16b044);if(_0x1c6053==='iconText'){if('JFKOW'!==_0x5dd5c7(0x3c8))return;else this['drawItemStyleIconText'](_0x16b044);}else{if(_0x1c6053===_0x5dd5c7(0x958)){if('bNRhh'!==_0x5dd5c7(0x9c1))this['drawItemStyleIcon'](_0x16b044);else return 0x1*this[_0x5dd5c7(0x21c)];}else{if(_0x5dd5c7(0x43a)!==_0x5dd5c7(0xb91))Window_Command[_0x5dd5c7(0x3c4)][_0x5dd5c7(0x36d)]['call'](this,_0x16b044);else return![];}}},Window_PartyCommand['prototype']['commandStyle']=function(){const _0x306cca=_0x4a3d8d;return VisuMZ[_0x306cca(0x485)][_0x306cca(0xb75)][_0x306cca(0x768)]['CmdStyle'];},Window_PartyCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x201)]=function(_0x408494){const _0xd3cea0=_0x4a3d8d;if(_0x408494<0x0)return _0xd3cea0(0x81f);const _0x1e1ab7=this[_0xd3cea0(0x75c)]();if(_0x1e1ab7!=='auto'){if('CTCUj'===_0xd3cea0(0x43e))return _0x1e1ab7;else _0xc0ba93+=_0x1d571b(_0x2591f4['$1'])/0x64;}else{if(this[_0xd3cea0(0x66e)]()>0x0){const _0x4c86a3=this['commandName'](_0x408494);if(_0x4c86a3[_0xd3cea0(0x591)](/\\I\[(\d+)\]/i)){const _0x30c4b8=this[_0xd3cea0(0x4d6)](_0x408494),_0x41778c=this[_0xd3cea0(0x32d)](_0x4c86a3)[_0xd3cea0(0xb49)];if(_0x41778c<=_0x30c4b8[_0xd3cea0(0xb49)]){if(_0xd3cea0(0x238)!=='aJNhZ')this[_0xd3cea0(0x47d)]=this[_0xd3cea0(0x47d)]||[];else return _0xd3cea0(0x863);}else return'icon';}}}return'text';},Window_PartyCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x4a5)]=function(_0x52c9c7){const _0x2157fc=_0x4a3d8d,_0x49d0af=this['itemLineRect'](_0x52c9c7),_0x306355=this[_0x2157fc(0xc1d)](_0x52c9c7),_0x3ed254=this[_0x2157fc(0x32d)](_0x306355)['width'];this[_0x2157fc(0xc41)](this['isCommandEnabled'](_0x52c9c7));const _0x1e1494=this[_0x2157fc(0x3ce)]();if(_0x1e1494==='right')this[_0x2157fc(0x6fa)](_0x306355,_0x49d0af['x']+_0x49d0af[_0x2157fc(0xb49)]-_0x3ed254,_0x49d0af['y'],_0x3ed254);else{if(_0x1e1494===_0x2157fc(0xb3f)){if(_0x2157fc(0x5b9)!==_0x2157fc(0x886)){const _0x1368a3=_0x49d0af['x']+Math[_0x2157fc(0x467)]((_0x49d0af['width']-_0x3ed254)/0x2);this[_0x2157fc(0x6fa)](_0x306355,_0x1368a3,_0x49d0af['y'],_0x3ed254);}else{_0x3873ac=_0xaf83ba['BattleCore']['JS'][_0x557e34][_0x2157fc(0xaf0)](this,this[_0x2157fc(0x601)](),_0x109396,this[_0x2157fc(0x49d)](),_0xde9a6c);if(_0x22ec54)_0x18ca96=_0x1b7d66;}}else this[_0x2157fc(0x6fa)](_0x306355,_0x49d0af['x'],_0x49d0af['y'],_0x3ed254);}},Window_PartyCommand[_0x4a3d8d(0x3c4)]['drawItemStyleIcon']=function(_0x399a40){const _0x571340=_0x4a3d8d;this[_0x571340(0xc1d)](_0x399a40)[_0x571340(0x591)](/\\I\[(\d+)\]/i);const _0x282e4a=Number(RegExp['$1'])||0x0,_0x203db2=this[_0x571340(0x4d6)](_0x399a40),_0xc94e55=_0x203db2['x']+Math['floor']((_0x203db2[_0x571340(0xb49)]-ImageManager[_0x571340(0x1dc)])/0x2),_0x2b1979=_0x203db2['y']+(_0x203db2[_0x571340(0x2cc)]-ImageManager[_0x571340(0xa48)])/0x2;this[_0x571340(0x878)](_0x282e4a,_0xc94e55,_0x2b1979);},Window_PartyCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xb20)]=function(){},Window_PartyCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x5c1)]=function(){const _0x553358=_0x4a3d8d;Window_Command[_0x553358(0x3c4)][_0x553358(0x5c1)]['call'](this);const _0x55766c=this[_0x553358(0x801)]();_0x55766c===_0x553358(0xa18)&&this[_0x553358(0x639)]();},Window_PartyCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x801)]=function(){const _0x3e6fd0=_0x4a3d8d;if(this[_0x3e6fd0(0x70a)])return this['_battleLayoutStyle'];return this[_0x3e6fd0(0x70a)]=SceneManager['_scene'][_0x3e6fd0(0x801)](),this['_battleLayoutStyle'];},Window_PartyCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x527)]=function(){const _0x9563b6=_0x4a3d8d,_0x4cd3bc=VisuMZ[_0x9563b6(0x485)][_0x9563b6(0xb75)]['PartyCmd'],_0x229865=this[_0x9563b6(0x3a9)]();switch(_0x229865){case'fight':this['_helpWindow'][_0x9563b6(0x3e4)](_0x4cd3bc[_0x9563b6(0xbd0)]);break;case'autoBattle':this['_helpWindow'][_0x9563b6(0x3e4)](_0x4cd3bc[_0x9563b6(0x1a2)]);break;case _0x9563b6(0x4c9):this[_0x9563b6(0x910)][_0x9563b6(0x3e4)](_0x4cd3bc[_0x9563b6(0xa1f)]);break;case _0x9563b6(0x565):this[_0x9563b6(0x910)][_0x9563b6(0x3e4)](_0x4cd3bc[_0x9563b6(0x1b6)]);break;default:this[_0x9563b6(0x910)]['setText']('');break;}},VisuMZ['BattleCore']['Window_ActorCommand_initialize']=Window_ActorCommand[_0x4a3d8d(0x3c4)]['initialize'],Window_ActorCommand[_0x4a3d8d(0x3c4)]['initialize']=function(_0x2f6902){const _0x3fc69c=_0x4a3d8d;VisuMZ[_0x3fc69c(0x485)][_0x3fc69c(0x513)][_0x3fc69c(0xaf0)](this,_0x2f6902),this[_0x3fc69c(0x8f2)](_0x2f6902);},Window_ActorCommand['prototype'][_0x4a3d8d(0x8f2)]=function(_0x3ad676){const _0x43d2df=_0x4a3d8d,_0x26d753=new Rectangle(0x0,0x0,_0x3ad676[_0x43d2df(0xb49)],_0x3ad676[_0x43d2df(0x2cc)]);this[_0x43d2df(0x479)]=new Window_Base(_0x26d753),this[_0x43d2df(0x479)][_0x43d2df(0x2f0)]=0x0,this[_0x43d2df(0x960)](this[_0x43d2df(0x479)]),this[_0x43d2df(0xc14)]();},Window_ActorCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x800)]=function(){const _0x1afbb8=_0x4a3d8d;Window_Command[_0x1afbb8(0x3c4)]['callUpdateHelp'][_0x1afbb8(0xaf0)](this);if(this[_0x1afbb8(0x479)])this['updateCommandNameWindow']();},Window_ActorCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xc14)]=function(){const _0x2a69e9=_0x4a3d8d,_0x28f543=this[_0x2a69e9(0x479)];_0x28f543[_0x2a69e9(0x368)][_0x2a69e9(0x1db)]();const _0x3c35d3=this[_0x2a69e9(0x201)](this[_0x2a69e9(0xc07)]());if(_0x3c35d3===_0x2a69e9(0x958)&&this[_0x2a69e9(0x66e)]()>0x0){const _0x2c78ae=this[_0x2a69e9(0x4d6)](this[_0x2a69e9(0xc07)]());let _0x494ea1=this[_0x2a69e9(0xc1d)](this['index']());_0x494ea1=_0x494ea1[_0x2a69e9(0x809)](/\\I\[(\d+)\]/gi,''),_0x28f543[_0x2a69e9(0x875)](),this['commandNameWindowDrawBackground'](_0x494ea1,_0x2c78ae),this['commandNameWindowDrawText'](_0x494ea1,_0x2c78ae),this[_0x2a69e9(0xaa9)](_0x494ea1,_0x2c78ae);}},Window_ActorCommand['prototype'][_0x4a3d8d(0x592)]=function(_0x2221ce,_0x3b1cc3){},Window_ActorCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xb50)]=function(_0x576512,_0xf693be){const _0x328371=_0x4a3d8d,_0x2ed943=this[_0x328371(0x479)];_0x2ed943['drawText'](_0x576512,0x0,_0xf693be['y'],_0x2ed943[_0x328371(0x288)],_0x328371(0xb3f));},Window_ActorCommand[_0x4a3d8d(0x3c4)]['commandNameWindowCenter']=function(_0x6202a6,_0x5835cd){const _0xe32a08=_0x4a3d8d,_0x2856cb=this[_0xe32a08(0x479)],_0x46c24c=$gameSystem[_0xe32a08(0x39c)](),_0x1ac4fa=_0x5835cd['x']+Math['floor'](_0x5835cd[_0xe32a08(0xb49)]/0x2)+_0x46c24c;_0x2856cb['x']=_0x2856cb[_0xe32a08(0xb49)]/-0x2+_0x1ac4fa,_0x2856cb['y']=Math['floor'](_0x5835cd[_0xe32a08(0x2cc)]/0x2);},Window_ActorCommand[_0x4a3d8d(0x3c4)]['makeCommandList']=function(){const _0x4d68e0=_0x4a3d8d;if(!this[_0x4d68e0(0x6dd)])return;const _0x13a55d=this[_0x4d68e0(0x6dd)]['battleCommands']();for(const _0x2b720d of _0x13a55d){this['makeBattleCommand'](_0x2b720d[_0x4d68e0(0x302)]()[_0x4d68e0(0x82d)]());}},Window_ActorCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa90)]=function(_0x397a79){const _0x32a21a=_0x4a3d8d;if(_0x397a79===_0x32a21a(0x6e8)){if(_0x32a21a(0x7c0)===_0x32a21a(0x4c0)){const _0x2a680f=this['_actorCommandWindow'];_0x2a680f['setHandler'](_0x32a21a(0x565),this[_0x32a21a(0x4e8)][_0x32a21a(0x2a0)](this)),_0x2a680f[_0x32a21a(0xb07)]('autoBattle',this[_0x32a21a(0x7c8)]['bind'](this)),_0x2a680f[_0x32a21a(0xb07)]('singleSkill',this[_0x32a21a(0x9ef)][_0x32a21a(0x2a0)](this)),_0x50a35e[_0x32a21a(0x1d1)]()&&(this[_0x32a21a(0x385)]()?delete _0x2a680f[_0x32a21a(0xa30)]['cancel']:_0x2a680f[_0x32a21a(0xb07)](_0x32a21a(0xb9f),this[_0x32a21a(0x535)][_0x32a21a(0x2a0)](this)));}else this[_0x32a21a(0xb9a)]();}if([_0x32a21a(0x5fa),_0x32a21a(0x96d)]['includes'](_0x397a79)){if(_0x32a21a(0x688)!==_0x32a21a(0x64e))this[_0x32a21a(0x6fc)]();else return _0x1897b6[_0x32a21a(0x485)][_0x32a21a(0xb75)][_0x32a21a(0x839)]['AutoBattleOK'];}_0x397a79===_0x32a21a(0x52e)&&this[_0x32a21a(0x69d)]();_0x397a79===_0x32a21a(0x36a)&&this[_0x32a21a(0x651)]();_0x397a79===_0x32a21a(0x7ba)&&this[_0x32a21a(0x4d0)]();_0x397a79==='AUTO\x20BATTLE'&&this[_0x32a21a(0x974)]();if(_0x397a79[_0x32a21a(0x591)](/STYPE: (\d+)/i)){if(_0x32a21a(0x9f5)!=='mZxdJ'){if(!_0x21f97b[_0x32a21a(0x930)]())return;const _0x2363d6=this[_0x32a21a(0x28e)]();if(!_0x2363d6)return;let _0x1ef2da=this['isActor']()?_0x2363d6['_weaponSprite']:_0x2363d6[_0x32a21a(0x1d8)][_0x32a21a(0x4df)];_0x1ef2da&&_0x1ef2da[_0x32a21a(0x4da)](0x0);}else{const _0x4c7ea6=Number(RegExp['$1']);this[_0x32a21a(0x6e2)](_0x4c7ea6);}}else{if(_0x397a79[_0x32a21a(0x591)](/STYPE: (.*)/i)){if(_0x32a21a(0xb41)!=='BVhhK'){const _0xcb1590=DataManager[_0x32a21a(0x65f)](RegExp['$1']);this[_0x32a21a(0x6e2)](_0xcb1590);}else _0x38cf04['BattleCore'][_0x32a21a(0x868)]['call'](this),this[_0x32a21a(0xa8b)][_0x32a21a(0x6df)](),this[_0x32a21a(0x311)]();}}_0x397a79===_0x32a21a(0xb7b)&&this[_0x32a21a(0xad4)]();if(_0x397a79[_0x32a21a(0x591)](/SKILL: (\d+)/i)){const _0x1aba3d=Number(RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x1aba3d]);}else{if(_0x397a79['match'](/SKILL: (.*)/i)){if(_0x32a21a(0x42e)!==_0x32a21a(0x42e)){const _0x107c39=_0x78c581[_0x32a21a(0x485)][_0x32a21a(0xb75)][_0x32a21a(0x225)];if(_0x107c39&&_0x107c39[_0x32a21a(0x8c9)])return _0x107c39[_0x32a21a(0x8c9)]['call'](this);this[_0x32a21a(0xb49)]=_0x30411a['width'],this[_0x32a21a(0x2cc)]=_0x1fdebe[_0x32a21a(0x2cc)];const _0xe260b=_0x46e107[_0x32a21a(0x885)](0x1,this['width']/this[_0x32a21a(0x2dd)]['width']),_0xe622ae=_0x192aeb[_0x32a21a(0x885)](0x1,this['height']/this[_0x32a21a(0x2dd)][_0x32a21a(0x2cc)]),_0x5c0579=_0x24aa16[_0x32a21a(0x559)](_0xe260b,_0xe622ae);this['scale']['x']=_0x5c0579,this[_0x32a21a(0x3cb)]['y']=_0x5c0579,this['x']=(_0x38ec1e[_0x32a21a(0xb49)]-this[_0x32a21a(0xb49)])/0x2,this['y']=_0x40210f[_0x32a21a(0x2cc)]-this[_0x32a21a(0x2cc)];}else{const _0x5aa796=DataManager[_0x32a21a(0x8bc)](RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x5aa796]);}}}if(_0x397a79===_0x32a21a(0x58d)&&Imported[_0x32a21a(0xa69)]){if(_0x32a21a(0xc0b)===_0x32a21a(0x417)){const _0x3f7254=this['_actor'][_0x32a21a(0x322)]();for(const _0x52ecb2 of _0x3f7254){this[_0x32a21a(0x6e2)](_0x52ecb2);}}else this[_0x32a21a(0x16d)]();}if([_0x32a21a(0x72a),_0x32a21a(0x42c)][_0x32a21a(0xbff)](_0x397a79)&&Imported[_0x32a21a(0x7dd)]){if('TMRuH'!==_0x32a21a(0x704))this[_0x32a21a(0x633)]();else return _0x6a860f[_0x32a21a(0x485)][_0x32a21a(0xb75)]['PartyCmd'][_0x32a21a(0x574)];}_0x397a79===_0x32a21a(0x3b4)&&Imported['VisuMZ_2_WeaponSwapSystem']&&this[_0x32a21a(0x194)](!![]);},Window_ActorCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xb9a)]=function(){const _0x51fb43=_0x4a3d8d,_0x43a405=$dataSkills[this['_actor'][_0x51fb43(0x5e9)]()];if(!_0x43a405)return;if(!this[_0x51fb43(0x64a)](_0x43a405))return;const _0xa76f5f=this[_0x51fb43(0x75c)](),_0x41c094=DataManager[_0x51fb43(0x47a)](_0x43a405),_0x5eb5aa=DataManager['battleCommandIcon'](_0x43a405),_0x4a421e=_0xa76f5f===_0x51fb43(0x81f)?_0x41c094:_0x51fb43(0xc28)[_0x51fb43(0x8dd)](_0x5eb5aa,_0x41c094);this[_0x51fb43(0x198)](_0x4a421e,_0x51fb43(0xadd),this[_0x51fb43(0x6dd)][_0x51fb43(0x9d6)]());},Window_ActorCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x69d)]=function(){const _0x2027da=_0x4a3d8d,_0x5f4a6d=$dataSkills[this[_0x2027da(0x6dd)][_0x2027da(0x8e4)]()];if(!_0x5f4a6d)return;if(!this['canAddSkillCommand'](_0x5f4a6d))return;const _0x3a20bc=this[_0x2027da(0x75c)](),_0x40316e=DataManager[_0x2027da(0x47a)](_0x5f4a6d),_0x1c651f=DataManager[_0x2027da(0xb79)](_0x5f4a6d),_0x39ec88=_0x3a20bc===_0x2027da(0x81f)?_0x40316e:'\x5cI[%1]%2'[_0x2027da(0x8dd)](_0x1c651f,_0x40316e);this[_0x2027da(0x198)](_0x39ec88,_0x2027da(0x8e0),this[_0x2027da(0x6dd)][_0x2027da(0x37d)]());},Window_ActorCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x651)]=function(){const _0xb589d3=_0x4a3d8d,_0x4016f7=this[_0xb589d3(0x75c)](),_0x5abcdd=VisuMZ[_0xb589d3(0x485)][_0xb589d3(0xb75)][_0xb589d3(0x810)][_0xb589d3(0x247)],_0x3879d1=_0x4016f7===_0xb589d3(0x81f)?TextManager[_0xb589d3(0x49d)]:_0xb589d3(0xc28)['format'](_0x5abcdd,TextManager[_0xb589d3(0x49d)]),_0x5e5256=this['isItemCommandEnabled']();this[_0xb589d3(0x198)](_0x3879d1,_0xb589d3(0x49d),_0x5e5256);},Window_ActorCommand[_0x4a3d8d(0x3c4)]['isItemCommandEnabled']=function(){const _0x2b6d2e=_0x4a3d8d;return this[_0x2b6d2e(0x6dd)]&&this['_actor'][_0x2b6d2e(0xc23)]();},Window_ActorCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x6fc)]=function(){const _0x56371d=_0x4a3d8d,_0x28822d=this[_0x56371d(0x6dd)]['skillTypes']();for(const _0x3f1ae5 of _0x28822d){this[_0x56371d(0x6e2)](_0x3f1ae5);}},Window_ActorCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x6e2)]=function(_0x174d23){const _0x369622=_0x4a3d8d;let _0x489124=$dataSystem[_0x369622(0x322)][_0x174d23];if(!_0x489124)return;let _0xd03ed5=_0x489124;const _0x1eb2d2=this['commandStyle']();if(_0x1eb2d2===_0x369622(0x81f))_0xd03ed5=_0xd03ed5[_0x369622(0x809)](/\x1I\[(\d+)\]/gi,''),_0xd03ed5=_0xd03ed5[_0x369622(0x809)](/\\I\[(\d+)\]/gi,'');else{if(!_0x489124[_0x369622(0x591)](/\\I\[(\d+)\]/i)){const _0x3118b1=Imported['VisuMZ_1_SkillsStatesCore']?VisuMZ[_0x369622(0x333)][_0x369622(0xb75)]['Skills']:VisuMZ[_0x369622(0x485)][_0x369622(0xb75)]['ActorCmd'],_0x224a0b=$dataSystem[_0x369622(0xb4c)][_0x369622(0xbff)](_0x174d23),_0x42c576=_0x224a0b?_0x3118b1['IconStypeMagic']:_0x3118b1['IconStypeNorm'];_0xd03ed5='\x5cI[%1]%2'[_0x369622(0x8dd)](_0x42c576,_0x489124);}}this[_0x369622(0x198)](_0xd03ed5,'skill',!![],_0x174d23);},Window_ActorCommand[_0x4a3d8d(0x3c4)]['addSingleSkillCommands']=function(){const _0x1aa90e=_0x4a3d8d,_0x122dca=this['_actor'][_0x1aa90e(0x322)](),_0x110204=this[_0x1aa90e(0x6dd)][_0x1aa90e(0x571)]();for(const _0x241404 of _0x110204){if(!_0x241404)continue;if(Imported[_0x1aa90e(0x304)]){if(_0x1aa90e(0x2d0)!==_0x1aa90e(0xaae)){if(this[_0x1aa90e(0x33d)](_0x241404))continue;if(this[_0x1aa90e(0x4eb)](_0x241404))continue;}else this[_0x1aa90e(0x168)]='sideview_ui';}else{if(!_0x122dca[_0x1aa90e(0xbff)](_0x241404[_0x1aa90e(0x731)])){if(_0x1aa90e(0x7f7)!=='HRwSc')continue;else _0x333a9c=_0x5c7abe[_0x1aa90e(0x28e)]()[_0x1aa90e(0x966)],_0x3cc41c=_0x33f816['battler']()[_0x1aa90e(0x649)];}}this[_0x1aa90e(0x3d4)](_0x241404);}},Window_ActorCommand[_0x4a3d8d(0x3c4)]['noSimilarSTypes']=function(_0x5926bc){const _0x411898=_0x4a3d8d,_0x403326=this['_actor']['skillTypes'](),_0xbdfc2b=_0x403326[_0x411898(0x3d0)](_0x5a28f0=>DataManager[_0x411898(0x3e7)](_0x5926bc)[_0x411898(0xbff)](_0x5a28f0));return _0xbdfc2b[_0x411898(0x482)]<=0x0;},Window_ActorCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x4eb)]=function(_0x50aff3){const _0x17d842=_0x4a3d8d;if(Imported['VisuMZ_1_SkillsStatesCore']){if('oRLhi'===_0x17d842(0x973)){if(VisuMZ[_0x17d842(0x333)][_0x17d842(0x553)]>=1.24){if(this[_0x17d842(0x6dd)]){if(!VisuMZ['SkillsStatesCore']['CheckVisibleBattleNotetags'](this[_0x17d842(0x6dd)],_0x50aff3))return!![];if(!VisuMZ[_0x17d842(0x333)]['CheckVisibleSwitchNotetags'](this[_0x17d842(0x6dd)],_0x50aff3))return!![];if(!VisuMZ[_0x17d842(0x333)][_0x17d842(0xa52)](this[_0x17d842(0x6dd)],_0x50aff3))return!![];}}else{if(!Window_SkillList[_0x17d842(0x3c4)]['checkShowHideBattleNotetags'][_0x17d842(0xaf0)](this,_0x50aff3))return!![];if(!Window_SkillList[_0x17d842(0x3c4)][_0x17d842(0x15e)][_0x17d842(0xaf0)](this,_0x50aff3))return!![];if(!Window_SkillList['prototype'][_0x17d842(0xbf6)][_0x17d842(0xaf0)](this,_0x50aff3))return!![];}}else _0x3b4c4e['push'](_0x17d842(0xa59),_0x3ee490);}return![];},Window_ActorCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x3d4)]=function(_0x283613){const _0x2f4b2b=_0x4a3d8d;if(!_0x283613)return;if(!this[_0x2f4b2b(0x64a)](_0x283613))return;const _0xd34db7=this['commandStyle'](),_0x3b6201=DataManager['battleCommandName'](_0x283613),_0x339948=DataManager[_0x2f4b2b(0xb79)](_0x283613),_0x836424=_0xd34db7===_0x2f4b2b(0x81f)?_0x3b6201:_0x2f4b2b(0xc28)['format'](_0x339948,_0x3b6201),_0xd39a44=this['_actor']['canUse'](_0x283613);this[_0x2f4b2b(0x198)](_0x836424,'singleSkill',_0xd39a44,_0x283613['id']);},Window_ActorCommand[_0x4a3d8d(0x3c4)]['canAddSkillCommand']=function(_0x22f49c){const _0x160dc5=_0x4a3d8d,_0x308eeb=_0x22f49c['note'];if(_0x308eeb['match'](/<COMMAND REQUIRE LEARN>/i)){if(!this['_actor'][_0x160dc5(0x811)](_0x22f49c['id']))return![];}if(_0x308eeb['match'](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x160dc5(0x6dd)][_0x160dc5(0xba7)](_0x22f49c['id']))return![];}const _0x176380=VisuMZ[_0x160dc5(0x485)][_0x160dc5(0x7d8)](_0x22f49c,_0x160dc5(0x9a8));if(VisuMZ[_0x160dc5(0x485)]['JS'][_0x176380]){if(_0x160dc5(0x3a1)!=='HHERT')return _0x9bb6f0['BattleCore']['Game_Interpreter_command283'][_0x160dc5(0xaf0)](this,_0x429d58);else{if(!VisuMZ['BattleCore']['JS'][_0x176380][_0x160dc5(0xaf0)](this,this['_actor'],_0x22f49c))return![];}}return VisuMZ[_0x160dc5(0x485)]['CheckSkillCommandShowSwitches'](_0x22f49c);},VisuMZ[_0x4a3d8d(0x485)]['CheckSkillCommandShowSwitches']=function(_0x2887cd){const _0x583aa2=_0x4a3d8d,_0x4ad861=_0x2887cd[_0x583aa2(0x9ea)];if(_0x4ad861[_0x583aa2(0x591)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x583aa2(0x7bc)!==_0x583aa2(0x7bc))this[_0x583aa2(0x7dc)](_0x583aa2(0x460));else{const _0x2353f6=JSON[_0x583aa2(0x3cd)]('['+RegExp['$1'][_0x583aa2(0x591)](/\d+/g)+']');for(const _0x1f2ee0 of _0x2353f6){if(_0x583aa2(0x921)!==_0x583aa2(0x921))return!![];else{if(!$gameSwitches[_0x583aa2(0x3d8)](_0x1f2ee0))return![];}}return!![];}}if(_0x4ad861['match'](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x5e3137=JSON[_0x583aa2(0x3cd)]('['+RegExp['$1'][_0x583aa2(0x591)](/\d+/g)+']');for(const _0x497354 of _0x5e3137){if(!$gameSwitches[_0x583aa2(0x3d8)](_0x497354))return![];}return!![];}if(_0x4ad861[_0x583aa2(0x591)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x5c047b=JSON[_0x583aa2(0x3cd)]('['+RegExp['$1'][_0x583aa2(0x591)](/\d+/g)+']');for(const _0x33a476 of _0x5c047b){if($gameSwitches[_0x583aa2(0x3d8)](_0x33a476))return!![];}return![];}if(_0x4ad861['match'](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x5c6672=JSON[_0x583aa2(0x3cd)]('['+RegExp['$1'][_0x583aa2(0x591)](/\d+/g)+']');for(const _0x536620 of _0x5c6672){if(_0x583aa2(0x336)!==_0x583aa2(0x336)){if(_0x41b9c6['_baseX']>_0x5aa954)_0x320e6b+=_0x4a5c66[_0x583aa2(0xb49)]/0x2+_0x3f9fc3;if(_0x21b5c8[_0x583aa2(0x232)]<_0x3db231)_0x2b49ec-=_0x228c6a['width']/0x2+_0x1e918c;}else{if(!$gameSwitches['value'](_0x536620))return!![];}}return![];}if(_0x4ad861[_0x583aa2(0x591)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x318e2a=JSON[_0x583aa2(0x3cd)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x57d650 of _0x318e2a){if(_0x583aa2(0x1f9)===_0x583aa2(0x2f2))_0x28b7c7[_0x583aa2(0x485)][_0x583aa2(0x351)]['call'](this),this[_0x583aa2(0x9bb)]();else{if(!$gameSwitches['value'](_0x57d650))return!![];}}return![];}if(_0x4ad861[_0x583aa2(0x591)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0xc5b0c3=JSON[_0x583aa2(0x3cd)]('['+RegExp['$1'][_0x583aa2(0x591)](/\d+/g)+']');for(const _0x3e5f2d of _0xc5b0c3){if($gameSwitches[_0x583aa2(0x3d8)](_0x3e5f2d))return![];}return!![];}return!![];},Window_ActorCommand['prototype']['addEscapeCommand']=function(){const _0x5d220c=_0x4a3d8d,_0x3f4485=this[_0x5d220c(0x75c)](),_0x39480e=VisuMZ[_0x5d220c(0x485)]['Settings']['PartyCmd'][_0x5d220c(0x7bb)],_0x1649d0=_0x3f4485==='text'?TextManager[_0x5d220c(0x565)]:_0x5d220c(0xc28)[_0x5d220c(0x8dd)](_0x39480e,TextManager[_0x5d220c(0x565)]),_0xc6b4cb=this[_0x5d220c(0x8fb)]();this[_0x5d220c(0x198)](_0x1649d0,'escape',_0xc6b4cb);},Window_ActorCommand[_0x4a3d8d(0x3c4)]['isEscapeCommandEnabled']=function(){return BattleManager['canEscape']();},Window_ActorCommand['prototype'][_0x4a3d8d(0x974)]=function(){const _0xfda1cb=_0x4a3d8d,_0x48752a=this['commandStyle'](),_0x511c87=VisuMZ['BattleCore'][_0xfda1cb(0xb75)]['PartyCmd'][_0xfda1cb(0x79e)],_0x5234ed=_0x48752a===_0xfda1cb(0x81f)?TextManager[_0xfda1cb(0x387)]:'\x5cI[%1]%2'[_0xfda1cb(0x8dd)](_0x511c87,TextManager[_0xfda1cb(0x387)]),_0x303057=this[_0xfda1cb(0x610)]();this['addCommand'](_0x5234ed,_0xfda1cb(0x387),_0x303057);},Window_ActorCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x610)]=function(){return!![];},Window_ActorCommand['prototype']['itemTextAlign']=function(){const _0x25a79c=_0x4a3d8d;return VisuMZ[_0x25a79c(0x485)]['Settings'][_0x25a79c(0x810)][_0x25a79c(0x20b)];},Window_ActorCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x36d)]=function(_0x5bb646){const _0x548883=_0x4a3d8d,_0x40bd1b=this[_0x548883(0x201)](_0x5bb646);if(_0x40bd1b==='iconText')_0x548883(0xa44)==='lWbIW'?_0x223103[_0x548883(0xb20)]():this['drawItemStyleIconText'](_0x5bb646);else _0x40bd1b===_0x548883(0x958)?this[_0x548883(0x217)](_0x5bb646):Window_Command[_0x548883(0x3c4)][_0x548883(0x36d)][_0x548883(0xaf0)](this,_0x5bb646);this[_0x548883(0xc42)](_0x5bb646);},Window_ActorCommand['prototype'][_0x4a3d8d(0x75c)]=function(){const _0x583096=_0x4a3d8d;return VisuMZ['BattleCore']['Settings'][_0x583096(0x810)][_0x583096(0x9b8)];},Window_ActorCommand['prototype'][_0x4a3d8d(0x201)]=function(_0x5764b3){const _0x385b6d=_0x4a3d8d;if(_0x5764b3<0x0)return _0x385b6d(0x81f);const _0x28a81c=this[_0x385b6d(0x75c)]();if(_0x28a81c!=='auto')return _0x28a81c;else{if(this['maxItems']()>0x0){const _0x28b432=this[_0x385b6d(0xc1d)](_0x5764b3);if(_0x28b432['match'](/\\I\[(\d+)\]/i)){const _0x2fb5ba=this[_0x385b6d(0x4d6)](_0x5764b3),_0x9b1c3=this[_0x385b6d(0x32d)](_0x28b432)[_0x385b6d(0xb49)];return _0x9b1c3<=_0x2fb5ba[_0x385b6d(0xb49)]?'iconText':'icon';}}}return _0x385b6d(0x81f);},Window_ActorCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x4a5)]=function(_0xdb56c0){const _0x116124=_0x4a3d8d,_0x4faa94=this[_0x116124(0x4d6)](_0xdb56c0),_0x5d9949=this['commandName'](_0xdb56c0),_0x2afd54=this[_0x116124(0x32d)](_0x5d9949)[_0x116124(0xb49)];this[_0x116124(0xc41)](this[_0x116124(0xbb0)](_0xdb56c0));const _0x2c3bc7=this[_0x116124(0x3ce)]();if(_0x2c3bc7==='right')this['drawTextEx'](_0x5d9949,_0x4faa94['x']+_0x4faa94[_0x116124(0xb49)]-_0x2afd54,_0x4faa94['y'],_0x2afd54);else{if(_0x2c3bc7===_0x116124(0xb3f)){const _0x9500c5=_0x4faa94['x']+Math['floor']((_0x4faa94['width']-_0x2afd54)/0x2);this['drawTextEx'](_0x5d9949,_0x9500c5,_0x4faa94['y'],_0x2afd54);}else{if('KPzMG'!==_0x116124(0x583)){if(!_0x5f1b0a[_0x116124(0x930)]())return;if(!_0x3e4481['VisuMZ_3_ActSeqCamera'])return;_0x1745c0[_0x116124(0x6a8)](_0x5c2ca2,_0x40cff3);const _0x3be8cd=_0x44bea4['getLastPluginCommandInterpreter'](),_0x58625e=_0xd948c7['WaitForCamera'];_0x513560[_0x116124(0x299)](_0x10942b[_0x116124(0x76e)],_0x26dc97[_0x116124(0xa65)],_0x53fffd[_0x116124(0x936)],_0x4809ae[_0x116124(0x443)]);if(_0x58625e)_0x3be8cd['setWaitMode'](_0x116124(0x660));}else this[_0x116124(0x6fa)](_0x5d9949,_0x4faa94['x'],_0x4faa94['y'],_0x2afd54);}}},Window_ActorCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x217)]=function(_0x38b379){const _0x297bd3=_0x4a3d8d;this[_0x297bd3(0xc1d)](_0x38b379)[_0x297bd3(0x591)](/\\I\[(\d+)\]/i);const _0x41ba5f=Number(RegExp['$1'])||0x0,_0x5df373=this['itemLineRect'](_0x38b379),_0x182d3f=_0x5df373['x']+Math[_0x297bd3(0x467)]((_0x5df373[_0x297bd3(0xb49)]-ImageManager[_0x297bd3(0x1dc)])/0x2),_0x15d8d0=_0x5df373['y']+(_0x5df373['height']-ImageManager[_0x297bd3(0xa48)])/0x2;this[_0x297bd3(0x878)](_0x41ba5f,_0x182d3f,_0x15d8d0);},Window_ActorCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xc42)]=function(_0xe2eb10){const _0x514543=_0x4a3d8d;if(!(VisuMZ['BattleCore'][_0x514543(0xb75)]['ActorCmd'][_0x514543(0xb98)]??!![]))return;const _0x23ee04=this[_0x514543(0x6bc)](_0xe2eb10);if(![_0x514543(0xadd),_0x514543(0x8e0),'singleSkill'][_0x514543(0xbff)](_0x23ee04))return;const _0x31f0be=this['itemLineRect'](_0xe2eb10);let _0x3d157d=null;if(_0x23ee04===_0x514543(0xadd))_0x514543(0x659)!=='OEjiD'?(_0x1816fb(_0x5674df[_0x514543(0x8dd)](_0x514543(0x1de))),_0x2c8972[_0x514543(0x4c2)]()):_0x3d157d=$dataSkills[this[_0x514543(0x6dd)]['attackSkillId']()];else{if(_0x23ee04===_0x514543(0x8e0))_0x3d157d=$dataSkills[this[_0x514543(0x6dd)][_0x514543(0x8e4)]()];else{if(_0x514543(0x5d0)===_0x514543(0x82c)){const _0x42fdd9=new _0x734e1b(0x0,0x0,_0x1fd9ee[_0x514543(0xb49)],_0x18e9bd[_0x514543(0x2cc)]);this['_commandNameWindow']=new _0x13eb21(_0x42fdd9),this[_0x514543(0x479)]['opacity']=0x0,this[_0x514543(0x960)](this['_commandNameWindow']),this['updateCommandNameWindow']();}else _0x3d157d=$dataSkills[this['_list'][_0xe2eb10][_0x514543(0x4c5)]];}}this[_0x514543(0xc15)](this[_0x514543(0x6dd)],_0x3d157d,_0x31f0be['x'],_0x31f0be['y'],_0x31f0be['width']);},Window_ActorCommand[_0x4a3d8d(0x3c4)]['drawSkillCost']=function(_0x406d76,_0x2f24aa,_0x401c96,_0x370b9f,_0x4a06df){const _0x4f5fde=_0x4a3d8d;if(!_0x2f24aa)return;Imported[_0x4f5fde(0x304)]?_0x4f5fde(0xbca)!==_0x4f5fde(0x293)?Window_Command[_0x4f5fde(0x3c4)][_0x4f5fde(0xc15)][_0x4f5fde(0xaf0)](this,_0x406d76,_0x2f24aa,_0x401c96,_0x370b9f,_0x4a06df):this[_0x4f5fde(0xad4)]():Window_SkillList[_0x4f5fde(0x3c4)][_0x4f5fde(0xc15)]['call'](this,_0x2f24aa,_0x401c96,_0x370b9f,_0x4a06df);},Window_ActorCommand[_0x4a3d8d(0x3c4)]['hide']=function(){},Window_ActorCommand['prototype'][_0x4a3d8d(0x5c1)]=function(){const _0x21f4dd=_0x4a3d8d;Window_Command[_0x21f4dd(0x3c4)][_0x21f4dd(0x5c1)][_0x21f4dd(0xaf0)](this);const _0x4afebf=this[_0x21f4dd(0x801)]();_0x4afebf==='border'&&(_0x21f4dd(0xbe6)!==_0x21f4dd(0xbe6)?this[_0x21f4dd(0x7dc)](_0x21f4dd(0x35b)):this['showHelpWindow']());},Window_ActorCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x801)]=function(){const _0x2e40e4=_0x4a3d8d;if(this[_0x2e40e4(0x70a)])return this['_battleLayoutStyle'];return this['_battleLayoutStyle']=SceneManager[_0x2e40e4(0x3ff)][_0x2e40e4(0x801)](),this[_0x2e40e4(0x70a)];},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x6c1)]=Window_ActorCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x4da)],Window_ActorCommand[_0x4a3d8d(0x3c4)]['setup']=function(_0x52dd97){const _0x44cc4a=_0x4a3d8d,_0x169077=this[_0x44cc4a(0x801)]();if(_0x52dd97&&['xp',_0x44cc4a(0x9e1)]['includes'](_0x169077))this[_0x44cc4a(0x1ee)](_0x52dd97);else _0x52dd97&&['border'][_0x44cc4a(0xbff)](_0x169077)&&(_0x44cc4a(0x273)!==_0x44cc4a(0x853)?(this[_0x44cc4a(0x51e)](_0x52dd97),this['showHelpWindow']()):this[_0x44cc4a(0x974)]());VisuMZ[_0x44cc4a(0x485)][_0x44cc4a(0x6c1)][_0x44cc4a(0xaf0)](this,_0x52dd97),_0x52dd97&&$gameTroop[_0x44cc4a(0x411)]()[_0x44cc4a(0x482)]>0x0&&_0x52dd97[_0x44cc4a(0x28e)]()&&_0x52dd97[_0x44cc4a(0x28e)]()[_0x44cc4a(0x5a4)]();},Window_ActorCommand[_0x4a3d8d(0x3c4)]['resizeWindowXPStyle']=function(_0x2f5d8e){const _0x46a220=_0x4a3d8d,_0x171d97=Math[_0x46a220(0x89f)](Graphics[_0x46a220(0x6c0)]/0x3),_0x41d4e1=Math[_0x46a220(0x89f)](Graphics['boxWidth']/$gameParty[_0x46a220(0xc22)]()[_0x46a220(0x482)]),_0x49a874=Math[_0x46a220(0x885)](_0x171d97,_0x41d4e1),_0x578ad0=this[_0x46a220(0x16f)](VisuMZ[_0x46a220(0x485)][_0x46a220(0xb75)][_0x46a220(0x620)][_0x46a220(0xb81)]),_0x5269dc=Math[_0x46a220(0x89f)](_0x41d4e1*_0x2f5d8e['index']())+Math[_0x46a220(0x89f)]((_0x41d4e1-_0x49a874)/0x2),_0x9ccec1=Math[_0x46a220(0x89f)](SceneManager[_0x46a220(0x3ff)][_0x46a220(0x71c)]['y']-_0x578ad0);this['move'](_0x5269dc,_0x9ccec1,_0x49a874,_0x578ad0),this[_0x46a220(0x468)](),this[_0x46a220(0x5ff)](0x1);},Window_ActorCommand[_0x4a3d8d(0x3c4)]['resizeWindowBorderStyle']=function(_0x393222){const _0x13dcf0=_0x4a3d8d,_0xfcf2a7=SceneManager[_0x13dcf0(0x3ff)][_0x13dcf0(0x5f7)]();this[_0x13dcf0(0x341)](_0xfcf2a7['x'],_0xfcf2a7['y'],_0xfcf2a7[_0x13dcf0(0xb49)],_0xfcf2a7[_0x13dcf0(0x2cc)]),this[_0x13dcf0(0x468)](),this[_0x13dcf0(0x5ff)](0x0);},Window_ActorCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x624)]=function(){const _0x2bf97f=_0x4a3d8d;if(this[_0x2bf97f(0x3aa)]){const _0x222b13=this[_0x2bf97f(0x3aa)][_0x2bf97f(0x2dd)],_0x9da57e=this[_0x2bf97f(0xb49)]-0x8,_0x27ee51=this['height'],_0x49181d=this[_0x2bf97f(0x70e)],_0x27b201=ColorManager[_0x2bf97f(0xbb5)](),_0x44088f=ColorManager['dimColor2']();this[_0x2bf97f(0x3aa)]['x']=0x4,_0x222b13[_0x2bf97f(0x19d)](_0x9da57e,_0x27ee51),_0x222b13['gradientFillRect'](0x0,0x0,_0x9da57e,_0x49181d,_0x44088f,_0x27b201,!![]),_0x222b13['fillRect'](0x0,_0x49181d,_0x9da57e,_0x27ee51-_0x49181d*0x2,_0x27b201),_0x222b13[_0x2bf97f(0xadf)](0x0,_0x27ee51-_0x49181d,_0x9da57e,_0x49181d,_0x27b201,_0x44088f,!![]),this[_0x2bf97f(0x3aa)][_0x2bf97f(0x22b)](0x0,0x0,_0x9da57e,_0x27ee51);}},Window_ActorCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x527)]=function(){const _0x2c5173=_0x4a3d8d;if(!this[_0x2c5173(0x6dd)])return;const _0x44fac9=VisuMZ[_0x2c5173(0x485)][_0x2c5173(0xb75)][_0x2c5173(0x810)],_0x11eb6b=this[_0x2c5173(0x3a9)]();switch(_0x11eb6b){case'attack':this[_0x2c5173(0xaac)]($dataSkills[this[_0x2c5173(0x6dd)][_0x2c5173(0x5e9)]()]);break;case _0x2c5173(0x8e0):this[_0x2c5173(0xaac)]($dataSkills[this['_actor'][_0x2c5173(0x8e4)]()]);break;case _0x2c5173(0x15f):const _0x2d4b69=_0x44fac9['HelpSkillType'],_0x53db5b=_0x2d4b69[_0x2c5173(0x8dd)]($dataSystem[_0x2c5173(0x322)][this[_0x2c5173(0xa3d)]()]);this[_0x2c5173(0x910)][_0x2c5173(0x3e4)](_0x53db5b);break;case'singleSkill':this['setHelpWindowItem']($dataSkills[this[_0x2c5173(0xa3d)]()]);break;case _0x2c5173(0x49d):this['_helpWindow'][_0x2c5173(0x3e4)](_0x44fac9[_0x2c5173(0x390)]);break;case _0x2c5173(0x565):this[_0x2c5173(0x910)][_0x2c5173(0x3e4)](_0x44fac9['HelpEscape']);break;case _0x2c5173(0x387):this[_0x2c5173(0x910)]['setText'](_0x44fac9[_0x2c5173(0x1a2)]);break;default:this['_helpWindow']['setText']('');break;}},Window_ActorCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x802)]=function(){const _0x10a721=_0x4a3d8d;this['forceSelect'](0x0);if(this[_0x10a721(0x6dd)]&&ConfigManager[_0x10a721(0x748)]){if(_0x10a721(0x7a6)===_0x10a721(0x7a6)){const _0x6ca50c=this[_0x10a721(0x6dd)][_0x10a721(0x53b)]();this[_0x10a721(0x7f4)](_0x6ca50c);if(_0x6ca50c===_0x10a721(0x15f)){if(_0x10a721(0xc3f)!==_0x10a721(0xa5d)){const _0x677be0=this[_0x10a721(0x6dd)]['lastBattleSkill']();if(_0x677be0){const _0x702c9d=this[_0x10a721(0x5ae)](_0x10a721(0x15f),_0x677be0[_0x10a721(0x731)]);this['select'](_0x702c9d||0x0);}}else{const _0xde4e6e=_0x62e8d7[_0x380200];if(_0xde4e6e){if(_0xde4e6e[_0x10a721(0x9ea)]['match'](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x5d5f28=_0x3e358b(_0x5dbbe9['$1'])[_0x10a721(0x25c)](/[\r\n]+/)[_0x10a721(0x34b)](''),_0x9342df=this[_0x10a721(0x4aa)](_0x5d5f28);_0x49035f=this[_0x10a721(0x52c)](_0x9342df)||_0x99c0f1,_0x1158ed=_0x2dda03[_0x10a721(0x95b)](_0x484952);}}return _0x3504fe;}}else{if(_0x6ca50c===_0x10a721(0x803)){const _0x15a878=this[_0x10a721(0x6dd)][_0x10a721(0x1d4)]();if(_0x15a878){const _0x575de8=this[_0x10a721(0x5ae)](_0x10a721(0x803),_0x15a878['id']);this[_0x10a721(0xa04)](_0x575de8||0x0);}}}}else{const _0x359fc9=_0x169245[_0x10a721(0x2a7)][0x0];if(_0x359fc9[_0x10a721(0x591)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}},Window_ActorCommand[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x5ae)]=function(_0x19b732,_0x2f48f9){const _0xd221b9=_0x4a3d8d;return this[_0xd221b9(0x747)][_0xd221b9(0x93d)](_0x529582=>_0x529582[_0xd221b9(0x59d)]===_0x19b732&&_0x529582[_0xd221b9(0x4c5)]===_0x2f48f9);},VisuMZ['BattleCore'][_0x4a3d8d(0x6ad)]=Window_BattleStatus[_0x4a3d8d(0x3c4)]['initialize'],Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x82a)]=function(_0x4538c8){const _0x65f1da=_0x4a3d8d;VisuMZ[_0x65f1da(0x485)][_0x65f1da(0x6ad)][_0x65f1da(0xaf0)](this,_0x4538c8),this[_0x65f1da(0x6f7)](),this['createAttachmentSprites']();},Window_BattleStatus[_0x4a3d8d(0x3c4)]['battleLayoutStyle']=function(){const _0x465e75=_0x4a3d8d;if(this['_battleLayoutStyle'])return this['_battleLayoutStyle'];return this[_0x465e75(0x70a)]=SceneManager[_0x465e75(0x3ff)][_0x465e75(0x801)](),this['_battleLayoutStyle'];},Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x6f7)]=function(){const _0xa68480=_0x4a3d8d;this['frameVisible']=this[_0xa68480(0x90f)]();const _0x340075=VisuMZ[_0xa68480(0x485)][_0xa68480(0xb75)][_0xa68480(0x620)];if(_0x340075['StatusWindowSkinHide']){if(_0xa68480(0x555)===_0xa68480(0x555))this[_0xa68480(0x2f0)]=0x0;else return this[_0xa68480(0x747)][_0xa68480(0x93d)](_0xd950ff=>_0xd950ff[_0xa68480(0x59d)]===_0x21c5a2&&_0xd950ff[_0xa68480(0x4c5)]===_0x56cae5);}},Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x90f)]=function(){const _0x4cd440=_0x4a3d8d,_0x5a272c=VisuMZ[_0x4cd440(0x485)][_0x4cd440(0xb75)]['BattleLayout'];if(_0x5a272c['StatusWindowSkinFilename'])return!![];const _0x5b9384=this[_0x4cd440(0x801)]();switch(_0x5b9384){case _0x4cd440(0x343):case'border':return!![];break;case _0x4cd440(0x646):case'xp':case'portrait':default:return![];break;}},Window_BattleStatus[_0x4a3d8d(0x3c4)]['extraHeight']=function(){const _0x23fc3c=_0x4a3d8d;if(this[_0x23fc3c(0x90f)]()){if(_0x23fc3c(0x3d5)===_0x23fc3c(0xbf8))_0x1e4625['requestFauxAnimation']([this],_0x396b62);else return 0x0;}else{if(_0x23fc3c(0x26e)!==_0x23fc3c(0x26e))this[_0x23fc3c(0x616)]();else return 0xa;}},Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x867)]=function(){const _0x271833=_0x4a3d8d,_0xb346d2=this[_0x271833(0x801)]();switch(_0xb346d2){case'list':return 0x1;break;case'xp':case _0x271833(0x9e1):return $gameParty[_0x271833(0xc22)]()['length'];break;case _0x271833(0x646):default:return $gameParty[_0x271833(0x70d)]();break;}},Window_BattleStatus['prototype']['itemHeight']=function(){const _0x335a83=_0x4a3d8d,_0x25889a=this[_0x335a83(0x801)]();switch(_0x25889a){case _0x335a83(0x343):return Window_StatusBase[_0x335a83(0x3c4)]['itemHeight'][_0x335a83(0xaf0)](this);break;case _0x335a83(0x646):case'xp':case _0x335a83(0x9e1):default:return this['innerHeight'];break;}},Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x9b4)]=function(){const _0x50faa3=_0x4a3d8d,_0x1cc621=this['battleLayoutStyle']();switch(_0x1cc621){case _0x50faa3(0x343):return Window_StatusBase[_0x50faa3(0x3c4)][_0x50faa3(0x9b4)][_0x50faa3(0xaf0)](this);break;case _0x50faa3(0x646):case'xp':case'portrait':default:return 0x0;break;}},Window_BattleStatus[_0x4a3d8d(0x3c4)]['updatePadding']=function(){const _0x33acea=_0x4a3d8d;this[_0x33acea(0x90f)]()?_0x33acea(0x8db)===_0x33acea(0x8db)?Window_StatusBase['prototype'][_0x33acea(0x793)][_0x33acea(0xaf0)](this):this[_0x33acea(0xbbf)]():this[_0x33acea(0x70e)]=0x8;},Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x648)]=function(){const _0xa2a583=_0x4a3d8d,_0x254ad9=VisuMZ[_0xa2a583(0x485)][_0xa2a583(0xb75)]['BattleLayout'];if(_0x254ad9[_0xa2a583(0x142)]){if('nrfSb'!==_0xa2a583(0x7fa))return!this[_0xa2a583(0x85a)]()&&!this[_0xa2a583(0x8d8)]();else this[_0xa2a583(0x43b)]=ImageManager[_0xa2a583(0x2ce)](_0x254ad9[_0xa2a583(0x142)]);}else'zvjhn'!=='zvjhn'?this[_0xa2a583(0x2f0)]=0x0:Window_StatusBase[_0xa2a583(0x3c4)]['loadWindowskin']['call'](this);},Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x226)]=function(_0x26f502){const _0x2034e9=_0x4a3d8d,_0x525035=VisuMZ['BattleCore'][_0x2034e9(0xb75)]['BattleLayout'];if(_0x525035['StatusWindowSelectableBackHide'])return;Window_StatusBase['prototype'][_0x2034e9(0x226)][_0x2034e9(0xaf0)](this,_0x26f502);},Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x55a)]=function(){const _0x20a3d7=_0x4a3d8d;this[_0x20a3d7(0xb34)]=!![];},Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x372)]=function(){const _0x250678=_0x4a3d8d;Window_StatusBase[_0x250678(0x3c4)][_0x250678(0x372)][_0x250678(0xaf0)](this),this['updateRefresh'](),this[_0x250678(0x71f)]();if(this['battleLayoutStyle']()==='border')this[_0x250678(0x166)]();},Window_BattleStatus[_0x4a3d8d(0x3c4)]['updateRefresh']=function(){const _0xac3e75=_0x4a3d8d;if($gameTemp[_0xac3e75(0x5a3)]()){if(_0xac3e75(0x78d)!==_0xac3e75(0x985))this['preparePartyRefresh'](),this['_requestRefresh']=![],$gameTemp[_0xac3e75(0x7b1)]();else{if(!_0x1d7b72[_0xac3e75(0x543)])return;const _0x4e12cf=_0x3d6e01[_0xac3e75(0x3ff)][_0xac3e75(0x94c)];if(!_0x4e12cf)return;if(_0x56963e[_0xac3e75(0x4be)][_0xac3e75(0x553)]<=1.04){_0x1ee967(_0xac3e75(0x2a2)),_0x9e3c23[_0xac3e75(0x4c2)]();return;}_0x164c98[_0xac3e75(0x6a8)](_0x3815ab,_0x288f64);const _0x4368ab=_0x50eb20[_0xac3e75(0x8a2)];_0x4e12cf[_0xac3e75(0x538)](_0x4368ab);}}else this['_requestRefresh']&&(this[_0xac3e75(0xb34)]=![],this[_0xac3e75(0xbe4)](),this[_0xac3e75(0xbc5)]());},Window_BattleStatus[_0x4a3d8d(0x3c4)]['show']=function(){const _0x4f646f=_0x4a3d8d;Window_StatusBase[_0x4f646f(0x3c4)][_0x4f646f(0x92f)]['call'](this);if(!$gameSystem[_0x4f646f(0x957)]())this[_0x4f646f(0xbe4)]();},Window_BattleStatus[_0x4a3d8d(0x3c4)]['hide']=function(){const _0xf02e75=_0x4a3d8d;if(this[_0xf02e75(0x6ee)]===Window_BattleStatus)return;Window_StatusBase[_0xf02e75(0x3c4)][_0xf02e75(0xb20)][_0xf02e75(0xaf0)](this);},Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x52d)]=function(_0x5deb28){const _0x3e18e4=_0x4a3d8d,_0x3eeb26=this[_0x3e18e4(0x801)]();switch(_0x3eeb26){case'xp':case _0x3e18e4(0x9e1):break;case'default':case'list':case'border':default:return Window_StatusBase[_0x3e18e4(0x3c4)]['drawBackgroundRect'][_0x3e18e4(0xaf0)](this,_0x5deb28);break;}},VisuMZ['BattleCore']['Window_BattleStatus_drawItemImage']=Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x62b)],Window_BattleStatus[_0x4a3d8d(0x3c4)]['drawItemImage']=function(_0x5e0322){const _0x36f3f8=_0x4a3d8d,_0x43368c=this[_0x36f3f8(0x801)]();switch(_0x43368c){case _0x36f3f8(0x343):this[_0x36f3f8(0x2f3)](_0x5e0322);break;case'xp':this[_0x36f3f8(0x755)](_0x5e0322);break;case _0x36f3f8(0x9e1):this[_0x36f3f8(0x78b)](_0x5e0322);break;case _0x36f3f8(0x646):case'border':default:VisuMZ[_0x36f3f8(0x485)][_0x36f3f8(0x615)][_0x36f3f8(0xaf0)](this,_0x5e0322);break;}},Window_BattleStatus['prototype'][_0x4a3d8d(0x41f)]=function(_0x15349e){const _0x4c852c=_0x4a3d8d,_0x706e05=this[_0x4c852c(0x801)]();if(!$gameSystem['isSideView']())this[_0x4c852c(0x1a9)](_0x15349e);switch(_0x706e05){case'list':this[_0x4c852c(0x3bb)](_0x15349e);break;case'xp':case _0x4c852c(0x9e1):case _0x4c852c(0x646):case _0x4c852c(0xa18):default:this[_0x4c852c(0x4dd)](_0x15349e);break;}},Window_BattleStatus['prototype']['refreshCursor']=function(){const _0x111462=_0x4a3d8d,_0x2002f7=this['battleLayoutStyle']();if(['xp'][_0x111462(0xbff)](_0x2002f7)&&!$gameSystem[_0x111462(0x957)]()){if(_0x111462(0x89a)!=='bcLPU'){if(!_0x30fd24['isSideView']())return;const _0x269738=this[_0x111462(0x28e)]();if(!_0x269738)return;if(_0x120123===_0x269738[_0x111462(0x232)])return;let _0x5aec0b=![];if(this[_0x111462(0x764)]()){if(_0x455698>_0x269738[_0x111462(0x232)])_0x5aec0b=!![];if(_0x31db08<_0x269738[_0x111462(0x232)])_0x5aec0b=![];}else{if(this[_0x111462(0x87a)]()){if(_0x4bdaf4>_0x269738['_baseX'])_0x5aec0b=![];if(_0x31bc04<_0x269738[_0x111462(0x232)])_0x5aec0b=!![];}};this[_0x111462(0x91a)](_0x3805a1?!_0x5aec0b:_0x5aec0b),_0x269738[_0x111462(0x838)]();}else{this['setCursorRect'](0x0,0x0,0x0,0x0);return;}}Window_StatusBase[_0x111462(0x3c4)][_0x111462(0x8c0)]['call'](this);},Window_BattleStatus['prototype'][_0x4a3d8d(0x1a9)]=function(_0x2ee9b4){const _0x281af8=_0x4a3d8d,_0x4ff73b=this[_0x281af8(0x2fa)](_0x2ee9b4)['battler']();if(!_0x4ff73b)return;const _0x450365=this['battleLayoutStyle'](),_0x37595d=this[_0x281af8(0x684)](_0x2ee9b4);let _0x945aa7=Math['round'](_0x37595d['x']+_0x37595d[_0x281af8(0xb49)]/0x2)+this[_0x281af8(0x70e)];['list'][_0x281af8(0xbff)](_0x450365)&&(_0x281af8(0xc49)===_0x281af8(0xc49)?(_0x945aa7=_0x37595d[_0x281af8(0xb49)]/$gameParty['battleMembers']()[_0x281af8(0x482)],_0x945aa7*=_0x2ee9b4,_0x945aa7+=_0x37595d['width']/$gameParty[_0x281af8(0xc22)]()[_0x281af8(0x482)]/0x2):this['selectNextActor']());let _0x99b302=Math[_0x281af8(0x89f)](this[_0x281af8(0x364)](_0x2ee9b4,_0x4ff73b,_0x37595d));_0x4ff73b[_0x281af8(0x6d4)](_0x945aa7,_0x99b302),this[_0x281af8(0x441)](_0x4ff73b,0x1),_0x4ff73b[_0x281af8(0x92f)](),this['updateEffectsContainer'](),this[_0x281af8(0xbc5)]();},Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x364)]=function(_0x3c6e0d,_0xfe988f,_0x3b4679){const _0x560d84=_0x4a3d8d,_0xcc4663=VisuMZ['BattleCore']['Settings'][_0x560d84(0x620)],_0x31fdeb=this[_0x560d84(0x801)]();if(_0x31fdeb==='xp'){const _0x5c8e35=_0xcc4663[_0x560d84(0x24a)];switch(_0x5c8e35[_0x560d84(0x3b6)]()['trim']()){case _0x560d84(0x22c):return _0x3b4679[_0x560d84(0x2cc)]-_0xfe988f[_0x560d84(0xc2f)][_0x560d84(0x2cc)]/0x4;break;case _0x560d84(0xb3f):const _0x3bc0d4=_0xcc4663['XPActorDefaultHeight'];return(_0x3b4679[_0x560d84(0x2cc)]+(_0xfe988f[_0x560d84(0x2cc)]||_0x3bc0d4))/0x2;break;case _0x560d84(0x6cc):return 0x0;case'name':default:return this[_0x560d84(0x4de)](_0x3b4679);break;}}else{if(_0x31fdeb===_0x560d84(0x9e1)){}}return _0xfe988f[_0x560d84(0x2cc)];},Sprite_Name[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x77e)]=function(){return 0x24;},Sprite_Name[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x88f)]=function(){const _0x5f85f2=_0x4a3d8d,_0x10db8c=this['name'](),_0x87d99d=this[_0x5f85f2(0x280)](),_0x545fff=this[_0x5f85f2(0x77e)]();this[_0x5f85f2(0x850)](),this['bitmap'][_0x5f85f2(0x1db)](),this[_0x5f85f2(0x2dd)]['drawTextTopAligned'](_0x10db8c,0x0,0x0,_0x87d99d,_0x545fff,'left');},Bitmap[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x5a2)]=function(_0x1849e1,_0x5a1c04,_0x3da16a,_0x1f3ac0,_0x543f1b,_0x1e3ba0){const _0x1f203e=_0x4a3d8d,_0x2020ea=this[_0x1f203e(0x1f3)],_0x4da509=_0x2020ea[_0x1f203e(0x6b6)];_0x1f3ac0=_0x1f3ac0||0xffffffff;let _0x504cab=_0x5a1c04,_0x1899a2=Math['round'](_0x3da16a+0x18/0x2+this[_0x1f203e(0xb00)]*0.35);if(_0x1e3ba0===_0x1f203e(0xb3f)){if(_0x1f203e(0x8ad)!==_0x1f203e(0x473))_0x504cab+=_0x1f3ac0/0x2;else{if(this[_0x1f203e(0xbf2)]===_0x1db7e1)this['initBattlePortrait']();this['_battlePortrait']=_0x110048;if(_0x21bb55[_0x1f203e(0x930)]()&&_0x9fb528['battleMembers']()[_0x1f203e(0xbff)](this)){const _0x5d9fbc=_0x480d6b[_0x1f203e(0x3ff)][_0x1f203e(0x71c)];if(_0x5d9fbc)_0x5d9fbc[_0x1f203e(0x86d)](this);}}}_0x1e3ba0==='right'&&(_0x1f203e(0xac2)===_0x1f203e(0xac2)?_0x504cab+=_0x1f3ac0:_0x4c91d4['setValue'](_0x58f327[_0x1f203e(0x268)],!![])),_0x2020ea[_0x1f203e(0x30d)](),_0x2020ea[_0x1f203e(0x34a)]=this[_0x1f203e(0x64f)](),_0x2020ea[_0x1f203e(0xb82)]=_0x1e3ba0,_0x2020ea[_0x1f203e(0x956)]=_0x1f203e(0x508),_0x2020ea['globalAlpha']=0x1,this[_0x1f203e(0x51b)](_0x1849e1,_0x504cab,_0x1899a2,_0x1f3ac0),_0x2020ea[_0x1f203e(0x6b6)]=_0x4da509,this['_drawTextBody'](_0x1849e1,_0x504cab,_0x1899a2,_0x1f3ac0),_0x2020ea['restore'](),this[_0x1f203e(0xb51)][_0x1f203e(0x372)]();},Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x4de)]=function(_0x2768c3){const _0x5d0693=_0x4a3d8d;return this[_0x5d0693(0x84a)](_0x2768c3)-this[_0x5d0693(0x204)]();},Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x2f3)]=function(_0x14c5b0){const _0x4fe7c0=_0x4a3d8d;if(!VisuMZ['BattleCore'][_0x4fe7c0(0xb75)][_0x4fe7c0(0x620)][_0x4fe7c0(0xabc)])return;const _0x1b74a5=this[_0x4fe7c0(0x2fa)](_0x14c5b0),_0x4c3970=this[_0x4fe7c0(0x684)](_0x14c5b0);_0x4c3970[_0x4fe7c0(0xb49)]=ImageManager[_0x4fe7c0(0x9fd)],_0x4c3970['height']-=0x2,this['drawActorFace'](_0x1b74a5,_0x4c3970['x']+0x1,_0x4c3970['y']+0x1,_0x4c3970[_0x4fe7c0(0xb49)],_0x4c3970[_0x4fe7c0(0x2cc)]);},Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x3bb)]=function(_0x92bd0b){const _0x3eadd0=_0x4a3d8d,_0x61bbfa=VisuMZ[_0x3eadd0(0x485)][_0x3eadd0(0xb75)][_0x3eadd0(0x620)],_0x3ed701=$dataSystem[_0x3eadd0(0xaa8)]?0x4:0x3,_0x10dacd=_0x3ed701*0x80+(_0x3ed701-0x1)*0x8+0x4,_0x13e510=this[_0x3eadd0(0x2fa)](_0x92bd0b),_0x47682b=this['itemRect'](_0x92bd0b);let _0x510f2d=_0x47682b['x']+this[_0x3eadd0(0x70e)];_0x61bbfa[_0x3eadd0(0xabc)]?_0x510f2d=_0x47682b['x']+ImageManager[_0x3eadd0(0x9fd)]+0x8:_0x510f2d+=ImageManager[_0x3eadd0(0x1dc)];const _0x799383=Math[_0x3eadd0(0x89f)](Math[_0x3eadd0(0x885)](_0x47682b['x']+_0x47682b[_0x3eadd0(0xb49)]-_0x10dacd,_0x510f2d)),_0x31a7a3=Math['round'](_0x47682b['y']+(_0x47682b[_0x3eadd0(0x2cc)]-Sprite_Name['prototype'][_0x3eadd0(0x77e)]())/0x2),_0x3969f5=Math[_0x3eadd0(0x89f)](_0x799383-ImageManager[_0x3eadd0(0x1dc)]/0x2-0x4),_0x843b69=Math[_0x3eadd0(0x89f)](_0x47682b['y']+(_0x47682b['height']-ImageManager[_0x3eadd0(0xa48)])/0x2+ImageManager[_0x3eadd0(0xa48)]/0x2);let _0x55a495=_0x799383+0x88;const _0x2caf79=_0x31a7a3;this[_0x3eadd0(0x259)](_0x13e510,_0x799383-0x4+(_0x61bbfa[_0x3eadd0(0x1c7)]||0x0),_0x31a7a3+(_0x61bbfa['TpbGaugeOffsetY']||0x0)),this[_0x3eadd0(0x5e1)](_0x13e510,_0x799383+(_0x61bbfa['NameOffsetX']||0x0),_0x31a7a3+(_0x61bbfa[_0x3eadd0(0x1c0)]||0x0)),this[_0x3eadd0(0x654)](_0x13e510,_0x3969f5+(_0x61bbfa['StateIconOffsetX']||0x0),_0x843b69+(_0x61bbfa[_0x3eadd0(0x9b6)]||0x0)),this['placeGauge'](_0x13e510,'hp',_0x55a495+0x88*0x0+(_0x61bbfa['HpGaugeOffsetX']||0x0),_0x2caf79+(_0x61bbfa[_0x3eadd0(0x4c3)]||0x0)),this[_0x3eadd0(0x17e)](_0x13e510,'mp',_0x55a495+0x88*0x1+(_0x61bbfa[_0x3eadd0(0x725)]||0x0),_0x2caf79+(_0x61bbfa[_0x3eadd0(0x2f9)]||0x0));if($dataSystem['optDisplayTp']){if(_0x3eadd0(0x92c)!==_0x3eadd0(0x516))this[_0x3eadd0(0x17e)](_0x13e510,'tp',_0x55a495+0x88*0x2+(_0x61bbfa[_0x3eadd0(0xadb)]||0x0),_0x2caf79+(_0x61bbfa['TpGaugeOffsetY']||0x0));else return!_0xd985d5[_0x3eadd0(0x8b6)]()?this[_0x3eadd0(0x16b)](_0x514307):_0x3e9df4[_0x3eadd0(0x485)][_0x3eadd0(0x7ea)][_0x3eadd0(0xaf0)](this,_0x354c4e);}},Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x755)]=function(_0x26c87d){const _0x40175e=_0x4a3d8d;if(!$gameSystem[_0x40175e(0x957)]())return;VisuMZ[_0x40175e(0x485)][_0x40175e(0x615)][_0x40175e(0xaf0)](this,_0x26c87d);},Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x4dd)]=function(_0x2eced2){const _0x39fcef=_0x4a3d8d,_0x1b85fd=VisuMZ[_0x39fcef(0x485)][_0x39fcef(0xb75)][_0x39fcef(0x620)],_0x30e95b=this[_0x39fcef(0x2fa)](_0x2eced2),_0x1fdc47=this['itemRect'](_0x2eced2),_0x48a2de=Math[_0x39fcef(0x89f)](_0x1fdc47['x']+(_0x1fdc47[_0x39fcef(0xb49)]-0x80)/0x2),_0x6ea820=this['nameY'](_0x1fdc47);let _0xe66e24=_0x48a2de-ImageManager[_0x39fcef(0x1dc)]/0x2-0x4,_0x5ac7e0=_0x6ea820+ImageManager[_0x39fcef(0xa48)]/0x2;_0xe66e24-ImageManager[_0x39fcef(0x1dc)]/0x2<_0x1fdc47['x']&&(_0xe66e24=_0x48a2de+ImageManager['iconWidth']/0x2-0x4,_0x5ac7e0=_0x6ea820-ImageManager['iconHeight']/0x2);const _0xf64d19=_0x48a2de,_0x3b86ef=this[_0x39fcef(0x84a)](_0x1fdc47);this[_0x39fcef(0x259)](_0x30e95b,_0x48a2de+(_0x1b85fd[_0x39fcef(0x1c7)]||0x0),_0x6ea820+(_0x1b85fd[_0x39fcef(0x9ad)]||0x0)),this[_0x39fcef(0x5e1)](_0x30e95b,_0x48a2de+(_0x1b85fd['NameOffsetX']||0x0),_0x6ea820+(_0x1b85fd[_0x39fcef(0x1c0)]||0x0)),this[_0x39fcef(0x654)](_0x30e95b,_0xe66e24+(_0x1b85fd[_0x39fcef(0xab1)]||0x0),_0x5ac7e0+(_0x1b85fd[_0x39fcef(0x9b6)]||0x0)),this[_0x39fcef(0x17e)](_0x30e95b,'hp',_0xf64d19+(_0x1b85fd[_0x39fcef(0x4a6)]||0x0),_0x3b86ef+(_0x1b85fd[_0x39fcef(0x4c3)]||0x0)),this['placeGauge'](_0x30e95b,'mp',_0xf64d19+(_0x1b85fd[_0x39fcef(0x725)]||0x0),_0x3b86ef+this[_0x39fcef(0x204)]()+(_0x1b85fd[_0x39fcef(0x2f9)]||0x0)),$dataSystem[_0x39fcef(0xaa8)]&&this[_0x39fcef(0x17e)](_0x30e95b,'tp',_0xf64d19+(_0x1b85fd[_0x39fcef(0xadb)]||0x0),_0x3b86ef+this[_0x39fcef(0x204)]()*0x2+(_0x1b85fd[_0x39fcef(0x272)]||0x0));},Window_BattleStatus[_0x4a3d8d(0x3c4)]['showPortraits']=function(_0xd6f02c){const _0x5ac90b=_0x4a3d8d;if(!VisuMZ[_0x5ac90b(0x485)][_0x5ac90b(0xb75)]['BattleLayout']['ShowPortraits'])return![];if(_0xd6f02c[_0x5ac90b(0x396)]())return!![];return Imported[_0x5ac90b(0x452)]&&_0xd6f02c[_0x5ac90b(0x7a0)]();},Game_Actor[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x5b2)]=function(){const _0x297aec=_0x4a3d8d;if(this[_0x297aec(0x2fa)]()['note']['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x297aec(0x2fa)]()[_0x297aec(0x9ea)][_0x297aec(0x591)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x297aec(0xa43)!==_0x297aec(0xa43))this[_0x297aec(0x48a)]['bitmap']['smooth']=this[_0x297aec(0x349)][_0x297aec(0x5f5)]();else return Number(RegExp['$1']);}}return 0x0;},Game_Actor[_0x4a3d8d(0x3c4)]['getBattlePortraitOffsetY']=function(){const _0x48b426=_0x4a3d8d;if(this[_0x48b426(0x2fa)]()['note'][_0x48b426(0x591)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x48b426(0x9ea)][_0x48b426(0x591)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x78b)]=function(_0x105b01){const _0x2c5d0f=_0x4a3d8d,_0x2595fc=this[_0x2c5d0f(0x2fa)](_0x105b01);if(this['showPortraits'](_0x2595fc)){const _0x588a32=_0x2c5d0f(0x902)[_0x2c5d0f(0x8dd)](_0x2595fc[_0x2c5d0f(0xa2f)]()),_0x579c15=this[_0x2c5d0f(0x1f6)](_0x588a32,Sprite),_0xe17c7d=_0x2595fc['getBattlePortraitFilename']();_0xe17c7d!==''?_0x579c15[_0x2c5d0f(0x2dd)]=ImageManager[_0x2c5d0f(0x96b)](_0xe17c7d):_0x579c15['bitmap']=ImageManager[_0x2c5d0f(0xb97)];const _0x48b6e0=this[_0x2c5d0f(0x684)](_0x105b01);_0x579c15[_0x2c5d0f(0xc3d)]['x']=0.5,_0x579c15[_0x2c5d0f(0xc3d)]['y']=0x1;let _0x49c7d9=Math[_0x2c5d0f(0x89f)](_0x48b6e0['x']+_0x48b6e0[_0x2c5d0f(0xb49)]/0x2)+this[_0x2c5d0f(0x70e)];_0x49c7d9+=_0x2595fc[_0x2c5d0f(0x5b2)]();let _0x394d2f=Math['round'](this[_0x2c5d0f(0x2cc)]);_0x394d2f+=_0x2595fc['getBattlePortraitOffsetY'](),_0x579c15[_0x2c5d0f(0x341)](_0x49c7d9,_0x394d2f);const _0x24f596=VisuMZ[_0x2c5d0f(0x485)][_0x2c5d0f(0xb75)][_0x2c5d0f(0x620)][_0x2c5d0f(0x841)];_0x579c15[_0x2c5d0f(0x3cb)]['x']=_0x24f596,_0x579c15[_0x2c5d0f(0x3cb)]['y']=_0x24f596,_0x579c15[_0x2c5d0f(0x92f)]();}else{const _0x2d6ace=this[_0x2c5d0f(0x709)](_0x105b01);this[_0x2c5d0f(0x57e)](_0x2595fc,_0x2d6ace['x'],_0x2d6ace['y'],_0x2d6ace['width'],_0x2d6ace[_0x2c5d0f(0x2cc)]);}},Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x1f6)]=function(_0x5a3c1b,_0x22ce61){const _0x44d716=_0x4a3d8d,_0x88685f=this['_additionalSprites'];if(_0x88685f[_0x5a3c1b]){if(_0x44d716(0x5b7)!==_0x44d716(0x43f))return _0x88685f[_0x5a3c1b];else this[_0x44d716(0x260)]()[_0x44d716(0x208)](_0x46b70c),this['_damages'][_0x44d716(0x34b)](_0x1e6e21),_0x2904e5[_0x44d716(0xc47)]();}else{if('xHSrN'===_0x44d716(0x7f9)){const _0x15f003=_0x5551a2[_0x44d716(0x6c0)]/0x2,_0x3361a6=this[_0x44d716(0x90c)](_0x1867d6[_0x44d716(0x485)][_0x44d716(0xb75)][_0x44d716(0x620)]['XPActorCommandLines'],!![]),_0x519b81=_0x83e085['round']((_0x5ca42c[_0x44d716(0x6c0)]-_0x15f003)/0x2),_0x28e932=_0x150812['boxHeight']-_0x3361a6-this[_0x44d716(0x315)]()['height'];return new _0x1726df(_0x519b81,_0x28e932,_0x15f003,_0x3361a6);}else{const _0x44d380=new _0x22ce61();return _0x88685f[_0x5a3c1b]=_0x44d380,this[_0x44d716(0x87c)](_0x44d380),this[_0x44d716(0x87c)](this[_0x44d716(0xae0)]),_0x44d380;}}},Window_BattleStatus['prototype']['_createClientArea']=function(){const _0x32f048=_0x4a3d8d;this[_0x32f048(0x4af)](),this['_createEffectsContainer'](),Window_StatusBase[_0x32f048(0x3c4)][_0x32f048(0x7ce)][_0x32f048(0xaf0)](this),this[_0x32f048(0x54a)]();},Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x4af)]=function(){const _0x2dede6=_0x4a3d8d;this['_cursorArea']=new Sprite(),this[_0x2dede6(0xae0)][_0x2dede6(0xa4d)]=[new PIXI[(_0x2dede6(0xa4d))][(_0x2dede6(0xba0))]()],this[_0x2dede6(0xae0)][_0x2dede6(0x7ec)]=new Rectangle(),this[_0x2dede6(0xae0)]['move'](this['_padding'],this[_0x2dede6(0x636)]),this[_0x2dede6(0x960)](this['_cursorArea']);},Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x27f)]=function(){const _0x3c268d=_0x4a3d8d;this[_0x3c268d(0x5d2)]=new Sprite(),this[_0x3c268d(0x960)](this[_0x3c268d(0x5d2)]);},Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x1c1)]=function(){const _0x1812d5=_0x4a3d8d;if(this[_0x1812d5(0x5d2)]){if(_0x1812d5(0x76a)==='ALjdq')this['addChild'](this[_0x1812d5(0x5d2)]);else{if(!this[_0x1812d5(0x240)]())return;if(_0x5f4c71<=0x0)return;this[_0x1812d5(0x1da)]=_0x5f47c5,this[_0x1812d5(0xab7)]=_0x5ee057,this[_0x1812d5(0xaff)]=_0x9bbe45;}}},Window_BattleStatus[_0x4a3d8d(0x3c4)]['_createDamageContainer']=function(){const _0x37bef1=_0x4a3d8d;this[_0x37bef1(0x61c)]=new Sprite(),this[_0x37bef1(0x960)](this[_0x37bef1(0x61c)]);},Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x3e5)]=function(){const _0x346ac7=_0x4a3d8d;this[_0x346ac7(0x85e)]=new Sprite();for(let _0x1921fd=0x0;_0x1921fd<0x9;_0x1921fd++){this[_0x346ac7(0x85e)][_0x346ac7(0x960)](new Sprite());}this['_cursorArea'][_0x346ac7(0x960)](this[_0x346ac7(0x85e)]);},Window_BattleStatus['prototype'][_0x4a3d8d(0x891)]=function(){const _0x362c57=_0x4a3d8d;Window_StatusBase[_0x362c57(0x3c4)]['_updateClientArea'][_0x362c57(0xaf0)](this),this[_0x362c57(0xa6f)]();},Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa6f)]=function(){const _0x4feba5=_0x4a3d8d,_0x3b62e1=this[_0x4feba5(0x636)];this[_0x4feba5(0xae0)]['move'](_0x3b62e1,_0x3b62e1),this[_0x4feba5(0xae0)]['x']=_0x3b62e1-this[_0x4feba5(0x80c)]['x'],this[_0x4feba5(0xae0)]['y']=_0x3b62e1-this[_0x4feba5(0x80c)]['y'],this[_0x4feba5(0x288)]>0x0&&this[_0x4feba5(0x294)]>0x0?this[_0x4feba5(0xae0)][_0x4feba5(0xab9)]=this[_0x4feba5(0xa55)]():this[_0x4feba5(0xae0)]['visible']=![];},Window_BattleStatus[_0x4a3d8d(0x3c4)]['_updateFilterArea']=function(){const _0x52391b=_0x4a3d8d;Window_StatusBase[_0x52391b(0x3c4)]['_updateFilterArea'][_0x52391b(0xaf0)](this),this[_0x52391b(0x4e6)]();},Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x4e6)]=function(){const _0x1d0db6=_0x4a3d8d,_0x4affe9=this[_0x1d0db6(0xae0)][_0x1d0db6(0x733)]['apply'](new Point(0x0,0x0)),_0x3cd447=this[_0x1d0db6(0xae0)][_0x1d0db6(0x7ec)];_0x3cd447['x']=_0x4affe9['x']+this[_0x1d0db6(0x80c)]['x'],_0x3cd447['y']=_0x4affe9['y']+this[_0x1d0db6(0x80c)]['y'],_0x3cd447['width']=this[_0x1d0db6(0x288)],_0x3cd447[_0x1d0db6(0x2cc)]=this[_0x1d0db6(0x294)];},Window_BattleStatus['prototype']['refreshActorPortrait']=function(_0x10d553){const _0x12460a=_0x4a3d8d;if(this[_0x12460a(0x801)]()!==_0x12460a(0x9e1))return;this[_0x12460a(0x78b)](_0x10d553[_0x12460a(0xc07)]());},Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xb08)]=function(_0x2aa94d,_0x5364e7){const _0x2c63bb=_0x4a3d8d;if(!this[_0x2c63bb(0x61c)])return;if(!_0x2aa94d)return;if(!_0x5364e7)return;const _0x12b2ea=this[_0x2c63bb(0x684)](_0x5364e7[_0x2c63bb(0xc07)]());_0x12b2ea['x']+=_0x12b2ea[_0x2c63bb(0xb49)]/0x2+this['padding'],_0x2aa94d['x']=_0x12b2ea['x'],_0x2aa94d['y']=_0x12b2ea['y'],this[_0x2c63bb(0x61c)][_0x2c63bb(0x960)](_0x2aa94d);},Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x564)]=function(_0x2926bd){const _0x588997=_0x4a3d8d;if(!this[_0x588997(0x61c)])return;if(!_0x2926bd)return;this[_0x588997(0x61c)][_0x588997(0x208)](_0x2926bd);},Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x166)]=function(){const _0xde990e=_0x4a3d8d;if(!this[_0xde990e(0x8bd)]())return;if(!this[_0xde990e(0xc35)])this[_0xde990e(0x472)]();this[_0xde990e(0x5b6)](),this[_0xde990e(0x312)]();},Window_BattleStatus[_0x4a3d8d(0x3c4)]['isBorderStylePortraitShown']=function(){const _0x19391b=_0x4a3d8d;if(this['constructor']!==Window_BattleStatus)return![];if(!SceneManager[_0x19391b(0x930)]())return![];return VisuMZ['BattleCore'][_0x19391b(0xb75)]['BattleLayout']['ShowPortraitsBorderStyle'];},Window_BattleStatus[_0x4a3d8d(0x3c4)]['createBorderStylePortraitSprite']=function(){const _0x4a6532=_0x4a3d8d;this[_0x4a6532(0xc35)]=new Sprite();const _0x4b8831=SceneManager[_0x4a6532(0x3ff)],_0x79bdd2=_0x4b8831[_0x4a6532(0x9cd)][_0x4a6532(0x2b7)](_0x4b8831[_0x4a6532(0xa34)]);_0x4b8831[_0x4a6532(0x441)](this[_0x4a6532(0xc35)],_0x79bdd2),this[_0x4a6532(0xc35)][_0x4a6532(0xc3d)]['x']=0.5,this[_0x4a6532(0xc35)][_0x4a6532(0xc3d)]['y']=0x1;const _0x5244a6=VisuMZ[_0x4a6532(0x485)]['Settings'][_0x4a6532(0x620)][_0x4a6532(0x892)];this[_0x4a6532(0xc35)]['scale']['x']=_0x5244a6,this['_borderPortraitSprite']['scale']['y']=_0x5244a6,this[_0x4a6532(0xc35)]['y']=this['y']+this[_0x4a6532(0x2cc)],this[_0x4a6532(0x7f3)]=0x0;},Window_BattleStatus['prototype'][_0x4a3d8d(0x5b6)]=function(){const _0x454f81=_0x4a3d8d;this[_0x454f81(0xc35)][_0x454f81(0xab9)]=BattleManager[_0x454f81(0xc48)]();const _0x3faab9=BattleManager[_0x454f81(0x2fa)]();if(_0x3faab9===this['_borderPortraitSprite']['actor'])return;this[_0x454f81(0xc35)][_0x454f81(0x2fa)]=_0x3faab9||this[_0x454f81(0xc35)][_0x454f81(0x2fa)];if(!_0x3faab9)return;else{if(_0x3faab9[_0x454f81(0x8d7)]()===''){this[_0x454f81(0xc35)][_0x454f81(0x2dd)]=ImageManager['_emptyBitmap'];return;}else{const _0x5c076b=ImageManager[_0x454f81(0x96b)](_0x3faab9[_0x454f81(0x8d7)]());_0x5c076b['addLoadListener'](this[_0x454f81(0x925)][_0x454f81(0x2a0)](this,_0x5c076b));}}},Window_BattleStatus[_0x4a3d8d(0x3c4)]['processBorderActor']=function(_0x5e7c74){const _0x5bb999=_0x4a3d8d;this[_0x5bb999(0x7f3)]=0x14,this['_borderPortraitSprite'][_0x5bb999(0x2dd)]=_0x5e7c74;SceneManager[_0x5bb999(0x3ff)]['isRightInputMode']()?(this[_0x5bb999(0xc35)]['x']=0x0,this[_0x5bb999(0x979)]=Math['ceil'](_0x5e7c74[_0x5bb999(0xb49)]/0x2)):(this[_0x5bb999(0xc35)]['x']=this[_0x5bb999(0xb49)],this[_0x5bb999(0x979)]=this[_0x5bb999(0xb49)]*0x3/0x4);this[_0x5bb999(0xc35)][_0x5bb999(0x2f0)]=0x0,this[_0x5bb999(0xc35)]['y']=this['y']+this[_0x5bb999(0x2cc)];const _0x58d7a8=BattleManager['actor']();_0x58d7a8&&(this[_0x5bb999(0x979)]+=_0x58d7a8[_0x5bb999(0x5b2)](),this['_borderPortraitSprite']['y']+=_0x58d7a8[_0x5bb999(0x327)]());},Window_BattleStatus['prototype']['updateBorderSprite']=function(){const _0x3a4cb3=_0x4a3d8d;if(this['_borderPortraitDuration']>0x0){if(_0x3a4cb3(0x7d3)===_0x3a4cb3(0xb73))this[_0x3a4cb3(0xa7c)]=this[_0x3a4cb3(0x534)](),this[_0x3a4cb3(0xa9b)](),_0x3fbcf0['prototype'][_0x3a4cb3(0xbe4)][_0x3a4cb3(0xaf0)](this);else{const _0x383710=this[_0x3a4cb3(0x7f3)],_0x229586=this[_0x3a4cb3(0xc35)];_0x229586['x']=(_0x229586['x']*(_0x383710-0x1)+this[_0x3a4cb3(0x979)])/_0x383710,_0x229586[_0x3a4cb3(0x2f0)]=(_0x229586['opacity']*(_0x383710-0x1)+0xff)/_0x383710,this[_0x3a4cb3(0x7f3)]--;}}},Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x71f)]=function(){const _0x1337f9=_0x4a3d8d;return;this['_effectsContainer']&&(this[_0x1337f9(0x5d2)]['x']=this['x'],this[_0x1337f9(0x5d2)]['y']=this['y']),this['_damageContainer']&&(this[_0x1337f9(0x61c)]['x']=this['x'],this[_0x1337f9(0x61c)]['y']=this['y']);},Window_BattleStatus[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x861)]=function(){const _0x597e0e=_0x4a3d8d,_0x3310e5=VisuMZ[_0x597e0e(0x485)][_0x597e0e(0xb75)][_0x597e0e(0x620)];if(_0x3310e5[_0x597e0e(0x1ac)]){if('cyTIT'===_0x597e0e(0x1f1)){const _0x2bcc99=new Sprite();_0x2bcc99[_0x597e0e(0x2dd)]=ImageManager[_0x597e0e(0x2ce)](_0x3310e5[_0x597e0e(0x1ac)]),_0x2bcc99['x']=_0x3310e5[_0x597e0e(0x8ca)]||0x0,_0x2bcc99['y']=_0x3310e5[_0x597e0e(0x804)]||0x0,this['addChildToBack'](_0x2bcc99),this[_0x597e0e(0x631)]=_0x2bcc99;}else this[_0x597e0e(0xb4b)]();}if(_0x3310e5[_0x597e0e(0x57c)]){const _0x28b422=new Sprite();_0x28b422[_0x597e0e(0x2dd)]=ImageManager[_0x597e0e(0x2ce)](_0x3310e5[_0x597e0e(0x57c)]),_0x28b422['x']=_0x3310e5[_0x597e0e(0x1cf)]||0x0,_0x28b422['y']=_0x3310e5[_0x597e0e(0x157)]||0x0,this[_0x597e0e(0x960)](_0x28b422),this[_0x597e0e(0x789)]=_0x28b422;}},Window_BattleStatus['prototype'][_0x4a3d8d(0xbc5)]=function(){const _0x48c577=_0x4a3d8d;this['_frontAttachmentSprite']&&this[_0x48c577(0x960)](this['_frontAttachmentSprite']),this['_backAttachmentSprite']&&this[_0x48c577(0x87c)](this[_0x48c577(0x631)]);},Window_BattleActor['prototype'][_0x4a3d8d(0x8f1)]=function(){const _0x1703ed=_0x4a3d8d;return Window_BattleStatus[_0x1703ed(0x3c4)][_0x1703ed(0x8f1)][_0x1703ed(0xaf0)](this)&&this[_0x1703ed(0xa79)]();},Window_BattleActor['prototype'][_0x4a3d8d(0xa79)]=function(){const _0x1bbf53=_0x4a3d8d,_0x11c69d=BattleManager[_0x1bbf53(0x281)](),_0x43dbbc=this[_0x1bbf53(0x2fa)](this['index']());if(!_0x11c69d)return!![];if(!_0x11c69d[_0x1bbf53(0x49d)]())return!![];const _0x24a66d=_0x11c69d[_0x1bbf53(0x49d)]()[_0x1bbf53(0x9ea)];if(_0x24a66d[_0x1bbf53(0x591)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x43dbbc===BattleManager[_0x1bbf53(0x2fa)]())return![];}return!![];},VisuMZ['BattleCore']['Window_BattleEnemy_initialize']=Window_BattleEnemy[_0x4a3d8d(0x3c4)]['initialize'],Window_BattleEnemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x82a)]=function(_0x1b1343){const _0x1b2cf2=_0x4a3d8d;this['_lastEnemy']=null,VisuMZ['BattleCore']['Window_BattleEnemy_initialize'][_0x1b2cf2(0xaf0)](this,_0x1b1343);},Window_BattleEnemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x867)]=function(){const _0x4023aa=_0x4a3d8d;return this[_0x4023aa(0x66e)]();},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xbb2)]=Window_BattleEnemy['prototype']['show'],Window_BattleEnemy['prototype'][_0x4a3d8d(0x92f)]=function(){const _0x2a328b=_0x4a3d8d;VisuMZ['BattleCore'][_0x2a328b(0xbb2)][_0x2a328b(0xaf0)](this),this['y']=Graphics['height']*0xa;},Window_BattleEnemy[_0x4a3d8d(0x3c4)]['validTargets']=function(){const _0x1d1ea4=_0x4a3d8d;return $gameTroop[_0x1d1ea4(0x411)]()['slice'](0x0);},Window_BattleEnemy[_0x4a3d8d(0x3c4)]['refresh']=function(){const _0x225dea=_0x4a3d8d;this[_0x225dea(0xa7c)]=this['validTargets'](),this[_0x225dea(0xa9b)](),Window_Selectable[_0x225dea(0x3c4)][_0x225dea(0xbe4)][_0x225dea(0xaf0)](this);},Window_BattleEnemy['prototype']['sortEnemies']=function(){const _0x27a84e=_0x4a3d8d;this[_0x27a84e(0xa7c)]['sort']((_0xb462f0,_0x3ab59b)=>{const _0x3fe9d0=_0x27a84e;if(_0xb462f0[_0x3fe9d0(0x28e)]()[_0x3fe9d0(0x232)]===_0x3ab59b[_0x3fe9d0(0x28e)]()['_baseX']){if(_0x3fe9d0(0xb02)!=='Fxbvj')return _0xb462f0['battler']()[_0x3fe9d0(0x5d8)]-_0x3ab59b[_0x3fe9d0(0x28e)]()[_0x3fe9d0(0x5d8)];else{const _0x2a45e6=_0xbeb5c4[_0x3fe9d0(0x485)]['Settings'][_0x3fe9d0(0x620)],_0x2b8b92=_0x2a45e6['CommandWidth']||0xc0,_0x367d6f=this[_0x3fe9d0(0x6cf)](),_0x45f267=this[_0x3fe9d0(0xc46)]()?_0x49a476[_0x3fe9d0(0x6c0)]-_0x2b8b92:0x0,_0xd54a5b=_0x248a64['boxHeight']-_0x367d6f;return new _0x271048(_0x45f267,_0xd54a5b,_0x2b8b92,_0x367d6f);}}else return _0xb462f0[_0x3fe9d0(0x28e)]()[_0x3fe9d0(0x232)]-_0x3ab59b['battler']()[_0x3fe9d0(0x232)];}),SceneManager[_0x27a84e(0x4cc)]()&&(_0x27a84e(0x180)!=='XMEdW'?_0x2390d4[_0x27a84e(0x41d)]():this['_enemies'][_0x27a84e(0x1e4)]());},Window_BattleEnemy[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x6df)]=function(){const _0x3a61a4=_0x4a3d8d,_0x1682f2=VisuMZ[_0x3a61a4(0x485)][_0x3a61a4(0xb75)][_0x3a61a4(0xa50)];_0x1682f2[_0x3a61a4(0xb48)]?this[_0x3a61a4(0x933)]():this[_0x3a61a4(0x616)]();},Window_BattleEnemy[_0x4a3d8d(0x3c4)]['autoSelectLastSelected']=function(){const _0x3e8dad=_0x4a3d8d;if(this[_0x3e8dad(0x27e)]&&this[_0x3e8dad(0xa7c)]['includes'](this[_0x3e8dad(0x27e)])){if(_0x3e8dad(0x33e)===_0x3e8dad(0x33e)){const _0x1194b5=this[_0x3e8dad(0xa7c)]['indexOf'](this[_0x3e8dad(0x27e)]);this[_0x3e8dad(0x652)](_0x1194b5);}else _0x48f44e[_0x3e8dad(0x3c4)][_0x3e8dad(0x6e4)][_0x3e8dad(0xaf0)](this),this[_0x3e8dad(0xa22)]=null,this[_0x3e8dad(0x8a8)]=![],this[_0x3e8dad(0x47c)]='',this[_0x3e8dad(0x4ff)]=0x0,this[_0x3e8dad(0x25d)]=null,this[_0x3e8dad(0x498)]=0x0,this[_0x3e8dad(0x511)]=0x0,this[_0x3e8dad(0x1e6)](),this['createStateIconSprite']();}else{if(_0x3e8dad(0xa4e)!==_0x3e8dad(0xa75))this[_0x3e8dad(0x616)]();else{if(this[_0x3e8dad(0x349)]&&this[_0x3e8dad(0x349)][_0x3e8dad(0x2b2)]())return![];if(this['_battler']&&!this['_battler'][_0x3e8dad(0x671)]())return![];return _0x38d40b['isSideView']();}}},Window_BattleEnemy[_0x4a3d8d(0x3c4)]['autoSelectPriority']=function(){const _0x33c054=_0x4a3d8d,_0xdc9e48=VisuMZ[_0x33c054(0x485)][_0x33c054(0xb75)][_0x33c054(0xa50)];let _0x5c2828=![];$gameSystem[_0x33c054(0x957)]()?_0x5c2828=_0xdc9e48[_0x33c054(0x66f)]:_0x5c2828=_0xdc9e48['FrontViewSelect'],this[_0x33c054(0x652)](_0x5c2828?this[_0x33c054(0x66e)]()-0x1:0x0);},Window_BattleEnemy['prototype']['callOkHandler']=function(){const _0x13d570=_0x4a3d8d;Window_Selectable[_0x13d570(0x3c4)]['callOkHandler'][_0x13d570(0xaf0)](this),this[_0x13d570(0x27e)]=this[_0x13d570(0x382)]();},Window_BattleItem['prototype'][_0x4a3d8d(0xbff)]=function(_0x2dff53){const _0x4f4c5b=_0x4a3d8d;if(!_0x2dff53)return![];return _0x2dff53[_0x4f4c5b(0x150)]===0x0||_0x2dff53[_0x4f4c5b(0x150)]===0x1;};function Window_AutoBattleCancel(){const _0x25d8fd=_0x4a3d8d;this[_0x25d8fd(0x82a)](...arguments);}Window_AutoBattleCancel[_0x4a3d8d(0x3c4)]=Object[_0x4a3d8d(0x416)](Window_Base[_0x4a3d8d(0x3c4)]),Window_AutoBattleCancel[_0x4a3d8d(0x3c4)]['constructor']=Window_AutoBattleCancel,Window_AutoBattleCancel['prototype'][_0x4a3d8d(0x82a)]=function(_0x45cdc0){const _0x4eb4a7=_0x4a3d8d;Window_Base[_0x4eb4a7(0x3c4)][_0x4eb4a7(0x82a)][_0x4eb4a7(0xaf0)](this,_0x45cdc0),this[_0x4eb4a7(0x5ff)](this['bgType']()),this[_0x4eb4a7(0xbe4)]();},Window_AutoBattleCancel[_0x4a3d8d(0x3c4)]['bgType']=function(){const _0x235382=_0x4a3d8d;return VisuMZ[_0x235382(0x485)][_0x235382(0xb75)][_0x235382(0x839)][_0x235382(0x461)];},Window_AutoBattleCancel[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xbe4)]=function(){const _0x5e9290=_0x4a3d8d;this[_0x5e9290(0x368)][_0x5e9290(0x1db)]();const _0xbfd2ff=VisuMZ['BattleCore'][_0x5e9290(0xb75)][_0x5e9290(0x839)]['AutoBattleMsg'],_0x5ed5a9=_0xbfd2ff[_0x5e9290(0x8dd)](this[_0x5e9290(0x2da)](),this[_0x5e9290(0x7c3)]()),_0x1bc9d3=this[_0x5e9290(0x32d)](_0x5ed5a9)[_0x5e9290(0xb49)],_0xc388f=Math['floor']((this[_0x5e9290(0x288)]-_0x1bc9d3)/0x2);this[_0x5e9290(0x6fa)](_0x5ed5a9,_0xc388f,0x0,_0x1bc9d3);},Window_AutoBattleCancel[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x2da)]=function(){const _0x3b0516=_0x4a3d8d;if(Imported[_0x3b0516(0x714)]){if(_0x3b0516(0xb7c)===_0x3b0516(0xb7c))return TextManager[_0x3b0516(0x446)]('ok');else this[_0x3b0516(0xbbf)]();}else return VisuMZ['BattleCore'][_0x3b0516(0xb75)][_0x3b0516(0x839)][_0x3b0516(0xbc1)];},Window_AutoBattleCancel[_0x4a3d8d(0x3c4)]['cancelButtonText']=function(){const _0x3baf57=_0x4a3d8d;return Imported[_0x3baf57(0x714)]?TextManager[_0x3baf57(0x446)](_0x3baf57(0xb9f)):VisuMZ[_0x3baf57(0x485)][_0x3baf57(0xb75)][_0x3baf57(0x839)][_0x3baf57(0x742)];},Window_AutoBattleCancel[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x372)]=function(){const _0x5e5f7f=_0x4a3d8d;Window_Base[_0x5e5f7f(0x3c4)][_0x5e5f7f(0x372)][_0x5e5f7f(0xaf0)](this),this[_0x5e5f7f(0x625)](),this[_0x5e5f7f(0x70b)]();},Window_AutoBattleCancel[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x625)]=function(){const _0xc93bd2=_0x4a3d8d;this[_0xc93bd2(0xab9)]=BattleManager[_0xc93bd2(0xa76)];},Window_AutoBattleCancel[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x70b)]=function(){const _0x30c62d=_0x4a3d8d;if(!BattleManager[_0x30c62d(0xa76)])return;(Input[_0x30c62d(0xae2)]('ok')||Input[_0x30c62d(0xae2)](_0x30c62d(0xb9f))||TouchInput[_0x30c62d(0x968)]()||TouchInput[_0x30c62d(0x31a)]())&&(SoundManager[_0x30c62d(0x6ab)](),BattleManager['_autoBattle']=![],Input[_0x30c62d(0x1db)](),TouchInput[_0x30c62d(0x1db)]());};function Window_EnemyName(){const _0x833fcb=_0x4a3d8d;this[_0x833fcb(0x82a)](...arguments);}function _0x1780(){const _0x524263=['isBTB','setMoveEasingType','battleJump','_armorPenetration','_visualHpGauge_JustDied','hasSkill','performMiss','_back1Sprite','name','process_VisuMZ_BattleCore_CreateRegExp','pOSjD','ttfcg','opponentsUnit','Game_Action_itemEffectAddNormalState','isCommandEnabled','ConvertActionSequenceTarget','Window_BattleEnemy_show','xaiQA','CombatLogIcon','dimColor1','onEnemyOk','helpAreaHeight','isFlipped','battleOpacity','cEImK','saAcD','Sprite_Battler_update','_regionBattleback1','Game_Actor_setup','selectNextCommand','isYtX','AutoBattleOK','isBusy','removeAnimationFromContainer','logActionList','updateAttachmentSprites','Ptfvm','UNgJc','mainFontSize','ActSeq_Horror_Clear','uQoNG','checkTpbInputOpen','llhsB','evalDamageFormulaBattleCore','CriticalDmgRate','currentValue','HelpFight','Scene_Battle_startPartyCommandSelection','Game_Temp_requestAnimation','command119','Uiwww','ActSeq_Mechanics_CtbOrder','callOptions','isAnimationShownOnBattlePortrait','visibilityState','startTpbTurn','BattleStartEvent','alive\x20actors\x20not\x20target','isForOpponentBattleCore','STB','ActSeq_Zoom_Reset','createBattleFieldContainer','motionSpeed','yzXdm','StepDuration','svBattlerShadowVisible','refresh','applyGlobalCommonEventNotetags','hFYwH','HNApw','ActSeq_Mechanics_BreakShieldChange','Window_SkillList_maxCols','getConfigValue','pzCdB','reserveCommonEvent','ATK','lineHeight','DistanceY','effect','States','_battlePortrait','setupBattlebackBattleCore','DamageRate','setLastBattleSkill','checkShowHideSkillNotetags','PreApplyJS','eSEdi','NQkSx','_active','rVoFU','pushBaseLine','JS\x20%1END\x20TURN','createEnemyNames','includes','<CUSTOM\x20ACTION\x20SEQUENCE>','NewPopupBottom','clearResult','makeActionList','chantStyle','Dkxyf','displayAddedStates','index','becomeSTBExploited','rowIx','ActSeq_Movement_WaitForJump','AEXdU','expRate','DefaultStyle','bYGBM','createHelpWindow','Game_Party_addActor','isIncludedInEnemyWindow','sortDamageSprites','isPreviousSceneBattleTransitionable','updateCommandNameWindow','drawSkillCost','TzImD','CheckVisibleBattleNotetags','bbogB','isBattlerGrounded','isMoving','PreStartBattleJS','nextActiveWeaponSlot','commandName','applyDamageCaps','CheckVisibleSwitchNotetags','duration','eNLyr','battleMembers','canUseItemCommand','adjustFlippedBattlefield','requestFauxAnimation','slices','contains','\x5cI[%1]%2','bossCollapse','showNormalAnimation','processPostBattleCommonEvents','fight','IqxdU','isAutoBattle','_shadowSprite','startSpin','qohzx','438604bEDwrT','Sprite_Damage_createChildSprite','rwhdO','_borderPortraitSprite','RhifS','HP_Flat','VisuMZ_3_SideviewBattleUI','_skewWholeDuration','mainSpriteScaleX','updateShadowPosition','cxqVw','anchor','mZAuj','TenLx','Window_BattleLog_performEvasion','changePaintOpacity','drawSingleSkillCost','Game_Battler_startTpbTurn','_targets','_lastAction','isRightInputMode','destroy','isInputting','mBegZ','_motionCount','ParseStateNotetags','updatePositionBattleCore','uiMenuStyle','process_VisuMZ_BattleCore_BaseTroops','isPTB','CastCertain','BattleManager_makeActionOrders','setBattleAngle','Game_System_initialize','setLetter','dsfLh','isAutoBattleCommandAdded','StatusWindowSkinFilename','Swjwo','dead\x20enemies','command301','alterActionCostPTB','ActSeq_Impact_TimeStop','Spriteset_Battle_createLowerLayer','addDebuff','motionType','BattleLogRectJS','extraPositionScaledY','ParseClassNotetags','mugUz','NameAlwaysSelectOnly','occasion','isImmortal','dead\x20opponents','lOfeY','skew','WaitCount2','ParseActorNotetags','StatusWindowAttachmentFrontOffsetY','missile','setupShockwaveImpactFilter','_item','ActSeq_Set_SetupAction','fnordRemovedStates','missed','checkShowHideSwitchNotetags','skill','makeCommandList','TpbActiveChangeEnabled','Game_BattlerBase_eraseState','AttachStateOffsetX','QvIkc','isAnyoneFloating','updateBorderStyle','ebqjj','_forcedBattleLayout','moveBattlerHomeToPoint','LnJLk','command301_PreBattleEvent','createCommandVisibleJS','addPartyCommand','keiyB','fittingHeight','clearFreezeMotion','_flashDuration','_tpbNeedsPartyCommand','executeDamage','_skewDuration','Sprite_Enemy_createStateIconSprite','AutoBattleRect','BpcDt','WtypeId','ActSeq_Motion_FreezeMotionFrame','ActSeq_Target_PrevTarget','_svBattlerData','HTLhM','VisuMZ_2_BattleSystemCTB','placeGauge','linkSprite','XMEdW','displayReflection','parseForcedGameTroopSettingsBattleCore','PostRegenerateJS','Strength','ActSeq_Camera_Reset','allowCollapse','StepDistanceY','_forceAction','ActSeq_Set_TargetActionSet','gainBravePoints','_subject','ShuffleArray','Game_Action_itemEffectAddAttackState','AGpIx','_uiContainer','alterCost','Radius','_tempEquipCheck','OmbIh','addWeaponSwapCommand','applyVariance','resetResultSwitches','notFocusValid','addCommand','ActSeq_Horror_NoiseRemove','PostStartActionJS','Game_Battler_performEvasion','displayFailure','resize','textColor','isAnyoneSpinning','createString','_autoBattleWindow','HelpAutoBattle','CreateActionSequenceTargets','setupTextPopup','Sprite_Battler_damageOffsetY','Game_Map_battleback1Name','actionBattleCoreJS','performActionEnd','centerFrontViewSprite','isStatusAffected','BFeUe','StatusWindowAttachmentBack','fPubc','battleUIOffsetY','drawText','eSAye','tNaYI','PKjly','POST-','Sprite_Battler_startMove','clearHorrorEffects','HelpEscape','KOrZq','pointX','SvMotionIdleMass-%1-%2','setBattler','mRjao','Window_BattleLog_displayActionResults','YimGY','statusWindowRectBorderStyle','createEnemies','NameOffsetY','updateEffectsContainer','autoBattleStart','_enemyId','moveToStartPosition','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','GwGfb','TpbGaugeOffsetX','criticalDmgFlat','MIDec','Window_BattleLog_pushBaseLine','finalizeScale','vADAJ','sliceMax','ActSeq_Horror_TVCreate','StatusWindowAttachmentFrontOffsetX','yOBfb','isTpb','XIYve','_homeDuration','lastBattleSkill','displayReflectionPlayBack','IfnMu','ActSeq_Animation_AttackAnimation2','_svBattlerSprite','gIMDL','_jumpMaxHeight','clear','iconWidth','freezeTime','BTB','PweNt','HBiSh','battleSpin','ActSeq_Movement_WaitForSpin','Window_BattleLog_displayMiss','reverse','BattleLog','createMainSprite','tgQaV','TywAq','waitForJump','hpDamageFmt','Window_BattleLog_performDamage','hoUeX','Game_Battler_clearMotion','resizeWindowXPStyle','refreshMotion','all\x20targets','cyTIT','ScaleX','context','partyCommandWindowRect','onSkewEnd','createInnerPortrait','_growWholeDuration','EMWqY','gWEQe','isConfused','SceneManager_push','description','updateBitmap','NWPBW','eKAum','Game_BattlerBase_canAttack','commandStyleCheck','getLastPluginCommandInterpreter','lLaKB','gaugeLineHeight','_jumpHeight','PreRegenerateJS','elIwD','removeChild','updateOpacity','status','CmdTextAlign','displayActionResults','alive\x20battlers\x20not\x20target','onBattleEnd','clearForcedGameTroopSettingsBattleCore','ActionCount','ActionItemMsg','DZpAi','process_VisuMZ_BattleCore_jsFunctions','makeTargetSprites','StyleOFF','ParseArmorNotetags','drawItemStyleIcon','updateActors','playEnemyDamage','getItemDamageAmountTextBattleCore','updateHomeMove','_growY','icDLC','updateOnceParallelInterpreters','isBattleTest','_hpGaugeSprite','FfvRD','QCeCy','_actorSprites','_battleCoreBattleStartEvent','BattlebackScale','drawItemBackground','updateStart','Window_BattleLog_performReflection','setupDamagePopup','OKexT','setFrame','bottom','NameAttachStateIcon','Scene_Battle_startActorCommandSelection','WwHyd','isBattleMember','ShowWeapon','_baseX','xMEsF','ShazN','mainSprite','Item-%1-%2','WtmLD','aJNhZ','StatusWindowSkinHide','PostDamage%1JS','wlWdP','OTVGh','animationWait','onBattleEndBattleCore','_targetAngle','canMove','updateStatusWindowPosition','NnIWr','_enemyIDs','_isBattlerFlipped','helpWindowRectBorderStyle','qcEsj','CmdIconItem','ShowMpDmg','Window_BattleLog_clear','XPSpriteYLocation','isOnCurrentMap','updateBossCollapse','DEF','dEkNa','stop','victory','ActSeq_Movement_Jump','CDAIY','ActSeq_Movement_Scale','retreat','vEvny','uSKYy','hdjiT','performCastAnimation','placeTimeGauge','PsIlz','ShowMissEvasion','split','_effectType','ActSeq_Zoom_WaitForZoom','ZYVbE','damageContainer','anchorY','EUfwI','commandOptions','updateAngleCalculations','ActSeq_Camera_FocusTarget','extraPositionY','substitute','SwitchMissEvade','QtNva','MAXHP','wtypeId','Window_BattleLog_performMiss','VisuMZ_2_BattleSystemETB','wshQu','createLowerLayer','ZGKlf','MykBi','TpGaugeOffsetY','mwFwK','Scene_Battle_onActorCancel','onActorOk','startInput','ActiveTpbOptionsMessage','TYtZG','getAttackWeaponAnimationId','ParseAllNotetags','ShowReflect','CmdTextAutoBattle','WUhpx','_lastEnemy','_createEffectsContainer','bitmapWidth','inputtingAction','ActSeq_Mechanics_EnemyEscape','Game_BattlerBase_refresh','xbsjL','isDisplayEmergedEnemies','PostDamageJS','Scene_ItemBase_applyItem','innerWidth','_displayBattleCoreTransitionErrorMsg','Game_Action_isForOpponent','ParseSkillNotetags','targetActionSet','canInput','battler','RciOa','sMZZX','performMoveToTargets','process_VisuMZ_BattleCore_Action_Notetags','JGEKm','innerHeight','createBattleUIOffsetX','maFHb','AddOption','qLrcd','setBattleCameraOffset','drain','floatBattler','Scene_Options_maxCommands','EctUC','front\x20base','jgzvc','bind','PrioritySortActors','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','zdCgi','Width','xSVip','jump','parameters','adjustWeaponSpriteOffset','DRRkp','BattleManager_onEscapeSuccess','JS\x20%1START\x20BATTLE','DualWield','#%1','measureTextWidth','BattleManager_processVictory','%1EndTurnJS','WaitForAngle','isDead','isMeleeSingleTargetAction','eXnNs','AHNfE','forceEscapeSprite','indexOf','MDF','PeSmt','endAction','xkZpK','ConfigManager_makeData','trueRandomTarget','performRecovery','_text','NUM','_speed','performCollapse','Game_Troop_expTotal','createShadowSprite','setHelpWindow','_wtypeIDs','createAllWindows','dying','StepDistanceX','Window_BattleLog_popBaseLine','onTurnEnd','height','ActSeq_Mechanics_VariablePopup','loadSystem','ActSeq_Impact_ShockwaveCenterTargets','hwQPl','CommandWidth','createActorCommandWindowBattleCore','_angleRevertOnFinish','tlPEd','RevertAngle','YeeAo','Window_BattleLog_displayEvasion','Game_Action_evalDamageFormula','HfbYy','okButtonText','_actionBattlers','_homeWholeDuration','bitmap','UaKrC','applyArmorModifiers','Opacity','damageFlat','RnEVk','_duration','ActSeq_Movement_Skew','_targetOpacity','updateJump','CheckMapBattleEventValid','_floatHeight','onSelectAction','ActSeq_Motion_WaitMotionFrame','Ustnl','startJump','startActorCommandSelection','VariableHeal','mpHealingFmt','opacity','wiOOi','MFCff','drawItemImageListStyle','Game_Battler_performActionStart','toString','startSkew','ARRAYEVAL','ActSeq_Movement_HomeReset','MpGaugeOffsetY','actor','updateCallMenu','changeAtbCastTime','priority','XeHBx','Targets','loadEnemy','ceVyh','toUpperCase','Game_Action_apply','VisuMZ_1_SkillsStatesCore','isAnyoneGrowing','Game_BattlerBase_addNewState','checkCacheKey','Game_Action_isForRandom','PopupPosition','applyResultSwitches','KfdrY','_animation','save','RzZaf','members','WaitForOpacity','makeTargetSelectionMoreVisible','updateBorderSprite','enemyId','SvWeaponMass-%1-%2','statusWindowRectXPStyle','WaitForMovement','Game_Battler_forceAction','AnchorX','delay','isCancelled','DamageStyles','Sprite_Actor_moveToStartPosition','ActSeq_Movement_WaitForOpacity','YkYcg','ActSeq_Movement_FaceDirection','Window_BattleLog_performCollapse','RarUp','skillTypes','updateCustomActionSequence','TTgCy','SmoothImage','gsboV','getBattlePortraitOffsetY','TZbot','addNewState','_weather','GkeaZ','isAlive','textSizeEx','wholeActionSet','Sprite_Battleback_adjustPosition','JQuJa','shift','displayChangedStates','SkillsStatesCore','vqksw','getAttackMotionSlot','kKOYo','jsScaleToFit','doesPageHaveOnceParallelStart','user','isSkillItemWindowsMiddle','Actions','Window_BattleLog_performMagicEvasion','noSimilarSTypes','gxiVZ','_tpbState','MotionIdle','move','setActiveWeaponSlot','list','itemHit','applyCritical','arRedFlat','onHomeMoveEnd','BqBqd','_battler','font','remove','Sprite_Actor_setBattler','JXloP','DamageStyleList','mainSpriteWidth','_homeEasing','Scene_Battle_initialize','changeWeather','MP_Rate','isBattlerFlipped','canUse','JZzcT','_tpbSceneChangeCacheActor','_baseLineStack','setValue','GhUBk','abnormal','WaitForScale','UNTITLED','BattleManager_startTurn','command283','DamageType%1','peFhv','Zkstn','popBaseLine','frontviewSpriteY','CommandAddOptions','drawEnemyName','ActSeq_Movement_MoveToTarget','contents','RWxpI','ITEM','1966824ZmmKmq','isDebuffAffected','drawItem','PyEXn','isAtbCastingState','deadMembers','nyXRp','update','ActSeq_BattleLog_PopBaseLine','FaceDirection','Dvdcx','_shadowScaleY','zRfps','ActSeq_Movement_MoveToPoint','join','clearDamagePopup','RzaBN','KVKEQ','canGuard','-%1','battleInjectAni','BattleCmdList','VqVlT','enemy','SceneManager_isSceneChanging','Turns','isPartyCommandWindowDisabled','performWeaponAnimation','autoBattle','arRedRate','Game_Battler_clearDamagePopup','speed','shfBB','IisbI','refreshStatusWindow','NEXvT','ActSeq_BattleLog_WaitForBattleLog','HelpItem','Buffs','Scene_Battle_itemWindowRect','WAKOY','TargetLocation','Scene_Battle_createPartyCommandWindow','getBattlePortrait','%1EndActionJS','ActSeq_Movement_HomeMoveToPoint','%1RegenerateJS','DTB','CvNRc','windowPadding','statusWindowRectDefaultStyle','_endBattle','dWjuZ','JS\x20ESCAPE\x20FAILURE','HHERT','Sprite_Enemy_update','startPartyCommandSelection','preemptive','FgLdY','Shadow','WaitForCamera','oAcBV','currentSymbol','_dimmerSprite','processAnimationRequests','ActionSkillMsg2','ZUNQx','HAmDk','removeHorrorEffect','hasBeenDefeatedBefore','_executedValue','needsSelectionBattleCore','Window_BattleLog_popupDamage','WEAPON\x20SWAP','ActSeq_Mechanics_DeathBreak','toLowerCase','emSFT','MAT','TQCuH','changeBattlerOpacity','drawItemStatusListStyle','hpDamage','alive\x20actors','JCFPp','unchanged','DisplayAction','finishActionSet','ActSeq_Impact_BlueRedInvert','buffRemove','prototype','createSeparateDamagePopups','clearBattleCoreData','ActSeq_Impact_MotionBlurTarget','JFKOW','performActionMotions','SvWeaponSolo-%1-%2','scale','frameCount','parse','itemTextAlign','spell','filter','jvqYG','OwnVs','Sprite_Enemy_initVisibility','addSingleSkillCommand','soiuA','_stateIconSprite','launchBattle','value','isAppeared','applyForcedGameTroopSettingsBattleCore','Height','DigitGrouping','JBqde','startBattle','yHBDq','_indent','YxNCK','jHWOS','CriticalHitFlat','setText','_createCursorSprite','updateWeather','getSkillTypes','wKUmr','setHalfActionsPTB','sideview_ui','KvxXl','repeatTargets','lukEffectRate','timeScale','GQfPH','evalDamageFormula','onBattleStartBattleCore','_battlerContainer','EToev','Scene_Map_initialize','adjustPosition','XPIZQ','currentClass','AzXEq','setupRgbSplitImpactFilter','itemEffectAddAttackState','EFFECT_COMMON_EVENT','setupWeaponAnimation','Game_Battler_performDamage','displayHpDamage','_scene','applyBattleCoreJS','_pattern','_waitMode','isAnyoneInjectAniPrepping','Game_Battler_makeSpeed','inputting','hue','createWeather','autoMeleeSingleTargetActionSet','startActorSelection','setSTBExploited','JS\x20%1START\x20ACTION','rlYOn','isDying','sVlWP','updateStateSprite','not\x20focus','aliveMembers','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','_actions','createBattleFieldBattleCore','_commonEventKey','create','FvXta','registerDefeatedEnemy','Game_Action_applyGlobal','xEoIH','rNMwL','nBBBP','revertTpbCachedActor','RpDgr','drawItemStatus','setBattlerFacePoint','updatePosition','getTraitSetKeys','Spriteset_Battle_createBattleField','MGoAG','wJtRu','isItem','AutoMeleeSolo','performAttackSlot','fGqfm','changeCtbCastTime','CCbTV','COMBAT\x20LOG','DamageDisplay','OBPbW','moveBattlerHomeDistance','hitRate','Sprite_SvEnemy','damageRate','setupHpGaugeSprite','setVisibleUI','ElementStatusCore','Window_BattleLog_refresh','ActSeq_Mechanics_BoostPointsChange','mhp','Window_BattleLog_displayCritical','jUJdU','windowskin','statusWindowRect','Scene_Battle_commandFight','CTCUj','ITDXC','Enemy-%1-%2','addChildAt','dHDdV','EasingType','_targetSkewY','offsetY','getInputButtonString','_escapeRatio','teuGy','Sprite_Weapon_loadBitmap','Sprite_Battler_setHome','ActSeq_Angle_Reset','fvwsD','FlinchDistanceY','animationId','eymRz','ActSeq_Mechanics_AddState','ActSeq_Weapon_ClearActiveWeapon','VisuMZ_1_MainMenuCore','fNnqH','_activeWeaponSlot','isPartyTpbInputtable','compareBattlerSprites','animationBaseDelay','XdOYX','xVlgr','popupDamage','PopupShiftY','message4','LOdlH','battleCoreResumeLaunchBattle','cameraClamp','walk','AutoBattleBgType','applyTargetFilters','zpCbJ','setBattleCameraPoint','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','magicReflection','floor','createContents','isSTB','_skewY','isFastForward','ShowSubstitute','ActSeq_Movement_FacePoint','partyCommandWindowRectXPStyle','Sprite_Actor_updateFrame','_battleField','surprise','createBorderStylePortraitSprite','IYtUG','updateLink','LMJeo','gJnNe','QBXmk','some','_commandNameWindow','battleCommandName','Window_BattleLog_displayMpDamage','_battlerName','_defeatedEnemies','visualHpGauge','LCPkw','onAngleEnd','OOFRk','length','extendTroopMembers','_iconIndex','BattleCore','_animationCount','EPlxV','GGEUE','updateShadowBattleCore','_mainSprite','autoBattleUseSkills','_stypeIDs','gainMp','IUPbd','regenerateAllBattleCore','log','_skewX','aWkBO','ApplyImmortal','performCounter','Game_Battler_onBattleEnd','ActSeq_BattleLog_WaitForNewLine','CriticalColor','_effectDuration','traitSet','onEncounterBattleCore','setWaitMode','_surprise','item','PqMMA','flashDuration','updateWaitMode','lohVt','OerfT','addCustomCommands','_branch','drawItemStyleIconText','HpGaugeOffsetX','Game_Actor_makeActionList','MOTIONS','randomInt','processRandomizedData','avOqZ','Window_Options_statusText','ActSeq_Mechanics_Collapse','tpbCommandFight','_createCursorArea','ZPCdp','HalfActions','STR','ActSeq_Impact_ZoomBlurTargetCenter','Shjxu','ActSeq_Mechanics_RemoveBuffDebuff','HomePosJS','qdwOq','NextTurn','Scene_Battle_startActorSelection','Game_Action_setGuard','updateSkew','compatibilityVisible','displayCurrentState','ActSeqImpact','processDefeat','JIqpt','SLQAl','exit','HpGaugeOffsetY','skillItemWindowRectBorderStyle','ext','playEnemyAttack','Game_Interpreter_updateWaitMode','HpGauge','options','NzsdF','ETjKb','isBattleFlipped','lWVxq','tpbActorSwitchConditionsMet','DistanceX','addEscapeCommand','setAttack','mGlEM','MaxLines','Game_Battler_performMiss','battleDisplayText','itemLineRect','qarUj','numTargets','ParseItemNotetags','setup','uNrVS','_methods','drawItemStatusXPStyle','nameY','_weaponSprite','Actor','updateForceAction','ActSeq_Movement_HomeMoveBy','startOpacity','AnchorY','jDAnI','_updateCursorFilterArea','custom','actorCommandEscape','IUTHO','WaitComplete','isHiddenSkill','nuSIm','LGOyk','Rate','isSpinning','ZSnIW','performFlinch','isATB','close','updateMain','ActSeq_BattleLog_AddText','ArPenRate','_actorCommandWindow','die','VisuMZ_3_WeaknessDisplay','clearWeaponAnimation','isAnyoneSkewing','messageSpeed','CxICP','updateBattlebackBitmap2','_battlerHue','HitRate','ActSeq_Mechanics_SwapWeapon','getHalfActionsPTB','checkBattleEnd','isActiveTpb','fnordAddedStates','UaNjh','ActSeq_Projectile_Icon','alphabetic','kPCeS','displayAffectedStatus','animation','setHorrorEffectSettings','battleStatusWindowAnimationContainer','SSVuH','ActSeq_Mechanics_AtbGauge','ForceDeath','_shake','focus','Window_ActorCommand_initialize','cameraOffsetDuration','LIVXF','ZCCCW','Actor-%1-%2','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','canAttackBattleCore','ActSeq_Zoom_Scale','_drawTextOutline','updateFloat','DMdFN','resizeWindowBorderStyle','Sprite_Battler_isMoving','_opacityEasing','QGrCn','BattleManager_startAction','BTestBypass','displayAction','BreakShields','czIAG','updateHelp','rFTrE','BattleVictoryJS','removeImmortal','SvMotionIdleSolo-%1-%2','getEnemyIdWithName','drawBackgroundRect','GUARD','VisuMZ_2_BattleSystemPTB','message1','abs','setupBattleback','PostStartBattleJS','validTargets','actorCommandCancelTPB','VZzTi','IconSet','setupBlueRedInvertImpactFilter','BattleManager_updatePhase','FlinchDistanceX','lastCommandSymbol','setCommonEvent','iconIndex','PbOMC','jpOZT','terminate','skewBattler','tDYVB','VisuMZ_3_ActSeqImpact','reduce','physical','VEWcX','_frame','adjustPosition_ScaleToFit','removeBuff','_createDamageContainer','ActSeq_Impact_TimeScale','isDTB','setBattleSkew','isSpriteVisible','ytyPH','QfJBC','BattleManager_selectNextCommand','freezeMotion','version','updateStaticSvBattlerFrames','QuqAb','Scene_Battle_start','ShowFailure','Shadow2','max','requestRefresh','checkExtendTroopCompatibility','hitFlat','ActSeq_Mechanics_Multipliers','Amp','GmMax','isAttack','extraHeight','kwmCf','makeSpeed','removeDamageSprite','escape','zIIrf','xZADF','ActSeq_Motion_RefreshMotion','_lineHeight','umoCA','loadBitmap','Game_Battler_regenerateAll','getItemDamageAmountLabelBattleCore','Scale','checkTpbInputClose','BattleManager_startBattle','skills','Armor-%1-%2','gainHalfActionsPTB','DisablePartyCmd','Immortal','SkewY','setSkill','isTpbMainPhase','performEvasion','skillWindowRect','OTKwj','StatusWindowAttachmentFront','SlotID','drawActorFace','EmergeText','onGrowEnd','_motion','Targets1','KPzMG','RRKuz','TSnKh','fOTDy','aPYgu','PostApplyAsTargetJS','ParseWeaponNotetags','BOjJz','Game_Interpreter_command283','ActSeq_Mechanics_StbExtraAction','PARTY','_flinched','FaceAway','MotionType','match','commandNameWindowDrawBackground','NameAlwaysVisible','ActSeq_Movement_WaitForFloat','changeBattlebacks','Sprite_Enemy_updateStateSprite','removedStateObjects','applyItem','setupCriticalEffect','_floatDuration','evade','MTjCd','symbol','sQOBa','CEBNw','NgUXJ','GvAvt','drawTextTopAligned','isBattleRefreshRequested','stepForward','forceAction','isETB','_weaponImageId','cqAob','_forcedBattlers','ActSeq_Animation_ChangeBattlePortrait','ActSeq_Animation_PlayAtCoordinate','EscapeFailureJS','nEdGO','findSymbolExt','requestAnimation','stepFlinch','isTpbCharged','getBattlePortraitOffsetX','regenerateAll','12294766CCFGQv','pIOfB','prepareBorderActor','DEBNh','StartTurnWait','mIGtj','Sprite_Battler_damageOffsetX','PreEndActionJS','criticalDmgRate','svShadow','_ptbActionCost','npGDv','isFTB','activate','onMoveEnd','LUK','getChildIndex','alive\x20battlers','iJdzS','_interpreter','performActionEndMembers','_phase','_flipScaleX','arPenFlat','makeAutoBattleActions','loop','svBattlerAnchorY','slice','whFPr','applyImmortal','_effectsContainer','OWbKm','HNowh','BattleManager_cancelActorInput','fRnvv','Sprite_Battler_updatePosition','_baseY','updateBattleProcess','MzpZE','isOptionsCommandAdded','isDuringNonLoopingMotion','alive\x20battlers\x20not\x20user','Mechanics','ActSeq_Motion_ClearFreezeFrame','isWaiting','placeActorName','BYNDt','qWmJr','OkhXB','JS\x20%1APPLY\x20%2','applyEasing','JS\x20BATTLE\x20DEFEAT','hpAffected','attackSkillId','requestDragonbonesAnimation','RdTIW','isTeamBased','maxCommands','ActSeq_Impact_MotionTrailCreate','cisur','BoostPoints','startHomeMove','WCzLL','WaitForAnimation','addGeneralOptions','battlerSmoothImage','displaySubstitute','partyCommandWindowRectBorderStyle','PreDamageAsUserJS','regionId','STYPES','AEUPT','Game_BattlerBase_isStateResist','clearMotion','float','setBackgroundType','isMeleeMultiTargetAction','subject','flashColor','ShowHide','removedBuffs','Mirror','updateHpGaugePosition','makeActionOrders','_skillWindow','battleback2Name','waitForFloat','formula','setActorHome','battleback1Name','PostEndBattleJS','DrdNt','isAutoBattleCommandEnabled','param','xHzBz','VisuMZ_3_ActSeqCamera','blockWidth','Window_BattleStatus_drawItemImage','autoSelectPriority','SkillItemMiddleLayout','ActionCenteredName','isForAll','JSON','YHXaS','_damageContainer','PreStartActionJS','jzsJl','PygoO','BattleLayout','BindCommonEventKeysForGroup','createEnemyNameContainer','CriticalHitRateJS','refreshDimmerBitmap','updateVisibility','YIvWn','NRCKg','Sprite_Actor_setActorHome','Scene_Battle_updateStatusWindowPosition','applyGuard','drawItemImage','fRpgC','SkillItemBorderCols','FtDoU','ActSeq_Camera_Clamp','Game_Action_isForFriend','_backAttachmentSprite','alignBattleCoreDamageSprite','addCombatLogCommand','svBattlerName','_cache','_padding','hardDamageCap','BoyIA','showHelpWindow','Override','Class-%1-%2','AS\x20USER','hywZG','freezeFrame','ShowCurrentState','BattleSystemCTB','dEsUn','sLflF','alive\x20actors\x20not\x20user','Text','targetDistortionSpritePosition','default','_customDamageFormula','loadWindowskin','_homeY','canAddSkillCommand','isAnimationPlaying','criticalHitRate','encounterList','HpAEC','_makeFontNameText','_lastPluginCommandInterpreter','addItemCommand','forceSelect','isForRandom','placeStateIcon','resetBreakShield','DamageFlat','isForFriend','displayTpDamage','OEjiD','Sprite_Actor_updateShadow','invokeMagicReflection','stateRate','alterBreakShield','_back2Sprite','getStypeIdWithName','battleCamera','Parse_Notetags_Action','BattleManager_checkBattleEnd','getNextSubject','YyNOf','isSkewing','Window_BattleLog_displayFailure','Scene_Options','maxLines','Sprite_AnimationMV_updatePosition','findTargetSprite','DefaultSoftCap','removeBuffsAuto','ActionEndUpdate','maxItems','SideviewSelect','loadBattleback2','canBattlerMove','battlelog','_checkOn','_onceParallelInterpreters','loadSvActor','attachSpritesToDistortionSprite','isSkill','Setting','Jffqr','jEzZB','FollowTurn','ActSeq_Movement_Opacity','Window_BattleLog_update','Scene_Battle_createActorCommandWindow','eYhJu','updateStateIconSprite','Window_ItemList_maxCols','command339','weatherType','itemRect','makeTargets','isBreakStunned','CastPhysical','xVenl','PGXpR','ActSeq_Movement_WaitForSkew','Dymwf','displayItemMessage','ReflectPlayback','JAyFZ','Window_Options_addGeneralOptions','RZHJR','battleAngle','FlashColor','Sprite_Actor_initMembers','zpdDW','setupIconTextPopup','pauseInjectAnimation','glitch','isBuffAffected','createHelpWindowBattleCore','isSceneChanging','cancelTargetSelectionVisibility','EHnrG','addGuardCommand','ActSeq_Horror_NoiseCreate','JS\x20ESCAPE\x20SUCCESS','NbpJs','setBattlerBattleCore','ActSeq_Mechanics_RemoveState','vCUaN','YzAuQ','+%1\x20MP','%1EndBattleJS','VisuMZ_4_BreakShields','ConvertParams','PreApplyAsUserJS','dcvTc','playCancel','effects','Window_BattleStatus_initialize','Sprite_Enemy_updateCollapse','PostDamageAsUserJS','createBattleField','SqqmQ','WaitForFloat','DdKBO','isHidden','qoCQV','globalAlpha','setEventCallback','_targetGrowY','_targetSkewX','ScaleToFit','CoreEngine','commandSymbol','ZPUmI','statusText','createTroopNote','boxWidth','Window_ActorCommand_setup','battleZoom','wait','_enemyID','atWCj','_injectAnimationSprite','Spriteset_Battle_update','TPB','performAttack','KTXsB','createChildSprite','top','QoL','BattleManager_endAction','windowAreaHeight','VisuMZ_2_BattleSystemBTB','dead\x20friends','displayEvasion','_currentActor','setHome','MlmBq','_callSceneOptions','getItemDamageAmountLabelOriginal','thrust','YxZdl','VisuMZ_3_BoostAction','isEffecting','ChantStyle','_actor','FWXwP','autoSelect','alive\x20friends\x20not\x20user','updateShadowVisibility','addSkillTypeCommand','clamp','initMembers','_animationSprites','createPartyCommandWindowBattleCore','gainCurrentActionsETB','ATTACK','performReflection','Window_PartyCommand_initialize','onEscapeSuccess','ulTlc','isVisualHpGaugeDisplayed','constructor','Wave','wpgCa','needsActorInputCancel','_distortionSprite','process_VisuMZ_BattleCore_TraitObject_Notetags','charging','PostApply%1JS','updateFrame','initBattleCore','ActSeq_Impact_Negative','FBkJy','drawTextEx','getWtypeIdWithName','addSkillCommands','createAttachedSprites','mmp','_forcedHomeY','isCustomBattleScope','repositionEnemiesByResolution','ReflectAnimation','ActionSkillMsg1','cvBcF','WSxKo','hidden','performMagicEvasion','-%1\x20MP','faceRect','_battleLayoutStyle','updateCancel','updateShadowScale','maxBattleMembers','padding','setLastPluginCommandInterpreter','createPartyCommandWindow','LUisl','isJumping','frameDelay','VisuMZ_0_CoreEngine','setBattleZoom','ActSeq_Element_Clear','ARRAYFUNC','setupMotion','WNZKF','mainSpriteHeight','createActors','_statusWindow','_canLose','battleStatusSprite','updateEffectContainers','AntiTintUiElements','clearActiveWeaponSlot','frameVisible','zUNvX','Rdmlm','MpGaugeOffsetX','_updateFilterArea','ActSeq_Weapon_NextActiveWeapon','qzLRu','ActSeq_Impact_ZoomBlurPoint','COMBATLOG','1:1','compareEnemySprite','getDefeatedEnemies','EscapeSuccessJS','ParseEnemyNotetags','Game_Enemy_setup','stypeId','isPhysical','worldTransform','Sprite_Actor_update','battleSys','ArRedRate','displayBuffs','SkipPartyCmd','CommandAddAutoBattle','Index','Scene_Battle_terminate','ActSeq_Movement_MoveBy','ShowRemovedBuff','PostApplyJS','ActSeq_Angle_WaitForAngle','processVictory','removeOnceParallelInterpreter','AutoBattleCancel','lJbIK','_flashColor','battleCorePreBattleCommonEvent','setupZoomBlurImpactFilter','_list','commandRemember','DigitGroupingDamageSprites','MotionFrameWait','PreEndTurnJS','removeActor','animationShouldMirror','command357','EIklM','isCertainHit','Game_Enemy_transform','switchToWeaponType','Game_Interpreter_PluginCommand','Game_Map_battleback2Name','drawItemImageXPStyle','parent','TqTzC','applyData','jumpBattler','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','alterType','commandStyle','OZCCs','collapseType','dead','ActSeq_Mechanics_OtbOrder','WaitForNewLine','gTvcg','jhGXf','isActor','_actionInputIndex','Window_BattleLog_displayCurrentState','Game_BattlerBase_die','PartyCmd','adjustPosition_ScaleUp','ALjdq','addAnimationSpriteToContainer','allowRandomSpeed','ANTI_TINT_UI','OffsetX','pUlBK','BattleManager_onEscapeFailure','mkdRd','EnableSoftCap','makeDeepCopy','NDDpy','_lines','Scene_Battle_partyCommandWindowRect','UNSFP','jEQqn','autoBattleWindowRect','command3011','BezmW','isDamagePopupRequested','hIuWa','bitmapHeight','AttackAnimation','waitForMovement','message2','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','createActorCommandWindow','Filename','right','setupActionSet','ActSeq_Animation_ShowAnimation','UIxBO','_frontAttachmentSprite','25StRiUi','drawItemImagePortraitStyle','jsScaleUp','cxsbE','lJNwb','vertCells','Targets2','displayMiss','Window_BattleLog_performActionStart','updatePadding','skillId','mainSpriteScaleY','SvBattlerMass-%1-%2','wLgch','createJS','yVHKH','130370fpvBlU','cameraDuration','selectNextActor','AdjustRect','CmdIconAutoBattle','isCTB','getMenuImage','Sprite_Enemy_setHue','ActSeq_BattleLog_PushBaseLine','MObnT','14lTqmEZ','_totalValue','SLCcr','turnCount','splice','createAnimationContainer','startMove','Bgemm','battleEnd','moveBattlerDistance','ShowAddedDebuff','VisuMZ_2_BattleSystemFTB','ArRedFlat','clearBattleRefreshRequest','cmZqL','dXBdW','isForOpponent','removeStatesAuto','mswCU','AllowCollapse','30KOLyer','Shzpe','ESCAPE','CmdIconEscape','IRHUf','svBattlerData','_tempBattler','_battleCoreBattleResumeAfter','KvPra','gainFullActionsPTB','ActSeq_BattleLog_Refresh','cancelButtonText','aapfx','TIpTc','upDcp','performSubstitute','actorCommandAutoBattle','TvBtb','createStateSprite','WeaponTypeID','makeDamageValue','Scene_Battle_selectNextCommand','_createClientArea','JqxZf','_targetIndex','StartTurnShow','clearFreezeMotionForWeapons','arVtK','battlerSprites','updateCollapse','autoMeleeMultiTargetActionSet','type','createKeyJS','_freezeMotionData','setActiveWeaponSet','horzCells','startMotion','VisuMZ_4_CombatLog','ScaleDown','head','traitObjects','ULWHT','updateScale','lnSsy','_offsetY','isStateResist','damageOffsetY','JmOyt','ActSeq_Impact_ShockwavePoint','battlerShadowScaleX','Game_Interpreter_command301','startEnemySelection','filterArea','ActSeq_Inject_AnimationStart','<CENTER>%1','process_VisuMZ_BattleCore_PreBattleCommonEvent','Scene_Battle_stop','BaseTroopIDs','VisuMZ_2_BattleSystemATB','_borderPortraitDuration','selectSymbol','TextColor','start','sHAtd','playOnceParallelTroopPage','qaAiu','nrfSb','PmVWL','action','Scene_Battle_logWindowRect','applySoftDamageCap','679126cPlPaa','callUpdateHelp','battleLayoutStyle','selectLast','singleSkill','StatusWindowAttachmentBackOffsetY','PrioritySortActive','CUeDT','atbInterrupt','setupMotionBlurImpactFilter','replace','ALiLS','checkAutoCustomActionSequenceNotetagEffect','origin','PAFFx','ScaleUp','ihHul','ActorCmd','isLearnedSkill','PreApply%1JS','ActSeq_Motion_MotionType','ActSeq_Movement_Spin','isAtbChargingState','isPlaytest','_lastRegenFrameCount','duIEV','_stateSprite','getNextSubjectFromPool','updateStyleOpacity','DVMxo','motionIdle','ActSeq_Projectile_Animation','text','battlerName','battleCommands','ShowAddedState','QkCqQ','canAlterActionCostPTB','PopupOffsetY','startWeaponAnimation','ITxpF','performActionStart','iudhN','initialize','applyHardDamageCap','MJmDv','trim','_action','waitForAnimation','jzexx','updateInterpreter','collapse','Game_Action_clear','requestMotion','Game_Interpreter_terminate','_motionType','endBattle','updateFlip','AutoBattle','transform','fillRect','TBZKM','Ceitm','setBattleImpactTimeScale','damage','PXFNa','PortraitScale','adjustPosition_ScaleDown','updateBattlerContainer','deathStateId','blt','open','FeGRg','VariableDmg','+%1','basicGaugesY','createDistortionSprite','CreateCommonEventKeys','_angleWholeDuration','Game_Map_encounterList','callNextMethod','setupFont','Game_Action_needsSelection','ARRAYNUM','hcJzY','moveToStartPositionBattleCore','vgpHC','isGuardWaiting','attackMotions','addOptionsCommand','VisuMZ_3_ActSeqProjectiles','isTurnBased','useItem','Variable','_angleDuration','_cursorSprite','updateUiContainerPosition','OlMzC','createAttachmentSprites','_additionalSprites','iconText','prev\x20target','ykgXY','Pre','maxCols','Scene_Battle_startEnemySelection','Window_BattleLog_performAction','process_VisuMZ_BattleCore_Failsafes','Sprite_Enemy_updateBossCollapse','_target','refreshActorPortrait','UGiGk','_animationContainer','Name','VisuMZ_2_WeaponSwapSystem','ARRAYSTR','%1StartActionJS','actionSplicePoint','resetFontSettings','MIN_SAFE_INTEGER','onEnemyCancel','drawIcon','_skillIDs','isEnemy','VisuMZ_2_HorrorEffects','addChildToBack','ShowAddedBuff','ActSeq_DB_DragonbonesMotionAni','DefaultDamageStyle','FullActions','ForceExploited','YIRsB','setupBattleCoreData','ShowTpDmg','min','UTmDe','FlinchDuration','PlhwF','Scene_Battle_onEnemyCancel','getAttackMotion','lrrlu','_cancelButton','isForFriendBattleCore','Linear','redraw','Game_Party_removeActor','_updateClientArea','PortraitScaleBorderStyle','makeActionListAutoAttack','XQRbj','mVcdn','Chgfi','attackStatesRate','PostDamageAsTargetJS','isOpponent','bcLPU','bJxkK','updateShadow','isAnyoneChangingOpacity','#ffffff','round','battleSkew','ActSeq_Mechanics_PtbConvert','Enable','584KtwVbm','eYoon','smooth','Scene_Boot_onDatabaseLoaded','isChangingOpacity','_appeared','ActSeq_Mechanics_FtbAction','QZVqG','MAXMP','sleep','kBpAG','counterAttack','JumpToLabel','ConfigManager_applyData','applyAngleChange','BARE\x20HANDS','text\x20target','itemCri','_growEasing','inBattle','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','HoWgb','Interrupt','jIPEF','addBattleCoreAutoBattleStyleCommand','getSkillIdWithName','isBorderStylePortraitShown','initBattlePortrait','_attackAnimationId','refreshCursor','cXafS','NameLegacy','_tempActor','HqaMw','startFloat','ActSeq_Camera_FocusPoint','result','repositionCancelButtonBorderStyle','jsScaleDown','StatusWindowAttachmentBackOffsetX','hasStaticSvBattler','canGuardBattleCore','FdduP','addShowHpGaugeCommand','jAroM','setupChild','Game_BattlerBase_initMembers','Angle','gnkRH','mpDamage','_skewEasing','xvqED','getBattlePortraitFilename','isTickBased','ActSeq_Camera_Offset','autoBattleAtStart','PluKC','qjgdy','format','boxHeight','prepareCustomActionSequence','guard','isAnyProjectilePresent','displayBattleCoreTransitionErrorMsg','wwEZD','guardSkillId','isSideButtonLayout','_allTargets','DefeatEvent','gainStoredBoostPoints','EhLuY','code','uiInputPosition','process_VisuMZ_BattleCore_CommonEventKeys','currentAction','WaitCount1','angleDuration','changeTurnOrderByCTB','isOkEnabled','createCommandNameWindow','vkPak','ActSeq_Motion_PerformAction','zoomDuration','NameOffsetX','Sprite_Actor_updateBitmap','LsDjc','addText','isNextSceneBattleTransitionable','isEscapeCommandEnabled','updateBattlebackBitmap1','displayChangedBuffs','commandEscape','ActSeq_Animation_ActionAnimation','_battleCoreForcedElements','CtUSA','actor%1-portrait','_targetHomeY','growBattler','enemyNames','push','KFrOq','actionEffect','FUNC','ActSeq_Animation_CastAnimation','tcRms','calcWindowHeight','ilgYJ','setSvBattlerSprite','isFrameVisible','_helpWindow','helpAreaBottom','_logWindow','softDamageCapRate','battleProjectiles','isBypassDamageCap','oWMNS','getHardDamageCap','scope','TcwaX','setBattlerFlip','weapons','APVIx','pages','clearBattlerMotionTrailData','WaitForJump','_forcedHomeX','sTFfG','battleSpriteSkew','isNextScene','getDualWieldTimes','processBorderActor','VlWcL','addMeleeReturnActionSet','rXuwK','StyleName','WaitForProjectile','uyvxg','UqlgF','autoBattleStyle','requestMotionRefresh','show','isSceneBattle','TP_Flat','_targetGrowX','autoSelectLastSelected','setGuard','GuardFormulaJS','Duration','startDamagePopup','stepBack','performJump','HP_Rate','isDeathStateAffected','itemWindowRect','findIndex','_inputting','Sprite_Battler_updateMain','battleCameraData','createCancelButton','okTargetSelectionVisibility','AGI','ActionAnimation','setupBattleCore','kFXnp','IkJdv','Sprite_Enemy_setBattler','GEKDL','tPHce','NTYAO','_spriteset','wMdCf','dataId','ActSeq_Set_WholeActionSet','PDSsO','Dojsi','DBiZe','STRUCT','Game_Battler_onBattleStart','hbnNG','textBaseline','isSideView','icon','updateBattlebackBitmap','setHue','swapEnemyIDs','fOxCN','BattleDefeatJS','FocusX','isMagical','addChild','makeTargetsBattleCore','isGuard','vGOPo','removeAnimation','attackAnimationId1','_homeX','_preemptive','isClicked','ActSeq_Mechanics_BoostPointsStoreData','createStateIconSprite','loadPicture','targetSpritePosition','SKILLS','CastAnimation','CriticalHitRate','weaponImageId','weaponTypes','DefaultSoftScaler','oRLhi','addAutoBattleCommand','vSuZt','ActSeq_Inject_WaitForInjectAni','shadow','PRE-','_borderPortraitTargetX','playReflection','BKouP','MotionSpeed','createAutoBattleWindow','selectNextCommandTpb','FocusY','createBattleUIOffsetY','Game_Actor_equips','destroyDamageSprite','casting','isQueueOptionsMenu','YoSkw','ACWCg','Scene_Party','Sprite_Battler_initMembers','VEitA','isAnyoneMoving','%1StartBattleJS','onRegeneratePlayStateAnimation','stbGainInstant','updateGrow','JyEpU','isActing','Scene_Battle_onActorOk','addBattleCoreAutoBattleStartupCommand','unshift','startTurn','revealNewWeaknesses','inHomePosition','friendsUnit','addActor','commandAutoBattle','Scene_Map_launchBattle','hpHealingFmt','swing','VisuMZ_2_DragonbonesUnion','pattern','SkewX','_namesCount','VTkZS','_multipliers','iPLNU','OrhFN','updateStateSpriteBattleCore','isBattleSys','isForRandomBattleCore','CommandVisible','nFEHS','lRhlB','Skill-%1-%2','svAnchorX','TpbGaugeOffsetY','waitForEffect','HZuNk','svBattlerAnchorX','Window_BattleLog_displayTpDamage','zTTwe','selectPreviousCommand','rowSpacing','Scene_Map_initializeAfter','StateIconOffsetY','ActSeq_Target_NextTarget','CmdStyle','softDamageCap','UHmsi','clearOnceParallelInterpreters','Dyhqc','WPphK','Parse_Notetags_Targets','anchorX','onDisabledPartyCommandSelection','ayPPd','BattleManager_checkSubstitute','BattleManager_isTpbMainPhase','srGue','Game_Action_setAttack','AJofR','toUseBoostPoints','CastMagical','displayType','AllowRandomSpeed','WaitForEffect','Game_Battler_onTurnEnd','children','dragonbonesData','ConvertCount','Parse_Notetags_TraitObjects','_immortal','Window_BattleLog_performRecovery','Weapon-%1-%2','BattleManager_initMembers','moveBattlerToPoint','canAttack','PostApplyAsUserJS','turn','addFightCommand','onBattleStart','Wjysx','isCommonEventReserved','BattleManager_inputtingAction','ActionEnd','performAction','battleMove','portrait','getColor','PreDamage%1JS','54387uTyQvt','left','Window_BattleLog_performCounter','EscapeFail','_index','mWmGp','note','VarianceFormulaJS','getCommonEventIdWithName','HOGmP','addTextToCombatLog','actorCommandSingleSkill','registerCommand','isPreviousScene','PreEndBattleJS','CriticalHitMultiplier','createEffectActionSet','mZxdJ','useDigitGrouping','WfooY','_colorType','izKmp','critical','forceMotion','chant','faceWidth','gainCurrentActionsFTB','BindCommonEventKeysForObj','isMVAnimation','ActionSequence','adjustPosition_1for1','\x20to\x20%1\x20midbattle.','select','logWindowRect','Utvya','_growX','iEFrj','startInjectAnimation','addedBuffs','vlbKt','Destination','random','pEWae','_floatWholeDuration','onEncounter','battleAnimation','setupDesaturateImpactFilter','THqSq','_eventId','sRzra','battleEffect','Scene_Battle_createCancelButton','border','processBattleCoreJS','createDigits','NwfVL','Scene_Battle_createAllWindows','isBattleCoreTargetScope','makeUniqueNames','HelpOptions','statusTextAutoBattleStyle','ActSeq_Target_CurrentIndex','_enemy','usePremadeActionSequence','RGlmP','performDamage','onEscapeFailure','ActSeq_Mechanics_StbRemoveExcessActions','updatePhase','forceWeaponAnimation','helpWindowRect','eVYNe','muvNH','_cacheTextWidth','onActorCancel','actorId','_handlers','battleGrow','initVisibility','setFullActionsPTB','_windowLayer','Game_Map_setupBattleback','Post','aUnMr','evaded','gainHp','stateMotionIndex','Frame','SwitchCritical','currentExt','bKlOO','cancelActorInput','_linkedSprite','ActSeq_Animation_WaitForAnimation','ActSeq_Impact_MotionTrailRemove','cPbwL','tvqBm','Defeat','ActSeq_Movement_WaitForScale','WaitForSkew','iconHeight','ShowCritical','map','_offsetX','JS\x20%1END\x20ACTION','filters','UiIfB','jisYV','Enemy','BoxMargin','CheckVisibleSkillNotetags','AS\x20TARGET','isCharging','isOpen','Slot','isOptionsCommandEnabled','StyleON','clearActiveWeaponSet','VrvHS','OffsetAdjust','skillItemWindowRectMiddle','wNUkT','svAnchorY','Game_Troop_setup','qGKXS','active','_commonEventQueue','startAction','DUoaE','OffsetY','isAlwaysHidden','_shadowScaleX','makeSuccess','VisuMZ_2_PartySystem','Game_Action_executeDamage','addState','ActSeq_Mechanics_PtbAlterCost','attackAnimationIdSlot','JS\x20BATTLE\x20VICTORY','_updateCursorArea','battlerShadowScaleY','ceil','PostEndTurnJS','PostStartTurnJS','process_VisuMZ_BattleCore_DamageStyles','cpdIN','_autoBattle','eOQoO','PopupDuration','isActionSelectionValid','Scene_Battle_onEnemyOk','QnrdA','_enemies','oNhHM','rQOYk','alive\x20enemies\x20not\x20target','iCKIa','isMagicSkill','startAttackWeaponAnimation','customDamageFormula','emerge','addLoadListener','process_VisuMZ_BattleCore_PluginParams','createDamageContainer','jdAtc','battleFloat','kKSop','_enemyWindow','setActionState','isFloating','troop','Scene_Battle_update','makeBattleCommand','waitCount','createTargetsJS','_damages','jPLuf','setCustomDamageFormula','ActSeq_Element_ForceElements','putActiveBattlerOnTop','Window_BattleLog_performActionEnd','addChildToUiContainer','isAnyoneJumping','sortEnemies','isFightCommandEnabled','EscapeSuccess','battleUIOffsetX','ayecU','displayStartMessages','expTotal','textWidth','_commonEventIDs','createDamageSprite','applyGlobal','XoVll','initMembersBattleCore','optDisplayTp','commandNameWindowCenter','CriticalDuration','SkillItemStandardCols','setHelpWindowItem','addOnceParallelInterpreter','pyWkY','criticalHitFlat','turnOrderChangeOTB','StateIconOffsetX','numRepeats','StartTurnMsg','_damagePopupArray','beHdu','HqgPx','_jumpDuration','_opacityWholeDuration','visible','BackColor','_itemWindow','ShowFacesListStyle','isSkipPartyCommandWindow','getDamageStyle','checkSceneBattleTransitionable','createAnimationSprite','checkSubstitute','FnksN','xIKSx','AnimationID','startGrow','Direction','_growDuration','PostEndActionJS','hasSvBattler','pop','_enemyNameContainer','ResetFocus','KfPRO','ActSeq_BattleLog_UI','Sprite_Animation_targetSpritePosition','updateSpin','VoZtl','process_VisuMZ_BattleCore_Notetags','createUIContainer','addSingleSkillCommands','BattleManager_onEncounter','isChanting','VisuMZ_1_ElementStatusCore','MANUAL','skewDuration','isSelected','TpGaugeOffsetX','addExtendedTroopMembers','attack','zrKBr','gradientFillRect','_cursorArea','_enemySprites','isTriggered','ActSeq_Impact_ShockwaveEachTargets','isCustomActionSequence','itemEffectAddNormalState','arPenRate','processRefresh','isGrowing','PopupOffsetX','_preBattleCommonEvent','getFullActionsPTB','setBattlePortrait','UmFfy','dFIBf','PFTuB','call','PerformAction','Scene_Battle_selectPreviousCommand','PreApplyAsTargetJS','apply','VisuMZ_2_BattleSystemSTB','BattleManager_startInput','ArGoB','ShowActorGauge','performSTBExploiter','needsSelection','jkvJI','ActSeq_Mechanics_PtbFullHalfAction','WaitForSpin','contentsOpacity','_jumpWholeDuration','fontSize','Spriteset_Battle_updateActors','JcCfi','Scene_Map_updateCallMenu','Sprite_Actor_createStateSprite','fUNHE','movement','setHandler','addDamageSprite','changeInputWindow','WaitForZoom','onJumpEnd','%1Apply%2JS','2563420OibYJZ','gaugeX','UmCzu','wqUKy','CoHNV','ActSeq_Target_RandTarget','removeState','XFNVC','_opacityDuration','fsqWD','spriteId','charged','igvbt','concat','createActionSequenceProjectile','setImmortal','PeGQb','PreStartTurnJS','FAsqz','hide','ShowPopup','CmdIconOptions','BattleEndEvent','AttachStateOffsetY','showAnimation','NtNBk','GroupDigits','LdQCu','_partyCommandWindow','MessageWait','randomTargets','ActSeq_BattleLog_Clear','LoEou','CalcEscapeRatioJS','ActSeq_Weapon_SetActiveWeapon','rITJI','Scene_Battle_skillWindowRect','ChNeo','finishActorInput','_requestRefresh','value1','vdLqG','displayCritical','isNonSubmenuCancel','endAnimation','performTpbActiveCheckSwitch','State-%1-%2','Game_Action_itemHit','Victory','makeHpDamageText','center','DistanceAdjust','JhCoX','RFIjb','zeVxE','onOpacityEnd','Formula','HaiMS','UAeFO','LastSelected','width','XpvgI','drawGauge','magicSkills','performMoveToPoint','DefaultHardCap','pointY','commandNameWindowDrawText','_baseTexture','lFliS','_deathStateApplied','_currentAngle','Damage','QNSZL','ActSeq_Mechanics_AddBuffDebuff','_floatEasing','_motionSpeed','Sprite_StateIcon_updateFrame','ActSeq_Mechanics_TextPopup','Game_Action_makeTargets','Scene_Battle_helpWindowRect','spinBattler','onBattleStartOnceParallels','EnableDamageCap','iXbov','createHpGaugeSprite','gNyBz','onDatabaseLoaded','ActSeq_Mechanics_ArmorPenetration','displayRemovedStates','%1StartTurnJS','onFloatEnd','Game_Action_numRepeats','xEHdz','waitForNewLine','QYBPt','attackStates','damageOffsetX','wMiQv','extraPositionX','_regionBattleback2','Window_BattleLog_performSubstitute','DzjAP','isShownOnBattlePortrait','Settings','BattleManager_processDefeat','undecided','pqbPE','battleCommandIcon','return\x200','ALL\x20SKILLS','fwsxr','addAutoBattleCommands','_dragonbonesSpriteContainer','processEscape','mjoiS','XPActorCommandLines','textAlign','refreshBattlerMotions','ShowEnemyGauge','Scene_Battle_updateBattleProcess','eraseState','AsTarget','_targetHomeX','OTabp','playOnceParallelInterpreter','CounterPlayback','commandFight','onAllActionsEnd','_angleEasing','MotionAni','BCDvo','LTnFA','Debuffs','RegExp','CmdIconFight','snapForBackground','position','_emptyBitmap','ShowCosts','_targetFloatHeight','addAttackCommand','sliceMin','targetObjects','makeData','isForOne','cancel','AlphaFilter','_reflectionTarget'];_0x1780=function(){return _0x524263;};return _0x1780();}Window_EnemyName['prototype']=Object[_0x4a3d8d(0x416)](Window_StatusBase[_0x4a3d8d(0x3c4)]),Window_EnemyName['prototype']['constructor']=Window_EnemyName,Window_EnemyName['prototype']['initialize']=function(_0x3e0c48){const _0x28b346=_0x4a3d8d;this[_0x28b346(0x6c4)]=_0x3e0c48,this[_0x28b346(0x2bf)]='';const _0x3d45ca=new Rectangle(0x0,0x0,Graphics['boxWidth'],this[_0x28b346(0xbee)]()*0x4);Window_StatusBase['prototype'][_0x28b346(0x82a)]['call'](this,_0x3d45ca),this[_0x28b346(0x5ff)](0x2),this[_0x28b346(0xafe)]=0x0;},Window_EnemyName['prototype'][_0x4a3d8d(0x793)]=function(){const _0x36c73d=_0x4a3d8d;this[_0x36c73d(0x70e)]=0x0;},Window_EnemyName['prototype'][_0x4a3d8d(0x382)]=function(){const _0x514445=_0x4a3d8d;return $gameTroop[_0x514445(0x30f)]()[this[_0x514445(0x6c4)]];},Window_EnemyName['prototype'][_0x4a3d8d(0x372)]=function(){const _0x19aa1d=_0x4a3d8d;Window_StatusBase['prototype'][_0x19aa1d(0x372)][_0x19aa1d(0xaf0)](this),this['enemy']()&&this[_0x19aa1d(0x382)]()[_0x19aa1d(0xbaa)]()!==this[_0x19aa1d(0x2bf)]&&(this[_0x19aa1d(0x2bf)]=this[_0x19aa1d(0x382)]()[_0x19aa1d(0xbaa)](),this['refresh']()),this[_0x19aa1d(0x209)](),this['updatePosition']();},Window_EnemyName[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x209)]=function(){const _0x737f19=_0x4a3d8d;if(!this[_0x737f19(0x382)]()){if('NbpJs'===_0x737f19(0x6a0)){if(this[_0x737f19(0xafe)]>0x0)this[_0x737f19(0xafe)]-=0x10;}else return _0x5a2676[_0x737f19(0x485)]['Settings'][_0x737f19(0x1e5)][_0x737f19(0xaba)];}else{if(this[_0x737f19(0x382)]()['isDead']()){if(_0x737f19(0x6d5)!==_0x737f19(0xa5a)){if(this[_0x737f19(0xafe)]>0x0)this['contentsOpacity']-=0x10;}else{if(!_0x545c55[_0x737f19(0x930)]())return;if(!_0x53a7c8[_0x737f19(0x613)])return;_0x1c0fe9[_0x737f19(0x6a8)](_0x264d7e,_0x10dd56);const _0x19f272=_0x31aa77[_0x737f19(0x202)](),_0x47a6f7=_0x97ef59[_0x737f19(0xb0a)];if(!_0x19f272)return;_0x3895b5[_0x737f19(0x715)](0x1,_0x397601[_0x737f19(0x936)],_0x133627[_0x737f19(0x443)]);if(_0x47a6f7)_0x19f272[_0x737f19(0x49b)](_0x737f19(0x6c2));}}else{if(SceneManager[_0x737f19(0x3ff)][_0x737f19(0xa8b)]&&SceneManager[_0x737f19(0x3ff)][_0x737f19(0xa8b)][_0x737f19(0xa61)]&&SceneManager[_0x737f19(0x3ff)][_0x737f19(0xa8b)][_0x737f19(0xa7c)][_0x737f19(0xbff)](this[_0x737f19(0x382)]())){if(this[_0x737f19(0xafe)]<0xff)this[_0x737f19(0xafe)]+=0x10;}else this[_0x737f19(0xafe)]>0x0&&(this[_0x737f19(0xafe)]-=0x10);}}},Window_EnemyName[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x421)]=function(){const _0x56ec82=_0x4a3d8d;if(!this['enemy']())return;SceneManager[_0x56ec82(0x4cc)]()?this['x']=Graphics[_0x56ec82(0x6c0)]-this['enemy']()[_0x56ec82(0x28e)]()[_0x56ec82(0x232)]:_0x56ec82(0x6de)===_0x56ec82(0x6de)?this['x']=this['enemy']()['battler']()[_0x56ec82(0x232)]:this[_0x56ec82(0x2f0)]-=0x10;this['x']-=Math['round'](this['width']/0x2),this['y']=this[_0x56ec82(0x382)]()['battler']()[_0x56ec82(0x5d8)]-Math[_0x56ec82(0x89f)](this[_0x56ec82(0xbee)]()*1.5);const _0xe35ce9=VisuMZ['BattleCore'][_0x56ec82(0xb75)][_0x56ec82(0xa50)];this['x']+=_0xe35ce9[_0x56ec82(0x8f6)]||0x0,this['y']+=_0xe35ce9['NameOffsetY']||0x0;},Window_EnemyName[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x875)]=function(){const _0x3c226a=_0x4a3d8d;Window_Base['prototype'][_0x3c226a(0x875)][_0x3c226a(0xaf0)](this),this['contents'][_0x3c226a(0xb00)]=VisuMZ['BattleCore'][_0x3c226a(0xb75)]['Enemy']['NameFontSize'];},Window_EnemyName['prototype'][_0x4a3d8d(0xbe4)]=function(){const _0x29f30b=_0x4a3d8d;Window_StatusBase[_0x29f30b(0x3c4)][_0x29f30b(0xbe4)][_0x29f30b(0xaf0)](this),this[_0x29f30b(0x368)][_0x29f30b(0x1db)]();if(!this[_0x29f30b(0x382)]())return;this['drawEnemyName']();},Window_EnemyName[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x366)]=function(){const _0x70ea60=_0x4a3d8d;this[_0x70ea60(0x2bf)]=this[_0x70ea60(0x382)]()[_0x70ea60(0xbaa)]();const _0x3a77b7=this[_0x70ea60(0x32d)](this[_0x70ea60(0x2bf)])[_0x70ea60(0xb49)],_0x130feb=Math[_0x70ea60(0x89f)]((this['innerWidth']-_0x3a77b7)/0x2);this[_0x70ea60(0x6fa)](this['_text'],_0x130feb,0x0,_0x3a77b7+0x8);},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x668)]=function(){const _0x3143fa=_0x4a3d8d;return VisuMZ[_0x3143fa(0x485)][_0x3143fa(0xb75)][_0x3143fa(0x1e5)][_0x3143fa(0x4d3)];},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x4fc)]=function(){const _0x1e0045=_0x4a3d8d;return VisuMZ[_0x1e0045(0x485)][_0x1e0045(0xb75)]['BattleLog'][_0x1e0045(0xb2a)];},Window_BattleLog[_0x4a3d8d(0x3c4)]['backColor']=function(){const _0x15ebea=_0x4a3d8d;return VisuMZ['BattleCore'][_0x15ebea(0xb75)]['BattleLog'][_0x15ebea(0xaba)];},Window_BattleLog['prototype'][_0x4a3d8d(0x46b)]=function(){return![];},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x908)]=function(_0x106347,_0x24b71b){this['unshift']('actionSplicePoint'),BattleManager['invokeAction'](_0x106347,_0x24b71b),this['callNextMethod']();},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x874)]=function(){const _0x4c509d=_0x4a3d8d;this[_0x4c509d(0x84f)]();},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x906)]=function(_0x35caaa){const _0xd101d5=_0x4a3d8d,_0x579e7f=Array['prototype'][_0xd101d5(0x5cf)][_0xd101d5(0xaf0)](arguments,0x1),_0x2251a7={'name':_0x35caaa,'params':_0x579e7f},_0x4bf42b=this[_0xd101d5(0x4dc)]['map'](_0x2ea6d7=>_0x2ea6d7[_0xd101d5(0xbaa)])[_0xd101d5(0x2b7)](_0xd101d5(0x874));if(_0x4bf42b>=0x0)this['_methods']['splice'](_0x4bf42b,0x0,_0x2251a7);else{if(_0xd101d5(0x257)!==_0xd101d5(0x257)){const _0x4eca98=_0x4b986e[_0xeaa787];if(_0x4eca98)_0x4a247c[_0xd101d5(0x906)](_0x402605[_0xd101d5(0x773)](_0x4eca98));}else this[_0xd101d5(0x4dc)][_0xd101d5(0x906)](_0x2251a7);}},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x993)]=function(_0x19db77){const _0x2209c2=_0x4a3d8d,_0x3b7ae3=Array[_0x2209c2(0x3c4)]['slice'][_0x2209c2(0xaf0)](arguments,0x1);this['_methods'][_0x2209c2(0x993)]({'name':_0x19db77,'params':_0x3b7ae3});},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xbc4)]=function(){const _0x17a07e=_0x4a3d8d;if(!$gameTemp[_0x17a07e(0x816)]())return;console[_0x17a07e(0x490)](this[_0x17a07e(0x4dc)][_0x17a07e(0xa4a)](_0x3f374a=>_0x3f374a[_0x17a07e(0xbaa)])[_0x17a07e(0x379)]('\x0a'));},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x436)]=Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xbe4)],Window_BattleLog['prototype'][_0x4a3d8d(0xbe4)]=function(){const _0x325ab7=_0x4a3d8d;this[_0x325ab7(0xb34)]=!![];},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x67d)]=Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x372)],Window_BattleLog[_0x4a3d8d(0x3c4)]['update']=function(){const _0x35102c=_0x4a3d8d;VisuMZ['BattleCore'][_0x35102c(0x67d)][_0x35102c(0xaf0)](this);if(this[_0x35102c(0xb34)])this[_0x35102c(0xae7)]();},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xae7)]=function(){const _0x2b1be9=_0x4a3d8d;this['_requestRefresh']=![],VisuMZ['BattleCore'][_0x2b1be9(0x436)]['call'](this);},Window_BattleLog['prototype']['drawLineText']=function(_0x3ffc32){const _0x44eaf7=_0x4a3d8d;let _0x236015=VisuMZ['BattleCore'][_0x44eaf7(0xb75)]['BattleLog']['TextAlign'][_0x44eaf7(0x3b6)]()['trim'](),_0x586986=this[_0x44eaf7(0x775)][_0x3ffc32];if(_0x586986[_0x44eaf7(0x591)](/<LEFT>/i))_0x44eaf7(0x252)===_0x44eaf7(0x928)?(_0x14128f=_0x1c7919[_0x44eaf7(0x6c0)]/0x2,_0x204118=_0x5eb789[_0x44eaf7(0x8de)]/0x2):_0x236015=_0x44eaf7(0x9e5);else{if(_0x586986[_0x44eaf7(0x591)](/<CENTER>/i))_0x236015=_0x44eaf7(0xb3f);else _0x586986[_0x44eaf7(0x591)](/<RIGHT>/i)&&(_0x236015=_0x44eaf7(0x785));}_0x586986=_0x586986[_0x44eaf7(0x809)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x586986=_0x586986[_0x44eaf7(0x809)](/\\I\[0\]/gi,'');const _0x5395e9=this['lineRect'](_0x3ffc32);this[_0x44eaf7(0x368)]['clearRect'](_0x5395e9['x'],_0x5395e9['y'],_0x5395e9[_0x44eaf7(0xb49)],_0x5395e9[_0x44eaf7(0x2cc)]);const _0x4ffe33=this[_0x44eaf7(0x32d)](_0x586986)[_0x44eaf7(0xb49)];let _0x3c0b86=_0x5395e9['x'];if(_0x236015===_0x44eaf7(0xb3f))_0x3c0b86+=(_0x5395e9['width']-_0x4ffe33)/0x2;else _0x236015===_0x44eaf7(0x785)&&(_0x3c0b86+=_0x5395e9[_0x44eaf7(0xb49)]-_0x4ffe33);this[_0x44eaf7(0x6fa)](_0x586986,_0x3c0b86,_0x5395e9['y'],_0x4ffe33+0x8);},Window_BattleLog['prototype']['addText']=function(_0x3b797e){const _0x5ddf38=_0x4a3d8d;this[_0x5ddf38(0x775)][_0x5ddf38(0x906)](_0x3b797e),this[_0x5ddf38(0xbe4)](),this['callNextMethod']();},Window_BattleLog['prototype'][_0x4a3d8d(0x4a0)]=function(){const _0xda7e50=_0x4a3d8d;let _0x594201=![];switch(this[_0xda7e50(0x402)]){case _0xda7e50(0xbf0):_0x594201=this[_0xda7e50(0x94c)][_0xda7e50(0x6db)]();break;case _0xda7e50(0xb06):_0x594201=this[_0xda7e50(0x94c)][_0xda7e50(0x98a)]();break;case'animation':_0x594201=this['_spriteset'][_0xda7e50(0x64b)]();break;case _0xda7e50(0x5fe):_0x594201=this['_spriteset'][_0xda7e50(0x165)]();break;case _0xda7e50(0x2a6):_0x594201=this[_0xda7e50(0x94c)]['isAnyoneJumping']();break;case'opacity':_0x594201=this['_spriteset']['isAnyoneChangingOpacity']();break;}if(!_0x594201){if(_0xda7e50(0x8d3)!==_0xda7e50(0x3e8))this[_0xda7e50(0x402)]='';else return _0x5e550c[_0xda7e50(0x91b)]()[_0xda7e50(0x482)]||0x1;}return _0x594201;},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x82f)]=function(){const _0x5123c4=_0x4a3d8d;this[_0x5123c4(0x49b)](_0x5123c4(0x50b));},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x60a)]=function(){const _0x3d8803=_0x4a3d8d;this[_0x3d8803(0x49b)](_0x3d8803(0x5fe));},Window_BattleLog['prototype'][_0x4a3d8d(0x1e9)]=function(){this['setWaitMode']('jump');},Window_BattleLog[_0x4a3d8d(0x3c4)]['waitForOpacity']=function(){const _0xeb6578=_0x4a3d8d;this[_0xeb6578(0x49b)]('opacity');},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x994)]=function(){const _0x1af5f2=_0x4a3d8d,_0x502dc8=VisuMZ[_0x1af5f2(0x485)][_0x1af5f2(0xb75)][_0x1af5f2(0x1e5)];if(!_0x502dc8[_0x1af5f2(0x7d1)])return;this[_0x1af5f2(0x906)](_0x1af5f2(0x8f9),_0x502dc8[_0x1af5f2(0xab3)][_0x1af5f2(0x8dd)]($gameTroop['turnCount']())),this[_0x1af5f2(0x906)](_0x1af5f2(0xa91),_0x502dc8[_0x1af5f2(0x5b8)]),this[_0x1af5f2(0x906)](_0x1af5f2(0x1db));},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xa63)]=function(_0x24bfc9,_0x17db8f,_0x115e1d){const _0x39f627=_0x4a3d8d;this[_0x39f627(0xae4)](_0x17db8f)?BattleManager[_0x39f627(0x8df)]():'Swjwo'===_0x39f627(0x143)?this[_0x39f627(0xa23)](_0x24bfc9,_0x17db8f,_0x115e1d):(_0x5085f7['skew']['x']=(_0x4f6c87[_0x39f627(0x154)]['x']*(_0x3a7b8d-0x1)+this[_0x39f627(0x6b9)])/_0x1a1af6,_0x594db0[_0x39f627(0x154)]['y']=(_0x5a21d5[_0x39f627(0x154)]['y']*(_0x1acd1c-0x1)+this[_0x39f627(0x444)])/_0x57f31c);},Window_BattleLog[_0x4a3d8d(0x3c4)]['isCustomActionSequence']=function(_0x5e3940){const _0x47af5d=_0x4a3d8d;if(!SceneManager[_0x47af5d(0x930)]())return![];if(!_0x5e3940)return![];if(!_0x5e3940[_0x47af5d(0x49d)]())return![];if(_0x5e3940['item']()[_0x47af5d(0x9ea)][_0x47af5d(0x591)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager['checkAutoCustomActionSequenceNotetagEffect'](_0x5e3940[_0x47af5d(0x49d)]()))return!![];return![];},Window_BattleLog['prototype']['usePremadeActionSequence']=function(_0x148fa7,_0x183ef6,_0x1a2fd1){const _0x1fdb33=_0x4a3d8d,_0xde666=_0x183ef6[_0x1fdb33(0x49d)]();this['setupActionSet'](_0x148fa7,_0x183ef6,_0x1a2fd1),this[_0x1fdb33(0x9f4)](_0x148fa7,_0x183ef6,_0x1a2fd1),this[_0x1fdb33(0x3c1)](_0x148fa7,_0x183ef6,_0x1a2fd1);},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x524)]=function(_0x51be9c,_0x2f5ef9){const _0x5a3991=_0x4a3d8d,_0x485b25=VisuMZ[_0x5a3991(0x485)][_0x5a3991(0xb75)][_0x5a3991(0x1e5)];_0x485b25[_0x5a3991(0x618)]&&this[_0x5a3991(0x906)](_0x5a3991(0x8f9),_0x5a3991(0x7ee)[_0x5a3991(0x8dd)](DataManager[_0x5a3991(0x4d5)](_0x2f5ef9)));if(DataManager[_0x5a3991(0x677)](_0x2f5ef9)){if(_0x485b25['ActionSkillMsg1'])this['displayItemMessage'](_0x2f5ef9['message1'],_0x51be9c,_0x2f5ef9);if(_0x485b25[_0x5a3991(0x3ac)])this[_0x5a3991(0x68c)](_0x2f5ef9['message2'],_0x51be9c,_0x2f5ef9);}else{if(_0x485b25[_0x5a3991(0x211)])this[_0x5a3991(0x68c)](TextManager[_0x5a3991(0x85b)],_0x51be9c,_0x2f5ef9);}},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x786)]=function(_0x73e3a7,_0x304d08,_0x38ddeb){const _0x23b58b=_0x4a3d8d,_0xa86a03=_0x304d08[_0x23b58b(0x49d)]();this[_0x23b58b(0x524)](_0x73e3a7,_0xa86a03),this[_0x23b58b(0x906)](_0x23b58b(0x5d1),_0x73e3a7,_0x38ddeb,!![]),this['push']('performActionStart',_0x73e3a7,_0x304d08),this[_0x23b58b(0x906)](_0x23b58b(0x780)),this['push'](_0x23b58b(0x258),_0x73e3a7,_0x304d08),this[_0x23b58b(0x906)](_0x23b58b(0x82f));},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x9f4)]=function(_0xc92856,_0x3e595e,_0xe459de){const _0x148969=_0x4a3d8d;if(this[_0x148969(0x2b3)](_0x3e595e))this[_0x148969(0x408)](_0xc92856,_0x3e595e,_0xe459de);else{if(this[_0x148969(0x600)](_0x3e595e)){if(_0x148969(0x8b8)==='UGynS'){if(this[_0x148969(0x915)]())return _0x5b3914;return _0x198c70=this['applySoftDamageCap'](_0x49c468),_0x166e83=this[_0x148969(0x82b)](_0x183edc),_0x46bf49;}else this[_0x148969(0x7d6)](_0xc92856,_0x3e595e,_0xe459de);}else _0x3e595e[_0x148969(0x653)]()?this['targetActionSet'](_0xc92856,_0x3e595e,_0xe459de):this[_0x148969(0x32e)](_0xc92856,_0x3e595e,_0xe459de);}},Window_BattleLog['prototype'][_0x4a3d8d(0x927)]=function(_0x1c5f19,_0xf9a861,_0x430c5f,_0x571c5c){const _0x11f22f=_0x4a3d8d;if(_0xf9a861){const _0x18d91e=_0x1c5f19[_0x11f22f(0x28e)]();this[_0x11f22f(0x906)]('performJump',[_0x1c5f19],_0x430c5f,_0x571c5c),this[_0x11f22f(0x906)](_0x11f22f(0xb4d),_0x1c5f19,_0x18d91e['_homeX'],_0x18d91e[_0x11f22f(0x649)],_0x571c5c,![],_0x11f22f(0x88e)),this[_0x11f22f(0x906)]('requestMotion',[_0x1c5f19],'evade'),this[_0x11f22f(0x906)]('waitForMovement'),this['push'](_0x11f22f(0x834),[_0x1c5f19],'walk');}},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x2b3)]=function(_0x433073){const _0x5c9f69=_0x4a3d8d;if(!_0x433073[_0x5c9f69(0x732)]())return![];if(!_0x433073[_0x5c9f69(0xb9e)]())return![];if(!_0x433073[_0x5c9f69(0x7b4)]())return![];return VisuMZ[_0x5c9f69(0x485)][_0x5c9f69(0xb75)]['ActionSequence'][_0x5c9f69(0x427)];},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x408)]=function(_0x385136,_0x3f496c,_0x263092){const _0x30fc25=_0x4a3d8d,_0x4c7376=_0x385136[_0x30fc25(0x88a)]()[_0x30fc25(0x7d7)]<0x2,_0x41fe6d=0x14,_0x5efd4f=0x30;if(_0x4c7376){if('vCHsV'!==_0x30fc25(0x763))this[_0x30fc25(0x906)]('performJump',[_0x385136],_0x5efd4f,_0x41fe6d),this[_0x30fc25(0x906)](_0x30fc25(0x291),_0x385136,_0x263092,_0x30fc25(0x29e),_0x41fe6d,!![],_0x30fc25(0x88e),!![]),this[_0x30fc25(0x906)](_0x30fc25(0x834),[_0x385136],_0x30fc25(0x460)),this[_0x30fc25(0x906)](_0x30fc25(0x780));else{if(!this[_0x30fc25(0xc2f)])return;this[_0x30fc25(0xc2f)]['y']=this['_baseY']-this['y']-0x2;}}let _0x59c119=_0x3f496c[_0x30fc25(0x560)]()?this['getDualWieldTimes'](_0x385136):0x1;for(let _0x189509=0x0;_0x189509<_0x59c119;_0x189509++){if(_0x30fc25(0xad1)===_0x30fc25(0xad1)){_0x3f496c[_0x30fc25(0x560)]()&&_0x385136[_0x30fc25(0x764)]()&&this[_0x30fc25(0x906)](_0x30fc25(0x7da),_0x385136,_0x189509);if(_0x3f496c['item']()['animationId']<0x0){if(_0x30fc25(0xb61)!==_0x30fc25(0x69c))this[_0x30fc25(0x28c)](_0x385136,_0x3f496c,_0x263092);else return this[_0x30fc25(0x601)]()[_0x30fc25(0x637)]();}else this[_0x30fc25(0x32e)](_0x385136,_0x3f496c,_0x263092);}else{let _0x67a999=_0x1017d2['x'],_0x232ec8=_0x1367a1['y'],_0x2149d0=_0x4dd2e0['height'],_0x3aa1a1=_0xaa6520[_0x30fc25(0x6f2)][_0x30fc25(0x3cb)]['y'];_0x56e37a['x']=_0x10f367['_baseX']+_0x4c54c1[_0x30fc25(0xb70)](),_0x221ae7['y']=_0x2e94ef[_0x30fc25(0x5d8)]+_0x44288d['extraPositionY'](),_0x1da25d[_0x30fc25(0x2cc)]*=_0x3aa1a1;let _0x14ad33=_0x18deb9[_0x30fc25(0x485)][_0x30fc25(0xacf)][_0x30fc25(0xaf0)](this,_0x1ed694);return _0x202d21['x']=_0x67a999,_0x38e538['y']=_0x232ec8,_0x2d340d[_0x30fc25(0x2cc)]=_0x2149d0,_0x14ad33;}}_0x3f496c[_0x30fc25(0x560)]()&&_0x385136[_0x30fc25(0x764)]()&&this[_0x30fc25(0x906)](_0x30fc25(0xa59),_0x385136),this[_0x30fc25(0x906)](_0x30fc25(0x5d1),_0x385136,_0x263092,![]),this['addMeleeReturnActionSet'](_0x385136,_0x4c7376,_0x5efd4f,_0x41fe6d);},Window_BattleLog[_0x4a3d8d(0x3c4)]['isMeleeMultiTargetAction']=function(_0xdb7bd3){const _0x25f010=_0x4a3d8d;if(!_0xdb7bd3[_0x25f010(0x732)]())return![];if(!_0xdb7bd3[_0x25f010(0x619)]())return![];if(!_0xdb7bd3[_0x25f010(0x7b4)]())return![];return VisuMZ[_0x25f010(0x485)][_0x25f010(0xb75)][_0x25f010(0xa01)]['AutoMeleeAoE'];},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x7d6)]=function(_0x3f3d2f,_0x2be02e,_0x2ba4b8){const _0x364cb1=_0x4a3d8d,_0x419dc4=_0x3f3d2f['getAttackMotion']()[_0x364cb1(0x7d7)]<0x2,_0x1ec3e2=0x14,_0x46c0a6=0x30;_0x419dc4&&(this[_0x364cb1(0x906)](_0x364cb1(0x939),[_0x3f3d2f],_0x46c0a6,_0x1ec3e2),this[_0x364cb1(0x906)]('performMoveToTargets',_0x3f3d2f,_0x2ba4b8,'front\x20center',_0x1ec3e2,!![],_0x364cb1(0x88e),!![]),this[_0x364cb1(0x906)](_0x364cb1(0x834),[_0x3f3d2f],_0x364cb1(0x460)),this[_0x364cb1(0x906)](_0x364cb1(0x780)));let _0x3d1474=_0x2be02e[_0x364cb1(0x560)]()?this[_0x364cb1(0x924)](_0x3f3d2f):0x1;for(let _0x27edd8=0x0;_0x27edd8<_0x3d1474;_0x27edd8++){_0x2be02e[_0x364cb1(0x560)]()&&_0x3f3d2f['isActor']()&&this['push']('setActiveWeaponSet',_0x3f3d2f,_0x27edd8),this[_0x364cb1(0x32e)](_0x3f3d2f,_0x2be02e,_0x2ba4b8);}_0x2be02e[_0x364cb1(0x560)]()&&_0x3f3d2f[_0x364cb1(0x764)]()&&this[_0x364cb1(0x906)](_0x364cb1(0xa59),_0x3f3d2f),this['push'](_0x364cb1(0x5d1),_0x3f3d2f,_0x2ba4b8,![]),this[_0x364cb1(0x927)](_0x3f3d2f,_0x419dc4,_0x46c0a6,_0x1ec3e2);},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x28c)]=function(_0x4456a0,_0x1791a1,_0x2c5750){const _0x3ef409=_0x4a3d8d,_0x59531e=_0x1791a1[_0x3ef409(0x49d)]();for(const _0x2b50e6 of _0x2c5750){if(!_0x2b50e6)continue;this[_0x3ef409(0x906)](_0x3ef409(0x9df),_0x4456a0,_0x1791a1),this[_0x3ef409(0x906)](_0x3ef409(0xa91),Sprite_Battler['_motionSpeed']),this['push'](_0x3ef409(0xb25),_0x4456a0,[_0x2b50e6],_0x59531e[_0x3ef409(0x44e)]),this['push']('waitCount',0x18),this[_0x3ef409(0x906)]('actionEffect',_0x4456a0,_0x2b50e6);}},Window_BattleLog['prototype'][_0x4a3d8d(0x32e)]=function(_0x12d3d9,_0xe8d020,_0x1c7036){const _0x838f6a=_0x4a3d8d,_0x35b12d=_0xe8d020[_0x838f6a(0x49d)]();this[_0x838f6a(0x906)](_0x838f6a(0x9df),_0x12d3d9,_0xe8d020),this[_0x838f6a(0x906)]('waitCount',Sprite_Battler[_0x838f6a(0xb59)]),this[_0x838f6a(0x906)](_0x838f6a(0xb25),_0x12d3d9,_0x1c7036['clone'](),_0x35b12d[_0x838f6a(0x44e)]),this[_0x838f6a(0x906)](_0x838f6a(0x82f));for(const _0x2f8b18 of _0x1c7036){if(!_0x2f8b18)continue;this[_0x838f6a(0x906)]('actionEffect',_0x12d3d9,_0x2f8b18);}},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x3c1)]=function(_0x2bfdfb,_0x1f67bf,_0x58b9ce){const _0x39fe4f=_0x4a3d8d,_0x40433c=_0x1f67bf[_0x39fe4f(0x49d)]();this[_0x39fe4f(0x906)]('applyImmortal',_0x2bfdfb,_0x58b9ce,![]),this['push'](_0x39fe4f(0xb6b)),this[_0x39fe4f(0x906)](_0x39fe4f(0x9ae)),this[_0x39fe4f(0x906)](_0x39fe4f(0x1db)),this[_0x39fe4f(0x906)](_0x39fe4f(0x1a8),_0x2bfdfb),this[_0x39fe4f(0x906)]('waitForMovement');},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x2ba)]=function(_0x2eec83){},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x766)]=Window_BattleLog['prototype'][_0x4a3d8d(0x4bd)],Window_BattleLog['prototype']['displayCurrentState']=function(_0x105ce8){const _0x462ce8=_0x4a3d8d;if(!VisuMZ['BattleCore'][_0x462ce8(0xb75)]['BattleLog']['ShowCurrentState'])return;VisuMZ[_0x462ce8(0x485)][_0x462ce8(0x766)][_0x462ce8(0xaf0)](this,_0x105ce8);},Window_BattleLog[_0x4a3d8d(0x3c4)]['displayCounter']=function(_0x569e2a){const _0x5ef892=_0x4a3d8d;this[_0x5ef892(0x906)](_0x5ef892(0x494),_0x569e2a);VisuMZ[_0x5ef892(0x485)]['Settings'][_0x5ef892(0xa01)][_0x5ef892(0xb8b)]&&this[_0x5ef892(0x906)](_0x5ef892(0xb25),_0x569e2a,[BattleManager[_0x5ef892(0x18b)]],-0x1);if(!VisuMZ['BattleCore'][_0x5ef892(0xb75)]['BattleLog']['ShowCounter'])return;this['push']('addText',TextManager[_0x5ef892(0x8ae)][_0x5ef892(0x8dd)](_0x569e2a[_0x5ef892(0xbaa)]()));},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x181)]=function(_0x515970){const _0x40944c=_0x4a3d8d;this['push'](_0x40944c(0x6e9),_0x515970);if(!VisuMZ[_0x40944c(0x485)][_0x40944c(0xb75)]['BattleLog'][_0x40944c(0x27b)])return;this[_0x40944c(0x906)](_0x40944c(0x8f9),TextManager[_0x40944c(0x466)]['format'](_0x515970[_0x40944c(0xbaa)]()));},Window_BattleLog['prototype'][_0x4a3d8d(0x1d5)]=function(_0x85eafa,_0x14b2c5){const _0x510b48=_0x4a3d8d;if(VisuMZ['BattleCore'][_0x510b48(0xb75)]['ActionSequence'][_0x510b48(0x68d)]){if(_0x510b48(0x77d)==='hIuWa'){const _0x1a3444=_0x14b2c5[_0x510b48(0x49d)]();this[_0x510b48(0x906)]('showAnimation',_0x85eafa,[_0x85eafa],_0x1a3444[_0x510b48(0x44e)]);}else return _0x344d55[_0x510b48(0x8eb)];}},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x5f6)]=function(_0xe29a18,_0x37ac3f){const _0x148ded=_0x4a3d8d;this[_0x148ded(0x906)](_0x148ded(0x7c7),_0xe29a18,_0x37ac3f);if(!VisuMZ[_0x148ded(0x485)]['Settings'][_0x148ded(0x1e5)][_0x148ded(0x46c)])return;const _0x389e81=_0xe29a18[_0x148ded(0xbaa)](),_0x4f9091=TextManager[_0x148ded(0x267)][_0x148ded(0x8dd)](_0x389e81,_0x37ac3f[_0x148ded(0xbaa)]());this[_0x148ded(0x906)](_0x148ded(0x8f9),_0x4f9091);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x1bc)]=Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x20c)],Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x20c)]=function(_0x12ceaa,_0x340388){const _0x123b50=_0x4a3d8d;VisuMZ[_0x123b50(0x485)][_0x123b50(0x1bc)][_0x123b50(0xaf0)](this,_0x12ceaa,_0x340388);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x666)]=Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x19c)],Window_BattleLog['prototype'][_0x4a3d8d(0x19c)]=function(_0x4d2c55){const _0x5ef5a4=_0x4a3d8d;if(!VisuMZ[_0x5ef5a4(0x485)][_0x5ef5a4(0xb75)][_0x5ef5a4(0x1e5)][_0x5ef5a4(0x557)])return;VisuMZ[_0x5ef5a4(0x485)][_0x5ef5a4(0x666)][_0x5ef5a4(0xaf0)](this,_0x4d2c55);},VisuMZ[_0x4a3d8d(0x485)]['Window_BattleLog_displayCritical']=Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xb37)],Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xb37)]=function(_0x31591e){const _0x530a1e=_0x4a3d8d;if(!VisuMZ[_0x530a1e(0x485)]['Settings']['BattleLog'][_0x530a1e(0xa49)])return;VisuMZ[_0x530a1e(0x485)][_0x530a1e(0x439)][_0x530a1e(0xaf0)](this,_0x31591e);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x1e3)]=Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x791)],Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x791)]=function(_0x19bf9f){const _0xdb430b=_0x4a3d8d;!VisuMZ[_0xdb430b(0x485)][_0xdb430b(0xb75)]['BattleLog'][_0xdb430b(0x25b)]?this[_0xdb430b(0x906)]('performMiss',_0x19bf9f):VisuMZ[_0xdb430b(0x485)][_0xdb430b(0x1e3)]['call'](this,_0x19bf9f);},VisuMZ['BattleCore'][_0x4a3d8d(0x2d7)]=Window_BattleLog[_0x4a3d8d(0x3c4)]['displayEvasion'],Window_BattleLog['prototype'][_0x4a3d8d(0x6d2)]=function(_0x531e1a){const _0x3a6025=_0x4a3d8d;!VisuMZ[_0x3a6025(0x485)][_0x3a6025(0xb75)]['BattleLog'][_0x3a6025(0x25b)]?_0x531e1a[_0x3a6025(0x8c7)]()['physical']?_0x3a6025(0xc3c)!=='XZLNw'?this[_0x3a6025(0x906)](_0x3a6025(0x579),_0x531e1a):_0x123b93[_0x3a6025(0x42a)](_0x1fa141):this[_0x3a6025(0x906)](_0x3a6025(0x707),_0x531e1a):_0x3a6025(0x4cb)!==_0x3a6025(0x4cb)?_0x22b21b[_0x3a6025(0x721)]():VisuMZ['BattleCore'][_0x3a6025(0x2d7)]['call'](this,_0x531e1a);},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x3fe)]=function(_0x8f528f){const _0x3486a2=_0x4a3d8d;if(_0x8f528f[_0x3486a2(0x8c7)]()['hpAffected']){if('fRpgC'===_0x3486a2(0x62c)){_0x8f528f[_0x3486a2(0x8c7)]()[_0x3486a2(0x3bc)]>0x0&&!_0x8f528f['result']()[_0x3486a2(0x29a)]&&this[_0x3486a2(0x906)](_0x3486a2(0xa25),_0x8f528f);if(_0x8f528f[_0x3486a2(0x8c7)]()[_0x3486a2(0x3bc)]<0x0){if(_0x3486a2(0x29d)===_0x3486a2(0x29d))this[_0x3486a2(0x906)](_0x3486a2(0x2be),_0x8f528f);else return this['svBattlerData']()[_0x3486a2(0x261)];}VisuMZ[_0x3486a2(0x485)][_0x3486a2(0xb75)]['BattleLog']['ShowHpDmg']&&this[_0x3486a2(0x906)](_0x3486a2(0x8f9),this[_0x3486a2(0xb3e)](_0x8f528f));}else return _0x4a7ec3[_0x3486a2(0x411)]()['slice'](0x0);}},VisuMZ['BattleCore'][_0x4a3d8d(0x47b)]=Window_BattleLog[_0x4a3d8d(0x3c4)]['displayMpDamage'],Window_BattleLog['prototype']['displayMpDamage']=function(_0xb1cc4d){const _0x99e155=_0x4a3d8d;if(!VisuMZ[_0x99e155(0x485)][_0x99e155(0xb75)][_0x99e155(0x1e5)][_0x99e155(0x248)])return;VisuMZ[_0x99e155(0x485)][_0x99e155(0x47b)][_0x99e155(0xaf0)](this,_0xb1cc4d);},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x9b1)]=Window_BattleLog['prototype'][_0x4a3d8d(0x658)],Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x658)]=function(_0x516050){const _0x50b50b=_0x4a3d8d;if(!VisuMZ[_0x50b50b(0x485)][_0x50b50b(0xb75)][_0x50b50b(0x1e5)][_0x50b50b(0x884)])return;VisuMZ[_0x50b50b(0x485)][_0x50b50b(0x9b1)]['call'](this,_0x516050);},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x50a)]=function(_0x52c6f0){const _0x3541e6=_0x4a3d8d;_0x52c6f0[_0x3541e6(0x8c7)]()[_0x3541e6(0x1aa)]()&&(this['push'](_0x3541e6(0xbfc)),this[_0x3541e6(0x332)](_0x52c6f0),this[_0x3541e6(0x8fd)](_0x52c6f0),this[_0x3541e6(0x906)](_0x3541e6(0xb6b)));},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xc06)]=function(_0x214147){const _0x43fa93=_0x4a3d8d,_0x310378=_0x214147[_0x43fa93(0x8c7)](),_0x3d4fae=_0x310378['addedStateObjects']();for(const _0x115706 of _0x3d4fae){if(_0x43fa93(0x38b)!==_0x43fa93(0x324)){const _0x5cba07=_0x214147[_0x43fa93(0x764)]()?_0x115706[_0x43fa93(0x530)]:_0x115706[_0x43fa93(0x781)];_0x5cba07&&VisuMZ[_0x43fa93(0x485)]['Settings'][_0x43fa93(0x1e5)][_0x43fa93(0x822)]&&(_0x43fa93(0xbbb)!==_0x43fa93(0x642)?(this[_0x43fa93(0x906)](_0x43fa93(0x505)),this[_0x43fa93(0x906)](_0x43fa93(0x363)),this[_0x43fa93(0x906)](_0x43fa93(0xbfc)),this[_0x43fa93(0x906)](_0x43fa93(0x8f9),_0x5cba07['format'](_0x214147[_0x43fa93(0xbaa)]())),this[_0x43fa93(0x906)]('wait')):(this['_forcedHomeX']=_0x273987,this['_forcedHomeY']=_0x4e35dc));if(_0x115706['id']===_0x214147[_0x43fa93(0x844)]()){if(_0x43fa93(0x587)===_0x43fa93(0x587))this[_0x43fa93(0x906)](_0x43fa93(0x2c2),_0x214147);else{const _0x1d8021=_0x376886[_0x43fa93(0x485)]['Settings'][_0x43fa93(0xb55)],_0x3a5f09=new _0x2058cb();_0x3a5f09[_0x43fa93(0x2e3)]=_0x1d8021[_0x43fa93(0xa78)],this['sortDamageSprites'](_0x3a5f09),_0x3a5f09[_0x43fa93(0x4da)](this[_0x43fa93(0x349)]),_0x3a5f09[_0x43fa93(0x945)](this[_0x43fa93(0x349)]),this[_0x43fa93(0xb08)](_0x3a5f09);}}}else _0x460441[_0x43fa93(0x977)]=!![];}},Window_BattleLog['prototype'][_0x4a3d8d(0x505)]=function(){},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xb66)]=function(_0x4f4bb3){const _0x2d6786=_0x4a3d8d;if(!VisuMZ[_0x2d6786(0x485)][_0x2d6786(0xb75)][_0x2d6786(0x1e5)]['ShowRemovedState'])return;const _0x24e9c7=_0x4f4bb3['result'](),_0x586781=_0x24e9c7[_0x2d6786(0x597)]();for(const _0x30ece6 of _0x586781){_0x30ece6[_0x2d6786(0x45c)]&&(_0x2d6786(0x222)!==_0x2d6786(0x5e4)?(this['push'](_0x2d6786(0x15c)),this[_0x2d6786(0x906)](_0x2d6786(0x363)),this[_0x2d6786(0x906)](_0x2d6786(0xbfc)),this[_0x2d6786(0x906)](_0x2d6786(0x8f9),_0x30ece6[_0x2d6786(0x45c)][_0x2d6786(0x8dd)](_0x4f4bb3[_0x2d6786(0xbaa)]())),this[_0x2d6786(0x906)]('wait')):(this[_0x2d6786(0x224)]=!![],_0x549c13[_0x2d6786(0xbec)](_0x42879b[_0x2d6786(0xbda)]),_0x57d5b8[_0x2d6786(0x831)](),_0xa805de[_0x2d6786(0x5c7)][_0x2d6786(0xaea)]=!![]));}},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x15c)]=function(){},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x8fd)]=function(_0x14a533){const _0x364de8=_0x4a3d8d,_0x2c13e0=VisuMZ['BattleCore'][_0x364de8(0xb75)][_0x364de8(0x1e5)],_0xcad657=_0x14a533[_0x364de8(0x8c7)]();if(_0x2c13e0[_0x364de8(0x87d)])this[_0x364de8(0x737)](_0x14a533,_0xcad657[_0x364de8(0xa0a)],TextManager['buffAdd']);if(_0x2c13e0[_0x364de8(0x7ae)])this[_0x364de8(0x737)](_0x14a533,_0xcad657['addedDebuffs'],TextManager['debuffAdd']);if(_0x2c13e0[_0x364de8(0x73d)])this[_0x364de8(0x737)](_0x14a533,_0xcad657[_0x364de8(0x604)],TextManager[_0x364de8(0x3c3)]);},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x737)]=function(_0x297711,_0x1e5ec7,_0x17d28b){const _0x324f3b=_0x4a3d8d;for(const _0x4c1a86 of _0x1e5ec7){const _0x5f242f=_0x17d28b[_0x324f3b(0x8dd)](_0x297711[_0x324f3b(0xbaa)](),TextManager[_0x324f3b(0x611)](_0x4c1a86));this[_0x324f3b(0x906)](_0x324f3b(0x363)),this[_0x324f3b(0x906)]('pushBaseLine'),this['push'](_0x324f3b(0x8f9),_0x5f242f),this[_0x324f3b(0x906)](_0x324f3b(0x6c3));}},VisuMZ['BattleCore'][_0x4a3d8d(0x249)]=Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x1db)],Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x1db)]=function(){const _0x162cd8=_0x4a3d8d;VisuMZ['BattleCore'][_0x162cd8(0x249)][_0x162cd8(0xaf0)](this),this[_0x162cd8(0x84f)]();},VisuMZ[_0x4a3d8d(0x485)]['Window_BattleLog_pushBaseLine']=Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xbfc)],Window_BattleLog['prototype'][_0x4a3d8d(0xbfc)]=function(){const _0x1be9d9=_0x4a3d8d;VisuMZ['BattleCore'][_0x1be9d9(0x1ca)]['call'](this),this[_0x1be9d9(0x84f)]();},VisuMZ[_0x4a3d8d(0x485)]['Window_BattleLog_popBaseLine']=Window_BattleLog['prototype'][_0x4a3d8d(0x363)],Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x363)]=function(){const _0x355dfe=_0x4a3d8d;VisuMZ[_0x355dfe(0x485)][_0x355dfe(0x2ca)]['call'](this),this[_0x355dfe(0xae7)](),this[_0x355dfe(0x84f)]();},VisuMZ['BattleCore'][_0x4a3d8d(0x3b3)]=Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x45a)],Window_BattleLog[_0x4a3d8d(0x3c4)]['popupDamage']=function(_0x2cfcb8){const _0x28c65a=_0x4a3d8d;VisuMZ[_0x28c65a(0x485)][_0x28c65a(0x3b3)][_0x28c65a(0xaf0)](this,_0x2cfcb8),this[_0x28c65a(0x84f)]();},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xb6b)]=function(){const _0x43f449=_0x4a3d8d;let _0x54a52f=0x0;this['_baseLineStack'][_0x43f449(0x482)]>0x0&&(_0x54a52f=this[_0x43f449(0x358)][this['_baseLineStack']['length']-0x1]),this[_0x43f449(0x775)][_0x43f449(0x482)]>_0x54a52f?this['wait']():_0x43f449(0xc18)==='bbogB'?this['callNextMethod']():_0x359c54[_0x43f449(0xa62)]=[];},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x792)]=Window_BattleLog['prototype'][_0x4a3d8d(0x828)],Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x828)]=function(_0x5d3c4f,_0x1720a0){const _0x5961d1=_0x4a3d8d;VisuMZ[_0x5961d1(0x485)][_0x5961d1(0x792)][_0x5961d1(0xaf0)](this,_0x5d3c4f,_0x1720a0),this[_0x5961d1(0x84f)]();},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x869)]=Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x9df)],Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x9df)]=function(_0x3d80d2,_0x7c1685){const _0x26ab33=_0x4a3d8d;VisuMZ['BattleCore'][_0x26ab33(0x869)][_0x26ab33(0xaf0)](this,_0x3d80d2,_0x7c1685),this['callNextMethod']();},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xa98)]=Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x1a8)],Window_BattleLog[_0x4a3d8d(0x3c4)]['performActionEnd']=function(_0x4ffedd){const _0x5d6505=_0x4a3d8d;VisuMZ[_0x5d6505(0x485)][_0x5d6505(0xa98)][_0x5d6505(0xaf0)](this,_0x4ffedd);for(const _0x130b57 of BattleManager['allBattleMembers']()){if(!_0x130b57)continue;if(_0x130b57[_0x5d6505(0x2b2)]())continue;_0x130b57['performActionEndMembers']();}this[_0x5d6505(0x84f)]();},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x1eb)]=Window_BattleLog['prototype'][_0x4a3d8d(0xa25)],Window_BattleLog[_0x4a3d8d(0x3c4)]['performDamage']=function(_0x52048e){const _0x27a33b=_0x4a3d8d;VisuMZ[_0x27a33b(0x485)][_0x27a33b(0x1eb)][_0x27a33b(0xaf0)](this,_0x52048e),this[_0x27a33b(0x84f)]();},VisuMZ[_0x4a3d8d(0x485)]['Window_BattleLog_performMiss']=Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xba8)],Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0xba8)]=function(_0x57b04d){const _0x2bb75a=_0x4a3d8d;VisuMZ['BattleCore'][_0x2bb75a(0x26c)][_0x2bb75a(0xaf0)](this,_0x57b04d),this[_0x2bb75a(0x84f)]();},VisuMZ[_0x4a3d8d(0x485)]['Window_BattleLog_performRecovery']=Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x2be)],Window_BattleLog[_0x4a3d8d(0x3c4)]['performRecovery']=function(_0x17de8e){const _0x25d5f7=_0x4a3d8d;VisuMZ[_0x25d5f7(0x485)][_0x25d5f7(0x9d2)][_0x25d5f7(0xaf0)](this,_0x17de8e),this[_0x25d5f7(0x84f)]();},VisuMZ[_0x4a3d8d(0x485)]['Window_BattleLog_performEvasion']=Window_BattleLog['prototype']['performEvasion'],Window_BattleLog['prototype'][_0x4a3d8d(0x579)]=function(_0x354383){const _0xa996fa=_0x4a3d8d;VisuMZ[_0xa996fa(0x485)][_0xa996fa(0xc40)][_0xa996fa(0xaf0)](this,_0x354383),this['callNextMethod']();},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x33c)]=Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x707)],Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x707)]=function(_0x1fbe0d){const _0x10269b=_0x4a3d8d;VisuMZ['BattleCore'][_0x10269b(0x33c)]['call'](this,_0x1fbe0d),this[_0x10269b(0x84f)]();},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x9e6)]=Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x494)],Window_BattleLog['prototype'][_0x4a3d8d(0x494)]=function(_0x383f60){const _0x578036=_0x4a3d8d;VisuMZ[_0x578036(0x485)][_0x578036(0x9e6)]['call'](this,_0x383f60),this[_0x578036(0x84f)]();},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0x228)]=Window_BattleLog['prototype'][_0x4a3d8d(0x6e9)],Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x6e9)]=function(_0x55bb4d){const _0x4d11cc=_0x4a3d8d;VisuMZ[_0x4d11cc(0x485)][_0x4d11cc(0x228)][_0x4d11cc(0xaf0)](this,_0x55bb4d),this[_0x4d11cc(0x84f)]();},VisuMZ[_0x4a3d8d(0x485)][_0x4a3d8d(0xb72)]=Window_BattleLog[_0x4a3d8d(0x3c4)]['performSubstitute'],Window_BattleLog['prototype']['performSubstitute']=function(_0x33c062,_0x3056b7){const _0x4a6a5a=_0x4a3d8d;VisuMZ[_0x4a6a5a(0x485)]['Window_BattleLog_performSubstitute']['call'](this,_0x33c062,_0x3056b7),this[_0x4a6a5a(0x84f)]();},VisuMZ[_0x4a3d8d(0x485)]['Window_BattleLog_performCollapse']=Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x2c2)],Window_BattleLog[_0x4a3d8d(0x3c4)]['performCollapse']=function(_0x53d205){const _0x4bc188=_0x4a3d8d;VisuMZ['BattleCore'][_0x4bc188(0x320)]['call'](this,_0x53d205),this[_0x4bc188(0x84f)]();},Window_BattleLog['prototype'][_0x4a3d8d(0x258)]=function(_0x5cf3a1,_0x57a03b){const _0x395e31=_0x4a3d8d;_0x5cf3a1[_0x395e31(0x258)](_0x57a03b),this[_0x395e31(0x84f)]();},Window_BattleLog[_0x4a3d8d(0x3c4)]['showEnemyAttackAnimation']=function(_0x4f958d,_0x48d2d2){const _0x5d25bc=_0x4a3d8d,_0x2cef13=_0x4f958d[_0x5d25bc(0x965)]();if(_0x2cef13<=0x0)SoundManager[_0x5d25bc(0x4c6)]();else{if(_0x5d25bc(0xc34)==='rwhdO')this['showNormalAnimation'](_0x48d2d2,_0x2cef13);else return this['isActiveTpb']();}},Window_BattleLog[_0x4a3d8d(0x3c4)]['applyImmortal']=function(_0x86af0a,_0x318a3f,_0x510e5d){const _0x3abf01=_0x4a3d8d,_0x8ded3f=[_0x86af0a][_0x3abf01(0xb1a)](_0x318a3f);for(const _0x3ff663 of _0x8ded3f){if(_0x3abf01(0x829)!==_0x3abf01(0x356)){if(!_0x3ff663)continue;_0x3ff663['setImmortal'](_0x510e5d);}else this[_0x3abf01(0x5c9)]=_0x3abf01(0x9d8);}this[_0x3abf01(0x84f)]();},Window_BattleLog['prototype'][_0x4a3d8d(0xa91)]=function(_0x5e90f0){this['_waitCount']=_0x5e90f0;},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x834)]=function(_0x1205d0,_0x2e944a){const _0xab7e31=_0x4a3d8d;for(const _0xa72b47 of _0x1205d0){if(!_0xa72b47)continue;_0xa72b47[_0xab7e31(0x834)](_0x2e944a);}this[_0xab7e31(0x84f)]();},Window_BattleLog[_0x4a3d8d(0x3c4)]['performMoveToPoint']=function(_0x5414fe,_0xa8ef8d,_0x44e9b6,_0x2b404b,_0x38fd84,_0x2692d4){const _0x5cecc8=_0x4a3d8d;_0x5414fe[_0x5cecc8(0x9d5)](_0xa8ef8d,_0x44e9b6,_0x2b404b,_0x38fd84,_0x2692d4,-0x1),this[_0x5cecc8(0x84f)]();},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x291)]=function(_0x55ceae,_0x2a1640,_0x2bf869,_0x16cf7c,_0x2a1b9e,_0x494c42,_0x101006){const _0x47e4af=_0x4a3d8d,_0x5a199c=Math[_0x47e4af(0x885)](..._0x2a1640[_0x47e4af(0xa4a)](_0x7403d5=>_0x7403d5[_0x47e4af(0x28e)]()[_0x47e4af(0x232)]-_0x7403d5['battler']()['mainSpriteWidth']()/0x2)),_0x480019=Math[_0x47e4af(0x559)](..._0x2a1640[_0x47e4af(0xa4a)](_0x1aa09a=>_0x1aa09a[_0x47e4af(0x28e)]()[_0x47e4af(0x232)]+_0x1aa09a['battler']()[_0x47e4af(0x34f)]()/0x2)),_0x83f161=Math[_0x47e4af(0x885)](..._0x2a1640['map'](_0x1a8f21=>_0x1a8f21[_0x47e4af(0x28e)]()[_0x47e4af(0x5d8)]-_0x1a8f21[_0x47e4af(0x28e)]()[_0x47e4af(0x71a)]())),_0x2b2241=Math[_0x47e4af(0x559)](..._0x2a1640['map'](_0xb584f0=>_0xb584f0[_0x47e4af(0x28e)]()[_0x47e4af(0x5d8)])),_0x160c48=_0x2a1640[_0x47e4af(0x3d0)](_0x4c3d62=>_0x4c3d62[_0x47e4af(0x764)]())[_0x47e4af(0x482)],_0x19ecba=_0x2a1640['filter'](_0x222c7d=>_0x222c7d[_0x47e4af(0x87a)]())[_0x47e4af(0x482)];let _0x10001c=0x0,_0x36c239=0x0;if(_0x2bf869['match'](/front/i)){if('IZKJc'!=='KTuZh')_0x10001c=_0x160c48>=_0x19ecba?_0x5a199c:_0x480019;else{if(this[_0x47e4af(0x75e)]()>=0x1)return!![];return this[_0x47e4af(0x7bd)]()[_0x47e4af(0x832)];}}else{if(_0x2bf869[_0x47e4af(0x591)](/middle/i))_0x10001c=(_0x5a199c+_0x480019)/0x2,_0x101006=-0x1;else _0x2bf869[_0x47e4af(0x591)](/back/i)&&(_0x10001c=_0x160c48>=_0x19ecba?_0x480019:_0x5a199c);}if(_0x2bf869['match'](/head/i))_0x36c239=_0x83f161;else{if(_0x2bf869[_0x47e4af(0x591)](/center/i))_0x36c239=(_0x83f161+_0x2b2241)/0x2;else _0x2bf869['match'](/base/i)&&(_0x47e4af(0x567)===_0x47e4af(0x567)?_0x36c239=_0x2b2241:this[_0x47e4af(0x47e)]=!![]);}_0x55ceae[_0x47e4af(0x9d5)](_0x10001c,_0x36c239,_0x16cf7c,_0x2a1b9e,_0x494c42,_0x101006),this[_0x47e4af(0x84f)]();},Window_BattleLog[_0x4a3d8d(0x3c4)][_0x4a3d8d(0x939)]=function(_0xa017c5,_0x147885,_0x64d60c){const _0x604dc9=_0x4a3d8d;for(const _0x1fcb5d of _0xa017c5){if(_0x604dc9(0xbeb)!==_0x604dc9(0xbeb)){this[_0x604dc9(0x2dd)][_0x604dc9(0x1db)]();const _0x4f3aed=this[_0x604dc9(0xbcf)]();!_0xcf41bf(_0x4f3aed)&&this[_0x604dc9(0xb4b)]();}else{if(!_0x1fcb5d)continue;_0x1fcb5d[_0x604dc9(0x759)](_0x147885,_0x64d60c);}}this[_0x604dc9(0x84f)]();};