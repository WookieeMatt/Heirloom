//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.66;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.66] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0x44efce=_0x3d4e;(function(_0x514d9a,_0x5770ef){const _0x1aae6c=_0x3d4e,_0x239ac4=_0x514d9a();while(!![]){try{const _0x4147c3=parseInt(_0x1aae6c(0x6f4))/0x1*(parseInt(_0x1aae6c(0x61b))/0x2)+-parseInt(_0x1aae6c(0x69c))/0x3*(-parseInt(_0x1aae6c(0x8b3))/0x4)+parseInt(_0x1aae6c(0xac))/0x5*(-parseInt(_0x1aae6c(0x123))/0x6)+-parseInt(_0x1aae6c(0x1f5))/0x7*(parseInt(_0x1aae6c(0x804))/0x8)+parseInt(_0x1aae6c(0x5b8))/0x9*(parseInt(_0x1aae6c(0x530))/0xa)+-parseInt(_0x1aae6c(0x6c8))/0xb*(parseInt(_0x1aae6c(0xd4))/0xc)+-parseInt(_0x1aae6c(0x215))/0xd;if(_0x4147c3===_0x5770ef)break;else _0x239ac4['push'](_0x239ac4['shift']());}catch(_0x472131){_0x239ac4['push'](_0x239ac4['shift']());}}}(_0x4fa7,0xce58d));var label=_0x44efce(0x6d0),tier=tier||0x0,dependencies=[],pluginData=$plugins['filter'](function(_0x58d8f6){const _0x3f2bc0=_0x44efce;return _0x58d8f6[_0x3f2bc0(0x8e7)]&&_0x58d8f6[_0x3f2bc0(0x4f0)]['includes']('['+label+']');})[0x0];VisuMZ[label][_0x44efce(0x444)]=VisuMZ[label][_0x44efce(0x444)]||{},VisuMZ['ConvertParams']=function(_0xd29a61,_0x51b839){const _0x5476a5=_0x44efce;for(const _0x1d5b33 in _0x51b839){if(_0x1d5b33[_0x5476a5(0xab6)](/(.*):(.*)/i)){if(_0x5476a5(0x741)===_0x5476a5(0xeb))return!![];else{const _0x156390=String(RegExp['$1']),_0x40be65=String(RegExp['$2'])[_0x5476a5(0xb2d)]()[_0x5476a5(0xaef)]();let _0x44fcf8,_0x63e8e9,_0x1eeea3;switch(_0x40be65){case _0x5476a5(0x879):_0x44fcf8=_0x51b839[_0x1d5b33]!==''?Number(_0x51b839[_0x1d5b33]):0x0;break;case _0x5476a5(0x96e):_0x63e8e9=_0x51b839[_0x1d5b33]!==''?JSON['parse'](_0x51b839[_0x1d5b33]):[],_0x44fcf8=_0x63e8e9[_0x5476a5(0xba3)](_0x5ccbee=>Number(_0x5ccbee));break;case _0x5476a5(0x853):_0x44fcf8=_0x51b839[_0x1d5b33]!==''?eval(_0x51b839[_0x1d5b33]):null;break;case _0x5476a5(0x256):_0x63e8e9=_0x51b839[_0x1d5b33]!==''?JSON['parse'](_0x51b839[_0x1d5b33]):[],_0x44fcf8=_0x63e8e9['map'](_0x596584=>eval(_0x596584));break;case'JSON':_0x44fcf8=_0x51b839[_0x1d5b33]!==''?JSON[_0x5476a5(0x47e)](_0x51b839[_0x1d5b33]):'';break;case _0x5476a5(0x953):_0x63e8e9=_0x51b839[_0x1d5b33]!==''?JSON[_0x5476a5(0x47e)](_0x51b839[_0x1d5b33]):[],_0x44fcf8=_0x63e8e9[_0x5476a5(0xba3)](_0xb3ec9a=>JSON[_0x5476a5(0x47e)](_0xb3ec9a));break;case'FUNC':_0x44fcf8=_0x51b839[_0x1d5b33]!==''?new Function(JSON['parse'](_0x51b839[_0x1d5b33])):new Function(_0x5476a5(0x472));break;case _0x5476a5(0x1b3):_0x63e8e9=_0x51b839[_0x1d5b33]!==''?JSON[_0x5476a5(0x47e)](_0x51b839[_0x1d5b33]):[],_0x44fcf8=_0x63e8e9['map'](_0x55de98=>new Function(JSON['parse'](_0x55de98)));break;case _0x5476a5(0x797):_0x44fcf8=_0x51b839[_0x1d5b33]!==''?String(_0x51b839[_0x1d5b33]):'';break;case _0x5476a5(0x653):_0x63e8e9=_0x51b839[_0x1d5b33]!==''?JSON['parse'](_0x51b839[_0x1d5b33]):[],_0x44fcf8=_0x63e8e9[_0x5476a5(0xba3)](_0x4185fb=>String(_0x4185fb));break;case _0x5476a5(0xa5):_0x1eeea3=_0x51b839[_0x1d5b33]!==''?JSON[_0x5476a5(0x47e)](_0x51b839[_0x1d5b33]):{},_0xd29a61[_0x156390]={},VisuMZ[_0x5476a5(0x878)](_0xd29a61[_0x156390],_0x1eeea3);continue;case _0x5476a5(0x2b5):_0x63e8e9=_0x51b839[_0x1d5b33]!==''?JSON[_0x5476a5(0x47e)](_0x51b839[_0x1d5b33]):[],_0x44fcf8=_0x63e8e9[_0x5476a5(0xba3)](_0x391fa3=>VisuMZ[_0x5476a5(0x878)]({},JSON[_0x5476a5(0x47e)](_0x391fa3)));break;default:continue;}_0xd29a61[_0x156390]=_0x44fcf8;}}}return _0xd29a61;},(_0x245328=>{const _0x1ac3ca=_0x44efce,_0x5b8eb6=_0x245328[_0x1ac3ca(0x5d4)];for(const _0x2fb3a9 of dependencies){if(!Imported[_0x2fb3a9]){alert(_0x1ac3ca(0x8d6)[_0x1ac3ca(0x437)](_0x5b8eb6,_0x2fb3a9)),SceneManager[_0x1ac3ca(0xb2e)]();break;}}const _0x1ba554=_0x245328[_0x1ac3ca(0x4f0)];if(_0x1ba554[_0x1ac3ca(0xab6)](/\[Version[ ](.*?)\]/i)){const _0x4a9406=Number(RegExp['$1']);_0x4a9406!==VisuMZ[label][_0x1ac3ca(0x1e5)]&&(alert(_0x1ac3ca(0x8d5)['format'](_0x5b8eb6,_0x4a9406)),SceneManager[_0x1ac3ca(0xb2e)]());}if(_0x1ba554['match'](/\[Tier[ ](\d+)\]/i)){const _0x26ae97=Number(RegExp['$1']);if(_0x26ae97<tier){if(_0x1ac3ca(0xbb1)===_0x1ac3ca(0xbb1))alert(_0x1ac3ca(0x2b7)[_0x1ac3ca(0x437)](_0x5b8eb6,_0x26ae97,tier)),SceneManager[_0x1ac3ca(0xb2e)]();else{this[_0x1ac3ca(0x7c8)]('dead');return;}}else tier=Math[_0x1ac3ca(0x65c)](_0x26ae97,tier);}VisuMZ['ConvertParams'](VisuMZ[label][_0x1ac3ca(0x444)],_0x245328[_0x1ac3ca(0x9a3)]);})(pluginData),VisuMZ[_0x44efce(0x57d)]=function(_0x43a00c){const _0x2229de=_0x44efce;let _0x6996b7=[];for(const _0x459e56 of _0x43a00c){_0x6996b7=_0x6996b7[_0x2229de(0x719)](VisuMZ[_0x2229de(0x47f)](_0x459e56));}return _0x6996b7[_0x2229de(0xc9)](_0x2810bd=>_0x2810bd);},VisuMZ[_0x44efce(0x47f)]=function(_0x804f0a){const _0x3aaae1=_0x44efce,_0x2bd0ae=BattleManager[_0x3aaae1(0xac1)]()['filter'](_0x3cc524=>_0x3cc524&&_0x3cc524[_0x3aaae1(0x59c)]()),_0x1d66eb=BattleManager[_0x3aaae1(0x427)],_0x14cc80=BattleManager['_target'],_0x462df7=BattleManager[_0x3aaae1(0xb78)]?BattleManager[_0x3aaae1(0xb78)][_0x3aaae1(0x3f2)](0x0):_0x2bd0ae;_0x804f0a=_0x804f0a[_0x3aaae1(0x733)]()['trim']();if(_0x804f0a===_0x3aaae1(0xac3))return[_0x1d66eb];else{if(_0x804f0a===_0x3aaae1(0x55f))return[_0x14cc80];else{if(_0x804f0a===_0x3aaae1(0x7c0)){if(_0x14cc80){const _0x49b4f4=_0x462df7['indexOf'](_0x14cc80);return _0x49b4f4>=0x0?[_0x462df7[_0x49b4f4-0x1]||_0x14cc80]:[_0x14cc80];}}else{if(_0x804f0a===_0x3aaae1(0x56d)){if(_0x14cc80){if('Imwky'===_0x3aaae1(0x927)){const _0x1c8169=_0x3e5c12[_0x4257ee];if(!_0x1c8169)return;const _0x218a39=new _0x320982();this[_0x3aaae1(0x80a)](_0x218a39),_0x218a39[_0x3aaae1(0x6cc)](_0x11fcf5);}else{const _0x36303a=_0x462df7[_0x3aaae1(0x963)](_0x14cc80);return _0x36303a>=0x0?[_0x462df7[_0x36303a+0x1]||_0x14cc80]:[_0x14cc80];}}}else{if(_0x804f0a===_0x3aaae1(0x818))return _0x462df7;else{if(_0x804f0a===_0x3aaae1(0x903))return'SLYSs'===_0x3aaae1(0x581)?[_0x1d66eb][_0x3aaae1(0x719)](_0x462df7):_0x2a0fb0[_0x3aaae1(0x6d0)][_0x3aaae1(0x253)][_0x3aaae1(0xb59)](this,_0x4c5f3c);else{if(_0x804f0a==='not\x20focus'){if('CtjKF'!==_0x3aaae1(0x3ba))this['opacity']=0x0;else return _0x2bd0ae[_0x3aaae1(0xc9)](_0x20add5=>_0x20add5!==_0x1d66eb&&!_0x462df7[_0x3aaae1(0x89e)](_0x20add5)&&_0x20add5[_0x3aaae1(0xa61)]());}}}}}}}if(_0x1d66eb){if(_0x804f0a===_0x3aaae1(0x5fa)){if(_0x3aaae1(0x75a)!==_0x3aaae1(0x47c))return _0x1d66eb[_0x3aaae1(0x8ce)]()[_0x3aaae1(0xb09)]();else _0x1e7941=_0x246752['filter']((_0x35ccef,_0x5c7267,_0x87579b)=>_0x87579b['indexOf'](_0x35ccef)===_0x5c7267),_0x446e52['isSceneBattle']()&&_0xc290d4[_0x3aaae1(0x448)]()&&(_0x1d7a1f=!_0x8dd1bb),_0x52bf1a[_0x3aaae1(0x6d0)][_0x3aaae1(0x5e1)][_0x3aaae1(0xb59)](this,_0x8f5473,_0x11f3ef,_0x591a2f),_0x4c0224['isSceneBattle']()&&_0x569f34[_0x3aaae1(0x948)][_0x3aaae1(0xaa2)]();}else{if(_0x804f0a===_0x3aaae1(0x62f))return _0x1d66eb[_0x3aaae1(0x8ce)]()[_0x3aaae1(0xb09)]()['filter'](_0x5d3a25=>_0x5d3a25!==_0x1d66eb);else{if(_0x804f0a===_0x3aaae1(0x69a)){if(_0x3aaae1(0x71c)!=='bfbdN')return _0x1d66eb[_0x3aaae1(0x8ce)]()['aliveMembers']()[_0x3aaae1(0xc9)](_0x2f7f02=>_0x2f7f02!==_0x14cc80);else _0x3d1463[_0x3aaae1(0xace)](_0x2972b5),['swing',_0x3aaae1(0x15d),_0x3aaae1(0x3c4)][_0x3aaae1(0x89e)](_0x45ea9c)&&this[_0x3aaae1(0x325)]();}else{if(_0x804f0a===_0x3aaae1(0x8cf))return _0x1d66eb[_0x3aaae1(0x8ce)]()[_0x3aaae1(0x806)]();else{if(_0x804f0a[_0x3aaae1(0xab6)](/FRIEND INDEX (\d+)/i)){const _0x4339a2=Number(RegExp['$1']);return[_0x1d66eb[_0x3aaae1(0x8ce)]()[_0x3aaae1(0x19f)]()[_0x4339a2]];}}}}}if(_0x804f0a===_0x3aaae1(0x832)){if('VjXbV'===_0x3aaae1(0x7f8))return _0x1d66eb[_0x3aaae1(0x387)]()[_0x3aaae1(0xb09)]();else{if(!_0x1b4028[_0x3aaae1(0x6d0)]['Settings'][_0x3aaae1(0x6e4)][_0x3aaae1(0x56f)])return;_0x4373a4['BattleCore'][_0x3aaae1(0x73d)][_0x3aaae1(0xb59)](this,_0x2810a9);}}else{if(_0x804f0a===_0x3aaae1(0x494)){if(_0x3aaae1(0x62b)!==_0x3aaae1(0x62b)){const _0x37dd87=this[_0x3aaae1(0x49b)](_0x1b16f5);if(_0x37dd87===_0x3aaae1(0x4a1))this['drawItemStyleIconText'](_0x1fe1ab);else _0x37dd87===_0x3aaae1(0xe0)?this[_0x3aaae1(0x3a9)](_0x183315):_0x4ee2df[_0x3aaae1(0x8f2)]['drawItem'][_0x3aaae1(0xb59)](this,_0x28151a);}else return _0x1d66eb[_0x3aaae1(0x387)]()[_0x3aaae1(0xb09)]()[_0x3aaae1(0xc9)](_0x13e59b=>_0x13e59b!==_0x14cc80);}else{if(_0x804f0a===_0x3aaae1(0x9fd))return _0x1d66eb[_0x3aaae1(0x387)]()[_0x3aaae1(0x806)]();else{if(_0x804f0a['match'](/OPPONENT INDEX (\d+)/i)){if(_0x3aaae1(0x5e8)==='pQcAv'){const _0xa3d25d=Number(RegExp['$1']);return[_0x1d66eb[_0x3aaae1(0x387)]()[_0x3aaae1(0x19f)]()[_0xa3d25d]];}else{if(this[_0x3aaae1(0x669)]!==_0x1ab0da)return![];if(!_0x331e30['isSceneBattle']())return![];return _0x5b6848[_0x3aaae1(0x6d0)][_0x3aaae1(0x444)]['BattleLayout'][_0x3aaae1(0xa29)];}}}}}}if(_0x804f0a===_0x3aaae1(0x6cd))return $gameParty['aliveMembers']();else{if(_0x804f0a===_0x3aaae1(0x9d3)){if('TwNYg'!==_0x3aaae1(0x6f9)){this[_0x3aaae1(0x998)]=[];for(let _0x1b0098=0x0;_0x1b0098<_0x418f56[_0x3aaae1(0x1df)]();_0x1b0098++){const _0x295a2e=_0xf07ea7['battleMembers']()[_0x1b0098],_0x5f0601=new _0x259024();_0x5f0601[_0x3aaae1(0x5f3)](_0x295a2e),_0x5f0601['setBattler'](_0x295a2e),_0x5f0601['update'](),this[_0x3aaae1(0x998)][_0x3aaae1(0xb70)](_0x5f0601),this['_battlerContainer'][_0x3aaae1(0x317)](_0x5f0601);}}else return $gameParty[_0x3aaae1(0xb09)]()[_0x3aaae1(0xc9)](_0x3303a3=>_0x3303a3!==_0x1d66eb);}else{if(_0x804f0a===_0x3aaae1(0x4ab)){if(_0x3aaae1(0xa25)!==_0x3aaae1(0x983))return $gameParty['aliveMembers']()['filter'](_0x26c03a=>_0x26c03a!==_0x14cc80);else{if(!_0x165397['isSceneBattle']())return![];if(!_0x4955ae)return![];if(!_0x35a7ec[_0x3aaae1(0x987)]())return![];if(_0x5b9a28[_0x3aaae1(0x987)]()[_0x3aaae1(0x77d)][_0x3aaae1(0xab6)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(_0x3e2aba[_0x3aaae1(0x424)](_0x5e6096[_0x3aaae1(0x987)]()))return!![];return![];}}else{if(_0x804f0a===_0x3aaae1(0x761))return $gameParty[_0x3aaae1(0x806)]();else{if(_0x804f0a[_0x3aaae1(0xab6)](/ACTOR INDEX (\d+)/i)){if('WILSB'!=='WILSB'){this[_0x3aaae1(0x623)](_0x3aaae1(0x8f8));const _0x90b621=this[_0x3aaae1(0x358)];_0x1a43ca[_0x3aaae1(0x6d0)][_0x3aaae1(0x458)][_0x3aaae1(0xb59)](this),this[_0x3aaae1(0x358)]=_0x90b621+_0x46a02f[_0x3aaae1(0x6d0)][_0x3aaae1(0x444)][_0x3aaae1(0x840)][_0x3aaae1(0xba4)]['call'](this),this[_0x3aaae1(0x217)](_0x3aaae1(0x14c));}else{const _0x16f8b4=Number(RegExp['$1']);return[$gameParty['members']()[_0x16f8b4]];}}else{if(_0x804f0a[_0x3aaae1(0xab6)](/ACTOR ID (\d+)/i)){const _0x191b93=Number(RegExp['$1']);return[$gameActors[_0x3aaae1(0x918)](_0x191b93)];}}}}}}if(_0x804f0a==='alive\x20enemies')return $gameTroop[_0x3aaae1(0xb09)]();else{if(_0x804f0a==='alive\x20enemies\x20not\x20user')return _0x3aaae1(0x7a9)===_0x3aaae1(0x7a9)?$gameTroop['aliveMembers']()[_0x3aaae1(0xc9)](_0x34dcb1=>_0x34dcb1!==_0x1d66eb):this[_0x3aaae1(0x5cd)]()[_0x3aaae1(0xb9d)];else{if(_0x804f0a===_0x3aaae1(0xb0e))return $gameTroop[_0x3aaae1(0xb09)]()['filter'](_0x4ef2a5=>_0x4ef2a5!==_0x14cc80);else{if(_0x804f0a===_0x3aaae1(0xab1)){if(_0x3aaae1(0x650)!=='eziEv')return $gameTroop['deadMembers']();else _0x4d3e20['BattleCore']['Window_BattleLog_performCollapse'][_0x3aaae1(0xb59)](this,_0x252ee9),this[_0x3aaae1(0x52f)]();}else{if(_0x804f0a[_0x3aaae1(0xab6)](/ENEMY INDEX (\d+)/i)){if(_0x3aaae1(0xa11)==='kxAPQ')this['_forcedHomeX']=_0x1e168e,this['_forcedHomeY']=_0x5e50e2;else{const _0x627f6a=Number(RegExp['$1']);return[$gameTroop[_0x3aaae1(0x19f)]()[_0x627f6a]];}}else{if(_0x804f0a[_0x3aaae1(0xab6)](/ENEMY ID (\d+)/i)){if('hooyH'===_0x3aaae1(0x39a)){const _0x47564c=Number(RegExp['$1']);return $gameTroop[_0x3aaae1(0xb09)]()[_0x3aaae1(0xc9)](_0x30d3c3=>_0x30d3c3['enemyId']()===_0x47564c);}else _0x463bf2[_0x3aaae1(0x136)]=![],this['actorCommandCancelTPB']();}}}}}}if(_0x804f0a===_0x3aaae1(0x602)){if(_0x3aaae1(0x4bd)!==_0x3aaae1(0x4bd))_0x520078[_0x3aaae1(0x6d0)][_0x3aaae1(0xa65)][_0x3aaae1(0xb59)](this),this[_0x3aaae1(0x500)]();else return _0x2bd0ae[_0x3aaae1(0xc9)](_0x13e0ed=>_0x13e0ed[_0x3aaae1(0x8e9)]());}else{if(_0x804f0a===_0x3aaae1(0x1ad)){if(_0x3aaae1(0xa98)!==_0x3aaae1(0xa98)){const _0x3d32e0=_0x5e94fc[_0x3aaae1(0x5e9)]();_0x3d32e0<=0x0?_0x1ea01c[_0x3aaae1(0x782)]():this[_0x3aaae1(0x491)](_0x459bc9,_0x3d32e0);}else return _0x2bd0ae[_0x3aaae1(0xc9)](_0x14af31=>_0x14af31[_0x3aaae1(0x8e9)]()&&_0x14af31!==_0x1d66eb);}else{if(_0x804f0a===_0x3aaae1(0x25c))return _0x2bd0ae[_0x3aaae1(0xc9)](_0x4fc555=>_0x4fc555['isAlive']()&&_0x4fc555!==_0x14cc80);else{if(_0x804f0a===_0x3aaae1(0x885))return _0x2bd0ae[_0x3aaae1(0xc9)](_0xcb8b7b=>_0xcb8b7b['isDead']());}}}return[];},PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],'ActSeq_Set_SetupAction',_0x4574d4=>{const _0x396533=_0x44efce;if(!SceneManager[_0x396533(0xbab)]())return;VisuMZ[_0x396533(0x878)](_0x4574d4,_0x4574d4);const _0x454cb6=$gameTemp[_0x396533(0x3f8)](),_0x1b8376=BattleManager['_action'],_0x53776c=BattleManager['_subject'],_0x5b4cd1=BattleManager[_0x396533(0xb78)]?BattleManager[_0x396533(0xb78)][_0x396533(0x3f2)](0x0):[],_0x2eba1b=BattleManager[_0x396533(0x8fd)];if(!_0x454cb6||!_0x1b8376||!_0x53776c)return;if(!_0x1b8376[_0x396533(0x987)]())return;if(_0x4574d4['DisplayAction'])_0x2eba1b[_0x396533(0x1ff)](_0x53776c,_0x1b8376[_0x396533(0x987)]());_0x4574d4[_0x396533(0xb5f)]&&_0x2eba1b[_0x396533(0xb70)](_0x396533(0x5aa),_0x53776c,_0x5b4cd1,!![]);if(_0x4574d4['ActionStart'])_0x2eba1b[_0x396533(0xb70)](_0x396533(0x10c),_0x53776c,_0x1b8376);if(_0x4574d4[_0x396533(0x2c1)])_0x2eba1b[_0x396533(0xb70)]('waitForMovement');if(_0x4574d4[_0x396533(0xb15)])_0x2eba1b['push']('performCastAnimation',_0x53776c,_0x1b8376);if(_0x4574d4['WaitForAnimation'])_0x2eba1b[_0x396533(0xb70)]('waitForAnimation');_0x454cb6[_0x396533(0x227)](_0x396533(0x35b));}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],_0x44efce(0x618),_0x1c2d1e=>{const _0x12832a=_0x44efce;if(!SceneManager[_0x12832a(0xbab)]())return;VisuMZ[_0x12832a(0x878)](_0x1c2d1e,_0x1c2d1e);const _0x5ba6ec=$gameTemp[_0x12832a(0x3f8)](),_0x2db39c=BattleManager['_action'],_0x56eae3=BattleManager[_0x12832a(0x427)],_0x56d850=BattleManager[_0x12832a(0xb78)]?BattleManager[_0x12832a(0xb78)][_0x12832a(0x3f2)](0x0):[],_0x564d18=BattleManager[_0x12832a(0x8fd)],_0x1f1d66=_0x1c2d1e[_0x12832a(0x87e)]??![];if(!_0x5ba6ec||!_0x2db39c||!_0x56eae3)return;if(!_0x2db39c[_0x12832a(0x987)]())return;let _0x3e0c75=_0x1f1d66?_0x564d18[_0x12832a(0x9b7)](_0x56eae3):0x1;for(let _0x2ae1e3=0x0;_0x2ae1e3<_0x3e0c75;_0x2ae1e3++){_0x1f1d66&&_0x56eae3[_0x12832a(0x8de)]()&&_0x564d18[_0x12832a(0xb70)](_0x12832a(0x5f0),_0x56eae3,_0x2ae1e3);if(_0x1c2d1e[_0x12832a(0x23c)])_0x564d18[_0x12832a(0xb70)](_0x12832a(0x86c),_0x56eae3,_0x2db39c);if(_0x1c2d1e[_0x12832a(0x47b)]>0x0)_0x564d18[_0x12832a(0xb70)](_0x12832a(0xbac),_0x1c2d1e[_0x12832a(0x47b)]);if(_0x1c2d1e['ActionAnimation'])_0x564d18['push'](_0x12832a(0x605),_0x56eae3,_0x56d850,_0x2db39c[_0x12832a(0x987)]()['animationId']);if(_0x1c2d1e['WaitForAnimation'])_0x564d18[_0x12832a(0xb70)](_0x12832a(0x5a9));for(const _0x49fc07 of _0x56d850){if(!_0x49fc07)continue;if(_0x1c2d1e[_0x12832a(0x841)])_0x564d18[_0x12832a(0xb70)](_0x12832a(0x9d6),_0x56eae3,_0x49fc07);}}_0x1f1d66&&_0x56eae3[_0x12832a(0x8de)]()&&_0x564d18['push'](_0x12832a(0xadd),_0x56eae3);if(_0x1c2d1e[_0x12832a(0xb5f)])_0x564d18[_0x12832a(0xb70)](_0x12832a(0x5aa),_0x56eae3,_0x56d850,![]);_0x5ba6ec[_0x12832a(0x227)](_0x12832a(0x35b));}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],'ActSeq_Set_TargetActionSet',_0x3cac7a=>{const _0x1d336d=_0x44efce;if(!SceneManager[_0x1d336d(0xbab)]())return;VisuMZ[_0x1d336d(0x878)](_0x3cac7a,_0x3cac7a);const _0x484bfc=$gameTemp['getLastPluginCommandInterpreter'](),_0x55f73c=BattleManager[_0x1d336d(0x1db)],_0x5e93b1=BattleManager['_subject'],_0x32ac35=BattleManager[_0x1d336d(0xb78)]?BattleManager[_0x1d336d(0xb78)][_0x1d336d(0x3f2)](0x0):[],_0x121f89=BattleManager['_logWindow'],_0x5d66f3=_0x3cac7a[_0x1d336d(0x87e)]??![];if(!_0x484bfc||!_0x55f73c||!_0x5e93b1)return;if(!_0x55f73c[_0x1d336d(0x987)]())return;let _0x3ed4a6=_0x5d66f3?_0x121f89[_0x1d336d(0x9b7)](_0x5e93b1):0x1;for(let _0xe7fece=0x0;_0xe7fece<_0x3ed4a6;_0xe7fece++){for(const _0x68869b of _0x32ac35){if(_0x1d336d(0x46d)===_0x1d336d(0x270))_0xd364f0[_0x1d336d(0x45b)][_0x1d336d(0x743)][_0x1d336d(0x9e8)](_0x47ba99);else{if(!_0x68869b)continue;if(_0x5d66f3&&_0x5e93b1[_0x1d336d(0x8de)]()){if(_0x1d336d(0xc2)!=='XOGzP'){if(!_0x3457bf[_0x1d336d(0xbab)]())return;const _0x5af28c=_0x32a43e[_0x1d336d(0x8fd)];_0x5af28c['pushBaseLine']();}else _0x121f89[_0x1d336d(0xb70)]('setActiveWeaponSet',_0x5e93b1,_0xe7fece);}if(_0x3cac7a['PerformAction'])_0x121f89[_0x1d336d(0xb70)](_0x1d336d(0x86c),_0x5e93b1,_0x55f73c);if(_0x3cac7a['WaitCount1']>0x0)_0x121f89[_0x1d336d(0xb70)]('waitCount',_0x3cac7a['WaitCount1']);if(_0x3cac7a['ActionAnimation'])_0x121f89[_0x1d336d(0xb70)](_0x1d336d(0x605),_0x5e93b1,[_0x68869b],_0x55f73c[_0x1d336d(0x987)]()[_0x1d336d(0xa49)]);if(_0x3cac7a['WaitCount2']>0x0)_0x121f89[_0x1d336d(0xb70)](_0x1d336d(0xbac),_0x3cac7a[_0x1d336d(0x37c)]);if(_0x3cac7a[_0x1d336d(0x841)])_0x121f89[_0x1d336d(0xb70)]('actionEffect',_0x5e93b1,_0x68869b);}}}_0x5d66f3&&_0x5e93b1[_0x1d336d(0x8de)]()&&_0x121f89[_0x1d336d(0xb70)](_0x1d336d(0xadd),_0x5e93b1);if(_0x3cac7a[_0x1d336d(0xb5f)])_0x121f89[_0x1d336d(0xb70)]('applyImmortal',_0x5e93b1,_0x32ac35,![]);_0x484bfc['setWaitMode']('battlelog');}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x51e),_0x44562a=>{const _0x515613=_0x44efce;if(!SceneManager[_0x515613(0xbab)]())return;VisuMZ[_0x515613(0x878)](_0x44562a,_0x44562a);const _0x627609=$gameTemp[_0x515613(0x3f8)](),_0x31795c=BattleManager['_action'],_0x1568ff=BattleManager[_0x515613(0x427)],_0x4e61bc=BattleManager[_0x515613(0xb78)]?BattleManager[_0x515613(0xb78)]['slice'](0x0):[],_0x39f807=BattleManager[_0x515613(0x8fd)];if(!_0x627609||!_0x31795c||!_0x1568ff)return;if(!_0x31795c[_0x515613(0x987)]())return;if(_0x44562a[_0x515613(0xb5f)])_0x39f807['push'](_0x515613(0x5aa),_0x1568ff,_0x4e61bc,![]);if(_0x44562a[_0x515613(0x111)])_0x39f807[_0x515613(0xb70)](_0x515613(0x450));if(_0x44562a[_0x515613(0xb73)])_0x39f807['push'](_0x515613(0xb8d));if(_0x44562a[_0x515613(0x5df)])_0x39f807[_0x515613(0xb70)](_0x515613(0xa09));if(_0x44562a[_0x515613(0x66b)])_0x39f807[_0x515613(0xb70)](_0x515613(0x16b),_0x1568ff);if(_0x44562a[_0x515613(0x2c1)])_0x39f807[_0x515613(0xb70)](_0x515613(0xa9e));_0x627609[_0x515613(0x227)](_0x515613(0x35b));}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x1b6),_0x4d8b2f=>{const _0x328a97=_0x44efce;if(!SceneManager[_0x328a97(0xbab)]())return;if(!Imported[_0x328a97(0x22e)])return;VisuMZ[_0x328a97(0x878)](_0x4d8b2f,_0x4d8b2f);const _0x2c7b91=$gameTemp['getLastPluginCommandInterpreter'](),_0x468a55=_0x4d8b2f[_0x328a97(0xb85)];if(!_0x2c7b91)return;$gameScreen[_0x328a97(0x5c8)](_0x4d8b2f['Angle'],_0x4d8b2f['Duration'],_0x4d8b2f[_0x328a97(0x2f9)]);if(_0x468a55)_0x2c7b91[_0x328a97(0x227)](_0x328a97(0xb75));}),PluginManager[_0x44efce(0x5e6)](pluginData['name'],'ActSeq_Angle_Reset',_0xbabde1=>{const _0x1c28a4=_0x44efce;if(!SceneManager[_0x1c28a4(0xbab)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x1c28a4(0x878)](_0xbabde1,_0xbabde1);const _0x58cad3=$gameTemp['getLastPluginCommandInterpreter'](),_0x5ef995=_0xbabde1['WaitForAngle'];if(!_0x58cad3)return;$gameScreen['setBattleAngle'](0x0,_0xbabde1[_0x1c28a4(0x3c2)],_0xbabde1['EasingType']);if(_0x5ef995)_0x58cad3[_0x1c28a4(0x227)](_0x1c28a4(0xb75));}),PluginManager[_0x44efce(0x5e6)](pluginData['name'],_0x44efce(0x2e5),_0x3aa160=>{const _0x39801e=_0x44efce;if(!SceneManager[_0x39801e(0xbab)]())return;if(!Imported[_0x39801e(0x22e)])return;const _0x5668a4=$gameTemp[_0x39801e(0x3f8)]();if(!_0x5668a4)return;_0x5668a4[_0x39801e(0x227)](_0x39801e(0xb75));}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x6da),_0x40c1ea=>{const _0x624b38=_0x44efce;if(!SceneManager[_0x624b38(0xbab)]())return;VisuMZ[_0x624b38(0x878)](_0x40c1ea,_0x40c1ea);const _0x4a92f2=$gameTemp[_0x624b38(0x3f8)](),_0xd3b27d=BattleManager[_0x624b38(0x1db)],_0xbbea25=BattleManager[_0x624b38(0x427)],_0x23a7d8=VisuMZ['CreateActionSequenceTargets'](_0x40c1ea[_0x624b38(0x285)]),_0x56caf4=_0x40c1ea['Mirror'],_0x2f876b=BattleManager[_0x624b38(0x8fd)];if(!_0x4a92f2||!_0xd3b27d||!_0xbbea25)return;if(!_0xd3b27d[_0x624b38(0x987)]())return;let _0x903407=_0xd3b27d[_0x624b38(0x987)]()['animationId'];if(_0x903407<0x0)_0x903407=_0xbbea25[_0x624b38(0x5e9)]();$gameTemp[_0x624b38(0x9df)](_0x23a7d8,_0x903407,_0x56caf4),_0x40c1ea[_0x624b38(0x3bf)]&&_0x4a92f2['setWaitMode'](_0x624b38(0x53f));}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x272),_0x10d12b=>{const _0x3419eb=_0x44efce;if(!SceneManager[_0x3419eb(0xbab)]())return;VisuMZ[_0x3419eb(0x878)](_0x10d12b,_0x10d12b);const _0x16ee4e=$gameTemp[_0x3419eb(0x3f8)](),_0x3e76fa=BattleManager[_0x3419eb(0x427)],_0x153ba1=VisuMZ[_0x3419eb(0x57d)](_0x10d12b[_0x3419eb(0x285)]),_0x3390e5=_0x10d12b[_0x3419eb(0xd1)],_0x3ec1a6=BattleManager[_0x3419eb(0x8fd)];if(!_0x16ee4e||!_0x3e76fa)return;const _0x3bf42e=_0x3e76fa[_0x3419eb(0x5e9)]();$gameTemp[_0x3419eb(0x9df)](_0x153ba1,_0x3bf42e,_0x3390e5);if(_0x10d12b[_0x3419eb(0x3bf)]){if(_0x3419eb(0x2b3)==='cJsVR')_0x16ee4e[_0x3419eb(0x227)]('battleAnimation');else{if(_0x864346[_0x3419eb(0x672)]())this[_0x3419eb(0x293)]();else _0x1a56ab[_0x3419eb(0x421)]()&&_0x380a0d[_0x3419eb(0x6d0)][_0x3419eb(0x77f)][_0x3419eb(0xb59)](this);}}}),PluginManager[_0x44efce(0x5e6)](pluginData['name'],_0x44efce(0x9a9),_0x511d21=>{const _0x1614a9=_0x44efce;if(!SceneManager[_0x1614a9(0xbab)]())return;VisuMZ['ConvertParams'](_0x511d21,_0x511d21);const _0x3f7b7b=_0x2b4a1b[_0x1614a9(0x31c)](_0x511d21[_0x1614a9(0x6a8)]);if(_0x3f7b7b<=0x0)return;const _0xcd9eaf=$gameTemp[_0x1614a9(0x3f8)](),_0x2b4a1b=BattleManager['_subject'],_0x1ebdf4=VisuMZ['CreateActionSequenceTargets'](_0x511d21[_0x1614a9(0x285)]),_0x5896fe=_0x511d21[_0x1614a9(0xd1)],_0x56e8d2=BattleManager[_0x1614a9(0x8fd)];if(!_0xcd9eaf||!_0x2b4a1b)return;$gameTemp[_0x1614a9(0x9df)](_0x1ebdf4,_0x3f7b7b,_0x5896fe),_0x511d21[_0x1614a9(0x3bf)]&&_0xcd9eaf[_0x1614a9(0x227)]('battleAnimation');}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],_0x44efce(0x606),_0x4bc505=>{const _0x25688d=_0x44efce;if(!SceneManager[_0x25688d(0xbab)]())return;VisuMZ['ConvertParams'](_0x4bc505,_0x4bc505);const _0x2588bd=$gameTemp[_0x25688d(0x3f8)](),_0x5ee675=BattleManager[_0x25688d(0x1db)],_0x52959a=_0x4bc505[_0x25688d(0xd1)],_0x567649=VisuMZ[_0x25688d(0x57d)](_0x4bc505[_0x25688d(0x285)]);if(!_0x2588bd||!_0x5ee675)return;if(!_0x5ee675[_0x25688d(0x987)]())return;for(const _0x4e0ea6 of _0x567649){if(_0x25688d(0xae0)===_0x25688d(0x7bd))this[_0x25688d(0xa4d)]=_0x34681a;else{if(!_0x4e0ea6)continue;_0x4e0ea6[_0x25688d(0x77c)](_0x5ee675,_0x52959a);}}if(_0x4bc505[_0x25688d(0x3bf)])_0x2588bd[_0x25688d(0x227)]('battleAnimation');}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],_0x44efce(0x593),_0x3774a3=>{const _0x3ba631=_0x44efce;VisuMZ[_0x3ba631(0x878)](_0x3774a3,_0x3774a3);const _0x41a408=$gameTemp[_0x3ba631(0x3f8)](),_0x3e3a8d=VisuMZ[_0x3ba631(0x57d)](_0x3774a3[_0x3ba631(0x285)]),_0x357fe5=_0x3774a3[_0x3ba631(0x9c6)];if(!_0x357fe5)return;for(const _0x42653c of _0x3e3a8d){if(!_0x42653c)continue;if(!_0x42653c[_0x3ba631(0x8de)]())continue;_0x42653c[_0x3ba631(0xa9c)](_0x357fe5);}}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x4fa),_0x42a814=>{const _0x53f1cb=_0x44efce;if(!SceneManager['_scene'])return;if(!SceneManager[_0x53f1cb(0x45b)][_0x53f1cb(0x948)])return;if(!Imported[_0x53f1cb(0x1bc)])return;VisuMZ[_0x53f1cb(0x878)](_0x42a814,_0x42a814);const _0x22a6f2=$gameTemp[_0x53f1cb(0x3f8)](),_0x47adcb=Math[_0x53f1cb(0x18c)](_0x42a814[_0x53f1cb(0x819)]),_0x1f80ea=Math['round'](_0x42a814[_0x53f1cb(0x122)]);$gameTemp[_0x53f1cb(0x5f7)](_0x47adcb,_0x1f80ea,_0x42a814[_0x53f1cb(0x364)],_0x42a814[_0x53f1cb(0xd1)],_0x42a814['Mute']),_0x42a814[_0x53f1cb(0x1c6)]&&_0x22a6f2&&(SceneManager['_scene'][_0x53f1cb(0x948)][_0x53f1cb(0x38f)](),_0x22a6f2['setWaitMode'](_0x53f1cb(0x53f)));}),PluginManager[_0x44efce(0x5e6)](pluginData['name'],_0x44efce(0x68a),_0x5b6bee=>{const _0x53feca=_0x44efce;if(!SceneManager[_0x53feca(0xbab)]())return;VisuMZ[_0x53feca(0x878)](_0x5b6bee,_0x5b6bee);const _0x245d8a=$gameTemp[_0x53feca(0x3f8)](),_0x49f30e=VisuMZ[_0x53feca(0x57d)](_0x5b6bee[_0x53feca(0x285)]),_0x316dfa=_0x5b6bee[_0x53feca(0x364)],_0x5ac0b1=_0x5b6bee['Mirror'];if(!_0x245d8a)return;$gameTemp[_0x53feca(0x9df)](_0x49f30e,_0x316dfa,_0x5ac0b1);if(_0x5b6bee[_0x53feca(0x3bf)])_0x245d8a['setWaitMode'](_0x53feca(0x53f));}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0xa7d),_0x28add6=>{const _0x3d9019=_0x44efce;if(!SceneManager[_0x3d9019(0xbab)]())return;const _0x3476c2=$gameTemp[_0x3d9019(0x3f8)]();if(!_0x3476c2)return;_0x3476c2['setWaitMode'](_0x3d9019(0x53f));}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x648),_0x399402=>{const _0x4c6a89=_0x44efce;if(!SceneManager[_0x4c6a89(0xbab)]())return;VisuMZ[_0x4c6a89(0x878)](_0x399402,_0x399402);const _0x86690b=BattleManager[_0x4c6a89(0x8fd)],_0x2d7e20=_0x399402[_0x4c6a89(0x527)]&&Imported[_0x4c6a89(0x774)];_0x86690b['addText'](_0x399402[_0x4c6a89(0x2a4)]),_0x2d7e20&&Imported[_0x4c6a89(0x774)]&&$gameSystem[_0x4c6a89(0xaaa)](_0x399402['Text']||'',_0x399402[_0x4c6a89(0x26a)]||0x0);}),PluginManager[_0x44efce(0x5e6)](pluginData['name'],_0x44efce(0x14e),_0x42ddd9=>{const _0x106635=_0x44efce;if(!SceneManager[_0x106635(0xbab)]())return;const _0x3d6b7c=BattleManager['_logWindow'];_0x3d6b7c[_0x106635(0xa09)]();}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],'ActSeq_BattleLog_DisplayAction',_0x4a0746=>{const _0x265b8e=_0x44efce;if(!SceneManager[_0x265b8e(0xbab)]())return;const _0x24f2f8=$gameTemp[_0x265b8e(0x3f8)](),_0xe0a436=BattleManager[_0x265b8e(0x1db)],_0x14bde3=BattleManager[_0x265b8e(0x427)],_0x2e13b7=BattleManager['_logWindow'];if(!_0x24f2f8||!_0xe0a436||!_0x14bde3)return;if(!_0xe0a436[_0x265b8e(0x987)]())return;_0x2e13b7[_0x265b8e(0x1ff)](_0x14bde3,_0xe0a436['item']()),_0x24f2f8[_0x265b8e(0x227)](_0x265b8e(0x35b));}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],'ActSeq_BattleLog_PopBaseLine',_0x101214=>{const _0x378b50=_0x44efce;if(!SceneManager[_0x378b50(0xbab)]())return;const _0x421008=BattleManager[_0x378b50(0x8fd)];_0x421008[_0x378b50(0xa91)]();}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0xb96),_0x6c69bf=>{const _0x577df6=_0x44efce;if(!SceneManager[_0x577df6(0xbab)]())return;const _0x175e35=BattleManager['_logWindow'];_0x175e35[_0x577df6(0x635)]();}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x732),_0x212be2=>{const _0x282be3=_0x44efce;if(!SceneManager['isSceneBattle']())return;const _0x5dee6e=BattleManager['_logWindow'];_0x5dee6e[_0x282be3(0x290)]();}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],_0x44efce(0xb38),_0x232491=>{const _0x18d4ae=_0x44efce;if(!SceneManager[_0x18d4ae(0xbab)]())return;VisuMZ[_0x18d4ae(0x878)](_0x232491,_0x232491),SceneManager[_0x18d4ae(0x45b)][_0x18d4ae(0x159)](_0x232491[_0x18d4ae(0x4e3)]);}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x937),_0x288068=>{const _0x108fff=_0x44efce;if(!SceneManager['isSceneBattle']())return;const _0x11b2c4=$gameTemp[_0x108fff(0x3f8)]();_0x11b2c4['setWaitMode'](_0x108fff(0x35b));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_BattleLog_WaitForNewLine',_0x229303=>{const _0xe4e352=_0x44efce;if(!SceneManager[_0xe4e352(0xbab)]())return;const _0x59fc2c=$gameTemp[_0xe4e352(0x3f8)](),_0xc0a27c=BattleManager[_0xe4e352(0x8fd)];_0xc0a27c[_0xe4e352(0x450)](),_0x59fc2c['setWaitMode'](_0xe4e352(0x35b));}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],_0x44efce(0x382),_0x56bf43=>{const _0x1d2280=_0x44efce;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1d2280(0x22e)])return;VisuMZ['ConvertParams'](_0x56bf43,_0x56bf43);const _0x17759c=$gameScreen[_0x1d2280(0x22c)]();_0x17759c['cameraClamp']=_0x56bf43['Setting'];}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],_0x44efce(0xb7),_0x1acd57=>{const _0x1efddb=_0x44efce;if(!SceneManager[_0x1efddb(0xbab)]())return;if(!Imported[_0x1efddb(0x22e)])return;VisuMZ[_0x1efddb(0x878)](_0x1acd57,_0x1acd57);const _0x47acb3=$gameTemp[_0x1efddb(0x3f8)](),_0x4fa0dc=_0x1acd57[_0x1efddb(0xa23)];$gameScreen[_0x1efddb(0xd6)](_0x1acd57[_0x1efddb(0x314)],_0x1acd57[_0x1efddb(0x43e)],_0x1acd57['Duration'],_0x1acd57['EasingType']);if(_0x4fa0dc)_0x47acb3[_0x1efddb(0x227)](_0x1efddb(0xb4d));}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],_0x44efce(0xaa),_0x18ea4f=>{const _0x1c0fee=_0x44efce;if(!SceneManager[_0x1c0fee(0xbab)]())return;if(!Imported[_0x1c0fee(0x22e)])return;VisuMZ[_0x1c0fee(0x878)](_0x18ea4f,_0x18ea4f);const _0xda2777=$gameTemp[_0x1c0fee(0x3f8)](),_0x5c75b4=VisuMZ[_0x1c0fee(0x57d)](_0x18ea4f[_0x1c0fee(0x285)]),_0x212d48=_0x18ea4f[_0x1c0fee(0xa23)];$gameScreen[_0x1c0fee(0x26c)](_0x5c75b4,_0x18ea4f[_0x1c0fee(0x3c2)],_0x18ea4f[_0x1c0fee(0x2f9)]);if(_0x212d48)_0xda2777['setWaitMode'](_0x1c0fee(0xb4d));}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],'ActSeq_Camera_Offset',_0x184573=>{const _0x2722a4=_0x44efce;if(!SceneManager[_0x2722a4(0xbab)]())return;if(!Imported[_0x2722a4(0x22e)])return;VisuMZ[_0x2722a4(0x878)](_0x184573,_0x184573);const _0x1719b1=$gameTemp[_0x2722a4(0x3f8)](),_0xf46753=_0x184573[_0x2722a4(0xa23)];$gameScreen['setBattleCameraOffset'](_0x184573[_0x2722a4(0xfe)],_0x184573[_0x2722a4(0x8cc)],_0x184573['Duration'],_0x184573[_0x2722a4(0x2f9)]);if(_0xf46753)_0x1719b1[_0x2722a4(0x227)](_0x2722a4(0xb4d));}),PluginManager[_0x44efce(0x5e6)](pluginData['name'],_0x44efce(0x63f),_0x3934e6=>{const _0x29748a=_0x44efce;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x29748a(0x22e)])return;VisuMZ['ConvertParams'](_0x3934e6,_0x3934e6);const _0x43c2c0=$gameTemp[_0x29748a(0x3f8)](),_0x99dee3=_0x3934e6[_0x29748a(0xe1)],_0x28ea94=_0x3934e6[_0x29748a(0xbc2)],_0x31268b=_0x3934e6[_0x29748a(0xa23)];if(_0x99dee3){if('OMxlM'!==_0x29748a(0xb50)){const _0x55147a=Math[_0x29748a(0x18c)](Graphics[_0x29748a(0x542)]/0x2),_0x112332=Math['round'](Graphics[_0x29748a(0x737)]/0x2);$gameScreen['setBattleCameraPoint'](_0x55147a,_0x112332,_0x3934e6[_0x29748a(0x3c2)],_0x3934e6[_0x29748a(0x2f9)]);}else this[_0x29748a(0x8fe)]=0x0;}if(_0x28ea94){if(_0x29748a(0x949)!==_0x29748a(0x74c))$gameScreen[_0x29748a(0x44d)](0x0,0x0,_0x3934e6[_0x29748a(0x3c2)],_0x3934e6[_0x29748a(0x2f9)]);else{const _0x5a1015=_0x1d20a5[_0x29748a(0x77d)];if(_0x5a1015[_0x29748a(0xab6)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return _0xedd472(_0x59c40e['$1'])*0.01;else{if(_0x5a1015['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return _0x154752(_0x3b1825['$1'])||0x0;}}}if(_0x31268b)_0x43c2c0[_0x29748a(0x227)]('battleCamera');}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x838),_0x399dbf=>{const _0x35d4d7=_0x44efce;if(!SceneManager[_0x35d4d7(0xbab)]())return;if(!Imported[_0x35d4d7(0x22e)])return;const _0x11d9ab=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x11d9ab)return;_0x11d9ab['setWaitMode'](_0x35d4d7(0xb4d));}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],'ActSeq_DB_DragonbonesMotionAni',_0xda029f=>{const _0x103dc2=_0x44efce;if(!SceneManager[_0x103dc2(0xbab)]())return;if(!Imported[_0x103dc2(0x1fc)])return;VisuMZ[_0x103dc2(0x878)](_0xda029f,_0xda029f);const _0x2969d7=VisuMZ[_0x103dc2(0x57d)](_0xda029f['Targets']),_0x542257=_0xda029f['MotionAni'][_0x103dc2(0x733)]()[_0x103dc2(0xaef)]();for(const _0x15360e of _0x2969d7){if(!_0x15360e)continue;_0x15360e[_0x103dc2(0x8c3)](_0x542257);}}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],_0x44efce(0xb90),_0x1a29fa=>{const _0x44776b=_0x44efce;if(!SceneManager[_0x44776b(0xbab)]())return;if(!Imported[_0x44776b(0x1fc)])return;VisuMZ[_0x44776b(0x878)](_0x1a29fa,_0x1a29fa);const _0x22fc97=VisuMZ[_0x44776b(0x57d)](_0x1a29fa['Targets']),_0x3e0ae4=_0x1a29fa['TimeScale'];for(const _0x1cedab of _0x22fc97){if(_0x44776b(0x87c)!==_0x44776b(0x87c))_0x218e3b[_0x44776b(0x6d0)][_0x44776b(0x14b)]['call'](this,_0x27ff39),this[_0x44776b(0x52f)]();else{if(!_0x1cedab)continue;_0x1cedab[_0x44776b(0x826)]()['timeScale']=_0x3e0ae4;}}}),PluginManager[_0x44efce(0x5e6)](pluginData['name'],'ActSeq_Element_AddElements',_0x606dcb=>{const _0x2d3e41=_0x44efce;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2d3e41(0x822)])return;VisuMZ[_0x2d3e41(0x878)](_0x606dcb,_0x606dcb);const _0x209710=BattleManager['_action'],_0x58c539=_0x606dcb[_0x2d3e41(0x598)];if(!_0x209710)return;_0x209710[_0x2d3e41(0x778)]=_0x58c539;}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x2e8),_0x268b71=>{const _0x28b8ef=_0x44efce;if(!SceneManager[_0x28b8ef(0xbab)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x8080be=BattleManager[_0x28b8ef(0x1db)];if(!_0x8080be)return;_0x8080be[_0x28b8ef(0xb51)]();}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],'ActSeq_Element_ForceElements',_0x2952cd=>{const _0xeadc3b=_0x44efce;if(!SceneManager[_0xeadc3b(0xbab)]())return;if(!Imported[_0xeadc3b(0x822)])return;VisuMZ[_0xeadc3b(0x878)](_0x2952cd,_0x2952cd);const _0x1f18f4=BattleManager[_0xeadc3b(0x1db)],_0x447c88=_0x2952cd['Elements'];if(!_0x1f18f4)return;_0x1f18f4[_0xeadc3b(0x336)]=_0x447c88;}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],'ActSeq_Element_NullElements',_0xc7e8c5=>{const _0x5a1d6a=_0x44efce;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5a1d6a(0x822)])return;const _0x318fa6=BattleManager[_0x5a1d6a(0x1db)];if(!_0x318fa6)return;_0x318fa6['_battleCoreNoElement']=!![];}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],_0x44efce(0x810),_0x32c004=>{const _0x2de9e3=_0x44efce;if(!Imported[_0x2de9e3(0x649)])return;if(!SceneManager[_0x2de9e3(0xbab)]())return;VisuMZ['ConvertParams'](_0x32c004,_0x32c004);const _0x766592=VisuMZ[_0x2de9e3(0x57d)](_0x32c004[_0x2de9e3(0x285)]);for(const _0x4966a7 of _0x766592){if(!_0x4966a7)continue;_0x4966a7[_0x2de9e3(0x898)](_0x2de9e3(0x9bf)),_0x4966a7['removeHorrorEffect'](_0x2de9e3(0xed)),_0x4966a7['removeHorrorEffect']('tv'),_0x4966a7['clearHorrorEffects']();}$gamePlayer['refresh']();}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0xc0),_0x31a246=>{const _0x3b1349=_0x44efce;if(!Imported[_0x3b1349(0x649)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x31a246,_0x31a246);const _0x4256cc=VisuMZ[_0x3b1349(0x57d)](_0x31a246[_0x3b1349(0x285)]),_0xdf8c23='glitch';_0x31a246['sliceMin']=Math[_0x3b1349(0x3bb)](_0x31a246[_0x3b1349(0x62e)]/0x2),_0x31a246['sliceMax']=_0x31a246[_0x3b1349(0x62e)],_0x31a246[_0x3b1349(0x9a0)]=!![];for(const _0x42bca3 of _0x4256cc){if(!_0x42bca3)continue;_0x42bca3['setHorrorEffectSettings'](_0xdf8c23,_0x31a246);}$gamePlayer[_0x3b1349(0x290)]();}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],'ActSeq_Horror_GlitchRemove',_0x2e02c6=>{const _0x40ae21=_0x44efce;if(!Imported[_0x40ae21(0x649)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x40ae21(0x878)](_0x2e02c6,_0x2e02c6);const _0x95052f=VisuMZ[_0x40ae21(0x57d)](_0x2e02c6[_0x40ae21(0x285)]);for(const _0x30947e of _0x95052f){if(!_0x30947e)continue;_0x30947e[_0x40ae21(0x898)](_0x40ae21(0xed));}$gamePlayer['refresh']();}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0xb5d),_0x95e215=>{const _0x247b6e=_0x44efce;if(!Imported[_0x247b6e(0x649)])return;if(!SceneManager[_0x247b6e(0xbab)]())return;VisuMZ[_0x247b6e(0x878)](_0x95e215,_0x95e215);const _0x4f718d=VisuMZ['CreateActionSequenceTargets'](_0x95e215[_0x247b6e(0x285)]),_0x37f012='noise';for(const _0x39627d of _0x4f718d){if(!_0x39627d)continue;_0x39627d[_0x247b6e(0x6b8)](_0x37f012,_0x95e215);}$gamePlayer[_0x247b6e(0x290)]();}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],'ActSeq_Horror_NoiseRemove',_0x404d3b=>{const _0x18bfef=_0x44efce;if(!Imported[_0x18bfef(0x649)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x404d3b,_0x404d3b);const _0x5ee140=VisuMZ[_0x18bfef(0x57d)](_0x404d3b[_0x18bfef(0x285)]);for(const _0x3ebe6d of _0x5ee140){if(!_0x3ebe6d)continue;_0x3ebe6d[_0x18bfef(0x898)](_0x18bfef(0x9bf));}$gamePlayer[_0x18bfef(0x290)]();}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],'ActSeq_Horror_TVCreate',_0x52a663=>{const _0x5a07c7=_0x44efce;if(!Imported[_0x5a07c7(0x649)])return;if(!SceneManager[_0x5a07c7(0xbab)]())return;VisuMZ[_0x5a07c7(0x878)](_0x52a663,_0x52a663);const _0x43f81c=VisuMZ[_0x5a07c7(0x57d)](_0x52a663[_0x5a07c7(0x285)]),_0x267511='tv';for(const _0x44a657 of _0x43f81c){if(_0x5a07c7(0x4ed)===_0x5a07c7(0x4ed)){if(!_0x44a657)continue;_0x44a657[_0x5a07c7(0x6b8)](_0x267511,_0x52a663);}else return _0x98b02f[_0x5a07c7(0x77d)][_0x5a07c7(0xab6)](/<COMMAND ICON: (\d+)>/i)?_0x1b3703(_0x42ef1c['$1']):_0x39f7ca['iconIndex'];}$gamePlayer['refresh']();}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x8ef),_0x28a9c3=>{const _0x2d2e05=_0x44efce;if(!Imported[_0x2d2e05(0x649)])return;if(!SceneManager[_0x2d2e05(0xbab)]())return;VisuMZ[_0x2d2e05(0x878)](_0x28a9c3,_0x28a9c3);const _0x106768=VisuMZ[_0x2d2e05(0x57d)](_0x28a9c3[_0x2d2e05(0x285)]);for(const _0x56a90b of _0x106768){if(!_0x56a90b)continue;_0x56a90b[_0x2d2e05(0x898)]('tv');}$gamePlayer[_0x2d2e05(0x290)]();}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],_0x44efce(0x692),_0x4b4cb4=>{const _0x27ecf8=_0x44efce;if(!Imported[_0x27ecf8(0x8d9)])return;const _0x22b736=SceneManager['_scene']['_spriteset'];if(!_0x22b736)return;if(VisuMZ['ActSeqImpact'][_0x27ecf8(0x1e5)]<=1.04){alert(_0x27ecf8(0xb74)),SceneManager[_0x27ecf8(0xb2e)]();return;}VisuMZ[_0x27ecf8(0x878)](_0x4b4cb4,_0x4b4cb4);const _0x1ac10c=_0x4b4cb4[_0x27ecf8(0x4fe)];_0x22b736['setupBlueRedInvertImpactFilter'](_0x1ac10c);}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],'ActSeq_Impact_ColorBreak',_0x3e994b=>{const _0x57ea09=_0x44efce;if(!SceneManager[_0x57ea09(0xbab)]())return;if(!Imported[_0x57ea09(0x8d9)])return;const _0x58947f=SceneManager[_0x57ea09(0x45b)][_0x57ea09(0x948)];if(!_0x58947f)return;VisuMZ[_0x57ea09(0x878)](_0x3e994b,_0x3e994b);const _0x22678a=_0x3e994b[_0x57ea09(0xaf)]||0x1,_0x4fac32=_0x3e994b[_0x57ea09(0x3c2)]||0x1,_0x32d2e9=_0x3e994b['EasingType']||_0x57ea09(0x221);_0x58947f['setupRgbSplitImpactFilter'](_0x22678a,_0x4fac32,_0x32d2e9);}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],'ActSeq_Impact_Desaturate',_0x486163=>{const _0x4b17f6=_0x44efce;if(!Imported[_0x4b17f6(0x8d9)])return;const _0x35c8ed=SceneManager[_0x4b17f6(0x45b)]['_spriteset'];if(!_0x35c8ed)return;if(VisuMZ[_0x4b17f6(0xb1d)][_0x4b17f6(0x1e5)]<=1.04){if('auJyh'===_0x4b17f6(0x75c))_0x5c661f[_0x4b17f6(0x12d)]()[_0x4b17f6(0x2cc)]?this[_0x4b17f6(0xb70)](_0x4b17f6(0x854),_0x16aaf6):this['push'](_0x4b17f6(0x148),_0x32cf70);else{alert(_0x4b17f6(0xb74)),SceneManager[_0x4b17f6(0xb2e)]();return;}}VisuMZ[_0x4b17f6(0x878)](_0x486163,_0x486163);const _0x4c3cd6=_0x486163[_0x4b17f6(0x4fe)];_0x35c8ed['setupDesaturateImpactFilter'](_0x4c3cd6);}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],_0x44efce(0x608),_0x128978=>{const _0x5727f5=_0x44efce;if(!SceneManager[_0x5727f5(0xbab)]())return;if(!Imported[_0x5727f5(0x8d9)])return;const _0x51354f=SceneManager[_0x5727f5(0x45b)][_0x5727f5(0x948)];if(!_0x51354f)return;VisuMZ[_0x5727f5(0x878)](_0x128978,_0x128978);const _0x5603e0=Number(_0x128978[_0x5727f5(0x337)])||0x0,_0x4fe34c=Number(_0x128978['Rate']),_0x1f7361=_0x128978['Duration']||0x1,_0x54fad6=_0x128978[_0x5727f5(0x2f9)]||_0x5727f5(0x221);_0x51354f[_0x5727f5(0xb07)](_0x5603e0,_0x4fe34c,_0x1f7361,_0x54fad6);}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],'ActSeq_Impact_MotionBlurTarget',_0x29aa1a=>{const _0x248d9a=_0x44efce;if(!SceneManager[_0x248d9a(0xbab)]())return;if(!Imported[_0x248d9a(0x8d9)])return;const _0x16ae3a=SceneManager['_scene']['_spriteset'];if(!_0x16ae3a)return;VisuMZ['ConvertParams'](_0x29aa1a,_0x29aa1a);const _0x4b1b6c=Number(_0x29aa1a[_0x248d9a(0x337)])||0x0,_0x360a80=Number(_0x29aa1a[_0x248d9a(0x13e)]),_0x4e7cc5=_0x29aa1a[_0x248d9a(0x3c2)]||0x1,_0x7b56b8=_0x29aa1a[_0x248d9a(0x2f9)]||'Linear',_0x48fa85=VisuMZ[_0x248d9a(0x57d)](_0x29aa1a[_0x248d9a(0x285)]);for(const _0xbf9088 of _0x48fa85){if('KFoLZ'!==_0x248d9a(0xa39)){if(!_0xbf9088)continue;if(!_0xbf9088[_0x248d9a(0x6dd)]())continue;_0xbf9088[_0x248d9a(0x6dd)]()['setupMotionBlurImpactFilter'](_0x4b1b6c,_0x360a80,_0x4e7cc5,_0x7b56b8);}else{const _0x70b2bc=_0x2aed05[_0x248d9a(0x47e)]('['+_0x103793['$1']['match'](/\d+/g)+']');for(const _0x4adb22 of _0x70b2bc){if(!_0x10f7ac[_0x248d9a(0x18d)](_0x4adb22))return![];}return!![];}}}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x946),_0xb8a1dc=>{const _0x3acc1e=_0x44efce;if(!SceneManager[_0x3acc1e(0xbab)]())return;if(!Imported[_0x3acc1e(0x8d9)])return;VisuMZ['ConvertParams'](_0xb8a1dc,_0xb8a1dc);const _0x37d88e={'delay':_0xb8a1dc[_0x3acc1e(0xab5)],'duration':_0xb8a1dc['duration'],'hue':_0xb8a1dc[_0x3acc1e(0x930)],'opacityStart':_0xb8a1dc['opacityStart'],'tone':_0xb8a1dc['tone'],'visible':!![]},_0x1ba20a=VisuMZ[_0x3acc1e(0x57d)](_0xb8a1dc[_0x3acc1e(0x285)]);for(const _0x1b7555 of _0x1ba20a){if('xcxte'!==_0x3acc1e(0x1d4))return _0x23cc25[_0x3acc1e(0x277)]();else{if(!_0x1b7555)continue;_0x1b7555[_0x3acc1e(0x867)](_0x37d88e);}}}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],_0x44efce(0x958),_0x18d707=>{const _0x20f1bb=_0x44efce;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x20f1bb(0x8d9)])return;VisuMZ['ConvertParams'](_0x18d707,_0x18d707);const _0x9216eb=VisuMZ['CreateActionSequenceTargets'](_0x18d707['Targets']);for(const _0x6b36f8 of _0x9216eb){if(_0x20f1bb(0x8cb)===_0x20f1bb(0x8cb)){if(!_0x6b36f8)continue;_0x6b36f8['clearBattlerMotionTrailData']();}else{if(!_0x424f3d)return;if(!this[_0x20f1bb(0xb1e)])return;this['_mainSprite'][_0x20f1bb(0x20c)]['x']=this['_actor'][_0x20f1bb(0xf2)](),this['_mainSprite'][_0x20f1bb(0x20c)]['y']=this[_0x20f1bb(0x81e)][_0x20f1bb(0x371)](),this[_0x20f1bb(0x500)]();}}}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x85f),_0x53ab74=>{const _0x5540a3=_0x44efce;if(!Imported[_0x5540a3(0x8d9)])return;const _0x1ddb93=SceneManager['_scene'][_0x5540a3(0x948)];if(!_0x1ddb93)return;if(VisuMZ[_0x5540a3(0xb1d)][_0x5540a3(0x1e5)]<=1.04){alert(_0x5540a3(0xb74)),SceneManager[_0x5540a3(0xb2e)]();return;}VisuMZ[_0x5540a3(0x878)](_0x53ab74,_0x53ab74);const _0x524f13=_0x53ab74[_0x5540a3(0x4fe)];_0x1ddb93[_0x5540a3(0x32e)](_0x524f13);}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],_0x44efce(0x95d),_0x186a27=>{const _0x27adeb=_0x44efce;if(!Imported[_0x27adeb(0x8d9)])return;const _0x1017e3=SceneManager['_scene'][_0x27adeb(0x948)];if(!_0x1017e3)return;if(VisuMZ['ActSeqImpact'][_0x27adeb(0x1e5)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x27adeb(0xb2e)]();return;}VisuMZ[_0x27adeb(0x878)](_0x186a27,_0x186a27);const _0x2858d3=_0x186a27['Enable'];_0x1017e3[_0x27adeb(0x8f9)](_0x2858d3);}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],'ActSeq_Impact_ShockwavePoint',_0x77106e=>{const _0xabad5c=_0x44efce;if(!Imported[_0xabad5c(0x8d9)])return;const _0x34aedd=SceneManager[_0xabad5c(0x45b)][_0xabad5c(0x948)];if(!_0x34aedd)return;VisuMZ[_0xabad5c(0x878)](_0x77106e,_0x77106e);const _0x47c506=_0x77106e['X']||0x0,_0x558833=_0x77106e['Y']||0x0,_0xbe4f65=_0x77106e[_0xabad5c(0x73e)]||0x0,_0x51e622=_0x77106e[_0xabad5c(0x6ff)]||0x0,_0x1c97a3=_0x77106e['Duration']||0x1;_0x34aedd[_0xabad5c(0x279)](_0x47c506,_0x558833,_0xbe4f65,_0x51e622,_0x1c97a3);}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],_0x44efce(0x8c9),_0x12c994=>{const _0x18d909=_0x44efce;if(!SceneManager[_0x18d909(0xbab)]())return;if(!Imported[_0x18d909(0x8d9)])return;const _0x5e0b90=SceneManager[_0x18d909(0x45b)][_0x18d909(0x948)];if(!_0x5e0b90)return;VisuMZ[_0x18d909(0x878)](_0x12c994,_0x12c994);const _0x1f5990=VisuMZ['CreateActionSequenceTargets'](_0x12c994['Targets']),_0x39a734=_0x12c994[_0x18d909(0x197)],_0x426539=_0x12c994[_0x18d909(0xfe)]||0x0,_0x4835fb=_0x12c994['OffsetY']||0x0,_0x1f5ec0=_0x12c994[_0x18d909(0x73e)]||0x0,_0x1c0be1=_0x12c994['Wave']||0x0,_0xb52aa1=_0x12c994[_0x18d909(0x3c2)]||0x1;for(const _0x3caef0 of _0x1f5990){if(!_0x3caef0)continue;if(!_0x3caef0[_0x18d909(0x6dd)]())continue;const _0x45badc=_0x3caef0[_0x18d909(0x6dd)]();let _0x620e3c=_0x45badc[_0x18d909(0x5f2)],_0x2fea60=_0x45badc[_0x18d909(0xbb8)];_0x620e3c+=(Graphics[_0x18d909(0x542)]-Graphics[_0x18d909(0x613)])/0x2,_0x2fea60+=(Graphics[_0x18d909(0x737)]-Graphics[_0x18d909(0x165)])/0x2;if(_0x39a734[_0x18d909(0xab6)](/front/i))_0x620e3c+=(_0x3caef0[_0x18d909(0x851)]()?0x1:-0x1)*_0x45badc[_0x18d909(0xa12)]()/0x2;else{if(_0x39a734[_0x18d909(0xab6)](/back/i)){if(_0x18d909(0x88b)!==_0x18d909(0x88b)){const _0x2f919f=this[_0x18d909(0xae1)];_0x2f919f[_0x18d909(0x9d8)](_0x4f4937,0x0,_0x389beb['y'],_0x2f919f[_0x18d909(0x5f4)],_0x18d909(0x281));}else _0x620e3c+=(_0x3caef0['isEnemy']()?-0x1:0x1)*_0x45badc[_0x18d909(0xa12)]()/0x2;}}if(_0x39a734[_0x18d909(0xab6)](/head/i))_0x2fea60-=_0x45badc[_0x18d909(0x24c)]();else _0x39a734[_0x18d909(0xab6)](/center/i)&&('HDcFY'!==_0x18d909(0x3b0)?_0x40ad9f[_0x18d909(0x99e)]():_0x2fea60-=_0x45badc['mainSpriteHeight']()/0x2);_0x620e3c+=_0x426539,_0x2fea60+=_0x4835fb,_0x5e0b90['setupShockwaveImpactFilter'](_0x620e3c,_0x2fea60,_0x1f5ec0,_0x1c0be1,_0xb52aa1);}}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x7c7),_0x35b1d9=>{const _0xc27c32=_0x44efce;if(!SceneManager[_0xc27c32(0xbab)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x88dc6b=SceneManager[_0xc27c32(0x45b)][_0xc27c32(0x948)];if(!_0x88dc6b)return;VisuMZ[_0xc27c32(0x878)](_0x35b1d9,_0x35b1d9);const _0x17a2aa=VisuMZ[_0xc27c32(0x57d)](_0x35b1d9[_0xc27c32(0x285)]),_0x28b98=_0x35b1d9[_0xc27c32(0x197)],_0x1d4f85=_0x35b1d9[_0xc27c32(0xfe)]||0x0,_0x5d2f9d=_0x35b1d9['OffsetY']||0x0,_0x2e6c27=_0x35b1d9[_0xc27c32(0x73e)]||0x0,_0x5b5fc1=_0x35b1d9['Wave']||0x0,_0x3bbde1=_0x35b1d9[_0xc27c32(0x3c2)]||0x1,_0x3b0467=Math['min'](..._0x17a2aa[_0xc27c32(0xba3)](_0x5b81f1=>_0x5b81f1[_0xc27c32(0x6dd)]()[_0xc27c32(0x5f2)]-_0x5b81f1[_0xc27c32(0x6dd)]()[_0xc27c32(0xa12)]()/0x2)),_0x474881=Math[_0xc27c32(0x65c)](..._0x17a2aa[_0xc27c32(0xba3)](_0x574bc3=>_0x574bc3[_0xc27c32(0x6dd)]()[_0xc27c32(0x5f2)]+_0x574bc3[_0xc27c32(0x6dd)]()[_0xc27c32(0xa12)]()/0x2)),_0x1d1aeb=Math[_0xc27c32(0x90c)](..._0x17a2aa['map'](_0x4c1820=>_0x4c1820['battler']()[_0xc27c32(0xbb8)]-_0x4c1820[_0xc27c32(0x6dd)]()[_0xc27c32(0x24c)]())),_0x49cc53=Math['max'](..._0x17a2aa[_0xc27c32(0xba3)](_0x3559f3=>_0x3559f3[_0xc27c32(0x6dd)]()[_0xc27c32(0xbb8)])),_0x3d5838=_0x17a2aa[_0xc27c32(0xc9)](_0x52133f=>_0x52133f['isActor']())[_0xc27c32(0x496)],_0x48d324=_0x17a2aa[_0xc27c32(0xc9)](_0x44e646=>_0x44e646[_0xc27c32(0x851)]())['length'];let _0xfc27c0=0x0,_0x491208=0x0;if(_0x28b98[_0xc27c32(0xab6)](/front/i)){if('adsZC'!==_0xc27c32(0x9db))return this[_0xc27c32(0x8f0)]()[_0xc27c32(0x858)]();else _0xfc27c0=_0x3d5838>=_0x48d324?_0x3b0467:_0x474881;}else{if(_0x28b98[_0xc27c32(0xab6)](/middle/i))_0xc27c32(0xb3f)===_0xc27c32(0x549)?(this[_0xc27c32(0x623)]('BattleVictoryJS'),_0x316701['BattleCore'][_0xc27c32(0x28c)][_0xc27c32(0xb59)](this),this[_0xc27c32(0x217)](_0xc27c32(0x711))):(_0xfc27c0=(_0x3b0467+_0x474881)/0x2,melee=-0x1);else _0x28b98[_0xc27c32(0xab6)](/back/i)&&(_0xfc27c0=_0x3d5838>=_0x48d324?_0x474881:_0x3b0467);}if(_0x28b98[_0xc27c32(0xab6)](/head/i))_0x491208=_0x1d1aeb;else{if(_0x28b98[_0xc27c32(0xab6)](/center/i)){if(_0xc27c32(0x7ed)===_0xc27c32(0x7ed))_0x491208=(_0x1d1aeb+_0x49cc53)/0x2;else{if(!this['isOptionsCommandAdded']())return;const _0x23d90e=this[_0xc27c32(0x7f3)](),_0x566ca1=_0x122d7a[_0xc27c32(0x6d0)][_0xc27c32(0x444)][_0xc27c32(0x283)][_0xc27c32(0x46e)],_0x4b1a11=_0x23d90e==='text'?_0x5186ca[_0xc27c32(0x3eb)]:'\x5cI[%1]%2'[_0xc27c32(0x437)](_0x566ca1,_0x316147['options']),_0x2346c2=this['isOptionsCommandEnabled']();this[_0xc27c32(0x929)](_0x4b1a11,_0xc27c32(0x3eb),_0x2346c2);}}else _0x28b98['match'](/base/i)&&(_0x491208=_0x49cc53);}_0xfc27c0+=(Graphics['width']-Graphics['boxWidth'])/0x2,_0x491208+=(Graphics['height']-Graphics['boxHeight'])/0x2,_0xfc27c0+=_0x1d4f85,_0x491208+=_0x5d2f9d,_0x88dc6b[_0xc27c32(0x279)](_0xfc27c0,_0x491208,_0x2e6c27,_0x5b5fc1,_0x3bbde1);}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],'ActSeq_Impact_TimeScale',_0x117d5f=>{const _0x13f15c=_0x44efce;if(!Imported[_0x13f15c(0x8d9)])return;const _0x22fbd8=SceneManager[_0x13f15c(0x45b)][_0x13f15c(0x948)];if(!_0x22fbd8)return;if(VisuMZ['ActSeqImpact'][_0x13f15c(0x1e5)]<=1.04){alert(_0x13f15c(0xb74)),SceneManager[_0x13f15c(0xb2e)]();return;}VisuMZ[_0x13f15c(0x878)](_0x117d5f,_0x117d5f);const _0x5142e5=$gameTemp[_0x13f15c(0x3f8)](),_0x474634=Math[_0x13f15c(0x65c)](0.01,_0x117d5f[_0x13f15c(0xaf5)]);$gameTemp[_0x13f15c(0xb42)](_0x474634,_0x5142e5);}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],'ActSeq_Impact_TimeStop',_0xebeae2=>{const _0x6adae0=_0x44efce;if(!Imported[_0x6adae0(0x8d9)])return;const _0x200f6a=SceneManager[_0x6adae0(0x45b)]['_spriteset'];if(!_0x200f6a)return;if(VisuMZ['ActSeqImpact'][_0x6adae0(0x1e5)]<=1.04){alert(_0x6adae0(0xb74)),SceneManager[_0x6adae0(0xb2e)]();return;}VisuMZ[_0x6adae0(0x878)](_0xebeae2,_0xebeae2);const _0x1dc43b=$gameTemp['getLastPluginCommandInterpreter'](),_0x514635=_0xebeae2['ms']||0x1;VisuMZ[_0x6adae0(0xb1d)][_0x6adae0(0x597)](_0x514635,_0x1dc43b);}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],'ActSeq_Impact_ZoomBlurPoint',_0x585c72=>{const _0x27ddf0=_0x44efce;if(!Imported[_0x27ddf0(0x8d9)])return;const _0x5637cf=SceneManager[_0x27ddf0(0x45b)]['_spriteset'];if(!_0x5637cf)return;VisuMZ[_0x27ddf0(0x878)](_0x585c72,_0x585c72);const _0x50efc7=_0x585c72['X']||0x0,_0x330052=_0x585c72['Y']||0x0,_0x2a3b95=_0x585c72['Strength']||0x0,_0x9bd7c0=_0x585c72['Radius']||0x0,_0x28aeb0=_0x585c72[_0x27ddf0(0x3c2)]||0x1,_0x37cdc2=_0x585c72['EasingType']||'Linear';_0x5637cf[_0x27ddf0(0x859)](_0x2a3b95,_0x50efc7,_0x330052,_0x9bd7c0,_0x28aeb0,_0x37cdc2);}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],'ActSeq_Impact_ZoomBlurTargetCenter',_0x38713a=>{const _0x1a900e=_0x44efce;if(!Imported[_0x1a900e(0x8d9)])return;const _0x321104=SceneManager[_0x1a900e(0x45b)][_0x1a900e(0x948)];if(!_0x321104)return;VisuMZ[_0x1a900e(0x878)](_0x38713a,_0x38713a);const _0x5ef735=VisuMZ[_0x1a900e(0x57d)](_0x38713a['Targets']),_0x349c98=_0x38713a[_0x1a900e(0x197)],_0x1f5602=_0x38713a[_0x1a900e(0xfe)]||0x0,_0x10d592=_0x38713a[_0x1a900e(0x8cc)]||0x0,_0x3fe454=_0x38713a[_0x1a900e(0x92d)]||0x0,_0x595a42=_0x38713a[_0x1a900e(0x55d)]||0x0,_0x511add=_0x38713a[_0x1a900e(0x3c2)]||0x1,_0x9d417e=_0x38713a[_0x1a900e(0x2f9)]||_0x1a900e(0x221),_0x33ea10=Math['min'](..._0x5ef735[_0x1a900e(0xba3)](_0x44b493=>_0x44b493['battler']()[_0x1a900e(0x5f2)]-_0x44b493[_0x1a900e(0x6dd)]()[_0x1a900e(0xa12)]()/0x2)),_0x44df70=Math[_0x1a900e(0x65c)](..._0x5ef735[_0x1a900e(0xba3)](_0x21cd07=>_0x21cd07[_0x1a900e(0x6dd)]()[_0x1a900e(0x5f2)]+_0x21cd07[_0x1a900e(0x6dd)]()[_0x1a900e(0xa12)]()/0x2)),_0x14cf1d=Math[_0x1a900e(0x90c)](..._0x5ef735[_0x1a900e(0xba3)](_0x2e8fd7=>_0x2e8fd7[_0x1a900e(0x6dd)]()['_baseY']-_0x2e8fd7[_0x1a900e(0x6dd)]()['mainSpriteHeight']())),_0x59b99a=Math['max'](..._0x5ef735['map'](_0x510312=>_0x510312[_0x1a900e(0x6dd)]()[_0x1a900e(0xbb8)])),_0x31f106=_0x5ef735['filter'](_0x8e776e=>_0x8e776e[_0x1a900e(0x8de)]())[_0x1a900e(0x496)],_0x3c9228=_0x5ef735[_0x1a900e(0xc9)](_0x465333=>_0x465333[_0x1a900e(0x851)]())[_0x1a900e(0x496)];let _0x5829da=0x0,_0x2b4a81=0x0;if(_0x349c98[_0x1a900e(0xab6)](/front/i)){if(_0x1a900e(0x8b8)!==_0x1a900e(0x1c9))_0x5829da=_0x31f106>=_0x3c9228?_0x33ea10:_0x44df70;else{if(!_0x3aa635[_0x1a900e(0xbab)]())return;if(!_0x4ef38b[_0x1a900e(0x8d9)])return;const _0xbd3e6e=_0x220bd0[_0x1a900e(0x45b)]['_spriteset'];if(!_0xbd3e6e)return;_0x5932f4[_0x1a900e(0x878)](_0x214814,_0xa352eb);const _0x2a2d7b=_0x339756[_0x1a900e(0xaf)]||0x1,_0x8f75ca=_0x1f7e1d[_0x1a900e(0x3c2)]||0x1,_0x2d4d4b=_0x146fd2['EasingType']||'Linear';_0xbd3e6e[_0x1a900e(0x536)](_0x2a2d7b,_0x8f75ca,_0x2d4d4b);}}else{if(_0x349c98[_0x1a900e(0xab6)](/middle/i))_0x1a900e(0x9ba)!==_0x1a900e(0x63e)?(_0x5829da=(_0x33ea10+_0x44df70)/0x2,melee=-0x1):_0x16a7f0[_0x1a900e(0x118)]([_0x384a58]);else _0x349c98[_0x1a900e(0xab6)](/back/i)&&('VUYSm'===_0x1a900e(0x3d1)?this[_0x1a900e(0x8e1)]():_0x5829da=_0x31f106>=_0x3c9228?_0x44df70:_0x33ea10);}if(_0x349c98['match'](/head/i))_0x2b4a81=_0x14cf1d;else{if(_0x349c98['match'](/center/i)){if('isKik'===_0x1a900e(0xae2)){if(!_0x54df2f['isSceneBattle']())return;const _0x10e450=_0x214292[_0x1a900e(0x3f8)](),_0x150535=_0x46ffe6[_0x1a900e(0x1db)],_0x19a5e7=_0x5405c3[_0x1a900e(0x427)],_0x5af534=_0x270948[_0x1a900e(0x8fd)];if(!_0x10e450||!_0x150535||!_0x19a5e7)return;if(!_0x150535[_0x1a900e(0x987)]())return;_0x5af534[_0x1a900e(0x1ff)](_0x19a5e7,_0x150535[_0x1a900e(0x987)]()),_0x10e450[_0x1a900e(0x227)](_0x1a900e(0x35b));}else _0x2b4a81=(_0x14cf1d+_0x59b99a)/0x2;}else{if(_0x349c98['match'](/base/i)){if(_0x1a900e(0x287)!=='uYqHi')return![];else _0x2b4a81=_0x59b99a;}}}_0x5829da+=(Graphics[_0x1a900e(0x542)]-Graphics['boxWidth'])/0x2,_0x2b4a81+=(Graphics[_0x1a900e(0x737)]-Graphics[_0x1a900e(0x165)])/0x2,_0x5829da+=_0x1f5602,_0x2b4a81+=_0x10d592,_0x321104[_0x1a900e(0x859)](_0x3fe454,_0x5829da,_0x2b4a81,_0x595a42,_0x511add,_0x9d417e);}),PluginManager[_0x44efce(0x5e6)](pluginData['name'],'ActSeq_Inject_AnimationStart',_0x140561=>{const _0x1c7526=_0x44efce;if(!Imported[_0x1c7526(0x8d9)])return;const _0x773eb1=SceneManager[_0x1c7526(0x45b)][_0x1c7526(0x948)];if(!_0x773eb1)return;if(VisuMZ[_0x1c7526(0xb1d)][_0x1c7526(0x1e5)]<=1.05){alert(_0x1c7526(0xb74)),SceneManager[_0x1c7526(0xb2e)]();return;}VisuMZ[_0x1c7526(0x878)](_0x140561,_0x140561);const _0x30eb31=VisuMZ[_0x1c7526(0x57d)](_0x140561[_0x1c7526(0x285)]),_0x5a01e4={'filename':_0x140561[_0x1c7526(0x9c6)],'horzCells':_0x140561['horzCells']||0x1,'vertCells':_0x140561['vertCells']||0x1,'frameDelay':_0x140561[_0x1c7526(0x25e)]||0x1,'smooth':_0x140561['smooth']||![],'anchorX':_0x140561[_0x1c7526(0xabb)]||0x0,'anchorY':_0x140561[_0x1c7526(0xb9d)]||0x0,'offsetX':_0x140561[_0x1c7526(0x377)]||0x0,'offsetY':_0x140561[_0x1c7526(0xacd)]||0x0};for(const _0x31fd70 of _0x30eb31){if(!_0x31fd70)continue;if(!_0x31fd70['battler']())continue;_0x31fd70['battler']()[_0x1c7526(0x4bf)](_0x5a01e4);}const _0xab0cc7=$gameTemp['getLastPluginCommandInterpreter']();_0xab0cc7&&_0xab0cc7[_0x1c7526(0x227)](_0x1c7526(0x4a4));}),PluginManager[_0x44efce(0x5e6)](pluginData['name'],'ActSeq_Inject_AnimationEnd',_0x326b3d=>{const _0x69327b=_0x44efce;if(!Imported[_0x69327b(0x8d9)])return;const _0x575848=SceneManager[_0x69327b(0x45b)][_0x69327b(0x948)];if(!_0x575848)return;if(VisuMZ['ActSeqImpact']['version']<=1.05){if(_0x69327b(0x335)===_0x69327b(0x1a8)){if(this[_0x69327b(0x4cd)]>0x0)this[_0x69327b(0x4cd)]-=0x10;}else{alert(_0x69327b(0xb74)),SceneManager[_0x69327b(0xb2e)]();return;}}VisuMZ['ConvertParams'](_0x326b3d,_0x326b3d);const _0x1d862a=VisuMZ[_0x69327b(0x57d)](_0x326b3d['Targets']);for(const _0x540ffc of _0x1d862a){if(!_0x540ffc)continue;if(!_0x540ffc['battler']())continue;_0x540ffc['battler']()['stopInjectAnimation']();}}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0xb28),_0x2793ad=>{const _0x1cba0d=_0x44efce;if(!Imported[_0x1cba0d(0x8d9)])return;const _0x28d800=SceneManager[_0x1cba0d(0x45b)][_0x1cba0d(0x948)];if(!_0x28d800)return;if(VisuMZ['ActSeqImpact'][_0x1cba0d(0x1e5)]<=1.05){alert(_0x1cba0d(0xb74)),SceneManager[_0x1cba0d(0xb2e)]();return;}VisuMZ[_0x1cba0d(0x878)](_0x2793ad,_0x2793ad);const _0x30f0e1=VisuMZ[_0x1cba0d(0x57d)](_0x2793ad[_0x1cba0d(0x285)]),_0x416e69=_0x2793ad[_0x1cba0d(0x700)];for(const _0x454aba of _0x30f0e1){if(!_0x454aba)continue;if(!_0x454aba[_0x1cba0d(0x6dd)]())continue;_0x454aba[_0x1cba0d(0x6dd)]()[_0x1cba0d(0x5b6)](_0x416e69);}}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x942),_0x1a1bf4=>{const _0x5dc292=_0x44efce;if(!SceneManager[_0x5dc292(0xbab)]())return;const _0x1b9bf9=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x1b9bf9)return;_0x1b9bf9[_0x5dc292(0x227)](_0x5dc292(0x296));}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x9f0),_0x25e2eb=>{const _0x42489d=_0x44efce;if(!SceneManager[_0x42489d(0xbab)]())return;VisuMZ[_0x42489d(0x878)](_0x25e2eb,_0x25e2eb);const _0xb05424=$gameTemp[_0x42489d(0x3f8)](),_0x4484ca=BattleManager[_0x42489d(0x1db)],_0x59c48b=BattleManager[_0x42489d(0x427)],_0x1515fa=BattleManager[_0x42489d(0x8fd)];if(!_0xb05424||!_0x4484ca||!_0x59c48b)return;if(!_0x4484ca[_0x42489d(0x987)]())return;const _0x5b0f5d=VisuMZ['CreateActionSequenceTargets'](_0x25e2eb[_0x42489d(0x285)]);for(const _0x14fcda of _0x5b0f5d){if(_0x42489d(0x865)!==_0x42489d(0x865)){const _0x493a4e=_0x55062c['regionId'](_0x407dde['x'],_0x7f708d['y']);if(this[_0x42489d(0x76c)]&&this[_0x42489d(0x76c)][_0x493a4e])return this[_0x42489d(0x76c)][_0x493a4e];}else{if(!_0x14fcda)continue;_0x1515fa[_0x42489d(0xb70)]('actionEffect',_0x59c48b,_0x14fcda);}}_0xb05424[_0x42489d(0x227)](_0x42489d(0x35b));}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x99f),_0x1a1839=>{const _0x150e24=_0x44efce;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x150e24(0x878)](_0x1a1839,_0x1a1839);const _0x25aeb2=[_0x150e24(0x888),'MAXMP',_0x150e24(0x817),_0x150e24(0x720),_0x150e24(0x275),_0x150e24(0x2cb),_0x150e24(0x4f2),'LUK'],_0x368676=_0x1a1839[_0x150e24(0x844)],_0x224dc2=_0x1a1839[_0x150e24(0x568)],_0x37245b=_0x1a1839['Turns'],_0x2844f8=VisuMZ[_0x150e24(0x57d)](_0x1a1839['Targets']);for(const _0xd36edc of _0x2844f8){if(!_0xd36edc)continue;for(const _0x4cf0fd of _0x368676){const _0x29d9f1=_0x25aeb2[_0x150e24(0x963)](_0x4cf0fd[_0x150e24(0xb2d)]()[_0x150e24(0xaef)]());_0x29d9f1>=0x0&&_0x29d9f1<=0x7&&(_0x150e24(0x769)!=='CIKMO'?_0xd36edc[_0x150e24(0x348)](_0x29d9f1,_0x37245b):(_0x2fae24['prototype']['_updateFilterArea'][_0x150e24(0xb59)](this),this[_0x150e24(0x29d)]()));}for(const _0x24effe of _0x224dc2){if(_0x150e24(0x120)===_0x150e24(0x120)){const _0x2cd19d=_0x25aeb2['indexOf'](_0x24effe['toUpperCase']()['trim']());_0x2cd19d>=0x0&&_0x2cd19d<=0x7&&_0xd36edc[_0x150e24(0x652)](_0x2cd19d,_0x37245b);}else{if(!this[_0x150e24(0x575)]())return;if(!this['_borderPortraitSprite'])this[_0x150e24(0x535)]();this[_0x150e24(0x434)](),this[_0x150e24(0x477)]();}}}}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x9bb),_0x11562a=>{const _0x3cb6ea=_0x44efce;if(!SceneManager[_0x3cb6ea(0xbab)]())return;VisuMZ[_0x3cb6ea(0x878)](_0x11562a,_0x11562a);const _0x24d27a=_0x11562a[_0x3cb6ea(0x220)],_0x542279=VisuMZ[_0x3cb6ea(0x57d)](_0x11562a[_0x3cb6ea(0x285)]);for(const _0x45d4c0 of _0x542279){if(!_0x45d4c0)continue;for(const _0x747da9 of _0x24d27a){_0x45d4c0[_0x3cb6ea(0xb9f)](_0x747da9);}}}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],'ActSeq_Mechanics_ArmorPenetration',_0x2f326e=>{const _0x333e60=_0x44efce;if(!SceneManager[_0x333e60(0xbab)]())return;VisuMZ[_0x333e60(0x878)](_0x2f326e,_0x2f326e);const _0x3c800f=BattleManager['_action'],_0x18a150={'arPenRate':_0x2f326e['ArPenRate'],'arPenFlat':_0x2f326e[_0x333e60(0x11c)],'arRedRate':_0x2f326e[_0x333e60(0xb49)],'arRedFlat':_0x2f326e['ArRedFlat']};_0x3c800f['_armorPenetration']=_0x18a150;}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x223),_0x3d1175=>{const _0x2da19b=_0x44efce;if(!SceneManager[_0x2da19b(0xbab)]())return;if(!Imported[_0x2da19b(0x21b)])return;VisuMZ[_0x2da19b(0x878)](_0x3d1175,_0x3d1175);const _0x280ae5=VisuMZ[_0x2da19b(0x57d)](_0x3d1175[_0x2da19b(0x285)]),_0x375d36=_0x3d1175['Reveal']||0x1;for(const _0x382f1c of _0x280ae5){if('mAKmq'==='UXxzU')_0x2faebb=_0x1dde51[_0x2da19b(0xa3a)](_0x37c432['random']()*(_0x2ef464+0x1)),_0x1502ca=_0x203939[_0x4aa180],_0x558380[_0x17b1b8]=_0x28f44d[_0x180316],_0x54315f[_0x311671]=_0x12250a;else{if(!_0x382f1c)continue;if(!_0x382f1c[_0x2da19b(0x851)]())continue;_0x382f1c[_0x2da19b(0x1dc)](_0x375d36);}}}),PluginManager[_0x44efce(0x5e6)](pluginData['name'],_0x44efce(0x71a),_0x8aff94=>{const _0x5846d4=_0x44efce;if(!SceneManager[_0x5846d4(0xbab)]())return;if(!Imported[_0x5846d4(0x8ed)])return;if(!BattleManager[_0x5846d4(0x73a)]())return;VisuMZ['ConvertParams'](_0x8aff94,_0x8aff94);const _0x37f9a9=VisuMZ[_0x5846d4(0x57d)](_0x8aff94['Targets']),_0x33f17a=_0x8aff94[_0x5846d4(0x4b5)],_0x5ccb4a=_0x8aff94[_0x5846d4(0x4b5)],_0x3a53be=_0x8aff94[_0x5846d4(0x107)];for(const _0x361984 of _0x37f9a9){if('IgGbc'===_0x5846d4(0x83f)){if(!_0x361984)continue;if(_0x361984[_0x5846d4(0x988)]())_0x361984['changeAtbChargeTime'](_0x33f17a);else{if(_0x361984['isAtbCastingState']()){_0x361984[_0x5846d4(0x138)](_0x5ccb4a);if(_0x3a53be)_0x361984[_0x5846d4(0x48f)]();}}}else this['startMotion'](_0x5846d4(0xaf1));}}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x35a),_0x4b0451=>{const _0x35d4a3=_0x44efce;if(!SceneManager[_0x35d4a3(0xbab)]())return;if(!Imported[_0x35d4a3(0xbad)])return;VisuMZ['ConvertParams'](_0x4b0451,_0x4b0451);const _0x37df3c=VisuMZ[_0x35d4a3(0x57d)](_0x4b0451['Targets']),_0x1472c0=_0x4b0451[_0x35d4a3(0x4a9)];for(const _0x55c919 of _0x37df3c){if(_0x35d4a3(0x339)!==_0x35d4a3(0x339)){if(this[_0x35d4a3(0xb61)]())return _0x486ed3;const _0x175fb8=this[_0x35d4a3(0x8f0)](),_0x499433=_0x3048f6;let _0x3475d2=[],_0x4d5e31=[];_0x3475d2[_0x35d4a3(0xb70)](this[_0x35d4a3(0x657)][_0x35d4a3(0xb33)],this[_0x35d4a3(0x657)]['arRedFlat']),_0x4d5e31[_0x35d4a3(0xb70)](this[_0x35d4a3(0x657)][_0x35d4a3(0x431)],this[_0x35d4a3(0x657)][_0x35d4a3(0x9e3)]);const _0x42fa8d=this[_0x35d4a3(0x211)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x5175cd=this[_0x35d4a3(0x211)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0xcbc765=this[_0x35d4a3(0x211)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x3c94d9=this[_0x35d4a3(0x211)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x3475d2=_0x3475d2[_0x35d4a3(0x719)](_0x499433[_0x35d4a3(0x919)]()['map'](_0x8fad66=>_0x8fad66&&_0x8fad66['note'][_0x35d4a3(0xab6)](_0x42fa8d)?_0xd7ce6e(_0x58d40f['$1']):0x0)),_0x4d5e31=_0x4d5e31[_0x35d4a3(0x719)](_0x499433[_0x35d4a3(0x919)]()[_0x35d4a3(0xba3)](_0x55df90=>_0x55df90&&_0x55df90['note']['match'](_0x5175cd)?_0x3aaced(_0x164880['$1'])/0x64:0x0)),_0x3475d2=_0x3475d2['concat'](_0x175fb8[_0x35d4a3(0x919)]()[_0x35d4a3(0xba3)](_0x53a30d=>_0x53a30d&&_0x53a30d[_0x35d4a3(0x77d)][_0x35d4a3(0xab6)](_0xcbc765)?_0x161cb9(_0x1ba9be['$1']):0x0)),_0x4d5e31=_0x4d5e31[_0x35d4a3(0x719)](_0x175fb8[_0x35d4a3(0x919)]()['map'](_0x28c410=>_0x28c410&&_0x28c410[_0x35d4a3(0x77d)][_0x35d4a3(0xab6)](_0x3c94d9)?_0x3c7979(_0x18a404['$1'])/0x64:0x0)),this[_0x35d4a3(0x987)]()['note'][_0x35d4a3(0xab6)](_0xcbc765)&&_0x3475d2['push'](_0x18f9ee(_0x7596b4['$1'])),this['item']()['note'][_0x35d4a3(0xab6)](_0x3c94d9)&&_0x4d5e31[_0x35d4a3(0xb70)](_0x41e7b1(_0x2e1522['$1'])),_0x4076ea=_0x3475d2['reduce']((_0x4b5ad9,_0x4efb33)=>_0x4b5ad9-_0x4efb33,_0x52df9a),_0x5503e4>0x0&&(_0x46f15c=_0x4d5e31[_0x35d4a3(0xa4a)]((_0x28e777,_0x2a9599)=>_0x28e777*(0x1-_0x2a9599),_0x539650)),_0x5fa3e2;}else{if(!_0x55c919)continue;_0x55c919['gainStoredBoostPoints'](_0x1472c0);}}}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x585),_0x51f3cf=>{const _0xe15f20=_0x44efce;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_BoostAction'])return;if(!BattleManager[_0xe15f20(0x427)])return;VisuMZ[_0xe15f20(0x878)](_0x51f3cf,_0x51f3cf);const _0x1982a6=_0x51f3cf[_0xe15f20(0x537)];$gameVariables[_0xe15f20(0x646)](_0x1982a6,BattleManager[_0xe15f20(0x427)]['toUseBoostPoints']());}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x95a),_0x3ca7b7=>{const _0x4eaf2e=_0x44efce;if(!SceneManager[_0x4eaf2e(0xbab)]())return;if(!Imported[_0x4eaf2e(0x747)])return;VisuMZ[_0x4eaf2e(0x878)](_0x3ca7b7,_0x3ca7b7);const _0x3bba51=VisuMZ['CreateActionSequenceTargets'](_0x3ca7b7[_0x4eaf2e(0x285)]),_0x211988=_0x3ca7b7[_0x4eaf2e(0xaca)];for(const _0x15d49a of _0x3bba51){if(_0x4eaf2e(0x194)==='cBcsX'){if(!_0x15d49a)continue;if(_0x15d49a[_0x4eaf2e(0xab2)]())continue;if(!_0x15d49a[_0x4eaf2e(0x5db)]())continue;_0x15d49a['alterBreakShield'](_0x211988);}else{const _0x13c8cf=_0x38b719[_0x4eaf2e(0x8f2)][_0x4eaf2e(0x3f2)][_0x4eaf2e(0xb59)](arguments,0x1);this[_0x4eaf2e(0x772)][_0x4eaf2e(0xac5)]({'name':_0x2a64d3,'params':_0x13c8cf});}}}),PluginManager[_0x44efce(0x5e6)](pluginData['name'],_0x44efce(0xe6),_0x1469e1=>{const _0x5b60aa=_0x44efce;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5b60aa(0x747)])return;VisuMZ['ConvertParams'](_0x1469e1,_0x1469e1);const _0x44509e=VisuMZ[_0x5b60aa(0x57d)](_0x1469e1[_0x5b60aa(0x285)]);for(const _0x57d56e of _0x44509e){if(!_0x57d56e)continue;if(_0x57d56e[_0x5b60aa(0xab2)]())continue;if(!_0x57d56e[_0x5b60aa(0x5db)]())continue;_0x57d56e[_0x5b60aa(0xb2b)]();}}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0xa48),_0x11eb10=>{const _0x209b52=_0x44efce;if(!SceneManager[_0x209b52(0xbab)]())return;if(!Imported['VisuMZ_2_BattleSystemBTB'])return;if(!BattleManager[_0x209b52(0x6e1)]())return;VisuMZ[_0x209b52(0x878)](_0x11eb10,_0x11eb10);const _0x39c31c=VisuMZ[_0x209b52(0x57d)](_0x11eb10[_0x209b52(0x285)]),_0x5954e2=_0x11eb10[_0x209b52(0xb3d)];for(const _0x1a2097 of _0x39c31c){if(_0x209b52(0xb5)!==_0x209b52(0x1fd)){if(!_0x1a2097)continue;_0x1a2097['gainBravePoints'](_0x5954e2);}else{const _0x2e9b0a=this['_mainSprite'][_0x209b52(0x3e8)];_0x2e9b0a&&(this['bitmap']=new _0x5c3795(_0x2e9b0a[_0x209b52(0x542)],_0x2e9b0a[_0x209b52(0x737)]));}}}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x340),_0x3adfd3=>{const _0x113b87=_0x44efce;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x113b87(0x878)](_0x3adfd3,_0x3adfd3);const _0x2c0450=$gameTemp['getLastPluginCommandInterpreter'](),_0x193fba=BattleManager[_0x113b87(0x1db)],_0x1f5e5b=BattleManager[_0x113b87(0x427)];if(!_0x2c0450||!_0x193fba||!_0x1f5e5b)return;if(!_0x193fba['item']())return;const _0xf3c743=VisuMZ[_0x113b87(0x57d)](_0x3adfd3['Targets']);for(const _0x172f68 of _0xf3c743){if(!_0x172f68)continue;_0x3adfd3['ForceDeath']&&(_0x172f68[_0x113b87(0x4bb)](),_0x172f68[_0x113b87(0xb9f)](_0x172f68[_0x113b87(0x8a4)]())),_0x172f68['isDeathStateAffected']()&&_0x172f68[_0x113b87(0x18b)]();}_0x2c0450[_0x113b87(0x227)](_0x113b87(0x4f5));}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x46f),_0x43fc50=>{const _0x221139=_0x44efce;if(!SceneManager[_0x221139(0xbab)]())return;if(!Imported[_0x221139(0x8b9)])return;if(!BattleManager['isCTB']())return;VisuMZ[_0x221139(0x878)](_0x43fc50,_0x43fc50);const _0x320d30=VisuMZ[_0x221139(0x57d)](_0x43fc50[_0x221139(0x285)]),_0x3d75c6=_0x43fc50[_0x221139(0x9c9)];for(const _0x2b27af of _0x320d30){if(!_0x2b27af)continue;_0x2b27af[_0x221139(0x362)](_0x3d75c6);}}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0xb7d),_0x1b0d55=>{const _0x5f4cd3=_0x44efce;if(!SceneManager[_0x5f4cd3(0xbab)]())return;if(!Imported[_0x5f4cd3(0x8b9)])return;if(!BattleManager['isCTB']())return;VisuMZ[_0x5f4cd3(0x878)](_0x1b0d55,_0x1b0d55);const _0x7c8397=VisuMZ[_0x5f4cd3(0x57d)](_0x1b0d55[_0x5f4cd3(0x285)]),_0x6ca3d=_0x1b0d55[_0x5f4cd3(0x4b5)],_0xad3228=_0x1b0d55[_0x5f4cd3(0x4b5)];for(const _0x58f71e of _0x7c8397){if(!_0x58f71e)continue;if(_0x58f71e[_0x5f4cd3(0x263)]===_0x5f4cd3(0x51c))_0x58f71e['changeCtbChargeTime'](_0x6ca3d);else _0x58f71e[_0x5f4cd3(0x263)]===_0x5f4cd3(0x5cc)&&_0x58f71e[_0x5f4cd3(0xb1)](_0xad3228);}}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x673),_0x4cb5da=>{const _0x3c708f=_0x44efce;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3c708f(0x878)](_0x4cb5da,_0x4cb5da);const _0x4a87b8=BattleManager['_action'];if(!_0x4a87b8)return;let _0x180eda=_0x4cb5da[_0x3c708f(0x588)];_0x4a87b8[_0x3c708f(0xaa5)](_0x180eda);}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x688),_0x6bcc0d=>{const _0x520cd6=_0x44efce;if(!SceneManager[_0x520cd6(0xbab)]())return;VisuMZ['ConvertParams'](_0x6bcc0d,_0x6bcc0d);const _0x3ce54a=VisuMZ[_0x520cd6(0x57d)](_0x6bcc0d[_0x520cd6(0x285)]);for(const _0x4f6515 of _0x3ce54a){if(!_0x4f6515)continue;if(_0x4f6515[_0x520cd6(0x9c5)]())_0x4f6515['startDamagePopup']();}}),PluginManager['registerCommand'](pluginData['name'],_0x44efce(0x432),_0x672886=>{const _0xb0c23e=_0x44efce;if(!SceneManager[_0xb0c23e(0xbab)]())return;VisuMZ[_0xb0c23e(0x878)](_0x672886,_0x672886);const _0xae43fc=$gameTemp[_0xb0c23e(0x3f8)](),_0x31f4d9=BattleManager[_0xb0c23e(0x427)],_0x197ece=_0x672886[_0xb0c23e(0x1a1)];if(!_0xae43fc)return;if(!_0x31f4d9)return;_0x31f4d9&&_0x31f4d9[_0xb0c23e(0x578)]()&&_0x197ece[_0xb0c23e(0xb2d)]()[_0xb0c23e(0xaef)]()!=='UNTITLED'&&_0xae43fc[_0xb0c23e(0x118)]([_0x197ece]);}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x824),_0x2aad3c=>{const _0x179dde=_0x44efce;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x179dde(0x878)](_0x2aad3c,_0x2aad3c);const _0x196253=VisuMZ[_0x179dde(0x57d)](_0x2aad3c[_0x179dde(0x285)]);for(const _0x30054e of _0x196253){if('PjAMj'===_0x179dde(0x156)){if(!_0x4b74f5)return;const _0x146871=new _0x2f8acd();this[_0x179dde(0x80a)](_0x146871),_0x146871[_0x179dde(0x5b2)](_0x5c3f2c);}else{if(!_0x30054e)continue;if(!_0x30054e['isEnemy']())continue;_0x30054e[_0x179dde(0xa17)]();}}}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x896),_0x1203c2=>{const _0x5e3f20=_0x44efce;if(!SceneManager[_0x5e3f20(0xbab)]())return;if(!Imported[_0x5e3f20(0x83c)])return;if(!BattleManager['isETB']())return;VisuMZ[_0x5e3f20(0x878)](_0x1203c2,_0x1203c2);const _0x23df4d=_0x1203c2[_0x5e3f20(0x677)];BattleManager[_0x5e3f20(0x427)]&&BattleManager[_0x5e3f20(0x427)]['friendsUnit']()['gainCurrentActionsETB'](_0x23df4d);}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x9dc),_0x46813f=>{const _0x342611=_0x44efce;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x342611(0x46b)])return;if(!BattleManager[_0x342611(0x3a2)]())return;VisuMZ[_0x342611(0x878)](_0x46813f,_0x46813f);const _0x58619b=_0x46813f[_0x342611(0x677)];BattleManager[_0x342611(0x427)]&&(_0x342611(0x9f6)!=='RIAyf'?BattleManager[_0x342611(0x427)]['friendsUnit']()[_0x342611(0x319)](_0x58619b):_0x37a703[_0x342611(0x8f2)][_0x342611(0x36c)][_0x342611(0xb59)](this));}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x513),_0x51e586=>{const _0x28dca9=_0x44efce;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x51e586,_0x51e586);const _0x4e4678=VisuMZ['CreateActionSequenceTargets'](_0x51e586[_0x28dca9(0x285)]),_0x1d2d3a=_0x51e586['HP_Rate'],_0x26ceef=_0x51e586[_0x28dca9(0x659)],_0x40700e=_0x51e586['MP_Rate'],_0x437c3f=_0x51e586[_0x28dca9(0xdc)],_0x462514=_0x51e586[_0x28dca9(0x376)],_0x351728=_0x51e586[_0x28dca9(0x95f)],_0x558f04=_0x51e586[_0x28dca9(0x394)];for(const _0x5a90b of _0x4e4678){if(_0x28dca9(0x7e0)===_0x28dca9(0xb03)){let _0x3991f4=_0x2b6f45(_0x2241c1['$1']);while(_0x3991f4--){_0x1a399f['push'](this['opponentsUnit']()[_0x28dca9(0x478)]());}return this[_0x28dca9(0x4d1)](_0x4ba7d2);}else{if(!_0x5a90b)continue;const _0x575751=_0x5a90b[_0x28dca9(0x8e9)](),_0x31765c=Math[_0x28dca9(0x18c)](_0x1d2d3a*_0x5a90b['mhp']+_0x26ceef),_0xf27e42=Math[_0x28dca9(0x18c)](_0x40700e*_0x5a90b[_0x28dca9(0x8a2)]+_0x437c3f),_0x47b32b=Math['round'](_0x462514*_0x5a90b[_0x28dca9(0x4ca)]()+_0x351728);if(_0x31765c!==0x0)_0x5a90b['gainHp'](_0x31765c);if(_0xf27e42!==0x0)_0x5a90b[_0x28dca9(0x7e1)](_0xf27e42);if(_0x47b32b!==0x0)_0x5a90b[_0x28dca9(0x9ac)](_0x47b32b);if(_0x558f04)_0x5a90b[_0x28dca9(0x490)]();_0x575751&&_0x5a90b[_0x28dca9(0x578)]()&&_0x5a90b[_0x28dca9(0x18b)]();}}}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x4b1),_0x312455=>{const _0x5caaa9=_0x44efce;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5caaa9(0x878)](_0x312455,_0x312455);const _0x333f17=VisuMZ[_0x5caaa9(0x57d)](_0x312455['Targets']);for(const _0x3ced01 of _0x333f17){if(_0x5caaa9(0x45c)===_0x5caaa9(0x45c)){if(!_0x3ced01)continue;_0x3ced01['setImmortal'](_0x312455[_0x5caaa9(0xb81)]);}else this[_0x5caaa9(0x920)]();}}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],_0x44efce(0x30e),_0x1030b4=>{const _0x6c593b=_0x44efce;if(!SceneManager[_0x6c593b(0xbab)]())return;VisuMZ[_0x6c593b(0x878)](_0x1030b4,_0x1030b4);const _0x3dc810=BattleManager[_0x6c593b(0x1db)],_0x5d8a1d={'criticalHitRate':_0x1030b4[_0x6c593b(0x1e4)],'criticalHitFlat':_0x1030b4[_0x6c593b(0x576)],'criticalDmgRate':_0x1030b4[_0x6c593b(0x2dd)],'criticalDmgFlat':_0x1030b4[_0x6c593b(0x562)],'damageRate':_0x1030b4[_0x6c593b(0x668)],'damageFlat':_0x1030b4[_0x6c593b(0x51b)],'hitRate':_0x1030b4[_0x6c593b(0x658)],'hitFlat':_0x1030b4[_0x6c593b(0x2e6)]};_0x3dc810[_0x6c593b(0x7ce)]=_0x5d8a1d;}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x675),_0x26734a=>{const _0xd7a70e=_0x44efce;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xd7a70e(0x878)](_0x26734a,_0x26734a);const _0x1bc578=_0x26734a[_0xd7a70e(0x9b0)];SceneManager['_scene']['playOnceParallelInterpreter'](_0x1bc578);}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x439),_0x3218a4=>{const _0x4ef951=_0x44efce;if(!SceneManager[_0x4ef951(0xbab)]())return;if(!Imported['VisuMZ_2_BattleSystemOTB'])return;if(!BattleManager['isOTB']())return;VisuMZ[_0x4ef951(0x878)](_0x3218a4,_0x3218a4);const _0x22d199=VisuMZ['CreateActionSequenceTargets'](_0x3218a4[_0x4ef951(0x285)]);for(const _0x163431 of _0x22d199){if(_0x4ef951(0x91a)===_0x4ef951(0x91a)){if(!_0x163431)continue;let _0x1e1adb=_0x3218a4[_0x4ef951(0xa03)],_0x3b66f0=_0x3218a4[_0x4ef951(0x579)],_0x5a24c5=_0x3218a4['FollowTurn'];if(BattleManager['_actionBattlers']['includes'](_0x163431))_0x1e1adb+=_0x5a24c5;else{if(_0x4ef951(0x8bc)===_0x4ef951(0x4e6)){this[_0x4ef951(0x291)]['setup'](),this[_0x4ef951(0x258)][_0x4ef951(0x945)]();if(!_0x4c1247['BattleCore']['TpbActiveChangeEnabled'])return;if(_0x58ae51[_0x4ef951(0x8b9)]&&_0x3033b3[_0x4ef951(0x5ac)]())return;if(_0xd755b7[_0x4ef951(0x589)]){_0x176288[_0x4ef951(0x589)]['setActionState']('undecided');const _0x4f41e4=_0x45d5d4[_0x4ef951(0x589)][_0x4ef951(0x6dd)]();if(_0x4f41e4)_0x4f41e4['stepBack']();}_0x5c4bc0['_currentActor']=null;}else _0x3b66f0+=_0x5a24c5;}BattleManager[_0x4ef951(0x3b9)](_0x163431,-_0x1e1adb,![]),BattleManager[_0x4ef951(0x3b9)](_0x163431,-_0x3b66f0,!![]);}else{const _0x1ebecc=_0xc8c65d[_0x4ef951(0x6d0)]['_commonEventKey'][_0x58511c],_0x3afef1={'code':0x2c,'dataId':_0x1ebecc,'value1':0x1,'value2':0x0};_0x468cba['effects']['push'](_0x3afef1);}}}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x2bb),_0x5dec9a=>{const _0x74c73e=_0x44efce;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x74c73e(0x9c2)])return;if(!BattleManager['isPTB']())return;VisuMZ['ConvertParams'](_0x5dec9a,_0x5dec9a);const _0x5c77e5=BattleManager[_0x74c73e(0x427)][_0x74c73e(0x8ce)](),_0x37c37d=_0x5dec9a['Override'],_0x49bee6=_0x5dec9a['alterChange']||_0x74c73e(0x29f),_0x15f06d=_0x5dec9a[_0x74c73e(0x82b)]||'unchanged',_0xe60d73=_0x5dec9a['alterCost']||0x0,_0x549a23=_0x5dec9a['alterPriority']||0x0;if(_0x5c77e5['canAlterActionCostPTB']()||_0x37c37d){if(_0x74c73e(0x554)!==_0x74c73e(0x58b)){if(_0x37c37d){if(_0x74c73e(0x2f6)!==_0x74c73e(0x2f6)){let _0x427699=0x0;return _0x427699;}else _0x5c77e5['_ptbActionCost']=_0x5c77e5[_0x74c73e(0x964)]||{},_0x5c77e5['_ptbActionCost'][_0x74c73e(0x58a)]=0x0;}_0x5c77e5['alterActionCostPTB'](_0x49bee6,_0x15f06d,_0xe60d73,_0x549a23);}else{let _0x5404a0=_0x4acaf4['x'],_0x44ae15=_0x1c385e['y'],_0x20be19=_0x1779ac[_0x74c73e(0x737)],_0x1627b2=_0x548a90['_distortionSprite'][_0x74c73e(0x718)]['y'];_0x1a9b0d['x']=_0x1c5c27['_baseX']+_0x35491f[_0x74c73e(0x880)](),_0x3daf6e['y']=_0x4d7a4e[_0x74c73e(0xbb8)]+_0x3efef6[_0x74c73e(0x326)](),_0xa72658['height']*=_0x1627b2;let _0x134707=_0x4d19be[_0x74c73e(0x6d0)][_0x74c73e(0xf9)][_0x74c73e(0xb59)](this,_0x22961e);return _0x37ee26['x']=_0x5404a0,_0x46a435['y']=_0x44ae15,_0x4ae89d[_0x74c73e(0x737)]=_0x20be19,_0x134707;}}}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],'ActSeq_Mechanics_PtbConvert',_0x32f4f4=>{const _0x386d33=_0x44efce;if(!SceneManager[_0x386d33(0xbab)]())return;if(!Imported[_0x386d33(0x9c2)])return;if(!BattleManager[_0x386d33(0x3e7)]())return;VisuMZ[_0x386d33(0x878)](_0x32f4f4,_0x32f4f4);const _0x237e69=BattleManager[_0x386d33(0x427)]['friendsUnit']();let _0x5a6154=Math[_0x386d33(0x65c)](_0x32f4f4['ConvertCount'],0x0),_0x47fbe2=_0x237e69['getFullActionsPTB'](),_0x4665e1=_0x237e69[_0x386d33(0x8df)]();while(_0x5a6154--){if('JkhUk'==='JkhUk'){if(_0x47fbe2<=0x0&&_0x4665e1<=0x0)break;else _0x47fbe2>0x0?(_0x47fbe2--,_0x4665e1++):_0x4665e1--;}else this[_0x386d33(0x202)]=_0x4f1cd5||0x0,this['_cache']={};}_0x237e69['setFullActionsPTB'](_0x47fbe2),_0x237e69['setHalfActionsPTB'](_0x4665e1);}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x349),_0x125cd0=>{const _0x437982=_0x44efce;if(!SceneManager[_0x437982(0xbab)]())return;if(!Imported[_0x437982(0x9c2)])return;if(!BattleManager[_0x437982(0x3e7)]())return;VisuMZ[_0x437982(0x878)](_0x125cd0,_0x125cd0);const _0x5b9175=BattleManager[_0x437982(0x427)][_0x437982(0x8ce)]();let _0x1e9d21=_0x125cd0[_0x437982(0xa3e)],_0x236d6c=_0x125cd0[_0x437982(0x451)];_0x5b9175[_0x437982(0xf0)](_0x1e9d21),_0x5b9175[_0x437982(0xc1)](_0x236d6c);}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x994),_0x583a4d=>{const _0x2ed618=_0x44efce;if(!SceneManager[_0x2ed618(0xbab)]())return;VisuMZ['ConvertParams'](_0x583a4d,_0x583a4d);const _0x408bbb=[_0x2ed618(0x888),_0x2ed618(0x422),_0x2ed618(0x817),'DEF','MAT',_0x2ed618(0x2cb),_0x2ed618(0x4f2),_0x2ed618(0x7bb)],_0x269ba0=_0x583a4d[_0x2ed618(0x844)],_0x45e2b4=_0x583a4d[_0x2ed618(0x568)],_0x3256ec=VisuMZ[_0x2ed618(0x57d)](_0x583a4d[_0x2ed618(0x285)]);for(const _0x590ae1 of _0x3256ec){if('FRRJM'===_0x2ed618(0xa20)){if(!_0x590ae1)continue;for(const _0xe4b25b of _0x269ba0){if(_0x2ed618(0x544)!==_0x2ed618(0x7ca)){const _0x57d54b=_0x408bbb[_0x2ed618(0x963)](_0xe4b25b[_0x2ed618(0xb2d)]()[_0x2ed618(0xaef)]());_0x57d54b>=0x0&&_0x57d54b<=0x7&&_0x590ae1['isBuffAffected'](_0x57d54b)&&_0x590ae1[_0x2ed618(0x807)](_0x57d54b);}else _0x26b07e[_0x2ed618(0xaaa)](_0x59a448['Text']||'',_0x317c42[_0x2ed618(0x26a)]||0x0);}for(const _0x5e97cc of _0x45e2b4){const _0x3020ec=_0x408bbb['indexOf'](_0x5e97cc[_0x2ed618(0xb2d)]()[_0x2ed618(0xaef)]());_0x3020ec>=0x0&&_0x3020ec<=0x7&&_0x590ae1[_0x2ed618(0x45d)](_0x3020ec)&&_0x590ae1[_0x2ed618(0x807)](_0x3020ec);}}else this[_0x2ed618(0x304)]=null;}}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],_0x44efce(0x92b),_0x20df64=>{const _0x51f722=_0x44efce;if(!SceneManager[_0x51f722(0xbab)]())return;VisuMZ[_0x51f722(0x878)](_0x20df64,_0x20df64);const _0xc33ead=_0x20df64[_0x51f722(0x220)],_0xc02daa=VisuMZ['CreateActionSequenceTargets'](_0x20df64[_0x51f722(0x285)]);for(const _0x4f0925 of _0xc02daa){if(!_0x4f0925)continue;for(const _0x323e86 of _0xc33ead){if(_0x51f722(0x516)===_0x51f722(0x26d))return this[_0x51f722(0x685)]()[_0x51f722(0x42d)](_0x3e5be1=>_0x3e5be1['isSkewing']());else _0x4f0925[_0x51f722(0x877)](_0x323e86);}}}),PluginManager[_0x44efce(0x5e6)](pluginData['name'],_0x44efce(0x94f),_0x1bb3e4=>{const _0x4bd95e=_0x44efce;if(!SceneManager[_0x4bd95e(0xbab)]())return;if(!Imported[_0x4bd95e(0x1fb)])return;if(!BattleManager[_0x4bd95e(0x469)]())return;VisuMZ['ConvertParams'](_0x1bb3e4,_0x1bb3e4);const _0x4ba9c4=_0x1bb3e4[_0x4bd95e(0xaa4)],_0x4f4e35=VisuMZ['CreateActionSequenceTargets'](_0x1bb3e4[_0x4bd95e(0x285)]),_0x2d65bb=_0x1bb3e4[_0x4bd95e(0x1a2)],_0x483ac5=_0x1bb3e4[_0x4bd95e(0x413)],_0x5ba90c=_0x1bb3e4[_0x4bd95e(0x88a)],_0x5d439c=BattleManager['_action'];if(_0x4ba9c4)for(const _0x2f24b5 of _0x4f4e35){if(!_0x2f24b5)continue;if(_0x2f24b5===user)continue;if(_0x2d65bb)_0x2f24b5[_0x4bd95e(0x473)](![]);_0x2f24b5[_0x4bd95e(0x10e)](BattleManager[_0x4bd95e(0x427)],_0x5d439c);}if(_0x483ac5&&BattleManager[_0x4bd95e(0x427)]){if(_0x4bd95e(0x39d)===_0x4bd95e(0x39d)){if(_0x5ba90c)BattleManager[_0x4bd95e(0x427)][_0x4bd95e(0x473)](![]);const _0x15f529=_0x4f4e35[0x0];BattleManager[_0x4bd95e(0x235)](_0x15f529,_0x5d439c);}else this[_0x4bd95e(0x2b0)]=0x0,this[_0x4bd95e(0x5c5)]=0x0;}}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],'ActSeq_Mechanics_StbExtraAction',_0x5a85e0=>{const _0x3bef97=_0x44efce;if(!SceneManager[_0x3bef97(0xbab)]())return;if(!Imported[_0x3bef97(0x1fb)])return;if(!BattleManager[_0x3bef97(0x469)]())return;VisuMZ['ConvertParams'](_0x5a85e0,_0x5a85e0);const _0x23a912=_0x5a85e0[_0x3bef97(0x1cc)];BattleManager[_0x3bef97(0x427)]&&BattleManager[_0x3bef97(0x427)][_0x3bef97(0xe7)](_0x23a912);}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x8ee),_0x5996ed=>{const _0x22c3d0=_0x44efce;if(!SceneManager[_0x22c3d0(0xbab)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x22c3d0(0x469)]())return;VisuMZ['ConvertParams'](_0x5996ed,_0x5996ed);let _0x298d2b=_0x5996ed[_0x22c3d0(0x1cc)];if(BattleManager[_0x22c3d0(0x427)]){if(_0x22c3d0(0x462)!==_0x22c3d0(0x462))_0x5ccb89[_0x22c3d0(0x427)]['friendsUnit']()[_0x22c3d0(0x319)](_0x5a0731);else{BattleManager['_subject'][_0x22c3d0(0x3ad)]=BattleManager[_0x22c3d0(0x427)][_0x22c3d0(0x3ad)]||[];while(_0x298d2b--){if(BattleManager[_0x22c3d0(0x427)][_0x22c3d0(0x3ad)]['length']<=0x0)break;BattleManager[_0x22c3d0(0x427)][_0x22c3d0(0x3ad)]['shift']();}}}}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],'ActSeq_Mechanics_SwapWeapon',_0x36f217=>{const _0x2658b8=_0x44efce;if(!SceneManager[_0x2658b8(0xbab)]())return;if(!Imported[_0x2658b8(0xaa9)])return;VisuMZ[_0x2658b8(0x878)](_0x36f217,_0x36f217);const _0x570329=VisuMZ[_0x2658b8(0x57d)](_0x36f217[_0x2658b8(0x285)]),_0x40f876=_0x36f217['WeaponTypeID'];for(const _0x26ab5a of _0x570329){if(!_0x26ab5a)continue;if(!_0x26ab5a[_0x2658b8(0x8de)]())continue;_0x26ab5a[_0x2658b8(0x633)](_0x40f876);}}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],_0x44efce(0xa0a),_0x2a6287=>{const _0x58747c=_0x44efce;if(!SceneManager[_0x58747c(0xbab)]())return;VisuMZ[_0x58747c(0x878)](_0x2a6287,_0x2a6287);const _0x5c8e1f=VisuMZ['CreateActionSequenceTargets'](_0x2a6287[_0x58747c(0x285)]),_0x44b7d0=_0x2a6287['Text'],_0x491e12={'textColor':ColorManager['getColor'](_0x2a6287[_0x58747c(0x7d9)]),'flashColor':_0x2a6287[_0x58747c(0x83d)],'flashDuration':_0x2a6287[_0x58747c(0x302)]};for(const _0x3cd7a6 of _0x5c8e1f){if('nSeME'===_0x58747c(0xb29))this['drawItemStyleIconText'](_0x2f91f9);else{if(!_0x3cd7a6)continue;_0x3cd7a6[_0x58747c(0xabc)](_0x44b7d0,_0x491e12);}}}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],'ActSeq_Mechanics_VariablePopup',_0x114e83=>{const _0x31f715=_0x44efce;if(!SceneManager[_0x31f715(0xbab)]())return;VisuMZ[_0x31f715(0x878)](_0x114e83,_0x114e83);const _0x5ecf73=VisuMZ[_0x31f715(0x57d)](_0x114e83[_0x31f715(0x285)]);let _0x10b0f3=$gameVariables[_0x31f715(0x18d)](_0x114e83[_0x31f715(0x5cb)]);Imported[_0x31f715(0x1bc)]&&_0x114e83['DigitGrouping']&&(_0x10b0f3=VisuMZ[_0x31f715(0x552)](_0x10b0f3));const _0x1229d5=String(_0x10b0f3),_0x1c8194={'textColor':ColorManager[_0x31f715(0x2fc)](_0x114e83[_0x31f715(0x7d9)]),'flashColor':_0x114e83['FlashColor'],'flashDuration':_0x114e83[_0x31f715(0x302)]};for(const _0x138566 of _0x5ecf73){if(!_0x138566)continue;_0x138566['setupTextPopup'](_0x1229d5,_0x1c8194);}}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],_0x44efce(0x113),_0xc6a146=>{const _0x595d39=_0x44efce;if(!SceneManager[_0x595d39(0xbab)]())return;const _0x16365a=$gameTemp[_0x595d39(0x3f8)]();if(!_0x16365a)return;_0x16365a[_0x595d39(0x227)](_0x595d39(0x4f5));}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0xa93),_0x54d7ca=>{const _0x1e2224=_0x44efce;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1e2224(0x878)](_0x54d7ca,_0x54d7ca);const _0x3a5b88=VisuMZ[_0x1e2224(0x57d)](_0x54d7ca[_0x1e2224(0x285)]);for(const _0x29bf2c of _0x3a5b88){if(_0x1e2224(0x8d7)!=='jDmhG')_0x4e3f8a=_0x8ec127[_0x1e2224(0x613)]/0x2,_0x1dcfc6=_0x432e05[_0x1e2224(0x165)]/0x2;else{if(!_0x29bf2c)continue;_0x29bf2c[_0x1e2224(0x98b)]();}}}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0xa2b),_0x470e73=>{const _0x4868f0=_0x44efce;if(!SceneManager[_0x4868f0(0xbab)]())return;VisuMZ['ConvertParams'](_0x470e73,_0x470e73);const _0x2b958d=VisuMZ[_0x4868f0(0x57d)](_0x470e73[_0x4868f0(0x285)]),_0x4257c5=_0x470e73['MotionType'][_0x4868f0(0x733)]()[_0x4868f0(0xaef)]();let _0x55c07a=_0x470e73[_0x4868f0(0x4f9)];const _0x26667a=_0x470e73['Frame'];![_0x4868f0(0x7a8),_0x4868f0(0x15d),_0x4868f0(0x9ae),_0x4868f0(0x3c4)][_0x4868f0(0x89e)](_0x4257c5)&&(_0x4868f0(0x7c4)==='OTngZ'?_0x55c07a=![]:this[_0x4868f0(0x872)]=_0x106c7b[_0x4868f0(0x872)]);for(const _0x5f343c of _0x2b958d){if(!_0x5f343c)continue;_0x5f343c[_0x4868f0(0x65b)](_0x4257c5,_0x55c07a,_0x26667a);}}),PluginManager[_0x44efce(0x5e6)](pluginData['name'],_0x44efce(0x564),_0x432883=>{const _0x35c1ed=_0x44efce;if(!SceneManager[_0x35c1ed(0xbab)]())return;VisuMZ[_0x35c1ed(0x878)](_0x432883,_0x432883);const _0x6efbbe=VisuMZ[_0x35c1ed(0x57d)](_0x432883['Targets']),_0x381df5=_0x432883[_0x35c1ed(0xbcb)][_0x35c1ed(0x733)]()[_0x35c1ed(0xaef)](),_0x4bda51=_0x432883[_0x35c1ed(0x4f9)];for(const _0x2eb060 of _0x6efbbe){if(!_0x2eb060)continue;if(_0x381df5[_0x35c1ed(0xab6)](/ATTACK[ ](\d+)/i))_0x2eb060['performAttackSlot'](Number(RegExp['$1']));else _0x381df5==='attack'?_0x2eb060['performAttack']():_0x2eb060[_0x35c1ed(0x7c8)](_0x381df5);if(!_0x4bda51)_0x35c1ed(0x5e0)!==_0x35c1ed(0xa5b)?_0x2eb060[_0x35c1ed(0xa67)](0x0):_0x8fa045=_0x302208(_0x123e0a['$1']);else{if(_0x4bda51&&[_0x35c1ed(0x15d),'swing',_0x35c1ed(0x4d5)][_0x35c1ed(0x89e)](_0x381df5)){}}}}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],_0x44efce(0x2d8),_0x30dfb1=>{const _0x28fc61=_0x44efce;if(!SceneManager[_0x28fc61(0xbab)]())return;VisuMZ[_0x28fc61(0x878)](_0x30dfb1,_0x30dfb1);const _0x4fcd56=BattleManager[_0x28fc61(0x1db)];if(!_0x4fcd56)return;if(!_0x4fcd56[_0x28fc61(0x987)]())return;const _0xb50e81=VisuMZ[_0x28fc61(0x57d)](_0x30dfb1[_0x28fc61(0x285)]);for(const _0x157f72 of _0xb50e81){if(!_0x157f72)continue;_0x157f72[_0x28fc61(0x86c)](_0x4fcd56);}}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x238),_0x136fce=>{const _0x18d831=_0x44efce;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x136fce,_0x136fce);const _0x17c21c=VisuMZ[_0x18d831(0x57d)](_0x136fce[_0x18d831(0x285)]);for(const _0x1b1cb1 of _0x17c21c){if(!_0x1b1cb1)continue;if(!_0x1b1cb1['battler']())continue;_0x1b1cb1[_0x18d831(0x6dd)]()[_0x18d831(0x310)]();}}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],_0x44efce(0x89a),_0x15cb92=>{const _0x144a34=_0x44efce;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x15cb92,_0x15cb92);const _0x2eeb0c=$gameTemp[_0x144a34(0x3f8)](),_0x311919=_0x15cb92[_0x144a34(0x620)]*Sprite_Battler[_0x144a34(0x1b5)];_0x2eeb0c[_0x144a34(0xaf1)](_0x311919);}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],'ActSeq_Movement_BattleStep',_0x41e4ea=>{const _0x93b4e2=_0x44efce;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x41e4ea,_0x41e4ea);const _0x55a427=$gameTemp['getLastPluginCommandInterpreter'](),_0x200d21=BattleManager[_0x93b4e2(0x1db)];if(!_0x55a427||!_0x200d21)return;if(!_0x200d21[_0x93b4e2(0x987)]())return;const _0x3c2fb=VisuMZ[_0x93b4e2(0x57d)](_0x41e4ea[_0x93b4e2(0x285)]);for(const _0x19c6d4 of _0x3c2fb){if(_0x93b4e2(0x610)==='rdHDr')_0x496fab=_0x558ef3['battler']()[_0x93b4e2(0x4f6)],_0x52af35=_0x4b4a5b[_0x93b4e2(0x6dd)]()[_0x93b4e2(0x680)];else{if(!_0x19c6d4)continue;_0x19c6d4[_0x93b4e2(0x10c)](_0x200d21);}}if(_0x41e4ea[_0x93b4e2(0x2c1)])_0x55a427[_0x93b4e2(0x227)]('battleMove');}),PluginManager['registerCommand'](pluginData['name'],_0x44efce(0xb4b),_0x44d61c=>{const _0x31a6ed=_0x44efce;if(!SceneManager[_0x31a6ed(0xbab)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x31a6ed(0x878)](_0x44d61c,_0x44d61c);const _0x419d81=$gameTemp[_0x31a6ed(0x3f8)](),_0x3b3d22=VisuMZ[_0x31a6ed(0x57d)](_0x44d61c[_0x31a6ed(0x285)]),_0x54ec84=_0x44d61c[_0x31a6ed(0x57b)],_0xa45d61=_0x44d61c['DistanceX'],_0x3b6f22=_0x44d61c[_0x31a6ed(0x22b)],_0x16b4fe=_0x44d61c[_0x31a6ed(0x3c2)],_0x277f28=_0x44d61c[_0x31a6ed(0xb6)],_0x2be239=_0x44d61c[_0x31a6ed(0x2f9)],_0x4e3705=_0x44d61c['MotionType'],_0xa2a484=_0x44d61c[_0x31a6ed(0x2c1)];if(!_0x419d81)return;for(const _0x2e9a11 of _0x3b3d22){if(!_0x2e9a11)continue;let _0x1ae9c5=_0xa45d61,_0x492e16=_0x3b6f22;if(_0x54ec84['match'](/horz/i))_0x1ae9c5*=_0x2e9a11[_0x31a6ed(0x8de)]()?-0x1:0x1;if(_0x54ec84[_0x31a6ed(0xab6)](/vert/i))_0x492e16*=_0x2e9a11[_0x31a6ed(0x8de)]()?-0x1:0x1;_0x2e9a11[_0x31a6ed(0xc8)](_0x1ae9c5,_0x492e16,_0x16b4fe,_0x277f28,_0x2be239),_0x2e9a11['requestMotion'](_0x4e3705);}if(_0xa2a484)_0x419d81[_0x31a6ed(0x227)]('battleMove');}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x213),_0x57792e=>{const _0x1cb6a4=_0x44efce;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x1cb6a4(0x8c0)]())return;VisuMZ['ConvertParams'](_0x57792e,_0x57792e);const _0x3bc372=$gameTemp[_0x1cb6a4(0x3f8)](),_0x5494ef=VisuMZ[_0x1cb6a4(0x57d)](_0x57792e[_0x1cb6a4(0x285)]),_0x2b79f1=_0x57792e[_0x1cb6a4(0x369)],_0x162abb=_0x57792e[_0x1cb6a4(0xb68)],_0x439e2b=_0x57792e[_0x1cb6a4(0xfe)],_0x227aed=_0x57792e[_0x1cb6a4(0x8cc)],_0x1fd4d1=_0x57792e[_0x1cb6a4(0x3c2)],_0x26fdf5=_0x57792e[_0x1cb6a4(0xb6)],_0x2a03e2=_0x57792e['EasingType'],_0x38c8e2=_0x57792e[_0x1cb6a4(0xbcb)],_0x397ca1=_0x57792e[_0x1cb6a4(0x2c1)];if(!_0x3bc372)return;for(const _0x593211 of _0x5494ef){if('xhFGE'===_0x1cb6a4(0x351)){const _0x2019b5=_0x554902['BattleCore'][_0x1cb6a4(0x444)]['BattleLayout'],_0x341a02=this[_0x1cb6a4(0x918)](_0x5677d2),_0x11e0cd=this[_0x1cb6a4(0x196)](_0x2686ac),_0x4a0e1c=_0x10fba5[_0x1cb6a4(0x18c)](_0x11e0cd['x']+(_0x11e0cd[_0x1cb6a4(0x542)]-0x80)/0x2),_0x28e928=this[_0x1cb6a4(0xbbe)](_0x11e0cd);let _0x353938=_0x4a0e1c-_0x29376e[_0x1cb6a4(0xaea)]/0x2-0x4,_0x3a1758=_0x28e928+_0xfde2c2['iconHeight']/0x2;_0x353938-_0x5f59b3[_0x1cb6a4(0xaea)]/0x2<_0x11e0cd['x']&&(_0x353938=_0x4a0e1c+_0x18d86f[_0x1cb6a4(0xaea)]/0x2-0x4,_0x3a1758=_0x28e928-_0x21b646[_0x1cb6a4(0x3fa)]/0x2);const _0x356052=_0x4a0e1c,_0x3d24a1=this[_0x1cb6a4(0xa56)](_0x11e0cd);this[_0x1cb6a4(0x271)](_0x341a02,_0x4a0e1c+(_0x2019b5[_0x1cb6a4(0x353)]||0x0),_0x28e928+(_0x2019b5[_0x1cb6a4(0x1e7)]||0x0)),this['placeActorName'](_0x341a02,_0x4a0e1c+(_0x2019b5[_0x1cb6a4(0x9e0)]||0x0),_0x28e928+(_0x2019b5[_0x1cb6a4(0xb19)]||0x0)),this[_0x1cb6a4(0x947)](_0x341a02,_0x353938+(_0x2019b5[_0x1cb6a4(0x4cf)]||0x0),_0x3a1758+(_0x2019b5[_0x1cb6a4(0x7a1)]||0x0)),this[_0x1cb6a4(0x464)](_0x341a02,'hp',_0x356052+(_0x2019b5[_0x1cb6a4(0x21d)]||0x0),_0x3d24a1+(_0x2019b5[_0x1cb6a4(0x617)]||0x0)),this[_0x1cb6a4(0x464)](_0x341a02,'mp',_0x356052+(_0x2019b5['MpGaugeOffsetX']||0x0),_0x3d24a1+this['gaugeLineHeight']()+(_0x2019b5['MpGaugeOffsetY']||0x0)),_0x2d468[_0x1cb6a4(0x23b)]&&this['placeGauge'](_0x341a02,'tp',_0x356052+(_0x2019b5[_0x1cb6a4(0xb6f)]||0x0),_0x3d24a1+this[_0x1cb6a4(0x915)]()*0x2+(_0x2019b5[_0x1cb6a4(0x868)]||0x0));}else{if(!_0x593211)continue;let _0x4fe6d7=_0x593211[_0x1cb6a4(0x6dd)]()[_0x1cb6a4(0x5f2)],_0x5146a2=_0x593211['battler']()['_baseY'];if(_0x2b79f1[_0x1cb6a4(0xab6)](/home/i))_0x4fe6d7=_0x593211[_0x1cb6a4(0x6dd)]()[_0x1cb6a4(0x4f6)],_0x5146a2=_0x593211[_0x1cb6a4(0x6dd)]()[_0x1cb6a4(0x680)];else{if(_0x2b79f1[_0x1cb6a4(0xab6)](/center/i))_0x4fe6d7=Graphics['boxWidth']/0x2,_0x5146a2=Graphics[_0x1cb6a4(0x165)]/0x2;else _0x2b79f1[_0x1cb6a4(0xab6)](/point (\d+), (\d+)/i)&&(_0x4fe6d7=Number(RegExp['$1']),_0x5146a2=Number(RegExp['$2']));}if(_0x162abb[_0x1cb6a4(0xab6)](/none/i))_0x4fe6d7+=_0x439e2b,_0x5146a2+=_0x227aed;else{if(_0x162abb['match'](/horz/i)&&_0x162abb[_0x1cb6a4(0xab6)](/vert/i))_0x1cb6a4(0x525)!=='cUaLi'?(_0x4fe6d7+=_0x593211[_0x1cb6a4(0x8de)]()?-_0x439e2b:_0x439e2b,_0x5146a2+=_0x593211[_0x1cb6a4(0x8de)]()?-_0x227aed:_0x227aed):_0x4426b1[_0x1cb6a4(0x1ea)][_0x1cb6a4(0x311)]=!![];else{if(_0x162abb[_0x1cb6a4(0xab6)](/horz/i))_0x4fe6d7+=_0x593211[_0x1cb6a4(0x8de)]()?-_0x439e2b:_0x439e2b,_0x5146a2+=_0x227aed;else _0x162abb[_0x1cb6a4(0xab6)](/vert/i)&&(_0x1cb6a4(0xba1)!=='mgoCp'?(_0x4fe6d7+=_0x439e2b,_0x5146a2+=_0x593211[_0x1cb6a4(0x8de)]()?-_0x227aed:_0x227aed):_0x397f6b[_0x1cb6a4(0x49e)]());}}_0x593211['moveBattlerHomeToPoint'](_0x4fe6d7,_0x5146a2,_0x1fd4d1,_0x26fdf5,_0x2a03e2,-0x1),_0x593211[_0x1cb6a4(0x7c8)](_0x38c8e2);}}if(_0x397ca1)_0x3bc372[_0x1cb6a4(0x227)](_0x1cb6a4(0x8b5));}),PluginManager[_0x44efce(0x5e6)](pluginData['name'],_0x44efce(0xb6d),_0x25fcfb=>{const _0x5495b7=_0x44efce;if(!SceneManager[_0x5495b7(0xbab)]())return;if(!$gameSystem[_0x5495b7(0x8c0)]())return;VisuMZ[_0x5495b7(0x878)](_0x25fcfb,_0x25fcfb);const _0x2589af=$gameTemp[_0x5495b7(0x3f8)](),_0x2ef32e=VisuMZ[_0x5495b7(0x57d)](_0x25fcfb[_0x5495b7(0x4ee)]),_0x32534f=VisuMZ['CreateActionSequenceTargets'](_0x25fcfb[_0x5495b7(0x780)]),_0x31d5aa=_0x25fcfb[_0x5495b7(0x197)];let _0x57457b=_0x25fcfb[_0x5495b7(0xf4)];const _0x215e15=_0x25fcfb[_0x5495b7(0xb68)],_0x9507ba=_0x25fcfb[_0x5495b7(0xfe)],_0x548f0f=_0x25fcfb[_0x5495b7(0x8cc)],_0x22b39e=_0x25fcfb[_0x5495b7(0x3c2)],_0x24e27b=_0x25fcfb[_0x5495b7(0xb6)],_0xad4b57=_0x25fcfb[_0x5495b7(0x2f9)],_0x537297=_0x25fcfb[_0x5495b7(0xbcb)],_0x466700=_0x25fcfb[_0x5495b7(0x2c1)],_0x533586=Math[_0x5495b7(0x90c)](..._0x32534f['map'](_0xab1b4b=>_0xab1b4b[_0x5495b7(0x6dd)]()['_baseX']-_0xab1b4b[_0x5495b7(0x6dd)]()[_0x5495b7(0xa12)]()/0x2)),_0x48b2d5=Math[_0x5495b7(0x65c)](..._0x32534f[_0x5495b7(0xba3)](_0x4f616e=>_0x4f616e[_0x5495b7(0x6dd)]()[_0x5495b7(0x5f2)]+_0x4f616e[_0x5495b7(0x6dd)]()[_0x5495b7(0xa12)]()/0x2)),_0x31b683=Math[_0x5495b7(0x90c)](..._0x32534f[_0x5495b7(0xba3)](_0x1208b7=>_0x1208b7[_0x5495b7(0x6dd)]()[_0x5495b7(0xbb8)]-_0x1208b7[_0x5495b7(0x6dd)]()[_0x5495b7(0x24c)]())),_0x114091=Math[_0x5495b7(0x65c)](..._0x32534f[_0x5495b7(0xba3)](_0x35750e=>_0x35750e[_0x5495b7(0x6dd)]()[_0x5495b7(0xbb8)])),_0x202ca3=_0x32534f[_0x5495b7(0xc9)](_0x22aeb5=>_0x22aeb5[_0x5495b7(0x8de)]())['length'],_0x32008b=_0x32534f[_0x5495b7(0xc9)](_0x55c94d=>_0x55c94d[_0x5495b7(0x851)]())['length'];let _0x1af35e=0x0,_0x3af570=0x0;if(_0x31d5aa['match'](/front/i))_0x1af35e=_0x202ca3>=_0x32008b?_0x533586:_0x48b2d5;else{if(_0x31d5aa[_0x5495b7(0xab6)](/middle/i))_0x5495b7(0x6f8)!=='CdaKa'?(this['_distortionSprite'][_0x5495b7(0xae4)]['x']=this['_targetSkewX'],this[_0x5495b7(0x2d3)][_0x5495b7(0xae4)]['y']=this[_0x5495b7(0x2e9)]):(_0x1af35e=(_0x533586+_0x48b2d5)/0x2,_0x57457b=-0x1);else _0x31d5aa[_0x5495b7(0xab6)](/back/i)&&(_0x1af35e=_0x202ca3>=_0x32008b?_0x48b2d5:_0x533586);}if(_0x31d5aa[_0x5495b7(0xab6)](/head/i))_0x5495b7(0x1ef)!=='BGvEH'?(_0x447e86[_0x5495b7(0x6d0)]['Window_BattleLog_performActionStart']['call'](this,_0x3a17ba,_0x2c048b),this[_0x5495b7(0x52f)]()):_0x3af570=_0x31b683;else{if(_0x31d5aa[_0x5495b7(0xab6)](/center/i))_0x5495b7(0x5bd)!=='wwUSt'?_0x17c1cc['BattleCore'][_0x5495b7(0x104)]['call'](this):_0x3af570=(_0x31b683+_0x114091)/0x2;else _0x31d5aa[_0x5495b7(0xab6)](/base/i)&&(_0x3af570=_0x114091);}if(!_0x2589af)return;for(const _0x3084a2 of _0x2ef32e){if(!_0x3084a2)continue;let _0xbab1d3=_0x1af35e,_0x3d61c1=_0x3af570;if(_0x215e15['match'](/none/i)){if(_0x5495b7(0x833)!==_0x5495b7(0x6d9))_0xbab1d3+=_0x9507ba,_0x3d61c1+=_0x548f0f;else return _0x5495b7(0x4a1);}else{if(_0x215e15['match'](/horz/i)&&_0x215e15[_0x5495b7(0xab6)](/vert/i))_0xbab1d3+=_0x3084a2[_0x5495b7(0x8de)]()?-_0x9507ba:_0x9507ba,_0x3d61c1+=_0x3084a2['isActor']()?-_0x548f0f:_0x548f0f;else{if(_0x215e15['match'](/horz/i)){if(_0x5495b7(0x856)!==_0x5495b7(0x856))return _0xed0121['BattleCore'][_0x5495b7(0xa47)][_0x5495b7(0xb59)](this);else _0xbab1d3+=_0x3084a2['isActor']()?-_0x9507ba:_0x9507ba,_0x3d61c1+=_0x548f0f;}else _0x215e15[_0x5495b7(0xab6)](/vert/i)&&(_0x5495b7(0x6bb)!==_0x5495b7(0x6bb)?(this[_0x5495b7(0x7ff)]+=_0x2aa5f7[_0x5495b7(0x97b)](),this[_0x5495b7(0x8b7)]['y']+=_0x156082['getBattlePortraitOffsetY']()):(_0xbab1d3+=_0x9507ba,_0x3d61c1+=_0x3084a2[_0x5495b7(0x8de)]()?-_0x548f0f:_0x548f0f));}}_0x3084a2[_0x5495b7(0x609)](_0xbab1d3,_0x3d61c1,_0x22b39e,_0x24e27b,_0xad4b57,_0x57457b),_0x3084a2[_0x5495b7(0x7c8)](_0x537297);}if(_0x466700)_0x2589af[_0x5495b7(0x227)](_0x5495b7(0x8b5));}),PluginManager[_0x44efce(0x5e6)](pluginData['name'],_0x44efce(0x678),_0x172613=>{const _0x1a585a=_0x44efce;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x1a585a(0x8c0)]())return;VisuMZ[_0x1a585a(0x878)](_0x172613,_0x172613);const _0x457c8a=VisuMZ[_0x1a585a(0x57d)](_0x172613[_0x1a585a(0x285)]);let _0x54d553=_0x172613[_0x1a585a(0x5eb)][_0x1a585a(0xab6)](/back/i);for(const _0xcd8d72 of _0x457c8a){if('ctLcR'==='sJjtT')_0x104699[_0x1a585a(0x6d0)][_0x1a585a(0x3ee)]['call'](this);else{if(!_0xcd8d72)continue;if(_0x172613[_0x1a585a(0x5eb)][_0x1a585a(0xab6)](/rand/i))_0x54d553=Math[_0x1a585a(0x2c7)](0x2);_0xcd8d72['setBattlerFlip'](!!_0x54d553);}}}),PluginManager[_0x44efce(0x5e6)](pluginData['name'],_0x44efce(0x359),_0x2f3cef=>{const _0x1781f3=_0x44efce;if(!SceneManager[_0x1781f3(0xbab)]())return;if(!$gameSystem[_0x1781f3(0x8c0)]())return;VisuMZ[_0x1781f3(0x878)](_0x2f3cef,_0x2f3cef);const _0x519298=VisuMZ[_0x1781f3(0x57d)](_0x2f3cef[_0x1781f3(0x285)]);let _0x6b126d=_0x2f3cef[_0x1781f3(0x7ee)];const _0x51c475=_0x2f3cef[_0x1781f3(0x3e5)];for(const _0x24f01 of _0x519298){if(!_0x24f01)continue;let _0x54c839=_0x24f01['battler']()[_0x1781f3(0x5f2)],_0x57db71=_0x24f01[_0x1781f3(0x6dd)]()[_0x1781f3(0xbb8)];if(_0x6b126d[_0x1781f3(0xab6)](/home/i))_0x1781f3(0x192)!==_0x1781f3(0x192)?(_0x1137ca[_0x1781f3(0x2cf)](_0x5f4810[0x2],_0x120491[0x3]),_0x3759eb['forceAction'](_0x76270)):(_0x54c839=_0x24f01[_0x1781f3(0x6dd)]()['_homeX'],_0x57db71=_0x24f01[_0x1781f3(0x6dd)]()[_0x1781f3(0x680)]);else{if(_0x6b126d['match'](/center/i))_0x1781f3(0xb8e)==='YZGoq'?_0x5579a0[_0x70523]['call'](this,_0x25c04b):(_0x54c839=Graphics[_0x1781f3(0x613)]/0x2,_0x57db71=Graphics[_0x1781f3(0x165)]/0x2);else _0x6b126d[_0x1781f3(0xab6)](/point (\d+), (\d+)/i)&&(_0x54c839=Number(RegExp['$1']),_0x57db71=Number(RegExp['$2']));}_0x24f01['setBattlerFacePoint'](Math[_0x1781f3(0x18c)](_0x54c839),Math[_0x1781f3(0x18c)](_0x57db71),!!_0x51c475);}}),PluginManager['registerCommand'](pluginData['name'],_0x44efce(0x8c1),_0xce9d38=>{const _0x420602=_0x44efce;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x420602(0x8c0)]())return;VisuMZ[_0x420602(0x878)](_0xce9d38,_0xce9d38);const _0x5c65e9=VisuMZ[_0x420602(0x57d)](_0xce9d38[_0x420602(0x4ee)]),_0x1c37f3=VisuMZ[_0x420602(0x57d)](_0xce9d38['Targets2']),_0x4139b2=_0x1c37f3[_0x420602(0xba3)](_0x46e134=>_0x46e134&&_0x46e134[_0x420602(0x6dd)]()?_0x46e134[_0x420602(0x6dd)]()[_0x420602(0x5f2)]:0x0)/(_0x1c37f3[_0x420602(0x496)]||0x1),_0x215c5c=_0x1c37f3[_0x420602(0xba3)](_0x296f5f=>_0x296f5f&&_0x296f5f[_0x420602(0x6dd)]()?_0x296f5f[_0x420602(0x6dd)]()['_baseY']:0x0)/(_0x1c37f3[_0x420602(0x496)]||0x1),_0x3fd6f7=_0xce9d38[_0x420602(0x3e5)];for(const _0x595d3c of _0x5c65e9){if('Aeeyy'!==_0x420602(0x78c)){if(!_0x595d3c)continue;_0x595d3c['setBattlerFacePoint'](Math[_0x420602(0x18c)](_0x4139b2),Math['round'](_0x215c5c),!!_0x3fd6f7);}else this[_0x420602(0x4b2)][_0x420602(0x50e)](_0x461fe1);}}),PluginManager[_0x44efce(0x5e6)](pluginData['name'],'ActSeq_Movement_Float',_0x4ff8f8=>{const _0x4d1c8c=_0x44efce;if(!SceneManager[_0x4d1c8c(0xbab)]())return;VisuMZ['ConvertParams'](_0x4ff8f8,_0x4ff8f8);const _0x333807=$gameTemp[_0x4d1c8c(0x3f8)](),_0x5ad50a=VisuMZ['CreateActionSequenceTargets'](_0x4ff8f8['Targets']),_0x562129=_0x4ff8f8[_0x4d1c8c(0x683)],_0x454c13=_0x4ff8f8[_0x4d1c8c(0x3c2)],_0x45a7c2=_0x4ff8f8[_0x4d1c8c(0x2f9)],_0x52c867=_0x4ff8f8['WaitForFloat'];if(!_0x333807)return;for(const _0x31670d of _0x5ad50a){if(!_0x31670d)continue;_0x31670d[_0x4d1c8c(0xa10)](_0x562129,_0x454c13,_0x45a7c2);}if(_0x52c867)_0x333807[_0x4d1c8c(0x227)](_0x4d1c8c(0xa02));}),PluginManager[_0x44efce(0x5e6)](pluginData['name'],_0x44efce(0x8c5),_0x1a4c39=>{const _0x167b37=_0x44efce;if(!SceneManager[_0x167b37(0xbab)]())return;VisuMZ[_0x167b37(0x878)](_0x1a4c39,_0x1a4c39);const _0x508a94=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x508a94)return;const _0x21c889=VisuMZ[_0x167b37(0x57d)](_0x1a4c39[_0x167b37(0x285)]);for(const _0x4f1cb8 of _0x21c889){if(!_0x4f1cb8)continue;_0x4f1cb8['performActionEndMembers']();}BattleManager[_0x167b37(0x427)]&&(_0x167b37(0x8e3)!==_0x167b37(0xa26)?BattleManager['_subject']['performActionEnd']():this[_0x167b37(0x2d3)][_0x167b37(0x317)](this[_0x167b37(0x92a)]));if(_0x1a4c39[_0x167b37(0x2c1)])_0x508a94[_0x167b37(0x227)]('battleMove');}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],'ActSeq_Movement_Jump',_0x43ffa5=>{const _0x33af8a=_0x44efce;if(!SceneManager[_0x33af8a(0xbab)]())return;VisuMZ[_0x33af8a(0x878)](_0x43ffa5,_0x43ffa5);const _0x5769bd=$gameTemp[_0x33af8a(0x3f8)](),_0x10463a=VisuMZ[_0x33af8a(0x57d)](_0x43ffa5[_0x33af8a(0x285)]),_0x1ad08a=_0x43ffa5[_0x33af8a(0x683)],_0x2937dd=_0x43ffa5[_0x33af8a(0x3c2)],_0x4affbe=_0x43ffa5[_0x33af8a(0x809)];if(!_0x5769bd)return;for(const _0x5396e4 of _0x10463a){if(!_0x5396e4)continue;_0x5396e4[_0x33af8a(0x125)](_0x1ad08a,_0x2937dd);}if(_0x4affbe)_0x5769bd[_0x33af8a(0x227)](_0x33af8a(0xbb4));}),PluginManager[_0x44efce(0x5e6)](pluginData['name'],_0x44efce(0x12e),_0x3dabb8=>{const _0x4cb5a6=_0x44efce;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x4cb5a6(0x8c0)]())return;VisuMZ[_0x4cb5a6(0x878)](_0x3dabb8,_0x3dabb8);const _0x1b5abd=$gameTemp[_0x4cb5a6(0x3f8)](),_0x15c474=VisuMZ[_0x4cb5a6(0x57d)](_0x3dabb8['Targets']),_0x2f8a76=_0x3dabb8[_0x4cb5a6(0x57b)],_0x22546f=_0x3dabb8[_0x4cb5a6(0x5fe)],_0x1037a7=_0x3dabb8[_0x4cb5a6(0x22b)],_0x4b74e5=_0x3dabb8[_0x4cb5a6(0x3c2)],_0x3fe452=_0x3dabb8[_0x4cb5a6(0xb6)],_0x1ecad7=_0x3dabb8[_0x4cb5a6(0x2f9)],_0x344457=_0x3dabb8[_0x4cb5a6(0xbcb)],_0x3c3e1c=_0x3dabb8[_0x4cb5a6(0x2c1)];if(!_0x1b5abd)return;for(const _0x5e6058 of _0x15c474){if(!_0x5e6058)continue;let _0x5b864e=_0x22546f,_0x3beffc=_0x1037a7;if(_0x2f8a76['match'](/horz/i))_0x5b864e*=_0x5e6058[_0x4cb5a6(0x8de)]()?-0x1:0x1;if(_0x2f8a76['match'](/vert/i))_0x3beffc*=_0x5e6058[_0x4cb5a6(0x8de)]()?-0x1:0x1;_0x5e6058[_0x4cb5a6(0x2c3)](_0x5b864e,_0x3beffc,_0x4b74e5,_0x3fe452,_0x1ecad7),_0x5e6058[_0x4cb5a6(0x7c8)](_0x344457);}if(_0x3c3e1c)_0x1b5abd[_0x4cb5a6(0x227)](_0x4cb5a6(0x8b5));}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],_0x44efce(0x322),_0x1d3ff2=>{const _0x503b5f=_0x44efce;if(!SceneManager[_0x503b5f(0xbab)]())return;if(!$gameSystem[_0x503b5f(0x8c0)]())return;VisuMZ['ConvertParams'](_0x1d3ff2,_0x1d3ff2);const _0x2f2ee9=$gameTemp[_0x503b5f(0x3f8)](),_0x4c3087=VisuMZ[_0x503b5f(0x57d)](_0x1d3ff2[_0x503b5f(0x285)]),_0x143445=_0x1d3ff2[_0x503b5f(0x369)],_0x1d7513=_0x1d3ff2[_0x503b5f(0xb68)],_0x209486=_0x1d3ff2[_0x503b5f(0xfe)],_0x251424=_0x1d3ff2[_0x503b5f(0x8cc)],_0x250725=_0x1d3ff2['Duration'],_0x50be97=_0x1d3ff2[_0x503b5f(0xb6)],_0x4cfb5f=_0x1d3ff2[_0x503b5f(0x2f9)],_0x35bd83=_0x1d3ff2[_0x503b5f(0xbcb)],_0x2e32ac=_0x1d3ff2['WaitForMovement'];if(!_0x2f2ee9)return;for(const _0x379acb of _0x4c3087){if(!_0x379acb)continue;let _0x3d9455=_0x379acb[_0x503b5f(0x6dd)]()[_0x503b5f(0x5f2)],_0x56fd8e=_0x379acb['battler']()[_0x503b5f(0xbb8)];if(_0x143445['match'](/home/i))'DyGZT'==='YyDiR'?this['addChild'](this[_0x503b5f(0xb27)]):(_0x3d9455=_0x379acb[_0x503b5f(0x6dd)]()['_homeX'],_0x56fd8e=_0x379acb[_0x503b5f(0x6dd)]()[_0x503b5f(0x680)]);else{if(_0x143445[_0x503b5f(0xab6)](/center/i))_0x3d9455=Graphics[_0x503b5f(0x613)]/0x2,_0x56fd8e=Graphics[_0x503b5f(0x165)]/0x2;else _0x143445['match'](/point (\d+), (\d+)/i)&&(_0x3d9455=Number(RegExp['$1']),_0x56fd8e=Number(RegExp['$2']));}if(_0x1d7513[_0x503b5f(0xab6)](/none/i))_0x503b5f(0x501)!==_0x503b5f(0x501)?_0x4677e8[_0x503b5f(0x430)](_0x503b5f(0x82a)):(_0x3d9455+=_0x209486,_0x56fd8e+=_0x251424);else{if(_0x1d7513['match'](/horz/i)&&_0x1d7513[_0x503b5f(0xab6)](/vert/i)){if(_0x503b5f(0x16e)!=='VLroZ')_0x3d9455+=_0x379acb[_0x503b5f(0x8de)]()?-_0x209486:_0x209486,_0x56fd8e+=_0x379acb['isActor']()?-_0x251424:_0x251424;else{const _0x3b7e2a=_0x2ab7e0(_0x2cc4a9['$1'])[_0x503b5f(0x603)](/[\r\n]+/)[_0x503b5f(0xac9)]('');_0x562cba['name']=_0x42503b['processRandomizedData'](_0x3b7e2a);}}else{if(_0x1d7513['match'](/horz/i))_0x3d9455+=_0x379acb[_0x503b5f(0x8de)]()?-_0x209486:_0x209486,_0x56fd8e+=_0x251424;else{if(_0x1d7513[_0x503b5f(0xab6)](/vert/i)){if('aXnCD'===_0x503b5f(0xa13))_0x3d9455+=_0x209486,_0x56fd8e+=_0x379acb['isActor']()?-_0x251424:_0x251424;else{if(_0x2e2cd2[_0x503b5f(0x9d1)][_0x503b5f(0x837)]===0x3)return![];}}}}}_0x379acb[_0x503b5f(0x7ae)](_0x3d9455,_0x56fd8e,_0x250725,_0x50be97,_0x4cfb5f,-0x1),_0x379acb[_0x503b5f(0x7c8)](_0x35bd83);}if(_0x2e32ac)_0x2f2ee9[_0x503b5f(0x227)](_0x503b5f(0x8b5));}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0xa5e),_0x44437e=>{const _0x4f9f83=_0x44efce;if(!SceneManager[_0x4f9f83(0xbab)]())return;if(!$gameSystem[_0x4f9f83(0x8c0)]())return;VisuMZ['ConvertParams'](_0x44437e,_0x44437e);const _0x42a399=$gameTemp[_0x4f9f83(0x3f8)](),_0x1018c7=VisuMZ['CreateActionSequenceTargets'](_0x44437e['Targets1']),_0x17c486=VisuMZ['CreateActionSequenceTargets'](_0x44437e[_0x4f9f83(0x780)]),_0xd645f6=_0x44437e[_0x4f9f83(0x197)];let _0x2bf5c3=_0x44437e['MeleeDistance'];const _0x1a172d=_0x44437e[_0x4f9f83(0xb68)],_0x3bac00=_0x44437e[_0x4f9f83(0xfe)],_0x1258e7=_0x44437e[_0x4f9f83(0x8cc)],_0x4643bc=_0x44437e[_0x4f9f83(0x3c2)],_0x5ec9be=_0x44437e[_0x4f9f83(0xb6)],_0x36954f=_0x44437e[_0x4f9f83(0x2f9)],_0x1c791f=_0x44437e[_0x4f9f83(0xbcb)],_0xe51e71=_0x44437e['WaitForMovement'],_0x4e28af=Math[_0x4f9f83(0x90c)](..._0x17c486['map'](_0x1e01b2=>_0x1e01b2['battler']()[_0x4f9f83(0x5f2)]-_0x1e01b2[_0x4f9f83(0x6dd)]()[_0x4f9f83(0xa12)]()/0x2)),_0x3d1ac5=Math[_0x4f9f83(0x65c)](..._0x17c486[_0x4f9f83(0xba3)](_0x1a492c=>_0x1a492c[_0x4f9f83(0x6dd)]()[_0x4f9f83(0x5f2)]+_0x1a492c['battler']()[_0x4f9f83(0xa12)]()/0x2)),_0xba98e6=Math['min'](..._0x17c486[_0x4f9f83(0xba3)](_0x1e8ed4=>_0x1e8ed4[_0x4f9f83(0x6dd)]()[_0x4f9f83(0xbb8)]-_0x1e8ed4[_0x4f9f83(0x6dd)]()['mainSpriteHeight']())),_0x1d86d9=Math[_0x4f9f83(0x65c)](..._0x17c486['map'](_0x15dce5=>_0x15dce5[_0x4f9f83(0x6dd)]()['_baseY'])),_0x25a203=_0x17c486['filter'](_0x320039=>_0x320039[_0x4f9f83(0x8de)]())[_0x4f9f83(0x496)],_0x7b35ce=_0x17c486['filter'](_0x3f8ce2=>_0x3f8ce2[_0x4f9f83(0x851)]())[_0x4f9f83(0x496)];let _0x4fb21d=0x0,_0x2cdf28=0x0;if(_0xd645f6['match'](/front/i))_0x4fb21d=_0x25a203>=_0x7b35ce?_0x4e28af:_0x3d1ac5;else{if(_0xd645f6['match'](/middle/i))_0x4fb21d=(_0x4e28af+_0x3d1ac5)/0x2,_0x2bf5c3=-0x1;else _0xd645f6[_0x4f9f83(0xab6)](/back/i)&&(_0x4fb21d=_0x25a203>=_0x7b35ce?_0x3d1ac5:_0x4e28af);}if(_0xd645f6[_0x4f9f83(0xab6)](/head/i)){if('oTtoD'==='dUMYE'){const _0x150427=this[_0x4f9f83(0x7f3)](),_0x4f2b16=_0x5b4903[_0x4f9f83(0x6d0)][_0x4f9f83(0x444)]['PartyCmd']['CmdIconEscape'],_0x4e208b=_0x150427===_0x4f9f83(0x453)?_0x353342[_0x4f9f83(0xa17)]:_0x4f9f83(0x7a6)[_0x4f9f83(0x437)](_0x4f2b16,_0x1d1e97['escape']),_0x31706e=this[_0x4f9f83(0x627)]();this[_0x4f9f83(0x929)](_0x4e208b,_0x4f9f83(0xa17),_0x31706e);}else _0x2cdf28=_0xba98e6;}else{if(_0xd645f6[_0x4f9f83(0xab6)](/center/i))_0x2cdf28=(_0xba98e6+_0x1d86d9)/0x2;else _0xd645f6[_0x4f9f83(0xab6)](/base/i)&&(_0x2cdf28=_0x1d86d9);}if(!_0x42a399)return;for(const _0x409a47 of _0x1018c7){if(!_0x409a47)continue;let _0x4c5a45=_0x4fb21d,_0x14e01b=_0x2cdf28;if(_0x1a172d['match'](/none/i)){if(_0x4f9f83(0xaf2)!==_0x4f9f83(0xa30))_0x4c5a45+=_0x3bac00,_0x14e01b+=_0x1258e7;else{const _0x59eb6=this[_0x4f9f83(0x987)]()[_0x4f9f83(0x61c)];return _0x59eb6[_0x4f9f83(0xab6)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);}}else{if(_0x1a172d[_0x4f9f83(0xab6)](/horz/i)&&_0x1a172d[_0x4f9f83(0xab6)](/vert/i))_0x4c5a45+=_0x409a47[_0x4f9f83(0x8de)]()?-_0x3bac00:_0x3bac00,_0x14e01b+=_0x409a47[_0x4f9f83(0x8de)]()?-_0x1258e7:_0x1258e7;else{if(_0x1a172d[_0x4f9f83(0xab6)](/horz/i))_0x4c5a45+=_0x409a47[_0x4f9f83(0x8de)]()?-_0x3bac00:_0x3bac00,_0x14e01b+=_0x1258e7;else _0x1a172d['match'](/vert/i)&&(_0x4c5a45+=_0x3bac00,_0x14e01b+=_0x409a47['isActor']()?-_0x1258e7:_0x1258e7);}}_0x409a47[_0x4f9f83(0x7ae)](_0x4c5a45,_0x14e01b,_0x4643bc,_0x5ec9be,_0x36954f,_0x2bf5c3),_0x409a47['requestMotion'](_0x1c791f);}if(_0xe51e71)_0x42a399[_0x4f9f83(0x227)]('battleMove');}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],'ActSeq_Movement_Opacity',_0x12e198=>{const _0x330958=_0x44efce;if(!SceneManager[_0x330958(0xbab)]())return;VisuMZ[_0x330958(0x878)](_0x12e198,_0x12e198);const _0x58f97c=$gameTemp[_0x330958(0x3f8)](),_0x1d6322=VisuMZ[_0x330958(0x57d)](_0x12e198[_0x330958(0x285)]),_0x495712=_0x12e198[_0x330958(0x770)],_0x3cde4a=_0x12e198[_0x330958(0x3c2)],_0x130f01=_0x12e198[_0x330958(0x2f9)],_0x248cf4=_0x12e198[_0x330958(0xbf)];if(!_0x58f97c)return;for(const _0xcc53e1 of _0x1d6322){if(_0x330958(0x5ad)!==_0x330958(0x5ad))this[_0x330958(0x803)](_0x2158a2['list'],0x0);else{if(!_0xcc53e1)continue;_0xcc53e1[_0x330958(0x6a7)](_0x495712,_0x3cde4a,_0x130f01);}}if(_0x248cf4)_0x58f97c[_0x330958(0x227)](_0x330958(0x14d));}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x5fd),_0x585519=>{const _0x1082f3=_0x44efce;if(!SceneManager[_0x1082f3(0xbab)]())return;VisuMZ['ConvertParams'](_0x585519,_0x585519);const _0x5962db=$gameTemp[_0x1082f3(0x3f8)](),_0x213777=VisuMZ[_0x1082f3(0x57d)](_0x585519[_0x1082f3(0x285)]),_0x28a148=_0x585519[_0x1082f3(0x5ce)],_0x1b59db=_0x585519[_0x1082f3(0x1d5)],_0x3baf28=_0x585519[_0x1082f3(0x3c2)],_0x4d320f=_0x585519[_0x1082f3(0x2f9)],_0x18f41c=_0x585519[_0x1082f3(0x6ce)];if(!_0x5962db)return;for(const _0x5880a0 of _0x213777){if(!_0x5880a0)continue;_0x5880a0['growBattler'](_0x28a148,_0x1b59db,_0x3baf28,_0x4d320f);}if(_0x18f41c)_0x5962db['setWaitMode']('battleGrow');}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x991),_0x420763=>{const _0xcee4c0=_0x44efce;if(!SceneManager[_0xcee4c0(0xbab)]())return;VisuMZ[_0xcee4c0(0x878)](_0x420763,_0x420763);const _0x1c9e57=$gameTemp[_0xcee4c0(0x3f8)](),_0x3e0ce2=VisuMZ[_0xcee4c0(0x57d)](_0x420763[_0xcee4c0(0x285)]),_0x2550a1=_0x420763[_0xcee4c0(0x6c3)],_0x1a8196=_0x420763['SkewY'],_0x44503e=_0x420763[_0xcee4c0(0x3c2)],_0x482468=_0x420763['EasingType'],_0x696db6=_0x420763[_0xcee4c0(0x97f)];if(!_0x1c9e57)return;for(const _0x269868 of _0x3e0ce2){if(!_0x269868)continue;_0x269868[_0xcee4c0(0xa8c)](_0x2550a1,_0x1a8196,_0x44503e,_0x482468);}if(_0x696db6)_0x1c9e57[_0xcee4c0(0x227)](_0xcee4c0(0xdb));}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x173),_0x2ed46e=>{const _0x4a59c4=_0x44efce;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4a59c4(0x878)](_0x2ed46e,_0x2ed46e);const _0x153c89=$gameTemp[_0x4a59c4(0x3f8)](),_0x1e66ba=VisuMZ['CreateActionSequenceTargets'](_0x2ed46e[_0x4a59c4(0x285)]),_0x2f8931=_0x2ed46e[_0x4a59c4(0x337)],_0x3cc4f3=_0x2ed46e[_0x4a59c4(0x3c2)],_0x127680=_0x2ed46e[_0x4a59c4(0x2f9)],_0x421759=_0x2ed46e[_0x4a59c4(0x5c4)],_0x190f60=_0x2ed46e['WaitForSpin'];if(!_0x153c89)return;for(const _0x2bf0b1 of _0x1e66ba){if(!_0x2bf0b1)continue;_0x2bf0b1[_0x4a59c4(0x825)](_0x2f8931,_0x3cc4f3,_0x127680,_0x421759);}if(_0x190f60)_0x153c89[_0x4a59c4(0x227)](_0x4a59c4(0x96b));}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x18f),_0x388df3=>{const _0x2f9439=_0x44efce;if(!SceneManager[_0x2f9439(0xbab)]())return;const _0x27e20a=$gameTemp[_0x2f9439(0x3f8)]();if(!_0x27e20a)return;_0x27e20a[_0x2f9439(0x227)](_0x2f9439(0xa02));}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0xbe),_0xee8f58=>{const _0x4c4bcb=_0x44efce;if(!SceneManager[_0x4c4bcb(0xbab)]())return;const _0x274484=$gameTemp[_0x4c4bcb(0x3f8)]();if(!_0x274484)return;_0x274484[_0x4c4bcb(0x227)](_0x4c4bcb(0xbb4));}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],_0x44efce(0x22f),_0x2f44fe=>{const _0x3540a4=_0x44efce;if(!SceneManager[_0x3540a4(0xbab)]())return;const _0x29c3eb=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x29c3eb)return;_0x29c3eb[_0x3540a4(0x227)]('battleMove');}),PluginManager[_0x44efce(0x5e6)](pluginData['name'],_0x44efce(0x8d2),_0x5d98cd=>{const _0x3fd8e7=_0x44efce;if(!SceneManager[_0x3fd8e7(0xbab)]())return;const _0x31aa50=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x31aa50)return;_0x31aa50['setWaitMode']('battleOpacity');}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0xaa8),_0x36bd8c=>{const _0x40220e=_0x44efce;if(!SceneManager[_0x40220e(0xbab)]())return;const _0x2fb8ac=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x2fb8ac)return;_0x2fb8ac[_0x40220e(0x227)](_0x40220e(0x60c));}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0xa8d),_0x6ee092=>{const _0x2ed8bb=_0x44efce;if(!SceneManager[_0x2ed8bb(0xbab)]())return;const _0x433fdb=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x433fdb)return;_0x433fdb[_0x2ed8bb(0x227)](_0x2ed8bb(0xdb));}),PluginManager[_0x44efce(0x5e6)](pluginData['name'],_0x44efce(0xcd),_0x48ce7a=>{const _0x20fd93=_0x44efce;if(!SceneManager[_0x20fd93(0xbab)]())return;const _0x3db8a3=$gameTemp[_0x20fd93(0x3f8)]();if(!_0x3db8a3)return;_0x3db8a3[_0x20fd93(0x227)]('battleSpin');}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x789),_0xa5aadc=>{const _0x20a31b=_0x44efce;if(!SceneManager[_0x20a31b(0xbab)]())return;if(!Imported[_0x20a31b(0x483)])return;VisuMZ[_0x20a31b(0x878)](_0xa5aadc,_0xa5aadc);const _0x460c76=$gameTemp[_0x20a31b(0x3f8)](),_0x2c5651=_0xa5aadc[_0x20a31b(0x475)];if(!_0x460c76)return;const _0x164304=BattleManager[_0x20a31b(0x948)];if(!_0x164304)return;_0x164304[_0x20a31b(0x27a)](_0xa5aadc);if(_0x2c5651)_0x460c76[_0x20a31b(0x227)](_0x20a31b(0x345));}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],_0x44efce(0x538),_0x1272c2=>{const _0x4a104b=_0x44efce;if(!SceneManager[_0x4a104b(0xbab)]())return;if(!Imported[_0x4a104b(0x483)])return;VisuMZ[_0x4a104b(0x878)](_0x1272c2,_0x1272c2);const _0xabba4d=$gameTemp[_0x4a104b(0x3f8)](),_0x5f3717=_0x1272c2[_0x4a104b(0x475)];if(!_0xabba4d)return;const _0x589304=BattleManager[_0x4a104b(0x948)];if(!_0x589304)return;_0x589304[_0x4a104b(0x27a)](_0x1272c2);if(_0x5f3717)_0xabba4d['setWaitMode'](_0x4a104b(0x345));}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0xaed),_0x5114c9=>{const _0x182ed4=_0x44efce;if(!SceneManager[_0x182ed4(0xbab)]())return;if(!Imported[_0x182ed4(0x483)])return;VisuMZ[_0x182ed4(0x878)](_0x5114c9,_0x5114c9);const _0x536ed4=$gameTemp[_0x182ed4(0x3f8)](),_0xd60764=_0x5114c9[_0x182ed4(0x475)];if(!_0x536ed4)return;const _0x37b837=BattleManager[_0x182ed4(0x948)];if(!_0x37b837)return;_0x37b837['createActionSequenceProjectile'](_0x5114c9);if(_0xd60764)_0x536ed4[_0x182ed4(0x227)]('battleProjectiles');}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0xabd),_0x5cf5c1=>{const _0x2cb85e=_0x44efce;if(!SceneManager[_0x2cb85e(0xbab)]())return;if(!Imported[_0x2cb85e(0x22e)])return;VisuMZ[_0x2cb85e(0x878)](_0x5cf5c1,_0x5cf5c1);const _0x55f6b4=$gameTemp[_0x2cb85e(0x3f8)](),_0x3a71f8=_0x5cf5c1[_0x2cb85e(0x97f)];if(!_0x55f6b4)return;$gameScreen[_0x2cb85e(0x52a)](_0x5cf5c1[_0x2cb85e(0x6c3)],_0x5cf5c1[_0x2cb85e(0x97c)],_0x5cf5c1[_0x2cb85e(0x3c2)],_0x5cf5c1[_0x2cb85e(0x2f9)]);if(_0x3a71f8)_0x55f6b4[_0x2cb85e(0x227)](_0x2cb85e(0x4d9));}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x324),_0x427f29=>{const _0x581878=_0x44efce;if(!SceneManager[_0x581878(0xbab)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x581878(0x878)](_0x427f29,_0x427f29);const _0x516852=$gameTemp[_0x581878(0x3f8)](),_0x1a3899=_0x427f29[_0x581878(0x97f)];if(!_0x516852)return;$gameScreen[_0x581878(0x52a)](0x0,0x0,_0x427f29['Duration'],_0x427f29[_0x581878(0x2f9)]);if(_0x1a3899)_0x516852[_0x581878(0x227)](_0x581878(0x4d9));}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],_0x44efce(0x476),_0x201cd5=>{const _0x3904de=_0x44efce;if(!SceneManager[_0x3904de(0xbab)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x4819ce=$gameTemp[_0x3904de(0x3f8)]();if(!_0x4819ce)return;_0x4819ce[_0x3904de(0x227)](_0x3904de(0x4d9));}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x218),_0x3f8300=>{const _0xc5e683=_0x44efce;if(!SceneManager[_0xc5e683(0xbab)]())return;VisuMZ[_0xc5e683(0x878)](_0x3f8300,_0x3f8300);const _0x3dc33c=$gameTemp['getLastPluginCommandInterpreter'](),_0x205dee=_0x3f8300['Index'],_0x455e65=_0x3f8300[_0xc5e683(0x1a1)];if(!_0x3dc33c)return;BattleManager[_0xc5e683(0x9ee)]=_0x205dee,BattleManager[_0xc5e683(0x628)]=BattleManager[_0xc5e683(0xb78)]?BattleManager['_allTargets'][BattleManager[_0xc5e683(0x9ee)]]||null:null,BattleManager[_0xc5e683(0x628)]&&_0x455e65[_0xc5e683(0xb2d)]()['trim']()!==_0xc5e683(0x1b4)&&_0x3dc33c[_0xc5e683(0x118)]([_0x455e65]);}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],'ActSeq_Target_NextTarget',_0x820dc1=>{const _0x416610=_0x44efce;if(!SceneManager[_0x416610(0xbab)]())return;VisuMZ[_0x416610(0x878)](_0x820dc1,_0x820dc1);const _0x2c73a5=$gameTemp[_0x416610(0x3f8)](),_0x26ade1=_0x820dc1['JumpToLabel'];if(!_0x2c73a5)return;BattleManager[_0x416610(0x9ee)]++,BattleManager[_0x416610(0x628)]=BattleManager[_0x416610(0xb78)][BattleManager[_0x416610(0x9ee)]]||null;if(BattleManager['_target']&&_0x26ade1['toUpperCase']()[_0x416610(0xaef)]()!=='UNTITLED'){if(_0x416610(0x5d2)===_0x416610(0x5d2))_0x2c73a5[_0x416610(0x118)]([_0x26ade1]);else{const _0x3818a6=_0x4fce52[_0x416610(0x963)](_0x19914c[_0x416610(0xb2d)]()['trim']());_0x3818a6>=0x0&&_0x3818a6<=0x7&&_0xddc7bc['isDebuffAffected'](_0x3818a6)&&_0xf0ae1c[_0x416610(0x807)](_0x3818a6);}}}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x5d5),_0x15fa6e=>{const _0x492f2a=_0x44efce;if(!SceneManager[_0x492f2a(0xbab)]())return;VisuMZ[_0x492f2a(0x878)](_0x15fa6e,_0x15fa6e);const _0x4e5f9c=$gameTemp[_0x492f2a(0x3f8)](),_0x120ea2=_0x15fa6e[_0x492f2a(0x1a1)];if(!_0x4e5f9c)return;BattleManager[_0x492f2a(0x9ee)]--,BattleManager[_0x492f2a(0x628)]=BattleManager['_allTargets'][BattleManager[_0x492f2a(0x9ee)]]||null;if(BattleManager[_0x492f2a(0x628)]&&_0x120ea2[_0x492f2a(0xb2d)]()[_0x492f2a(0xaef)]()!==_0x492f2a(0x1b4)){if(_0x492f2a(0xa76)===_0x492f2a(0x4be)){const _0x3e1856=_0x1cedd3[_0x492f2a(0x6d0)][_0x492f2a(0x444)][_0x492f2a(0x6e4)];if(!_0x3e1856['StartTurnShow'])return;this[_0x492f2a(0xb70)](_0x492f2a(0x6fa),_0x3e1856[_0x492f2a(0x69f)][_0x492f2a(0x437)](_0x7ade9d[_0x492f2a(0x471)]())),this[_0x492f2a(0xb70)]('waitCount',_0x3e1856[_0x492f2a(0x1b2)]),this[_0x492f2a(0xb70)](_0x492f2a(0xa09));}else _0x4e5f9c[_0x492f2a(0x118)]([_0x120ea2]);}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Target_RandTarget',_0x381922=>{const _0x4ca9ba=_0x44efce;if(!SceneManager[_0x4ca9ba(0xbab)]())return;VisuMZ['ConvertParams'](_0x381922,_0x381922);const _0x543a9b=$gameTemp[_0x4ca9ba(0x3f8)](),_0x1201d0=_0x381922[_0x4ca9ba(0x33e)],_0x5a53cc=_0x381922[_0x4ca9ba(0x1a1)];if(!_0x543a9b)return;const _0x3ade66=BattleManager[_0x4ca9ba(0x9ee)];for(;;){if('qPyQz'===_0x4ca9ba(0x4f8))this[_0x4ca9ba(0x51f)]()?_0x36e19b[_0x4ca9ba(0x8f2)][_0x4ca9ba(0x154)][_0x4ca9ba(0xb59)](this):this[_0x4ca9ba(0xd7)]=0x8;else{BattleManager['_targetIndex']=Math['randomInt'](BattleManager[_0x4ca9ba(0xb78)][_0x4ca9ba(0x496)]);if(!_0x1201d0)break;if(BattleManager[_0x4ca9ba(0x9ee)]!==_0x3ade66)break;if(BattleManager[_0x4ca9ba(0xb78)][_0x4ca9ba(0x496)]<=0x1){if(_0x4ca9ba(0x8c2)==='MRFbT')this['_distortionSprite']['addChild'](this[_0x4ca9ba(0xb06)]);else{BattleManager[_0x4ca9ba(0x9ee)]=0x0;break;}}}}BattleManager['_target']=BattleManager[_0x4ca9ba(0xb78)][BattleManager[_0x4ca9ba(0x9ee)]]||null,BattleManager[_0x4ca9ba(0x628)]&&_0x5a53cc[_0x4ca9ba(0xb2d)]()['trim']()!==_0x4ca9ba(0x1b4)&&_0x543a9b['command119']([_0x5a53cc]);}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],_0x44efce(0x3e0),_0x40cef8=>{const _0x4c0f41=_0x44efce;if(!SceneManager[_0x4c0f41(0xbab)]())return;VisuMZ[_0x4c0f41(0x878)](_0x40cef8,_0x40cef8);const _0x1f7183=VisuMZ['CreateActionSequenceTargets'](_0x40cef8[_0x4c0f41(0x285)]);for(const _0x3b0c51 of _0x1f7183){if('kYBuR'===_0x4c0f41(0xb7f))_0x563e66[_0x4c0f41(0x8f2)][_0x4c0f41(0x9da)][_0x4c0f41(0xb59)](this),this[_0x4c0f41(0x870)](),this[_0x4c0f41(0xa27)](),this['updateAttachedSprites'](),this[_0x4c0f41(0x798)]();else{if(!_0x3b0c51)continue;if(!_0x3b0c51[_0x4c0f41(0x8de)]())continue;_0x3b0c51[_0x4c0f41(0x84d)]();}}}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x245),_0x307917=>{const _0x1b6c3b=_0x44efce;if(!SceneManager[_0x1b6c3b(0xbab)]())return;VisuMZ[_0x1b6c3b(0x878)](_0x307917,_0x307917);const _0x1fcb43=$gameTemp[_0x1b6c3b(0x3f8)]();let _0x450dee=![];const _0x372727=_0x307917[_0x1b6c3b(0x1a1)],_0x43b660=VisuMZ[_0x1b6c3b(0x57d)](_0x307917[_0x1b6c3b(0x285)]);for(const _0x1b918a of _0x43b660){if(_0x1b6c3b(0x265)==='OUDyA'){if(!_0x1b918a)continue;if(!_0x1b918a['isActor']())continue;_0x1b918a[_0x1b6c3b(0x87d)]();if(_0x1b918a['weapons']()[_0x1b6c3b(0x496)]>0x0)_0x1b6c3b(0x2ed)===_0x1b6c3b(0x2ed)?_0x450dee=!![]:_0x1bdd6a[_0x1b6c3b(0x6d0)][_0x1b6c3b(0x77f)][_0x1b6c3b(0xb59)](this);else{if('hVqPa'===_0x1b6c3b(0x5af)){if(!_0x325b99[_0x1b6c3b(0x92e)]())return;if(this[_0x1b6c3b(0x634)])return;this[_0x1b6c3b(0x634)]=!![];let _0x435076='';_0x435076+='VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing',_0x435076+='\x20to\x20%1\x20midbattle.'[_0x1b6c3b(0x437)](_0x42f8dc['name']),_0x4d8293(_0x435076);}else _0x1b918a[_0x1b6c3b(0x84d)]();}}else{if(_0x396bd1[_0x1b6c3b(0x654)])this[_0x1b6c3b(0x117)](_0x3576c7[_0x1b6c3b(0x57f)],_0x15e876,_0x503278);if(_0x442c7f[_0x1b6c3b(0x5d8)])this[_0x1b6c3b(0x117)](_0x83c620[_0x1b6c3b(0x131)],_0x21f74e,_0x444ecf);}}_0x450dee&&_0x372727[_0x1b6c3b(0xb2d)]()['trim']()!==_0x1b6c3b(0x1b4)&&_0x1fcb43[_0x1b6c3b(0x118)]([_0x372727]);}),PluginManager[_0x44efce(0x5e6)](pluginData['name'],'ActSeq_Weapon_SetActiveWeapon',_0x278086=>{const _0x3936e4=_0x44efce;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3936e4(0x878)](_0x278086,_0x278086);let _0x2a35af=_0x278086['SlotID'];_0x2a35af--,_0x2a35af=Math[_0x3936e4(0x65c)](_0x2a35af,0x0);const _0x572a95=VisuMZ[_0x3936e4(0x57d)](_0x278086[_0x3936e4(0x285)]);for(const _0x561c3a of _0x572a95){if(_0x3936e4(0x244)!=='BeXIj'){if(!_0x561c3a)continue;if(!_0x561c3a[_0x3936e4(0x8de)]())continue;_0x561c3a['setActiveWeaponSlot'](_0x2a35af);}else return _0xe308e4[_0x3936e4(0x465)](this),_0x199b3f[_0x3936e4(0x6d0)]['Game_Interpreter_PluginCommand'][_0x3936e4(0xb59)](this,_0x1b8a13);}}),PluginManager['registerCommand'](pluginData[_0x44efce(0x5d4)],_0x44efce(0xae9),_0xba3622=>{const _0x5e5369=_0x44efce;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5e5369(0x22e)])return;VisuMZ[_0x5e5369(0x878)](_0xba3622,_0xba3622);const _0x2452ea=$gameTemp[_0x5e5369(0x3f8)](),_0x5ac9fb=_0xba3622['WaitForZoom'];if(!_0x2452ea)return;$gameScreen[_0x5e5369(0x2b4)](_0xba3622[_0x5e5369(0xaf5)],_0xba3622[_0x5e5369(0x3c2)],_0xba3622['EasingType']);if(_0x5ac9fb)_0x2452ea[_0x5e5369(0x227)](_0x5e5369(0x7df));}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x993),_0x2aa5ae=>{const _0x55c685=_0x44efce;if(!SceneManager[_0x55c685(0xbab)]())return;if(!Imported[_0x55c685(0x22e)])return;VisuMZ['ConvertParams'](_0x2aa5ae,_0x2aa5ae);const _0x3f2576=$gameTemp[_0x55c685(0x3f8)](),_0xcbda4d=_0x2aa5ae[_0x55c685(0x48c)];if(!_0x3f2576)return;$gameScreen[_0x55c685(0x2b4)](0x1,_0x2aa5ae['Duration'],_0x2aa5ae[_0x55c685(0x2f9)]);if(_0xcbda4d)_0x3f2576['setWaitMode'](_0x55c685(0x7df));}),PluginManager[_0x44efce(0x5e6)](pluginData[_0x44efce(0x5d4)],_0x44efce(0x73b),_0x2634a7=>{const _0x3f27f8=_0x44efce;if(!SceneManager[_0x3f27f8(0xbab)]())return;if(!Imported[_0x3f27f8(0x22e)])return;const _0x5ad71d=$gameTemp[_0x3f27f8(0x3f8)]();if(!_0x5ad71d)return;_0x5ad71d[_0x3f27f8(0x227)]('battleZoom');}),VisuMZ[_0x44efce(0x6d0)]['Scene_Boot_onDatabaseLoaded']=Scene_Boot[_0x44efce(0x8f2)][_0x44efce(0x9ce)],Scene_Boot[_0x44efce(0x8f2)][_0x44efce(0x9ce)]=function(){const _0x2b299c=_0x44efce;this[_0x2b299c(0x9f5)](),this[_0x2b299c(0x81f)](),this[_0x2b299c(0x739)](),this[_0x2b299c(0x6af)](),VisuMZ[_0x2b299c(0x6d0)][_0x2b299c(0x428)][_0x2b299c(0xb59)](this),this['process_VisuMZ_BattleCore_Notetags'](),this['process_VisuMZ_BattleCore_BaseTroops'](),this[_0x2b299c(0x98e)](),this[_0x2b299c(0xb92)]();},Scene_Boot[_0x44efce(0x8f2)][_0x44efce(0xa94)]=function(){const _0x44b023=_0x44efce;if(VisuMZ[_0x44b023(0x931)])return;this[_0x44b023(0x2c2)](),this[_0x44b023(0xb0f)](),this['process_VisuMZ_BattleCore_jsFunctions']();},Scene_Boot[_0x44efce(0x8f2)][_0x44efce(0x9f5)]=function(){const _0x1eeaf0=_0x44efce,_0xfb5f4d=$dataSystem[_0x1eeaf0(0x9b9)][_0x1eeaf0(0x496)];for(let _0x3c8438=0x0;_0x3c8438<_0xfb5f4d;_0x3c8438++){const _0x301c78=$dataSystem[_0x1eeaf0(0x889)][_0x3c8438];if(_0x301c78)continue;$dataSystem[_0x1eeaf0(0x889)][_0x3c8438]=JsonEx[_0x1eeaf0(0x414)]($dataSystem[_0x1eeaf0(0x889)][0x0]);}},Scene_Boot[_0x44efce(0x8f2)]['process_VisuMZ_BattleCore_PluginParams']=function(){const _0x393e75=_0x44efce,_0x47b7b9=VisuMZ[_0x393e75(0x6d0)][_0x393e75(0x444)];_0x47b7b9[_0x393e75(0x86a)][_0x393e75(0x5c3)]===undefined&&(_0x47b7b9[_0x393e75(0x86a)][_0x393e75(0x5c3)]=_0x393e75(0xb7c));_0x47b7b9[_0x393e75(0x44f)][_0x393e75(0x999)]===undefined&&(_0x47b7b9[_0x393e75(0x44f)]['SmoothImage']=![]);_0x47b7b9[_0x393e75(0x71b)][_0x393e75(0x999)]===undefined&&(_0x47b7b9[_0x393e75(0x71b)][_0x393e75(0x999)]=!![]);_0x47b7b9[_0x393e75(0x44f)][_0x393e75(0x181)]===undefined&&(_0x393e75(0x813)!==_0x393e75(0x813)?this[_0x393e75(0xaff)](0x1):_0x47b7b9[_0x393e75(0x44f)][_0x393e75(0x181)]=![]);if(_0x47b7b9[_0x393e75(0x44f)]['PrioritySortActors']===undefined){if('PeXsi'!==_0x393e75(0x4b3)){if(_0x1bcf9b['_animation'][_0x393e75(0x186)]!==0x0)return![];}else _0x47b7b9[_0x393e75(0x44f)][_0x393e75(0xa45)]=!![];}},VisuMZ[_0x44efce(0xb3)]={},Scene_Boot[_0x44efce(0x8f2)][_0x44efce(0x739)]=function(){const _0x13675f=_0x44efce;for(const _0x437cf5 of VisuMZ[_0x13675f(0x6d0)][_0x13675f(0x444)][_0x13675f(0x86a)][_0x13675f(0xa83)]){if(!_0x437cf5)continue;const _0x4ec64d=_0x437cf5['Name'][_0x13675f(0xb2d)]()['trim']();VisuMZ[_0x13675f(0xb3)][_0x4ec64d]=_0x437cf5;}},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x933)]={},Scene_Boot[_0x44efce(0x8f2)][_0x44efce(0x6af)]=function(){const _0xc64529=_0x44efce,_0x54948b=VisuMZ[_0xc64529(0x6d0)][_0xc64529(0x933)],_0x3cd507=_0xc64529(0x54f),_0x3d8ad7=[[_0xc64529(0x894),_0xc64529(0x6ca)],[_0xc64529(0xde),_0xc64529(0x9bc)]],_0x37c010=[['%1Apply%2JS',_0xc64529(0x4ec)],[_0xc64529(0x776),'JS\x20%1DAMAGE\x20%2']],_0x31fcf3=[['',''],[_0xc64529(0x12f),_0xc64529(0x22d)],[_0xc64529(0x30b),_0xc64529(0x254)]];for(const _0x39f73d of _0x37c010){for(const _0x248286 of _0x31fcf3){for(const _0x1c89f2 of _0x3d8ad7){if(_0xc64529(0x7d0)===_0xc64529(0x8d3)){if(!_0x46d9f3[_0xc64529(0x4cb)]['CheckVisibleBattleNotetags'](this[_0xc64529(0x81e)],_0x3257be))return!![];if(!_0x33f8b9[_0xc64529(0x4cb)][_0xc64529(0x95e)](this['_actor'],_0x4efe2e))return!![];if(!_0x3a1322['SkillsStatesCore'][_0xc64529(0x48a)](this[_0xc64529(0x81e)],_0xc53919))return!![];}else{const _0x266a3b=_0x39f73d[0x0]['format'](_0x1c89f2[0x0],_0x248286[0x0]),_0x215c0d=_0x39f73d[0x1]['format'](_0x1c89f2[0x1],_0x248286[0x1])['trim'](),_0x575d07=new RegExp(_0x3cd507[_0xc64529(0x437)](_0x215c0d),'i');_0x54948b[_0x266a3b]=_0x575d07;}}}}const _0x59aeb5=[[_0xc64529(0x99b),_0xc64529(0x259)],['%1EndActionJS','JS\x20%1END\x20ACTION']];for(const _0x318a86 of _0x59aeb5){if('DHXSz'==='QaWXg')_0x49eef2['removeImmortal'](),_0x14c6a0[_0xc64529(0xb9f)](_0x35700c['deathStateId']());else for(const _0x15707a of _0x3d8ad7){if(_0xc64529(0x742)===_0xc64529(0x545)){if(!_0x36304a[_0xc64529(0xbab)]())return;if(!_0x30f679[_0xc64529(0x22e)])return;const _0x59e217=_0x36e352[_0xc64529(0x3f8)]();if(!_0x59e217)return;_0x59e217['setWaitMode'](_0xc64529(0x4d9));}else{const _0x4741e0=_0x318a86[0x0]['format'](_0x15707a[0x0]),_0x49050b=_0x318a86[0x1]['format'](_0x15707a[0x1]),_0xe82424=new RegExp(_0x3cd507[_0xc64529(0x437)](_0x49050b),'i');_0x54948b[_0x4741e0]=_0xe82424;}}}const _0x1bcc11=[[_0xc64529(0xad6),_0xc64529(0xcb)],[_0xc64529(0x99c),_0xc64529(0x750)],[_0xc64529(0x175),_0xc64529(0x1b1)],[_0xc64529(0xa4),_0xc64529(0xa86)],[_0xc64529(0x50a),_0xc64529(0x479)],[_0xc64529(0x8f8),_0xc64529(0x89d)],['%1StartTurnJS',_0xc64529(0x2ac)],[_0xc64529(0x216),'JS\x20%1END\x20TURN'],[_0xc64529(0x8a8),_0xc64529(0x4c5)]];for(const _0x2da5b2 of _0x1bcc11){for(const _0x2bcdb6 of _0x3d8ad7){if(_0xc64529(0x92f)===_0xc64529(0x92f)){const _0x373d9d=_0x2da5b2[0x0]['format'](_0x2bcdb6[0x0]),_0x310ecc=_0x2da5b2[0x1]['format'](_0x2bcdb6[0x1]),_0x40694a=new RegExp(_0x3cd507[_0xc64529(0x437)](_0x310ecc),'i');_0x54948b[_0x373d9d]=_0x40694a;}else{const _0x3007f7=_0x6294be[_0xc64529(0x47e)]('['+_0x297b86['$1']['match'](/\d+/g)+']');for(const _0x40c761 of _0x3007f7){if(_0x49dcb8[_0xc64529(0x18d)](_0x40c761))return!![];}return![];}}}},Scene_Boot[_0x44efce(0x8f2)][_0x44efce(0x2c2)]=function(){const _0x17e389=_0x44efce,_0x308cb0=$dataSkills[_0x17e389(0x719)]($dataItems);for(const _0x4dad77 of _0x308cb0){if('IhLrc'!==_0x17e389(0x20e))_0x14757b[_0x17e389(0x99e)]();else{if(!_0x4dad77)continue;VisuMZ[_0x17e389(0x6d0)][_0x17e389(0x702)](_0x4dad77);}}},Scene_Boot[_0x44efce(0x8f2)]['process_VisuMZ_BattleCore_TraitObject_Notetags']=function(){const _0x137f23=_0x44efce,_0x441679=$dataActors[_0x137f23(0x719)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x438330 of _0x441679){if(_0x137f23(0x1da)==='XyXcx')_0xfcabc1=_0x58d9a6;else{if(!_0x438330)continue;VisuMZ[_0x137f23(0x6d0)][_0x137f23(0x485)](_0x438330);}}},Scene_Boot[_0x44efce(0x8f2)]['process_VisuMZ_BattleCore_BaseTroops']=function(){const _0x365900=_0x44efce,_0x5c0c67=VisuMZ[_0x365900(0x6d0)]['Settings'][_0x365900(0x840)][_0x365900(0x3bd)],_0x22c2b2=[];for(const _0x34bb82 of _0x5c0c67){if('XGKIH'===_0x365900(0xa42)){const _0x4ea66d=$dataTroops[_0x34bb82];if(_0x4ea66d)_0x22c2b2[_0x365900(0xb70)](JsonEx[_0x365900(0x414)](_0x4ea66d));}else _0x3ee2ae['push'](this[_0x365900(0x387)]()['trueRandomTarget']());}for(const _0x4f5621 of $dataTroops){if(!_0x4f5621)continue;for(const _0x28681d of _0x22c2b2){if(_0x365900(0x4b4)!==_0x365900(0x3ac)){if(_0x28681d['id']===_0x4f5621['id'])continue;_0x4f5621[_0x365900(0x508)]=_0x4f5621['pages'][_0x365900(0x719)](_0x28681d[_0x365900(0x508)]);}else this[_0x365900(0x459)]['x']=_0x13b038[_0x365900(0x542)]-(_0x415c42[_0x365900(0x542)]-_0x1be28d['boxWidth'])/0x2-this[_0x365900(0x459)][_0x365900(0x542)]-0x4;}}},Scene_Boot[_0x44efce(0x8f2)]['process_VisuMZ_BattleCore_PreBattleCommonEvent']=function(){const _0x20f929=_0x44efce,_0x858e50=VisuMZ[_0x20f929(0x6d0)]['Settings'][_0x20f929(0x840)];if(_0x858e50[_0x20f929(0x5e3)]>0x0&&$dataCommonEvents[_0x858e50[_0x20f929(0x5e3)]]){const _0xd2e07a=$dataCommonEvents[_0x858e50['BattleStartEvent']],_0x52cbe0=_0xd2e07a['list']['length']-0x2,_0xe4dbf7=_0xd2e07a[_0x20f929(0x570)][_0x52cbe0];if(_0xe4dbf7&&_0xe4dbf7['code']!==0xe6){const _0x443450={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x30465c=_0xd2e07a[_0x20f929(0x570)]['pop']();_0xd2e07a[_0x20f929(0x570)][_0x20f929(0xac5)](_0x443450),_0xd2e07a['list'][_0x20f929(0xac5)](_0x30465c);}}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_CommonEventKeys']=function(){const _0x1df620=_0x44efce;VisuMZ[_0x1df620(0x6d0)][_0x1df620(0x374)](),VisuMZ[_0x1df620(0x6d0)][_0x1df620(0x7e2)]($dataSkills),VisuMZ['BattleCore'][_0x1df620(0x7e2)]($dataItems);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x374)]=function(){const _0x568512=_0x44efce;VisuMZ[_0x568512(0x6d0)][_0x568512(0xa35)]={};for(const _0x9a50e1 of $dataCommonEvents){if(_0x568512(0x4ac)==='GnhsV'){if(!_0x9a50e1)continue;if(_0x9a50e1[_0x568512(0x5d4)][_0x568512(0xab6)](/\[(.*)\]/i)){if('ZXDlw'!==_0x568512(0xad3)){let _0x529c4b=String(RegExp['$1'])['replace'](/,/g,'')['toUpperCase']()[_0x568512(0xaef)]();VisuMZ[_0x568512(0x6d0)]['_commonEventKey'][_0x529c4b]=_0x9a50e1['id'];}else{_0x5aa746('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),_0x3fe3a3[_0x568512(0xb2e)]();return;}}}else{if(!_0x5d2e77[_0x568512(0x8d9)])return;const _0x5e1c0e=_0x544ba1[_0x568512(0x45b)]['_spriteset'];if(!_0x5e1c0e)return;if(_0xc6e278[_0x568512(0xb1d)][_0x568512(0x1e5)]<=1.04){_0x70ba8e(_0x568512(0xb74)),_0x6dc8d9[_0x568512(0xb2e)]();return;}_0x2a0b63['ConvertParams'](_0x260d11,_0x1698b5);const _0x20f2b6=_0x1702d8[_0x568512(0x4fe)];_0x5e1c0e[_0x568512(0x730)](_0x20f2b6);}}},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x7e2)]=function(_0x13d819){const _0x529ac0=_0x44efce;for(const _0xbff8f7 of _0x13d819){if(_0x529ac0(0x9fa)!==_0x529ac0(0x5d1)){if(!_0xbff8f7)continue;VisuMZ['BattleCore'][_0x529ac0(0x997)](_0xbff8f7);}else this[_0x529ac0(0x7f1)](),_0x730e06['BattleCore']['Scene_Battle_createAllWindows']['call'](this),this[_0x529ac0(0x5a4)]();}},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x997)]=function(_0x4d94a4){const _0x241c54=_0x44efce;if(!_0x4d94a4)return;if(!_0x4d94a4[_0x241c54(0x586)])return;VisuMZ[_0x241c54(0x6d0)]['_commonEventKey']=VisuMZ[_0x241c54(0x6d0)][_0x241c54(0xa35)]||{};const _0x52f9c4=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x46a133=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x2dcde4=[];const _0x2c6fff=_0x4d94a4[_0x241c54(0x77d)][_0x241c54(0xab6)](_0x52f9c4);if(_0x2c6fff){for(const _0x3885a7 of _0x2c6fff){if(_0x241c54(0x8be)!==_0x241c54(0x9e1)){_0x3885a7[_0x241c54(0xab6)](_0x52f9c4);const _0x2c3030=String(RegExp['$1'])[_0x241c54(0x603)](',')[_0x241c54(0xba3)](_0x3d2621=>String(_0x3d2621)[_0x241c54(0xb2d)]()[_0x241c54(0xaef)]());_0x2dcde4=_0x2dcde4[_0x241c54(0x719)](_0x2c3030);}else return this[_0x241c54(0x182)]>0x0;}if(!_0x4d94a4[_0x241c54(0x77d)]['match'](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x241c54(0x78b)==='liWAo')_0x4d94a4[_0x241c54(0x77d)]+='<CUSTOM\x20ACTION\x20SEQUENCE>';else{_0x3ef513(_0x241c54(0xb74)),_0x59bc70[_0x241c54(0xb2e)]();return;}};}if(_0x4d94a4[_0x241c54(0x77d)][_0x241c54(0xab6)](_0x46a133)){if(_0x241c54(0x347)===_0x241c54(0x347)){const _0x24619c=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x241c54(0xba3)](_0x276204=>String(_0x276204)['toUpperCase']()['trim']());_0x2dcde4=_0x2dcde4[_0x241c54(0x719)](_0x24619c);!_0x4d94a4[_0x241c54(0x77d)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x4d94a4[_0x241c54(0x77d)]+=_0x241c54(0xa2e));;}else _0x4f9f68[_0x241c54(0x61c)]=_0x39ba9d(_0x77a68f['$1'])[_0x241c54(0xb2d)]()['trim']();}for(const _0x5e5953 of _0x2dcde4){if(_0x241c54(0x696)==='mojJj')_0x4e4a6b['BattleCore'][_0x241c54(0x174)][_0x241c54(0xb59)](this,_0x4d88b5);else{if(VisuMZ[_0x241c54(0x6d0)][_0x241c54(0xa35)][_0x5e5953]){const _0x5e476b=VisuMZ['BattleCore']['_commonEventKey'][_0x5e5953],_0x540a00={'code':0x2c,'dataId':_0x5e476b,'value1':0x1,'value2':0x0};_0x4d94a4[_0x241c54(0x586)][_0x241c54(0xb70)](_0x540a00);}}}},Scene_Boot['prototype'][_0x44efce(0x941)]=function(){const _0xced7fa=_0x44efce,_0x109b91=$dataSkills[_0xced7fa(0x719)]($dataItems);for(const _0x14c247 of _0x109b91){if('nQKpn'!=='TGcGD'){if(!_0x14c247)continue;VisuMZ[_0xced7fa(0x6d0)][_0xced7fa(0x641)](_0x14c247);}else{if(!_0x1f44cf[_0xced7fa(0x25b)])return;if(this[_0xced7fa(0x669)]===_0x5bc80e)return;const _0x107580=_0x3e766b[_0xced7fa(0x6d0)][_0xced7fa(0x444)][_0xced7fa(0x2e1)],_0x458732=new _0x50e8fd();_0x458732['anchor']['x']=_0x107580['AnchorX'],_0x458732['anchor']['y']=_0x107580[_0xced7fa(0x360)],_0x458732[_0xced7fa(0x718)]['x']=_0x458732['scale']['y']=_0x107580[_0xced7fa(0xaf5)],this[_0xced7fa(0xa16)]=_0x458732,this[_0xced7fa(0x317)](this[_0xced7fa(0xa16)]),_0x598a0d[_0xced7fa(0x23e)]&&_0x16099b[_0xced7fa(0x905)](this['_hpGaugeSprite']);}}},VisuMZ['BattleCore'][_0x44efce(0xb1a)]=VisuMZ['ParseActorNotetags'],VisuMZ['ParseActorNotetags']=function(_0x30bf26){const _0x3690e0=_0x44efce;VisuMZ[_0x3690e0(0x6d0)]['ParseActorNotetags']&&VisuMZ[_0x3690e0(0x6d0)][_0x3690e0(0xb1a)][_0x3690e0(0xb59)](this,_0x30bf26),VisuMZ[_0x3690e0(0x6d0)][_0x3690e0(0x485)](_0x30bf26);},VisuMZ[_0x44efce(0x6d0)]['ParseClassNotetags']=VisuMZ[_0x44efce(0x845)],VisuMZ['ParseClassNotetags']=function(_0x98dbae){const _0x27aa16=_0x44efce;VisuMZ[_0x27aa16(0x6d0)][_0x27aa16(0x845)]&&VisuMZ[_0x27aa16(0x6d0)][_0x27aa16(0x845)][_0x27aa16(0xb59)](this,_0x98dbae),VisuMZ[_0x27aa16(0x6d0)][_0x27aa16(0x485)](_0x98dbae);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x716)]=VisuMZ[_0x44efce(0x716)],VisuMZ[_0x44efce(0x716)]=function(_0xcf96d6){const _0x314014=_0x44efce;if(VisuMZ[_0x314014(0x6d0)][_0x314014(0x716)]){if('FCKpG'!==_0x314014(0x1e0)){_0x4675f5[_0x314014(0x8f2)][_0x314014(0x643)][_0x314014(0xb59)](this);if(this['_commandNameWindow'])this[_0x314014(0xa66)]();}else VisuMZ[_0x314014(0x6d0)]['ParseSkillNotetags'][_0x314014(0xb59)](this,_0xcf96d6);}VisuMZ['BattleCore'][_0x314014(0x702)](_0xcf96d6),VisuMZ[_0x314014(0x6d0)][_0x314014(0x641)](_0xcf96d6);},VisuMZ[_0x44efce(0x6d0)]['ParseItemNotetags']=VisuMZ[_0x44efce(0x65a)],VisuMZ[_0x44efce(0x65a)]=function(_0x1dfdda){const _0x89997e=_0x44efce;VisuMZ['BattleCore'][_0x89997e(0x65a)]&&VisuMZ[_0x89997e(0x6d0)][_0x89997e(0x65a)][_0x89997e(0xb59)](this,_0x1dfdda),VisuMZ[_0x89997e(0x6d0)][_0x89997e(0x702)](_0x1dfdda),VisuMZ[_0x89997e(0x6d0)]['Parse_Notetags_Targets'](_0x1dfdda);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x860)]=VisuMZ[_0x44efce(0x860)],VisuMZ[_0x44efce(0x860)]=function(_0x479a7a){const _0x1a0b3f=_0x44efce;VisuMZ[_0x1a0b3f(0x6d0)][_0x1a0b3f(0x860)]&&VisuMZ[_0x1a0b3f(0x6d0)][_0x1a0b3f(0x860)][_0x1a0b3f(0xb59)](this,_0x479a7a),VisuMZ[_0x1a0b3f(0x6d0)]['Parse_Notetags_TraitObjects'](_0x479a7a);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0xb3b)]=VisuMZ['ParseArmorNotetags'],VisuMZ[_0x44efce(0xb3b)]=function(_0xa6a7f1){const _0x301f24=_0x44efce;if(VisuMZ['BattleCore'][_0x301f24(0xb3b)]){if(_0x301f24(0x13a)!==_0x301f24(0x9be))VisuMZ[_0x301f24(0x6d0)][_0x301f24(0xb3b)][_0x301f24(0xb59)](this,_0xa6a7f1);else{if(this[_0x301f24(0x6cb)]&&this[_0x301f24(0x6cb)][_0x301f24(0x738)]){const _0x22eb4b=this[_0x301f24(0x6cb)][_0x301f24(0x738)];this['_motion']=_0x389a38[_0x301f24(0xa2d)][_0x22eb4b[_0x301f24(0x828)]],this[_0x301f24(0x13d)]=_0x22eb4b[_0x301f24(0x2bc)];const _0x4f7c9b=this['_weaponSprite'];_0x4f7c9b[_0x301f24(0x6a1)](_0x22eb4b[_0x301f24(0x1a5)],_0x22eb4b[_0x301f24(0x2bc)]),this['adjustWeaponSpriteOffset']();}}}VisuMZ[_0x301f24(0x6d0)][_0x301f24(0x485)](_0xa6a7f1);},VisuMZ['BattleCore']['ParseEnemyNotetags']=VisuMZ['ParseEnemyNotetags'],VisuMZ[_0x44efce(0xbaf)]=function(_0x26eff8){const _0x5b7974=_0x44efce;VisuMZ[_0x5b7974(0x6d0)]['ParseEnemyNotetags']&&VisuMZ[_0x5b7974(0x6d0)]['ParseEnemyNotetags'][_0x5b7974(0xb59)](this,_0x26eff8),VisuMZ[_0x5b7974(0x6d0)]['Parse_Notetags_TraitObjects'](_0x26eff8);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x897)]=VisuMZ[_0x44efce(0x897)],VisuMZ[_0x44efce(0x897)]=function(_0x22c22c){const _0x16196a=_0x44efce;VisuMZ[_0x16196a(0x6d0)][_0x16196a(0x897)]&&(_0x16196a(0x93e)===_0x16196a(0x923)?_0x4f440d['_subject'][_0x16196a(0x16b)]():VisuMZ[_0x16196a(0x6d0)][_0x16196a(0x897)][_0x16196a(0xb59)](this,_0x22c22c)),VisuMZ[_0x16196a(0x6d0)]['Parse_Notetags_TraitObjects'](_0x22c22c);},VisuMZ[_0x44efce(0x6d0)]['Parse_Notetags_Action']=function(_0x5655a4){const _0x39d158=_0x44efce,_0x52762e=['PreApplyJS',_0x39d158(0x1ca),'PreDamageJS',_0x39d158(0xa4b),_0x39d158(0x82a),_0x39d158(0x8a1),_0x39d158(0x33c),_0x39d158(0x251)];for(const _0x32358f of _0x52762e){VisuMZ[_0x39d158(0x6d0)][_0x39d158(0x8bd)](_0x5655a4,_0x32358f);}const _0x316aa0=_0x5655a4[_0x39d158(0x77d)];_0x316aa0['match'](/<ALWAYS CRITICAL/i)&&(_0x5655a4['damage'][_0x39d158(0x311)]=!![]),_0x316aa0[_0x39d158(0xab6)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x5655a4[_0x39d158(0x604)]=Math[_0x39d158(0x65c)](0x1,Number(RegExp['$1']))),_0x316aa0[_0x39d158(0xab6)](/<TARGET:[ ](.*)>/i)&&(_0x5655a4[_0x39d158(0x61c)]=String(RegExp['$1'])[_0x39d158(0xb2d)]()[_0x39d158(0xaef)]());},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x485)]=function(_0x23ce09){const _0x4fffba=_0x44efce,_0x286ed0=[_0x4fffba(0x29b),_0x4fffba(0x9b5),_0x4fffba(0xbbf),_0x4fffba(0x392),_0x4fffba(0x129),_0x4fffba(0x77e),_0x4fffba(0x4d0),_0x4fffba(0x58f),_0x4fffba(0x82a),_0x4fffba(0x8a1),_0x4fffba(0x33c),_0x4fffba(0x251),_0x4fffba(0x6b6),_0x4fffba(0x214),_0x4fffba(0x687),_0x4fffba(0xb48),_0x4fffba(0x175),_0x4fffba(0xa4),_0x4fffba(0x50a),_0x4fffba(0x8f8),_0x4fffba(0xafb),_0x4fffba(0xb55),_0x4fffba(0x7cc),_0x4fffba(0x239),_0x4fffba(0x65f),'PostRegenerateJS'];for(const _0xb48718 of _0x286ed0){if(_0x4fffba(0xb8a)!==_0x4fffba(0x4ef))VisuMZ['BattleCore']['createJS'](_0x23ce09,_0xb48718);else{this['_borderPortraitSprite'][_0x4fffba(0x922)]=_0x17bfb2[_0x4fffba(0x6dc)]();const _0x1dd283=_0x342fa1['actor']();if(_0x1dd283===this[_0x4fffba(0x8b7)]['actor'])return;this[_0x4fffba(0x8b7)][_0x4fffba(0x918)]=_0x1dd283||this[_0x4fffba(0x8b7)][_0x4fffba(0x918)];if(!_0x1dd283)return;else{if(_0x1dd283[_0x4fffba(0x9e5)]()===''){this[_0x4fffba(0x8b7)][_0x4fffba(0x3e8)]=_0x4fbcf3[_0x4fffba(0xbaa)];return;}else{const _0x1a2229=_0x191f05['loadPicture'](_0x1dd283[_0x4fffba(0x9e5)]());_0x1a2229[_0x4fffba(0x4a0)](this[_0x4fffba(0x242)][_0x4fffba(0x9f7)](this,_0x1a2229));}}}}},VisuMZ[_0x44efce(0x6d0)]['Parse_Notetags_Targets']=function(_0x235d06){const _0x547323=_0x44efce,_0x266f7e=_0x235d06[_0x547323(0x77d)];if(_0x266f7e[_0x547323(0xab6)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x4c64fa=String(RegExp['$1']),_0x309c08=VisuMZ[_0x547323(0x6d0)][_0x547323(0x3c0)](_0x235d06,'Targets');VisuMZ['BattleCore'][_0x547323(0x5d0)](_0x4c64fa,_0x309c08);}if(_0x266f7e['match'](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){if(_0x547323(0x1f9)!=='ynXcx'){const _0x52f772=_0x3b1fc0[_0x547323(0x6d0)][_0x547323(0x444)][_0x547323(0x840)],_0x45f518=_0x52f772[_0x547323(0x5e3)],_0x2d016c=_0x4c7db7[_0x45f518];if(_0x2d016c&&_0x223d6e[_0x547323(0x6d0)][_0x547323(0x37d)](_0x45f518)){const _0x298ce9=this['isOnCurrentMap']()?this[_0x547323(0x595)]:0x0,_0x58f1fc=_0x2d016c['list'];this[_0x547323(0x3d7)](_0x58f1fc,_0x298ce9),this[_0x547323(0x636)]=_0xe8eb6b['makeDeepCopy'](this[_0x547323(0x636)]);const _0x568884={'code':0xbc3,'indent':this[_0x547323(0x9b1)],'parameters':_0x80d396['makeDeepCopy'](_0x5819ef)};return this[_0x547323(0x636)]['splice'](this['_index']+0x1,0x0,_0x568884),!![];}else return _0x3f14c3[_0x547323(0x6d0)][_0x547323(0xb3c)]['call'](this,_0x1e9c3b);}else{const _0x242f56=String(RegExp['$1']),_0x4eb3a1=VisuMZ['BattleCore'][_0x547323(0x3c0)](_0x235d06,_0x547323(0x89f));VisuMZ['BattleCore'][_0x547323(0x36a)](_0x242f56,_0x4eb3a1);}}},VisuMZ[_0x44efce(0x6d0)]['JS']={},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x8bd)]=function(_0xd8326b,_0x45812d){const _0x73188=_0x44efce,_0x3ef2a2=_0xd8326b['note'];if(_0x3ef2a2[_0x73188(0xab6)](VisuMZ['BattleCore'][_0x73188(0x933)][_0x45812d])){if('DVNzk'===_0x73188(0x1eb)){const _0xd5df51=RegExp['$1'],_0x1b6a6d=_0x73188(0x257)[_0x73188(0x437)](_0xd5df51),_0x4387f1=VisuMZ[_0x73188(0x6d0)][_0x73188(0x3c0)](_0xd8326b,_0x45812d);VisuMZ['BattleCore']['JS'][_0x4387f1]=new Function(_0x1b6a6d);}else return null;}},VisuMZ[_0x44efce(0x6d0)]['createKeyJS']=function(_0x5bda2c,_0x2283d8){const _0x19cab5=_0x44efce;if(VisuMZ['createKeyJS'])return VisuMZ[_0x19cab5(0x3c0)](_0x5bda2c,_0x2283d8);let _0x4a9959='';if($dataActors[_0x19cab5(0x89e)](_0x5bda2c))_0x4a9959=_0x19cab5(0x7b6)[_0x19cab5(0x437)](_0x5bda2c['id'],_0x2283d8);if($dataClasses['includes'](_0x5bda2c))_0x4a9959=_0x19cab5(0x517)[_0x19cab5(0x437)](_0x5bda2c['id'],_0x2283d8);if($dataSkills[_0x19cab5(0x89e)](_0x5bda2c))_0x4a9959=_0x19cab5(0x48d)[_0x19cab5(0x437)](_0x5bda2c['id'],_0x2283d8);if($dataItems[_0x19cab5(0x89e)](_0x5bda2c))_0x4a9959=_0x19cab5(0x266)[_0x19cab5(0x437)](_0x5bda2c['id'],_0x2283d8);if($dataWeapons[_0x19cab5(0x89e)](_0x5bda2c))_0x4a9959=_0x19cab5(0x724)[_0x19cab5(0x437)](_0x5bda2c['id'],_0x2283d8);if($dataArmors['includes'](_0x5bda2c))_0x4a9959=_0x19cab5(0x1f6)[_0x19cab5(0x437)](_0x5bda2c['id'],_0x2283d8);if($dataEnemies[_0x19cab5(0x89e)](_0x5bda2c))_0x4a9959=_0x19cab5(0xada)[_0x19cab5(0x437)](_0x5bda2c['id'],_0x2283d8);if($dataStates[_0x19cab5(0x89e)](_0x5bda2c))_0x4a9959=_0x19cab5(0x6f3)['format'](_0x5bda2c['id'],_0x2283d8);return _0x4a9959;},VisuMZ['BattleCore'][_0x44efce(0x5d0)]=function(_0x5ebb17,_0x3cadb0){const _0x597a06=_0x44efce,_0x149818='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20'[_0x597a06(0x437)](_0x5ebb17);VisuMZ[_0x597a06(0x6d0)]['JS'][_0x3cadb0]=new Function(_0x149818);},VisuMZ['BattleCore']['createCommandVisibleJS']=function(_0x357fd2,_0x556f84){const _0x1f4327=_0x44efce,_0x5b4c7c=_0x1f4327(0x2f1)['format'](_0x357fd2);VisuMZ[_0x1f4327(0x6d0)]['JS'][_0x556f84]=new Function(_0x5b4c7c);},TextManager[_0x44efce(0x7c6)]=VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x444)]['PartyCmd'][_0x44efce(0xb82)],TextManager[_0x44efce(0x801)]=VisuMZ['BattleCore'][_0x44efce(0x444)][_0x44efce(0xa9f)][_0x44efce(0x74a)],TextManager['autoBattleStyle']=VisuMZ['BattleCore'][_0x44efce(0x444)][_0x44efce(0xa9f)][_0x44efce(0x3be)],TextManager[_0x44efce(0x25b)]=VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x444)]['HpGauge'][_0x44efce(0x20b)],ColorManager['getColor']=function(_0x1d9c7d){const _0x29be41=_0x44efce;return _0x1d9c7d=String(_0x1d9c7d),_0x1d9c7d[_0x29be41(0xab6)](/#(.*)/i)?'#%1'[_0x29be41(0x437)](String(RegExp['$1'])):this[_0x29be41(0xa5d)](Number(_0x1d9c7d));},DataManager['getDamageStyle']=function(_0x1581ef){const _0x604d1b=_0x44efce;if(_0x1581ef[_0x604d1b(0x77d)][_0x604d1b(0xab6)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x1cda5e=String(RegExp['$1'])[_0x604d1b(0xb2d)]()[_0x604d1b(0xaef)]();if(_0x1cda5e==='MANUAL')return'MANUAL';if(VisuMZ[_0x604d1b(0xb3)][_0x1cda5e])return _0x1cda5e;}const _0x3f80fd=VisuMZ['BattleCore']['Settings'][_0x604d1b(0x86a)][_0x604d1b(0x612)][_0x604d1b(0xb2d)]()[_0x604d1b(0xaef)]();if(VisuMZ[_0x604d1b(0xb3)][_0x3f80fd])return _0x3f80fd;return'MANUAL';},DataManager[_0x44efce(0x1fe)]=function(_0x8db4bb){const _0x29743a=_0x44efce;_0x8db4bb=_0x8db4bb[_0x29743a(0xb2d)]()[_0x29743a(0xaef)](),this[_0x29743a(0x4c6)]=this[_0x29743a(0x4c6)]||{};if(this[_0x29743a(0x4c6)][_0x8db4bb])return this[_0x29743a(0x4c6)][_0x8db4bb];for(let _0x247290=0x1;_0x247290<0x64;_0x247290++){if(_0x29743a(0x5b4)===_0x29743a(0x5b4)){if(!$dataSystem[_0x29743a(0x7b8)][_0x247290])continue;let _0x160763=$dataSystem[_0x29743a(0x7b8)][_0x247290]['toUpperCase']()['trim']();_0x160763=_0x160763[_0x29743a(0x3f6)](/\x1I\[(\d+)\]/gi,''),_0x160763=_0x160763['replace'](/\\I\[(\d+)\]/gi,''),this[_0x29743a(0x4c6)][_0x160763]=_0x247290;}else{const _0x14df92=_0x455ff0[_0x29743a(0x6d0)][_0x29743a(0x444)][_0x29743a(0xaaf)];if(_0x14df92[_0x29743a(0x726)])return;_0x1ef5b8[_0x29743a(0x8f2)][_0x29743a(0x6df)][_0x29743a(0xb59)](this,_0x50481c);}}return this['_stypeIDs'][_0x8db4bb]||0x0;},DataManager['getSkillIdWithName']=function(_0x4ac96d){const _0x446c41=_0x44efce;_0x4ac96d=_0x4ac96d[_0x446c41(0xb2d)]()[_0x446c41(0xaef)](),this[_0x446c41(0x725)]=this[_0x446c41(0x725)]||{};if(this['_skillIDs'][_0x4ac96d])return this[_0x446c41(0x725)][_0x4ac96d];for(const _0x54b178 of $dataSkills){if(!_0x54b178)continue;this[_0x446c41(0x725)][_0x54b178[_0x446c41(0x5d4)][_0x446c41(0xb2d)]()[_0x446c41(0xaef)]()]=_0x54b178['id'];}return this[_0x446c41(0x725)][_0x4ac96d]||0x0;},DataManager['getEnemyIdWithName']=function(_0x601fe9){const _0x55bec5=_0x44efce;_0x601fe9=_0x601fe9['toUpperCase']()[_0x55bec5(0xaef)](),this[_0x55bec5(0xb7b)]=this[_0x55bec5(0xb7b)]||{};if(this[_0x55bec5(0xb7b)][_0x601fe9])return this[_0x55bec5(0xb7b)][_0x601fe9];for(const _0x313c6a of $dataEnemies){if(!_0x313c6a)continue;this[_0x55bec5(0xb7b)][_0x313c6a[_0x55bec5(0x5d4)][_0x55bec5(0xb2d)]()[_0x55bec5(0xaef)]()]=_0x313c6a['id'];}return this[_0x55bec5(0xb7b)][_0x601fe9]||0x0;},DataManager[_0x44efce(0x482)]=function(_0x42d1f0){const _0x193f6a=_0x44efce;_0x42d1f0=_0x42d1f0[_0x193f6a(0xb2d)]()[_0x193f6a(0xaef)](),this['_wtypeIDs']=this[_0x193f6a(0xa82)]||{};if(this[_0x193f6a(0xa82)][_0x42d1f0])return this['_wtypeIDs'][_0x42d1f0];for(let _0x31536a=0x1;_0x31536a<0x64;_0x31536a++){if(!$dataSystem[_0x193f6a(0x9b9)][_0x31536a])continue;let _0x2693a6=$dataSystem['weaponTypes'][_0x31536a]['toUpperCase']()[_0x193f6a(0xaef)]();_0x2693a6=_0x2693a6[_0x193f6a(0x3f6)](/\x1I\[(\d+)\]/gi,''),_0x2693a6=_0x2693a6['replace'](/\\I\[(\d+)\]/gi,''),this[_0x193f6a(0xa82)][_0x2693a6]=_0x31536a;}return this[_0x193f6a(0xa82)][_0x193f6a(0xe3)]=0x0,this[_0x193f6a(0xa82)][_0x42d1f0]||0x0;},DataManager['battleDisplayText']=function(_0x59dcc6){const _0x36ed17=_0x44efce,_0x2db2d3=_0x36ed17(0x7a6);let _0x1fa467=_0x59dcc6['iconIndex'],_0x47c251=_0x59dcc6[_0x36ed17(0x5d4)];const _0x30dd96=_0x59dcc6[_0x36ed17(0x77d)];_0x30dd96['match'](/<DISPLAY ICON: (\d+)>/i)&&(_0x1fa467=Number(RegExp['$1']));if(_0x30dd96[_0x36ed17(0xab6)](/<DISPLAY TEXT: (.*)>/i)){if('uApJR'!==_0x36ed17(0x262)){if(this[_0x36ed17(0x334)]())return _0x119f2b;return _0x4d1c89=this[_0x36ed17(0xb95)](_0x454b46),_0x9b297b=this[_0x36ed17(0x46a)](_0x4257d2),_0xa9078b;}else _0x47c251=String(RegExp['$1']);}return _0x2db2d3[_0x36ed17(0x437)](_0x1fa467,_0x47c251);},DataManager[_0x44efce(0xd3)]=function(_0x11012d){const _0x59a1c3=_0x44efce;if(_0x11012d[_0x59a1c3(0x77d)]['match'](/<COMMAND TEXT: (.*)>/i)){if(_0x59a1c3(0x909)!=='eiLOy'){if(this['constructor']===_0x2c95c4)return;_0x5deeab[_0x59a1c3(0x8f2)][_0x59a1c3(0x7d6)][_0x59a1c3(0xb59)](this);}else return String(RegExp['$1']);}else return _0x11012d[_0x59a1c3(0x5d4)];},DataManager['battleCommandIcon']=function(_0x1e5ad3){const _0x58eeac=_0x44efce;if(_0x1e5ad3[_0x58eeac(0x77d)][_0x58eeac(0xab6)](/<COMMAND ICON: (\d+)>/i)){if(_0x58eeac(0x3fb)!==_0x58eeac(0x79e))return Number(RegExp['$1']);else{if(!_0x5dd548[_0x58eeac(0xbab)]())return!![];const _0x4f4f33=[_0x58eeac(0x8f6),_0x58eeac(0x9f9)];return _0x4f4f33['includes'](_0xe71c2c[_0x58eeac(0x5d4)]);}}else return _0x1e5ad3[_0x58eeac(0x179)];},DataManager[_0x44efce(0x50f)]=function(_0x44aa2a){const _0x237e64=_0x44efce,_0x3c54a8=$dataEnemies[_0x44aa2a];if(_0x3c54a8){if(_0x3c54a8['note'][_0x237e64(0xab6)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){if(_0x237e64(0x3d9)!==_0x237e64(0x40e)){const _0x51729c=String(RegExp['$1'])['split'](/[\r\n]+/)['remove'](''),_0x4a1a35=this['processRandomizedData'](_0x51729c);_0x44aa2a=this[_0x237e64(0x30d)](_0x4a1a35)||_0x44aa2a,_0x44aa2a=DataManager[_0x237e64(0x50f)](_0x44aa2a);}else return _0x3685c7[_0x237e64(0x6d0)][_0x237e64(0x444)][_0x237e64(0xa9f)][_0x237e64(0xa06)][_0x237e64(0xb59)](this);}}return _0x44aa2a;},DataManager[_0x44efce(0x565)]=function(_0x12efe6){const _0x1555c8=_0x44efce;let _0x520210=0x0;const _0x9d5e94={};for(const _0x5e7d2e of _0x12efe6){if(_0x1555c8(0x201)===_0x1555c8(0x201)){if(_0x5e7d2e[_0x1555c8(0xab6)](/(.*):[ ](\d+)/i)){const _0x599ea8=String(RegExp['$1'])[_0x1555c8(0xaef)](),_0x27cebf=Number(RegExp['$2']);_0x9d5e94[_0x599ea8]=_0x27cebf,_0x520210+=_0x27cebf;}else{if(_0x5e7d2e['match'](/(.*):[ ](\d+\.?\d+)/i)){if(_0x1555c8(0x66c)!==_0x1555c8(0x66c)){let _0x411cd0=-0x10,_0x336d65=this[_0x1555c8(0x737)]*0.5;const _0x4bbfe5=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x24dbcc=this['_battler'][_0x1555c8(0x919)]()[_0x1555c8(0xba3)](_0x2656d7=>_0x2656d7&&_0x2656d7[_0x1555c8(0x77d)][_0x1555c8(0xab6)](_0x4bbfe5)?_0x510d2d(_0x770fb0['$1']):0x0),_0x67e23b=this[_0x1555c8(0x6cb)][_0x1555c8(0x919)]()[_0x1555c8(0xba3)](_0x224f66=>_0x224f66&&_0x224f66['note']['match'](_0x4bbfe5)?_0x101dd9(_0x10cf89['$2']):0x0);_0x411cd0=_0x24dbcc['reduce']((_0x2c3e02,_0x142eeb)=>_0x2c3e02+_0x142eeb,_0x411cd0),_0x336d65=_0x67e23b['reduce']((_0x2c6ff5,_0x4a3e16)=>_0x2c6ff5+_0x4a3e16,_0x336d65),this[_0x1555c8(0x92a)]['x']=_0x411cd0,this[_0x1555c8(0x92a)]['y']=_0x336d65,this['_weaponSprite']['update']();}else{const _0x5a811d=String(RegExp['$1'])['trim'](),_0xfca0d8=Number(RegExp['$2']);_0x9d5e94[_0x5a811d]=_0xfca0d8,_0x520210+=_0xfca0d8;}}else _0x5e7d2e!==''&&('iUZbY'!=='iUZbY'?(_0xba4bba['BattleCore'][_0x1555c8(0x547)][_0x1555c8(0xb59)](this),this[_0x1555c8(0x657)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x1555c8(0x7ce)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this['_customDamageFormula']='default'):(_0x9d5e94[_0x5e7d2e]=0x1,_0x520210++));}}else return!![];}if(_0x520210<=0x0)return'';let _0x4eb701=Math[_0x1555c8(0xbbd)]()*_0x520210;for(const _0x13456c in _0x9d5e94){if('BbnJk'==='wSRuV')_0x3dc2c7[_0x1555c8(0x6d0)][_0x1555c8(0x6fd)][_0x1555c8(0xb59)](this);else{_0x4eb701-=_0x9d5e94[_0x13456c];if(_0x4eb701<=0x0)return _0x13456c;}}return'';},DataManager[_0x44efce(0x424)]=function(_0xd961fd){const _0x1dea70=_0x44efce;if(!_0xd961fd)return![];if(!VisuMZ[_0x1dea70(0x6d0)][_0x1dea70(0x444)][_0x1dea70(0xa63)][_0x1dea70(0x1d6)])return![];if(_0xd961fd[_0x1dea70(0x77d)][_0x1dea70(0xab6)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0xd961fd[_0x1dea70(0x77d)][_0x1dea70(0xab6)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0xbc85e5 of _0xd961fd[_0x1dea70(0x586)]){if(!_0xbc85e5)continue;if(_0xbc85e5[_0x1dea70(0x591)]===Game_Action[_0x1dea70(0x6ea)])return!![];}return![];},DataManager[_0x44efce(0x514)]=function(_0x3fa119){const _0x2ffe0f=_0x44efce,_0x22c5c9=$dataTroops[_0x3fa119];if(!_0x22c5c9)return'';let _0x1f1e5c='';_0x1f1e5c+=_0x22c5c9[_0x2ffe0f(0x5d4)];for(const _0x529471 of _0x22c5c9[_0x2ffe0f(0x508)]){for(const _0x3b996c of _0x529471[_0x2ffe0f(0x570)]){if([0x6c,0x198][_0x2ffe0f(0x89e)](_0x3b996c['code'])){if(_0x2ffe0f(0x1b7)!==_0x2ffe0f(0x1ec))_0x1f1e5c+='\x0a',_0x1f1e5c+=_0x3b996c['parameters'][0x0];else return _0x410fcc[_0x2ffe0f(0x6d0)][_0x2ffe0f(0x444)]['PartyCmd'][_0x2ffe0f(0x361)];}}}return _0x1f1e5c;},ConfigManager[_0x44efce(0xa07)]=ConfigManager[_0x44efce(0xa07)]??![],ConfigManager[_0x44efce(0x872)]=ConfigManager['autoBattleUseSkills']??![],ConfigManager[_0x44efce(0x25b)]=ConfigManager[_0x44efce(0x25b)]??!![],VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x8e0)]=ConfigManager['makeData'],ConfigManager[_0x44efce(0x8a9)]=function(){const _0x2c9128=_0x44efce,_0x10f364=VisuMZ[_0x2c9128(0x6d0)][_0x2c9128(0x8e0)]['call'](this);return _0x10f364[_0x2c9128(0xa07)]=this[_0x2c9128(0xa07)],_0x10f364['autoBattleUseSkills']=this['autoBattleUseSkills'],_0x10f364[_0x2c9128(0x25b)]=this[_0x2c9128(0x25b)],_0x10f364;},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x69d)]=ConfigManager[_0x44efce(0x886)],ConfigManager[_0x44efce(0x886)]=function(_0x1f9fae){const _0x5bcd7b=_0x44efce;VisuMZ[_0x5bcd7b(0x6d0)][_0x5bcd7b(0x69d)][_0x5bcd7b(0xb59)](this,_0x1f9fae),_0x5bcd7b(0xa07)in _0x1f9fae?_0x5bcd7b(0x694)!==_0x5bcd7b(0xb6a)?this[_0x5bcd7b(0xa07)]=_0x1f9fae[_0x5bcd7b(0xa07)]:this[_0x5bcd7b(0xaff)](0x1):_0x5bcd7b(0x2cd)!==_0x5bcd7b(0x4e0)?this[_0x5bcd7b(0xa07)]=![]:_0x3f656b[_0x5bcd7b(0x198)]()?_0x9f52a1['prototype'][_0x5bcd7b(0x6cf)][_0x5bcd7b(0xb59)](this):_0xa89a72[_0x5bcd7b(0x6d0)][_0x5bcd7b(0x185)][_0x5bcd7b(0xb59)](this),_0x5bcd7b(0x872)in _0x1f9fae?this[_0x5bcd7b(0x872)]=_0x1f9fae['autoBattleUseSkills']:this[_0x5bcd7b(0x872)]=![],_0x5bcd7b(0x25b)in _0x1f9fae?this[_0x5bcd7b(0x25b)]=_0x1f9fae[_0x5bcd7b(0x25b)]:this['visualHpGauge']=!![];},VisuMZ['BattleCore'][_0x44efce(0x1ee)]=BattleManager[_0x44efce(0x2be)],BattleManager[_0x44efce(0x2be)]=function(){const _0x260e04=_0x44efce;VisuMZ[_0x260e04(0x6d0)][_0x260e04(0x1ee)][_0x260e04(0xb59)](this),this[_0x260e04(0x4a2)]=[];},BattleManager[_0x44efce(0xb0a)]=function(){const _0x4140fa=_0x44efce;if(!SceneManager[_0x4140fa(0xbab)]())return;const _0x4c0e9f=SceneManager['_scene']['_statusWindow'];if(_0x4c0e9f)_0x4c0e9f['requestRefresh']();},BattleManager[_0x44efce(0x663)]=function(){const _0x3f4613=_0x44efce;if(BattleManager['isTpb']())return _0x3f4613(0x528);return _0x3f4613(0x440);},BattleManager['isBattleSys']=function(_0x2e64a8){const _0x578f72=_0x44efce;return _0x2e64a8=_0x2e64a8['toUpperCase']()['trim'](),this[_0x578f72(0x663)]()===_0x2e64a8;},BattleManager[_0x44efce(0x672)]=function(){const _0x9358b=_0x44efce;return this[_0x9358b(0x7fc)]('DTB');},BattleManager['isTurnBased']=function(){return this['isDTB']();},BattleManager[_0x44efce(0x555)]=function(){const _0x2303f8=_0x44efce;return!this[_0x2303f8(0xb9b)]();},BattleManager['isTeamBased']=function(){const _0x26c5c2=_0x44efce;return!this[_0x26c5c2(0xb9b)]()&&!this[_0x26c5c2(0x555)]();},BattleManager[_0x44efce(0x623)]=function(_0x54d5a1){const _0x3b9228=_0x44efce;$gameParty[_0x3b9228(0x623)](_0x54d5a1),$gameTroop[_0x3b9228(0x623)](_0x54d5a1);},VisuMZ['BattleCore'][_0x44efce(0x664)]=BattleManager['startBattle'],BattleManager['startBattle']=function(){const _0xe87203=_0x44efce;this[_0xe87203(0xa85)]=![],this[_0xe87203(0x3c1)]=ConfigManager['autoBattleAtStart'],this[_0xe87203(0x623)](_0xe87203(0x6b6)),VisuMZ['BattleCore'][_0xe87203(0x664)]['call'](this),this[_0xe87203(0x623)](_0xe87203(0x214));},BattleManager[_0x44efce(0x217)]=function(_0x1745d5){const _0x3a1273=_0x44efce,_0x4a8708=VisuMZ['BattleCore'][_0x3a1273(0x444)][_0x3a1273(0x840)];_0x1745d5!==_0x3a1273(0x14c)&&_0x4a8708[_0x3a1273(0x63b)]&&VisuMZ[_0x3a1273(0x6d0)][_0x3a1273(0x37d)](_0x4a8708[_0x3a1273(0x63b)])&&$gameTemp[_0x3a1273(0x928)](_0x4a8708[_0x3a1273(0x63b)]);const _0xdaadfc='%1Event'[_0x3a1273(0x437)](_0x1745d5);if(_0x4a8708[_0xdaadfc]&&VisuMZ[_0x3a1273(0x6d0)][_0x3a1273(0x37d)](_0x4a8708[_0xdaadfc])){if('VlLHV'==='Fsddd'){if(!_0xcba8c7['BattleCore'][_0x3a1273(0x444)][_0x3a1273(0x6e4)][_0x3a1273(0x5e4)])return;const _0x39940d=_0x4bf275[_0x3a1273(0x12d)](),_0x2f9811=_0x39940d[_0x3a1273(0x96d)]();for(const _0x475f50 of _0x2f9811){_0x475f50[_0x3a1273(0x2fd)]&&(this['push'](_0x3a1273(0x6ac)),this['push'](_0x3a1273(0xa91)),this[_0x3a1273(0xb70)]('pushBaseLine'),this[_0x3a1273(0xb70)](_0x3a1273(0x6fa),_0x475f50['message4'][_0x3a1273(0x437)](_0x13cc78[_0x3a1273(0x5d4)]())),this['push'](_0x3a1273(0xaf1)));}}else $gameTemp['reserveCommonEvent'](_0x4a8708[_0xdaadfc]);}},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x461)]=BattleManager[_0x44efce(0xaf6)],BattleManager[_0x44efce(0xaf6)]=function(){const _0x247683=_0x44efce;if(this[_0x247683(0x416)]===_0x247683(0x2f5)){if(_0x247683(0x985)!==_0x247683(0x1a3)){if($gameTemp[_0x247683(0x64e)]())return![];}else this['isShownOnBattlePortrait']()?_0xfec6a1[_0x247683(0x45b)][_0x247683(0x743)][_0x247683(0x9e8)](_0x54f953):(this[_0x247683(0xaa3)]()['removeChild'](_0x1f2326),this[_0x247683(0x7cb)][_0x247683(0xac9)](_0x230e3f),_0x2c1b29[_0x247683(0xa68)]());}return VisuMZ['BattleCore']['BattleManager_checkBattleEnd'][_0x247683(0xb59)](this);},VisuMZ[_0x44efce(0x6d0)]['BattleManager_processVictory']=BattleManager[_0x44efce(0x481)],BattleManager[_0x44efce(0x481)]=function(){const _0x5070f0=_0x44efce;this['processBattleCoreJS'](_0x5070f0(0x175)),VisuMZ[_0x5070f0(0x6d0)][_0x5070f0(0x28c)][_0x5070f0(0xb59)](this),this[_0x5070f0(0x217)]('Victory');},VisuMZ['BattleCore'][_0x44efce(0x187)]=BattleManager[_0x44efce(0xb62)],BattleManager[_0x44efce(0xb62)]=function(){const _0xe344f4=_0x44efce;this[_0xe344f4(0x623)](_0xe344f4(0xa4)),VisuMZ[_0xe344f4(0x6d0)][_0xe344f4(0x187)]['call'](this),this[_0xe344f4(0x217)](_0xe344f4(0xbc7));},VisuMZ['BattleCore'][_0x44efce(0x6a2)]=BattleManager['endBattle'],BattleManager[_0x44efce(0x660)]=function(_0x441b37){const _0x215c0e=_0x44efce;this['_endBattle']=!![],this[_0x215c0e(0x3c1)]=![],this[_0x215c0e(0x623)](_0x215c0e(0x687)),VisuMZ[_0x215c0e(0x6d0)][_0x215c0e(0x6a2)][_0x215c0e(0xb59)](this,_0x441b37),this[_0x215c0e(0x623)](_0x215c0e(0xb48));},VisuMZ['BattleCore']['BattleManager_startTurn']=BattleManager['startTurn'],BattleManager['startTurn']=function(){const _0x1b3002=_0x44efce;if(this[_0x1b3002(0xb9b)]())this[_0x1b3002(0x623)](_0x1b3002(0xafb));VisuMZ[_0x1b3002(0x6d0)][_0x1b3002(0x7c1)][_0x1b3002(0xb59)](this);if(this[_0x1b3002(0xb9b)]())this[_0x1b3002(0x623)](_0x1b3002(0xb55));},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x1e3)]=BattleManager[_0x44efce(0x77a)],BattleManager[_0x44efce(0x77a)]=function(){const _0x4dd39b=_0x44efce,_0x16dc87=this['_subject'][_0x4dd39b(0x29a)](),_0x13d948=this[_0x4dd39b(0x427)];_0x16dc87&&_0x16dc87[_0x4dd39b(0x8f0)]()===_0x13d948&&_0x16dc87[_0x4dd39b(0x430)](_0x4dd39b(0x82a)),VisuMZ[_0x4dd39b(0x6d0)][_0x4dd39b(0x1e3)][_0x4dd39b(0xb59)](this),_0x16dc87&&_0x16dc87[_0x4dd39b(0x8f0)]()===_0x13d948&&_0x16dc87[_0x4dd39b(0x430)](_0x4dd39b(0x8a1));},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0xa8e)]=BattleManager[_0x44efce(0xb91)],BattleManager[_0x44efce(0xb91)]=function(){const _0x22999c=_0x44efce,_0x51835a=this[_0x22999c(0x1db)],_0x4a5b30=this[_0x22999c(0x427)];if(_0x51835a&&_0x51835a!==this[_0x22999c(0x834)]&&_0x51835a[_0x22999c(0x8f0)]()===_0x4a5b30){if(_0x22999c(0x9b4)!==_0x22999c(0x7a5))_0x51835a['actionBattleCoreJS'](_0x22999c(0x33c));else{const _0x6a8208=_0x191d9f[_0x50ac41];if(!_0x6a8208)return'';let _0x2b6cf1='';_0x2b6cf1+=_0x6a8208['name'];for(const _0x5ef3ab of _0x6a8208[_0x22999c(0x508)]){for(const _0x3044c4 of _0x5ef3ab[_0x22999c(0x570)]){[0x6c,0x198][_0x22999c(0x89e)](_0x3044c4[_0x22999c(0x591)])&&(_0x2b6cf1+='\x0a',_0x2b6cf1+=_0x3044c4['parameters'][0x0]);}}return _0x2b6cf1;}}if(this[_0x22999c(0x427)]){if(_0x22999c(0xa72)!=='STHyF')VisuMZ[_0x22999c(0x6d0)][_0x22999c(0xa8e)]['call'](this);else{if(!_0xaafec5[_0x22999c(0x8d9)])return;const _0x4070ef=_0x2259c4[_0x22999c(0x45b)][_0x22999c(0x948)];if(!_0x4070ef)return;_0x4a1084[_0x22999c(0x878)](_0x27ba35,_0x13083c);const _0x5bbbdf=_0x4996ec['X']||0x0,_0x505a34=_0x167e6d['Y']||0x0,_0xc972e8=_0x227ebe['Strength']||0x0,_0x26ca06=_0x512e38[_0x22999c(0x55d)]||0x0,_0x4bac8a=_0x4bb7ef[_0x22999c(0x3c2)]||0x1,_0x228c41=_0x204d9d[_0x22999c(0x2f9)]||_0x22999c(0x221);_0x4070ef[_0x22999c(0x859)](_0xc972e8,_0x5bbbdf,_0x505a34,_0x26ca06,_0x4bac8a,_0x228c41);}}else{if(_0x22999c(0x9c3)!=='Pnhja'){const _0x3a6654=this['weapons']();_0x79e999=_0x3a6654[_0x1231e4]?_0x3a6654[_0x3916d0]['wtypeId']:0x0;}else this[_0x22999c(0x416)]='turn';}if(_0x51835a&&_0x51835a!==this['_lastAction']&&_0x51835a['subject']()===_0x4a5b30){if(_0x22999c(0xa32)===_0x22999c(0xa32))_0x51835a['actionBattleCoreJS'](_0x22999c(0x251));else return![];}this['refreshBattlerMotions'](this[_0x22999c(0xac1)]()),this['_lastAction']=this[_0x22999c(0x1db)];},BattleManager['refreshBattlerMotions']=function(_0x52eaac){for(const _0x5df079 of _0x52eaac){if(!_0x5df079)continue;if(!_0x5df079['battler']())continue;_0x5df079['battler']()['refreshMotion']();}},BattleManager[_0x44efce(0xb4c)]=function(){const _0x1d105d=_0x44efce;!this[_0x1d105d(0x8fd)]['isBusy']()&&(_0x1d105d(0x66e)==='vOVeA'?this[_0x1d105d(0xb91)]():(this[_0x1d105d(0x52c)]=![],_0x17454e[_0x1d105d(0x6d0)]['Window_BattleLog_refresh'][_0x1d105d(0xb59)](this)));},Game_Battler['prototype'][_0x44efce(0x3b5)]=function(){const _0x1a99a7=_0x44efce;this[_0x1a99a7(0x34a)]();if(Imported['VisuMZ_1_SkillsStatesCore']){if('IskNy'!=='aCiRx'){const _0x16ec62=VisuMZ[_0x1a99a7(0x4cb)]['Settings'][_0x1a99a7(0x220)];_0x16ec62&&_0x16ec62[_0x1a99a7(0x721)]===![]&&this[_0x1a99a7(0xaff)](0x1);}else _0xd2750e['performCollapse']();}else{if(_0x1a99a7(0x415)!==_0x1a99a7(0x41f))this['removeStatesAuto'](0x1);else{let _0x47e414=[];return this[_0x1a99a7(0x532)]()?_0x47e414=this[_0x1a99a7(0xa1b)]():_0x47e414=_0x314a5e[_0x1a99a7(0x6d0)][_0x1a99a7(0x289)][_0x1a99a7(0xb59)](this),_0x47e414=this[_0x1a99a7(0x777)](_0x47e414),_0x47e414;}}this[_0x1a99a7(0xacf)]();},BattleManager[_0x44efce(0x771)]=function(){const _0x177381=_0x44efce;this[_0x177381(0x358)]=VisuMZ[_0x177381(0x6d0)]['Settings'][_0x177381(0x840)][_0x177381(0x1c0)][_0x177381(0xb59)](this);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x355)]=BattleManager[_0x44efce(0x208)],BattleManager[_0x44efce(0x208)]=function(){const _0xcbf4f7=_0x44efce;this[_0xcbf4f7(0x623)](_0xcbf4f7(0x50a)),BattleManager['_spriteset']['processEscape'](),VisuMZ[_0xcbf4f7(0x6d0)][_0xcbf4f7(0x355)][_0xcbf4f7(0xb59)](this),this[_0xcbf4f7(0x217)]('EscapeSuccess');},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x458)]=BattleManager[_0x44efce(0x615)],BattleManager[_0x44efce(0x615)]=function(){const _0x4eab69=_0x44efce;this[_0x4eab69(0x623)](_0x4eab69(0x8f8));const _0x474ed6=this[_0x4eab69(0x358)];VisuMZ[_0x4eab69(0x6d0)][_0x4eab69(0x458)][_0x4eab69(0xb59)](this),this[_0x4eab69(0x358)]=_0x474ed6+VisuMZ['BattleCore'][_0x4eab69(0x444)][_0x4eab69(0x840)]['CalcEscapeRaiseJS'][_0x4eab69(0xb59)](this),this[_0x4eab69(0x217)]('EscapeFail');},BattleManager[_0x44efce(0x7c3)]=function(){const _0x20bd8a=_0x44efce;let _0x398760=![];if(this['isDisplayEmergedEnemies']())for(const _0x56ea61 of $gameTroop[_0x20bd8a(0x7b1)]()){this['_logWindow'][_0x20bd8a(0xb70)](_0x20bd8a(0x6fa),TextManager[_0x20bd8a(0x546)][_0x20bd8a(0x437)](_0x56ea61)),this[_0x20bd8a(0x8fd)][_0x20bd8a(0xb70)]('wait'),_0x398760=!![];}if(this[_0x20bd8a(0xa75)])this[_0x20bd8a(0x8fd)][_0x20bd8a(0xb70)](_0x20bd8a(0x6fa),TextManager[_0x20bd8a(0x2d7)]['format']($gameParty[_0x20bd8a(0x5d4)]())),this['_logWindow'][_0x20bd8a(0xb70)](_0x20bd8a(0xaf1));else{if(this['_surprise']){if(_0x20bd8a(0xb53)===_0x20bd8a(0x327)){if(!this['_battler'])return;this[_0x20bd8a(0x1d9)]=this[_0x20bd8a(0x6cb)][_0x20bd8a(0x412)](),this[_0x20bd8a(0xb79)]=this[_0x20bd8a(0x6cb)][_0x20bd8a(0x9d4)]();}else this[_0x20bd8a(0x8fd)][_0x20bd8a(0xb70)](_0x20bd8a(0x6fa),TextManager[_0x20bd8a(0x76d)][_0x20bd8a(0x437)]($gameParty['name']())),this[_0x20bd8a(0x8fd)][_0x20bd8a(0xb70)](_0x20bd8a(0xaf1));}}if(_0x398760){if(_0x20bd8a(0x1bf)!==_0x20bd8a(0x1bf)){const _0x20d700=this[_0x20bd8a(0xa0e)](_0x4daa85),_0x27ad8e=new(_0x20d700?_0x2fb648:_0x259a91)(),_0x30a43e=this[_0x20bd8a(0xb00)](_0x5ba6d9);this[_0x20bd8a(0x140)](_0x1d271a[0x0])&&(_0x272037=!_0x3116f2),_0x27ad8e[_0x20bd8a(0x3a7)]=_0x4087d3,_0x27ad8e[_0x20bd8a(0x803)](_0x30a43e,_0x330a16,_0x5d62de,_0x27d459),this[_0x20bd8a(0x1af)](_0x27ad8e);}else this['_logWindow']['push'](_0x20bd8a(0xaf1)),this[_0x20bd8a(0x8fd)][_0x20bd8a(0xb70)](_0x20bd8a(0xa09));}this[_0x20bd8a(0x421)]()&&this[_0x20bd8a(0xce)]()&&('njBqW'!=='njBqW'?(_0x4515f6(_0x20bd8a(0x2b7)[_0x20bd8a(0x437)](_0x4f861e,_0x2bf7b2,_0x52df7d)),_0x2f5242['exit']()):this['_tpbNeedsPartyCommand']=![]);},BattleManager['isDisplayEmergedEnemies']=function(){const _0x4f0893=_0x44efce;if(BattleManager[_0x4f0893(0x3c1)])return![];return VisuMZ[_0x4f0893(0x6d0)][_0x4f0893(0x444)][_0x4f0893(0x71b)][_0x4f0893(0x990)];},VisuMZ['BattleCore'][_0x44efce(0x164)]=BattleManager['startInput'],BattleManager['startInput']=function(){const _0x35db98=_0x44efce;VisuMZ['BattleCore']['BattleManager_startInput'][_0x35db98(0xb59)](this),this[_0x35db98(0x672)]()&&this[_0x35db98(0xce)]()&&!this[_0x35db98(0x269)]&&$gameParty['canInput']()&&this[_0x35db98(0x293)]();},BattleManager['isSkipPartyCommandWindow']=function(){const _0x42cf89=_0x44efce;return VisuMZ[_0x42cf89(0x6d0)][_0x42cf89(0x444)][_0x42cf89(0x283)][_0x42cf89(0x39f)];},BattleManager[_0x44efce(0x135)]=function(){const _0x1f9582=_0x44efce;if(this[_0x1f9582(0xbc8)]()){if(_0x1f9582(0x388)!=='nsZAL')this['selectNextCommand']();else{const _0x194413=this[_0x1f9582(0x987)](),_0x289409=_0x194413[_0x1f9582(0x1ea)][_0x1f9582(0x8a0)];_0x194413[_0x1f9582(0x1ea)][_0x1f9582(0x8a0)]=this[_0x1f9582(0x1b0)];let _0x5b78a3=_0x3fd4f4[_0x1f9582(0x6d0)][_0x1f9582(0x253)][_0x1f9582(0xb59)](this,_0x2879d7);return _0x194413['damage'][_0x1f9582(0x8a0)]=_0x289409,_0x5b78a3;}}},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x80e)]=Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x2db)],Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x2db)]=function(){const _0x49220f=_0x44efce;VisuMZ[_0x49220f(0x6d0)][_0x49220f(0x80e)][_0x49220f(0xb59)](this);if(BattleManager['isTpb']()&&BattleManager['_tpbNeedsPartyCommand']){if('FWNvd'!==_0x49220f(0x393))BattleManager[_0x49220f(0x136)]=![],this[_0x49220f(0xa6b)]();else return this[_0x49220f(0x6e5)]();}},BattleManager[_0x44efce(0x70f)]=function(_0x4d71ec,_0x96e283){const _0x4324a6=_0x44efce;this['_action'][_0x4324a6(0x78d)]=_0x96e283,this[_0x4324a6(0x8fd)][_0x4324a6(0x3cc)](_0x96e283),this[_0x4324a6(0x8fd)]['displayReflectionPlayBack'](_0x4d71ec,this[_0x4324a6(0x1db)]),this[_0x4324a6(0x1db)][_0x4324a6(0x6a9)](_0x4d71ec),this[_0x4324a6(0x8fd)][_0x4324a6(0x9fb)](_0x4d71ec,_0x4d71ec);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x2ba)]=BattleManager[_0x44efce(0x8f1)],BattleManager['makeActionOrders']=function(){const _0x3ccade=_0x44efce;VisuMZ[_0x3ccade(0x6d0)][_0x3ccade(0x2ba)][_0x3ccade(0xb59)](this),this['_actionBattlers']=this[_0x3ccade(0x68f)][_0x3ccade(0xc9)](_0x1d8219=>_0x1d8219&&_0x1d8219['isAppeared']());},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x255)]=BattleManager['updatePhase'],BattleManager[_0x44efce(0x6e2)]=function(_0x4de071){const _0x3ee89a=_0x44efce;if(this[_0x3ee89a(0x416)]===_0x3ee89a(0x7f0))this[_0x3ee89a(0x8ac)]();else this[_0x3ee89a(0x416)]===_0x3ee89a(0x2cf)?this['updateForceAction']():VisuMZ[_0x3ee89a(0x6d0)][_0x3ee89a(0x255)]['call'](this,_0x4de071);},BattleManager[_0x44efce(0x74b)]=function(){const _0x52ef71=_0x44efce;this[_0x52ef71(0xb78)]=this['_targets'][_0x52ef71(0x3f2)](0x0),this[_0x52ef71(0x9ee)]=0x0,this[_0x52ef71(0x628)]=this[_0x52ef71(0xb78)][0x0]||null,this[_0x52ef71(0x416)]=_0x52ef71(0x7f0);},BattleManager[_0x44efce(0x8ac)]=function(){const _0x4dd197=_0x44efce;!this[_0x4dd197(0x4d3)]()&&!this['_logWindow'][_0x4dd197(0x2bf)]()&&(this[_0x4dd197(0x416)]='action');},BattleManager[_0x44efce(0x2cf)]=function(_0x2aaeda){const _0x5bb7ce=_0x44efce;this[_0x5bb7ce(0x68f)]['remove'](_0x2aaeda);if(_0x2aaeda===this['_subject'])return;const _0x48ee8d=JsonEx[_0x5bb7ce(0x414)](_0x2aaeda['currentAction']());this[_0x5bb7ce(0x4a2)][_0x5bb7ce(0xb70)]([_0x2aaeda,_0x48ee8d]);},BattleManager[_0x44efce(0xa59)]=function(){},BattleManager[_0x44efce(0xab7)]=function(){const _0x2376d8=_0x44efce;if(this[_0x2376d8(0x421)]())this[_0x2376d8(0x416)]=_0x2376d8(0x2f5);else this[_0x2376d8(0x4a2)]['length']>0x0?this[_0x2376d8(0x416)]='turn':_0x2376d8(0x2df)!=='EocHb'?this[_0x2376d8(0x9a7)]():(_0x23d499[_0x2376d8(0x8f2)][_0x2376d8(0x86c)]['call'](this,_0x582d9a),this[_0x2376d8(0x487)](_0x3dbbb5));},BattleManager[_0x44efce(0x9bd)]=function(){const _0x1b6c9b=_0x44efce,_0x1b0135=this['_subject'];_0x1b0135&&this[_0x1b6c9b(0x421)]()&&_0x1b0135[_0x1b6c9b(0xa6c)](_0x1b6c9b(0x443));for(;;){const _0x480d04=this[_0x1b6c9b(0xb64)]();if(!_0x480d04){if('CSAwN'!=='naIGr')return null;else _0x28b9a7[_0x5cfef5]=null;}if(_0x480d04[_0x1b6c9b(0xf5)]()&&_0x480d04[_0x1b6c9b(0x8e9)]()){if(_0x1b6c9b(0xb76)===_0x1b6c9b(0xb76))return _0x480d04;else{if(!this['_actor'][_0x1b6c9b(0xbb9)](_0x246b58['id']))return![];}}}},BattleManager[_0x44efce(0xb64)]=function(){const _0x484ba2=_0x44efce;if(this[_0x484ba2(0x4a2)][_0x484ba2(0x496)]>0x0){const _0x3a1401=this['_forcedBattlers'][_0x484ba2(0x467)](),_0x2357fb=_0x3a1401[0x0];return _0x2357fb[_0x484ba2(0x3ad)]=_0x2357fb[_0x484ba2(0x3ad)]||[],_0x2357fb[_0x484ba2(0x3ad)][0x0]=_0x3a1401[0x1],_0x2357fb;}else return this[_0x484ba2(0x68f)]['shift']();},VisuMZ['BattleCore'][_0x44efce(0x380)]=Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x2cf)],Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x2cf)]=function(_0x4cd845,_0x2a9d1b){const _0x309ec1=_0x44efce;VisuMZ[_0x309ec1(0x6d0)][_0x309ec1(0x380)][_0x309ec1(0xb59)](this,_0x4cd845,_0x2a9d1b),this[_0x309ec1(0x3ad)][this[_0x309ec1(0x3ad)][_0x309ec1(0x496)]-0x1]['_forceAction']=!![];},Game_Interpreter[_0x44efce(0x8f2)][_0x44efce(0x2d9)]=function(_0x539375){const _0x1241e0=_0x44efce;return this[_0x1241e0(0xa3d)](_0x539375[0x0],_0x539375[0x1],_0xa57ec=>{const _0x5c17d7=_0x1241e0;!_0xa57ec[_0x5c17d7(0x823)]()&&(_0xa57ec[_0x5c17d7(0x2cf)](_0x539375[0x2],_0x539375[0x3]),BattleManager[_0x5c17d7(0x2cf)](_0xa57ec));}),!![];},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x847)]=Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x1d8)],Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x1d8)]=function(){const _0x3ea213=_0x44efce;VisuMZ[_0x3ea213(0x6d0)][_0x3ea213(0x847)][_0x3ea213(0xb59)](this),this[_0x3ea213(0x3ad)][_0x3ea213(0x496)]<=0x0&&(this[_0x3ea213(0x356)]=Number[_0x3ea213(0x876)]);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x6fd)]=BattleManager[_0x44efce(0x293)],BattleManager[_0x44efce(0x293)]=function(){const _0x2b83ca=_0x44efce;if(this['isTpb']())this[_0x2b83ca(0x682)]();else{if(_0x2b83ca(0x498)===_0x2b83ca(0x543))return _0x2734bb[_0x2b83ca(0x6d0)][_0x2b83ca(0x444)]['AutoBattle'][_0x2b83ca(0xa1d)];else VisuMZ['BattleCore'][_0x2b83ca(0x6fd)][_0x2b83ca(0xb59)](this);}},BattleManager[_0x44efce(0x682)]=function(){const _0x3e7c01=_0x44efce;if(this[_0x3e7c01(0x589)]){if(this[_0x3e7c01(0x589)][_0x3e7c01(0x293)]()){if(_0x3e7c01(0x16c)!==_0x3e7c01(0x16c))this[_0x3e7c01(0x91d)]();else return;}this[_0x3e7c01(0x8e5)](),this[_0x3e7c01(0x40d)](),!this[_0x3e7c01(0x427)]&&!this[_0x3e7c01(0x589)]&&('TdcNm'===_0x3e7c01(0x63c)?(_0x2f0b3e[_0x3e7c01(0x8f2)][_0x3e7c01(0x2c8)][_0x3e7c01(0xb59)](this),this[_0x3e7c01(0xb1c)]()&&this[_0x3e7c01(0xbb3)]()&&this[_0x3e7c01(0x7c8)](_0x3e7c01(0x1ea)),_0x262075[_0x3e7c01(0x32b)]()):SceneManager[_0x3e7c01(0x45b)][_0x3e7c01(0xa22)]());}else!this[_0x3e7c01(0x427)]&&this[_0x3e7c01(0x91d)]();},BattleManager[_0x44efce(0x40d)]=function(){const _0x373d5e=_0x44efce;(!this[_0x373d5e(0xbc8)]()||this['needsActorInputCancel']())&&(this[_0x373d5e(0x304)]&&(!$gameParty[_0x373d5e(0xaa6)]()[_0x373d5e(0x89e)](this[_0x373d5e(0x304)])&&(this['_tpbSceneChangeCacheActor']=null)),!this[_0x373d5e(0x304)]?(this['cancelActorInput'](),this[_0x373d5e(0x589)]=null,this[_0x373d5e(0x278)]=![]):this[_0x373d5e(0x980)]());},BattleManager[_0x44efce(0x980)]=function(){const _0x1e0d6c=_0x44efce;if(!$gameParty[_0x1e0d6c(0xaa6)]()[_0x1e0d6c(0x89e)](this['_tpbSceneChangeCacheActor'])){if('XdtGL'===_0x1e0d6c(0x4dd))this[_0x1e0d6c(0x304)]=null;else return this[_0x1e0d6c(0x5cd)]()[_0x1e0d6c(0x5d4)];}this[_0x1e0d6c(0x304)]?(this['_currentActor']=this['_tpbSceneChangeCacheActor'],this['_currentActor'][_0x1e0d6c(0x263)]=_0x1e0d6c(0x619),this['_inputting']=!![],this[_0x1e0d6c(0x304)]=null):'LmHtS'===_0x1e0d6c(0x642)?(this['cancelActorInput'](),this[_0x1e0d6c(0x589)]=null,this[_0x1e0d6c(0x278)]=![]):(this['updateAngleCalculations'](),this['applyAngleChange']());},VisuMZ['BattleCore'][_0x44efce(0xa47)]=BattleManager[_0x44efce(0x1e2)],BattleManager['isTpbMainPhase']=function(){const _0x548329=_0x44efce;return this['_phase']===_0x548329(0x7f0)?this[_0x548329(0x88c)]():VisuMZ['BattleCore']['BattleManager_isTpbMainPhase'][_0x548329(0xb59)](this);},BattleManager[_0x44efce(0x88c)]=function(){const _0x1afcf4=_0x44efce;return this[_0x1afcf4(0x27f)]();},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x8db)]=BattleManager[_0x44efce(0x9c0)],BattleManager[_0x44efce(0x9c0)]=function(){const _0x88e8c8=_0x44efce;this[_0x88e8c8(0x421)]()&&this['_phase']==='battleEnd'&&(_0x88e8c8(0xb4)===_0x88e8c8(0x53d)?this[_0x88e8c8(0x127)]():this[_0x88e8c8(0x589)]=null),VisuMZ[_0x88e8c8(0x6d0)]['BattleManager_cancelActorInput'][_0x88e8c8(0xb59)](this);},VisuMZ[_0x44efce(0x6d0)]['BattleManager_inputtingAction']=BattleManager['inputtingAction'],BattleManager[_0x44efce(0x62c)]=function(){const _0x2fe5f8=_0x44efce,_0x1f194e=this[_0x2fe5f8(0x589)];if(_0x1f194e&&!_0x1f194e[_0x2fe5f8(0x62c)]()){if(_0x2fe5f8(0xa80)!==_0x2fe5f8(0x1dd)){const _0x42b365=_0x1f194e['_actionInputIndex'];_0x1f194e['_actions'][_0x42b365]=new Game_Action(_0x1f194e);}else{if(!_0x3a26ab[_0x2fe5f8(0xbab)]())return;const _0x39039b=_0x55ea20[_0x2fe5f8(0x45b)][_0x2fe5f8(0x743)];if(_0x39039b)_0x39039b[_0x2fe5f8(0x21e)]();}}return VisuMZ[_0x2fe5f8(0x6d0)][_0x2fe5f8(0xa62)][_0x2fe5f8(0xb59)](this);},VisuMZ['BattleCore'][_0x44efce(0xb04)]=BattleManager[_0x44efce(0x1f2)],BattleManager[_0x44efce(0x1f2)]=function(_0x4d5929){const _0x18f49e=_0x44efce;if(this['_action']['isForFriend']())return![];return VisuMZ[_0x18f49e(0x6d0)][_0x18f49e(0xb04)][_0x18f49e(0xb59)](this,_0x4d5929);},SceneManager[_0x44efce(0xbab)]=function(){const _0x38cacc=_0x44efce;return this['_scene']&&this['_scene'][_0x38cacc(0x669)]===Scene_Battle;},SceneManager[_0x44efce(0x448)]=function(){const _0x30c77b=_0x44efce;return Spriteset_Battle[_0x30c77b(0x8f2)][_0x30c77b(0x996)]();},SceneManager[_0x44efce(0x521)]=function(){const _0x312bf1=_0x44efce;if(SceneManager[_0x312bf1(0x670)](Scene_Options))return!![];return![];},SceneManager[_0x44efce(0x198)]=function(){const _0x48c367=_0x44efce;if(SceneManager[_0x48c367(0x6b9)](Scene_Options))return!![];return![];},SceneManager[_0x44efce(0xbca)]=function(_0x51476e){const _0x47bab4=_0x44efce;if(!SceneManager[_0x47bab4(0xbab)]())return!![];const _0x54bf2f=['Scene_Options',_0x47bab4(0x9f9)];return _0x54bf2f['includes'](_0x51476e[_0x47bab4(0x5d4)]);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x4f1)]=SceneManager[_0x44efce(0xb70)],SceneManager[_0x44efce(0xb70)]=function(_0x2a6030){const _0x1e7661=_0x44efce;if(!SceneManager[_0x1e7661(0xbca)](_0x2a6030)){if(_0x1e7661(0xa4e)==='zTWZG')return this[_0x1e7661(0x4ad)](_0x2a6030);else{const _0x1da98e=_0x1ed685[_0x1e7661(0x39c)](this[_0x1e7661(0x34b)]),_0x2ac2b5=_0x57c453['DamageStyles'][_0x1da98e];if(!_0x2ac2b5)return this[_0x1e7661(0x74d)]();return _0x2ac2b5[_0x1e7661(0xa96)][_0x1e7661(0xb59)](this);}}VisuMZ[_0x1e7661(0x6d0)][_0x1e7661(0x4f1)][_0x1e7661(0xb59)](this,_0x2a6030);},SceneManager[_0x44efce(0x4ad)]=function(_0x134cba){const _0x29a7f7=_0x44efce;if(!$gameTemp[_0x29a7f7(0x92e)]())return;if(this['_displayBattleCoreTransitionErrorMsg'])return;this[_0x29a7f7(0x634)]=!![];let _0x5c9155='';_0x5c9155+=_0x29a7f7(0x9cf),_0x5c9155+='\x20to\x20%1\x20midbattle.'[_0x29a7f7(0x437)](_0x134cba[_0x29a7f7(0x5d4)]),alert(_0x5c9155);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x5e1)]=Game_Temp[_0x44efce(0x8f2)][_0x44efce(0x9df)],Game_Temp[_0x44efce(0x8f2)][_0x44efce(0x9df)]=function(_0x9901f2,_0x6a275e,_0x351cea){const _0xb37bff=_0x44efce;_0x9901f2=_0x9901f2[_0xb37bff(0xc9)]((_0x1560a8,_0x4d8a00,_0x338eef)=>_0x338eef[_0xb37bff(0x963)](_0x1560a8)===_0x4d8a00);if(SceneManager[_0xb37bff(0xbab)]()&&SceneManager['isBattleFlipped']()){if(_0xb37bff(0x342)!==_0xb37bff(0x8a5))_0x351cea=!_0x351cea;else{if(this[_0xb37bff(0x918)]()[_0xb37bff(0x77d)][_0xb37bff(0xab6)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return _0x3b9133(_0x4ea7d3['$1']);else{if(this[_0xb37bff(0x918)]()[_0xb37bff(0x77d)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return _0x1c9b21(_0x590349['$1']);}return 0x0;}}VisuMZ[_0xb37bff(0x6d0)][_0xb37bff(0x5e1)]['call'](this,_0x9901f2,_0x6a275e,_0x351cea),SceneManager['isSceneBattle']()&&(_0xb37bff(0x2d4)===_0xb37bff(0xa60)?_0x7c3bd5['_inputting']=![]:BattleManager[_0xb37bff(0x948)][_0xb37bff(0xaa2)]());},Game_Temp[_0x44efce(0x8f2)][_0x44efce(0x465)]=function(_0x38689d){const _0x2a5f59=_0x44efce;this[_0x2a5f59(0xa64)]=_0x38689d;},Game_Temp[_0x44efce(0x8f2)]['getLastPluginCommandInterpreter']=function(){return this['_lastPluginCommandInterpreter'];},Game_Temp['prototype'][_0x44efce(0x1ce)]=function(){const _0xb2c40=_0x44efce;this[_0xb2c40(0x607)]=undefined;},Game_Temp[_0x44efce(0x8f2)]['applyForcedGameTroopSettingsBattleCore']=function(_0x282eab){const _0x169408=_0x44efce;$gameMap&&$dataMap&&$dataMap[_0x169408(0x77d)]&&this['parseForcedGameTroopSettingsBattleCore']($dataMap[_0x169408(0x77d)]);const _0x40fac1=$dataTroops[_0x282eab];if(_0x40fac1){let _0x57b775=DataManager[_0x169408(0x514)](_0x40fac1['id']);this[_0x169408(0x5ec)](_0x57b775);}},Game_Temp[_0x44efce(0x8f2)][_0x44efce(0x5ec)]=function(_0x103496){const _0x3ffa0e=_0x44efce;if(!_0x103496)return;if(_0x103496[_0x3ffa0e(0xab6)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*)>/i)){const _0x109e9b=String(RegExp['$1']);if(_0x109e9b[_0x3ffa0e(0xab6)](/DEFAULT/i)){if('bLSXO'===_0x3ffa0e(0x7f2)){if(!_0xc4be8e[_0x3ffa0e(0xbca)](_0x17ccf6))return this[_0x3ffa0e(0x4ad)](_0x33ce1b);_0x12ea9e[_0x3ffa0e(0x6d0)][_0x3ffa0e(0x4f1)][_0x3ffa0e(0xb59)](this,_0x240bfd);}else this[_0x3ffa0e(0x607)]=_0x3ffa0e(0x8dd);}else{if(_0x109e9b[_0x3ffa0e(0xab6)](/LIST/i))this[_0x3ffa0e(0x607)]='list';else{if(_0x109e9b['match'](/XP/i))this[_0x3ffa0e(0x607)]='xp';else{if(_0x109e9b[_0x3ffa0e(0xab6)](/PORTRAIT/i)){if(_0x3ffa0e(0x5b0)!==_0x3ffa0e(0xf8))this['_forcedBattleLayout']=_0x3ffa0e(0x47a);else return _0x17aa7f[_0x3ffa0e(0x6d0)][_0x3ffa0e(0xb3c)][_0x3ffa0e(0xb59)](this,_0x1e86aa);}else{if(_0x109e9b[_0x3ffa0e(0xab6)](/BORDER/i))this[_0x3ffa0e(0x607)]=_0x3ffa0e(0x2c9);else{if(_0x109e9b['match'](/(?:SIDEVIEW UI|SIDEVIEW)/i)){if(Imported[_0x3ffa0e(0x203)]){if(_0x3ffa0e(0x420)!==_0x3ffa0e(0x40a))this[_0x3ffa0e(0x607)]=_0x3ffa0e(0x982);else return _0x2a6ab9['friendsUnit']()[_0x3ffa0e(0x806)]();}else this[_0x3ffa0e(0x607)]='default';}}}}}}}},VisuMZ[_0x44efce(0x6d0)]['Game_System_initialize']=Game_System[_0x44efce(0x8f2)][_0x44efce(0x64a)],Game_System['prototype'][_0x44efce(0x64a)]=function(){const _0x2380cc=_0x44efce;VisuMZ['BattleCore'][_0x2380cc(0x2d0)][_0x2380cc(0xb59)](this),this[_0x2380cc(0x2bd)]();},Game_System['prototype'][_0x44efce(0x2bd)]=function(){const _0x1cb6d7=_0x44efce;this[_0x1cb6d7(0xa2c)]=this[_0x1cb6d7(0xa2c)]||[];},Game_System['prototype'][_0x44efce(0x60d)]=function(){const _0x192b93=_0x44efce;if(this[_0x192b93(0xa2c)]===undefined)this[_0x192b93(0x2bd)]();return this['_defeatedEnemies'];},Game_System[_0x44efce(0x8f2)][_0x44efce(0x975)]=function(_0x19416f){const _0x3c9280=_0x44efce;if(this[_0x3c9280(0xa2c)]===undefined)this['initBattleCore']();if(!_0x19416f)return;if(this[_0x3c9280(0xa2c)]['includes'](_0x19416f))return;this['_defeatedEnemies']['push'](_0x19416f),this['_defeatedEnemies'][_0x3c9280(0x224)]((_0x1770b9,_0x4afb30)=>_0x1770b9-_0x4afb30);},VisuMZ[_0x44efce(0x6d0)]['Game_BattlerBase_addNewState']=Game_BattlerBase[_0x44efce(0x8f2)][_0x44efce(0xba6)],Game_BattlerBase[_0x44efce(0x8f2)][_0x44efce(0xba6)]=function(_0x21c488){const _0x120b04=_0x44efce,_0x5b7207=this[_0x120b04(0x8e9)](),_0x37e95a=this[_0x120b04(0x99d)]();VisuMZ[_0x120b04(0x6d0)][_0x120b04(0x350)][_0x120b04(0xb59)](this,_0x21c488),this[_0x120b04(0x851)]()&&_0x5b7207&&this[_0x120b04(0x578)]()&&(_0x120b04(0x5ff)!==_0x120b04(0xca)?(this[_0x120b04(0x4af)]=!this[_0x120b04(0x684)](),$gameSystem[_0x120b04(0x975)](this[_0x120b04(0x134)]())):this[_0x120b04(0x980)]()),SceneManager[_0x120b04(0xbab)]()&&_0x37e95a!==this['stateMotionIndex']()&&(this[_0x120b04(0x6dd)]()&&this[_0x120b04(0x6dd)]()[_0x120b04(0x310)]());},Game_Enemy[_0x44efce(0x8f2)][_0x44efce(0x684)]=function(){const _0x8f120c=_0x44efce;return $gameSystem[_0x8f120c(0x60d)]()[_0x8f120c(0x89e)](this[_0x8f120c(0xaa7)]);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x829)]=Game_BattlerBase['prototype'][_0x44efce(0x316)],Game_BattlerBase[_0x44efce(0x8f2)]['eraseState']=function(_0xd25463){const _0x4bdae8=_0x44efce;VisuMZ[_0x4bdae8(0x6d0)]['Game_BattlerBase_eraseState'][_0x4bdae8(0xb59)](this,_0xd25463);this[_0x4bdae8(0x851)]()&&_0xd25463===this[_0x4bdae8(0x8a4)]()&&this[_0x4bdae8(0x8e9)]()&&(this[_0x4bdae8(0x4af)]=![]);if(!this[_0x4bdae8(0x499)]&&!this[_0x4bdae8(0xa84)]&&SceneManager[_0x4bdae8(0xbab)]()){if(_0x4bdae8(0x31a)!==_0x4bdae8(0x5dc))this[_0x4bdae8(0x42b)]();else{const _0x4095d5=_0x59be3d['note'];if(_0x4095d5[_0x4bdae8(0xab6)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return _0x4b73a8(_0x418acd['$1'])*0.01;else{if(_0x4095d5[_0x4bdae8(0xab6)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return _0x59e682(_0x2358c6['$1'])||0x0;}}}},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x547)]=Game_Action[_0x44efce(0x8f2)][_0x44efce(0xa09)],Game_Action[_0x44efce(0x8f2)][_0x44efce(0xa09)]=function(){const _0x36586f=_0x44efce;VisuMZ[_0x36586f(0x6d0)][_0x36586f(0x547)][_0x36586f(0xb59)](this),this[_0x36586f(0x657)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this['_multipliers']={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x36586f(0x1b0)]=_0x36586f(0x8dd);},Game_Action[_0x44efce(0x8f2)][_0x44efce(0x8ae)]=function(_0x172a40,_0x51de06){const _0x5d9f14=_0x44efce;return VisuMZ[_0x5d9f14(0x6d0)]['Settings']['Damage'][_0x5d9f14(0x2fe)]['call'](this,_0x172a40,_0x51de06);},Game_Action[_0x44efce(0x8f2)][_0x44efce(0x2e4)]=function(_0x2b5358,_0x18836f){const _0x4887bf=_0x44efce;return VisuMZ[_0x4887bf(0x6d0)]['Settings'][_0x4887bf(0x86a)][_0x4887bf(0xb80)][_0x4887bf(0xb59)](this,_0x2b5358,_0x18836f);},Game_Action[_0x44efce(0x8f2)]['applyGuard']=function(_0x5cafc2,_0x237ad6){const _0x50b6ff=_0x44efce;return VisuMZ[_0x50b6ff(0x6d0)][_0x50b6ff(0x444)]['Damage'][_0x50b6ff(0x32c)][_0x50b6ff(0xb59)](this,_0x5cafc2,_0x237ad6);},VisuMZ['BattleCore']['Game_Action_itemHit']=Game_Action[_0x44efce(0x8f2)]['itemHit'],Game_Action[_0x44efce(0x8f2)][_0x44efce(0x5c1)]=function(_0x4c0b5b){const _0x4d4228=_0x44efce,_0x476073=this[_0x4d4228(0x987)]()[_0x4d4228(0x77d)];if(_0x476073['match'](/<ALWAYS HIT>/i)){if(_0x4d4228(0x108)!=='PtFfU'){const _0x5c4f61=this[_0x4d4228(0x95c)]()?this[_0x4d4228(0x595)]:0x0,_0x41f043=_0x16bc32[_0x4d4228(0x570)];this[_0x4d4228(0x3d7)](_0x41f043,_0x5c4f61),this[_0x4d4228(0x636)]=_0x54e384[_0x4d4228(0x414)](this[_0x4d4228(0x636)]);const _0x2940cd={'code':0xbc3,'indent':this[_0x4d4228(0x9b1)],'parameters':_0x5d085f['makeDeepCopy'](_0x5e909c)};return this[_0x4d4228(0x636)]['splice'](this[_0x4d4228(0x49d)]+0x1,0x0,_0x2940cd),!![];}else return 0x1;}else{if(_0x476073['match'](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{if(_0x4d4228(0x4c3)!==_0x4d4228(0x534)){let _0x4cc738=VisuMZ[_0x4d4228(0x6d0)][_0x4d4228(0xb83)]['call'](this,_0x4c0b5b);return _0x4cc738=this[_0x4d4228(0x7ce)][_0x4d4228(0x6a5)]*_0x4cc738+this[_0x4d4228(0x7ce)]['hitFlat'],_0x4cc738;}else{_0x1782aa['BattleCore'][_0x4d4228(0x6ba)][_0x4d4228(0xb59)](this,_0xe026cf),this[_0x4d4228(0x5d9)](),this['setupBattleCoreData']();const _0x53dd97=this[_0x4d4228(0x6dd)]();if(_0x53dd97)_0x53dd97[_0x4d4228(0x2fa)](this);}}}},Game_Action[_0x44efce(0x8f2)][_0x44efce(0x8ca)]=function(_0x4370af){const _0x1a1049=_0x44efce;if(!this[_0x1a1049(0x987)]()[_0x1a1049(0x1ea)]['critical'])return 0x0;let _0xe1e75=VisuMZ['BattleCore'][_0x1a1049(0x444)][_0x1a1049(0x86a)]['CriticalHitRateJS']['call'](this,_0x4370af);return _0xe1e75=this[_0x1a1049(0x7ce)]['criticalHitRate']*_0xe1e75+this['_multipliers'][_0x1a1049(0xa81)],_0xe1e75;},Game_Action[_0x44efce(0x8f2)][_0x44efce(0xb16)]=function(_0xe80e71){const _0x33b083=_0x44efce;return _0xe80e71=VisuMZ['BattleCore'][_0x33b083(0x444)]['Damage']['CriticalHitMultiplier']['call'](this,_0xe80e71),_0xe80e71=this[_0x33b083(0x7ce)]['criticalDmgRate']*_0xe80e71+this[_0x33b083(0x7ce)][_0x33b083(0x4df)],_0xe80e71;},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x253)]=Game_Action['prototype']['evalDamageFormula'],Game_Action[_0x44efce(0x8f2)][_0x44efce(0x54b)]=function(_0x1c0d21){const _0x1c6dde=_0x44efce;if(this[_0x1c6dde(0x1b0)]!==_0x1c6dde(0x8dd))return this['customDamageFormula'](_0x1c0d21);else return DataManager['getDamageStyle'](this['item']())==='MANUAL'?_0x1c6dde(0x787)===_0x1c6dde(0x787)?VisuMZ['BattleCore']['Game_Action_evalDamageFormula'][_0x1c6dde(0xb59)](this,_0x1c0d21):_0x309eda['friendsUnit']()[_0x1c6dde(0xb09)]()[_0x1c6dde(0xc9)](_0x2252f4=>_0x2252f4!==_0x1363e6):this[_0x1c6dde(0x4de)](_0x1c0d21);},Game_Action[_0x44efce(0x8f2)][_0x44efce(0xaa5)]=function(_0x2259c5){const _0x18899e=_0x44efce;this[_0x18899e(0x1b0)]=_0x2259c5;},Game_Action[_0x44efce(0x8f2)]['customDamageFormula']=function(_0xe477fc){const _0x57a03e=_0x44efce,_0x56f7ed=this[_0x57a03e(0x987)](),_0x42b8ed=_0x56f7ed[_0x57a03e(0x1ea)][_0x57a03e(0x8a0)];_0x56f7ed['damage']['formula']=this[_0x57a03e(0x1b0)];let _0x21a5a1=VisuMZ[_0x57a03e(0x6d0)]['Game_Action_evalDamageFormula'][_0x57a03e(0xb59)](this,_0xe477fc);return _0x56f7ed[_0x57a03e(0x1ea)]['formula']=_0x42b8ed,_0x21a5a1;},Game_Action['prototype']['damageStyle']=function(){const _0x6291cb=_0x44efce;if(this['item']()['note'][_0x6291cb(0xab6)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x29a12e=String(RegExp['$1'])[_0x6291cb(0xb2d)]()[_0x6291cb(0xaef)]();return _0x29a12e;}return _0x6291cb(0x4d7);},Game_Action[_0x44efce(0x8f2)][_0x44efce(0x4de)]=function(_0xa804d8){const _0x4ca79a=_0x44efce,_0x446d78=DataManager['getDamageStyle'](this[_0x4ca79a(0x987)]()),_0x54ecdb=VisuMZ[_0x4ca79a(0xb3)][_0x446d78];try{return _0x54ecdb[_0x4ca79a(0x588)][_0x4ca79a(0xb59)](this,_0xa804d8);}catch(_0x17b1a2){if($gameTemp['isPlaytest']())console[_0x4ca79a(0x64c)](_0x17b1a2);return VisuMZ[_0x4ca79a(0x6d0)][_0x4ca79a(0x253)][_0x4ca79a(0xb59)](this);}},Game_Action['prototype'][_0x44efce(0xa88)]=function(_0x3e0491,_0x591c95){const _0x475043=_0x44efce;if(this[_0x475043(0xb61)]())return _0x591c95;const _0x454bc6=this[_0x475043(0x8f0)](),_0x562877=_0x3e0491;let _0x21cf79=[],_0x4d1e94=[];_0x21cf79[_0x475043(0xb70)](this[_0x475043(0x657)][_0x475043(0xb33)],this[_0x475043(0x657)][_0x475043(0x1cf)]),_0x4d1e94[_0x475043(0xb70)](this[_0x475043(0x657)]['arPenRate'],this[_0x475043(0x657)]['arRedRate']);const _0x50be30=this[_0x475043(0x211)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x425ef2=this[_0x475043(0x211)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0xc2df9a=this[_0x475043(0x211)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x5e0600=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;_0x21cf79=_0x21cf79[_0x475043(0x719)](_0x562877[_0x475043(0x919)]()['map'](_0xdc3fb=>_0xdc3fb&&_0xdc3fb[_0x475043(0x77d)][_0x475043(0xab6)](_0x50be30)?Number(RegExp['$1']):0x0)),_0x4d1e94=_0x4d1e94[_0x475043(0x719)](_0x562877[_0x475043(0x919)]()[_0x475043(0xba3)](_0x1bea86=>_0x1bea86&&_0x1bea86[_0x475043(0x77d)][_0x475043(0xab6)](_0x425ef2)?Number(RegExp['$1'])/0x64:0x0)),_0x21cf79=_0x21cf79[_0x475043(0x719)](_0x454bc6[_0x475043(0x919)]()[_0x475043(0xba3)](_0x5662ca=>_0x5662ca&&_0x5662ca[_0x475043(0x77d)][_0x475043(0xab6)](_0xc2df9a)?Number(RegExp['$1']):0x0)),_0x4d1e94=_0x4d1e94[_0x475043(0x719)](_0x454bc6[_0x475043(0x919)]()[_0x475043(0xba3)](_0x1be164=>_0x1be164&&_0x1be164[_0x475043(0x77d)][_0x475043(0xab6)](_0x5e0600)?Number(RegExp['$1'])/0x64:0x0));if(this[_0x475043(0x987)]()['note'][_0x475043(0xab6)](_0xc2df9a)){if('yijjv'===_0x475043(0x188)){if(!_0x4f2fa6['isSceneBattle']())return;const _0x506114=_0x12ab85[_0x475043(0x3f8)]();_0x506114[_0x475043(0x227)]('battlelog');}else _0x21cf79[_0x475043(0xb70)](Number(RegExp['$1']));}return this[_0x475043(0x987)]()[_0x475043(0x77d)][_0x475043(0xab6)](_0x5e0600)&&_0x4d1e94['push'](Number(RegExp['$1'])),_0x591c95=_0x21cf79[_0x475043(0xa4a)]((_0x33c987,_0x31688f)=>_0x33c987-_0x31688f,_0x591c95),_0x591c95>0x0&&(_0x591c95=_0x4d1e94[_0x475043(0xa4a)]((_0x28eb4e,_0x4206d3)=>_0x28eb4e*(0x1-_0x4206d3),_0x591c95)),_0x591c95;},VisuMZ[_0x44efce(0x6d0)]['Game_Action_executeDamage']=Game_Action['prototype'][_0x44efce(0x4d6)],Game_Action['prototype'][_0x44efce(0x4d6)]=function(_0x20cb24,_0x85b3c3){const _0x3d3d44=_0x44efce;_0x85b3c3=_0x85b3c3*this['_multipliers']['damageRate'],_0x85b3c3+=this[_0x3d3d44(0x7ce)]['damageFlat']*(_0x85b3c3>=0x0?0x1:-0x1),_0x85b3c3=this['applyBattleCoreJS'](_0x3d3d44(0x97d),_0x20cb24,_0x85b3c3,![]),_0x85b3c3=this[_0x3d3d44(0x5ee)](_0x85b3c3),_0x85b3c3=Math[_0x3d3d44(0x18c)](_0x85b3c3),this[_0x3d3d44(0x4cc)]=_0x85b3c3,this[_0x3d3d44(0xac0)]=this[_0x3d3d44(0xac0)]||0x0,this[_0x3d3d44(0xac0)]+=_0x85b3c3,VisuMZ['BattleCore'][_0x3d3d44(0xa51)][_0x3d3d44(0xb59)](this,_0x20cb24,_0x85b3c3),this[_0x3d3d44(0x7cf)](_0x3d3d44(0x66f),_0x20cb24,_0x85b3c3,!![]);},Game_Action[_0x44efce(0x8f2)]['applyDamageCaps']=function(_0x4c6563){const _0x2f19a0=_0x44efce;if(this['isBypassDamageCap']())return _0x4c6563;return _0x4c6563=this[_0x2f19a0(0xb95)](_0x4c6563),_0x4c6563=this[_0x2f19a0(0x46a)](_0x4c6563),_0x4c6563;},Game_Action[_0x44efce(0x8f2)][_0x44efce(0x334)]=function(){const _0x56989e=_0x44efce,_0x33673f=/<BYPASS DAMAGE CAP>/i;if(this[_0x56989e(0x987)]()['note'][_0x56989e(0xab6)](_0x33673f))return!![];if(this[_0x56989e(0x8f0)]()['traitObjects']()['some'](_0x5b0cbc=>_0x5b0cbc&&_0x5b0cbc['note'][_0x56989e(0xab6)](_0x33673f)))return!![];return!VisuMZ[_0x56989e(0x6d0)]['Settings'][_0x56989e(0x86a)][_0x56989e(0x601)];},Game_Action[_0x44efce(0x8f2)][_0x44efce(0xb95)]=function(_0x3e2024){const _0x485c99=_0x44efce;if(!VisuMZ[_0x485c99(0x6d0)][_0x485c99(0x444)][_0x485c99(0x86a)][_0x485c99(0x105)])return _0x3e2024;const _0x468ed4=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x485c99(0x987)]()[_0x485c99(0x77d)][_0x485c99(0xab6)](_0x468ed4))return _0x3e2024;if(this['subject']()['traitObjects']()[_0x485c99(0x42d)](_0x1d5c12=>_0x1d5c12&&_0x1d5c12['note'][_0x485c99(0xab6)](_0x468ed4))){if('zTwGi'!==_0x485c99(0xb45))return _0x3e2024;else this[_0x485c99(0xa16)][_0x485c99(0x922)]=![];}const _0x43f234=_0x3e2024<0x0?-0x1:0x1;_0x3e2024=Math[_0x485c99(0x33b)](_0x3e2024);let _0x650183=this[_0x485c99(0x8f0)]()[_0x485c99(0x906)]();this['item']()[_0x485c99(0x77d)][_0x485c99(0xab6)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x650183+=Number(RegExp['$1'])/0x64);_0x650183=_0x650183[_0x485c99(0x45f)](0.01,0x1);const _0x169f76=this[_0x485c99(0x917)](),_0x535eba=_0x650183*_0x169f76;if(_0x3e2024>_0x535eba&&_0x169f76>_0x535eba){if(_0x485c99(0x4fc)!==_0x485c99(0x4fc))_0x167632[_0x485c99(0x6d0)][_0x485c99(0x1ee)][_0x485c99(0xb59)](this),this[_0x485c99(0x4a2)]=[];else{_0x3e2024-=_0x535eba;const _0x5ea9f2=VisuMZ[_0x485c99(0x6d0)]['Settings'][_0x485c99(0x86a)][_0x485c99(0xae7)],_0x592ff5=Math[_0x485c99(0x65c)](0x1-_0x3e2024/((_0x169f76-_0x535eba)*_0x5ea9f2+_0x3e2024),0.01);_0x3e2024*=_0x592ff5,_0x3e2024+=_0x535eba;}}return _0x3e2024*_0x43f234;},Game_Action[_0x44efce(0x8f2)][_0x44efce(0x917)]=function(){const _0x294b89=_0x44efce;if(this[_0x294b89(0x987)]()[_0x294b89(0x77d)]['match'](/<DAMAGE CAP:[ ](\d+)>/i)){if(_0x294b89(0x9fe)==='tKaEh'){const _0x1478e9=_0x469d73['getDamageStyle'](this['item']()),_0x13fad8=_0x6e5c0f['DamageStyles'][_0x1478e9];try{return _0x13fad8['Formula'][_0x294b89(0xb59)](this,_0x305db5);}catch(_0x576eab){if(_0x4167f9['isPlaytest']())_0x22fd46['log'](_0x576eab);return _0x51aacf[_0x294b89(0x6d0)][_0x294b89(0x253)]['call'](this);}}else return Number(RegExp['$1']);}else{if(_0x294b89(0x68c)===_0x294b89(0x9a5)){if(this[_0x294b89(0x416)]===_0x294b89(0x7f0))this['updateCustomActionSequence']();else this[_0x294b89(0x416)]===_0x294b89(0x2cf)?this[_0x294b89(0x199)]():_0x1f9995['BattleCore'][_0x294b89(0x255)][_0x294b89(0xb59)](this,_0x41094b);}else return this[_0x294b89(0x8f0)]()[_0x294b89(0x858)]();}},Game_Action['prototype'][_0x44efce(0x46a)]=function(_0x1178d4){const _0x26f8ae=_0x44efce;console[_0x26f8ae(0x64c)](_0x1178d4);let _0x33e3ea=this[_0x26f8ae(0x917)]();return _0x1178d4[_0x26f8ae(0x45f)](-_0x33e3ea,_0x33e3ea);},VisuMZ[_0x44efce(0x6d0)]['Game_Action_apply']=Game_Action[_0x44efce(0x8f2)][_0x44efce(0x6a9)],Game_Action[_0x44efce(0x8f2)][_0x44efce(0x6a9)]=function(_0xc68192){const _0x506285=_0x44efce;this[_0x506285(0x7cf)](_0x506285(0xad1),_0xc68192,0x0,!![]),VisuMZ[_0x506285(0x6d0)][_0x506285(0x4c9)]['call'](this,_0xc68192),this[_0x506285(0x7cf)](_0x506285(0x3aa),_0xc68192,this[_0x506285(0x4cc)]||0x0,!![]),this['applyResultSwitches'](_0xc68192);},Game_Action[_0x44efce(0x8f2)][_0x44efce(0x7cf)]=function(_0x4b87b5,_0x18ec84,_0xe955f2,_0x3be4d0){const _0x172bc5=_0x44efce;if(this[_0x172bc5(0xa84)]||this[_0x172bc5(0x499)])return;_0xe955f2=_0xe955f2||0x0;const _0x11794a=_0xe955f2,_0x2c03e9=VisuMZ['BattleCore'][_0x172bc5(0x444)][_0x172bc5(0x840)],_0x483cf8=_0x4b87b5[_0x172bc5(0x437)]('');if(_0x2c03e9[_0x483cf8]){_0xe955f2=_0x2c03e9[_0x483cf8]['call'](this,_0xe955f2,_0x18ec84);if(_0x3be4d0)_0xe955f2=_0x11794a;}let _0x2d7e07=VisuMZ[_0x172bc5(0x6d0)][_0x172bc5(0x3c0)](this[_0x172bc5(0x987)](),_0x4b87b5['format'](''));if(VisuMZ[_0x172bc5(0x6d0)]['JS'][_0x2d7e07]){_0xe955f2=VisuMZ[_0x172bc5(0x6d0)]['JS'][_0x2d7e07][_0x172bc5(0xb59)](this,this[_0x172bc5(0x8f0)](),_0x18ec84,this[_0x172bc5(0x987)](),_0xe955f2);if(_0x3be4d0)_0xe955f2=_0x11794a;}for(const _0x313bdf of this[_0x172bc5(0x8f0)]()[_0x172bc5(0x919)]()){if(!_0x313bdf)continue;_0x2d7e07=VisuMZ['BattleCore'][_0x172bc5(0x3c0)](_0x313bdf,_0x4b87b5[_0x172bc5(0x437)]('AsUser'));if(VisuMZ[_0x172bc5(0x6d0)]['JS'][_0x2d7e07]){_0xe955f2=VisuMZ[_0x172bc5(0x6d0)]['JS'][_0x2d7e07][_0x172bc5(0xb59)](this,this['subject'](),_0x18ec84,_0x313bdf,_0xe955f2);if(_0x3be4d0)_0xe955f2=_0x11794a;}}for(const _0x3a6291 of _0x18ec84[_0x172bc5(0x919)]()){if(!_0x3a6291)continue;_0x2d7e07=VisuMZ[_0x172bc5(0x6d0)][_0x172bc5(0x3c0)](_0x3a6291,_0x4b87b5[_0x172bc5(0x437)](_0x172bc5(0x30b)));if(VisuMZ[_0x172bc5(0x6d0)]['JS'][_0x2d7e07]){if(_0x172bc5(0x91c)==='xoMGf'){_0xe955f2=VisuMZ[_0x172bc5(0x6d0)]['JS'][_0x2d7e07][_0x172bc5(0xb59)](this,this[_0x172bc5(0x8f0)](),_0x18ec84,_0x3a6291,_0xe955f2);if(_0x3be4d0)_0xe955f2=_0x11794a;}else{if(this[_0x172bc5(0xdf)]<=0x0)return;const _0x94b4f6=this['_jumpWholeDuration']-this[_0x172bc5(0xdf)],_0x12c983=this['_jumpWholeDuration']/0x2,_0x55f3c5=this[_0x172bc5(0x729)],_0x28bb88=-_0x55f3c5/_0x3758e7[_0x172bc5(0x666)](_0x12c983,0x2);this[_0x172bc5(0x18a)]=_0x28bb88*_0x51b26d[_0x172bc5(0x666)](_0x94b4f6-_0x12c983,0x2)+_0x55f3c5,this[_0x172bc5(0xdf)]--;if(this['_jumpDuration']<=0x0)return this[_0x172bc5(0x7b2)]();}}}return _0xe955f2;},Game_Action['prototype']['actionBattleCoreJS']=function(_0x458658){const _0x2e76ec=_0x44efce,_0x18a56e=this[_0x2e76ec(0xac0)]||0x0,_0x2ee55d=VisuMZ[_0x2e76ec(0x6d0)][_0x2e76ec(0x444)][_0x2e76ec(0x840)],_0x5d2b53=_0x458658['format']('');if(_0x2ee55d[_0x5d2b53]){if(_0x2e76ec(0x4b9)===_0x2e76ec(0x4b9))_0x2ee55d[_0x5d2b53][_0x2e76ec(0xb59)](this,_0x18a56e);else{const _0x35de85=_0x343304[_0x2e76ec(0x987)]();this[_0x2e76ec(0xb70)](_0x2e76ec(0x5aa),_0x527661,_0x166095,![]),this[_0x2e76ec(0xb70)](_0x2e76ec(0x450)),this[_0x2e76ec(0xb70)](_0x2e76ec(0xb8d)),this[_0x2e76ec(0xb70)](_0x2e76ec(0xa09)),this[_0x2e76ec(0xb70)](_0x2e76ec(0x16b),_0x328813),this[_0x2e76ec(0xb70)](_0x2e76ec(0xa9e));}}let _0x422fd1=VisuMZ['BattleCore'][_0x2e76ec(0x3c0)](this[_0x2e76ec(0x987)](),_0x458658);VisuMZ['BattleCore']['JS'][_0x422fd1]&&VisuMZ[_0x2e76ec(0x6d0)]['JS'][_0x422fd1][_0x2e76ec(0xb59)](this,this[_0x2e76ec(0x8f0)](),this[_0x2e76ec(0x8f0)](),this[_0x2e76ec(0x987)](),_0x18a56e);for(const _0x2dd3f4 of this[_0x2e76ec(0x8f0)]()[_0x2e76ec(0x919)]()){if('LPDAj'==='LPDAj'){if(!_0x2dd3f4)continue;_0x422fd1=VisuMZ[_0x2e76ec(0x6d0)][_0x2e76ec(0x3c0)](_0x2dd3f4,_0x458658),VisuMZ['BattleCore']['JS'][_0x422fd1]&&VisuMZ[_0x2e76ec(0x6d0)]['JS'][_0x422fd1][_0x2e76ec(0xb59)](this,this[_0x2e76ec(0x8f0)](),this[_0x2e76ec(0x8f0)](),_0x2dd3f4,_0x18a56e);}else _0x4f8f72[_0x2e76ec(0x6d0)][_0x2e76ec(0x444)]['AutoBattle'][_0x2e76ec(0x548)]&&(this[_0x2e76ec(0x28d)](),this[_0x2e76ec(0x5ab)]());}},Game_Action[_0x44efce(0x8f2)][_0x44efce(0x75e)]=function(){const _0x234940=_0x44efce;return VisuMZ[_0x234940(0x6d0)][_0x234940(0x444)][_0x234940(0x840)][_0x234940(0x56a)][_0x234940(0xb59)](this);},Game_Action[_0x44efce(0x8f2)]['allowRandomSpeed']=function(){const _0x142dcd=_0x44efce;return VisuMZ[_0x142dcd(0x6d0)][_0x142dcd(0x444)][_0x142dcd(0x840)]['AllowRandomSpeed'];},Game_Action['prototype'][_0x44efce(0x940)]=function(){const _0x18542e=_0x44efce;return this[_0x18542e(0x987)]()[_0x18542e(0x77d)][_0x18542e(0xab6)](/<JS TARGETS>/i);},Game_Action[_0x44efce(0x8f2)][_0x44efce(0x532)]=function(){const _0x2218a2=_0x44efce;if(!this[_0x2218a2(0x9aa)]&&this[_0x2218a2(0x8f0)]()[_0x2218a2(0x389)]())return![];if(this[_0x2218a2(0x940)]())return!![];return typeof this[_0x2218a2(0x987)]()['scope']===_0x2218a2(0xb97);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x78a)]=Game_Action[_0x44efce(0x8f2)][_0x44efce(0x493)],Game_Action[_0x44efce(0x8f2)]['isForOpponent']=function(){const _0x47ed04=_0x44efce;return this[_0x47ed04(0x532)]()&&!this[_0x47ed04(0x940)]()?this[_0x47ed04(0x6e5)]():VisuMZ[_0x47ed04(0x6d0)][_0x47ed04(0x78a)][_0x47ed04(0xb59)](this);},Game_Action['prototype'][_0x44efce(0x6e5)]=function(){const _0x11e859=_0x44efce,_0x460a90=this[_0x11e859(0x987)]()[_0x11e859(0x61c)];return _0x460a90['match'](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x44efce(0x6d0)]['Game_Action_isForFriend']=Game_Action[_0x44efce(0x8f2)][_0x44efce(0x60f)],Game_Action[_0x44efce(0x8f2)][_0x44efce(0x60f)]=function(){const _0x282226=_0x44efce;return this[_0x282226(0x532)]()&&!this[_0x282226(0x940)]()?this[_0x282226(0x2ad)]():VisuMZ[_0x282226(0x6d0)][_0x282226(0x502)][_0x282226(0xb59)](this);},Game_Action[_0x44efce(0x8f2)][_0x44efce(0x2ad)]=function(){const _0x42989b=_0x44efce,_0x3d9414=this['item']()['scope'];return _0x3d9414[_0x42989b(0xab6)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ['BattleCore']['Game_Action_isForRandom']=Game_Action[_0x44efce(0x8f2)][_0x44efce(0x550)],Game_Action[_0x44efce(0x8f2)][_0x44efce(0x550)]=function(){const _0x1eb74e=_0x44efce;return this[_0x1eb74e(0x532)]()&&!this[_0x1eb74e(0x940)]()?this['isForRandomBattleCore']():VisuMZ[_0x1eb74e(0x6d0)][_0x1eb74e(0x661)][_0x1eb74e(0xb59)](this);},Game_Action['prototype']['isForRandomBattleCore']=function(){const _0x32b648=_0x44efce,_0x128a76=this[_0x32b648(0x987)]()['scope'];return _0x128a76[_0x32b648(0xab6)](/(?:RAND|RANDOM)/i);},VisuMZ['BattleCore'][_0x44efce(0x72e)]=Game_Action[_0x44efce(0x8f2)][_0x44efce(0x58d)],Game_Action['prototype']['needsSelection']=function(){const _0x191d94=_0x44efce;return this[_0x191d94(0x532)]()&&!this['isCustomBattleScope']()?this[_0x191d94(0x80d)]():VisuMZ[_0x191d94(0x6d0)][_0x191d94(0x72e)][_0x191d94(0xb59)](this);},Game_Action['prototype'][_0x44efce(0x80d)]=function(){const _0x56f6da=_0x44efce,_0x3fc8ca=this[_0x56f6da(0x987)]()['scope'];if(_0x3fc8ca['match'](/RANDOM/i))return![];if(_0x3fc8ca['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x3fc8ca['match'](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ[_0x56f6da(0x6d0)][_0x56f6da(0x72e)][_0x56f6da(0xb59)](this);},VisuMZ['BattleCore'][_0x44efce(0x289)]=Game_Action[_0x44efce(0x8f2)][_0x44efce(0x939)],Game_Action[_0x44efce(0x8f2)][_0x44efce(0x939)]=function(){const _0x4c4617=_0x44efce;let _0x50bb06=[];if(this[_0x4c4617(0x532)]()){if(_0x4c4617(0x1d7)!==_0x4c4617(0x1d7)){if(!_0x377c39[_0x4c4617(0xbab)]())return;if(!_0x5f5ab3[_0x4c4617(0x22e)])return;_0x16c3e0[_0x4c4617(0x878)](_0x5d4436,_0x3f265f);const _0x2a71a8=_0x59c0c3[_0x4c4617(0x3f8)](),_0x2f9c11=_0x4bac9a['CreateActionSequenceTargets'](_0x5097fe[_0x4c4617(0x285)]),_0x127249=_0x3bfe93['WaitForCamera'];_0x41b131[_0x4c4617(0x26c)](_0x2f9c11,_0x4ed232['Duration'],_0x3139ce[_0x4c4617(0x2f9)]);if(_0x127249)_0x2a71a8[_0x4c4617(0x227)]('battleCamera');}else _0x50bb06=this[_0x4c4617(0xa1b)]();}else _0x50bb06=VisuMZ['BattleCore'][_0x4c4617(0x289)][_0x4c4617(0xb59)](this);return _0x50bb06=this[_0x4c4617(0x777)](_0x50bb06),_0x50bb06;},Game_Action[_0x44efce(0x8f2)]['makeTargetsBattleCore']=function(){const _0x526475=_0x44efce;let _0x1131b6=[];const _0x54af27=String(this[_0x526475(0x987)]()['scope']),_0x3a6c5f=VisuMZ[_0x526475(0x6d0)][_0x526475(0x3c0)](this['item'](),_0x526475(0x285));if(VisuMZ['BattleCore']['JS'][_0x3a6c5f]){if(_0x526475(0x429)===_0x526475(0x429)){_0x1131b6=VisuMZ[_0x526475(0x6d0)][_0x526475(0x289)][_0x526475(0xb59)](this);const _0x1998b5=VisuMZ[_0x526475(0x6d0)]['createKeyJS'](this['item'](),'Targets');return _0x1131b6=VisuMZ['BattleCore']['JS'][_0x1998b5][_0x526475(0xb59)](this,this[_0x526475(0x8f0)](),_0x1131b6),this[_0x526475(0x4d1)](_0x1131b6);}else this[_0x526475(0x25b)]=_0x594532[_0x526475(0x25b)];}if(_0x54af27[_0x526475(0xab6)](/(\d+) RANDOM ANY/i)){if(_0x526475(0x210)!==_0x526475(0xd2)){let _0x7804a6=Number(RegExp['$1']);while(_0x7804a6--){if(_0x526475(0x247)===_0x526475(0xa7c))this[_0x526475(0x65e)](_0x235353),this[_0x526475(0x43d)]();else{const _0x1b0991=Math[_0x526475(0x2c7)](0x2)===0x0?this[_0x526475(0x387)]():this[_0x526475(0x8ce)]();_0x1131b6[_0x526475(0xb70)](_0x1b0991[_0x526475(0x478)]());}}return this[_0x526475(0x4d1)](_0x1131b6);}else{if(_0x384d8b>_0x39ee1a[_0x526475(0x5f2)])_0x12c974=![];if(_0x51723d<_0x1330c0[_0x526475(0x5f2)])_0x5ad9e0=!![];}}if(_0x54af27[_0x526475(0xab6)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x1a62f5=Number(RegExp['$1']);while(_0x1a62f5--){_0x526475(0xa4f)===_0x526475(0xa4f)?_0x1131b6[_0x526475(0xb70)](this[_0x526475(0x387)]()[_0x526475(0x478)]()):this['_speed']=_0x299974[_0x526475(0x876)];}return this['repeatTargets'](_0x1131b6);}if(_0x54af27[_0x526475(0xab6)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x793627=Number(RegExp['$1']);while(_0x793627--){_0x1131b6[_0x526475(0xb70)](this[_0x526475(0x8ce)]()[_0x526475(0x478)]());}return this['repeatTargets'](_0x1131b6);}if(_0x54af27[_0x526475(0xab6)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i)){if('QXdBs'==='tDfJe')_0x2e82d2[_0x526475(0x9df)]([this],_0x2b91cb);else return _0x1131b6[_0x526475(0xb70)](...this[_0x526475(0x8ce)]()[_0x526475(0xb09)]()['filter'](_0x3e0061=>_0x3e0061!==this[_0x526475(0x8f0)]())),this[_0x526475(0x4d1)](_0x1131b6);}return VisuMZ[_0x526475(0x6d0)]['Game_Action_makeTargets'][_0x526475(0xb59)](this);},Game_Action[_0x44efce(0x8f2)][_0x44efce(0x1c4)]=function(_0x8d50cb){const _0x34fb0e=_0x44efce,_0x5c3ec9=[];for(let _0x330a66=0x0;_0x330a66<this[_0x34fb0e(0x7db)]();_0x330a66++){if(_0x34fb0e(0x89c)===_0x34fb0e(0x43a)){const _0x13e692=_0x15fda8[_0x34fb0e(0x1fe)](_0x58f3fb['$1']);this[_0x34fb0e(0x5ae)](_0x13e692);}else _0x5c3ec9['push'](_0x8d50cb['trueRandomTarget']());}return _0x5c3ec9;},Game_Action[_0x44efce(0x8f2)]['applyTargetFilters']=function(_0x40bcb3){const _0x4250d8=_0x44efce;if(!this[_0x4250d8(0x987)]())return _0x40bcb3;const _0x15326c=this[_0x4250d8(0x987)]()[_0x4250d8(0x77d)];if(_0x15326c[_0x4250d8(0xab6)](/(?:BUT|EXCEPT) (?:USER|SELF)/i)){if('gUiyj'!==_0x4250d8(0x82c)){if(_0x6a42ab[_0x4250d8(0x22c)]()[_0x4250d8(0x69e)]>0x0)return!![];if(_0x2e7613[_0x4250d8(0x22c)]()[_0x4250d8(0xa0d)]>0x0)return!![];this[_0x4250d8(0x495)]='';}else _0x40bcb3[_0x4250d8(0xac9)](this[_0x4250d8(0x8f0)]());}return _0x40bcb3;},VisuMZ[_0x44efce(0x6d0)]['Game_Action_itemEffectAddAttackState']=Game_Action['prototype'][_0x44efce(0x20f)],Game_Action['prototype']['itemEffectAddAttackState']=function(_0x16b166,_0x308c59){const _0x220981=_0x44efce;VisuMZ[_0x220981(0x6d0)][_0x220981(0x5f8)][_0x220981(0xb59)](this,_0x16b166,_0x308c59);if(!_0x16b166['isImmortal']())return;for(const _0x4f55ab of this[_0x220981(0x8f0)]()[_0x220981(0x9cc)]()){if('IhyrD'!==_0x220981(0x9e7))_0x192304['bitmap']=_0x354583,_0x1bd313['bitmap']=_0x55f199,_0x59589a[_0x220981(0xd8)](),_0x59570d[_0x220981(0xd8)]();else{if(_0x4f55ab===_0x16b166[_0x220981(0x8a4)]()){if('kqftW'===_0x220981(0x41a)){let _0x3f7658=_0x308c59[_0x220981(0x102)];_0x3f7658*=_0x16b166[_0x220981(0x7fa)](_0x4f55ab),_0x3f7658*=this[_0x220981(0x8f0)]()[_0x220981(0xb8)](_0x4f55ab),_0x3f7658*=this[_0x220981(0xb56)](_0x16b166),Math['random']()<_0x3f7658&&(_0x220981(0xb23)!==_0x220981(0x72b)?(_0x16b166['_deathStateApplied']=!![],this[_0x220981(0x5ef)](_0x16b166)):(_0x45e46b[_0x220981(0x6d0)][_0x220981(0x195)][_0x220981(0xb59)](this),this[_0x220981(0x81e)]&&(this[_0x220981(0x401)](),this[_0x220981(0x639)]())));}else return this[_0x220981(0x685)]()['some'](_0x5766d7=>_0x5766d7['isFloating']());}}}},VisuMZ[_0x44efce(0x6d0)]['Game_Action_itemEffectAddNormalState']=Game_Action['prototype'][_0x44efce(0x3e2)],Game_Action[_0x44efce(0x8f2)][_0x44efce(0x3e2)]=function(_0x546098,_0x1da2e8){const _0x265ab1=_0x44efce;VisuMZ[_0x265ab1(0x6d0)][_0x265ab1(0x904)]['call'](this,_0x546098,_0x1da2e8);if(!_0x546098[_0x265ab1(0x1ab)]())return;if(_0x1da2e8['dataId']!==_0x546098['deathStateId']())return;let _0x34ad1c=_0x1da2e8[_0x265ab1(0x102)];!this['isCertainHit']()&&(_0x34ad1c*=_0x546098[_0x265ab1(0x7fa)](_0x1da2e8[_0x265ab1(0x3e6)]),_0x34ad1c*=this[_0x265ab1(0xb56)](_0x546098)),Math[_0x265ab1(0xbbd)]()<_0x34ad1c&&(_0x546098[_0x265ab1(0x333)]=!![],this[_0x265ab1(0x5ef)](_0x546098));},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x363)]=Game_Action['prototype'][_0x44efce(0xa97)],Game_Action['prototype'][_0x44efce(0xa97)]=function(){const _0x13b33f=_0x44efce;VisuMZ[_0x13b33f(0x6d0)][_0x13b33f(0x363)]['call'](this),this['applyGlobalCommonEventNotetags'](),this[_0x13b33f(0xb4f)]();},Game_Action['prototype'][_0x44efce(0x98c)]=function(){const _0x2c1a24=_0x44efce;if(!SceneManager[_0x2c1a24(0xbab)]())return;const _0x1b2276=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x3aed0d=this[_0x2c1a24(0x987)]()[_0x2c1a24(0x77d)][_0x2c1a24(0xab6)](_0x1b2276);if(_0x3aed0d)for(const _0x2f6dd4 of _0x3aed0d){if(_0x2c1a24(0xa1a)!==_0x2c1a24(0xa1a))return _0x4d36de[_0x2c1a24(0x8f2)][_0x2c1a24(0x978)][_0x2c1a24(0xb59)](this);else{if(!_0x2f6dd4)continue;_0x2f6dd4['match'](_0x1b2276);const _0x5d2441=String(RegExp['$1'])['split'](',')[_0x2c1a24(0xba3)](_0x15c48a=>String(_0x15c48a)[_0x2c1a24(0xaef)]()),_0x30b968=_0x5d2441['map'](_0x3a7bca=>DataManager[_0x2c1a24(0x299)](_0x3a7bca));for(const _0x2c709d of _0x30b968){const _0x302391=$dataCommonEvents[_0x2c709d];_0x302391&&$gameTemp[_0x2c1a24(0x928)](_0x2c709d);}}}},DataManager['getCommonEventIdWithName']=function(_0x5d0f6b){const _0x45b302=_0x44efce;_0x5d0f6b=_0x5d0f6b[_0x45b302(0xb2d)]()[_0x45b302(0xaef)](),this[_0x45b302(0x5bf)]=this[_0x45b302(0x5bf)]||{};if(this[_0x45b302(0x5bf)][_0x5d0f6b])return this[_0x45b302(0x5bf)][_0x5d0f6b];for(const _0x30d419 of $dataCommonEvents){if(_0x45b302(0x891)!==_0x45b302(0xad5)){if(!_0x30d419)continue;let _0x545c75=_0x30d419[_0x45b302(0x5d4)];_0x545c75=_0x545c75[_0x45b302(0x3f6)](/\x1I\[(\d+)\]/gi,''),_0x545c75=_0x545c75[_0x45b302(0x3f6)](/\\I\[(\d+)\]/gi,''),this[_0x45b302(0x5bf)][_0x545c75[_0x45b302(0xb2d)]()[_0x45b302(0xaef)]()]=_0x30d419['id'];}else{this['push'](_0x45b302(0x2e3),_0x3e7e4e);if(!_0x2b5f4a[_0x45b302(0x6d0)][_0x45b302(0x444)][_0x45b302(0x6e4)][_0x45b302(0xa6d)])return;this[_0x45b302(0xb70)](_0x45b302(0x6fa),_0x11565f[_0x45b302(0x802)]['format'](_0x1eff23[_0x45b302(0x5d4)]()));}}return this['_commonEventIDs'][_0x5d0f6b]||0x0;},Game_Action['prototype'][_0x44efce(0xb4f)]=function(){const _0x19190f=_0x44efce;if(!SceneManager[_0x19190f(0xbab)]())return;const _0x42f639=VisuMZ['BattleCore']['Settings'][_0x19190f(0x840)];if(_0x42f639['SwitchCritical']){if(_0x19190f(0x5d3)!==_0x19190f(0x8e6))$gameSwitches['setValue'](_0x42f639[_0x19190f(0x212)],![]);else return this[_0x19190f(0x566)]()?this[_0x19190f(0x29a)]()&&this[_0x19190f(0x29a)]()[_0x19190f(0x987)]()&&this[_0x19190f(0x29a)]()['isMagical']():this[_0x19190f(0x29a)]()&&this['currentAction']()[_0x19190f(0x987)]()&&this['currentAction']()[_0x19190f(0x80b)]();}if(_0x42f639[_0x19190f(0x7c5)]){if(_0x19190f(0xa14)!==_0x19190f(0x8ab))$gameSwitches[_0x19190f(0x646)](_0x42f639[_0x19190f(0x7c5)],![]);else return this['customDamageFormula'](_0x3dcd4d);}_0x42f639[_0x19190f(0x563)]&&$gameVariables['setValue'](_0x42f639[_0x19190f(0x563)],0x0);if(_0x42f639['VariableHeal']){if('QLsqG'!==_0x19190f(0x3e3))$gameVariables[_0x19190f(0x646)](_0x42f639['VariableHeal'],0x0);else{this[_0x19190f(0x2ee)](_0x2a1ec3);for(const _0x59e2a4 of _0x2a0076['targetObjects']){_0x59e2a4[_0x19190f(0x88e)]&&_0x59e2a4[_0x19190f(0x88e)]();}_0x22f7e0[_0x19190f(0xa68)]();}}},Game_Action[_0x44efce(0x8f2)]['applyResultSwitches']=function(_0x364821){const _0x10684=_0x44efce;if(!SceneManager['isSceneBattle']())return;if(!_0x364821)return;const _0x9d31fe=_0x364821[_0x10684(0x12d)](),_0x17d67d=VisuMZ[_0x10684(0x6d0)][_0x10684(0x444)]['Mechanics'];if(_0x17d67d['SwitchCritical']&&_0x9d31fe[_0x10684(0x311)]){if(_0x10684(0x62d)!==_0x10684(0x3d6))$gameSwitches[_0x10684(0x646)](_0x17d67d[_0x10684(0x212)],!![]);else{_0xb45b0e=_0x4f9be7||0x1,_0x1c241f--;const _0x4a3176=this[_0x10684(0x820)]();return _0x4a3176[_0x573325]?_0x4a3176[_0x429e32][_0x10684(0xa49)]:0x0;}}_0x17d67d[_0x10684(0x7c5)]&&(_0x9d31fe[_0x10684(0x5cf)]||_0x9d31fe[_0x10684(0x8b6)])&&(_0x10684(0x812)===_0x10684(0x812)?$gameSwitches[_0x10684(0x646)](_0x17d67d[_0x10684(0x7c5)],!![]):_0x240c8a[_0x10684(0x6d0)][_0x10684(0x9b8)][_0x10684(0xb59)](this,_0xfa4b0e));if(_0x17d67d[_0x10684(0x563)]){let _0x5517bb=$gameVariables[_0x10684(0x18d)](_0x17d67d['VariableDmg']);if(_0x9d31fe['hpDamage']>0x0){if(_0x10684(0x2a1)!=='ucIRl'){if(!_0x4e2627[_0x10684(0xbab)]())return;if(!_0xca0314['VisuMZ_1_ElementStatusCore'])return;const _0x3cd8f7=_0x229f80['_action'];if(!_0x3cd8f7)return;_0x3cd8f7[_0x10684(0xb51)]();}else _0x5517bb+=Math[_0x10684(0x33b)](_0x9d31fe[_0x10684(0x3c8)]);}$gameVariables[_0x10684(0x646)](_0x17d67d[_0x10684(0x563)],_0x5517bb);}if(_0x17d67d['VariableHeal']){let _0x51c8d3=$gameVariables['value'](_0x17d67d[_0x10684(0x9cb)]);if(_0x9d31fe[_0x10684(0x3c8)]<0x0){if(_0x10684(0x9c4)==='RznzG')_0x51c8d3+=Math[_0x10684(0x33b)](_0x9d31fe[_0x10684(0x3c8)]);else return this[_0x10684(0x2b6)]=this[_0x10684(0x2b6)]||{},this[_0x10684(0x2b6)][_0x187d31]!==_0x939d31;}$gameVariables[_0x10684(0x646)](_0x17d67d[_0x10684(0x9cb)],_0x51c8d3);}},VisuMZ['BattleCore']['Game_BattlerBase_initMembers']=Game_BattlerBase[_0x44efce(0x8f2)][_0x44efce(0x2be)],Game_BattlerBase['prototype'][_0x44efce(0x2be)]=function(){const _0x50e00a=_0x44efce;VisuMZ[_0x50e00a(0x6d0)][_0x50e00a(0x518)]['call'](this),this[_0x50e00a(0x784)]();},Game_BattlerBase[_0x44efce(0x8f2)][_0x44efce(0x784)]=function(){const _0x349757=_0x44efce;this[_0x349757(0x571)]=![];},VisuMZ['BattleCore']['Game_BattlerBase_refresh']=Game_BattlerBase[_0x44efce(0x8f2)][_0x44efce(0x290)],Game_BattlerBase['prototype'][_0x44efce(0x290)]=function(){const _0x37409f=_0x44efce;this[_0x37409f(0x2b6)]={},VisuMZ['BattleCore'][_0x37409f(0x956)][_0x37409f(0xb59)](this);},Game_BattlerBase[_0x44efce(0x8f2)][_0x44efce(0x84b)]=function(_0x39999a){const _0x700e8b=_0x44efce;return this[_0x700e8b(0x2b6)]=this[_0x700e8b(0x2b6)]||{},this[_0x700e8b(0x2b6)][_0x39999a]!==undefined;},Game_BattlerBase[_0x44efce(0x8f2)][_0x44efce(0x858)]=function(){const _0x2b55af=_0x44efce;if(this[_0x2b55af(0x2b6)][_0x2b55af(0x858)]!==undefined)return this['_cache']['hardDamageCap'];const _0x28d6b0=/<DAMAGE CAP:[ ](\d+)>/i,_0x52e2e4=this[_0x2b55af(0x919)]()['map'](_0x184a18=>_0x184a18&&_0x184a18[_0x2b55af(0x77d)]['match'](_0x28d6b0)?Number(RegExp['$1']):0x0);let _0x63aff2=_0x52e2e4[_0x2b55af(0x496)]>0x0?Math[_0x2b55af(0x65c)](..._0x52e2e4):0x0;if(_0x63aff2<=0x0)_0x63aff2=VisuMZ['BattleCore'][_0x2b55af(0x444)][_0x2b55af(0x86a)][_0x2b55af(0x616)];return this[_0x2b55af(0x2b6)][_0x2b55af(0x858)]=_0x63aff2,this[_0x2b55af(0x2b6)][_0x2b55af(0x858)];},Game_BattlerBase[_0x44efce(0x8f2)][_0x44efce(0x906)]=function(){const _0x2d5933=_0x44efce;if(this['_cache'][_0x2d5933(0xb4a)]!==undefined)return this[_0x2d5933(0x2b6)][_0x2d5933(0xb4a)];let _0x3c22c6=VisuMZ[_0x2d5933(0x6d0)][_0x2d5933(0x444)][_0x2d5933(0x86a)][_0x2d5933(0x71f)];const _0x291377=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x517da8=this[_0x2d5933(0x919)]()[_0x2d5933(0xba3)](_0x520049=>_0x520049&&_0x520049['note'][_0x2d5933(0xab6)](_0x291377)?Number(RegExp['$1'])/0x64:0x0);return _0x3c22c6=_0x517da8['reduce']((_0x42097a,_0x16cc42)=>_0x42097a+_0x16cc42,_0x3c22c6),this[_0x2d5933(0x2b6)][_0x2d5933(0xb4a)]=_0x3c22c6,this[_0x2d5933(0x2b6)]['softDamageCap'][_0x2d5933(0x45f)](0.01,0x1);},VisuMZ[_0x44efce(0x6d0)]['Game_BattlerBase_die']=Game_BattlerBase[_0x44efce(0x8f2)]['die'],Game_BattlerBase[_0x44efce(0x8f2)]['die']=function(){const _0x2013a6=_0x44efce;VisuMZ[_0x2013a6(0x6d0)][_0x2013a6(0x90a)][_0x2013a6(0xb59)](this),SceneManager['isSceneBattle']()&&this[_0x2013a6(0x7c8)](_0x2013a6(0x622));},Game_BattlerBase[_0x44efce(0x8f2)][_0x44efce(0x6dd)]=function(){const _0x4ffc8a=_0x44efce;if(!SceneManager[_0x4ffc8a(0xbab)]())return null;if(!SceneManager['_scene']['_spriteset'])return null;return SceneManager[_0x4ffc8a(0x45b)][_0x4ffc8a(0x948)][_0x4ffc8a(0x4bc)](this);},Game_BattlerBase[_0x44efce(0x8f2)]['svBattlerAnchorX']=function(){const _0x4b0098=_0x44efce;return VisuMZ[_0x4b0098(0x6d0)]['Settings']['Actor'][_0x4b0098(0x8b0)];},Game_BattlerBase[_0x44efce(0x8f2)]['svBattlerAnchorY']=function(){const _0x24210e=_0x44efce;return VisuMZ[_0x24210e(0x6d0)][_0x24210e(0x444)][_0x24210e(0x44f)]['AnchorY'];},Game_BattlerBase[_0x44efce(0x8f2)]['svBattlerShadowVisible']=function(){const _0xd3d31a=_0x44efce;return this[_0xd3d31a(0x8de)]&&this[_0xd3d31a(0x8de)]()?VisuMZ[_0xd3d31a(0x6d0)][_0xd3d31a(0x444)][_0xd3d31a(0x44f)]['Shadow']:VisuMZ[_0xd3d31a(0x6d0)][_0xd3d31a(0x444)][_0xd3d31a(0x71b)]['Shadow'];},Game_BattlerBase[_0x44efce(0x8f2)][_0x44efce(0x5ed)]=function(){return!![];},Game_BattlerBase['prototype'][_0x44efce(0x3a3)]=function(){return 0x0;},Game_BattlerBase[_0x44efce(0x8f2)][_0x44efce(0x27d)]=function(){return 0x0;},Game_BattlerBase['prototype'][_0x44efce(0x594)]=function(_0x54a421){const _0x59648d=_0x44efce;if(!_0x54a421)return 0x0;let _0x221220=0x0;const _0x50ab76=_0x54a421[_0x59648d(0x77d)];_0x50ab76[_0x59648d(0xab6)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x221220+=Number(RegExp['$1']));if(_0x50ab76['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)){if(_0x59648d(0x3a5)!==_0x59648d(0x3a5)){if(_0x44df08[_0x59648d(0x421)]()&&this[_0x59648d(0x263)]==='casting')return this[_0x59648d(0x566)]()?this[_0x59648d(0x29a)]()&&this[_0x59648d(0x29a)]()['item']()&&!this[_0x59648d(0x29a)]()[_0x59648d(0x84e)]():this['currentAction']()&&this[_0x59648d(0x29a)]()[_0x59648d(0x987)]()&&!this['currentAction']()[_0x59648d(0x80b)]();return![];}else _0x221220+=Number(RegExp['$1']);}return _0x221220;},Game_BattlerBase[_0x44efce(0x8f2)]['createBattleUIOffsetY']=function(_0x4654fb){const _0x59e2db=_0x44efce;if(!_0x4654fb)return 0x0;let _0x29d0f0=0x0;const _0x3d5c58=_0x4654fb[_0x59e2db(0x77d)];return _0x3d5c58[_0x59e2db(0xab6)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x29d0f0+=Number(RegExp['$1'])),_0x3d5c58[_0x59e2db(0xab6)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x29d0f0+=Number(RegExp['$2'])),_0x29d0f0;},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x911)]=Game_BattlerBase[_0x44efce(0x8f2)]['isStateResist'],Game_BattlerBase['prototype']['isStateResist']=function(_0x26eb30){const _0x4b806c=_0x44efce;if(_0x26eb30===this['deathStateId']()&&this[_0x4b806c(0x1ab)]())return!![];return VisuMZ['BattleCore'][_0x4b806c(0x911)][_0x4b806c(0xb59)](this,_0x26eb30);},Game_BattlerBase[_0x44efce(0x8f2)][_0x44efce(0x1ab)]=function(){return this['_immortal'];},Game_BattlerBase[_0x44efce(0x8f2)][_0x44efce(0x6ec)]=function(_0x25f6fb){const _0x23bf54=_0x44efce;_0x25f6fb?this[_0x23bf54(0x631)]():'MSDiY'!=='jWlZh'?this[_0x23bf54(0x4bb)]():(this[_0x23bf54(0x623)](_0x23bf54(0xa4)),_0x13af53['BattleCore'][_0x23bf54(0x187)]['call'](this),this['processPostBattleCommonEvents']('Defeat'));},Game_BattlerBase[_0x44efce(0x8f2)]['addImmortal']=function(){if(this['isDead']())return;this['_immortal']=!![],this['_deathStateApplied']=![];},Game_BattlerBase['prototype'][_0x44efce(0x4bb)]=function(){const _0x51e06d=_0x44efce,_0x1dd2f9=this[_0x51e06d(0x8e9)]();this['_immortal']=![],_0x1dd2f9&&this['_deathStateApplied']&&this[_0x51e06d(0x94b)](),this[_0x51e06d(0x333)]=![],this[_0x51e06d(0x290)](),this[_0x51e06d(0x578)]()&&_0x1dd2f9&&('bjmOC'!==_0x51e06d(0x9f1)?(this['performCollapse'](),this[_0x51e06d(0x42b)]()):(_0x3c6819+=_0x34eb75[_0x51e06d(0x71b)]['OffsetX']||0x0,_0x5771d3+=_0x21b66c[_0x51e06d(0x71b)][_0x51e06d(0x8cc)]||0x0));},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x560)]=Game_Action[_0x44efce(0x8f2)]['numRepeats'],Game_Action[_0x44efce(0x8f2)][_0x44efce(0x94c)]=function(){const _0x27350d=_0x44efce;if(this[_0x27350d(0x987)]())return VisuMZ[_0x27350d(0x6d0)]['Game_Action_numRepeats'][_0x27350d(0xb59)](this);else{if('RpbPr'!==_0x27350d(0x4b7))return 0x0;else _0x4549b0['BattleCore'][_0x27350d(0x363)][_0x27350d(0xb59)](this),this[_0x27350d(0x98c)](),this[_0x27350d(0xb4f)]();}},VisuMZ['BattleCore'][_0x44efce(0x298)]=Game_Action[_0x44efce(0x8f2)][_0x44efce(0x914)],Game_Action[_0x44efce(0x8f2)][_0x44efce(0x914)]=function(){const _0x3b5020=_0x44efce;this[_0x3b5020(0x8f0)]()&&this[_0x3b5020(0x8f0)]()[_0x3b5020(0x816)]()?_0x3b5020(0x34c)===_0x3b5020(0x34c)?VisuMZ[_0x3b5020(0x6d0)][_0x3b5020(0x298)][_0x3b5020(0xb59)](this):(_0x2bdd77[_0x3b5020(0x918)]()['makeAutoBattleActions'](),_0x25807d[_0x3b5020(0x8e5)](),_0x21cffb[_0x3b5020(0x91d)](),this['changeInputWindow']()):this['clear']();},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x13f)]=Game_BattlerBase['prototype'][_0x44efce(0x816)],Game_BattlerBase[_0x44efce(0x8f2)][_0x44efce(0x816)]=function(){const _0x408a1e=_0x44efce;if(!this[_0x408a1e(0x580)]())return![];return VisuMZ['BattleCore'][_0x408a1e(0x13f)][_0x408a1e(0xb59)](this);},Game_BattlerBase['prototype']['canAttackBattleCore']=function(){const _0x45986b=_0x44efce;for(const _0x2727a6 of this[_0x45986b(0x919)]()){if(!_0x2727a6)continue;if(_0x2727a6[_0x45986b(0x77d)]['match'](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x44efce(0x6d0)]['Game_Action_setGuard']=Game_Action[_0x44efce(0x8f2)][_0x44efce(0x785)],Game_Action[_0x44efce(0x8f2)][_0x44efce(0x785)]=function(){const _0xac0a68=_0x44efce;this['subject']()[_0xac0a68(0xa8b)]()&&(_0xac0a68(0x4c0)===_0xac0a68(0x4c0)?VisuMZ[_0xac0a68(0x6d0)][_0xac0a68(0x104)][_0xac0a68(0xb59)](this):_0x28e92c[_0xac0a68(0xb70)](new _0x267d60(_0x316d34)));},VisuMZ[_0x44efce(0x6d0)]['Game_BattlerBase_canGuard']=Game_BattlerBase[_0x44efce(0x8f2)][_0x44efce(0xa8b)],Game_BattlerBase[_0x44efce(0x8f2)]['canGuard']=function(){const _0x2aa0ea=_0x44efce;if(!this[_0x2aa0ea(0x6fe)]())return![];return VisuMZ[_0x2aa0ea(0x6d0)][_0x2aa0ea(0x690)][_0x2aa0ea(0xb59)](this);},Game_BattlerBase[_0x44efce(0x8f2)][_0x44efce(0x6fe)]=function(){const _0x45e07f=_0x44efce;for(const _0x42b543 of this[_0x45e07f(0x919)]()){if('aDPlF'!==_0x45e07f(0x200)){if(!_0x42b543)continue;if(_0x42b543[_0x45e07f(0x77d)][_0x45e07f(0xab6)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}else{if(this[_0x45e07f(0x9b2)]<=0x0)return;if(!this[_0x45e07f(0x2d3)])return;const _0x38ba83=this[_0x45e07f(0x9b2)],_0x4a3a0a=this[_0x45e07f(0x1f8)],_0x20874f=this['_growEasing'];_0x5c3cb0[_0x45e07f(0x1bc)]?(this['_growX']=this[_0x45e07f(0x7d3)](this[_0x45e07f(0x328)],this[_0x45e07f(0x17b)],_0x38ba83,_0x4a3a0a,_0x20874f),this[_0x45e07f(0x5bb)]=this[_0x45e07f(0x7d3)](this[_0x45e07f(0x5bb)],this[_0x45e07f(0x295)],_0x38ba83,_0x4a3a0a,_0x20874f)):(this[_0x45e07f(0x328)]=(this[_0x45e07f(0x328)]*(_0x38ba83-0x1)+this[_0x45e07f(0x17b)])/_0x38ba83,this[_0x45e07f(0x5bb)]=(this[_0x45e07f(0x5bb)]*(_0x38ba83-0x1)+this['_targetGrowY'])/_0x38ba83);this[_0x45e07f(0x9b2)]--;if(this[_0x45e07f(0x9b2)]<=0x0)this[_0x45e07f(0x655)]();}}return!![];},Game_BattlerBase[_0x44efce(0x8f2)][_0x44efce(0x26b)]=function(){const _0x1e0bbb=_0x44efce;for(const _0x379018 of this[_0x1e0bbb(0x919)]()){if(_0x1e0bbb(0x150)==='Pmmsn'){if(!_0x379018)continue;if(_0x379018[_0x1e0bbb(0x77d)][_0x1e0bbb(0xab6)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}else return _0xc63f6a(_0x43896b['$1'])||0x0;}return!![];},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x884)]=function(){const _0x30cbca=_0x44efce;return VisuMZ['BattleCore'][_0x30cbca(0x444)][_0x30cbca(0x840)][_0x30cbca(0xab8)];},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x3d5)]=Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x5ca)],Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x5ca)]=function(){const _0x176f73=_0x44efce;if(SceneManager[_0x176f73(0xbab)]()){if(_0x176f73(0x6a4)===_0x176f73(0x541))_0x52a852[_0x176f73(0x44f)][_0x176f73(0xa45)]=!![];else{if(BattleManager[_0x176f73(0x421)]()){if(_0x176f73(0xaf4)==='Abjij'){if(this[_0x176f73(0x471)]()<=0x0)return;}else{if(!_0x42f224[_0x176f73(0x18d)](_0x2bfa09))return!![];}}else{if($gameTroop[_0x176f73(0x471)]()<=0x0)return;}}}if(SceneManager[_0x176f73(0xbab)]()&&BattleManager['isTpb']()&&this['_lastRegenFrameCount']===Graphics['frameCount'])return;this[_0x176f73(0x551)]=Graphics[_0x176f73(0x2f0)],SceneManager[_0x176f73(0xbab)]()&&this[_0x176f73(0x623)](_0x176f73(0x65f)),VisuMZ[_0x176f73(0x6d0)]['Game_Battler_regenerateAll'][_0x176f73(0xb59)](this),SceneManager[_0x176f73(0xbab)]()&&(this[_0x176f73(0x5c0)](),this[_0x176f73(0x623)]('PostRegenerateJS'));},Game_Battler['prototype'][_0x44efce(0x5c0)]=function(){const _0x2e9d2b=_0x44efce;if(SceneManager['isSceneBattle']()){if('OsCLU'!==_0x2e9d2b(0x9e6))for(const _0x30a5d9 of this[_0x2e9d2b(0x919)]()){if('XLSBb'===_0x2e9d2b(0x2d1))_0x2c307e[_0x2e9d2b(0x118)]([_0xed79bc]);else{if(!_0x30a5d9)continue;this[_0x2e9d2b(0x9ca)](_0x30a5d9);}}else _0x3bec2a(_0x59dc4b[_0x2e9d2b(0x437)](_0x2e9d2b(0xb21))),_0xc1bcf6['exit']();}},Game_Battler['prototype']['onRegeneratePlayStateAnimation']=function(_0x4d44ce){const _0x44cf59=_0x44efce;if(!Imported[_0x44cf59(0x1bc)])return;if(!SceneManager['isSceneBattle']())return;if(this[_0x44cf59(0x578)]())return;if(this[_0x44cf59(0xa2a)]())return;if(_0x4d44ce[_0x44cf59(0x77d)][_0x44cf59(0xab6)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){if('MqplR'===_0x44cf59(0x42f)){const _0x298c96=Number(RegExp['$1']);$gameTemp[_0x44cf59(0x52e)]([this],_0x298c96,![],![]);}else return!![];}},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x8b1)]=Game_Battler['prototype'][_0x44efce(0x480)],Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x480)]=function(){const _0xb33b1a=_0x44efce;this[_0xb33b1a(0x623)](_0xb33b1a(0xafb)),VisuMZ['BattleCore'][_0xb33b1a(0x8b1)][_0xb33b1a(0xb59)](this),this[_0xb33b1a(0x623)](_0xb33b1a(0xb55));},VisuMZ['BattleCore']['Game_Battler_onTurnEnd']=Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x9a2)],Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x9a2)]=function(){const _0x598334=_0x44efce;this['processBattleCoreJS'](_0x598334(0x7cc)),VisuMZ[_0x598334(0x6d0)]['Game_Battler_onTurnEnd'][_0x598334(0xb59)](this),this[_0x598334(0x623)]('PostEndTurnJS');},Game_Battler[_0x44efce(0x8f2)]['processBattleCoreJS']=function(_0x40c2b0){const _0x3311b0=_0x44efce;if(this[_0x3311b0(0xa84)]||this[_0x3311b0(0x499)])return;const _0x1c4319=VisuMZ[_0x3311b0(0x6d0)][_0x3311b0(0x444)]['Mechanics'];if(_0x1c4319[_0x40c2b0])_0x1c4319[_0x40c2b0][_0x3311b0(0xb59)](this);for(const _0x2ae0a3 of this[_0x3311b0(0x919)]()){if(_0x3311b0(0xb66)!=='HHidj'){const _0x368908=this['item']()[_0x3311b0(0x61c)];return _0x368908[_0x3311b0(0xab6)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);}else{if(!_0x2ae0a3)continue;key=VisuMZ[_0x3311b0(0x6d0)][_0x3311b0(0x3c0)](_0x2ae0a3,_0x40c2b0);if(VisuMZ[_0x3311b0(0x6d0)]['JS'][key]){if('OLaOA'===_0x3311b0(0x147))VisuMZ[_0x3311b0(0x6d0)]['JS'][key][_0x3311b0(0xb59)](this,this,this,_0x2ae0a3,0x0);else{this[_0x3311b0(0x30c)]=this[_0x3311b0(0xb36)]()[_0x3311b0(0x5d4)]();const _0x15b3e0=this[_0x3311b0(0x409)](this[_0x3311b0(0x30c)])[_0x3311b0(0x542)],_0x2947f8=_0x27e005[_0x3311b0(0x18c)]((this[_0x3311b0(0x5f4)]-_0x15b3e0)/0x2);this[_0x3311b0(0x4c4)](this[_0x3311b0(0x30c)],_0x2947f8,0x0,_0x15b3e0+0x8);}}}}},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x566)]=function(){const _0x538ae6=_0x44efce;return VisuMZ[_0x538ae6(0x6d0)][_0x538ae6(0x444)][_0x538ae6(0x44f)][_0x538ae6(0xae8)]||![];},Game_Battler[_0x44efce(0x8f2)]['isChanting']=function(){const _0x2ddc20=_0x44efce;if(this['isWaiting']()){if(this[_0x2ddc20(0x566)]()){if(this[_0x2ddc20(0x3ad)][_0x2ddc20(0x42d)](_0x4767a8=>_0x4767a8[_0x2ddc20(0x987)]()&&_0x4767a8['isMagical']()))return!![];}else{if(this[_0x2ddc20(0x3ad)]['some'](_0x505ad2=>_0x505ad2[_0x2ddc20(0x987)]()&&_0x505ad2[_0x2ddc20(0x80b)]()))return _0x2ddc20(0x9c8)!==_0x2ddc20(0x383)?!![]:_0x5d07f9[_0x2ddc20(0xa8)]-_0x73a2fa[_0x2ddc20(0xa8)];}}if(BattleManager['isTpb']()&&this['_tpbState']===_0x2ddc20(0x5cc))return this[_0x2ddc20(0x566)]()?this['currentAction']()&&this['currentAction']()[_0x2ddc20(0x987)]()&&this[_0x2ddc20(0x29a)]()[_0x2ddc20(0x84e)]():this[_0x2ddc20(0x29a)]()&&this[_0x2ddc20(0x29a)]()[_0x2ddc20(0x987)]()&&this[_0x2ddc20(0x29a)]()[_0x2ddc20(0x80b)]();return![];},Game_Battler['prototype']['isCharging']=function(){const _0x1ee42b=_0x44efce;if(BattleManager[_0x1ee42b(0x421)]()&&this['_tpbState']===_0x1ee42b(0x5cc))return this[_0x1ee42b(0x566)]()?this['currentAction']()&&this['currentAction']()['item']()&&!this['currentAction']()['isMagical']():this[_0x1ee42b(0x29a)]()&&this['currentAction']()[_0x1ee42b(0x987)]()&&!this[_0x1ee42b(0x29a)]()[_0x1ee42b(0x80b)]();return![];},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x397)]=Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x280)],Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x280)]=function(){const _0x5459fd=_0x44efce;VisuMZ[_0x5459fd(0x6d0)][_0x5459fd(0x397)][_0x5459fd(0xb59)](this),this[_0x5459fd(0x344)]=[];},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x3ff)]=function(){const _0x3ba70f=_0x44efce;if(!this[_0x3ba70f(0x344)])this[_0x3ba70f(0x280)]();return this[_0x3ba70f(0x344)][_0x3ba70f(0x496)]>0x0;},Game_Battler['prototype']['startDamagePopup']=function(){const _0x262116=_0x44efce;if(!SceneManager[_0x262116(0xbab)]())return;if(!this[_0x262116(0x344)])this[_0x262116(0x280)]();this['createSeparateDamagePopups']();const _0x1aa8d7=this['battler']();if(_0x1aa8d7)_0x1aa8d7[_0x262116(0xb18)]();},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x176)]=function(){const _0x18ead0=_0x44efce,_0xd8c3dc=this[_0x18ead0(0x12d)]();if(_0xd8c3dc[_0x18ead0(0x5cf)]||_0xd8c3dc[_0x18ead0(0x8b6)]){const _0x1c4a68=JsonEx['makeDeepCopy'](_0xd8c3dc);_0x1c4a68[_0x18ead0(0x243)]=![],_0x1c4a68[_0x18ead0(0x329)]=0x0,this[_0x18ead0(0x344)]['push'](_0x1c4a68);}if(_0xd8c3dc[_0x18ead0(0x243)]){if(_0x18ead0(0xe8)===_0x18ead0(0x794)){for(const _0x2ad02e of _0x1e15a4){_0x2ad02e['match'](_0x33af86);const _0x12905b=_0x33f3c1(_0x4c7a55['$1'])[_0x18ead0(0x603)](',')[_0x18ead0(0xba3)](_0x493028=>_0xe862f5(_0x493028)[_0x18ead0(0xb2d)]()[_0x18ead0(0xaef)]());_0x582459=_0x4a30d7['concat'](_0x12905b);}!_0x218047['note'][_0x18ead0(0xab6)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x3dd12d[_0x18ead0(0x77d)]+=_0x18ead0(0xa2e));;}else{const _0x5b765a=JsonEx[_0x18ead0(0x414)](_0xd8c3dc);_0x5b765a[_0x18ead0(0x5cf)]=![],_0x5b765a[_0x18ead0(0x8b6)]=![],_0x5b765a[_0x18ead0(0x329)]=0x0,this[_0x18ead0(0x344)][_0x18ead0(0xb70)](_0x5b765a);}}if(_0xd8c3dc[_0x18ead0(0x329)]!==0x0){if(_0x18ead0(0x1de)!==_0x18ead0(0x1de)){const _0x4a2d14=_0x19e9de[_0x18ead0(0x6d0)][_0x18ead0(0x444)][_0x18ead0(0x71b)];this[_0x18ead0(0x2f3)]=_0x4a2d14['AttackAnimation'],this['_svBattlerData']={};}else{const _0x575e48=JsonEx[_0x18ead0(0x414)](_0xd8c3dc);_0x575e48[_0x18ead0(0x5cf)]=![],_0x575e48[_0x18ead0(0x8b6)]=![],_0x575e48[_0x18ead0(0x243)]=![],this[_0x18ead0(0x344)][_0x18ead0(0xb70)](_0x575e48);}}},Game_Battler['prototype'][_0x44efce(0x2f4)]=function(){const _0x1fb57e=_0x44efce;if(!this[_0x1fb57e(0x344)])this[_0x1fb57e(0x280)]();return VisuMZ[_0x1fb57e(0x6d0)][_0x1fb57e(0x444)][_0x1fb57e(0x86a)]['NewPopupBottom']?this[_0x1fb57e(0x344)]['shift']():'bqPSv'==='bqPSv'?this[_0x1fb57e(0x344)][_0x1fb57e(0x61f)]():_0x4858d1[_0x1fb57e(0x6d0)]['Settings']['Mechanics'][_0x1fb57e(0xab8)];},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0xabc)]=function(_0x181cf9,_0x2e54bc){const _0x26dc21=_0x44efce;if(!SceneManager[_0x26dc21(0xbab)]())return;if(!this[_0x26dc21(0x6dd)]())return;if(_0x181cf9[_0x26dc21(0x496)]<=0x0)return;_0x2e54bc=_0x2e54bc||{},_0x2e54bc[_0x26dc21(0xa5d)]=_0x2e54bc['textColor']||_0x26dc21(0x503),_0x2e54bc[_0x26dc21(0x3f0)]=_0x2e54bc[_0x26dc21(0x3f0)]||[0x0,0x0,0x0,0x0],_0x2e54bc[_0x26dc21(0x734)]=_0x2e54bc[_0x26dc21(0x734)]||0x0,this[_0x26dc21(0x6dd)]()[_0x26dc21(0xabc)](_0x181cf9,_0x2e54bc);},Game_Battler['prototype'][_0x44efce(0x365)]=function(_0x3c3697,_0x182066,_0x442758){const _0x50c714=_0x44efce;if(!SceneManager['isSceneBattle']())return;if(!this[_0x50c714(0x6dd)]())return;if(_0x182066[_0x50c714(0x496)]<=0x0)return;_0x442758=_0x442758||{},_0x442758['textColor']=_0x442758['textColor']||_0x50c714(0x503),_0x442758[_0x50c714(0x3f0)]=_0x442758[_0x50c714(0x3f0)]||[0x0,0x0,0x0,0x0],_0x442758[_0x50c714(0x734)]=_0x442758[_0x50c714(0x734)]||0x0,this[_0x50c714(0x6dd)]()[_0x50c714(0x365)](_0x3c3697,_0x182066,_0x442758);},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0xa61)]=function(){const _0x1c3c11=_0x44efce;if(this[_0x1c3c11(0xa2a)]())return![];if(this[_0x1c3c11(0x8e9)]()&&this[_0x1c3c11(0x59c)]())return!![];if(this[_0x1c3c11(0x851)]()&&this[_0x1c3c11(0xbb3)]()){if(this['isDead']()&&this['allowCollapse']())return![];}else{if(this[_0x1c3c11(0x578)]())return![];}return!![];},VisuMZ['BattleCore'][_0x44efce(0x3f5)]=Game_Battler[_0x44efce(0x8f2)][_0x44efce(0xbba)],Game_Battler['prototype']['clearMotion']=function(){const _0x54efa4=_0x44efce;VisuMZ[_0x54efa4(0x6d0)][_0x54efa4(0x3f5)]['call'](this),this[_0x54efa4(0x98b)]();},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x2a5)]=function(){return!![];},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x17e)]=function(){return![];},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x723)]=Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x190)],Game_Battler['prototype']['onBattleStart']=function(_0xd3a283){const _0x5e3d1b=_0x44efce;VisuMZ['BattleCore'][_0x5e3d1b(0x723)][_0x5e3d1b(0xb59)](this,_0xd3a283),this[_0x5e3d1b(0xdd)](_0xd3a283);},Game_Battler['prototype'][_0x44efce(0xdd)]=function(_0x2aa50b){const _0x41c92e=_0x44efce;this['setBattlerFlip'](![]),this['_forcedHomeX']=undefined,this[_0x41c92e(0x250)]=undefined;},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x16f)]=Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x5f6)],Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x5f6)]=function(){const _0x4b1076=_0x44efce;VisuMZ[_0x4b1076(0x6d0)][_0x4b1076(0x16f)][_0x4b1076(0xb59)](this),this[_0x4b1076(0x172)]();},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x172)]=function(){const _0x1a48db=_0x44efce;this[_0x1a48db(0xbb6)]=undefined,this['_forcedHomeY']=undefined;},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x132)]=Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x10c)],Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x10c)]=function(_0x38595b){const _0x1cae9d=_0x44efce;VisuMZ[_0x1cae9d(0x6d0)][_0x1cae9d(0x132)]['call'](this,_0x38595b);if(!_0x38595b[_0x1cae9d(0x869)]()){const _0x28e132=this[_0x1cae9d(0x6dd)]();_0x28e132&&_0x28e132['stepForward']();}this[_0x1cae9d(0x21c)](![]);},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x12c)]=function(){const _0x5e95a7=_0x44efce,_0x1c85bf=this[_0x5e95a7(0x78e)];this[_0x5e95a7(0x78e)]=![];if(BattleManager[_0x5e95a7(0x27f)]()&&this['isInputting']()){const _0x16c603=this['battler']();if(_0x16c603&&_0x1c85bf)_0x16c603[_0x5e95a7(0xf1)]();return;}const _0x1411b2=this['battler']();if(_0x1411b2)_0x1411b2[_0x5e95a7(0x23f)]();this[_0x5e95a7(0x21c)](![]),this['requestMotionRefresh']();},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x487)]=function(_0x1ee263){const _0x3ed386=_0x44efce;if(_0x1ee263['isAttack']())this['performAttack']();else{if(_0x1ee263['isGuard']()){if(_0x3ed386(0x6c5)!==_0x3ed386(0x9d5))this[_0x3ed386(0x7c8)](_0x3ed386(0x346));else return _0x5b1a84[_0x3ed386(0xc9)](_0x5c252e=>_0x5c252e[_0x3ed386(0x8e9)]()&&_0x5c252e!==_0x3fcfbf);}else{if(_0x1ee263[_0x3ed386(0x84e)]()){if(_0x3ed386(0x8eb)!==_0x3ed386(0x8eb)){_0x57ce22=_0x14f6bb['BattleCore']['JS'][_0x4c0f09]['call'](this,this[_0x3ed386(0x8f0)](),_0x3b6081,_0x548581,_0x3a9829);if(_0x41179a)_0xb5fb9a=_0x552f51;}else this[_0x3ed386(0x7c8)]('spell');}else{if(_0x1ee263[_0x3ed386(0x468)]()){if([0x1,0x2,0x5,0x6][_0x3ed386(0x89e)](_0x1ee263[_0x3ed386(0x987)]()['damage'][_0x3ed386(0xa15)])){if(_0x3ed386(0x367)==='BZDbx'){const _0x3ab7fd=_0x7a43fd['x']+_0x57f8cf['floor']((_0x142f41['width']-_0x34d4ba)/0x2);this[_0x3ed386(0x4c4)](_0x1b1375,_0x3ab7fd,_0x1694ee['y'],_0x26f69e);}else this['performAttack']();}else _0x3ed386(0x24f)==='jcFJg'?(_0x212e0c=_0x30ecbe[_0x3ed386(0x613)]/0x2,_0x2168c8=_0x1743ec['boxHeight']/0x2):this[_0x3ed386(0x7c8)]('skill');}else _0x1ee263['isItem']()&&(_0x3ed386(0x98d)!==_0x3ed386(0x523)?this['requestMotion'](_0x3ed386(0x987)):this['performAttack']());}}}},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x691)]=function(){const _0x485184=_0x44efce;return $dataSystem[_0x485184(0x889)][0x0];},Game_Battler['prototype'][_0x44efce(0x79a)]=function(){const _0x17e49f=_0x44efce,_0x3c8e4f=this[_0x17e49f(0x691)]();return _0x3c8e4f?_0x3c8e4f[_0x17e49f(0x1a5)]:0x0;},Game_Battler['prototype'][_0x44efce(0x625)]=function(_0x273924){const _0x3f969d=_0x44efce;if(!$gameSystem[_0x3f969d(0x8c0)]())return;const _0x595d24=this[_0x3f969d(0x6dd)](),_0x17b241=_0x273924[_0x3f969d(0x6dd)]();if(!_0x595d24||!_0x17b241)return;const _0x5c54c8=_0x17b241['_baseX'],_0x3b0efb=_0x17b241['_baseY'];this[_0x3f969d(0x7ae)](_0x5c54c8,_0x3b0efb,0x0,![],_0x3f969d(0x221),-0x1),_0x595d24['updatePosition']();const _0x170fac=VisuMZ[_0x3f969d(0x6d0)][_0x3f969d(0x444)][_0x3f969d(0xa63)];let _0x3f17ac=(_0x17b241['width']+_0x595d24[_0x3f969d(0x542)])/0x2;_0x3f17ac*=this[_0x3f969d(0x8de)]()?0x1:-0x1;let _0x1d5962=_0x170fac['StepDistanceY']*(this[_0x3f969d(0x8de)]()?0x1:-0x1);_0x273924[_0x3f969d(0x2c3)](_0x3f17ac,_0x1d5962,0x0,![],_0x3f969d(0x221)),_0x17b241['updatePosition']();},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x7c8)]=function(_0x3add43){const _0x6959c4=_0x44efce;if(SceneManager[_0x6959c4(0xbab)]()){const _0x5ab763=this[_0x6959c4(0x6dd)]();_0x5ab763&&(_0x5ab763[_0x6959c4(0xace)](_0x3add43),['swing',_0x6959c4(0x15d),_0x6959c4(0x3c4)][_0x6959c4(0x89e)](_0x3add43)&&('rahxe'!==_0x6959c4(0x24b)?this[_0x6959c4(0x325)]():_0x58aae5+=_0xf0e2fa(_0x34f5c3['$1'])));}this[_0x6959c4(0x98b)]();},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x325)]=function(){},Game_Battler[_0x44efce(0x8f2)]['startWeaponAnimation']=function(_0x4135ad){const _0x17594e=_0x44efce;if(SceneManager[_0x17594e(0xbab)]()){const _0x489367=this[_0x17594e(0x6dd)]();if(_0x489367)_0x489367['forceWeaponAnimation'](_0x4135ad);}},Game_Battler['prototype'][_0x44efce(0x133)]=function(){const _0x21ad21=_0x44efce;if(SceneManager[_0x21ad21(0xbab)]()){if('JIpoy'!==_0x21ad21(0x43c)){if(_0x31f7cd>_0x39e019[_0x21ad21(0x5f2)])_0x55edf0=!![];if(_0x150a22<_0x494f87[_0x21ad21(0x5f2)])_0x395600=![];}else{const _0x3e8af3=this['getAttackWeaponAnimationId']();this[_0x21ad21(0xa67)](_0x3e8af3);}}},Game_Battler['prototype'][_0x44efce(0x77c)]=function(_0x39f844,_0x598fdc){const _0x687fb9=_0x44efce;if(!_0x39f844)return;if(!_0x39f844[_0x687fb9(0x987)]())return;if(_0x39f844[_0x687fb9(0x7a3)]())return;if(_0x39f844[_0x687fb9(0x869)]())return;if(_0x39f844[_0x687fb9(0x67e)]())return;let _0x538c1a=0x0;const _0x45fc04=VisuMZ['BattleCore'][_0x687fb9(0x444)][_0x687fb9(0xa63)],_0x287aa8=_0x39f844[_0x687fb9(0x987)]()[_0x687fb9(0x77d)];if(_0x287aa8[_0x687fb9(0xab6)](/<CAST ANIMATION: (\d+)>/i))_0x538c1a=Number(RegExp['$1']);else{if(_0x287aa8[_0x687fb9(0xab6)](/<NO CAST ANIMATION>/i))return;else{if(_0x39f844['isCertainHit']())_0x538c1a=_0x45fc04['CastCertain'];else{if(_0x39f844[_0x687fb9(0x211)]())_0x687fb9(0x45a)==='GAVfq'?_0x70b4a0[_0x687fb9(0x8f2)][_0x687fb9(0x64a)][_0x687fb9(0xb59)](this):_0x538c1a=_0x45fc04[_0x687fb9(0x960)];else{if(_0x39f844[_0x687fb9(0x84e)]()){if('eENtC'===_0x687fb9(0xb6b))return this['currentClass']()[_0x687fb9(0x77d)]['match'](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?_0x33c5a1(_0x51f55d['$1'])['split'](/[\r\n]+/):_0x5d681f[_0x687fb9(0x6d0)][_0x687fb9(0x444)]['ActorCmd']['BattleCmdList'];else _0x538c1a=_0x45fc04['CastMagical'];}}}}}_0x538c1a>0x0&&$gameTemp[_0x687fb9(0x9df)]([this],_0x538c1a,!!_0x598fdc);},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x2e3)]=function(){const _0x3442f4=_0x44efce;SoundManager[_0x3442f4(0x486)]();let _0x42a653=VisuMZ[_0x3442f4(0x6d0)][_0x3442f4(0x444)][_0x3442f4(0xa63)][_0x3442f4(0xa44)];_0x42a653>0x0&&(Imported[_0x3442f4(0x1bc)]?$gameTemp[_0x3442f4(0x52e)]([this],_0x42a653):_0x3442f4(0xa24)===_0x3442f4(0xa24)?$gameTemp[_0x3442f4(0x9df)]([this],_0x42a653):_0x1d0edd[_0x3442f4(0x5d4)]=_0x55a48a(_0x2bc3cf['$1']));},VisuMZ['BattleCore'][_0x44efce(0x455)]=Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x2c8)],Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x2c8)]=function(){const _0x3d2926=_0x44efce;VisuMZ[_0x3d2926(0x6d0)][_0x3d2926(0x455)][_0x3d2926(0xb59)](this),this['performFlinch']();},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0xb41)]=Game_Battler[_0x44efce(0x8f2)]['performMiss'],Game_Battler['prototype']['performMiss']=function(){const _0x2e60b7=_0x44efce;VisuMZ[_0x2e60b7(0x6d0)][_0x2e60b7(0xb41)]['call'](this),this[_0x2e60b7(0x8ff)]();},VisuMZ['BattleCore']['Game_Battler_performEvasion']=Game_Battler['prototype'][_0x44efce(0x854)],Game_Battler['prototype'][_0x44efce(0x854)]=function(){const _0x263188=_0x44efce;VisuMZ[_0x263188(0x6d0)][_0x263188(0x74e)][_0x263188(0xb59)](this),this[_0x263188(0x8ff)]();},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x8ff)]=function(){const _0x42cbe4=_0x44efce;if(!$gameSystem[_0x42cbe4(0x8c0)]())return;if(this[_0x42cbe4(0x78e)])return;this['_flinched']=!![];const _0x3a6bc0=this[_0x42cbe4(0x6dd)]();if(_0x3a6bc0)_0x3a6bc0[_0x42cbe4(0x756)]();},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x42b)]=function(){const _0x7746c7=_0x44efce;if(this[_0x7746c7(0x578)]()&&this[_0x7746c7(0x986)]!==_0x7746c7(0x622)){this[_0x7746c7(0x7c8)](_0x7746c7(0x622));return;}if(this[_0x7746c7(0x578)]()&&this[_0x7746c7(0x986)]==='dead')return;if(!!this['_freezeMotionData'])return;if(this[_0x7746c7(0x851)]()){if(_0x7746c7(0x4b6)===_0x7746c7(0x4b6)){if(!this[_0x7746c7(0x938)]()&&this!==BattleManager[_0x7746c7(0x427)]){if(this[_0x7746c7(0x6dd)]())this[_0x7746c7(0x6dd)]()[_0x7746c7(0x310)]();}this[_0x7746c7(0x98b)]();return;}else return this[_0x7746c7(0x5e9)]();}if(this[_0x7746c7(0x986)]===_0x7746c7(0x10d))return;if(this['_motionType']===_0x7746c7(0xa17)&&!BattleManager['isInputting']())return;if(this[_0x7746c7(0x986)]===_0x7746c7(0x346)&&!BattleManager[_0x7746c7(0x6dc)]())return;this[_0x7746c7(0xbba)]();if(this['battler']()&&BattleManager[_0x7746c7(0x6dc)]()){if(_0x7746c7(0x402)!==_0x7746c7(0x402)){if(!this[_0x7746c7(0x952)])return;if(this[_0x7746c7(0x6cb)]&&this['_battler'][_0x7746c7(0x442)]()){const _0x157909=this[_0x7746c7(0x952)][_0x7746c7(0x3e8)];this[_0x7746c7(0x952)][_0x7746c7(0x228)](0x0,0x0,_0x157909[_0x7746c7(0x542)],_0x157909['height']);}else this[_0x7746c7(0x952)][_0x7746c7(0x228)](0x0,0x0,0x0,0x0);}else{this['battler']()['refreshMotion'](),this[_0x7746c7(0x98b)]();return;}}},Game_Enemy[_0x44efce(0x8f2)][_0x44efce(0x938)]=function(){const _0x16cd39=_0x44efce;if(!this[_0x16cd39(0xbb3)]())return![];const _0x44d2be=this['battler']();if(!_0x44d2be)return![];const _0xad75f6=_0x44d2be[_0x16cd39(0x758)];if(!_0xad75f6)return![];const _0x1e6b60=_0xad75f6[_0x16cd39(0x8c6)];return _0x1e6b60&&!_0x1e6b60[_0x16cd39(0xa40)];},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0xb9e)]=function(){const _0x3b760e=_0x44efce;return this[_0x3b760e(0x8e8)];},Game_Battler[_0x44efce(0x8f2)]['setBattlerFlip']=function(_0x215a21){const _0x43396b=_0x44efce;if(!$gameSystem[_0x43396b(0x8c0)]())return;this[_0x43396b(0x8e8)]=_0x215a21;const _0x5de1a1=this[_0x43396b(0x6dd)]();if(_0x5de1a1)_0x5de1a1['updateFlip']();},Game_Battler['prototype'][_0x44efce(0x846)]=function(_0x4d7e1b,_0x56f1f7,_0x347488){const _0x1b891d=_0x44efce;if(!$gameSystem[_0x1b891d(0x8c0)]())return;const _0x21515e=this[_0x1b891d(0x6dd)]();if(!_0x21515e)return;if(_0x4d7e1b===_0x21515e[_0x1b891d(0x5f2)])return;let _0x89a7f4=![];if(this[_0x1b891d(0x8de)]()){if(_0x1b891d(0x679)==='QcvcG'){if(_0x4d7e1b>_0x21515e['_baseX'])_0x89a7f4=!![];if(_0x4d7e1b<_0x21515e[_0x1b891d(0x5f2)])_0x89a7f4=![];}else this[_0x1b891d(0x992)]()?this[_0x1b891d(0x4e9)]():_0x3fc0e3['BattleCore'][_0x1b891d(0x77f)][_0x1b891d(0xb59)](this);}else{if(this[_0x1b891d(0x851)]()){if(_0x4d7e1b>_0x21515e[_0x1b891d(0x5f2)])_0x89a7f4=![];if(_0x4d7e1b<_0x21515e[_0x1b891d(0x5f2)])_0x89a7f4=!![];}};this[_0x1b891d(0x21c)](_0x347488?!_0x89a7f4:_0x89a7f4),_0x21515e[_0x1b891d(0x7f9)]();},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x2c3)]=function(_0x2bb61c,_0x4019fb,_0x7d0663,_0x3b67f5,_0x14522a){const _0x5405c5=_0x44efce;if(!$gameSystem['isSideView']())return;const _0x4bbf5c=this['battler']();if(!_0x4bbf5c)return;if(_0x3b67f5)this['setBattlerFacePoint'](_0x2bb61c+_0x4bbf5c[_0x5405c5(0x5f2)],_0x4019fb+_0x4bbf5c[_0x5405c5(0xbb8)],![]);_0x2bb61c+=_0x4bbf5c['_baseX']-_0x4bbf5c['_homeX'],_0x4019fb+=_0x4bbf5c[_0x5405c5(0xbb8)]-_0x4bbf5c['_homeY'],_0x4bbf5c[_0x5405c5(0x9fc)](_0x2bb61c,_0x4019fb,_0x7d0663);if(Imported['VisuMZ_0_CoreEngine'])_0x4bbf5c[_0x5405c5(0x3c7)](_0x14522a||_0x5405c5(0x221));},Game_Battler['prototype']['moveBattlerToPoint']=function(_0x284793,_0x2c5791,_0x23b4cc,_0x1b96e5,_0x13e403,_0x442bbc){const _0x3bf8e7=_0x44efce;if(!$gameSystem[_0x3bf8e7(0x8c0)]())return;const _0x54ab4e=this[_0x3bf8e7(0x6dd)]();if(!_0x54ab4e)return;if(_0x284793===Infinity||_0x2c5791===Infinity)return;if(isNaN(_0x284793)||isNaN(_0x2c5791))return;_0x442bbc=_0x442bbc||0x0;if(_0x442bbc>0x0){if(_0x54ab4e[_0x3bf8e7(0x5f2)]>_0x284793)_0x284793+=_0x54ab4e[_0x3bf8e7(0x542)]/0x2+_0x442bbc;if(_0x54ab4e[_0x3bf8e7(0x5f2)]<_0x284793)_0x284793-=_0x54ab4e[_0x3bf8e7(0x542)]/0x2+_0x442bbc;}if(_0x1b96e5)this[_0x3bf8e7(0x846)](_0x284793,_0x2c5791,![]);_0x284793-=_0x54ab4e[_0x3bf8e7(0x4f6)],_0x2c5791-=_0x54ab4e[_0x3bf8e7(0x680)],_0x54ab4e[_0x3bf8e7(0x9fc)](_0x284793,_0x2c5791,_0x23b4cc);if(Imported[_0x3bf8e7(0x1bc)])_0x54ab4e[_0x3bf8e7(0x3c7)](_0x13e403||'Linear');},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0xc8)]=function(_0x5bbe82,_0x3d19ca,_0x9a8f4e,_0x5e652e,_0x2cc867){const _0xb723ba=_0x44efce;if(!$gameSystem[_0xb723ba(0x8c0)]())return;const _0xcec2b8=this[_0xb723ba(0x6dd)]();if(!_0xcec2b8)return;if(_0x5e652e)this[_0xb723ba(0x846)](_0x5bbe82+_0xcec2b8['_baseX'],_0x3d19ca+_0xcec2b8[_0xb723ba(0xbb8)],![]);_0x5bbe82+=_0xcec2b8[_0xb723ba(0x4f6)],_0x3d19ca+=_0xcec2b8[_0xb723ba(0x680)],_0xcec2b8['startHomeMove'](_0x5bbe82,_0x3d19ca,_0x9a8f4e,_0x2cc867),this[_0xb723ba(0xbb6)]=_0x5bbe82,this[_0xb723ba(0x250)]=_0x3d19ca;},Game_Battler[_0x44efce(0x8f2)]['moveBattlerHomeToPoint']=function(_0x586b1e,_0x5e8952,_0x31dd8d,_0x3b3c54,_0x45b47f,_0x19963b){const _0x2a6678=_0x44efce;if(!$gameSystem[_0x2a6678(0x8c0)]())return;const _0x24b8bc=this['battler']();if(!_0x24b8bc)return;_0x19963b=_0x19963b||0x0;if(_0x19963b>0x0){if(_0x24b8bc[_0x2a6678(0x5f2)]>_0x586b1e)_0x586b1e+=_0x24b8bc[_0x2a6678(0x542)]/0x2+_0x19963b;if(_0x24b8bc[_0x2a6678(0x5f2)]<_0x586b1e)_0x586b1e-=_0x24b8bc['width']/0x2+_0x19963b;}if(_0x3b3c54)this['setBattlerFacePoint'](_0x586b1e,_0x5e8952,![]);_0x24b8bc[_0x2a6678(0x1ac)](_0x586b1e,_0x5e8952,_0x31dd8d,_0x45b47f),this['_forcedHomeX']=_0x586b1e,this[_0x2a6678(0x250)]=_0x5e8952;},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0xa10)]=function(_0x1a122b,_0x4df138,_0x3b7fe2){if(!$gameSystem['isSideView']())return;const _0x24039a=this['battler']();if(!_0x24039a)return;_0x24039a['startFloat'](_0x1a122b,_0x4df138,_0x3b7fe2);},Game_Battler['prototype'][_0x44efce(0x125)]=function(_0x1f61b7,_0x380a60){const _0x236102=_0x44efce;if(!$gameSystem[_0x236102(0x8c0)]())return;const _0x2d4a4f=this['battler']();if(!_0x2d4a4f)return;_0x2d4a4f[_0x236102(0x79f)](_0x1f61b7,_0x380a60);},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x825)]=function(_0x4e8e7a,_0x327259,_0xb08446,_0x3e29ac){const _0x28d8d5=_0x44efce;if(!$gameSystem[_0x28d8d5(0x8c0)]())return;const _0x8852ed=this[_0x28d8d5(0x6dd)]();if(!_0x8852ed)return;_0x8852ed[_0x28d8d5(0x7b4)](_0x4e8e7a,_0x327259,_0xb08446,_0x3e29ac);},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0xa8c)]=function(_0x221eb1,_0x53fbf5,_0x5e9ebe,_0x57e59c){const _0x3200eb=_0x44efce;if(!$gameSystem[_0x3200eb(0x8c0)]())return;const _0x1adabc=this[_0x3200eb(0x6dd)]();if(!_0x1adabc)return;this[_0x3200eb(0x8de)]()&&(_0x221eb1*=-0x1,_0x53fbf5*=-0x1),_0x1adabc[_0x3200eb(0x1f7)](_0x221eb1,_0x53fbf5,_0x5e9ebe,_0x57e59c);},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x9d9)]=function(_0x27ee23,_0x45caa3,_0x1f666e,_0x12f9a3){const _0x1cc691=_0x44efce;if(!$gameSystem['isSideView']())return;const _0x84d7ba=this[_0x1cc691(0x6dd)]();if(!_0x84d7ba)return;_0x84d7ba[_0x1cc691(0x656)](_0x27ee23,_0x45caa3,_0x1f666e,_0x12f9a3);},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x6a7)]=function(_0x54a0d9,_0x167aae,_0x5b32d0){const _0x5dc621=_0x44efce;if(!$gameSystem['isSideView']())return;const _0x56bb9e=this[_0x5dc621(0x6dd)]();if(!_0x56bb9e)return;_0x56bb9e[_0x5dc621(0x50d)](_0x54a0d9,_0x167aae,_0x5b32d0);},Game_Battler['prototype']['clearFreezeMotion']=function(){const _0x53a335=_0x44efce,_0x10601d=!!this[_0x53a335(0x738)];this['_freezeMotionData']=undefined,_0x10601d&&(this[_0x53a335(0x42b)](),this[_0x53a335(0x936)]());},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x936)]=function(){const _0x3a0d1e=_0x44efce;if(!SceneManager[_0x3a0d1e(0xbab)]())return;const _0x4e130a=this[_0x3a0d1e(0x6dd)]();if(!_0x4e130a)return;let _0x294787=this[_0x3a0d1e(0x8de)]()?_0x4e130a[_0x3a0d1e(0x92a)]:_0x4e130a[_0x3a0d1e(0x758)][_0x3a0d1e(0x92a)];_0x294787&&_0x294787[_0x3a0d1e(0x803)](0x0);},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x65b)]=function(_0x2cddb2,_0x1a1a1b,_0x3387c3){const _0x5f1524=_0x44efce;if(this['isEnemy']()&&!this[_0x5f1524(0xbb3)]())return;let _0x109fd7=0x0,_0x280f96=0x0;if(_0x2cddb2[_0x5f1524(0xab6)](/ATTACK[ ](\d+)/i)){if(_0x5f1524(0x177)!==_0x5f1524(0x177)){_0x349737&&_0x5ffd8a&&_0x5ae0ae[_0x5f1524(0x77d)]&&this[_0x5f1524(0x5ec)](_0x2f3991[_0x5f1524(0x77d)]);const _0x170c5a=_0xa5864[_0x3fe9e4];if(_0x170c5a){let _0x4c093a=_0x1d395d[_0x5f1524(0x514)](_0x170c5a['id']);this[_0x5f1524(0x5ec)](_0x4c093a);}}else _0x280f96=Number(RegExp['$1']),_0x280f96--;}if(this['isActor']()){if(_0x5f1524(0x75b)!==_0x5f1524(0x715)){const _0x1c2d29=this['weapons']();_0x109fd7=_0x1c2d29[_0x280f96]?_0x1c2d29[_0x280f96]['wtypeId']:0x0;}else _0x773ba1[_0x5f1524(0x6d0)][_0x5f1524(0x32a)][_0x5f1524(0xb59)](this),this[_0x5f1524(0xb71)]();}else this[_0x5f1524(0x851)]()&&(_0x109fd7=this[_0x5f1524(0x5cd)]()[_0x5f1524(0xb58)]||0x0);const _0x5bd848=$dataSystem[_0x5f1524(0x889)][_0x109fd7];_0x2cddb2[_0x5f1524(0xab6)](/attack/i)&&(_0x2cddb2=['thrust',_0x5f1524(0x9ae),'missile'][_0x5bd848[_0x5f1524(0xa15)]]||_0x5f1524(0x9ae)),this[_0x5f1524(0x738)]={'motionType':_0x2cddb2,'weaponImageId':_0x1a1a1b?_0x5bd848[_0x5f1524(0x1a5)]:0x0,'pattern':_0x3387c3};},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x9de)]=function(_0x80b02f){const _0x500158=_0x44efce;if(!_0x80b02f)return![];return _0x80b02f['friendsUnit']()===this[_0x500158(0x8ce)]();},Game_Battler['prototype'][_0x44efce(0x969)]=function(_0x442658){const _0x4ba88d=_0x44efce;if(!_0x442658)return![];return _0x442658['opponentsUnit']()===this[_0x4ba88d(0x8ce)]();},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x1d1)]=function(){return![];},Game_Actor[_0x44efce(0x8f2)][_0x44efce(0x1d1)]=function(){const _0x487a00=_0x44efce;return this[_0x487a00(0x85c)]()[_0x487a00(0xab6)](/\$/i);},Game_Enemy[_0x44efce(0x8f2)][_0x44efce(0x1d1)]=function(){const _0x264830=_0x44efce;return this[_0x264830(0xbb3)]()&&this[_0x264830(0x814)]()[_0x264830(0xab6)](/\$/i);},VisuMZ['BattleCore'][_0x44efce(0x749)]=Game_Actor[_0x44efce(0x8f2)][_0x44efce(0x803)],Game_Actor[_0x44efce(0x8f2)][_0x44efce(0x803)]=function(_0x2dcc67){const _0x1406e7=_0x44efce;VisuMZ[_0x1406e7(0x6d0)][_0x1406e7(0x749)][_0x1406e7(0xb59)](this,_0x2dcc67),this[_0x1406e7(0x463)]();},Game_Actor[_0x44efce(0x8f2)][_0x44efce(0x463)]=function(){const _0x32aafa=_0x44efce;this['_battlePortrait']='',this[_0x32aafa(0x918)]()&&this[_0x32aafa(0x918)]()[_0x32aafa(0x77d)]['match'](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(_0x32aafa(0x8a3)===_0x32aafa(0x8a3)?this[_0x32aafa(0x2b2)]=String(RegExp['$1']):(_0xa257c9=_0xc4333a(_0x17c976['$1']),_0x2cb8d1=_0x53f646(_0x16ec9a['$2'])));},Game_Actor['prototype'][_0x44efce(0x9e5)]=function(){const _0x219b99=_0x44efce;if(this[_0x219b99(0x4f7)]()!=='')return this[_0x219b99(0x4f7)]();else{if(Imported[_0x219b99(0x5b9)]&&this[_0x219b99(0x765)]()!=='')return this[_0x219b99(0x765)]();}return'';},Game_Actor[_0x44efce(0x8f2)]['getBattlePortrait']=function(){const _0x8ef6b5=_0x44efce;if(this[_0x8ef6b5(0x2b2)]===undefined)this[_0x8ef6b5(0x463)]();return this['_battlePortrait'];},Game_Actor[_0x44efce(0x8f2)][_0x44efce(0xa9c)]=function(_0x149020){const _0x4b5291=_0x44efce;if(this['_battlePortrait']===undefined)this['initBattlePortrait']();this[_0x4b5291(0x2b2)]=_0x149020;if(SceneManager['isSceneBattle']()&&$gameParty[_0x4b5291(0xaa6)]()[_0x4b5291(0x89e)](this)){if(_0x4b5291(0x709)==='MpJEH'){const _0x3d0679=SceneManager['_scene'][_0x4b5291(0x743)];if(_0x3d0679)_0x3d0679[_0x4b5291(0x1f1)](this);}else _0x13a220+=_0x57d70a/0x2;}},Game_Actor[_0x44efce(0x8f2)]['isSpriteVisible']=function(){return!![];},Game_Actor[_0x44efce(0x8f2)]['isAutoBattle']=function(){const _0x5198ad=_0x44efce;if(!this[_0x5198ad(0x389)]()&&BattleManager[_0x5198ad(0x3c1)])return!![];return Game_Battler[_0x5198ad(0x8f2)][_0x5198ad(0xba7)]['call'](this);},VisuMZ['BattleCore']['Game_Actor_makeActionList']=Game_Actor[_0x44efce(0x8f2)]['makeActionList'],Game_Actor[_0x44efce(0x8f2)][_0x44efce(0x35d)]=function(){const _0xaf9f35=_0x44efce;if(BattleManager[_0xaf9f35(0x3c1)]&&!ConfigManager[_0xaf9f35(0x872)])return this[_0xaf9f35(0x396)]();else{return VisuMZ['BattleCore'][_0xaf9f35(0x584)][_0xaf9f35(0xb59)](this);;}},Game_Actor[_0x44efce(0x8f2)][_0x44efce(0x396)]=function(){const _0x3ef349=_0x44efce,_0x14c39e=[],_0x14d0f8=new Game_Action(this);return _0x14d0f8[_0x3ef349(0x914)](),_0x14c39e[_0x3ef349(0xb70)](_0x14d0f8),_0x14c39e;},Game_Actor['prototype'][_0x44efce(0x87f)]=function(){const _0x192a46=_0x44efce;if(this[_0x192a46(0x425)]()['note'][_0x192a46(0xab6)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i))return String(RegExp['$1'])[_0x192a46(0x603)](/[\r\n]+/);else{if(_0x192a46(0x850)==='vweLp')return VisuMZ[_0x192a46(0x6d0)][_0x192a46(0x444)][_0x192a46(0x671)][_0x192a46(0x160)];else _0x33538f=_0x518fc8>=_0x1e67f0?_0x16f760:_0x2382db;}},Game_Actor[_0x44efce(0x8f2)][_0x44efce(0xf2)]=function(){const _0x1771b3=_0x44efce;if(this[_0x1771b3(0x2b6)][_0x1771b3(0x893)]!==undefined)return this[_0x1771b3(0x2b6)]['svAnchorX'];if(this['actor']()[_0x1771b3(0x77d)][_0x1771b3(0xab6)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i))this[_0x1771b3(0x2b6)][_0x1771b3(0x893)]=eval(RegExp['$1']),this[_0x1771b3(0x2b6)][_0x1771b3(0x88d)]=eval(RegExp['$2']);else{if(_0x1771b3(0xcc)!=='Dqdaa'){const _0x5a9623=_0x49663b(_0x83731b['$1'])[_0x1771b3(0x603)](/[\r\n]+/)['remove']('');_0x26660b['motionIdle']=_0x533cb9[_0x1771b3(0x565)](_0x5a9623);}else this[_0x1771b3(0x2b6)][_0x1771b3(0x893)]=Game_Battler['prototype'][_0x1771b3(0xf2)][_0x1771b3(0xb59)](this);}return this[_0x1771b3(0x2b6)][_0x1771b3(0x893)];},Game_Actor['prototype'][_0x44efce(0x371)]=function(){const _0x2e4aee=_0x44efce;if(this[_0x2e4aee(0x2b6)]['svAnchorY']!==undefined)return this['_cache']['svAnchorY'];return this[_0x2e4aee(0x918)]()[_0x2e4aee(0x77d)][_0x2e4aee(0xab6)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache'][_0x2e4aee(0x893)]=eval(RegExp['$1']),this[_0x2e4aee(0x2b6)][_0x2e4aee(0x88d)]=eval(RegExp['$2'])):this['_cache'][_0x2e4aee(0x88d)]=Game_Battler[_0x2e4aee(0x8f2)][_0x2e4aee(0x371)]['call'](this),this[_0x2e4aee(0x2b6)][_0x2e4aee(0x88d)];},Game_Actor[_0x44efce(0x8f2)][_0x44efce(0x442)]=function(){const _0x4f047d=_0x44efce;if(this[_0x4f047d(0x2b6)][_0x4f047d(0x8f5)]!==undefined)return this[_0x4f047d(0x2b6)][_0x4f047d(0x8f5)];if(this[_0x4f047d(0x918)]()[_0x4f047d(0x77d)]['match'](/<SIDEVIEW SHOW SHADOW>/i))this['_cache'][_0x4f047d(0x8f5)]=!![];else this[_0x4f047d(0x918)]()[_0x4f047d(0x77d)][_0x4f047d(0xab6)](/<SIDEVIEW HIDE SHADOW>/i)?'MNBov'!==_0x4f047d(0x229)?(this[_0x4f047d(0x5b7)]=new _0x9af65f(),this[_0x4f047d(0x317)](this[_0x4f047d(0x5b7)])):this[_0x4f047d(0x2b6)][_0x4f047d(0x8f5)]=![]:this[_0x4f047d(0x2b6)][_0x4f047d(0x8f5)]=Game_Battler['prototype']['svBattlerShadowVisible'][_0x4f047d(0xb59)](this);return this[_0x4f047d(0x2b6)][_0x4f047d(0x8f5)];},Game_Actor[_0x44efce(0x8f2)]['battlerSmoothImage']=function(){const _0x57a19a=_0x44efce;return VisuMZ[_0x57a19a(0x6d0)]['Settings'][_0x57a19a(0x44f)][_0x57a19a(0x999)];},Game_Actor[_0x44efce(0x8f2)]['performWeaponAnimation']=function(){const _0x5dbdc2=_0x44efce,_0x1bc2d8=this[_0x5dbdc2(0x820)](),_0x393030=_0x1bc2d8[0x0]?_0x1bc2d8[0x0]['wtypeId']:0x0,_0x218ae5=$dataSystem[_0x5dbdc2(0x889)][_0x393030];if(_0x218ae5){if(_0x5dbdc2(0x288)!==_0x5dbdc2(0x288))return this[_0x5dbdc2(0x4f7)]();else this[_0x5dbdc2(0xa67)](_0x218ae5['weaponImageId']);}},Game_Actor[_0x44efce(0x8f2)][_0x44efce(0x86c)]=function(_0x24025a){const _0x492d46=_0x44efce;Game_Battler[_0x492d46(0x8f2)][_0x492d46(0x86c)][_0x492d46(0xb59)](this,_0x24025a),this[_0x492d46(0x487)](_0x24025a);},Game_Actor['prototype'][_0x44efce(0x691)]=function(){const _0x3b1087=_0x44efce,_0x2743d2=this[_0x3b1087(0x820)](),_0x17a18e=_0x2743d2[0x0]?_0x2743d2[0x0][_0x3b1087(0xb58)]:0x0;return $dataSystem[_0x3b1087(0x889)][_0x17a18e];},Game_Actor[_0x44efce(0x8f2)][_0x44efce(0x31c)]=function(_0x40ce25){const _0x96c9c2=_0x44efce;_0x40ce25=_0x40ce25||0x1,_0x40ce25--;const _0x3092b2=this[_0x96c9c2(0x820)]();return _0x3092b2[_0x40ce25]?_0x3092b2[_0x40ce25][_0x96c9c2(0xa49)]:0x0;},Game_Actor[_0x44efce(0x8f2)][_0x44efce(0x5c9)]=function(_0x40901a){const _0x4964b8=_0x44efce;_0x40901a=_0x40901a||0x1,_0x40901a--;const _0x306f31=this['weapons'](),_0x4b1516=_0x306f31[_0x40901a]?_0x306f31[_0x40901a][_0x4964b8(0xb58)]:0x0;return $dataSystem[_0x4964b8(0x889)][_0x4b1516];},Game_Actor[_0x44efce(0x8f2)][_0x44efce(0x7e7)]=function(_0x804ead){const _0x5b4068=_0x44efce;_0x804ead=_0x804ead||0x1,_0x804ead--;const _0x13fa23=this[_0x5b4068(0x820)](),_0x550fb3=_0x13fa23[_0x804ead]?_0x13fa23[_0x804ead]['wtypeId']:0x0,_0x64d672=$dataSystem['attackMotions'][_0x550fb3];if(_0x64d672){if(_0x64d672['type']===0x0)this[_0x5b4068(0x7c8)](_0x5b4068(0x15d));else{if(_0x64d672[_0x5b4068(0xa15)]===0x1)'DXURI'===_0x5b4068(0x226)?this['requestMotion'](_0x5b4068(0x9ae)):(_0x3e24ae[_0x5b4068(0x6d0)]['Game_Party_addActor'][_0x5b4068(0xb59)](this,_0xd7973b),_0x31e651['refreshStatusWindow']());else{if(_0x64d672[_0x5b4068(0xa15)]===0x2){if(_0x5b4068(0x67c)===_0x5b4068(0x67c))this[_0x5b4068(0x7c8)](_0x5b4068(0x3c4));else{const _0x2091b1=this[_0x5b4068(0x529)][_0x5b4068(0xa05)]['apply'](new _0x16590b(0x0,0x0)),_0x751159=this[_0x5b4068(0x529)][_0x5b4068(0x6bd)];_0x751159['x']=_0x2091b1['x']+this['origin']['x'],_0x751159['y']=_0x2091b1['y']+this[_0x5b4068(0x943)]['y'],_0x751159[_0x5b4068(0x542)]=this[_0x5b4068(0x5f4)],_0x751159[_0x5b4068(0x737)]=this[_0x5b4068(0x7e8)];}}}}this[_0x5b4068(0xa67)](_0x64d672[_0x5b4068(0x1a5)]);}},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0xadf)]=function(_0x178b80){const _0x10815f=_0x44efce;this[_0x10815f(0x202)]=_0x178b80||0x0,this[_0x10815f(0x2b6)]={};},Game_Battler[_0x44efce(0x8f2)]['nextActiveWeaponSlot']=function(){const _0x4f4c70=_0x44efce;this['_activeWeaponSlot']=this[_0x4f4c70(0x202)]||0x0,this[_0x4f4c70(0x202)]++,this[_0x4f4c70(0x2b6)]={};},Game_Battler[_0x44efce(0x8f2)][_0x44efce(0x84d)]=function(){const _0x28d1f7=_0x44efce;this['_activeWeaponSlot']=undefined,this[_0x28d1f7(0x2b6)]={};},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0xbb)]=Game_Actor['prototype']['equips'],Game_Actor[_0x44efce(0x8f2)][_0x44efce(0x707)]=function(){const _0x543bbe=_0x44efce;let _0x418642=VisuMZ['BattleCore'][_0x543bbe(0xbb)][_0x543bbe(0xb59)](this);if(this[_0x543bbe(0x2c6)])return _0x418642;if(this[_0x543bbe(0x202)]!==undefined){if(_0x543bbe(0x167)!==_0x543bbe(0x167))_0x17ee04+=(_0x24c16f[_0x543bbe(0x851)]()?-0x1:0x1)*_0x347d4f['mainSpriteWidth']()/0x2;else{this[_0x543bbe(0x2c6)]=!![];const _0x1028fc=this[_0x543bbe(0x391)]();for(let _0x242f5d=0x0;_0x242f5d<_0x1028fc['length'];_0x242f5d++){if(_0x543bbe(0x981)===_0x543bbe(0x366))_0x151dbe[_0x543bbe(0x118)]([_0x51de7c]);else{if(_0x1028fc[_0x242f5d]===0x1&&this[_0x543bbe(0x202)]!==_0x242f5d){if(_0x543bbe(0x5a0)===_0x543bbe(0x5a0))_0x418642[_0x242f5d]=null;else{const _0x3047b1=_0x24ef24(_0x52dc53['$1'])[_0x543bbe(0x603)](/[\r\n]+/)[_0x543bbe(0xac9)]('');_0x30be3c[_0x543bbe(0x8fb)]=_0x561df5[_0x543bbe(0x565)](_0x3047b1);}}}}this[_0x543bbe(0x2c6)]=undefined;}}return _0x418642;},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x9b7)]=function(_0x418f57){const _0x2dd1fe=_0x44efce;return _0x418f57['isActor']()?_0x418f57['weapons']()[_0x2dd1fe(0x496)]||0x1:0x1;},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x5f0)]=function(_0x29706e,_0xa1c0c6){const _0x3e983c=_0x44efce;if(_0x29706e&&_0x29706e[_0x3e983c(0x8de)]()){if(_0x3e983c(0xa7)!==_0x3e983c(0xa79))_0x29706e['setActiveWeaponSlot'](_0xa1c0c6);else{const _0x5824f7=_0x1c0977['parse']('['+_0x18546a['$1'][_0x3e983c(0xab6)](/\d+/g)+']');for(const _0x5f40a3 of _0x5824f7){if(!_0x514401[_0x3e983c(0x18d)](_0x5f40a3))return![];}return!![];}}this[_0x3e983c(0x52f)]();},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0xadd)]=function(_0x2405c2){const _0x41a3be=_0x44efce;_0x2405c2&&_0x2405c2[_0x41a3be(0x8de)]()&&_0x2405c2[_0x41a3be(0x84d)](),this[_0x41a3be(0x52f)]();},Game_Actor[_0x44efce(0x8f2)]['battleUIOffsetX']=function(){const _0x332cd1=_0x44efce;let _0x376b90=_0x332cd1(0x3a3);if(this['checkCacheKey'](_0x376b90))return this[_0x332cd1(0x2b6)][_0x376b90];return this[_0x332cd1(0x2b6)][_0x376b90]=this[_0x332cd1(0x594)](this[_0x332cd1(0x918)]()),this['_cache'][_0x376b90];},Game_Actor[_0x44efce(0x8f2)][_0x44efce(0x27d)]=function(){const _0x4df071=_0x44efce;let _0x42487b=_0x4df071(0x27d);if(this[_0x4df071(0x84b)](_0x42487b))return this[_0x4df071(0x2b6)][_0x42487b];return this[_0x4df071(0x2b6)][_0x42487b]=this[_0x4df071(0xb26)](this['actor']()),this[_0x4df071(0x2b6)][_0x42487b];},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x11d)]=Game_Enemy['prototype'][_0x44efce(0x803)],Game_Enemy[_0x44efce(0x8f2)][_0x44efce(0x803)]=function(_0x5935d4,_0x1ff0be,_0xd0be0){const _0x7a105a=_0x44efce;_0x5935d4=DataManager['swapEnemyIDs'](_0x5935d4),VisuMZ[_0x7a105a(0x6d0)][_0x7a105a(0x11d)][_0x7a105a(0xb59)](this,_0x5935d4,_0x1ff0be,_0xd0be0),Imported[_0x7a105a(0x822)]&&(_0x7a105a(0x204)!==_0x7a105a(0x246)?this[_0x7a105a(0x921)]():(this[_0x7a105a(0x330)][_0x7a105a(0xb70)](_0x290644),this[_0x7a105a(0x290)](),this[_0x7a105a(0x52f)]())),this[_0x7a105a(0x5d9)](),this[_0x7a105a(0x746)](),Imported[_0x7a105a(0x822)]&&('ibTTE'===_0x7a105a(0xb10)?_0x506247[_0x7a105a(0x421)]()?(this[_0x7a105a(0x67b)](),this['startActorCommandSelection']()):_0x3e2bc0[_0x7a105a(0x6d0)][_0x7a105a(0x5da)][_0x7a105a(0xb59)](this):this[_0x7a105a(0xae6)]());},Game_Enemy['prototype']['clearBattleCoreData']=function(){const _0x41d1e1=_0x44efce,_0x5b9a3b=VisuMZ['BattleCore'][_0x41d1e1(0x444)]['Enemy'];this[_0x41d1e1(0x2f3)]=_0x5b9a3b[_0x41d1e1(0x193)],this['_svBattlerData']={};},Game_Enemy[_0x44efce(0x8f2)][_0x44efce(0x746)]=function(){const _0x3dd7a0=_0x44efce,_0x148952=VisuMZ[_0x3dd7a0(0x6d0)][_0x3dd7a0(0x444)]['Enemy'],_0x4db15e=this[_0x3dd7a0(0xb36)]()[_0x3dd7a0(0x77d)];this[_0x3dd7a0(0x63d)]={'name':'','wtypeId':_0x148952[_0x3dd7a0(0xb6e)],'collapse':_0x148952[_0x3dd7a0(0x6e3)],'motionIdle':_0x148952[_0x3dd7a0(0x6bf)],'width':_0x148952['Width']||0x40,'height':_0x148952[_0x3dd7a0(0x683)]||0x40,'anchorX':_0x148952['AnchorX']||0x0,'anchorY':_0x148952[_0x3dd7a0(0x360)]||0x0,'shadow':_0x148952[_0x3dd7a0(0xba9)]};_0x4db15e['match'](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x3dd7a0(0x2f3)]=Number(RegExp['$1']));const _0x3aa8eb=this[_0x3dd7a0(0x63d)];if(_0x4db15e['match'](/<SIDEVIEW BATTLER: (.*)>/i))_0x3aa8eb[_0x3dd7a0(0x5d4)]=String(RegExp['$1']);else{if(_0x4db15e[_0x3dd7a0(0xab6)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){if('CHILO'===_0x3dd7a0(0xd0)){const _0x3052fc=_0x5cc048(_0x1ec1b2['$1'])[_0x3dd7a0(0xb2d)]()['trim']();if(_0x3052fc===_0x3dd7a0(0x4d7))return'MANUAL';if(_0x3985cf[_0x3dd7a0(0xb3)][_0x3052fc])return _0x3052fc;}else{const _0x9502c0=String(RegExp['$1'])[_0x3dd7a0(0x603)](/[\r\n]+/)[_0x3dd7a0(0xac9)]('');_0x3aa8eb[_0x3dd7a0(0x5d4)]=DataManager[_0x3dd7a0(0x565)](_0x9502c0);}}}_0x4db15e[_0x3dd7a0(0xab6)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x3dd7a0(0x74f)==='xoDWY'?(_0x3aa8eb[_0x3dd7a0(0xabb)]=eval(RegExp['$1']),_0x3aa8eb[_0x3dd7a0(0xb9d)]=eval(RegExp['$2'])):(_0x5ee56f[_0x3dd7a0(0x6d0)][_0x3dd7a0(0x318)][_0x3dd7a0(0xb59)](this),this['createWeather'](),this[_0x3dd7a0(0xb65)]()));if(_0x4db15e[_0x3dd7a0(0xab6)](/<SIDEVIEW COLLAPSE>/i))_0x3aa8eb[_0x3dd7a0(0xbc)]=!![];else{if(_0x4db15e[_0x3dd7a0(0xab6)](/<SIDEVIEW NO COLLAPSE>/i)){if('ujlce'!==_0x3dd7a0(0x55b))_0x3aa8eb[_0x3dd7a0(0xbc)]=![];else return this['isForFriendBattleCore']();}}if(_0x4db15e['match'](/<SIDEVIEW SHOW SHADOW>/i))_0x3aa8eb[_0x3dd7a0(0x76b)]=!![];else _0x4db15e[_0x3dd7a0(0xab6)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x3aa8eb['shadow']=![]);if(_0x4db15e[_0x3dd7a0(0xab6)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x3aa8eb[_0x3dd7a0(0x8fb)]=String(RegExp['$1'])['toLowerCase']()['trim']();else{if(_0x4db15e[_0x3dd7a0(0xab6)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){if(_0x3dd7a0(0x805)===_0x3dd7a0(0x20d))_0x2ce8a8[_0x3dd7a0(0xb58)]=_0x488776[_0x3dd7a0(0x482)](_0x1d897b['$1']);else{const _0x1d72e1=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x3dd7a0(0xac9)]('');_0x3aa8eb[_0x3dd7a0(0x8fb)]=DataManager[_0x3dd7a0(0x565)](_0x1d72e1);}}}_0x4db15e[_0x3dd7a0(0xab6)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x3dd7a0(0x153)===_0x3dd7a0(0x153)?(_0x3aa8eb[_0x3dd7a0(0x542)]=Number(RegExp['$1']),_0x3aa8eb['height']=Number(RegExp['$2'])):(_0x21579b[_0x3dd7a0(0x8f2)][_0x3dd7a0(0xd5)]['call'](this),this[_0x3dd7a0(0x49e)]()));if(_0x4db15e['match'](/<SIDEVIEW WEAPON: (.*)>/i))_0x3aa8eb[_0x3dd7a0(0xb58)]=DataManager[_0x3dd7a0(0x482)](RegExp['$1']);else{if(_0x4db15e['match'](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x5a51c6=String(RegExp['$1'])[_0x3dd7a0(0x603)](/[\r\n]+/)[_0x3dd7a0(0xac9)](''),_0x286498=DataManager[_0x3dd7a0(0x565)](_0x5a51c6);_0x3aa8eb[_0x3dd7a0(0xb58)]=DataManager['getWtypeIdWithName'](_0x286498);}}if(Imported[_0x3dd7a0(0x822)]){const _0x755b59=this[_0x3dd7a0(0xabf)]();for(const _0x6c82c3 of _0x755b59){if(_0x3dd7a0(0xe2)!==_0x3dd7a0(0x7bc)){const _0x56fc13=this[_0x3dd7a0(0x2ce)](_0x6c82c3)['Name'][_0x3dd7a0(0xb2d)]()['trim'](),_0x51d0b0=_0x6c82c3['toUpperCase']()['trim']();if(_0x4db15e['match'](VisuMZ['ElementStatusCore'][_0x3dd7a0(0x933)][_0x3dd7a0(0x836)[_0x3dd7a0(0x437)](_0x51d0b0,_0x56fc13)]))_0x3aa8eb[_0x3dd7a0(0x5d4)]=String(RegExp['$1']);else{if(_0x4db15e[_0x3dd7a0(0xab6)](VisuMZ['ElementStatusCore']['RegExp'][_0x3dd7a0(0x268)[_0x3dd7a0(0x437)](_0x51d0b0,_0x56fc13)])){if('fzrBi'==='fzrBi'){const _0x4c7afb=String(RegExp['$1'])[_0x3dd7a0(0x603)](/[\r\n]+/)[_0x3dd7a0(0xac9)]('');_0x3aa8eb[_0x3dd7a0(0x5d4)]=DataManager[_0x3dd7a0(0x565)](_0x4c7afb);}else{const _0x223080=_0x4c689b['BattleCore']['Settings']['Enemy'];_0x223080[_0x3dd7a0(0xfb)]?this[_0x3dd7a0(0x33a)]():this[_0x3dd7a0(0x2f8)]();}}}if(_0x4db15e[_0x3dd7a0(0xab6)](VisuMZ[_0x3dd7a0(0x7e9)][_0x3dd7a0(0x933)]['SvWeaponSolo-%1-%2'[_0x3dd7a0(0x437)](_0x51d0b0,_0x56fc13)]))_0x3aa8eb[_0x3dd7a0(0xb58)]=DataManager[_0x3dd7a0(0x482)](RegExp['$1']);else{if(_0x4db15e[_0x3dd7a0(0xab6)](VisuMZ[_0x3dd7a0(0x7e9)]['RegExp'][_0x3dd7a0(0x6ee)['format'](_0x51d0b0,_0x56fc13)])){const _0x463425=String(RegExp['$1'])[_0x3dd7a0(0x603)](/[\r\n]+/)[_0x3dd7a0(0xac9)](''),_0x45c50b=DataManager[_0x3dd7a0(0x565)](_0x463425);_0x3aa8eb['wtypeId']=DataManager[_0x3dd7a0(0x482)](_0x45c50b);}}if(_0x4db15e[_0x3dd7a0(0xab6)](VisuMZ[_0x3dd7a0(0x7e9)]['RegExp'][_0x3dd7a0(0x966)[_0x3dd7a0(0x437)](_0x51d0b0,_0x56fc13)]))_0x3aa8eb[_0x3dd7a0(0x8fb)]=String(RegExp['$1'])['toLowerCase']()[_0x3dd7a0(0xaef)]();else{if(_0x4db15e[_0x3dd7a0(0xab6)](VisuMZ['ElementStatusCore']['RegExp']['SvMotionIdleMass-%1-%2'[_0x3dd7a0(0x437)](_0x51d0b0,_0x56fc13)])){const _0x14de21=String(RegExp['$1'])[_0x3dd7a0(0x603)](/[\r\n]+/)[_0x3dd7a0(0xac9)]('');_0x3aa8eb[_0x3dd7a0(0x8fb)]=DataManager[_0x3dd7a0(0x565)](_0x14de21);}}}else _0x30b682=_0x1c2822;}}},Game_Enemy[_0x44efce(0x8f2)][_0x44efce(0x5e9)]=function(){const _0x1ba719=_0x44efce;return this[_0x1ba719(0x2f3)]||0x0;},Game_Enemy[_0x44efce(0x8f2)]['attackAnimationId2']=function(){return this['attackAnimationId1']();},Game_Enemy[_0x44efce(0x8f2)][_0x44efce(0x31c)]=function(_0xd98e36){const _0x2e83d0=_0x44efce;return this[_0x2e83d0(0x5e9)]();},Game_Enemy[_0x44efce(0x8f2)]['canBattlerMove']=function(){const _0x2eed11=_0x44efce;if(this[_0x2eed11(0xb36)]()[_0x2eed11(0x77d)][_0x2eed11(0xab6)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler['prototype'][_0x2eed11(0x2a5)][_0x2eed11(0xb59)](this);},Game_Enemy[_0x44efce(0x8f2)][_0x44efce(0x17e)]=function(){const _0x594311=_0x44efce;if(this[_0x594311(0xb36)]()[_0x594311(0x77d)][_0x594311(0xab6)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x44efce(0x8f2)][_0x44efce(0x91f)]=function(){const _0x1e194c=_0x44efce,_0x4cfb82=[];for(const _0x317b7e of this[_0x1e194c(0xb36)]()[_0x1e194c(0x90f)]){if('AHytP'!=='AHytP')this[_0x1e194c(0x2b6)][_0x1e194c(0x893)]=_0x320072['prototype'][_0x1e194c(0xf2)]['call'](this);else{const _0x464af2=$dataSkills[_0x317b7e[_0x1e194c(0xb2a)]];if(_0x464af2&&!_0x4cfb82[_0x1e194c(0x89e)](_0x464af2))_0x4cfb82['push'](_0x464af2);}}return _0x4cfb82;},Game_Enemy[_0x44efce(0x8f2)]['battleUIOffsetX']=function(){const _0x2ed8de=_0x44efce;let _0x3c3109='battleUIOffsetX';if(this['checkCacheKey'](_0x3c3109))return this[_0x2ed8de(0x2b6)][_0x3c3109];return this['_cache'][_0x3c3109]=this[_0x2ed8de(0x594)](this[_0x2ed8de(0xb36)]()),this[_0x2ed8de(0x2b6)][_0x3c3109];},Game_Enemy[_0x44efce(0x8f2)][_0x44efce(0x27d)]=function(){const _0x838b7c=_0x44efce;let _0x5e9df7=_0x838b7c(0x27d);if(this[_0x838b7c(0x84b)](_0x5e9df7))return this[_0x838b7c(0x2b6)][_0x5e9df7];return this[_0x838b7c(0x2b6)][_0x5e9df7]=this[_0x838b7c(0xb26)](this[_0x838b7c(0xb36)]()),this[_0x838b7c(0x2b6)][_0x5e9df7];},Game_Enemy[_0x44efce(0x8f2)]['svBattlerData']=function(){const _0x3d1b1f=_0x44efce;if(this['_svBattlerData']!==undefined)return this['_svBattlerData'];return this[_0x3d1b1f(0x746)](),this[_0x3d1b1f(0x63d)];},Game_Enemy['prototype'][_0x44efce(0xbb3)]=function(){const _0x59948c=_0x44efce;return this[_0x59948c(0x5cd)]()[_0x59948c(0x5d4)]!=='';},Game_Enemy[_0x44efce(0x8f2)][_0x44efce(0x814)]=function(){const _0xb2fa11=_0x44efce;return this[_0xb2fa11(0x5cd)]()['name'];},Game_Enemy[_0x44efce(0x8f2)][_0x44efce(0x5ed)]=function(){const _0xd543a=_0x44efce;return this['hasSvBattler']()?VisuMZ[_0xd543a(0x6d0)][_0xd543a(0x444)][_0xd543a(0x44f)]['SmoothImage']:VisuMZ['BattleCore'][_0xd543a(0x444)][_0xd543a(0x71b)][_0xd543a(0x999)];},Game_Enemy[_0x44efce(0x8f2)]['performAction']=function(_0x571da7){const _0x581fe9=_0x44efce;Game_Battler[_0x581fe9(0x8f2)][_0x581fe9(0x86c)]['call'](this,_0x571da7);if(this[_0x581fe9(0xbb3)]())this['performActionMotions'](_0x571da7);},Game_Enemy[_0x44efce(0x8f2)][_0x44efce(0x49e)]=function(){const _0x4764ab=_0x44efce,_0x3eecbb=this[_0x4764ab(0x5cd)]()[_0x4764ab(0xb58)]||0x0,_0x52a0bd=$dataSystem[_0x4764ab(0x889)][_0x3eecbb];if(_0x52a0bd){if(_0x52a0bd[_0x4764ab(0xa15)]===0x0)this[_0x4764ab(0x7c8)](_0x4764ab(0x15d));else{if(_0x52a0bd[_0x4764ab(0xa15)]===0x1)_0x4764ab(0xa57)!=='ukCPx'?_0x561c30[_0x4764ab(0x8f2)][_0x4764ab(0x154)][_0x4764ab(0xb59)](this):this[_0x4764ab(0x7c8)](_0x4764ab(0x9ae));else{if(_0x52a0bd[_0x4764ab(0xa15)]===0x2){if(_0x4764ab(0x15f)!==_0x4764ab(0x56b))this[_0x4764ab(0x7c8)](_0x4764ab(0x3c4));else return _0x164786[_0x4764ab(0x387)]()[_0x4764ab(0xb09)]();}}}}},Game_Enemy['prototype'][_0x44efce(0x325)]=function(){const _0x19046e=_0x44efce,_0x20b205=this['svBattlerData']()['wtypeId']||0x0,_0x26a58d=$dataSystem[_0x19046e(0x889)][_0x20b205];_0x26a58d&&this[_0x19046e(0xa67)](_0x26a58d['weaponImageId']);},Game_Enemy[_0x44efce(0x8f2)]['getAttackMotion']=function(){const _0x36fb73=_0x44efce,_0xf966ef=this[_0x36fb73(0x5cd)]()[_0x36fb73(0xb58)]||0x0;return $dataSystem['attackMotions'][_0xf966ef];},Game_Enemy[_0x44efce(0x8f2)][_0x44efce(0x5c9)]=function(_0x191649){const _0x2c9650=_0x44efce;return this[_0x2c9650(0x691)]();},Game_Enemy[_0x44efce(0x8f2)][_0x44efce(0x2c8)]=function(){const _0x583599=_0x44efce;Game_Battler[_0x583599(0x8f2)][_0x583599(0x2c8)]['call'](this),this[_0x583599(0xb1c)]()&&this[_0x583599(0xbb3)]()&&(_0x583599(0x3a0)!=='lnAuA'?this[_0x583599(0x7c8)](_0x583599(0x1ea)):(this['push'](_0x583599(0x149),[_0x529052],_0x10efc2,_0x37b241),this['push']('performMoveToTargets',_0x164795,_0x639a49,'front\x20base',_0x5610e0,!![],_0x583599(0x221),!![]),this[_0x583599(0xb70)](_0x583599(0x7c8),[_0x98104b],_0x583599(0x252)),this['push'](_0x583599(0xa9e)))),SoundManager[_0x583599(0x32b)]();},Game_Enemy['prototype'][_0x44efce(0x854)]=function(){const _0x406e55=_0x44efce;Game_Battler[_0x406e55(0x8f2)]['performEvasion'][_0x406e55(0xb59)](this),this[_0x406e55(0x7c8)](_0x406e55(0xaac));},Game_Enemy['prototype']['performMagicEvasion']=function(){const _0x4368e8=_0x44efce;Game_Battler[_0x4368e8(0x8f2)][_0x4368e8(0x148)][_0x4368e8(0xb59)](this),this[_0x4368e8(0x7c8)](_0x4368e8(0xaac));},Game_Enemy[_0x44efce(0x8f2)]['performCounter']=function(){const _0x236078=_0x44efce;Game_Battler[_0x236078(0x8f2)][_0x236078(0xd5)][_0x236078(0xb59)](this),this['performAttack']();},Game_Enemy['prototype'][_0x44efce(0x934)]=function(){const _0x41ce06=_0x44efce;if(this['hasSvBattler']()){if(this[_0x41ce06(0x9cd)]()>=0x1)return!![];return this['svBattlerData']()[_0x41ce06(0xbc)];}else{if(_0x41ce06(0x4da)!==_0x41ce06(0x7d2))return!![];else{if(this[_0x41ce06(0x2b2)]===_0x6d4721)this[_0x41ce06(0x463)]();this['_battlePortrait']=_0x231466;if(_0x3ea081['isSceneBattle']()&&_0x2e6395[_0x41ce06(0xaa6)]()[_0x41ce06(0x89e)](this)){const _0x5c74e1=_0x201f64['_scene']['_statusWindow'];if(_0x5c74e1)_0x5c74e1[_0x41ce06(0x1f1)](this);}}}},Game_Enemy[_0x44efce(0x8f2)][_0x44efce(0xf2)]=function(){const _0x141160=_0x44efce;return this[_0x141160(0x5cd)]()[_0x141160(0xabb)];},Game_Enemy[_0x44efce(0x8f2)]['svBattlerAnchorY']=function(){const _0x414c41=_0x44efce;return this[_0x414c41(0x5cd)]()[_0x414c41(0xb9d)];},Game_Enemy[_0x44efce(0x8f2)]['svBattlerShadowVisible']=function(){const _0x2efc44=_0x44efce;return this[_0x2efc44(0x5cd)]()[_0x2efc44(0x76b)];},VisuMZ['BattleCore']['Game_Enemy_transform']=Game_Enemy['prototype'][_0x44efce(0x267)],Game_Enemy[_0x44efce(0x8f2)][_0x44efce(0x267)]=function(_0x4393b9){const _0xd0579f=_0x44efce;VisuMZ[_0xd0579f(0x6d0)]['Game_Enemy_transform']['call'](this,_0x4393b9),this['clearBattleCoreData'](),this[_0xd0579f(0x746)]();const _0x3c195b=this[_0xd0579f(0x6dd)]();if(_0x3c195b)_0x3c195b['setBattler'](this);},Game_Unit[_0x44efce(0x8f2)]['processBattleCoreJS']=function(_0x570862){const _0x296555=_0x44efce;for(const _0x4513d3 of this['members']()){if(_0x4513d3)_0x4513d3[_0x296555(0x623)](_0x570862);}},Game_Unit[_0x44efce(0x8f2)][_0x44efce(0x478)]=function(){const _0x2e82e9=_0x44efce,_0x3251ae=this[_0x2e82e9(0xb09)]();return _0x3251ae[Math[_0x2e82e9(0x2c7)](_0x3251ae['length'])];},VisuMZ['BattleCore'][_0x44efce(0x313)]=Game_Party[_0x44efce(0x8f2)][_0x44efce(0x81a)],Game_Party['prototype'][_0x44efce(0x81a)]=function(_0x519ea6){const _0x1bc2dd=_0x44efce;VisuMZ[_0x1bc2dd(0x6d0)][_0x1bc2dd(0x313)][_0x1bc2dd(0xb59)](this,_0x519ea6),BattleManager[_0x1bc2dd(0xb0a)]();},VisuMZ[_0x44efce(0x6d0)]['Game_Party_removeActor']=Game_Party['prototype'][_0x44efce(0x76a)],Game_Party[_0x44efce(0x8f2)][_0x44efce(0x76a)]=function(_0xf62760){const _0x43feff=_0x44efce;VisuMZ[_0x43feff(0x6d0)][_0x43feff(0x644)]['call'](this,_0xf62760),BattleManager[_0x43feff(0xb0a)]();},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x112)]=Game_Troop[_0x44efce(0x8f2)][_0x44efce(0x803)],Game_Troop[_0x44efce(0x8f2)]['setup']=function(_0x2edf23){const _0x280fc1=_0x44efce;$gameTemp[_0x280fc1(0x1ce)](),$gameTemp['applyForcedGameTroopSettingsBattleCore'](_0x2edf23),VisuMZ[_0x280fc1(0x6d0)][_0x280fc1(0x112)][_0x280fc1(0xb59)](this,_0x2edf23),this[_0x280fc1(0xa50)]();},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x37a)]=Game_Troop['prototype'][_0x44efce(0x50c)],Game_Troop[_0x44efce(0x8f2)][_0x44efce(0x50c)]=function(){const _0x3036f9=_0x44efce;let _0x5b390a=VisuMZ[_0x3036f9(0x6d0)]['Game_Troop_expTotal'][_0x3036f9(0xb59)](this);return this[_0x3036f9(0x916)]&&(_0x5b390a*=this[_0x3036f9(0x916)]()),Math[_0x3036f9(0x3bb)](_0x5b390a);},Game_Troop['prototype'][_0x44efce(0x916)]=function(){return 0x1;},Game_Troop[_0x44efce(0x8f2)][_0x44efce(0xa50)]=function(){const _0x4077e7=_0x44efce,_0x4bae20=this[_0x4077e7(0xb08)]()[_0x4077e7(0x5d4)]||'';if(_0x4bae20[_0x4077e7(0xab6)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){if(_0x4077e7(0x419)==='qNXSI')this['push'](_0x4077e7(0x5f0),_0x16d7a3,_0x1360a3);else{const _0x1412dd=RegExp['$1'][_0x4077e7(0x603)](',')['map'](_0x26eba0=>Number(_0x26eba0));this[_0x4077e7(0x526)](),this[_0x4077e7(0x3b1)](_0x1412dd);}}},Game_Troop[_0x44efce(0x8f2)][_0x44efce(0x526)]=function(){const _0x5c2fd3=_0x44efce;let _0x7dabe6=_0x5c2fd3(0x731)+'\x0a';_0x7dabe6+='version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.';if(Imported[_0x5c2fd3(0x70a)]){if(VisuMZ[_0x5c2fd3(0x3f9)][_0x5c2fd3(0x1e5)]<1.11){if(_0x5c2fd3(0x343)!==_0x5c2fd3(0x343))return 0x1;else alert(_0x7dabe6['format'](_0x5c2fd3(0x507))),SceneManager[_0x5c2fd3(0xb2e)]();}}Imported['VisuMZ_2_BattleSystemCTB']&&(VisuMZ[_0x5c2fd3(0x180)][_0x5c2fd3(0x1e5)]<1.19&&(alert(_0x7dabe6[_0x5c2fd3(0x437)]('CTB')),SceneManager[_0x5c2fd3(0xb2e)]())),Imported[_0x5c2fd3(0x1fb)]&&(VisuMZ[_0x5c2fd3(0x8dc)][_0x5c2fd3(0x1e5)]<1.15&&(alert(_0x7dabe6[_0x5c2fd3(0x437)](_0x5c2fd3(0xb21))),SceneManager[_0x5c2fd3(0xb2e)]()));},Game_Troop[_0x44efce(0x8f2)][_0x44efce(0x3b1)]=function(_0x5eb037){const _0x59b3ef=_0x44efce;this[_0x59b3ef(0x4e1)]={};for(const _0x3c7b51 of this['members']()){if('hSCsi'!=='XGeHw'){if(!_0x3c7b51)continue;_0x3c7b51['setLetter']('');}else{if(!_0x29cafa[_0x59b3ef(0xbab)]())return;const _0x4f6bfd=_0x29dac6[_0x59b3ef(0x3f8)]();if(!_0x4f6bfd)return;_0x4f6bfd[_0x59b3ef(0x227)]('battleSpin');}}for(const _0x197ba2 of _0x5eb037){const _0x411698=$dataTroops[_0x197ba2];if(_0x411698)this['addExtendedTroopMembers'](_0x411698);}this['makeUniqueNames']();},Game_Troop[_0x44efce(0x8f2)][_0x44efce(0x624)]=function(_0x576a82){const _0x842147=_0x44efce;for(const _0x1e561b of _0x576a82[_0x842147(0x19f)]){if($dataEnemies[_0x1e561b[_0x842147(0x134)]]){const _0x54ebe3=_0x1e561b[_0x842147(0x134)],_0x548106=_0x1e561b['x'],_0x12daa9=_0x1e561b['y'],_0xbfda34=new Game_Enemy(_0x54ebe3,_0x548106,_0x12daa9);_0x1e561b[_0x842147(0x57a)]&&_0xbfda34[_0x842147(0x7d6)](),this[_0x842147(0x61d)][_0x842147(0xb70)](_0xbfda34);}}},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x368)]=Game_Map[_0x44efce(0x8f2)]['setupBattleback'],Game_Map[_0x44efce(0x8f2)][_0x44efce(0x17a)]=function(){const _0x41ca62=_0x44efce;VisuMZ[_0x41ca62(0x6d0)]['Game_Map_setupBattleback'][_0x41ca62(0xb59)](this),this['setupBattlebackBattleCore']();},Game_Map[_0x44efce(0x8f2)][_0x44efce(0x30f)]=function(){const _0x192f5a=_0x44efce;this[_0x192f5a(0x76c)]={},this['_regionBattleback2']={};if(!$dataMap)return;const _0x3682d6=$dataMap[_0x192f5a(0x77d)];if(!_0x3682d6)return;const _0x448c1f=_0x3682d6[_0x192f5a(0xab6)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x448c1f)for(const _0x1d53aa of _0x448c1f){if(_0x192f5a(0x626)===_0x192f5a(0x626)){_0x1d53aa[_0x192f5a(0xab6)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x44d315=Number(RegExp['$1']),_0x11fcaf=Number(RegExp['$2']),_0x4af951=_0x11fcaf===0x1?this[_0x192f5a(0x76c)]:this[_0x192f5a(0x31d)],_0x389f5f=String(RegExp['$3']);_0x4af951[_0x44d315]=_0x389f5f;}else _0xe4f49d[_0x192f5a(0x333)]=!![],this[_0x192f5a(0x5ef)](_0x404bb1);}},VisuMZ['BattleCore'][_0x44efce(0x561)]=Game_Map[_0x44efce(0x8f2)][_0x44efce(0x695)],Game_Map['prototype']['battleback1Name']=function(){const _0x17a62a=_0x44efce;if(!BattleManager[_0x17a62a(0xb7a)]()){if(_0x17a62a(0x222)===_0x17a62a(0x7fe))this[_0x17a62a(0x8c7)]=!![],_0x3e1383[_0x17a62a(0x928)](_0x38cb8b[_0x17a62a(0x5e3)]),_0x2f4674[_0x17a62a(0x370)](),_0x232962[_0x17a62a(0x512)][_0x17a62a(0xda)]=!![];else{const _0x1bc97c=$gamePlayer[_0x17a62a(0x815)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x17a62a(0x76c)]&&this[_0x17a62a(0x76c)][_0x1bc97c])return this[_0x17a62a(0x76c)][_0x1bc97c];}}return VisuMZ['BattleCore']['Game_Map_battleback1Name'][_0x17a62a(0xb59)](this);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x2e7)]=Game_Map['prototype'][_0x44efce(0x7be)],Game_Map[_0x44efce(0x8f2)]['battleback2Name']=function(){const _0x3c44f8=_0x44efce;if(!BattleManager[_0x3c44f8(0xb7a)]()){const _0xda11da=$gamePlayer[_0x3c44f8(0x815)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x3c44f8(0x76c)]&&this[_0x3c44f8(0x31d)][_0xda11da]){if(_0x3c44f8(0x995)!==_0x3c44f8(0x1bb))return this['_regionBattleback2'][_0xda11da];else this[_0x3c44f8(0xb27)]&&this[_0x3c44f8(0x317)](this[_0x3c44f8(0xb27)]);}}return VisuMZ['BattleCore']['Game_Map_battleback2Name'][_0x3c44f8(0xb59)](this);},VisuMZ[_0x44efce(0x6d0)]['Game_Map_encounterList']=Game_Map[_0x44efce(0x8f2)][_0x44efce(0x10b)],Game_Map['prototype']['encounterList']=function(){const _0x394a80=_0x44efce;let _0x43dc02=JsonEx['makeDeepCopy'](VisuMZ[_0x394a80(0x6d0)][_0x394a80(0x64d)][_0x394a80(0xb59)](this));return VisuMZ[_0x394a80(0x6d0)][_0x394a80(0x883)](_0x43dc02);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x883)]=function(_0x362720){const _0x601067=_0x44efce;var _0x2df805,_0x402c01,_0x250b51;for(_0x250b51=_0x362720[_0x601067(0x496)]-0x1;_0x250b51>0x0;_0x250b51--){_0x2df805=Math[_0x601067(0xa3a)](Math['random']()*(_0x250b51+0x1)),_0x402c01=_0x362720[_0x250b51],_0x362720[_0x250b51]=_0x362720[_0x2df805],_0x362720[_0x2df805]=_0x402c01;}return _0x362720;},VisuMZ[_0x44efce(0x6d0)]['Game_Interpreter_PluginCommand']=Game_Interpreter[_0x44efce(0x8f2)]['command357'],Game_Interpreter[_0x44efce(0x8f2)][_0x44efce(0x35c)]=function(_0x110666){const _0x23480d=_0x44efce;return $gameTemp['setLastPluginCommandInterpreter'](this),VisuMZ['BattleCore'][_0x23480d(0x109)][_0x23480d(0xb59)](this,_0x110666);},VisuMZ[_0x44efce(0x6d0)]['Game_Interpreter_updateWaitMode']=Game_Interpreter[_0x44efce(0x8f2)][_0x44efce(0x843)],Game_Interpreter[_0x44efce(0x8f2)][_0x44efce(0x843)]=function(){const _0x5454fd=_0x44efce;if(SceneManager[_0x5454fd(0xbab)]())switch(this[_0x5454fd(0x495)]){case _0x5454fd(0xb75):if(Imported[_0x5454fd(0x22e)]){if(_0x5454fd(0x9eb)==='krOyl'){if($gameScreen[_0x5454fd(0x22c)]()['angleDuration']>0x0)return!![];this[_0x5454fd(0x495)]='';}else return this[_0x5454fd(0x685)]()[_0x5454fd(0x42d)](_0x17e2c3=>_0x17e2c3[_0x5454fd(0x3c9)]());}break;case _0x5454fd(0x53f):if(BattleManager['_spriteset']['isAnimationPlaying']())return!![];this[_0x5454fd(0x495)]='';break;case _0x5454fd(0xb4d):if(Imported['VisuMZ_3_ActSeqCamera']){if(_0x5454fd(0xa5a)!==_0x5454fd(0xa5a))return this[_0x5454fd(0x5a3)][_0x5454fd(0x6b5)]===0x0&&this[_0x5454fd(0x5a3)][_0x5454fd(0x207)]===0x0;else{if($gameScreen[_0x5454fd(0x22c)]()[_0x5454fd(0x69e)]>0x0)return!![];if($gameScreen[_0x5454fd(0x22c)]()[_0x5454fd(0xa0d)]>0x0)return!![];this[_0x5454fd(0x495)]='';}}break;case _0x5454fd(0x4f5):if(BattleManager[_0x5454fd(0x948)]['isEffecting']())return!![];this['_waitMode']='';break;case _0x5454fd(0xa02):if(BattleManager[_0x5454fd(0x948)][_0x5454fd(0x6b4)]())return!![];this[_0x5454fd(0x495)]='';break;case _0x5454fd(0xbb4):if(BattleManager['_spriteset'][_0x5454fd(0x788)]())return!![];this[_0x5454fd(0x495)]='';break;case _0x5454fd(0x35b):if(BattleManager[_0x5454fd(0x8fd)]['isBusy']())return!![];this['_waitMode']='';break;case _0x5454fd(0x8b5):if(BattleManager[_0x5454fd(0x948)][_0x5454fd(0x225)]())return!![];this['_waitMode']='';break;case _0x5454fd(0x14d):if(BattleManager[_0x5454fd(0x948)]['isAnyoneChangingOpacity']())return!![];this[_0x5454fd(0x495)]='';break;case _0x5454fd(0x60c):if(BattleManager[_0x5454fd(0x948)][_0x5454fd(0x6de)]())return!![];this[_0x5454fd(0x495)]='';break;case _0x5454fd(0xdb):if(BattleManager[_0x5454fd(0x948)]['isAnyoneSkewing']())return!![];this[_0x5454fd(0x495)]='';break;case _0x5454fd(0x345):if(Imported['VisuMZ_3_ActSeqProjectiles']){if(BattleManager[_0x5454fd(0x948)][_0x5454fd(0x6eb)]())return!![];this[_0x5454fd(0x495)]='';}break;case _0x5454fd(0x4d9):if(Imported[_0x5454fd(0x22e)]){if($gameScreen[_0x5454fd(0x22c)]()[_0x5454fd(0x352)]>0x0)return!![];this[_0x5454fd(0x495)]='';}break;case _0x5454fd(0x96b):if(BattleManager[_0x5454fd(0x948)][_0x5454fd(0x587)]())return!![];this[_0x5454fd(0x495)]='';break;case'battleZoom':if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x5454fd(0x22c)]()[_0x5454fd(0x400)]>0x0)return!![];this[_0x5454fd(0x495)]='';}break;case'battleInjectPrep':if(Imported[_0x5454fd(0x8d9)]){if(_0x5454fd(0xb77)!==_0x5454fd(0x384)){if(BattleManager[_0x5454fd(0x948)][_0x5454fd(0x808)]){if(BattleManager[_0x5454fd(0x948)]['isAnyoneInjectAniPrepping']())return!![];this[_0x5454fd(0x495)]=_0x5454fd(0x296);}else{if('KZWMk'!=='KZWMk'){const _0xf90a36=_0xb02832['width'],_0xf3e7cb=_0x13fbe4[_0x5454fd(0x18c)]((_0x31950a[_0x5454fd(0x613)]-_0xf90a36)/0x2),_0x159938=this['helpAreaHeight'](),_0x5b7d8b=(_0x18fcae[_0x5454fd(0x737)]-_0x134f6d[_0x5454fd(0x165)])/-0x2;return new _0x4e95df(_0xf3e7cb,_0x5b7d8b,_0xf90a36,_0x159938);}else this['_waitMode']='';}break;}else _0x2513ac[_0x5454fd(0x6d0)][_0x5454fd(0xb1a)]&&_0x6f7faf[_0x5454fd(0x6d0)]['ParseActorNotetags'][_0x5454fd(0xb59)](this,_0x1264ba),_0x4c2961[_0x5454fd(0x6d0)]['Parse_Notetags_TraitObjects'](_0x59372c);}break;case'battleInjectAni':if(Imported[_0x5454fd(0x8d9)]){if(_0x5454fd(0x460)!==_0x5454fd(0x460))return[_0x1b8513]['concat'](_0x5e682e);else{if(BattleManager[_0x5454fd(0x948)][_0x5454fd(0x488)]())return!![];this['_waitMode']='';}}break;}return VisuMZ['BattleCore'][_0x5454fd(0x559)][_0x5454fd(0xb59)](this);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0xb3c)]=Game_Interpreter[_0x44efce(0x8f2)][_0x44efce(0xb3e)],Game_Interpreter[_0x44efce(0x8f2)][_0x44efce(0xb3e)]=function(_0x41e9bf){const _0x29211a=_0x44efce;return!$gameParty[_0x29211a(0x4d8)]()?this[_0x29211a(0x7f4)](_0x41e9bf):VisuMZ[_0x29211a(0x6d0)][_0x29211a(0xb3c)][_0x29211a(0xb59)](this,_0x41e9bf);},Game_Interpreter[_0x44efce(0x8f2)][_0x44efce(0x971)]=function(_0x822b7f){const _0x223fad=_0x44efce;return VisuMZ[_0x223fad(0x6d0)][_0x223fad(0xb3c)][_0x223fad(0xb59)](this,_0x822b7f),BattleManager['setEventCallback'](_0x2104ce=>{const _0x33fd06=_0x223fad;'NcZmh'!=='NcZmh'?(_0x2cf3f6+=_0x522963['isActor']()?-_0x3fcac5:_0x58f93d,_0x127056+=_0xd4c700):this['_branch'][this[_0x33fd06(0x9b1)]]=_0x2104ce;}),!![];},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x37d)]=function(_0x17ccf7){const _0x2aec9c=_0x44efce,_0x2137f5=$dataCommonEvents[_0x17ccf7];if(!_0x2137f5)return![];if(_0x2137f5[_0x2aec9c(0x570)][_0x2aec9c(0x496)]<=0x1)return![];return!![];},Game_Interpreter[_0x44efce(0x8f2)][_0x44efce(0x7f4)]=function(_0x89e9c){const _0x16b6f5=_0x44efce,_0x14dbda=VisuMZ[_0x16b6f5(0x6d0)][_0x16b6f5(0x444)][_0x16b6f5(0x840)],_0x182568=_0x14dbda[_0x16b6f5(0x5e3)],_0x484508=$dataCommonEvents[_0x182568];if(_0x484508&&VisuMZ[_0x16b6f5(0x6d0)][_0x16b6f5(0x37d)](_0x182568)){if(_0x16b6f5(0x7af)!==_0x16b6f5(0x7af))_0x48ad51=this[_0x16b6f5(0xa1b)]();else{const _0x1da4ce=this['isOnCurrentMap']()?this[_0x16b6f5(0x595)]:0x0,_0x1b709d=_0x484508['list'];this[_0x16b6f5(0x3d7)](_0x1b709d,_0x1da4ce),this[_0x16b6f5(0x636)]=JsonEx[_0x16b6f5(0x414)](this[_0x16b6f5(0x636)]);const _0x13f4a6={'code':0xbc3,'indent':this[_0x16b6f5(0x9b1)],'parameters':JsonEx[_0x16b6f5(0x414)](_0x89e9c)};return this['_list'][_0x16b6f5(0x81b)](this[_0x16b6f5(0x49d)]+0x1,0x0,_0x13f4a6),!![];}}else{if(_0x16b6f5(0x146)==='EJimf'){const _0x3566ec=_0x59e25e[_0x16b6f5(0x414)](_0xd7fb14);_0x3566ec['missed']=![],_0x3566ec['evaded']=![],_0x3566ec[_0x16b6f5(0x329)]=0x0,this['_damagePopupArray'][_0x16b6f5(0xb70)](_0x3566ec);}else return VisuMZ[_0x16b6f5(0x6d0)][_0x16b6f5(0xb3c)][_0x16b6f5(0xb59)](this,_0x89e9c);}},VisuMZ[_0x44efce(0x6d0)]['BattleManager_onEncounter']=BattleManager[_0x44efce(0x114)],BattleManager[_0x44efce(0x114)]=function(){const _0x5c491a=_0x44efce;VisuMZ[_0x5c491a(0x6d0)][_0x5c491a(0x381)]['call'](this),this[_0x5c491a(0x6be)]();},BattleManager[_0x44efce(0x6be)]=function(){const _0x5b0495=_0x44efce,_0x4ac827=VisuMZ['BattleCore'][_0x5b0495(0x444)][_0x5b0495(0x840)],_0x4c0eb2=_0x4ac827[_0x5b0495(0x5e3)];_0x4c0eb2&&VisuMZ[_0x5b0495(0x6d0)][_0x5b0495(0x37d)](_0x4c0eb2)&&(this[_0x5b0495(0x8c7)]=!![],$gameTemp[_0x5b0495(0x928)](_0x4ac827[_0x5b0495(0x5e3)]),$gameMap[_0x5b0495(0x370)](),$gameMap['_interpreter'][_0x5b0495(0xda)]=!![]),_0x4ac827['DefeatEvent']>0x0&&(this[_0x5b0495(0x2ca)]=!![]);},VisuMZ['BattleCore']['Scene_Map_updateCallMenu']=Scene_Map[_0x44efce(0x8f2)][_0x44efce(0x6db)],Scene_Map['prototype'][_0x44efce(0x6db)]=function(){const _0x468a44=_0x44efce;if(BattleManager[_0x468a44(0x8c7)])return;VisuMZ[_0x468a44(0x6d0)][_0x468a44(0x577)][_0x468a44(0xb59)](this);},VisuMZ[_0x44efce(0x6d0)]['Scene_Map_launchBattle']=Scene_Map[_0x44efce(0x8f2)][_0x44efce(0xba5)],Scene_Map[_0x44efce(0x8f2)][_0x44efce(0xba5)]=function(){const _0x467c5e=_0x44efce;BattleManager[_0x467c5e(0x8c7)]?this[_0x467c5e(0x1ae)]():_0x467c5e(0x4ff)===_0x467c5e(0x8a6)?this[_0x467c5e(0x7e3)]():VisuMZ[_0x467c5e(0x6d0)][_0x467c5e(0xa08)][_0x467c5e(0xb59)](this);},Scene_Map[_0x44efce(0x8f2)]['battleCorePreBattleCommonEvent']=function(){const _0x511133=_0x44efce;this[_0x511133(0xa7b)]=!![];},VisuMZ[_0x44efce(0x6d0)]['SceneManager_isSceneChanging']=SceneManager['isSceneChanging'],SceneManager[_0x44efce(0x977)]=function(){const _0x2849f2=_0x44efce;if(BattleManager[_0x2849f2(0x8c7)])return![];return VisuMZ[_0x2849f2(0x6d0)][_0x2849f2(0x892)]['call'](this);},VisuMZ['BattleCore']['Game_Interpreter_terminate']=Game_Interpreter[_0x44efce(0x8f2)][_0x44efce(0x36c)],Game_Interpreter['prototype'][_0x44efce(0x36c)]=function(){const _0x1f657a=_0x44efce;VisuMZ['BattleCore'][_0x1f657a(0xa87)][_0x1f657a(0xb59)](this),this[_0x1f657a(0xda)]&&(this[_0x1f657a(0xda)]=undefined,SceneManager[_0x1f657a(0x45b)][_0x1f657a(0x667)]());},Scene_Map[_0x44efce(0x8f2)][_0x44efce(0x667)]=function(){const _0x35f5da=_0x44efce;BattleManager['_battleCoreBattleStartEvent']=undefined,BattleManager[_0x35f5da(0x9b3)]=!![],this[_0x35f5da(0x6cf)]();},VisuMZ['BattleCore'][_0x44efce(0xb4e)]=Scene_Map[_0x44efce(0x8f2)][_0x44efce(0x64a)],Scene_Map['prototype'][_0x44efce(0x64a)]=function(){const _0x2cd7bd=_0x44efce;VisuMZ[_0x2cd7bd(0x6d0)][_0x2cd7bd(0xb4e)]['call'](this),BattleManager[_0x2cd7bd(0x9b3)]&&(this['_active']=!![],BattleManager[_0x2cd7bd(0x9b3)]=undefined);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x767)]=Scene_Map[_0x44efce(0x8f2)][_0x44efce(0x64a)],Scene_Map[_0x44efce(0x8f2)][_0x44efce(0x64a)]=function(){const _0x1effa1=_0x44efce;VisuMZ[_0x1effa1(0x6d0)][_0x1effa1(0x767)][_0x1effa1(0xb59)](this),$gameTemp[_0x1effa1(0x1ce)]();},VisuMZ[_0x44efce(0x6d0)]['Scene_ItemBase_applyItem']=Scene_ItemBase[_0x44efce(0x8f2)][_0x44efce(0x4eb)],Scene_ItemBase[_0x44efce(0x8f2)][_0x44efce(0x4eb)]=function(){const _0x39a0cb=_0x44efce;VisuMZ[_0x39a0cb(0x6d0)][_0x39a0cb(0x1a9)]['call'](this);if(this[_0x39a0cb(0x987)]()[_0x39a0cb(0x77d)][_0x39a0cb(0xab6)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this[_0x39a0cb(0x987)]()['note']['match'](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x39a0cb(0xb9a)]=[]),DataManager[_0x39a0cb(0x424)](this[_0x39a0cb(0x987)]())&&($gameTemp[_0x39a0cb(0xb9a)]=[]);},VisuMZ[_0x44efce(0x6d0)]['Scene_Options_maxCommands']=Scene_Options[_0x44efce(0x8f2)][_0x44efce(0x965)],Scene_Options[_0x44efce(0x8f2)][_0x44efce(0x965)]=function(){const _0x92d94d=_0x44efce;let _0x5a643e=VisuMZ['BattleCore'][_0x92d94d(0x83a)][_0x92d94d(0xb59)](this);const _0x30c2e7=VisuMZ[_0x92d94d(0x6d0)][_0x92d94d(0x444)];if(_0x30c2e7['AutoBattle'][_0x92d94d(0x548)]&&_0x30c2e7[_0x92d94d(0xa9f)][_0x92d94d(0xae5)])_0x5a643e+=0x2;if(_0x30c2e7[_0x92d94d(0x2e1)][_0x92d94d(0x548)]&&_0x30c2e7[_0x92d94d(0x2e1)][_0x92d94d(0xae5)])_0x5a643e+=0x1;return _0x5a643e;},VisuMZ['BattleCore'][_0x44efce(0x32a)]=Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x64a)],Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x64a)]=function(){const _0x159000=_0x44efce;VisuMZ[_0x159000(0x6d0)][_0x159000(0x32a)][_0x159000(0xb59)](this),this['clearOnceParallelInterpreters']();},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x6ef)]=Scene_Battle['prototype'][_0x44efce(0x66d)],Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x66d)]=function(){const _0xdf7d7f=_0x44efce;if(SceneManager['isPreviousSceneBattleTransitionable']()){Scene_Message[_0xdf7d7f(0x8f2)][_0xdf7d7f(0x66d)][_0xdf7d7f(0xb59)](this);this[_0xdf7d7f(0x948)]&&this[_0xdf7d7f(0x948)][_0xdf7d7f(0x9da)]();if(BattleManager[_0xdf7d7f(0x304)]){if(_0xdf7d7f(0x82f)===_0xdf7d7f(0x1e8))return this[_0xdf7d7f(0x4de)](_0x4f7c2d);else BattleManager[_0xdf7d7f(0x980)]();}}else VisuMZ[_0xdf7d7f(0x6d0)][_0xdf7d7f(0x6ef)]['call'](this),$gameTroop['onBattleStartOnceParallels']();},VisuMZ['BattleCore'][_0x44efce(0x185)]=Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x6cf)],Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x6cf)]=function(){const _0x9b92e8=_0x44efce;SceneManager[_0x9b92e8(0x198)]()?Scene_Message['prototype']['stop'][_0x9b92e8(0xb59)](this):VisuMZ[_0x9b92e8(0x6d0)][_0x9b92e8(0x185)][_0x9b92e8(0xb59)](this);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x957)]=Scene_Battle['prototype']['terminate'],Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x36c)]=function(){const _0x2c9c52=_0x44efce;SceneManager[_0x2c9c52(0x198)]()?Scene_Message[_0x2c9c52(0x8f2)][_0x2c9c52(0x36c)][_0x2c9c52(0xb59)](this):VisuMZ['BattleCore']['Scene_Battle_terminate']['call'](this),this[_0x2c9c52(0xb71)]();},Scene_Battle[_0x44efce(0x8f2)]['isRightInputMode']=function(){const _0x15e85b=_0x44efce;if(ConfigManager['uiMenuStyle']&&ConfigManager[_0x15e85b(0x821)]!==undefined)return ConfigManager[_0x15e85b(0x821)];else{if(this[_0x15e85b(0x1e6)]()===_0x15e85b(0x2c9))return![];else{if(_0x15e85b(0x1c8)!=='opXmW')this[_0x15e85b(0x59d)][_0x15e85b(0xac9)](_0xf9b4f5),this[_0x15e85b(0x28f)](_0x6ee976)?this[_0x15e85b(0x3de)]()[_0x15e85b(0x50e)](_0x308336):this[_0x15e85b(0x4b2)][_0x15e85b(0x50e)](_0x2b5efd);else{return Scene_Message[_0x15e85b(0x8f2)][_0x15e85b(0xaf0)][_0x15e85b(0xb59)](this);;}}}},VisuMZ[_0x44efce(0x6d0)]['Scene_Battle_createAllWindows']=Scene_Battle['prototype']['createAllWindows'],Scene_Battle[_0x44efce(0x8f2)]['createAllWindows']=function(){const _0x7a0782=_0x44efce;this[_0x7a0782(0x7f1)](),VisuMZ[_0x7a0782(0x6d0)][_0x7a0782(0x85b)][_0x7a0782(0xb59)](this),this[_0x7a0782(0x5a4)]();},VisuMZ[_0x44efce(0x6d0)]['Scene_Battle_createCancelButton']=Scene_Battle['prototype'][_0x44efce(0x573)],Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x573)]=function(){const _0x49e84d=_0x44efce;VisuMZ['BattleCore']['Scene_Battle_createCancelButton'][_0x49e84d(0xb59)](this);if(this[_0x49e84d(0x1e6)]()==='border'){if('muziQ'===_0x49e84d(0x231))this[_0x49e84d(0x4aa)]();else return-0x1;}},Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x159)]=function(_0x3937ba){const _0x4d930e=_0x44efce;if(_0x3937ba)this[_0x4d930e(0x773)]['x']=(Graphics[_0x4d930e(0x542)]-Graphics['boxWidth'])/0x2,this[_0x4d930e(0x773)]['y']=(Graphics['height']-Graphics['boxHeight'])/0x2;else{if(_0x4d930e(0x7e5)==='TGcTK'){this[_0x4d930e(0x36f)](0x0,0x0,0x0,0x0);return;}else this[_0x4d930e(0x773)]['x']=Graphics[_0x4d930e(0x542)]*0xa,this[_0x4d930e(0x773)]['y']=Graphics['height']*0xa;}},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x748)]=Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x293)],Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x293)]=function(){const _0x2e9f57=_0x44efce,_0x37da3e=BattleManager[_0x2e9f57(0x918)]();VisuMZ[_0x2e9f57(0x6d0)][_0x2e9f57(0x748)][_0x2e9f57(0xb59)](this);if(_0x37da3e){if(_0x37da3e===BattleManager[_0x2e9f57(0x918)]())return;if(_0x37da3e===BattleManager[_0x2e9f57(0x427)])return;if(_0x37da3e[_0x2e9f57(0x6dd)]())_0x37da3e[_0x2e9f57(0x6dd)]()[_0x2e9f57(0x23f)]();}},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0xef)]=Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0xa70)],Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0xa70)]=function(){const _0xdb412e=_0x44efce,_0x2c39c5=BattleManager[_0xdb412e(0x918)]();if(_0x2c39c5&&_0x2c39c5[_0xdb412e(0x6dd)])_0x2c39c5[_0xdb412e(0x6dd)]()[_0xdb412e(0x23f)]();VisuMZ[_0xdb412e(0x6d0)][_0xdb412e(0xef)][_0xdb412e(0xb59)](this);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0xbb0)]=Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x3d0)],Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x3d0)]=function(){const _0x45af12=_0x44efce;if(VisuMZ[_0x45af12(0x6d0)][_0x45af12(0x444)][_0x45af12(0x6e4)][_0x45af12(0x8c8)]){if('zLngS'===_0x45af12(0xa4c))this[_0x45af12(0x4af)]=!this['hasBeenDefeatedBefore'](),_0x5c3b31[_0x45af12(0x975)](this[_0x45af12(0x134)]());else return VisuMZ[_0x45af12(0x6d0)][_0x45af12(0x444)][_0x45af12(0x6e4)]['BattleLogRectJS'][_0x45af12(0xb59)](this);}return VisuMZ[_0x45af12(0x6d0)][_0x45af12(0xbb0)][_0x45af12(0xb59)](this);},VisuMZ['BattleCore']['Scene_Battle_createPartyCommandWindow']=Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x286)],Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x286)]=function(){const _0x2c54db=_0x44efce;VisuMZ[_0x2c54db(0x6d0)][_0x2c54db(0x6a0)]['call'](this),this[_0x2c54db(0x17f)]();},Scene_Battle['prototype'][_0x44efce(0x17f)]=function(){const _0x4db552=_0x44efce,_0x40d6c4=this[_0x4db552(0x291)];_0x40d6c4[_0x4db552(0x3f3)]('autoBattle',this[_0x4db552(0x8d0)][_0x4db552(0x9f7)](this)),_0x40d6c4[_0x4db552(0x3f3)]('options',this['commandOptions'][_0x4db552(0x9f7)](this));const _0x58720c=this[_0x4db552(0x1e6)]();switch(_0x58720c){case'xp':case _0x4db552(0x47a):return this[_0x4db552(0x291)][_0x4db552(0xb01)](0x1);break;}},Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x8d0)]=function(){const _0x39516e=_0x44efce;BattleManager['_autoBattle']=!![],$gameParty[_0x39516e(0x2a2)](),this['selectNextCommand'](),BattleManager[_0x39516e(0x421)]()&&(BattleManager[_0x39516e(0x278)]=![]);},Scene_Battle['prototype']['commandOptions']=function(){const _0x1077ff=_0x44efce;if(this[_0x1077ff(0x9e9)]())this[_0x1077ff(0xd9)]=!![],this[_0x1077ff(0x8fd)]['push'](_0x1077ff(0x6fa),VisuMZ['BattleCore'][_0x1077ff(0x444)][_0x1077ff(0x283)][_0x1077ff(0x63a)]);else{if(_0x1077ff(0x7d7)!==_0x1077ff(0x728))this[_0x1077ff(0x1a0)]();else{const _0x12e469=this['getNextSubjectFromPool']();if(!_0x12e469)return null;if(_0x12e469['isBattleMember']()&&_0x12e469[_0x1077ff(0x8e9)]())return _0x12e469;}}},Scene_Battle[_0x44efce(0x8f2)]['isQueueOptionsMenu']=function(){const _0x54d3e4=_0x44efce;return BattleManager[_0x54d3e4(0x27f)]();},Scene_Battle['prototype'][_0x44efce(0x1a0)]=function(){const _0x3579bf=_0x44efce;this['_callSceneOptions']=![],this['_spriteset'][_0x3579bf(0x9da)](),this[_0x3579bf(0x773)][_0x3579bf(0x922)]=![];if(BattleManager[_0x3579bf(0xb7a)]()){if('aSbnF'===_0x3579bf(0x974)){if($dataSystem[_0x3579bf(0x695)]||$dataSystem[_0x3579bf(0x7be)]){if(_0x3579bf(0x8d1)!=='yQVaj')SceneManager[_0x3579bf(0x99e)]();else{const _0x2d7ce4=this[_0x3579bf(0x6dd)]();_0x2d7ce4&&(_0x2d7ce4['forceMotion'](_0x59049f),[_0x3579bf(0x9ae),_0x3579bf(0x15d),'missile'][_0x3579bf(0x89e)](_0xd71b5a)&&this[_0x3579bf(0x325)]());}}}else{const _0x523cfb=_0x1fded4[_0x3579bf(0x62c)](),_0x2e187a=this['actor'](this['index']());if(!_0x523cfb)return!![];if(!_0x523cfb[_0x3579bf(0x987)]())return!![];const _0x316866=_0x523cfb[_0x3579bf(0x987)]()[_0x3579bf(0x77d)];if(_0x316866[_0x3579bf(0xab6)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x2e187a===_0x1ea85d[_0x3579bf(0x918)]())return![];}return!![];}}else{if($gameMap[_0x3579bf(0x695)]()||$gameMap[_0x3579bf(0x7be)]()){if(_0x3579bf(0x764)===_0x3579bf(0x9ea))return _0xed0a92[_0x3579bf(0x6d0)][_0x3579bf(0x444)][_0x3579bf(0xaaf)][_0x3579bf(0x456)];else SceneManager[_0x3579bf(0x99e)]();}}SceneManager[_0x3579bf(0xb70)](Scene_Options),BattleManager[_0x3579bf(0x421)]()&&(BattleManager[_0x3579bf(0x304)]=BattleManager[_0x3579bf(0x918)]());},VisuMZ['BattleCore'][_0x44efce(0x1c7)]=Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0xa22)],Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0xa22)]=function(){const _0x31b238=_0x44efce;VisuMZ[_0x31b238(0x6d0)][_0x31b238(0x1c7)][_0x31b238(0xb59)](this);if(this[_0x31b238(0xd9)]&&!BattleManager['_subject'])this[_0x31b238(0x1a0)]();},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x110)]=Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x9da)],Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x9da)]=function(){const _0x381690=_0x44efce;VisuMZ['BattleCore'][_0x381690(0x110)][_0x381690(0xb59)](this),this[_0x381690(0x75d)]();},Scene_Battle[_0x44efce(0x8f2)]['createAutoBattleWindow']=function(){const _0x60120b=_0x44efce,_0x400acd=this[_0x60120b(0x7ec)]();this['_autoBattleWindow']=new Window_AutoBattleCancel(_0x400acd),this['_autoBattleWindow']['hide'](),this[_0x60120b(0x317)](this[_0x60120b(0x8b2)]);},Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x7ec)]=function(){const _0x734a31=_0x44efce;return VisuMZ['BattleCore'][_0x734a31(0x444)][_0x734a31(0xa9f)][_0x734a31(0xa06)][_0x734a31(0xb59)](this);},Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0xb71)]=function(){this['_onceParallelInterpreters']=[];},Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x75d)]=function(){const _0x48b71e=_0x44efce;if(!this[_0x48b71e(0x781)])return;for(const _0x3fc275 of this[_0x48b71e(0x781)]){_0x48b71e(0x8c4)!==_0x48b71e(0x7e6)?_0x3fc275&&_0x3fc275[_0x48b71e(0x9da)]():this[_0x48b71e(0x13d)]=(this[_0x48b71e(0x13d)]+0x1)%0x4;}},Scene_Battle['prototype'][_0x44efce(0x86b)]=function(_0x1b9e31){const _0x3139b7=_0x44efce,_0x52630a=$dataCommonEvents[_0x1b9e31];if(!_0x52630a)return;const _0x37d758=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0x37d758),_0x37d758[_0x3139b7(0x6cc)](_0x1b9e31);},Scene_Battle['prototype'][_0x44efce(0x80a)]=function(_0x177bae){const _0x120136=_0x44efce;this['_onceParallelInterpreters']=this['_onceParallelInterpreters']||[],this[_0x120136(0x781)][_0x120136(0xb70)](_0x177bae);},Scene_Battle['prototype'][_0x44efce(0x7eb)]=function(_0x4c7ac0){const _0x2ed81d=_0x44efce;this[_0x2ed81d(0x781)]=this[_0x2ed81d(0x781)]||[],this['_onceParallelInterpreters'][_0x2ed81d(0xac9)](_0x4c7ac0);},Game_Troop[_0x44efce(0x8f2)]['onBattleStartOnceParallels']=function(){const _0x2308cd=_0x44efce;for(const _0x2e16c4 of this[_0x2308cd(0xb08)]()['pages']){if('ajvJb'===_0x2308cd(0xab4))_0x2cffe6[_0x2308cd(0x74b)]();else{if(!this[_0x2308cd(0xb1b)](_0x2e16c4))continue;SceneManager['_scene'][_0x2308cd(0x7b9)](_0x2e16c4);}}},Game_Troop[_0x44efce(0x8f2)]['doesPageHaveOnceParallelStart']=function(_0x257f13){const _0x3c53c7=_0x44efce;if(!_0x257f13)return;for(const _0x2c2263 of _0x257f13[_0x3c53c7(0x570)]){if([0x6c,0x198][_0x3c53c7(0x89e)](_0x2c2263[_0x3c53c7(0x591)])){if(_0x3c53c7(0x417)===_0x3c53c7(0xa53))this[_0x3c53c7(0xa7b)]=!![];else{const _0x1c7b08=_0x2c2263[_0x3c53c7(0x9a3)][0x0];if(_0x1c7b08[_0x3c53c7(0xab6)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}}return![];},Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x7b9)]=function(_0x14705e){const _0x3b28bf=_0x44efce;if(!_0x14705e)return;const _0x26cb6e=new Game_BattleOnceParallelInterpreter();this[_0x3b28bf(0x80a)](_0x26cb6e),_0x26cb6e[_0x3b28bf(0x5b2)](_0x14705e);};function Game_BattleOnceParallelInterpreter(){const _0xe7d222=_0x44efce;this[_0xe7d222(0x64a)](...arguments);}Game_BattleOnceParallelInterpreter[_0x44efce(0x8f2)]=Object[_0x44efce(0x166)](Game_Interpreter[_0x44efce(0x8f2)]),Game_BattleOnceParallelInterpreter[_0x44efce(0x8f2)]['constructor']=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter['prototype'][_0x44efce(0x6cc)]=function(_0x54617a){const _0x2dade9=_0x44efce,_0x2ae13d=$dataCommonEvents[_0x54617a];if(_0x2ae13d)this[_0x2dade9(0x803)](_0x2ae13d[_0x2dade9(0x570)],0x0);else{if('Foyql'===_0x2dade9(0x9e2))return _0x343b04[_0x2dade9(0x1b5)];else this[_0x2dade9(0x36c)]();}},Game_BattleOnceParallelInterpreter[_0x44efce(0x8f2)][_0x44efce(0x36c)]=function(){const _0x998eb5=_0x44efce;if(!SceneManager[_0x998eb5(0xbab)]())return;SceneManager[_0x998eb5(0x45b)][_0x998eb5(0x7eb)](this),Game_Interpreter[_0x998eb5(0x8f2)][_0x998eb5(0x36c)][_0x998eb5(0xb59)](this);},Game_BattleOnceParallelInterpreter[_0x44efce(0x8f2)][_0x44efce(0x5b2)]=function(_0x457b5a){const _0x13c86a=_0x44efce;if(_0x457b5a){if(_0x13c86a(0x5b3)===_0x13c86a(0x5b3))this['setup'](_0x457b5a[_0x13c86a(0x570)],0x0);else return _0x2fecfd['jsOneForOne'][_0x13c86a(0xb59)](this);}else this[_0x13c86a(0x36c)]();},Scene_Battle['prototype'][_0x44efce(0x992)]=function(){const _0x2f6745=_0x44efce;return VisuMZ[_0x2f6745(0x6d0)][_0x2f6745(0x444)][_0x2f6745(0x283)][_0x2f6745(0xb5e)];},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x77f)]=Scene_Battle['prototype'][_0x44efce(0x899)],Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x899)]=function(){const _0x2087db=_0x44efce;this[_0x2087db(0x992)]()?this[_0x2087db(0x4e9)]():VisuMZ[_0x2087db(0x6d0)][_0x2087db(0x77f)][_0x2087db(0xb59)](this);},Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x4e9)]=function(){const _0x1128ca=_0x44efce;if(BattleManager[_0x1128ca(0x672)]()){if(_0x1128ca(0x907)!=='GpMxD')return this['_battleLayoutStyle'];else this[_0x1128ca(0x293)]();}else BattleManager[_0x1128ca(0x421)]()&&(_0x1128ca(0x37b)!=='dSYIW'?VisuMZ[_0x1128ca(0x6d0)][_0x1128ca(0x77f)][_0x1128ca(0xb59)](this):(_0x319893[_0x1128ca(0x6d0)][_0x1128ca(0xb41)][_0x1128ca(0xb59)](this),this[_0x1128ca(0x8ff)]()));},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x5da)]=Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x249)],Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x249)]=function(){const _0x4cac9f=_0x44efce;BattleManager['isTpb']()?(this[_0x4cac9f(0x67b)](),this['startActorCommandSelection']()):'ZoifO'===_0x4cac9f(0xb39)?this[_0x4cac9f(0x2d3)][_0x4cac9f(0x317)](this[_0x4cac9f(0xb1e)]):VisuMZ[_0x4cac9f(0x6d0)][_0x4cac9f(0x5da)]['call'](this);},Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x67b)]=function(){const _0x325f9c=_0x44efce;if(!VisuMZ[_0x325f9c(0x6d0)]['TpbActiveChangeEnabled'])return;if(Imported[_0x325f9c(0x8b9)]&&BattleManager[_0x325f9c(0x5ac)]())return;const _0x5c1201=$gameParty['aliveMembers']()['filter'](_0x29fdff=>_0x29fdff[_0x325f9c(0xa3c)]()&&_0x29fdff[_0x325f9c(0xaf9)]());BattleManager['_currentActor']=_0x5c1201[0x0]||null,BattleManager[_0x325f9c(0x589)]&&BattleManager['_currentActor'][_0x325f9c(0xa6c)]('inputting');},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0xad4)]=Scene_Battle['prototype']['createActorCommandWindow'],Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0xa37)]=function(){const _0x13b38b=_0x44efce;VisuMZ[_0x13b38b(0x6d0)][_0x13b38b(0xad4)][_0x13b38b(0xb59)](this),this[_0x13b38b(0x91e)]();},Scene_Battle['prototype'][_0x44efce(0x91e)]=function(){const _0x31aec1=_0x44efce,_0x2c5696=this[_0x31aec1(0x258)];_0x2c5696[_0x31aec1(0x3f3)]('escape',this['actorCommandEscape'][_0x31aec1(0x9f7)](this)),_0x2c5696['setHandler'](_0x31aec1(0x7c6),this[_0x31aec1(0x85a)][_0x31aec1(0x9f7)](this)),_0x2c5696[_0x31aec1(0x3f3)](_0x31aec1(0x890),this[_0x31aec1(0xe5)]['bind'](this)),BattleManager['isTpb']()&&(this[_0x31aec1(0x992)]()?delete _0x2c5696[_0x31aec1(0x9d0)][_0x31aec1(0x524)]:_0x31aec1(0x7d1)===_0x31aec1(0x7d1)?_0x2c5696[_0x31aec1(0x3f3)]('cancel',this[_0x31aec1(0xa6b)][_0x31aec1(0x9f7)](this)):(_0x1e7f67[_0x31aec1(0x8f2)][_0x31aec1(0x148)]['call'](this),this[_0x31aec1(0x7c8)]('evade')));},Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x379)]=function(){const _0x33b6cb=_0x44efce;this[_0x33b6cb(0x2ea)]();},Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x85a)]=function(){const _0x44ce98=_0x44efce;BattleManager[_0x44ce98(0x918)]()[_0x44ce98(0x95b)](),BattleManager[_0x44ce98(0x8e5)](),BattleManager[_0x44ce98(0x91d)](),this[_0x44ce98(0xaee)]();},Scene_Battle[_0x44efce(0x8f2)]['actorCommandSingleSkill']=function(){const _0x88ba4b=_0x44efce,_0x1e1782=BattleManager[_0x88ba4b(0x62c)]();_0x1e1782[_0x88ba4b(0x4e5)](this[_0x88ba4b(0x258)][_0x88ba4b(0x49a)]()),this[_0x88ba4b(0x24a)]();},Scene_Battle[_0x44efce(0x8f2)]['actorCommandCancelTPB']=function(){const _0x367f7c=_0x44efce;this[_0x367f7c(0x10f)]()?this['performTpbActiveCheckSwitch']():this[_0x367f7c(0x4d2)]();},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x8bb)]=![],Scene_Battle[_0x44efce(0x8f2)]['tpbActorSwitchConditionsMet']=function(){const _0x41e0ba=_0x44efce;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x41e0ba(0x5ac)]()){if('GagxH'===_0x41e0ba(0x103))this['drawTextEx'](_0x559179,_0x467667['x'],_0x1ec4d6['y'],_0x2b6784);else return![];}else{if(!VisuMZ['BattleCore'][_0x41e0ba(0x8bb)])return![];const _0x661750=$gameParty['aliveMembers']()[_0x41e0ba(0xc9)](_0xe51464=>_0xe51464[_0x41e0ba(0xa3c)]()&&_0xe51464[_0x41e0ba(0xaf9)]());return _0x661750['length']>0x0&&BattleManager[_0x41e0ba(0x918)]()!==_0x661750[_0x661750['length']-0x1];}},Scene_Battle['prototype'][_0x44efce(0x9b6)]=function(){const _0x11d852=_0x44efce,_0x17b811=BattleManager[_0x11d852(0x918)](),_0x3f5874=_0x17b811[_0x11d852(0x6dd)]();if(_0x3f5874)_0x3f5874[_0x11d852(0x23f)]();const _0x35daca=$gameParty['aliveMembers']()[_0x11d852(0xc9)](_0x3f3ad8=>_0x3f3ad8[_0x11d852(0xa3c)]()&&_0x3f3ad8[_0x11d852(0xaf9)]()),_0x27a0c6=_0x35daca['indexOf'](_0x17b811),_0x5ca817=_0x35daca[_0x27a0c6+0x1];BattleManager[_0x11d852(0x589)]=_0x5ca817||null;if(_0x5ca817)_0x5ca817[_0x11d852(0xa6c)](_0x11d852(0xb8c));_0x17b811[_0x11d852(0xa6c)](_0x11d852(0x443)),this['changeInputWindow']();},Scene_Battle[_0x44efce(0x8f2)]['processActorCommandCancelTPB']=function(){const _0x35deb3=_0x44efce;this[_0x35deb3(0x291)]['setup'](),this['_actorCommandWindow']['close']();if(!VisuMZ['BattleCore'][_0x35deb3(0x8bb)])return;if(Imported[_0x35deb3(0x8b9)]&&BattleManager[_0x35deb3(0x5ac)]())return;if(BattleManager['_currentActor']){BattleManager[_0x35deb3(0x589)][_0x35deb3(0xa6c)](_0x35deb3(0x443));const _0x143c87=BattleManager[_0x35deb3(0x589)]['battler']();if(_0x143c87)_0x143c87[_0x35deb3(0x23f)]();}BattleManager[_0x35deb3(0x589)]=null;},VisuMZ['BattleCore'][_0x44efce(0x7de)]=Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x60e)],Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x60e)]=function(){const _0x47cddf=_0x44efce;VisuMZ[_0x47cddf(0x6d0)][_0x47cddf(0x7de)][_0x47cddf(0xb59)](this),this['createHelpWindowBattleCore']();},Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x441)]=function(){const _0x592e58=_0x44efce;this[_0x592e58(0x258)][_0x592e58(0x11e)](this['_helpWindow']),this[_0x592e58(0x291)][_0x592e58(0x11e)](this[_0x592e58(0x81c)]);},Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x1e6)]=function(){const _0x6ed240=_0x44efce;if($gameTemp[_0x6ed240(0x607)]!==undefined)return $gameTemp[_0x6ed240(0x607)];if(this[_0x6ed240(0x5de)]){if(_0x6ed240(0x3ca)!==_0x6ed240(0x759))return this[_0x6ed240(0x5de)];else{if(!_0x52fd98[_0x6ed240(0xbab)]())return;_0x192198[_0x6ed240(0x878)](_0x57172f,_0x4887df);const _0x2a5748=_0x2aa76c['getLastPluginCommandInterpreter'](),_0x38455e=_0x3b7681[_0x6ed240(0x1db)],_0x500d0f=_0x17a466[_0x6ed240(0x427)],_0x4e41e7=_0x18f218['_allTargets']?_0x33c431[_0x6ed240(0xb78)][_0x6ed240(0x3f2)](0x0):[],_0x3f7194=_0x4fcc1b[_0x6ed240(0x8fd)];if(!_0x2a5748||!_0x38455e||!_0x500d0f)return;if(!_0x38455e[_0x6ed240(0x987)]())return;if(_0x530ef3[_0x6ed240(0xb5f)])_0x3f7194['push']('applyImmortal',_0x500d0f,_0x4e41e7,![]);if(_0x4d7a04[_0x6ed240(0x111)])_0x3f7194[_0x6ed240(0xb70)]('waitForNewLine');if(_0x376ded[_0x6ed240(0xb73)])_0x3f7194[_0x6ed240(0xb70)](_0x6ed240(0xb8d));if(_0x48ba42[_0x6ed240(0x5df)])_0x3f7194[_0x6ed240(0xb70)](_0x6ed240(0xa09));if(_0x5de05a[_0x6ed240(0x66b)])_0x3f7194['push'](_0x6ed240(0x16b),_0x500d0f);if(_0x4a7cf3[_0x6ed240(0x2c1)])_0x3f7194[_0x6ed240(0xb70)](_0x6ed240(0xa9e));_0x2a5748[_0x6ed240(0x227)](_0x6ed240(0x35b));}}return this[_0x6ed240(0x5de)]=VisuMZ[_0x6ed240(0x6d0)][_0x6ed240(0x444)]['BattleLayout'][_0x6ed240(0x632)]['toLowerCase']()['trim'](),this['_battleLayoutStyle']===_0x6ed240(0x982)&&!Imported[_0x6ed240(0x203)]&&(this[_0x6ed240(0x5de)]='default'),this[_0x6ed240(0x5de)];},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x71e)]=Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x6aa)],Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x6aa)]=function(){const _0xa85535=_0x44efce,_0x4d5849=this[_0xa85535(0x1e6)]();switch(_0x4d5849){case _0xa85535(0x570):return this[_0xa85535(0xb1f)](Math['max'](0x1,$gameParty[_0xa85535(0x1df)]()),!![]);break;default:return VisuMZ[_0xa85535(0x6d0)][_0xa85535(0x71e)][_0xa85535(0xb59)](this);break;}},VisuMZ[_0x44efce(0x6d0)]['Scene_Battle_helpWindowRect']=Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x5fc)],Scene_Battle['prototype'][_0x44efce(0x5fc)]=function(){const _0x46412e=_0x44efce,_0x46344c=this[_0x46412e(0x1e6)]();switch(_0x46344c){case _0x46412e(0x2c9):return this[_0x46412e(0x233)]();break;case _0x46412e(0x8dd):case'list':case'xp':case _0x46412e(0x47a):default:return VisuMZ['BattleCore'][_0x46412e(0xb89)]['call'](this);break;}},Scene_Battle[_0x44efce(0x8f2)]['statusWindowRect']=function(){const _0x3c2f78=_0x44efce,_0x4dc322=this[_0x3c2f78(0x1e6)]();switch(_0x4dc322){case'xp':case _0x3c2f78(0x47a):return this[_0x3c2f78(0x274)]();break;case'border':return this[_0x3c2f78(0xb60)]();break;case _0x3c2f78(0x8dd):case _0x3c2f78(0x570):default:return this[_0x3c2f78(0x6d1)]();break;}},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0xa6)]=Scene_Battle['prototype'][_0x44efce(0x6b1)],Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x6b1)]=function(){const _0x2d5553=_0x44efce,_0xa3c661=this[_0x2d5553(0x1e6)]();switch(_0xa3c661){case'xp':case _0x2d5553(0x47a):return this[_0x2d5553(0xacc)]();break;case'border':return this[_0x2d5553(0x73c)]();case _0x2d5553(0x8dd):case _0x2d5553(0x570):default:return this[_0x2d5553(0x77b)]();break;}},Scene_Battle[_0x44efce(0x8f2)]['partyCommandWindowRectDefaultStyle']=function(){const _0x4d94df=_0x44efce,_0x5e37d4=VisuMZ[_0x4d94df(0x6d0)][_0x4d94df(0x444)]['BattleLayout'],_0x1d1572=_0x5e37d4['CommandWidth']||0xc0,_0x27cb96=this['windowAreaHeight'](),_0x4a6c88=this[_0x4d94df(0xaf0)]()?Graphics[_0x4d94df(0x613)]-_0x1d1572:0x0,_0x504919=Graphics[_0x4d94df(0x165)]-_0x27cb96;return new Rectangle(_0x4a6c88,_0x504919,_0x1d1572,_0x27cb96);},Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0xac2)]=function(){const _0x84284f=_0x44efce;return this[_0x84284f(0x6b1)]();},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x84c)]=Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x23d)],Scene_Battle['prototype'][_0x44efce(0x23d)]=function(){const _0x15deb6=_0x44efce,_0x4aacfe=this[_0x15deb6(0x1e6)]();switch(_0x4aacfe){case'xp':case _0x15deb6(0x47a):case'border':break;case _0x15deb6(0x8dd):case'list':default:VisuMZ[_0x15deb6(0x6d0)][_0x15deb6(0x84c)][_0x15deb6(0xb59)](this);break;}},VisuMZ['BattleCore'][_0x44efce(0x2a6)]=Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0xa54)],Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0xa54)]=function(){const _0x47c636=_0x44efce;VisuMZ[_0x47c636(0x6d0)][_0x47c636(0x2a6)]['call'](this),this['makeTargetSelectionMoreVisible']();},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x29c)]=Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x378)],Scene_Battle[_0x44efce(0x8f2)]['startEnemySelection']=function(){const _0x2029af=_0x44efce;VisuMZ[_0x2029af(0x6d0)][_0x2029af(0x29c)][_0x2029af(0xb59)](this),this['_enemyWindow'][_0x2029af(0x6ad)](),this[_0x2029af(0xafa)]();},Scene_Battle[_0x44efce(0x8f2)]['makeTargetSelectionMoreVisible']=function(){const _0x14c8a5=_0x44efce,_0x33aceb=this[_0x14c8a5(0x1e6)]();['xp',_0x14c8a5(0x47a),_0x14c8a5(0x2c9)][_0x14c8a5(0x89e)](_0x33aceb)&&this[_0x14c8a5(0x258)]['close']();if(_0x33aceb===_0x14c8a5(0x2c9)||this[_0x14c8a5(0x540)]()){if(_0x14c8a5(0xbae)!==_0x14c8a5(0xf7))this['_skillWindow']['close'](),this[_0x14c8a5(0x1cd)][_0x14c8a5(0x945)]();else{_0x199e03-=_0x5a4469[_0x294b44];if(_0x8e4388<=0x0)return _0xa59e15;}}},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x96c)]=Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x2c0)],Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x2c0)]=function(){const _0x13092a=_0x44efce;VisuMZ['BattleCore']['Scene_Battle_onActorOk'][_0x13092a(0xb59)](this),this[_0x13092a(0x600)]();},Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x861)]=function(){const _0x13eaf1=_0x44efce;return[_0x13eaf1(0x7a8),'guard',_0x13eaf1(0x890)]['includes'](this[_0x13eaf1(0x258)][_0x13eaf1(0x395)]());},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x3ee)]=Scene_Battle['prototype']['onActorCancel'],Scene_Battle['prototype'][_0x44efce(0xff)]=function(){const _0x38f215=_0x44efce;if(this[_0x38f215(0x861)]()){if(_0x38f215(0x303)==='ddcut'){const _0x503bae=_0x17029d[_0x38f215(0x987)]();this[_0x38f215(0x1ff)](_0x517dc0,_0x503bae),this[_0x38f215(0xb70)]('applyImmortal',_0x33d80f,_0x5ec671,!![]),this[_0x38f215(0xb70)](_0x38f215(0x10c),_0x4a62c7,_0x2f3507),this[_0x38f215(0xb70)](_0x38f215(0xa9e)),this[_0x38f215(0xb70)]('performCastAnimation',_0x56ed39,_0x491b55),this[_0x38f215(0xb70)](_0x38f215(0x5a9));}else this[_0x38f215(0x743)][_0x38f215(0x57c)](),this['_actorWindow'][_0x38f215(0x7d6)](),this['_actorCommandWindow']['activate']();}else _0x38f215(0x3df)===_0x38f215(0x184)?_0xb01fd0[_0x38f215(0x71b)][_0x38f215(0x999)]=!![]:VisuMZ[_0x38f215(0x6d0)]['Scene_Battle_onActorCancel'][_0x38f215(0xb59)](this);this[_0x38f215(0x85e)]();},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x4b8)]=Scene_Battle[_0x44efce(0x8f2)]['onEnemyOk'],Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x21a)]=function(){const _0x2e60c7=_0x44efce;VisuMZ[_0x2e60c7(0x6d0)][_0x2e60c7(0x4b8)][_0x2e60c7(0xb59)](this),this[_0x2e60c7(0x600)]();},VisuMZ['BattleCore'][_0x44efce(0x18e)]=Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0xa1e)],Scene_Battle['prototype'][_0x44efce(0xa1e)]=function(){const _0x178605=_0x44efce;this[_0x178605(0x861)]()?_0x178605(0x19b)!=='xORbe'?this[_0x178605(0x4c4)](_0x4c2cf8,_0x3fc4da['x'],_0xd7e0e6['y'],_0x2730ef):(this[_0x178605(0x743)][_0x178605(0x57c)](),this[_0x178605(0xa99)]['hide'](),this[_0x178605(0x258)][_0x178605(0x4c7)]()):_0x178605(0x8bf)!==_0x178605(0x8bf)?_0x3ff096[_0x178605(0x8fb)]=_0x18875e(_0x49adbe['$1'])[_0x178605(0x733)]()[_0x178605(0xaef)]():VisuMZ[_0x178605(0x6d0)][_0x178605(0x18e)][_0x178605(0xb59)](this),this[_0x178605(0x85e)]();},Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x600)]=function(){const _0xa62b2b=_0x44efce,_0x3d8ae3=this[_0xa62b2b(0x1e6)]();(_0x3d8ae3===_0xa62b2b(0x2c9)||this[_0xa62b2b(0x540)]())&&(this[_0xa62b2b(0x433)][_0xa62b2b(0x5ea)](),this[_0xa62b2b(0x433)][_0xa62b2b(0x1e1)]&&this['_skillWindow']['show'](),this[_0xa62b2b(0x1cd)][_0xa62b2b(0x5ea)](),this[_0xa62b2b(0x1cd)][_0xa62b2b(0x1e1)]&&this[_0xa62b2b(0x1cd)][_0xa62b2b(0x57c)]());},Scene_Battle[_0x44efce(0x8f2)]['cancelTargetSelectionVisibility']=function(){const _0x46de6a=_0x44efce,_0xa9bc41=this[_0x46de6a(0x1e6)]();['xp',_0x46de6a(0x47a),_0x46de6a(0x2c9)]['includes'](_0xa9bc41)&&this[_0x46de6a(0x258)][_0x46de6a(0x5ea)](),this[_0x46de6a(0x600)]();},Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x6d1)]=function(){const _0x331dc4=_0x44efce,_0x45a674=VisuMZ[_0x331dc4(0x6d0)][_0x331dc4(0x444)][_0x331dc4(0xaaf)],_0x47ae66=Window_BattleStatus['prototype'][_0x331dc4(0xa1c)](),_0x3aa6c4=Graphics[_0x331dc4(0x613)]-(_0x45a674[_0x331dc4(0x44a)]||0xc0),_0x582d81=this['windowAreaHeight']()+_0x47ae66,_0x53b3fc=this[_0x331dc4(0xaf0)]()?0x0:Graphics['boxWidth']-_0x3aa6c4,_0x53926d=Graphics[_0x331dc4(0x165)]-_0x582d81+_0x47ae66;return new Rectangle(_0x53b3fc,_0x53926d,_0x3aa6c4,_0x582d81);},Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x274)]=function(){const _0x306a0d=_0x44efce,_0x1776aa=Window_BattleStatus[_0x306a0d(0x8f2)][_0x306a0d(0xa1c)](),_0x17de95=Graphics[_0x306a0d(0x613)],_0x3124f9=this[_0x306a0d(0x6aa)]()+_0x1776aa,_0x1a5814=0x0,_0x32f0b7=Graphics[_0x306a0d(0x165)]-_0x3124f9+_0x1776aa;return new Rectangle(_0x1a5814,_0x32f0b7,_0x17de95,_0x3124f9);},Scene_Battle[_0x44efce(0x8f2)]['partyCommandWindowRectXPStyle']=function(){const _0x418a41=_0x44efce,_0x6bae=Graphics[_0x418a41(0x613)]/0x2,_0x26c0f9=this['calcWindowHeight'](VisuMZ[_0x418a41(0x6d0)][_0x418a41(0x444)][_0x418a41(0xaaf)][_0x418a41(0x5e7)],!![]),_0x1b3a68=Math[_0x418a41(0x18c)]((Graphics[_0x418a41(0x613)]-_0x6bae)/0x2),_0x292b91=Graphics[_0x418a41(0x165)]-_0x26c0f9-this[_0x418a41(0x274)]()[_0x418a41(0x737)];return new Rectangle(_0x1b3a68,_0x292b91,_0x6bae,_0x26c0f9);},Scene_Battle[_0x44efce(0x8f2)]['helpWindowRectBorderStyle']=function(){const _0x4d100e=_0x44efce,_0x414870=Graphics[_0x4d100e(0x542)],_0x590ad9=Math[_0x4d100e(0x18c)]((Graphics[_0x4d100e(0x613)]-_0x414870)/0x2),_0x2e8229=this[_0x4d100e(0x8aa)](),_0x2f22dc=(Graphics[_0x4d100e(0x737)]-Graphics['boxHeight'])/-0x2;return new Rectangle(_0x590ad9,_0x2f22dc,_0x414870,_0x2e8229);},Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0xb60)]=function(){const _0x7050bf=_0x44efce,_0x5b51c0=Graphics[_0x7050bf(0x542)],_0x46b5f1=Math[_0x7050bf(0x18c)]((Graphics[_0x7050bf(0x613)]-_0x5b51c0)/0x2),_0x25eb01=this[_0x7050bf(0xb1f)](0x4,!![]),_0x2be131=Graphics[_0x7050bf(0x165)]-_0x25eb01+(Graphics[_0x7050bf(0x737)]-Graphics[_0x7050bf(0x165)])/0x2;return new Rectangle(_0x46b5f1,_0x2be131,_0x5b51c0,_0x25eb01);},Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x73c)]=function(){const _0xdfb723=_0x44efce,_0x4e77fd=Math[_0xdfb723(0xa3a)](Graphics['width']/0x3),_0x2144ba=this[_0xdfb723(0xaf0)]()?(Graphics[_0xdfb723(0x542)]+Graphics['boxWidth'])/0x2-_0x4e77fd:(Graphics[_0xdfb723(0x542)]-Graphics[_0xdfb723(0x613)])/-0x2,_0x5036af=this[_0xdfb723(0x233)](),_0x11c412=_0x5036af['y']+_0x5036af[_0xdfb723(0x737)],_0x465de3=this[_0xdfb723(0xb60)](),_0x555434=_0x465de3['y']-_0x11c412;return new Rectangle(_0x2144ba,_0x11c412,_0x4e77fd,_0x555434);},Scene_Battle[_0x44efce(0x8f2)]['skillItemWindowRectBorderStyle']=function(){const _0x46f0f1=_0x44efce,_0x519a87=Math[_0x46f0f1(0x3bb)](Graphics[_0x46f0f1(0x542)]/0x3),_0xbdc421=Math[_0x46f0f1(0x18c)]((Graphics[_0x46f0f1(0x613)]-_0x519a87)/0x2),_0x5e11a9=this[_0x46f0f1(0x73c)](),_0x5ac79f=_0x5e11a9['y'],_0x179310=_0x5e11a9[_0x46f0f1(0x737)];return new Rectangle(_0xbdc421,_0x5ac79f,_0x519a87,_0x179310);},Scene_Battle[_0x44efce(0x8f2)]['repositionCancelButtonBorderStyle']=function(){const _0x4aea4f=_0x44efce;this[_0x4aea4f(0x459)]['y']=this['_helpWindow']['y']+this[_0x4aea4f(0x81c)][_0x4aea4f(0x737)];if(this[_0x4aea4f(0xaf0)]())this[_0x4aea4f(0x1e6)]()===_0x4aea4f(0x2c9)?this[_0x4aea4f(0x459)]['x']=0x8:this[_0x4aea4f(0x459)]['x']=-this[_0x4aea4f(0x459)][_0x4aea4f(0x542)]-0x4;else{if(_0x4aea4f(0x881)==='VaFGu'){const _0x15897c=this['_commandNameWindow'];_0x15897c['contents'][_0x4aea4f(0xa09)]();const _0x99fde7=this[_0x4aea4f(0x49b)](this[_0x4aea4f(0x8e4)]());if(_0x99fde7===_0x4aea4f(0xe0)&&this[_0x4aea4f(0x52d)]()>0x0){const _0x317c6d=this[_0x4aea4f(0x39b)](this[_0x4aea4f(0x8e4)]());let _0x2a892f=this[_0x4aea4f(0x3dd)](this['index']());_0x2a892f=_0x2a892f['replace'](/\\I\[(\d+)\]/gi,''),_0x15897c[_0x4aea4f(0x309)](),this[_0x4aea4f(0x6c0)](_0x2a892f,_0x317c6d),this[_0x4aea4f(0x951)](_0x2a892f,_0x317c6d),this['commandNameWindowCenter'](_0x2a892f,_0x317c6d);}}else this[_0x4aea4f(0x459)]['x']=Graphics[_0x4aea4f(0x542)]-(Graphics[_0x4aea4f(0x542)]-Graphics[_0x4aea4f(0x613)])/0x2-this[_0x4aea4f(0x459)]['width']-0x4;}},VisuMZ[_0x44efce(0x6d0)]['Scene_Battle_skillWindowRect']=Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0xa9d)],Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0xa9d)]=function(){const _0x45b98b=_0x44efce;if(this['battleLayoutStyle']()==='border')return this[_0x45b98b(0x791)]();else{if(this[_0x45b98b(0x540)]()){if(_0x45b98b(0x7ac)==='hdcFg'){let _0xab0fb5=_0xeebca1[_0x45b98b(0x6d0)][_0x45b98b(0xb11)]['call'](this),_0x489af4=_0x123968['BattleCore'][_0x45b98b(0x444)][_0x45b98b(0x86a)][_0x45b98b(0xa43)]||0x0;return _0x3c67f0[_0x45b98b(0x18c)](_0xab0fb5+_0x489af4);}else return this[_0x45b98b(0x449)]();}else{if(_0x45b98b(0x54d)!==_0x45b98b(0x54d))this[_0x45b98b(0x1a0)]();else return VisuMZ['BattleCore'][_0x45b98b(0x763)][_0x45b98b(0xb59)](this);}}},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x4b0)]=Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x704)],Scene_Battle['prototype'][_0x44efce(0x704)]=function(){const _0x4abc7c=_0x44efce;if(this[_0x4abc7c(0x1e6)]()===_0x4abc7c(0x2c9)){if(_0x4abc7c(0x3a4)==='wMrRQ')_0x9bbb56+=_0x5b95a0[_0x4abc7c(0x8de)]()?-_0x59d075:_0x2bd146,_0x29230c+=_0x4667ca;else return this[_0x4abc7c(0x791)]();}else return this['isSkillItemWindowsMiddle']()?this[_0x4abc7c(0x449)]():VisuMZ[_0x4abc7c(0x6d0)][_0x4abc7c(0x4b0)][_0x4abc7c(0xb59)](this);},Scene_Battle[_0x44efce(0x8f2)]['isSkillItemWindowsMiddle']=function(){const _0x3fc09e=_0x44efce;return VisuMZ[_0x3fc09e(0x6d0)][_0x3fc09e(0x444)][_0x3fc09e(0xaaf)][_0x3fc09e(0x839)];},Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x449)]=function(){const _0x5ae2be=_0x44efce,_0xdd1d81=Sprite_Button[_0x5ae2be(0x8f2)]['blockWidth']()*0x2+0x4;let _0x321c5f=Graphics['boxWidth']-_0xdd1d81;if(Imported['VisuMZ_0_CoreEngine']&&SceneManager[_0x5ae2be(0x54a)]()){if(_0x5ae2be(0x5a2)!=='WvnkI')return this[_0x5ae2be(0x2d3)]||this['_mainSprite']||this;else _0x321c5f+=_0xdd1d81;}const _0xdfe7b7=this['helpAreaBottom'](),_0x23bd4b=Graphics[_0x5ae2be(0x165)]-_0xdfe7b7-this[_0x5ae2be(0x2a0)]()['height']+Window_BattleStatus[_0x5ae2be(0x8f2)][_0x5ae2be(0xa1c)](),_0x447d7a=0x0;return new Rectangle(_0x447d7a,_0xdfe7b7,_0x321c5f,_0x23bd4b);},Scene_Battle[_0x44efce(0x8f2)][_0x44efce(0x7f1)]=function(){const _0x25c420=_0x44efce;if(!VisuMZ['BattleCore']['Settings'][_0x25c420(0x71b)][_0x25c420(0xee)])return;this['_enemyNameContainer']=new Sprite(),this[_0x25c420(0x842)]['x']=this[_0x25c420(0x773)]['x'],this[_0x25c420(0x842)]['y']=this[_0x25c420(0x773)]['y'];const _0x378a82=this[_0x25c420(0x93b)][_0x25c420(0x963)](this['_windowLayer']);this[_0x25c420(0x5a5)](this[_0x25c420(0x842)],_0x378a82);for(let _0x33bb9e=0x0;_0x33bb9e<0x8;_0x33bb9e++){const _0x22bc63=new Window_EnemyName(_0x33bb9e);this[_0x25c420(0x842)][_0x25c420(0x317)](_0x22bc63);}},Sprite_Battler[_0x44efce(0x1b5)]=VisuMZ['BattleCore'][_0x44efce(0x444)][_0x44efce(0x44f)][_0x44efce(0x2a8)],VisuMZ['BattleCore']['Sprite_Battler_initMembers']=Sprite_Battler['prototype'][_0x44efce(0x2be)],Sprite_Battler[_0x44efce(0x8f2)]['initMembers']=function(){const _0x2ca3be=_0x44efce;VisuMZ[_0x2ca3be(0x6d0)][_0x2ca3be(0x33f)]['call'](this),this[_0x2ca3be(0x784)]();if(this[_0x2ca3be(0x669)]===Sprite_Enemy)this[_0x2ca3be(0xae)]();this[_0x2ca3be(0x315)]();},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x784)]=function(){const _0x3cf4a3=_0x44efce;this['_baseX']=0x0,this[_0x3cf4a3(0xbb8)]=0x0,this[_0x3cf4a3(0x968)]=0x0,this[_0x3cf4a3(0x522)]=0x0,this[_0x3cf4a3(0x182)]=0x0,this[_0x3cf4a3(0x3ab)]=0x0,this['_floatEasing']=_0x3cf4a3(0x221),this[_0x3cf4a3(0x18a)]=0x0,this[_0x3cf4a3(0x729)]=0x0,this['_jumpDuration']=0x0,this['_jumpWholeDuration']=0x0,this['_targetOpacity']=0xff,this[_0x3cf4a3(0xf3)]=0x0,this[_0x3cf4a3(0xa0f)]=0x0,this[_0x3cf4a3(0xad2)]='Linear',this[_0x3cf4a3(0x5c5)]=0x0,this[_0x3cf4a3(0x2b0)]=0x0,this[_0x3cf4a3(0x912)]=0x0,this[_0x3cf4a3(0x1aa)]=0x0,this[_0x3cf4a3(0x55a)]='Linear',this[_0x3cf4a3(0x703)]=!![],this[_0x3cf4a3(0xa04)]=0x0,this['_skewY']=0x0,this['_targetSkewX']=0x0,this[_0x3cf4a3(0x2e9)]=0x0,this[_0x3cf4a3(0x141)]=0x0,this[_0x3cf4a3(0x59a)]=0x0,this[_0x3cf4a3(0x857)]=_0x3cf4a3(0x221),this[_0x3cf4a3(0x328)]=0x1,this['_growY']=0x1,this[_0x3cf4a3(0x17b)]=0x1,this[_0x3cf4a3(0x295)]=0x1,this[_0x3cf4a3(0x9b2)]=0x0,this[_0x3cf4a3(0x1f8)]=0x0,this[_0x3cf4a3(0x24e)]='Linear',this[_0x3cf4a3(0x3f4)]=0x1,this['_targetHomeX']=0x0,this['_targetHomeY']=0x0,this[_0x3cf4a3(0x2c5)]=0x0,this[_0x3cf4a3(0x5a7)]=0x0,this['_homeEasing']=_0x3cf4a3(0x221);},Sprite_Battler['prototype'][_0x44efce(0xae)]=function(){const _0x48f6d6=_0x44efce;this[_0x48f6d6(0x952)]=new Sprite(),this[_0x48f6d6(0x952)][_0x48f6d6(0x3e8)]=ImageManager[_0x48f6d6(0x25a)](_0x48f6d6(0xa77)),this[_0x48f6d6(0x952)][_0x48f6d6(0x3e8)][_0x48f6d6(0x4ea)]=VisuMZ[_0x48f6d6(0x6d0)][_0x48f6d6(0x444)]['Actor'][_0x48f6d6(0x999)],this[_0x48f6d6(0x952)][_0x48f6d6(0x20c)]['x']=0.5,this[_0x48f6d6(0x952)][_0x48f6d6(0x20c)]['y']=0.5,this[_0x48f6d6(0x952)]['y']=-0x2,this['_shadowSprite'][_0x48f6d6(0x922)]=![],this[_0x48f6d6(0x317)](this[_0x48f6d6(0x952)]);},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x315)]=function(){const _0x1e4c5f=_0x44efce;this[_0x1e4c5f(0x2d3)]=new Sprite(),this[_0x1e4c5f(0x2d3)][_0x1e4c5f(0x20c)]['x']=0.5,this['_distortionSprite']['anchor']['y']=0.5,this[_0x1e4c5f(0x317)](this[_0x1e4c5f(0x2d3)]);},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0xadb)]=function(){const _0x7008ad=_0x44efce;if(!this[_0x7008ad(0x2d3)])return;if(this['_shadowSprite']){if(_0x7008ad(0x86f)===_0x7008ad(0x3fe))this['_borderPortraitSprite']['x']=0x0,this[_0x7008ad(0x7ff)]=_0x41e55b[_0x7008ad(0x3bb)](_0x48169d['width']/0x2);else{const _0x3ffdc8=this[_0x7008ad(0x3da)](this[_0x7008ad(0x2d3)]);this[_0x7008ad(0x5a5)](this[_0x7008ad(0x952)],_0x3ffdc8),this[_0x7008ad(0x500)]();}}if(this[_0x7008ad(0x758)]){if(_0x7008ad(0x1be)==='AJzJa')for(const _0x483e1c of _0x354c8c[_0x7008ad(0x7b1)]()){this[_0x7008ad(0x8fd)]['push']('addText',_0x4538cf['emerge'][_0x7008ad(0x437)](_0x483e1c)),this[_0x7008ad(0x8fd)]['push'](_0x7008ad(0xaf1)),_0x1873fb=!![];}else this['_distortionSprite'][_0x7008ad(0x317)](this[_0x7008ad(0x758)]);}this[_0x7008ad(0x92a)]&&this[_0x7008ad(0x2d3)][_0x7008ad(0x317)](this['_weaponSprite']),this[_0x7008ad(0xb1e)]&&(_0x7008ad(0x970)!==_0x7008ad(0x2d6)?this[_0x7008ad(0x2d3)][_0x7008ad(0x317)](this['_mainSprite']):(_0x510b49[_0x7008ad(0x1ce)](),_0x8afad1[_0x7008ad(0x556)](_0x5c4031),_0x1ef514[_0x7008ad(0x6d0)][_0x7008ad(0x112)][_0x7008ad(0xb59)](this,_0x29b2ae),this[_0x7008ad(0xa50)]())),this[_0x7008ad(0x3ce)]&&(_0x7008ad(0x8ba)==='ThuVk'?this[_0x7008ad(0x2d3)][_0x7008ad(0x317)](this[_0x7008ad(0x3ce)]):(this['_homeX']=(this['_homeX']*(_0x18d90c-0x1)+this[_0x7008ad(0x32d)])/_0x594dea,this[_0x7008ad(0x680)]=(this['_homeY']*(_0x45e216-0x1)+this[_0x7008ad(0x170)])/_0x857694)),this[_0x7008ad(0xb06)]&&this[_0x7008ad(0x2d3)][_0x7008ad(0x317)](this['_dragonbonesSpriteContainer']);},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x500)]=function(){const _0x4e786e=_0x44efce;if(!this[_0x4e786e(0x952)])return;if(this['_battler']&&this[_0x4e786e(0x6cb)][_0x4e786e(0x442)]()){if(_0x4e786e(0x9f3)===_0x4e786e(0x9f3)){const _0x1d7dc8=this[_0x4e786e(0x952)]['bitmap'];this[_0x4e786e(0x952)][_0x4e786e(0x228)](0x0,0x0,_0x1d7dc8['width'],_0x1d7dc8[_0x4e786e(0x737)]);}else this['_forcedBattleLayout']=_0x4e786e(0x8dd);}else{if(_0x4e786e(0x706)!==_0x4e786e(0x1a6))this['_shadowSprite']['setFrame'](0x0,0x0,0x0,0x0);else{if(!_0x2630b1[_0x4e786e(0xbab)]())return;_0x46d99a[_0x4e786e(0x878)](_0x3e58f8,_0x1e235a);const _0x1cca87=_0x23ebda[_0x4e786e(0x3f8)](),_0x5d4c4e=_0x1fbb64[_0x4e786e(0x57d)](_0x3f938e['Targets']),_0x56ea7d=_0x45c629[_0x4e786e(0x364)],_0x585fdb=_0x2d83b2[_0x4e786e(0xd1)];if(!_0x1cca87)return;_0x59738e[_0x4e786e(0x9df)](_0x5d4c4e,_0x56ea7d,_0x585fdb);if(_0x337972[_0x4e786e(0x3bf)])_0x1cca87['setWaitMode'](_0x4e786e(0x53f));}}},Sprite_Battler[_0x44efce(0x8f2)]['damageContainer']=function(){const _0xc32261=_0x44efce;if(SceneManager[_0xc32261(0xbab)]()){if(_0xc32261(0xb31)===_0xc32261(0x27c))this['push']('fnordRemovedStates'),this[_0xc32261(0xb70)](_0xc32261(0xa91)),this[_0xc32261(0xb70)]('pushBaseLine'),this[_0xc32261(0xb70)](_0xc32261(0x6fa),_0x1fa901[_0xc32261(0x2fd)][_0xc32261(0x437)](_0x11f332[_0xc32261(0x5d4)]())),this[_0xc32261(0xb70)]('wait');else return SceneManager['_scene'][_0xc32261(0x948)][_0xc32261(0x5b7)];}else{if(_0xc32261(0x31e)===_0xc32261(0x7d8))_0xc9243f[_0xc32261(0x542)]=_0x1cba55(_0x588aad['$1']),_0x29cb35[_0xc32261(0x737)]=_0x2196c9(_0x1cf419['$2']);else return this[_0xc32261(0x5a3)];}},Sprite_Battler['prototype']['setupTextPopup']=function(_0x2bf95e,_0x3e42e0){const _0x142238=_0x44efce;if(!this[_0x142238(0x6cb)][_0x142238(0xb1c)]())return;const _0x865772=VisuMZ[_0x142238(0x6d0)][_0x142238(0x444)][_0x142238(0x86a)],_0x3c0112=new Sprite_Damage();_0x3c0112[_0x142238(0xab0)]=_0x865772[_0x142238(0x143)],this[_0x142238(0x240)](_0x3c0112),_0x3c0112[_0x142238(0xabc)](_0x2bf95e,_0x3e42e0),this[_0x142238(0x3ae)](_0x3c0112);},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x365)]=function(_0xc0b53c,_0x1b804e,_0x532606){const _0x266f2a=_0x44efce;if(!this['_battler']['isSpriteVisible']())return;const _0x118eec=VisuMZ[_0x266f2a(0x6d0)][_0x266f2a(0x444)][_0x266f2a(0x86a)],_0x458867=new Sprite_Damage();_0x458867[_0x266f2a(0xab0)]=_0x118eec[_0x266f2a(0x143)],this[_0x266f2a(0x240)](_0x458867),_0x458867[_0x266f2a(0x365)](_0xc0b53c,_0x1b804e,_0x532606),this[_0x266f2a(0x3ae)](_0x458867);},Sprite_Battler[_0x44efce(0x8f2)]['setupDamagePopup']=function(){const _0x104fdc=_0x44efce;if(!this[_0x104fdc(0x6cb)]['isDamagePopupRequested']())return;while(this[_0x104fdc(0x6cb)][_0x104fdc(0x3ff)]()){if(this[_0x104fdc(0x6cb)][_0x104fdc(0xb1c)]()){if(_0x104fdc(0x13c)!==_0x104fdc(0x13c)){const _0x368f34=this[_0x104fdc(0x39b)](_0x5552b8),_0x2c6f0f=this[_0x104fdc(0x409)](_0x5d464a)[_0x104fdc(0x542)];return _0x2c6f0f<=_0x368f34[_0x104fdc(0x542)]?_0x104fdc(0x4a1):_0x104fdc(0xe0);}else this['createDamageSprite']();}}this[_0x104fdc(0x6cb)][_0x104fdc(0x280)](),this[_0x104fdc(0x6cb)][_0x104fdc(0x34a)]();},Sprite_Battler['prototype']['createDamageSprite']=function(){const _0x1da0e2=_0x44efce,_0x8a0113=VisuMZ[_0x1da0e2(0x6d0)][_0x1da0e2(0x444)][_0x1da0e2(0x86a)],_0x35c74e=new Sprite_Damage();_0x35c74e['_duration']=_0x8a0113[_0x1da0e2(0x143)],this[_0x1da0e2(0x240)](_0x35c74e),_0x35c74e[_0x1da0e2(0x803)](this['_battler']),_0x35c74e[_0x1da0e2(0x3e1)](this[_0x1da0e2(0x6cb)]),this[_0x1da0e2(0x3ae)](_0x35c74e);},Sprite_Battler['prototype'][_0x44efce(0x3ae)]=function(_0x22eda7){const _0x4fd87a=_0x44efce;this[_0x4fd87a(0x7cb)][_0x4fd87a(0xb70)](_0x22eda7);if(this[_0x4fd87a(0x760)]())SceneManager[_0x4fd87a(0x45b)]['_statusWindow'][_0x4fd87a(0x3ae)](_0x22eda7,this[_0x4fd87a(0x6cb)]);else{this[_0x4fd87a(0xaa3)]()[_0x4fd87a(0x317)](_0x22eda7);if(SceneManager['isBattleFlipped']())_0x22eda7[_0x4fd87a(0x718)]['x']=-0x1;}},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x760)]=function(){const _0x1baaae=_0x44efce;return!$gameSystem['isSideView']()&&this[_0x1baaae(0x6cb)]&&this[_0x1baaae(0x6cb)][_0x1baaae(0x8de)]();},Sprite_Battler['prototype'][_0x44efce(0x240)]=function(_0x35c15d){const _0x6f443b=_0x44efce;this['alignBattleCoreDamageSprite'](_0x35c15d,!![]);const _0x273f01=VisuMZ[_0x6f443b(0x6d0)]['Settings']['Damage'],_0xf09ab7=SceneManager[_0x6f443b(0x448)]()?-0x1:0x1;if(_0x273f01['NewPopupBottom'])for(const _0x2da1d2 of this[_0x6f443b(0x7cb)]){_0x6f443b(0x2da)===_0x6f443b(0x5f1)?(this[_0x6f443b(0x952)]['visible']=this[_0x6f443b(0x6cb)][_0x6f443b(0xbb3)](),this[_0x6f443b(0x58e)]()):(_0x2da1d2['x']+=_0x273f01['PopupShiftX']*_0xf09ab7,_0x2da1d2['y']+=_0x273f01[_0x6f443b(0x783)]);}else{if(_0x6f443b(0x7cd)!==_0x6f443b(0x7cd))return this[_0x6f443b(0x6cb)][_0x6f443b(0x961)]();else{const _0x5007e8=this[_0x6f443b(0x7cb)][this[_0x6f443b(0x7cb)][_0x6f443b(0x496)]-0x1];if(_0x5007e8){if(_0x6f443b(0xb44)!==_0x6f443b(0xb44)){if(!_0x334192[_0x6f443b(0xbab)]())return;if(!_0x5cc45c[_0x6f443b(0x22e)])return;_0x2da5b3[_0x6f443b(0x878)](_0x1fc2ff,_0x2171bd);const _0x23df66=_0x22f2a9[_0x6f443b(0x3f8)](),_0x46128b=_0x107cb7[_0x6f443b(0x97f)];if(!_0x23df66)return;_0x3da2d8[_0x6f443b(0x52a)](_0x4f025b[_0x6f443b(0x6c3)],_0xb6d56[_0x6f443b(0x97c)],_0x563e4d[_0x6f443b(0x3c2)],_0x2dc286[_0x6f443b(0x2f9)]);if(_0x46128b)_0x23df66[_0x6f443b(0x227)]('battleSkew');}else _0x35c15d['x']=_0x5007e8['x']+_0x273f01['PopupShiftX']*_0xf09ab7,_0x35c15d['y']=_0x5007e8['y']+_0x273f01['PopupShiftY'];}}}},Sprite_Battler[_0x44efce(0x8f2)]['alignBattleCoreDamageSprite']=function(_0x545d7b,_0x3d69ea){const _0x1547e=_0x44efce,_0x5c46b7=SceneManager[_0x1547e(0x448)]()?-0x1:0x1;let _0x5583e9=this[_0x1547e(0x5f2)];_0x5583e9+=this[_0x1547e(0x880)]();let _0xa5b28f=this[_0x1547e(0xbb8)];const _0x32c3cc=this[_0x1547e(0x2d3)][_0x1547e(0x718)]['y'];_0xa5b28f+=this[_0x1547e(0x326)]();const _0x4a362c=SceneManager[_0x1547e(0x45b)][_0x1547e(0x743)];if(_0x4a362c&&this[_0x1547e(0x5a3)]===_0x4a362c){_0x5583e9+=_0x4a362c['x']-this[_0x1547e(0x3ed)]();const _0x1e68bd=_0x4a362c[_0x1547e(0x41b)]()*0x3/0x4;_0xa5b28f=_0x4a362c['y']+_0x1e68bd,_0xa5b28f=Math[_0x1547e(0x90c)](_0xa5b28f,_0x4a362c['y']+this['y']-this[_0x1547e(0x737)]+_0x1e68bd);}_0x545d7b['x']=Math[_0x1547e(0x18c)](_0x5583e9+this[_0x1547e(0x3ed)]()*_0x5c46b7),_0x545d7b['y']=Math[_0x1547e(0x18c)](_0xa5b28f+this[_0x1547e(0x978)]());},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0xb11)]=Sprite_Battler[_0x44efce(0x8f2)]['damageOffsetX'],Sprite_Battler['prototype']['damageOffsetX']=function(){const _0x78f781=_0x44efce;let _0x2d8b24=VisuMZ[_0x78f781(0x6d0)]['Sprite_Battler_damageOffsetX'][_0x78f781(0xb59)](this),_0x49d747=VisuMZ['BattleCore']['Settings'][_0x78f781(0x86a)][_0x78f781(0xa43)]||0x0;return Math[_0x78f781(0x18c)](_0x2d8b24+_0x49d747);},VisuMZ[_0x44efce(0x6d0)]['Sprite_Battler_damageOffsetY']=Sprite_Battler[_0x44efce(0x8f2)]['damageOffsetY'],Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x978)]=function(){const _0x37fbe8=_0x44efce;let _0x36ea66=VisuMZ[_0x37fbe8(0x6d0)][_0x37fbe8(0x1c2)][_0x37fbe8(0xb59)](this);switch(VisuMZ[_0x37fbe8(0x6d0)][_0x37fbe8(0x444)][_0x37fbe8(0x86a)][_0x37fbe8(0x5c3)]){case _0x37fbe8(0x6c4):_0x36ea66-=this[_0x37fbe8(0x737)]*this['scale']['y'];break;case _0x37fbe8(0x281):_0x36ea66-=this[_0x37fbe8(0x737)]*this['scale']['y']*0.5;break;}let _0x59756b=VisuMZ[_0x37fbe8(0x6d0)][_0x37fbe8(0x444)][_0x37fbe8(0x86a)]['PopupOffsetY']||0x0;return Math['round'](_0x36ea66+_0x59756b);},Sprite_Actor[_0x44efce(0x8f2)][_0x44efce(0x3ed)]=function(){const _0x8c35b5=_0x44efce;return Sprite_Battler[_0x8c35b5(0x8f2)]['damageOffsetX'][_0x8c35b5(0xb59)](this);},Sprite_Actor[_0x44efce(0x8f2)][_0x44efce(0x978)]=function(){const _0x18f802=_0x44efce;return Sprite_Battler[_0x18f802(0x8f2)][_0x18f802(0x978)][_0x18f802(0xb59)](this);},Sprite_Battler[_0x44efce(0x8f2)]['destroyDamageSprite']=function(_0x3b054c){const _0x37cf18=_0x44efce;if(this['isShownOnBattlePortrait']())SceneManager['_scene'][_0x37cf18(0x743)]['removeDamageSprite'](_0x3b054c);else{if(_0x37cf18(0x306)!==_0x37cf18(0x11b))this[_0x37cf18(0xaa3)]()[_0x37cf18(0x50e)](_0x3b054c),this['_damages'][_0x37cf18(0xac9)](_0x3b054c),_0x3b054c[_0x37cf18(0xa68)]();else{const _0x29961d=_0x58e594(_0x5190e2['$1'])[_0x37cf18(0xaef)](),_0x20503e=_0x152033(_0x40a1da['$2']);_0x44e827[_0x29961d]=_0x20503e,_0x25c6a4+=_0x20503e;}}},VisuMZ[_0x44efce(0x6d0)]['Sprite_Battler_setHome']=Sprite_Battler['prototype'][_0x44efce(0x126)],Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x126)]=function(_0x4c75bc,_0x5d3f87){const _0x30ddce=_0x44efce,_0x5b9a62=VisuMZ[_0x30ddce(0x6d0)][_0x30ddce(0x444)];if(this['constructor']===Sprite_Actor)_0x4c75bc+=_0x5b9a62['Actor'][_0x30ddce(0xfe)]||0x0,_0x5d3f87+=_0x5b9a62['Actor'][_0x30ddce(0x8cc)]||0x0;else this[_0x30ddce(0x669)]===Sprite_Enemy&&(_0x4c75bc+=_0x5b9a62['Enemy'][_0x30ddce(0xfe)]||0x0,_0x5d3f87+=_0x5b9a62[_0x30ddce(0x71b)][_0x30ddce(0x8cc)]||0x0);this[_0x30ddce(0x6cb)]&&(_0x4c75bc=this['_battler'][_0x30ddce(0xbb6)]??_0x4c75bc,_0x5d3f87=this[_0x30ddce(0x6cb)]['_forcedHomeY']??_0x5d3f87),VisuMZ[_0x30ddce(0x6d0)]['Sprite_Battler_setHome'][_0x30ddce(0xb59)](this,_0x4c75bc,_0x5d3f87),this['_targetHomeX']=this[_0x30ddce(0x4f6)],this[_0x30ddce(0x170)]=this[_0x30ddce(0x680)],this[_0x30ddce(0x2c5)]=0x0,this['_homeWholeDuration']=0x0,this[_0x30ddce(0x39e)]=_0x30ddce(0x221);},VisuMZ['BattleCore'][_0x44efce(0x96f)]=Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x9da)],Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x9da)]=function(){const _0x4bb787=_0x44efce;VisuMZ[_0x4bb787(0x6d0)][_0x4bb787(0x96f)][_0x4bb787(0xb59)](this);if(!this[_0x4bb787(0x6cb)]&&this[_0x4bb787(0xa16)]){if(_0x4bb787(0x38c)!=='UERpF')this['_hpGaugeSprite']['visible']=![];else{if(_0xa0768e===this[_0x4bb787(0x8a4)]()&&this[_0x4bb787(0x1ab)]())return!![];return _0x5de908[_0x4bb787(0x6d0)][_0x4bb787(0x911)]['call'](this,_0x1dbe3e);}}},VisuMZ['BattleCore']['Sprite_Battler_updateMain']=Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x305)],Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x305)]=function(){const _0x5eee0c=_0x44efce;this[_0x5eee0c(0x323)](),this['updateSkew'](),this['updateSpin'](),this[_0x5eee0c(0x7f9)](),VisuMZ[_0x5eee0c(0x6d0)][_0x5eee0c(0x3cb)][_0x5eee0c(0xb59)](this),this['updateHpGaugePosition']();if(this[_0x5eee0c(0x669)]===Sprite_Enemy)this[_0x5eee0c(0x46c)]();},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x9f2)]=Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0xa27)],Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0xa27)]=function(){const _0x555df7=_0x44efce;this[_0x555df7(0x509)](),VisuMZ[_0x555df7(0x6d0)][_0x555df7(0x9f2)][_0x555df7(0xb59)](this),this['updatePositionBattleCore'](),this[_0x555df7(0x798)]();},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x1ac)]=function(_0x3e75f7,_0x4e72ad,_0x116117,_0x10c04f){const _0x18aa58=_0x44efce;if(this[_0x18aa58(0x32d)]!==_0x3e75f7||this['_targetHomeY']!==_0x4e72ad){if(_0x18aa58(0x155)!==_0x18aa58(0x155)){const _0x55f4e8=this[_0x18aa58(0x6dd)]();if(_0x55f4e8&&_0x4d293b)_0x55f4e8['stepForward']();return;}else this[_0x18aa58(0x32d)]=_0x3e75f7,this['_targetHomeY']=_0x4e72ad,this['_homeDuration']=_0x116117,this['_homeWholeDuration']=_0x116117,this[_0x18aa58(0x39e)]=_0x10c04f,_0x116117<=0x0&&this[_0x18aa58(0x7e3)]();}},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x509)]=function(){const _0x3dfc3a=_0x44efce;if(this[_0x3dfc3a(0x2c5)]<=0x0)return;const _0x1771e4=this[_0x3dfc3a(0x2c5)],_0x325055=this['_homeWholeDuration'],_0x2010f7=this['_homeEasing'];Imported[_0x3dfc3a(0x1bc)]?(this['_homeX']=this[_0x3dfc3a(0x7d3)](this[_0x3dfc3a(0x4f6)],this[_0x3dfc3a(0x32d)],_0x1771e4,_0x325055,_0x2010f7),this[_0x3dfc3a(0x680)]=this[_0x3dfc3a(0x7d3)](this[_0x3dfc3a(0x680)],this[_0x3dfc3a(0x170)],_0x1771e4,_0x325055,_0x2010f7)):(this[_0x3dfc3a(0x4f6)]=(this[_0x3dfc3a(0x4f6)]*(_0x1771e4-0x1)+this[_0x3dfc3a(0x32d)])/_0x1771e4,this[_0x3dfc3a(0x680)]=(this['_homeY']*(_0x1771e4-0x1)+this[_0x3dfc3a(0x170)])/_0x1771e4);this['_homeDuration']--;if(this[_0x3dfc3a(0x2c5)]<=0x0)this[_0x3dfc3a(0x7e3)]();},Sprite_Battler['prototype']['onHomeMoveEnd']=function(){const _0x1f6b6f=_0x44efce;this['_homeX']=this[_0x1f6b6f(0x32d)],this[_0x1f6b6f(0x680)]=this[_0x1f6b6f(0x170)];},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x9dd)]=function(){const _0x40bd98=_0x44efce;this[_0x40bd98(0x5f2)]=this['x'],this[_0x40bd98(0xbb8)]=this['y'],this[_0x40bd98(0xad8)](),this[_0x40bd98(0xa00)](),this['x']+=this[_0x40bd98(0x880)](),this['y']+=this[_0x40bd98(0x326)](),this['y']+=this[_0x40bd98(0x7ab)](),this['x']=Math[_0x40bd98(0xa3a)](this['x']),this['y']=Math[_0x40bd98(0xa3a)](this['y']);},Sprite_Battler['prototype'][_0x44efce(0x880)]=function(){let _0x3171e3=0x0;return _0x3171e3;},Sprite_Battler['prototype']['extraPositionY']=function(){const _0x288ed7=_0x44efce;let _0x448fef=0x0;return this[_0x288ed7(0x6cb)]&&!this[_0x288ed7(0x6cb)][_0x288ed7(0x17e)]()&&('YbfvI'!==_0x288ed7(0x6d7)?(_0x4ced5c(_0x288ed7(0x8d5)[_0x288ed7(0x437)](_0x635b62,_0x3272ea)),_0x12537c[_0x288ed7(0xb2e)]()):(_0x448fef-=this['_floatHeight'],_0x448fef-=this[_0x288ed7(0x18a)])),_0x448fef;},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x7ab)]=function(){const _0xaac075=_0x44efce;let _0x2a4853=0x0;if(this[_0xaac075(0x2d3)]&&this[_0xaac075(0x669)]!==Sprite_SvEnemy){if(_0xaac075(0x7e4)===_0xaac075(0xec)){const _0x554899=_0x1651e9[_0xaac075(0x77d)];if(_0x554899[_0xaac075(0xab6)](/<COMMAND REQUIRE LEARN>/i)){if(!this['_actor'][_0xaac075(0xbb9)](_0x43d860['id']))return![];}if(_0x554899[_0xaac075(0xab6)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0xaac075(0x81e)][_0xaac075(0x11a)](_0x590bcf['id']))return![];}const _0xf71e37=_0x427c40['BattleCore'][_0xaac075(0x3c0)](_0x486a1a,'CommandVisible');if(_0x312ca1[_0xaac075(0x6d0)]['JS'][_0xf71e37]){if(!_0x2da07d[_0xaac075(0x6d0)]['JS'][_0xf71e37]['call'](this,this[_0xaac075(0x81e)],_0x39b441))return![];}return _0x940bff['BattleCore']['CheckSkillCommandShowSwitches'](_0x510dc8);}else{const _0x1da159=this['_distortionSprite']['scale']['y'];_0x2a4853-=(_0x1da159-0x1)*this[_0xaac075(0x737)];}}return _0x2a4853;},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x7f9)]=function(){const _0x3237ac=_0x44efce,_0x15a64a=this['_battler']&&this[_0x3237ac(0x6cb)][_0x3237ac(0xb9e)]();this[_0x3237ac(0x3f4)]=(_0x15a64a?-0x1:0x1)*Math['abs'](this[_0x3237ac(0x718)]['x']);},Sprite_Battler['prototype'][_0x44efce(0x7f6)]=function(_0x14a63b,_0x15696d,_0x1e4e0d){const _0x306fca=_0x44efce;if(!this[_0x306fca(0xa89)]())return;if(this[_0x306fca(0x522)]===_0x14a63b)return;this['_targetFloatHeight']=_0x14a63b,this['_floatDuration']=_0x15696d,this['_floatWholeDuration']=_0x15696d,this[_0x306fca(0x3c5)]=_0x1e4e0d||'Linear';if(_0x15696d<=0x0)this[_0x306fca(0x968)]=_0x14a63b;},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0xad8)]=function(){const _0x3249bd=_0x44efce;if(this[_0x3249bd(0x182)]<=0x0)return;const _0xe14d0b=this['_floatDuration'],_0x1deefa=this[_0x3249bd(0x3ab)],_0x3192ac=this[_0x3249bd(0x3c5)];if(Imported[_0x3249bd(0x1bc)]){if(_0x3249bd(0xab3)!==_0x3249bd(0xab3)){const _0xc0e64e=this[_0x3249bd(0x7f3)](),_0x2b556e=_0x1da013[_0x3249bd(0x6d0)][_0x3249bd(0x444)][_0x3249bd(0x283)]['CmdIconFight'],_0x4b9174=_0xc0e64e===_0x3249bd(0x453)?_0x30ee22[_0x3249bd(0x72f)]:'\x5cI[%1]%2'[_0x3249bd(0x437)](_0x2b556e,_0xd6b472[_0x3249bd(0x72f)]),_0xeb5637=this['isFightCommandEnabled']();this['addCommand'](_0x4b9174,_0x3249bd(0x72f),_0xeb5637);}else this[_0x3249bd(0x968)]=this[_0x3249bd(0x7d3)](this['_floatHeight'],this[_0x3249bd(0x522)],_0xe14d0b,_0x1deefa,_0x3192ac);}else{if(_0x3249bd(0x569)!==_0x3249bd(0x569)){const _0x35445a=_0x21f27f['battler']();this[_0x3249bd(0xb70)](_0x3249bd(0x149),[_0x5ea19b],_0x4db3a3,_0x18cdb4),this[_0x3249bd(0xb70)](_0x3249bd(0x130),_0x108571,_0x35445a[_0x3249bd(0x4f6)],_0x35445a['_homeY'],_0x45c005,![],'Linear'),this[_0x3249bd(0xb70)]('requestMotion',[_0x3a290d],_0x3249bd(0xaac)),this[_0x3249bd(0xb70)]('waitForMovement'),this['push'](_0x3249bd(0x7c8),[_0x46c7fe],_0x3249bd(0x252));}else this[_0x3249bd(0x968)]=(this[_0x3249bd(0x968)]*(_0xe14d0b-0x1)+this[_0x3249bd(0x522)])/_0xe14d0b;}this[_0x3249bd(0x182)]--;if(this['_floatDuration']<=0x0)this[_0x3249bd(0x2d2)]();},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x2d2)]=function(){const _0x59d3cc=_0x44efce;this['_floatHeight']=this[_0x59d3cc(0x522)];},Sprite_Battler['prototype'][_0x44efce(0x753)]=function(){const _0xa442f2=_0x44efce;return this[_0xa442f2(0x182)]>0x0;},Sprite_Battler[_0x44efce(0x8f2)]['startJump']=function(_0x2c1e25,_0x3bb3ea){const _0x4d0442=_0x44efce;if(!this[_0x4d0442(0xa89)]())return;if(_0x3bb3ea<=0x0)return;this[_0x4d0442(0x729)]=_0x2c1e25,this[_0x4d0442(0xdf)]=_0x3bb3ea,this[_0x4d0442(0x28a)]=_0x3bb3ea;},Sprite_Battler['prototype'][_0x44efce(0xa00)]=function(){const _0x2e5659=_0x44efce;if(this[_0x2e5659(0xdf)]<=0x0)return;const _0x41d9e1=this[_0x2e5659(0x28a)]-this[_0x2e5659(0xdf)],_0x56593f=this[_0x2e5659(0x28a)]/0x2,_0xfcb970=this[_0x2e5659(0x729)],_0x14c6a7=-_0xfcb970/Math[_0x2e5659(0x666)](_0x56593f,0x2);this['_jumpHeight']=_0x14c6a7*Math[_0x2e5659(0x666)](_0x41d9e1-_0x56593f,0x2)+_0xfcb970,this['_jumpDuration']--;if(this[_0x2e5659(0xdf)]<=0x0)return this['onJumpEnd']();},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x7b2)]=function(){const _0x37c349=_0x44efce;this[_0x37c349(0x18a)]=0x0;},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x3c9)]=function(){const _0x3b0054=_0x44efce;return this[_0x3b0054(0xdf)]>0x0;},Sprite_Battler[_0x44efce(0x8f2)]['startOpacity']=function(_0x5640e4,_0x68b2fb,_0x674337){const _0x2e120e=_0x44efce;if(this[_0x2e120e(0x40f)]===_0x5640e4)return;this[_0x2e120e(0x40f)]=_0x5640e4,this[_0x2e120e(0xf3)]=_0x68b2fb,this[_0x2e120e(0xa0f)]=_0x68b2fb,this['_opacityEasing']=_0x674337||_0x2e120e(0x221);if(_0x68b2fb<=0x0)this[_0x2e120e(0x8fe)]=_0x5640e4;},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x798)]=function(){const _0x80bf0a=_0x44efce;if(this[_0x80bf0a(0x669)]['name']===_0x80bf0a(0x6b2))return;if(this[_0x80bf0a(0xf3)]<=0x0)return;const _0x32ffb1=this[_0x80bf0a(0xf3)],_0x55d7ad=this[_0x80bf0a(0xa0f)],_0x592c5b=this[_0x80bf0a(0xad2)];if(Imported[_0x80bf0a(0x1bc)]){if(_0x80bf0a(0x87a)===_0x80bf0a(0x87a))this[_0x80bf0a(0x8fe)]=this[_0x80bf0a(0x7d3)](this[_0x80bf0a(0x8fe)],this[_0x80bf0a(0x40f)],_0x32ffb1,_0x55d7ad,_0x592c5b);else{const _0x2fb5d7=_0x4ae78a[_0x80bf0a(0x6d0)]['Settings'][_0x80bf0a(0xaaf)];if(_0x2fb5d7[_0x80bf0a(0xa46)]){const _0x197895=new _0x38584b();_0x197895['bitmap']=_0x4e657c[_0x80bf0a(0x25a)](_0x2fb5d7['StatusWindowAttachmentBack']),_0x197895['x']=_0x2fb5d7['StatusWindowAttachmentBackOffsetX']||0x0,_0x197895['y']=_0x2fb5d7[_0x80bf0a(0x492)]||0x0,this[_0x80bf0a(0x6b0)](_0x197895),this['_backAttachmentSprite']=_0x197895;}if(_0x2fb5d7[_0x80bf0a(0x372)]){const _0x5e076d=new _0x697800();_0x5e076d[_0x80bf0a(0x3e8)]=_0xb91597[_0x80bf0a(0x25a)](_0x2fb5d7[_0x80bf0a(0x372)]),_0x5e076d['x']=_0x2fb5d7[_0x80bf0a(0x52b)]||0x0,_0x5e076d['y']=_0x2fb5d7[_0x80bf0a(0xa7a)]||0x0,this['addChild'](_0x5e076d),this[_0x80bf0a(0xa3)]=_0x5e076d;}}}else{if(_0x80bf0a(0x234)===_0x80bf0a(0x234))this[_0x80bf0a(0x8fe)]=(this[_0x80bf0a(0x8fe)]*(_0x32ffb1-0x1)+this[_0x80bf0a(0x40f)])/_0x32ffb1;else{if(this[_0x80bf0a(0xa2c)]===_0x4078b6)this['initBattleCore']();return this[_0x80bf0a(0xa2c)];}}this['_opacityDuration']--;if(this[_0x80bf0a(0xf3)]<=0x0)this['onOpacityEnd']();},Sprite_Battler['prototype']['onOpacityEnd']=function(){const _0x30c6b6=_0x44efce;this[_0x30c6b6(0x8fe)]=this[_0x30c6b6(0x40f)];},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0xb05)]=function(){return this['_opacityDuration']>0x0;},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x46c)]=function(){const _0x1ff331=_0x44efce;this[_0x1ff331(0x952)][_0x1ff331(0x922)]=this['_battler'][_0x1ff331(0xbb3)](),this[_0x1ff331(0x58e)]();},Sprite_Battler['prototype'][_0x44efce(0x58e)]=function(){const _0x4ad1a3=_0x44efce;if(!this[_0x4ad1a3(0x952)])return;this['_shadowSprite']['y']=this[_0x4ad1a3(0xbb8)]-this['y']-0x2;},Sprite_Battler['prototype'][_0x44efce(0x895)]=function(){const _0x1f3797=_0x44efce;if(!this[_0x1f3797(0x6cb)])return;this[_0x1f3797(0x1d9)]=this[_0x1f3797(0x6cb)][_0x1f3797(0x412)](),this[_0x1f3797(0xb79)]=this['_battler'][_0x1f3797(0x9d4)]();},Game_BattlerBase[_0x44efce(0x8f2)][_0x44efce(0x412)]=function(){const _0x2677a5=_0x44efce,_0x472e30=this[_0x2677a5(0x8de)]()?this[_0x2677a5(0x918)]():this[_0x2677a5(0xb36)]();if(_0x472e30){const _0x339ea9=_0x472e30[_0x2677a5(0x77d)];if(_0x339ea9[_0x2677a5(0xab6)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x339ea9['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x44efce(0x8f2)]['battlerShadowScaleY']=function(){const _0xa42f44=_0x44efce,_0x2be112=this['isActor']()?this['actor']():this['enemy']();if(_0x2be112){const _0x544df2=_0x2be112[_0xa42f44(0x77d)];if(_0x544df2['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return _0xa42f44(0x237)===_0xa42f44(0x237)?Number(RegExp['$1'])*0.01:this[_0xa42f44(0x987)]()['note'][_0xa42f44(0xab6)](/<JS TARGETS>/i);else{if(_0x544df2[_0xa42f44(0xab6)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x323)]=function(){const _0x5c2b4a=_0x44efce;if(this['constructor']===Sprite_SvEnemy)return;this[_0x5c2b4a(0x8ec)](),this['finalizeScale']();},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x7fd)]=function(){const _0x57fc72=_0x44efce,_0x14ad42=this['_distortionSprite'];if(_0x14ad42){if(_0x57fc72(0x445)!==_0x57fc72(0x445)){if(!this['_damageContainer'])return;if(!_0x2de75d)return;this['_damageContainer'][_0x57fc72(0x50e)](_0x9a97b6);}else _0x14ad42[_0x57fc72(0x718)]['x']=this['mainSpriteScaleX'](),_0x14ad42[_0x57fc72(0x718)]['y']=this['mainSpriteScaleY']();}},Sprite_Battler['prototype']['mainSpriteScaleX']=function(){const _0x5522c7=_0x44efce;let _0x1f4789=0x1;return _0x1f4789*=this[_0x5522c7(0x3f4)],_0x1f4789*=this[_0x5522c7(0x328)],_0x1f4789;},Sprite_Battler[_0x44efce(0x8f2)]['mainSpriteScaleY']=function(){const _0x2f7c1e=_0x44efce;return 0x1*this[_0x2f7c1e(0x5bb)];},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0xa12)]=function(){const _0x10f1bf=_0x44efce;return this[_0x10f1bf(0x542)]*this[_0x10f1bf(0x68b)]();},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x24c)]=function(){const _0x2655a2=_0x44efce;return this[_0x2655a2(0x737)]*this['mainSpriteScaleY']();},Sprite_Battler[_0x44efce(0x8f2)]['startGrow']=function(_0x8479b7,_0x1769fe,_0x25d478,_0x43b337){const _0x30ddd7=_0x44efce;if(!this[_0x30ddd7(0xa89)]())return;if(!this[_0x30ddd7(0x2d3)])return;if(this[_0x30ddd7(0x17b)]===_0x8479b7&&this['_targetGrowY']===_0x1769fe)return;this[_0x30ddd7(0x17b)]=_0x8479b7,this[_0x30ddd7(0x295)]=_0x1769fe,this[_0x30ddd7(0x9b2)]=_0x25d478,this['_growWholeDuration']=_0x25d478,this[_0x30ddd7(0x24e)]=_0x43b337||_0x30ddd7(0x221);if(_0x25d478<=0x0){if(_0x30ddd7(0x15e)===_0x30ddd7(0x955))for(const _0x2c29b2 of _0x5a8eb4[_0x30ddd7(0x570)]){[0x6c,0x198][_0x30ddd7(0x89e)](_0x2c29b2[_0x30ddd7(0x591)])&&(_0x40580d+='\x0a',_0x462a22+=_0x2c29b2[_0x30ddd7(0x9a3)][0x0]);}else this[_0x30ddd7(0x328)]=this[_0x30ddd7(0x17b)],this[_0x30ddd7(0x5bb)]=this['_targetGrowY'];}},Sprite_Battler['prototype']['updateGrow']=function(){const _0x1b939a=_0x44efce;if(this[_0x1b939a(0x9b2)]<=0x0)return;if(!this[_0x1b939a(0x2d3)])return;const _0x13624f=this[_0x1b939a(0x9b2)],_0x39df2a=this[_0x1b939a(0x1f8)],_0xae42c3=this[_0x1b939a(0x24e)];if(Imported[_0x1b939a(0x1bc)]){if(_0x1b939a(0x744)!==_0x1b939a(0xad0))this[_0x1b939a(0x328)]=this['applyEasing'](this[_0x1b939a(0x328)],this['_targetGrowX'],_0x13624f,_0x39df2a,_0xae42c3),this[_0x1b939a(0x5bb)]=this[_0x1b939a(0x7d3)](this[_0x1b939a(0x5bb)],this[_0x1b939a(0x295)],_0x13624f,_0x39df2a,_0xae42c3);else{const _0x78d265=_0x64e1df[_0x1b939a(0x39c)](this[_0x1b939a(0x34b)]),_0x5afeeb=_0x2b6a7f[_0x1b939a(0xb3)][_0x78d265];if(!_0x5afeeb)return this[_0x1b939a(0xa01)]();const _0x4ce6e4='DamageType%1'[_0x1b939a(0x437)](this['_item'][_0x1b939a(0x1ea)][_0x1b939a(0xa15)]),_0x381fb5=[null,_0x1fa405['hp'],_0x5980da['mp'],_0x39b1a['hp'],_0x12a861['mp'],_0x3dfb15['hp'],_0xe611ac['mp']][this[_0x1b939a(0x34b)][_0x1b939a(0x1ea)][_0x1b939a(0xa15)]];return _0x5afeeb[_0x4ce6e4][_0x1b939a(0x437)](_0x381fb5);}}else this[_0x1b939a(0x328)]=(this[_0x1b939a(0x328)]*(_0x13624f-0x1)+this[_0x1b939a(0x17b)])/_0x13624f,this['_growY']=(this['_growY']*(_0x13624f-0x1)+this[_0x1b939a(0x295)])/_0x13624f;this[_0x1b939a(0x9b2)]--;if(this[_0x1b939a(0x9b2)]<=0x0)this[_0x1b939a(0x655)]();},Sprite_Battler['prototype'][_0x44efce(0x655)]=function(){const _0x48fe85=_0x44efce;this[_0x48fe85(0x328)]=this[_0x48fe85(0x17b)],this[_0x48fe85(0x5bb)]=this[_0x48fe85(0x295)];},Sprite_Battler['prototype'][_0x44efce(0xb0c)]=function(){return this['_growDuration']>0x0;},Sprite_Battler['prototype'][_0x44efce(0x1f7)]=function(_0x47dc37,_0x340385,_0x25d099,_0x37d33c){const _0x19a875=_0x44efce;if(!this[_0x19a875(0xa89)]())return;if(!this[_0x19a875(0x2d3)])return;if(this[_0x19a875(0x5a8)]===_0x47dc37&&this[_0x19a875(0x2e9)]===_0x340385)return;this[_0x19a875(0x5a8)]=_0x47dc37,this[_0x19a875(0x2e9)]=_0x340385,this[_0x19a875(0x141)]=_0x25d099,this[_0x19a875(0x59a)]=_0x25d099,this[_0x19a875(0x857)]=_0x37d33c||_0x19a875(0x221),_0x25d099<=0x0&&('vJRtR'!==_0x19a875(0x457)?(this['isNonSubmenuCancel']()?(this[_0x19a875(0x743)]['show'](),this[_0x19a875(0xa99)][_0x19a875(0x7d6)](),this['_actorCommandWindow'][_0x19a875(0x4c7)]()):_0x202afb[_0x19a875(0x6d0)][_0x19a875(0x18e)]['call'](this),this['cancelTargetSelectionVisibility']()):(this[_0x19a875(0x2d3)]['skew']['x']=this[_0x19a875(0x5a8)],this[_0x19a875(0x2d3)][_0x19a875(0xae4)]['y']=this[_0x19a875(0x2e9)]));},Sprite_Battler['prototype'][_0x44efce(0x9f4)]=function(){const _0x166e85=_0x44efce;if(this[_0x166e85(0x141)]<=0x0)return;if(!this[_0x166e85(0x2d3)])return;const _0x59671b=this[_0x166e85(0x141)],_0x5dd26c=this[_0x166e85(0x59a)],_0x315d51=this[_0x166e85(0x857)],_0x1c72bc=this[_0x166e85(0x2d3)];Imported[_0x166e85(0x1bc)]?(_0x1c72bc['skew']['x']=this[_0x166e85(0x7d3)](_0x1c72bc[_0x166e85(0xae4)]['x'],this[_0x166e85(0x5a8)],_0x59671b,_0x5dd26c,_0x315d51),_0x1c72bc[_0x166e85(0xae4)]['y']=this[_0x166e85(0x7d3)](_0x1c72bc[_0x166e85(0xae4)]['y'],this[_0x166e85(0x2e9)],_0x59671b,_0x5dd26c,_0x315d51)):(_0x1c72bc[_0x166e85(0xae4)]['x']=(_0x1c72bc[_0x166e85(0xae4)]['x']*(_0x59671b-0x1)+this[_0x166e85(0x5a8)])/_0x59671b,_0x1c72bc[_0x166e85(0xae4)]['y']=(_0x1c72bc['skew']['y']*(_0x59671b-0x1)+this[_0x166e85(0x2e9)])/_0x59671b);this[_0x166e85(0x141)]--;if(this['_skewDuration']<=0x0)this['onSkewEnd']();},Sprite_Battler['prototype'][_0x44efce(0x1bd)]=function(){const _0x1c4236=_0x44efce;this[_0x1c4236(0x2d3)][_0x1c4236(0xae4)]['x']=this[_0x1c4236(0x5a8)],this[_0x1c4236(0x2d3)][_0x1c4236(0xae4)]['y']=this[_0x1c4236(0x2e9)];},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x3ea)]=function(){const _0xb05ea8=_0x44efce;return this[_0xb05ea8(0x141)]>0x0;},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x7b4)]=function(_0x522071,_0x8ec6bc,_0x3e9c39,_0x2ff089){const _0x351c29=_0x44efce;if(!this['canMove']())return;if(!this[_0x351c29(0x2d3)])return;if(this[_0x351c29(0x2b0)]===_0x522071)return;this[_0x351c29(0x2b0)]=_0x522071,this[_0x351c29(0x912)]=_0x8ec6bc,this[_0x351c29(0x1aa)]=_0x8ec6bc,this['_angleEasing']=_0x3e9c39||'Linear',this[_0x351c29(0x703)]=_0x2ff089,this[_0x351c29(0x703)]===undefined&&(this[_0x351c29(0x703)]=!![]),_0x8ec6bc<=0x0&&(_0x351c29(0x1e9)==='SfaJW'?(this[_0x351c29(0x5c5)]=_0x522071,this['_angleRevertOnFinish']&&(this[_0x351c29(0x2b0)]=0x0,this[_0x351c29(0x5c5)]=0x0)):this[_0x351c29(0xb1e)][_0x351c29(0x3e8)][_0x351c29(0x4ea)]=this['_battler'][_0x351c29(0x5ed)]());},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0xfa)]=function(){const _0x557d82=_0x44efce;this['updateAngleCalculations'](),this[_0x557d82(0x5ba)]();},Sprite_Battler['prototype'][_0x44efce(0x5d6)]=function(){const _0x838b8=_0x44efce;if(this[_0x838b8(0x912)]<=0x0)return;const _0x495586=this[_0x838b8(0x912)],_0x19c021=this[_0x838b8(0x1aa)],_0x496ad5=this[_0x838b8(0x55a)];Imported[_0x838b8(0x1bc)]?this[_0x838b8(0x5c5)]=this['applyEasing'](this[_0x838b8(0x5c5)],this[_0x838b8(0x2b0)],_0x495586,_0x19c021,_0x496ad5):this[_0x838b8(0x5c5)]=(this[_0x838b8(0x5c5)]*(_0x495586-0x1)+this[_0x838b8(0x2b0)])/_0x495586;this['_angleDuration']--;if(this[_0x838b8(0x912)]<=0x0)this[_0x838b8(0x206)]();},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x206)]=function(){const _0x51d63f=_0x44efce;this[_0x51d63f(0x5c5)]=this[_0x51d63f(0x2b0)],this['_angleRevertOnFinish']&&(this[_0x51d63f(0x2b0)]=0x0,this[_0x51d63f(0x5c5)]=0x0);},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x9a1)]=function(){const _0x3e79ba=_0x44efce;return this[_0x3e79ba(0x912)]>0x0;},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x5ba)]=function(){const _0x1e0816=_0x44efce;if(!this['_distortionSprite'])return;const _0x24c48f=this[_0x1e0816(0x5c5)],_0x253a34=this[_0x1e0816(0x718)]['x'],_0x2dc901=this[_0x1e0816(0x6cb)]['isActor']()?-0x1:0x1;this[_0x1e0816(0x2d3)][_0x1e0816(0x331)]=_0x24c48f*_0x253a34*_0x2dc901;const _0x2c317d=this[_0x1e0816(0x2d3)][_0x1e0816(0x718)]['y'];this[_0x1e0816(0x2d3)]['y']=this[_0x1e0816(0x737)]*-0.5*(0x2-_0x2c317d),this['_distortionSprite']['y']=Math[_0x1e0816(0x3bb)](this[_0x1e0816(0x2d3)]['y']);const _0x18de8c=[this['_mainSprite'],this[_0x1e0816(0x758)],this['_dragonbonesSpriteContainer']];for(const _0x6ca4be of _0x18de8c){if(!_0x6ca4be)continue;_0x6ca4be['y']=this[_0x1e0816(0x737)]*0.5;}this[_0x1e0816(0x952)]&&(_0x1e0816(0x2f7)===_0x1e0816(0x2f7)?(this['_shadowScaleX']=this[_0x1e0816(0x1d9)]??0x1,this[_0x1e0816(0xb79)]=this[_0x1e0816(0xb79)]??0x1,this[_0x1e0816(0x952)][_0x1e0816(0x718)]['x']=this[_0x1e0816(0x2d3)][_0x1e0816(0x718)]['x']*this[_0x1e0816(0x1d9)],this[_0x1e0816(0x952)][_0x1e0816(0x718)]['y']=this['_distortionSprite'][_0x1e0816(0x718)]['y']*this[_0x1e0816(0xb79)]):_0x2272c7[_0x1e0816(0x8c7)]?this['battleCorePreBattleCommonEvent']():_0x590df3[_0x1e0816(0x6d0)][_0x1e0816(0xa08)][_0x1e0816(0xb59)](this));},VisuMZ[_0x44efce(0x6d0)]['Sprite_Actor_createStateSprite']=Sprite_Actor['prototype'][_0x44efce(0xb0b)],Sprite_Actor[_0x44efce(0x8f2)][_0x44efce(0xb0b)]=function(){const _0x139b2d=_0x44efce;VisuMZ[_0x139b2d(0x6d0)]['Sprite_Actor_createStateSprite']['call'](this),VisuMZ['BattleCore'][_0x139b2d(0x444)][_0x139b2d(0x2e1)]['ShowActorGauge']&&this['createHpGaugeSprite']();},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x567)]=Sprite_Enemy['prototype'][_0x44efce(0x60a)],Sprite_Enemy[_0x44efce(0x8f2)][_0x44efce(0x60a)]=function(){const _0x37d71d=_0x44efce;VisuMZ['BattleCore'][_0x37d71d(0x444)][_0x37d71d(0x2e1)][_0x37d71d(0x736)]&&(_0x37d71d(0x863)!==_0x37d71d(0x106)?this['createHpGaugeSprite']():_0x529fa3=_0x1eedeb['reduce']((_0x4e02fb,_0x128f11)=>_0x4e02fb*(0x1-_0x128f11),_0x396369)),VisuMZ[_0x37d71d(0x6d0)][_0x37d71d(0x567)][_0x37d71d(0xb59)](this);},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x6b7)]=function(){const _0x5c793f=_0x44efce;if(!ConfigManager['visualHpGauge'])return;if(this[_0x5c793f(0x669)]===Sprite_SvEnemy)return;const _0x4b5653=VisuMZ[_0x5c793f(0x6d0)]['Settings'][_0x5c793f(0x2e1)],_0x43d9cb=new Sprite_HpGauge();_0x43d9cb[_0x5c793f(0x20c)]['x']=_0x4b5653[_0x5c793f(0x8b0)],_0x43d9cb[_0x5c793f(0x20c)]['y']=_0x4b5653[_0x5c793f(0x360)],_0x43d9cb[_0x5c793f(0x718)]['x']=_0x43d9cb[_0x5c793f(0x718)]['y']=_0x4b5653[_0x5c793f(0xaf5)],this[_0x5c793f(0xa16)]=_0x43d9cb,this[_0x5c793f(0x317)](this[_0x5c793f(0xa16)]),Spriteset_Battle[_0x5c793f(0x23e)]&&BattleManager[_0x5c793f(0x905)](this[_0x5c793f(0xa16)]);},VisuMZ[_0x44efce(0x6d0)]['Sprite_Battler_setBattler']=Sprite_Battler[_0x44efce(0x8f2)]['setBattler'],Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x2fa)]=function(_0x8de1ee){const _0x5c5b8d=_0x44efce,_0x2d1087=this[_0x5c5b8d(0x6cb)];VisuMZ['BattleCore'][_0x5c5b8d(0x7c2)][_0x5c5b8d(0xb59)](this,_0x8de1ee),this['setupHpGaugeSprite'](_0x8de1ee);if(_0x2d1087!==_0x8de1ee)this[_0x5c5b8d(0x895)]();},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x7fb)]=function(_0x460044){const _0x305879=_0x44efce;if(!_0x460044)return;if(!this[_0x305879(0xa16)])return;if(_0x460044[_0x305879(0x8de)]()){}else{if(_0x460044[_0x305879(0x851)]()){if(this[_0x305879(0x669)]===Sprite_SvEnemy&&!_0x460044[_0x305879(0xbb3)]())return;}}this['_hpGaugeSprite'][_0x305879(0x803)](_0x460044,'hp');},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x1d1)]=function(){const _0x4768f3=_0x44efce;return this[_0x4768f3(0x6cb)]&&this[_0x4768f3(0x6cb)]['hasStaticSvBattler']();},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0xc7)]=function(){const _0x141bf5=_0x44efce,_0x543ad6=this[_0x141bf5(0xb1e)][_0x141bf5(0x3e8)];if(!_0x543ad6)return;const _0x573ecd=_0x543ad6['width'];let _0x5d32a9=_0x543ad6[_0x141bf5(0x737)];if(this['_battler'][_0x141bf5(0x578)]()){if(this['_frame'])_0x5d32a9=Math[_0x141bf5(0x65c)](0x0,this['_frame'][_0x141bf5(0x737)]-0x4);}this['_mainSprite'][_0x141bf5(0x228)](0x0,0x0,_0x573ecd,_0x5d32a9),this[_0x141bf5(0x228)](0x0,0x0,_0x573ecd,_0x5d32a9);},Sprite_Battler[_0x44efce(0x8f2)]['updateHpGaugePosition']=function(){const _0x1a40c4=_0x44efce;if(!this[_0x1a40c4(0x6cb)])return;if(!this['_hpGaugeSprite'])return;const _0xab19bb=VisuMZ['BattleCore'][_0x1a40c4(0x444)][_0x1a40c4(0x2e1)],_0x1a9b44=this[_0x1a40c4(0xa16)];_0x1a9b44['visible']=this['isVisualHpGaugeDisplayed']();const _0x30f93a=_0xab19bb[_0x1a40c4(0xfe)],_0x40585d=_0xab19bb['OffsetY'];_0x1a9b44['x']=_0x30f93a,_0x1a9b44['x']+=this[_0x1a40c4(0x6cb)]['battleUIOffsetX'](),_0x1a9b44['y']=-this[_0x1a40c4(0x737)]+_0x40585d,_0x1a9b44['y']+=this[_0x1a40c4(0x6cb)][_0x1a40c4(0x27d)](),Spriteset_Battle[_0x1a40c4(0x23e)]&&SceneManager[_0x1a40c4(0x45b)][_0x1a40c4(0x948)]&&(_0x1a9b44['x']+=this['x'],_0x1a9b44['y']+=this['y']);},Sprite_Battler['prototype'][_0x44efce(0xb32)]=function(){const _0x5837f6=_0x44efce;if(!this[_0x5837f6(0x6cb)])return![];if(this[_0x5837f6(0x6cb)][_0x5837f6(0x8de)]())return!![];if(this[_0x5837f6(0x6cb)][_0x5837f6(0xa2a)]())return![];if(this[_0x5837f6(0x8fe)]<=0x0)return![];const _0x1d8a38=this['_battler'][_0x5837f6(0xb36)]()[_0x5837f6(0x77d)];if(_0x1d8a38['match'](/<SHOW HP GAUGE>/i))return!![];if(_0x1d8a38[_0x5837f6(0xab6)](/<HIDE HP GAUGE>/i))return![];const _0x32e1cd=VisuMZ['BattleCore'][_0x5837f6(0x444)][_0x5837f6(0x2e1)];if(_0x32e1cd[_0x5837f6(0xac8)]){if('olAle'===_0x5837f6(0x790)){const _0x36f0ff=this[_0x5837f6(0x8e9)]();this[_0x5837f6(0x571)]=![],_0x36f0ff&&this[_0x5837f6(0x333)]&&this[_0x5837f6(0x94b)](),this[_0x5837f6(0x333)]=![],this[_0x5837f6(0x290)](),this[_0x5837f6(0x578)]()&&_0x36f0ff&&(this[_0x5837f6(0x18b)](),this[_0x5837f6(0x42b)]());}else{if(_0x32e1cd['BTestBypass']&&BattleManager[_0x5837f6(0xb7a)]())return!![];if(this[_0x5837f6(0x6cb)][_0x5837f6(0x4af)])return![];return this[_0x5837f6(0x6cb)][_0x5837f6(0x684)]();}}return!![];},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x762)]=Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x506)],Sprite_Battler['prototype'][_0x44efce(0x506)]=function(){const _0x2114ea=_0x44efce;if(!this[_0x2114ea(0x6cb)])return![];if(this[_0x2114ea(0x2c5)]>0x0)return!![];return VisuMZ[_0x2114ea(0x6d0)][_0x2114ea(0x762)]['call'](this);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x754)]=Sprite_Battler['prototype'][_0x44efce(0x9fc)],Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x9fc)]=function(_0x283b7f,_0xb38f3e,_0x4d0b1c){const _0x35ea91=_0x44efce;this['canMove']()&&(_0x35ea91(0x5e5)===_0x35ea91(0x533)?this['_pattern']++:VisuMZ[_0x35ea91(0x6d0)][_0x35ea91(0x754)][_0x35ea91(0xb59)](this,_0x283b7f,_0xb38f3e,_0x4d0b1c));},Sprite_Battler[_0x44efce(0x8f2)]['canMove']=function(){const _0x4c2369=_0x44efce;if(this['_battler']&&this[_0x4c2369(0x6cb)][_0x4c2369(0x578)]())return![];if(this['_battler']&&!this[_0x4c2369(0x6cb)][_0x4c2369(0x2a5)]())return![];return $gameSystem[_0x4c2369(0x8c0)]();},Sprite_Battler[_0x44efce(0x8f2)]['stepForward']=function(){},Sprite_Battler['prototype'][_0x44efce(0x23f)]=function(){this['startMove'](0x0,0x0,0xc);},Sprite_Battler[_0x44efce(0x8f2)][_0x44efce(0x7da)]=function(){},Sprite_Battler['prototype']['stepFlinch']=function(){const _0x5c625f=_0x44efce,_0x467dc3=VisuMZ['BattleCore'][_0x5c625f(0x444)][_0x5c625f(0x44f)],_0x49cd36=this[_0x5c625f(0x6cb)]&&this[_0x5c625f(0x6cb)][_0x5c625f(0x8de)]()?0x1:-0x1,_0x842dfa=this['_baseX']-this[_0x5c625f(0x4f6)]+_0x49cd36*_0x467dc3[_0x5c625f(0x79c)],_0x20d159=this['_baseY']-this['_homeY']+_0x49cd36*_0x467dc3[_0x5c625f(0x151)],_0x385aa0=_0x467dc3[_0x5c625f(0x86d)];this['startMove'](_0x842dfa,_0x20d159,_0x385aa0);},VisuMZ[_0x44efce(0x6d0)]['Sprite_Actor_initMembers']=Sprite_Actor['prototype'][_0x44efce(0x2be)],Sprite_Actor['prototype'][_0x44efce(0x2be)]=function(){const _0x33aea9=_0x44efce;VisuMZ[_0x33aea9(0x6d0)][_0x33aea9(0xbc5)][_0x33aea9(0xb59)](this),this['attachSpritesToDistortionSprite']();},Sprite_Actor[_0x44efce(0x8f2)]['mainSprite']=function(){const _0x4da479=_0x44efce;return this[_0x4da479(0x2d3)]||this[_0x4da479(0xb1e)]||this;},VisuMZ[_0x44efce(0x6d0)]['Sprite_Actor_moveToStartPosition']=Sprite_Actor[_0x44efce(0x8f2)]['moveToStartPosition'],Sprite_Actor[_0x44efce(0x8f2)][_0x44efce(0x60b)]=function(){},Sprite_Actor[_0x44efce(0x8f2)]['moveToStartPositionBattleCore']=function(_0x4dc589){const _0x38c562=_0x44efce;if(SceneManager['isPreviousSceneBattleTransitionable']())return;if(!_0x4dc589)return;if(!_0x4dc589[_0x38c562(0xa89)]())return;VisuMZ[_0x38c562(0x6d0)][_0x38c562(0x157)]['call'](this);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x638)]=Sprite_Actor['prototype']['setActorHome'],Sprite_Actor[_0x44efce(0x8f2)]['setActorHome']=function(_0x2a7996){const _0x4a8e6d=_0x44efce;VisuMZ['BattleCore'][_0x4a8e6d(0x444)]['Actor'][_0x4a8e6d(0xac7)]?VisuMZ[_0x4a8e6d(0x6d0)][_0x4a8e6d(0x444)]['Actor'][_0x4a8e6d(0xac7)]['call'](this,_0x2a7996):_0x4a8e6d(0x53a)===_0x4a8e6d(0x33d)?(this[_0x4a8e6d(0x328)]=(this[_0x4a8e6d(0x328)]*(_0x519b20-0x1)+this[_0x4a8e6d(0x17b)])/_0x372ecb,this[_0x4a8e6d(0x5bb)]=(this[_0x4a8e6d(0x5bb)]*(_0x1bfeff-0x1)+this[_0x4a8e6d(0x295)])/_0x9a70bd):VisuMZ[_0x4a8e6d(0x6d0)]['Sprite_Actor_setActorHome'][_0x4a8e6d(0xb59)](this,_0x2a7996);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0xb37)]=Sprite_Actor[_0x44efce(0x8f2)][_0x44efce(0x2fa)],Sprite_Actor[_0x44efce(0x8f2)]['setBattler']=function(_0x11b8ba){const _0x5ac2f9=_0x44efce;VisuMZ['BattleCore'][_0x5ac2f9(0xb37)][_0x5ac2f9(0xb59)](this,_0x11b8ba),this['setBattlerBattleCore'](_0x11b8ba);},Sprite_Actor['prototype']['setBattlerBattleCore']=function(_0x3b67ca){const _0x111270=_0x44efce;if(!_0x3b67ca)return;if(!this[_0x111270(0xb1e)])return;this[_0x111270(0xb1e)]['anchor']['x']=this[_0x111270(0x81e)][_0x111270(0xf2)](),this['_mainSprite']['anchor']['y']=this[_0x111270(0x81e)][_0x111270(0x371)](),this['updateShadowVisibility']();},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x195)]=Sprite_Actor[_0x44efce(0x8f2)][_0x44efce(0x9da)],Sprite_Actor[_0x44efce(0x8f2)][_0x44efce(0x9da)]=function(){const _0x53f52d=_0x44efce;VisuMZ[_0x53f52d(0x6d0)][_0x53f52d(0x195)]['call'](this),this['_actor']&&(this[_0x53f52d(0x401)](),this[_0x53f52d(0x639)]());},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x56c)]=Sprite_Actor[_0x44efce(0x8f2)][_0x44efce(0x7a0)],Sprite_Actor[_0x44efce(0x8f2)][_0x44efce(0x7a0)]=function(){const _0x46e147=_0x44efce;VisuMZ['BattleCore'][_0x46e147(0x56c)]['call'](this);if(this[_0x46e147(0xb1e)]&&this['_mainSprite'][_0x46e147(0x3e8)]&&this[_0x46e147(0x6cb)]){if(this[_0x46e147(0xb1e)][_0x46e147(0x3e8)][_0x46e147(0x4ea)]!==this[_0x46e147(0x6cb)]['battlerSmoothImage']()){if('oWxGX'!==_0x46e147(0x976))return _0x446514['BattleCore'][_0x46e147(0x444)]['ActorCmd'][_0x46e147(0x160)];else this['_mainSprite']['bitmap']['smooth']=this['_battler'][_0x46e147(0x5ed)]();}}},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x572)]=Sprite_Actor[_0x44efce(0x8f2)][_0x44efce(0x46c)],Sprite_Actor[_0x44efce(0x8f2)][_0x44efce(0x46c)]=function(){const _0x54589b=_0x44efce;VisuMZ[_0x54589b(0x6d0)][_0x54589b(0x572)][_0x54589b(0xb59)](this),this[_0x54589b(0x2dc)]();},Sprite_Actor[_0x44efce(0x8f2)][_0x44efce(0x2dc)]=function(){const _0x4d17=_0x44efce;if(!this[_0x4d17(0xb1e)])return;if(!this[_0x4d17(0x952)])return;this['updateShadowVisibility'](),this[_0x4d17(0x58e)]();},Sprite_Actor[_0x44efce(0x8f2)]['updateStateSprite']=function(){const _0x46a410=_0x44efce;this[_0x46a410(0x5c6)][_0x46a410(0x718)]['x']=0x1/(this[_0x46a410(0x718)]['x']||0.001),this['_stateSprite']['scale']['y']=0x1/(this[_0x46a410(0x718)]['y']||0.001);},Sprite_Actor[_0x44efce(0x8f2)]['updateStyleOpacity']=function(){const _0x3ede1b=_0x44efce;if(!$gameSystem[_0x3ede1b(0x8c0)]()&&this[_0x3ede1b(0x669)]===Sprite_Actor){if(_0x3ede1b(0x61a)===_0x3ede1b(0x101))return _0x5abd8b[_0x3ede1b(0x8f2)]['damageOffsetX']['call'](this);else{const _0x146855=Scene_Battle[_0x3ede1b(0x8f2)][_0x3ede1b(0x1e6)]();[_0x3ede1b(0x8dd),'list',_0x3ede1b(0x47a),_0x3ede1b(0x2c9)][_0x3ede1b(0x89e)](_0x146855)&&(_0x3ede1b(0x93f)===_0x3ede1b(0x93f)?this[_0x3ede1b(0x8fe)]=0x0:_0x531e11['hide']());}}},Sprite_Actor[_0x44efce(0x8f2)]['refreshMotion']=function(){const _0x59e8c4=_0x44efce,_0x219e05=this[_0x59e8c4(0x81e)];if(_0x219e05){if(_0x59e8c4(0x284)===_0x59e8c4(0x284)){const _0x1d867b=_0x219e05['stateMotionIndex']();if(_0x219e05['isInputting']()||_0x219e05[_0x59e8c4(0x5be)]())this['startMotion']('walk');else{if(_0x1d867b===0x3)_0x59e8c4(0x686)!==_0x59e8c4(0x686)?_0x2b5b45[_0x59e8c4(0x227)](_0x59e8c4(0x4a4)):this['startMotion']('dead');else{if(_0x1d867b===0x2)this['startMotion'](_0x59e8c4(0x19c));else{if(this[_0x59e8c4(0xade)])this[_0x59e8c4(0x745)](_0x59e8c4(0xa17));else{if(_0x219e05[_0x59e8c4(0x6c1)]())this[_0x59e8c4(0x745)](_0x59e8c4(0xaf1));else{if(_0x219e05['isChanting']())this[_0x59e8c4(0x745)](_0x59e8c4(0x1b9));else{if(_0x219e05['isGuard']()||_0x219e05['isGuardWaiting']())this[_0x59e8c4(0x745)](_0x59e8c4(0x346));else{if(_0x1d867b===0x1)'IQbHv'===_0x59e8c4(0x900)?this[_0x59e8c4(0x745)](_0x59e8c4(0x647)):_0x4a1947[_0x59e8c4(0x6d0)][_0x59e8c4(0x957)][_0x59e8c4(0xb59)](this);else{if(_0x219e05['isDying']())this[_0x59e8c4(0x745)]('dying');else{if(_0x219e05[_0x59e8c4(0x510)]()){if(_0x59e8c4(0x53b)===_0x59e8c4(0xb99)){const _0x4370b9=new _0x3ec489(0x0,0x0,_0x2ef591[_0x59e8c4(0x542)],_0x194589[_0x59e8c4(0x737)]);this[_0x59e8c4(0xae1)]=new _0x4be28e(_0x4370b9),this[_0x59e8c4(0xae1)][_0x59e8c4(0x8fe)]=0x0,this[_0x59e8c4(0x317)](this['_commandNameWindow']),this[_0x59e8c4(0xa66)]();}else this['startMotion'](_0x59e8c4(0x252));}else _0x219e05[_0x59e8c4(0x29a)]()?this[_0x59e8c4(0x745)](_0x59e8c4(0xaf1)):this['startMotion'](_0x59e8c4(0x252));}}}}}}}}}}else _0x8f7b21[_0x59e8c4(0x6d0)][_0x59e8c4(0x368)][_0x59e8c4(0xb59)](this),this[_0x59e8c4(0x30f)]();}},Sprite_Actor[_0x44efce(0x8f2)][_0x44efce(0x7da)]=function(){const _0x40f21d=_0x44efce,_0x3e379c=0xa,_0x94196b=0x12c*_0x3e379c,_0x36b453=0x1e*_0x3e379c;this[_0x40f21d(0x9fc)](_0x94196b,0x0,_0x36b453);},Sprite_Actor[_0x44efce(0x8f2)][_0x44efce(0x9d2)]=function(){const _0x29a611=_0x44efce;Sprite_Battler['prototype']['onMoveEnd'][_0x29a611(0xb59)](this);},Sprite_Actor[_0x44efce(0x8f2)][_0x44efce(0x7d4)]=function(){const _0x358bd7=_0x44efce;return Sprite_Battler[_0x358bd7(0x1b5)];},Sprite_Weapon['prototype'][_0x44efce(0x54e)]=function(){const _0x588ec6=_0x44efce;return Sprite_Battler[_0x588ec6(0x1b5)];},Sprite_Actor[_0x44efce(0x8f2)]['setupMotion']=function(){},Sprite_Actor[_0x44efce(0x8f2)]['setupWeaponAnimation']=function(){},Sprite_Actor[_0x44efce(0x8f2)]['updateMotionCount']=function(){const _0x289e05=_0x44efce;if(this['_motion']&&++this[_0x289e05(0x61e)]>=this[_0x289e05(0x7d4)]()){if(this[_0x289e05(0x8c6)][_0x289e05(0xa40)]){if('TXWRd'!==_0x289e05(0xb0d))this[_0x289e05(0x13d)]=(this[_0x289e05(0x13d)]+0x1)%0x4;else{if(!_0x938aae[_0x289e05(0xbab)]())return;if(!this[_0x289e05(0x344)])this[_0x289e05(0x280)]();this['createSeparateDamagePopups']();const _0xd76e4a=this[_0x289e05(0x6dd)]();if(_0xd76e4a)_0xd76e4a[_0x289e05(0xb18)]();}}else this[_0x289e05(0x13d)]<0x2?this[_0x289e05(0x13d)]++:_0x289e05(0x795)===_0x289e05(0x795)?this[_0x289e05(0x310)]():(this[_0x289e05(0x8fd)][_0x289e05(0xb70)]('addText',_0x31a48f['emerge'][_0x289e05(0x437)](_0x44272a)),this[_0x289e05(0x8fd)][_0x289e05(0xb70)](_0x289e05(0xaf1)),_0x2f7e93=!![]);this[_0x289e05(0x61e)]=0x0;}},Sprite_Actor[_0x44efce(0x8f2)][_0x44efce(0xace)]=function(_0x25aef4){const _0xbf49e4=_0x44efce;if(_0x25aef4===_0xbf49e4(0x10d))this['_checkOn']=!![];if(this[_0xbf49e4(0x6cb)]&&this[_0xbf49e4(0x6cb)][_0xbf49e4(0x578)]()){this['_motion']=Sprite_Actor[_0xbf49e4(0xa2d)][_0xbf49e4(0x622)];return;}const _0x5c4785=Sprite_Actor['MOTIONS'][_0x25aef4];this[_0xbf49e4(0x8c6)]=_0x5c4785,this['_motionCount']=0x0,this[_0xbf49e4(0x13d)]=0x0;},Sprite_Actor[_0x44efce(0x8f2)][_0x44efce(0x32f)]=function(_0xee7bda){const _0x3c8ae7=_0x44efce;if(this[_0x3c8ae7(0x1d1)]())return;this[_0x3c8ae7(0x1a4)](),this['_weaponSprite'][_0x3c8ae7(0x803)](_0xee7bda),this['_actor'][_0x3c8ae7(0x862)]();},Sprite_Actor[_0x44efce(0x8f2)][_0x44efce(0x1a4)]=function(){const _0x52381a=_0x44efce;let _0x1b41ba=-0x10,_0x57cf66=this[_0x52381a(0x737)]*0.5;const _0x2cf5fe=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x3f4830=this['_battler'][_0x52381a(0x919)]()[_0x52381a(0xba3)](_0x433ce4=>_0x433ce4&&_0x433ce4['note'][_0x52381a(0xab6)](_0x2cf5fe)?Number(RegExp['$1']):0x0),_0x1c03b2=this[_0x52381a(0x6cb)][_0x52381a(0x919)]()[_0x52381a(0xba3)](_0x11f212=>_0x11f212&&_0x11f212[_0x52381a(0x77d)][_0x52381a(0xab6)](_0x2cf5fe)?Number(RegExp['$2']):0x0);_0x1b41ba=_0x3f4830[_0x52381a(0xa4a)]((_0x4d7837,_0xf8e81b)=>_0x4d7837+_0xf8e81b,_0x1b41ba),_0x57cf66=_0x1c03b2[_0x52381a(0xa4a)]((_0x3d9d5f,_0xd082cf)=>_0x3d9d5f+_0xd082cf,_0x57cf66),this['_weaponSprite']['x']=_0x1b41ba,this['_weaponSprite']['y']=_0x57cf66,this[_0x52381a(0x92a)][_0x52381a(0x9da)]();},Sprite_Weapon['prototype'][_0x44efce(0x803)]=function(_0x2b492f){const _0x421db0=_0x44efce;this[_0x421db0(0xea)]=_0x2b492f,this[_0x421db0(0x827)]=-0x1,this[_0x421db0(0x13d)]=0x0,this[_0x421db0(0x9c1)](),this[_0x421db0(0x44b)]();},Sprite_Actor['prototype'][_0x44efce(0x9e4)]=function(){},Sprite_Actor[_0x44efce(0x8f2)]['stepForward']=function(){const _0x511982=_0x44efce,_0x20f9fb=VisuMZ[_0x511982(0x6d0)][_0x511982(0x444)][_0x511982(0xa63)],_0x333b89=_0x20f9fb[_0x511982(0x959)],_0x13f18b=_0x20f9fb[_0x511982(0x775)],_0x17b28b=_0x20f9fb[_0x511982(0x8ea)];this[_0x511982(0x9fc)](-_0x333b89,-_0x13f18b,_0x17b28b);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x553)]=Sprite_Actor[_0x44efce(0x8f2)][_0x44efce(0x44b)],Sprite_Actor[_0x44efce(0x8f2)][_0x44efce(0x44b)]=function(){const _0x3e0183=_0x44efce;this['hasStaticSvBattler']()?this[_0x3e0183(0xc7)]():(this[_0x3e0183(0xa5f)](),VisuMZ[_0x3e0183(0x6d0)][_0x3e0183(0x553)][_0x3e0183(0xb59)](this));},Sprite_Actor['prototype']['applyFreezeMotionFrames']=function(){const _0x41a060=_0x44efce;if(this[_0x41a060(0x6cb)]&&this[_0x41a060(0x6cb)][_0x41a060(0x738)]){const _0x257b41=this[_0x41a060(0x6cb)][_0x41a060(0x738)];this[_0x41a060(0x8c6)]=Sprite_Actor[_0x41a060(0xa2d)][_0x257b41[_0x41a060(0x828)]],this[_0x41a060(0x13d)]=_0x257b41['pattern'];const _0x4228f4=this[_0x41a060(0x92a)];_0x4228f4['freezeFrame'](_0x257b41[_0x41a060(0x1a5)],_0x257b41[_0x41a060(0x2bc)]),this[_0x41a060(0x1a4)]();}},Sprite_Weapon[_0x44efce(0x8f2)][_0x44efce(0x6a1)]=function(_0x3f27dd,_0x5669e6){const _0xdf1114=_0x44efce;this['_weaponImageId']=_0x3f27dd,this[_0xdf1114(0x827)]=-Infinity,this[_0xdf1114(0x13d)]=_0x5669e6,this[_0xdf1114(0x9c1)](),this[_0xdf1114(0x44b)]();},Sprite_Enemy[_0x44efce(0x8f2)][_0x44efce(0x2be)]=function(){const _0x1ab57c=_0x44efce;Sprite_Battler[_0x1ab57c(0x8f2)][_0x1ab57c(0x2be)]['call'](this),this[_0x1ab57c(0x19d)]=null,this[_0x1ab57c(0x3e4)]=![],this[_0x1ab57c(0x41d)]='',this[_0x1ab57c(0xb87)]=0x0,this[_0x1ab57c(0x142)]=null,this[_0x1ab57c(0x4dc)]=0x0,this[_0x1ab57c(0x375)]=0x0,this[_0x1ab57c(0xb5b)](),this[_0x1ab57c(0x60a)]();},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0xa65)]=Sprite_Enemy['prototype']['update'],Sprite_Enemy[_0x44efce(0x8f2)][_0x44efce(0x9da)]=function(){const _0x419cf6=_0x44efce;VisuMZ[_0x419cf6(0x6d0)][_0x419cf6(0xa65)][_0x419cf6(0xb59)](this),this['updateShadowVisibility']();},Sprite_Enemy[_0x44efce(0x8f2)]['createMainSprite']=function(){const _0x14c2af=_0x44efce;this[_0x14c2af(0xb1e)]=new Sprite(),this[_0x14c2af(0xb1e)][_0x14c2af(0x20c)]['x']=0.5,this[_0x14c2af(0xb1e)][_0x14c2af(0x20c)]['y']=0x1,this['addChild'](this[_0x14c2af(0xb1e)]),this[_0x14c2af(0xadb)]();},Sprite_Enemy[_0x44efce(0x8f2)][_0x44efce(0x768)]=function(){return this['_distortionSprite']||this['_mainSprite']||this;},Sprite_Enemy[_0x44efce(0x8f2)]['loadBitmap']=function(_0x1e8197){const _0xfa72df=_0x44efce;this[_0xfa72df(0x3e8)]=new Bitmap(0x1,0x1);if(this[_0xfa72df(0xbb3)]()){const _0x126e2e=this[_0xfa72df(0x19d)][_0xfa72df(0x5cd)]();this[_0xfa72df(0x3e8)]=new Bitmap(_0x126e2e[_0xfa72df(0x542)],_0x126e2e[_0xfa72df(0x737)]),this[_0xfa72df(0xb1e)]['bitmap']=new Bitmap(0x1,0x1);}else $gameSystem['isSideView']()?_0xfa72df(0xad9)===_0xfa72df(0x70b)?this['battleStatusWindowAnimationContainer']()[_0xfa72df(0x317)](_0xfb2a5b):(this[_0xfa72df(0xb1e)][_0xfa72df(0x3e8)]=ImageManager['loadSvEnemy'](_0x1e8197),this[_0xfa72df(0xb1e)][_0xfa72df(0x3e8)]['addLoadListener'](this[_0xfa72df(0x94d)]['bind'](this))):(this[_0xfa72df(0xb1e)][_0xfa72df(0x3e8)]=ImageManager[_0xfa72df(0x3b2)](_0x1e8197),this[_0xfa72df(0xb1e)]['bitmap'][_0xfa72df(0x4a0)](this[_0xfa72df(0x94d)][_0xfa72df(0x9f7)](this)));},Sprite_Enemy[_0x44efce(0x8f2)][_0x44efce(0x94d)]=function(){const _0x497978=_0x44efce,_0x3f18d1=this[_0x497978(0xb1e)][_0x497978(0x3e8)];if(_0x3f18d1){if(_0x497978(0x5d7)!==_0x497978(0x1d2))this[_0x497978(0x3e8)]=new Bitmap(_0x3f18d1['width'],_0x3f18d1[_0x497978(0x737)]);else return _0x44753d[_0x497978(0xbab)]()?(_0x599bc2[_0x497978(0x45b)]['_spriteset'][_0x497978(0x4f3)](_0x47064a[0x0],_0x50db88[0x1]),!![]):_0x820e39[_0x497978(0x6d0)][_0x497978(0x436)][_0x497978(0xb59)](this,_0x19b509);}},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x82e)]=Sprite_Enemy[_0x44efce(0x8f2)][_0x44efce(0x935)],Sprite_Enemy['prototype'][_0x44efce(0x935)]=function(_0x259092){const _0x448094=_0x44efce;this[_0x448094(0xb1e)]&&this['_mainSprite'][_0x448094(0x935)](_0x259092);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0xa90)]=Sprite_Enemy['prototype'][_0x44efce(0x4ce)],Sprite_Enemy[_0x44efce(0x8f2)][_0x44efce(0x4ce)]=function(){const _0x2a1105=_0x44efce;if(this['allowCollapse']())VisuMZ['BattleCore'][_0x2a1105(0xa90)][_0x2a1105(0xb59)](this);else{if(_0x2a1105(0xacb)!==_0x2a1105(0xacb))_0x20eba7[_0x2a1105(0x6d0)][_0x2a1105(0xb1a)][_0x2a1105(0xb59)](this,_0xa43f);else{this[_0x2a1105(0x3e4)]=!this['_enemy']['isHidden']();if(!this[_0x2a1105(0x3e4)]){if('lBlAE'!==_0x2a1105(0xb5a))this[_0x2a1105(0x8fe)]=0x0;else return this[_0x2a1105(0x88c)]();}}}},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x219)]=Sprite_Enemy[_0x44efce(0x8f2)]['updateCollapse'],Sprite_Enemy[_0x44efce(0x8f2)][_0x44efce(0x28b)]=function(){const _0x4ab381=_0x44efce;if(this[_0x4ab381(0x934)]())VisuMZ[_0x4ab381(0x6d0)]['Sprite_Enemy_updateCollapse']['call'](this);},Sprite_Enemy['prototype']['updateFrame']=function(){const _0x43477c=_0x44efce;Sprite_Battler[_0x43477c(0x8f2)][_0x43477c(0x44b)][_0x43477c(0xb59)](this);const _0x5a3cce=this[_0x43477c(0x768)]()||this;if(!_0x5a3cce)return;if(!_0x5a3cce['bitmap']){if(_0x43477c(0x8f4)==='YPpIk'){const _0x5c1091=this[_0x43477c(0x59e)];if(_0x5c1091[_0x5cfd7e])return _0x5c1091[_0x4be09d];else{const _0x22c1b8=new _0xbb8a8f();return _0x5c1091[_0xaba634]=_0x22c1b8,this[_0x43477c(0x6b0)](_0x22c1b8),this[_0x43477c(0x6b0)](this[_0x43477c(0x529)]),_0x22c1b8;}}else _0x5a3cce[_0x43477c(0x3e8)]=new Bitmap(this['width'],this[_0x43477c(0x737)]);}this[_0x43477c(0x142)]==='bossCollapse'?_0x43477c(0x338)!==_0x43477c(0x91b)?this[_0x43477c(0xb1e)][_0x43477c(0x228)](0x0,0x0,this[_0x43477c(0xb1e)][_0x43477c(0x542)],this[_0x43477c(0x4dc)]):_0x1f62b4+=_0x4deb62(_0x38ed0c['$2']):_0x43477c(0x901)===_0x43477c(0x901)?_0x5a3cce[_0x43477c(0x228)](0x0,0x0,_0x5a3cce[_0x43477c(0x3e8)][_0x43477c(0x542)],this['bitmap'][_0x43477c(0x737)]):_0x4362f9[_0x43477c(0x430)]('PreEndActionJS');},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0xfc)]=Sprite_Enemy[_0x44efce(0x8f2)][_0x44efce(0xb67)],Sprite_Enemy[_0x44efce(0x8f2)]['updateBossCollapse']=function(){const _0x343f0a=_0x44efce;if(this['allowCollapse']())VisuMZ[_0x343f0a(0x6d0)][_0x343f0a(0xfc)]['call'](this);},Sprite_Enemy[_0x44efce(0x8f2)][_0x44efce(0x506)]=function(){const _0x425243=_0x44efce;return Sprite_Battler[_0x425243(0x8f2)][_0x425243(0x506)][_0x425243(0xb59)](this);},VisuMZ['BattleCore'][_0x44efce(0x5f9)]=Sprite_Enemy[_0x44efce(0x8f2)][_0x44efce(0x401)],Sprite_Enemy[_0x44efce(0x8f2)][_0x44efce(0x401)]=function(){const _0x3d4860=_0x44efce;VisuMZ['BattleCore']['Sprite_Enemy_updateStateSprite']['call'](this),this[_0x3d4860(0xa74)]();},Sprite_Enemy[_0x44efce(0x8f2)][_0x44efce(0xa74)]=function(){const _0x4e7eb8=_0x44efce,_0x5a9889=VisuMZ['BattleCore'][_0x4e7eb8(0x444)][_0x4e7eb8(0x71b)];if(_0x5a9889[_0x4e7eb8(0x4f4)]&&!_0x5a9889['NameLegacy']){this[_0x4e7eb8(0x3e9)][_0x4e7eb8(0x8fe)]=0x0;return;}this['_stateIconSprite']['x']=0x0,this['_stateIconSprite']['x']+=this[_0x4e7eb8(0x6cb)][_0x4e7eb8(0x3a3)](),this[_0x4e7eb8(0x3e9)]['y']=-this[_0x4e7eb8(0x3e8)]['height']-this[_0x4e7eb8(0x3e9)][_0x4e7eb8(0x737)]-0x4,this['_stateIconSprite']['y']+=this[_0x4e7eb8(0x6cb)]['battleUIOffsetY'](),this[_0x4e7eb8(0x3e9)][_0x4e7eb8(0x718)]['x']=0x1/(this[_0x4e7eb8(0x718)]['x']||0.001),this[_0x4e7eb8(0x3e9)][_0x4e7eb8(0x718)]['y']=0x1/(this[_0x4e7eb8(0x718)]['y']||0.001);if(this['hasSvBattler']()){if(_0x4e7eb8(0x24d)===_0x4e7eb8(0x24d))this['_svBattlerSprite'][_0x4e7eb8(0x5c6)]['scale']['x']=-0x1/(this[_0x4e7eb8(0x718)]['x']||0.001),this[_0x4e7eb8(0x758)]['_stateSprite'][_0x4e7eb8(0x718)]['y']=0x1/(this[_0x4e7eb8(0x718)]['y']||0.001);else return this['getAttackMotion']();}},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x30a)]=Sprite_Enemy[_0x44efce(0x8f2)]['setBattler'],Sprite_Enemy['prototype']['setBattler']=function(_0x16b2b1){const _0x5a69f2=_0x44efce;VisuMZ['BattleCore'][_0x5a69f2(0x30a)][_0x5a69f2(0xb59)](this,_0x16b2b1),this[_0x5a69f2(0xaf7)](_0x16b2b1);},Sprite_Enemy[_0x44efce(0x8f2)][_0x44efce(0xaf7)]=function(_0x5e5f09){const _0x1659af=_0x44efce;!this[_0x1659af(0x758)]&&(_0x1659af(0x735)===_0x1659af(0x100)?(_0x1e6a3b=_0x347e0b+_0xc178aa[_0x1659af(0xaea)]/0x2-0x4,_0x374dfb=_0x4cf723-_0x3400de[_0x1659af(0x3fa)]/0x2):(this['_svBattlerSprite']=new Sprite_SvEnemy(_0x5e5f09),this[_0x1659af(0xadb)]())),this['_svBattlerSprite'][_0x1659af(0x2fa)](_0x5e5f09);},Sprite_Enemy[_0x44efce(0x8f2)][_0x44efce(0xbb3)]=function(){const _0x4a5f33=_0x44efce;return this[_0x4a5f33(0x19d)]&&this[_0x4a5f33(0x19d)][_0x4a5f33(0xbb3)]();},Sprite_Enemy[_0x44efce(0x8f2)][_0x44efce(0x934)]=function(){const _0x154470=_0x44efce;return this['hasSvBattler']()?this[_0x154470(0x19d)][_0x154470(0x934)]():!![];},Sprite_Enemy[_0x44efce(0x8f2)]['refreshMotion']=function(){const _0x22a8ad=_0x44efce;if(this[_0x22a8ad(0xbb3)]()){if('rMAIh'==='rMAIh')this[_0x22a8ad(0x758)]['refreshMotion']();else return this[_0x22a8ad(0x29a)]()&&this['currentAction']()[_0x22a8ad(0x987)]()&&this[_0x22a8ad(0x29a)]()[_0x22a8ad(0x84e)]();}},Sprite_Enemy[_0x44efce(0x8f2)][_0x44efce(0xace)]=function(_0x121cb3){const _0x2252a5=_0x44efce;if(this[_0x2252a5(0xbb3)]())this['_svBattlerSprite'][_0x2252a5(0xace)](_0x121cb3);},Sprite_Enemy['prototype']['forceWeaponAnimation']=function(_0x4eb71e){const _0x3cae84=_0x44efce;if(this['hasSvBattler']())this[_0x3cae84(0x758)][_0x3cae84(0x32f)](_0x4eb71e);},Sprite_Enemy[_0x44efce(0x8f2)][_0x44efce(0xf1)]=function(){const _0x4590e2=_0x44efce,_0x1e26ba=VisuMZ[_0x4590e2(0x6d0)][_0x4590e2(0x444)][_0x4590e2(0xa63)],_0x9b2b57=_0x1e26ba[_0x4590e2(0x959)],_0x324bec=_0x1e26ba[_0x4590e2(0x775)],_0xba2f79=_0x1e26ba[_0x4590e2(0x8ea)];this[_0x4590e2(0x9fc)](_0x9b2b57,_0x324bec,_0xba2f79);};function Sprite_SvEnemy(){const _0x5e71aa=_0x44efce;this[_0x5e71aa(0x64a)](...arguments);}Sprite_SvEnemy['prototype']=Object['create'](Sprite_Actor[_0x44efce(0x8f2)]),Sprite_SvEnemy['prototype']['constructor']=Sprite_SvEnemy,Sprite_SvEnemy[_0x44efce(0x8f2)]['initialize']=function(_0x3aa1d4){const _0x2e8bd3=_0x44efce;Sprite_Actor[_0x2e8bd3(0x8f2)][_0x2e8bd3(0x64a)][_0x2e8bd3(0xb59)](this,_0x3aa1d4),this[_0x2e8bd3(0x718)]['x']=-0x1,this['_stateSprite']['scale']['x']=-0x1;},Sprite_SvEnemy[_0x44efce(0x8f2)][_0x44efce(0xae)]=function(){},Sprite_SvEnemy[_0x44efce(0x8f2)][_0x44efce(0x60b)]=function(){},Sprite_SvEnemy[_0x44efce(0x8f2)][_0x44efce(0xb43)]=function(_0x176bec){},Sprite_SvEnemy['prototype'][_0x44efce(0x46c)]=function(){},Sprite_SvEnemy['prototype'][_0x44efce(0x58e)]=function(){},Sprite_SvEnemy['prototype'][_0x44efce(0x401)]=function(){const _0x3ed0cf=_0x44efce;this[_0x3ed0cf(0x5c6)][_0x3ed0cf(0x922)]=![];},Sprite_SvEnemy[_0x44efce(0x8f2)][_0x44efce(0x7a0)]=function(){const _0x9b71b=_0x44efce;Sprite_Battler[_0x9b71b(0x8f2)]['updateBitmap'][_0x9b71b(0xb59)](this);const _0x1656de=this[_0x9b71b(0x81e)][_0x9b71b(0x814)]();this[_0x9b71b(0x41d)]!==_0x1656de&&(this[_0x9b71b(0x41d)]=_0x1656de,this[_0x9b71b(0xb1e)][_0x9b71b(0x3e8)]=ImageManager[_0x9b71b(0xe4)](_0x1656de));if(this[_0x9b71b(0xb1e)]&&this[_0x9b71b(0xb1e)][_0x9b71b(0x3e8)]&&this[_0x9b71b(0x6cb)]){if(this[_0x9b71b(0xb1e)][_0x9b71b(0x3e8)][_0x9b71b(0x4ea)]!==this['_battler'][_0x9b71b(0x5ed)]()){if(_0x9b71b(0x7ea)!==_0x9b71b(0xb02))this[_0x9b71b(0xb1e)][_0x9b71b(0x3e8)]['smooth']=this['_battler'][_0x9b71b(0x5ed)]();else{if(this[_0x9b71b(0x2b6)]['svAnchorX']!==_0x201804)return this['_cache'][_0x9b71b(0x893)];return this[_0x9b71b(0x918)]()['note'][_0x9b71b(0xab6)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x9b71b(0x2b6)][_0x9b71b(0x893)]=_0x573f39(_0x1a8080['$1']),this[_0x9b71b(0x2b6)]['svAnchorY']=_0x1da3f7(_0x3d2863['$2'])):this[_0x9b71b(0x2b6)][_0x9b71b(0x893)]=_0x13871a[_0x9b71b(0x8f2)]['svBattlerAnchorX']['call'](this),this['_cache'][_0x9b71b(0x893)];}}}},Sprite_SvEnemy[_0x44efce(0x8f2)][_0x44efce(0x7da)]=function(){},Sprite_SvEnemy[_0x44efce(0x8f2)][_0x44efce(0x9fc)]=function(_0x284a31,_0x230fca,_0xf75c7a){const _0x1a4842=_0x44efce;if(this[_0x1a4842(0x5a3)])this[_0x1a4842(0x5a3)]['startMove'](_0x284a31,_0x230fca,_0xf75c7a);},Sprite_SvEnemy[_0x44efce(0x8f2)][_0x44efce(0x310)]=function(){const _0xc48564=_0x44efce,_0x4e2532=this['_actor'];if(_0x4e2532){if('zCvsF'!=='aafHn'){const _0x42c95b=_0x4e2532[_0xc48564(0x99d)]();if(_0x4e2532[_0xc48564(0x6dc)]()||_0x4e2532[_0xc48564(0x5be)]())'viPJm'!==_0xc48564(0x426)?this[_0xc48564(0x8fe)]=0x0:this[_0xc48564(0x745)](_0xc48564(0x252));else{if(_0x42c95b===0x3){if('xfDdb'!==_0xc48564(0xbb5))return;else this['startMotion'](_0xc48564(0x622));}else{if(_0x42c95b===0x2){if(_0xc48564(0x68e)==='CDaMg'){const _0xfa8e66=this['_dimmerSprite']['bitmap'],_0x7271ee=this['width']-0x8,_0x52fbca=this[_0xc48564(0x737)],_0x18d946=this[_0xc48564(0xd7)],_0x2caec8=_0x3a593d[_0xc48564(0xa6e)](),_0x345adc=_0xa1048a[_0xc48564(0x5bc)]();this[_0xc48564(0x411)]['x']=0x4,_0xfa8e66['resize'](_0x7271ee,_0x52fbca),_0xfa8e66[_0xc48564(0x36b)](0x0,0x0,_0x7271ee,_0x18d946,_0x345adc,_0x2caec8,!![]),_0xfa8e66[_0xc48564(0x6d6)](0x0,_0x18d946,_0x7271ee,_0x52fbca-_0x18d946*0x2,_0x2caec8),_0xfa8e66[_0xc48564(0x36b)](0x0,_0x52fbca-_0x18d946,_0x7271ee,_0x18d946,_0x2caec8,_0x345adc,!![]),this['_dimmerSprite'][_0xc48564(0x228)](0x0,0x0,_0x7271ee,_0x52fbca);}else this[_0xc48564(0x745)]('sleep');}else{if(_0x4e2532[_0xc48564(0x9ab)]())this[_0xc48564(0x745)](_0xc48564(0x1b9));else{if(_0x4e2532[_0xc48564(0x869)]()||_0x4e2532['isGuardWaiting']()){if(_0xc48564(0x1d0)!==_0xc48564(0xaae))this[_0xc48564(0x745)](_0xc48564(0x346));else return this[_0xc48564(0x987)]()?_0x43837e[_0xc48564(0x6d0)][_0xc48564(0x560)][_0xc48564(0xb59)](this):0x0;}else{if(_0x42c95b===0x1)this['startMotion']('abnormal');else{if(_0x4e2532[_0xc48564(0x629)]())this[_0xc48564(0x745)](_0xc48564(0x989));else _0x4e2532['isUndecided']()?_0xc48564(0xbb7)!==_0xc48564(0xbb7)?this[_0xc48564(0x64a)](...arguments):this[_0xc48564(0x745)](_0xc48564(0x252)):this[_0xc48564(0x745)](_0x4e2532['svBattlerData']()[_0xc48564(0x8fb)]||_0xc48564(0x252));}}}}}}}else this['selectNextCommandTpb']();}},Sprite_SvEnemy[_0x44efce(0x8f2)]['inHomePosition']=function(){const _0x4ddb3e=_0x44efce;return this['parent']?this['parent']['_offsetX']===0x0&&this[_0x4ddb3e(0x5a3)][_0x4ddb3e(0x207)]===0x0:!![];},Sprite_SvEnemy['prototype'][_0x44efce(0x7f9)]=function(){},VisuMZ[_0x44efce(0x6d0)]['Sprite_Animation_targetSpritePosition']=Sprite_Animation[_0x44efce(0x8f2)][_0x44efce(0x630)],Sprite_Animation[_0x44efce(0x8f2)][_0x44efce(0x630)]=function(_0x60841e){const _0x42e59b=_0x44efce;return _0x60841e[_0x42e59b(0x2d3)]?this[_0x42e59b(0x97a)](_0x60841e):VisuMZ[_0x42e59b(0x6d0)][_0x42e59b(0xf9)]['call'](this,_0x60841e);},Sprite_Animation['prototype'][_0x44efce(0x97a)]=function(_0x35a432){const _0x22d40a=_0x44efce;let _0x206e24=_0x35a432['x'],_0x6b54df=_0x35a432['y'],_0x17501b=_0x35a432[_0x22d40a(0x737)],_0x1a4106=_0x35a432['_distortionSprite']['scale']['y'];_0x35a432['x']=_0x35a432[_0x22d40a(0x5f2)]+_0x35a432[_0x22d40a(0x880)](),_0x35a432['y']=_0x35a432[_0x22d40a(0xbb8)]+_0x35a432[_0x22d40a(0x326)](),_0x35a432[_0x22d40a(0x737)]*=_0x1a4106;let _0x2e4ce2=VisuMZ[_0x22d40a(0x6d0)][_0x22d40a(0xf9)][_0x22d40a(0xb59)](this,_0x35a432);return _0x35a432['x']=_0x206e24,_0x35a432['y']=_0x6b54df,_0x35a432[_0x22d40a(0x737)]=_0x17501b,_0x2e4ce2;},VisuMZ['BattleCore'][_0x44efce(0xa6f)]=Sprite_AnimationMV[_0x44efce(0x8f2)][_0x44efce(0xa27)],Sprite_AnimationMV[_0x44efce(0x8f2)][_0x44efce(0xa27)]=function(){const _0x585c82=_0x44efce;VisuMZ[_0x585c82(0x6d0)][_0x585c82(0xa6f)][_0x585c82(0xb59)](this);if(this[_0x585c82(0x9d1)][_0x585c82(0x837)]===0x3){if(this['x']===0x0)this['x']=Math[_0x585c82(0x18c)](Graphics[_0x585c82(0x542)]/0x2);if(this['y']===0x0)this['y']=Math[_0x585c82(0x18c)](Graphics[_0x585c82(0x737)]/0x2);}},Sprite_Damage[_0x44efce(0x8f2)]['setupBattleCore']=function(_0x2cda84){const _0x28d603=_0x44efce,_0x12c507=_0x2cda84['getNextDamagePopup']()||_0x2cda84[_0x28d603(0x12d)]();if(_0x12c507[_0x28d603(0x5cf)]||_0x12c507['evaded'])_0x28d603(0x489)===_0x28d603(0x504)?this[_0x28d603(0x7c8)](_0x28d603(0x346)):(this[_0x28d603(0x913)]=0x0,this[_0x28d603(0x230)]());else{if(_0x12c507['hpAffected'])this[_0x28d603(0x913)]=_0x12c507[_0x28d603(0x3c8)]>=0x0?0x0:0x1,this[_0x28d603(0x59b)](_0x12c507[_0x28d603(0x3c8)]);else _0x2cda84[_0x28d603(0x8e9)]()&&_0x12c507[_0x28d603(0x329)]!==0x0&&(this['_colorType']=_0x12c507['mpDamage']>=0x0?0x2:0x3,this['createDigits'](_0x12c507[_0x28d603(0x329)]));}_0x12c507[_0x28d603(0x311)]&&this[_0x28d603(0x779)]();},Sprite_Damage[_0x44efce(0x8f2)]['setup']=function(_0x17299e){},Sprite_Damage[_0x44efce(0x8f2)][_0x44efce(0x59b)]=function(_0x5aeb70){const _0x20b2b5=_0x44efce;let _0x54cd41=this[_0x20b2b5(0x87b)](_0x5aeb70);const _0x367dae=this[_0x20b2b5(0x90e)](),_0x1fd041=Math[_0x20b2b5(0xa3a)](_0x367dae*0.75);for(let _0x5c1466=0x0;_0x5c1466<_0x54cd41[_0x20b2b5(0x496)];_0x5c1466++){const _0xcbf8b0=this[_0x20b2b5(0x55c)](_0x1fd041,_0x367dae);_0xcbf8b0[_0x20b2b5(0x3e8)][_0x20b2b5(0x9d8)](_0x54cd41[_0x5c1466],0x0,0x0,_0x1fd041,_0x367dae,_0x20b2b5(0x281)),_0xcbf8b0['x']=(_0x5c1466-(_0x54cd41[_0x20b2b5(0x496)]-0x1)/0x2)*_0x1fd041,_0xcbf8b0['dy']=-_0x5c1466;}},Sprite_Damage[_0x44efce(0x8f2)][_0x44efce(0x87b)]=function(_0x508850){const _0x436402=_0x44efce;let _0x37a862=Math['abs'](_0x508850)[_0x436402(0x15a)]();this[_0x436402(0x38a)]()&&(_0x436402(0x474)===_0x436402(0x191)?(this[_0x436402(0x8fd)]['push'](_0x436402(0x6fa),_0x3d491e[_0x436402(0x2d7)][_0x436402(0x437)](_0x302a8e[_0x436402(0x5d4)]())),this['_logWindow'][_0x436402(0xb70)](_0x436402(0xaf1))):_0x37a862=VisuMZ[_0x436402(0x552)](_0x37a862));const _0x3ee91f=VisuMZ[_0x436402(0x6d0)]['Settings'][_0x436402(0x86a)];let _0x4628ef='',_0x159cdb='';switch(this[_0x436402(0x913)]){case 0x0:_0x4628ef=_0x3ee91f[_0x436402(0x84a)]||_0x436402(0x874),_0x159cdb=TextManager['hp'];if(_0x508850===0x0)_0x4628ef='%1';break;case 0x1:_0x4628ef=_0x3ee91f[_0x436402(0x4ba)]||_0x436402(0x11f),_0x159cdb=TextManager['hp'];break;case 0x2:_0x4628ef=_0x3ee91f[_0x436402(0x4ae)]||_0x436402(0x1fa),_0x159cdb=TextManager['mp'];break;case 0x3:_0x4628ef=_0x3ee91f['mpHealingFmt']||_0x436402(0x515),_0x159cdb=TextManager['mp'];break;}return _0x4628ef[_0x436402(0x437)](_0x37a862,_0x159cdb)['trim']();},Sprite_Damage['prototype']['useDigitGrouping']=function(){const _0x26c43f=_0x44efce;return Imported[_0x26c43f(0x1bc)]?VisuMZ[_0x26c43f(0x7dd)]['Settings'][_0x26c43f(0x78f)][_0x26c43f(0xb20)]:![];},Sprite_Damage[_0x44efce(0x8f2)][_0x44efce(0x779)]=function(){const _0x4bab0b=_0x44efce,_0x30e34d=VisuMZ[_0x4bab0b(0x6d0)][_0x4bab0b(0x444)][_0x4bab0b(0x86a)];this[_0x4bab0b(0xb86)]=_0x30e34d['CriticalColor'][_0x4bab0b(0x3f2)](0x0),this[_0x4bab0b(0x611)]=_0x30e34d[_0x4bab0b(0x69b)];},Sprite_Damage[_0x44efce(0x8f2)][_0x44efce(0xabc)]=function(_0x59518a,_0x42f5aa){const _0x1b95f8=_0x44efce;this[_0x1b95f8(0xb86)]=_0x42f5aa['flashColor']||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx['makeDeepCopy'](this[_0x1b95f8(0xb86)]),this[_0x1b95f8(0x611)]=_0x42f5aa[_0x1b95f8(0x734)]||0x0;const _0x554fe8=this['fontSize'](),_0x831376=Math[_0x1b95f8(0xa3a)](_0x554fe8*0x1e),_0x1a7a8e=this['createChildSprite'](_0x831376,_0x554fe8);_0x1a7a8e[_0x1b95f8(0x3e8)][_0x1b95f8(0xa5d)]=ColorManager[_0x1b95f8(0x2fc)](_0x42f5aa[_0x1b95f8(0xa5d)]),_0x1a7a8e['bitmap'][_0x1b95f8(0x9d8)](_0x59518a,0x0,0x0,_0x831376,_0x554fe8,'center'),_0x1a7a8e['dy']=0x0;},Sprite_Damage[_0x44efce(0x8f2)][_0x44efce(0x365)]=function(_0x17713e,_0x56a6c5,_0xc0a091){const _0x776e12=_0x44efce,_0x5bb624=Math[_0x776e12(0x65c)](this['fontSize'](),ImageManager[_0x776e12(0x3fa)]),_0x5947b2=Math[_0x776e12(0xa3a)](_0x5bb624*0x1e),_0x30d4a9=this[_0x776e12(0x55c)](_0x5947b2,_0x5bb624),_0x721c7c=ImageManager[_0x776e12(0xaea)]/0x2,_0x240f13=_0x30d4a9[_0x776e12(0x3e8)][_0x776e12(0x954)](_0x56a6c5+'\x20');_0x30d4a9['bitmap']['textColor']=ColorManager[_0x776e12(0x2fc)](_0xc0a091[_0x776e12(0xa5d)]),_0x30d4a9[_0x776e12(0x3e8)]['drawText'](_0x56a6c5,_0x721c7c,0x0,_0x5947b2-_0x721c7c,_0x5bb624,_0x776e12(0x281));const _0xfb16d5=Math[_0x776e12(0x18c)]((_0x5bb624-ImageManager['iconHeight'])/0x2),_0x55f849=_0x5947b2/0x2-ImageManager['iconWidth']-_0x240f13/0x2+_0x721c7c/0x2,_0xd0c551=ImageManager[_0x776e12(0x25a)](_0x776e12(0x4a3)),_0x27b1c9=ImageManager['iconWidth'],_0x18b763=ImageManager['iconHeight'],_0x3175e5=_0x17713e%0x10*_0x27b1c9,_0x1b91ad=Math['floor'](_0x17713e/0x10)*_0x18b763;_0x30d4a9[_0x776e12(0x3e8)]['blt'](_0xd0c551,_0x3175e5,_0x1b91ad,_0x27b1c9,_0x18b763,_0x55f849,_0xfb16d5),this[_0x776e12(0xb86)]=_0xc0a091['flashColor']||[0x0,0x0,0x0,0x0],this[_0x776e12(0xb86)]=JsonEx['makeDeepCopy'](this[_0x776e12(0xb86)]),this['_flashDuration']=_0xc0a091[_0x776e12(0x734)]||0x0,_0x30d4a9['dy']=0x0;},VisuMZ['BattleCore'][_0x44efce(0x438)]=Sprite_Damage[_0x44efce(0x8f2)]['createChildSprite'],Sprite_Damage[_0x44efce(0x8f2)][_0x44efce(0x55c)]=function(_0x45178f,_0x21d4fc){const _0x12083a=_0x44efce;return _0x21d4fc=Math[_0x12083a(0x18c)](_0x21d4fc*1.2),VisuMZ[_0x12083a(0x6d0)][_0x12083a(0x438)][_0x12083a(0xb59)](this,_0x45178f,_0x21d4fc);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x26e)]=Sprite_StateIcon[_0x44efce(0x8f2)][_0x44efce(0x44b)],Sprite_StateIcon[_0x44efce(0x8f2)][_0x44efce(0x44b)]=function(){const _0xb86228=_0x44efce;VisuMZ[_0xb86228(0x6d0)][_0xb86228(0x26e)][_0xb86228(0xb59)](this),this[_0xb86228(0x8fe)]=this[_0xb86228(0x497)]>0x0?0xff:0x0;},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x3d2)]=Sprite_Weapon[_0x44efce(0x8f2)][_0x44efce(0x9c1)],Sprite_Weapon[_0x44efce(0x8f2)][_0x44efce(0x9c1)]=function(){const _0x207f73=_0x44efce;VisuMZ['BattleCore'][_0x207f73(0x3d2)][_0x207f73(0xb59)](this);if(this[_0x207f73(0x3e8)]){if(_0x207f73(0xf6)!=='DVNVe')this['bitmap'][_0x207f73(0x4ea)]=VisuMZ[_0x207f73(0x6d0)][_0x207f73(0x444)][_0x207f73(0x44f)][_0x207f73(0x999)];else return[_0x2e83d1];}};function Sprite_HpGauge(){const _0x139241=_0x44efce;this[_0x139241(0x64a)](...arguments);}function _0x3d4e(_0x3105be,_0x224a77){const _0x4fa77e=_0x4fa7();return _0x3d4e=function(_0x3d4ea8,_0x1a276b){_0x3d4ea8=_0x3d4ea8-0xa3;let _0x512afa=_0x4fa77e[_0x3d4ea8];return _0x512afa;},_0x3d4e(_0x3105be,_0x224a77);}Sprite_HpGauge['prototype']=Object[_0x44efce(0x166)](Sprite_Gauge['prototype']),Sprite_HpGauge[_0x44efce(0x8f2)][_0x44efce(0x669)]=Sprite_HpGauge,Sprite_HpGauge['prototype'][_0x44efce(0x64a)]=function(){const _0x483ac1=_0x44efce;Sprite_Gauge[_0x483ac1(0x8f2)][_0x483ac1(0x64a)][_0x483ac1(0xb59)](this);},Sprite_HpGauge[_0x44efce(0x8f2)][_0x44efce(0xa3b)]=function(){return 0x0;},Sprite_HpGauge[_0x44efce(0x8f2)][_0x44efce(0x80c)]=function(){const _0x5a1311=_0x44efce;this[_0x5a1311(0x3e8)][_0x5a1311(0xa09)]();const _0x39b590=this[_0x5a1311(0x17c)]();!isNaN(_0x39b590)&&this[_0x5a1311(0x920)]();};function Sprite_EnemyName(){const _0x20696b=_0x44efce;this[_0x20696b(0x64a)](...arguments);}Sprite_EnemyName['prototype']=Object[_0x44efce(0x166)](Sprite_Name[_0x44efce(0x8f2)]),Sprite_EnemyName[_0x44efce(0x8f2)][_0x44efce(0x669)]=Sprite_EnemyName,Sprite_EnemyName[_0x44efce(0x8f2)][_0x44efce(0x64a)]=function(){const _0x26284f=_0x44efce;Sprite_Name[_0x26284f(0x8f2)][_0x26284f(0x64a)][_0x26284f(0xb59)](this),this['createAttachedSprites']();},Sprite_EnemyName['prototype'][_0x44efce(0x2be)]=function(){const _0x32263a=_0x44efce;Sprite_Name[_0x32263a(0x8f2)][_0x32263a(0x2be)][_0x32263a(0xb59)](this),this[_0x32263a(0x8fe)]=0x0,this[_0x32263a(0xa4d)]=null,this[_0x32263a(0x20c)]['x']=0.5,this[_0x32263a(0x20c)]['y']=0x0;},Sprite_EnemyName[_0x44efce(0x8f2)][_0x44efce(0x321)]=function(){const _0x30c3c6=_0x44efce;VisuMZ['BattleCore'][_0x30c3c6(0x444)]['Enemy'][_0x30c3c6(0x4f4)]&&(this[_0x30c3c6(0x3e9)]=new Sprite_StateIcon(),this[_0x30c3c6(0x317)](this[_0x30c3c6(0x3e9)]));},Sprite_EnemyName['prototype']['bitmapWidth']=function(){return Graphics['boxWidth'];},Sprite_EnemyName['prototype'][_0x44efce(0xad7)]=function(){const _0x44beaf=_0x44efce;return this[_0x44beaf(0x14f)]=this[_0x44beaf(0x14f)]||Window_Base[_0x44beaf(0x8f2)][_0x44beaf(0x41b)]()||0x24,this['_lineHeight']*0x4;},Sprite_EnemyName[_0x44efce(0x8f2)][_0x44efce(0x90e)]=function(){const _0x51093b=_0x44efce;return VisuMZ[_0x51093b(0x6d0)]['Settings'][_0x51093b(0x71b)][_0x51093b(0x64f)]||$gameSystem[_0x51093b(0x37e)]();},Sprite_EnemyName['prototype'][_0x44efce(0x139)]=function(_0x3bcb29){const _0x1c1537=_0x44efce;this[_0x1c1537(0xa4d)]=_0x3bcb29;},Sprite_EnemyName[_0x44efce(0x8f2)][_0x44efce(0x9da)]=function(){const _0x299c69=_0x44efce;Sprite_Name[_0x299c69(0x8f2)][_0x299c69(0x9da)][_0x299c69(0xb59)](this),this[_0x299c69(0x870)](),this[_0x299c69(0xa27)](),this['updateAttachedSprites'](),this[_0x299c69(0x798)]();},Sprite_EnemyName[_0x44efce(0x8f2)]['redraw']=function(){const _0xe7bcc5=_0x44efce;this['_cacheTextWidth']=undefined;const _0x132d7e=this['name'](),_0xb0171d=this[_0xe7bcc5(0x81d)](),_0xace839=Window_Base[_0xe7bcc5(0x8f2)][_0xe7bcc5(0x41b)]();this[_0xe7bcc5(0x766)](),this[_0xe7bcc5(0x3e8)]['clear'](),this[_0xe7bcc5(0x3e8)][_0xe7bcc5(0x9d8)](_0x132d7e,0x0,0x0,_0xb0171d,_0xace839,_0xe7bcc5(0x281));},Sprite_EnemyName[_0x44efce(0x8f2)]['updateLink']=function(){const _0x204fde=_0x44efce;if(!this[_0x204fde(0xa4d)])return;this[_0x204fde(0x6cb)]!==this['_linkedSprite'][_0x204fde(0x6cb)]&&('HfIhz'!=='HfIhz'?(_0x2d8da7[_0x204fde(0x6d0)][_0x204fde(0x749)]['call'](this,_0x554da5),this[_0x204fde(0x463)]()):this['setup'](this[_0x204fde(0xa4d)][_0x204fde(0x6cb)]));},Sprite_EnemyName[_0x44efce(0x8f2)][_0x44efce(0xa27)]=function(){const _0x39ad42=_0x44efce;if(!this['_linkedSprite'])return;this['_lineHeight']=this[_0x39ad42(0x14f)]||Window_Base[_0x39ad42(0x8f2)][_0x39ad42(0x41b)](),this['x']=this['_linkedSprite'][_0x39ad42(0x5f2)],this['y']=this[_0x39ad42(0xa4d)][_0x39ad42(0xbb8)]-this[_0x39ad42(0x14f)]*0.5;const _0x556cdb=VisuMZ['BattleCore'][_0x39ad42(0x444)][_0x39ad42(0x71b)];this['x']+=_0x556cdb[_0x39ad42(0x9e0)]||0x0,this['y']+=_0x556cdb['NameOffsetY']||0x0;},Sprite_EnemyName['prototype'][_0x44efce(0x505)]=function(){const _0x71cd23=_0x44efce;this[_0x71cd23(0x2f2)]();},Sprite_EnemyName[_0x44efce(0x8f2)][_0x44efce(0x2f2)]=function(){const _0x59dc65=_0x44efce;if(!this[_0x59dc65(0x3e9)])return;if(this['_battler']!==this[_0x59dc65(0x3e9)][_0x59dc65(0x6cb)]){if(_0x59dc65(0x800)===_0x59dc65(0x800))this[_0x59dc65(0x3e9)][_0x59dc65(0x803)](this[_0x59dc65(0x6cb)]);else{if(!_0xd975f9[_0x59dc65(0x6d0)]['TpbActiveChangeEnabled'])return;if(_0x743d87[_0x59dc65(0x8b9)]&&_0x7659c4[_0x59dc65(0x5ac)]())return;const _0x17a390=_0x1dc809[_0x59dc65(0xb09)]()[_0x59dc65(0xc9)](_0x286425=>_0x286425[_0x59dc65(0xa3c)]()&&_0x286425['canInput']());_0x18845e[_0x59dc65(0x589)]=_0x17a390[0x0]||null,_0x681fad[_0x59dc65(0x589)]&&_0x1ade61[_0x59dc65(0x589)][_0x59dc65(0xa6c)](_0x59dc65(0xb8c));}}const _0x331e59=this[_0x59dc65(0x264)]();this['_lineHeight']=this[_0x59dc65(0x14f)]||Window_Base[_0x59dc65(0x8f2)][_0x59dc65(0x41b)](),this[_0x59dc65(0x3e9)]['x']=Math[_0x59dc65(0x18c)]((_0x331e59+ImageManager[_0x59dc65(0xaea)])/0x2)+0x8,this[_0x59dc65(0x3e9)]['y']=this[_0x59dc65(0x14f)]/0x2;const _0x182445=VisuMZ[_0x59dc65(0x6d0)][_0x59dc65(0x444)]['Enemy'];this[_0x59dc65(0x3e9)]['x']+=_0x182445[_0x59dc65(0xc3)]||0x0,this['_stateIconSprite']['y']+=_0x182445['AttachStateOffsetY']||0x0;},Sprite_EnemyName[_0x44efce(0x8f2)][_0x44efce(0x798)]=function(){const _0x4521e6=_0x44efce,_0x331218=this[_0x4521e6(0x15b)]();if(_0x331218&&this['opacity']<0xff)this[_0x4521e6(0x8fe)]+=0x10;else!_0x331218&&this[_0x4521e6(0x8fe)]>0x0&&(_0x4521e6(0x34f)==='xjfVf'?_0x55a1e9[_0x4521e6(0x25f)](_0x399ca4):this['opacity']-=0x10);},Sprite_EnemyName[_0x44efce(0x8f2)][_0x44efce(0x15b)]=function(){const _0x49f636=_0x44efce;if(this[_0x49f636(0x55e)]())return![];else{if(!this[_0x49f636(0x6cb)]){if('irxiA'!==_0x49f636(0x1c3)){if(!this[_0x49f636(0x781)])return;for(const _0x590561 of this['_onceParallelInterpreters']){_0x590561&&_0x590561[_0x49f636(0x9da)]();}}else return![];}else{if(this[_0x49f636(0x6cb)][_0x49f636(0x578)]())return![];else{if(!this[_0x49f636(0x6cb)][_0x49f636(0x59c)]())return![];else{if(this['compatibilityVisible']())return!![];else{if(this[_0x49f636(0x5fb)]())return!![];else{if(this['isIncludedInEnemyWindow']()){if(_0x49f636(0x385)===_0x49f636(0x312))_0x47332a[_0x49f636(0x6d0)][_0x49f636(0x8bd)](_0x3115da,_0x15e4ff);else return!![];}else{if(this[_0x49f636(0x8fe)]>0x0)return![];}}}}}}}},Sprite_EnemyName[_0x44efce(0x8f2)][_0x44efce(0x55e)]=function(){const _0x4023b2=_0x44efce;return VisuMZ[_0x4023b2(0x6d0)][_0x4023b2(0x444)][_0x4023b2(0x71b)][_0x4023b2(0x5a1)];},Sprite_EnemyName[_0x44efce(0x8f2)][_0x44efce(0x51a)]=function(){return![];},Sprite_EnemyName[_0x44efce(0x8f2)][_0x44efce(0x5fb)]=function(){const _0x5c8ae5=_0x44efce;return VisuMZ['BattleCore']['Settings'][_0x5c8ae5(0x71b)]['NameAlwaysVisible'];},Sprite_EnemyName[_0x44efce(0x8f2)][_0x44efce(0x674)]=function(){const _0x21089a=_0x44efce;if(VisuMZ[_0x21089a(0x6d0)][_0x21089a(0x444)]['Enemy'][_0x21089a(0xaf3)]){if(_0x21089a(0x137)!=='eTRsk'){if(this['_battlePortrait']===_0x51bb7f)this['initBattlePortrait']();return this[_0x21089a(0x2b2)];}else return this[_0x21089a(0x6cb)]['isSelected']();}else return _0x21089a(0x3b6)==='BcfHq'?SceneManager['_scene'][_0x21089a(0xa99)]&&SceneManager[_0x21089a(0x45b)][_0x21089a(0xa99)][_0x21089a(0x1e1)]&&SceneManager['_scene']['_enemyWindow'][_0x21089a(0x61d)][_0x21089a(0x89e)](this[_0x21089a(0x6cb)]):_0x4f6f39[_0x21089a(0x820)]()[_0x21089a(0x496)]||0x1;},Sprite_EnemyName[_0x44efce(0x8f2)][_0x44efce(0x264)]=function(){const _0x376a7a=_0x44efce;if(!this['_battler'])return 0x0;if(this[_0x376a7a(0x8a7)])return this[_0x376a7a(0x8a7)];const _0x46074e=this[_0x376a7a(0x5d4)]();return this[_0x376a7a(0x766)](),this[_0x376a7a(0x8a7)]=this[_0x376a7a(0x3e8)][_0x376a7a(0x954)](_0x46074e)||0x1,this[_0x376a7a(0x8a7)];},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x152)]=Sprite_Battleback[_0x44efce(0x8f2)][_0x44efce(0xd8)],Sprite_Battleback['prototype'][_0x44efce(0xd8)]=function(){const _0x27776e=_0x44efce,_0x1832b4=VisuMZ[_0x27776e(0x6d0)]['Settings'][_0x27776e(0xb63)];if(!_0x1832b4)return VisuMZ[_0x27776e(0x6d0)][_0x27776e(0x152)]['call'](this);const _0x3d749a=String(_0x1832b4[_0x27776e(0x71d)])||'MZ';switch(_0x3d749a){case'MZ':VisuMZ[_0x27776e(0x6d0)][_0x27776e(0x152)][_0x27776e(0xb59)](this);break;case _0x27776e(0xa58):this[_0x27776e(0xa69)]();break;case _0x27776e(0x5b5):this[_0x27776e(0x6e8)]();break;case'ScaleDown':this[_0x27776e(0x470)]();break;case _0x27776e(0x19a):this[_0x27776e(0xb13)]();break;}},Sprite_Battleback[_0x44efce(0x8f2)]['adjustPosition_1for1']=function(){const _0x3dd6aa=_0x44efce,_0x353707=VisuMZ[_0x3dd6aa(0x6d0)][_0x3dd6aa(0x444)]['BattlebackScale'];if(_0x353707&&_0x353707[_0x3dd6aa(0x8b4)])return _0x353707[_0x3dd6aa(0x8b4)][_0x3dd6aa(0xb59)](this);this['width']=Graphics[_0x3dd6aa(0x542)],this[_0x3dd6aa(0x737)]=Graphics[_0x3dd6aa(0x737)];const _0x5dea5d=0x1;this[_0x3dd6aa(0x718)]['x']=_0x5dea5d,this[_0x3dd6aa(0x718)]['y']=_0x5dea5d,this['x']=0x0,this['y']=0x0;},Sprite_Battleback['prototype']['adjustPosition_ScaleToFit']=function(){const _0x35da3d=_0x44efce,_0x3c5807=VisuMZ[_0x35da3d(0x6d0)][_0x35da3d(0x444)]['BattlebackScale'];if(_0x3c5807&&_0x3c5807[_0x35da3d(0x62a)]){if(_0x35da3d(0x189)!==_0x35da3d(0x189)){if(!_0x1ad23f[_0x35da3d(0x1bc)])return;if(!_0x2a2884['isSceneBattle']())return;if(this['isDead']())return;if(this[_0x35da3d(0xa2a)]())return;if(_0x5121f1[_0x35da3d(0x77d)][_0x35da3d(0xab6)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x16dc8c=_0xaafd01(_0x57a6c8['$1']);_0x41d25a['requestFauxAnimation']([this],_0x16dc8c,![],![]);}}else return _0x3c5807[_0x35da3d(0x62a)][_0x35da3d(0xb59)](this);}this[_0x35da3d(0x542)]=Graphics[_0x35da3d(0x542)],this['height']=Graphics[_0x35da3d(0x737)];const _0x5320bd=this['width']/this['bitmap'][_0x35da3d(0x542)],_0x4686b0=this[_0x35da3d(0x737)]/this['bitmap'][_0x35da3d(0x737)],_0x4d4b10=Math[_0x35da3d(0x65c)](_0x5320bd,_0x4686b0);this[_0x35da3d(0x718)]['x']=_0x4d4b10,this['scale']['y']=_0x4d4b10,this['x']=(Graphics[_0x35da3d(0x542)]-this[_0x35da3d(0x542)])/0x2,this['y']=Graphics[_0x35da3d(0x737)]-this['height'];},Sprite_Battleback[_0x44efce(0x8f2)][_0x44efce(0x470)]=function(){const _0x24507a=_0x44efce,_0x2feba5=VisuMZ[_0x24507a(0x6d0)][_0x24507a(0x444)][_0x24507a(0xb63)];if(_0x2feba5&&_0x2feba5[_0x24507a(0x54c)]){if(_0x24507a(0x6d5)===_0x24507a(0x3f7))this[_0x24507a(0xb1e)][_0x24507a(0x3e8)][_0x24507a(0x4ea)]!==this[_0x24507a(0x6cb)]['battlerSmoothImage']()&&(this['_mainSprite']['bitmap'][_0x24507a(0x4ea)]=this[_0x24507a(0x6cb)][_0x24507a(0x5ed)]());else return _0x2feba5[_0x24507a(0x54c)][_0x24507a(0xb59)](this);}this['width']=Graphics['width'],this[_0x24507a(0x737)]=Graphics[_0x24507a(0x737)];const _0x3e2e71=Math[_0x24507a(0x90c)](0x1,this[_0x24507a(0x542)]/this[_0x24507a(0x3e8)]['width']),_0x2c3158=Math[_0x24507a(0x90c)](0x1,this[_0x24507a(0x737)]/this[_0x24507a(0x3e8)][_0x24507a(0x737)]),_0x4dd6d4=Math['max'](_0x3e2e71,_0x2c3158);this[_0x24507a(0x718)]['x']=_0x4dd6d4,this[_0x24507a(0x718)]['y']=_0x4dd6d4,this['x']=(Graphics['width']-this[_0x24507a(0x542)])/0x2,this['y']=Graphics[_0x24507a(0x737)]-this[_0x24507a(0x737)];},Sprite_Battleback[_0x44efce(0x8f2)][_0x44efce(0xb13)]=function(){const _0x497bd5=_0x44efce,_0x103595=VisuMZ['BattleCore'][_0x497bd5(0x444)]['BattlebackScale'];if(_0x103595&&_0x103595[_0x497bd5(0x796)])return _0x103595[_0x497bd5(0x796)]['call'](this);this[_0x497bd5(0x542)]=Graphics[_0x497bd5(0x542)],this['height']=Graphics[_0x497bd5(0x737)];const _0xc0727c=Math['max'](0x1,this['width']/this['bitmap'][_0x497bd5(0x542)]),_0x167fef=Math[_0x497bd5(0x65c)](0x1,this['height']/this[_0x497bd5(0x3e8)][_0x497bd5(0x737)]),_0x56a990=Math[_0x497bd5(0x65c)](_0xc0727c,_0x167fef);this['scale']['x']=_0x56a990,this[_0x497bd5(0x718)]['y']=_0x56a990,this['x']=(Graphics['width']-this[_0x497bd5(0x542)])/0x2,this['y']=Graphics['height']-this[_0x497bd5(0x737)];},Spriteset_Battle['ANTI_TINT_UI']=VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x444)][_0x44efce(0xaaf)][_0x44efce(0x85d)]??!![],Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0x996)]=function(){const _0x1d8ca5=_0x44efce;if(!$gameSystem[_0x1d8ca5(0x8c0)]())return![];return![];},Spriteset_Battle[_0x44efce(0x8f2)]['animationBaseDelay']=function(){return 0x0;},Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0xad)]=function(){return 0x0;},VisuMZ['BattleCore']['Spriteset_Battle_createLowerLayer']=Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0x2b8)],Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0x2b8)]=function(){const _0x53bf86=_0x44efce;VisuMZ[_0x53bf86(0x6d0)][_0x53bf86(0x318)][_0x53bf86(0xb59)](this),this[_0x53bf86(0x3c3)](),this[_0x53bf86(0xb65)]();},VisuMZ[_0x44efce(0x6d0)]['Spriteset_Battle_update']=Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0x9da)],Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0x9da)]=function(){const _0x9095b3=_0x44efce;VisuMZ[_0x9095b3(0x6d0)][_0x9095b3(0x3f1)][_0x9095b3(0xb59)](this),this['updateUiContainerPosition'](),this[_0x9095b3(0x27b)]();},Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0x3c3)]=function(){const _0x2dac96=_0x44efce;this[_0x2dac96(0x7aa)]=new Weather(),this[_0x2dac96(0x96a)][_0x2dac96(0x317)](this[_0x2dac96(0x7aa)]);},Spriteset_Battle[_0x44efce(0x8f2)]['updateWeather']=function(){const _0xc53cab=_0x44efce;this[_0xc53cab(0x7aa)][_0xc53cab(0xa15)]=$gameScreen[_0xc53cab(0x408)](),this['_weather'][_0xc53cab(0x3db)]=$gameScreen[_0xc53cab(0x292)]();},Game_Interpreter[_0x44efce(0x8f2)][_0x44efce(0x852)]=function(_0x4d380c){const _0x5e2c16=_0x44efce;$gameScreen[_0x5e2c16(0x2e2)](_0x4d380c[0x0],_0x4d380c[0x1],_0x4d380c[0x2]);if(_0x4d380c[0x3])this['wait'](_0x4d380c[0x2]);return!![];},VisuMZ['BattleCore'][_0x44efce(0x436)]=Game_Interpreter['prototype'][_0x44efce(0x93d)],Game_Interpreter['prototype'][_0x44efce(0x93d)]=function(_0x1e0f1d){const _0x2a6ba7=_0x44efce;if(SceneManager[_0x2a6ba7(0xbab)]()){if(_0x2a6ba7(0x8d8)===_0x2a6ba7(0x8d8))return SceneManager[_0x2a6ba7(0x45b)][_0x2a6ba7(0x948)][_0x2a6ba7(0x4f3)](_0x1e0f1d[0x0],_0x1e0f1d[0x1]),!![];else _0x1045d3['x']+=_0x25bd60[_0x2a6ba7(0xbc1)]*_0x110409,_0x598355['y']+=_0x29046b['PopupShiftY'];}else return VisuMZ['BattleCore']['Game_Interpreter_command283'][_0x2a6ba7(0xb59)](this,_0x1e0f1d);},Spriteset_Battle['prototype']['updateBattlebackBitmap']=function(_0x211a86,_0x3f41fb){_0x211a86['bitmap']=_0x3f41fb;},Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0x4f3)]=function(_0x3df1c9,_0x5c5b6c){const _0x5ed78a=_0x44efce;_0x3df1c9=_0x3df1c9||'',_0x5c5b6c=_0x5c5b6c||'';_0x3df1c9===''&&_0x5c5b6c===''&&(_0x3df1c9=this['_back1Sprite'][_0x5ed78a(0x695)](),_0x5c5b6c=this[_0x5ed78a(0x88f)][_0x5ed78a(0x7be)]());const _0x47944d=ImageManager[_0x5ed78a(0x72d)](_0x3df1c9),_0x35d32d=ImageManager['loadBattleback2'](_0x5c5b6c);_0x47944d[_0x5ed78a(0x4a0)](this[_0x5ed78a(0xbbc)][_0x5ed78a(0x9f7)](this,this[_0x5ed78a(0x531)],this[_0x5ed78a(0x88f)],_0x47944d,_0x35d32d));},Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0xbbc)]=function(_0x42c9ed,_0x45974a,_0x5af8eb,_0x1c3d1b){const _0x2f5694=_0x44efce;_0x1c3d1b[_0x2f5694(0x4a0)](this['updateBattlebackBitmap2'][_0x2f5694(0x9f7)](this,_0x42c9ed,_0x45974a,_0x5af8eb,_0x1c3d1b));},Spriteset_Battle['prototype'][_0x44efce(0x236)]=function(_0x1723bf,_0x1ec3fc,_0x26c244,_0x98f858){const _0x3d3afd=_0x44efce;_0x1723bf[_0x3d3afd(0x3e8)]=_0x26c244,_0x1ec3fc[_0x3d3afd(0x3e8)]=_0x98f858,_0x1723bf[_0x3d3afd(0xd8)](),_0x1ec3fc[_0x3d3afd(0xd8)]();},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x3d4)]=Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0x38d)],Spriteset_Battle['prototype'][_0x44efce(0x38d)]=function(){const _0x4e1057=_0x44efce;VisuMZ['BattleCore'][_0x4e1057(0x3d4)][_0x4e1057(0xb59)](this),this[_0x4e1057(0xa9)]();},Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0xa9)]=function(){const _0x470cd1=_0x44efce;this[_0x470cd1(0xbc9)](),this[_0x470cd1(0x308)](),this[_0x470cd1(0x7a2)](),this['createDamageContainer'](),this[_0x470cd1(0x2eb)]();},Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0xbc9)]=function(){const _0x290e37=_0x44efce;this[_0x290e37(0x115)]=new Sprite(),this[_0x290e37(0x96a)]['addChild'](this['_battlerContainer']);},Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0x7a2)]=function(){const _0x39de0e=_0x44efce;this[_0x39de0e(0x4b2)]=new Sprite(),Spriteset_Battle[_0x39de0e(0x23e)]?this[_0x39de0e(0x317)](this[_0x39de0e(0x4b2)]):_0x39de0e(0xbb2)==='bEinI'?this[_0x39de0e(0x96a)]['addChild'](this['_animationContainer']):_0x387e8d['_scene'][_0x39de0e(0x743)][_0x39de0e(0x3ae)](_0x4b5c61,this[_0x39de0e(0x6cb)]);},Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0x1f0)]=function(){const _0x40edbb=_0x44efce;this[_0x40edbb(0x5b7)]=new Sprite(),this[_0x40edbb(0x5b7)]['x']=this[_0x40edbb(0x96a)]['x'],this['_damageContainer']['y']=this[_0x40edbb(0x96a)]['y'],this[_0x40edbb(0x317)](this['_damageContainer']);},Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0x2eb)]=function(){const _0x3ece77=_0x44efce;if(!this[_0x3ece77(0x996)]())return;this[_0x3ece77(0x115)][_0x3ece77(0x718)]['x']=-0x1,this['_battlerContainer']['x']=this[_0x3ece77(0x96a)][_0x3ece77(0x542)],this[_0x3ece77(0x1c5)]['scale']['x']=-0x1,this[_0x3ece77(0x1c5)]['x']=this[_0x3ece77(0x96a)][_0x3ece77(0x542)],this[_0x3ece77(0x4b2)][_0x3ece77(0x718)]['x']=-0x1,this[_0x3ece77(0x4b2)]['x']=this['_battleField'][_0x3ece77(0x542)],this[_0x3ece77(0x5b7)]['scale']['x']=-0x1,this[_0x3ece77(0x5b7)]['x']=this[_0x3ece77(0x96a)]['x']+this[_0x3ece77(0x96a)][_0x3ece77(0x542)];},Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0x3a1)]=function(){const _0x518e81=_0x44efce;Imported[_0x518e81(0x1bc)]&&this[_0x518e81(0x539)]()&&this[_0x518e81(0x282)]();const _0x3717c1=$gameTroop[_0x518e81(0x19f)](),_0x51c280=[];for(const _0x47d073 of _0x3717c1){_0x51c280[_0x518e81(0xb70)](new Sprite_Enemy(_0x47d073));}_0x51c280[_0x518e81(0x224)](this[_0x518e81(0x3b3)]['bind'](this));for(const _0x108230 of _0x51c280){this['_battlerContainer'][_0x518e81(0x317)](_0x108230);}this[_0x518e81(0x1b8)]=_0x51c280;},Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0x6f1)]=function(){const _0x375ff2=_0x44efce;this['_actorSprites']=[];for(let _0x44454f=0x0;_0x44454f<$gameParty[_0x375ff2(0x1df)]();_0x44454f++){const _0x45e35d=$gameParty['battleMembers']()[_0x44454f],_0x2d5d3d=new Sprite_Actor();_0x2d5d3d['moveToStartPositionBattleCore'](_0x45e35d),_0x2d5d3d['setBattler'](_0x45e35d),_0x2d5d3d[_0x375ff2(0x9da)](),this[_0x375ff2(0x998)]['push'](_0x2d5d3d),this[_0x375ff2(0x115)][_0x375ff2(0x317)](_0x2d5d3d);}},Spriteset_Battle['prototype'][_0x44efce(0x75f)]=function(_0x2f15aa,_0x446928,_0x13cc6b,_0x4a12b3){const _0x2fd91e=_0x44efce,_0x1bc0db=this['isMVAnimation'](_0x446928),_0x43610a=new(_0x1bc0db?Sprite_AnimationMV:Sprite_Animation)(),_0x2d0ec6=this[_0x2fd91e(0xb00)](_0x2f15aa);this[_0x2fd91e(0x140)](_0x2f15aa[0x0])&&(_0x13cc6b=!_0x13cc6b),_0x43610a['targetObjects']=_0x2f15aa,_0x43610a[_0x2fd91e(0x803)](_0x2d0ec6,_0x446928,_0x13cc6b,_0x4a12b3),this[_0x2fd91e(0x1af)](_0x43610a);},Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0x1af)]=function(_0x3d35d9){const _0x551fc8=_0x44efce;if(this[_0x551fc8(0x28f)](_0x3d35d9))this[_0x551fc8(0x3de)]()[_0x551fc8(0x317)](_0x3d35d9);else{if(_0x551fc8(0x2a3)!==_0x551fc8(0x2a3)){if(_0x2ad3ce[_0x551fc8(0x3c1)]&&!_0x38ce8e[_0x551fc8(0x872)])return this[_0x551fc8(0x396)]();else{return _0x494cc1[_0x551fc8(0x6d0)][_0x551fc8(0x584)]['call'](this);;}}else this[_0x551fc8(0x4b2)][_0x551fc8(0x317)](_0x3d35d9);}this['_animationSprites'][_0x551fc8(0xb70)](_0x3d35d9);},Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0x28f)]=function(_0xa310f4){const _0x2875d4=_0x44efce;if(!_0xa310f4)return![];if(!_0xa310f4['_animation'])return![];if(!_0xa310f4[_0x2875d4(0x3a7)][0x0])return![];if(_0xa310f4[_0x2875d4(0x3a7)][0x0][_0x2875d4(0x8de)]&&!_0xa310f4[_0x2875d4(0x3a7)][0x0][_0x2875d4(0x8de)]())return![];if($gameSystem[_0x2875d4(0x8c0)]())return![];if(!this[_0x2875d4(0x3de)]())return![];if(_0xa310f4[_0x2875d4(0x669)]===Sprite_Animation){if(_0xa310f4[_0x2875d4(0x9d1)]['displayType']!==0x0)return![];}else{if(_0xa310f4['constructor']===Sprite_AnimationMV){if(_0xa310f4[_0x2875d4(0x9d1)][_0x2875d4(0x837)]===0x3)return![];}}return!![];const _0x2cf0e4=Window_BattleStatus[_0x2875d4(0x8f2)][_0x2875d4(0x1e6)]();return['xp','portrait'][_0x2875d4(0x8cd)](_0x2cf0e4);},Spriteset_Battle['prototype'][_0x44efce(0x3de)]=function(){const _0x2a5f23=_0x44efce;if(!SceneManager[_0x2a5f23(0x45b)])return null;if(!SceneManager[_0x2a5f23(0x45b)]['_statusWindow'])return null;if(!SceneManager['_scene'][_0x2a5f23(0x743)]['_effectsContainer'])return null;return SceneManager[_0x2a5f23(0x45b)][_0x2a5f23(0x743)][_0x2a5f23(0xb27)];},Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0x28e)]=function(_0x4b422f){const _0x586d7b=_0x44efce;this[_0x586d7b(0x2ee)](_0x4b422f);for(const _0x31eff4 of _0x4b422f[_0x586d7b(0x3a7)]){if('jltRe'==='jltRe'){if(_0x31eff4[_0x586d7b(0x88e)]){if(_0x586d7b(0x29e)===_0x586d7b(0x29e))_0x31eff4['endAnimation']();else{this[_0x586d7b(0x2c6)]=!![];const _0x267818=this[_0x586d7b(0x391)]();for(let _0x110377=0x0;_0x110377<_0x267818[_0x586d7b(0x496)];_0x110377++){_0x267818[_0x110377]===0x1&&this[_0x586d7b(0x202)]!==_0x110377&&(_0x3478a8[_0x110377]=null);}this[_0x586d7b(0x2c6)]=_0x3ffe05;}}}else return _0x3b12b6=_0x4c656a['BattleCore'][_0x586d7b(0x444)][_0x586d7b(0x86a)][_0x586d7b(0x93a)][_0x586d7b(0xb59)](this,_0x546044),_0x2dbd0a=this[_0x586d7b(0x7ce)][_0x586d7b(0x144)]*_0x32096d+this[_0x586d7b(0x7ce)][_0x586d7b(0x4df)],_0x13880a;}_0x4b422f[_0x586d7b(0xa68)]();},Spriteset_Battle['prototype']['removeAnimationFromContainer']=function(_0x129588){const _0x39420a=_0x44efce;this[_0x39420a(0x59d)]['remove'](_0x129588);if(this[_0x39420a(0x28f)](_0x129588))this[_0x39420a(0x3de)]()[_0x39420a(0x50e)](_0x129588);else{if(_0x39420a(0x583)===_0x39420a(0xa38))return!![];else this[_0x39420a(0x4b2)][_0x39420a(0x50e)](_0x129588);}},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x1ba)]=Spriteset_Battle[_0x44efce(0x8f2)]['updateActors'],Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0xb17)]=function(){const _0x1a0d7c=_0x44efce;VisuMZ['BattleCore']['Spriteset_Battle_updateActors'][_0x1a0d7c(0xb59)](this),this['updateBattlerContainer']();},Spriteset_Battle[_0x44efce(0x8f2)]['updateBattlerContainer']=function(){const _0x8303a4=_0x44efce;this[_0x8303a4(0x115)][_0x8303a4(0x93b)]['sort'](this[_0x8303a4(0xa33)][_0x8303a4(0x9f7)](this)),this[_0x8303a4(0x3dc)]();},Spriteset_Battle[_0x44efce(0x8f2)]['compareBattlerSprites']=function(_0x2ae576,_0x4260e1){const _0x5f0a36=_0x44efce;if(VisuMZ['BattleCore'][_0x5f0a36(0x444)][_0x5f0a36(0x44f)][_0x5f0a36(0xa45)]){if(_0x2ae576[_0x5f0a36(0x6cb)]&&_0x4260e1[_0x5f0a36(0x6cb)]){if(_0x5f0a36(0x261)!==_0x5f0a36(0x261)){const _0x3946e4=this['svBattlerData']()[_0x5f0a36(0xb58)]||0x0;return _0xd18b05[_0x5f0a36(0x889)][_0x3946e4];}else{if(_0x2ae576[_0x5f0a36(0x6cb)][_0x5f0a36(0x8de)]()&&_0x4260e1[_0x5f0a36(0x6cb)][_0x5f0a36(0x851)]()){if(_0x5f0a36(0x59f)==='vnOGV')return 0x1;else this[_0x5f0a36(0xb70)]('performJump',[_0x3d7c85],_0x2cb5ec,_0x251c21),this[_0x5f0a36(0xb70)](_0x5f0a36(0x454),_0x59fa7e,_0x48a980,'front\x20center',_0x3b8e0a,!![],_0x5f0a36(0x221),!![]),this[_0x5f0a36(0xb70)](_0x5f0a36(0x7c8),[_0x458aa3],_0x5f0a36(0x252)),this[_0x5f0a36(0xb70)]('waitForMovement');}else{if(_0x4260e1[_0x5f0a36(0x6cb)][_0x5f0a36(0x8de)]()&&_0x2ae576[_0x5f0a36(0x6cb)][_0x5f0a36(0x851)]()){if(_0x5f0a36(0xabe)===_0x5f0a36(0x7c9)){if(!_0x43cc8b[_0x5f0a36(0xbab)]())return;const _0x1318f4=_0x45c176['getLastPluginCommandInterpreter']();if(!_0x1318f4)return;_0x1318f4[_0x5f0a36(0x227)](_0x5f0a36(0xdb));}else return-0x1;}}}}}if(_0x2ae576[_0x5f0a36(0xbb8)]!==_0x4260e1[_0x5f0a36(0xbb8)])return _0x2ae576[_0x5f0a36(0xbb8)]-_0x4260e1[_0x5f0a36(0xbb8)];else{if(_0x5f0a36(0x25d)===_0x5f0a36(0x25d))return _0x4260e1[_0x5f0a36(0xa8)]-_0x2ae576['spriteId'];else _0x13b350=this['_battler'][_0x5f0a36(0xbb6)]??_0x58c36b,_0x5236db=this[_0x5f0a36(0x6cb)]['_forcedHomeY']??_0x53d55e;}},Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0x3dc)]=function(){const _0x491eaf=_0x44efce;if(!VisuMZ[_0x491eaf(0x6d0)][_0x491eaf(0x444)][_0x491eaf(0x44f)]['PrioritySortActive'])return;const _0x4b813a=BattleManager[_0x491eaf(0x427)];if(_0x4b813a){if(_0x4b813a[_0x491eaf(0x8de)]()&&!$gameSystem['isSideView']())return;const _0x5bfc3b=_0x4b813a['battler']();if(_0x5bfc3b&&_0x4b813a[_0x491eaf(0x8de)]())this[_0x491eaf(0x115)][_0x491eaf(0x317)](_0x5bfc3b);}},Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0x169)]=function(){const _0x247cf5=_0x44efce;for(const _0x499512 of $gameParty[_0x247cf5(0xb09)]()){if(!_0x499512)continue;if(!_0x499512[_0x247cf5(0x6dd)]())continue;_0x499512[_0x247cf5(0x6dd)]()['forceEscapeSprite']=!![],_0x499512[_0x247cf5(0x6dd)]()[_0x247cf5(0x7da)]();}},Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0x308)]=function(){const _0x5b160f=_0x44efce;this[_0x5b160f(0x1c5)]=new Sprite(),Spriteset_Battle['ANTI_TINT_UI']?this[_0x5b160f(0x317)](this['_uiContainer']):_0x5b160f(0x73f)==='jorNb'?(_0x47f6a4[_0x5b160f(0x6d0)]['Spriteset_Battle_updateActors'][_0x5b160f(0xb59)](this),this[_0x5b160f(0x2ae)]()):this['_battleField'][_0x5b160f(0x317)](this['_uiContainer']),SceneManager['_scene']['_uiContainer']=this[_0x5b160f(0x1c5)];},Spriteset_Battle['prototype'][_0x44efce(0xb65)]=function(){const _0x705603=_0x44efce;if(VisuMZ[_0x705603(0x6d0)][_0x705603(0x444)][_0x705603(0x71b)][_0x705603(0xee)])return;this[_0x705603(0x842)]=new Sprite(),BattleManager[_0x705603(0x905)](this[_0x705603(0x842)]);for(const _0x3ca104 of this[_0x705603(0x1b8)]){if(_0x705603(0x27e)!==_0x705603(0x3ef)){const _0x502795=new Sprite_EnemyName();this[_0x705603(0x842)][_0x705603(0x317)](_0x502795),_0x502795['linkSprite'](_0x3ca104);}else{const _0x12a196=this[_0x705603(0x820)](),_0x24b5bb=_0x12a196[0x0]?_0x12a196[0x0][_0x705603(0xb58)]:0x0,_0x16d313=_0x4b3bc6[_0x705603(0x889)][_0x24b5bb];_0x16d313&&this[_0x705603(0xa67)](_0x16d313[_0x705603(0x1a5)]);}}},Spriteset_Battle['prototype'][_0x44efce(0x6fc)]=function(){const _0x397e75=_0x44efce;if(!this['_damageContainer'])return;if(!this[_0x397e75(0x1c5)])return;const _0x15c5f6=Spriteset_Battle['ANTI_TINT_UI']?this[_0x397e75(0x5b7)]['x']:0x0,_0x59d1b2=Spriteset_Battle[_0x397e75(0x23e)]?this[_0x397e75(0x5b7)]['y']:0x0,_0x61d876=Imported['VisuMZ_3_ActSeqCamera']?this['_battleField']['x']:0x0,_0x4ec314=Imported['VisuMZ_3_ActSeqCamera']?this[_0x397e75(0x96a)]['y']:0x0;this['_uiContainer']['x']=_0x15c5f6+_0x61d876,this[_0x397e75(0x1c5)]['y']=_0x59d1b2+_0x4ec314;},BattleManager[_0x44efce(0x905)]=function(_0x33b116){const _0x484438=_0x44efce;if(!SceneManager[_0x484438(0x45b)][_0x484438(0x1c5)])return;SceneManager[_0x484438(0x45b)]['_uiContainer'][_0x484438(0x317)](_0x33b116);},Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0x2bf)]=function(){return![];},Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0x6b4)]=function(){const _0x425a44=_0x44efce;return this[_0x425a44(0x685)]()['some'](_0x24ede7=>_0x24ede7[_0x425a44(0x753)]());},Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0x788)]=function(){const _0x323f55=_0x44efce;return this[_0x323f55(0x685)]()['some'](_0x2b7c5c=>_0x2b7c5c['isJumping']());},Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0x6de)]=function(){const _0x3ad2d3=_0x44efce;return this['battlerSprites']()['some'](_0x3bc420=>_0x3bc420[_0x3ad2d3(0xb0c)]());},Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0xadc)]=function(){const _0x7e720=_0x44efce;return this['battlerSprites']()[_0x7e720(0x42d)](_0xebcaa7=>_0xebcaa7[_0x7e720(0x3ea)]());},Spriteset_Battle['prototype'][_0x44efce(0x587)]=function(){const _0x194c38=_0x44efce;return this[_0x194c38(0x685)]()['some'](_0x1483a0=>_0x1483a0[_0x194c38(0x9a1)]());},Spriteset_Battle[_0x44efce(0x8f2)][_0x44efce(0x9d7)]=function(){const _0x24d973=_0x44efce;return this['battlerSprites']()[_0x24d973(0x42d)](_0x38ee9c=>_0x38ee9c[_0x24d973(0xb05)]());},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x835)]=Window_ItemList['prototype']['maxCols'],Window_ItemList[_0x44efce(0x8f2)][_0x44efce(0xb84)]=function(){const _0x3f9a98=_0x44efce;if(SceneManager[_0x3f9a98(0xbab)]()){if(SceneManager['_scene']['battleLayoutStyle']()===_0x3f9a98(0x2c9))return VisuMZ[_0x3f9a98(0x6d0)][_0x3f9a98(0x444)][_0x3f9a98(0xaaf)][_0x3f9a98(0x713)];else{if(_0x3f9a98(0xbbb)===_0x3f9a98(0x5b1))(this['_targetHomeX']!==_0x210201||this[_0x3f9a98(0x170)]!==_0x498577)&&(this[_0x3f9a98(0x32d)]=_0x4c8124,this[_0x3f9a98(0x170)]=_0x19bd5d,this['_homeDuration']=_0x2d4005,this[_0x3f9a98(0x5a7)]=_0x5e13de,this[_0x3f9a98(0x39e)]=_0x1d0c9a,_0x10a5b7<=0x0&&this['onHomeMoveEnd']());else return VisuMZ[_0x3f9a98(0x6d0)][_0x3f9a98(0x444)][_0x3f9a98(0xaaf)]['SkillItemStandardCols'];}}else return VisuMZ['BattleCore']['Window_ItemList_maxCols'][_0x3f9a98(0xb59)](this);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x9a6)]=Window_SkillList[_0x44efce(0x8f2)][_0x44efce(0xb84)],Window_SkillList[_0x44efce(0x8f2)][_0x44efce(0xb84)]=function(){const _0x29939f=_0x44efce;return SceneManager[_0x29939f(0xbab)]()?SceneManager[_0x29939f(0x45b)][_0x29939f(0x1e6)]()===_0x29939f(0x2c9)?VisuMZ['BattleCore'][_0x29939f(0x444)][_0x29939f(0xaaf)]['SkillItemBorderCols']:VisuMZ[_0x29939f(0x6d0)]['Settings'][_0x29939f(0xaaf)][_0x29939f(0x456)]:VisuMZ[_0x29939f(0x6d0)]['Window_SkillList_maxCols']['call'](this);},VisuMZ['BattleCore'][_0x44efce(0xb22)]=Window_Options[_0x44efce(0x8f2)][_0x44efce(0x984)],Window_Options[_0x44efce(0x8f2)][_0x44efce(0x984)]=function(){const _0x5b9e27=_0x44efce;VisuMZ[_0x5b9e27(0x6d0)][_0x5b9e27(0xb22)][_0x5b9e27(0xb59)](this),this[_0x5b9e27(0x2ff)](),this[_0x5b9e27(0x511)]();},Window_Options[_0x44efce(0x8f2)][_0x44efce(0x2ff)]=function(){const _0x596e6c=_0x44efce;VisuMZ[_0x596e6c(0x6d0)]['Settings'][_0x596e6c(0xa9f)][_0x596e6c(0x548)]&&('Rxpuq'!==_0x596e6c(0xb94)?(this[_0x596e6c(0x28d)](),this['addBattleCoreAutoBattleStyleCommand']()):this['battler']()&&this[_0x596e6c(0x6dd)]()['refreshMotion']());},Window_Options[_0x44efce(0x8f2)]['addShowHpGaugeCommand']=function(){const _0x4d2815=_0x44efce;if(!VisuMZ[_0x4d2815(0x6d0)][_0x4d2815(0x444)][_0x4d2815(0x2e1)][_0x4d2815(0x698)])return;const _0x15aa1b=TextManager[_0x4d2815(0x25b)],_0x5cda25=_0x4d2815(0x25b);this['addCommand'](_0x15aa1b,_0x5cda25);},Window_Options[_0x44efce(0x8f2)]['addBattleCoreAutoBattleStartupCommand']=function(){const _0x2a2b4=_0x44efce,_0x5e5ad7=TextManager['autoBattleStart'],_0xf1c6f7='autoBattleAtStart';this[_0x2a2b4(0x929)](_0x5e5ad7,_0xf1c6f7);},Window_Options['prototype'][_0x44efce(0x5ab)]=function(){const _0x329b68=_0x44efce,_0x4c2680=TextManager[_0x329b68(0x40c)],_0x282297=_0x329b68(0x872);this[_0x329b68(0x929)](_0x4c2680,_0x282297);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x68d)]=Window_Options['prototype']['statusText'],Window_Options[_0x44efce(0x8f2)][_0x44efce(0x53c)]=function(_0x345658){const _0x576426=_0x44efce,_0x53d9a3=this[_0x576426(0x926)](_0x345658);return _0x53d9a3===_0x576426(0x872)?_0x576426(0x6bc)!==_0x576426(0x3c6)?this[_0x576426(0x47d)]():this[_0x576426(0x76c)][_0x421a1e]:VisuMZ[_0x576426(0x6d0)][_0x576426(0x68d)]['call'](this,_0x345658);},Window_Options[_0x44efce(0x8f2)][_0x44efce(0x47d)]=function(){const _0x1f6920=_0x44efce,_0x31f0cc=VisuMZ[_0x1f6920(0x6d0)][_0x1f6920(0x444)][_0x1f6920(0xa9f)],_0x447d9c=this[_0x1f6920(0x294)](_0x1f6920(0x872));return _0x447d9c?_0x31f0cc[_0x1f6920(0xa34)]:_0x31f0cc['StyleOFF'];},Window_ShopStatus[_0x44efce(0x8f2)][_0x44efce(0xb69)]=function(){const _0x2b9afa=_0x44efce,_0x318e04=DataManager[_0x2b9afa(0x39c)](this['_item']),_0x3e5bd0=VisuMZ[_0x2b9afa(0xb3)][_0x318e04];if(!_0x3e5bd0)return this[_0x2b9afa(0xa01)]();const _0x4081e3=_0x2b9afa(0xb88)[_0x2b9afa(0x437)](this['_item']['damage'][_0x2b9afa(0xa15)]),_0x580f4e=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x2b9afa(0x34b)][_0x2b9afa(0x1ea)]['type']];return _0x3e5bd0[_0x4081e3][_0x2b9afa(0x437)](_0x580f4e);},Window_ShopStatus['prototype'][_0x44efce(0x7ef)]=function(){const _0x351e8e=_0x44efce,_0x189dd6=DataManager[_0x351e8e(0x39c)](this['_item']),_0x405d95=VisuMZ[_0x351e8e(0xb3)][_0x189dd6];if(!_0x405d95)return this[_0x351e8e(0x74d)]();return _0x405d95[_0x351e8e(0xa96)]['call'](this);},VisuMZ['BattleCore'][_0x44efce(0x209)]=Window_PartyCommand['prototype'][_0x44efce(0x64a)],Window_PartyCommand[_0x44efce(0x8f2)][_0x44efce(0x64a)]=function(_0x2f1a2){const _0x1d90f3=_0x44efce;VisuMZ[_0x1d90f3(0x6d0)][_0x1d90f3(0x209)]['call'](this,_0x2f1a2),this[_0x1d90f3(0xa19)](_0x2f1a2);},Window_PartyCommand[_0x44efce(0x8f2)][_0x44efce(0xa19)]=function(_0x31b19f){const _0x44b176=_0x44efce,_0x4481f3=new Rectangle(0x0,0x0,_0x31b19f[_0x44b176(0x542)],_0x31b19f['height']);this[_0x44b176(0xae1)]=new Window_Base(_0x4481f3),this[_0x44b176(0xae1)][_0x44b176(0x8fe)]=0x0,this[_0x44b176(0x317)](this[_0x44b176(0xae1)]),this[_0x44b176(0xa66)]();},Window_PartyCommand[_0x44efce(0x8f2)][_0x44efce(0x643)]=function(){const _0x3a852f=_0x44efce;Window_Command[_0x3a852f(0x8f2)][_0x3a852f(0x643)][_0x3a852f(0xb59)](this);if(this[_0x3a852f(0xae1)])this[_0x3a852f(0xa66)]();},Window_PartyCommand['prototype']['updateCommandNameWindow']=function(){const _0xbffb61=_0x44efce,_0x52c8e7=this[_0xbffb61(0xae1)];_0x52c8e7[_0xbffb61(0xa1f)][_0xbffb61(0xa09)]();const _0x2236ba=this[_0xbffb61(0x49b)](this[_0xbffb61(0x8e4)]());if(_0x2236ba===_0xbffb61(0xe0)&&this[_0xbffb61(0x52d)]()>0x0){const _0x31b078=this[_0xbffb61(0x39b)](this[_0xbffb61(0x8e4)]());let _0x58076a=this['commandName'](this[_0xbffb61(0x8e4)]());_0x58076a=_0x58076a[_0xbffb61(0x3f6)](/\\I\[(\d+)\]/gi,''),_0x52c8e7['resetFontSettings'](),this[_0xbffb61(0x6c0)](_0x58076a,_0x31b078),this[_0xbffb61(0x951)](_0x58076a,_0x31b078),this[_0xbffb61(0x390)](_0x58076a,_0x31b078);}},Window_PartyCommand[_0x44efce(0x8f2)][_0x44efce(0x6c0)]=function(_0x5a2605,_0x6e96ef){},Window_PartyCommand[_0x44efce(0x8f2)]['commandNameWindowDrawText']=function(_0x1d5b84,_0x40298d){const _0x472ed4=_0x44efce,_0x269379=this[_0x472ed4(0xae1)];_0x269379['drawText'](_0x1d5b84,0x0,_0x40298d['y'],_0x269379['innerWidth'],_0x472ed4(0x281));},Window_PartyCommand[_0x44efce(0x8f2)][_0x44efce(0x390)]=function(_0x23aea4,_0x59d918){const _0x2c63a7=_0x44efce,_0x25a9e4=this[_0x2c63a7(0xae1)],_0x2b9b83=$gameSystem[_0x2c63a7(0x16a)](),_0x1417af=_0x59d918['x']+Math['floor'](_0x59d918[_0x2c63a7(0x542)]/0x2)+_0x2b9b83;_0x25a9e4['x']=_0x25a9e4[_0x2c63a7(0x542)]/-0x2+_0x1417af,_0x25a9e4['y']=Math[_0x2c63a7(0xa3a)](_0x59d918[_0x2c63a7(0x737)]/0x2);},Window_PartyCommand[_0x44efce(0x8f2)]['makeCommandList']=function(){const _0x472ad2=_0x44efce;this['addFightCommand'](),this[_0x472ad2(0xa71)](),this['addCustomCommands'](),this[_0x472ad2(0x962)](),this[_0x472ad2(0x882)]();},Window_PartyCommand[_0x44efce(0x8f2)][_0x44efce(0x8fc)]=function(){const _0x537762=_0x44efce,_0x3f8e14=this[_0x537762(0x7f3)](),_0x1e6732=VisuMZ[_0x537762(0x6d0)][_0x537762(0x444)][_0x537762(0x283)]['CmdIconFight'],_0x4c4301=_0x3f8e14===_0x537762(0x453)?TextManager[_0x537762(0x72f)]:_0x537762(0x7a6)[_0x537762(0x437)](_0x1e6732,TextManager[_0x537762(0x72f)]),_0x29628c=this['isFightCommandEnabled']();this[_0x537762(0x929)](_0x4c4301,_0x537762(0x72f),_0x29628c);},Window_PartyCommand[_0x44efce(0x8f2)]['isFightCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x44efce(0x8f2)][_0x44efce(0xa71)]=function(){const _0x220e58=_0x44efce;if(!this[_0x220e58(0x1d3)]())return;const _0x4f5696=this[_0x220e58(0x7f3)](),_0x178aa0=VisuMZ[_0x220e58(0x6d0)][_0x220e58(0x444)][_0x220e58(0x283)][_0x220e58(0x875)],_0x6a8130=_0x4f5696==='text'?TextManager[_0x220e58(0x7c6)]:'\x5cI[%1]%2'[_0x220e58(0x437)](_0x178aa0,TextManager[_0x220e58(0x7c6)]),_0x85c816=this[_0x220e58(0xaad)]();this[_0x220e58(0x929)](_0x6a8130,_0x220e58(0x7c6),_0x85c816);},Window_PartyCommand[_0x44efce(0x8f2)][_0x44efce(0x1d3)]=function(){const _0x1d35bc=_0x44efce;return VisuMZ[_0x1d35bc(0x6d0)][_0x1d35bc(0x444)][_0x1d35bc(0x283)][_0x1d35bc(0x361)];},Window_PartyCommand[_0x44efce(0x8f2)][_0x44efce(0xaad)]=function(){return!![];},Window_PartyCommand[_0x44efce(0x8f2)]['addCustomCommands']=function(){},Window_PartyCommand['prototype'][_0x44efce(0x962)]=function(){const _0x622479=_0x44efce;if(!this[_0x622479(0xb14)]())return;const _0x2518a3=this[_0x622479(0x7f3)](),_0x455a1e=VisuMZ[_0x622479(0x6d0)][_0x622479(0x444)][_0x622479(0x283)]['CmdIconOptions'],_0x208ef7=_0x2518a3===_0x622479(0x453)?TextManager['options']:_0x622479(0x7a6)[_0x622479(0x437)](_0x455a1e,TextManager[_0x622479(0x3eb)]),_0x50796b=this[_0x622479(0xa55)]();this[_0x622479(0x929)](_0x208ef7,_0x622479(0x3eb),_0x50796b);},Window_PartyCommand[_0x44efce(0x8f2)][_0x44efce(0xb14)]=function(){const _0x54b13e=_0x44efce;return VisuMZ[_0x54b13e(0x6d0)][_0x54b13e(0x444)][_0x54b13e(0x283)][_0x54b13e(0x124)];},Window_PartyCommand['prototype'][_0x44efce(0xa55)]=function(){return!![];},Window_PartyCommand[_0x44efce(0x8f2)][_0x44efce(0x882)]=function(){const _0xab20bf=_0x44efce,_0x5458cd=this[_0xab20bf(0x7f3)](),_0x17b623=VisuMZ[_0xab20bf(0x6d0)][_0xab20bf(0x444)][_0xab20bf(0x283)][_0xab20bf(0x6e6)],_0x1d63d7=_0x5458cd===_0xab20bf(0x453)?TextManager[_0xab20bf(0xa17)]:_0xab20bf(0x7a6)[_0xab20bf(0x437)](_0x17b623,TextManager[_0xab20bf(0xa17)]),_0x5f08e1=this[_0xab20bf(0x627)]();this['addCommand'](_0x1d63d7,_0xab20bf(0xa17),_0x5f08e1);},Window_PartyCommand['prototype'][_0x44efce(0x627)]=function(){const _0x329fd7=_0x44efce;return BattleManager[_0x329fd7(0x277)]();},Window_PartyCommand[_0x44efce(0x8f2)][_0x44efce(0x466)]=function(){const _0x3f2e3d=_0x44efce;return VisuMZ[_0x3f2e3d(0x6d0)][_0x3f2e3d(0x444)][_0x3f2e3d(0x283)]['CmdTextAlign'];},Window_PartyCommand[_0x44efce(0x8f2)][_0x44efce(0x121)]=function(_0x227898){const _0x2e854f=_0x44efce,_0x2ab5f9=this[_0x2e854f(0x49b)](_0x227898);if(_0x2ab5f9===_0x2e854f(0x4a1))this['drawItemStyleIconText'](_0x227898);else _0x2ab5f9==='icon'?_0x2e854f(0xb40)!==_0x2e854f(0x5a6)?this[_0x2e854f(0x3a9)](_0x227898):(this[_0x2e854f(0x7aa)][_0x2e854f(0xa15)]=_0x206ca4[_0x2e854f(0x408)](),this['_weather'][_0x2e854f(0x3db)]=_0x2d29e6[_0x2e854f(0x292)]()):Window_Command[_0x2e854f(0x8f2)][_0x2e854f(0x121)][_0x2e854f(0xb59)](this,_0x227898);},Window_PartyCommand[_0x44efce(0x8f2)]['commandStyle']=function(){const _0x579d2d=_0x44efce;return VisuMZ[_0x579d2d(0x6d0)]['Settings']['PartyCmd'][_0x579d2d(0x887)];},Window_PartyCommand[_0x44efce(0x8f2)][_0x44efce(0x49b)]=function(_0x2af155){const _0x8ab161=_0x44efce;if(_0x2af155<0x0)return'text';const _0x21e85a=this['commandStyle']();if(_0x21e85a!==_0x8ab161(0xa92))return _0x21e85a;else{if(this[_0x8ab161(0x52d)]()>0x0){const _0x40c786=this[_0x8ab161(0x3dd)](_0x2af155);if(_0x40c786['match'](/\\I\[(\d+)\]/i)){const _0x401b83=this[_0x8ab161(0x39b)](_0x2af155),_0x185f67=this[_0x8ab161(0x409)](_0x40c786)[_0x8ab161(0x542)];return _0x185f67<=_0x401b83[_0x8ab161(0x542)]?'iconText':_0x8ab161(0xe0);}}}return _0x8ab161(0x453);},Window_PartyCommand['prototype'][_0x44efce(0x6a3)]=function(_0x47d994){const _0x5cb93f=_0x44efce,_0x3b0e81=this[_0x5cb93f(0x39b)](_0x47d994),_0x3a9f03=this[_0x5cb93f(0x3dd)](_0x47d994),_0x3cfb75=this[_0x5cb93f(0x409)](_0x3a9f03)[_0x5cb93f(0x542)];this[_0x5cb93f(0x10a)](this[_0x5cb93f(0x557)](_0x47d994));const _0x311f5e=this[_0x5cb93f(0x466)]();if(_0x311f5e==='right'){if('XxNfA'!==_0x5cb93f(0x98a)){if(this[_0x5cb93f(0x4cd)]>0x0)this[_0x5cb93f(0x4cd)]-=0x10;}else this[_0x5cb93f(0x4c4)](_0x3a9f03,_0x3b0e81['x']+_0x3b0e81[_0x5cb93f(0x542)]-_0x3cfb75,_0x3b0e81['y'],_0x3cfb75);}else{if(_0x311f5e==='center'){const _0xed1dc6=_0x3b0e81['x']+Math[_0x5cb93f(0xa3a)]((_0x3b0e81[_0x5cb93f(0x542)]-_0x3cfb75)/0x2);this['drawTextEx'](_0x3a9f03,_0xed1dc6,_0x3b0e81['y'],_0x3cfb75);}else this['drawTextEx'](_0x3a9f03,_0x3b0e81['x'],_0x3b0e81['y'],_0x3cfb75);}},Window_PartyCommand[_0x44efce(0x8f2)][_0x44efce(0x3a9)]=function(_0x268f8f){const _0x4d28b5=_0x44efce;this['commandName'](_0x268f8f)[_0x4d28b5(0xab6)](/\\I\[(\d+)\]/i);const _0x20da03=Number(RegExp['$1'])||0x0,_0x5c86cf=this[_0x4d28b5(0x39b)](_0x268f8f),_0xb0335b=_0x5c86cf['x']+Math[_0x4d28b5(0xa3a)]((_0x5c86cf[_0x4d28b5(0x542)]-ImageManager[_0x4d28b5(0xaea)])/0x2),_0x34def4=_0x5c86cf['y']+(_0x5c86cf[_0x4d28b5(0x737)]-ImageManager[_0x4d28b5(0x3fa)])/0x2;this[_0x4d28b5(0x864)](_0x20da03,_0xb0335b,_0x34def4);},Window_PartyCommand[_0x44efce(0x8f2)][_0x44efce(0x7d6)]=function(){},Window_PartyCommand['prototype'][_0x44efce(0x4c7)]=function(){const _0x38f42d=_0x44efce;Window_Command['prototype']['activate'][_0x38f42d(0xb59)](this);const _0x4f4972=this[_0x38f42d(0x1e6)]();if(_0x4f4972===_0x38f42d(0x2c9)){if(_0x38f42d(0x752)!=='Bcyqd')this[_0x38f42d(0x43d)]();else{if(!_0x449021[_0x38f42d(0x18d)](_0xb074b6))return!![];}}},Window_PartyCommand[_0x44efce(0x8f2)][_0x44efce(0x1e6)]=function(){const _0x354ca1=_0x44efce;if(this[_0x354ca1(0x5de)])return this['_battleLayoutStyle'];return this[_0x354ca1(0x5de)]=SceneManager[_0x354ca1(0x45b)]['battleLayoutStyle'](),this[_0x354ca1(0x5de)];},Window_PartyCommand[_0x44efce(0x8f2)][_0x44efce(0x8f7)]=function(){const _0x45b601=_0x44efce,_0x31e943=VisuMZ[_0x45b601(0x6d0)][_0x45b601(0x444)][_0x45b601(0x283)],_0x4d33e2=this[_0x45b601(0x395)]();switch(_0x4d33e2){case _0x45b601(0x72f):this[_0x45b601(0x81c)][_0x45b601(0xa9b)](_0x31e943[_0x45b601(0x399)]);break;case _0x45b601(0x7c6):this['_helpWindow'][_0x45b601(0xa9b)](_0x31e943['HelpAutoBattle']);break;case _0x45b601(0x3eb):this[_0x45b601(0x81c)][_0x45b601(0xa9b)](_0x31e943[_0x45b601(0x320)]);break;case'escape':this['_helpWindow'][_0x45b601(0xa9b)](_0x31e943[_0x45b601(0x651)]);break;default:this[_0x45b601(0x81c)][_0x45b601(0xa9b)]('');break;}},VisuMZ['BattleCore'][_0x44efce(0x116)]=Window_ActorCommand[_0x44efce(0x8f2)]['initialize'],Window_ActorCommand[_0x44efce(0x8f2)][_0x44efce(0x64a)]=function(_0x1971aa){const _0x696480=_0x44efce;VisuMZ[_0x696480(0x6d0)][_0x696480(0x116)][_0x696480(0xb59)](this,_0x1971aa),this['createCommandNameWindow'](_0x1971aa);},Window_ActorCommand[_0x44efce(0x8f2)][_0x44efce(0xa19)]=function(_0x2db8fd){const _0x100721=_0x44efce,_0x24aae8=new Rectangle(0x0,0x0,_0x2db8fd['width'],_0x2db8fd[_0x100721(0x737)]);this['_commandNameWindow']=new Window_Base(_0x24aae8),this['_commandNameWindow']['opacity']=0x0,this[_0x100721(0x317)](this[_0x100721(0xae1)]),this[_0x100721(0xa66)]();},Window_ActorCommand[_0x44efce(0x8f2)][_0x44efce(0x643)]=function(){const _0x502818=_0x44efce;Window_Command[_0x502818(0x8f2)][_0x502818(0x643)][_0x502818(0xb59)](this);if(this[_0x502818(0xae1)])this[_0x502818(0xa66)]();},Window_ActorCommand[_0x44efce(0x8f2)][_0x44efce(0xa66)]=function(){const _0x1ea888=_0x44efce,_0x456e58=this['_commandNameWindow'];_0x456e58[_0x1ea888(0xa1f)][_0x1ea888(0xa09)]();const _0x4f3ea0=this[_0x1ea888(0x49b)](this[_0x1ea888(0x8e4)]());if(_0x4f3ea0===_0x1ea888(0xe0)&&this['maxItems']()>0x0){if('qvfxh'===_0x1ea888(0x2ef)){const _0x5dbbe2=this['itemLineRect'](this[_0x1ea888(0x8e4)]());let _0x50db1f=this[_0x1ea888(0x3dd)](this[_0x1ea888(0x8e4)]());_0x50db1f=_0x50db1f[_0x1ea888(0x3f6)](/\\I\[(\d+)\]/gi,''),_0x456e58['resetFontSettings'](),this[_0x1ea888(0x6c0)](_0x50db1f,_0x5dbbe2),this[_0x1ea888(0x951)](_0x50db1f,_0x5dbbe2),this[_0x1ea888(0x390)](_0x50db1f,_0x5dbbe2);}else{const _0x16bc1e=_0x49f519[_0x1ea888(0x918)](),_0x2d16be=_0x16bc1e[_0x1ea888(0x6dd)]();if(_0x2d16be)_0x2d16be[_0x1ea888(0x23f)]();const _0x554c7f=_0x421123['aliveMembers']()[_0x1ea888(0xc9)](_0x40eb58=>_0x40eb58[_0x1ea888(0xa3c)]()&&_0x40eb58[_0x1ea888(0xaf9)]()),_0x2fd3d2=_0x554c7f[_0x1ea888(0x963)](_0x16bc1e),_0x53ff0d=_0x554c7f[_0x2fd3d2+0x1];_0x3b8dc2[_0x1ea888(0x589)]=_0x53ff0d||null;if(_0x53ff0d)_0x53ff0d[_0x1ea888(0xa6c)](_0x1ea888(0xb8c));_0x16bc1e[_0x1ea888(0xa6c)](_0x1ea888(0x443)),this[_0x1ea888(0xaee)]();}}},Window_ActorCommand[_0x44efce(0x8f2)][_0x44efce(0x6c0)]=function(_0x120fc7,_0x22357e){},Window_ActorCommand['prototype']['commandNameWindowDrawText']=function(_0x735cea,_0x2839af){const _0x5a2788=_0x44efce,_0x30e1a4=this['_commandNameWindow'];_0x30e1a4[_0x5a2788(0x9d8)](_0x735cea,0x0,_0x2839af['y'],_0x30e1a4[_0x5a2788(0x5f4)],'center');},Window_ActorCommand['prototype'][_0x44efce(0x390)]=function(_0x157332,_0x65048f){const _0x557248=_0x44efce,_0x1f84aa=this[_0x557248(0xae1)],_0x16a64d=$gameSystem[_0x557248(0x16a)](),_0x3c9a81=_0x65048f['x']+Math[_0x557248(0xa3a)](_0x65048f[_0x557248(0x542)]/0x2)+_0x16a64d;_0x1f84aa['x']=_0x1f84aa['width']/-0x2+_0x3c9a81,_0x1f84aa['y']=Math[_0x557248(0xa3a)](_0x65048f[_0x557248(0x737)]/0x2);},Window_ActorCommand[_0x44efce(0x8f2)][_0x44efce(0xa0c)]=function(){const _0x1da73c=_0x44efce;if(!this[_0x1da73c(0x81e)])return;const _0x10cfd1=this[_0x1da73c(0x81e)][_0x1da73c(0x87f)]();for(const _0x363e57 of _0x10cfd1){'cVyzX'!==_0x1da73c(0x92c)?this['makeBattleCommand'](_0x363e57['toUpperCase']()[_0x1da73c(0xaef)]()):_0xff963['prototype'][_0x1da73c(0x121)]['call'](this,_0x3a3620);}},Window_ActorCommand[_0x44efce(0x8f2)][_0x44efce(0x558)]=function(_0xb50716){const _0x3f285b=_0x44efce;_0xb50716===_0x3f285b(0x950)&&this[_0x3f285b(0x418)]();[_0x3f285b(0x21f),'SKILLS'][_0x3f285b(0x89e)](_0xb50716)&&this[_0x3f285b(0x260)]();if(_0xb50716===_0x3f285b(0x9a4)){if(_0x3f285b(0x6b3)==='qeYVT'){const _0x15c31f=_0x2d6278[_0x3f285b(0x47e)]('['+_0x3e40b9['$1']['match'](/\d+/g)+']');for(const _0x5a49c5 of _0x15c31f){if(!_0x5a57ee[_0x3f285b(0x18d)](_0x5a49c5))return!![];}return![];}else this[_0x3f285b(0x8e1)]();}_0xb50716==='ITEM'&&(_0x3f285b(0xa3f)===_0x3f285b(0xa3f)?this['addItemCommand']():(_0x1aeee6[_0x3f285b(0x6d0)][_0x3f285b(0x3f5)][_0x3f285b(0xb59)](this),this[_0x3f285b(0x98b)]()));_0xb50716==='ESCAPE'&&(_0x3f285b(0x944)!==_0x3f285b(0xb8b)?this['addEscapeCommand']():this[_0x3f285b(0x2b9)](_0x278caa,_0x1f3708,_0x5a2276));if(_0xb50716===_0x3f285b(0x31f)){if('APHmP'!==_0x3f285b(0x932)){if(_0x54b6cf[_0x3f285b(0x90b)])this[_0x3f285b(0x117)](_0x1bcdd7[_0x3f285b(0x2ab)],_0x5aab98,_0x18ba9f);}else this[_0x3f285b(0xa71)]();}if(_0xb50716[_0x3f285b(0xab6)](/STYPE: (\d+)/i)){const _0x16857b=Number(RegExp['$1']);this[_0x3f285b(0x5ae)](_0x16857b);}else{if(_0xb50716[_0x3f285b(0xab6)](/STYPE: (.*)/i)){if('CJzwW'===_0x3f285b(0x398))this[_0x3f285b(0x42b)](),this[_0x3f285b(0x936)]();else{const _0x5a5767=DataManager[_0x3f285b(0x1fe)](RegExp['$1']);this['addSkillTypeCommand'](_0x5a5767);}}}_0xb50716==='ALL\x20SKILLS'&&this['addSingleSkillCommands']();if(_0xb50716[_0x3f285b(0xab6)](/SKILL: (\d+)/i)){if('PazoO'!==_0x3f285b(0xa95))this[_0x3f285b(0x968)]=this[_0x3f285b(0x7d3)](this['_floatHeight'],this['_targetFloatHeight'],_0x41adee,_0x59a56c,_0x57ed57);else{const _0x2dc6fb=Number(RegExp['$1']);this[_0x3f285b(0x241)]($dataSkills[_0x2dc6fb]);}}else{if(_0xb50716[_0x3f285b(0xab6)](/SKILL: (.*)/i)){const _0x3e0ca0=DataManager[_0x3f285b(0x4e4)](RegExp['$1']);this[_0x3f285b(0x241)]($dataSkills[_0x3e0ca0]);}}if(_0xb50716==='PARTY'&&Imported[_0x3f285b(0xba0)]){if(_0x3f285b(0x9c7)!==_0x3f285b(0x727))this[_0x3f285b(0x354)]();else{if(!this[_0x3f285b(0x6fe)]())return![];return _0x3261e4[_0x3f285b(0x6d0)][_0x3f285b(0x690)][_0x3f285b(0xb59)](this);}}if([_0x3f285b(0xaa1),_0x3f285b(0x44c)][_0x3f285b(0x89e)](_0xb50716)&&Imported[_0x3f285b(0x774)]){if(_0x3f285b(0x5f5)!==_0x3f285b(0x5f5)){if(!_0x3aa0a9['value'](_0x2f5c34))return![];}else this[_0x3f285b(0x273)]();}_0xb50716==='WEAPON\x20SWAP'&&Imported[_0x3f285b(0xaa9)]&&this[_0x3f285b(0x403)](!![]);},Window_ActorCommand[_0x44efce(0x8f2)]['addAttackCommand']=function(){const _0x12089e=_0x44efce,_0x533175=$dataSkills[this[_0x12089e(0x81e)][_0x12089e(0x621)]()];if(!_0x533175)return;if(!this[_0x12089e(0x183)](_0x533175))return;const _0x12728c=this[_0x12089e(0x7f3)](),_0x1aa464=DataManager[_0x12089e(0xd3)](_0x533175),_0x442726=DataManager['battleCommandIcon'](_0x533175),_0x49aa95=_0x12728c===_0x12089e(0x453)?_0x1aa464:_0x12089e(0x7a6)[_0x12089e(0x437)](_0x442726,_0x1aa464);this[_0x12089e(0x929)](_0x49aa95,_0x12089e(0x7a8),this[_0x12089e(0x81e)]['canAttack']());},Window_ActorCommand[_0x44efce(0x8f2)]['addGuardCommand']=function(){const _0x97f0c3=_0x44efce,_0x716fac=$dataSkills[this[_0x97f0c3(0x81e)][_0x97f0c3(0x89b)]()];if(!_0x716fac)return;if(!this[_0x97f0c3(0x183)](_0x716fac))return;const _0x53f505=this[_0x97f0c3(0x7f3)](),_0xfd1ed9=DataManager[_0x97f0c3(0xd3)](_0x716fac),_0x387cea=DataManager[_0x97f0c3(0x3cf)](_0x716fac),_0x477e54=_0x53f505===_0x97f0c3(0x453)?_0xfd1ed9:'\x5cI[%1]%2'[_0x97f0c3(0x437)](_0x387cea,_0xfd1ed9);this['addCommand'](_0x477e54,_0x97f0c3(0x346),this[_0x97f0c3(0x81e)][_0x97f0c3(0xa8b)]());},Window_ActorCommand[_0x44efce(0x8f2)]['addItemCommand']=function(){const _0x50f728=_0x44efce,_0x35be5a=this[_0x50f728(0x7f3)](),_0x102c07=VisuMZ['BattleCore'][_0x50f728(0x444)][_0x50f728(0x671)][_0x50f728(0x49f)],_0x5bdf73=_0x35be5a===_0x50f728(0x453)?TextManager[_0x50f728(0x987)]:_0x50f728(0x7a6)['format'](_0x102c07,TextManager['item']),_0x437d82=this['isItemCommandEnabled']();this['addCommand'](_0x5bdf73,'item',_0x437d82);},Window_ActorCommand[_0x44efce(0x8f2)][_0x44efce(0x9ec)]=function(){const _0x3c86d9=_0x44efce;return this[_0x3c86d9(0x81e)]&&this[_0x3c86d9(0x81e)][_0x3c86d9(0x26b)]();},Window_ActorCommand[_0x44efce(0x8f2)][_0x44efce(0x260)]=function(){const _0x1666ad=_0x44efce,_0x348101=this[_0x1666ad(0x81e)][_0x1666ad(0x7b8)]();for(const _0x3d2417 of _0x348101){_0x1666ad(0x4e2)===_0x1666ad(0x693)?this[_0x1666ad(0x5c6)][_0x1666ad(0x922)]=![]:this[_0x1666ad(0x5ae)](_0x3d2417);}},Window_ActorCommand['prototype'][_0x44efce(0x5ae)]=function(_0x10d355){const _0x3189d5=_0x44efce;let _0xe38599=$dataSystem[_0x3189d5(0x7b8)][_0x10d355];if(!_0xe38599)return;let _0x27e46a=_0xe38599;const _0x278b1e=this[_0x3189d5(0x7f3)]();if(_0x278b1e===_0x3189d5(0x453))_0x27e46a=_0x27e46a[_0x3189d5(0x3f6)](/\x1I\[(\d+)\]/gi,''),_0x27e46a=_0x27e46a[_0x3189d5(0x3f6)](/\\I\[(\d+)\]/gi,'');else{if(!_0xe38599[_0x3189d5(0xab6)](/\\I\[(\d+)\]/i)){const _0x21118a=Imported['VisuMZ_1_SkillsStatesCore']?VisuMZ[_0x3189d5(0x4cb)][_0x3189d5(0x444)][_0x3189d5(0xe9)]:VisuMZ[_0x3189d5(0x6d0)][_0x3189d5(0x444)]['ActorCmd'],_0x2c28f0=$dataSystem['magicSkills'][_0x3189d5(0x89e)](_0x10d355),_0x3a28e9=_0x2c28f0?_0x21118a[_0x3189d5(0x5e2)]:_0x21118a[_0x3189d5(0xa6a)];_0x27e46a=_0x3189d5(0x7a6)[_0x3189d5(0x437)](_0x3a28e9,_0xe38599);}}this[_0x3189d5(0x929)](_0x27e46a,'skill',!![],_0x10d355);},Window_ActorCommand[_0x44efce(0x8f2)]['addSingleSkillCommands']=function(){const _0x2ca914=_0x44efce,_0x32a579=this[_0x2ca914(0x81e)][_0x2ca914(0x7b8)](),_0x561749=this['_actor'][_0x2ca914(0x91f)]();for(const _0x1dbb37 of _0x561749){if('HThuH'===_0x2ca914(0xb54)){if(!_0x1dbb37)continue;if(Imported[_0x2ca914(0x755)]){if(_0x2ca914(0x757)!==_0x2ca914(0xae3)){if(this[_0x2ca914(0x7f7)](_0x1dbb37))continue;if(this[_0x2ca914(0xb72)](_0x1dbb37))continue;}else{const _0x35a700=_0xf07478(_0x355aae['$1']);return[_0xf469b4[_0x2ca914(0x19f)]()[_0x35a700]];}}else{if(!_0x32a579['includes'](_0x1dbb37[_0x2ca914(0x979)]))continue;}this[_0x2ca914(0x241)](_0x1dbb37);}else _0x357aca['BattleCore'][_0x2ca914(0x1c1)][_0x2ca914(0xb59)](this),this[_0x2ca914(0x1e6)]()===_0x2ca914(0x2c9)&&this[_0x2ca914(0x4aa)]();}},Window_ActorCommand[_0x44efce(0x8f2)]['noSimilarSTypes']=function(_0x4d64e6){const _0x1bf11a=_0x44efce,_0x406f5e=this[_0x1bf11a(0x81e)]['skillTypes'](),_0x238575=_0x406f5e[_0x1bf11a(0xc9)](_0x649b4e=>DataManager[_0x1bf11a(0x6c2)](_0x4d64e6)[_0x1bf11a(0x89e)](_0x649b4e));return _0x238575['length']<=0x0;},Window_ActorCommand['prototype'][_0x44efce(0xb72)]=function(_0x4d243a){const _0x58bd0d=_0x44efce;if(Imported[_0x58bd0d(0x755)]){if(VisuMZ['SkillsStatesCore'][_0x58bd0d(0x1e5)]>=1.24){if(_0x58bd0d(0xb12)!==_0x58bd0d(0xb12))this[_0x58bd0d(0x4e9)]();else{if(this['_actor']){if('mOxrz'===_0x58bd0d(0xa8a)){if(!VisuMZ[_0x58bd0d(0x4cb)]['CheckVisibleBattleNotetags'](this[_0x58bd0d(0x81e)],_0x4d243a))return!![];if(!VisuMZ[_0x58bd0d(0x4cb)]['CheckVisibleSwitchNotetags'](this[_0x58bd0d(0x81e)],_0x4d243a))return!![];if(!VisuMZ[_0x58bd0d(0x4cb)]['CheckVisibleSkillNotetags'](this[_0x58bd0d(0x81e)],_0x4d243a))return!![];}else return _0x373722['isActiveTpb']();}}}else{if(_0x58bd0d(0x6d3)===_0x58bd0d(0xb98))_0x2d4773=_0x2f934e;else{if(!Window_SkillList[_0x58bd0d(0x8f2)][_0x58bd0d(0x44e)][_0x58bd0d(0xb59)](this,_0x4d243a))return!![];if(!Window_SkillList[_0x58bd0d(0x8f2)][_0x58bd0d(0x596)][_0x58bd0d(0xb59)](this,_0x4d243a))return!![];if(!Window_SkillList[_0x58bd0d(0x8f2)][_0x58bd0d(0xaba)]['call'](this,_0x4d243a))return!![];}}}return![];},Window_ActorCommand[_0x44efce(0x8f2)]['addSingleSkillCommand']=function(_0x2cda18){const _0x57cddd=_0x44efce;if(!_0x2cda18)return;if(!this['canAddSkillCommand'](_0x2cda18))return;const _0x4a154e=this[_0x57cddd(0x7f3)](),_0x10a899=DataManager[_0x57cddd(0xd3)](_0x2cda18),_0x4d74f0=DataManager[_0x57cddd(0x3cf)](_0x2cda18),_0x1ef641=_0x4a154e===_0x57cddd(0x453)?_0x10a899:_0x57cddd(0x7a6)[_0x57cddd(0x437)](_0x4d74f0,_0x10a899),_0x4620fe=this[_0x57cddd(0x81e)][_0x57cddd(0x3d3)](_0x2cda18);this['addCommand'](_0x1ef641,'singleSkill',_0x4620fe,_0x2cda18['id']);},Window_ActorCommand['prototype']['canAddSkillCommand']=function(_0x4d82b){const _0x3ff163=_0x44efce,_0x25b23f=_0x4d82b[_0x3ff163(0x77d)];if(_0x25b23f[_0x3ff163(0xab6)](/<COMMAND REQUIRE LEARN>/i)){if(!this['_actor'][_0x3ff163(0xbb9)](_0x4d82b['id']))return![];}if(_0x25b23f[_0x3ff163(0xab6)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x3ff163(0x81e)][_0x3ff163(0x11a)](_0x4d82b['id']))return![];}const _0x29c1d7=VisuMZ[_0x3ff163(0x6d0)][_0x3ff163(0x3c0)](_0x4d82b,_0x3ff163(0x89f));if(VisuMZ['BattleCore']['JS'][_0x29c1d7]){if(!VisuMZ['BattleCore']['JS'][_0x29c1d7]['call'](this,this[_0x3ff163(0x81e)],_0x4d82b))return![];}return VisuMZ[_0x3ff163(0x6d0)][_0x3ff163(0x168)](_0x4d82b);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x168)]=function(_0x4d95d3){const _0xeac55e=_0x44efce,_0x5658ab=_0x4d95d3[_0xeac55e(0x77d)];if(_0x5658ab[_0xeac55e(0xab6)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('impUS'===_0xeac55e(0x722)){const _0x280573=JSON['parse']('['+RegExp['$1'][_0xeac55e(0xab6)](/\d+/g)+']');for(const _0x536a54 of _0x280573){if(_0xeac55e(0x2b1)==='cAnsp'){if(!$gameSwitches[_0xeac55e(0x18d)](_0x536a54))return![];}else return!![];}return!![];}else{const _0x5b7a91=_0x204878[_0xeac55e(0x47e)]('['+_0xa5485e['$1']['match'](/\d+/g)+']');for(const _0x5314e1 of _0x5b7a91){if(!_0x9593c3[_0xeac55e(0x18d)](_0x5314e1))return!![];}return![];}}if(_0x5658ab[_0xeac55e(0xab6)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0xad4718=JSON[_0xeac55e(0x47e)]('['+RegExp['$1'][_0xeac55e(0xab6)](/\d+/g)+']');for(const _0x30c3ad of _0xad4718){if(_0xeac55e(0xa28)!==_0xeac55e(0x7f5)){if(!$gameSwitches[_0xeac55e(0x18d)](_0x30c3ad))return![];}else{if(!_0x16c3d4[_0xeac55e(0xbab)]())return;if(!_0x5c5a54[_0xeac55e(0x483)])return;_0x13a9d1['ConvertParams'](_0x4952e5,_0x3a80af);const _0xb3cb85=_0x5744d4[_0xeac55e(0x3f8)](),_0x14f6cd=_0x279dc[_0xeac55e(0x475)];if(!_0xb3cb85)return;const _0x147758=_0x583c0c[_0xeac55e(0x948)];if(!_0x147758)return;_0x147758[_0xeac55e(0x27a)](_0x1325bc);if(_0x14f6cd)_0xb3cb85[_0xeac55e(0x227)](_0xeac55e(0x345));}}return!![];}if(_0x5658ab[_0xeac55e(0xab6)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x36e89c=JSON['parse']('['+RegExp['$1'][_0xeac55e(0xab6)](/\d+/g)+']');for(const _0x28611c of _0x36e89c){if(_0xeac55e(0x574)===_0xeac55e(0x97e)){if(_0x214ca7[_0xeac55e(0x6d0)][_0xeac55e(0x444)][_0xeac55e(0x6e4)][_0xeac55e(0x8c8)])return _0x38bcd4[_0xeac55e(0x6d0)][_0xeac55e(0x444)][_0xeac55e(0x6e4)][_0xeac55e(0x8c8)][_0xeac55e(0xb59)](this);return _0x396a71[_0xeac55e(0x6d0)][_0xeac55e(0xbb0)][_0xeac55e(0xb59)](this);}else{if($gameSwitches['value'](_0x28611c))return!![];}}return![];}if(_0x5658ab[_0xeac55e(0xab6)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0xeac55e(0x3b4)!==_0xeac55e(0x3b4))return _0x201390[_0xeac55e(0x6d0)][_0xeac55e(0x444)]['Enemy'][_0xeac55e(0x64f)]||_0x56cd56[_0xeac55e(0x37e)]();else{const _0x5926f9=JSON[_0xeac55e(0x47e)]('['+RegExp['$1'][_0xeac55e(0xab6)](/\d+/g)+']');for(const _0x8929e6 of _0x5926f9){if(!$gameSwitches[_0xeac55e(0x18d)](_0x8929e6))return!![];}return![];}}if(_0x5658ab[_0xeac55e(0xab6)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x4691e3=JSON[_0xeac55e(0x47e)]('['+RegExp['$1'][_0xeac55e(0xab6)](/\d+/g)+']');for(const _0x8ce296 of _0x4691e3){if(_0xeac55e(0x357)!=='WjPZz'){if(!$gameSwitches['value'](_0x8ce296))return!![];}else return this[_0xeac55e(0x765)]();}return![];}if(_0x5658ab['match'](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if('srRap'===_0xeac55e(0xaec)){const _0x3c1a0c=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x18202b of _0x3c1a0c){if('DmPgC'==='HwjWo')_0x5d6b5c['reserveCommonEvent'](_0x26f523['BattleEndEvent']);else{if($gameSwitches['value'](_0x18202b))return![];}}return!![];}else _0x72f6cf[_0xeac55e(0x8fb)]=_0x1b466e(_0x5d5d08['$1'])[_0xeac55e(0x733)]()['trim']();}return!![];},Window_ActorCommand[_0x44efce(0x8f2)][_0x44efce(0x882)]=function(){const _0x56528e=_0x44efce,_0x2c4ff8=this[_0x56528e(0x7f3)](),_0x1459aa=VisuMZ[_0x56528e(0x6d0)][_0x56528e(0x444)][_0x56528e(0x283)][_0x56528e(0x6e6)],_0x1ee96b=_0x2c4ff8===_0x56528e(0x453)?TextManager[_0x56528e(0xa17)]:_0x56528e(0x7a6)['format'](_0x1459aa,TextManager[_0x56528e(0xa17)]),_0x3a87e5=this[_0x56528e(0x627)]();this[_0x56528e(0x929)](_0x1ee96b,_0x56528e(0xa17),_0x3a87e5);},Window_ActorCommand[_0x44efce(0x8f2)][_0x44efce(0x627)]=function(){const _0x4024e7=_0x44efce;return BattleManager[_0x4024e7(0x277)]();},Window_ActorCommand[_0x44efce(0x8f2)][_0x44efce(0xa71)]=function(){const _0x58305a=_0x44efce,_0x1c2919=this['commandStyle'](),_0x43bc78=VisuMZ[_0x58305a(0x6d0)][_0x58305a(0x444)][_0x58305a(0x283)][_0x58305a(0x875)],_0x572515=_0x1c2919===_0x58305a(0x453)?TextManager[_0x58305a(0x7c6)]:'\x5cI[%1]%2'['format'](_0x43bc78,TextManager[_0x58305a(0x7c6)]),_0x5010a8=this[_0x58305a(0xaad)]();this[_0x58305a(0x929)](_0x572515,'autoBattle',_0x5010a8);},Window_ActorCommand['prototype']['isAutoBattleCommandEnabled']=function(){return!![];},Window_ActorCommand[_0x44efce(0x8f2)][_0x44efce(0x466)]=function(){const _0x388d00=_0x44efce;return VisuMZ[_0x388d00(0x6d0)]['Settings']['ActorCmd'][_0x388d00(0x84f)];},Window_ActorCommand[_0x44efce(0x8f2)][_0x44efce(0x121)]=function(_0x276c94){const _0x477455=_0x44efce,_0x292cf1=this[_0x477455(0x49b)](_0x276c94);if(_0x292cf1===_0x477455(0x4a1))_0x477455(0x645)===_0x477455(0x645)?this[_0x477455(0x6a3)](_0x276c94):this[_0x477455(0x416)]=_0x477455(0x2f5);else _0x292cf1===_0x477455(0xe0)?this[_0x477455(0x3a9)](_0x276c94):_0x477455(0x16d)!==_0x477455(0x592)?Window_Command[_0x477455(0x8f2)][_0x477455(0x121)][_0x477455(0xb59)](this,_0x276c94):(_0x1f93de=_0x4df0a9(_0x20e986['$1']),_0x3e71d3=_0xed6bd4(_0x559597['$2']));this['drawSingleSkillCost'](_0x276c94);},Window_ActorCommand[_0x44efce(0x8f2)]['commandStyle']=function(){const _0x4bc988=_0x44efce;return VisuMZ[_0x4bc988(0x6d0)][_0x4bc988(0x444)][_0x4bc988(0x671)][_0x4bc988(0x887)];},Window_ActorCommand[_0x44efce(0x8f2)][_0x44efce(0x49b)]=function(_0x401cfb){const _0x2c5b27=_0x44efce;if(_0x401cfb<0x0)return'text';const _0x209dd2=this[_0x2c5b27(0x7f3)]();if(_0x209dd2!=='auto')return _0x209dd2;else{if(this['maxItems']()>0x0){const _0x31cf33=this[_0x2c5b27(0x3dd)](_0x401cfb);if(_0x31cf33['match'](/\\I\[(\d+)\]/i)){if(_0x2c5b27(0x45e)===_0x2c5b27(0x45e)){const _0x315b10=this[_0x2c5b27(0x39b)](_0x401cfb),_0x1cfb97=this[_0x2c5b27(0x409)](_0x31cf33)['width'];if(_0x1cfb97<=_0x315b10[_0x2c5b27(0x542)])return _0x2c5b27(0x4a1);else{if(_0x2c5b27(0x3fc)!==_0x2c5b27(0x42c))return _0x2c5b27(0xe0);else{const _0x2f6961=_0x47ac77['note'];if(_0x2f6961[_0x2c5b27(0xab6)](_0x1e645e[_0x2c5b27(0x6d0)][_0x2c5b27(0x933)][_0x3e6cea])){const _0x131794=_0x3a400e['$1'],_0x6ff1bc='\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20'['format'](_0x131794),_0x1ee123=_0x1d35b8[_0x2c5b27(0x6d0)]['createKeyJS'](_0x4096a8,_0xd1080a);_0x35186f[_0x2c5b27(0x6d0)]['JS'][_0x1ee123]=new _0x14fabe(_0x6ff1bc);}}}}else this['createHpGaugeSprite']();}}}return _0x2c5b27(0x453);},Window_ActorCommand['prototype'][_0x44efce(0x6a3)]=function(_0x1f8b97){const _0x4b443a=_0x44efce,_0x5934dc=this[_0x4b443a(0x39b)](_0x1f8b97),_0xe9fa4d=this['commandName'](_0x1f8b97),_0x2cf769=this[_0x4b443a(0x409)](_0xe9fa4d)['width'];this[_0x4b443a(0x10a)](this[_0x4b443a(0x557)](_0x1f8b97));const _0x89c6ee=this[_0x4b443a(0x466)]();if(_0x89c6ee==='right')this[_0x4b443a(0x4c4)](_0xe9fa4d,_0x5934dc['x']+_0x5934dc[_0x4b443a(0x542)]-_0x2cf769,_0x5934dc['y'],_0x2cf769);else{if(_0x89c6ee===_0x4b443a(0x281)){const _0x35d05b=_0x5934dc['x']+Math[_0x4b443a(0xa3a)]((_0x5934dc[_0x4b443a(0x542)]-_0x2cf769)/0x2);this['drawTextEx'](_0xe9fa4d,_0x35d05b,_0x5934dc['y'],_0x2cf769);}else{if('aZyno'==='aZyno')this[_0x4b443a(0x4c4)](_0xe9fa4d,_0x5934dc['x'],_0x5934dc['y'],_0x2cf769);else return this[_0x4b443a(0x9b2)]>0x0;}}},Window_ActorCommand[_0x44efce(0x8f2)]['drawItemStyleIcon']=function(_0x296077){const _0x3eaf9e=_0x44efce;this[_0x3eaf9e(0x3dd)](_0x296077)[_0x3eaf9e(0xab6)](/\\I\[(\d+)\]/i);const _0x3edd2c=Number(RegExp['$1'])||0x0,_0x15a304=this[_0x3eaf9e(0x39b)](_0x296077),_0x1dc197=_0x15a304['x']+Math[_0x3eaf9e(0xa3a)]((_0x15a304['width']-ImageManager[_0x3eaf9e(0xaea)])/0x2),_0x4482d7=_0x15a304['y']+(_0x15a304['height']-ImageManager['iconHeight'])/0x2;this[_0x3eaf9e(0x864)](_0x3edd2c,_0x1dc197,_0x4482d7);},Window_ActorCommand[_0x44efce(0x8f2)][_0x44efce(0xb5c)]=function(_0x2795a9){const _0x4b638d=_0x44efce;if(!(VisuMZ[_0x4b638d(0x6d0)]['Settings'][_0x4b638d(0x671)][_0x4b638d(0x7ad)]??!![]))return;const _0x5c4466=this[_0x4b638d(0x926)](_0x2795a9);if(![_0x4b638d(0x7a8),_0x4b638d(0x346),_0x4b638d(0x890)]['includes'](_0x5c4466))return;const _0x39e0a5=this[_0x4b638d(0x39b)](_0x2795a9);let _0x52dc87=null;if(_0x5c4466==='attack')_0x4b638d(0xb2f)!=='kFUEa'?_0x52dc87=$dataSkills[this[_0x4b638d(0x81e)][_0x4b638d(0x621)]()]:this[_0x4b638d(0x623)](_0x4b638d(0x65f));else{if(_0x5c4466==='guard'){if('TOPmb'!==_0x4b638d(0x5dd)){if(!_0x2500ea['isSceneBattle']())return null;if(!_0x2a756d[_0x4b638d(0x45b)][_0x4b638d(0x948)])return null;return _0x554ff8[_0x4b638d(0x45b)][_0x4b638d(0x948)][_0x4b638d(0x4bc)](this);}else _0x52dc87=$dataSkills[this[_0x4b638d(0x81e)][_0x4b638d(0x89b)]()];}else _0x52dc87=$dataSkills[this[_0x4b638d(0x636)][_0x2795a9]['ext']];}this[_0x4b638d(0x3d8)](this[_0x4b638d(0x81e)],_0x52dc87,_0x39e0a5['x'],_0x39e0a5['y'],_0x39e0a5[_0x4b638d(0x542)]);},Window_ActorCommand[_0x44efce(0x8f2)]['drawSkillCost']=function(_0x41ba78,_0xc9c0bf,_0x2526fb,_0x56c2f8,_0x36818a){const _0x39331c=_0x44efce;if(!_0xc9c0bf)return;Imported[_0x39331c(0x755)]?Window_Command[_0x39331c(0x8f2)]['drawSkillCost'][_0x39331c(0xb59)](this,_0x41ba78,_0xc9c0bf,_0x2526fb,_0x56c2f8,_0x36818a):Window_SkillList[_0x39331c(0x8f2)][_0x39331c(0x3d8)]['call'](this,_0xc9c0bf,_0x2526fb,_0x56c2f8,_0x36818a);},Window_ActorCommand[_0x44efce(0x8f2)]['hide']=function(){},Window_ActorCommand[_0x44efce(0x8f2)][_0x44efce(0x4c7)]=function(){const _0x5deac5=_0x44efce;Window_Command['prototype']['activate'][_0x5deac5(0xb59)](this);const _0x2d512b=this[_0x5deac5(0x1e6)]();_0x2d512b==='border'&&this['showHelpWindow']();},Window_ActorCommand[_0x44efce(0x8f2)][_0x44efce(0x1e6)]=function(){const _0x45cb5e=_0x44efce;if(this[_0x45cb5e(0x5de)])return this[_0x45cb5e(0x5de)];return this[_0x45cb5e(0x5de)]=SceneManager[_0x45cb5e(0x45b)][_0x45cb5e(0x1e6)](),this[_0x45cb5e(0x5de)];},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x66a)]=Window_ActorCommand[_0x44efce(0x8f2)]['setup'],Window_ActorCommand[_0x44efce(0x8f2)][_0x44efce(0x803)]=function(_0xf668db){const _0x2d3fe0=_0x44efce,_0x3c6d29=this[_0x2d3fe0(0x1e6)]();if(_0xf668db&&['xp',_0x2d3fe0(0x47a)]['includes'](_0x3c6d29)){if(_0x2d3fe0(0xb34)===_0x2d3fe0(0xb34))this[_0x2d3fe0(0x232)](_0xf668db);else return _0xaa1784['BattleCore'][_0x2d3fe0(0x502)][_0x2d3fe0(0xb59)](this);}else{if(_0xf668db&&['border'][_0x2d3fe0(0x89e)](_0x3c6d29)){if(_0x2d3fe0(0x902)===_0x2d3fe0(0x902))this[_0x2d3fe0(0x65e)](_0xf668db),this[_0x2d3fe0(0x43d)]();else{if(_0x105153[_0x125802[_0x2d3fe0(0x134)]]){const _0x1f37c9=_0x3cf96c[_0x2d3fe0(0x134)],_0x5ed8ce=_0x5df044['x'],_0x445d5c=_0x3a0505['y'],_0x36ec4a=new _0x44f831(_0x1f37c9,_0x5ed8ce,_0x445d5c);_0x3f3784[_0x2d3fe0(0x57a)]&&_0x36ec4a['hide'](),this['_enemies'][_0x2d3fe0(0xb70)](_0x36ec4a);}}}}VisuMZ['BattleCore'][_0x2d3fe0(0x66a)][_0x2d3fe0(0xb59)](this,_0xf668db);if(_0xf668db&&$gameTroop[_0x2d3fe0(0xb09)]()['length']>0x0&&_0xf668db[_0x2d3fe0(0x6dd)]()){if(_0x2d3fe0(0x705)!=='NhXgU')return _0x597e36(_0x4d7319['$1']);else _0xf668db[_0x2d3fe0(0x6dd)]()['stepForward']();}},Window_ActorCommand[_0x44efce(0x8f2)][_0x44efce(0x232)]=function(_0x2399f7){const _0x42b08e=_0x44efce,_0x2b9489=Math[_0x42b08e(0x18c)](Graphics[_0x42b08e(0x613)]/0x3),_0x2756d9=Math[_0x42b08e(0x18c)](Graphics[_0x42b08e(0x613)]/$gameParty[_0x42b08e(0xaa6)]()[_0x42b08e(0x496)]),_0x2abfd0=Math['min'](_0x2b9489,_0x2756d9),_0x4f6d7f=this[_0x42b08e(0x452)](VisuMZ['BattleCore'][_0x42b08e(0x444)][_0x42b08e(0xaaf)][_0x42b08e(0x5e7)]),_0x42f6bc=_0x2756d9*_0x2399f7[_0x42b08e(0x8e4)]()+(_0x2756d9-_0x2abfd0)/0x2,_0x41d3b4=SceneManager[_0x42b08e(0x45b)][_0x42b08e(0x743)]['y']-_0x4f6d7f;this['move'](_0x42f6bc,_0x41d3b4,_0x2abfd0,_0x4f6d7f),this[_0x42b08e(0x7ba)](),this['setBackgroundType'](0x1);},Window_ActorCommand[_0x44efce(0x8f2)][_0x44efce(0x65e)]=function(_0x44ac87){const _0x2817b=_0x44efce,_0x58b78e=SceneManager[_0x2817b(0x45b)][_0x2817b(0x73c)]();this[_0x2817b(0x404)](_0x58b78e['x'],_0x58b78e['y'],_0x58b78e[_0x2817b(0x542)],_0x58b78e[_0x2817b(0x737)]),this['createContents'](),this[_0x2817b(0xb01)](0x0);},Window_ActorCommand[_0x44efce(0x8f2)]['refreshDimmerBitmap']=function(){const _0x19aace=_0x44efce;if(this['_dimmerSprite']){const _0x5722bb=this[_0x19aace(0x411)][_0x19aace(0x3e8)],_0x327155=this[_0x19aace(0x542)]-0x8,_0x1945d1=this[_0x19aace(0x737)],_0x5346de=this[_0x19aace(0xd7)],_0x5b3b24=ColorManager[_0x19aace(0xa6e)](),_0x2786d6=ColorManager['dimColor2']();this[_0x19aace(0x411)]['x']=0x4,_0x5722bb[_0x19aace(0x76e)](_0x327155,_0x1945d1),_0x5722bb[_0x19aace(0x36b)](0x0,0x0,_0x327155,_0x5346de,_0x2786d6,_0x5b3b24,!![]),_0x5722bb[_0x19aace(0x6d6)](0x0,_0x5346de,_0x327155,_0x1945d1-_0x5346de*0x2,_0x5b3b24),_0x5722bb[_0x19aace(0x36b)](0x0,_0x1945d1-_0x5346de,_0x327155,_0x5346de,_0x5b3b24,_0x2786d6,!![]),this[_0x19aace(0x411)]['setFrame'](0x0,0x0,_0x327155,_0x1945d1);}},Window_ActorCommand[_0x44efce(0x8f2)]['updateHelp']=function(){const _0x2b637a=_0x44efce;if(!this['_actor'])return;const _0x1bf8c9=VisuMZ[_0x2b637a(0x6d0)]['Settings'][_0x2b637a(0x671)],_0x518153=this[_0x2b637a(0x395)]();switch(_0x518153){case _0x2b637a(0x7a8):this[_0x2b637a(0x40b)]($dataSkills[this['_actor'][_0x2b637a(0x621)]()]);break;case _0x2b637a(0x346):this[_0x2b637a(0x40b)]($dataSkills[this[_0x2b637a(0x81e)][_0x2b637a(0x89b)]()]);break;case'skill':const _0x35907f=_0x1bf8c9[_0x2b637a(0xab9)],_0x3897c0=_0x35907f['format']($dataSystem[_0x2b637a(0x7b8)][this[_0x2b637a(0x49a)]()]);this[_0x2b637a(0x81c)][_0x2b637a(0xa9b)](_0x3897c0);break;case _0x2b637a(0x890):this[_0x2b637a(0x40b)]($dataSkills[this['currentExt']()]);break;case _0x2b637a(0x987):this[_0x2b637a(0x81c)][_0x2b637a(0xa9b)](_0x1bf8c9[_0x2b637a(0x178)]);break;case _0x2b637a(0xa17):this['_helpWindow'][_0x2b637a(0xa9b)](_0x1bf8c9[_0x2b637a(0x651)]);break;case _0x2b637a(0x7c6):this[_0x2b637a(0x81c)][_0x2b637a(0xa9b)](_0x1bf8c9['HelpAutoBattle']);break;default:this[_0x2b637a(0x81c)][_0x2b637a(0xa9b)]('');break;}},VisuMZ['BattleCore'][_0x44efce(0xa73)]=Window_BattleStatus[_0x44efce(0x8f2)][_0x44efce(0x64a)],Window_BattleStatus[_0x44efce(0x8f2)][_0x44efce(0x64a)]=function(_0x4b9a53){const _0x3b6ab2=_0x44efce;VisuMZ['BattleCore']['Window_BattleStatus_initialize'][_0x3b6ab2(0xb59)](this,_0x4b9a53),this[_0x3b6ab2(0x2bd)](),this[_0x3b6ab2(0x19e)]();},Window_BattleStatus[_0x44efce(0x8f2)]['battleLayoutStyle']=function(){const _0x51981f=_0x44efce;if(this['_battleLayoutStyle'])return this[_0x51981f(0x5de)];return this[_0x51981f(0x5de)]=SceneManager[_0x51981f(0x45b)][_0x51981f(0x1e6)](),this[_0x51981f(0x5de)];},Window_BattleStatus[_0x44efce(0x8f2)][_0x44efce(0x2bd)]=function(){const _0x504b17=_0x44efce;this[_0x504b17(0x614)]=this[_0x504b17(0x51f)]();const _0x49ffb9=VisuMZ[_0x504b17(0x6d0)][_0x504b17(0x444)][_0x504b17(0xaaf)];_0x49ffb9[_0x504b17(0x6f5)]&&(_0x504b17(0xcf)!=='jTETh'?this[_0x504b17(0x8fe)]=0x0:(this[_0x504b17(0x9f5)](),this[_0x504b17(0x81f)](),this[_0x504b17(0x739)](),this[_0x504b17(0x6af)](),_0x23f64d[_0x504b17(0x6d0)]['Scene_Boot_onDatabaseLoaded'][_0x504b17(0xb59)](this),this[_0x504b17(0xa94)](),this[_0x504b17(0x65d)](),this[_0x504b17(0x98e)](),this[_0x504b17(0xb92)]()));},Window_BattleStatus['prototype'][_0x44efce(0x51f)]=function(){const _0x4db8ed=_0x44efce,_0x4b3f7d=VisuMZ[_0x4db8ed(0x6d0)][_0x4db8ed(0x444)][_0x4db8ed(0xaaf)];if(_0x4b3f7d['StatusWindowSkinFilename'])return!![];const _0x892ea9=this[_0x4db8ed(0x1e6)]();switch(_0x892ea9){case _0x4db8ed(0x570):case _0x4db8ed(0x2c9):return!![];break;case _0x4db8ed(0x8dd):case'xp':case'portrait':default:return![];break;}},Window_BattleStatus['prototype']['extraHeight']=function(){const _0x44bd0b=_0x44efce;if(this['isFrameVisible']())return 0x0;else{if(_0x44bd0b(0x53e)==='VisIj')return 0xa;else{const _0x5b106d=_0x4cd725[_0x44bd0b(0x6d0)][_0x44bd0b(0x444)]['ActionSequence'],_0x4229e0=_0x5b106d['StepDistanceX'],_0x31a004=_0x5b106d['StepDistanceY'],_0x1ce089=_0x5b106d['StepDuration'];this[_0x44bd0b(0x9fc)](-_0x4229e0,-_0x31a004,_0x1ce089);}}},Window_BattleStatus[_0x44efce(0x8f2)]['maxCols']=function(){const _0x11c83c=_0x44efce,_0x140367=this[_0x11c83c(0x1e6)]();switch(_0x140367){case _0x11c83c(0x570):return 0x1;break;case'xp':case'portrait':return $gameParty[_0x11c83c(0xaa6)]()['length'];break;case _0x11c83c(0x8dd):default:return $gameParty[_0x11c83c(0x1df)]();break;}},Window_BattleStatus['prototype']['itemHeight']=function(){const _0x1da475=_0x44efce,_0x138656=this['battleLayoutStyle']();switch(_0x138656){case _0x1da475(0x570):return Window_StatusBase[_0x1da475(0x8f2)][_0x1da475(0x7a4)][_0x1da475(0xb59)](this);break;case'default':case'xp':case'portrait':default:return this['innerHeight'];break;}},Window_BattleStatus['prototype'][_0x44efce(0x158)]=function(){const _0x925c71=_0x44efce,_0x12b3de=this[_0x925c71(0x1e6)]();switch(_0x12b3de){case _0x925c71(0x570):return Window_StatusBase[_0x925c71(0x8f2)][_0x925c71(0x158)][_0x925c71(0xb59)](this);break;case _0x925c71(0x8dd):case'xp':case _0x925c71(0x47a):default:return 0x0;break;}},Window_BattleStatus[_0x44efce(0x8f2)][_0x44efce(0x154)]=function(){const _0x58b69a=_0x44efce;this[_0x58b69a(0x51f)]()?_0x58b69a(0x171)===_0x58b69a(0x855)?(this[_0x58b69a(0x328)]=this['applyEasing'](this[_0x58b69a(0x328)],this[_0x58b69a(0x17b)],_0x13e0db,_0x5a2ac2,_0xa2777),this[_0x58b69a(0x5bb)]=this['applyEasing'](this[_0x58b69a(0x5bb)],this[_0x58b69a(0x295)],_0x5cc829,_0x3885c1,_0x18fffe)):Window_StatusBase['prototype'][_0x58b69a(0x154)]['call'](this):this[_0x58b69a(0xd7)]=0x8;},Window_BattleStatus[_0x44efce(0x8f2)][_0x44efce(0x637)]=function(){const _0x5d24c5=_0x44efce,_0x342d14=VisuMZ[_0x5d24c5(0x6d0)][_0x5d24c5(0x444)][_0x5d24c5(0xaaf)];_0x342d14['StatusWindowSkinFilename']?this[_0x5d24c5(0x908)]=ImageManager[_0x5d24c5(0x25a)](_0x342d14[_0x5d24c5(0x793)]):Window_StatusBase[_0x5d24c5(0x8f2)][_0x5d24c5(0x637)]['call'](this);},Window_BattleStatus['prototype'][_0x44efce(0x6df)]=function(_0x365ad8){const _0x48a0cb=_0x44efce,_0x5528fd=VisuMZ[_0x48a0cb(0x6d0)][_0x48a0cb(0x444)][_0x48a0cb(0xaaf)];if(_0x5528fd[_0x48a0cb(0x726)])return;Window_StatusBase[_0x48a0cb(0x8f2)]['drawItemBackground'][_0x48a0cb(0xb59)](this,_0x365ad8);},Window_BattleStatus['prototype'][_0x44efce(0x21e)]=function(){this['_requestRefresh']=!![];},Window_BattleStatus['prototype'][_0x44efce(0x9da)]=function(){const _0x3bef5d=_0x44efce;Window_StatusBase[_0x3bef5d(0x8f2)][_0x3bef5d(0x9da)][_0x3bef5d(0xb59)](this),this['updateRefresh'](),this[_0x3bef5d(0x128)]();if(this['battleLayoutStyle']()==='border')this[_0x3bef5d(0x43b)]();},Window_BattleStatus['prototype']['updateRefresh']=function(){const _0x5707b5=_0x44efce;if($gameTemp[_0x5707b5(0x6c9)]())this[_0x5707b5(0xb6c)](),this[_0x5707b5(0x52c)]=![],$gameTemp[_0x5707b5(0x484)]();else this[_0x5707b5(0x52c)]&&(this['_requestRefresh']=![],this['refresh'](),this[_0x5707b5(0x276)]());},Window_BattleStatus[_0x44efce(0x8f2)][_0x44efce(0x57c)]=function(){const _0x1f99d6=_0x44efce;Window_StatusBase[_0x1f99d6(0x8f2)][_0x1f99d6(0x57c)][_0x1f99d6(0xb59)](this);if(!$gameSystem[_0x1f99d6(0x8c0)]())this[_0x1f99d6(0x290)]();},Window_BattleStatus[_0x44efce(0x8f2)]['hide']=function(){const _0x67d15d=_0x44efce;if(this[_0x67d15d(0x669)]===Window_BattleStatus)return;Window_StatusBase[_0x67d15d(0x8f2)][_0x67d15d(0x7d6)]['call'](this);},Window_BattleStatus[_0x44efce(0x8f2)]['drawBackgroundRect']=function(_0x954c35){const _0x4b2bd5=_0x44efce,_0x377126=this[_0x4b2bd5(0x1e6)]();switch(_0x377126){case'xp':case _0x4b2bd5(0x47a):break;case'default':case'list':case _0x4b2bd5(0x2c9):default:return Window_StatusBase[_0x4b2bd5(0x8f2)]['drawBackgroundRect'][_0x4b2bd5(0xb59)](this,_0x954c35);break;}},VisuMZ[_0x44efce(0x6d0)]['Window_BattleStatus_drawItemImage']=Window_BattleStatus[_0x44efce(0x8f2)][_0x44efce(0x640)],Window_BattleStatus[_0x44efce(0x8f2)]['drawItemImage']=function(_0x5cdba5){const _0x4055e0=_0x44efce,_0x5d6b2e=this['battleLayoutStyle']();switch(_0x5d6b2e){case _0x4055e0(0x570):this[_0x4055e0(0xac6)](_0x5cdba5);break;case'xp':this[_0x4055e0(0xa52)](_0x5cdba5);break;case _0x4055e0(0x47a):this[_0x4055e0(0x76f)](_0x5cdba5);break;case'default':case'border':default:VisuMZ[_0x4055e0(0x6d0)]['Window_BattleStatus_drawItemImage'][_0x4055e0(0xb59)](this,_0x5cdba5);break;}},Window_BattleStatus[_0x44efce(0x8f2)]['drawItemStatus']=function(_0xd7084a){const _0x516848=_0x44efce,_0x63e32=this['battleLayoutStyle']();if(!$gameSystem['isSideView']())this[_0x516848(0x8fa)](_0xd7084a);switch(_0x63e32){case _0x516848(0x570):this[_0x516848(0xb57)](_0xd7084a);break;case'xp':case _0x516848(0x47a):case'default':case _0x516848(0x2c9):default:this['drawItemStatusXPStyle'](_0xd7084a);break;}},Window_BattleStatus['prototype'][_0x44efce(0x6fb)]=function(){const _0x21ddc4=_0x44efce,_0x4bbaa5=this[_0x21ddc4(0x1e6)]();if(['xp']['includes'](_0x4bbaa5)&&!$gameSystem[_0x21ddc4(0x8c0)]()){if(_0x21ddc4(0x697)!=='hEWrG')_0x57e452['BattleCore'][_0x21ddc4(0x96f)][_0x21ddc4(0xb59)](this),!this['_battler']&&this['_hpGaugeSprite']&&(this[_0x21ddc4(0xa16)][_0x21ddc4(0x922)]=![]);else{this['setCursorRect'](0x0,0x0,0x0,0x0);return;}}Window_StatusBase[_0x21ddc4(0x8f2)]['refreshCursor'][_0x21ddc4(0xb59)](this);},Window_BattleStatus[_0x44efce(0x8f2)][_0x44efce(0x8fa)]=function(_0x1af779){const _0xd49493=_0x44efce,_0x4b6935=this[_0xd49493(0x918)](_0x1af779)[_0xd49493(0x6dd)]();if(!_0x4b6935)return;const _0x2ccba8=this['battleLayoutStyle'](),_0x734b15=this['itemRect'](_0x1af779);let _0x2c3170=Math[_0xd49493(0x18c)](_0x734b15['x']+_0x734b15[_0xd49493(0x542)]/0x2)+this['padding'];[_0xd49493(0x570)]['includes'](_0x2ccba8)&&(_0x2c3170=_0x734b15[_0xd49493(0x542)]/$gameParty[_0xd49493(0xaa6)]()[_0xd49493(0x496)],_0x2c3170*=_0x1af779,_0x2c3170+=_0x734b15[_0xd49493(0x542)]/$gameParty[_0xd49493(0xaa6)]()[_0xd49493(0x496)]/0x2);let _0x16322e=Math['round'](this[_0xd49493(0x1cb)](_0x1af779,_0x4b6935,_0x734b15));_0x4b6935['setHome'](_0x2c3170,_0x16322e),this['addChildAt'](_0x4b6935,0x1),_0x4b6935[_0xd49493(0x57c)](),this[_0xd49493(0x699)](),this[_0xd49493(0x276)]();},Window_BattleStatus[_0x44efce(0x8f2)][_0x44efce(0x1cb)]=function(_0x580e47,_0x53a53e,_0x21c57c){const _0x56fbbe=_0x44efce,_0x3ab22e=VisuMZ['BattleCore'][_0x56fbbe(0x444)][_0x56fbbe(0xaaf)],_0x5c04a6=this['battleLayoutStyle']();if(_0x5c04a6==='xp'){if(_0x56fbbe(0x51d)==='nAMxo'){if(_0x27f441[_0x56fbbe(0xa15)]===0x0)this['requestMotion'](_0x56fbbe(0x15d));else{if(_0x2e33e4[_0x56fbbe(0xa15)]===0x1)this[_0x56fbbe(0x7c8)](_0x56fbbe(0x9ae));else _0x5d85ff[_0x56fbbe(0xa15)]===0x2&&this[_0x56fbbe(0x7c8)](_0x56fbbe(0x3c4));}this[_0x56fbbe(0xa67)](_0x56e072[_0x56fbbe(0x1a5)]);}else{const _0x40ff97=_0x3ab22e['XPSpriteYLocation'];switch(_0x40ff97['toLowerCase']()[_0x56fbbe(0xaef)]()){case _0x56fbbe(0x86e):return _0x21c57c[_0x56fbbe(0x737)]-_0x53a53e[_0x56fbbe(0x952)][_0x56fbbe(0x737)]/0x4;break;case _0x56fbbe(0x281):const _0x136f95=_0x3ab22e[_0x56fbbe(0x13b)];return(_0x21c57c[_0x56fbbe(0x737)]+(_0x53a53e[_0x56fbbe(0x737)]||_0x136f95))/0x2;break;case _0x56fbbe(0xbc0):return 0x0;case'name':default:return this[_0x56fbbe(0xbbe)](_0x21c57c);break;}}}else{if(_0x5c04a6===_0x56fbbe(0x47a)){}}return _0x53a53e[_0x56fbbe(0x737)];},Sprite_Name['prototype'][_0x44efce(0xad7)]=function(){return 0x24;},Sprite_Name['prototype'][_0x44efce(0x80c)]=function(){const _0x5a2ce2=_0x44efce,_0x371ed3=this[_0x5a2ce2(0x5d4)](),_0xf15a8d=this['bitmapWidth'](),_0xdadc30=this[_0x5a2ce2(0xad7)]();this[_0x5a2ce2(0x766)](),this[_0x5a2ce2(0x3e8)][_0x5a2ce2(0xa09)](),this[_0x5a2ce2(0x3e8)][_0x5a2ce2(0xa18)](_0x371ed3,0x0,0x0,_0xf15a8d,_0xdadc30,_0x5a2ce2(0xa31));},Bitmap[_0x44efce(0x8f2)]['drawTextTopAligned']=function(_0x4ed25a,_0x303cc4,_0x42edd6,_0x2fa8c7,_0x1f1b77,_0x3e8496){const _0x538050=_0x44efce,_0x259135=this[_0x538050(0x72a)],_0x223f78=_0x259135[_0x538050(0x67f)];_0x2fa8c7=_0x2fa8c7||0xffffffff;let _0x5a289d=_0x303cc4,_0x3a65b5=Math[_0x538050(0x18c)](_0x42edd6+0x18/0x2+this['fontSize']*0.35);_0x3e8496===_0x538050(0x281)&&(_0x538050(0x1f3)!==_0x538050(0x1f3)?this[_0x538050(0x7c8)](_0x538050(0x15d)):_0x5a289d+=_0x2fa8c7/0x2);if(_0x3e8496===_0x538050(0x4a7)){if(_0x538050(0x297)===_0x538050(0x7b0)){if(!this[_0x538050(0x9aa)]&&this['subject']()['isConfused']())return![];if(this[_0x538050(0x940)]())return!![];return typeof this[_0x538050(0x987)]()['scope']===_0x538050(0xb97);}else _0x5a289d+=_0x2fa8c7;}_0x259135[_0x538050(0x9ad)](),_0x259135[_0x538050(0xac4)]=this[_0x538050(0x6ae)](),_0x259135['textAlign']=_0x3e8496,_0x259135['textBaseline']=_0x538050(0x799),_0x259135[_0x538050(0x67f)]=0x1,this[_0x538050(0x70c)](_0x4ed25a,_0x5a289d,_0x3a65b5,_0x2fa8c7),_0x259135['globalAlpha']=_0x223f78,this[_0x538050(0x2a9)](_0x4ed25a,_0x5a289d,_0x3a65b5,_0x2fa8c7),_0x259135[_0x538050(0x410)](),this['_baseTexture'][_0x538050(0x9da)]();},Window_BattleStatus[_0x44efce(0x8f2)][_0x44efce(0xbbe)]=function(_0x106c79){const _0x2ab8b0=_0x44efce;return this[_0x2ab8b0(0xa56)](_0x106c79)-this[_0x2ab8b0(0x915)]();},Window_BattleStatus[_0x44efce(0x8f2)][_0x44efce(0xac6)]=function(_0xcbc1be){const _0x32da58=_0x44efce;if(!VisuMZ['BattleCore'][_0x32da58(0x444)][_0x32da58(0xaaf)][_0x32da58(0x4c2)])return;const _0x551b17=this['actor'](_0xcbc1be),_0x3eee29=this['itemRect'](_0xcbc1be);_0x3eee29[_0x32da58(0x542)]=ImageManager[_0x32da58(0x42e)],_0x3eee29[_0x32da58(0x737)]-=0x2,this[_0x32da58(0x871)](_0x551b17,_0x3eee29['x']+0x1,_0x3eee29['y']+0x1,_0x3eee29[_0x32da58(0x542)],_0x3eee29[_0x32da58(0x737)]);},Window_BattleStatus[_0x44efce(0x8f2)][_0x44efce(0xb57)]=function(_0x474232){const _0x2daf43=_0x44efce,_0x21ffaa=VisuMZ[_0x2daf43(0x6d0)][_0x2daf43(0x444)][_0x2daf43(0xaaf)],_0xc962e1=$dataSystem[_0x2daf43(0x23b)]?0x4:0x3,_0x46b54d=_0xc962e1*0x80+(_0xc962e1-0x1)*0x8+0x4,_0xa8a78f=this[_0x2daf43(0x918)](_0x474232),_0x49dac3=this['itemRect'](_0x474232);let _0x54c7ce=_0x49dac3['x']+this[_0x2daf43(0xd7)];_0x21ffaa[_0x2daf43(0x4c2)]?_0x54c7ce=_0x49dac3['x']+ImageManager[_0x2daf43(0x42e)]+0x8:_0x54c7ce+=ImageManager['iconWidth'];const _0x3f66e8=Math[_0x2daf43(0x18c)](Math['min'](_0x49dac3['x']+_0x49dac3[_0x2daf43(0x542)]-_0x46b54d,_0x54c7ce)),_0x4afbcd=Math['round'](_0x49dac3['y']+(_0x49dac3[_0x2daf43(0x737)]-Sprite_Name[_0x2daf43(0x8f2)]['bitmapHeight']())/0x2),_0x5ce18a=Math[_0x2daf43(0x18c)](_0x3f66e8-ImageManager['iconWidth']/0x2-0x4),_0x5e3a47=Math[_0x2daf43(0x18c)](_0x49dac3['y']+(_0x49dac3[_0x2daf43(0x737)]-ImageManager[_0x2daf43(0x3fa)])/0x2+ImageManager['iconHeight']/0x2);let _0x5efe53=_0x3f66e8+0x88;const _0x44dddb=_0x4afbcd;this['placeTimeGauge'](_0xa8a78f,_0x3f66e8-0x4+(_0x21ffaa['TpbGaugeOffsetX']||0x0),_0x4afbcd+(_0x21ffaa[_0x2daf43(0x1e7)]||0x0)),this[_0x2daf43(0x4fb)](_0xa8a78f,_0x3f66e8+(_0x21ffaa['NameOffsetX']||0x0),_0x4afbcd+(_0x21ffaa[_0x2daf43(0xb19)]||0x0)),this[_0x2daf43(0x947)](_0xa8a78f,_0x5ce18a+(_0x21ffaa['StateIconOffsetX']||0x0),_0x5e3a47+(_0x21ffaa[_0x2daf43(0x7a1)]||0x0)),this[_0x2daf43(0x464)](_0xa8a78f,'hp',_0x5efe53+0x88*0x0+(_0x21ffaa['HpGaugeOffsetX']||0x0),_0x44dddb+(_0x21ffaa['HpGaugeOffsetY']||0x0)),this[_0x2daf43(0x464)](_0xa8a78f,'mp',_0x5efe53+0x88*0x1+(_0x21ffaa[_0x2daf43(0x48e)]||0x0),_0x44dddb+(_0x21ffaa[_0x2daf43(0xb2)]||0x0));if($dataSystem[_0x2daf43(0x23b)]){if(_0x2daf43(0x599)===_0x2daf43(0x41c)){if(this[_0x2daf43(0x4f7)]()!=='')return this['getBattlePortrait']();else{if(_0x16dd17[_0x2daf43(0x5b9)]&&this[_0x2daf43(0x765)]()!=='')return this['getMenuImage']();}return'';}else this[_0x2daf43(0x464)](_0xa8a78f,'tp',_0x5efe53+0x88*0x2+(_0x21ffaa[_0x2daf43(0xb6f)]||0x0),_0x44dddb+(_0x21ffaa[_0x2daf43(0x868)]||0x0));}},Window_BattleStatus[_0x44efce(0x8f2)][_0x44efce(0xa52)]=function(_0x44c469){const _0x1704f0=_0x44efce;if(!$gameSystem[_0x1704f0(0x8c0)]())return;VisuMZ[_0x1704f0(0x6d0)][_0x1704f0(0xb8f)][_0x1704f0(0xb59)](this,_0x44c469);},Window_BattleStatus[_0x44efce(0x8f2)][_0x44efce(0x4e7)]=function(_0x18e348){const _0x539884=_0x44efce,_0x5a2628=VisuMZ[_0x539884(0x6d0)][_0x539884(0x444)][_0x539884(0xaaf)],_0x57c667=this['actor'](_0x18e348),_0x1fbf39=this[_0x539884(0x196)](_0x18e348),_0x1ea62e=Math[_0x539884(0x18c)](_0x1fbf39['x']+(_0x1fbf39[_0x539884(0x542)]-0x80)/0x2),_0x538563=this['nameY'](_0x1fbf39);let _0x5b4928=_0x1ea62e-ImageManager[_0x539884(0xaea)]/0x2-0x4,_0x3902fc=_0x538563+ImageManager[_0x539884(0x3fa)]/0x2;_0x5b4928-ImageManager[_0x539884(0xaea)]/0x2<_0x1fbf39['x']&&(_0x5b4928=_0x1ea62e+ImageManager[_0x539884(0xaea)]/0x2-0x4,_0x3902fc=_0x538563-ImageManager[_0x539884(0x3fa)]/0x2);const _0x2b7c14=_0x1ea62e,_0x40f794=this[_0x539884(0xa56)](_0x1fbf39);this[_0x539884(0x271)](_0x57c667,_0x1ea62e+(_0x5a2628[_0x539884(0x353)]||0x0),_0x538563+(_0x5a2628[_0x539884(0x1e7)]||0x0)),this[_0x539884(0x4fb)](_0x57c667,_0x1ea62e+(_0x5a2628[_0x539884(0x9e0)]||0x0),_0x538563+(_0x5a2628[_0x539884(0xb19)]||0x0)),this['placeStateIcon'](_0x57c667,_0x5b4928+(_0x5a2628[_0x539884(0x4cf)]||0x0),_0x3902fc+(_0x5a2628['StateIconOffsetY']||0x0)),this[_0x539884(0x464)](_0x57c667,'hp',_0x2b7c14+(_0x5a2628[_0x539884(0x21d)]||0x0),_0x40f794+(_0x5a2628['HpGaugeOffsetY']||0x0)),this['placeGauge'](_0x57c667,'mp',_0x2b7c14+(_0x5a2628['MpGaugeOffsetX']||0x0),_0x40f794+this[_0x539884(0x915)]()+(_0x5a2628[_0x539884(0xb2)]||0x0)),$dataSystem[_0x539884(0x23b)]&&this[_0x539884(0x464)](_0x57c667,'tp',_0x2b7c14+(_0x5a2628[_0x539884(0xb6f)]||0x0),_0x40f794+this[_0x539884(0x915)]()*0x2+(_0x5a2628[_0x539884(0x868)]||0x0));},Window_BattleStatus['prototype'][_0x44efce(0x8af)]=function(_0x185919){const _0x53b1cb=_0x44efce;if(!VisuMZ['BattleCore'][_0x53b1cb(0x444)][_0x53b1cb(0xaaf)]['ShowPortraits'])return![];if(_0x185919['getBattlePortrait']())return!![];return Imported[_0x53b1cb(0x5b9)]&&_0x185919[_0x53b1cb(0x765)]();},Game_Actor['prototype'][_0x44efce(0x97b)]=function(){const _0x2cd8e2=_0x44efce;if(this[_0x2cd8e2(0x918)]()[_0x2cd8e2(0x77d)][_0x2cd8e2(0xab6)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x2cd8e2(0x918)]()[_0x2cd8e2(0x77d)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x44efce(0x8f2)][_0x44efce(0x590)]=function(){const _0x2c67d6=_0x44efce;if(this['actor']()[_0x2c67d6(0x77d)][_0x2c67d6(0xab6)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x2c67d6(0x918)]()[_0x2c67d6(0x77d)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x44efce(0x8f2)][_0x44efce(0x76f)]=function(_0x35592f){const _0x5748e7=_0x44efce,_0x429145=this[_0x5748e7(0x918)](_0x35592f);if(this[_0x5748e7(0x8af)](_0x429145)){if('rWAwb'==='lEAoE')return _0x2bc3a7[_0x5748e7(0x6d0)][_0x5748e7(0x444)][_0x5748e7(0x44f)]['Shadow'];else{const _0x171d93='actor%1-portrait'[_0x5748e7(0x437)](_0x429145[_0x5748e7(0x701)]()),_0x5bc6eb=this[_0x5748e7(0x8f3)](_0x171d93,Sprite),_0x5699f6=_0x429145[_0x5748e7(0x9e5)]();_0x5699f6!==''?'LMNXC'===_0x5748e7(0x6d2)?this[_0x5748e7(0x227)]('jump'):_0x5bc6eb[_0x5748e7(0x3e8)]=ImageManager['loadPicture'](_0x5699f6):_0x5748e7(0x1ed)===_0x5748e7(0x1ed)?_0x5bc6eb[_0x5748e7(0x3e8)]=ImageManager[_0x5748e7(0xbaa)]:_0x2413ec['endAnimation']();const _0x1ab493=this['itemRect'](_0x35592f);_0x5bc6eb['anchor']['x']=0.5,_0x5bc6eb[_0x5748e7(0x20c)]['y']=0x1;let _0xe9687e=Math[_0x5748e7(0x18c)](_0x1ab493['x']+_0x1ab493['width']/0x2)+this[_0x5748e7(0xd7)];_0xe9687e+=_0x429145['getBattlePortraitOffsetX']();let _0x22cdc9=Math[_0x5748e7(0x18c)](this[_0x5748e7(0x737)]);_0x22cdc9+=_0x429145['getBattlePortraitOffsetY'](),_0x5bc6eb[_0x5748e7(0x404)](_0xe9687e,_0x22cdc9);const _0xe6f83=VisuMZ['BattleCore'][_0x5748e7(0x444)][_0x5748e7(0xaaf)][_0x5748e7(0xb7e)];_0x5bc6eb[_0x5748e7(0x718)]['x']=_0xe6f83,_0x5bc6eb['scale']['y']=_0xe6f83,_0x5bc6eb['show']();}}else{const _0x579080=this[_0x5748e7(0x26f)](_0x35592f);this[_0x5748e7(0x871)](_0x429145,_0x579080['x'],_0x579080['y'],_0x579080[_0x5748e7(0x542)],_0x579080['height']);}},Window_BattleStatus['prototype'][_0x44efce(0x8f3)]=function(_0x27e3af,_0x5ad00f){const _0x1c88a0=_0x44efce,_0x29b755=this[_0x1c88a0(0x59e)];if(_0x29b755[_0x27e3af])return _0x29b755[_0x27e3af];else{const _0x5bcd6d=new _0x5ad00f();return _0x29b755[_0x27e3af]=_0x5bcd6d,this[_0x1c88a0(0x6b0)](_0x5bcd6d),this[_0x1c88a0(0x6b0)](this[_0x1c88a0(0x529)]),_0x5bcd6d;}},Window_BattleStatus[_0x44efce(0x8f2)][_0x44efce(0x407)]=function(){const _0x166619=_0x44efce;this[_0x166619(0x70d)](),this[_0x166619(0x2d5)](),Window_StatusBase[_0x166619(0x8f2)][_0x166619(0x407)][_0x166619(0xb59)](this),this[_0x166619(0x7b5)]();},Window_BattleStatus['prototype'][_0x44efce(0x70d)]=function(){const _0x2486c0=_0x44efce;this[_0x2486c0(0x529)]=new Sprite(),this[_0x2486c0(0x529)][_0x2486c0(0x341)]=[new PIXI[(_0x2486c0(0x341))]['AlphaFilter']()],this[_0x2486c0(0x529)]['filterArea']=new Rectangle(),this[_0x2486c0(0x529)][_0x2486c0(0x404)](this[_0x2486c0(0x582)],this[_0x2486c0(0x582)]),this[_0x2486c0(0x317)](this[_0x2486c0(0x529)]);},Window_BattleStatus[_0x44efce(0x8f2)][_0x44efce(0x2d5)]=function(){const _0x53913e=_0x44efce;this[_0x53913e(0xb27)]=new Sprite(),this[_0x53913e(0x317)](this['_effectsContainer']);},Window_BattleStatus[_0x44efce(0x8f2)][_0x44efce(0x699)]=function(){const _0x5dd2ce=_0x44efce;this['_effectsContainer']&&this[_0x5dd2ce(0x317)](this[_0x5dd2ce(0xb27)]);},Window_BattleStatus[_0x44efce(0x8f2)][_0x44efce(0x7b5)]=function(){const _0x4c136d=_0x44efce;this[_0x4c136d(0x5b7)]=new Sprite(),this[_0x4c136d(0x317)](this[_0x4c136d(0x5b7)]);},Window_BattleStatus[_0x44efce(0x8f2)][_0x44efce(0x6d8)]=function(){const _0x26917c=_0x44efce;this['_cursorSprite']=new Sprite();for(let _0x270a06=0x0;_0x270a06<0x9;_0x270a06++){this['_cursorSprite'][_0x26917c(0x317)](new Sprite());}this['_cursorArea'][_0x26917c(0x317)](this['_cursorSprite']);},Window_BattleStatus['prototype'][_0x44efce(0x12b)]=function(){const _0x5e1a78=_0x44efce;Window_StatusBase[_0x5e1a78(0x8f2)][_0x5e1a78(0x12b)]['call'](this),this[_0x5e1a78(0x4c8)]();},Window_BattleStatus[_0x44efce(0x8f2)]['_updateCursorArea']=function(){const _0x1c0195=_0x44efce,_0x428dd5=this['_padding'];this[_0x1c0195(0x529)][_0x1c0195(0x404)](_0x428dd5,_0x428dd5),this[_0x1c0195(0x529)]['x']=_0x428dd5-this['origin']['x'],this[_0x1c0195(0x529)]['y']=_0x428dd5-this[_0x1c0195(0x943)]['y'];if(this['innerWidth']>0x0&&this[_0x1c0195(0x7e8)]>0x0)this[_0x1c0195(0x529)][_0x1c0195(0x922)]=this[_0x1c0195(0x681)]();else{if('kotRL'===_0x1c0195(0x22a))return![];else this[_0x1c0195(0x529)]['visible']=![];}},Window_BattleStatus[_0x44efce(0x8f2)][_0x44efce(0x873)]=function(){const _0x4d7128=_0x44efce;Window_StatusBase[_0x4d7128(0x8f2)]['_updateFilterArea'][_0x4d7128(0xb59)](this),this[_0x4d7128(0x29d)]();},Window_BattleStatus['prototype']['_updateCursorFilterArea']=function(){const _0x47551d=_0x44efce,_0xd8c94c=this[_0x47551d(0x529)]['worldTransform'][_0x47551d(0x6a9)](new Point(0x0,0x0)),_0x247a73=this['_cursorArea']['filterArea'];_0x247a73['x']=_0xd8c94c['x']+this[_0x47551d(0x943)]['x'],_0x247a73['y']=_0xd8c94c['y']+this[_0x47551d(0x943)]['y'],_0x247a73[_0x47551d(0x542)]=this[_0x47551d(0x5f4)],_0x247a73[_0x47551d(0x737)]=this[_0x47551d(0x7e8)];},Window_BattleStatus[_0x44efce(0x8f2)]['refreshActorPortrait']=function(_0x163e05){const _0x41589a=_0x44efce;if(this[_0x41589a(0x1e6)]()!==_0x41589a(0x47a))return;this[_0x41589a(0x76f)](_0x163e05[_0x41589a(0x8e4)]());},Window_BattleStatus[_0x44efce(0x8f2)][_0x44efce(0x3ae)]=function(_0x2104f1,_0x4a84f3){const _0x510447=_0x44efce;if(!this[_0x510447(0x5b7)])return;if(!_0x2104f1)return;if(!_0x4a84f3)return;const _0x2ff8e3=this[_0x510447(0x196)](_0x4a84f3[_0x510447(0x8e4)]());_0x2ff8e3['x']+=_0x2ff8e3[_0x510447(0x542)]/0x2+this[_0x510447(0xd7)],_0x2104f1['x']=_0x2ff8e3['x'],_0x2104f1['y']=_0x2ff8e3['y'],this[_0x510447(0x5b7)][_0x510447(0x317)](_0x2104f1);},Window_BattleStatus[_0x44efce(0x8f2)][_0x44efce(0x9e8)]=function(_0x44db69){const _0x30db10=_0x44efce;if(!this[_0x30db10(0x5b7)])return;if(!_0x44db69)return;this[_0x30db10(0x5b7)]['removeChild'](_0x44db69);},Window_BattleStatus[_0x44efce(0x8f2)]['updateBorderStyle']=function(){const _0x2631e0=_0x44efce;if(!this['isBorderStylePortraitShown']())return;if(!this['_borderPortraitSprite'])this[_0x2631e0(0x535)]();this[_0x2631e0(0x434)](),this[_0x2631e0(0x477)]();},Window_BattleStatus[_0x44efce(0x8f2)]['isBorderStylePortraitShown']=function(){const _0x7f05af=_0x44efce;if(this[_0x7f05af(0x669)]!==Window_BattleStatus)return![];if(!SceneManager[_0x7f05af(0xbab)]())return![];return VisuMZ[_0x7f05af(0x6d0)]['Settings'][_0x7f05af(0xaaf)]['ShowPortraitsBorderStyle'];},Window_BattleStatus[_0x44efce(0x8f2)]['createBorderStylePortraitSprite']=function(){const _0x231587=_0x44efce;this[_0x231587(0x8b7)]=new Sprite();const _0x3e4f76=SceneManager['_scene'],_0x27da5d=_0x3e4f76['children'][_0x231587(0x963)](_0x3e4f76[_0x231587(0x773)]);_0x3e4f76[_0x231587(0x5a5)](this[_0x231587(0x8b7)],_0x27da5d),this[_0x231587(0x8b7)]['anchor']['x']=0.5,this['_borderPortraitSprite'][_0x231587(0x20c)]['y']=0x1;const _0x1cb8f8=VisuMZ[_0x231587(0x6d0)][_0x231587(0x444)]['BattleLayout'][_0x231587(0xaf8)];this[_0x231587(0x8b7)][_0x231587(0x718)]['x']=_0x1cb8f8,this['_borderPortraitSprite'][_0x231587(0x718)]['y']=_0x1cb8f8,this['_borderPortraitSprite']['y']=this['y']+this[_0x231587(0x737)],this[_0x231587(0xc5)]=0x0;},Window_BattleStatus['prototype']['prepareBorderActor']=function(){const _0x468034=_0x44efce;this['_borderPortraitSprite'][_0x468034(0x922)]=BattleManager[_0x468034(0x6dc)]();const _0x58d0f9=BattleManager['actor']();if(_0x58d0f9===this[_0x468034(0x8b7)][_0x468034(0x918)])return;this[_0x468034(0x8b7)]['actor']=_0x58d0f9||this['_borderPortraitSprite'][_0x468034(0x918)];if(!_0x58d0f9)return;else{if(_0x58d0f9[_0x468034(0x9e5)]()===''){this['_borderPortraitSprite']['bitmap']=ImageManager[_0x468034(0xbaa)];return;}else{if(_0x468034(0x6e7)===_0x468034(0xbd)){if(_0x34632b[_0x468034(0xbab)]()){const _0x56bb0b=this[_0x468034(0x6dd)]();if(_0x56bb0b)_0x56bb0b[_0x468034(0x32f)](_0x9a3b4f);}}else{const _0x4a3819=ImageManager[_0x468034(0x99a)](_0x58d0f9[_0x468034(0x9e5)]());_0x4a3819[_0x468034(0x4a0)](this['processBorderActor'][_0x468034(0x9f7)](this,_0x4a3819));}}}},Window_BattleStatus[_0x44efce(0x8f2)][_0x44efce(0x242)]=function(_0x195845){const _0x11cdb5=_0x44efce;this[_0x11cdb5(0xc5)]=0x14,this[_0x11cdb5(0x8b7)]['bitmap']=_0x195845;if(SceneManager['_scene'][_0x11cdb5(0xaf0)]())_0x11cdb5(0x36d)===_0x11cdb5(0x2ec)?(this[_0x11cdb5(0xb6c)](),this[_0x11cdb5(0x52c)]=![],_0x2bb455['clearBattleRefreshRequest']()):(this['_borderPortraitSprite']['x']=0x0,this[_0x11cdb5(0x7ff)]=Math[_0x11cdb5(0x3bb)](_0x195845[_0x11cdb5(0x542)]/0x2));else{if('uXgqc'===_0x11cdb5(0xa5c)){const _0x380cb7=_0x5c92d4[_0x11cdb5(0x6d0)][_0x11cdb5(0x444)][_0x11cdb5(0x6e4)],_0x12dbdf=_0x1f3b38['result']();if(_0x380cb7[_0x11cdb5(0xc4)])this[_0x11cdb5(0x93c)](_0x480ea6,_0x12dbdf['addedBuffs'],_0x45c6f4['buffAdd']);if(_0x380cb7[_0x11cdb5(0x94a)])this[_0x11cdb5(0x93c)](_0x260a6a,_0x12dbdf[_0x11cdb5(0x41e)],_0x5304fd[_0x11cdb5(0xb3a)]);if(_0x380cb7[_0x11cdb5(0x3ec)])this[_0x11cdb5(0x93c)](_0x32a6ce,_0x12dbdf[_0x11cdb5(0x83e)],_0x5d27b0[_0x11cdb5(0xbc3)]);}else this['_borderPortraitSprite']['x']=this['width'],this['_borderPortraitTargetX']=this[_0x11cdb5(0x542)]*0x3/0x4;}this['_borderPortraitSprite']['opacity']=0x0,this[_0x11cdb5(0x8b7)]['y']=this['y']+this['height'];const _0x11ac95=BattleManager[_0x11cdb5(0x918)]();_0x11ac95&&(this['_borderPortraitTargetX']+=_0x11ac95[_0x11cdb5(0x97b)](),this[_0x11cdb5(0x8b7)]['y']+=_0x11ac95['getBattlePortraitOffsetY']());},Window_BattleStatus[_0x44efce(0x8f2)][_0x44efce(0x477)]=function(){const _0x4eee55=_0x44efce;if(this['_borderPortraitDuration']>0x0){const _0x429915=this[_0x4eee55(0xc5)],_0x3b5a12=this[_0x4eee55(0x8b7)];_0x3b5a12['x']=(_0x3b5a12['x']*(_0x429915-0x1)+this[_0x4eee55(0x7ff)])/_0x429915,_0x3b5a12[_0x4eee55(0x8fe)]=(_0x3b5a12[_0x4eee55(0x8fe)]*(_0x429915-0x1)+0xff)/_0x429915,this[_0x4eee55(0xc5)]--;}},Window_BattleStatus['prototype'][_0x44efce(0x128)]=function(){const _0x4a254f=_0x44efce;return;this[_0x4a254f(0xb27)]&&(this[_0x4a254f(0xb27)]['x']=this['x'],this[_0x4a254f(0xb27)]['y']=this['y']);if(this['_damageContainer']){if(_0x4a254f(0x3fd)!==_0x4a254f(0x3fd)){_0x3913f6(_0x4a254f(0xb74)),_0x31dc5f[_0x4a254f(0xb2e)]();return;}else this[_0x4a254f(0x5b7)]['x']=this['x'],this['_damageContainer']['y']=this['y'];}},Window_BattleStatus[_0x44efce(0x8f2)]['createAttachmentSprites']=function(){const _0x3d778e=_0x44efce,_0xe82f25=VisuMZ['BattleCore'][_0x3d778e(0x444)]['BattleLayout'];if(_0xe82f25['StatusWindowAttachmentBack']){if(_0x3d778e(0x300)!==_0x3d778e(0x80f)){const _0x4ed9d2=new Sprite();_0x4ed9d2[_0x3d778e(0x3e8)]=ImageManager[_0x3d778e(0x25a)](_0xe82f25[_0x3d778e(0xa46)]),_0x4ed9d2['x']=_0xe82f25[_0x3d778e(0xb52)]||0x0,_0x4ed9d2['y']=_0xe82f25['StatusWindowAttachmentBackOffsetY']||0x0,this[_0x3d778e(0x6b0)](_0x4ed9d2),this[_0x3d778e(0x57e)]=_0x4ed9d2;}else{if(_0x500163[_0x3d778e(0x421)]()){if(this['turnCount']()<=0x0)return;}else{if(_0x1af4e2[_0x3d778e(0x471)]()<=0x0)return;}}}if(_0xe82f25[_0x3d778e(0x372)]){const _0x630b8d=new Sprite();_0x630b8d[_0x3d778e(0x3e8)]=ImageManager[_0x3d778e(0x25a)](_0xe82f25[_0x3d778e(0x372)]),_0x630b8d['x']=_0xe82f25[_0x3d778e(0x52b)]||0x0,_0x630b8d['y']=_0xe82f25['StatusWindowAttachmentFrontOffsetY']||0x0,this['addChild'](_0x630b8d),this['_frontAttachmentSprite']=_0x630b8d;}},Window_BattleStatus[_0x44efce(0x8f2)][_0x44efce(0x276)]=function(){const _0xee37=_0x44efce;this[_0xee37(0xa3)]&&this[_0xee37(0x317)](this['_frontAttachmentSprite']),this[_0xee37(0x57e)]&&this[_0xee37(0x6b0)](this[_0xee37(0x57e)]);},Window_BattleActor['prototype'][_0x44efce(0x3cd)]=function(){const _0x44d4f7=_0x44efce;return Window_BattleStatus[_0x44d4f7(0x8f2)][_0x44d4f7(0x3cd)][_0x44d4f7(0xb59)](this)&&this[_0x44d4f7(0x6f6)]();},Window_BattleActor[_0x44efce(0x8f2)][_0x44efce(0x6f6)]=function(){const _0x1243e7=_0x44efce,_0x506fa3=BattleManager['inputtingAction'](),_0x2d97e5=this['actor'](this[_0x1243e7(0x8e4)]());if(!_0x506fa3)return!![];if(!_0x506fa3[_0x1243e7(0x987)]())return!![];const _0xaee336=_0x506fa3[_0x1243e7(0x987)]()[_0x1243e7(0x77d)];if(_0xaee336[_0x1243e7(0xab6)](/<CANNOT TARGET (?:USER|SELF)>/i)){if('QgDEm'==='BUcEC')_0xa873f6[_0x1243e7(0x6d0)]['Window_BattleEnemy_show']['call'](this),this['y']=_0x5b79c0[_0x1243e7(0x737)]*0xa;else{if(_0x2d97e5===BattleManager[_0x1243e7(0x918)]())return![];}}return!![];},VisuMZ[_0x44efce(0x6d0)]['Window_BattleEnemy_initialize']=Window_BattleEnemy[_0x44efce(0x8f2)]['initialize'],Window_BattleEnemy[_0x44efce(0x8f2)]['initialize']=function(_0x2455d0){const _0x17581a=_0x44efce;this[_0x17581a(0x520)]=null,VisuMZ[_0x17581a(0x6d0)]['Window_BattleEnemy_initialize'][_0x17581a(0xb59)](this,_0x2455d0);},Window_BattleEnemy['prototype'][_0x44efce(0xb84)]=function(){const _0x1eed5e=_0x44efce;return this[_0x1eed5e(0x52d)]();},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x7a7)]=Window_BattleEnemy['prototype']['show'],Window_BattleEnemy[_0x44efce(0x8f2)][_0x44efce(0x57c)]=function(){const _0x7ac63d=_0x44efce;VisuMZ[_0x7ac63d(0x6d0)][_0x7ac63d(0x7a7)][_0x7ac63d(0xb59)](this),this['y']=Graphics[_0x7ac63d(0x737)]*0xa;},Window_BattleEnemy[_0x44efce(0x8f2)]['validTargets']=function(){const _0x1264ad=_0x44efce;return $gameTroop[_0x1264ad(0xb09)]()[_0x1264ad(0x3f2)](0x0);},Window_BattleEnemy['prototype'][_0x44efce(0x290)]=function(){const _0x4f191f=_0x44efce;this[_0x4f191f(0x61d)]=this[_0x4f191f(0x7b3)](),this[_0x4f191f(0xb24)](),Window_Selectable['prototype'][_0x4f191f(0x290)]['call'](this);},Window_BattleEnemy[_0x44efce(0x8f2)][_0x44efce(0xb24)]=function(){const _0x42c8b9=_0x44efce;this['_enemies']['sort']((_0x5b4560,_0x221e56)=>{const _0x39e957=_0x3d4e;if('siFME'===_0x39e957(0x4fd)){if(_0x5b4560['battler']()[_0x39e957(0x5f2)]===_0x221e56[_0x39e957(0x6dd)]()[_0x39e957(0x5f2)]){if('IrMmV'==='IrMmV')return _0x5b4560[_0x39e957(0x6dd)]()[_0x39e957(0xbb8)]-_0x221e56[_0x39e957(0x6dd)]()[_0x39e957(0xbb8)];else{const _0x4d1940=_0x1f83a9[_0x39e957(0x8de)]()?_0x595987['message1']:_0x154644['message2'];_0x4d1940&&_0x1d75d7[_0x39e957(0x6d0)][_0x39e957(0x444)][_0x39e957(0x6e4)]['ShowAddedState']&&(this['push']('fnordAddedStates'),this[_0x39e957(0xb70)](_0x39e957(0xa91)),this['push'](_0x39e957(0x635)),this[_0x39e957(0xb70)](_0x39e957(0x6fa),_0x4d1940[_0x39e957(0x437)](_0x32ea0f['name']())),this[_0x39e957(0xb70)](_0x39e957(0xaf1))),_0x12bc61['id']===_0x44d03c[_0x39e957(0x8a4)]()&&this['push'](_0x39e957(0x18b),_0x54bfa3);}}else return _0x5b4560[_0x39e957(0x6dd)]()['_baseX']-_0x221e56[_0x39e957(0x6dd)]()[_0x39e957(0x5f2)];}else _0x2a6b1d=_0x4bbfbf(_0x4bb14f['$1']),_0x5f2340--;}),SceneManager[_0x42c8b9(0x448)]()&&(_0x42c8b9(0x446)!==_0x42c8b9(0x4a5)?this[_0x42c8b9(0x61d)]['reverse']():(_0x52868f['BattleCore'][_0x42c8b9(0x2ba)]['call'](this),this[_0x42c8b9(0x68f)]=this[_0x42c8b9(0x68f)][_0x42c8b9(0xc9)](_0x33d707=>_0x33d707&&_0x33d707[_0x42c8b9(0x59c)]())));},Window_BattleEnemy[_0x44efce(0x8f2)][_0x44efce(0x6ad)]=function(){const _0x4b90b6=_0x44efce,_0x9eb14b=VisuMZ[_0x4b90b6(0x6d0)][_0x4b90b6(0x444)]['Enemy'];if(_0x9eb14b[_0x4b90b6(0xfb)]){if(_0x4b90b6(0xaa0)!=='rjowz')this['autoSelectLastSelected']();else{if(!_0x2e0968[_0x4b90b6(0x6d0)][_0x4b90b6(0x444)][_0x4b90b6(0xaaf)][_0x4b90b6(0x4c2)])return;const _0x498869=this[_0x4b90b6(0x918)](_0x3c3c75),_0x13f62c=this[_0x4b90b6(0x196)](_0x283724);_0x13f62c[_0x4b90b6(0x542)]=_0x1e4bb4[_0x4b90b6(0x42e)],_0x13f62c['height']-=0x2,this[_0x4b90b6(0x871)](_0x498869,_0x13f62c['x']+0x1,_0x13f62c['y']+0x1,_0x13f62c[_0x4b90b6(0x542)],_0x13f62c[_0x4b90b6(0x737)]);}}else this['autoSelectPriority']();},Window_BattleEnemy[_0x44efce(0x8f2)][_0x44efce(0x33a)]=function(){const _0x7d230=_0x44efce;if(this[_0x7d230(0x520)]&&this[_0x7d230(0x61d)][_0x7d230(0x89e)](this['_lastEnemy'])){const _0x18d682=this['_enemies'][_0x7d230(0x963)](this[_0x7d230(0x520)]);this[_0x7d230(0x3b8)](_0x18d682);}else _0x7d230(0xba)!=='VEnOh'?this[_0x7d230(0x310)]():this[_0x7d230(0x2f8)]();},Window_BattleEnemy[_0x44efce(0x8f2)]['autoSelectPriority']=function(){const _0x2e3bc1=_0x44efce,_0x2ca5cd=VisuMZ[_0x2e3bc1(0x6d0)][_0x2e3bc1(0x444)][_0x2e3bc1(0x71b)];let _0xced245=![];$gameSystem[_0x2e3bc1(0x8c0)]()?_0x2e3bc1(0xa9a)!=='CTJrk'?_0x2db56e=(_0x348f96+_0x56284b)/0x2:_0xced245=_0x2ca5cd[_0x2e3bc1(0x17d)]:_0xced245=_0x2ca5cd['FrontViewSelect'],this[_0x2e3bc1(0x3b8)](_0xced245?this[_0x2e3bc1(0x52d)]()-0x1:0x0);},Window_BattleEnemy[_0x44efce(0x8f2)][_0x44efce(0x406)]=function(){const _0x14d98a=_0x44efce;Window_Selectable['prototype'][_0x14d98a(0x406)][_0x14d98a(0xb59)](this),this[_0x14d98a(0x520)]=this[_0x14d98a(0xb36)]();},Window_BattleItem['prototype'][_0x44efce(0x89e)]=function(_0x1384a6){const _0xc7a65a=_0x44efce;if(!_0x1384a6)return![];return _0x1384a6[_0xc7a65a(0x90d)]===0x0||_0x1384a6[_0xc7a65a(0x90d)]===0x1;};function Window_AutoBattleCancel(){const _0x121be7=_0x44efce;this[_0x121be7(0x64a)](...arguments);}Window_AutoBattleCancel[_0x44efce(0x8f2)]=Object[_0x44efce(0x166)](Window_Base[_0x44efce(0x8f2)]),Window_AutoBattleCancel['prototype']['constructor']=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x44efce(0x8f2)][_0x44efce(0x64a)]=function(_0x54e43d){const _0x589833=_0x44efce;Window_Base[_0x589833(0x8f2)]['initialize'][_0x589833(0xb59)](this,_0x54e43d),this[_0x589833(0xb01)](this[_0x589833(0xaeb)]()),this[_0x589833(0x290)]();},Window_AutoBattleCancel[_0x44efce(0x8f2)][_0x44efce(0xaeb)]=function(){const _0x2ef921=_0x44efce;return VisuMZ[_0x2ef921(0x6d0)][_0x2ef921(0x444)][_0x2ef921(0xa9f)][_0x2ef921(0x373)];},Window_AutoBattleCancel[_0x44efce(0x8f2)][_0x44efce(0x290)]=function(){const _0xacf24e=_0x44efce;this[_0xacf24e(0xa1f)][_0xacf24e(0xa09)]();const _0x70b001=VisuMZ['BattleCore'][_0xacf24e(0x444)][_0xacf24e(0xa9f)]['AutoBattleMsg'],_0x22f5d6=_0x70b001[_0xacf24e(0x437)](this['okButtonText'](),this['cancelButtonText']()),_0x16bf44=this[_0xacf24e(0x409)](_0x22f5d6)[_0xacf24e(0x542)],_0x4e3202=Math[_0xacf24e(0xa3a)]((this['innerWidth']-_0x16bf44)/0x2);this['drawTextEx'](_0x22f5d6,_0x4e3202,0x0,_0x16bf44);},Window_AutoBattleCancel[_0x44efce(0x8f2)]['okButtonText']=function(){const _0x38c105=_0x44efce;if(Imported[_0x38c105(0x1bc)]){if(_0x38c105(0xc6)===_0x38c105(0x3a8)){if(!_0x287400)return;if(!this[_0x38c105(0x183)](_0x225da5))return;const _0x4d450f=this[_0x38c105(0x7f3)](),_0x25e2f6=_0x1544a6[_0x38c105(0xd3)](_0x29091c),_0x48ae50=_0x10ccb5['battleCommandIcon'](_0x451d0a),_0xf299bd=_0x4d450f===_0x38c105(0x453)?_0x25e2f6:_0x38c105(0x7a6)[_0x38c105(0x437)](_0x48ae50,_0x25e2f6),_0x4c5181=this[_0x38c105(0x81e)][_0x38c105(0x3d3)](_0xf4605e);this[_0x38c105(0x929)](_0xf299bd,_0x38c105(0x890),_0x4c5181,_0x1491ca['id']);}else return TextManager[_0x38c105(0x42a)]('ok');}else return VisuMZ[_0x38c105(0x6d0)][_0x38c105(0x444)][_0x38c105(0xa9f)][_0x38c105(0xa1d)];},Window_AutoBattleCancel[_0x44efce(0x8f2)][_0x44efce(0x43f)]=function(){const _0x333130=_0x44efce;if(Imported[_0x333130(0x1bc)]){if('WVWlO'===_0x333130(0x2af))this[_0x333130(0x745)]('chant');else return TextManager[_0x333130(0x42a)](_0x333130(0x524));}else return VisuMZ[_0x333130(0x6d0)][_0x333130(0x444)][_0x333130(0xa9f)][_0x333130(0xa2f)];},Window_AutoBattleCancel[_0x44efce(0x8f2)]['update']=function(){const _0x5ee8a0=_0x44efce;Window_Base[_0x5ee8a0(0x8f2)]['update'][_0x5ee8a0(0xb59)](this),this[_0x5ee8a0(0x2c4)](),this[_0x5ee8a0(0x72c)]();},Window_AutoBattleCancel[_0x44efce(0x8f2)][_0x44efce(0x2c4)]=function(){const _0x3a99bf=_0x44efce;this[_0x3a99bf(0x922)]=BattleManager[_0x3a99bf(0x3c1)];},Window_AutoBattleCancel[_0x44efce(0x8f2)]['updateCancel']=function(){const _0x2b4668=_0x44efce;if(!BattleManager[_0x2b4668(0x3c1)])return;(Input[_0x2b4668(0xab)]('ok')||Input[_0x2b4668(0xab)](_0x2b4668(0x524))||TouchInput[_0x2b4668(0x205)]()||TouchInput[_0x2b4668(0x23a)]())&&(SoundManager['playCancel'](),BattleManager['_autoBattle']=![],Input[_0x2b4668(0xa09)](),TouchInput[_0x2b4668(0xa09)]());};function Window_EnemyName(){const _0x1dd8a5=_0x44efce;this[_0x1dd8a5(0x64a)](...arguments);}Window_EnemyName[_0x44efce(0x8f2)]=Object[_0x44efce(0x166)](Window_StatusBase[_0x44efce(0x8f2)]),Window_EnemyName[_0x44efce(0x8f2)][_0x44efce(0x669)]=Window_EnemyName,Window_EnemyName[_0x44efce(0x8f2)][_0x44efce(0x64a)]=function(_0x3b4f55){const _0x31f6db=_0x44efce;this[_0x31f6db(0x248)]=_0x3b4f55,this[_0x31f6db(0x30c)]='';const _0x43a8fd=new Rectangle(0x0,0x0,Graphics[_0x31f6db(0x613)],this['lineHeight']()*0x4);Window_StatusBase[_0x31f6db(0x8f2)][_0x31f6db(0x64a)]['call'](this,_0x43a8fd),this['setBackgroundType'](0x2),this['contentsOpacity']=0x0;},Window_EnemyName['prototype']['updatePadding']=function(){const _0x25336f=_0x44efce;this[_0x25336f(0xd7)]=0x0;},Window_EnemyName[_0x44efce(0x8f2)][_0x44efce(0xb36)]=function(){const _0x4d71f1=_0x44efce;return $gameTroop[_0x4d71f1(0x19f)]()[this[_0x4d71f1(0x248)]];},Window_EnemyName['prototype'][_0x44efce(0x9da)]=function(){const _0x5e7563=_0x44efce;Window_StatusBase[_0x5e7563(0x8f2)]['update']['call'](this),this['enemy']()&&this[_0x5e7563(0xb36)]()[_0x5e7563(0x5d4)]()!==this['_text']&&(this[_0x5e7563(0x30c)]=this[_0x5e7563(0xb36)]()['name'](),this[_0x5e7563(0x290)]()),this['updateOpacity'](),this[_0x5e7563(0xa27)]();},Window_EnemyName['prototype'][_0x44efce(0x798)]=function(){const _0x3087b4=_0x44efce;if(!this[_0x3087b4(0xb36)]()){if('HGegt'==='HGegt'){if(this[_0x3087b4(0x4cd)]>0x0)this['contentsOpacity']-=0x10;}else{const _0x28875c=_0xf93452[_0x3087b4(0x6d0)][_0x3087b4(0x444)][_0x3087b4(0xb63)];if(_0x28875c&&_0x28875c[_0x3087b4(0x8b4)])return _0x28875c[_0x3087b4(0x8b4)][_0x3087b4(0xb59)](this);this['width']=_0x1a4d19['width'],this['height']=_0xf5dd0f[_0x3087b4(0x737)];const _0x556c7f=0x1;this[_0x3087b4(0x718)]['x']=_0x556c7f,this[_0x3087b4(0x718)]['y']=_0x556c7f,this['x']=0x0,this['y']=0x0;}}else{if(this['enemy']()[_0x3087b4(0x578)]()){if(this[_0x3087b4(0x4cd)]>0x0)this[_0x3087b4(0x4cd)]-=0x10;}else{if(SceneManager['_scene']['_enemyWindow']&&SceneManager[_0x3087b4(0x45b)][_0x3087b4(0xa99)][_0x3087b4(0x1e1)]&&SceneManager[_0x3087b4(0x45b)]['_enemyWindow'][_0x3087b4(0x61d)]['includes'](this[_0x3087b4(0xb36)]())){if(_0x3087b4(0xbc6)===_0x3087b4(0x64b))return _0x13ef1b[_0x3087b4(0x6d0)][_0x3087b4(0x444)][_0x3087b4(0x44f)]['SmoothImage'];else{if(this['contentsOpacity']<0xff)this['contentsOpacity']+=0x10;}}else this[_0x3087b4(0x4cd)]>0x0&&(_0x3087b4(0x35e)===_0x3087b4(0x35e)?this['contentsOpacity']-=0x10:_0x4d84b8[_0x3087b4(0x980)]());}}},Window_EnemyName[_0x44efce(0x8f2)][_0x44efce(0xa27)]=function(){const _0x4b7eb0=_0x44efce;if(!this[_0x4b7eb0(0xb36)]())return;SceneManager[_0x4b7eb0(0x448)]()?this['x']=Graphics[_0x4b7eb0(0x613)]-this[_0x4b7eb0(0xb36)]()[_0x4b7eb0(0x6dd)]()[_0x4b7eb0(0x5f2)]:this['x']=this['enemy']()[_0x4b7eb0(0x6dd)]()[_0x4b7eb0(0x5f2)];this['x']-=Math[_0x4b7eb0(0x18c)](this['width']/0x2),this['y']=this[_0x4b7eb0(0xb36)]()[_0x4b7eb0(0x6dd)]()[_0x4b7eb0(0xbb8)]-Math['round'](this[_0x4b7eb0(0x41b)]()*1.5);const _0x1cefb5=VisuMZ[_0x4b7eb0(0x6d0)]['Settings'][_0x4b7eb0(0x71b)];this['x']+=_0x1cefb5[_0x4b7eb0(0x9e0)]||0x0,this['y']+=_0x1cefb5[_0x4b7eb0(0xb19)]||0x0;},Window_EnemyName['prototype']['resetFontSettings']=function(){const _0x45a1d5=_0x44efce;Window_Base[_0x45a1d5(0x8f2)][_0x45a1d5(0x309)]['call'](this),this[_0x45a1d5(0xa1f)][_0x45a1d5(0x90e)]=VisuMZ[_0x45a1d5(0x6d0)]['Settings']['Enemy']['NameFontSize'];},Window_EnemyName[_0x44efce(0x8f2)]['refresh']=function(){const _0x32113b=_0x44efce;Window_StatusBase[_0x32113b(0x8f2)][_0x32113b(0x290)][_0x32113b(0xb59)](this),this[_0x32113b(0xa1f)][_0x32113b(0xa09)]();if(!this[_0x32113b(0xb36)]())return;this['drawEnemyName']();},Window_EnemyName[_0x44efce(0x8f2)][_0x44efce(0x710)]=function(){const _0x2b84f2=_0x44efce;this[_0x2b84f2(0x30c)]=this['enemy']()[_0x2b84f2(0x5d4)]();const _0x1a056f=this[_0x2b84f2(0x409)](this[_0x2b84f2(0x30c)])['width'],_0x2524dc=Math[_0x2b84f2(0x18c)]((this[_0x2b84f2(0x5f4)]-_0x1a056f)/0x2);this['drawTextEx'](this['_text'],_0x2524dc,0x0,_0x1a056f+0x8);},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x6d4)]=function(){const _0x1ae3af=_0x44efce;return VisuMZ[_0x1ae3af(0x6d0)][_0x1ae3af(0x444)][_0x1ae3af(0x6e4)][_0x1ae3af(0x8d4)];},Window_BattleLog['prototype'][_0x44efce(0xb25)]=function(){const _0x3c2db2=_0x44efce;return VisuMZ['BattleCore']['Settings'][_0x3c2db2(0x6e4)][_0x3c2db2(0x8ad)];},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x3af)]=function(){const _0x2bde7e=_0x44efce;return VisuMZ['BattleCore'][_0x2bde7e(0x444)][_0x2bde7e(0x6e4)][_0x2bde7e(0x925)];},Window_BattleLog[_0x44efce(0x8f2)]['isFastForward']=function(){return![];},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x9d6)]=function(_0x10afe0,_0x123e33){const _0x2bfdcf=_0x44efce;this[_0x2bfdcf(0xac5)](_0x2bfdcf(0x3a6)),BattleManager[_0x2bfdcf(0x6f2)](_0x10afe0,_0x123e33),this[_0x2bfdcf(0x52f)]();},Window_BattleLog['prototype'][_0x44efce(0x3a6)]=function(){const _0x59d3b6=_0x44efce;this[_0x59d3b6(0x52f)]();},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0xb70)]=function(_0x44a3ad){const _0x57086a=_0x44efce,_0x264b19=Array[_0x57086a(0x8f2)]['slice'][_0x57086a(0xb59)](arguments,0x1),_0x149355={'name':_0x44a3ad,'params':_0x264b19},_0x554b95=this[_0x57086a(0x772)][_0x57086a(0xba3)](_0x1c4e6f=>_0x1c4e6f[_0x57086a(0x5d4)])[_0x57086a(0x963)](_0x57086a(0x3a6));if(_0x554b95>=0x0)this[_0x57086a(0x772)][_0x57086a(0x81b)](_0x554b95,0x0,_0x149355);else{if('Nhclm'===_0x57086a(0x423))this[_0x57086a(0x772)][_0x57086a(0xb70)](_0x149355);else{const _0x4257c2=_0x3a4e45[_0x57086a(0x45b)]['partyCommandWindowRectBorderStyle']();this[_0x57086a(0x404)](_0x4257c2['x'],_0x4257c2['y'],_0x4257c2[_0x57086a(0x542)],_0x4257c2[_0x57086a(0x737)]),this['createContents'](),this[_0x57086a(0xb01)](0x0);}}},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0xac5)]=function(_0x45bc09){const _0x55c0e7=_0x44efce,_0x18ebe5=Array[_0x55c0e7(0x8f2)][_0x55c0e7(0x3f2)][_0x55c0e7(0xb59)](arguments,0x1);this[_0x55c0e7(0x772)][_0x55c0e7(0xac5)]({'name':_0x45bc09,'params':_0x18ebe5});},Window_BattleLog['prototype'][_0x44efce(0xb35)]=function(){const _0x59947a=_0x44efce;if(!$gameTemp['isPlaytest']())return;console[_0x59947a(0x64c)](this[_0x59947a(0x772)][_0x59947a(0xba3)](_0x55a1e7=>_0x55a1e7['name'])[_0x59947a(0x49c)]('\x0a'));},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0xa8f)]=Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x290)],Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x290)]=function(){this['_requestRefresh']=!![];},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0xba2)]=Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x9da)],Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x9da)]=function(){const _0x15de0e=_0x44efce;VisuMZ['BattleCore'][_0x15de0e(0xba2)][_0x15de0e(0xb59)](this);if(this[_0x15de0e(0x52c)])this[_0x15de0e(0x67a)]();},Window_BattleLog[_0x44efce(0x8f2)]['processRefresh']=function(){const _0x13a320=_0x44efce;this['_requestRefresh']=![],VisuMZ[_0x13a320(0x6d0)]['Window_BattleLog_refresh']['call'](this);},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x301)]=function(_0x39b659){const _0x3b686a=_0x44efce;let _0x43eb0d=VisuMZ[_0x3b686a(0x6d0)][_0x3b686a(0x444)][_0x3b686a(0x6e4)][_0x3b686a(0xafc)]['toLowerCase']()[_0x3b686a(0xaef)](),_0xf9b6b9=this[_0x3b686a(0x330)][_0x39b659];if(_0xf9b6b9[_0x3b686a(0xab6)](/<LEFT>/i))_0x3b686a(0x6ab)===_0x3b686a(0x6ab)?_0x43eb0d='left':_0x3d0557['clearActiveWeaponSlot']();else{if(_0xf9b6b9[_0x3b686a(0xab6)](/<CENTER>/i)){if(_0x3b686a(0x967)!=='EPmmi')_0x43eb0d=_0x3b686a(0x281);else{this[_0x3b686a(0xb70)](_0x3b686a(0x625),_0x2d274f,_0x5d06a0);if(!_0x3ceac9[_0x3b686a(0x6d0)]['Settings'][_0x3b686a(0x6e4)]['ShowSubstitute'])return;const _0x4fd86c=_0x1071cf[_0x3b686a(0x5d4)](),_0xebe526=_0x4b27c7[_0x3b686a(0x5c2)][_0x3b686a(0x437)](_0x4fd86c,_0x3bd791['name']());this[_0x3b686a(0xb70)]('addText',_0xebe526);}}else _0xf9b6b9['match'](/<RIGHT>/i)&&(_0x43eb0d=_0x3b686a(0x4a7));}_0xf9b6b9=_0xf9b6b9[_0x3b686a(0x3f6)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0xf9b6b9=_0xf9b6b9[_0x3b686a(0x3f6)](/\\I\[0\]/gi,'');const _0x27688d=this[_0x3b686a(0xa7e)](_0x39b659);this['contents'][_0x3b686a(0x38b)](_0x27688d['x'],_0x27688d['y'],_0x27688d['width'],_0x27688d['height']);const _0x28a2d1=this[_0x3b686a(0x409)](_0xf9b6b9)['width'];let _0x1f7f90=_0x27688d['x'];if(_0x43eb0d===_0x3b686a(0x281))_0x1f7f90+=(_0x27688d[_0x3b686a(0x542)]-_0x28a2d1)/0x2;else _0x43eb0d==='right'&&(_0x1f7f90+=_0x27688d['width']-_0x28a2d1);this[_0x3b686a(0x4c4)](_0xf9b6b9,_0x1f7f90,_0x27688d['y'],_0x28a2d1+0x8);},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x6fa)]=function(_0x21a60b){const _0xe5ddce=_0x44efce;this[_0xe5ddce(0x330)][_0xe5ddce(0xb70)](_0x21a60b),this[_0xe5ddce(0x290)](),this[_0xe5ddce(0x52f)]();},Window_BattleLog['prototype']['updateWaitMode']=function(){const _0x258e27=_0x44efce;let _0x5181f1=![];switch(this['_waitMode']){case _0x258e27(0x2de):_0x5181f1=this['_spriteset'][_0x258e27(0x9ef)]();break;case _0x258e27(0x6c7):_0x5181f1=this[_0x258e27(0x948)][_0x258e27(0x225)]();break;case _0x258e27(0x307):_0x5181f1=this['_spriteset'][_0x258e27(0xfd)]();break;case'float':_0x5181f1=this['_spriteset'][_0x258e27(0x6b4)]();break;case _0x258e27(0xafd):_0x5181f1=this['_spriteset'][_0x258e27(0x788)]();break;case _0x258e27(0x8fe):_0x5181f1=this[_0x258e27(0x948)][_0x258e27(0x9d7)]();break;}return!_0x5181f1&&(_0x258e27(0x3b7)===_0x258e27(0x848)?(_0x28ece5[_0x258e27(0xae4)]['x']=(_0x505939['skew']['x']*(_0x2d4f5e-0x1)+this[_0x258e27(0x5a8)])/_0x11657a,_0x53c006[_0x258e27(0xae4)]['y']=(_0x46d3c4[_0x258e27(0xae4)]['y']*(_0x18ef41-0x1)+this['_targetSkewY'])/_0x1ae398):this['_waitMode']=''),_0x5181f1;},Window_BattleLog['prototype']['waitForAnimation']=function(){const _0x1b7c01=_0x44efce;this[_0x1b7c01(0x227)](_0x1b7c01(0x307));},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x6a6)]=function(){this['setWaitMode']('float');},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x35f)]=function(){const _0x4eb0e=_0x44efce;this[_0x4eb0e(0x227)](_0x4eb0e(0xafd));},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x751)]=function(){const _0xb4bb8f=_0x44efce;this['setWaitMode'](_0xb4bb8f(0x8fe));},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x1a7)]=function(){const _0x4332cf=_0x44efce,_0xff1d2a=VisuMZ['BattleCore'][_0x4332cf(0x444)]['BattleLog'];if(!_0xff1d2a[_0x4332cf(0x6c6)])return;this['push'](_0x4332cf(0x6fa),_0xff1d2a[_0x4332cf(0x69f)][_0x4332cf(0x437)]($gameTroop['turnCount']())),this[_0x4332cf(0xb70)]('waitCount',_0xff1d2a[_0x4332cf(0x1b2)]),this[_0x4332cf(0xb70)]('clear');},Window_BattleLog['prototype'][_0x44efce(0x77a)]=function(_0x482a9d,_0x3357b3,_0x771078){const _0x32e3ab=_0x44efce;if(this[_0x32e3ab(0x4e8)](_0x3357b3)){if(_0x32e3ab(0x8e2)===_0x32e3ab(0x7b7))return _0x377da7['VisuMZ_0_CoreEngine']?_0x4cbfc1[_0x32e3ab(0x42a)]('cancel'):_0x293bf0[_0x32e3ab(0x6d0)][_0x32e3ab(0x444)][_0x32e3ab(0xa9f)][_0x32e3ab(0xa2f)];else BattleManager['prepareCustomActionSequence']();}else this['usePremadeActionSequence'](_0x482a9d,_0x3357b3,_0x771078);},Window_BattleLog['prototype'][_0x44efce(0x4e8)]=function(_0x61908f){const _0x1f41ca=_0x44efce;if(!SceneManager['isSceneBattle']())return![];if(!_0x61908f)return![];if(!_0x61908f[_0x1f41ca(0x987)]())return![];if(_0x61908f[_0x1f41ca(0x987)]()[_0x1f41ca(0x77d)][_0x1f41ca(0xab6)](/<CUSTOM ACTION SEQUENCE>/i)){if('RLjzA'!==_0x1f41ca(0xa41))_0x35d148&&_0x5c5157['isActor']()&&_0x5b4c9d[_0x1f41ca(0xadf)](_0x4d5ead),this[_0x1f41ca(0x52f)]();else return!![];}if(DataManager[_0x1f41ca(0x424)](_0x61908f[_0x1f41ca(0x987)]()))return!![];return![];},Window_BattleLog['prototype'][_0x44efce(0x712)]=function(_0x5ecef2,_0x420130,_0xab5fe7){const _0x4c5fa7=_0x44efce,_0x566584=_0x420130[_0x4c5fa7(0x987)]();this['setupActionSet'](_0x5ecef2,_0x420130,_0xab5fe7),this[_0x4c5fa7(0xb2c)](_0x5ecef2,_0x420130,_0xab5fe7),this[_0x4c5fa7(0x830)](_0x5ecef2,_0x420130,_0xab5fe7);},Window_BattleLog['prototype'][_0x44efce(0x1ff)]=function(_0x2cc309,_0x226bbd){const _0x460a1f=_0x44efce,_0x48c6aa=VisuMZ['BattleCore'][_0x460a1f(0x444)]['BattleLog'];_0x48c6aa[_0x460a1f(0xa0b)]&&this[_0x460a1f(0xb70)](_0x460a1f(0x6fa),'<CENTER>%1'[_0x460a1f(0x437)](DataManager['battleDisplayText'](_0x226bbd)));if(DataManager['isSkill'](_0x226bbd)){if(_0x48c6aa[_0x460a1f(0x654)])this[_0x460a1f(0x117)](_0x226bbd[_0x460a1f(0x57f)],_0x2cc309,_0x226bbd);if(_0x48c6aa['ActionSkillMsg2'])this[_0x460a1f(0x117)](_0x226bbd[_0x460a1f(0x131)],_0x2cc309,_0x226bbd);}else{if(_0x460a1f(0x708)!==_0x460a1f(0x708)){const _0x5871c7={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x52b1c6=_0x28cfc5[_0x460a1f(0x570)]['pop']();_0xc10759[_0x460a1f(0x570)][_0x460a1f(0xac5)](_0x5871c7),_0x10e874[_0x460a1f(0x570)][_0x460a1f(0xac5)](_0x52b1c6);}else{if(_0x48c6aa[_0x460a1f(0x90b)])this[_0x460a1f(0x117)](TextManager[_0x460a1f(0x2ab)],_0x2cc309,_0x226bbd);}}},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x714)]=function(_0x3109aa,_0x39a5e6,_0x5034c1){const _0x46dd74=_0x44efce,_0x3593cd=_0x39a5e6['item']();this[_0x46dd74(0x1ff)](_0x3109aa,_0x3593cd),this[_0x46dd74(0xb70)]('applyImmortal',_0x3109aa,_0x5034c1,!![]),this[_0x46dd74(0xb70)](_0x46dd74(0x10c),_0x3109aa,_0x39a5e6),this[_0x46dd74(0xb70)](_0x46dd74(0xa9e)),this[_0x46dd74(0xb70)](_0x46dd74(0x77c),_0x3109aa,_0x39a5e6),this[_0x46dd74(0xb70)]('waitForAnimation');},Window_BattleLog[_0x44efce(0x8f2)]['createEffectActionSet']=function(_0x38dd3d,_0x2f519a,_0x361fa1){const _0xe2868=_0x44efce;if(this[_0xe2868(0xaab)](_0x2f519a))_0xe2868(0x924)===_0xe2868(0xb9c)?(this[_0xe2868(0xea)]=_0x474515,this[_0xe2868(0x827)]=-0x1,this[_0xe2868(0x13d)]=0x0,this[_0xe2868(0x9c1)](),this[_0xe2868(0x44b)]()):this[_0xe2868(0xa36)](_0x38dd3d,_0x2f519a,_0x361fa1);else{if(this[_0xe2868(0x717)](_0x2f519a))this[_0xe2868(0x831)](_0x38dd3d,_0x2f519a,_0x361fa1);else{if(_0x2f519a['isForRandom']())_0xe2868(0x8da)===_0xe2868(0x8da)?this[_0xe2868(0x2b9)](_0x38dd3d,_0x2f519a,_0x361fa1):(this[_0xe2868(0x328)]=this['_targetGrowX'],this['_growY']=this['_targetGrowY']);else{if(_0xe2868(0x82d)===_0xe2868(0x9ff)){if(!this['_battler'])return![];if(this[_0xe2868(0x6cb)]['isActor']())return!![];if(this[_0xe2868(0x6cb)]['isHidden']())return![];if(this[_0xe2868(0x8fe)]<=0x0)return![];const _0x148a87=this[_0xe2868(0x6cb)][_0xe2868(0xb36)]()[_0xe2868(0x77d)];if(_0x148a87[_0xe2868(0xab6)](/<SHOW HP GAUGE>/i))return!![];if(_0x148a87[_0xe2868(0xab6)](/<HIDE HP GAUGE>/i))return![];const _0x2a5416=_0x240872[_0xe2868(0x6d0)][_0xe2868(0x444)]['HpGauge'];if(_0x2a5416['RequiresDefeat']){if(_0x2a5416[_0xe2868(0x6f7)]&&_0x3da551[_0xe2868(0xb7a)]())return!![];if(this[_0xe2868(0x6cb)]['_visualHpGauge_JustDied'])return![];return this[_0xe2868(0x6cb)]['hasBeenDefeatedBefore']();}return!![];}else this[_0xe2868(0x20a)](_0x38dd3d,_0x2f519a,_0x361fa1);}}}},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0xaab)]=function(_0x1e9546){const _0x368e2d=_0x44efce;if(!_0x1e9546['isPhysical']())return![];if(!_0x1e9546[_0x368e2d(0x811)]())return![];if(!_0x1e9546['isForOpponent']())return![];return VisuMZ['BattleCore'][_0x368e2d(0x444)][_0x368e2d(0xa63)][_0x368e2d(0xb93)];},Window_BattleLog[_0x44efce(0x8f2)]['autoMeleeSingleTargetActionSet']=function(_0x81b9c7,_0x5583c3,_0x3c87ad){const _0x4974d3=_0x44efce,_0xb7a009=_0x81b9c7[_0x4974d3(0x691)]()[_0x4974d3(0xa15)]<0x2,_0x483252=0x14,_0x46a543=0x30;_0xb7a009&&(this[_0x4974d3(0xb70)](_0x4974d3(0x149),[_0x81b9c7],_0x46a543,_0x483252),this[_0x4974d3(0xb70)]('performMoveToTargets',_0x81b9c7,_0x3c87ad,'front\x20base',_0x483252,!![],_0x4974d3(0x221),!![]),this[_0x4974d3(0xb70)]('requestMotion',[_0x81b9c7],_0x4974d3(0x252)),this[_0x4974d3(0xb70)]('waitForMovement'));let _0xd2e445=_0x5583c3[_0x4974d3(0x7a3)]()?this[_0x4974d3(0x9b7)](_0x81b9c7):0x1;for(let _0x11cac5=0x0;_0x11cac5<_0xd2e445;_0x11cac5++){_0x4974d3(0x386)!==_0x4974d3(0x386)?(this[_0x4974d3(0x5b7)]['x']=this['x'],this[_0x4974d3(0x5b7)]['y']=this['y']):(_0x5583c3[_0x4974d3(0x7a3)]()&&_0x81b9c7['isActor']()&&(_0x4974d3(0x9f8)==='njEgT'?this[_0x4974d3(0xb70)](_0x4974d3(0x5f0),_0x81b9c7,_0x11cac5):_0x4e5809['BattleCore']['JS'][_0xe6d6cf][_0x4974d3(0xb59)](this,this,this,_0x36147c,0x0)),_0x5583c3[_0x4974d3(0x987)]()[_0x4974d3(0xa49)]<0x0?this[_0x4974d3(0x2b9)](_0x81b9c7,_0x5583c3,_0x3c87ad):this[_0x4974d3(0x20a)](_0x81b9c7,_0x5583c3,_0x3c87ad));}_0x5583c3[_0x4974d3(0x7a3)]()&&_0x81b9c7[_0x4974d3(0x8de)]()&&this['push']('clearActiveWeaponSet',_0x81b9c7);this[_0x4974d3(0xb70)](_0x4974d3(0x5aa),_0x81b9c7,_0x3c87ad,![]);if(_0xb7a009){if(_0x4974d3(0x2a7)==='mlZsZ')this[_0x4974d3(0x61d)][_0x4974d3(0x972)]();else{const _0x38e8af=_0x81b9c7['battler']();this['push'](_0x4974d3(0x149),[_0x81b9c7],_0x46a543,_0x483252),this[_0x4974d3(0xb70)]('performMoveToPoint',_0x81b9c7,_0x38e8af['_homeX'],_0x38e8af[_0x4974d3(0x680)],_0x483252,![],_0x4974d3(0x221)),this[_0x4974d3(0xb70)]('requestMotion',[_0x81b9c7],'evade'),this[_0x4974d3(0xb70)]('waitForMovement'),this[_0x4974d3(0xb70)](_0x4974d3(0x7c8),[_0x81b9c7],'walk');}}},Window_BattleLog[_0x44efce(0x8f2)]['isMeleeMultiTargetAction']=function(_0x157559){const _0x5e020e=_0x44efce;if(!_0x157559[_0x5e020e(0x211)]())return![];if(!_0x157559[_0x5e020e(0x79b)]())return![];if(!_0x157559['isForOpponent']())return![];return VisuMZ[_0x5e020e(0x6d0)][_0x5e020e(0x444)]['ActionSequence']['AutoMeleeAoE'];},Window_BattleLog[_0x44efce(0x8f2)]['autoMeleeMultiTargetActionSet']=function(_0x2426e0,_0x3544a2,_0x22260c){const _0x19d899=_0x44efce,_0x111ad7=_0x2426e0['getAttackMotion']()[_0x19d899(0xa15)]<0x2,_0x5374c4=0x14,_0x32e068=0x30;_0x111ad7&&(this[_0x19d899(0xb70)](_0x19d899(0x149),[_0x2426e0],_0x32e068,_0x5374c4),this[_0x19d899(0xb70)](_0x19d899(0x454),_0x2426e0,_0x22260c,_0x19d899(0x910),_0x5374c4,!![],_0x19d899(0x221),!![]),this[_0x19d899(0xb70)](_0x19d899(0x7c8),[_0x2426e0],'walk'),this[_0x19d899(0xb70)]('waitForMovement'));let _0x102736=_0x3544a2[_0x19d899(0x7a3)]()?this[_0x19d899(0x9b7)](_0x2426e0):0x1;for(let _0x5f4dc5=0x0;_0x5f4dc5<_0x102736;_0x5f4dc5++){if('cPZaR'===_0x19d899(0x2aa))return this[_0x19d899(0x29a)]()&&this[_0x19d899(0x29a)]()[_0x19d899(0x987)]()&&this[_0x19d899(0x29a)]()[_0x19d899(0x80b)]();else _0x3544a2[_0x19d899(0x7a3)]()&&_0x2426e0['isActor']()&&this[_0x19d899(0xb70)]('setActiveWeaponSet',_0x2426e0,_0x5f4dc5),this[_0x19d899(0x20a)](_0x2426e0,_0x3544a2,_0x22260c);}_0x3544a2[_0x19d899(0x7a3)]()&&_0x2426e0[_0x19d899(0x8de)]()&&this[_0x19d899(0xb70)](_0x19d899(0xadd),_0x2426e0);this[_0x19d899(0xb70)](_0x19d899(0x5aa),_0x2426e0,_0x22260c,![]);if(_0x111ad7){const _0x2f288f=_0x2426e0[_0x19d899(0x6dd)]();this[_0x19d899(0xb70)](_0x19d899(0x149),[_0x2426e0],_0x32e068,_0x5374c4),this['push'](_0x19d899(0x130),_0x2426e0,_0x2f288f['_homeX'],_0x2f288f[_0x19d899(0x680)],_0x5374c4,![],_0x19d899(0x221)),this['push'](_0x19d899(0x7c8),[_0x2426e0],_0x19d899(0xaac)),this[_0x19d899(0xb70)](_0x19d899(0xa9e)),this['push'](_0x19d899(0x7c8),[_0x2426e0],_0x19d899(0x252));}},Window_BattleLog[_0x44efce(0x8f2)]['targetActionSet']=function(_0x37995b,_0x3b6c9e,_0x162e1b){const _0x350113=_0x44efce,_0x2bddc3=_0x3b6c9e[_0x350113(0x987)]();for(const _0x595080 of _0x162e1b){if(!_0x595080)continue;this[_0x350113(0xb70)](_0x350113(0x86c),_0x37995b,_0x3b6c9e),this[_0x350113(0xb70)](_0x350113(0xbac),Sprite_Battler[_0x350113(0x1b5)]),this[_0x350113(0xb70)](_0x350113(0x605),_0x37995b,[_0x595080],_0x2bddc3['animationId']),this[_0x350113(0xb70)](_0x350113(0xbac),0x18),this[_0x350113(0xb70)](_0x350113(0x9d6),_0x37995b,_0x595080);}},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x20a)]=function(_0x42cbcc,_0x112382,_0x3307a9){const _0x4af5f0=_0x44efce,_0xf97192=_0x112382[_0x4af5f0(0x987)]();this[_0x4af5f0(0xb70)](_0x4af5f0(0x86c),_0x42cbcc,_0x112382),this[_0x4af5f0(0xb70)](_0x4af5f0(0xbac),Sprite_Battler[_0x4af5f0(0x1b5)]),this[_0x4af5f0(0xb70)](_0x4af5f0(0x605),_0x42cbcc,_0x3307a9[_0x4af5f0(0x792)](),_0xf97192[_0x4af5f0(0xa49)]),this['push'](_0x4af5f0(0x5a9));for(const _0x59b66d of _0x3307a9){if(!_0x59b66d)continue;this[_0x4af5f0(0xb70)](_0x4af5f0(0x9d6),_0x42cbcc,_0x59b66d);}},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x830)]=function(_0x5d12e4,_0x3a3ed5,_0x3fc086){const _0x4dd6ed=_0x44efce,_0x3b10c6=_0x3a3ed5[_0x4dd6ed(0x987)]();this[_0x4dd6ed(0xb70)](_0x4dd6ed(0x5aa),_0x5d12e4,_0x3fc086,![]),this[_0x4dd6ed(0xb70)](_0x4dd6ed(0x450)),this['push'](_0x4dd6ed(0xb8d)),this[_0x4dd6ed(0xb70)](_0x4dd6ed(0xa09)),this[_0x4dd6ed(0xb70)](_0x4dd6ed(0x16b),_0x5d12e4),this[_0x4dd6ed(0xb70)](_0x4dd6ed(0xa9e));},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0xb91)]=function(_0x5ec7ac){},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x73d)]=Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x161)],Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x161)]=function(_0x1a6f7b){const _0x14d8c2=_0x44efce;if(!VisuMZ[_0x14d8c2(0x6d0)]['Settings']['BattleLog'][_0x14d8c2(0x56f)])return;VisuMZ['BattleCore'][_0x14d8c2(0x73d)]['call'](this,_0x1a6f7b);},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x7dc)]=function(_0x53bc44){const _0x21e25e=_0x44efce;this['push'](_0x21e25e(0xd5),_0x53bc44);VisuMZ[_0x21e25e(0x6d0)][_0x21e25e(0x444)][_0x21e25e(0xa63)][_0x21e25e(0x6e0)]&&this[_0x21e25e(0xb70)](_0x21e25e(0x605),_0x53bc44,[BattleManager[_0x21e25e(0x427)]],-0x1);if(!VisuMZ['BattleCore'][_0x21e25e(0x444)]['BattleLog'][_0x21e25e(0x689)])return;this['push'](_0x21e25e(0x6fa),TextManager['counterAttack'][_0x21e25e(0x437)](_0x53bc44[_0x21e25e(0x5d4)]()));},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x3cc)]=function(_0x35cd24){const _0x16b872=_0x44efce;this['push'](_0x16b872(0x2e3),_0x35cd24);if(!VisuMZ[_0x16b872(0x6d0)][_0x16b872(0x444)]['BattleLog'][_0x16b872(0xa6d)])return;this[_0x16b872(0xb70)](_0x16b872(0x6fa),TextManager[_0x16b872(0x802)][_0x16b872(0x437)](_0x35cd24['name']()));},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x38e)]=function(_0x1b198b,_0x36c0e8){const _0x4ed0b8=_0x44efce;if(VisuMZ['BattleCore'][_0x4ed0b8(0x444)][_0x4ed0b8(0xa63)][_0x4ed0b8(0x4db)]){if(_0x4ed0b8(0x15c)===_0x4ed0b8(0x786))this[_0x4ed0b8(0x52c)]=![],this[_0x4ed0b8(0x290)](),this[_0x4ed0b8(0x276)]();else{const _0x470e22=_0x36c0e8[_0x4ed0b8(0x987)]();this['push'](_0x4ed0b8(0x605),_0x1b198b,[_0x1b198b],_0x470e22[_0x4ed0b8(0xa49)]);}}},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0xb30)]=function(_0x5c15e3,_0x5b0f2a){const _0x59f0b5=_0x44efce;this[_0x59f0b5(0xb70)](_0x59f0b5(0x625),_0x5c15e3,_0x5b0f2a);if(!VisuMZ[_0x59f0b5(0x6d0)]['Settings'][_0x59f0b5(0x6e4)]['ShowSubstitute'])return;const _0x253033=_0x5c15e3[_0x59f0b5(0x5d4)](),_0x3fdbe6=TextManager[_0x59f0b5(0x5c2)][_0x59f0b5(0x437)](_0x253033,_0x5b0f2a[_0x59f0b5(0x5d4)]());this[_0x59f0b5(0xb70)](_0x59f0b5(0x6fa),_0x3fdbe6);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x4c1)]=Window_BattleLog['prototype'][_0x44efce(0x9fb)],Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x9fb)]=function(_0x50e2bf,_0xa2ccee){const _0x8676d1=_0x44efce;VisuMZ[_0x8676d1(0x6d0)][_0x8676d1(0x4c1)][_0x8676d1(0xb59)](this,_0x50e2bf,_0xa2ccee);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x119)]=Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x37f)],Window_BattleLog['prototype'][_0x44efce(0x37f)]=function(_0x91afcd){const _0x49bdc2=_0x44efce;if(!VisuMZ[_0x49bdc2(0x6d0)][_0x49bdc2(0x444)][_0x49bdc2(0x6e4)]['ShowFailure'])return;VisuMZ[_0x49bdc2(0x6d0)][_0x49bdc2(0x119)]['call'](this,_0x91afcd);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x79d)]=Window_BattleLog['prototype'][_0x44efce(0x662)],Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x662)]=function(_0x216028){const _0xe0ba9e=_0x44efce;if(!VisuMZ['BattleCore'][_0xe0ba9e(0x444)][_0xe0ba9e(0x6e4)][_0xe0ba9e(0xbc4)])return;VisuMZ[_0xe0ba9e(0x6d0)]['Window_BattleLog_displayCritical'][_0xe0ba9e(0xb59)](this,_0x216028);},VisuMZ['BattleCore'][_0x44efce(0x174)]=Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0xb47)],Window_BattleLog[_0x44efce(0x8f2)]['displayMiss']=function(_0x277ef1){const _0x303ce6=_0x44efce;!VisuMZ[_0x303ce6(0x6d0)][_0x303ce6(0x444)][_0x303ce6(0x6e4)][_0x303ce6(0x50b)]?this[_0x303ce6(0xb70)]('performMiss',_0x277ef1):VisuMZ[_0x303ce6(0x6d0)][_0x303ce6(0x174)][_0x303ce6(0xb59)](this,_0x277ef1);},VisuMZ[_0x44efce(0x6d0)]['Window_BattleLog_displayEvasion']=Window_BattleLog['prototype'][_0x44efce(0x162)],Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x162)]=function(_0x416160){const _0x3959ae=_0x44efce;if(!VisuMZ[_0x3959ae(0x6d0)][_0x3959ae(0x444)]['BattleLog'][_0x3959ae(0x50b)])_0x416160[_0x3959ae(0x12d)]()[_0x3959ae(0x2cc)]?this[_0x3959ae(0xb70)]('performEvasion',_0x416160):this[_0x3959ae(0xb70)]('performMagicEvasion',_0x416160);else{if(_0x3959ae(0x14a)===_0x3959ae(0x14a))VisuMZ[_0x3959ae(0x6d0)][_0x3959ae(0x9b8)][_0x3959ae(0xb59)](this,_0x416160);else{_0x5788ad[_0x3959ae(0x8f2)]['activate']['call'](this);const _0x1e1fe5=this[_0x3959ae(0x1e6)]();_0x1e1fe5===_0x3959ae(0x2c9)&&this[_0x3959ae(0x43d)]();}}},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x4a8)]=function(_0x380fe1){const _0x3bab86=_0x44efce;if(_0x380fe1[_0x3bab86(0x12d)]()[_0x3bab86(0x243)]){if(_0x3bab86(0x9a8)!==_0x3bab86(0x9a8)){if(!_0x22783f[_0x3bab86(0x8c0)]())return![];return![];}else{_0x380fe1[_0x3bab86(0x12d)]()['hpDamage']>0x0&&!_0x380fe1['result']()[_0x3bab86(0x48b)]&&this[_0x3bab86(0xb70)](_0x3bab86(0x2c8),_0x380fe1);_0x380fe1[_0x3bab86(0x12d)]()['hpDamage']<0x0&&this[_0x3bab86(0xb70)](_0x3bab86(0xba8),_0x380fe1);if(VisuMZ['BattleCore'][_0x3bab86(0x444)][_0x3bab86(0x6e4)][_0x3bab86(0xa7f)]){if(_0x3bab86(0xafe)!==_0x3bab86(0xafe)){const _0xe94231=this[_0x3bab86(0xb08)]()[_0x3bab86(0x5d4)]||'';if(_0xe94231[_0x3bab86(0xab6)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x4a8daf=_0x24dda0['$1'][_0x3bab86(0x603)](',')[_0x3bab86(0xba3)](_0x5c8875=>_0x221246(_0x5c8875));this['checkExtendTroopCompatibility'](),this[_0x3bab86(0x3b1)](_0x4a8daf);}}else this[_0x3bab86(0xb70)]('addText',this['makeHpDamageText'](_0x380fe1));}}}},VisuMZ['BattleCore'][_0x44efce(0x405)]=Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x7d5)],Window_BattleLog[_0x44efce(0x8f2)]['displayMpDamage']=function(_0x4f05a3){const _0x10acf3=_0x44efce;if(!VisuMZ[_0x10acf3(0x6d0)][_0x10acf3(0x444)][_0x10acf3(0x6e4)][_0x10acf3(0x676)])return;VisuMZ[_0x10acf3(0x6d0)][_0x10acf3(0x405)][_0x10acf3(0xb59)](this,_0x4f05a3);},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x973)]=Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x866)],Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x866)]=function(_0x5093d0){const _0x2d4074=_0x44efce;if(!VisuMZ[_0x2d4074(0x6d0)]['Settings']['BattleLog'][_0x2d4074(0x34d)])return;VisuMZ['BattleCore'][_0x2d4074(0x973)][_0x2d4074(0xb59)](this,_0x5093d0);},Window_BattleLog['prototype']['displayAffectedStatus']=function(_0x461f40){const _0x14535c=_0x44efce;if(_0x461f40[_0x14535c(0x12d)]()['isStatusAffected']()){if('xskia'!==_0x14535c(0x447)){let _0x33402e=_0x2a6500[_0x14535c(0x414)](_0x418fb0['BattleCore'][_0x14535c(0x64d)][_0x14535c(0xb59)](this));return _0x2ff5dc[_0x14535c(0x6d0)][_0x14535c(0x883)](_0x33402e);}else this[_0x14535c(0xb70)](_0x14535c(0x635)),this[_0x14535c(0x849)](_0x461f40),this[_0x14535c(0x12a)](_0x461f40),this[_0x14535c(0xb70)](_0x14535c(0x450));}},Window_BattleLog[_0x44efce(0x8f2)]['displayAddedStates']=function(_0x3f0835){const _0x5b5f23=_0x44efce,_0x193905=_0x3f0835[_0x5b5f23(0x12d)](),_0x55dbb7=_0x193905[_0x5b5f23(0xb9)]();for(const _0x14d9e5 of _0x55dbb7){const _0x393f46=_0x3f0835[_0x5b5f23(0x8de)]()?_0x14d9e5[_0x5b5f23(0x57f)]:_0x14d9e5[_0x5b5f23(0x131)];_0x393f46&&VisuMZ[_0x5b5f23(0x6d0)]['Settings']['BattleLog']['ShowAddedState']&&(_0x5b5f23(0xb46)==='rtNVE'?(this['_frontAttachmentSprite']&&this[_0x5b5f23(0x317)](this[_0x5b5f23(0xa3)]),this[_0x5b5f23(0x57e)]&&this[_0x5b5f23(0x6b0)](this[_0x5b5f23(0x57e)])):(this[_0x5b5f23(0xb70)]('fnordAddedStates'),this[_0x5b5f23(0xb70)](_0x5b5f23(0xa91)),this[_0x5b5f23(0xb70)](_0x5b5f23(0x635)),this[_0x5b5f23(0xb70)](_0x5b5f23(0x6fa),_0x393f46[_0x5b5f23(0x437)](_0x3f0835[_0x5b5f23(0x5d4)]())),this[_0x5b5f23(0xb70)](_0x5b5f23(0xaf1)))),_0x14d9e5['id']===_0x3f0835['deathStateId']()&&this[_0x5b5f23(0xb70)]('performCollapse',_0x3f0835);}},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x7bf)]=function(){},Window_BattleLog['prototype'][_0x44efce(0x4d4)]=function(_0x481350){const _0x54ec60=_0x44efce;if(!VisuMZ['BattleCore']['Settings'][_0x54ec60(0x6e4)][_0x54ec60(0x5e4)])return;const _0x57d65f=_0x481350[_0x54ec60(0x12d)](),_0x1d30a8=_0x57d65f['removedStateObjects']();for(const _0xc5541f of _0x1d30a8){_0xc5541f[_0x54ec60(0x2fd)]&&('qaQEr'===_0x54ec60(0xa78)?(this[_0x54ec60(0xb70)](_0x54ec60(0x6ac)),this[_0x54ec60(0xb70)](_0x54ec60(0xa91)),this[_0x54ec60(0xb70)](_0x54ec60(0x635)),this[_0x54ec60(0xb70)](_0x54ec60(0x6fa),_0xc5541f['message4'][_0x54ec60(0x437)](_0x481350['name']())),this[_0x54ec60(0xb70)]('wait')):_0x1a2e82=_0x491c7a['SideviewSelect']);}},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x6ac)]=function(){},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x12a)]=function(_0x54ca53){const _0x370eb6=_0x44efce,_0x155252=VisuMZ[_0x370eb6(0x6d0)]['Settings'][_0x370eb6(0x6e4)],_0x4cab32=_0x54ca53['result']();if(_0x155252[_0x370eb6(0xc4)])this[_0x370eb6(0x93c)](_0x54ca53,_0x4cab32[_0x370eb6(0x740)],TextManager[_0x370eb6(0x2fb)]);if(_0x155252[_0x370eb6(0x94a)])this[_0x370eb6(0x93c)](_0x54ca53,_0x4cab32['addedDebuffs'],TextManager['debuffAdd']);if(_0x155252[_0x370eb6(0x3ec)])this[_0x370eb6(0x93c)](_0x54ca53,_0x4cab32[_0x370eb6(0x83e)],TextManager[_0x370eb6(0xbc3)]);},Window_BattleLog[_0x44efce(0x8f2)]['displayBuffs']=function(_0x565a68,_0x224867,_0x443d3f){const _0x400f6c=_0x44efce;for(const _0x590b49 of _0x224867){if(_0x400f6c(0x6ed)!==_0x400f6c(0x6ed))this[_0x400f6c(0x2b6)]['svAnchorY']=_0x292eae['prototype'][_0x400f6c(0x371)][_0x400f6c(0xb59)](this);else{const _0x48954e=_0x443d3f[_0x400f6c(0x437)](_0x565a68['name'](),TextManager['param'](_0x590b49));this[_0x400f6c(0xb70)](_0x400f6c(0xa91)),this[_0x400f6c(0xb70)](_0x400f6c(0x635)),this[_0x400f6c(0xb70)](_0x400f6c(0x6fa),_0x48954e),this[_0x400f6c(0xb70)]('wait');}}},VisuMZ['BattleCore'][_0x44efce(0x34e)]=Window_BattleLog['prototype']['clear'],Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0xa09)]=function(){const _0x1502a2=_0x44efce;VisuMZ[_0x1502a2(0x6d0)][_0x1502a2(0x34e)][_0x1502a2(0xb59)](this),this[_0x1502a2(0x52f)]();},VisuMZ[_0x44efce(0x6d0)]['Window_BattleLog_pushBaseLine']=Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x635)],Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x635)]=function(){const _0x2d0f78=_0x44efce;VisuMZ[_0x2d0f78(0x6d0)][_0x2d0f78(0x83b)][_0x2d0f78(0xb59)](this),this['callNextMethod']();},VisuMZ[_0x44efce(0x6d0)]['Window_BattleLog_popBaseLine']=Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0xa91)],Window_BattleLog['prototype']['popBaseLine']=function(){const _0x4a58fc=_0x44efce;VisuMZ[_0x4a58fc(0x6d0)][_0x4a58fc(0x36e)][_0x4a58fc(0xb59)](this),this[_0x4a58fc(0x67a)](),this['callNextMethod']();},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x56e)]=Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x1f4)],Window_BattleLog['prototype'][_0x44efce(0x1f4)]=function(_0x1d6d93){const _0x2ab43c=_0x44efce;VisuMZ[_0x2ab43c(0x6d0)]['Window_BattleLog_popupDamage']['call'](this,_0x1d6d93),this[_0x2ab43c(0x52f)]();},Window_BattleLog['prototype'][_0x44efce(0x450)]=function(){const _0x1f172c=_0x44efce;let _0xdd6753=0x0;if(this[_0x1f172c(0x163)][_0x1f172c(0x496)]>0x0){if(_0x1f172c(0x332)!==_0x1f172c(0x332)){if(_0x476a28[_0x1f172c(0xa15)]===0x0)this[_0x1f172c(0x7c8)](_0x1f172c(0x15d));else{if(_0x107c9b['type']===0x1)this['requestMotion']('swing');else _0x14f96b[_0x1f172c(0xa15)]===0x2&&this[_0x1f172c(0x7c8)](_0x1f172c(0x3c4));}}else _0xdd6753=this['_baseLineStack'][this[_0x1f172c(0x163)][_0x1f172c(0x496)]-0x1];}this[_0x1f172c(0x330)][_0x1f172c(0x496)]>_0xdd6753?this[_0x1f172c(0xaf1)]():this[_0x1f172c(0x52f)]();},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x70e)]=Window_BattleLog[_0x44efce(0x8f2)]['performActionStart'],Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x10c)]=function(_0x4c3f47,_0x92148){const _0x188845=_0x44efce;VisuMZ[_0x188845(0x6d0)][_0x188845(0x70e)][_0x188845(0xb59)](this,_0x4c3f47,_0x92148),this['callNextMethod']();},VisuMZ[_0x44efce(0x6d0)]['Window_BattleLog_performAction']=Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x86c)],Window_BattleLog['prototype'][_0x44efce(0x86c)]=function(_0x3e8221,_0x3df955){const _0x3de7f5=_0x44efce;VisuMZ[_0x3de7f5(0x6d0)][_0x3de7f5(0x6e9)][_0x3de7f5(0xb59)](this,_0x3e8221,_0x3df955),this[_0x3de7f5(0x52f)]();},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0xa21)]=Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x16b)],Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x16b)]=function(_0x11e0d3){const _0x2e5625=_0x44efce;VisuMZ[_0x2e5625(0x6d0)][_0x2e5625(0xa21)][_0x2e5625(0xb59)](this,_0x11e0d3);for(const _0x73820d of BattleManager['allBattleMembers']()){if(!_0x73820d)continue;if(_0x73820d['isDead']())continue;_0x73820d[_0x2e5625(0x12c)]();}this[_0x2e5625(0x52f)]();},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x3bc)]=Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x2c8)],Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x2c8)]=function(_0x47af78){const _0x180d8b=_0x44efce;VisuMZ['BattleCore'][_0x180d8b(0x3bc)][_0x180d8b(0xb59)](this,_0x47af78),this['callNextMethod']();},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x6f0)]=Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x665)],Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x665)]=function(_0x2b265d){const _0x16439c=_0x44efce;VisuMZ[_0x16439c(0x6d0)][_0x16439c(0x6f0)][_0x16439c(0xb59)](this,_0x2b265d),this[_0x16439c(0x52f)]();},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x9ed)]=Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0xba8)],Window_BattleLog['prototype'][_0x44efce(0xba8)]=function(_0x31148c){const _0x451dbd=_0x44efce;VisuMZ[_0x451dbd(0x6d0)][_0x451dbd(0x9ed)]['call'](this,_0x31148c),this[_0x451dbd(0x52f)]();},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x5c7)]=Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x854)],Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x854)]=function(_0x2df4cb){const _0x63dfda=_0x44efce;VisuMZ[_0x63dfda(0x6d0)][_0x63dfda(0x5c7)][_0x63dfda(0xb59)](this,_0x2df4cb),this[_0x63dfda(0x52f)]();},VisuMZ['BattleCore'][_0x44efce(0x14b)]=Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x148)],Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x148)]=function(_0x201905){const _0x17aa57=_0x44efce;VisuMZ[_0x17aa57(0x6d0)]['Window_BattleLog_performMagicEvasion'][_0x17aa57(0xb59)](this,_0x201905),this['callNextMethod']();},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x58c)]=Window_BattleLog[_0x44efce(0x8f2)]['performCounter'],Window_BattleLog[_0x44efce(0x8f2)]['performCounter']=function(_0x7c7ac2){const _0x54706e=_0x44efce;VisuMZ[_0x54706e(0x6d0)][_0x54706e(0x58c)][_0x54706e(0xb59)](this,_0x7c7ac2),this['callNextMethod']();},VisuMZ[_0x44efce(0x6d0)][_0x44efce(0x2e0)]=Window_BattleLog[_0x44efce(0x8f2)]['performReflection'],Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x2e3)]=function(_0x2e2d02){const _0x1f25ac=_0x44efce;VisuMZ[_0x1f25ac(0x6d0)][_0x1f25ac(0x2e0)][_0x1f25ac(0xb59)](this,_0x2e2d02),this[_0x1f25ac(0x52f)]();},VisuMZ[_0x44efce(0x6d0)]['Window_BattleLog_performSubstitute']=Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x625)],Window_BattleLog['prototype']['performSubstitute']=function(_0x46a5da,_0x2f1f06){const _0x23dcc2=_0x44efce;VisuMZ[_0x23dcc2(0x6d0)][_0x23dcc2(0x98f)]['call'](this,_0x46a5da,_0x2f1f06),this['callNextMethod']();},VisuMZ[_0x44efce(0x6d0)]['Window_BattleLog_performCollapse']=Window_BattleLog[_0x44efce(0x8f2)]['performCollapse'],Window_BattleLog['prototype']['performCollapse']=function(_0x4bd77b){const _0x93db3e=_0x44efce;VisuMZ['BattleCore'][_0x93db3e(0x94e)][_0x93db3e(0xb59)](this,_0x4bd77b),this[_0x93db3e(0x52f)]();},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x77c)]=function(_0x4d40b9,_0x3bd3f5){const _0x943087=_0x44efce;_0x4d40b9['performCastAnimation'](_0x3bd3f5),this[_0x943087(0x52f)]();},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x519)]=function(_0x13f1e8,_0x8685a0){const _0x3ee30d=_0x44efce,_0x5ba542=_0x13f1e8['attackAnimationId1']();_0x5ba542<=0x0?SoundManager[_0x3ee30d(0x782)]():'CPhyO'==='qvJOH'?this[_0x3ee30d(0x96a)]['addChild'](this[_0x3ee30d(0x1c5)]):this['showNormalAnimation'](_0x8685a0,_0x5ba542);},Window_BattleLog[_0x44efce(0x8f2)]['applyImmortal']=function(_0x2cea98,_0x554755,_0x1e0d1d){const _0x1baf25=_0x44efce,_0x246269=[_0x2cea98][_0x1baf25(0x719)](_0x554755);for(const _0x518fc4 of _0x246269){if(!_0x518fc4)continue;_0x518fc4['setImmortal'](_0x1e0d1d);}this[_0x1baf25(0x52f)]();},Window_BattleLog['prototype'][_0x44efce(0xbac)]=function(_0x21eb0){const _0x5672d3=_0x44efce;this[_0x5672d3(0x67d)]=_0x21eb0;},Window_BattleLog['prototype'][_0x44efce(0x7c8)]=function(_0x35a4c6,_0x16ec22){const _0x332ab1=_0x44efce;for(const _0x545b1e of _0x35a4c6){if(!_0x545b1e)continue;_0x545b1e[_0x332ab1(0x7c8)](_0x16ec22);}this['callNextMethod']();},Window_BattleLog[_0x44efce(0x8f2)]['performMoveToPoint']=function(_0x54e226,_0x37b06c,_0x38725e,_0x4df14d,_0x5827bd,_0x227948){const _0x19f05f=_0x44efce;_0x54e226[_0x19f05f(0x7ae)](_0x37b06c,_0x38725e,_0x4df14d,_0x5827bd,_0x227948,-0x1),this[_0x19f05f(0x52f)]();},Window_BattleLog[_0x44efce(0x8f2)]['performMoveToTargets']=function(_0x11576c,_0x2ad021,_0x55804f,_0x7b5fd8,_0x4031df,_0x4ac039,_0x1cad7d){const _0x15eb8c=_0x44efce,_0x1f3936=Math[_0x15eb8c(0x90c)](..._0x2ad021[_0x15eb8c(0xba3)](_0x33ee05=>_0x33ee05[_0x15eb8c(0x6dd)]()[_0x15eb8c(0x5f2)]-_0x33ee05[_0x15eb8c(0x6dd)]()[_0x15eb8c(0xa12)]()/0x2)),_0x30bff6=Math['max'](..._0x2ad021['map'](_0x19b633=>_0x19b633[_0x15eb8c(0x6dd)]()[_0x15eb8c(0x5f2)]+_0x19b633[_0x15eb8c(0x6dd)]()[_0x15eb8c(0xa12)]()/0x2)),_0x4a859c=Math['min'](..._0x2ad021[_0x15eb8c(0xba3)](_0x52373b=>_0x52373b[_0x15eb8c(0x6dd)]()['_baseY']-_0x52373b[_0x15eb8c(0x6dd)]()['mainSpriteHeight']())),_0x30cfa5=Math[_0x15eb8c(0x65c)](..._0x2ad021[_0x15eb8c(0xba3)](_0x6d6cbc=>_0x6d6cbc[_0x15eb8c(0x6dd)]()[_0x15eb8c(0xbb8)])),_0x3d1e4a=_0x2ad021[_0x15eb8c(0xc9)](_0x70f07b=>_0x70f07b[_0x15eb8c(0x8de)]())[_0x15eb8c(0x496)],_0x417640=_0x2ad021['filter'](_0x5d377d=>_0x5d377d[_0x15eb8c(0x851)]())[_0x15eb8c(0x496)];let _0x22ab9b=0x0,_0x4530e4=0x0;if(_0x55804f[_0x15eb8c(0xab6)](/front/i))_0x22ab9b=_0x3d1e4a>=_0x417640?_0x1f3936:_0x30bff6;else{if(_0x55804f[_0x15eb8c(0xab6)](/middle/i))_0x15eb8c(0x435)===_0x15eb8c(0x145)?(!this[_0x15eb8c(0x758)]&&(this[_0x15eb8c(0x758)]=new _0x338309(_0x17327b),this['attachSpritesToDistortionSprite']()),this['_svBattlerSprite'][_0x15eb8c(0x2fa)](_0x56bcd6)):(_0x22ab9b=(_0x1f3936+_0x30bff6)/0x2,_0x1cad7d=-0x1);else _0x55804f['match'](/back/i)&&(_0x22ab9b=_0x3d1e4a>=_0x417640?_0x30bff6:_0x1f3936);}if(_0x55804f[_0x15eb8c(0xab6)](/head/i))_0x4530e4=_0x4a859c;else{if(_0x55804f['match'](/center/i))_0x15eb8c(0x31b)===_0x15eb8c(0xb0)?(this[_0x15eb8c(0x743)][_0x15eb8c(0x57c)](),this[_0x15eb8c(0x9af)]['hide'](),this[_0x15eb8c(0x258)][_0x15eb8c(0x4c7)]()):_0x4530e4=(_0x4a859c+_0x30cfa5)/0x2;else _0x55804f[_0x15eb8c(0xab6)](/base/i)&&(_0x4530e4=_0x30cfa5);}_0x11576c[_0x15eb8c(0x7ae)](_0x22ab9b,_0x4530e4,_0x7b5fd8,_0x4031df,_0x4ac039,_0x1cad7d),this[_0x15eb8c(0x52f)]();},Window_BattleLog[_0x44efce(0x8f2)][_0x44efce(0x149)]=function(_0xa4e77b,_0x5a5d47,_0x27fc40){const _0x2d7629=_0x44efce;for(const _0xe316e2 of _0xa4e77b){if('hJCRC'!==_0x2d7629(0x4a6)){if(!_0xe316e2)continue;_0xe316e2['jumpBattler'](_0x5a5d47,_0x27fc40);}else _0x60514d=_0x5d2f15>=_0x30ac7c?_0x2d92af:_0x5af15a;}this[_0x2d7629(0x52f)]();};function _0x4fa7(){const _0x2ccac2=['BattleManager_isTpbMainPhase','ActSeq_Mechanics_BtbGain','animationId','reduce','PostDamageJS','fNQBk','_linkedSprite','zTWZG','EfwFs','extendTroopMembers','Game_Action_executeDamage','drawItemImageXPStyle','RTcec','startActorSelection','isOptionsCommandEnabled','basicGaugesY','ukCPx','1:1','processForcedAction','GraNZ','bjKWL','TJKmk','textColor','ActSeq_Movement_MoveToTarget','applyFreezeMotionFrames','iDqkX','notFocusValid','BattleManager_inputtingAction','ActionSequence','_lastPluginCommandInterpreter','Sprite_Enemy_update','updateCommandNameWindow','startWeaponAnimation','destroy','adjustPosition_1for1','IconStypeNorm','actorCommandCancelTPB','setActionState','ShowReflect','dimColor1','Sprite_AnimationMV_updatePosition','selectPreviousCommand','addAutoBattleCommand','UdfrH','Window_BattleStatus_initialize','updateStateSpriteBattleCore','_preemptive','xUBXk','Shadow2','qaQEr','zNLoZ','StatusWindowAttachmentFrontOffsetY','_active','UewuB','ActSeq_Animation_WaitForAnimation','lineRect','ShowHpDmg','DvbxI','criticalHitFlat','_wtypeIDs','DamageStyleList','_tempBattler','_endBattle','JS\x20BATTLE\x20DEFEAT','Game_Interpreter_terminate','applyArmorModifiers','canMove','mOxrz','canGuard','skewBattler','ActSeq_Movement_WaitForSkew','BattleManager_endAction','Window_BattleLog_refresh','Sprite_Enemy_initVisibility','popBaseLine','auto','ActSeq_Motion_ClearFreezeFrame','process_VisuMZ_BattleCore_Notetags','PazoO','DamageDisplay','applyGlobal','LGBcy','_enemyWindow','CTJrk','setText','setBattlePortrait','skillWindowRect','waitForMovement','AutoBattle','UMwjO','COMBATLOG','processAnimationRequests','damageContainer','Exploited','setCustomDamageFormula','battleMembers','_enemyId','ActSeq_Movement_WaitForScale','VisuMZ_2_WeaponSwapSystem','addTextToCombatLog','isMeleeSingleTargetAction','evade','isAutoBattleCommandEnabled','qAEXu','BattleLayout','_duration','dead\x20enemies','isBreakStunned','AUwrc','SBFRI','delay','match','updateStart','AllowRandomSpeed','HelpSkillType','checkShowHideSkillNotetags','anchorX','setupTextPopup','ActSeq_ChangeSkew','nqrLK','getTraitSetKeys','_totalValue','allBattleMembers','actorCommandWindowRect','user','font','unshift','drawItemImageListStyle','HomePosJS','RequiresDefeat','remove','BreakShields','QYMSB','partyCommandWindowRectXPStyle','offsetY','forceMotion','removeBuffsAuto','Aytfv','PreApply%1JS','_opacityEasing','MdgSt','Scene_Battle_createActorCommandWindow','dAEYa','%1StartBattleJS','bitmapHeight','updateFloat','cMvCT','Enemy-%1-%2','attachSpritesToDistortionSprite','isAnyoneSkewing','clearActiveWeaponSet','forceEscapeSprite','setActiveWeaponSlot','HlSIB','_commandNameWindow','hwZVk','KoSbi','skew','AdjustRect','recoverAll','DefaultSoftScaler','ChantStyle','ActSeq_Zoom_Scale','iconWidth','bgType','srRap','ActSeq_Projectile_Picture','changeInputWindow','trim','isRightInputMode','wait','kkEwp','NameAlwaysSelectOnly','Abjij','Scale','checkBattleEnd','setSvBattlerSprite','PortraitScaleBorderStyle','canInput','makeTargetSelectionMoreVisible','PreStartTurnJS','TextAlign','jump','CMTbB','removeStatesAuto','makeTargetSprites','setBackgroundType','fmnnP','Zmipd','BattleManager_checkSubstitute','isChangingOpacity','_dragonbonesSpriteContainer','setupMotionBlurImpactFilter','troop','aliveMembers','refreshStatusWindow','createStateSprite','isGrowing','USKRD','alive\x20enemies\x20not\x20target','process_VisuMZ_BattleCore_TraitObject_Notetags','rPIbX','Sprite_Battler_damageOffsetX','PflBv','adjustPosition_ScaleUp','isOptionsCommandAdded','CastAnimation','applyCritical','updateActors','setupDamagePopup','NameOffsetY','ParseActorNotetags','doesPageHaveOnceParallelStart','isSpriteVisible','ActSeqImpact','_mainSprite','calcWindowHeight','DigitGroupingDamageSprites','STB','Window_Options_addGeneralOptions','OvVqY','sortEnemies','messageSpeed','createBattleUIOffsetY','_effectsContainer','ActSeq_Inject_AnimationPauseResume','LCgGL','skillId','resetBreakShield','createEffectActionSet','toUpperCase','exit','xVVZP','displaySubstitute','Gdzxw','isVisualHpGaugeDisplayed','arPenFlat','yMKkA','logActionList','enemy','Sprite_Actor_setBattler','ActSeq_BattleLog_UI','XiYPx','debuffAdd','ParseArmorNotetags','Game_Interpreter_command301','BravePoints','command301','BZVFW','jkmSz','Game_Battler_performMiss','setBattleImpactTimeScale','setActorHome','hiBzN','hAuDx','BZqaU','displayMiss','PostEndBattleJS','ArRedRate','softDamageCap','ActSeq_Movement_HomeMoveBy','updateAction','battleCamera','Scene_Map_initializeAfter','resetResultSwitches','MIXeE','clearElementChanges','StatusWindowAttachmentBackOffsetX','aqxmc','HThuH','PostStartTurnJS','lukEffectRate','drawItemStatusListStyle','wtypeId','call','KySje','createMainSprite','drawSingleSkillCost','ActSeq_Horror_NoiseCreate','DisablePartyCmd','ApplyImmortal','statusWindowRectBorderStyle','isCertainHit','processDefeat','BattlebackScale','getNextSubjectFromPool','createEnemyNames','HHidj','updateBossCollapse','OffsetAdjust','getItemDamageAmountLabelBattleCore','GXLFz','fXVPE','preparePartyRefresh','ActSeq_Movement_HomeMoveToTarget','WtypeId','TpGaugeOffsetX','push','clearOnceParallelInterpreters','isHiddenSkill','WaitForEffect','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','battleAngle','upInI','DFAhp','_allTargets','_shadowScaleY','isBattleTest','_enemyIDs','base','ActSeq_Mechanics_CtbSpeed','PortraitScale','zdbmX','VarianceFormulaJS','Immortal','CmdTextAutoBattle','Game_Action_itemHit','maxCols','WaitForAngle','_flashColor','_battlerHue','DamageType%1','Scene_Battle_helpWindowRect','JYAXB','CKzSd','inputting','waitForEffect','AdDUT','Window_BattleStatus_drawItemImage','ActSeq_DB_DragonbonesTimeScale','endAction','process_VisuMZ_BattleCore_CommonEventKeys','AutoMeleeSolo','JIPSR','applySoftDamageCap','ActSeq_BattleLog_PushBaseLine','string','zFgaD','MhKTi','_commonEventQueue','isTurnBased','NLjAL','anchorY','isBattlerFlipped','addState','VisuMZ_2_PartySystem','HVQyX','Window_BattleLog_update','map','CalcEscapeRaiseJS','launchBattle','addNewState','isAutoBattle','performRecovery','Shadow','_emptyBitmap','isSceneBattle','waitCount','VisuMZ_3_BoostAction','eJtjT','ParseEnemyNotetags','Scene_Battle_logWindowRect','yZoaQ','bEinI','hasSvBattler','battleJump','xfDdb','_forcedHomeX','XILTa','_baseY','isLearnedSkill','clearMotion','jZngK','updateBattlebackBitmap1','random','nameY','PreDamageAsUserJS','top','PopupShiftX','ResetOffset','buffRemove','ShowCritical','Sprite_Actor_initMembers','NGgPb','Defeat','isPartyTpbInputtable','createBattleFieldContainer','checkSceneBattleTransitionable','MotionType','_frontAttachmentSprite','BattleDefeatJS','STRUCT','Scene_Battle_partyCommandWindowRect','ApCus','spriteId','createBattleFieldBattleCore','ActSeq_Camera_FocusTarget','isTriggered','834415HgJLMq','animationNextDelay','createShadowSprite','Intensity','FFyfq','changeCtbCastTime','MpGaugeOffsetY','DamageStyles','xYDto','xuteH','FaceDirection','ActSeq_Camera_FocusPoint','attackStatesRate','addedStateObjects','VEnOh','Game_Actor_equips','collapse','bfbna','ActSeq_Movement_WaitForJump','WaitForOpacity','ActSeq_Horror_GlitchCreate','gainHalfActionsPTB','XOGzP','AttachStateOffsetX','ShowAddedBuff','_borderPortraitDuration','PMhSh','updateStaticSvBattlerFrames','moveBattlerHomeDistance','filter','NyAvc','JS\x20%1START\x20BATTLE','Dqdaa','ActSeq_Movement_WaitForSpin','isSkipPartyCommandWindow','yinCq','GHIUh','Mirror','WqdVC','battleCommandName','2565708FDOxvz','performCounter','setBattleCameraPoint','padding','adjustPosition','_callSceneOptions','_preBattleCommonEvent','battleSpriteSkew','MP_Flat','onBattleStartBattleCore','Post','_jumpDuration','icon','ResetFocus','ABkHj','BARE\x20HANDS','loadSvActor','actorCommandSingleSkill','ActSeq_Mechanics_BreakShieldReset','stbGainInstant','rTjXl','Skills','_weaponImageId','bVFBs','GdAHx','glitch','NameLegacy','Scene_Battle_selectPreviousCommand','gainFullActionsPTB','stepForward','svBattlerAnchorX','_opacityDuration','MeleeDistance','isBattleMember','TEzIU','InxQJ','wYVQA','Sprite_Animation_targetSpritePosition','updateSpin','LastSelected','Sprite_Enemy_updateBossCollapse','isAnimationPlaying','OffsetX','onActorCancel','MBMtf','vIIVu','value1','teXuI','Game_Action_setGuard','EnableSoftCap','Lavzk','Interrupt','PtFfU','Game_Interpreter_PluginCommand','changePaintOpacity','encounterList','performActionStart','victory','becomeSTBExploited','tpbActorSwitchConditionsMet','Scene_Battle_update','WaitForNewLine','Game_Troop_setup','ActSeq_Mechanics_WaitForEffect','onEncounter','_battlerContainer','Window_ActorCommand_initialize','displayItemMessage','command119','Window_BattleLog_displayFailure','hasSkill','sFUfA','ArPenFlat','Game_Enemy_setup','setHelpWindow','+%1','dwsYX','drawItem','pointY','12dDkVkQ','CommandAddOptions','jumpBattler','setHome','addItemCommand','updateEffectContainers','PreApplyAsTargetJS','displayChangedBuffs','_updateClientArea','performActionEndMembers','result','ActSeq_Movement_MoveBy','AsUser','performMoveToPoint','message2','Game_Battler_performActionStart','startAttackWeaponAnimation','enemyId','checkTpbInputOpen','_tpbNeedsPartyCommand','eTRsk','changeAtbCastTime','linkSprite','wqMzD','XPActorDefaultHeight','mScCF','_pattern','Rate','Game_BattlerBase_canAttack','animationShouldMirror','_skewDuration','_effectType','PopupDuration','criticalDmgRate','VXsic','gYqnR','OLaOA','performMagicEvasion','performJump','qhxBz','Window_BattleLog_performMagicEvasion','EscapeFail','battleOpacity','ActSeq_BattleLog_Clear','_lineHeight','Pmmsn','FlinchDistanceY','Sprite_Battleback_adjustPosition','gDAAG','updatePadding','sTziQ','HPKEK','Sprite_Actor_moveToStartPosition','rowSpacing','setVisibleUI','toString','visibilityState','RsxPk','thrust','RgwFR','nZBNP','BattleCmdList','displayCurrentState','displayEvasion','_baseLineStack','BattleManager_startInput','boxHeight','create','WVfkE','CheckSkillCommandShowSwitches','processEscape','windowPadding','performActionEnd','peuVp','aUvEv','DJiXT','Game_Battler_onBattleEnd','_targetHomeY','lVlbm','onBattleEndBattleCore','ActSeq_Movement_Spin','Window_BattleLog_displayMiss','BattleVictoryJS','createSeparateDamagePopups','ijnGP','HelpItem','iconIndex','setupBattleback','_targetGrowX','currentValue','SideviewSelect','isBattlerGrounded','createPartyCommandWindowBattleCore','BattleSystemCTB','PrioritySortActive','_floatDuration','canAddSkillCommand','DELBc','Scene_Battle_stop','displayType','BattleManager_processDefeat','VHADf','BvJIC','_jumpHeight','performCollapse','round','value','Scene_Battle_onEnemyCancel','ActSeq_Movement_WaitForFloat','onBattleStart','qOhkq','zrYBf','AttackAnimation','cBcsX','Sprite_Actor_update','itemRect','TargetLocation','isNextSceneBattleTransitionable','updateForceAction','ScaleUp','xORbe','sleep','_enemy','createAttachmentSprites','members','callOptions','JumpToLabel','ForceExploited','JEvyO','adjustWeaponSpriteOffset','weaponImageId','ZSaUb','startTurn','WsyjR','Scene_ItemBase_applyItem','_angleWholeDuration','isImmortal','startHomeMove','alive\x20battlers\x20not\x20user','battleCorePreBattleCommonEvent','addAnimationSpriteToContainer','_customDamageFormula','JS\x20BATTLE\x20VICTORY','StartTurnWait','ARRAYFUNC','UNTITLED','_motionSpeed','ActSeq_ChangeAngle','uJfVH','_enemySprites','chant','Spriteset_Battle_updateActors','lOIcE','VisuMZ_0_CoreEngine','onSkewEnd','ihHZz','Dlbtq','CalcEscapeRatioJS','Scene_Battle_createCancelButton','Sprite_Battler_damageOffsetY','irxiA','randomTargets','_uiContainer','WaitComplete','Scene_Battle_updateBattleProcess','opXmW','gGKMe','PostApplyJS','frontviewSpriteY','Actions','_itemWindow','clearForcedGameTroopSettingsBattleCore','arRedFlat','naZjD','hasStaticSvBattler','uQhzX','isAutoBattleCommandAdded','xcxte','ScaleY','AutoNotetag','egryH','makeSpeed','_shadowScaleX','NQFqU','_action','revealNewWeaknesses','jgcDr','ELTXh','maxBattleMembers','FCKpG','active','isTpbMainPhase','BattleManager_startAction','CriticalHitRate','version','battleLayoutStyle','TpbGaugeOffsetY','qHmWU','SfaJW','damage','DVNzk','IjsHF','eHQrX','BattleManager_initMembers','BGvEH','createDamageContainer','refreshActorPortrait','checkSubstitute','QOWdD','popupDamage','7HWbnhp','Armor-%1-%2','startSkew','_growWholeDuration','ynXcx','-%1\x20MP','VisuMZ_2_BattleSystemSTB','VisuMZ_2_DragonbonesUnion','IcRcZ','getStypeIdWithName','displayAction','cUtNc','riMWB','_activeWeaponSlot','VisuMZ_3_SideviewBattleUI','ZnTul','isClicked','onAngleEnd','_offsetY','onEscapeSuccess','Window_PartyCommand_initialize','wholeActionSet','Name','anchor','PkfKL','IhLrc','itemEffectAddAttackState','IjBjr','isPhysical','SwitchCritical','ActSeq_Movement_HomeMoveToPoint','PostStartBattleJS','3099746Srffod','%1EndTurnJS','processPostBattleCommonEvents','ActSeq_Target_CurrentIndex','Sprite_Enemy_updateCollapse','onEnemyOk','VisuMZ_3_WeaknessDisplay','setBattlerFlip','HpGaugeOffsetX','requestRefresh','STYPES','States','Linear','yJVor','ActSeq_Mechanics_AnalyzeWeakness','sort','isAnyoneMoving','DXURI','setWaitMode','setFrame','MNBov','TYxaN','DistanceY','battleCameraData','AS\x20USER','VisuMZ_3_ActSeqCamera','ActSeq_Movement_WaitForMovement','createMiss','muziQ','resizeWindowXPStyle','helpWindowRectBorderStyle','JyJNh','performSTBExploiter','updateBattlebackBitmap2','iSCkP','ActSeq_Motion_RefreshMotion','PostEndTurnJS','isCancelled','optDisplayTp','PerformAction','updateStatusWindowPosition','ANTI_TINT_UI','stepBack','sortDamageSprites','addSingleSkillCommand','processBorderActor','hpAffected','wTcyf','ActSeq_Weapon_NextActiveWeapon','JsDPW','bVjmI','_enemyID','commandFight','onSelectAction','aDXev','mainSpriteHeight','RoAJx','_growEasing','pMDAz','_forcedHomeY','PostEndActionJS','walk','Game_Action_evalDamageFormula','AS\x20TARGET','BattleManager_updatePhase','ARRAYEVAL','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','_actorCommandWindow','JS\x20%1START\x20ACTION','loadSystem','visualHpGauge','alive\x20battlers\x20not\x20target','sZpXT','frameDelay','changeCtbChargeTime','addSkillCommands','ztkxU','uApJR','_tpbState','textWidth','OUDyA','Item-%1-%2','transform','SvBattlerMass-%1-%2','_surprise','CombatLogIcon','canUseItemCommand','setBattleCameraTargets','WtfIE','Sprite_StateIcon_updateFrame','faceRect','KMetS','placeTimeGauge','ActSeq_Animation_AttackAnimation','addCombatLogCommand','statusWindowRectXPStyle','MAT','updateAttachmentSprites','canEscape','_inputting','setupShockwaveImpactFilter','createActionSequenceProjectile','updateWeather','VEeZS','battleUIOffsetY','DbdII','isActiveTpb','clearDamagePopup','center','repositionEnemiesByResolution','PartyCmd','qyUQM','Targets','createPartyCommandWindow','uYqHi','NCZTJ','Game_Action_makeTargets','_jumpWholeDuration','updateCollapse','BattleManager_processVictory','addBattleCoreAutoBattleStartupCommand','removeAnimation','isAnimationShownOnBattlePortrait','refresh','_partyCommandWindow','weatherPower','selectNextCommand','getConfigValue','_targetGrowY','battleInjectAni','hMMxW','Game_Action_setAttack','getCommonEventIdWithName','currentAction','PreApplyAsUserJS','Scene_Battle_startEnemySelection','_updateCursorFilterArea','MpoUX','unchanged','statusWindowRect','ucIRl','makeActions','xbHTp','Text','canBattlerMove','Scene_Battle_startActorSelection','ujWXy','MotionSpeed','_drawTextBody','Rfiob','useItem','JS\x20%1START\x20TURN','isForFriendBattleCore','updateBattlerContainer','XOgay','_targetAngle','cAnsp','_battlePortrait','cJsVR','setBattleZoom','ARRAYSTRUCT','_cache','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','createLowerLayer','targetActionSet','BattleManager_makeActionOrders','ActSeq_Mechanics_PtbAlterCost','pattern','initBattleCore','initMembers','isBusy','onActorOk','WaitForMovement','process_VisuMZ_BattleCore_Action_Notetags','moveBattlerDistance','updateVisibility','_homeDuration','_tempEquipCheck','randomInt','performDamage','border','_canLose','MDF','physical','lAFVa','traitSet','forceAction','Game_System_initialize','UvGZY','onFloatEnd','_distortionSprite','dZYvN','_createEffectsContainer','NJGzk','preemptive','ActSeq_Motion_PerformAction','command339','oyGvl','startActorCommandSelection','updateShadowBattleCore','CriticalDmgRate','effect','rTrvk','Window_BattleLog_performReflection','HpGauge','changeWeather','performReflection','applyVariance','ActSeq_Angle_WaitForAngle','HitFlat','Game_Map_battleback2Name','ActSeq_Element_Clear','_targetSkewY','commandEscape','adjustFlippedBattlefield','LGBWu','Gmgpx','removeAnimationFromContainer','qvfxh','frameCount','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','updateStateIconSprite','_attackAnimationId','getNextDamagePopup','turn','XRuDu','mBoHk','autoSelectPriority','EasingType','setBattler','buffAdd','getColor','message4','OverallFormulaJS','addAutoBattleCommands','uoUOd','drawLineText','FlashDuration','YIAsF','_tpbSceneChangeCacheActor','updateMain','nQDYL','animation','createUIContainer','resetFontSettings','Sprite_Enemy_setBattler','AsTarget','_text','getEnemyIdWithName','ActSeq_Mechanics_Multipliers','setupBattlebackBattleCore','refreshMotion','critical','ncAil','Game_Party_addActor','FocusX','createDistortionSprite','eraseState','addChild','Spriteset_Battle_createLowerLayer','gainCurrentActionsFTB','BnZNC','aJeAs','attackAnimationIdSlot','_regionBattleback2','cBVbm','AUTO\x20BATTLE','HelpOptions','createAttachedSprites','ActSeq_Movement_MoveToPoint','updateScale','ActSeq_Skew_Reset','performWeaponAnimation','extraPositionY','LYnch','_growX','mpDamage','Scene_Battle_initialize','playEnemyDamage','GuardFormulaJS','_targetHomeX','setupNegativeImpactFilter','forceWeaponAnimation','_lines','angle','xmWcp','_deathStateApplied','isBypassDamageCap','YIcvw','_battleCoreForcedElements','Angle','bNIAd','WDNWl','autoSelectLastSelected','abs','PreEndActionJS','EtMdX','ForceRandom','Sprite_Battler_initMembers','ActSeq_Mechanics_Collapse','filters','nfcku','YvDuZ','_damagePopupArray','battleProjectiles','guard','JiOvb','addBuff','ActSeq_Mechanics_PtbFullHalfAction','clearResult','_item','FKMsp','ShowTpDmg','Window_BattleLog_clear','zrmUM','Game_BattlerBase_addNewState','EowDQ','skewDuration','TpbGaugeOffsetX','addPartyCommand','BattleManager_onEscapeSuccess','_speed','roycl','_escapeRatio','ActSeq_Movement_FacePoint','ActSeq_Mechanics_BoostPointsChange','battlelog','command357','makeActionList','FnCtL','waitForJump','AnchorY','CommandAddAutoBattle','changeTurnOrderByCTB','Game_Action_applyGlobal','AnimationID','setupIconTextPopup','cLltS','yahqd','Game_Map_setupBattleback','Destination','createCommandVisibleJS','gradientFillRect','terminate','AwuVa','Window_BattleLog_popBaseLine','setCursorRect','updateInterpreter','svBattlerAnchorY','StatusWindowAttachmentFront','AutoBattleBgType','CreateCommonEventKeys','_shake','TP_Rate','offsetX','startEnemySelection','actorCommandEscape','Game_Troop_expTotal','OWxvC','WaitCount2','CheckMapBattleEventValid','mainFontSize','displayFailure','Game_Battler_forceAction','BattleManager_onEncounter','ActSeq_Camera_Clamp','WeKPu','Ycezj','dNhAu','WfyEV','opponentsUnit','vjabI','isConfused','useDigitGrouping','clearRect','GcTHt','createBattleField','displayReflectionPlayBack','updatePointAnimations','commandNameWindowCenter','equipSlots','PostDamageAsUserJS','Etaex','ShowPopup','currentSymbol','makeActionListAutoAttack','Game_Battler_clearDamagePopup','HYUuO','HelpFight','hooyH','itemLineRect','getDamageStyle','zuIAo','_homeEasing','SkipPartyCmd','nxsgg','createEnemies','isFTB','battleUIOffsetX','cWpiG','TwaSa','actionSplicePoint','targetObjects','LDmUW','drawItemStyleIcon','PostApply%1JS','_floatWholeDuration','vRaFl','_actions','addDamageSprite','backColor','HDcFY','processExtendTroopMembers','loadEnemy','compareEnemySprite','eFbmV','onAllActionsEnd','BcfHq','UzXkE','forceSelect','turnOrderChangeOTB','CtjKF','ceil','Window_BattleLog_performDamage','BaseTroopIDs','StyleName','WaitForAnimation','createKeyJS','_autoBattle','Duration','createWeather','missile','_floatEasing','XEedj','setMoveEasingType','hpDamage','isJumping','YZPsC','Sprite_Battler_updateMain','displayReflection','isOkEnabled','_injectAnimationSprite','battleCommandIcon','logWindowRect','UxhBw','Sprite_Weapon_loadBitmap','canUse','Spriteset_Battle_createBattleField','Game_Battler_regenerateAll','waVSS','setupChild','drawSkillCost','HCyQn','getChildIndex','power','putActiveBattlerOnTop','commandName','battleStatusWindowAnimationContainer','ctRrx','ActSeq_Weapon_ClearActiveWeapon','setupBattleCore','itemEffectAddNormalState','GybOP','_appeared','FaceAway','dataId','isPTB','bitmap','_stateIconSprite','isSkewing','options','ShowRemovedBuff','damageOffsetX','Scene_Battle_onActorCancel','NXtDu','flashColor','Spriteset_Battle_update','slice','setHandler','_flipScaleX','Game_Battler_clearMotion','replace','iuUFS','getLastPluginCommandInterpreter','BattleSystemBTB','iconHeight','WXAkl','CEjIg','IWiqp','jimzX','isDamagePopupRequested','zoomDuration','updateStateSprite','sEieG','addWeaponSwapCommand','move','Window_BattleLog_displayMpDamage','callOkHandler','_createClientArea','weatherType','textSizeEx','BSEVy','setHelpWindowItem','autoBattleStyle','checkTpbInputClose','hVJoP','_targetOpacity','restore','_dimmerSprite','battlerShadowScaleX','Exploiter','makeDeepCopy','YcYjO','_phase','zBpNc','addAttackCommand','xCbbS','kqftW','lineHeight','fMaJf','_battlerName','addedDebuffs','gWqef','sgISa','isTpb','MAXMP','Nhclm','checkAutoCustomActionSequenceNotetagEffect','currentClass','viPJm','_subject','Scene_Boot_onDatabaseLoaded','cIBbU','getInputButtonString','requestMotionRefresh','RFZkb','some','faceWidth','MqplR','actionBattleCoreJS','arPenRate','ActSeq_Mechanics_DeathBreak','_skillWindow','prepareBorderActor','HNjpq','Game_Interpreter_command283','format','Sprite_Damage_createChildSprite','ActSeq_Mechanics_OtbOrder','sWBDB','updateBorderStyle','JIpoy','showHelpWindow','FocusY','cancelButtonText','DTB','createHelpWindowBattleCore','svBattlerShadowVisible','undecided','Settings','ApNit','glSjY','xskia','isBattleFlipped','skillItemWindowRectMiddle','CommandWidth','updateFrame','COMBAT\x20LOG','setBattleCameraOffset','checkShowHideBattleNotetags','Actor','waitForNewLine','HalfActions','fittingHeight','text','performMoveToTargets','Game_Battler_performDamage','SkillItemStandardCols','vJRtR','BattleManager_onEscapeFailure','_cancelButton','fvnqz','_scene','KCcyP','isDebuffAffected','rzMeH','clamp','UeVIn','BattleManager_checkBattleEnd','STsLD','initBattlePortrait','placeGauge','setLastPluginCommandInterpreter','itemTextAlign','shift','isSkill','isSTB','applyHardDamageCap','VisuMZ_2_BattleSystemFTB','updateShadow','jCbcl','CmdIconOptions','ActSeq_Mechanics_CtbOrder','adjustPosition_ScaleDown','turnCount','return\x200','setSTBExploited','DBDYU','WaitForProjectile','ActSeq_Skew_WaitForSkew','updateBorderSprite','trueRandomTarget','JS\x20ESCAPE\x20SUCCESS','portrait','WaitCount','kuDXo','statusTextAutoBattleStyle','parse','ConvertActionSequenceTarget','startTpbTurn','processVictory','getWtypeIdWithName','VisuMZ_3_ActSeqProjectiles','clearBattleRefreshRequest','Parse_Notetags_TraitObjects','playReflection','performActionMotions','isAnyoneInjectAnimating','SnYIR','CheckVisibleSkillNotetags','drain','WaitForZoom','Skill-%1-%2','MpGaugeOffsetX','atbInterrupt','startDamagePopup','showNormalAnimation','StatusWindowAttachmentBackOffsetY','isForOpponent','alive\x20opponents\x20not\x20target','_waitMode','length','_iconIndex','FDokF','_tempActor','currentExt','commandStyleCheck','join','_index','performAttack','CmdIconItem','addLoadListener','iconText','_forcedBattlers','IconSet','battleInjectPrep','erDIT','dbFRV','right','displayHpDamage','BoostPoints','repositionCancelButtonBorderStyle','alive\x20actors\x20not\x20target','GnhsV','displayBattleCoreTransitionErrorMsg','mpDamageFmt','_visualHpGauge_JustDied','Scene_Battle_itemWindowRect','ActSeq_Mechanics_Immortal','_animationContainer','PeXsi','DBNtS','ChargeRate','KtQOJ','QsuLB','Scene_Battle_onEnemyOk','MAgDU','hpHealingFmt','removeImmortal','findTargetSprite','VQJWx','YXynC','startInjectAnimation','JBpOS','Window_BattleLog_displayActionResults','ShowFacesListStyle','IPlBD','drawTextEx','JS\x20%1REGENERATE','_stypeIDs','activate','_updateCursorArea','Game_Action_apply','maxTp','SkillsStatesCore','_executedValue','contentsOpacity','initVisibility','StateIconOffsetX','PreDamageAsTargetJS','repeatTargets','processActorCommandCancelTPB','updateEventMain','displayRemovedStates','missle','executeDamage','MANUAL','inBattle','battleSkew','ZjTGW','ReflectPlayback','_effectDuration','XdtGL','evalDamageFormulaBattleCore','criticalDmgFlat','NqxNn','_namesCount','CYFaG','ShowHide','getSkillIdWithName','setSkill','Fjmme','drawItemStatusXPStyle','isCustomActionSequence','onDisabledPartyCommandSelection','smooth','applyItem','JS\x20%1APPLY\x20%2','GJiif','Targets1','LOJuJ','description','SceneManager_push','AGI','changeBattlebacks','NameAttachStateIcon','battleEffect','_homeX','getBattlePortrait','qwxTj','ShowWeapon','ActSeq_Animation_PlayAtCoordinate','placeActorName','dOhYQ','siFME','Enable','gFZUR','updateShadowVisibility','dZRLn','Game_Action_isForFriend','#ffffff','rfYTs','updateAttachedSprites','isMoving','BTB','pages','updateHomeMove','EscapeSuccessJS','ShowMissEvasion','expTotal','startOpacity','removeChild','swapEnemyIDs','isUndecided','addShowHpGaugeCommand','_interpreter','ActSeq_Mechanics_HpMpTp','createTroopNote','+%1\x20MP','WHBdJ','Class-%1-%2','Game_BattlerBase_initMembers','showEnemyAttackAnimation','compatibilityVisible','DamageFlat','charging','PyGsk','ActSeq_Set_FinishAction','isFrameVisible','_lastEnemy','isPreviousSceneBattleTransitionable','_targetFloatHeight','PUZJK','cancel','oVGcY','checkExtendTroopCompatibility','CopyCombatLog','TPB','_cursorArea','setBattleSkew','StatusWindowAttachmentFrontOffsetX','_requestRefresh','maxItems','requestFauxAnimation','callNextMethod','10BjPRpk','_back1Sprite','isBattleCoreTargetScope','lBYxF','RsLoC','createBorderStylePortraitSprite','setupRgbSplitImpactFilter','VariableID','ActSeq_Projectile_Icon','coreEngineRepositionEnemies','NqLtp','cxzHz','statusText','dIcWR','VisIj','battleAnimation','isSkillItemWindowsMiddle','ZbPin','width','lYtMv','HEqSu','ZXKDR','emerge','Game_Action_clear','AddOption','SvppF','isSideButtonLayout','evalDamageFormula','jsScaleDown','DvitX','animationWait','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','isForRandom','_lastRegenFrameCount','GroupDigits','Sprite_Actor_updateFrame','IKPYn','isTickBased','applyForcedGameTroopSettingsBattleCore','isCommandEnabled','makeBattleCommand','Game_Interpreter_updateWaitMode','_angleEasing','dfLIt','createChildSprite','Radius','isAlwaysHidden','current\x20target','Game_Action_numRepeats','Game_Map_battleback1Name','CriticalDmgFlat','VariableDmg','ActSeq_Motion_MotionType','processRandomizedData','chantStyle','Sprite_Enemy_createStateIconSprite','Debuffs','JJqDB','CalcActionSpeedJS','bDDkK','Sprite_Actor_updateBitmap','text\x20target','Window_BattleLog_popupDamage','ShowCurrentState','list','_immortal','Sprite_Actor_updateShadow','createCancelButton','klhAn','isBorderStylePortraitShown','CriticalHitFlat','Scene_Map_updateCallMenu','isDead','NextTurn','hidden','DistanceAdjust','show','CreateActionSequenceTargets','_backAttachmentSprite','message1','canAttackBattleCore','SLYSs','_padding','ZzxUq','Game_Actor_makeActionList','ActSeq_Mechanics_BoostPointsStoreData','effects','isAnyoneSpinning','Formula','_currentActor','priority','nUzPw','Window_BattleLog_performCounter','needsSelection','updateShadowPosition','PostDamageAsTargetJS','getBattlePortraitOffsetY','code','ZXdvF','ActSeq_Animation_ChangeBattlePortrait','createBattleUIOffsetX','_eventId','checkShowHideSwitchNotetags','freezeTime','Elements','QJrgs','_skewWholeDuration','createDigits','isAppeared','_animationSprites','_additionalSprites','vnOGV','hgQbW','NameAlwaysHidden','WvnkI','parent','createAutoBattleWindow','addChildAt','rJJGy','_homeWholeDuration','_targetSkewX','waitForAnimation','applyImmortal','addBattleCoreAutoBattleStyleCommand','isCTB','bsRPZ','addSkillTypeCommand','zADEa','VUiYo','CQSNP','setTroopPage','KhGoH','dSeGA','ScaleToFit','pauseInjectAnimation','_damageContainer','13779621KcfuWP','VisuMZ_1_MainMenuCore','applyAngleChange','_growY','dimColor2','wwUSt','isActing','_commonEventIDs','regenerateAllBattleCore','itemHit','substitute','PopupPosition','RevertAngle','_currentAngle','_stateSprite','Window_BattleLog_performEvasion','setBattleAngle','getAttackMotionSlot','regenerateAll','Variable','casting','svBattlerData','ScaleX','missed','createTargetsJS','wrPbM','BOkaB','DKQdA','name','ActSeq_Target_PrevTarget','updateAngleCalculations','IOjEb','ActionSkillMsg2','clearBattleCoreData','Scene_Battle_commandFight','isAffectedByBreakShield','ksAra','TOPmb','_battleLayoutStyle','ClearBattleLog','BfgAr','Game_Temp_requestAnimation','IconStypeMagic','BattleStartEvent','ShowRemovedState','ONaRp','registerCommand','XPActorCommandLines','pQcAv','attackAnimationId1','open','Direction','parseForcedGameTroopSettingsBattleCore','battlerSmoothImage','applyDamageCaps','makeSuccess','setActiveWeaponSet','EyxEw','_baseX','moveToStartPositionBattleCore','innerWidth','SSHBv','onBattleEnd','requestPointAnimation','Game_Action_itemEffectAddAttackState','Sprite_Enemy_updateStateSprite','alive\x20friends','isAlwaysVisible','helpWindowRect','ActSeq_Movement_Scale','DistanceX','bkGSR','okTargetSelectionVisibility','EnableDamageCap','alive\x20battlers','split','repeats','showAnimation','ActSeq_Animation_CastAnimation','_forcedBattleLayout','ActSeq_Impact_MotionBlurScreen','moveBattlerHomeToPoint','createStateIconSprite','moveToStartPosition','battleGrow','getDefeatedEnemies','createHelpWindow','isForFriend','ZvuDP','_flashDuration','DefaultDamageStyle','boxWidth','frameVisible','onEscapeFailure','DefaultHardCap','HpGaugeOffsetY','ActSeq_Set_WholeActionSet','charged','xvmrw','6uJwHVM','scope','_enemies','_motionCount','pop','MotionFrameWait','attackSkillId','dead','processBattleCoreJS','addExtendedTroopMembers','performSubstitute','ZjkYA','isEscapeCommandEnabled','_target','isDying','jsScaleToFit','RacUG','inputtingAction','iatUF','slices','alive\x20friends\x20not\x20user','targetSpritePosition','addImmortal','Style','switchToWeaponType','_displayBattleCoreTransitionErrorMsg','pushBaseLine','_list','loadWindowskin','Sprite_Actor_setActorHome','updateStyleOpacity','ActiveTpbOptionsMessage','BattleEndEvent','NicBd','_svBattlerData','QrCpD','ActSeq_Camera_Reset','drawItemImage','Parse_Notetags_Targets','LmHtS','callUpdateHelp','Game_Party_removeActor','fQDCB','setValue','abnormal','ActSeq_BattleLog_AddText','VisuMZ_2_HorrorEffects','initialize','fCYBq','log','Game_Map_encounterList','isCommonEventReserved','NameFontSize','TjyHq','HelpEscape','addDebuff','ARRAYSTR','ActionSkillMsg1','onGrowEnd','startGrow','_armorPenetration','HitRate','HP_Flat','ParseItemNotetags','freezeMotion','max','process_VisuMZ_BattleCore_BaseTroops','resizeWindowBorderStyle','PreRegenerateJS','endBattle','Game_Action_isForRandom','displayCritical','battleSys','BattleManager_startBattle','performMiss','pow','battleCoreResumeLaunchBattle','DamageRate','constructor','Window_ActorCommand_setup','ActionEnd','mvMaT','start','vOVeA','PostDamage%1JS','isPreviousScene','ActorCmd','isDTB','ActSeq_Mechanics_CustomDmgFormula','isIncludedInEnemyWindow','ActSeq_Mechanics_OnceParallel','ShowMpDmg','ActionCount','ActSeq_Movement_FaceDirection','QcvcG','processRefresh','tpbCommandFight','hwbnn','_waitCount','isItem','globalAlpha','_homeY','isOpen','selectNextCommandTpb','Height','hasBeenDefeatedBefore','battlerSprites','hLzPB','PreEndBattleJS','ActSeq_Mechanics_DamagePopup','ShowCounter','ActSeq_Animation_ShowAnimation','mainSpriteScaleX','aTzBv','Window_Options_statusText','SVwMq','_actionBattlers','Game_BattlerBase_canGuard','getAttackMotion','ActSeq_Impact_BlueRedInvert','ZsoIO','yqcuU','battleback1Name','GwFOn','hEWrG','AddHpGaugeOption','updateEffectsContainer','alive\x20friends\x20not\x20target','CriticalDuration','3vShpUe','ConfigManager_applyData','cameraDuration','StartTurnMsg','Scene_Battle_createPartyCommandWindow','freezeFrame','BattleManager_endBattle','drawItemStyleIconText','SHWUV','hitRate','waitForFloat','changeBattlerOpacity','Slot','apply','windowAreaHeight','VeXSP','fnordRemovedStates','autoSelect','_makeFontNameText','process_VisuMZ_BattleCore_CreateRegExp','addChildToBack','partyCommandWindowRect','Sprite_SvEnemy','Ebsgq','isAnyoneFloating','_offsetX','PreStartBattleJS','createHpGaugeSprite','setHorrorEffectSettings','isNextScene','Game_Enemy_transform','oRsMk','shsWa','filterArea','onEncounterBattleCore','MotionIdle','commandNameWindowDrawBackground','isCharging','getSkillTypes','SkewX','head','Aowtx','StartTurnShow','movement','33jwtbeS','isBattleRefreshRequested','PRE-','_battler','setCommonEvent','alive\x20actors','WaitForScale','stop','BattleCore','statusWindowRectDefaultStyle','WIULj','bjsYt','maxLines','bbONi','fillRect','YbfvI','_createCursorSprite','bbRre','ActSeq_Animation_ActionAnimation','updateCallMenu','isInputting','battler','isAnyoneGrowing','drawItemBackground','CounterPlayback','isBTB','updatePhase','AllowCollapse','BattleLog','isForOpponentBattleCore','CmdIconEscape','ZYNMV','adjustPosition_ScaleToFit','Window_BattleLog_performAction','EFFECT_COMMON_EVENT','isAnyProjectilePresent','setImmortal','vvayS','SvWeaponMass-%1-%2','Scene_Battle_start','Window_BattleLog_performMiss','createActors','invokeAction','State-%1-%2','173167KUwkEJ','StatusWindowSkinHide','isActionSelectionValid','BTestBypass','CdaKa','TwNYg','addText','refreshCursor','updateUiContainerPosition','BattleManager_selectNextCommand','canGuardBattleCore','Wave','pause','actorId','Parse_Notetags_Action','_angleRevertOnFinish','itemWindowRect','NhXgU','nTSPF','equips','czutN','MpJEH','VisuMZ_2_BattleSystemBTB','DusTz','_drawTextOutline','_createCursorArea','Window_BattleLog_performActionStart','invokeMagicReflection','drawEnemyName','Victory','usePremadeActionSequence','SkillItemBorderCols','setupActionSet','xKWPM','ParseSkillNotetags','isMeleeMultiTargetAction','scale','concat','ActSeq_Mechanics_AtbGauge','Enemy','mGCIm','DefaultStyle','Scene_Battle_windowAreaHeight','DefaultSoftCap','DEF','ActionEndUpdate','impUS','Game_Battler_onBattleStart','Weapon-%1-%2','_skillIDs','StatusWindowSelectableBackHide','Mcnlt','Tylwn','_jumpMaxHeight','context','TbRQF','updateCancel','loadBattleback1','Game_Action_needsSelection','fight','setupBlueRedInvertImpactFilter','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','ActSeq_BattleLog_Refresh','toLowerCase','flashDuration','TJIbQ','ShowEnemyGauge','height','_freezeMotionData','process_VisuMZ_BattleCore_DamageStyles','isATB','ActSeq_Zoom_WaitForZoom','partyCommandWindowRectBorderStyle','Window_BattleLog_displayCurrentState','Amp','zZEoP','addedBuffs','FTWqV','jIoyj','_statusWindow','CTHDB','startMotion','setupBattleCoreData','VisuMZ_4_BreakShields','Scene_Battle_selectNextCommand','Game_Actor_setup','StartName','prepareCustomActionSequence','hrRvI','getItemDamageAmountTextOriginal','Game_Battler_performEvasion','xoDWY','JS\x20%1END\x20BATTLE','waitForOpacity','bairS','isFloating','Sprite_Battler_startMove','VisuMZ_1_SkillsStatesCore','stepFlinch','Voubj','_svBattlerSprite','RRCku','tYgmz','ZVFAa','LskPY','updateOnceParallelInterpreters','speed','createAnimationSprite','isShownOnBattlePortrait','dead\x20actors','Sprite_Battler_isMoving','Scene_Battle_skillWindowRect','qQiiv','getMenuImage','setupFont','Scene_Map_initialize','mainSprite','bVnhR','removeActor','shadow','_regionBattleback1','surprise','resize','drawItemImagePortraitStyle','Opacity','makeEscapeRatio','_methods','_windowLayer','VisuMZ_4_CombatLog','StepDistanceY','%1Damage%2JS','applyTargetFilters','_battleCoreAddedElements','setupCriticalEffect','startAction','partyCommandWindowRectDefaultStyle','performCastAnimation','note','PostApplyAsTargetJS','Scene_Battle_startPartyCommandSelection','Targets2','_onceParallelInterpreters','playEnemyAttack','PopupShiftY','initMembersBattleCore','setGuard','qvDNU','IVpQe','isAnyoneJumping','ActSeq_Projectile_Animation','Game_Action_isForOpponent','liWAo','XUROy','_reflectionTarget','_flinched','QoL','mjWik','skillItemWindowRectBorderStyle','clone','StatusWindowSkinFilename','HpcEd','UdJYT','jsScaleUp','STR','updateOpacity','alphabetic','getAttackWeaponAnimationId','isForAll','FlinchDistanceX','Window_BattleLog_displayCritical','azzSC','startJump','updateBitmap','StateIconOffsetY','createAnimationContainer','isAttack','itemHeight','YXeAW','\x5cI[%1]%2','Window_BattleEnemy_show','attack','thrgk','_weather','extraPositionScaledY','erWPE','ShowCosts','moveBattlerToPoint','AKLbI','vDUEl','enemyNames','onJumpEnd','validTargets','startSpin','_createDamageContainer','Actor-%1-%2','pTIHR','skillTypes','playOnceParallelTroopPage','createContents','LUK','ingsI','lQOgu','battleback2Name','fnordAddedStates','prev\x20target','BattleManager_startTurn','Sprite_Battler_setBattler','displayStartMessages','OTngZ','SwitchMissEvade','autoBattle','ActSeq_Impact_ShockwaveCenterTargets','requestMotion','faksj','PGrbi','_damages','PreEndTurnJS','umWfu','_multipliers','applyBattleCoreJS','PkwBo','EbaOL','iJtMo','applyEasing','motionSpeed','displayMpDamage','hide','ENjvp','AcOhn','TextColor','retreat','numTargets','displayCounter','CoreEngine','Scene_Battle_createHelpWindow','battleZoom','shdpy','gainMp','BindCommonEventKeysForGroup','onHomeMoveEnd','Pxibu','zKsIU','irxBQ','performAttackSlot','innerHeight','ElementStatusCore','YXZHq','removeOnceParallelInterpreter','autoBattleWindowRect','RsNCE','Point','getItemDamageAmountTextBattleCore','custom','createEnemyNameContainer','eDLqo','commandStyle','command301_PreBattleEvent','nmZlL','startFloat','noSimilarSTypes','VjXbV','updateFlip','stateRate','setupHpGaugeSprite','isBattleSys','finalizeScale','apPFf','_borderPortraitTargetX','dcYkg','autoBattleStart','magicReflection','setup','7509352iocFvo','GaFZj','deadMembers','removeBuff','isAnyoneInjectAniPrepping','WaitForJump','addOnceParallelInterpreter','isMagicSkill','redraw','needsSelectionBattleCore','Scene_Battle_startActorCommandSelection','IzXuG','ActSeq_Horror_Clear','isForOne','CoPXK','oBOIi','svBattlerName','regionId','canAttack','ATK','all\x20targets','pointX','addActor','splice','_helpWindow','bitmapWidth','_actor','process_VisuMZ_BattleCore_PluginParams','weapons','uiInputPosition','VisuMZ_1_ElementStatusCore','isDeathStateAffected','ActSeq_Mechanics_EnemyEscape','spinBattler','dragonbonesData','_animationCount','motionType','Game_BattlerBase_eraseState','PreStartActionJS','alterType','gUiyj','zYyKh','Sprite_Enemy_setHue','oLNut','finishActionSet','autoMeleeMultiTargetActionSet','alive\x20opponents','DNiWx','_lastAction','Window_ItemList_maxCols','SvBattlerSolo-%1-%2','position','ActSeq_Camera_WaitForCamera','SkillItemMiddleLayout','Scene_Options_maxCommands','Window_BattleLog_pushBaseLine','VisuMZ_2_BattleSystemETB','FlashColor','removedBuffs','IgGbc','Mechanics','ActionEffect','_enemyNameContainer','updateWaitMode','Buffs','ParseClassNotetags','setBattlerFacePoint','Game_Battler_makeSpeed','dSkIx','displayChangedStates','hpDamageFmt','checkCacheKey','Scene_Battle_updateStatusWindowPosition','clearActiveWeaponSlot','isMagical','CmdTextAlign','vweLp','isEnemy','command236','EVAL','performEvasion','dfyOZ','GIQUk','_skewEasing','hardDamageCap','setupZoomBlurImpactFilter','actorCommandAutoBattle','Scene_Battle_createAllWindows','battlerName','AntiTintUiElements','cancelTargetSelectionVisibility','ActSeq_Impact_Negative','ParseWeaponNotetags','isNonSubmenuCancel','clearWeaponAnimation','JvdQy','drawIcon','udRot','displayTpDamage','setBattlerMotionTrailData','TpGaugeOffsetY','isGuard','Damage','playOnceParallelInterpreter','performAction','FlinchDuration','bottom','ryKJE','updateLink','drawActorFace','autoBattleUseSkills','_updateFilterArea','-%1','CmdIconAutoBattle','MIN_SAFE_INTEGER','removeState','ConvertParams','NUM','uMDIO','createString','rrBhh','nextActiveWeaponSlot','DualWield','battleCommands','extraPositionX','WFpBM','addEscapeCommand','ShuffleArray','allowRandomSpeed','dead\x20battlers','applyData','CmdStyle','MAXHP','attackMotions','ForceExploiter','qUkyN','battleCoreTpbMainPhase','svAnchorY','endAnimation','_back2Sprite','singleSkill','yyqFy','SceneManager_isSceneChanging','svAnchorX','Pre','updateShadowScale','ActSeq_Mechanics_EtbAction','ParseStateNotetags','removeHorrorEffect','startPartyCommandSelection','ActSeq_Motion_WaitMotionFrame','guardSkillId','fHEff','JS\x20ESCAPE\x20FAILURE','includes','CommandVisible','formula','PostStartActionJS','mmp','sHUzj','deathStateId','CPadl','YnTRb','_cacheTextWidth','%1RegenerateJS','makeData','helpAreaHeight','ijcjC','updateCustomActionSequence','MessageWait','makeDamageValue','showPortraits','AnchorX','Game_Battler_startTpbTurn','_autoBattleWindow','3787724UnxRYj','jsOneForOne','battleMove','evaded','_borderPortraitSprite','kKmbt','VisuMZ_2_BattleSystemCTB','ThuVk','TpbActiveChangeEnabled','ClRGE','createJS','FJIgb','twCZR','isSideView','ActSeq_Movement_FaceTarget','neGCN','requestDragonbonesAnimation','hIisU','ActSeq_Movement_HomeReset','_motion','_battleCoreBattleStartEvent','BattleLogRectJS','ActSeq_Impact_ShockwaveEachTargets','itemCri','hOqPN','OffsetY','contains','friendsUnit','dead\x20friends','commandAutoBattle','HQqbU','ActSeq_Movement_WaitForOpacity','otKZV','MaxLines','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','jDmhG','EtFZm','VisuMZ_3_ActSeqImpact','rXjeJ','BattleManager_cancelActorInput','BattleSystemSTB','default','isActor','getHalfActionsPTB','ConfigManager_makeData','addGuardCommand','AwWlH','HsWLN','index','finishActorInput','EXNtl','status','_isBattlerFlipped','isAlive','StepDuration','jmuZH','updateGrow','VisuMZ_2_BattleSystemATB','ActSeq_Mechanics_StbRemoveExcessActions','ActSeq_Horror_TVRemove','subject','makeActionOrders','prototype','createInnerPortrait','JqwPI','svShadow','Scene_Options','updateHelp','EscapeFailureJS','setupOversaturateImpactFilter','centerFrontViewSprite','motionIdle','addFightCommand','_logWindow','opacity','performFlinch','IQbHv','spMYu','Wrlow','focus','Game_Action_itemEffectAddNormalState','addChildToUiContainer','softDamageCapRate','GpMxD','windowskin','eiLOy','Game_BattlerBase_die','ActionItemMsg','min','occasion','fontSize','actions','front\x20center','Game_BattlerBase_isStateResist','_angleDuration','_colorType','setAttack','gaugeLineHeight','expRate','getHardDamageCap','actor','traitObjects','KPQxW','WASzZ','xoMGf','selectNextActor','createActorCommandWindowBattleCore','skills','drawGauge','initElementStatusCore','visible','odPmm','gomIF','BackColor','commandSymbol','vLxPR','reserveCommonEvent','addCommand','_weaponSprite','ActSeq_Mechanics_RemoveState','EBeEv','Strength','isPlaytest','sKUPC','hue','ParseAllNotetags','APHmP','RegExp','allowCollapse','setHue','clearFreezeMotionForWeapons','ActSeq_BattleLog_WaitForBattleLog','isDuringNonLoopingMotion','makeTargets','CriticalHitMultiplier','children','displayBuffs','command283','KdshL','FGzqm','isCustomBattleScope','process_VisuMZ_BattleCore_jsFunctions','ActSeq_Inject_WaitForInjectAni','origin','XLnxh','close','ActSeq_Impact_MotionTrailCreate','placeStateIcon','_spriteset','Tahbj','ShowAddedDebuff','die','numRepeats','createEmptyBitmap','Window_BattleLog_performCollapse','ActSeq_Mechanics_StbExploit','ATTACK','commandNameWindowDrawText','_shadowSprite','ARRAYJSON','measureTextWidth','GSgkh','Game_BattlerBase_refresh','Scene_Battle_terminate','ActSeq_Impact_MotionTrailRemove','StepDistanceX','ActSeq_Mechanics_BreakShieldChange','makeAutoBattleActions','isOnCurrentMap','ActSeq_Impact_Oversaturate','CheckVisibleSwitchNotetags','TP_Flat','CastPhysical','isSelected','addOptionsCommand','indexOf','_ptbActionCost','maxCommands','SvMotionIdleSolo-%1-%2','VRoZy','_floatHeight','isOpponent','_battleField','battleSpin','Scene_Battle_onActorOk','removedStateObjects','ARRAYNUM','Sprite_Battler_update','tGNrw','command3011','reverse','Window_BattleLog_displayTpDamage','aSbnF','registerDefeatedEnemy','oWxGX','isSceneChanging','damageOffsetY','stypeId','targetDistortionSpritePosition','getBattlePortraitOffsetX','SkewY','PreDamage%1JS','cCIAi','WaitForSkew','revertTpbCachedActor','gUZAp','sideview_ui','iBvgw','addGeneralOptions','kHNCy','_motionType','item','isAtbChargingState','dying','XxNfA','clearFreezeMotion','applyGlobalCommonEventNotetags','LjLeS','process_VisuMZ_BattleCore_PreBattleCommonEvent','Window_BattleLog_performSubstitute','EmergeText','ActSeq_Movement_Skew','isPartyCommandWindowDisabled','ActSeq_Zoom_Reset','ActSeq_Mechanics_RemoveBuffDebuff','CKmZd','isFlipped','BindCommonEventKeysForObj','_actorSprites','SmoothImage','loadPicture','%1StartActionJS','%1EndBattleJS','stateMotionIndex','snapForBackground','ActSeq_Mechanics_AddBuffDebuff','refreshRequest','isSpinning','onTurnEnd','parameters','GUARD','gbMdg','Window_SkillList_maxCols','startInput','rfMHb','ActSeq_Animation_AttackAnimation2','_forcing','isChanting','gainTp','save','swing','_actorWindow','CommonEventID','_indent','_growDuration','_battleCoreBattleResumeAfter','wZuUC','PostApplyAsUserJS','performTpbActiveCheckSwitch','getDualWieldTimes','Window_BattleLog_displayEvasion','weaponTypes','MoLJW','ActSeq_Mechanics_AddState','POST-','getNextSubject','gdnat','noise','cancelActorInput','loadBitmap','VisuMZ_2_BattleSystemPTB','Pnhja','RznzG','shouldPopupDamage','Filename','dCZNV','QxLVO','ChangeOrderBy','onRegeneratePlayStateAnimation','VariableHeal','attackStates','collapseType','onDatabaseLoaded','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','_handlers','_animation','onMoveEnd','alive\x20actors\x20not\x20user','battlerShadowScaleY','yDpjg','actionEffect','isAnyoneChangingOpacity','drawText','growBattler','update','adsZC','ActSeq_Mechanics_FtbAction','updatePositionBattleCore','isFriendly','requestAnimation','NameOffsetX','ickPI','xOpEd','arRedRate','updateTargetPosition','getBattlePortraitFilename','KADjP','IhyrD','removeDamageSprite','isQueueOptionsMenu','BATzD','krOyl','isItemCommandEnabled','Window_BattleLog_performRecovery','_targetIndex','isEffecting','ActSeq_Mechanics_ActionEffect','xbKIS','Sprite_Battler_updatePosition','wzAHT','updateSkew','process_VisuMZ_BattleCore_Failsafes','CkTNj','bind','njEgT','Scene_Party','VOfbo','displayActionResults','startMove','dead\x20opponents','pkTPI','QdcRq','updateJump','getItemDamageAmountLabelOriginal','battleFloat','CurrentTurn','_skewX','worldTransform','AutoBattleRect','autoBattleAtStart','Scene_Map_launchBattle','clear','ActSeq_Mechanics_TextPopup','ActionCenteredName','makeCommandList','cameraOffsetDuration','isMVAnimation','_opacityWholeDuration','floatBattler','repkQ','mainSpriteWidth','aXnCD','gjwuI','type','_hpGaugeSprite','escape','drawTextTopAligned','createCommandNameWindow','kDMlW','makeTargetsBattleCore','extraHeight','AutoBattleOK','onEnemyCancel','contents','FRRJM','Window_BattleLog_performActionEnd','updateBattleProcess','WaitForCamera','zWcfK','khxiE','EajiU','updatePosition','dJdBU','ShowPortraitsBorderStyle','isHidden','ActSeq_Motion_FreezeMotionFrame','_defeatedEnemies','MOTIONS','<CUSTOM\x20ACTION\x20SEQUENCE>','AutoBattleCancel','wPeDz','left','PaokI','compareBattlerSprites','StyleON','_commonEventKey','autoMeleeSingleTargetActionSet','createActorCommandWindow','udtRV','BHWgD','floor','gaugeX','isTpbCharged','iterateBattler','FullActions','Izrkc','loop','RLjzA','XGKIH','PopupOffsetX','ReflectAnimation','PrioritySortActors','StatusWindowAttachmentBack'];_0x4fa7=function(){return _0x2ccac2;};return _0x4fa7();}